import{S as F5t,i as T5t,s as M5t,e as a,k as l,w as f,t as o,M as E5t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as C5t}from"../../chunks/vendor-6b77c823.js";import{T as $Pr}from"../../chunks/Tip-39098574.js";import{D as C}from"../../chunks/Docstring-90e3aa51.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function w5t(If){let Z,io,ce,Ce,lo,he,Me,Xo,qi,qf,fa,Ni,ji,LC,Nf,xe,co,Di,On,xC,Vn,Xn,kC,Gi,zn,SC,Oi,jf,Da;return{c(){Z=a("p"),io=o("If your "),ce=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),he=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),qi=a("code"),qf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Ni=a("code"),ji=o('"new-model"'),LC=o(")."),Nf=l(),xe=a("p"),co=o("Likewise, if your "),Di=a("code"),On=o("NewModel"),xC=o(" is a subclass of "),Vn=a("a"),Xn=o("PreTrainedModel"),kC=o(`, make sure its
`),Gi=a("code"),zn=o("config_class"),SC=o(` attribute is set to the same class you use when registering the model (here
`),Oi=a("code"),jf=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var ue=s(Z);io=r(ue,"If your "),ce=n(ue,"CODE",{});var F9=s(ce);Ce=r(F9,"NewModelConfig"),F9.forEach(t),lo=r(ue," is a subclass of "),he=n(ue,"CODE",{});var Vi=s(he);Me=r(Vi,"PretrainedConfig"),Vi.forEach(t),Xo=r(ue,`, make sure its
`),qi=n(ue,"CODE",{});var T9=s(qi);qf=r(T9,"model_type"),T9.forEach(t),fa=r(ue," attribute is set to the same key you use when registering the config (here "),Ni=n(ue,"CODE",{});var M9=s(Ni);ji=r(M9,'"new-model"'),M9.forEach(t),LC=r(ue,")."),ue.forEach(t),Nf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),Di=n(zo,"CODE",{});var Ga=s(Di);On=r(Ga,"NewModel"),Ga.forEach(t),xC=r(zo," is a subclass of "),Vn=n(zo,"A",{href:!0});var E9=s(Vn);Xn=r(E9,"PreTrainedModel"),E9.forEach(t),kC=r(zo,`, make sure its
`),Gi=n(zo,"CODE",{});var Df=s(Gi);zn=r(Df,"config_class"),Df.forEach(t),SC=r(zo,` attribute is set to the same class you use when registering the model (here
`),Oi=n(zo,"CODE",{});var C9=s(Oi);jf=r(C9,"NewModelConfig"),C9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(Vn,"href","/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel")},m(fo,ue){b(fo,Z,ue),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo),e(Z,he),e(he,Me),e(Z,Xo),e(Z,qi),e(qi,qf),e(Z,fa),e(Z,Ni),e(Ni,ji),e(Z,LC),b(fo,Nf,ue),b(fo,xe,ue),e(xe,co),e(xe,Di),e(Di,On),e(xe,xC),e(xe,Vn),e(Vn,Xn),e(xe,kC),e(xe,Gi),e(Gi,zn),e(xe,SC),e(xe,Oi),e(Oi,jf),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(xe)}}}function A5t(If){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){Z=n(he,"P",{});var Me=s(Z);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,Z,Me),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(he){he&&t(Z)}}}function y5t(If){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){Z=n(he,"P",{});var Me=s(Z);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,Z,Me),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(he){he&&t(Z)}}}function L5t(If){let Z,io,ce,Ce,lo,he,Me,Xo,qi,qf,fa,Ni,ji,LC,Nf,xe,co,Di,On,xC,Vn,Xn,kC,Gi,zn,SC,Oi,jf,Da,fo,ue,F9,Vi,T9,M9,zo,Ga,E9,Df,C9,XIe,SRe,Xi,Gf,dY,RC,zIe,cY,QIe,RRe,Qn,WIe,fY,HIe,UIe,mY,JIe,YIe,BRe,BC,PRe,w9,KIe,$Re,Of,IRe,zi,Vf,gY,PC,ZIe,hY,eqe,qRe,Qo,$C,oqe,IC,rqe,A9,tqe,aqe,nqe,qC,sqe,pY,lqe,iqe,dqe,mo,NC,cqe,_Y,fqe,mqe,Qi,gqe,uY,hqe,pqe,bY,_qe,uqe,bqe,v,Xf,vY,vqe,Fqe,y9,Tqe,Mqe,Eqe,zf,FY,Cqe,wqe,L9,Aqe,yqe,Lqe,Qf,TY,xqe,kqe,x9,Sqe,Rqe,Bqe,Wf,MY,Pqe,$qe,k9,Iqe,qqe,Nqe,Hf,EY,jqe,Dqe,S9,Gqe,Oqe,Vqe,Uf,CY,Xqe,zqe,R9,Qqe,Wqe,Hqe,Jf,wY,Uqe,Jqe,B9,Yqe,Kqe,Zqe,Yf,AY,eNe,oNe,P9,rNe,tNe,aNe,Kf,yY,nNe,sNe,$9,lNe,iNe,dNe,Zf,LY,cNe,fNe,I9,mNe,gNe,hNe,em,xY,pNe,_Ne,q9,uNe,bNe,vNe,om,kY,FNe,TNe,N9,MNe,ENe,CNe,rm,SY,wNe,ANe,j9,yNe,LNe,xNe,tm,RY,kNe,SNe,D9,RNe,BNe,PNe,am,BY,$Ne,INe,G9,qNe,NNe,jNe,nm,PY,DNe,GNe,O9,ONe,VNe,XNe,sm,$Y,zNe,QNe,V9,WNe,HNe,UNe,lm,IY,JNe,YNe,X9,KNe,ZNe,eje,im,qY,oje,rje,z9,tje,aje,nje,dm,NY,sje,lje,Q9,ije,dje,cje,cm,jY,fje,mje,W9,gje,hje,pje,fm,DY,_je,uje,H9,bje,vje,Fje,mm,GY,Tje,Mje,U9,Eje,Cje,wje,gm,OY,Aje,yje,J9,Lje,xje,kje,hm,VY,Sje,Rje,Y9,Bje,Pje,$je,pm,XY,Ije,qje,K9,Nje,jje,Dje,_m,zY,Gje,Oje,Z9,Vje,Xje,zje,um,QY,Qje,Wje,ex,Hje,Uje,Jje,bm,WY,Yje,Kje,ox,Zje,eDe,oDe,vm,HY,rDe,tDe,rx,aDe,nDe,sDe,Fm,UY,lDe,iDe,tx,dDe,cDe,fDe,Tm,JY,mDe,gDe,ax,hDe,pDe,_De,Mm,YY,uDe,bDe,nx,vDe,FDe,TDe,Em,KY,MDe,EDe,sx,CDe,wDe,ADe,Cm,ZY,yDe,LDe,lx,xDe,kDe,SDe,wm,eK,RDe,BDe,ix,PDe,$De,IDe,Am,oK,qDe,NDe,dx,jDe,DDe,GDe,ym,rK,ODe,VDe,cx,XDe,zDe,QDe,Lm,tK,WDe,HDe,fx,UDe,JDe,YDe,xm,aK,KDe,ZDe,mx,eGe,oGe,rGe,km,nK,tGe,aGe,gx,nGe,sGe,lGe,Sm,sK,iGe,dGe,hx,cGe,fGe,mGe,Rm,lK,gGe,hGe,px,pGe,_Ge,uGe,Bm,iK,bGe,vGe,_x,FGe,TGe,MGe,Pm,dK,EGe,CGe,ux,wGe,AGe,yGe,$m,cK,LGe,xGe,bx,kGe,SGe,RGe,Im,fK,BGe,PGe,vx,$Ge,IGe,qGe,qm,mK,NGe,jGe,Fx,DGe,GGe,OGe,Nm,gK,VGe,XGe,Tx,zGe,QGe,WGe,jm,hK,HGe,UGe,Mx,JGe,YGe,KGe,Dm,pK,ZGe,eOe,Ex,oOe,rOe,tOe,Gm,_K,aOe,nOe,Cx,sOe,lOe,iOe,Om,uK,dOe,cOe,wx,fOe,mOe,gOe,Vm,bK,hOe,pOe,Ax,_Oe,uOe,bOe,Xm,vK,vOe,FOe,yx,TOe,MOe,EOe,zm,FK,COe,wOe,Lx,AOe,yOe,LOe,Qm,TK,xOe,kOe,xx,SOe,ROe,BOe,Wm,MK,POe,$Oe,kx,IOe,qOe,NOe,Hm,EK,jOe,DOe,Sx,GOe,OOe,VOe,Um,CK,XOe,zOe,Rx,QOe,WOe,HOe,Jm,wK,UOe,JOe,Bx,YOe,KOe,ZOe,Ym,AK,eVe,oVe,Px,rVe,tVe,aVe,Km,yK,nVe,sVe,$x,lVe,iVe,dVe,Zm,LK,cVe,fVe,Ix,mVe,gVe,hVe,eg,xK,pVe,_Ve,qx,uVe,bVe,vVe,og,kK,FVe,TVe,Nx,MVe,EVe,CVe,rg,SK,wVe,AVe,jx,yVe,LVe,xVe,tg,RK,kVe,SVe,Dx,RVe,BVe,PVe,ag,BK,$Ve,IVe,Gx,qVe,NVe,jVe,ng,PK,DVe,GVe,Ox,OVe,VVe,XVe,sg,$K,zVe,QVe,Vx,WVe,HVe,UVe,lg,IK,JVe,YVe,Xx,KVe,ZVe,eXe,ig,qK,oXe,rXe,zx,tXe,aXe,nXe,dg,NK,sXe,lXe,Qx,iXe,dXe,cXe,cg,jK,fXe,mXe,Wx,gXe,hXe,pXe,fg,DK,_Xe,uXe,Hx,bXe,vXe,FXe,mg,GK,TXe,MXe,Ux,EXe,CXe,wXe,gg,OK,AXe,yXe,Jx,LXe,xXe,kXe,hg,VK,SXe,RXe,Yx,BXe,PXe,$Xe,pg,XK,IXe,qXe,Kx,NXe,jXe,DXe,_g,zK,GXe,OXe,Zx,VXe,XXe,zXe,ug,QK,QXe,WXe,ek,HXe,UXe,JXe,bg,WK,YXe,KXe,ok,ZXe,eze,oze,vg,HK,rze,tze,rk,aze,nze,sze,Fg,UK,lze,ize,tk,dze,cze,fze,Tg,JK,mze,gze,ak,hze,pze,_ze,Mg,YK,uze,bze,nk,vze,Fze,Tze,Eg,KK,Mze,Eze,sk,Cze,wze,Aze,Cg,ZK,yze,Lze,lk,xze,kze,Sze,wg,eZ,Rze,Bze,ik,Pze,$ze,Ize,Ag,oZ,qze,Nze,dk,jze,Dze,Gze,yg,rZ,Oze,Vze,ck,Xze,zze,Qze,Lg,tZ,Wze,Hze,fk,Uze,Jze,Yze,xg,aZ,Kze,Zze,mk,eQe,oQe,rQe,kg,nZ,tQe,aQe,gk,nQe,sQe,lQe,Sg,sZ,iQe,dQe,hk,cQe,fQe,mQe,Rg,lZ,gQe,hQe,pk,pQe,_Qe,uQe,Bg,iZ,bQe,vQe,_k,FQe,TQe,MQe,Pg,dZ,EQe,CQe,uk,wQe,AQe,yQe,$g,cZ,LQe,xQe,bk,kQe,SQe,RQe,Ig,fZ,BQe,PQe,vk,$Qe,IQe,qQe,qg,mZ,NQe,jQe,Fk,DQe,GQe,OQe,gZ,VQe,XQe,jC,zQe,Ng,DC,QQe,hZ,WQe,NRe,Wi,jg,pZ,GC,HQe,_Z,UQe,jRe,Wo,OC,JQe,VC,YQe,Tk,KQe,ZQe,eWe,XC,oWe,uZ,rWe,tWe,aWe,go,zC,nWe,bZ,sWe,lWe,Oa,iWe,vZ,dWe,cWe,FZ,fWe,mWe,TZ,gWe,hWe,pWe,E,Wn,MZ,_We,uWe,Mk,bWe,vWe,Ek,FWe,TWe,MWe,Hn,EZ,EWe,CWe,Ck,wWe,AWe,wk,yWe,LWe,xWe,Un,CZ,kWe,SWe,Ak,RWe,BWe,yk,PWe,$We,IWe,Dg,wZ,qWe,NWe,Lk,jWe,DWe,GWe,Jn,AZ,OWe,VWe,xk,XWe,zWe,kk,QWe,WWe,HWe,Gg,yZ,UWe,JWe,Sk,YWe,KWe,ZWe,Og,LZ,eHe,oHe,Rk,rHe,tHe,aHe,Vg,xZ,nHe,sHe,Bk,lHe,iHe,dHe,Yn,kZ,cHe,fHe,Pk,mHe,gHe,$k,hHe,pHe,_He,Kn,SZ,uHe,bHe,Ik,vHe,FHe,qk,THe,MHe,EHe,Zn,RZ,CHe,wHe,Nk,AHe,yHe,jk,LHe,xHe,kHe,Xg,BZ,SHe,RHe,Dk,BHe,PHe,$He,zg,PZ,IHe,qHe,Gk,NHe,jHe,DHe,es,$Z,GHe,OHe,Ok,VHe,XHe,Vk,zHe,QHe,WHe,Qg,IZ,HHe,UHe,Xk,JHe,YHe,KHe,os,qZ,ZHe,eUe,zk,oUe,rUe,Qk,tUe,aUe,nUe,rs,NZ,sUe,lUe,Wk,iUe,dUe,Hk,cUe,fUe,mUe,ts,jZ,gUe,hUe,Uk,pUe,_Ue,DZ,uUe,bUe,vUe,Wg,GZ,FUe,TUe,Jk,MUe,EUe,CUe,as,OZ,wUe,AUe,Yk,yUe,LUe,Kk,xUe,kUe,SUe,Hg,VZ,RUe,BUe,Zk,PUe,$Ue,IUe,ns,XZ,qUe,NUe,eS,jUe,DUe,oS,GUe,OUe,VUe,ss,zZ,XUe,zUe,rS,QUe,WUe,tS,HUe,UUe,JUe,ls,QZ,YUe,KUe,aS,ZUe,eJe,nS,oJe,rJe,tJe,Ug,WZ,aJe,nJe,sS,sJe,lJe,iJe,is,HZ,dJe,cJe,lS,fJe,mJe,iS,gJe,hJe,pJe,Jg,UZ,_Je,uJe,dS,bJe,vJe,FJe,ds,JZ,TJe,MJe,cS,EJe,CJe,fS,wJe,AJe,yJe,cs,YZ,LJe,xJe,mS,kJe,SJe,gS,RJe,BJe,PJe,fs,KZ,$Je,IJe,hS,qJe,NJe,pS,jJe,DJe,GJe,ms,ZZ,OJe,VJe,_S,XJe,zJe,uS,QJe,WJe,HJe,Yg,eee,UJe,JJe,bS,YJe,KJe,ZJe,gs,oee,eYe,oYe,vS,rYe,tYe,FS,aYe,nYe,sYe,hs,ree,lYe,iYe,TS,dYe,cYe,MS,fYe,mYe,gYe,ps,tee,hYe,pYe,ES,_Ye,uYe,CS,bYe,vYe,FYe,_s,aee,TYe,MYe,wS,EYe,CYe,AS,wYe,AYe,yYe,us,nee,LYe,xYe,yS,kYe,SYe,LS,RYe,BYe,PYe,bs,see,$Ye,IYe,xS,qYe,NYe,kS,jYe,DYe,GYe,Kg,lee,OYe,VYe,SS,XYe,zYe,QYe,vs,iee,WYe,HYe,RS,UYe,JYe,BS,YYe,KYe,ZYe,Zg,dee,eKe,oKe,PS,rKe,tKe,aKe,eh,cee,nKe,sKe,$S,lKe,iKe,dKe,Fs,fee,cKe,fKe,IS,mKe,gKe,qS,hKe,pKe,_Ke,Ts,mee,uKe,bKe,NS,vKe,FKe,jS,TKe,MKe,EKe,oh,gee,CKe,wKe,DS,AKe,yKe,LKe,Ms,hee,xKe,kKe,GS,SKe,RKe,OS,BKe,PKe,$Ke,Es,pee,IKe,qKe,VS,NKe,jKe,XS,DKe,GKe,OKe,Cs,_ee,VKe,XKe,zS,zKe,QKe,QS,WKe,HKe,UKe,ws,uee,JKe,YKe,WS,KKe,ZKe,HS,eZe,oZe,rZe,As,bee,tZe,aZe,US,nZe,sZe,JS,lZe,iZe,dZe,rh,vee,cZe,fZe,YS,mZe,gZe,hZe,th,Fee,pZe,_Ze,KS,uZe,bZe,vZe,ah,Tee,FZe,TZe,ZS,MZe,EZe,CZe,nh,Mee,wZe,AZe,eR,yZe,LZe,xZe,ys,Eee,kZe,SZe,oR,RZe,BZe,rR,PZe,$Ze,IZe,sh,Cee,qZe,NZe,tR,jZe,DZe,GZe,Ls,wee,OZe,VZe,aR,XZe,zZe,nR,QZe,WZe,HZe,xs,Aee,UZe,JZe,sR,YZe,KZe,lR,ZZe,eeo,oeo,ks,yee,reo,teo,iR,aeo,neo,dR,seo,leo,ieo,Ss,Lee,deo,ceo,cR,feo,meo,fR,geo,heo,peo,Rs,xee,_eo,ueo,mR,beo,veo,gR,Feo,Teo,Meo,Bs,kee,Eeo,Ceo,hR,weo,Aeo,pR,yeo,Leo,xeo,lh,See,keo,Seo,_R,Reo,Beo,Peo,ih,Ree,$eo,Ieo,uR,qeo,Neo,jeo,Ps,Bee,Deo,Geo,bR,Oeo,Veo,vR,Xeo,zeo,Qeo,$s,Pee,Weo,Heo,FR,Ueo,Jeo,TR,Yeo,Keo,Zeo,Is,$ee,eoo,ooo,MR,roo,too,ER,aoo,noo,soo,dh,Iee,loo,ioo,CR,doo,coo,foo,ch,qee,moo,goo,wR,hoo,poo,_oo,fh,Nee,uoo,boo,AR,voo,Foo,Too,mh,jee,Moo,Eoo,yR,Coo,woo,Aoo,gh,Dee,yoo,Loo,LR,xoo,koo,Soo,qs,Gee,Roo,Boo,xR,Poo,$oo,kR,Ioo,qoo,Noo,hh,Oee,joo,Doo,SR,Goo,Ooo,Voo,ph,Vee,Xoo,zoo,RR,Qoo,Woo,Hoo,Ns,Xee,Uoo,Joo,BR,Yoo,Koo,PR,Zoo,ero,oro,js,zee,rro,tro,$R,aro,nro,IR,sro,lro,iro,Qee,dro,cro,QC,fro,_h,WC,mro,Wee,gro,DRe,Hi,uh,Hee,HC,hro,Uee,pro,GRe,Ho,UC,_ro,JC,uro,qR,bro,vro,Fro,YC,Tro,Jee,Mro,Ero,Cro,$e,KC,wro,Yee,Aro,yro,Va,Lro,Kee,xro,kro,Zee,Sro,Rro,eoe,Bro,Pro,$ro,ee,bh,ooe,Iro,qro,NR,Nro,jro,Dro,vh,roe,Gro,Oro,jR,Vro,Xro,zro,Fh,toe,Qro,Wro,DR,Hro,Uro,Jro,Th,aoe,Yro,Kro,GR,Zro,eto,oto,Mh,noe,rto,tto,OR,ato,nto,sto,Eh,soe,lto,ito,VR,dto,cto,fto,Ch,loe,mto,gto,XR,hto,pto,_to,wh,ioe,uto,bto,zR,vto,Fto,Tto,Ah,doe,Mto,Eto,QR,Cto,wto,Ato,yh,coe,yto,Lto,WR,xto,kto,Sto,Lh,foe,Rto,Bto,HR,Pto,$to,Ito,xh,moe,qto,Nto,UR,jto,Dto,Gto,kh,goe,Oto,Vto,JR,Xto,zto,Qto,Sh,hoe,Wto,Hto,YR,Uto,Jto,Yto,Rh,poe,Kto,Zto,KR,eao,oao,rao,Bh,_oe,tao,aao,ZR,nao,sao,lao,Ph,uoe,iao,dao,eB,cao,fao,mao,$h,boe,gao,hao,oB,pao,_ao,uao,Ih,voe,bao,vao,rB,Fao,Tao,Mao,qh,Eao,Foe,Cao,wao,ZC,Aao,Nh,e5,yao,Toe,Lao,ORe,Ui,jh,Moe,o5,xao,Eoe,kao,VRe,Uo,r5,Sao,t5,Rao,tB,Bao,Pao,$ao,a5,Iao,Coe,qao,Nao,jao,Ie,n5,Dao,woe,Gao,Oao,Ji,Vao,Aoe,Xao,zao,yoe,Qao,Wao,Hao,ke,Dh,Loe,Uao,Jao,aB,Yao,Kao,Zao,Gh,xoe,eno,ono,nB,rno,tno,ano,Oh,koe,nno,sno,sB,lno,ino,dno,Vh,Soe,cno,fno,lB,mno,gno,hno,Xh,Roe,pno,_no,iB,uno,bno,vno,zh,Boe,Fno,Tno,dB,Mno,Eno,Cno,Qh,Poe,wno,Ano,cB,yno,Lno,xno,Wh,$oe,kno,Sno,fB,Rno,Bno,Pno,Hh,$no,Ioe,Ino,qno,s5,Nno,Uh,l5,jno,qoe,Dno,XRe,Yi,Jh,Noe,i5,Gno,joe,Ono,zRe,Jo,d5,Vno,Ki,Xno,mB,zno,Qno,gB,Wno,Hno,Uno,c5,Jno,Doe,Yno,Kno,Zno,Xr,f5,eso,Goe,oso,rso,Zi,tso,Ooe,aso,nso,hB,sso,lso,iso,Voe,dso,cso,m5,fso,qe,g5,mso,Xoe,gso,hso,Xa,pso,zoe,_so,uso,Qoe,bso,vso,Woe,Fso,Tso,Mso,T,Yh,Hoe,Eso,Cso,pB,wso,Aso,yso,Kh,Uoe,Lso,xso,_B,kso,Sso,Rso,Zh,Joe,Bso,Pso,uB,$so,Iso,qso,ep,Yoe,Nso,jso,bB,Dso,Gso,Oso,op,Koe,Vso,Xso,vB,zso,Qso,Wso,rp,Zoe,Hso,Uso,FB,Jso,Yso,Kso,tp,ere,Zso,elo,TB,olo,rlo,tlo,ap,ore,alo,nlo,MB,slo,llo,ilo,np,rre,dlo,clo,EB,flo,mlo,glo,sp,tre,hlo,plo,CB,_lo,ulo,blo,lp,are,vlo,Flo,wB,Tlo,Mlo,Elo,ip,nre,Clo,wlo,AB,Alo,ylo,Llo,dp,sre,xlo,klo,yB,Slo,Rlo,Blo,cp,lre,Plo,$lo,LB,Ilo,qlo,Nlo,fp,ire,jlo,Dlo,xB,Glo,Olo,Vlo,mp,dre,Xlo,zlo,kB,Qlo,Wlo,Hlo,gp,cre,Ulo,Jlo,SB,Ylo,Klo,Zlo,hp,fre,eio,oio,RB,rio,tio,aio,pp,mre,nio,sio,BB,lio,iio,dio,_p,gre,cio,fio,PB,mio,gio,hio,up,hre,pio,_io,$B,uio,bio,vio,bp,pre,Fio,Tio,IB,Mio,Eio,Cio,vp,_re,wio,Aio,qB,yio,Lio,xio,Fp,ure,kio,Sio,NB,Rio,Bio,Pio,Tp,bre,$io,Iio,jB,qio,Nio,jio,Mp,vre,Dio,Gio,DB,Oio,Vio,Xio,Ep,Fre,zio,Qio,GB,Wio,Hio,Uio,Cp,Tre,Jio,Yio,OB,Kio,Zio,edo,wp,Mre,odo,rdo,VB,tdo,ado,ndo,Ap,Ere,sdo,ldo,XB,ido,ddo,cdo,Ds,Cre,fdo,mdo,zB,gdo,hdo,QB,pdo,_do,udo,yp,wre,bdo,vdo,WB,Fdo,Tdo,Mdo,Lp,Are,Edo,Cdo,HB,wdo,Ado,ydo,xp,yre,Ldo,xdo,UB,kdo,Sdo,Rdo,kp,Lre,Bdo,Pdo,JB,$do,Ido,qdo,Sp,xre,Ndo,jdo,YB,Ddo,Gdo,Odo,Rp,kre,Vdo,Xdo,KB,zdo,Qdo,Wdo,Bp,Sre,Hdo,Udo,ZB,Jdo,Ydo,Kdo,Pp,Rre,Zdo,eco,eP,oco,rco,tco,$p,Bre,aco,nco,oP,sco,lco,ico,Ip,Pre,dco,cco,rP,fco,mco,gco,qp,$re,hco,pco,tP,_co,uco,bco,Np,Ire,vco,Fco,aP,Tco,Mco,Eco,jp,qre,Cco,wco,nP,Aco,yco,Lco,Dp,Nre,xco,kco,sP,Sco,Rco,Bco,Gp,jre,Pco,$co,lP,Ico,qco,Nco,Op,Dre,jco,Dco,iP,Gco,Oco,Vco,Vp,Gre,Xco,zco,dP,Qco,Wco,Hco,Xp,Ore,Uco,Jco,cP,Yco,Kco,Zco,zp,Vre,efo,ofo,fP,rfo,tfo,afo,Qp,Xre,nfo,sfo,mP,lfo,ifo,dfo,Wp,zre,cfo,ffo,gP,mfo,gfo,hfo,Hp,Qre,pfo,_fo,hP,ufo,bfo,vfo,Up,Wre,Ffo,Tfo,pP,Mfo,Efo,Cfo,Jp,Hre,wfo,Afo,_P,yfo,Lfo,xfo,Yp,Ure,kfo,Sfo,uP,Rfo,Bfo,Pfo,Kp,Jre,$fo,Ifo,bP,qfo,Nfo,jfo,Zp,Yre,Dfo,Gfo,vP,Ofo,Vfo,Xfo,e_,Kre,zfo,Qfo,FP,Wfo,Hfo,Ufo,o_,Zre,Jfo,Yfo,TP,Kfo,Zfo,emo,r_,ete,omo,rmo,MP,tmo,amo,nmo,t_,ote,smo,lmo,EP,imo,dmo,cmo,a_,rte,fmo,mmo,CP,gmo,hmo,pmo,n_,tte,_mo,umo,wP,bmo,vmo,Fmo,s_,ate,Tmo,Mmo,AP,Emo,Cmo,wmo,l_,nte,Amo,ymo,yP,Lmo,xmo,kmo,i_,ste,Smo,Rmo,LP,Bmo,Pmo,$mo,d_,lte,Imo,qmo,xP,Nmo,jmo,Dmo,c_,ite,Gmo,Omo,kP,Vmo,Xmo,zmo,f_,dte,Qmo,Wmo,SP,Hmo,Umo,Jmo,m_,cte,Ymo,Kmo,RP,Zmo,ego,ogo,g_,fte,rgo,tgo,BP,ago,ngo,sgo,h_,mte,lgo,igo,PP,dgo,cgo,fgo,p_,gte,mgo,ggo,$P,hgo,pgo,_go,__,hte,ugo,bgo,IP,vgo,Fgo,Tgo,u_,pte,Mgo,Ego,qP,Cgo,wgo,Ago,b_,_te,ygo,Lgo,NP,xgo,kgo,Sgo,v_,ute,Rgo,Bgo,jP,Pgo,$go,Igo,F_,bte,qgo,Ngo,DP,jgo,Dgo,Ggo,T_,vte,Ogo,Vgo,GP,Xgo,zgo,Qgo,M_,Fte,Wgo,Hgo,OP,Ugo,Jgo,Ygo,E_,Tte,Kgo,Zgo,VP,eho,oho,rho,C_,Mte,tho,aho,XP,nho,sho,lho,w_,Ete,iho,dho,zP,cho,fho,mho,A_,Cte,gho,hho,QP,pho,_ho,uho,y_,wte,bho,vho,WP,Fho,Tho,Mho,L_,Ate,Eho,Cho,HP,who,Aho,yho,x_,yte,Lho,xho,UP,kho,Sho,Rho,k_,Lte,Bho,Pho,JP,$ho,Iho,qho,S_,xte,Nho,jho,YP,Dho,Gho,Oho,R_,kte,Vho,Xho,KP,zho,Qho,Who,B_,Ste,Hho,Uho,ZP,Jho,Yho,Kho,P_,Rte,Zho,epo,e$,opo,rpo,tpo,$_,Bte,apo,npo,o$,spo,lpo,ipo,I_,dpo,Pte,cpo,fpo,$te,mpo,gpo,Ite,hpo,ppo,h5,QRe,ed,q_,qte,p5,_po,Nte,upo,WRe,Yo,_5,bpo,od,vpo,r$,Fpo,Tpo,t$,Mpo,Epo,Cpo,u5,wpo,jte,Apo,ypo,Lpo,zr,b5,xpo,Dte,kpo,Spo,rd,Rpo,Gte,Bpo,Ppo,a$,$po,Ipo,qpo,Ote,Npo,jpo,v5,Dpo,Ne,F5,Gpo,Vte,Opo,Vpo,za,Xpo,Xte,zpo,Qpo,zte,Wpo,Hpo,Qte,Upo,Jpo,Ypo,S,N_,Wte,Kpo,Zpo,n$,e_o,o_o,r_o,j_,Hte,t_o,a_o,s$,n_o,s_o,l_o,D_,Ute,i_o,d_o,l$,c_o,f_o,m_o,G_,Jte,g_o,h_o,i$,p_o,__o,u_o,O_,Yte,b_o,v_o,d$,F_o,T_o,M_o,V_,Kte,E_o,C_o,c$,w_o,A_o,y_o,X_,Zte,L_o,x_o,f$,k_o,S_o,R_o,z_,eae,B_o,P_o,m$,$_o,I_o,q_o,Q_,oae,N_o,j_o,g$,D_o,G_o,O_o,W_,rae,V_o,X_o,h$,z_o,Q_o,W_o,H_,tae,H_o,U_o,p$,J_o,Y_o,K_o,U_,aae,Z_o,euo,_$,ouo,ruo,tuo,J_,nae,auo,nuo,u$,suo,luo,iuo,Y_,sae,duo,cuo,b$,fuo,muo,guo,K_,lae,huo,puo,v$,_uo,uuo,buo,Z_,iae,vuo,Fuo,F$,Tuo,Muo,Euo,eu,dae,Cuo,wuo,T$,Auo,yuo,Luo,ou,cae,xuo,kuo,M$,Suo,Ruo,Buo,ru,fae,Puo,$uo,E$,Iuo,quo,Nuo,tu,mae,juo,Duo,C$,Guo,Ouo,Vuo,au,gae,Xuo,zuo,w$,Quo,Wuo,Huo,nu,hae,Uuo,Juo,A$,Yuo,Kuo,Zuo,su,pae,e6o,o6o,y$,r6o,t6o,a6o,lu,_ae,n6o,s6o,L$,l6o,i6o,d6o,iu,uae,c6o,f6o,x$,m6o,g6o,h6o,du,bae,p6o,_6o,k$,u6o,b6o,v6o,cu,vae,F6o,T6o,S$,M6o,E6o,C6o,fu,Fae,w6o,A6o,R$,y6o,L6o,x6o,mu,Tae,k6o,S6o,B$,R6o,B6o,P6o,gu,Mae,$6o,I6o,P$,q6o,N6o,j6o,hu,Eae,D6o,G6o,$$,O6o,V6o,X6o,pu,Cae,z6o,Q6o,I$,W6o,H6o,U6o,_u,wae,J6o,Y6o,q$,K6o,Z6o,e1o,uu,Aae,o1o,r1o,N$,t1o,a1o,n1o,bu,yae,s1o,l1o,j$,i1o,d1o,c1o,vu,Lae,f1o,m1o,D$,g1o,h1o,p1o,Fu,xae,_1o,u1o,G$,b1o,v1o,F1o,Tu,kae,T1o,M1o,O$,E1o,C1o,w1o,Mu,Sae,A1o,y1o,V$,L1o,x1o,k1o,Eu,S1o,Rae,R1o,B1o,Bae,P1o,$1o,Pae,I1o,q1o,T5,HRe,td,Cu,$ae,M5,N1o,Iae,j1o,URe,Ko,E5,D1o,ad,G1o,X$,O1o,V1o,z$,X1o,z1o,Q1o,C5,W1o,qae,H1o,U1o,J1o,Qr,w5,Y1o,Nae,K1o,Z1o,nd,ebo,jae,obo,rbo,Q$,tbo,abo,nbo,Dae,sbo,lbo,A5,ibo,je,y5,dbo,Gae,cbo,fbo,Qa,mbo,Oae,gbo,hbo,Vae,pbo,_bo,Xae,ubo,bbo,vbo,$,wu,zae,Fbo,Tbo,W$,Mbo,Ebo,Cbo,Au,Qae,wbo,Abo,H$,ybo,Lbo,xbo,yu,Wae,kbo,Sbo,U$,Rbo,Bbo,Pbo,Lu,Hae,$bo,Ibo,J$,qbo,Nbo,jbo,xu,Uae,Dbo,Gbo,Y$,Obo,Vbo,Xbo,ku,Jae,zbo,Qbo,K$,Wbo,Hbo,Ubo,Su,Yae,Jbo,Ybo,Z$,Kbo,Zbo,e2o,Ru,Kae,o2o,r2o,eI,t2o,a2o,n2o,Bu,Zae,s2o,l2o,oI,i2o,d2o,c2o,Pu,ene,f2o,m2o,rI,g2o,h2o,p2o,$u,one,_2o,u2o,tI,b2o,v2o,F2o,Iu,rne,T2o,M2o,aI,E2o,C2o,w2o,qu,tne,A2o,y2o,nI,L2o,x2o,k2o,Nu,ane,S2o,R2o,sI,B2o,P2o,$2o,ju,nne,I2o,q2o,lI,N2o,j2o,D2o,Du,sne,G2o,O2o,iI,V2o,X2o,z2o,Gu,lne,Q2o,W2o,dI,H2o,U2o,J2o,Ou,ine,Y2o,K2o,cI,Z2o,evo,ovo,Vu,dne,rvo,tvo,fI,avo,nvo,svo,Xu,cne,lvo,ivo,mI,dvo,cvo,fvo,zu,fne,mvo,gvo,gI,hvo,pvo,_vo,Qu,mne,uvo,bvo,hI,vvo,Fvo,Tvo,Wu,gne,Mvo,Evo,pI,Cvo,wvo,Avo,Hu,hne,yvo,Lvo,_I,xvo,kvo,Svo,Uu,pne,Rvo,Bvo,uI,Pvo,$vo,Ivo,Ju,_ne,qvo,Nvo,bI,jvo,Dvo,Gvo,Yu,une,Ovo,Vvo,vI,Xvo,zvo,Qvo,Ku,bne,Wvo,Hvo,FI,Uvo,Jvo,Yvo,Zu,vne,Kvo,Zvo,TI,eFo,oFo,rFo,e6,Fne,tFo,aFo,MI,nFo,sFo,lFo,o6,Tne,iFo,dFo,EI,cFo,fFo,mFo,r6,Mne,gFo,hFo,CI,pFo,_Fo,uFo,t6,Ene,bFo,vFo,wI,FFo,TFo,MFo,a6,Cne,EFo,CFo,AI,wFo,AFo,yFo,n6,wne,LFo,xFo,yI,kFo,SFo,RFo,s6,BFo,Ane,PFo,$Fo,yne,IFo,qFo,Lne,NFo,jFo,L5,JRe,sd,l6,xne,x5,DFo,kne,GFo,YRe,Zo,k5,OFo,ld,VFo,LI,XFo,zFo,xI,QFo,WFo,HFo,S5,UFo,Sne,JFo,YFo,KFo,Wr,R5,ZFo,Rne,e0o,o0o,id,r0o,Bne,t0o,a0o,kI,n0o,s0o,l0o,Pne,i0o,d0o,B5,c0o,De,P5,f0o,$ne,m0o,g0o,Wa,h0o,Ine,p0o,_0o,qne,u0o,b0o,Nne,v0o,F0o,T0o,I,i6,jne,M0o,E0o,SI,C0o,w0o,A0o,d6,Dne,y0o,L0o,RI,x0o,k0o,S0o,c6,Gne,R0o,B0o,BI,P0o,$0o,I0o,f6,One,q0o,N0o,PI,j0o,D0o,G0o,m6,Vne,O0o,V0o,$I,X0o,z0o,Q0o,g6,Xne,W0o,H0o,II,U0o,J0o,Y0o,h6,zne,K0o,Z0o,qI,eTo,oTo,rTo,p6,Qne,tTo,aTo,NI,nTo,sTo,lTo,_6,Wne,iTo,dTo,jI,cTo,fTo,mTo,u6,Hne,gTo,hTo,DI,pTo,_To,uTo,b6,Une,bTo,vTo,GI,FTo,TTo,MTo,v6,Jne,ETo,CTo,OI,wTo,ATo,yTo,F6,Yne,LTo,xTo,VI,kTo,STo,RTo,T6,Kne,BTo,PTo,XI,$To,ITo,qTo,M6,Zne,NTo,jTo,zI,DTo,GTo,OTo,E6,ese,VTo,XTo,QI,zTo,QTo,WTo,C6,ose,HTo,UTo,WI,JTo,YTo,KTo,w6,rse,ZTo,e7o,HI,o7o,r7o,t7o,A6,tse,a7o,n7o,UI,s7o,l7o,i7o,y6,ase,d7o,c7o,JI,f7o,m7o,g7o,L6,nse,h7o,p7o,YI,_7o,u7o,b7o,x6,sse,v7o,F7o,KI,T7o,M7o,E7o,k6,lse,C7o,w7o,ZI,A7o,y7o,L7o,S6,ise,x7o,k7o,eq,S7o,R7o,B7o,R6,dse,P7o,$7o,oq,I7o,q7o,N7o,B6,cse,j7o,D7o,rq,G7o,O7o,V7o,P6,fse,X7o,z7o,tq,Q7o,W7o,H7o,$6,mse,U7o,J7o,aq,Y7o,K7o,Z7o,I6,gse,eMo,oMo,nq,rMo,tMo,aMo,q6,hse,nMo,sMo,sq,lMo,iMo,dMo,N6,pse,cMo,fMo,_se,mMo,gMo,hMo,j6,use,pMo,_Mo,lq,uMo,bMo,vMo,D6,bse,FMo,TMo,iq,MMo,EMo,CMo,G6,vse,wMo,AMo,dq,yMo,LMo,xMo,O6,Fse,kMo,SMo,cq,RMo,BMo,PMo,V6,$Mo,Tse,IMo,qMo,Mse,NMo,jMo,Ese,DMo,GMo,$5,KRe,dd,X6,Cse,I5,OMo,wse,VMo,ZRe,er,q5,XMo,cd,zMo,fq,QMo,WMo,mq,HMo,UMo,JMo,N5,YMo,Ase,KMo,ZMo,e4o,Hr,j5,o4o,yse,r4o,t4o,fd,a4o,Lse,n4o,s4o,gq,l4o,i4o,d4o,xse,c4o,f4o,D5,m4o,Ge,G5,g4o,kse,h4o,p4o,Ha,_4o,Sse,u4o,b4o,Rse,v4o,F4o,Bse,T4o,M4o,E4o,ne,z6,Pse,C4o,w4o,hq,A4o,y4o,L4o,Q6,$se,x4o,k4o,pq,S4o,R4o,B4o,W6,Ise,P4o,$4o,_q,I4o,q4o,N4o,H6,qse,j4o,D4o,uq,G4o,O4o,V4o,U6,Nse,X4o,z4o,bq,Q4o,W4o,H4o,J6,jse,U4o,J4o,vq,Y4o,K4o,Z4o,Y6,Dse,eEo,oEo,Fq,rEo,tEo,aEo,K6,Gse,nEo,sEo,Tq,lEo,iEo,dEo,Z6,Ose,cEo,fEo,Mq,mEo,gEo,hEo,e1,Vse,pEo,_Eo,Eq,uEo,bEo,vEo,o1,Xse,FEo,TEo,Cq,MEo,EEo,CEo,r1,zse,wEo,AEo,wq,yEo,LEo,xEo,t1,Qse,kEo,SEo,Aq,REo,BEo,PEo,a1,Wse,$Eo,IEo,yq,qEo,NEo,jEo,n1,Hse,DEo,GEo,Lq,OEo,VEo,XEo,s1,Use,zEo,QEo,xq,WEo,HEo,UEo,l1,Jse,JEo,YEo,kq,KEo,ZEo,eCo,i1,oCo,Yse,rCo,tCo,Kse,aCo,nCo,Zse,sCo,lCo,O5,eBe,md,d1,ele,V5,iCo,ole,dCo,oBe,or,X5,cCo,gd,fCo,Sq,mCo,gCo,Rq,hCo,pCo,_Co,z5,uCo,rle,bCo,vCo,FCo,Ur,Q5,TCo,tle,MCo,ECo,hd,CCo,ale,wCo,ACo,Bq,yCo,LCo,xCo,nle,kCo,SCo,W5,RCo,Oe,H5,BCo,sle,PCo,$Co,Ua,ICo,lle,qCo,NCo,ile,jCo,DCo,dle,GCo,OCo,VCo,y,c1,cle,XCo,zCo,Pq,QCo,WCo,HCo,f1,fle,UCo,JCo,$q,YCo,KCo,ZCo,m1,mle,e5o,o5o,Iq,r5o,t5o,a5o,g1,gle,n5o,s5o,qq,l5o,i5o,d5o,h1,hle,c5o,f5o,Nq,m5o,g5o,h5o,p1,ple,p5o,_5o,jq,u5o,b5o,v5o,_1,_le,F5o,T5o,Dq,M5o,E5o,C5o,u1,ule,w5o,A5o,Gq,y5o,L5o,x5o,b1,ble,k5o,S5o,Oq,R5o,B5o,P5o,v1,vle,$5o,I5o,Vq,q5o,N5o,j5o,F1,Fle,D5o,G5o,Xq,O5o,V5o,X5o,T1,Tle,z5o,Q5o,zq,W5o,H5o,U5o,M1,Mle,J5o,Y5o,Qq,K5o,Z5o,e3o,E1,Ele,o3o,r3o,Wq,t3o,a3o,n3o,C1,Cle,s3o,l3o,Hq,i3o,d3o,c3o,w1,wle,f3o,m3o,Uq,g3o,h3o,p3o,A1,Ale,_3o,u3o,Jq,b3o,v3o,F3o,y1,yle,T3o,M3o,Yq,E3o,C3o,w3o,L1,Lle,A3o,y3o,Kq,L3o,x3o,k3o,x1,xle,S3o,R3o,Zq,B3o,P3o,$3o,k1,kle,I3o,q3o,eN,N3o,j3o,D3o,S1,Sle,G3o,O3o,oN,V3o,X3o,z3o,R1,Rle,Q3o,W3o,rN,H3o,U3o,J3o,B1,Ble,Y3o,K3o,tN,Z3o,ewo,owo,P1,Ple,rwo,two,aN,awo,nwo,swo,$1,$le,lwo,iwo,nN,dwo,cwo,fwo,I1,Ile,mwo,gwo,sN,hwo,pwo,_wo,q1,qle,uwo,bwo,lN,vwo,Fwo,Two,N1,Nle,Mwo,Ewo,iN,Cwo,wwo,Awo,j1,jle,ywo,Lwo,dN,xwo,kwo,Swo,D1,Dle,Rwo,Bwo,cN,Pwo,$wo,Iwo,G1,Gle,qwo,Nwo,fN,jwo,Dwo,Gwo,O1,Ole,Owo,Vwo,mN,Xwo,zwo,Qwo,V1,Vle,Wwo,Hwo,gN,Uwo,Jwo,Ywo,X1,Xle,Kwo,Zwo,hN,eAo,oAo,rAo,z1,zle,tAo,aAo,pN,nAo,sAo,lAo,Q1,Qle,iAo,dAo,_N,cAo,fAo,mAo,W1,Wle,gAo,hAo,uN,pAo,_Ao,uAo,H1,Hle,bAo,vAo,bN,FAo,TAo,MAo,U1,Ule,EAo,CAo,vN,wAo,AAo,yAo,J1,Jle,LAo,xAo,FN,kAo,SAo,RAo,Y1,Yle,BAo,PAo,TN,$Ao,IAo,qAo,K1,Kle,NAo,jAo,MN,DAo,GAo,OAo,Z1,Zle,VAo,XAo,EN,zAo,QAo,WAo,eb,eie,HAo,UAo,CN,JAo,YAo,KAo,ob,oie,ZAo,eyo,wN,oyo,ryo,tyo,rb,rie,ayo,nyo,AN,syo,lyo,iyo,tb,dyo,tie,cyo,fyo,aie,myo,gyo,nie,hyo,pyo,U5,rBe,pd,ab,sie,J5,_yo,lie,uyo,tBe,rr,Y5,byo,_d,vyo,yN,Fyo,Tyo,LN,Myo,Eyo,Cyo,K5,wyo,iie,Ayo,yyo,Lyo,Jr,Z5,xyo,die,kyo,Syo,ud,Ryo,cie,Byo,Pyo,xN,$yo,Iyo,qyo,fie,Nyo,jyo,e3,Dyo,Ve,o3,Gyo,mie,Oyo,Vyo,Ja,Xyo,gie,zyo,Qyo,hie,Wyo,Hyo,pie,Uyo,Jyo,Yyo,G,nb,_ie,Kyo,Zyo,kN,eLo,oLo,rLo,sb,uie,tLo,aLo,SN,nLo,sLo,lLo,lb,bie,iLo,dLo,RN,cLo,fLo,mLo,ib,vie,gLo,hLo,BN,pLo,_Lo,uLo,db,Fie,bLo,vLo,PN,FLo,TLo,MLo,cb,Tie,ELo,CLo,$N,wLo,ALo,yLo,fb,Mie,LLo,xLo,IN,kLo,SLo,RLo,mb,Eie,BLo,PLo,qN,$Lo,ILo,qLo,gb,Cie,NLo,jLo,NN,DLo,GLo,OLo,hb,wie,VLo,XLo,jN,zLo,QLo,WLo,pb,Aie,HLo,ULo,DN,JLo,YLo,KLo,_b,yie,ZLo,e8o,GN,o8o,r8o,t8o,ub,Lie,a8o,n8o,ON,s8o,l8o,i8o,bb,xie,d8o,c8o,VN,f8o,m8o,g8o,vb,kie,h8o,p8o,XN,_8o,u8o,b8o,Fb,Sie,v8o,F8o,zN,T8o,M8o,E8o,Tb,Rie,C8o,w8o,QN,A8o,y8o,L8o,Mb,Bie,x8o,k8o,WN,S8o,R8o,B8o,Eb,Pie,P8o,$8o,HN,I8o,q8o,N8o,Cb,$ie,j8o,D8o,UN,G8o,O8o,V8o,wb,Iie,X8o,z8o,JN,Q8o,W8o,H8o,Ab,qie,U8o,J8o,YN,Y8o,K8o,Z8o,yb,Nie,e9o,o9o,KN,r9o,t9o,a9o,Lb,jie,n9o,s9o,ZN,l9o,i9o,d9o,xb,Die,c9o,f9o,ej,m9o,g9o,h9o,kb,Gie,p9o,_9o,oj,u9o,b9o,v9o,Sb,Oie,F9o,T9o,rj,M9o,E9o,C9o,Rb,Vie,w9o,A9o,tj,y9o,L9o,x9o,Bb,k9o,Xie,S9o,R9o,zie,B9o,P9o,Qie,$9o,I9o,r3,aBe,bd,Pb,Wie,t3,q9o,Hie,N9o,nBe,tr,a3,j9o,vd,D9o,aj,G9o,O9o,nj,V9o,X9o,z9o,n3,Q9o,Uie,W9o,H9o,U9o,Yr,s3,J9o,Jie,Y9o,K9o,Fd,Z9o,Yie,exo,oxo,sj,rxo,txo,axo,Kie,nxo,sxo,l3,lxo,Xe,i3,ixo,Zie,dxo,cxo,Ya,fxo,ede,mxo,gxo,ode,hxo,pxo,rde,_xo,uxo,bxo,da,$b,tde,vxo,Fxo,lj,Txo,Mxo,Exo,Ib,ade,Cxo,wxo,ij,Axo,yxo,Lxo,qb,nde,xxo,kxo,dj,Sxo,Rxo,Bxo,Nb,sde,Pxo,$xo,cj,Ixo,qxo,Nxo,jb,lde,jxo,Dxo,fj,Gxo,Oxo,Vxo,Db,Xxo,ide,zxo,Qxo,dde,Wxo,Hxo,cde,Uxo,Jxo,d3,sBe,Td,Gb,fde,c3,Yxo,mde,Kxo,lBe,ar,f3,Zxo,Md,eko,mj,oko,rko,gj,tko,ako,nko,m3,sko,gde,lko,iko,dko,Kr,g3,cko,hde,fko,mko,Ed,gko,pde,hko,pko,hj,_ko,uko,bko,_de,vko,Fko,h3,Tko,ze,p3,Mko,ude,Eko,Cko,Ka,wko,bde,Ako,yko,vde,Lko,xko,Fde,kko,Sko,Rko,j,Ob,Tde,Bko,Pko,pj,$ko,Iko,qko,Vb,Mde,Nko,jko,_j,Dko,Gko,Oko,Xb,Ede,Vko,Xko,uj,zko,Qko,Wko,zb,Cde,Hko,Uko,bj,Jko,Yko,Kko,Qb,wde,Zko,eSo,vj,oSo,rSo,tSo,Wb,Ade,aSo,nSo,Fj,sSo,lSo,iSo,Hb,yde,dSo,cSo,Tj,fSo,mSo,gSo,Ub,Lde,hSo,pSo,Mj,_So,uSo,bSo,Jb,xde,vSo,FSo,Ej,TSo,MSo,ESo,Yb,kde,CSo,wSo,Cj,ASo,ySo,LSo,Kb,Sde,xSo,kSo,wj,SSo,RSo,BSo,Zb,Rde,PSo,$So,Aj,ISo,qSo,NSo,e2,Bde,jSo,DSo,yj,GSo,OSo,VSo,o2,Pde,XSo,zSo,Lj,QSo,WSo,HSo,r2,$de,USo,JSo,xj,YSo,KSo,ZSo,t2,Ide,eRo,oRo,kj,rRo,tRo,aRo,a2,qde,nRo,sRo,Sj,lRo,iRo,dRo,n2,Nde,cRo,fRo,Rj,mRo,gRo,hRo,s2,jde,pRo,_Ro,Bj,uRo,bRo,vRo,l2,Dde,FRo,TRo,Pj,MRo,ERo,CRo,i2,Gde,wRo,ARo,$j,yRo,LRo,xRo,d2,Ode,kRo,SRo,Ij,RRo,BRo,PRo,c2,Vde,$Ro,IRo,qj,qRo,NRo,jRo,f2,Xde,DRo,GRo,Nj,ORo,VRo,XRo,m2,zde,zRo,QRo,jj,WRo,HRo,URo,g2,Qde,JRo,YRo,Dj,KRo,ZRo,eBo,h2,Wde,oBo,rBo,Gj,tBo,aBo,nBo,p2,Hde,sBo,lBo,Oj,iBo,dBo,cBo,_2,Ude,fBo,mBo,Vj,gBo,hBo,pBo,u2,Jde,_Bo,uBo,Xj,bBo,vBo,FBo,b2,Yde,TBo,MBo,zj,EBo,CBo,wBo,v2,Kde,ABo,yBo,Qj,LBo,xBo,kBo,F2,Zde,SBo,RBo,Wj,BBo,PBo,$Bo,T2,IBo,ece,qBo,NBo,oce,jBo,DBo,rce,GBo,OBo,_3,iBe,Cd,M2,tce,u3,VBo,ace,XBo,dBe,nr,b3,zBo,wd,QBo,Hj,WBo,HBo,Uj,UBo,JBo,YBo,v3,KBo,nce,ZBo,ePo,oPo,Zr,F3,rPo,sce,tPo,aPo,Ad,nPo,lce,sPo,lPo,Jj,iPo,dPo,cPo,ice,fPo,mPo,T3,gPo,Qe,M3,hPo,dce,pPo,_Po,Za,uPo,cce,bPo,vPo,fce,FPo,TPo,mce,MPo,EPo,CPo,R,E2,gce,wPo,APo,Yj,yPo,LPo,xPo,C2,hce,kPo,SPo,Kj,RPo,BPo,PPo,w2,pce,$Po,IPo,Zj,qPo,NPo,jPo,A2,_ce,DPo,GPo,eD,OPo,VPo,XPo,y2,uce,zPo,QPo,oD,WPo,HPo,UPo,L2,bce,JPo,YPo,rD,KPo,ZPo,e$o,x2,vce,o$o,r$o,tD,t$o,a$o,n$o,k2,Fce,s$o,l$o,aD,i$o,d$o,c$o,S2,Tce,f$o,m$o,nD,g$o,h$o,p$o,R2,Mce,_$o,u$o,sD,b$o,v$o,F$o,B2,Ece,T$o,M$o,lD,E$o,C$o,w$o,P2,Cce,A$o,y$o,iD,L$o,x$o,k$o,$2,wce,S$o,R$o,dD,B$o,P$o,$$o,I2,Ace,I$o,q$o,cD,N$o,j$o,D$o,q2,yce,G$o,O$o,fD,V$o,X$o,z$o,N2,Lce,Q$o,W$o,mD,H$o,U$o,J$o,j2,xce,Y$o,K$o,gD,Z$o,eIo,oIo,D2,kce,rIo,tIo,hD,aIo,nIo,sIo,G2,Sce,lIo,iIo,pD,dIo,cIo,fIo,O2,Rce,mIo,gIo,_D,hIo,pIo,_Io,V2,Bce,uIo,bIo,uD,vIo,FIo,TIo,X2,Pce,MIo,EIo,bD,CIo,wIo,AIo,z2,$ce,yIo,LIo,vD,xIo,kIo,SIo,Q2,Ice,RIo,BIo,FD,PIo,$Io,IIo,W2,qce,qIo,NIo,TD,jIo,DIo,GIo,H2,Nce,OIo,VIo,MD,XIo,zIo,QIo,U2,jce,WIo,HIo,ED,UIo,JIo,YIo,J2,Dce,KIo,ZIo,CD,eqo,oqo,rqo,Y2,Gce,tqo,aqo,wD,nqo,sqo,lqo,K2,Oce,iqo,dqo,AD,cqo,fqo,mqo,Z2,Vce,gqo,hqo,yD,pqo,_qo,uqo,ev,Xce,bqo,vqo,LD,Fqo,Tqo,Mqo,ov,zce,Eqo,Cqo,xD,wqo,Aqo,yqo,rv,Qce,Lqo,xqo,kD,kqo,Sqo,Rqo,tv,Wce,Bqo,Pqo,SD,$qo,Iqo,qqo,av,Hce,Nqo,jqo,RD,Dqo,Gqo,Oqo,nv,Uce,Vqo,Xqo,BD,zqo,Qqo,Wqo,sv,Jce,Hqo,Uqo,PD,Jqo,Yqo,Kqo,lv,Yce,Zqo,eNo,$D,oNo,rNo,tNo,iv,aNo,Kce,nNo,sNo,Zce,lNo,iNo,efe,dNo,cNo,E3,cBe,yd,dv,ofe,C3,fNo,rfe,mNo,fBe,sr,w3,gNo,Ld,hNo,ID,pNo,_No,qD,uNo,bNo,vNo,A3,FNo,tfe,TNo,MNo,ENo,et,y3,CNo,afe,wNo,ANo,xd,yNo,nfe,LNo,xNo,ND,kNo,SNo,RNo,sfe,BNo,PNo,L3,$No,We,x3,INo,lfe,qNo,NNo,en,jNo,ife,DNo,GNo,dfe,ONo,VNo,cfe,XNo,zNo,QNo,ffe,cv,mfe,WNo,HNo,jD,UNo,JNo,YNo,fv,KNo,gfe,ZNo,ejo,hfe,ojo,rjo,pfe,tjo,ajo,k3,mBe,kd,mv,_fe,S3,njo,ufe,sjo,gBe,lr,R3,ljo,Sd,ijo,DD,djo,cjo,GD,fjo,mjo,gjo,B3,hjo,bfe,pjo,_jo,ujo,ot,P3,bjo,vfe,vjo,Fjo,Rd,Tjo,Ffe,Mjo,Ejo,OD,Cjo,wjo,Ajo,Tfe,yjo,Ljo,$3,xjo,He,I3,kjo,Mfe,Sjo,Rjo,on,Bjo,Efe,Pjo,$jo,Cfe,Ijo,qjo,wfe,Njo,jjo,Djo,de,gv,Afe,Gjo,Ojo,VD,Vjo,Xjo,zjo,hv,yfe,Qjo,Wjo,XD,Hjo,Ujo,Jjo,pv,Lfe,Yjo,Kjo,zD,Zjo,eDo,oDo,Gs,xfe,rDo,tDo,QD,aDo,nDo,WD,sDo,lDo,iDo,_v,kfe,dDo,cDo,HD,fDo,mDo,gDo,ma,Sfe,hDo,pDo,UD,_Do,uDo,JD,bDo,vDo,YD,FDo,TDo,MDo,uv,Rfe,EDo,CDo,KD,wDo,ADo,yDo,bv,Bfe,LDo,xDo,ZD,kDo,SDo,RDo,vv,Pfe,BDo,PDo,eG,$Do,IDo,qDo,Fv,$fe,NDo,jDo,oG,DDo,GDo,ODo,Tv,Ife,VDo,XDo,rG,zDo,QDo,WDo,Mv,qfe,HDo,UDo,tG,JDo,YDo,KDo,Ev,Nfe,ZDo,eGo,aG,oGo,rGo,tGo,Cv,aGo,jfe,nGo,sGo,Dfe,lGo,iGo,Gfe,dGo,cGo,q3,hBe,Bd,wv,Ofe,N3,fGo,Vfe,mGo,pBe,ir,j3,gGo,Pd,hGo,nG,pGo,_Go,sG,uGo,bGo,vGo,D3,FGo,Xfe,TGo,MGo,EGo,rt,G3,CGo,zfe,wGo,AGo,$d,yGo,Qfe,LGo,xGo,lG,kGo,SGo,RGo,Wfe,BGo,PGo,O3,$Go,Ue,V3,IGo,Hfe,qGo,NGo,rn,jGo,Ufe,DGo,GGo,Jfe,OGo,VGo,Yfe,XGo,zGo,QGo,Kfe,Av,Zfe,WGo,HGo,iG,UGo,JGo,YGo,yv,KGo,eme,ZGo,eOo,ome,oOo,rOo,rme,tOo,aOo,X3,_Be,Id,Lv,tme,z3,nOo,ame,sOo,uBe,dr,Q3,lOo,qd,iOo,dG,dOo,cOo,cG,fOo,mOo,gOo,W3,hOo,nme,pOo,_Oo,uOo,tt,H3,bOo,sme,vOo,FOo,Nd,TOo,lme,MOo,EOo,fG,COo,wOo,AOo,ime,yOo,LOo,U3,xOo,Je,J3,kOo,dme,SOo,ROo,tn,BOo,cme,POo,$Oo,fme,IOo,qOo,mme,NOo,jOo,DOo,Se,xv,gme,GOo,OOo,mG,VOo,XOo,zOo,kv,hme,QOo,WOo,gG,HOo,UOo,JOo,Sv,pme,YOo,KOo,hG,ZOo,eVo,oVo,Rv,_me,rVo,tVo,pG,aVo,nVo,sVo,Bv,ume,lVo,iVo,_G,dVo,cVo,fVo,Pv,bme,mVo,gVo,uG,hVo,pVo,_Vo,$v,vme,uVo,bVo,bG,vVo,FVo,TVo,Iv,Fme,MVo,EVo,vG,CVo,wVo,AVo,qv,yVo,Tme,LVo,xVo,Mme,kVo,SVo,Eme,RVo,BVo,Y3,bBe,jd,Nv,Cme,K3,PVo,wme,$Vo,vBe,cr,Z3,IVo,Dd,qVo,FG,NVo,jVo,TG,DVo,GVo,OVo,ew,VVo,Ame,XVo,zVo,QVo,at,ow,WVo,yme,HVo,UVo,Gd,JVo,Lme,YVo,KVo,MG,ZVo,eXo,oXo,xme,rXo,tXo,rw,aXo,Ye,tw,nXo,kme,sXo,lXo,an,iXo,Sme,dXo,cXo,Rme,fXo,mXo,Bme,gXo,hXo,pXo,nn,jv,Pme,_Xo,uXo,EG,bXo,vXo,FXo,Dv,$me,TXo,MXo,CG,EXo,CXo,wXo,Gv,Ime,AXo,yXo,wG,LXo,xXo,kXo,Ov,qme,SXo,RXo,AG,BXo,PXo,$Xo,Vv,IXo,Nme,qXo,NXo,jme,jXo,DXo,Dme,GXo,OXo,aw,FBe,Od,Xv,Gme,nw,VXo,Ome,XXo,TBe,fr,sw,zXo,Vd,QXo,yG,WXo,HXo,LG,UXo,JXo,YXo,lw,KXo,Vme,ZXo,ezo,ozo,nt,iw,rzo,Xme,tzo,azo,Xd,nzo,zme,szo,lzo,xG,izo,dzo,czo,Qme,fzo,mzo,dw,gzo,Ke,cw,hzo,Wme,pzo,_zo,sn,uzo,Hme,bzo,vzo,Ume,Fzo,Tzo,Jme,Mzo,Ezo,Czo,Re,zv,Yme,wzo,Azo,kG,yzo,Lzo,xzo,Qv,Kme,kzo,Szo,SG,Rzo,Bzo,Pzo,Wv,Zme,$zo,Izo,RG,qzo,Nzo,jzo,Hv,ege,Dzo,Gzo,BG,Ozo,Vzo,Xzo,Uv,oge,zzo,Qzo,PG,Wzo,Hzo,Uzo,Jv,rge,Jzo,Yzo,$G,Kzo,Zzo,eQo,Yv,tge,oQo,rQo,IG,tQo,aQo,nQo,Kv,age,sQo,lQo,qG,iQo,dQo,cQo,Zv,fQo,nge,mQo,gQo,sge,hQo,pQo,lge,_Qo,uQo,fw,MBe,zd,eF,ige,mw,bQo,dge,vQo,EBe,mr,gw,FQo,Qd,TQo,NG,MQo,EQo,jG,CQo,wQo,AQo,hw,yQo,cge,LQo,xQo,kQo,st,pw,SQo,fge,RQo,BQo,Wd,PQo,mge,$Qo,IQo,DG,qQo,NQo,jQo,gge,DQo,GQo,_w,OQo,Ze,uw,VQo,hge,XQo,zQo,ln,QQo,pge,WQo,HQo,_ge,UQo,JQo,uge,YQo,KQo,ZQo,bw,oF,bge,eWo,oWo,GG,rWo,tWo,aWo,rF,vge,nWo,sWo,OG,lWo,iWo,dWo,tF,cWo,Fge,fWo,mWo,Tge,gWo,hWo,Mge,pWo,_Wo,vw,CBe,Hd,aF,Ege,Fw,uWo,Cge,bWo,wBe,gr,Tw,vWo,Ud,FWo,VG,TWo,MWo,XG,EWo,CWo,wWo,Mw,AWo,wge,yWo,LWo,xWo,lt,Ew,kWo,Age,SWo,RWo,Jd,BWo,yge,PWo,$Wo,zG,IWo,qWo,NWo,Lge,jWo,DWo,Cw,GWo,eo,ww,OWo,xge,VWo,XWo,dn,zWo,kge,QWo,WWo,Sge,HWo,UWo,Rge,JWo,YWo,KWo,cn,nF,Bge,ZWo,eHo,QG,oHo,rHo,tHo,sF,Pge,aHo,nHo,WG,sHo,lHo,iHo,lF,$ge,dHo,cHo,HG,fHo,mHo,gHo,iF,Ige,hHo,pHo,UG,_Ho,uHo,bHo,dF,vHo,qge,FHo,THo,Nge,MHo,EHo,jge,CHo,wHo,Aw,ABe,Yd,cF,Dge,yw,AHo,Gge,yHo,yBe,hr,Lw,LHo,Kd,xHo,JG,kHo,SHo,YG,RHo,BHo,PHo,xw,$Ho,Oge,IHo,qHo,NHo,it,kw,jHo,Vge,DHo,GHo,Zd,OHo,Xge,VHo,XHo,KG,zHo,QHo,WHo,zge,HHo,UHo,Sw,JHo,oo,Rw,YHo,Qge,KHo,ZHo,fn,eUo,Wge,oUo,rUo,Hge,tUo,aUo,Uge,nUo,sUo,lUo,ec,fF,Jge,iUo,dUo,ZG,cUo,fUo,mUo,mF,Yge,gUo,hUo,eO,pUo,_Uo,uUo,gF,Kge,bUo,vUo,oO,FUo,TUo,MUo,hF,EUo,Zge,CUo,wUo,ehe,AUo,yUo,ohe,LUo,xUo,Bw,LBe,oc,pF,rhe,Pw,kUo,the,SUo,xBe,pr,$w,RUo,rc,BUo,rO,PUo,$Uo,tO,IUo,qUo,NUo,Iw,jUo,ahe,DUo,GUo,OUo,dt,qw,VUo,nhe,XUo,zUo,tc,QUo,she,WUo,HUo,aO,UUo,JUo,YUo,lhe,KUo,ZUo,Nw,eJo,ro,jw,oJo,ihe,rJo,tJo,mn,aJo,dhe,nJo,sJo,che,lJo,iJo,fhe,dJo,cJo,fJo,mhe,_F,ghe,mJo,gJo,nO,hJo,pJo,_Jo,uF,uJo,hhe,bJo,vJo,phe,FJo,TJo,_he,MJo,EJo,Dw,kBe,ac,bF,uhe,Gw,CJo,bhe,wJo,SBe,_r,Ow,AJo,nc,yJo,sO,LJo,xJo,lO,kJo,SJo,RJo,Vw,BJo,vhe,PJo,$Jo,IJo,ct,Xw,qJo,Fhe,NJo,jJo,sc,DJo,The,GJo,OJo,iO,VJo,XJo,zJo,Mhe,QJo,WJo,zw,HJo,to,Qw,UJo,Ehe,JJo,YJo,gn,KJo,Che,ZJo,eYo,whe,oYo,rYo,Ahe,tYo,aYo,nYo,yhe,vF,Lhe,sYo,lYo,dO,iYo,dYo,cYo,FF,fYo,xhe,mYo,gYo,khe,hYo,pYo,She,_Yo,uYo,Ww,RBe,lc,TF,Rhe,Hw,bYo,Bhe,vYo,BBe,ur,Uw,FYo,ic,TYo,cO,MYo,EYo,fO,CYo,wYo,AYo,Jw,yYo,Phe,LYo,xYo,kYo,ft,Yw,SYo,$he,RYo,BYo,dc,PYo,Ihe,$Yo,IYo,mO,qYo,NYo,jYo,qhe,DYo,GYo,Kw,OYo,ao,Zw,VYo,Nhe,XYo,zYo,hn,QYo,jhe,WYo,HYo,Dhe,UYo,JYo,Ghe,YYo,KYo,ZYo,pn,MF,Ohe,eKo,oKo,gO,rKo,tKo,aKo,EF,Vhe,nKo,sKo,hO,lKo,iKo,dKo,CF,Xhe,cKo,fKo,pO,mKo,gKo,hKo,wF,zhe,pKo,_Ko,_O,uKo,bKo,vKo,AF,FKo,Qhe,TKo,MKo,Whe,EKo,CKo,Hhe,wKo,AKo,eA,PBe,cc,yF,Uhe,oA,yKo,Jhe,LKo,$Be,br,rA,xKo,fc,kKo,uO,SKo,RKo,bO,BKo,PKo,$Ko,tA,IKo,Yhe,qKo,NKo,jKo,mt,aA,DKo,Khe,GKo,OKo,mc,VKo,Zhe,XKo,zKo,vO,QKo,WKo,HKo,epe,UKo,JKo,nA,YKo,no,sA,KKo,ope,ZKo,eZo,_n,oZo,rpe,rZo,tZo,tpe,aZo,nZo,ape,sZo,lZo,iZo,npe,LF,spe,dZo,cZo,FO,fZo,mZo,gZo,xF,hZo,lpe,pZo,_Zo,ipe,uZo,bZo,dpe,vZo,FZo,lA,IBe,gc,kF,cpe,iA,TZo,fpe,MZo,qBe,vr,dA,EZo,hc,CZo,TO,wZo,AZo,MO,yZo,LZo,xZo,cA,kZo,mpe,SZo,RZo,BZo,gt,fA,PZo,gpe,$Zo,IZo,pc,qZo,hpe,NZo,jZo,EO,DZo,GZo,OZo,ppe,VZo,XZo,mA,zZo,ho,gA,QZo,_pe,WZo,HZo,un,UZo,upe,JZo,YZo,bpe,KZo,ZZo,vpe,eer,oer,rer,x,SF,Fpe,ter,aer,CO,ner,ser,ler,RF,Tpe,ier,der,wO,cer,fer,mer,BF,Mpe,ger,her,AO,per,_er,uer,PF,Epe,ber,ver,yO,Fer,Ter,Mer,$F,Cpe,Eer,Cer,LO,wer,Aer,yer,IF,wpe,Ler,xer,xO,ker,Ser,Rer,qF,Ape,Ber,Per,kO,$er,Ier,qer,NF,ype,Ner,jer,SO,Der,Ger,Oer,jF,Lpe,Ver,Xer,RO,zer,Qer,Wer,DF,xpe,Her,Uer,BO,Jer,Yer,Ker,GF,kpe,Zer,eor,PO,oor,ror,tor,OF,Spe,aor,nor,$O,sor,lor,ior,VF,Rpe,dor,cor,IO,mor,gor,hor,XF,Bpe,por,_or,qO,uor,bor,vor,zF,Ppe,For,Tor,NO,Mor,Eor,Cor,QF,$pe,wor,Aor,jO,yor,Lor,xor,Os,Ipe,kor,Sor,DO,Ror,Bor,GO,Por,$or,Ior,WF,qpe,qor,Nor,OO,jor,Dor,Gor,HF,Npe,Oor,Vor,VO,Xor,zor,Qor,UF,jpe,Wor,Hor,XO,Uor,Jor,Yor,JF,Dpe,Kor,Zor,zO,err,orr,rrr,YF,Gpe,trr,arr,QO,nrr,srr,lrr,KF,Ope,irr,drr,WO,crr,frr,mrr,ZF,Vpe,grr,hrr,HO,prr,_rr,urr,e0,Xpe,brr,vrr,UO,Frr,Trr,Mrr,o0,zpe,Err,Crr,JO,wrr,Arr,yrr,r0,Qpe,Lrr,xrr,YO,krr,Srr,Rrr,t0,Wpe,Brr,Prr,KO,$rr,Irr,qrr,a0,Hpe,Nrr,jrr,ZO,Drr,Grr,Orr,n0,Upe,Vrr,Xrr,eV,zrr,Qrr,Wrr,s0,Jpe,Hrr,Urr,oV,Jrr,Yrr,Krr,l0,Ype,Zrr,etr,rV,otr,rtr,ttr,i0,Kpe,atr,ntr,tV,str,ltr,itr,d0,Zpe,dtr,ctr,aV,ftr,mtr,gtr,c0,e_e,htr,ptr,nV,_tr,utr,btr,f0,o_e,vtr,Ftr,sV,Ttr,Mtr,Etr,m0,r_e,Ctr,wtr,lV,Atr,ytr,Ltr,g0,t_e,xtr,ktr,iV,Str,Rtr,Btr,h0,a_e,Ptr,$tr,dV,Itr,qtr,Ntr,p0,n_e,jtr,Dtr,cV,Gtr,Otr,Vtr,_0,s_e,Xtr,ztr,fV,Qtr,Wtr,Htr,u0,l_e,Utr,Jtr,mV,Ytr,Ktr,Ztr,b0,i_e,ear,oar,gV,rar,tar,aar,v0,d_e,nar,sar,hV,lar,iar,dar,c_e,car,far,hA,NBe,_c,F0,f_e,pA,mar,m_e,gar,jBe,Fr,_A,har,uc,par,pV,_ar,uar,_V,bar,Far,Tar,uA,Mar,g_e,Ear,Car,war,ht,bA,Aar,h_e,yar,Lar,bc,xar,p_e,kar,Sar,uV,Rar,Bar,Par,__e,$ar,Iar,vA,qar,po,FA,Nar,u_e,jar,Dar,bn,Gar,b_e,Oar,Var,v_e,Xar,zar,F_e,Qar,War,Har,H,T0,T_e,Uar,Jar,bV,Yar,Kar,Zar,M0,M_e,enr,onr,vV,rnr,tnr,anr,E0,E_e,nnr,snr,FV,lnr,inr,dnr,C0,C_e,cnr,fnr,TV,mnr,gnr,hnr,w0,w_e,pnr,_nr,MV,unr,bnr,vnr,A0,A_e,Fnr,Tnr,EV,Mnr,Enr,Cnr,y0,y_e,wnr,Anr,CV,ynr,Lnr,xnr,L0,L_e,knr,Snr,wV,Rnr,Bnr,Pnr,x0,x_e,$nr,Inr,AV,qnr,Nnr,jnr,k0,k_e,Dnr,Gnr,yV,Onr,Vnr,Xnr,S0,S_e,znr,Qnr,LV,Wnr,Hnr,Unr,R0,R_e,Jnr,Ynr,xV,Knr,Znr,esr,B0,B_e,osr,rsr,kV,tsr,asr,nsr,P0,P_e,ssr,lsr,SV,isr,dsr,csr,$0,$_e,fsr,msr,RV,gsr,hsr,psr,I0,I_e,_sr,usr,BV,bsr,vsr,Fsr,q0,q_e,Tsr,Msr,PV,Esr,Csr,wsr,N0,N_e,Asr,ysr,$V,Lsr,xsr,ksr,j0,j_e,Ssr,Rsr,IV,Bsr,Psr,$sr,D0,D_e,Isr,qsr,qV,Nsr,jsr,Dsr,G0,G_e,Gsr,Osr,NV,Vsr,Xsr,zsr,O0,O_e,Qsr,Wsr,jV,Hsr,Usr,Jsr,V0,V_e,Ysr,Ksr,DV,Zsr,elr,olr,X_e,rlr,tlr,TA,DBe,vc,X0,z_e,MA,alr,Q_e,nlr,GBe,Tr,EA,slr,Fc,llr,GV,ilr,dlr,OV,clr,flr,mlr,CA,glr,W_e,hlr,plr,_lr,pt,wA,ulr,H_e,blr,vlr,Tc,Flr,U_e,Tlr,Mlr,VV,Elr,Clr,wlr,J_e,Alr,ylr,AA,Llr,_o,yA,xlr,Y_e,klr,Slr,vn,Rlr,K_e,Blr,Plr,Z_e,$lr,Ilr,eue,qlr,Nlr,jlr,fe,z0,oue,Dlr,Glr,XV,Olr,Vlr,Xlr,Q0,rue,zlr,Qlr,zV,Wlr,Hlr,Ulr,W0,tue,Jlr,Ylr,QV,Klr,Zlr,eir,H0,aue,oir,rir,WV,tir,air,nir,U0,nue,sir,lir,HV,iir,dir,cir,J0,sue,fir,mir,UV,gir,hir,pir,Y0,lue,_ir,uir,JV,bir,vir,Fir,K0,iue,Tir,Mir,YV,Eir,Cir,wir,Z0,due,Air,yir,KV,Lir,xir,kir,eT,cue,Sir,Rir,ZV,Bir,Pir,$ir,oT,fue,Iir,qir,eX,Nir,jir,Dir,rT,mue,Gir,Oir,oX,Vir,Xir,zir,gue,Qir,Wir,LA,OBe,Mc,tT,hue,xA,Hir,pue,Uir,VBe,Mr,kA,Jir,Ec,Yir,rX,Kir,Zir,tX,edr,odr,rdr,SA,tdr,_ue,adr,ndr,sdr,_t,RA,ldr,uue,idr,ddr,Cc,cdr,bue,fdr,mdr,aX,gdr,hdr,pdr,vue,_dr,udr,BA,bdr,uo,PA,vdr,Fue,Fdr,Tdr,Fn,Mdr,Tue,Edr,Cdr,Mue,wdr,Adr,Eue,ydr,Ldr,xdr,$A,aT,Cue,kdr,Sdr,nX,Rdr,Bdr,Pdr,nT,wue,$dr,Idr,sX,qdr,Ndr,jdr,Aue,Ddr,Gdr,IA,XBe,wc,sT,yue,qA,Odr,Lue,Vdr,zBe,Er,NA,Xdr,Ac,zdr,lX,Qdr,Wdr,iX,Hdr,Udr,Jdr,jA,Ydr,xue,Kdr,Zdr,ecr,ut,DA,ocr,kue,rcr,tcr,yc,acr,Sue,ncr,scr,dX,lcr,icr,dcr,Rue,ccr,fcr,GA,mcr,bo,OA,gcr,Bue,hcr,pcr,Tn,_cr,Pue,ucr,bcr,$ue,vcr,Fcr,Iue,Tcr,Mcr,Ecr,J,lT,que,Ccr,wcr,cX,Acr,ycr,Lcr,iT,Nue,xcr,kcr,fX,Scr,Rcr,Bcr,dT,jue,Pcr,$cr,mX,Icr,qcr,Ncr,cT,Due,jcr,Dcr,gX,Gcr,Ocr,Vcr,fT,Gue,Xcr,zcr,hX,Qcr,Wcr,Hcr,mT,Oue,Ucr,Jcr,pX,Ycr,Kcr,Zcr,gT,Vue,efr,ofr,_X,rfr,tfr,afr,hT,Xue,nfr,sfr,uX,lfr,ifr,dfr,pT,zue,cfr,ffr,bX,mfr,gfr,hfr,_T,Que,pfr,_fr,vX,ufr,bfr,vfr,uT,Wue,Ffr,Tfr,FX,Mfr,Efr,Cfr,bT,Hue,wfr,Afr,TX,yfr,Lfr,xfr,vT,Uue,kfr,Sfr,MX,Rfr,Bfr,Pfr,FT,Jue,$fr,Ifr,EX,qfr,Nfr,jfr,TT,Yue,Dfr,Gfr,CX,Ofr,Vfr,Xfr,MT,Kue,zfr,Qfr,wX,Wfr,Hfr,Ufr,ET,Zue,Jfr,Yfr,AX,Kfr,Zfr,emr,CT,e6e,omr,rmr,yX,tmr,amr,nmr,wT,o6e,smr,lmr,LX,imr,dmr,cmr,AT,r6e,fmr,mmr,xX,gmr,hmr,pmr,t6e,_mr,umr,VA,QBe,Lc,yT,a6e,XA,bmr,n6e,vmr,WBe,Cr,zA,Fmr,xc,Tmr,kX,Mmr,Emr,SX,Cmr,wmr,Amr,QA,ymr,s6e,Lmr,xmr,kmr,bt,WA,Smr,l6e,Rmr,Bmr,kc,Pmr,i6e,$mr,Imr,RX,qmr,Nmr,jmr,d6e,Dmr,Gmr,HA,Omr,vo,UA,Vmr,c6e,Xmr,zmr,Mn,Qmr,f6e,Wmr,Hmr,m6e,Umr,Jmr,g6e,Ymr,Kmr,Zmr,be,LT,h6e,egr,ogr,BX,rgr,tgr,agr,xT,p6e,ngr,sgr,PX,lgr,igr,dgr,kT,_6e,cgr,fgr,$X,mgr,ggr,hgr,ST,u6e,pgr,_gr,IX,ugr,bgr,vgr,RT,b6e,Fgr,Tgr,qX,Mgr,Egr,Cgr,BT,v6e,wgr,Agr,NX,ygr,Lgr,xgr,PT,F6e,kgr,Sgr,jX,Rgr,Bgr,Pgr,$T,T6e,$gr,Igr,DX,qgr,Ngr,jgr,IT,M6e,Dgr,Ggr,GX,Ogr,Vgr,Xgr,qT,E6e,zgr,Qgr,OX,Wgr,Hgr,Ugr,C6e,Jgr,Ygr,JA,HBe,Sc,NT,w6e,YA,Kgr,A6e,Zgr,UBe,wr,KA,ehr,Rc,ohr,VX,rhr,thr,XX,ahr,nhr,shr,ZA,lhr,y6e,ihr,dhr,chr,vt,ey,fhr,L6e,mhr,ghr,Bc,hhr,x6e,phr,_hr,zX,uhr,bhr,vhr,k6e,Fhr,Thr,oy,Mhr,Fo,ry,Ehr,S6e,Chr,whr,En,Ahr,R6e,yhr,Lhr,B6e,xhr,khr,P6e,Shr,Rhr,Bhr,V,jT,$6e,Phr,$hr,QX,Ihr,qhr,Nhr,DT,I6e,jhr,Dhr,WX,Ghr,Ohr,Vhr,GT,q6e,Xhr,zhr,HX,Qhr,Whr,Hhr,OT,N6e,Uhr,Jhr,UX,Yhr,Khr,Zhr,VT,j6e,epr,opr,JX,rpr,tpr,apr,XT,D6e,npr,spr,YX,lpr,ipr,dpr,zT,G6e,cpr,fpr,KX,mpr,gpr,hpr,QT,O6e,ppr,_pr,ZX,upr,bpr,vpr,WT,V6e,Fpr,Tpr,ez,Mpr,Epr,Cpr,HT,X6e,wpr,Apr,oz,ypr,Lpr,xpr,UT,z6e,kpr,Spr,rz,Rpr,Bpr,Ppr,JT,Q6e,$pr,Ipr,tz,qpr,Npr,jpr,YT,W6e,Dpr,Gpr,az,Opr,Vpr,Xpr,KT,H6e,zpr,Qpr,nz,Wpr,Hpr,Upr,ZT,U6e,Jpr,Ypr,sz,Kpr,Zpr,e_r,e7,J6e,o_r,r_r,lz,t_r,a_r,n_r,o7,Y6e,s_r,l_r,iz,i_r,d_r,c_r,r7,K6e,f_r,m_r,dz,g_r,h_r,p_r,t7,Z6e,__r,u_r,cz,b_r,v_r,F_r,a7,e1e,T_r,M_r,fz,E_r,C_r,w_r,n7,o1e,A_r,y_r,mz,L_r,x_r,k_r,s7,r1e,S_r,R_r,gz,B_r,P_r,$_r,l7,t1e,I_r,q_r,hz,N_r,j_r,D_r,i7,a1e,G_r,O_r,pz,V_r,X_r,z_r,d7,n1e,Q_r,W_r,_z,H_r,U_r,J_r,c7,s1e,Y_r,K_r,uz,Z_r,eur,our,l1e,rur,tur,ty,JBe,Pc,f7,i1e,ay,aur,d1e,nur,YBe,Ar,ny,sur,$c,lur,bz,iur,dur,vz,cur,fur,mur,sy,gur,c1e,hur,pur,_ur,Ft,ly,uur,f1e,bur,vur,Ic,Fur,m1e,Tur,Mur,Fz,Eur,Cur,wur,g1e,Aur,yur,iy,Lur,To,dy,xur,h1e,kur,Sur,Cn,Rur,p1e,Bur,Pur,_1e,$ur,Iur,u1e,qur,Nur,jur,se,m7,b1e,Dur,Gur,Tz,Our,Vur,Xur,g7,v1e,zur,Qur,Mz,Wur,Hur,Uur,h7,F1e,Jur,Yur,Ez,Kur,Zur,e6r,p7,T1e,o6r,r6r,Cz,t6r,a6r,n6r,_7,M1e,s6r,l6r,wz,i6r,d6r,c6r,u7,E1e,f6r,m6r,Az,g6r,h6r,p6r,b7,C1e,_6r,u6r,yz,b6r,v6r,F6r,v7,w1e,T6r,M6r,Lz,E6r,C6r,w6r,F7,A1e,A6r,y6r,xz,L6r,x6r,k6r,T7,y1e,S6r,R6r,kz,B6r,P6r,$6r,M7,L1e,I6r,q6r,Sz,N6r,j6r,D6r,E7,x1e,G6r,O6r,Rz,V6r,X6r,z6r,C7,k1e,Q6r,W6r,Bz,H6r,U6r,J6r,w7,S1e,Y6r,K6r,Pz,Z6r,e1r,o1r,A7,R1e,r1r,t1r,$z,a1r,n1r,s1r,y7,B1e,l1r,i1r,Iz,d1r,c1r,f1r,L7,P1e,m1r,g1r,qz,h1r,p1r,_1r,$1e,u1r,b1r,cy,KBe,qc,x7,I1e,fy,v1r,q1e,F1r,ZBe,yr,my,T1r,Nc,M1r,Nz,E1r,C1r,jz,w1r,A1r,y1r,gy,L1r,N1e,x1r,k1r,S1r,Tt,hy,R1r,j1e,B1r,P1r,jc,$1r,D1e,I1r,q1r,Dz,N1r,j1r,D1r,G1e,G1r,O1r,py,V1r,Mo,_y,X1r,O1e,z1r,Q1r,wn,W1r,V1e,H1r,U1r,X1e,J1r,Y1r,z1e,K1r,Z1r,ebr,Q1e,k7,W1e,obr,rbr,Gz,tbr,abr,nbr,H1e,sbr,lbr,uy,ePe,Dc,S7,U1e,by,ibr,J1e,dbr,oPe,Lr,vy,cbr,Gc,fbr,Oz,mbr,gbr,Vz,hbr,pbr,_br,Fy,ubr,Y1e,bbr,vbr,Fbr,Mt,Ty,Tbr,K1e,Mbr,Ebr,Oc,Cbr,Z1e,wbr,Abr,Xz,ybr,Lbr,xbr,ebe,kbr,Sbr,My,Rbr,Eo,Ey,Bbr,obe,Pbr,$br,An,Ibr,rbe,qbr,Nbr,tbe,jbr,Dbr,abe,Gbr,Obr,Vbr,Y,R7,nbe,Xbr,zbr,zz,Qbr,Wbr,Hbr,B7,sbe,Ubr,Jbr,Qz,Ybr,Kbr,Zbr,P7,lbe,e2r,o2r,Wz,r2r,t2r,a2r,$7,ibe,n2r,s2r,Hz,l2r,i2r,d2r,I7,dbe,c2r,f2r,Uz,m2r,g2r,h2r,q7,cbe,p2r,_2r,Jz,u2r,b2r,v2r,N7,fbe,F2r,T2r,Yz,M2r,E2r,C2r,j7,mbe,w2r,A2r,Kz,y2r,L2r,x2r,D7,gbe,k2r,S2r,Zz,R2r,B2r,P2r,G7,hbe,$2r,I2r,eQ,q2r,N2r,j2r,O7,pbe,D2r,G2r,oQ,O2r,V2r,X2r,V7,_be,z2r,Q2r,rQ,W2r,H2r,U2r,X7,ube,J2r,Y2r,tQ,K2r,Z2r,evr,z7,bbe,ovr,rvr,aQ,tvr,avr,nvr,Q7,vbe,svr,lvr,nQ,ivr,dvr,cvr,W7,Fbe,fvr,mvr,sQ,gvr,hvr,pvr,H7,Tbe,_vr,uvr,lQ,bvr,vvr,Fvr,U7,Mbe,Tvr,Mvr,iQ,Evr,Cvr,wvr,J7,Ebe,Avr,yvr,dQ,Lvr,xvr,kvr,Y7,Cbe,Svr,Rvr,cQ,Bvr,Pvr,$vr,wbe,Ivr,qvr,Cy,rPe,Vc,K7,Abe,wy,Nvr,ybe,jvr,tPe,xr,Ay,Dvr,Xc,Gvr,fQ,Ovr,Vvr,mQ,Xvr,zvr,Qvr,yy,Wvr,Lbe,Hvr,Uvr,Jvr,Et,Ly,Yvr,xbe,Kvr,Zvr,zc,eFr,kbe,oFr,rFr,gQ,tFr,aFr,nFr,Sbe,sFr,lFr,xy,iFr,Co,ky,dFr,Rbe,cFr,fFr,yn,mFr,Bbe,gFr,hFr,Pbe,pFr,_Fr,$be,uFr,bFr,vFr,K,Z7,Ibe,FFr,TFr,hQ,MFr,EFr,CFr,eM,qbe,wFr,AFr,pQ,yFr,LFr,xFr,oM,Nbe,kFr,SFr,_Q,RFr,BFr,PFr,rM,jbe,$Fr,IFr,uQ,qFr,NFr,jFr,tM,Dbe,DFr,GFr,bQ,OFr,VFr,XFr,aM,Gbe,zFr,QFr,vQ,WFr,HFr,UFr,nM,Obe,JFr,YFr,FQ,KFr,ZFr,e0r,sM,Vbe,o0r,r0r,TQ,t0r,a0r,n0r,lM,Xbe,s0r,l0r,MQ,i0r,d0r,c0r,iM,zbe,f0r,m0r,EQ,g0r,h0r,p0r,dM,Qbe,_0r,u0r,CQ,b0r,v0r,F0r,cM,Wbe,T0r,M0r,wQ,E0r,C0r,w0r,fM,Hbe,A0r,y0r,AQ,L0r,x0r,k0r,mM,Ube,S0r,R0r,yQ,B0r,P0r,$0r,gM,Jbe,I0r,q0r,LQ,N0r,j0r,D0r,hM,Ybe,G0r,O0r,xQ,V0r,X0r,z0r,pM,Kbe,Q0r,W0r,kQ,H0r,U0r,J0r,_M,Zbe,Y0r,K0r,SQ,Z0r,eTr,oTr,uM,e2e,rTr,tTr,RQ,aTr,nTr,sTr,bM,o2e,lTr,iTr,BQ,dTr,cTr,fTr,r2e,mTr,gTr,Sy,aPe,Qc,vM,t2e,Ry,hTr,a2e,pTr,nPe,kr,By,_Tr,Wc,uTr,PQ,bTr,vTr,$Q,FTr,TTr,MTr,Py,ETr,n2e,CTr,wTr,ATr,Ct,$y,yTr,s2e,LTr,xTr,Hc,kTr,l2e,STr,RTr,IQ,BTr,PTr,$Tr,i2e,ITr,qTr,Iy,NTr,wo,qy,jTr,d2e,DTr,GTr,Ln,OTr,c2e,VTr,XTr,f2e,zTr,QTr,m2e,WTr,HTr,UTr,g2e,FM,h2e,JTr,YTr,qQ,KTr,ZTr,e7r,p2e,o7r,r7r,Ny,sPe,Uc,TM,_2e,jy,t7r,u2e,a7r,lPe,Sr,Dy,n7r,Jc,s7r,NQ,l7r,i7r,jQ,d7r,c7r,f7r,Gy,m7r,b2e,g7r,h7r,p7r,wt,Oy,_7r,v2e,u7r,b7r,Yc,v7r,F2e,F7r,T7r,DQ,M7r,E7r,C7r,T2e,w7r,A7r,Vy,y7r,Ao,Xy,L7r,M2e,x7r,k7r,xn,S7r,E2e,R7r,B7r,C2e,P7r,$7r,w2e,I7r,q7r,N7r,A2e,MM,y2e,j7r,D7r,GQ,G7r,O7r,V7r,L2e,X7r,z7r,zy,iPe,Kc,EM,x2e,Qy,Q7r,k2e,W7r,dPe,Rr,Wy,H7r,Zc,U7r,OQ,J7r,Y7r,VQ,K7r,Z7r,eMr,Hy,oMr,S2e,rMr,tMr,aMr,At,Uy,nMr,R2e,sMr,lMr,ef,iMr,B2e,dMr,cMr,XQ,fMr,mMr,gMr,P2e,hMr,pMr,Jy,_Mr,yo,Yy,uMr,$2e,bMr,vMr,kn,FMr,I2e,TMr,MMr,q2e,EMr,CMr,N2e,wMr,AMr,yMr,z,CM,j2e,LMr,xMr,zQ,kMr,SMr,RMr,wM,D2e,BMr,PMr,QQ,$Mr,IMr,qMr,AM,G2e,NMr,jMr,WQ,DMr,GMr,OMr,yM,O2e,VMr,XMr,HQ,zMr,QMr,WMr,LM,V2e,HMr,UMr,UQ,JMr,YMr,KMr,xM,X2e,ZMr,e4r,JQ,o4r,r4r,t4r,kM,z2e,a4r,n4r,YQ,s4r,l4r,i4r,SM,Q2e,d4r,c4r,KQ,f4r,m4r,g4r,RM,W2e,h4r,p4r,ZQ,_4r,u4r,b4r,BM,H2e,v4r,F4r,eW,T4r,M4r,E4r,PM,U2e,C4r,w4r,oW,A4r,y4r,L4r,$M,J2e,x4r,k4r,rW,S4r,R4r,B4r,IM,Y2e,P4r,$4r,tW,I4r,q4r,N4r,qM,K2e,j4r,D4r,aW,G4r,O4r,V4r,NM,Z2e,X4r,z4r,nW,Q4r,W4r,H4r,jM,eve,U4r,J4r,sW,Y4r,K4r,Z4r,DM,ove,eEr,oEr,lW,rEr,tEr,aEr,GM,rve,nEr,sEr,iW,lEr,iEr,dEr,OM,tve,cEr,fEr,dW,mEr,gEr,hEr,VM,ave,pEr,_Er,cW,uEr,bEr,vEr,XM,nve,FEr,TEr,fW,MEr,EEr,CEr,zM,sve,wEr,AEr,mW,yEr,LEr,xEr,QM,lve,kEr,SEr,gW,REr,BEr,PEr,WM,ive,$Er,IEr,hW,qEr,NEr,jEr,HM,dve,DEr,GEr,pW,OEr,VEr,XEr,cve,zEr,QEr,Ky,cPe,of,UM,fve,Zy,WEr,mve,HEr,fPe,Br,eL,UEr,rf,JEr,_W,YEr,KEr,uW,ZEr,eCr,oCr,oL,rCr,gve,tCr,aCr,nCr,yt,rL,sCr,hve,lCr,iCr,tf,dCr,pve,cCr,fCr,bW,mCr,gCr,hCr,_ve,pCr,_Cr,tL,uCr,Lo,aL,bCr,uve,vCr,FCr,Sn,TCr,bve,MCr,ECr,vve,CCr,wCr,Fve,ACr,yCr,LCr,ca,JM,Tve,xCr,kCr,vW,SCr,RCr,BCr,YM,Mve,PCr,$Cr,FW,ICr,qCr,NCr,KM,Eve,jCr,DCr,TW,GCr,OCr,VCr,ZM,Cve,XCr,zCr,MW,QCr,WCr,HCr,e4,wve,UCr,JCr,EW,YCr,KCr,ZCr,Ave,e5r,o5r,nL,mPe,af,o4,yve,sL,r5r,Lve,t5r,gPe,Pr,lL,a5r,nf,n5r,CW,s5r,l5r,wW,i5r,d5r,c5r,iL,f5r,xve,m5r,g5r,h5r,Lt,dL,p5r,kve,_5r,u5r,sf,b5r,Sve,v5r,F5r,AW,T5r,M5r,E5r,Rve,C5r,w5r,cL,A5r,xo,fL,y5r,Bve,L5r,x5r,Rn,k5r,Pve,S5r,R5r,$ve,B5r,P5r,Ive,$5r,I5r,q5r,me,r4,qve,N5r,j5r,yW,D5r,G5r,O5r,t4,Nve,V5r,X5r,LW,z5r,Q5r,W5r,a4,jve,H5r,U5r,xW,J5r,Y5r,K5r,n4,Dve,Z5r,e3r,kW,o3r,r3r,t3r,s4,Gve,a3r,n3r,SW,s3r,l3r,i3r,l4,Ove,d3r,c3r,RW,f3r,m3r,g3r,i4,Vve,h3r,p3r,BW,_3r,u3r,b3r,d4,Xve,v3r,F3r,PW,T3r,M3r,E3r,c4,zve,C3r,w3r,$W,A3r,y3r,L3r,f4,Qve,x3r,k3r,IW,S3r,R3r,B3r,m4,Wve,P3r,$3r,qW,I3r,q3r,N3r,g4,Hve,j3r,D3r,NW,G3r,O3r,V3r,Uve,X3r,z3r,mL,hPe,lf,h4,Jve,gL,Q3r,Yve,W3r,pPe,$r,hL,H3r,df,U3r,jW,J3r,Y3r,DW,K3r,Z3r,ewr,pL,owr,Kve,rwr,twr,awr,xt,_L,nwr,Zve,swr,lwr,cf,iwr,eFe,dwr,cwr,GW,fwr,mwr,gwr,oFe,hwr,pwr,uL,_wr,ko,bL,uwr,rFe,bwr,vwr,Bn,Fwr,tFe,Twr,Mwr,aFe,Ewr,Cwr,nFe,wwr,Awr,ywr,ve,p4,sFe,Lwr,xwr,OW,kwr,Swr,Rwr,_4,lFe,Bwr,Pwr,VW,$wr,Iwr,qwr,u4,iFe,Nwr,jwr,XW,Dwr,Gwr,Owr,b4,dFe,Vwr,Xwr,zW,zwr,Qwr,Wwr,v4,cFe,Hwr,Uwr,QW,Jwr,Ywr,Kwr,F4,fFe,Zwr,eAr,WW,oAr,rAr,tAr,T4,mFe,aAr,nAr,HW,sAr,lAr,iAr,M4,gFe,dAr,cAr,UW,fAr,mAr,gAr,E4,hFe,hAr,pAr,JW,_Ar,uAr,bAr,C4,pFe,vAr,FAr,YW,TAr,MAr,EAr,_Fe,CAr,wAr,vL,_Pe,ff,w4,uFe,FL,AAr,bFe,yAr,uPe,Ir,TL,LAr,mf,xAr,KW,kAr,SAr,ZW,RAr,BAr,PAr,ML,$Ar,vFe,IAr,qAr,NAr,kt,EL,jAr,FFe,DAr,GAr,gf,OAr,TFe,VAr,XAr,eH,zAr,QAr,WAr,MFe,HAr,UAr,CL,JAr,So,wL,YAr,EFe,KAr,ZAr,Pn,eyr,CFe,oyr,ryr,wFe,tyr,ayr,AFe,nyr,syr,lyr,Ee,A4,yFe,iyr,dyr,oH,cyr,fyr,myr,y4,LFe,gyr,hyr,rH,pyr,_yr,uyr,L4,xFe,byr,vyr,tH,Fyr,Tyr,Myr,x4,kFe,Eyr,Cyr,aH,wyr,Ayr,yyr,k4,SFe,Lyr,xyr,nH,kyr,Syr,Ryr,S4,RFe,Byr,Pyr,sH,$yr,Iyr,qyr,R4,BFe,Nyr,jyr,lH,Dyr,Gyr,Oyr,B4,PFe,Vyr,Xyr,iH,zyr,Qyr,Wyr,P4,$Fe,Hyr,Uyr,dH,Jyr,Yyr,Kyr,IFe,Zyr,eLr,AL,bPe,hf,$4,qFe,yL,oLr,NFe,rLr,vPe,qr,LL,tLr,pf,aLr,cH,nLr,sLr,fH,lLr,iLr,dLr,xL,cLr,jFe,fLr,mLr,gLr,St,kL,hLr,DFe,pLr,_Lr,_f,uLr,GFe,bLr,vLr,mH,FLr,TLr,MLr,OFe,ELr,CLr,SL,wLr,Ro,RL,ALr,VFe,yLr,LLr,$n,xLr,XFe,kLr,SLr,zFe,RLr,BLr,QFe,PLr,$Lr,ILr,Fe,I4,WFe,qLr,NLr,gH,jLr,DLr,GLr,q4,HFe,OLr,VLr,hH,XLr,zLr,QLr,N4,UFe,WLr,HLr,pH,ULr,JLr,YLr,j4,JFe,KLr,ZLr,_H,e8r,o8r,r8r,D4,YFe,t8r,a8r,uH,n8r,s8r,l8r,G4,KFe,i8r,d8r,bH,c8r,f8r,m8r,O4,ZFe,g8r,h8r,vH,p8r,_8r,u8r,V4,e0e,b8r,v8r,FH,F8r,T8r,M8r,X4,o0e,E8r,C8r,TH,w8r,A8r,y8r,z4,r0e,L8r,x8r,MH,k8r,S8r,R8r,t0e,B8r,P8r,BL,FPe,uf,Q4,a0e,PL,$8r,n0e,I8r,TPe,Nr,$L,q8r,bf,N8r,EH,j8r,D8r,CH,G8r,O8r,V8r,IL,X8r,s0e,z8r,Q8r,W8r,Rt,qL,H8r,l0e,U8r,J8r,vf,Y8r,i0e,K8r,Z8r,wH,e9r,o9r,r9r,d0e,t9r,a9r,NL,n9r,Bo,jL,s9r,c0e,l9r,i9r,In,d9r,f0e,c9r,f9r,m0e,m9r,g9r,g0e,h9r,p9r,_9r,Te,W4,h0e,u9r,b9r,AH,v9r,F9r,T9r,H4,p0e,M9r,E9r,yH,C9r,w9r,A9r,U4,_0e,y9r,L9r,LH,x9r,k9r,S9r,J4,u0e,R9r,B9r,xH,P9r,$9r,I9r,Y4,b0e,q9r,N9r,kH,j9r,D9r,G9r,K4,v0e,O9r,V9r,SH,X9r,z9r,Q9r,Z4,F0e,W9r,H9r,RH,U9r,J9r,Y9r,eE,T0e,K9r,Z9r,BH,exr,oxr,rxr,oE,M0e,txr,axr,PH,nxr,sxr,lxr,rE,E0e,ixr,dxr,$H,cxr,fxr,mxr,C0e,gxr,hxr,DL,MPe,Ff,tE,w0e,GL,pxr,A0e,_xr,EPe,jr,OL,uxr,Tf,bxr,IH,vxr,Fxr,qH,Txr,Mxr,Exr,VL,Cxr,y0e,wxr,Axr,yxr,Bt,XL,Lxr,L0e,xxr,kxr,Mf,Sxr,x0e,Rxr,Bxr,NH,Pxr,$xr,Ixr,k0e,qxr,Nxr,zL,jxr,Po,QL,Dxr,S0e,Gxr,Oxr,qn,Vxr,R0e,Xxr,zxr,B0e,Qxr,Wxr,P0e,Hxr,Uxr,Jxr,Be,aE,$0e,Yxr,Kxr,jH,Zxr,ekr,okr,nE,I0e,rkr,tkr,DH,akr,nkr,skr,sE,q0e,lkr,ikr,GH,dkr,ckr,fkr,lE,N0e,mkr,gkr,OH,hkr,pkr,_kr,iE,j0e,ukr,bkr,VH,vkr,Fkr,Tkr,dE,D0e,Mkr,Ekr,XH,Ckr,wkr,Akr,cE,G0e,ykr,Lkr,zH,xkr,kkr,Skr,fE,O0e,Rkr,Bkr,QH,Pkr,$kr,Ikr,V0e,qkr,Nkr,WL,CPe,Ef,mE,X0e,HL,jkr,z0e,Dkr,wPe,Dr,UL,Gkr,Cf,Okr,WH,Vkr,Xkr,HH,zkr,Qkr,Wkr,JL,Hkr,Q0e,Ukr,Jkr,Ykr,Pt,YL,Kkr,W0e,Zkr,eSr,wf,oSr,H0e,rSr,tSr,UH,aSr,nSr,sSr,U0e,lSr,iSr,KL,dSr,$o,ZL,cSr,J0e,fSr,mSr,Nn,gSr,Y0e,hSr,pSr,K0e,_Sr,uSr,Z0e,bSr,vSr,FSr,Pe,gE,eTe,TSr,MSr,JH,ESr,CSr,wSr,hE,oTe,ASr,ySr,YH,LSr,xSr,kSr,pE,rTe,SSr,RSr,KH,BSr,PSr,$Sr,_E,tTe,ISr,qSr,ZH,NSr,jSr,DSr,uE,aTe,GSr,OSr,eU,VSr,XSr,zSr,bE,nTe,QSr,WSr,oU,HSr,USr,JSr,vE,sTe,YSr,KSr,rU,ZSr,eRr,oRr,FE,lTe,rRr,tRr,tU,aRr,nRr,sRr,iTe,lRr,iRr,e8,APe,Af,TE,dTe,o8,dRr,cTe,cRr,yPe,Gr,r8,fRr,yf,mRr,aU,gRr,hRr,nU,pRr,_Rr,uRr,t8,bRr,fTe,vRr,FRr,TRr,$t,a8,MRr,mTe,ERr,CRr,Lf,wRr,gTe,ARr,yRr,sU,LRr,xRr,kRr,hTe,SRr,RRr,n8,BRr,Io,s8,PRr,pTe,$Rr,IRr,jn,qRr,_Te,NRr,jRr,uTe,DRr,GRr,bTe,ORr,VRr,XRr,vTe,ME,FTe,zRr,QRr,lU,WRr,HRr,URr,TTe,JRr,YRr,l8,LPe,xf,EE,MTe,i8,KRr,ETe,ZRr,xPe,Or,d8,eBr,kf,oBr,iU,rBr,tBr,dU,aBr,nBr,sBr,c8,lBr,CTe,iBr,dBr,cBr,It,f8,fBr,wTe,mBr,gBr,Sf,hBr,ATe,pBr,_Br,cU,uBr,bBr,vBr,yTe,FBr,TBr,m8,MBr,qo,g8,EBr,LTe,CBr,wBr,Dn,ABr,xTe,yBr,LBr,kTe,xBr,kBr,STe,SBr,RBr,BBr,h8,CE,RTe,PBr,$Br,fU,IBr,qBr,NBr,wE,BTe,jBr,DBr,mU,GBr,OBr,VBr,PTe,XBr,zBr,p8,kPe,Rf,AE,$Te,_8,QBr,ITe,WBr,SPe,Vr,u8,HBr,Bf,UBr,gU,JBr,YBr,hU,KBr,ZBr,ePr,b8,oPr,qTe,rPr,tPr,aPr,qt,v8,nPr,NTe,sPr,lPr,Pf,iPr,jTe,dPr,cPr,pU,fPr,mPr,gPr,DTe,hPr,pPr,F8,_Pr,No,T8,uPr,GTe,bPr,vPr,Gn,FPr,OTe,TPr,MPr,VTe,EPr,CPr,XTe,wPr,APr,yPr,zTe,yE,QTe,LPr,xPr,_U,kPr,SPr,RPr,WTe,BPr,PPr,M8,RPe;return he=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),RC=new X({}),BC=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new $Pr({props:{warning:!0,$$slots:{default:[w5t]},$$scope:{ctx:If}}}),PC=new X({}),$C=new C({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/configuration_auto.py#L560"}}),NC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/configuration_auto.py#L583"}}),jC=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),DC=new C({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/configuration_auto.py#L705"}}),GC=new X({}),OC=new C({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/tokenization_auto.py#L352"}}),zC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16760/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/tokenization_auto.py#L366"}}),QC=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),WC=new C({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/tokenization_auto.py#L562"}}),HC=new X({}),UC=new C({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),KC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16760/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),qh=new $Pr({props:{$$slots:{default:[A5t]},$$scope:{ctx:If}}}),ZC=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),e5=new C({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/feature_extraction_auto.py#L313"}}),o5=new X({}),r5=new C({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/processing_auto.py#L70"}}),n5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/processing_auto.py#L84"}}),Hh=new $Pr({props:{$$slots:{default:[y5t]},$$scope:{ctx:If}}}),s5=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),l5=new C({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/processing_auto.py#L237"}}),i5=new X({}),d5=new C({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L714"}}),f5=new C({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),m5=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),g5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),h5=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p5=new X({}),_5=new C({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L721"}}),b5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),v5=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),F5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),T5=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M5=new X({}),E5=new C({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L736"}}),w5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),A5=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),y5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),L5=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x5=new X({}),k5=new C({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L743"}}),R5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),B5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),P5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I5=new X({}),q5=new C({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L750"}}),j5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),D5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),G5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V5=new X({}),X5=new C({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L759"}}),Q5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),H5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J5=new X({}),Y5=new C({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L793"}}),Z5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),o3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),r3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t3=new X({}),a3=new C({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L800"}}),s3=new C({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),l3=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),i3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),d3=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c3=new X({}),f3=new C({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L786"}}),g3=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),h3=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),p3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),_3=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u3=new X({}),b3=new C({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L768"}}),F3=new C({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),T3=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),M3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),E3=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C3=new X({}),w3=new C({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L775"}}),y3=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),L3=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),x3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),k3=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S3=new X({}),R3=new C({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L809"}}),P3=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16760/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16760/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16760/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),$3=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),I3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),q3=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N3=new X({}),j3=new C({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L848"}}),G3=new C({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),O3=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),V3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),X3=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z3=new X({}),Q3=new C({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L855"}}),H3=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),J3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),Y3=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K3=new X({}),Z3=new C({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L878"}}),ow=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),rw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),tw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nw=new X({}),sw=new C({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L862"}}),iw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),dw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),cw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),fw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mw=new X({}),gw=new C({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L869"}}),pw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),_w=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),uw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),vw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Fw=new X({}),Tw=new C({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L887"}}),Ew=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),Cw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),ww=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),Aw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yw=new X({}),Lw=new C({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L894"}}),kw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),Sw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),Rw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),Bw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Pw=new X({}),$w=new C({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L841"}}),qw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),Nw=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),jw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),Dw=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gw=new X({}),Ow=new C({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L816"}}),Xw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),zw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Qw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hw=new X({}),Uw=new C({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L823"}}),Yw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),Kw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Zw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),eA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oA=new X({}),rA=new C({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_auto.py#L832"}}),aA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),nA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),sA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),lA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iA=new X({}),dA=new C({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),fA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),mA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),gA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),hA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new X({}),_A=new C({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),bA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),vA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),FA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),TA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),MA=new X({}),EA=new C({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),wA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),AA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),yA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),LA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xA=new X({}),kA=new C({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),RA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),BA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),PA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),IA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qA=new X({}),NA=new C({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),DA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),GA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),OA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),VA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XA=new X({}),zA=new C({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),WA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),HA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),UA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),JA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YA=new X({}),KA=new C({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),ey=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),oy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),ry=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),ty=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ay=new X({}),ny=new C({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),ly=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),iy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),dy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),cy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fy=new X({}),my=new C({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),hy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),py=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),_y=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),uy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),by=new X({}),vy=new C({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),Ty=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),My=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),Ey=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),Cy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wy=new X({}),Ay=new C({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),Ly=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),xy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),ky=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),Sy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ry=new X({}),By=new C({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),$y=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),Iy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),qy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),Ny=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jy=new X({}),Dy=new C({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),Oy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),Vy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),Xy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),zy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qy=new X({}),Wy=new C({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),Uy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),Jy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),Yy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),Ky=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zy=new X({}),eL=new C({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),rL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),tL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),aL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),nL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sL=new X({}),lL=new C({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),dL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),cL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),fL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),mL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gL=new X({}),hL=new C({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),_L=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),uL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),bL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),vL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FL=new X({}),TL=new C({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),EL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),CL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),wL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),AL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yL=new X({}),LL=new C({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),kL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),SL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),RL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),BL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PL=new X({}),$L=new C({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),qL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),NL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),jL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),DL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GL=new X({}),OL=new C({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),XL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),zL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),QL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),WL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HL=new X({}),UL=new C({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),YL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),KL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),ZL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),e8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o8=new X({}),r8=new C({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),a8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),n8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),s8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),l8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i8=new X({}),d8=new C({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),f8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16760/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),m8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),g8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),p8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_8=new X({}),u8=new C({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),v8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16760/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16760/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L389"}}),F8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),T8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16760/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16760/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16760/src/transformers/models/auto/auto_factory.py#L417"}}),M8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),ce=a("h1"),Ce=a("a"),lo=a("span"),f(he.$$.fragment),Me=l(),Xo=a("span"),qi=o("Auto Classes"),qf=l(),fa=a("p"),Ni=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=a("code"),LC=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),Di=o("Instantiating one of "),On=a("a"),xC=o("AutoConfig"),Vn=o(", "),Xn=a("a"),kC=o("AutoModel"),Gi=o(`, and
`),zn=a("a"),SC=o("AutoTokenizer"),Oi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Da.$$.fragment),fo=l(),ue=a("p"),F9=o("will create a model that is an instance of "),Vi=a("a"),T9=o("BertModel"),M9=o("."),zo=l(),Ga=a("p"),E9=o("There is one class of "),Df=a("code"),C9=o("AutoModel"),XIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),SRe=l(),Xi=a("h2"),Gf=a("a"),dY=a("span"),f(RC.$$.fragment),zIe=l(),cY=a("span"),QIe=o("Extending the Auto Classes"),RRe=l(),Qn=a("p"),WIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),fY=a("code"),HIe=o("NewModel"),UIe=o(", make sure you have a "),mY=a("code"),JIe=o("NewModelConfig"),YIe=o(` then you can add those to the auto
classes like this:`),BRe=l(),f(BC.$$.fragment),PRe=l(),w9=a("p"),KIe=o("You will then be able to use the auto classes like you would usually do!"),$Re=l(),f(Of.$$.fragment),IRe=l(),zi=a("h2"),Vf=a("a"),gY=a("span"),f(PC.$$.fragment),ZIe=l(),hY=a("span"),eqe=o("AutoConfig"),qRe=l(),Qo=a("div"),f($C.$$.fragment),oqe=l(),IC=a("p"),rqe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),A9=a("a"),tqe=o("from_pretrained()"),aqe=o(" class method."),nqe=l(),qC=a("p"),sqe=o("This class cannot be instantiated directly using "),pY=a("code"),lqe=o("__init__()"),iqe=o(" (throws an error)."),dqe=l(),mo=a("div"),f(NC.$$.fragment),cqe=l(),_Y=a("p"),fqe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),mqe=l(),Qi=a("p"),gqe=o("The configuration class to instantiate is selected based on the "),uY=a("code"),hqe=o("model_type"),pqe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),bY=a("code"),_qe=o("pretrained_model_name_or_path"),uqe=o(":"),bqe=l(),v=a("ul"),Xf=a("li"),vY=a("strong"),vqe=o("albert"),Fqe=o(" \u2014 "),y9=a("a"),Tqe=o("AlbertConfig"),Mqe=o(" (ALBERT model)"),Eqe=l(),zf=a("li"),FY=a("strong"),Cqe=o("bart"),wqe=o(" \u2014 "),L9=a("a"),Aqe=o("BartConfig"),yqe=o(" (BART model)"),Lqe=l(),Qf=a("li"),TY=a("strong"),xqe=o("beit"),kqe=o(" \u2014 "),x9=a("a"),Sqe=o("BeitConfig"),Rqe=o(" (BEiT model)"),Bqe=l(),Wf=a("li"),MY=a("strong"),Pqe=o("bert"),$qe=o(" \u2014 "),k9=a("a"),Iqe=o("BertConfig"),qqe=o(" (BERT model)"),Nqe=l(),Hf=a("li"),EY=a("strong"),jqe=o("bert-generation"),Dqe=o(" \u2014 "),S9=a("a"),Gqe=o("BertGenerationConfig"),Oqe=o(" (Bert Generation model)"),Vqe=l(),Uf=a("li"),CY=a("strong"),Xqe=o("big_bird"),zqe=o(" \u2014 "),R9=a("a"),Qqe=o("BigBirdConfig"),Wqe=o(" (BigBird model)"),Hqe=l(),Jf=a("li"),wY=a("strong"),Uqe=o("bigbird_pegasus"),Jqe=o(" \u2014 "),B9=a("a"),Yqe=o("BigBirdPegasusConfig"),Kqe=o(" (BigBirdPegasus model)"),Zqe=l(),Yf=a("li"),AY=a("strong"),eNe=o("blenderbot"),oNe=o(" \u2014 "),P9=a("a"),rNe=o("BlenderbotConfig"),tNe=o(" (Blenderbot model)"),aNe=l(),Kf=a("li"),yY=a("strong"),nNe=o("blenderbot-small"),sNe=o(" \u2014 "),$9=a("a"),lNe=o("BlenderbotSmallConfig"),iNe=o(" (BlenderbotSmall model)"),dNe=l(),Zf=a("li"),LY=a("strong"),cNe=o("camembert"),fNe=o(" \u2014 "),I9=a("a"),mNe=o("CamembertConfig"),gNe=o(" (CamemBERT model)"),hNe=l(),em=a("li"),xY=a("strong"),pNe=o("canine"),_Ne=o(" \u2014 "),q9=a("a"),uNe=o("CanineConfig"),bNe=o(" (Canine model)"),vNe=l(),om=a("li"),kY=a("strong"),FNe=o("clip"),TNe=o(" \u2014 "),N9=a("a"),MNe=o("CLIPConfig"),ENe=o(" (CLIP model)"),CNe=l(),rm=a("li"),SY=a("strong"),wNe=o("convbert"),ANe=o(" \u2014 "),j9=a("a"),yNe=o("ConvBertConfig"),LNe=o(" (ConvBERT model)"),xNe=l(),tm=a("li"),RY=a("strong"),kNe=o("convnext"),SNe=o(" \u2014 "),D9=a("a"),RNe=o("ConvNextConfig"),BNe=o(" (ConvNext model)"),PNe=l(),am=a("li"),BY=a("strong"),$Ne=o("ctrl"),INe=o(" \u2014 "),G9=a("a"),qNe=o("CTRLConfig"),NNe=o(" (CTRL model)"),jNe=l(),nm=a("li"),PY=a("strong"),DNe=o("data2vec-audio"),GNe=o(" \u2014 "),O9=a("a"),ONe=o("Data2VecAudioConfig"),VNe=o(" (Data2VecAudio model)"),XNe=l(),sm=a("li"),$Y=a("strong"),zNe=o("data2vec-text"),QNe=o(" \u2014 "),V9=a("a"),WNe=o("Data2VecTextConfig"),HNe=o(" (Data2VecText model)"),UNe=l(),lm=a("li"),IY=a("strong"),JNe=o("data2vec-vision"),YNe=o(" \u2014 "),X9=a("a"),KNe=o("Data2VecVisionConfig"),ZNe=o(" (Data2VecVision model)"),eje=l(),im=a("li"),qY=a("strong"),oje=o("deberta"),rje=o(" \u2014 "),z9=a("a"),tje=o("DebertaConfig"),aje=o(" (DeBERTa model)"),nje=l(),dm=a("li"),NY=a("strong"),sje=o("deberta-v2"),lje=o(" \u2014 "),Q9=a("a"),ije=o("DebertaV2Config"),dje=o(" (DeBERTa-v2 model)"),cje=l(),cm=a("li"),jY=a("strong"),fje=o("decision_transformer"),mje=o(" \u2014 "),W9=a("a"),gje=o("DecisionTransformerConfig"),hje=o(" (Decision Transformer model)"),pje=l(),fm=a("li"),DY=a("strong"),_je=o("deit"),uje=o(" \u2014 "),H9=a("a"),bje=o("DeiTConfig"),vje=o(" (DeiT model)"),Fje=l(),mm=a("li"),GY=a("strong"),Tje=o("detr"),Mje=o(" \u2014 "),U9=a("a"),Eje=o("DetrConfig"),Cje=o(" (DETR model)"),wje=l(),gm=a("li"),OY=a("strong"),Aje=o("distilbert"),yje=o(" \u2014 "),J9=a("a"),Lje=o("DistilBertConfig"),xje=o(" (DistilBERT model)"),kje=l(),hm=a("li"),VY=a("strong"),Sje=o("dpr"),Rje=o(" \u2014 "),Y9=a("a"),Bje=o("DPRConfig"),Pje=o(" (DPR model)"),$je=l(),pm=a("li"),XY=a("strong"),Ije=o("dpt"),qje=o(" \u2014 "),K9=a("a"),Nje=o("DPTConfig"),jje=o(" (DPT model)"),Dje=l(),_m=a("li"),zY=a("strong"),Gje=o("electra"),Oje=o(" \u2014 "),Z9=a("a"),Vje=o("ElectraConfig"),Xje=o(" (ELECTRA model)"),zje=l(),um=a("li"),QY=a("strong"),Qje=o("encoder-decoder"),Wje=o(" \u2014 "),ex=a("a"),Hje=o("EncoderDecoderConfig"),Uje=o(" (Encoder decoder model)"),Jje=l(),bm=a("li"),WY=a("strong"),Yje=o("flaubert"),Kje=o(" \u2014 "),ox=a("a"),Zje=o("FlaubertConfig"),eDe=o(" (FlauBERT model)"),oDe=l(),vm=a("li"),HY=a("strong"),rDe=o("fnet"),tDe=o(" \u2014 "),rx=a("a"),aDe=o("FNetConfig"),nDe=o(" (FNet model)"),sDe=l(),Fm=a("li"),UY=a("strong"),lDe=o("fsmt"),iDe=o(" \u2014 "),tx=a("a"),dDe=o("FSMTConfig"),cDe=o(" (FairSeq Machine-Translation model)"),fDe=l(),Tm=a("li"),JY=a("strong"),mDe=o("funnel"),gDe=o(" \u2014 "),ax=a("a"),hDe=o("FunnelConfig"),pDe=o(" (Funnel Transformer model)"),_De=l(),Mm=a("li"),YY=a("strong"),uDe=o("glpn"),bDe=o(" \u2014 "),nx=a("a"),vDe=o("GLPNConfig"),FDe=o(" (GLPN model)"),TDe=l(),Em=a("li"),KY=a("strong"),MDe=o("gpt2"),EDe=o(" \u2014 "),sx=a("a"),CDe=o("GPT2Config"),wDe=o(" (OpenAI GPT-2 model)"),ADe=l(),Cm=a("li"),ZY=a("strong"),yDe=o("gpt_neo"),LDe=o(" \u2014 "),lx=a("a"),xDe=o("GPTNeoConfig"),kDe=o(" (GPT Neo model)"),SDe=l(),wm=a("li"),eK=a("strong"),RDe=o("gptj"),BDe=o(" \u2014 "),ix=a("a"),PDe=o("GPTJConfig"),$De=o(" (GPT-J model)"),IDe=l(),Am=a("li"),oK=a("strong"),qDe=o("hubert"),NDe=o(" \u2014 "),dx=a("a"),jDe=o("HubertConfig"),DDe=o(" (Hubert model)"),GDe=l(),ym=a("li"),rK=a("strong"),ODe=o("ibert"),VDe=o(" \u2014 "),cx=a("a"),XDe=o("IBertConfig"),zDe=o(" (I-BERT model)"),QDe=l(),Lm=a("li"),tK=a("strong"),WDe=o("imagegpt"),HDe=o(" \u2014 "),fx=a("a"),UDe=o("ImageGPTConfig"),JDe=o(" (ImageGPT model)"),YDe=l(),xm=a("li"),aK=a("strong"),KDe=o("layoutlm"),ZDe=o(" \u2014 "),mx=a("a"),eGe=o("LayoutLMConfig"),oGe=o(" (LayoutLM model)"),rGe=l(),km=a("li"),nK=a("strong"),tGe=o("layoutlmv2"),aGe=o(" \u2014 "),gx=a("a"),nGe=o("LayoutLMv2Config"),sGe=o(" (LayoutLMv2 model)"),lGe=l(),Sm=a("li"),sK=a("strong"),iGe=o("led"),dGe=o(" \u2014 "),hx=a("a"),cGe=o("LEDConfig"),fGe=o(" (LED model)"),mGe=l(),Rm=a("li"),lK=a("strong"),gGe=o("longformer"),hGe=o(" \u2014 "),px=a("a"),pGe=o("LongformerConfig"),_Ge=o(" (Longformer model)"),uGe=l(),Bm=a("li"),iK=a("strong"),bGe=o("luke"),vGe=o(" \u2014 "),_x=a("a"),FGe=o("LukeConfig"),TGe=o(" (LUKE model)"),MGe=l(),Pm=a("li"),dK=a("strong"),EGe=o("lxmert"),CGe=o(" \u2014 "),ux=a("a"),wGe=o("LxmertConfig"),AGe=o(" (LXMERT model)"),yGe=l(),$m=a("li"),cK=a("strong"),LGe=o("m2m_100"),xGe=o(" \u2014 "),bx=a("a"),kGe=o("M2M100Config"),SGe=o(" (M2M100 model)"),RGe=l(),Im=a("li"),fK=a("strong"),BGe=o("marian"),PGe=o(" \u2014 "),vx=a("a"),$Ge=o("MarianConfig"),IGe=o(" (Marian model)"),qGe=l(),qm=a("li"),mK=a("strong"),NGe=o("maskformer"),jGe=o(" \u2014 "),Fx=a("a"),DGe=o("MaskFormerConfig"),GGe=o(" (MaskFormer model)"),OGe=l(),Nm=a("li"),gK=a("strong"),VGe=o("mbart"),XGe=o(" \u2014 "),Tx=a("a"),zGe=o("MBartConfig"),QGe=o(" (mBART model)"),WGe=l(),jm=a("li"),hK=a("strong"),HGe=o("megatron-bert"),UGe=o(" \u2014 "),Mx=a("a"),JGe=o("MegatronBertConfig"),YGe=o(" (MegatronBert model)"),KGe=l(),Dm=a("li"),pK=a("strong"),ZGe=o("mobilebert"),eOe=o(" \u2014 "),Ex=a("a"),oOe=o("MobileBertConfig"),rOe=o(" (MobileBERT model)"),tOe=l(),Gm=a("li"),_K=a("strong"),aOe=o("mpnet"),nOe=o(" \u2014 "),Cx=a("a"),sOe=o("MPNetConfig"),lOe=o(" (MPNet model)"),iOe=l(),Om=a("li"),uK=a("strong"),dOe=o("mt5"),cOe=o(" \u2014 "),wx=a("a"),fOe=o("MT5Config"),mOe=o(" (mT5 model)"),gOe=l(),Vm=a("li"),bK=a("strong"),hOe=o("nystromformer"),pOe=o(" \u2014 "),Ax=a("a"),_Oe=o("NystromformerConfig"),uOe=o(" (Nystromformer model)"),bOe=l(),Xm=a("li"),vK=a("strong"),vOe=o("openai-gpt"),FOe=o(" \u2014 "),yx=a("a"),TOe=o("OpenAIGPTConfig"),MOe=o(" (OpenAI GPT model)"),EOe=l(),zm=a("li"),FK=a("strong"),COe=o("pegasus"),wOe=o(" \u2014 "),Lx=a("a"),AOe=o("PegasusConfig"),yOe=o(" (Pegasus model)"),LOe=l(),Qm=a("li"),TK=a("strong"),xOe=o("perceiver"),kOe=o(" \u2014 "),xx=a("a"),SOe=o("PerceiverConfig"),ROe=o(" (Perceiver model)"),BOe=l(),Wm=a("li"),MK=a("strong"),POe=o("plbart"),$Oe=o(" \u2014 "),kx=a("a"),IOe=o("PLBartConfig"),qOe=o(" (PLBart model)"),NOe=l(),Hm=a("li"),EK=a("strong"),jOe=o("poolformer"),DOe=o(" \u2014 "),Sx=a("a"),GOe=o("PoolFormerConfig"),OOe=o(" (PoolFormer model)"),VOe=l(),Um=a("li"),CK=a("strong"),XOe=o("prophetnet"),zOe=o(" \u2014 "),Rx=a("a"),QOe=o("ProphetNetConfig"),WOe=o(" (ProphetNet model)"),HOe=l(),Jm=a("li"),wK=a("strong"),UOe=o("qdqbert"),JOe=o(" \u2014 "),Bx=a("a"),YOe=o("QDQBertConfig"),KOe=o(" (QDQBert model)"),ZOe=l(),Ym=a("li"),AK=a("strong"),eVe=o("rag"),oVe=o(" \u2014 "),Px=a("a"),rVe=o("RagConfig"),tVe=o(" (RAG model)"),aVe=l(),Km=a("li"),yK=a("strong"),nVe=o("realm"),sVe=o(" \u2014 "),$x=a("a"),lVe=o("RealmConfig"),iVe=o(" (Realm model)"),dVe=l(),Zm=a("li"),LK=a("strong"),cVe=o("reformer"),fVe=o(" \u2014 "),Ix=a("a"),mVe=o("ReformerConfig"),gVe=o(" (Reformer model)"),hVe=l(),eg=a("li"),xK=a("strong"),pVe=o("regnet"),_Ve=o(" \u2014 "),qx=a("a"),uVe=o("RegNetConfig"),bVe=o(" (RegNet model)"),vVe=l(),og=a("li"),kK=a("strong"),FVe=o("rembert"),TVe=o(" \u2014 "),Nx=a("a"),MVe=o("RemBertConfig"),EVe=o(" (RemBERT model)"),CVe=l(),rg=a("li"),SK=a("strong"),wVe=o("resnet"),AVe=o(" \u2014 "),jx=a("a"),yVe=o("ResNetConfig"),LVe=o(" (ResNet model)"),xVe=l(),tg=a("li"),RK=a("strong"),kVe=o("retribert"),SVe=o(" \u2014 "),Dx=a("a"),RVe=o("RetriBertConfig"),BVe=o(" (RetriBERT model)"),PVe=l(),ag=a("li"),BK=a("strong"),$Ve=o("roberta"),IVe=o(" \u2014 "),Gx=a("a"),qVe=o("RobertaConfig"),NVe=o(" (RoBERTa model)"),jVe=l(),ng=a("li"),PK=a("strong"),DVe=o("roformer"),GVe=o(" \u2014 "),Ox=a("a"),OVe=o("RoFormerConfig"),VVe=o(" (RoFormer model)"),XVe=l(),sg=a("li"),$K=a("strong"),zVe=o("segformer"),QVe=o(" \u2014 "),Vx=a("a"),WVe=o("SegformerConfig"),HVe=o(" (SegFormer model)"),UVe=l(),lg=a("li"),IK=a("strong"),JVe=o("sew"),YVe=o(" \u2014 "),Xx=a("a"),KVe=o("SEWConfig"),ZVe=o(" (SEW model)"),eXe=l(),ig=a("li"),qK=a("strong"),oXe=o("sew-d"),rXe=o(" \u2014 "),zx=a("a"),tXe=o("SEWDConfig"),aXe=o(" (SEW-D model)"),nXe=l(),dg=a("li"),NK=a("strong"),sXe=o("speech-encoder-decoder"),lXe=o(" \u2014 "),Qx=a("a"),iXe=o("SpeechEncoderDecoderConfig"),dXe=o(" (Speech Encoder decoder model)"),cXe=l(),cg=a("li"),jK=a("strong"),fXe=o("speech_to_text"),mXe=o(" \u2014 "),Wx=a("a"),gXe=o("Speech2TextConfig"),hXe=o(" (Speech2Text model)"),pXe=l(),fg=a("li"),DK=a("strong"),_Xe=o("speech_to_text_2"),uXe=o(" \u2014 "),Hx=a("a"),bXe=o("Speech2Text2Config"),vXe=o(" (Speech2Text2 model)"),FXe=l(),mg=a("li"),GK=a("strong"),TXe=o("splinter"),MXe=o(" \u2014 "),Ux=a("a"),EXe=o("SplinterConfig"),CXe=o(" (Splinter model)"),wXe=l(),gg=a("li"),OK=a("strong"),AXe=o("squeezebert"),yXe=o(" \u2014 "),Jx=a("a"),LXe=o("SqueezeBertConfig"),xXe=o(" (SqueezeBERT model)"),kXe=l(),hg=a("li"),VK=a("strong"),SXe=o("swin"),RXe=o(" \u2014 "),Yx=a("a"),BXe=o("SwinConfig"),PXe=o(" (Swin model)"),$Xe=l(),pg=a("li"),XK=a("strong"),IXe=o("t5"),qXe=o(" \u2014 "),Kx=a("a"),NXe=o("T5Config"),jXe=o(" (T5 model)"),DXe=l(),_g=a("li"),zK=a("strong"),GXe=o("tapas"),OXe=o(" \u2014 "),Zx=a("a"),VXe=o("TapasConfig"),XXe=o(" (TAPAS model)"),zXe=l(),ug=a("li"),QK=a("strong"),QXe=o("tapex"),WXe=o(" \u2014 "),ek=a("a"),HXe=o("BartConfig"),UXe=o(" (TAPEX model)"),JXe=l(),bg=a("li"),WK=a("strong"),YXe=o("transfo-xl"),KXe=o(" \u2014 "),ok=a("a"),ZXe=o("TransfoXLConfig"),eze=o(" (Transformer-XL model)"),oze=l(),vg=a("li"),HK=a("strong"),rze=o("trocr"),tze=o(" \u2014 "),rk=a("a"),aze=o("TrOCRConfig"),nze=o(" (TrOCR model)"),sze=l(),Fg=a("li"),UK=a("strong"),lze=o("unispeech"),ize=o(" \u2014 "),tk=a("a"),dze=o("UniSpeechConfig"),cze=o(" (UniSpeech model)"),fze=l(),Tg=a("li"),JK=a("strong"),mze=o("unispeech-sat"),gze=o(" \u2014 "),ak=a("a"),hze=o("UniSpeechSatConfig"),pze=o(" (UniSpeechSat model)"),_ze=l(),Mg=a("li"),YK=a("strong"),uze=o("van"),bze=o(" \u2014 "),nk=a("a"),vze=o("VanConfig"),Fze=o(" (VAN model)"),Tze=l(),Eg=a("li"),KK=a("strong"),Mze=o("vilt"),Eze=o(" \u2014 "),sk=a("a"),Cze=o("ViltConfig"),wze=o(" (ViLT model)"),Aze=l(),Cg=a("li"),ZK=a("strong"),yze=o("vision-encoder-decoder"),Lze=o(" \u2014 "),lk=a("a"),xze=o("VisionEncoderDecoderConfig"),kze=o(" (Vision Encoder decoder model)"),Sze=l(),wg=a("li"),eZ=a("strong"),Rze=o("vision-text-dual-encoder"),Bze=o(" \u2014 "),ik=a("a"),Pze=o("VisionTextDualEncoderConfig"),$ze=o(" (VisionTextDualEncoder model)"),Ize=l(),Ag=a("li"),oZ=a("strong"),qze=o("visual_bert"),Nze=o(" \u2014 "),dk=a("a"),jze=o("VisualBertConfig"),Dze=o(" (VisualBert model)"),Gze=l(),yg=a("li"),rZ=a("strong"),Oze=o("vit"),Vze=o(" \u2014 "),ck=a("a"),Xze=o("ViTConfig"),zze=o(" (ViT model)"),Qze=l(),Lg=a("li"),tZ=a("strong"),Wze=o("vit_mae"),Hze=o(" \u2014 "),fk=a("a"),Uze=o("ViTMAEConfig"),Jze=o(" (ViTMAE model)"),Yze=l(),xg=a("li"),aZ=a("strong"),Kze=o("wav2vec2"),Zze=o(" \u2014 "),mk=a("a"),eQe=o("Wav2Vec2Config"),oQe=o(" (Wav2Vec2 model)"),rQe=l(),kg=a("li"),nZ=a("strong"),tQe=o("wavlm"),aQe=o(" \u2014 "),gk=a("a"),nQe=o("WavLMConfig"),sQe=o(" (WavLM model)"),lQe=l(),Sg=a("li"),sZ=a("strong"),iQe=o("xglm"),dQe=o(" \u2014 "),hk=a("a"),cQe=o("XGLMConfig"),fQe=o(" (XGLM model)"),mQe=l(),Rg=a("li"),lZ=a("strong"),gQe=o("xlm"),hQe=o(" \u2014 "),pk=a("a"),pQe=o("XLMConfig"),_Qe=o(" (XLM model)"),uQe=l(),Bg=a("li"),iZ=a("strong"),bQe=o("xlm-prophetnet"),vQe=o(" \u2014 "),_k=a("a"),FQe=o("XLMProphetNetConfig"),TQe=o(" (XLMProphetNet model)"),MQe=l(),Pg=a("li"),dZ=a("strong"),EQe=o("xlm-roberta"),CQe=o(" \u2014 "),uk=a("a"),wQe=o("XLMRobertaConfig"),AQe=o(" (XLM-RoBERTa model)"),yQe=l(),$g=a("li"),cZ=a("strong"),LQe=o("xlm-roberta-xl"),xQe=o(" \u2014 "),bk=a("a"),kQe=o("XLMRobertaXLConfig"),SQe=o(" (XLM-RoBERTa-XL model)"),RQe=l(),Ig=a("li"),fZ=a("strong"),BQe=o("xlnet"),PQe=o(" \u2014 "),vk=a("a"),$Qe=o("XLNetConfig"),IQe=o(" (XLNet model)"),qQe=l(),qg=a("li"),mZ=a("strong"),NQe=o("yoso"),jQe=o(" \u2014 "),Fk=a("a"),DQe=o("YosoConfig"),GQe=o(" (YOSO model)"),OQe=l(),gZ=a("p"),VQe=o("Examples:"),XQe=l(),f(jC.$$.fragment),zQe=l(),Ng=a("div"),f(DC.$$.fragment),QQe=l(),hZ=a("p"),WQe=o("Register a new configuration for this class."),NRe=l(),Wi=a("h2"),jg=a("a"),pZ=a("span"),f(GC.$$.fragment),HQe=l(),_Z=a("span"),UQe=o("AutoTokenizer"),jRe=l(),Wo=a("div"),f(OC.$$.fragment),JQe=l(),VC=a("p"),YQe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Tk=a("a"),KQe=o("AutoTokenizer.from_pretrained()"),ZQe=o(" class method."),eWe=l(),XC=a("p"),oWe=o("This class cannot be instantiated directly using "),uZ=a("code"),rWe=o("__init__()"),tWe=o(" (throws an error)."),aWe=l(),go=a("div"),f(zC.$$.fragment),nWe=l(),bZ=a("p"),sWe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),lWe=l(),Oa=a("p"),iWe=o("The tokenizer class to instantiate is selected based on the "),vZ=a("code"),dWe=o("model_type"),cWe=o(` property of the config object (either
passed as an argument or loaded from `),FZ=a("code"),fWe=o("pretrained_model_name_or_path"),mWe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TZ=a("code"),gWe=o("pretrained_model_name_or_path"),hWe=o(":"),pWe=l(),E=a("ul"),Wn=a("li"),MZ=a("strong"),_We=o("albert"),uWe=o(" \u2014 "),Mk=a("a"),bWe=o("AlbertTokenizer"),vWe=o(" or "),Ek=a("a"),FWe=o("AlbertTokenizerFast"),TWe=o(" (ALBERT model)"),MWe=l(),Hn=a("li"),EZ=a("strong"),EWe=o("bart"),CWe=o(" \u2014 "),Ck=a("a"),wWe=o("BartTokenizer"),AWe=o(" or "),wk=a("a"),yWe=o("BartTokenizerFast"),LWe=o(" (BART model)"),xWe=l(),Un=a("li"),CZ=a("strong"),kWe=o("barthez"),SWe=o(" \u2014 "),Ak=a("a"),RWe=o("BarthezTokenizer"),BWe=o(" or "),yk=a("a"),PWe=o("BarthezTokenizerFast"),$We=o(" (BARThez model)"),IWe=l(),Dg=a("li"),wZ=a("strong"),qWe=o("bartpho"),NWe=o(" \u2014 "),Lk=a("a"),jWe=o("BartphoTokenizer"),DWe=o(" (BARTpho model)"),GWe=l(),Jn=a("li"),AZ=a("strong"),OWe=o("bert"),VWe=o(" \u2014 "),xk=a("a"),XWe=o("BertTokenizer"),zWe=o(" or "),kk=a("a"),QWe=o("BertTokenizerFast"),WWe=o(" (BERT model)"),HWe=l(),Gg=a("li"),yZ=a("strong"),UWe=o("bert-generation"),JWe=o(" \u2014 "),Sk=a("a"),YWe=o("BertGenerationTokenizer"),KWe=o(" (Bert Generation model)"),ZWe=l(),Og=a("li"),LZ=a("strong"),eHe=o("bert-japanese"),oHe=o(" \u2014 "),Rk=a("a"),rHe=o("BertJapaneseTokenizer"),tHe=o(" (BertJapanese model)"),aHe=l(),Vg=a("li"),xZ=a("strong"),nHe=o("bertweet"),sHe=o(" \u2014 "),Bk=a("a"),lHe=o("BertweetTokenizer"),iHe=o(" (Bertweet model)"),dHe=l(),Yn=a("li"),kZ=a("strong"),cHe=o("big_bird"),fHe=o(" \u2014 "),Pk=a("a"),mHe=o("BigBirdTokenizer"),gHe=o(" or "),$k=a("a"),hHe=o("BigBirdTokenizerFast"),pHe=o(" (BigBird model)"),_He=l(),Kn=a("li"),SZ=a("strong"),uHe=o("bigbird_pegasus"),bHe=o(" \u2014 "),Ik=a("a"),vHe=o("PegasusTokenizer"),FHe=o(" or "),qk=a("a"),THe=o("PegasusTokenizerFast"),MHe=o(" (BigBirdPegasus model)"),EHe=l(),Zn=a("li"),RZ=a("strong"),CHe=o("blenderbot"),wHe=o(" \u2014 "),Nk=a("a"),AHe=o("BlenderbotTokenizer"),yHe=o(" or "),jk=a("a"),LHe=o("BlenderbotTokenizerFast"),xHe=o(" (Blenderbot model)"),kHe=l(),Xg=a("li"),BZ=a("strong"),SHe=o("blenderbot-small"),RHe=o(" \u2014 "),Dk=a("a"),BHe=o("BlenderbotSmallTokenizer"),PHe=o(" (BlenderbotSmall model)"),$He=l(),zg=a("li"),PZ=a("strong"),IHe=o("byt5"),qHe=o(" \u2014 "),Gk=a("a"),NHe=o("ByT5Tokenizer"),jHe=o(" (ByT5 model)"),DHe=l(),es=a("li"),$Z=a("strong"),GHe=o("camembert"),OHe=o(" \u2014 "),Ok=a("a"),VHe=o("CamembertTokenizer"),XHe=o(" or "),Vk=a("a"),zHe=o("CamembertTokenizerFast"),QHe=o(" (CamemBERT model)"),WHe=l(),Qg=a("li"),IZ=a("strong"),HHe=o("canine"),UHe=o(" \u2014 "),Xk=a("a"),JHe=o("CanineTokenizer"),YHe=o(" (Canine model)"),KHe=l(),os=a("li"),qZ=a("strong"),ZHe=o("clip"),eUe=o(" \u2014 "),zk=a("a"),oUe=o("CLIPTokenizer"),rUe=o(" or "),Qk=a("a"),tUe=o("CLIPTokenizerFast"),aUe=o(" (CLIP model)"),nUe=l(),rs=a("li"),NZ=a("strong"),sUe=o("convbert"),lUe=o(" \u2014 "),Wk=a("a"),iUe=o("ConvBertTokenizer"),dUe=o(" or "),Hk=a("a"),cUe=o("ConvBertTokenizerFast"),fUe=o(" (ConvBERT model)"),mUe=l(),ts=a("li"),jZ=a("strong"),gUe=o("cpm"),hUe=o(" \u2014 "),Uk=a("a"),pUe=o("CpmTokenizer"),_Ue=o(" or "),DZ=a("code"),uUe=o("CpmTokenizerFast"),bUe=o(" (CPM model)"),vUe=l(),Wg=a("li"),GZ=a("strong"),FUe=o("ctrl"),TUe=o(" \u2014 "),Jk=a("a"),MUe=o("CTRLTokenizer"),EUe=o(" (CTRL model)"),CUe=l(),as=a("li"),OZ=a("strong"),wUe=o("deberta"),AUe=o(" \u2014 "),Yk=a("a"),yUe=o("DebertaTokenizer"),LUe=o(" or "),Kk=a("a"),xUe=o("DebertaTokenizerFast"),kUe=o(" (DeBERTa model)"),SUe=l(),Hg=a("li"),VZ=a("strong"),RUe=o("deberta-v2"),BUe=o(" \u2014 "),Zk=a("a"),PUe=o("DebertaV2Tokenizer"),$Ue=o(" (DeBERTa-v2 model)"),IUe=l(),ns=a("li"),XZ=a("strong"),qUe=o("distilbert"),NUe=o(" \u2014 "),eS=a("a"),jUe=o("DistilBertTokenizer"),DUe=o(" or "),oS=a("a"),GUe=o("DistilBertTokenizerFast"),OUe=o(" (DistilBERT model)"),VUe=l(),ss=a("li"),zZ=a("strong"),XUe=o("dpr"),zUe=o(" \u2014 "),rS=a("a"),QUe=o("DPRQuestionEncoderTokenizer"),WUe=o(" or "),tS=a("a"),HUe=o("DPRQuestionEncoderTokenizerFast"),UUe=o(" (DPR model)"),JUe=l(),ls=a("li"),QZ=a("strong"),YUe=o("electra"),KUe=o(" \u2014 "),aS=a("a"),ZUe=o("ElectraTokenizer"),eJe=o(" or "),nS=a("a"),oJe=o("ElectraTokenizerFast"),rJe=o(" (ELECTRA model)"),tJe=l(),Ug=a("li"),WZ=a("strong"),aJe=o("flaubert"),nJe=o(" \u2014 "),sS=a("a"),sJe=o("FlaubertTokenizer"),lJe=o(" (FlauBERT model)"),iJe=l(),is=a("li"),HZ=a("strong"),dJe=o("fnet"),cJe=o(" \u2014 "),lS=a("a"),fJe=o("FNetTokenizer"),mJe=o(" or "),iS=a("a"),gJe=o("FNetTokenizerFast"),hJe=o(" (FNet model)"),pJe=l(),Jg=a("li"),UZ=a("strong"),_Je=o("fsmt"),uJe=o(" \u2014 "),dS=a("a"),bJe=o("FSMTTokenizer"),vJe=o(" (FairSeq Machine-Translation model)"),FJe=l(),ds=a("li"),JZ=a("strong"),TJe=o("funnel"),MJe=o(" \u2014 "),cS=a("a"),EJe=o("FunnelTokenizer"),CJe=o(" or "),fS=a("a"),wJe=o("FunnelTokenizerFast"),AJe=o(" (Funnel Transformer model)"),yJe=l(),cs=a("li"),YZ=a("strong"),LJe=o("gpt2"),xJe=o(" \u2014 "),mS=a("a"),kJe=o("GPT2Tokenizer"),SJe=o(" or "),gS=a("a"),RJe=o("GPT2TokenizerFast"),BJe=o(" (OpenAI GPT-2 model)"),PJe=l(),fs=a("li"),KZ=a("strong"),$Je=o("gpt_neo"),IJe=o(" \u2014 "),hS=a("a"),qJe=o("GPT2Tokenizer"),NJe=o(" or "),pS=a("a"),jJe=o("GPT2TokenizerFast"),DJe=o(" (GPT Neo model)"),GJe=l(),ms=a("li"),ZZ=a("strong"),OJe=o("herbert"),VJe=o(" \u2014 "),_S=a("a"),XJe=o("HerbertTokenizer"),zJe=o(" or "),uS=a("a"),QJe=o("HerbertTokenizerFast"),WJe=o(" (HerBERT model)"),HJe=l(),Yg=a("li"),eee=a("strong"),UJe=o("hubert"),JJe=o(" \u2014 "),bS=a("a"),YJe=o("Wav2Vec2CTCTokenizer"),KJe=o(" (Hubert model)"),ZJe=l(),gs=a("li"),oee=a("strong"),eYe=o("ibert"),oYe=o(" \u2014 "),vS=a("a"),rYe=o("RobertaTokenizer"),tYe=o(" or "),FS=a("a"),aYe=o("RobertaTokenizerFast"),nYe=o(" (I-BERT model)"),sYe=l(),hs=a("li"),ree=a("strong"),lYe=o("layoutlm"),iYe=o(" \u2014 "),TS=a("a"),dYe=o("LayoutLMTokenizer"),cYe=o(" or "),MS=a("a"),fYe=o("LayoutLMTokenizerFast"),mYe=o(" (LayoutLM model)"),gYe=l(),ps=a("li"),tee=a("strong"),hYe=o("layoutlmv2"),pYe=o(" \u2014 "),ES=a("a"),_Ye=o("LayoutLMv2Tokenizer"),uYe=o(" or "),CS=a("a"),bYe=o("LayoutLMv2TokenizerFast"),vYe=o(" (LayoutLMv2 model)"),FYe=l(),_s=a("li"),aee=a("strong"),TYe=o("layoutxlm"),MYe=o(" \u2014 "),wS=a("a"),EYe=o("LayoutXLMTokenizer"),CYe=o(" or "),AS=a("a"),wYe=o("LayoutXLMTokenizerFast"),AYe=o(" (LayoutXLM model)"),yYe=l(),us=a("li"),nee=a("strong"),LYe=o("led"),xYe=o(" \u2014 "),yS=a("a"),kYe=o("LEDTokenizer"),SYe=o(" or "),LS=a("a"),RYe=o("LEDTokenizerFast"),BYe=o(" (LED model)"),PYe=l(),bs=a("li"),see=a("strong"),$Ye=o("longformer"),IYe=o(" \u2014 "),xS=a("a"),qYe=o("LongformerTokenizer"),NYe=o(" or "),kS=a("a"),jYe=o("LongformerTokenizerFast"),DYe=o(" (Longformer model)"),GYe=l(),Kg=a("li"),lee=a("strong"),OYe=o("luke"),VYe=o(" \u2014 "),SS=a("a"),XYe=o("LukeTokenizer"),zYe=o(" (LUKE model)"),QYe=l(),vs=a("li"),iee=a("strong"),WYe=o("lxmert"),HYe=o(" \u2014 "),RS=a("a"),UYe=o("LxmertTokenizer"),JYe=o(" or "),BS=a("a"),YYe=o("LxmertTokenizerFast"),KYe=o(" (LXMERT model)"),ZYe=l(),Zg=a("li"),dee=a("strong"),eKe=o("m2m_100"),oKe=o(" \u2014 "),PS=a("a"),rKe=o("M2M100Tokenizer"),tKe=o(" (M2M100 model)"),aKe=l(),eh=a("li"),cee=a("strong"),nKe=o("marian"),sKe=o(" \u2014 "),$S=a("a"),lKe=o("MarianTokenizer"),iKe=o(" (Marian model)"),dKe=l(),Fs=a("li"),fee=a("strong"),cKe=o("mbart"),fKe=o(" \u2014 "),IS=a("a"),mKe=o("MBartTokenizer"),gKe=o(" or "),qS=a("a"),hKe=o("MBartTokenizerFast"),pKe=o(" (mBART model)"),_Ke=l(),Ts=a("li"),mee=a("strong"),uKe=o("mbart50"),bKe=o(" \u2014 "),NS=a("a"),vKe=o("MBart50Tokenizer"),FKe=o(" or "),jS=a("a"),TKe=o("MBart50TokenizerFast"),MKe=o(" (mBART-50 model)"),EKe=l(),oh=a("li"),gee=a("strong"),CKe=o("mluke"),wKe=o(" \u2014 "),DS=a("a"),AKe=o("MLukeTokenizer"),yKe=o(" (mLUKE model)"),LKe=l(),Ms=a("li"),hee=a("strong"),xKe=o("mobilebert"),kKe=o(" \u2014 "),GS=a("a"),SKe=o("MobileBertTokenizer"),RKe=o(" or "),OS=a("a"),BKe=o("MobileBertTokenizerFast"),PKe=o(" (MobileBERT model)"),$Ke=l(),Es=a("li"),pee=a("strong"),IKe=o("mpnet"),qKe=o(" \u2014 "),VS=a("a"),NKe=o("MPNetTokenizer"),jKe=o(" or "),XS=a("a"),DKe=o("MPNetTokenizerFast"),GKe=o(" (MPNet model)"),OKe=l(),Cs=a("li"),_ee=a("strong"),VKe=o("mt5"),XKe=o(" \u2014 "),zS=a("a"),zKe=o("MT5Tokenizer"),QKe=o(" or "),QS=a("a"),WKe=o("MT5TokenizerFast"),HKe=o(" (mT5 model)"),UKe=l(),ws=a("li"),uee=a("strong"),JKe=o("openai-gpt"),YKe=o(" \u2014 "),WS=a("a"),KKe=o("OpenAIGPTTokenizer"),ZKe=o(" or "),HS=a("a"),eZe=o("OpenAIGPTTokenizerFast"),oZe=o(" (OpenAI GPT model)"),rZe=l(),As=a("li"),bee=a("strong"),tZe=o("pegasus"),aZe=o(" \u2014 "),US=a("a"),nZe=o("PegasusTokenizer"),sZe=o(" or "),JS=a("a"),lZe=o("PegasusTokenizerFast"),iZe=o(" (Pegasus model)"),dZe=l(),rh=a("li"),vee=a("strong"),cZe=o("perceiver"),fZe=o(" \u2014 "),YS=a("a"),mZe=o("PerceiverTokenizer"),gZe=o(" (Perceiver model)"),hZe=l(),th=a("li"),Fee=a("strong"),pZe=o("phobert"),_Ze=o(" \u2014 "),KS=a("a"),uZe=o("PhobertTokenizer"),bZe=o(" (PhoBERT model)"),vZe=l(),ah=a("li"),Tee=a("strong"),FZe=o("plbart"),TZe=o(" \u2014 "),ZS=a("a"),MZe=o("PLBartTokenizer"),EZe=o(" (PLBart model)"),CZe=l(),nh=a("li"),Mee=a("strong"),wZe=o("prophetnet"),AZe=o(" \u2014 "),eR=a("a"),yZe=o("ProphetNetTokenizer"),LZe=o(" (ProphetNet model)"),xZe=l(),ys=a("li"),Eee=a("strong"),kZe=o("qdqbert"),SZe=o(" \u2014 "),oR=a("a"),RZe=o("BertTokenizer"),BZe=o(" or "),rR=a("a"),PZe=o("BertTokenizerFast"),$Ze=o(" (QDQBert model)"),IZe=l(),sh=a("li"),Cee=a("strong"),qZe=o("rag"),NZe=o(" \u2014 "),tR=a("a"),jZe=o("RagTokenizer"),DZe=o(" (RAG model)"),GZe=l(),Ls=a("li"),wee=a("strong"),OZe=o("realm"),VZe=o(" \u2014 "),aR=a("a"),XZe=o("RealmTokenizer"),zZe=o(" or "),nR=a("a"),QZe=o("RealmTokenizerFast"),WZe=o(" (Realm model)"),HZe=l(),xs=a("li"),Aee=a("strong"),UZe=o("reformer"),JZe=o(" \u2014 "),sR=a("a"),YZe=o("ReformerTokenizer"),KZe=o(" or "),lR=a("a"),ZZe=o("ReformerTokenizerFast"),eeo=o(" (Reformer model)"),oeo=l(),ks=a("li"),yee=a("strong"),reo=o("rembert"),teo=o(" \u2014 "),iR=a("a"),aeo=o("RemBertTokenizer"),neo=o(" or "),dR=a("a"),seo=o("RemBertTokenizerFast"),leo=o(" (RemBERT model)"),ieo=l(),Ss=a("li"),Lee=a("strong"),deo=o("retribert"),ceo=o(" \u2014 "),cR=a("a"),feo=o("RetriBertTokenizer"),meo=o(" or "),fR=a("a"),geo=o("RetriBertTokenizerFast"),heo=o(" (RetriBERT model)"),peo=l(),Rs=a("li"),xee=a("strong"),_eo=o("roberta"),ueo=o(" \u2014 "),mR=a("a"),beo=o("RobertaTokenizer"),veo=o(" or "),gR=a("a"),Feo=o("RobertaTokenizerFast"),Teo=o(" (RoBERTa model)"),Meo=l(),Bs=a("li"),kee=a("strong"),Eeo=o("roformer"),Ceo=o(" \u2014 "),hR=a("a"),weo=o("RoFormerTokenizer"),Aeo=o(" or "),pR=a("a"),yeo=o("RoFormerTokenizerFast"),Leo=o(" (RoFormer model)"),xeo=l(),lh=a("li"),See=a("strong"),keo=o("speech_to_text"),Seo=o(" \u2014 "),_R=a("a"),Reo=o("Speech2TextTokenizer"),Beo=o(" (Speech2Text model)"),Peo=l(),ih=a("li"),Ree=a("strong"),$eo=o("speech_to_text_2"),Ieo=o(" \u2014 "),uR=a("a"),qeo=o("Speech2Text2Tokenizer"),Neo=o(" (Speech2Text2 model)"),jeo=l(),Ps=a("li"),Bee=a("strong"),Deo=o("splinter"),Geo=o(" \u2014 "),bR=a("a"),Oeo=o("SplinterTokenizer"),Veo=o(" or "),vR=a("a"),Xeo=o("SplinterTokenizerFast"),zeo=o(" (Splinter model)"),Qeo=l(),$s=a("li"),Pee=a("strong"),Weo=o("squeezebert"),Heo=o(" \u2014 "),FR=a("a"),Ueo=o("SqueezeBertTokenizer"),Jeo=o(" or "),TR=a("a"),Yeo=o("SqueezeBertTokenizerFast"),Keo=o(" (SqueezeBERT model)"),Zeo=l(),Is=a("li"),$ee=a("strong"),eoo=o("t5"),ooo=o(" \u2014 "),MR=a("a"),roo=o("T5Tokenizer"),too=o(" or "),ER=a("a"),aoo=o("T5TokenizerFast"),noo=o(" (T5 model)"),soo=l(),dh=a("li"),Iee=a("strong"),loo=o("tapas"),ioo=o(" \u2014 "),CR=a("a"),doo=o("TapasTokenizer"),coo=o(" (TAPAS model)"),foo=l(),ch=a("li"),qee=a("strong"),moo=o("tapex"),goo=o(" \u2014 "),wR=a("a"),hoo=o("TapexTokenizer"),poo=o(" (TAPEX model)"),_oo=l(),fh=a("li"),Nee=a("strong"),uoo=o("transfo-xl"),boo=o(" \u2014 "),AR=a("a"),voo=o("TransfoXLTokenizer"),Foo=o(" (Transformer-XL model)"),Too=l(),mh=a("li"),jee=a("strong"),Moo=o("wav2vec2"),Eoo=o(" \u2014 "),yR=a("a"),Coo=o("Wav2Vec2CTCTokenizer"),woo=o(" (Wav2Vec2 model)"),Aoo=l(),gh=a("li"),Dee=a("strong"),yoo=o("wav2vec2_phoneme"),Loo=o(" \u2014 "),LR=a("a"),xoo=o("Wav2Vec2PhonemeCTCTokenizer"),koo=o(" (Wav2Vec2Phoneme model)"),Soo=l(),qs=a("li"),Gee=a("strong"),Roo=o("xglm"),Boo=o(" \u2014 "),xR=a("a"),Poo=o("XGLMTokenizer"),$oo=o(" or "),kR=a("a"),Ioo=o("XGLMTokenizerFast"),qoo=o(" (XGLM model)"),Noo=l(),hh=a("li"),Oee=a("strong"),joo=o("xlm"),Doo=o(" \u2014 "),SR=a("a"),Goo=o("XLMTokenizer"),Ooo=o(" (XLM model)"),Voo=l(),ph=a("li"),Vee=a("strong"),Xoo=o("xlm-prophetnet"),zoo=o(" \u2014 "),RR=a("a"),Qoo=o("XLMProphetNetTokenizer"),Woo=o(" (XLMProphetNet model)"),Hoo=l(),Ns=a("li"),Xee=a("strong"),Uoo=o("xlm-roberta"),Joo=o(" \u2014 "),BR=a("a"),Yoo=o("XLMRobertaTokenizer"),Koo=o(" or "),PR=a("a"),Zoo=o("XLMRobertaTokenizerFast"),ero=o(" (XLM-RoBERTa model)"),oro=l(),js=a("li"),zee=a("strong"),rro=o("xlnet"),tro=o(" \u2014 "),$R=a("a"),aro=o("XLNetTokenizer"),nro=o(" or "),IR=a("a"),sro=o("XLNetTokenizerFast"),lro=o(" (XLNet model)"),iro=l(),Qee=a("p"),dro=o("Examples:"),cro=l(),f(QC.$$.fragment),fro=l(),_h=a("div"),f(WC.$$.fragment),mro=l(),Wee=a("p"),gro=o("Register a new tokenizer in this mapping."),DRe=l(),Hi=a("h2"),uh=a("a"),Hee=a("span"),f(HC.$$.fragment),hro=l(),Uee=a("span"),pro=o("AutoFeatureExtractor"),GRe=l(),Ho=a("div"),f(UC.$$.fragment),_ro=l(),JC=a("p"),uro=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),qR=a("a"),bro=o("AutoFeatureExtractor.from_pretrained()"),vro=o(" class method."),Fro=l(),YC=a("p"),Tro=o("This class cannot be instantiated directly using "),Jee=a("code"),Mro=o("__init__()"),Ero=o(" (throws an error)."),Cro=l(),$e=a("div"),f(KC.$$.fragment),wro=l(),Yee=a("p"),Aro=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),yro=l(),Va=a("p"),Lro=o("The feature extractor class to instantiate is selected based on the "),Kee=a("code"),xro=o("model_type"),kro=o(` property of the config object
(either passed as an argument or loaded from `),Zee=a("code"),Sro=o("pretrained_model_name_or_path"),Rro=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),eoe=a("code"),Bro=o("pretrained_model_name_or_path"),Pro=o(":"),$ro=l(),ee=a("ul"),bh=a("li"),ooe=a("strong"),Iro=o("beit"),qro=o(" \u2014 "),NR=a("a"),Nro=o("BeitFeatureExtractor"),jro=o(" (BEiT model)"),Dro=l(),vh=a("li"),roe=a("strong"),Gro=o("clip"),Oro=o(" \u2014 "),jR=a("a"),Vro=o("CLIPFeatureExtractor"),Xro=o(" (CLIP model)"),zro=l(),Fh=a("li"),toe=a("strong"),Qro=o("convnext"),Wro=o(" \u2014 "),DR=a("a"),Hro=o("ConvNextFeatureExtractor"),Uro=o(" (ConvNext model)"),Jro=l(),Th=a("li"),aoe=a("strong"),Yro=o("deit"),Kro=o(" \u2014 "),GR=a("a"),Zro=o("DeiTFeatureExtractor"),eto=o(" (DeiT model)"),oto=l(),Mh=a("li"),noe=a("strong"),rto=o("detr"),tto=o(" \u2014 "),OR=a("a"),ato=o("DetrFeatureExtractor"),nto=o(" (DETR model)"),sto=l(),Eh=a("li"),soe=a("strong"),lto=o("hubert"),ito=o(" \u2014 "),VR=a("a"),dto=o("Wav2Vec2FeatureExtractor"),cto=o(" (Hubert model)"),fto=l(),Ch=a("li"),loe=a("strong"),mto=o("layoutlmv2"),gto=o(" \u2014 "),XR=a("a"),hto=o("LayoutLMv2FeatureExtractor"),pto=o(" (LayoutLMv2 model)"),_to=l(),wh=a("li"),ioe=a("strong"),uto=o("maskformer"),bto=o(" \u2014 "),zR=a("a"),vto=o("MaskFormerFeatureExtractor"),Fto=o(" (MaskFormer model)"),Tto=l(),Ah=a("li"),doe=a("strong"),Mto=o("perceiver"),Eto=o(" \u2014 "),QR=a("a"),Cto=o("PerceiverFeatureExtractor"),wto=o(" (Perceiver model)"),Ato=l(),yh=a("li"),coe=a("strong"),yto=o("poolformer"),Lto=o(" \u2014 "),WR=a("a"),xto=o("PoolFormerFeatureExtractor"),kto=o(" (PoolFormer model)"),Sto=l(),Lh=a("li"),foe=a("strong"),Rto=o("regnet"),Bto=o(" \u2014 "),HR=a("a"),Pto=o("ConvNextFeatureExtractor"),$to=o(" (RegNet model)"),Ito=l(),xh=a("li"),moe=a("strong"),qto=o("resnet"),Nto=o(" \u2014 "),UR=a("a"),jto=o("ConvNextFeatureExtractor"),Dto=o(" (ResNet model)"),Gto=l(),kh=a("li"),goe=a("strong"),Oto=o("segformer"),Vto=o(" \u2014 "),JR=a("a"),Xto=o("SegformerFeatureExtractor"),zto=o(" (SegFormer model)"),Qto=l(),Sh=a("li"),hoe=a("strong"),Wto=o("speech_to_text"),Hto=o(" \u2014 "),YR=a("a"),Uto=o("Speech2TextFeatureExtractor"),Jto=o(" (Speech2Text model)"),Yto=l(),Rh=a("li"),poe=a("strong"),Kto=o("swin"),Zto=o(" \u2014 "),KR=a("a"),eao=o("ViTFeatureExtractor"),oao=o(" (Swin model)"),rao=l(),Bh=a("li"),_oe=a("strong"),tao=o("van"),aao=o(" \u2014 "),ZR=a("a"),nao=o("ConvNextFeatureExtractor"),sao=o(" (VAN model)"),lao=l(),Ph=a("li"),uoe=a("strong"),iao=o("vit"),dao=o(" \u2014 "),eB=a("a"),cao=o("ViTFeatureExtractor"),fao=o(" (ViT model)"),mao=l(),$h=a("li"),boe=a("strong"),gao=o("vit_mae"),hao=o(" \u2014 "),oB=a("a"),pao=o("ViTFeatureExtractor"),_ao=o(" (ViTMAE model)"),uao=l(),Ih=a("li"),voe=a("strong"),bao=o("wav2vec2"),vao=o(" \u2014 "),rB=a("a"),Fao=o("Wav2Vec2FeatureExtractor"),Tao=o(" (Wav2Vec2 model)"),Mao=l(),f(qh.$$.fragment),Eao=l(),Foe=a("p"),Cao=o("Examples:"),wao=l(),f(ZC.$$.fragment),Aao=l(),Nh=a("div"),f(e5.$$.fragment),yao=l(),Toe=a("p"),Lao=o("Register a new feature extractor for this class."),ORe=l(),Ui=a("h2"),jh=a("a"),Moe=a("span"),f(o5.$$.fragment),xao=l(),Eoe=a("span"),kao=o("AutoProcessor"),VRe=l(),Uo=a("div"),f(r5.$$.fragment),Sao=l(),t5=a("p"),Rao=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),tB=a("a"),Bao=o("AutoProcessor.from_pretrained()"),Pao=o(" class method."),$ao=l(),a5=a("p"),Iao=o("This class cannot be instantiated directly using "),Coe=a("code"),qao=o("__init__()"),Nao=o(" (throws an error)."),jao=l(),Ie=a("div"),f(n5.$$.fragment),Dao=l(),woe=a("p"),Gao=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Oao=l(),Ji=a("p"),Vao=o("The processor class to instantiate is selected based on the "),Aoe=a("code"),Xao=o("model_type"),zao=o(` property of the config object (either
passed as an argument or loaded from `),yoe=a("code"),Qao=o("pretrained_model_name_or_path"),Wao=o(" if possible):"),Hao=l(),ke=a("ul"),Dh=a("li"),Loe=a("strong"),Uao=o("clip"),Jao=o(" \u2014 "),aB=a("a"),Yao=o("CLIPProcessor"),Kao=o(" (CLIP model)"),Zao=l(),Gh=a("li"),xoe=a("strong"),eno=o("layoutlmv2"),ono=o(" \u2014 "),nB=a("a"),rno=o("LayoutLMv2Processor"),tno=o(" (LayoutLMv2 model)"),ano=l(),Oh=a("li"),koe=a("strong"),nno=o("layoutxlm"),sno=o(" \u2014 "),sB=a("a"),lno=o("LayoutXLMProcessor"),ino=o(" (LayoutXLM model)"),dno=l(),Vh=a("li"),Soe=a("strong"),cno=o("speech_to_text"),fno=o(" \u2014 "),lB=a("a"),mno=o("Speech2TextProcessor"),gno=o(" (Speech2Text model)"),hno=l(),Xh=a("li"),Roe=a("strong"),pno=o("speech_to_text_2"),_no=o(" \u2014 "),iB=a("a"),uno=o("Speech2Text2Processor"),bno=o(" (Speech2Text2 model)"),vno=l(),zh=a("li"),Boe=a("strong"),Fno=o("trocr"),Tno=o(" \u2014 "),dB=a("a"),Mno=o("TrOCRProcessor"),Eno=o(" (TrOCR model)"),Cno=l(),Qh=a("li"),Poe=a("strong"),wno=o("vision-text-dual-encoder"),Ano=o(" \u2014 "),cB=a("a"),yno=o("VisionTextDualEncoderProcessor"),Lno=o(" (VisionTextDualEncoder model)"),xno=l(),Wh=a("li"),$oe=a("strong"),kno=o("wav2vec2"),Sno=o(" \u2014 "),fB=a("a"),Rno=o("Wav2Vec2Processor"),Bno=o(" (Wav2Vec2 model)"),Pno=l(),f(Hh.$$.fragment),$no=l(),Ioe=a("p"),Ino=o("Examples:"),qno=l(),f(s5.$$.fragment),Nno=l(),Uh=a("div"),f(l5.$$.fragment),jno=l(),qoe=a("p"),Dno=o("Register a new processor for this class."),XRe=l(),Yi=a("h2"),Jh=a("a"),Noe=a("span"),f(i5.$$.fragment),Gno=l(),joe=a("span"),Ono=o("AutoModel"),zRe=l(),Jo=a("div"),f(d5.$$.fragment),Vno=l(),Ki=a("p"),Xno=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mB=a("a"),zno=o("from_pretrained()"),Qno=o(" class method or the "),gB=a("a"),Wno=o("from_config()"),Hno=o(` class
method.`),Uno=l(),c5=a("p"),Jno=o("This class cannot be instantiated directly using "),Doe=a("code"),Yno=o("__init__()"),Kno=o(" (throws an error)."),Zno=l(),Xr=a("div"),f(f5.$$.fragment),eso=l(),Goe=a("p"),oso=o("Instantiates one of the base model classes of the library from a configuration."),rso=l(),Zi=a("p"),tso=o(`Note:
Loading a model from its configuration file does `),Ooe=a("strong"),aso=o("not"),nso=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hB=a("a"),sso=o("from_pretrained()"),lso=o(" to load the model weights."),iso=l(),Voe=a("p"),dso=o("Examples:"),cso=l(),f(m5.$$.fragment),fso=l(),qe=a("div"),f(g5.$$.fragment),mso=l(),Xoe=a("p"),gso=o("Instantiate one of the base model classes of the library from a pretrained model."),hso=l(),Xa=a("p"),pso=o("The model class to instantiate is selected based on the "),zoe=a("code"),_so=o("model_type"),uso=o(` property of the config object (either
passed as an argument or loaded from `),Qoe=a("code"),bso=o("pretrained_model_name_or_path"),vso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Woe=a("code"),Fso=o("pretrained_model_name_or_path"),Tso=o(":"),Mso=l(),T=a("ul"),Yh=a("li"),Hoe=a("strong"),Eso=o("albert"),Cso=o(" \u2014 "),pB=a("a"),wso=o("AlbertModel"),Aso=o(" (ALBERT model)"),yso=l(),Kh=a("li"),Uoe=a("strong"),Lso=o("bart"),xso=o(" \u2014 "),_B=a("a"),kso=o("BartModel"),Sso=o(" (BART model)"),Rso=l(),Zh=a("li"),Joe=a("strong"),Bso=o("beit"),Pso=o(" \u2014 "),uB=a("a"),$so=o("BeitModel"),Iso=o(" (BEiT model)"),qso=l(),ep=a("li"),Yoe=a("strong"),Nso=o("bert"),jso=o(" \u2014 "),bB=a("a"),Dso=o("BertModel"),Gso=o(" (BERT model)"),Oso=l(),op=a("li"),Koe=a("strong"),Vso=o("bert-generation"),Xso=o(" \u2014 "),vB=a("a"),zso=o("BertGenerationEncoder"),Qso=o(" (Bert Generation model)"),Wso=l(),rp=a("li"),Zoe=a("strong"),Hso=o("big_bird"),Uso=o(" \u2014 "),FB=a("a"),Jso=o("BigBirdModel"),Yso=o(" (BigBird model)"),Kso=l(),tp=a("li"),ere=a("strong"),Zso=o("bigbird_pegasus"),elo=o(" \u2014 "),TB=a("a"),olo=o("BigBirdPegasusModel"),rlo=o(" (BigBirdPegasus model)"),tlo=l(),ap=a("li"),ore=a("strong"),alo=o("blenderbot"),nlo=o(" \u2014 "),MB=a("a"),slo=o("BlenderbotModel"),llo=o(" (Blenderbot model)"),ilo=l(),np=a("li"),rre=a("strong"),dlo=o("blenderbot-small"),clo=o(" \u2014 "),EB=a("a"),flo=o("BlenderbotSmallModel"),mlo=o(" (BlenderbotSmall model)"),glo=l(),sp=a("li"),tre=a("strong"),hlo=o("camembert"),plo=o(" \u2014 "),CB=a("a"),_lo=o("CamembertModel"),ulo=o(" (CamemBERT model)"),blo=l(),lp=a("li"),are=a("strong"),vlo=o("canine"),Flo=o(" \u2014 "),wB=a("a"),Tlo=o("CanineModel"),Mlo=o(" (Canine model)"),Elo=l(),ip=a("li"),nre=a("strong"),Clo=o("clip"),wlo=o(" \u2014 "),AB=a("a"),Alo=o("CLIPModel"),ylo=o(" (CLIP model)"),Llo=l(),dp=a("li"),sre=a("strong"),xlo=o("convbert"),klo=o(" \u2014 "),yB=a("a"),Slo=o("ConvBertModel"),Rlo=o(" (ConvBERT model)"),Blo=l(),cp=a("li"),lre=a("strong"),Plo=o("convnext"),$lo=o(" \u2014 "),LB=a("a"),Ilo=o("ConvNextModel"),qlo=o(" (ConvNext model)"),Nlo=l(),fp=a("li"),ire=a("strong"),jlo=o("ctrl"),Dlo=o(" \u2014 "),xB=a("a"),Glo=o("CTRLModel"),Olo=o(" (CTRL model)"),Vlo=l(),mp=a("li"),dre=a("strong"),Xlo=o("data2vec-audio"),zlo=o(" \u2014 "),kB=a("a"),Qlo=o("Data2VecAudioModel"),Wlo=o(" (Data2VecAudio model)"),Hlo=l(),gp=a("li"),cre=a("strong"),Ulo=o("data2vec-text"),Jlo=o(" \u2014 "),SB=a("a"),Ylo=o("Data2VecTextModel"),Klo=o(" (Data2VecText model)"),Zlo=l(),hp=a("li"),fre=a("strong"),eio=o("data2vec-vision"),oio=o(" \u2014 "),RB=a("a"),rio=o("Data2VecVisionModel"),tio=o(" (Data2VecVision model)"),aio=l(),pp=a("li"),mre=a("strong"),nio=o("deberta"),sio=o(" \u2014 "),BB=a("a"),lio=o("DebertaModel"),iio=o(" (DeBERTa model)"),dio=l(),_p=a("li"),gre=a("strong"),cio=o("deberta-v2"),fio=o(" \u2014 "),PB=a("a"),mio=o("DebertaV2Model"),gio=o(" (DeBERTa-v2 model)"),hio=l(),up=a("li"),hre=a("strong"),pio=o("decision_transformer"),_io=o(" \u2014 "),$B=a("a"),uio=o("DecisionTransformerModel"),bio=o(" (Decision Transformer model)"),vio=l(),bp=a("li"),pre=a("strong"),Fio=o("deit"),Tio=o(" \u2014 "),IB=a("a"),Mio=o("DeiTModel"),Eio=o(" (DeiT model)"),Cio=l(),vp=a("li"),_re=a("strong"),wio=o("detr"),Aio=o(" \u2014 "),qB=a("a"),yio=o("DetrModel"),Lio=o(" (DETR model)"),xio=l(),Fp=a("li"),ure=a("strong"),kio=o("distilbert"),Sio=o(" \u2014 "),NB=a("a"),Rio=o("DistilBertModel"),Bio=o(" (DistilBERT model)"),Pio=l(),Tp=a("li"),bre=a("strong"),$io=o("dpr"),Iio=o(" \u2014 "),jB=a("a"),qio=o("DPRQuestionEncoder"),Nio=o(" (DPR model)"),jio=l(),Mp=a("li"),vre=a("strong"),Dio=o("dpt"),Gio=o(" \u2014 "),DB=a("a"),Oio=o("DPTModel"),Vio=o(" (DPT model)"),Xio=l(),Ep=a("li"),Fre=a("strong"),zio=o("electra"),Qio=o(" \u2014 "),GB=a("a"),Wio=o("ElectraModel"),Hio=o(" (ELECTRA model)"),Uio=l(),Cp=a("li"),Tre=a("strong"),Jio=o("flaubert"),Yio=o(" \u2014 "),OB=a("a"),Kio=o("FlaubertModel"),Zio=o(" (FlauBERT model)"),edo=l(),wp=a("li"),Mre=a("strong"),odo=o("fnet"),rdo=o(" \u2014 "),VB=a("a"),tdo=o("FNetModel"),ado=o(" (FNet model)"),ndo=l(),Ap=a("li"),Ere=a("strong"),sdo=o("fsmt"),ldo=o(" \u2014 "),XB=a("a"),ido=o("FSMTModel"),ddo=o(" (FairSeq Machine-Translation model)"),cdo=l(),Ds=a("li"),Cre=a("strong"),fdo=o("funnel"),mdo=o(" \u2014 "),zB=a("a"),gdo=o("FunnelModel"),hdo=o(" or "),QB=a("a"),pdo=o("FunnelBaseModel"),_do=o(" (Funnel Transformer model)"),udo=l(),yp=a("li"),wre=a("strong"),bdo=o("glpn"),vdo=o(" \u2014 "),WB=a("a"),Fdo=o("GLPNModel"),Tdo=o(" (GLPN model)"),Mdo=l(),Lp=a("li"),Are=a("strong"),Edo=o("gpt2"),Cdo=o(" \u2014 "),HB=a("a"),wdo=o("GPT2Model"),Ado=o(" (OpenAI GPT-2 model)"),ydo=l(),xp=a("li"),yre=a("strong"),Ldo=o("gpt_neo"),xdo=o(" \u2014 "),UB=a("a"),kdo=o("GPTNeoModel"),Sdo=o(" (GPT Neo model)"),Rdo=l(),kp=a("li"),Lre=a("strong"),Bdo=o("gptj"),Pdo=o(" \u2014 "),JB=a("a"),$do=o("GPTJModel"),Ido=o(" (GPT-J model)"),qdo=l(),Sp=a("li"),xre=a("strong"),Ndo=o("hubert"),jdo=o(" \u2014 "),YB=a("a"),Ddo=o("HubertModel"),Gdo=o(" (Hubert model)"),Odo=l(),Rp=a("li"),kre=a("strong"),Vdo=o("ibert"),Xdo=o(" \u2014 "),KB=a("a"),zdo=o("IBertModel"),Qdo=o(" (I-BERT model)"),Wdo=l(),Bp=a("li"),Sre=a("strong"),Hdo=o("imagegpt"),Udo=o(" \u2014 "),ZB=a("a"),Jdo=o("ImageGPTModel"),Ydo=o(" (ImageGPT model)"),Kdo=l(),Pp=a("li"),Rre=a("strong"),Zdo=o("layoutlm"),eco=o(" \u2014 "),eP=a("a"),oco=o("LayoutLMModel"),rco=o(" (LayoutLM model)"),tco=l(),$p=a("li"),Bre=a("strong"),aco=o("layoutlmv2"),nco=o(" \u2014 "),oP=a("a"),sco=o("LayoutLMv2Model"),lco=o(" (LayoutLMv2 model)"),ico=l(),Ip=a("li"),Pre=a("strong"),dco=o("led"),cco=o(" \u2014 "),rP=a("a"),fco=o("LEDModel"),mco=o(" (LED model)"),gco=l(),qp=a("li"),$re=a("strong"),hco=o("longformer"),pco=o(" \u2014 "),tP=a("a"),_co=o("LongformerModel"),uco=o(" (Longformer model)"),bco=l(),Np=a("li"),Ire=a("strong"),vco=o("luke"),Fco=o(" \u2014 "),aP=a("a"),Tco=o("LukeModel"),Mco=o(" (LUKE model)"),Eco=l(),jp=a("li"),qre=a("strong"),Cco=o("lxmert"),wco=o(" \u2014 "),nP=a("a"),Aco=o("LxmertModel"),yco=o(" (LXMERT model)"),Lco=l(),Dp=a("li"),Nre=a("strong"),xco=o("m2m_100"),kco=o(" \u2014 "),sP=a("a"),Sco=o("M2M100Model"),Rco=o(" (M2M100 model)"),Bco=l(),Gp=a("li"),jre=a("strong"),Pco=o("marian"),$co=o(" \u2014 "),lP=a("a"),Ico=o("MarianModel"),qco=o(" (Marian model)"),Nco=l(),Op=a("li"),Dre=a("strong"),jco=o("maskformer"),Dco=o(" \u2014 "),iP=a("a"),Gco=o("MaskFormerModel"),Oco=o(" (MaskFormer model)"),Vco=l(),Vp=a("li"),Gre=a("strong"),Xco=o("mbart"),zco=o(" \u2014 "),dP=a("a"),Qco=o("MBartModel"),Wco=o(" (mBART model)"),Hco=l(),Xp=a("li"),Ore=a("strong"),Uco=o("megatron-bert"),Jco=o(" \u2014 "),cP=a("a"),Yco=o("MegatronBertModel"),Kco=o(" (MegatronBert model)"),Zco=l(),zp=a("li"),Vre=a("strong"),efo=o("mobilebert"),ofo=o(" \u2014 "),fP=a("a"),rfo=o("MobileBertModel"),tfo=o(" (MobileBERT model)"),afo=l(),Qp=a("li"),Xre=a("strong"),nfo=o("mpnet"),sfo=o(" \u2014 "),mP=a("a"),lfo=o("MPNetModel"),ifo=o(" (MPNet model)"),dfo=l(),Wp=a("li"),zre=a("strong"),cfo=o("mt5"),ffo=o(" \u2014 "),gP=a("a"),mfo=o("MT5Model"),gfo=o(" (mT5 model)"),hfo=l(),Hp=a("li"),Qre=a("strong"),pfo=o("nystromformer"),_fo=o(" \u2014 "),hP=a("a"),ufo=o("NystromformerModel"),bfo=o(" (Nystromformer model)"),vfo=l(),Up=a("li"),Wre=a("strong"),Ffo=o("openai-gpt"),Tfo=o(" \u2014 "),pP=a("a"),Mfo=o("OpenAIGPTModel"),Efo=o(" (OpenAI GPT model)"),Cfo=l(),Jp=a("li"),Hre=a("strong"),wfo=o("pegasus"),Afo=o(" \u2014 "),_P=a("a"),yfo=o("PegasusModel"),Lfo=o(" (Pegasus model)"),xfo=l(),Yp=a("li"),Ure=a("strong"),kfo=o("perceiver"),Sfo=o(" \u2014 "),uP=a("a"),Rfo=o("PerceiverModel"),Bfo=o(" (Perceiver model)"),Pfo=l(),Kp=a("li"),Jre=a("strong"),$fo=o("plbart"),Ifo=o(" \u2014 "),bP=a("a"),qfo=o("PLBartModel"),Nfo=o(" (PLBart model)"),jfo=l(),Zp=a("li"),Yre=a("strong"),Dfo=o("poolformer"),Gfo=o(" \u2014 "),vP=a("a"),Ofo=o("PoolFormerModel"),Vfo=o(" (PoolFormer model)"),Xfo=l(),e_=a("li"),Kre=a("strong"),zfo=o("prophetnet"),Qfo=o(" \u2014 "),FP=a("a"),Wfo=o("ProphetNetModel"),Hfo=o(" (ProphetNet model)"),Ufo=l(),o_=a("li"),Zre=a("strong"),Jfo=o("qdqbert"),Yfo=o(" \u2014 "),TP=a("a"),Kfo=o("QDQBertModel"),Zfo=o(" (QDQBert model)"),emo=l(),r_=a("li"),ete=a("strong"),omo=o("reformer"),rmo=o(" \u2014 "),MP=a("a"),tmo=o("ReformerModel"),amo=o(" (Reformer model)"),nmo=l(),t_=a("li"),ote=a("strong"),smo=o("regnet"),lmo=o(" \u2014 "),EP=a("a"),imo=o("RegNetModel"),dmo=o(" (RegNet model)"),cmo=l(),a_=a("li"),rte=a("strong"),fmo=o("rembert"),mmo=o(" \u2014 "),CP=a("a"),gmo=o("RemBertModel"),hmo=o(" (RemBERT model)"),pmo=l(),n_=a("li"),tte=a("strong"),_mo=o("resnet"),umo=o(" \u2014 "),wP=a("a"),bmo=o("ResNetModel"),vmo=o(" (ResNet model)"),Fmo=l(),s_=a("li"),ate=a("strong"),Tmo=o("retribert"),Mmo=o(" \u2014 "),AP=a("a"),Emo=o("RetriBertModel"),Cmo=o(" (RetriBERT model)"),wmo=l(),l_=a("li"),nte=a("strong"),Amo=o("roberta"),ymo=o(" \u2014 "),yP=a("a"),Lmo=o("RobertaModel"),xmo=o(" (RoBERTa model)"),kmo=l(),i_=a("li"),ste=a("strong"),Smo=o("roformer"),Rmo=o(" \u2014 "),LP=a("a"),Bmo=o("RoFormerModel"),Pmo=o(" (RoFormer model)"),$mo=l(),d_=a("li"),lte=a("strong"),Imo=o("segformer"),qmo=o(" \u2014 "),xP=a("a"),Nmo=o("SegformerModel"),jmo=o(" (SegFormer model)"),Dmo=l(),c_=a("li"),ite=a("strong"),Gmo=o("sew"),Omo=o(" \u2014 "),kP=a("a"),Vmo=o("SEWModel"),Xmo=o(" (SEW model)"),zmo=l(),f_=a("li"),dte=a("strong"),Qmo=o("sew-d"),Wmo=o(" \u2014 "),SP=a("a"),Hmo=o("SEWDModel"),Umo=o(" (SEW-D model)"),Jmo=l(),m_=a("li"),cte=a("strong"),Ymo=o("speech_to_text"),Kmo=o(" \u2014 "),RP=a("a"),Zmo=o("Speech2TextModel"),ego=o(" (Speech2Text model)"),ogo=l(),g_=a("li"),fte=a("strong"),rgo=o("splinter"),tgo=o(" \u2014 "),BP=a("a"),ago=o("SplinterModel"),ngo=o(" (Splinter model)"),sgo=l(),h_=a("li"),mte=a("strong"),lgo=o("squeezebert"),igo=o(" \u2014 "),PP=a("a"),dgo=o("SqueezeBertModel"),cgo=o(" (SqueezeBERT model)"),fgo=l(),p_=a("li"),gte=a("strong"),mgo=o("swin"),ggo=o(" \u2014 "),$P=a("a"),hgo=o("SwinModel"),pgo=o(" (Swin model)"),_go=l(),__=a("li"),hte=a("strong"),ugo=o("t5"),bgo=o(" \u2014 "),IP=a("a"),vgo=o("T5Model"),Fgo=o(" (T5 model)"),Tgo=l(),u_=a("li"),pte=a("strong"),Mgo=o("tapas"),Ego=o(" \u2014 "),qP=a("a"),Cgo=o("TapasModel"),wgo=o(" (TAPAS model)"),Ago=l(),b_=a("li"),_te=a("strong"),ygo=o("transfo-xl"),Lgo=o(" \u2014 "),NP=a("a"),xgo=o("TransfoXLModel"),kgo=o(" (Transformer-XL model)"),Sgo=l(),v_=a("li"),ute=a("strong"),Rgo=o("unispeech"),Bgo=o(" \u2014 "),jP=a("a"),Pgo=o("UniSpeechModel"),$go=o(" (UniSpeech model)"),Igo=l(),F_=a("li"),bte=a("strong"),qgo=o("unispeech-sat"),Ngo=o(" \u2014 "),DP=a("a"),jgo=o("UniSpeechSatModel"),Dgo=o(" (UniSpeechSat model)"),Ggo=l(),T_=a("li"),vte=a("strong"),Ogo=o("van"),Vgo=o(" \u2014 "),GP=a("a"),Xgo=o("VanModel"),zgo=o(" (VAN model)"),Qgo=l(),M_=a("li"),Fte=a("strong"),Wgo=o("vilt"),Hgo=o(" \u2014 "),OP=a("a"),Ugo=o("ViltModel"),Jgo=o(" (ViLT model)"),Ygo=l(),E_=a("li"),Tte=a("strong"),Kgo=o("vision-text-dual-encoder"),Zgo=o(" \u2014 "),VP=a("a"),eho=o("VisionTextDualEncoderModel"),oho=o(" (VisionTextDualEncoder model)"),rho=l(),C_=a("li"),Mte=a("strong"),tho=o("visual_bert"),aho=o(" \u2014 "),XP=a("a"),nho=o("VisualBertModel"),sho=o(" (VisualBert model)"),lho=l(),w_=a("li"),Ete=a("strong"),iho=o("vit"),dho=o(" \u2014 "),zP=a("a"),cho=o("ViTModel"),fho=o(" (ViT model)"),mho=l(),A_=a("li"),Cte=a("strong"),gho=o("vit_mae"),hho=o(" \u2014 "),QP=a("a"),pho=o("ViTMAEModel"),_ho=o(" (ViTMAE model)"),uho=l(),y_=a("li"),wte=a("strong"),bho=o("wav2vec2"),vho=o(" \u2014 "),WP=a("a"),Fho=o("Wav2Vec2Model"),Tho=o(" (Wav2Vec2 model)"),Mho=l(),L_=a("li"),Ate=a("strong"),Eho=o("wavlm"),Cho=o(" \u2014 "),HP=a("a"),who=o("WavLMModel"),Aho=o(" (WavLM model)"),yho=l(),x_=a("li"),yte=a("strong"),Lho=o("xglm"),xho=o(" \u2014 "),UP=a("a"),kho=o("XGLMModel"),Sho=o(" (XGLM model)"),Rho=l(),k_=a("li"),Lte=a("strong"),Bho=o("xlm"),Pho=o(" \u2014 "),JP=a("a"),$ho=o("XLMModel"),Iho=o(" (XLM model)"),qho=l(),S_=a("li"),xte=a("strong"),Nho=o("xlm-prophetnet"),jho=o(" \u2014 "),YP=a("a"),Dho=o("XLMProphetNetModel"),Gho=o(" (XLMProphetNet model)"),Oho=l(),R_=a("li"),kte=a("strong"),Vho=o("xlm-roberta"),Xho=o(" \u2014 "),KP=a("a"),zho=o("XLMRobertaModel"),Qho=o(" (XLM-RoBERTa model)"),Who=l(),B_=a("li"),Ste=a("strong"),Hho=o("xlm-roberta-xl"),Uho=o(" \u2014 "),ZP=a("a"),Jho=o("XLMRobertaXLModel"),Yho=o(" (XLM-RoBERTa-XL model)"),Kho=l(),P_=a("li"),Rte=a("strong"),Zho=o("xlnet"),epo=o(" \u2014 "),e$=a("a"),opo=o("XLNetModel"),rpo=o(" (XLNet model)"),tpo=l(),$_=a("li"),Bte=a("strong"),apo=o("yoso"),npo=o(" \u2014 "),o$=a("a"),spo=o("YosoModel"),lpo=o(" (YOSO model)"),ipo=l(),I_=a("p"),dpo=o("The model is set in evaluation mode by default using "),Pte=a("code"),cpo=o("model.eval()"),fpo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$te=a("code"),mpo=o("model.train()"),gpo=l(),Ite=a("p"),hpo=o("Examples:"),ppo=l(),f(h5.$$.fragment),QRe=l(),ed=a("h2"),q_=a("a"),qte=a("span"),f(p5.$$.fragment),_po=l(),Nte=a("span"),upo=o("AutoModelForPreTraining"),WRe=l(),Yo=a("div"),f(_5.$$.fragment),bpo=l(),od=a("p"),vpo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),r$=a("a"),Fpo=o("from_pretrained()"),Tpo=o(" class method or the "),t$=a("a"),Mpo=o("from_config()"),Epo=o(` class
method.`),Cpo=l(),u5=a("p"),wpo=o("This class cannot be instantiated directly using "),jte=a("code"),Apo=o("__init__()"),ypo=o(" (throws an error)."),Lpo=l(),zr=a("div"),f(b5.$$.fragment),xpo=l(),Dte=a("p"),kpo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Spo=l(),rd=a("p"),Rpo=o(`Note:
Loading a model from its configuration file does `),Gte=a("strong"),Bpo=o("not"),Ppo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),a$=a("a"),$po=o("from_pretrained()"),Ipo=o(" to load the model weights."),qpo=l(),Ote=a("p"),Npo=o("Examples:"),jpo=l(),f(v5.$$.fragment),Dpo=l(),Ne=a("div"),f(F5.$$.fragment),Gpo=l(),Vte=a("p"),Opo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vpo=l(),za=a("p"),Xpo=o("The model class to instantiate is selected based on the "),Xte=a("code"),zpo=o("model_type"),Qpo=o(` property of the config object (either
passed as an argument or loaded from `),zte=a("code"),Wpo=o("pretrained_model_name_or_path"),Hpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qte=a("code"),Upo=o("pretrained_model_name_or_path"),Jpo=o(":"),Ypo=l(),S=a("ul"),N_=a("li"),Wte=a("strong"),Kpo=o("albert"),Zpo=o(" \u2014 "),n$=a("a"),e_o=o("AlbertForPreTraining"),o_o=o(" (ALBERT model)"),r_o=l(),j_=a("li"),Hte=a("strong"),t_o=o("bart"),a_o=o(" \u2014 "),s$=a("a"),n_o=o("BartForConditionalGeneration"),s_o=o(" (BART model)"),l_o=l(),D_=a("li"),Ute=a("strong"),i_o=o("bert"),d_o=o(" \u2014 "),l$=a("a"),c_o=o("BertForPreTraining"),f_o=o(" (BERT model)"),m_o=l(),G_=a("li"),Jte=a("strong"),g_o=o("big_bird"),h_o=o(" \u2014 "),i$=a("a"),p_o=o("BigBirdForPreTraining"),__o=o(" (BigBird model)"),u_o=l(),O_=a("li"),Yte=a("strong"),b_o=o("camembert"),v_o=o(" \u2014 "),d$=a("a"),F_o=o("CamembertForMaskedLM"),T_o=o(" (CamemBERT model)"),M_o=l(),V_=a("li"),Kte=a("strong"),E_o=o("ctrl"),C_o=o(" \u2014 "),c$=a("a"),w_o=o("CTRLLMHeadModel"),A_o=o(" (CTRL model)"),y_o=l(),X_=a("li"),Zte=a("strong"),L_o=o("data2vec-text"),x_o=o(" \u2014 "),f$=a("a"),k_o=o("Data2VecTextForMaskedLM"),S_o=o(" (Data2VecText model)"),R_o=l(),z_=a("li"),eae=a("strong"),B_o=o("deberta"),P_o=o(" \u2014 "),m$=a("a"),$_o=o("DebertaForMaskedLM"),I_o=o(" (DeBERTa model)"),q_o=l(),Q_=a("li"),oae=a("strong"),N_o=o("deberta-v2"),j_o=o(" \u2014 "),g$=a("a"),D_o=o("DebertaV2ForMaskedLM"),G_o=o(" (DeBERTa-v2 model)"),O_o=l(),W_=a("li"),rae=a("strong"),V_o=o("distilbert"),X_o=o(" \u2014 "),h$=a("a"),z_o=o("DistilBertForMaskedLM"),Q_o=o(" (DistilBERT model)"),W_o=l(),H_=a("li"),tae=a("strong"),H_o=o("electra"),U_o=o(" \u2014 "),p$=a("a"),J_o=o("ElectraForPreTraining"),Y_o=o(" (ELECTRA model)"),K_o=l(),U_=a("li"),aae=a("strong"),Z_o=o("flaubert"),euo=o(" \u2014 "),_$=a("a"),ouo=o("FlaubertWithLMHeadModel"),ruo=o(" (FlauBERT model)"),tuo=l(),J_=a("li"),nae=a("strong"),auo=o("fnet"),nuo=o(" \u2014 "),u$=a("a"),suo=o("FNetForPreTraining"),luo=o(" (FNet model)"),iuo=l(),Y_=a("li"),sae=a("strong"),duo=o("fsmt"),cuo=o(" \u2014 "),b$=a("a"),fuo=o("FSMTForConditionalGeneration"),muo=o(" (FairSeq Machine-Translation model)"),guo=l(),K_=a("li"),lae=a("strong"),huo=o("funnel"),puo=o(" \u2014 "),v$=a("a"),_uo=o("FunnelForPreTraining"),uuo=o(" (Funnel Transformer model)"),buo=l(),Z_=a("li"),iae=a("strong"),vuo=o("gpt2"),Fuo=o(" \u2014 "),F$=a("a"),Tuo=o("GPT2LMHeadModel"),Muo=o(" (OpenAI GPT-2 model)"),Euo=l(),eu=a("li"),dae=a("strong"),Cuo=o("ibert"),wuo=o(" \u2014 "),T$=a("a"),Auo=o("IBertForMaskedLM"),yuo=o(" (I-BERT model)"),Luo=l(),ou=a("li"),cae=a("strong"),xuo=o("layoutlm"),kuo=o(" \u2014 "),M$=a("a"),Suo=o("LayoutLMForMaskedLM"),Ruo=o(" (LayoutLM model)"),Buo=l(),ru=a("li"),fae=a("strong"),Puo=o("longformer"),$uo=o(" \u2014 "),E$=a("a"),Iuo=o("LongformerForMaskedLM"),quo=o(" (Longformer model)"),Nuo=l(),tu=a("li"),mae=a("strong"),juo=o("lxmert"),Duo=o(" \u2014 "),C$=a("a"),Guo=o("LxmertForPreTraining"),Ouo=o(" (LXMERT model)"),Vuo=l(),au=a("li"),gae=a("strong"),Xuo=o("megatron-bert"),zuo=o(" \u2014 "),w$=a("a"),Quo=o("MegatronBertForPreTraining"),Wuo=o(" (MegatronBert model)"),Huo=l(),nu=a("li"),hae=a("strong"),Uuo=o("mobilebert"),Juo=o(" \u2014 "),A$=a("a"),Yuo=o("MobileBertForPreTraining"),Kuo=o(" (MobileBERT model)"),Zuo=l(),su=a("li"),pae=a("strong"),e6o=o("mpnet"),o6o=o(" \u2014 "),y$=a("a"),r6o=o("MPNetForMaskedLM"),t6o=o(" (MPNet model)"),a6o=l(),lu=a("li"),_ae=a("strong"),n6o=o("openai-gpt"),s6o=o(" \u2014 "),L$=a("a"),l6o=o("OpenAIGPTLMHeadModel"),i6o=o(" (OpenAI GPT model)"),d6o=l(),iu=a("li"),uae=a("strong"),c6o=o("retribert"),f6o=o(" \u2014 "),x$=a("a"),m6o=o("RetriBertModel"),g6o=o(" (RetriBERT model)"),h6o=l(),du=a("li"),bae=a("strong"),p6o=o("roberta"),_6o=o(" \u2014 "),k$=a("a"),u6o=o("RobertaForMaskedLM"),b6o=o(" (RoBERTa model)"),v6o=l(),cu=a("li"),vae=a("strong"),F6o=o("squeezebert"),T6o=o(" \u2014 "),S$=a("a"),M6o=o("SqueezeBertForMaskedLM"),E6o=o(" (SqueezeBERT model)"),C6o=l(),fu=a("li"),Fae=a("strong"),w6o=o("t5"),A6o=o(" \u2014 "),R$=a("a"),y6o=o("T5ForConditionalGeneration"),L6o=o(" (T5 model)"),x6o=l(),mu=a("li"),Tae=a("strong"),k6o=o("tapas"),S6o=o(" \u2014 "),B$=a("a"),R6o=o("TapasForMaskedLM"),B6o=o(" (TAPAS model)"),P6o=l(),gu=a("li"),Mae=a("strong"),$6o=o("transfo-xl"),I6o=o(" \u2014 "),P$=a("a"),q6o=o("TransfoXLLMHeadModel"),N6o=o(" (Transformer-XL model)"),j6o=l(),hu=a("li"),Eae=a("strong"),D6o=o("unispeech"),G6o=o(" \u2014 "),$$=a("a"),O6o=o("UniSpeechForPreTraining"),V6o=o(" (UniSpeech model)"),X6o=l(),pu=a("li"),Cae=a("strong"),z6o=o("unispeech-sat"),Q6o=o(" \u2014 "),I$=a("a"),W6o=o("UniSpeechSatForPreTraining"),H6o=o(" (UniSpeechSat model)"),U6o=l(),_u=a("li"),wae=a("strong"),J6o=o("visual_bert"),Y6o=o(" \u2014 "),q$=a("a"),K6o=o("VisualBertForPreTraining"),Z6o=o(" (VisualBert model)"),e1o=l(),uu=a("li"),Aae=a("strong"),o1o=o("vit_mae"),r1o=o(" \u2014 "),N$=a("a"),t1o=o("ViTMAEForPreTraining"),a1o=o(" (ViTMAE model)"),n1o=l(),bu=a("li"),yae=a("strong"),s1o=o("wav2vec2"),l1o=o(" \u2014 "),j$=a("a"),i1o=o("Wav2Vec2ForPreTraining"),d1o=o(" (Wav2Vec2 model)"),c1o=l(),vu=a("li"),Lae=a("strong"),f1o=o("xlm"),m1o=o(" \u2014 "),D$=a("a"),g1o=o("XLMWithLMHeadModel"),h1o=o(" (XLM model)"),p1o=l(),Fu=a("li"),xae=a("strong"),_1o=o("xlm-roberta"),u1o=o(" \u2014 "),G$=a("a"),b1o=o("XLMRobertaForMaskedLM"),v1o=o(" (XLM-RoBERTa model)"),F1o=l(),Tu=a("li"),kae=a("strong"),T1o=o("xlm-roberta-xl"),M1o=o(" \u2014 "),O$=a("a"),E1o=o("XLMRobertaXLForMaskedLM"),C1o=o(" (XLM-RoBERTa-XL model)"),w1o=l(),Mu=a("li"),Sae=a("strong"),A1o=o("xlnet"),y1o=o(" \u2014 "),V$=a("a"),L1o=o("XLNetLMHeadModel"),x1o=o(" (XLNet model)"),k1o=l(),Eu=a("p"),S1o=o("The model is set in evaluation mode by default using "),Rae=a("code"),R1o=o("model.eval()"),B1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bae=a("code"),P1o=o("model.train()"),$1o=l(),Pae=a("p"),I1o=o("Examples:"),q1o=l(),f(T5.$$.fragment),HRe=l(),td=a("h2"),Cu=a("a"),$ae=a("span"),f(M5.$$.fragment),N1o=l(),Iae=a("span"),j1o=o("AutoModelForCausalLM"),URe=l(),Ko=a("div"),f(E5.$$.fragment),D1o=l(),ad=a("p"),G1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),X$=a("a"),O1o=o("from_pretrained()"),V1o=o(" class method or the "),z$=a("a"),X1o=o("from_config()"),z1o=o(` class
method.`),Q1o=l(),C5=a("p"),W1o=o("This class cannot be instantiated directly using "),qae=a("code"),H1o=o("__init__()"),U1o=o(" (throws an error)."),J1o=l(),Qr=a("div"),f(w5.$$.fragment),Y1o=l(),Nae=a("p"),K1o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Z1o=l(),nd=a("p"),ebo=o(`Note:
Loading a model from its configuration file does `),jae=a("strong"),obo=o("not"),rbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Q$=a("a"),tbo=o("from_pretrained()"),abo=o(" to load the model weights."),nbo=l(),Dae=a("p"),sbo=o("Examples:"),lbo=l(),f(A5.$$.fragment),ibo=l(),je=a("div"),f(y5.$$.fragment),dbo=l(),Gae=a("p"),cbo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fbo=l(),Qa=a("p"),mbo=o("The model class to instantiate is selected based on the "),Oae=a("code"),gbo=o("model_type"),hbo=o(` property of the config object (either
passed as an argument or loaded from `),Vae=a("code"),pbo=o("pretrained_model_name_or_path"),_bo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xae=a("code"),ubo=o("pretrained_model_name_or_path"),bbo=o(":"),vbo=l(),$=a("ul"),wu=a("li"),zae=a("strong"),Fbo=o("bart"),Tbo=o(" \u2014 "),W$=a("a"),Mbo=o("BartForCausalLM"),Ebo=o(" (BART model)"),Cbo=l(),Au=a("li"),Qae=a("strong"),wbo=o("bert"),Abo=o(" \u2014 "),H$=a("a"),ybo=o("BertLMHeadModel"),Lbo=o(" (BERT model)"),xbo=l(),yu=a("li"),Wae=a("strong"),kbo=o("bert-generation"),Sbo=o(" \u2014 "),U$=a("a"),Rbo=o("BertGenerationDecoder"),Bbo=o(" (Bert Generation model)"),Pbo=l(),Lu=a("li"),Hae=a("strong"),$bo=o("big_bird"),Ibo=o(" \u2014 "),J$=a("a"),qbo=o("BigBirdForCausalLM"),Nbo=o(" (BigBird model)"),jbo=l(),xu=a("li"),Uae=a("strong"),Dbo=o("bigbird_pegasus"),Gbo=o(" \u2014 "),Y$=a("a"),Obo=o("BigBirdPegasusForCausalLM"),Vbo=o(" (BigBirdPegasus model)"),Xbo=l(),ku=a("li"),Jae=a("strong"),zbo=o("blenderbot"),Qbo=o(" \u2014 "),K$=a("a"),Wbo=o("BlenderbotForCausalLM"),Hbo=o(" (Blenderbot model)"),Ubo=l(),Su=a("li"),Yae=a("strong"),Jbo=o("blenderbot-small"),Ybo=o(" \u2014 "),Z$=a("a"),Kbo=o("BlenderbotSmallForCausalLM"),Zbo=o(" (BlenderbotSmall model)"),e2o=l(),Ru=a("li"),Kae=a("strong"),o2o=o("camembert"),r2o=o(" \u2014 "),eI=a("a"),t2o=o("CamembertForCausalLM"),a2o=o(" (CamemBERT model)"),n2o=l(),Bu=a("li"),Zae=a("strong"),s2o=o("ctrl"),l2o=o(" \u2014 "),oI=a("a"),i2o=o("CTRLLMHeadModel"),d2o=o(" (CTRL model)"),c2o=l(),Pu=a("li"),ene=a("strong"),f2o=o("data2vec-text"),m2o=o(" \u2014 "),rI=a("a"),g2o=o("Data2VecTextForCausalLM"),h2o=o(" (Data2VecText model)"),p2o=l(),$u=a("li"),one=a("strong"),_2o=o("electra"),u2o=o(" \u2014 "),tI=a("a"),b2o=o("ElectraForCausalLM"),v2o=o(" (ELECTRA model)"),F2o=l(),Iu=a("li"),rne=a("strong"),T2o=o("gpt2"),M2o=o(" \u2014 "),aI=a("a"),E2o=o("GPT2LMHeadModel"),C2o=o(" (OpenAI GPT-2 model)"),w2o=l(),qu=a("li"),tne=a("strong"),A2o=o("gpt_neo"),y2o=o(" \u2014 "),nI=a("a"),L2o=o("GPTNeoForCausalLM"),x2o=o(" (GPT Neo model)"),k2o=l(),Nu=a("li"),ane=a("strong"),S2o=o("gptj"),R2o=o(" \u2014 "),sI=a("a"),B2o=o("GPTJForCausalLM"),P2o=o(" (GPT-J model)"),$2o=l(),ju=a("li"),nne=a("strong"),I2o=o("marian"),q2o=o(" \u2014 "),lI=a("a"),N2o=o("MarianForCausalLM"),j2o=o(" (Marian model)"),D2o=l(),Du=a("li"),sne=a("strong"),G2o=o("mbart"),O2o=o(" \u2014 "),iI=a("a"),V2o=o("MBartForCausalLM"),X2o=o(" (mBART model)"),z2o=l(),Gu=a("li"),lne=a("strong"),Q2o=o("megatron-bert"),W2o=o(" \u2014 "),dI=a("a"),H2o=o("MegatronBertForCausalLM"),U2o=o(" (MegatronBert model)"),J2o=l(),Ou=a("li"),ine=a("strong"),Y2o=o("openai-gpt"),K2o=o(" \u2014 "),cI=a("a"),Z2o=o("OpenAIGPTLMHeadModel"),evo=o(" (OpenAI GPT model)"),ovo=l(),Vu=a("li"),dne=a("strong"),rvo=o("pegasus"),tvo=o(" \u2014 "),fI=a("a"),avo=o("PegasusForCausalLM"),nvo=o(" (Pegasus model)"),svo=l(),Xu=a("li"),cne=a("strong"),lvo=o("plbart"),ivo=o(" \u2014 "),mI=a("a"),dvo=o("PLBartForCausalLM"),cvo=o(" (PLBart model)"),fvo=l(),zu=a("li"),fne=a("strong"),mvo=o("prophetnet"),gvo=o(" \u2014 "),gI=a("a"),hvo=o("ProphetNetForCausalLM"),pvo=o(" (ProphetNet model)"),_vo=l(),Qu=a("li"),mne=a("strong"),uvo=o("qdqbert"),bvo=o(" \u2014 "),hI=a("a"),vvo=o("QDQBertLMHeadModel"),Fvo=o(" (QDQBert model)"),Tvo=l(),Wu=a("li"),gne=a("strong"),Mvo=o("reformer"),Evo=o(" \u2014 "),pI=a("a"),Cvo=o("ReformerModelWithLMHead"),wvo=o(" (Reformer model)"),Avo=l(),Hu=a("li"),hne=a("strong"),yvo=o("rembert"),Lvo=o(" \u2014 "),_I=a("a"),xvo=o("RemBertForCausalLM"),kvo=o(" (RemBERT model)"),Svo=l(),Uu=a("li"),pne=a("strong"),Rvo=o("roberta"),Bvo=o(" \u2014 "),uI=a("a"),Pvo=o("RobertaForCausalLM"),$vo=o(" (RoBERTa model)"),Ivo=l(),Ju=a("li"),_ne=a("strong"),qvo=o("roformer"),Nvo=o(" \u2014 "),bI=a("a"),jvo=o("RoFormerForCausalLM"),Dvo=o(" (RoFormer model)"),Gvo=l(),Yu=a("li"),une=a("strong"),Ovo=o("speech_to_text_2"),Vvo=o(" \u2014 "),vI=a("a"),Xvo=o("Speech2Text2ForCausalLM"),zvo=o(" (Speech2Text2 model)"),Qvo=l(),Ku=a("li"),bne=a("strong"),Wvo=o("transfo-xl"),Hvo=o(" \u2014 "),FI=a("a"),Uvo=o("TransfoXLLMHeadModel"),Jvo=o(" (Transformer-XL model)"),Yvo=l(),Zu=a("li"),vne=a("strong"),Kvo=o("trocr"),Zvo=o(" \u2014 "),TI=a("a"),eFo=o("TrOCRForCausalLM"),oFo=o(" (TrOCR model)"),rFo=l(),e6=a("li"),Fne=a("strong"),tFo=o("xglm"),aFo=o(" \u2014 "),MI=a("a"),nFo=o("XGLMForCausalLM"),sFo=o(" (XGLM model)"),lFo=l(),o6=a("li"),Tne=a("strong"),iFo=o("xlm"),dFo=o(" \u2014 "),EI=a("a"),cFo=o("XLMWithLMHeadModel"),fFo=o(" (XLM model)"),mFo=l(),r6=a("li"),Mne=a("strong"),gFo=o("xlm-prophetnet"),hFo=o(" \u2014 "),CI=a("a"),pFo=o("XLMProphetNetForCausalLM"),_Fo=o(" (XLMProphetNet model)"),uFo=l(),t6=a("li"),Ene=a("strong"),bFo=o("xlm-roberta"),vFo=o(" \u2014 "),wI=a("a"),FFo=o("XLMRobertaForCausalLM"),TFo=o(" (XLM-RoBERTa model)"),MFo=l(),a6=a("li"),Cne=a("strong"),EFo=o("xlm-roberta-xl"),CFo=o(" \u2014 "),AI=a("a"),wFo=o("XLMRobertaXLForCausalLM"),AFo=o(" (XLM-RoBERTa-XL model)"),yFo=l(),n6=a("li"),wne=a("strong"),LFo=o("xlnet"),xFo=o(" \u2014 "),yI=a("a"),kFo=o("XLNetLMHeadModel"),SFo=o(" (XLNet model)"),RFo=l(),s6=a("p"),BFo=o("The model is set in evaluation mode by default using "),Ane=a("code"),PFo=o("model.eval()"),$Fo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yne=a("code"),IFo=o("model.train()"),qFo=l(),Lne=a("p"),NFo=o("Examples:"),jFo=l(),f(L5.$$.fragment),JRe=l(),sd=a("h2"),l6=a("a"),xne=a("span"),f(x5.$$.fragment),DFo=l(),kne=a("span"),GFo=o("AutoModelForMaskedLM"),YRe=l(),Zo=a("div"),f(k5.$$.fragment),OFo=l(),ld=a("p"),VFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LI=a("a"),XFo=o("from_pretrained()"),zFo=o(" class method or the "),xI=a("a"),QFo=o("from_config()"),WFo=o(` class
method.`),HFo=l(),S5=a("p"),UFo=o("This class cannot be instantiated directly using "),Sne=a("code"),JFo=o("__init__()"),YFo=o(" (throws an error)."),KFo=l(),Wr=a("div"),f(R5.$$.fragment),ZFo=l(),Rne=a("p"),e0o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),o0o=l(),id=a("p"),r0o=o(`Note:
Loading a model from its configuration file does `),Bne=a("strong"),t0o=o("not"),a0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kI=a("a"),n0o=o("from_pretrained()"),s0o=o(" to load the model weights."),l0o=l(),Pne=a("p"),i0o=o("Examples:"),d0o=l(),f(B5.$$.fragment),c0o=l(),De=a("div"),f(P5.$$.fragment),f0o=l(),$ne=a("p"),m0o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),g0o=l(),Wa=a("p"),h0o=o("The model class to instantiate is selected based on the "),Ine=a("code"),p0o=o("model_type"),_0o=o(` property of the config object (either
passed as an argument or loaded from `),qne=a("code"),u0o=o("pretrained_model_name_or_path"),b0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nne=a("code"),v0o=o("pretrained_model_name_or_path"),F0o=o(":"),T0o=l(),I=a("ul"),i6=a("li"),jne=a("strong"),M0o=o("albert"),E0o=o(" \u2014 "),SI=a("a"),C0o=o("AlbertForMaskedLM"),w0o=o(" (ALBERT model)"),A0o=l(),d6=a("li"),Dne=a("strong"),y0o=o("bart"),L0o=o(" \u2014 "),RI=a("a"),x0o=o("BartForConditionalGeneration"),k0o=o(" (BART model)"),S0o=l(),c6=a("li"),Gne=a("strong"),R0o=o("bert"),B0o=o(" \u2014 "),BI=a("a"),P0o=o("BertForMaskedLM"),$0o=o(" (BERT model)"),I0o=l(),f6=a("li"),One=a("strong"),q0o=o("big_bird"),N0o=o(" \u2014 "),PI=a("a"),j0o=o("BigBirdForMaskedLM"),D0o=o(" (BigBird model)"),G0o=l(),m6=a("li"),Vne=a("strong"),O0o=o("camembert"),V0o=o(" \u2014 "),$I=a("a"),X0o=o("CamembertForMaskedLM"),z0o=o(" (CamemBERT model)"),Q0o=l(),g6=a("li"),Xne=a("strong"),W0o=o("convbert"),H0o=o(" \u2014 "),II=a("a"),U0o=o("ConvBertForMaskedLM"),J0o=o(" (ConvBERT model)"),Y0o=l(),h6=a("li"),zne=a("strong"),K0o=o("data2vec-text"),Z0o=o(" \u2014 "),qI=a("a"),eTo=o("Data2VecTextForMaskedLM"),oTo=o(" (Data2VecText model)"),rTo=l(),p6=a("li"),Qne=a("strong"),tTo=o("deberta"),aTo=o(" \u2014 "),NI=a("a"),nTo=o("DebertaForMaskedLM"),sTo=o(" (DeBERTa model)"),lTo=l(),_6=a("li"),Wne=a("strong"),iTo=o("deberta-v2"),dTo=o(" \u2014 "),jI=a("a"),cTo=o("DebertaV2ForMaskedLM"),fTo=o(" (DeBERTa-v2 model)"),mTo=l(),u6=a("li"),Hne=a("strong"),gTo=o("distilbert"),hTo=o(" \u2014 "),DI=a("a"),pTo=o("DistilBertForMaskedLM"),_To=o(" (DistilBERT model)"),uTo=l(),b6=a("li"),Une=a("strong"),bTo=o("electra"),vTo=o(" \u2014 "),GI=a("a"),FTo=o("ElectraForMaskedLM"),TTo=o(" (ELECTRA model)"),MTo=l(),v6=a("li"),Jne=a("strong"),ETo=o("flaubert"),CTo=o(" \u2014 "),OI=a("a"),wTo=o("FlaubertWithLMHeadModel"),ATo=o(" (FlauBERT model)"),yTo=l(),F6=a("li"),Yne=a("strong"),LTo=o("fnet"),xTo=o(" \u2014 "),VI=a("a"),kTo=o("FNetForMaskedLM"),STo=o(" (FNet model)"),RTo=l(),T6=a("li"),Kne=a("strong"),BTo=o("funnel"),PTo=o(" \u2014 "),XI=a("a"),$To=o("FunnelForMaskedLM"),ITo=o(" (Funnel Transformer model)"),qTo=l(),M6=a("li"),Zne=a("strong"),NTo=o("ibert"),jTo=o(" \u2014 "),zI=a("a"),DTo=o("IBertForMaskedLM"),GTo=o(" (I-BERT model)"),OTo=l(),E6=a("li"),ese=a("strong"),VTo=o("layoutlm"),XTo=o(" \u2014 "),QI=a("a"),zTo=o("LayoutLMForMaskedLM"),QTo=o(" (LayoutLM model)"),WTo=l(),C6=a("li"),ose=a("strong"),HTo=o("longformer"),UTo=o(" \u2014 "),WI=a("a"),JTo=o("LongformerForMaskedLM"),YTo=o(" (Longformer model)"),KTo=l(),w6=a("li"),rse=a("strong"),ZTo=o("mbart"),e7o=o(" \u2014 "),HI=a("a"),o7o=o("MBartForConditionalGeneration"),r7o=o(" (mBART model)"),t7o=l(),A6=a("li"),tse=a("strong"),a7o=o("megatron-bert"),n7o=o(" \u2014 "),UI=a("a"),s7o=o("MegatronBertForMaskedLM"),l7o=o(" (MegatronBert model)"),i7o=l(),y6=a("li"),ase=a("strong"),d7o=o("mobilebert"),c7o=o(" \u2014 "),JI=a("a"),f7o=o("MobileBertForMaskedLM"),m7o=o(" (MobileBERT model)"),g7o=l(),L6=a("li"),nse=a("strong"),h7o=o("mpnet"),p7o=o(" \u2014 "),YI=a("a"),_7o=o("MPNetForMaskedLM"),u7o=o(" (MPNet model)"),b7o=l(),x6=a("li"),sse=a("strong"),v7o=o("nystromformer"),F7o=o(" \u2014 "),KI=a("a"),T7o=o("NystromformerForMaskedLM"),M7o=o(" (Nystromformer model)"),E7o=l(),k6=a("li"),lse=a("strong"),C7o=o("perceiver"),w7o=o(" \u2014 "),ZI=a("a"),A7o=o("PerceiverForMaskedLM"),y7o=o(" (Perceiver model)"),L7o=l(),S6=a("li"),ise=a("strong"),x7o=o("qdqbert"),k7o=o(" \u2014 "),eq=a("a"),S7o=o("QDQBertForMaskedLM"),R7o=o(" (QDQBert model)"),B7o=l(),R6=a("li"),dse=a("strong"),P7o=o("reformer"),$7o=o(" \u2014 "),oq=a("a"),I7o=o("ReformerForMaskedLM"),q7o=o(" (Reformer model)"),N7o=l(),B6=a("li"),cse=a("strong"),j7o=o("rembert"),D7o=o(" \u2014 "),rq=a("a"),G7o=o("RemBertForMaskedLM"),O7o=o(" (RemBERT model)"),V7o=l(),P6=a("li"),fse=a("strong"),X7o=o("roberta"),z7o=o(" \u2014 "),tq=a("a"),Q7o=o("RobertaForMaskedLM"),W7o=o(" (RoBERTa model)"),H7o=l(),$6=a("li"),mse=a("strong"),U7o=o("roformer"),J7o=o(" \u2014 "),aq=a("a"),Y7o=o("RoFormerForMaskedLM"),K7o=o(" (RoFormer model)"),Z7o=l(),I6=a("li"),gse=a("strong"),eMo=o("squeezebert"),oMo=o(" \u2014 "),nq=a("a"),rMo=o("SqueezeBertForMaskedLM"),tMo=o(" (SqueezeBERT model)"),aMo=l(),q6=a("li"),hse=a("strong"),nMo=o("tapas"),sMo=o(" \u2014 "),sq=a("a"),lMo=o("TapasForMaskedLM"),iMo=o(" (TAPAS model)"),dMo=l(),N6=a("li"),pse=a("strong"),cMo=o("wav2vec2"),fMo=o(" \u2014 "),_se=a("code"),mMo=o("Wav2Vec2ForMaskedLM"),gMo=o(" (Wav2Vec2 model)"),hMo=l(),j6=a("li"),use=a("strong"),pMo=o("xlm"),_Mo=o(" \u2014 "),lq=a("a"),uMo=o("XLMWithLMHeadModel"),bMo=o(" (XLM model)"),vMo=l(),D6=a("li"),bse=a("strong"),FMo=o("xlm-roberta"),TMo=o(" \u2014 "),iq=a("a"),MMo=o("XLMRobertaForMaskedLM"),EMo=o(" (XLM-RoBERTa model)"),CMo=l(),G6=a("li"),vse=a("strong"),wMo=o("xlm-roberta-xl"),AMo=o(" \u2014 "),dq=a("a"),yMo=o("XLMRobertaXLForMaskedLM"),LMo=o(" (XLM-RoBERTa-XL model)"),xMo=l(),O6=a("li"),Fse=a("strong"),kMo=o("yoso"),SMo=o(" \u2014 "),cq=a("a"),RMo=o("YosoForMaskedLM"),BMo=o(" (YOSO model)"),PMo=l(),V6=a("p"),$Mo=o("The model is set in evaluation mode by default using "),Tse=a("code"),IMo=o("model.eval()"),qMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mse=a("code"),NMo=o("model.train()"),jMo=l(),Ese=a("p"),DMo=o("Examples:"),GMo=l(),f($5.$$.fragment),KRe=l(),dd=a("h2"),X6=a("a"),Cse=a("span"),f(I5.$$.fragment),OMo=l(),wse=a("span"),VMo=o("AutoModelForSeq2SeqLM"),ZRe=l(),er=a("div"),f(q5.$$.fragment),XMo=l(),cd=a("p"),zMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fq=a("a"),QMo=o("from_pretrained()"),WMo=o(" class method or the "),mq=a("a"),HMo=o("from_config()"),UMo=o(` class
method.`),JMo=l(),N5=a("p"),YMo=o("This class cannot be instantiated directly using "),Ase=a("code"),KMo=o("__init__()"),ZMo=o(" (throws an error)."),e4o=l(),Hr=a("div"),f(j5.$$.fragment),o4o=l(),yse=a("p"),r4o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),t4o=l(),fd=a("p"),a4o=o(`Note:
Loading a model from its configuration file does `),Lse=a("strong"),n4o=o("not"),s4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gq=a("a"),l4o=o("from_pretrained()"),i4o=o(" to load the model weights."),d4o=l(),xse=a("p"),c4o=o("Examples:"),f4o=l(),f(D5.$$.fragment),m4o=l(),Ge=a("div"),f(G5.$$.fragment),g4o=l(),kse=a("p"),h4o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),p4o=l(),Ha=a("p"),_4o=o("The model class to instantiate is selected based on the "),Sse=a("code"),u4o=o("model_type"),b4o=o(` property of the config object (either
passed as an argument or loaded from `),Rse=a("code"),v4o=o("pretrained_model_name_or_path"),F4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bse=a("code"),T4o=o("pretrained_model_name_or_path"),M4o=o(":"),E4o=l(),ne=a("ul"),z6=a("li"),Pse=a("strong"),C4o=o("bart"),w4o=o(" \u2014 "),hq=a("a"),A4o=o("BartForConditionalGeneration"),y4o=o(" (BART model)"),L4o=l(),Q6=a("li"),$se=a("strong"),x4o=o("bigbird_pegasus"),k4o=o(" \u2014 "),pq=a("a"),S4o=o("BigBirdPegasusForConditionalGeneration"),R4o=o(" (BigBirdPegasus model)"),B4o=l(),W6=a("li"),Ise=a("strong"),P4o=o("blenderbot"),$4o=o(" \u2014 "),_q=a("a"),I4o=o("BlenderbotForConditionalGeneration"),q4o=o(" (Blenderbot model)"),N4o=l(),H6=a("li"),qse=a("strong"),j4o=o("blenderbot-small"),D4o=o(" \u2014 "),uq=a("a"),G4o=o("BlenderbotSmallForConditionalGeneration"),O4o=o(" (BlenderbotSmall model)"),V4o=l(),U6=a("li"),Nse=a("strong"),X4o=o("encoder-decoder"),z4o=o(" \u2014 "),bq=a("a"),Q4o=o("EncoderDecoderModel"),W4o=o(" (Encoder decoder model)"),H4o=l(),J6=a("li"),jse=a("strong"),U4o=o("fsmt"),J4o=o(" \u2014 "),vq=a("a"),Y4o=o("FSMTForConditionalGeneration"),K4o=o(" (FairSeq Machine-Translation model)"),Z4o=l(),Y6=a("li"),Dse=a("strong"),eEo=o("led"),oEo=o(" \u2014 "),Fq=a("a"),rEo=o("LEDForConditionalGeneration"),tEo=o(" (LED model)"),aEo=l(),K6=a("li"),Gse=a("strong"),nEo=o("m2m_100"),sEo=o(" \u2014 "),Tq=a("a"),lEo=o("M2M100ForConditionalGeneration"),iEo=o(" (M2M100 model)"),dEo=l(),Z6=a("li"),Ose=a("strong"),cEo=o("marian"),fEo=o(" \u2014 "),Mq=a("a"),mEo=o("MarianMTModel"),gEo=o(" (Marian model)"),hEo=l(),e1=a("li"),Vse=a("strong"),pEo=o("mbart"),_Eo=o(" \u2014 "),Eq=a("a"),uEo=o("MBartForConditionalGeneration"),bEo=o(" (mBART model)"),vEo=l(),o1=a("li"),Xse=a("strong"),FEo=o("mt5"),TEo=o(" \u2014 "),Cq=a("a"),MEo=o("MT5ForConditionalGeneration"),EEo=o(" (mT5 model)"),CEo=l(),r1=a("li"),zse=a("strong"),wEo=o("pegasus"),AEo=o(" \u2014 "),wq=a("a"),yEo=o("PegasusForConditionalGeneration"),LEo=o(" (Pegasus model)"),xEo=l(),t1=a("li"),Qse=a("strong"),kEo=o("plbart"),SEo=o(" \u2014 "),Aq=a("a"),REo=o("PLBartForConditionalGeneration"),BEo=o(" (PLBart model)"),PEo=l(),a1=a("li"),Wse=a("strong"),$Eo=o("prophetnet"),IEo=o(" \u2014 "),yq=a("a"),qEo=o("ProphetNetForConditionalGeneration"),NEo=o(" (ProphetNet model)"),jEo=l(),n1=a("li"),Hse=a("strong"),DEo=o("t5"),GEo=o(" \u2014 "),Lq=a("a"),OEo=o("T5ForConditionalGeneration"),VEo=o(" (T5 model)"),XEo=l(),s1=a("li"),Use=a("strong"),zEo=o("tapex"),QEo=o(" \u2014 "),xq=a("a"),WEo=o("BartForConditionalGeneration"),HEo=o(" (TAPEX model)"),UEo=l(),l1=a("li"),Jse=a("strong"),JEo=o("xlm-prophetnet"),YEo=o(" \u2014 "),kq=a("a"),KEo=o("XLMProphetNetForConditionalGeneration"),ZEo=o(" (XLMProphetNet model)"),eCo=l(),i1=a("p"),oCo=o("The model is set in evaluation mode by default using "),Yse=a("code"),rCo=o("model.eval()"),tCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kse=a("code"),aCo=o("model.train()"),nCo=l(),Zse=a("p"),sCo=o("Examples:"),lCo=l(),f(O5.$$.fragment),eBe=l(),md=a("h2"),d1=a("a"),ele=a("span"),f(V5.$$.fragment),iCo=l(),ole=a("span"),dCo=o("AutoModelForSequenceClassification"),oBe=l(),or=a("div"),f(X5.$$.fragment),cCo=l(),gd=a("p"),fCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Sq=a("a"),mCo=o("from_pretrained()"),gCo=o(" class method or the "),Rq=a("a"),hCo=o("from_config()"),pCo=o(` class
method.`),_Co=l(),z5=a("p"),uCo=o("This class cannot be instantiated directly using "),rle=a("code"),bCo=o("__init__()"),vCo=o(" (throws an error)."),FCo=l(),Ur=a("div"),f(Q5.$$.fragment),TCo=l(),tle=a("p"),MCo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ECo=l(),hd=a("p"),CCo=o(`Note:
Loading a model from its configuration file does `),ale=a("strong"),wCo=o("not"),ACo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bq=a("a"),yCo=o("from_pretrained()"),LCo=o(" to load the model weights."),xCo=l(),nle=a("p"),kCo=o("Examples:"),SCo=l(),f(W5.$$.fragment),RCo=l(),Oe=a("div"),f(H5.$$.fragment),BCo=l(),sle=a("p"),PCo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$Co=l(),Ua=a("p"),ICo=o("The model class to instantiate is selected based on the "),lle=a("code"),qCo=o("model_type"),NCo=o(` property of the config object (either
passed as an argument or loaded from `),ile=a("code"),jCo=o("pretrained_model_name_or_path"),DCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dle=a("code"),GCo=o("pretrained_model_name_or_path"),OCo=o(":"),VCo=l(),y=a("ul"),c1=a("li"),cle=a("strong"),XCo=o("albert"),zCo=o(" \u2014 "),Pq=a("a"),QCo=o("AlbertForSequenceClassification"),WCo=o(" (ALBERT model)"),HCo=l(),f1=a("li"),fle=a("strong"),UCo=o("bart"),JCo=o(" \u2014 "),$q=a("a"),YCo=o("BartForSequenceClassification"),KCo=o(" (BART model)"),ZCo=l(),m1=a("li"),mle=a("strong"),e5o=o("bert"),o5o=o(" \u2014 "),Iq=a("a"),r5o=o("BertForSequenceClassification"),t5o=o(" (BERT model)"),a5o=l(),g1=a("li"),gle=a("strong"),n5o=o("big_bird"),s5o=o(" \u2014 "),qq=a("a"),l5o=o("BigBirdForSequenceClassification"),i5o=o(" (BigBird model)"),d5o=l(),h1=a("li"),hle=a("strong"),c5o=o("bigbird_pegasus"),f5o=o(" \u2014 "),Nq=a("a"),m5o=o("BigBirdPegasusForSequenceClassification"),g5o=o(" (BigBirdPegasus model)"),h5o=l(),p1=a("li"),ple=a("strong"),p5o=o("camembert"),_5o=o(" \u2014 "),jq=a("a"),u5o=o("CamembertForSequenceClassification"),b5o=o(" (CamemBERT model)"),v5o=l(),_1=a("li"),_le=a("strong"),F5o=o("canine"),T5o=o(" \u2014 "),Dq=a("a"),M5o=o("CanineForSequenceClassification"),E5o=o(" (Canine model)"),C5o=l(),u1=a("li"),ule=a("strong"),w5o=o("convbert"),A5o=o(" \u2014 "),Gq=a("a"),y5o=o("ConvBertForSequenceClassification"),L5o=o(" (ConvBERT model)"),x5o=l(),b1=a("li"),ble=a("strong"),k5o=o("ctrl"),S5o=o(" \u2014 "),Oq=a("a"),R5o=o("CTRLForSequenceClassification"),B5o=o(" (CTRL model)"),P5o=l(),v1=a("li"),vle=a("strong"),$5o=o("data2vec-text"),I5o=o(" \u2014 "),Vq=a("a"),q5o=o("Data2VecTextForSequenceClassification"),N5o=o(" (Data2VecText model)"),j5o=l(),F1=a("li"),Fle=a("strong"),D5o=o("deberta"),G5o=o(" \u2014 "),Xq=a("a"),O5o=o("DebertaForSequenceClassification"),V5o=o(" (DeBERTa model)"),X5o=l(),T1=a("li"),Tle=a("strong"),z5o=o("deberta-v2"),Q5o=o(" \u2014 "),zq=a("a"),W5o=o("DebertaV2ForSequenceClassification"),H5o=o(" (DeBERTa-v2 model)"),U5o=l(),M1=a("li"),Mle=a("strong"),J5o=o("distilbert"),Y5o=o(" \u2014 "),Qq=a("a"),K5o=o("DistilBertForSequenceClassification"),Z5o=o(" (DistilBERT model)"),e3o=l(),E1=a("li"),Ele=a("strong"),o3o=o("electra"),r3o=o(" \u2014 "),Wq=a("a"),t3o=o("ElectraForSequenceClassification"),a3o=o(" (ELECTRA model)"),n3o=l(),C1=a("li"),Cle=a("strong"),s3o=o("flaubert"),l3o=o(" \u2014 "),Hq=a("a"),i3o=o("FlaubertForSequenceClassification"),d3o=o(" (FlauBERT model)"),c3o=l(),w1=a("li"),wle=a("strong"),f3o=o("fnet"),m3o=o(" \u2014 "),Uq=a("a"),g3o=o("FNetForSequenceClassification"),h3o=o(" (FNet model)"),p3o=l(),A1=a("li"),Ale=a("strong"),_3o=o("funnel"),u3o=o(" \u2014 "),Jq=a("a"),b3o=o("FunnelForSequenceClassification"),v3o=o(" (Funnel Transformer model)"),F3o=l(),y1=a("li"),yle=a("strong"),T3o=o("gpt2"),M3o=o(" \u2014 "),Yq=a("a"),E3o=o("GPT2ForSequenceClassification"),C3o=o(" (OpenAI GPT-2 model)"),w3o=l(),L1=a("li"),Lle=a("strong"),A3o=o("gpt_neo"),y3o=o(" \u2014 "),Kq=a("a"),L3o=o("GPTNeoForSequenceClassification"),x3o=o(" (GPT Neo model)"),k3o=l(),x1=a("li"),xle=a("strong"),S3o=o("gptj"),R3o=o(" \u2014 "),Zq=a("a"),B3o=o("GPTJForSequenceClassification"),P3o=o(" (GPT-J model)"),$3o=l(),k1=a("li"),kle=a("strong"),I3o=o("ibert"),q3o=o(" \u2014 "),eN=a("a"),N3o=o("IBertForSequenceClassification"),j3o=o(" (I-BERT model)"),D3o=l(),S1=a("li"),Sle=a("strong"),G3o=o("layoutlm"),O3o=o(" \u2014 "),oN=a("a"),V3o=o("LayoutLMForSequenceClassification"),X3o=o(" (LayoutLM model)"),z3o=l(),R1=a("li"),Rle=a("strong"),Q3o=o("layoutlmv2"),W3o=o(" \u2014 "),rN=a("a"),H3o=o("LayoutLMv2ForSequenceClassification"),U3o=o(" (LayoutLMv2 model)"),J3o=l(),B1=a("li"),Ble=a("strong"),Y3o=o("led"),K3o=o(" \u2014 "),tN=a("a"),Z3o=o("LEDForSequenceClassification"),ewo=o(" (LED model)"),owo=l(),P1=a("li"),Ple=a("strong"),rwo=o("longformer"),two=o(" \u2014 "),aN=a("a"),awo=o("LongformerForSequenceClassification"),nwo=o(" (Longformer model)"),swo=l(),$1=a("li"),$le=a("strong"),lwo=o("mbart"),iwo=o(" \u2014 "),nN=a("a"),dwo=o("MBartForSequenceClassification"),cwo=o(" (mBART model)"),fwo=l(),I1=a("li"),Ile=a("strong"),mwo=o("megatron-bert"),gwo=o(" \u2014 "),sN=a("a"),hwo=o("MegatronBertForSequenceClassification"),pwo=o(" (MegatronBert model)"),_wo=l(),q1=a("li"),qle=a("strong"),uwo=o("mobilebert"),bwo=o(" \u2014 "),lN=a("a"),vwo=o("MobileBertForSequenceClassification"),Fwo=o(" (MobileBERT model)"),Two=l(),N1=a("li"),Nle=a("strong"),Mwo=o("mpnet"),Ewo=o(" \u2014 "),iN=a("a"),Cwo=o("MPNetForSequenceClassification"),wwo=o(" (MPNet model)"),Awo=l(),j1=a("li"),jle=a("strong"),ywo=o("nystromformer"),Lwo=o(" \u2014 "),dN=a("a"),xwo=o("NystromformerForSequenceClassification"),kwo=o(" (Nystromformer model)"),Swo=l(),D1=a("li"),Dle=a("strong"),Rwo=o("openai-gpt"),Bwo=o(" \u2014 "),cN=a("a"),Pwo=o("OpenAIGPTForSequenceClassification"),$wo=o(" (OpenAI GPT model)"),Iwo=l(),G1=a("li"),Gle=a("strong"),qwo=o("perceiver"),Nwo=o(" \u2014 "),fN=a("a"),jwo=o("PerceiverForSequenceClassification"),Dwo=o(" (Perceiver model)"),Gwo=l(),O1=a("li"),Ole=a("strong"),Owo=o("plbart"),Vwo=o(" \u2014 "),mN=a("a"),Xwo=o("PLBartForSequenceClassification"),zwo=o(" (PLBart model)"),Qwo=l(),V1=a("li"),Vle=a("strong"),Wwo=o("qdqbert"),Hwo=o(" \u2014 "),gN=a("a"),Uwo=o("QDQBertForSequenceClassification"),Jwo=o(" (QDQBert model)"),Ywo=l(),X1=a("li"),Xle=a("strong"),Kwo=o("reformer"),Zwo=o(" \u2014 "),hN=a("a"),eAo=o("ReformerForSequenceClassification"),oAo=o(" (Reformer model)"),rAo=l(),z1=a("li"),zle=a("strong"),tAo=o("rembert"),aAo=o(" \u2014 "),pN=a("a"),nAo=o("RemBertForSequenceClassification"),sAo=o(" (RemBERT model)"),lAo=l(),Q1=a("li"),Qle=a("strong"),iAo=o("roberta"),dAo=o(" \u2014 "),_N=a("a"),cAo=o("RobertaForSequenceClassification"),fAo=o(" (RoBERTa model)"),mAo=l(),W1=a("li"),Wle=a("strong"),gAo=o("roformer"),hAo=o(" \u2014 "),uN=a("a"),pAo=o("RoFormerForSequenceClassification"),_Ao=o(" (RoFormer model)"),uAo=l(),H1=a("li"),Hle=a("strong"),bAo=o("squeezebert"),vAo=o(" \u2014 "),bN=a("a"),FAo=o("SqueezeBertForSequenceClassification"),TAo=o(" (SqueezeBERT model)"),MAo=l(),U1=a("li"),Ule=a("strong"),EAo=o("tapas"),CAo=o(" \u2014 "),vN=a("a"),wAo=o("TapasForSequenceClassification"),AAo=o(" (TAPAS model)"),yAo=l(),J1=a("li"),Jle=a("strong"),LAo=o("tapex"),xAo=o(" \u2014 "),FN=a("a"),kAo=o("BartForSequenceClassification"),SAo=o(" (TAPEX model)"),RAo=l(),Y1=a("li"),Yle=a("strong"),BAo=o("transfo-xl"),PAo=o(" \u2014 "),TN=a("a"),$Ao=o("TransfoXLForSequenceClassification"),IAo=o(" (Transformer-XL model)"),qAo=l(),K1=a("li"),Kle=a("strong"),NAo=o("xlm"),jAo=o(" \u2014 "),MN=a("a"),DAo=o("XLMForSequenceClassification"),GAo=o(" (XLM model)"),OAo=l(),Z1=a("li"),Zle=a("strong"),VAo=o("xlm-roberta"),XAo=o(" \u2014 "),EN=a("a"),zAo=o("XLMRobertaForSequenceClassification"),QAo=o(" (XLM-RoBERTa model)"),WAo=l(),eb=a("li"),eie=a("strong"),HAo=o("xlm-roberta-xl"),UAo=o(" \u2014 "),CN=a("a"),JAo=o("XLMRobertaXLForSequenceClassification"),YAo=o(" (XLM-RoBERTa-XL model)"),KAo=l(),ob=a("li"),oie=a("strong"),ZAo=o("xlnet"),eyo=o(" \u2014 "),wN=a("a"),oyo=o("XLNetForSequenceClassification"),ryo=o(" (XLNet model)"),tyo=l(),rb=a("li"),rie=a("strong"),ayo=o("yoso"),nyo=o(" \u2014 "),AN=a("a"),syo=o("YosoForSequenceClassification"),lyo=o(" (YOSO model)"),iyo=l(),tb=a("p"),dyo=o("The model is set in evaluation mode by default using "),tie=a("code"),cyo=o("model.eval()"),fyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aie=a("code"),myo=o("model.train()"),gyo=l(),nie=a("p"),hyo=o("Examples:"),pyo=l(),f(U5.$$.fragment),rBe=l(),pd=a("h2"),ab=a("a"),sie=a("span"),f(J5.$$.fragment),_yo=l(),lie=a("span"),uyo=o("AutoModelForMultipleChoice"),tBe=l(),rr=a("div"),f(Y5.$$.fragment),byo=l(),_d=a("p"),vyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yN=a("a"),Fyo=o("from_pretrained()"),Tyo=o(" class method or the "),LN=a("a"),Myo=o("from_config()"),Eyo=o(` class
method.`),Cyo=l(),K5=a("p"),wyo=o("This class cannot be instantiated directly using "),iie=a("code"),Ayo=o("__init__()"),yyo=o(" (throws an error)."),Lyo=l(),Jr=a("div"),f(Z5.$$.fragment),xyo=l(),die=a("p"),kyo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Syo=l(),ud=a("p"),Ryo=o(`Note:
Loading a model from its configuration file does `),cie=a("strong"),Byo=o("not"),Pyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xN=a("a"),$yo=o("from_pretrained()"),Iyo=o(" to load the model weights."),qyo=l(),fie=a("p"),Nyo=o("Examples:"),jyo=l(),f(e3.$$.fragment),Dyo=l(),Ve=a("div"),f(o3.$$.fragment),Gyo=l(),mie=a("p"),Oyo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Vyo=l(),Ja=a("p"),Xyo=o("The model class to instantiate is selected based on the "),gie=a("code"),zyo=o("model_type"),Qyo=o(` property of the config object (either
passed as an argument or loaded from `),hie=a("code"),Wyo=o("pretrained_model_name_or_path"),Hyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pie=a("code"),Uyo=o("pretrained_model_name_or_path"),Jyo=o(":"),Yyo=l(),G=a("ul"),nb=a("li"),_ie=a("strong"),Kyo=o("albert"),Zyo=o(" \u2014 "),kN=a("a"),eLo=o("AlbertForMultipleChoice"),oLo=o(" (ALBERT model)"),rLo=l(),sb=a("li"),uie=a("strong"),tLo=o("bert"),aLo=o(" \u2014 "),SN=a("a"),nLo=o("BertForMultipleChoice"),sLo=o(" (BERT model)"),lLo=l(),lb=a("li"),bie=a("strong"),iLo=o("big_bird"),dLo=o(" \u2014 "),RN=a("a"),cLo=o("BigBirdForMultipleChoice"),fLo=o(" (BigBird model)"),mLo=l(),ib=a("li"),vie=a("strong"),gLo=o("camembert"),hLo=o(" \u2014 "),BN=a("a"),pLo=o("CamembertForMultipleChoice"),_Lo=o(" (CamemBERT model)"),uLo=l(),db=a("li"),Fie=a("strong"),bLo=o("canine"),vLo=o(" \u2014 "),PN=a("a"),FLo=o("CanineForMultipleChoice"),TLo=o(" (Canine model)"),MLo=l(),cb=a("li"),Tie=a("strong"),ELo=o("convbert"),CLo=o(" \u2014 "),$N=a("a"),wLo=o("ConvBertForMultipleChoice"),ALo=o(" (ConvBERT model)"),yLo=l(),fb=a("li"),Mie=a("strong"),LLo=o("data2vec-text"),xLo=o(" \u2014 "),IN=a("a"),kLo=o("Data2VecTextForMultipleChoice"),SLo=o(" (Data2VecText model)"),RLo=l(),mb=a("li"),Eie=a("strong"),BLo=o("distilbert"),PLo=o(" \u2014 "),qN=a("a"),$Lo=o("DistilBertForMultipleChoice"),ILo=o(" (DistilBERT model)"),qLo=l(),gb=a("li"),Cie=a("strong"),NLo=o("electra"),jLo=o(" \u2014 "),NN=a("a"),DLo=o("ElectraForMultipleChoice"),GLo=o(" (ELECTRA model)"),OLo=l(),hb=a("li"),wie=a("strong"),VLo=o("flaubert"),XLo=o(" \u2014 "),jN=a("a"),zLo=o("FlaubertForMultipleChoice"),QLo=o(" (FlauBERT model)"),WLo=l(),pb=a("li"),Aie=a("strong"),HLo=o("fnet"),ULo=o(" \u2014 "),DN=a("a"),JLo=o("FNetForMultipleChoice"),YLo=o(" (FNet model)"),KLo=l(),_b=a("li"),yie=a("strong"),ZLo=o("funnel"),e8o=o(" \u2014 "),GN=a("a"),o8o=o("FunnelForMultipleChoice"),r8o=o(" (Funnel Transformer model)"),t8o=l(),ub=a("li"),Lie=a("strong"),a8o=o("ibert"),n8o=o(" \u2014 "),ON=a("a"),s8o=o("IBertForMultipleChoice"),l8o=o(" (I-BERT model)"),i8o=l(),bb=a("li"),xie=a("strong"),d8o=o("longformer"),c8o=o(" \u2014 "),VN=a("a"),f8o=o("LongformerForMultipleChoice"),m8o=o(" (Longformer model)"),g8o=l(),vb=a("li"),kie=a("strong"),h8o=o("megatron-bert"),p8o=o(" \u2014 "),XN=a("a"),_8o=o("MegatronBertForMultipleChoice"),u8o=o(" (MegatronBert model)"),b8o=l(),Fb=a("li"),Sie=a("strong"),v8o=o("mobilebert"),F8o=o(" \u2014 "),zN=a("a"),T8o=o("MobileBertForMultipleChoice"),M8o=o(" (MobileBERT model)"),E8o=l(),Tb=a("li"),Rie=a("strong"),C8o=o("mpnet"),w8o=o(" \u2014 "),QN=a("a"),A8o=o("MPNetForMultipleChoice"),y8o=o(" (MPNet model)"),L8o=l(),Mb=a("li"),Bie=a("strong"),x8o=o("nystromformer"),k8o=o(" \u2014 "),WN=a("a"),S8o=o("NystromformerForMultipleChoice"),R8o=o(" (Nystromformer model)"),B8o=l(),Eb=a("li"),Pie=a("strong"),P8o=o("qdqbert"),$8o=o(" \u2014 "),HN=a("a"),I8o=o("QDQBertForMultipleChoice"),q8o=o(" (QDQBert model)"),N8o=l(),Cb=a("li"),$ie=a("strong"),j8o=o("rembert"),D8o=o(" \u2014 "),UN=a("a"),G8o=o("RemBertForMultipleChoice"),O8o=o(" (RemBERT model)"),V8o=l(),wb=a("li"),Iie=a("strong"),X8o=o("roberta"),z8o=o(" \u2014 "),JN=a("a"),Q8o=o("RobertaForMultipleChoice"),W8o=o(" (RoBERTa model)"),H8o=l(),Ab=a("li"),qie=a("strong"),U8o=o("roformer"),J8o=o(" \u2014 "),YN=a("a"),Y8o=o("RoFormerForMultipleChoice"),K8o=o(" (RoFormer model)"),Z8o=l(),yb=a("li"),Nie=a("strong"),e9o=o("squeezebert"),o9o=o(" \u2014 "),KN=a("a"),r9o=o("SqueezeBertForMultipleChoice"),t9o=o(" (SqueezeBERT model)"),a9o=l(),Lb=a("li"),jie=a("strong"),n9o=o("xlm"),s9o=o(" \u2014 "),ZN=a("a"),l9o=o("XLMForMultipleChoice"),i9o=o(" (XLM model)"),d9o=l(),xb=a("li"),Die=a("strong"),c9o=o("xlm-roberta"),f9o=o(" \u2014 "),ej=a("a"),m9o=o("XLMRobertaForMultipleChoice"),g9o=o(" (XLM-RoBERTa model)"),h9o=l(),kb=a("li"),Gie=a("strong"),p9o=o("xlm-roberta-xl"),_9o=o(" \u2014 "),oj=a("a"),u9o=o("XLMRobertaXLForMultipleChoice"),b9o=o(" (XLM-RoBERTa-XL model)"),v9o=l(),Sb=a("li"),Oie=a("strong"),F9o=o("xlnet"),T9o=o(" \u2014 "),rj=a("a"),M9o=o("XLNetForMultipleChoice"),E9o=o(" (XLNet model)"),C9o=l(),Rb=a("li"),Vie=a("strong"),w9o=o("yoso"),A9o=o(" \u2014 "),tj=a("a"),y9o=o("YosoForMultipleChoice"),L9o=o(" (YOSO model)"),x9o=l(),Bb=a("p"),k9o=o("The model is set in evaluation mode by default using "),Xie=a("code"),S9o=o("model.eval()"),R9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zie=a("code"),B9o=o("model.train()"),P9o=l(),Qie=a("p"),$9o=o("Examples:"),I9o=l(),f(r3.$$.fragment),aBe=l(),bd=a("h2"),Pb=a("a"),Wie=a("span"),f(t3.$$.fragment),q9o=l(),Hie=a("span"),N9o=o("AutoModelForNextSentencePrediction"),nBe=l(),tr=a("div"),f(a3.$$.fragment),j9o=l(),vd=a("p"),D9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aj=a("a"),G9o=o("from_pretrained()"),O9o=o(" class method or the "),nj=a("a"),V9o=o("from_config()"),X9o=o(` class
method.`),z9o=l(),n3=a("p"),Q9o=o("This class cannot be instantiated directly using "),Uie=a("code"),W9o=o("__init__()"),H9o=o(" (throws an error)."),U9o=l(),Yr=a("div"),f(s3.$$.fragment),J9o=l(),Jie=a("p"),Y9o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),K9o=l(),Fd=a("p"),Z9o=o(`Note:
Loading a model from its configuration file does `),Yie=a("strong"),exo=o("not"),oxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sj=a("a"),rxo=o("from_pretrained()"),txo=o(" to load the model weights."),axo=l(),Kie=a("p"),nxo=o("Examples:"),sxo=l(),f(l3.$$.fragment),lxo=l(),Xe=a("div"),f(i3.$$.fragment),ixo=l(),Zie=a("p"),dxo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cxo=l(),Ya=a("p"),fxo=o("The model class to instantiate is selected based on the "),ede=a("code"),mxo=o("model_type"),gxo=o(` property of the config object (either
passed as an argument or loaded from `),ode=a("code"),hxo=o("pretrained_model_name_or_path"),pxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rde=a("code"),_xo=o("pretrained_model_name_or_path"),uxo=o(":"),bxo=l(),da=a("ul"),$b=a("li"),tde=a("strong"),vxo=o("bert"),Fxo=o(" \u2014 "),lj=a("a"),Txo=o("BertForNextSentencePrediction"),Mxo=o(" (BERT model)"),Exo=l(),Ib=a("li"),ade=a("strong"),Cxo=o("fnet"),wxo=o(" \u2014 "),ij=a("a"),Axo=o("FNetForNextSentencePrediction"),yxo=o(" (FNet model)"),Lxo=l(),qb=a("li"),nde=a("strong"),xxo=o("megatron-bert"),kxo=o(" \u2014 "),dj=a("a"),Sxo=o("MegatronBertForNextSentencePrediction"),Rxo=o(" (MegatronBert model)"),Bxo=l(),Nb=a("li"),sde=a("strong"),Pxo=o("mobilebert"),$xo=o(" \u2014 "),cj=a("a"),Ixo=o("MobileBertForNextSentencePrediction"),qxo=o(" (MobileBERT model)"),Nxo=l(),jb=a("li"),lde=a("strong"),jxo=o("qdqbert"),Dxo=o(" \u2014 "),fj=a("a"),Gxo=o("QDQBertForNextSentencePrediction"),Oxo=o(" (QDQBert model)"),Vxo=l(),Db=a("p"),Xxo=o("The model is set in evaluation mode by default using "),ide=a("code"),zxo=o("model.eval()"),Qxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dde=a("code"),Wxo=o("model.train()"),Hxo=l(),cde=a("p"),Uxo=o("Examples:"),Jxo=l(),f(d3.$$.fragment),sBe=l(),Td=a("h2"),Gb=a("a"),fde=a("span"),f(c3.$$.fragment),Yxo=l(),mde=a("span"),Kxo=o("AutoModelForTokenClassification"),lBe=l(),ar=a("div"),f(f3.$$.fragment),Zxo=l(),Md=a("p"),eko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mj=a("a"),oko=o("from_pretrained()"),rko=o(" class method or the "),gj=a("a"),tko=o("from_config()"),ako=o(` class
method.`),nko=l(),m3=a("p"),sko=o("This class cannot be instantiated directly using "),gde=a("code"),lko=o("__init__()"),iko=o(" (throws an error)."),dko=l(),Kr=a("div"),f(g3.$$.fragment),cko=l(),hde=a("p"),fko=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mko=l(),Ed=a("p"),gko=o(`Note:
Loading a model from its configuration file does `),pde=a("strong"),hko=o("not"),pko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hj=a("a"),_ko=o("from_pretrained()"),uko=o(" to load the model weights."),bko=l(),_de=a("p"),vko=o("Examples:"),Fko=l(),f(h3.$$.fragment),Tko=l(),ze=a("div"),f(p3.$$.fragment),Mko=l(),ude=a("p"),Eko=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Cko=l(),Ka=a("p"),wko=o("The model class to instantiate is selected based on the "),bde=a("code"),Ako=o("model_type"),yko=o(` property of the config object (either
passed as an argument or loaded from `),vde=a("code"),Lko=o("pretrained_model_name_or_path"),xko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=a("code"),kko=o("pretrained_model_name_or_path"),Sko=o(":"),Rko=l(),j=a("ul"),Ob=a("li"),Tde=a("strong"),Bko=o("albert"),Pko=o(" \u2014 "),pj=a("a"),$ko=o("AlbertForTokenClassification"),Iko=o(" (ALBERT model)"),qko=l(),Vb=a("li"),Mde=a("strong"),Nko=o("bert"),jko=o(" \u2014 "),_j=a("a"),Dko=o("BertForTokenClassification"),Gko=o(" (BERT model)"),Oko=l(),Xb=a("li"),Ede=a("strong"),Vko=o("big_bird"),Xko=o(" \u2014 "),uj=a("a"),zko=o("BigBirdForTokenClassification"),Qko=o(" (BigBird model)"),Wko=l(),zb=a("li"),Cde=a("strong"),Hko=o("camembert"),Uko=o(" \u2014 "),bj=a("a"),Jko=o("CamembertForTokenClassification"),Yko=o(" (CamemBERT model)"),Kko=l(),Qb=a("li"),wde=a("strong"),Zko=o("canine"),eSo=o(" \u2014 "),vj=a("a"),oSo=o("CanineForTokenClassification"),rSo=o(" (Canine model)"),tSo=l(),Wb=a("li"),Ade=a("strong"),aSo=o("convbert"),nSo=o(" \u2014 "),Fj=a("a"),sSo=o("ConvBertForTokenClassification"),lSo=o(" (ConvBERT model)"),iSo=l(),Hb=a("li"),yde=a("strong"),dSo=o("data2vec-text"),cSo=o(" \u2014 "),Tj=a("a"),fSo=o("Data2VecTextForTokenClassification"),mSo=o(" (Data2VecText model)"),gSo=l(),Ub=a("li"),Lde=a("strong"),hSo=o("deberta"),pSo=o(" \u2014 "),Mj=a("a"),_So=o("DebertaForTokenClassification"),uSo=o(" (DeBERTa model)"),bSo=l(),Jb=a("li"),xde=a("strong"),vSo=o("deberta-v2"),FSo=o(" \u2014 "),Ej=a("a"),TSo=o("DebertaV2ForTokenClassification"),MSo=o(" (DeBERTa-v2 model)"),ESo=l(),Yb=a("li"),kde=a("strong"),CSo=o("distilbert"),wSo=o(" \u2014 "),Cj=a("a"),ASo=o("DistilBertForTokenClassification"),ySo=o(" (DistilBERT model)"),LSo=l(),Kb=a("li"),Sde=a("strong"),xSo=o("electra"),kSo=o(" \u2014 "),wj=a("a"),SSo=o("ElectraForTokenClassification"),RSo=o(" (ELECTRA model)"),BSo=l(),Zb=a("li"),Rde=a("strong"),PSo=o("flaubert"),$So=o(" \u2014 "),Aj=a("a"),ISo=o("FlaubertForTokenClassification"),qSo=o(" (FlauBERT model)"),NSo=l(),e2=a("li"),Bde=a("strong"),jSo=o("fnet"),DSo=o(" \u2014 "),yj=a("a"),GSo=o("FNetForTokenClassification"),OSo=o(" (FNet model)"),VSo=l(),o2=a("li"),Pde=a("strong"),XSo=o("funnel"),zSo=o(" \u2014 "),Lj=a("a"),QSo=o("FunnelForTokenClassification"),WSo=o(" (Funnel Transformer model)"),HSo=l(),r2=a("li"),$de=a("strong"),USo=o("gpt2"),JSo=o(" \u2014 "),xj=a("a"),YSo=o("GPT2ForTokenClassification"),KSo=o(" (OpenAI GPT-2 model)"),ZSo=l(),t2=a("li"),Ide=a("strong"),eRo=o("ibert"),oRo=o(" \u2014 "),kj=a("a"),rRo=o("IBertForTokenClassification"),tRo=o(" (I-BERT model)"),aRo=l(),a2=a("li"),qde=a("strong"),nRo=o("layoutlm"),sRo=o(" \u2014 "),Sj=a("a"),lRo=o("LayoutLMForTokenClassification"),iRo=o(" (LayoutLM model)"),dRo=l(),n2=a("li"),Nde=a("strong"),cRo=o("layoutlmv2"),fRo=o(" \u2014 "),Rj=a("a"),mRo=o("LayoutLMv2ForTokenClassification"),gRo=o(" (LayoutLMv2 model)"),hRo=l(),s2=a("li"),jde=a("strong"),pRo=o("longformer"),_Ro=o(" \u2014 "),Bj=a("a"),uRo=o("LongformerForTokenClassification"),bRo=o(" (Longformer model)"),vRo=l(),l2=a("li"),Dde=a("strong"),FRo=o("megatron-bert"),TRo=o(" \u2014 "),Pj=a("a"),MRo=o("MegatronBertForTokenClassification"),ERo=o(" (MegatronBert model)"),CRo=l(),i2=a("li"),Gde=a("strong"),wRo=o("mobilebert"),ARo=o(" \u2014 "),$j=a("a"),yRo=o("MobileBertForTokenClassification"),LRo=o(" (MobileBERT model)"),xRo=l(),d2=a("li"),Ode=a("strong"),kRo=o("mpnet"),SRo=o(" \u2014 "),Ij=a("a"),RRo=o("MPNetForTokenClassification"),BRo=o(" (MPNet model)"),PRo=l(),c2=a("li"),Vde=a("strong"),$Ro=o("nystromformer"),IRo=o(" \u2014 "),qj=a("a"),qRo=o("NystromformerForTokenClassification"),NRo=o(" (Nystromformer model)"),jRo=l(),f2=a("li"),Xde=a("strong"),DRo=o("qdqbert"),GRo=o(" \u2014 "),Nj=a("a"),ORo=o("QDQBertForTokenClassification"),VRo=o(" (QDQBert model)"),XRo=l(),m2=a("li"),zde=a("strong"),zRo=o("rembert"),QRo=o(" \u2014 "),jj=a("a"),WRo=o("RemBertForTokenClassification"),HRo=o(" (RemBERT model)"),URo=l(),g2=a("li"),Qde=a("strong"),JRo=o("roberta"),YRo=o(" \u2014 "),Dj=a("a"),KRo=o("RobertaForTokenClassification"),ZRo=o(" (RoBERTa model)"),eBo=l(),h2=a("li"),Wde=a("strong"),oBo=o("roformer"),rBo=o(" \u2014 "),Gj=a("a"),tBo=o("RoFormerForTokenClassification"),aBo=o(" (RoFormer model)"),nBo=l(),p2=a("li"),Hde=a("strong"),sBo=o("squeezebert"),lBo=o(" \u2014 "),Oj=a("a"),iBo=o("SqueezeBertForTokenClassification"),dBo=o(" (SqueezeBERT model)"),cBo=l(),_2=a("li"),Ude=a("strong"),fBo=o("xlm"),mBo=o(" \u2014 "),Vj=a("a"),gBo=o("XLMForTokenClassification"),hBo=o(" (XLM model)"),pBo=l(),u2=a("li"),Jde=a("strong"),_Bo=o("xlm-roberta"),uBo=o(" \u2014 "),Xj=a("a"),bBo=o("XLMRobertaForTokenClassification"),vBo=o(" (XLM-RoBERTa model)"),FBo=l(),b2=a("li"),Yde=a("strong"),TBo=o("xlm-roberta-xl"),MBo=o(" \u2014 "),zj=a("a"),EBo=o("XLMRobertaXLForTokenClassification"),CBo=o(" (XLM-RoBERTa-XL model)"),wBo=l(),v2=a("li"),Kde=a("strong"),ABo=o("xlnet"),yBo=o(" \u2014 "),Qj=a("a"),LBo=o("XLNetForTokenClassification"),xBo=o(" (XLNet model)"),kBo=l(),F2=a("li"),Zde=a("strong"),SBo=o("yoso"),RBo=o(" \u2014 "),Wj=a("a"),BBo=o("YosoForTokenClassification"),PBo=o(" (YOSO model)"),$Bo=l(),T2=a("p"),IBo=o("The model is set in evaluation mode by default using "),ece=a("code"),qBo=o("model.eval()"),NBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oce=a("code"),jBo=o("model.train()"),DBo=l(),rce=a("p"),GBo=o("Examples:"),OBo=l(),f(_3.$$.fragment),iBe=l(),Cd=a("h2"),M2=a("a"),tce=a("span"),f(u3.$$.fragment),VBo=l(),ace=a("span"),XBo=o("AutoModelForQuestionAnswering"),dBe=l(),nr=a("div"),f(b3.$$.fragment),zBo=l(),wd=a("p"),QBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Hj=a("a"),WBo=o("from_pretrained()"),HBo=o(" class method or the "),Uj=a("a"),UBo=o("from_config()"),JBo=o(` class
method.`),YBo=l(),v3=a("p"),KBo=o("This class cannot be instantiated directly using "),nce=a("code"),ZBo=o("__init__()"),ePo=o(" (throws an error)."),oPo=l(),Zr=a("div"),f(F3.$$.fragment),rPo=l(),sce=a("p"),tPo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aPo=l(),Ad=a("p"),nPo=o(`Note:
Loading a model from its configuration file does `),lce=a("strong"),sPo=o("not"),lPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jj=a("a"),iPo=o("from_pretrained()"),dPo=o(" to load the model weights."),cPo=l(),ice=a("p"),fPo=o("Examples:"),mPo=l(),f(T3.$$.fragment),gPo=l(),Qe=a("div"),f(M3.$$.fragment),hPo=l(),dce=a("p"),pPo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_Po=l(),Za=a("p"),uPo=o("The model class to instantiate is selected based on the "),cce=a("code"),bPo=o("model_type"),vPo=o(` property of the config object (either
passed as an argument or loaded from `),fce=a("code"),FPo=o("pretrained_model_name_or_path"),TPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mce=a("code"),MPo=o("pretrained_model_name_or_path"),EPo=o(":"),CPo=l(),R=a("ul"),E2=a("li"),gce=a("strong"),wPo=o("albert"),APo=o(" \u2014 "),Yj=a("a"),yPo=o("AlbertForQuestionAnswering"),LPo=o(" (ALBERT model)"),xPo=l(),C2=a("li"),hce=a("strong"),kPo=o("bart"),SPo=o(" \u2014 "),Kj=a("a"),RPo=o("BartForQuestionAnswering"),BPo=o(" (BART model)"),PPo=l(),w2=a("li"),pce=a("strong"),$Po=o("bert"),IPo=o(" \u2014 "),Zj=a("a"),qPo=o("BertForQuestionAnswering"),NPo=o(" (BERT model)"),jPo=l(),A2=a("li"),_ce=a("strong"),DPo=o("big_bird"),GPo=o(" \u2014 "),eD=a("a"),OPo=o("BigBirdForQuestionAnswering"),VPo=o(" (BigBird model)"),XPo=l(),y2=a("li"),uce=a("strong"),zPo=o("bigbird_pegasus"),QPo=o(" \u2014 "),oD=a("a"),WPo=o("BigBirdPegasusForQuestionAnswering"),HPo=o(" (BigBirdPegasus model)"),UPo=l(),L2=a("li"),bce=a("strong"),JPo=o("camembert"),YPo=o(" \u2014 "),rD=a("a"),KPo=o("CamembertForQuestionAnswering"),ZPo=o(" (CamemBERT model)"),e$o=l(),x2=a("li"),vce=a("strong"),o$o=o("canine"),r$o=o(" \u2014 "),tD=a("a"),t$o=o("CanineForQuestionAnswering"),a$o=o(" (Canine model)"),n$o=l(),k2=a("li"),Fce=a("strong"),s$o=o("convbert"),l$o=o(" \u2014 "),aD=a("a"),i$o=o("ConvBertForQuestionAnswering"),d$o=o(" (ConvBERT model)"),c$o=l(),S2=a("li"),Tce=a("strong"),f$o=o("data2vec-text"),m$o=o(" \u2014 "),nD=a("a"),g$o=o("Data2VecTextForQuestionAnswering"),h$o=o(" (Data2VecText model)"),p$o=l(),R2=a("li"),Mce=a("strong"),_$o=o("deberta"),u$o=o(" \u2014 "),sD=a("a"),b$o=o("DebertaForQuestionAnswering"),v$o=o(" (DeBERTa model)"),F$o=l(),B2=a("li"),Ece=a("strong"),T$o=o("deberta-v2"),M$o=o(" \u2014 "),lD=a("a"),E$o=o("DebertaV2ForQuestionAnswering"),C$o=o(" (DeBERTa-v2 model)"),w$o=l(),P2=a("li"),Cce=a("strong"),A$o=o("distilbert"),y$o=o(" \u2014 "),iD=a("a"),L$o=o("DistilBertForQuestionAnswering"),x$o=o(" (DistilBERT model)"),k$o=l(),$2=a("li"),wce=a("strong"),S$o=o("electra"),R$o=o(" \u2014 "),dD=a("a"),B$o=o("ElectraForQuestionAnswering"),P$o=o(" (ELECTRA model)"),$$o=l(),I2=a("li"),Ace=a("strong"),I$o=o("flaubert"),q$o=o(" \u2014 "),cD=a("a"),N$o=o("FlaubertForQuestionAnsweringSimple"),j$o=o(" (FlauBERT model)"),D$o=l(),q2=a("li"),yce=a("strong"),G$o=o("fnet"),O$o=o(" \u2014 "),fD=a("a"),V$o=o("FNetForQuestionAnswering"),X$o=o(" (FNet model)"),z$o=l(),N2=a("li"),Lce=a("strong"),Q$o=o("funnel"),W$o=o(" \u2014 "),mD=a("a"),H$o=o("FunnelForQuestionAnswering"),U$o=o(" (Funnel Transformer model)"),J$o=l(),j2=a("li"),xce=a("strong"),Y$o=o("gptj"),K$o=o(" \u2014 "),gD=a("a"),Z$o=o("GPTJForQuestionAnswering"),eIo=o(" (GPT-J model)"),oIo=l(),D2=a("li"),kce=a("strong"),rIo=o("ibert"),tIo=o(" \u2014 "),hD=a("a"),aIo=o("IBertForQuestionAnswering"),nIo=o(" (I-BERT model)"),sIo=l(),G2=a("li"),Sce=a("strong"),lIo=o("layoutlmv2"),iIo=o(" \u2014 "),pD=a("a"),dIo=o("LayoutLMv2ForQuestionAnswering"),cIo=o(" (LayoutLMv2 model)"),fIo=l(),O2=a("li"),Rce=a("strong"),mIo=o("led"),gIo=o(" \u2014 "),_D=a("a"),hIo=o("LEDForQuestionAnswering"),pIo=o(" (LED model)"),_Io=l(),V2=a("li"),Bce=a("strong"),uIo=o("longformer"),bIo=o(" \u2014 "),uD=a("a"),vIo=o("LongformerForQuestionAnswering"),FIo=o(" (Longformer model)"),TIo=l(),X2=a("li"),Pce=a("strong"),MIo=o("lxmert"),EIo=o(" \u2014 "),bD=a("a"),CIo=o("LxmertForQuestionAnswering"),wIo=o(" (LXMERT model)"),AIo=l(),z2=a("li"),$ce=a("strong"),yIo=o("mbart"),LIo=o(" \u2014 "),vD=a("a"),xIo=o("MBartForQuestionAnswering"),kIo=o(" (mBART model)"),SIo=l(),Q2=a("li"),Ice=a("strong"),RIo=o("megatron-bert"),BIo=o(" \u2014 "),FD=a("a"),PIo=o("MegatronBertForQuestionAnswering"),$Io=o(" (MegatronBert model)"),IIo=l(),W2=a("li"),qce=a("strong"),qIo=o("mobilebert"),NIo=o(" \u2014 "),TD=a("a"),jIo=o("MobileBertForQuestionAnswering"),DIo=o(" (MobileBERT model)"),GIo=l(),H2=a("li"),Nce=a("strong"),OIo=o("mpnet"),VIo=o(" \u2014 "),MD=a("a"),XIo=o("MPNetForQuestionAnswering"),zIo=o(" (MPNet model)"),QIo=l(),U2=a("li"),jce=a("strong"),WIo=o("nystromformer"),HIo=o(" \u2014 "),ED=a("a"),UIo=o("NystromformerForQuestionAnswering"),JIo=o(" (Nystromformer model)"),YIo=l(),J2=a("li"),Dce=a("strong"),KIo=o("qdqbert"),ZIo=o(" \u2014 "),CD=a("a"),eqo=o("QDQBertForQuestionAnswering"),oqo=o(" (QDQBert model)"),rqo=l(),Y2=a("li"),Gce=a("strong"),tqo=o("reformer"),aqo=o(" \u2014 "),wD=a("a"),nqo=o("ReformerForQuestionAnswering"),sqo=o(" (Reformer model)"),lqo=l(),K2=a("li"),Oce=a("strong"),iqo=o("rembert"),dqo=o(" \u2014 "),AD=a("a"),cqo=o("RemBertForQuestionAnswering"),fqo=o(" (RemBERT model)"),mqo=l(),Z2=a("li"),Vce=a("strong"),gqo=o("roberta"),hqo=o(" \u2014 "),yD=a("a"),pqo=o("RobertaForQuestionAnswering"),_qo=o(" (RoBERTa model)"),uqo=l(),ev=a("li"),Xce=a("strong"),bqo=o("roformer"),vqo=o(" \u2014 "),LD=a("a"),Fqo=o("RoFormerForQuestionAnswering"),Tqo=o(" (RoFormer model)"),Mqo=l(),ov=a("li"),zce=a("strong"),Eqo=o("splinter"),Cqo=o(" \u2014 "),xD=a("a"),wqo=o("SplinterForQuestionAnswering"),Aqo=o(" (Splinter model)"),yqo=l(),rv=a("li"),Qce=a("strong"),Lqo=o("squeezebert"),xqo=o(" \u2014 "),kD=a("a"),kqo=o("SqueezeBertForQuestionAnswering"),Sqo=o(" (SqueezeBERT model)"),Rqo=l(),tv=a("li"),Wce=a("strong"),Bqo=o("xlm"),Pqo=o(" \u2014 "),SD=a("a"),$qo=o("XLMForQuestionAnsweringSimple"),Iqo=o(" (XLM model)"),qqo=l(),av=a("li"),Hce=a("strong"),Nqo=o("xlm-roberta"),jqo=o(" \u2014 "),RD=a("a"),Dqo=o("XLMRobertaForQuestionAnswering"),Gqo=o(" (XLM-RoBERTa model)"),Oqo=l(),nv=a("li"),Uce=a("strong"),Vqo=o("xlm-roberta-xl"),Xqo=o(" \u2014 "),BD=a("a"),zqo=o("XLMRobertaXLForQuestionAnswering"),Qqo=o(" (XLM-RoBERTa-XL model)"),Wqo=l(),sv=a("li"),Jce=a("strong"),Hqo=o("xlnet"),Uqo=o(" \u2014 "),PD=a("a"),Jqo=o("XLNetForQuestionAnsweringSimple"),Yqo=o(" (XLNet model)"),Kqo=l(),lv=a("li"),Yce=a("strong"),Zqo=o("yoso"),eNo=o(" \u2014 "),$D=a("a"),oNo=o("YosoForQuestionAnswering"),rNo=o(" (YOSO model)"),tNo=l(),iv=a("p"),aNo=o("The model is set in evaluation mode by default using "),Kce=a("code"),nNo=o("model.eval()"),sNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zce=a("code"),lNo=o("model.train()"),iNo=l(),efe=a("p"),dNo=o("Examples:"),cNo=l(),f(E3.$$.fragment),cBe=l(),yd=a("h2"),dv=a("a"),ofe=a("span"),f(C3.$$.fragment),fNo=l(),rfe=a("span"),mNo=o("AutoModelForTableQuestionAnswering"),fBe=l(),sr=a("div"),f(w3.$$.fragment),gNo=l(),Ld=a("p"),hNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ID=a("a"),pNo=o("from_pretrained()"),_No=o(" class method or the "),qD=a("a"),uNo=o("from_config()"),bNo=o(` class
method.`),vNo=l(),A3=a("p"),FNo=o("This class cannot be instantiated directly using "),tfe=a("code"),TNo=o("__init__()"),MNo=o(" (throws an error)."),ENo=l(),et=a("div"),f(y3.$$.fragment),CNo=l(),afe=a("p"),wNo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ANo=l(),xd=a("p"),yNo=o(`Note:
Loading a model from its configuration file does `),nfe=a("strong"),LNo=o("not"),xNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ND=a("a"),kNo=o("from_pretrained()"),SNo=o(" to load the model weights."),RNo=l(),sfe=a("p"),BNo=o("Examples:"),PNo=l(),f(L3.$$.fragment),$No=l(),We=a("div"),f(x3.$$.fragment),INo=l(),lfe=a("p"),qNo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),NNo=l(),en=a("p"),jNo=o("The model class to instantiate is selected based on the "),ife=a("code"),DNo=o("model_type"),GNo=o(` property of the config object (either
passed as an argument or loaded from `),dfe=a("code"),ONo=o("pretrained_model_name_or_path"),VNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cfe=a("code"),XNo=o("pretrained_model_name_or_path"),zNo=o(":"),QNo=l(),ffe=a("ul"),cv=a("li"),mfe=a("strong"),WNo=o("tapas"),HNo=o(" \u2014 "),jD=a("a"),UNo=o("TapasForQuestionAnswering"),JNo=o(" (TAPAS model)"),YNo=l(),fv=a("p"),KNo=o("The model is set in evaluation mode by default using "),gfe=a("code"),ZNo=o("model.eval()"),ejo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hfe=a("code"),ojo=o("model.train()"),rjo=l(),pfe=a("p"),tjo=o("Examples:"),ajo=l(),f(k3.$$.fragment),mBe=l(),kd=a("h2"),mv=a("a"),_fe=a("span"),f(S3.$$.fragment),njo=l(),ufe=a("span"),sjo=o("AutoModelForImageClassification"),gBe=l(),lr=a("div"),f(R3.$$.fragment),ljo=l(),Sd=a("p"),ijo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),DD=a("a"),djo=o("from_pretrained()"),cjo=o(" class method or the "),GD=a("a"),fjo=o("from_config()"),mjo=o(` class
method.`),gjo=l(),B3=a("p"),hjo=o("This class cannot be instantiated directly using "),bfe=a("code"),pjo=o("__init__()"),_jo=o(" (throws an error)."),ujo=l(),ot=a("div"),f(P3.$$.fragment),bjo=l(),vfe=a("p"),vjo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Fjo=l(),Rd=a("p"),Tjo=o(`Note:
Loading a model from its configuration file does `),Ffe=a("strong"),Mjo=o("not"),Ejo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OD=a("a"),Cjo=o("from_pretrained()"),wjo=o(" to load the model weights."),Ajo=l(),Tfe=a("p"),yjo=o("Examples:"),Ljo=l(),f($3.$$.fragment),xjo=l(),He=a("div"),f(I3.$$.fragment),kjo=l(),Mfe=a("p"),Sjo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rjo=l(),on=a("p"),Bjo=o("The model class to instantiate is selected based on the "),Efe=a("code"),Pjo=o("model_type"),$jo=o(` property of the config object (either
passed as an argument or loaded from `),Cfe=a("code"),Ijo=o("pretrained_model_name_or_path"),qjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=a("code"),Njo=o("pretrained_model_name_or_path"),jjo=o(":"),Djo=l(),de=a("ul"),gv=a("li"),Afe=a("strong"),Gjo=o("beit"),Ojo=o(" \u2014 "),VD=a("a"),Vjo=o("BeitForImageClassification"),Xjo=o(" (BEiT model)"),zjo=l(),hv=a("li"),yfe=a("strong"),Qjo=o("convnext"),Wjo=o(" \u2014 "),XD=a("a"),Hjo=o("ConvNextForImageClassification"),Ujo=o(" (ConvNext model)"),Jjo=l(),pv=a("li"),Lfe=a("strong"),Yjo=o("data2vec-vision"),Kjo=o(" \u2014 "),zD=a("a"),Zjo=o("Data2VecVisionForImageClassification"),eDo=o(" (Data2VecVision model)"),oDo=l(),Gs=a("li"),xfe=a("strong"),rDo=o("deit"),tDo=o(" \u2014 "),QD=a("a"),aDo=o("DeiTForImageClassification"),nDo=o(" or "),WD=a("a"),sDo=o("DeiTForImageClassificationWithTeacher"),lDo=o(" (DeiT model)"),iDo=l(),_v=a("li"),kfe=a("strong"),dDo=o("imagegpt"),cDo=o(" \u2014 "),HD=a("a"),fDo=o("ImageGPTForImageClassification"),mDo=o(" (ImageGPT model)"),gDo=l(),ma=a("li"),Sfe=a("strong"),hDo=o("perceiver"),pDo=o(" \u2014 "),UD=a("a"),_Do=o("PerceiverForImageClassificationLearned"),uDo=o(" or "),JD=a("a"),bDo=o("PerceiverForImageClassificationFourier"),vDo=o(" or "),YD=a("a"),FDo=o("PerceiverForImageClassificationConvProcessing"),TDo=o(" (Perceiver model)"),MDo=l(),uv=a("li"),Rfe=a("strong"),EDo=o("poolformer"),CDo=o(" \u2014 "),KD=a("a"),wDo=o("PoolFormerForImageClassification"),ADo=o(" (PoolFormer model)"),yDo=l(),bv=a("li"),Bfe=a("strong"),LDo=o("regnet"),xDo=o(" \u2014 "),ZD=a("a"),kDo=o("RegNetForImageClassification"),SDo=o(" (RegNet model)"),RDo=l(),vv=a("li"),Pfe=a("strong"),BDo=o("resnet"),PDo=o(" \u2014 "),eG=a("a"),$Do=o("ResNetForImageClassification"),IDo=o(" (ResNet model)"),qDo=l(),Fv=a("li"),$fe=a("strong"),NDo=o("segformer"),jDo=o(" \u2014 "),oG=a("a"),DDo=o("SegformerForImageClassification"),GDo=o(" (SegFormer model)"),ODo=l(),Tv=a("li"),Ife=a("strong"),VDo=o("swin"),XDo=o(" \u2014 "),rG=a("a"),zDo=o("SwinForImageClassification"),QDo=o(" (Swin model)"),WDo=l(),Mv=a("li"),qfe=a("strong"),HDo=o("van"),UDo=o(" \u2014 "),tG=a("a"),JDo=o("VanForImageClassification"),YDo=o(" (VAN model)"),KDo=l(),Ev=a("li"),Nfe=a("strong"),ZDo=o("vit"),eGo=o(" \u2014 "),aG=a("a"),oGo=o("ViTForImageClassification"),rGo=o(" (ViT model)"),tGo=l(),Cv=a("p"),aGo=o("The model is set in evaluation mode by default using "),jfe=a("code"),nGo=o("model.eval()"),sGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dfe=a("code"),lGo=o("model.train()"),iGo=l(),Gfe=a("p"),dGo=o("Examples:"),cGo=l(),f(q3.$$.fragment),hBe=l(),Bd=a("h2"),wv=a("a"),Ofe=a("span"),f(N3.$$.fragment),fGo=l(),Vfe=a("span"),mGo=o("AutoModelForVision2Seq"),pBe=l(),ir=a("div"),f(j3.$$.fragment),gGo=l(),Pd=a("p"),hGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nG=a("a"),pGo=o("from_pretrained()"),_Go=o(" class method or the "),sG=a("a"),uGo=o("from_config()"),bGo=o(` class
method.`),vGo=l(),D3=a("p"),FGo=o("This class cannot be instantiated directly using "),Xfe=a("code"),TGo=o("__init__()"),MGo=o(" (throws an error)."),EGo=l(),rt=a("div"),f(G3.$$.fragment),CGo=l(),zfe=a("p"),wGo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),AGo=l(),$d=a("p"),yGo=o(`Note:
Loading a model from its configuration file does `),Qfe=a("strong"),LGo=o("not"),xGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lG=a("a"),kGo=o("from_pretrained()"),SGo=o(" to load the model weights."),RGo=l(),Wfe=a("p"),BGo=o("Examples:"),PGo=l(),f(O3.$$.fragment),$Go=l(),Ue=a("div"),f(V3.$$.fragment),IGo=l(),Hfe=a("p"),qGo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NGo=l(),rn=a("p"),jGo=o("The model class to instantiate is selected based on the "),Ufe=a("code"),DGo=o("model_type"),GGo=o(` property of the config object (either
passed as an argument or loaded from `),Jfe=a("code"),OGo=o("pretrained_model_name_or_path"),VGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=a("code"),XGo=o("pretrained_model_name_or_path"),zGo=o(":"),QGo=l(),Kfe=a("ul"),Av=a("li"),Zfe=a("strong"),WGo=o("vision-encoder-decoder"),HGo=o(" \u2014 "),iG=a("a"),UGo=o("VisionEncoderDecoderModel"),JGo=o(" (Vision Encoder decoder model)"),YGo=l(),yv=a("p"),KGo=o("The model is set in evaluation mode by default using "),eme=a("code"),ZGo=o("model.eval()"),eOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=a("code"),oOo=o("model.train()"),rOo=l(),rme=a("p"),tOo=o("Examples:"),aOo=l(),f(X3.$$.fragment),_Be=l(),Id=a("h2"),Lv=a("a"),tme=a("span"),f(z3.$$.fragment),nOo=l(),ame=a("span"),sOo=o("AutoModelForAudioClassification"),uBe=l(),dr=a("div"),f(Q3.$$.fragment),lOo=l(),qd=a("p"),iOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),dG=a("a"),dOo=o("from_pretrained()"),cOo=o(" class method or the "),cG=a("a"),fOo=o("from_config()"),mOo=o(` class
method.`),gOo=l(),W3=a("p"),hOo=o("This class cannot be instantiated directly using "),nme=a("code"),pOo=o("__init__()"),_Oo=o(" (throws an error)."),uOo=l(),tt=a("div"),f(H3.$$.fragment),bOo=l(),sme=a("p"),vOo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),FOo=l(),Nd=a("p"),TOo=o(`Note:
Loading a model from its configuration file does `),lme=a("strong"),MOo=o("not"),EOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=a("a"),COo=o("from_pretrained()"),wOo=o(" to load the model weights."),AOo=l(),ime=a("p"),yOo=o("Examples:"),LOo=l(),f(U3.$$.fragment),xOo=l(),Je=a("div"),f(J3.$$.fragment),kOo=l(),dme=a("p"),SOo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ROo=l(),tn=a("p"),BOo=o("The model class to instantiate is selected based on the "),cme=a("code"),POo=o("model_type"),$Oo=o(` property of the config object (either
passed as an argument or loaded from `),fme=a("code"),IOo=o("pretrained_model_name_or_path"),qOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mme=a("code"),NOo=o("pretrained_model_name_or_path"),jOo=o(":"),DOo=l(),Se=a("ul"),xv=a("li"),gme=a("strong"),GOo=o("data2vec-audio"),OOo=o(" \u2014 "),mG=a("a"),VOo=o("Data2VecAudioForSequenceClassification"),XOo=o(" (Data2VecAudio model)"),zOo=l(),kv=a("li"),hme=a("strong"),QOo=o("hubert"),WOo=o(" \u2014 "),gG=a("a"),HOo=o("HubertForSequenceClassification"),UOo=o(" (Hubert model)"),JOo=l(),Sv=a("li"),pme=a("strong"),YOo=o("sew"),KOo=o(" \u2014 "),hG=a("a"),ZOo=o("SEWForSequenceClassification"),eVo=o(" (SEW model)"),oVo=l(),Rv=a("li"),_me=a("strong"),rVo=o("sew-d"),tVo=o(" \u2014 "),pG=a("a"),aVo=o("SEWDForSequenceClassification"),nVo=o(" (SEW-D model)"),sVo=l(),Bv=a("li"),ume=a("strong"),lVo=o("unispeech"),iVo=o(" \u2014 "),_G=a("a"),dVo=o("UniSpeechForSequenceClassification"),cVo=o(" (UniSpeech model)"),fVo=l(),Pv=a("li"),bme=a("strong"),mVo=o("unispeech-sat"),gVo=o(" \u2014 "),uG=a("a"),hVo=o("UniSpeechSatForSequenceClassification"),pVo=o(" (UniSpeechSat model)"),_Vo=l(),$v=a("li"),vme=a("strong"),uVo=o("wav2vec2"),bVo=o(" \u2014 "),bG=a("a"),vVo=o("Wav2Vec2ForSequenceClassification"),FVo=o(" (Wav2Vec2 model)"),TVo=l(),Iv=a("li"),Fme=a("strong"),MVo=o("wavlm"),EVo=o(" \u2014 "),vG=a("a"),CVo=o("WavLMForSequenceClassification"),wVo=o(" (WavLM model)"),AVo=l(),qv=a("p"),yVo=o("The model is set in evaluation mode by default using "),Tme=a("code"),LVo=o("model.eval()"),xVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=a("code"),kVo=o("model.train()"),SVo=l(),Eme=a("p"),RVo=o("Examples:"),BVo=l(),f(Y3.$$.fragment),bBe=l(),jd=a("h2"),Nv=a("a"),Cme=a("span"),f(K3.$$.fragment),PVo=l(),wme=a("span"),$Vo=o("AutoModelForAudioFrameClassification"),vBe=l(),cr=a("div"),f(Z3.$$.fragment),IVo=l(),Dd=a("p"),qVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),FG=a("a"),NVo=o("from_pretrained()"),jVo=o(" class method or the "),TG=a("a"),DVo=o("from_config()"),GVo=o(` class
method.`),OVo=l(),ew=a("p"),VVo=o("This class cannot be instantiated directly using "),Ame=a("code"),XVo=o("__init__()"),zVo=o(" (throws an error)."),QVo=l(),at=a("div"),f(ow.$$.fragment),WVo=l(),yme=a("p"),HVo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),UVo=l(),Gd=a("p"),JVo=o(`Note:
Loading a model from its configuration file does `),Lme=a("strong"),YVo=o("not"),KVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=a("a"),ZVo=o("from_pretrained()"),eXo=o(" to load the model weights."),oXo=l(),xme=a("p"),rXo=o("Examples:"),tXo=l(),f(rw.$$.fragment),aXo=l(),Ye=a("div"),f(tw.$$.fragment),nXo=l(),kme=a("p"),sXo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),lXo=l(),an=a("p"),iXo=o("The model class to instantiate is selected based on the "),Sme=a("code"),dXo=o("model_type"),cXo=o(` property of the config object (either
passed as an argument or loaded from `),Rme=a("code"),fXo=o("pretrained_model_name_or_path"),mXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bme=a("code"),gXo=o("pretrained_model_name_or_path"),hXo=o(":"),pXo=l(),nn=a("ul"),jv=a("li"),Pme=a("strong"),_Xo=o("data2vec-audio"),uXo=o(" \u2014 "),EG=a("a"),bXo=o("Data2VecAudioForAudioFrameClassification"),vXo=o(" (Data2VecAudio model)"),FXo=l(),Dv=a("li"),$me=a("strong"),TXo=o("unispeech-sat"),MXo=o(" \u2014 "),CG=a("a"),EXo=o("UniSpeechSatForAudioFrameClassification"),CXo=o(" (UniSpeechSat model)"),wXo=l(),Gv=a("li"),Ime=a("strong"),AXo=o("wav2vec2"),yXo=o(" \u2014 "),wG=a("a"),LXo=o("Wav2Vec2ForAudioFrameClassification"),xXo=o(" (Wav2Vec2 model)"),kXo=l(),Ov=a("li"),qme=a("strong"),SXo=o("wavlm"),RXo=o(" \u2014 "),AG=a("a"),BXo=o("WavLMForAudioFrameClassification"),PXo=o(" (WavLM model)"),$Xo=l(),Vv=a("p"),IXo=o("The model is set in evaluation mode by default using "),Nme=a("code"),qXo=o("model.eval()"),NXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jme=a("code"),jXo=o("model.train()"),DXo=l(),Dme=a("p"),GXo=o("Examples:"),OXo=l(),f(aw.$$.fragment),FBe=l(),Od=a("h2"),Xv=a("a"),Gme=a("span"),f(nw.$$.fragment),VXo=l(),Ome=a("span"),XXo=o("AutoModelForCTC"),TBe=l(),fr=a("div"),f(sw.$$.fragment),zXo=l(),Vd=a("p"),QXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),yG=a("a"),WXo=o("from_pretrained()"),HXo=o(" class method or the "),LG=a("a"),UXo=o("from_config()"),JXo=o(` class
method.`),YXo=l(),lw=a("p"),KXo=o("This class cannot be instantiated directly using "),Vme=a("code"),ZXo=o("__init__()"),ezo=o(" (throws an error)."),ozo=l(),nt=a("div"),f(iw.$$.fragment),rzo=l(),Xme=a("p"),tzo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),azo=l(),Xd=a("p"),nzo=o(`Note:
Loading a model from its configuration file does `),zme=a("strong"),szo=o("not"),lzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=a("a"),izo=o("from_pretrained()"),dzo=o(" to load the model weights."),czo=l(),Qme=a("p"),fzo=o("Examples:"),mzo=l(),f(dw.$$.fragment),gzo=l(),Ke=a("div"),f(cw.$$.fragment),hzo=l(),Wme=a("p"),pzo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),_zo=l(),sn=a("p"),uzo=o("The model class to instantiate is selected based on the "),Hme=a("code"),bzo=o("model_type"),vzo=o(` property of the config object (either
passed as an argument or loaded from `),Ume=a("code"),Fzo=o("pretrained_model_name_or_path"),Tzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jme=a("code"),Mzo=o("pretrained_model_name_or_path"),Ezo=o(":"),Czo=l(),Re=a("ul"),zv=a("li"),Yme=a("strong"),wzo=o("data2vec-audio"),Azo=o(" \u2014 "),kG=a("a"),yzo=o("Data2VecAudioForCTC"),Lzo=o(" (Data2VecAudio model)"),xzo=l(),Qv=a("li"),Kme=a("strong"),kzo=o("hubert"),Szo=o(" \u2014 "),SG=a("a"),Rzo=o("HubertForCTC"),Bzo=o(" (Hubert model)"),Pzo=l(),Wv=a("li"),Zme=a("strong"),$zo=o("sew"),Izo=o(" \u2014 "),RG=a("a"),qzo=o("SEWForCTC"),Nzo=o(" (SEW model)"),jzo=l(),Hv=a("li"),ege=a("strong"),Dzo=o("sew-d"),Gzo=o(" \u2014 "),BG=a("a"),Ozo=o("SEWDForCTC"),Vzo=o(" (SEW-D model)"),Xzo=l(),Uv=a("li"),oge=a("strong"),zzo=o("unispeech"),Qzo=o(" \u2014 "),PG=a("a"),Wzo=o("UniSpeechForCTC"),Hzo=o(" (UniSpeech model)"),Uzo=l(),Jv=a("li"),rge=a("strong"),Jzo=o("unispeech-sat"),Yzo=o(" \u2014 "),$G=a("a"),Kzo=o("UniSpeechSatForCTC"),Zzo=o(" (UniSpeechSat model)"),eQo=l(),Yv=a("li"),tge=a("strong"),oQo=o("wav2vec2"),rQo=o(" \u2014 "),IG=a("a"),tQo=o("Wav2Vec2ForCTC"),aQo=o(" (Wav2Vec2 model)"),nQo=l(),Kv=a("li"),age=a("strong"),sQo=o("wavlm"),lQo=o(" \u2014 "),qG=a("a"),iQo=o("WavLMForCTC"),dQo=o(" (WavLM model)"),cQo=l(),Zv=a("p"),fQo=o("The model is set in evaluation mode by default using "),nge=a("code"),mQo=o("model.eval()"),gQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sge=a("code"),hQo=o("model.train()"),pQo=l(),lge=a("p"),_Qo=o("Examples:"),uQo=l(),f(fw.$$.fragment),MBe=l(),zd=a("h2"),eF=a("a"),ige=a("span"),f(mw.$$.fragment),bQo=l(),dge=a("span"),vQo=o("AutoModelForSpeechSeq2Seq"),EBe=l(),mr=a("div"),f(gw.$$.fragment),FQo=l(),Qd=a("p"),TQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NG=a("a"),MQo=o("from_pretrained()"),EQo=o(" class method or the "),jG=a("a"),CQo=o("from_config()"),wQo=o(` class
method.`),AQo=l(),hw=a("p"),yQo=o("This class cannot be instantiated directly using "),cge=a("code"),LQo=o("__init__()"),xQo=o(" (throws an error)."),kQo=l(),st=a("div"),f(pw.$$.fragment),SQo=l(),fge=a("p"),RQo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),BQo=l(),Wd=a("p"),PQo=o(`Note:
Loading a model from its configuration file does `),mge=a("strong"),$Qo=o("not"),IQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=a("a"),qQo=o("from_pretrained()"),NQo=o(" to load the model weights."),jQo=l(),gge=a("p"),DQo=o("Examples:"),GQo=l(),f(_w.$$.fragment),OQo=l(),Ze=a("div"),f(uw.$$.fragment),VQo=l(),hge=a("p"),XQo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zQo=l(),ln=a("p"),QQo=o("The model class to instantiate is selected based on the "),pge=a("code"),WQo=o("model_type"),HQo=o(` property of the config object (either
passed as an argument or loaded from `),_ge=a("code"),UQo=o("pretrained_model_name_or_path"),JQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=a("code"),YQo=o("pretrained_model_name_or_path"),KQo=o(":"),ZQo=l(),bw=a("ul"),oF=a("li"),bge=a("strong"),eWo=o("speech-encoder-decoder"),oWo=o(" \u2014 "),GG=a("a"),rWo=o("SpeechEncoderDecoderModel"),tWo=o(" (Speech Encoder decoder model)"),aWo=l(),rF=a("li"),vge=a("strong"),nWo=o("speech_to_text"),sWo=o(" \u2014 "),OG=a("a"),lWo=o("Speech2TextForConditionalGeneration"),iWo=o(" (Speech2Text model)"),dWo=l(),tF=a("p"),cWo=o("The model is set in evaluation mode by default using "),Fge=a("code"),fWo=o("model.eval()"),mWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=a("code"),gWo=o("model.train()"),hWo=l(),Mge=a("p"),pWo=o("Examples:"),_Wo=l(),f(vw.$$.fragment),CBe=l(),Hd=a("h2"),aF=a("a"),Ege=a("span"),f(Fw.$$.fragment),uWo=l(),Cge=a("span"),bWo=o("AutoModelForAudioXVector"),wBe=l(),gr=a("div"),f(Tw.$$.fragment),vWo=l(),Ud=a("p"),FWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),VG=a("a"),TWo=o("from_pretrained()"),MWo=o(" class method or the "),XG=a("a"),EWo=o("from_config()"),CWo=o(` class
method.`),wWo=l(),Mw=a("p"),AWo=o("This class cannot be instantiated directly using "),wge=a("code"),yWo=o("__init__()"),LWo=o(" (throws an error)."),xWo=l(),lt=a("div"),f(Ew.$$.fragment),kWo=l(),Age=a("p"),SWo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),RWo=l(),Jd=a("p"),BWo=o(`Note:
Loading a model from its configuration file does `),yge=a("strong"),PWo=o("not"),$Wo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zG=a("a"),IWo=o("from_pretrained()"),qWo=o(" to load the model weights."),NWo=l(),Lge=a("p"),jWo=o("Examples:"),DWo=l(),f(Cw.$$.fragment),GWo=l(),eo=a("div"),f(ww.$$.fragment),OWo=l(),xge=a("p"),VWo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),XWo=l(),dn=a("p"),zWo=o("The model class to instantiate is selected based on the "),kge=a("code"),QWo=o("model_type"),WWo=o(` property of the config object (either
passed as an argument or loaded from `),Sge=a("code"),HWo=o("pretrained_model_name_or_path"),UWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=a("code"),JWo=o("pretrained_model_name_or_path"),YWo=o(":"),KWo=l(),cn=a("ul"),nF=a("li"),Bge=a("strong"),ZWo=o("data2vec-audio"),eHo=o(" \u2014 "),QG=a("a"),oHo=o("Data2VecAudioForXVector"),rHo=o(" (Data2VecAudio model)"),tHo=l(),sF=a("li"),Pge=a("strong"),aHo=o("unispeech-sat"),nHo=o(" \u2014 "),WG=a("a"),sHo=o("UniSpeechSatForXVector"),lHo=o(" (UniSpeechSat model)"),iHo=l(),lF=a("li"),$ge=a("strong"),dHo=o("wav2vec2"),cHo=o(" \u2014 "),HG=a("a"),fHo=o("Wav2Vec2ForXVector"),mHo=o(" (Wav2Vec2 model)"),gHo=l(),iF=a("li"),Ige=a("strong"),hHo=o("wavlm"),pHo=o(" \u2014 "),UG=a("a"),_Ho=o("WavLMForXVector"),uHo=o(" (WavLM model)"),bHo=l(),dF=a("p"),vHo=o("The model is set in evaluation mode by default using "),qge=a("code"),FHo=o("model.eval()"),THo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nge=a("code"),MHo=o("model.train()"),EHo=l(),jge=a("p"),CHo=o("Examples:"),wHo=l(),f(Aw.$$.fragment),ABe=l(),Yd=a("h2"),cF=a("a"),Dge=a("span"),f(yw.$$.fragment),AHo=l(),Gge=a("span"),yHo=o("AutoModelForMaskedImageModeling"),yBe=l(),hr=a("div"),f(Lw.$$.fragment),LHo=l(),Kd=a("p"),xHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),JG=a("a"),kHo=o("from_pretrained()"),SHo=o(" class method or the "),YG=a("a"),RHo=o("from_config()"),BHo=o(` class
method.`),PHo=l(),xw=a("p"),$Ho=o("This class cannot be instantiated directly using "),Oge=a("code"),IHo=o("__init__()"),qHo=o(" (throws an error)."),NHo=l(),it=a("div"),f(kw.$$.fragment),jHo=l(),Vge=a("p"),DHo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),GHo=l(),Zd=a("p"),OHo=o(`Note:
Loading a model from its configuration file does `),Xge=a("strong"),VHo=o("not"),XHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=a("a"),zHo=o("from_pretrained()"),QHo=o(" to load the model weights."),WHo=l(),zge=a("p"),HHo=o("Examples:"),UHo=l(),f(Sw.$$.fragment),JHo=l(),oo=a("div"),f(Rw.$$.fragment),YHo=l(),Qge=a("p"),KHo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ZHo=l(),fn=a("p"),eUo=o("The model class to instantiate is selected based on the "),Wge=a("code"),oUo=o("model_type"),rUo=o(` property of the config object (either
passed as an argument or loaded from `),Hge=a("code"),tUo=o("pretrained_model_name_or_path"),aUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=a("code"),nUo=o("pretrained_model_name_or_path"),sUo=o(":"),lUo=l(),ec=a("ul"),fF=a("li"),Jge=a("strong"),iUo=o("deit"),dUo=o(" \u2014 "),ZG=a("a"),cUo=o("DeiTForMaskedImageModeling"),fUo=o(" (DeiT model)"),mUo=l(),mF=a("li"),Yge=a("strong"),gUo=o("swin"),hUo=o(" \u2014 "),eO=a("a"),pUo=o("SwinForMaskedImageModeling"),_Uo=o(" (Swin model)"),uUo=l(),gF=a("li"),Kge=a("strong"),bUo=o("vit"),vUo=o(" \u2014 "),oO=a("a"),FUo=o("ViTForMaskedImageModeling"),TUo=o(" (ViT model)"),MUo=l(),hF=a("p"),EUo=o("The model is set in evaluation mode by default using "),Zge=a("code"),CUo=o("model.eval()"),wUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ehe=a("code"),AUo=o("model.train()"),yUo=l(),ohe=a("p"),LUo=o("Examples:"),xUo=l(),f(Bw.$$.fragment),LBe=l(),oc=a("h2"),pF=a("a"),rhe=a("span"),f(Pw.$$.fragment),kUo=l(),the=a("span"),SUo=o("AutoModelForObjectDetection"),xBe=l(),pr=a("div"),f($w.$$.fragment),RUo=l(),rc=a("p"),BUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),rO=a("a"),PUo=o("from_pretrained()"),$Uo=o(" class method or the "),tO=a("a"),IUo=o("from_config()"),qUo=o(` class
method.`),NUo=l(),Iw=a("p"),jUo=o("This class cannot be instantiated directly using "),ahe=a("code"),DUo=o("__init__()"),GUo=o(" (throws an error)."),OUo=l(),dt=a("div"),f(qw.$$.fragment),VUo=l(),nhe=a("p"),XUo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),zUo=l(),tc=a("p"),QUo=o(`Note:
Loading a model from its configuration file does `),she=a("strong"),WUo=o("not"),HUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),UUo=o("from_pretrained()"),JUo=o(" to load the model weights."),YUo=l(),lhe=a("p"),KUo=o("Examples:"),ZUo=l(),f(Nw.$$.fragment),eJo=l(),ro=a("div"),f(jw.$$.fragment),oJo=l(),ihe=a("p"),rJo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),tJo=l(),mn=a("p"),aJo=o("The model class to instantiate is selected based on the "),dhe=a("code"),nJo=o("model_type"),sJo=o(` property of the config object (either
passed as an argument or loaded from `),che=a("code"),lJo=o("pretrained_model_name_or_path"),iJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fhe=a("code"),dJo=o("pretrained_model_name_or_path"),cJo=o(":"),fJo=l(),mhe=a("ul"),_F=a("li"),ghe=a("strong"),mJo=o("detr"),gJo=o(" \u2014 "),nO=a("a"),hJo=o("DetrForObjectDetection"),pJo=o(" (DETR model)"),_Jo=l(),uF=a("p"),uJo=o("The model is set in evaluation mode by default using "),hhe=a("code"),bJo=o("model.eval()"),vJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),phe=a("code"),FJo=o("model.train()"),TJo=l(),_he=a("p"),MJo=o("Examples:"),EJo=l(),f(Dw.$$.fragment),kBe=l(),ac=a("h2"),bF=a("a"),uhe=a("span"),f(Gw.$$.fragment),CJo=l(),bhe=a("span"),wJo=o("AutoModelForImageSegmentation"),SBe=l(),_r=a("div"),f(Ow.$$.fragment),AJo=l(),nc=a("p"),yJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),sO=a("a"),LJo=o("from_pretrained()"),xJo=o(" class method or the "),lO=a("a"),kJo=o("from_config()"),SJo=o(` class
method.`),RJo=l(),Vw=a("p"),BJo=o("This class cannot be instantiated directly using "),vhe=a("code"),PJo=o("__init__()"),$Jo=o(" (throws an error)."),IJo=l(),ct=a("div"),f(Xw.$$.fragment),qJo=l(),Fhe=a("p"),NJo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),jJo=l(),sc=a("p"),DJo=o(`Note:
Loading a model from its configuration file does `),The=a("strong"),GJo=o("not"),OJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=a("a"),VJo=o("from_pretrained()"),XJo=o(" to load the model weights."),zJo=l(),Mhe=a("p"),QJo=o("Examples:"),WJo=l(),f(zw.$$.fragment),HJo=l(),to=a("div"),f(Qw.$$.fragment),UJo=l(),Ehe=a("p"),JJo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),YJo=l(),gn=a("p"),KJo=o("The model class to instantiate is selected based on the "),Che=a("code"),ZJo=o("model_type"),eYo=o(` property of the config object (either
passed as an argument or loaded from `),whe=a("code"),oYo=o("pretrained_model_name_or_path"),rYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=a("code"),tYo=o("pretrained_model_name_or_path"),aYo=o(":"),nYo=l(),yhe=a("ul"),vF=a("li"),Lhe=a("strong"),sYo=o("detr"),lYo=o(" \u2014 "),dO=a("a"),iYo=o("DetrForSegmentation"),dYo=o(" (DETR model)"),cYo=l(),FF=a("p"),fYo=o("The model is set in evaluation mode by default using "),xhe=a("code"),mYo=o("model.eval()"),gYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=a("code"),hYo=o("model.train()"),pYo=l(),She=a("p"),_Yo=o("Examples:"),uYo=l(),f(Ww.$$.fragment),RBe=l(),lc=a("h2"),TF=a("a"),Rhe=a("span"),f(Hw.$$.fragment),bYo=l(),Bhe=a("span"),vYo=o("AutoModelForSemanticSegmentation"),BBe=l(),ur=a("div"),f(Uw.$$.fragment),FYo=l(),ic=a("p"),TYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),cO=a("a"),MYo=o("from_pretrained()"),EYo=o(" class method or the "),fO=a("a"),CYo=o("from_config()"),wYo=o(` class
method.`),AYo=l(),Jw=a("p"),yYo=o("This class cannot be instantiated directly using "),Phe=a("code"),LYo=o("__init__()"),xYo=o(" (throws an error)."),kYo=l(),ft=a("div"),f(Yw.$$.fragment),SYo=l(),$he=a("p"),RYo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),BYo=l(),dc=a("p"),PYo=o(`Note:
Loading a model from its configuration file does `),Ihe=a("strong"),$Yo=o("not"),IYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=a("a"),qYo=o("from_pretrained()"),NYo=o(" to load the model weights."),jYo=l(),qhe=a("p"),DYo=o("Examples:"),GYo=l(),f(Kw.$$.fragment),OYo=l(),ao=a("div"),f(Zw.$$.fragment),VYo=l(),Nhe=a("p"),XYo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zYo=l(),hn=a("p"),QYo=o("The model class to instantiate is selected based on the "),jhe=a("code"),WYo=o("model_type"),HYo=o(` property of the config object (either
passed as an argument or loaded from `),Dhe=a("code"),UYo=o("pretrained_model_name_or_path"),JYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=a("code"),YYo=o("pretrained_model_name_or_path"),KYo=o(":"),ZYo=l(),pn=a("ul"),MF=a("li"),Ohe=a("strong"),eKo=o("beit"),oKo=o(" \u2014 "),gO=a("a"),rKo=o("BeitForSemanticSegmentation"),tKo=o(" (BEiT model)"),aKo=l(),EF=a("li"),Vhe=a("strong"),nKo=o("data2vec-vision"),sKo=o(" \u2014 "),hO=a("a"),lKo=o("Data2VecVisionForSemanticSegmentation"),iKo=o(" (Data2VecVision model)"),dKo=l(),CF=a("li"),Xhe=a("strong"),cKo=o("dpt"),fKo=o(" \u2014 "),pO=a("a"),mKo=o("DPTForSemanticSegmentation"),gKo=o(" (DPT model)"),hKo=l(),wF=a("li"),zhe=a("strong"),pKo=o("segformer"),_Ko=o(" \u2014 "),_O=a("a"),uKo=o("SegformerForSemanticSegmentation"),bKo=o(" (SegFormer model)"),vKo=l(),AF=a("p"),FKo=o("The model is set in evaluation mode by default using "),Qhe=a("code"),TKo=o("model.eval()"),MKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=a("code"),EKo=o("model.train()"),CKo=l(),Hhe=a("p"),wKo=o("Examples:"),AKo=l(),f(eA.$$.fragment),PBe=l(),cc=a("h2"),yF=a("a"),Uhe=a("span"),f(oA.$$.fragment),yKo=l(),Jhe=a("span"),LKo=o("AutoModelForInstanceSegmentation"),$Be=l(),br=a("div"),f(rA.$$.fragment),xKo=l(),fc=a("p"),kKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),uO=a("a"),SKo=o("from_pretrained()"),RKo=o(" class method or the "),bO=a("a"),BKo=o("from_config()"),PKo=o(` class
method.`),$Ko=l(),tA=a("p"),IKo=o("This class cannot be instantiated directly using "),Yhe=a("code"),qKo=o("__init__()"),NKo=o(" (throws an error)."),jKo=l(),mt=a("div"),f(aA.$$.fragment),DKo=l(),Khe=a("p"),GKo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),OKo=l(),mc=a("p"),VKo=o(`Note:
Loading a model from its configuration file does `),Zhe=a("strong"),XKo=o("not"),zKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=a("a"),QKo=o("from_pretrained()"),WKo=o(" to load the model weights."),HKo=l(),epe=a("p"),UKo=o("Examples:"),JKo=l(),f(nA.$$.fragment),YKo=l(),no=a("div"),f(sA.$$.fragment),KKo=l(),ope=a("p"),ZKo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),eZo=l(),_n=a("p"),oZo=o("The model class to instantiate is selected based on the "),rpe=a("code"),rZo=o("model_type"),tZo=o(` property of the config object (either
passed as an argument or loaded from `),tpe=a("code"),aZo=o("pretrained_model_name_or_path"),nZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=a("code"),sZo=o("pretrained_model_name_or_path"),lZo=o(":"),iZo=l(),npe=a("ul"),LF=a("li"),spe=a("strong"),dZo=o("maskformer"),cZo=o(" \u2014 "),FO=a("a"),fZo=o("MaskFormerForInstanceSegmentation"),mZo=o(" (MaskFormer model)"),gZo=l(),xF=a("p"),hZo=o("The model is set in evaluation mode by default using "),lpe=a("code"),pZo=o("model.eval()"),_Zo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ipe=a("code"),uZo=o("model.train()"),bZo=l(),dpe=a("p"),vZo=o("Examples:"),FZo=l(),f(lA.$$.fragment),IBe=l(),gc=a("h2"),kF=a("a"),cpe=a("span"),f(iA.$$.fragment),TZo=l(),fpe=a("span"),MZo=o("TFAutoModel"),qBe=l(),vr=a("div"),f(dA.$$.fragment),EZo=l(),hc=a("p"),CZo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TO=a("a"),wZo=o("from_pretrained()"),AZo=o(" class method or the "),MO=a("a"),yZo=o("from_config()"),LZo=o(` class
method.`),xZo=l(),cA=a("p"),kZo=o("This class cannot be instantiated directly using "),mpe=a("code"),SZo=o("__init__()"),RZo=o(" (throws an error)."),BZo=l(),gt=a("div"),f(fA.$$.fragment),PZo=l(),gpe=a("p"),$Zo=o("Instantiates one of the base model classes of the library from a configuration."),IZo=l(),pc=a("p"),qZo=o(`Note:
Loading a model from its configuration file does `),hpe=a("strong"),NZo=o("not"),jZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EO=a("a"),DZo=o("from_pretrained()"),GZo=o(" to load the model weights."),OZo=l(),ppe=a("p"),VZo=o("Examples:"),XZo=l(),f(mA.$$.fragment),zZo=l(),ho=a("div"),f(gA.$$.fragment),QZo=l(),_pe=a("p"),WZo=o("Instantiate one of the base model classes of the library from a pretrained model."),HZo=l(),un=a("p"),UZo=o("The model class to instantiate is selected based on the "),upe=a("code"),JZo=o("model_type"),YZo=o(` property of the config object (either
passed as an argument or loaded from `),bpe=a("code"),KZo=o("pretrained_model_name_or_path"),ZZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=a("code"),eer=o("pretrained_model_name_or_path"),oer=o(":"),rer=l(),x=a("ul"),SF=a("li"),Fpe=a("strong"),ter=o("albert"),aer=o(" \u2014 "),CO=a("a"),ner=o("TFAlbertModel"),ser=o(" (ALBERT model)"),ler=l(),RF=a("li"),Tpe=a("strong"),ier=o("bart"),der=o(" \u2014 "),wO=a("a"),cer=o("TFBartModel"),fer=o(" (BART model)"),mer=l(),BF=a("li"),Mpe=a("strong"),ger=o("bert"),her=o(" \u2014 "),AO=a("a"),per=o("TFBertModel"),_er=o(" (BERT model)"),uer=l(),PF=a("li"),Epe=a("strong"),ber=o("blenderbot"),ver=o(" \u2014 "),yO=a("a"),Fer=o("TFBlenderbotModel"),Ter=o(" (Blenderbot model)"),Mer=l(),$F=a("li"),Cpe=a("strong"),Eer=o("blenderbot-small"),Cer=o(" \u2014 "),LO=a("a"),wer=o("TFBlenderbotSmallModel"),Aer=o(" (BlenderbotSmall model)"),yer=l(),IF=a("li"),wpe=a("strong"),Ler=o("camembert"),xer=o(" \u2014 "),xO=a("a"),ker=o("TFCamembertModel"),Ser=o(" (CamemBERT model)"),Rer=l(),qF=a("li"),Ape=a("strong"),Ber=o("clip"),Per=o(" \u2014 "),kO=a("a"),$er=o("TFCLIPModel"),Ier=o(" (CLIP model)"),qer=l(),NF=a("li"),ype=a("strong"),Ner=o("convbert"),jer=o(" \u2014 "),SO=a("a"),Der=o("TFConvBertModel"),Ger=o(" (ConvBERT model)"),Oer=l(),jF=a("li"),Lpe=a("strong"),Ver=o("convnext"),Xer=o(" \u2014 "),RO=a("a"),zer=o("TFConvNextModel"),Qer=o(" (ConvNext model)"),Wer=l(),DF=a("li"),xpe=a("strong"),Her=o("ctrl"),Uer=o(" \u2014 "),BO=a("a"),Jer=o("TFCTRLModel"),Yer=o(" (CTRL model)"),Ker=l(),GF=a("li"),kpe=a("strong"),Zer=o("deberta"),eor=o(" \u2014 "),PO=a("a"),oor=o("TFDebertaModel"),ror=o(" (DeBERTa model)"),tor=l(),OF=a("li"),Spe=a("strong"),aor=o("deberta-v2"),nor=o(" \u2014 "),$O=a("a"),sor=o("TFDebertaV2Model"),lor=o(" (DeBERTa-v2 model)"),ior=l(),VF=a("li"),Rpe=a("strong"),dor=o("distilbert"),cor=o(" \u2014 "),IO=a("a"),mor=o("TFDistilBertModel"),gor=o(" (DistilBERT model)"),hor=l(),XF=a("li"),Bpe=a("strong"),por=o("dpr"),_or=o(" \u2014 "),qO=a("a"),uor=o("TFDPRQuestionEncoder"),bor=o(" (DPR model)"),vor=l(),zF=a("li"),Ppe=a("strong"),For=o("electra"),Tor=o(" \u2014 "),NO=a("a"),Mor=o("TFElectraModel"),Eor=o(" (ELECTRA model)"),Cor=l(),QF=a("li"),$pe=a("strong"),wor=o("flaubert"),Aor=o(" \u2014 "),jO=a("a"),yor=o("TFFlaubertModel"),Lor=o(" (FlauBERT model)"),xor=l(),Os=a("li"),Ipe=a("strong"),kor=o("funnel"),Sor=o(" \u2014 "),DO=a("a"),Ror=o("TFFunnelModel"),Bor=o(" or "),GO=a("a"),Por=o("TFFunnelBaseModel"),$or=o(" (Funnel Transformer model)"),Ior=l(),WF=a("li"),qpe=a("strong"),qor=o("gpt2"),Nor=o(" \u2014 "),OO=a("a"),jor=o("TFGPT2Model"),Dor=o(" (OpenAI GPT-2 model)"),Gor=l(),HF=a("li"),Npe=a("strong"),Oor=o("gptj"),Vor=o(" \u2014 "),VO=a("a"),Xor=o("TFGPTJModel"),zor=o(" (GPT-J model)"),Qor=l(),UF=a("li"),jpe=a("strong"),Wor=o("hubert"),Hor=o(" \u2014 "),XO=a("a"),Uor=o("TFHubertModel"),Jor=o(" (Hubert model)"),Yor=l(),JF=a("li"),Dpe=a("strong"),Kor=o("layoutlm"),Zor=o(" \u2014 "),zO=a("a"),err=o("TFLayoutLMModel"),orr=o(" (LayoutLM model)"),rrr=l(),YF=a("li"),Gpe=a("strong"),trr=o("led"),arr=o(" \u2014 "),QO=a("a"),nrr=o("TFLEDModel"),srr=o(" (LED model)"),lrr=l(),KF=a("li"),Ope=a("strong"),irr=o("longformer"),drr=o(" \u2014 "),WO=a("a"),crr=o("TFLongformerModel"),frr=o(" (Longformer model)"),mrr=l(),ZF=a("li"),Vpe=a("strong"),grr=o("lxmert"),hrr=o(" \u2014 "),HO=a("a"),prr=o("TFLxmertModel"),_rr=o(" (LXMERT model)"),urr=l(),e0=a("li"),Xpe=a("strong"),brr=o("marian"),vrr=o(" \u2014 "),UO=a("a"),Frr=o("TFMarianModel"),Trr=o(" (Marian model)"),Mrr=l(),o0=a("li"),zpe=a("strong"),Err=o("mbart"),Crr=o(" \u2014 "),JO=a("a"),wrr=o("TFMBartModel"),Arr=o(" (mBART model)"),yrr=l(),r0=a("li"),Qpe=a("strong"),Lrr=o("mobilebert"),xrr=o(" \u2014 "),YO=a("a"),krr=o("TFMobileBertModel"),Srr=o(" (MobileBERT model)"),Rrr=l(),t0=a("li"),Wpe=a("strong"),Brr=o("mpnet"),Prr=o(" \u2014 "),KO=a("a"),$rr=o("TFMPNetModel"),Irr=o(" (MPNet model)"),qrr=l(),a0=a("li"),Hpe=a("strong"),Nrr=o("mt5"),jrr=o(" \u2014 "),ZO=a("a"),Drr=o("TFMT5Model"),Grr=o(" (mT5 model)"),Orr=l(),n0=a("li"),Upe=a("strong"),Vrr=o("openai-gpt"),Xrr=o(" \u2014 "),eV=a("a"),zrr=o("TFOpenAIGPTModel"),Qrr=o(" (OpenAI GPT model)"),Wrr=l(),s0=a("li"),Jpe=a("strong"),Hrr=o("pegasus"),Urr=o(" \u2014 "),oV=a("a"),Jrr=o("TFPegasusModel"),Yrr=o(" (Pegasus model)"),Krr=l(),l0=a("li"),Ype=a("strong"),Zrr=o("rembert"),etr=o(" \u2014 "),rV=a("a"),otr=o("TFRemBertModel"),rtr=o(" (RemBERT model)"),ttr=l(),i0=a("li"),Kpe=a("strong"),atr=o("roberta"),ntr=o(" \u2014 "),tV=a("a"),str=o("TFRobertaModel"),ltr=o(" (RoBERTa model)"),itr=l(),d0=a("li"),Zpe=a("strong"),dtr=o("roformer"),ctr=o(" \u2014 "),aV=a("a"),ftr=o("TFRoFormerModel"),mtr=o(" (RoFormer model)"),gtr=l(),c0=a("li"),e_e=a("strong"),htr=o("speech_to_text"),ptr=o(" \u2014 "),nV=a("a"),_tr=o("TFSpeech2TextModel"),utr=o(" (Speech2Text model)"),btr=l(),f0=a("li"),o_e=a("strong"),vtr=o("t5"),Ftr=o(" \u2014 "),sV=a("a"),Ttr=o("TFT5Model"),Mtr=o(" (T5 model)"),Etr=l(),m0=a("li"),r_e=a("strong"),Ctr=o("tapas"),wtr=o(" \u2014 "),lV=a("a"),Atr=o("TFTapasModel"),ytr=o(" (TAPAS model)"),Ltr=l(),g0=a("li"),t_e=a("strong"),xtr=o("transfo-xl"),ktr=o(" \u2014 "),iV=a("a"),Str=o("TFTransfoXLModel"),Rtr=o(" (Transformer-XL model)"),Btr=l(),h0=a("li"),a_e=a("strong"),Ptr=o("vit"),$tr=o(" \u2014 "),dV=a("a"),Itr=o("TFViTModel"),qtr=o(" (ViT model)"),Ntr=l(),p0=a("li"),n_e=a("strong"),jtr=o("vit_mae"),Dtr=o(" \u2014 "),cV=a("a"),Gtr=o("TFViTMAEModel"),Otr=o(" (ViTMAE model)"),Vtr=l(),_0=a("li"),s_e=a("strong"),Xtr=o("wav2vec2"),ztr=o(" \u2014 "),fV=a("a"),Qtr=o("TFWav2Vec2Model"),Wtr=o(" (Wav2Vec2 model)"),Htr=l(),u0=a("li"),l_e=a("strong"),Utr=o("xlm"),Jtr=o(" \u2014 "),mV=a("a"),Ytr=o("TFXLMModel"),Ktr=o(" (XLM model)"),Ztr=l(),b0=a("li"),i_e=a("strong"),ear=o("xlm-roberta"),oar=o(" \u2014 "),gV=a("a"),rar=o("TFXLMRobertaModel"),tar=o(" (XLM-RoBERTa model)"),aar=l(),v0=a("li"),d_e=a("strong"),nar=o("xlnet"),sar=o(" \u2014 "),hV=a("a"),lar=o("TFXLNetModel"),iar=o(" (XLNet model)"),dar=l(),c_e=a("p"),car=o("Examples:"),far=l(),f(hA.$$.fragment),NBe=l(),_c=a("h2"),F0=a("a"),f_e=a("span"),f(pA.$$.fragment),mar=l(),m_e=a("span"),gar=o("TFAutoModelForPreTraining"),jBe=l(),Fr=a("div"),f(_A.$$.fragment),har=l(),uc=a("p"),par=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pV=a("a"),_ar=o("from_pretrained()"),uar=o(" class method or the "),_V=a("a"),bar=o("from_config()"),Far=o(` class
method.`),Tar=l(),uA=a("p"),Mar=o("This class cannot be instantiated directly using "),g_e=a("code"),Ear=o("__init__()"),Car=o(" (throws an error)."),war=l(),ht=a("div"),f(bA.$$.fragment),Aar=l(),h_e=a("p"),yar=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Lar=l(),bc=a("p"),xar=o(`Note:
Loading a model from its configuration file does `),p_e=a("strong"),kar=o("not"),Sar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=a("a"),Rar=o("from_pretrained()"),Bar=o(" to load the model weights."),Par=l(),__e=a("p"),$ar=o("Examples:"),Iar=l(),f(vA.$$.fragment),qar=l(),po=a("div"),f(FA.$$.fragment),Nar=l(),u_e=a("p"),jar=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Dar=l(),bn=a("p"),Gar=o("The model class to instantiate is selected based on the "),b_e=a("code"),Oar=o("model_type"),Var=o(` property of the config object (either
passed as an argument or loaded from `),v_e=a("code"),Xar=o("pretrained_model_name_or_path"),zar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=a("code"),Qar=o("pretrained_model_name_or_path"),War=o(":"),Har=l(),H=a("ul"),T0=a("li"),T_e=a("strong"),Uar=o("albert"),Jar=o(" \u2014 "),bV=a("a"),Yar=o("TFAlbertForPreTraining"),Kar=o(" (ALBERT model)"),Zar=l(),M0=a("li"),M_e=a("strong"),enr=o("bart"),onr=o(" \u2014 "),vV=a("a"),rnr=o("TFBartForConditionalGeneration"),tnr=o(" (BART model)"),anr=l(),E0=a("li"),E_e=a("strong"),nnr=o("bert"),snr=o(" \u2014 "),FV=a("a"),lnr=o("TFBertForPreTraining"),inr=o(" (BERT model)"),dnr=l(),C0=a("li"),C_e=a("strong"),cnr=o("camembert"),fnr=o(" \u2014 "),TV=a("a"),mnr=o("TFCamembertForMaskedLM"),gnr=o(" (CamemBERT model)"),hnr=l(),w0=a("li"),w_e=a("strong"),pnr=o("ctrl"),_nr=o(" \u2014 "),MV=a("a"),unr=o("TFCTRLLMHeadModel"),bnr=o(" (CTRL model)"),vnr=l(),A0=a("li"),A_e=a("strong"),Fnr=o("distilbert"),Tnr=o(" \u2014 "),EV=a("a"),Mnr=o("TFDistilBertForMaskedLM"),Enr=o(" (DistilBERT model)"),Cnr=l(),y0=a("li"),y_e=a("strong"),wnr=o("electra"),Anr=o(" \u2014 "),CV=a("a"),ynr=o("TFElectraForPreTraining"),Lnr=o(" (ELECTRA model)"),xnr=l(),L0=a("li"),L_e=a("strong"),knr=o("flaubert"),Snr=o(" \u2014 "),wV=a("a"),Rnr=o("TFFlaubertWithLMHeadModel"),Bnr=o(" (FlauBERT model)"),Pnr=l(),x0=a("li"),x_e=a("strong"),$nr=o("funnel"),Inr=o(" \u2014 "),AV=a("a"),qnr=o("TFFunnelForPreTraining"),Nnr=o(" (Funnel Transformer model)"),jnr=l(),k0=a("li"),k_e=a("strong"),Dnr=o("gpt2"),Gnr=o(" \u2014 "),yV=a("a"),Onr=o("TFGPT2LMHeadModel"),Vnr=o(" (OpenAI GPT-2 model)"),Xnr=l(),S0=a("li"),S_e=a("strong"),znr=o("layoutlm"),Qnr=o(" \u2014 "),LV=a("a"),Wnr=o("TFLayoutLMForMaskedLM"),Hnr=o(" (LayoutLM model)"),Unr=l(),R0=a("li"),R_e=a("strong"),Jnr=o("lxmert"),Ynr=o(" \u2014 "),xV=a("a"),Knr=o("TFLxmertForPreTraining"),Znr=o(" (LXMERT model)"),esr=l(),B0=a("li"),B_e=a("strong"),osr=o("mobilebert"),rsr=o(" \u2014 "),kV=a("a"),tsr=o("TFMobileBertForPreTraining"),asr=o(" (MobileBERT model)"),nsr=l(),P0=a("li"),P_e=a("strong"),ssr=o("mpnet"),lsr=o(" \u2014 "),SV=a("a"),isr=o("TFMPNetForMaskedLM"),dsr=o(" (MPNet model)"),csr=l(),$0=a("li"),$_e=a("strong"),fsr=o("openai-gpt"),msr=o(" \u2014 "),RV=a("a"),gsr=o("TFOpenAIGPTLMHeadModel"),hsr=o(" (OpenAI GPT model)"),psr=l(),I0=a("li"),I_e=a("strong"),_sr=o("roberta"),usr=o(" \u2014 "),BV=a("a"),bsr=o("TFRobertaForMaskedLM"),vsr=o(" (RoBERTa model)"),Fsr=l(),q0=a("li"),q_e=a("strong"),Tsr=o("t5"),Msr=o(" \u2014 "),PV=a("a"),Esr=o("TFT5ForConditionalGeneration"),Csr=o(" (T5 model)"),wsr=l(),N0=a("li"),N_e=a("strong"),Asr=o("tapas"),ysr=o(" \u2014 "),$V=a("a"),Lsr=o("TFTapasForMaskedLM"),xsr=o(" (TAPAS model)"),ksr=l(),j0=a("li"),j_e=a("strong"),Ssr=o("transfo-xl"),Rsr=o(" \u2014 "),IV=a("a"),Bsr=o("TFTransfoXLLMHeadModel"),Psr=o(" (Transformer-XL model)"),$sr=l(),D0=a("li"),D_e=a("strong"),Isr=o("vit_mae"),qsr=o(" \u2014 "),qV=a("a"),Nsr=o("TFViTMAEForPreTraining"),jsr=o(" (ViTMAE model)"),Dsr=l(),G0=a("li"),G_e=a("strong"),Gsr=o("xlm"),Osr=o(" \u2014 "),NV=a("a"),Vsr=o("TFXLMWithLMHeadModel"),Xsr=o(" (XLM model)"),zsr=l(),O0=a("li"),O_e=a("strong"),Qsr=o("xlm-roberta"),Wsr=o(" \u2014 "),jV=a("a"),Hsr=o("TFXLMRobertaForMaskedLM"),Usr=o(" (XLM-RoBERTa model)"),Jsr=l(),V0=a("li"),V_e=a("strong"),Ysr=o("xlnet"),Ksr=o(" \u2014 "),DV=a("a"),Zsr=o("TFXLNetLMHeadModel"),elr=o(" (XLNet model)"),olr=l(),X_e=a("p"),rlr=o("Examples:"),tlr=l(),f(TA.$$.fragment),DBe=l(),vc=a("h2"),X0=a("a"),z_e=a("span"),f(MA.$$.fragment),alr=l(),Q_e=a("span"),nlr=o("TFAutoModelForCausalLM"),GBe=l(),Tr=a("div"),f(EA.$$.fragment),slr=l(),Fc=a("p"),llr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GV=a("a"),ilr=o("from_pretrained()"),dlr=o(" class method or the "),OV=a("a"),clr=o("from_config()"),flr=o(` class
method.`),mlr=l(),CA=a("p"),glr=o("This class cannot be instantiated directly using "),W_e=a("code"),hlr=o("__init__()"),plr=o(" (throws an error)."),_lr=l(),pt=a("div"),f(wA.$$.fragment),ulr=l(),H_e=a("p"),blr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vlr=l(),Tc=a("p"),Flr=o(`Note:
Loading a model from its configuration file does `),U_e=a("strong"),Tlr=o("not"),Mlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=a("a"),Elr=o("from_pretrained()"),Clr=o(" to load the model weights."),wlr=l(),J_e=a("p"),Alr=o("Examples:"),ylr=l(),f(AA.$$.fragment),Llr=l(),_o=a("div"),f(yA.$$.fragment),xlr=l(),Y_e=a("p"),klr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Slr=l(),vn=a("p"),Rlr=o("The model class to instantiate is selected based on the "),K_e=a("code"),Blr=o("model_type"),Plr=o(` property of the config object (either
passed as an argument or loaded from `),Z_e=a("code"),$lr=o("pretrained_model_name_or_path"),Ilr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=a("code"),qlr=o("pretrained_model_name_or_path"),Nlr=o(":"),jlr=l(),fe=a("ul"),z0=a("li"),oue=a("strong"),Dlr=o("bert"),Glr=o(" \u2014 "),XV=a("a"),Olr=o("TFBertLMHeadModel"),Vlr=o(" (BERT model)"),Xlr=l(),Q0=a("li"),rue=a("strong"),zlr=o("camembert"),Qlr=o(" \u2014 "),zV=a("a"),Wlr=o("TFCamembertForCausalLM"),Hlr=o(" (CamemBERT model)"),Ulr=l(),W0=a("li"),tue=a("strong"),Jlr=o("ctrl"),Ylr=o(" \u2014 "),QV=a("a"),Klr=o("TFCTRLLMHeadModel"),Zlr=o(" (CTRL model)"),eir=l(),H0=a("li"),aue=a("strong"),oir=o("gpt2"),rir=o(" \u2014 "),WV=a("a"),tir=o("TFGPT2LMHeadModel"),air=o(" (OpenAI GPT-2 model)"),nir=l(),U0=a("li"),nue=a("strong"),sir=o("gptj"),lir=o(" \u2014 "),HV=a("a"),iir=o("TFGPTJForCausalLM"),dir=o(" (GPT-J model)"),cir=l(),J0=a("li"),sue=a("strong"),fir=o("openai-gpt"),mir=o(" \u2014 "),UV=a("a"),gir=o("TFOpenAIGPTLMHeadModel"),hir=o(" (OpenAI GPT model)"),pir=l(),Y0=a("li"),lue=a("strong"),_ir=o("rembert"),uir=o(" \u2014 "),JV=a("a"),bir=o("TFRemBertForCausalLM"),vir=o(" (RemBERT model)"),Fir=l(),K0=a("li"),iue=a("strong"),Tir=o("roberta"),Mir=o(" \u2014 "),YV=a("a"),Eir=o("TFRobertaForCausalLM"),Cir=o(" (RoBERTa model)"),wir=l(),Z0=a("li"),due=a("strong"),Air=o("roformer"),yir=o(" \u2014 "),KV=a("a"),Lir=o("TFRoFormerForCausalLM"),xir=o(" (RoFormer model)"),kir=l(),eT=a("li"),cue=a("strong"),Sir=o("transfo-xl"),Rir=o(" \u2014 "),ZV=a("a"),Bir=o("TFTransfoXLLMHeadModel"),Pir=o(" (Transformer-XL model)"),$ir=l(),oT=a("li"),fue=a("strong"),Iir=o("xlm"),qir=o(" \u2014 "),eX=a("a"),Nir=o("TFXLMWithLMHeadModel"),jir=o(" (XLM model)"),Dir=l(),rT=a("li"),mue=a("strong"),Gir=o("xlnet"),Oir=o(" \u2014 "),oX=a("a"),Vir=o("TFXLNetLMHeadModel"),Xir=o(" (XLNet model)"),zir=l(),gue=a("p"),Qir=o("Examples:"),Wir=l(),f(LA.$$.fragment),OBe=l(),Mc=a("h2"),tT=a("a"),hue=a("span"),f(xA.$$.fragment),Hir=l(),pue=a("span"),Uir=o("TFAutoModelForImageClassification"),VBe=l(),Mr=a("div"),f(kA.$$.fragment),Jir=l(),Ec=a("p"),Yir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rX=a("a"),Kir=o("from_pretrained()"),Zir=o(" class method or the "),tX=a("a"),edr=o("from_config()"),odr=o(` class
method.`),rdr=l(),SA=a("p"),tdr=o("This class cannot be instantiated directly using "),_ue=a("code"),adr=o("__init__()"),ndr=o(" (throws an error)."),sdr=l(),_t=a("div"),f(RA.$$.fragment),ldr=l(),uue=a("p"),idr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ddr=l(),Cc=a("p"),cdr=o(`Note:
Loading a model from its configuration file does `),bue=a("strong"),fdr=o("not"),mdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),gdr=o("from_pretrained()"),hdr=o(" to load the model weights."),pdr=l(),vue=a("p"),_dr=o("Examples:"),udr=l(),f(BA.$$.fragment),bdr=l(),uo=a("div"),f(PA.$$.fragment),vdr=l(),Fue=a("p"),Fdr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Tdr=l(),Fn=a("p"),Mdr=o("The model class to instantiate is selected based on the "),Tue=a("code"),Edr=o("model_type"),Cdr=o(` property of the config object (either
passed as an argument or loaded from `),Mue=a("code"),wdr=o("pretrained_model_name_or_path"),Adr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=a("code"),ydr=o("pretrained_model_name_or_path"),Ldr=o(":"),xdr=l(),$A=a("ul"),aT=a("li"),Cue=a("strong"),kdr=o("convnext"),Sdr=o(" \u2014 "),nX=a("a"),Rdr=o("TFConvNextForImageClassification"),Bdr=o(" (ConvNext model)"),Pdr=l(),nT=a("li"),wue=a("strong"),$dr=o("vit"),Idr=o(" \u2014 "),sX=a("a"),qdr=o("TFViTForImageClassification"),Ndr=o(" (ViT model)"),jdr=l(),Aue=a("p"),Ddr=o("Examples:"),Gdr=l(),f(IA.$$.fragment),XBe=l(),wc=a("h2"),sT=a("a"),yue=a("span"),f(qA.$$.fragment),Odr=l(),Lue=a("span"),Vdr=o("TFAutoModelForMaskedLM"),zBe=l(),Er=a("div"),f(NA.$$.fragment),Xdr=l(),Ac=a("p"),zdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lX=a("a"),Qdr=o("from_pretrained()"),Wdr=o(" class method or the "),iX=a("a"),Hdr=o("from_config()"),Udr=o(` class
method.`),Jdr=l(),jA=a("p"),Ydr=o("This class cannot be instantiated directly using "),xue=a("code"),Kdr=o("__init__()"),Zdr=o(" (throws an error)."),ecr=l(),ut=a("div"),f(DA.$$.fragment),ocr=l(),kue=a("p"),rcr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tcr=l(),yc=a("p"),acr=o(`Note:
Loading a model from its configuration file does `),Sue=a("strong"),ncr=o("not"),scr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=a("a"),lcr=o("from_pretrained()"),icr=o(" to load the model weights."),dcr=l(),Rue=a("p"),ccr=o("Examples:"),fcr=l(),f(GA.$$.fragment),mcr=l(),bo=a("div"),f(OA.$$.fragment),gcr=l(),Bue=a("p"),hcr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pcr=l(),Tn=a("p"),_cr=o("The model class to instantiate is selected based on the "),Pue=a("code"),ucr=o("model_type"),bcr=o(` property of the config object (either
passed as an argument or loaded from `),$ue=a("code"),vcr=o("pretrained_model_name_or_path"),Fcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=a("code"),Tcr=o("pretrained_model_name_or_path"),Mcr=o(":"),Ecr=l(),J=a("ul"),lT=a("li"),que=a("strong"),Ccr=o("albert"),wcr=o(" \u2014 "),cX=a("a"),Acr=o("TFAlbertForMaskedLM"),ycr=o(" (ALBERT model)"),Lcr=l(),iT=a("li"),Nue=a("strong"),xcr=o("bert"),kcr=o(" \u2014 "),fX=a("a"),Scr=o("TFBertForMaskedLM"),Rcr=o(" (BERT model)"),Bcr=l(),dT=a("li"),jue=a("strong"),Pcr=o("camembert"),$cr=o(" \u2014 "),mX=a("a"),Icr=o("TFCamembertForMaskedLM"),qcr=o(" (CamemBERT model)"),Ncr=l(),cT=a("li"),Due=a("strong"),jcr=o("convbert"),Dcr=o(" \u2014 "),gX=a("a"),Gcr=o("TFConvBertForMaskedLM"),Ocr=o(" (ConvBERT model)"),Vcr=l(),fT=a("li"),Gue=a("strong"),Xcr=o("deberta"),zcr=o(" \u2014 "),hX=a("a"),Qcr=o("TFDebertaForMaskedLM"),Wcr=o(" (DeBERTa model)"),Hcr=l(),mT=a("li"),Oue=a("strong"),Ucr=o("deberta-v2"),Jcr=o(" \u2014 "),pX=a("a"),Ycr=o("TFDebertaV2ForMaskedLM"),Kcr=o(" (DeBERTa-v2 model)"),Zcr=l(),gT=a("li"),Vue=a("strong"),efr=o("distilbert"),ofr=o(" \u2014 "),_X=a("a"),rfr=o("TFDistilBertForMaskedLM"),tfr=o(" (DistilBERT model)"),afr=l(),hT=a("li"),Xue=a("strong"),nfr=o("electra"),sfr=o(" \u2014 "),uX=a("a"),lfr=o("TFElectraForMaskedLM"),ifr=o(" (ELECTRA model)"),dfr=l(),pT=a("li"),zue=a("strong"),cfr=o("flaubert"),ffr=o(" \u2014 "),bX=a("a"),mfr=o("TFFlaubertWithLMHeadModel"),gfr=o(" (FlauBERT model)"),hfr=l(),_T=a("li"),Que=a("strong"),pfr=o("funnel"),_fr=o(" \u2014 "),vX=a("a"),ufr=o("TFFunnelForMaskedLM"),bfr=o(" (Funnel Transformer model)"),vfr=l(),uT=a("li"),Wue=a("strong"),Ffr=o("layoutlm"),Tfr=o(" \u2014 "),FX=a("a"),Mfr=o("TFLayoutLMForMaskedLM"),Efr=o(" (LayoutLM model)"),Cfr=l(),bT=a("li"),Hue=a("strong"),wfr=o("longformer"),Afr=o(" \u2014 "),TX=a("a"),yfr=o("TFLongformerForMaskedLM"),Lfr=o(" (Longformer model)"),xfr=l(),vT=a("li"),Uue=a("strong"),kfr=o("mobilebert"),Sfr=o(" \u2014 "),MX=a("a"),Rfr=o("TFMobileBertForMaskedLM"),Bfr=o(" (MobileBERT model)"),Pfr=l(),FT=a("li"),Jue=a("strong"),$fr=o("mpnet"),Ifr=o(" \u2014 "),EX=a("a"),qfr=o("TFMPNetForMaskedLM"),Nfr=o(" (MPNet model)"),jfr=l(),TT=a("li"),Yue=a("strong"),Dfr=o("rembert"),Gfr=o(" \u2014 "),CX=a("a"),Ofr=o("TFRemBertForMaskedLM"),Vfr=o(" (RemBERT model)"),Xfr=l(),MT=a("li"),Kue=a("strong"),zfr=o("roberta"),Qfr=o(" \u2014 "),wX=a("a"),Wfr=o("TFRobertaForMaskedLM"),Hfr=o(" (RoBERTa model)"),Ufr=l(),ET=a("li"),Zue=a("strong"),Jfr=o("roformer"),Yfr=o(" \u2014 "),AX=a("a"),Kfr=o("TFRoFormerForMaskedLM"),Zfr=o(" (RoFormer model)"),emr=l(),CT=a("li"),e6e=a("strong"),omr=o("tapas"),rmr=o(" \u2014 "),yX=a("a"),tmr=o("TFTapasForMaskedLM"),amr=o(" (TAPAS model)"),nmr=l(),wT=a("li"),o6e=a("strong"),smr=o("xlm"),lmr=o(" \u2014 "),LX=a("a"),imr=o("TFXLMWithLMHeadModel"),dmr=o(" (XLM model)"),cmr=l(),AT=a("li"),r6e=a("strong"),fmr=o("xlm-roberta"),mmr=o(" \u2014 "),xX=a("a"),gmr=o("TFXLMRobertaForMaskedLM"),hmr=o(" (XLM-RoBERTa model)"),pmr=l(),t6e=a("p"),_mr=o("Examples:"),umr=l(),f(VA.$$.fragment),QBe=l(),Lc=a("h2"),yT=a("a"),a6e=a("span"),f(XA.$$.fragment),bmr=l(),n6e=a("span"),vmr=o("TFAutoModelForSeq2SeqLM"),WBe=l(),Cr=a("div"),f(zA.$$.fragment),Fmr=l(),xc=a("p"),Tmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kX=a("a"),Mmr=o("from_pretrained()"),Emr=o(" class method or the "),SX=a("a"),Cmr=o("from_config()"),wmr=o(` class
method.`),Amr=l(),QA=a("p"),ymr=o("This class cannot be instantiated directly using "),s6e=a("code"),Lmr=o("__init__()"),xmr=o(" (throws an error)."),kmr=l(),bt=a("div"),f(WA.$$.fragment),Smr=l(),l6e=a("p"),Rmr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bmr=l(),kc=a("p"),Pmr=o(`Note:
Loading a model from its configuration file does `),i6e=a("strong"),$mr=o("not"),Imr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=a("a"),qmr=o("from_pretrained()"),Nmr=o(" to load the model weights."),jmr=l(),d6e=a("p"),Dmr=o("Examples:"),Gmr=l(),f(HA.$$.fragment),Omr=l(),vo=a("div"),f(UA.$$.fragment),Vmr=l(),c6e=a("p"),Xmr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zmr=l(),Mn=a("p"),Qmr=o("The model class to instantiate is selected based on the "),f6e=a("code"),Wmr=o("model_type"),Hmr=o(` property of the config object (either
passed as an argument or loaded from `),m6e=a("code"),Umr=o("pretrained_model_name_or_path"),Jmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g6e=a("code"),Ymr=o("pretrained_model_name_or_path"),Kmr=o(":"),Zmr=l(),be=a("ul"),LT=a("li"),h6e=a("strong"),egr=o("bart"),ogr=o(" \u2014 "),BX=a("a"),rgr=o("TFBartForConditionalGeneration"),tgr=o(" (BART model)"),agr=l(),xT=a("li"),p6e=a("strong"),ngr=o("blenderbot"),sgr=o(" \u2014 "),PX=a("a"),lgr=o("TFBlenderbotForConditionalGeneration"),igr=o(" (Blenderbot model)"),dgr=l(),kT=a("li"),_6e=a("strong"),cgr=o("blenderbot-small"),fgr=o(" \u2014 "),$X=a("a"),mgr=o("TFBlenderbotSmallForConditionalGeneration"),ggr=o(" (BlenderbotSmall model)"),hgr=l(),ST=a("li"),u6e=a("strong"),pgr=o("encoder-decoder"),_gr=o(" \u2014 "),IX=a("a"),ugr=o("TFEncoderDecoderModel"),bgr=o(" (Encoder decoder model)"),vgr=l(),RT=a("li"),b6e=a("strong"),Fgr=o("led"),Tgr=o(" \u2014 "),qX=a("a"),Mgr=o("TFLEDForConditionalGeneration"),Egr=o(" (LED model)"),Cgr=l(),BT=a("li"),v6e=a("strong"),wgr=o("marian"),Agr=o(" \u2014 "),NX=a("a"),ygr=o("TFMarianMTModel"),Lgr=o(" (Marian model)"),xgr=l(),PT=a("li"),F6e=a("strong"),kgr=o("mbart"),Sgr=o(" \u2014 "),jX=a("a"),Rgr=o("TFMBartForConditionalGeneration"),Bgr=o(" (mBART model)"),Pgr=l(),$T=a("li"),T6e=a("strong"),$gr=o("mt5"),Igr=o(" \u2014 "),DX=a("a"),qgr=o("TFMT5ForConditionalGeneration"),Ngr=o(" (mT5 model)"),jgr=l(),IT=a("li"),M6e=a("strong"),Dgr=o("pegasus"),Ggr=o(" \u2014 "),GX=a("a"),Ogr=o("TFPegasusForConditionalGeneration"),Vgr=o(" (Pegasus model)"),Xgr=l(),qT=a("li"),E6e=a("strong"),zgr=o("t5"),Qgr=o(" \u2014 "),OX=a("a"),Wgr=o("TFT5ForConditionalGeneration"),Hgr=o(" (T5 model)"),Ugr=l(),C6e=a("p"),Jgr=o("Examples:"),Ygr=l(),f(JA.$$.fragment),HBe=l(),Sc=a("h2"),NT=a("a"),w6e=a("span"),f(YA.$$.fragment),Kgr=l(),A6e=a("span"),Zgr=o("TFAutoModelForSequenceClassification"),UBe=l(),wr=a("div"),f(KA.$$.fragment),ehr=l(),Rc=a("p"),ohr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VX=a("a"),rhr=o("from_pretrained()"),thr=o(" class method or the "),XX=a("a"),ahr=o("from_config()"),nhr=o(` class
method.`),shr=l(),ZA=a("p"),lhr=o("This class cannot be instantiated directly using "),y6e=a("code"),ihr=o("__init__()"),dhr=o(" (throws an error)."),chr=l(),vt=a("div"),f(ey.$$.fragment),fhr=l(),L6e=a("p"),mhr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ghr=l(),Bc=a("p"),hhr=o(`Note:
Loading a model from its configuration file does `),x6e=a("strong"),phr=o("not"),_hr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=a("a"),uhr=o("from_pretrained()"),bhr=o(" to load the model weights."),vhr=l(),k6e=a("p"),Fhr=o("Examples:"),Thr=l(),f(oy.$$.fragment),Mhr=l(),Fo=a("div"),f(ry.$$.fragment),Ehr=l(),S6e=a("p"),Chr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),whr=l(),En=a("p"),Ahr=o("The model class to instantiate is selected based on the "),R6e=a("code"),yhr=o("model_type"),Lhr=o(` property of the config object (either
passed as an argument or loaded from `),B6e=a("code"),xhr=o("pretrained_model_name_or_path"),khr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=a("code"),Shr=o("pretrained_model_name_or_path"),Rhr=o(":"),Bhr=l(),V=a("ul"),jT=a("li"),$6e=a("strong"),Phr=o("albert"),$hr=o(" \u2014 "),QX=a("a"),Ihr=o("TFAlbertForSequenceClassification"),qhr=o(" (ALBERT model)"),Nhr=l(),DT=a("li"),I6e=a("strong"),jhr=o("bert"),Dhr=o(" \u2014 "),WX=a("a"),Ghr=o("TFBertForSequenceClassification"),Ohr=o(" (BERT model)"),Vhr=l(),GT=a("li"),q6e=a("strong"),Xhr=o("camembert"),zhr=o(" \u2014 "),HX=a("a"),Qhr=o("TFCamembertForSequenceClassification"),Whr=o(" (CamemBERT model)"),Hhr=l(),OT=a("li"),N6e=a("strong"),Uhr=o("convbert"),Jhr=o(" \u2014 "),UX=a("a"),Yhr=o("TFConvBertForSequenceClassification"),Khr=o(" (ConvBERT model)"),Zhr=l(),VT=a("li"),j6e=a("strong"),epr=o("ctrl"),opr=o(" \u2014 "),JX=a("a"),rpr=o("TFCTRLForSequenceClassification"),tpr=o(" (CTRL model)"),apr=l(),XT=a("li"),D6e=a("strong"),npr=o("deberta"),spr=o(" \u2014 "),YX=a("a"),lpr=o("TFDebertaForSequenceClassification"),ipr=o(" (DeBERTa model)"),dpr=l(),zT=a("li"),G6e=a("strong"),cpr=o("deberta-v2"),fpr=o(" \u2014 "),KX=a("a"),mpr=o("TFDebertaV2ForSequenceClassification"),gpr=o(" (DeBERTa-v2 model)"),hpr=l(),QT=a("li"),O6e=a("strong"),ppr=o("distilbert"),_pr=o(" \u2014 "),ZX=a("a"),upr=o("TFDistilBertForSequenceClassification"),bpr=o(" (DistilBERT model)"),vpr=l(),WT=a("li"),V6e=a("strong"),Fpr=o("electra"),Tpr=o(" \u2014 "),ez=a("a"),Mpr=o("TFElectraForSequenceClassification"),Epr=o(" (ELECTRA model)"),Cpr=l(),HT=a("li"),X6e=a("strong"),wpr=o("flaubert"),Apr=o(" \u2014 "),oz=a("a"),ypr=o("TFFlaubertForSequenceClassification"),Lpr=o(" (FlauBERT model)"),xpr=l(),UT=a("li"),z6e=a("strong"),kpr=o("funnel"),Spr=o(" \u2014 "),rz=a("a"),Rpr=o("TFFunnelForSequenceClassification"),Bpr=o(" (Funnel Transformer model)"),Ppr=l(),JT=a("li"),Q6e=a("strong"),$pr=o("gpt2"),Ipr=o(" \u2014 "),tz=a("a"),qpr=o("TFGPT2ForSequenceClassification"),Npr=o(" (OpenAI GPT-2 model)"),jpr=l(),YT=a("li"),W6e=a("strong"),Dpr=o("gptj"),Gpr=o(" \u2014 "),az=a("a"),Opr=o("TFGPTJForSequenceClassification"),Vpr=o(" (GPT-J model)"),Xpr=l(),KT=a("li"),H6e=a("strong"),zpr=o("layoutlm"),Qpr=o(" \u2014 "),nz=a("a"),Wpr=o("TFLayoutLMForSequenceClassification"),Hpr=o(" (LayoutLM model)"),Upr=l(),ZT=a("li"),U6e=a("strong"),Jpr=o("longformer"),Ypr=o(" \u2014 "),sz=a("a"),Kpr=o("TFLongformerForSequenceClassification"),Zpr=o(" (Longformer model)"),e_r=l(),e7=a("li"),J6e=a("strong"),o_r=o("mobilebert"),r_r=o(" \u2014 "),lz=a("a"),t_r=o("TFMobileBertForSequenceClassification"),a_r=o(" (MobileBERT model)"),n_r=l(),o7=a("li"),Y6e=a("strong"),s_r=o("mpnet"),l_r=o(" \u2014 "),iz=a("a"),i_r=o("TFMPNetForSequenceClassification"),d_r=o(" (MPNet model)"),c_r=l(),r7=a("li"),K6e=a("strong"),f_r=o("openai-gpt"),m_r=o(" \u2014 "),dz=a("a"),g_r=o("TFOpenAIGPTForSequenceClassification"),h_r=o(" (OpenAI GPT model)"),p_r=l(),t7=a("li"),Z6e=a("strong"),__r=o("rembert"),u_r=o(" \u2014 "),cz=a("a"),b_r=o("TFRemBertForSequenceClassification"),v_r=o(" (RemBERT model)"),F_r=l(),a7=a("li"),e1e=a("strong"),T_r=o("roberta"),M_r=o(" \u2014 "),fz=a("a"),E_r=o("TFRobertaForSequenceClassification"),C_r=o(" (RoBERTa model)"),w_r=l(),n7=a("li"),o1e=a("strong"),A_r=o("roformer"),y_r=o(" \u2014 "),mz=a("a"),L_r=o("TFRoFormerForSequenceClassification"),x_r=o(" (RoFormer model)"),k_r=l(),s7=a("li"),r1e=a("strong"),S_r=o("tapas"),R_r=o(" \u2014 "),gz=a("a"),B_r=o("TFTapasForSequenceClassification"),P_r=o(" (TAPAS model)"),$_r=l(),l7=a("li"),t1e=a("strong"),I_r=o("transfo-xl"),q_r=o(" \u2014 "),hz=a("a"),N_r=o("TFTransfoXLForSequenceClassification"),j_r=o(" (Transformer-XL model)"),D_r=l(),i7=a("li"),a1e=a("strong"),G_r=o("xlm"),O_r=o(" \u2014 "),pz=a("a"),V_r=o("TFXLMForSequenceClassification"),X_r=o(" (XLM model)"),z_r=l(),d7=a("li"),n1e=a("strong"),Q_r=o("xlm-roberta"),W_r=o(" \u2014 "),_z=a("a"),H_r=o("TFXLMRobertaForSequenceClassification"),U_r=o(" (XLM-RoBERTa model)"),J_r=l(),c7=a("li"),s1e=a("strong"),Y_r=o("xlnet"),K_r=o(" \u2014 "),uz=a("a"),Z_r=o("TFXLNetForSequenceClassification"),eur=o(" (XLNet model)"),our=l(),l1e=a("p"),rur=o("Examples:"),tur=l(),f(ty.$$.fragment),JBe=l(),Pc=a("h2"),f7=a("a"),i1e=a("span"),f(ay.$$.fragment),aur=l(),d1e=a("span"),nur=o("TFAutoModelForMultipleChoice"),YBe=l(),Ar=a("div"),f(ny.$$.fragment),sur=l(),$c=a("p"),lur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bz=a("a"),iur=o("from_pretrained()"),dur=o(" class method or the "),vz=a("a"),cur=o("from_config()"),fur=o(` class
method.`),mur=l(),sy=a("p"),gur=o("This class cannot be instantiated directly using "),c1e=a("code"),hur=o("__init__()"),pur=o(" (throws an error)."),_ur=l(),Ft=a("div"),f(ly.$$.fragment),uur=l(),f1e=a("p"),bur=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vur=l(),Ic=a("p"),Fur=o(`Note:
Loading a model from its configuration file does `),m1e=a("strong"),Tur=o("not"),Mur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=a("a"),Eur=o("from_pretrained()"),Cur=o(" to load the model weights."),wur=l(),g1e=a("p"),Aur=o("Examples:"),yur=l(),f(iy.$$.fragment),Lur=l(),To=a("div"),f(dy.$$.fragment),xur=l(),h1e=a("p"),kur=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Sur=l(),Cn=a("p"),Rur=o("The model class to instantiate is selected based on the "),p1e=a("code"),Bur=o("model_type"),Pur=o(` property of the config object (either
passed as an argument or loaded from `),_1e=a("code"),$ur=o("pretrained_model_name_or_path"),Iur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=a("code"),qur=o("pretrained_model_name_or_path"),Nur=o(":"),jur=l(),se=a("ul"),m7=a("li"),b1e=a("strong"),Dur=o("albert"),Gur=o(" \u2014 "),Tz=a("a"),Our=o("TFAlbertForMultipleChoice"),Vur=o(" (ALBERT model)"),Xur=l(),g7=a("li"),v1e=a("strong"),zur=o("bert"),Qur=o(" \u2014 "),Mz=a("a"),Wur=o("TFBertForMultipleChoice"),Hur=o(" (BERT model)"),Uur=l(),h7=a("li"),F1e=a("strong"),Jur=o("camembert"),Yur=o(" \u2014 "),Ez=a("a"),Kur=o("TFCamembertForMultipleChoice"),Zur=o(" (CamemBERT model)"),e6r=l(),p7=a("li"),T1e=a("strong"),o6r=o("convbert"),r6r=o(" \u2014 "),Cz=a("a"),t6r=o("TFConvBertForMultipleChoice"),a6r=o(" (ConvBERT model)"),n6r=l(),_7=a("li"),M1e=a("strong"),s6r=o("distilbert"),l6r=o(" \u2014 "),wz=a("a"),i6r=o("TFDistilBertForMultipleChoice"),d6r=o(" (DistilBERT model)"),c6r=l(),u7=a("li"),E1e=a("strong"),f6r=o("electra"),m6r=o(" \u2014 "),Az=a("a"),g6r=o("TFElectraForMultipleChoice"),h6r=o(" (ELECTRA model)"),p6r=l(),b7=a("li"),C1e=a("strong"),_6r=o("flaubert"),u6r=o(" \u2014 "),yz=a("a"),b6r=o("TFFlaubertForMultipleChoice"),v6r=o(" (FlauBERT model)"),F6r=l(),v7=a("li"),w1e=a("strong"),T6r=o("funnel"),M6r=o(" \u2014 "),Lz=a("a"),E6r=o("TFFunnelForMultipleChoice"),C6r=o(" (Funnel Transformer model)"),w6r=l(),F7=a("li"),A1e=a("strong"),A6r=o("longformer"),y6r=o(" \u2014 "),xz=a("a"),L6r=o("TFLongformerForMultipleChoice"),x6r=o(" (Longformer model)"),k6r=l(),T7=a("li"),y1e=a("strong"),S6r=o("mobilebert"),R6r=o(" \u2014 "),kz=a("a"),B6r=o("TFMobileBertForMultipleChoice"),P6r=o(" (MobileBERT model)"),$6r=l(),M7=a("li"),L1e=a("strong"),I6r=o("mpnet"),q6r=o(" \u2014 "),Sz=a("a"),N6r=o("TFMPNetForMultipleChoice"),j6r=o(" (MPNet model)"),D6r=l(),E7=a("li"),x1e=a("strong"),G6r=o("rembert"),O6r=o(" \u2014 "),Rz=a("a"),V6r=o("TFRemBertForMultipleChoice"),X6r=o(" (RemBERT model)"),z6r=l(),C7=a("li"),k1e=a("strong"),Q6r=o("roberta"),W6r=o(" \u2014 "),Bz=a("a"),H6r=o("TFRobertaForMultipleChoice"),U6r=o(" (RoBERTa model)"),J6r=l(),w7=a("li"),S1e=a("strong"),Y6r=o("roformer"),K6r=o(" \u2014 "),Pz=a("a"),Z6r=o("TFRoFormerForMultipleChoice"),e1r=o(" (RoFormer model)"),o1r=l(),A7=a("li"),R1e=a("strong"),r1r=o("xlm"),t1r=o(" \u2014 "),$z=a("a"),a1r=o("TFXLMForMultipleChoice"),n1r=o(" (XLM model)"),s1r=l(),y7=a("li"),B1e=a("strong"),l1r=o("xlm-roberta"),i1r=o(" \u2014 "),Iz=a("a"),d1r=o("TFXLMRobertaForMultipleChoice"),c1r=o(" (XLM-RoBERTa model)"),f1r=l(),L7=a("li"),P1e=a("strong"),m1r=o("xlnet"),g1r=o(" \u2014 "),qz=a("a"),h1r=o("TFXLNetForMultipleChoice"),p1r=o(" (XLNet model)"),_1r=l(),$1e=a("p"),u1r=o("Examples:"),b1r=l(),f(cy.$$.fragment),KBe=l(),qc=a("h2"),x7=a("a"),I1e=a("span"),f(fy.$$.fragment),v1r=l(),q1e=a("span"),F1r=o("TFAutoModelForTableQuestionAnswering"),ZBe=l(),yr=a("div"),f(my.$$.fragment),T1r=l(),Nc=a("p"),M1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Nz=a("a"),E1r=o("from_pretrained()"),C1r=o(" class method or the "),jz=a("a"),w1r=o("from_config()"),A1r=o(` class
method.`),y1r=l(),gy=a("p"),L1r=o("This class cannot be instantiated directly using "),N1e=a("code"),x1r=o("__init__()"),k1r=o(" (throws an error)."),S1r=l(),Tt=a("div"),f(hy.$$.fragment),R1r=l(),j1e=a("p"),B1r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),P1r=l(),jc=a("p"),$1r=o(`Note:
Loading a model from its configuration file does `),D1e=a("strong"),I1r=o("not"),q1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),N1r=o("from_pretrained()"),j1r=o(" to load the model weights."),D1r=l(),G1e=a("p"),G1r=o("Examples:"),O1r=l(),f(py.$$.fragment),V1r=l(),Mo=a("div"),f(_y.$$.fragment),X1r=l(),O1e=a("p"),z1r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Q1r=l(),wn=a("p"),W1r=o("The model class to instantiate is selected based on the "),V1e=a("code"),H1r=o("model_type"),U1r=o(` property of the config object (either
passed as an argument or loaded from `),X1e=a("code"),J1r=o("pretrained_model_name_or_path"),Y1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=a("code"),K1r=o("pretrained_model_name_or_path"),Z1r=o(":"),ebr=l(),Q1e=a("ul"),k7=a("li"),W1e=a("strong"),obr=o("tapas"),rbr=o(" \u2014 "),Gz=a("a"),tbr=o("TFTapasForQuestionAnswering"),abr=o(" (TAPAS model)"),nbr=l(),H1e=a("p"),sbr=o("Examples:"),lbr=l(),f(uy.$$.fragment),ePe=l(),Dc=a("h2"),S7=a("a"),U1e=a("span"),f(by.$$.fragment),ibr=l(),J1e=a("span"),dbr=o("TFAutoModelForTokenClassification"),oPe=l(),Lr=a("div"),f(vy.$$.fragment),cbr=l(),Gc=a("p"),fbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Oz=a("a"),mbr=o("from_pretrained()"),gbr=o(" class method or the "),Vz=a("a"),hbr=o("from_config()"),pbr=o(` class
method.`),_br=l(),Fy=a("p"),ubr=o("This class cannot be instantiated directly using "),Y1e=a("code"),bbr=o("__init__()"),vbr=o(" (throws an error)."),Fbr=l(),Mt=a("div"),f(Ty.$$.fragment),Tbr=l(),K1e=a("p"),Mbr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ebr=l(),Oc=a("p"),Cbr=o(`Note:
Loading a model from its configuration file does `),Z1e=a("strong"),wbr=o("not"),Abr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=a("a"),ybr=o("from_pretrained()"),Lbr=o(" to load the model weights."),xbr=l(),ebe=a("p"),kbr=o("Examples:"),Sbr=l(),f(My.$$.fragment),Rbr=l(),Eo=a("div"),f(Ey.$$.fragment),Bbr=l(),obe=a("p"),Pbr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$br=l(),An=a("p"),Ibr=o("The model class to instantiate is selected based on the "),rbe=a("code"),qbr=o("model_type"),Nbr=o(` property of the config object (either
passed as an argument or loaded from `),tbe=a("code"),jbr=o("pretrained_model_name_or_path"),Dbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=a("code"),Gbr=o("pretrained_model_name_or_path"),Obr=o(":"),Vbr=l(),Y=a("ul"),R7=a("li"),nbe=a("strong"),Xbr=o("albert"),zbr=o(" \u2014 "),zz=a("a"),Qbr=o("TFAlbertForTokenClassification"),Wbr=o(" (ALBERT model)"),Hbr=l(),B7=a("li"),sbe=a("strong"),Ubr=o("bert"),Jbr=o(" \u2014 "),Qz=a("a"),Ybr=o("TFBertForTokenClassification"),Kbr=o(" (BERT model)"),Zbr=l(),P7=a("li"),lbe=a("strong"),e2r=o("camembert"),o2r=o(" \u2014 "),Wz=a("a"),r2r=o("TFCamembertForTokenClassification"),t2r=o(" (CamemBERT model)"),a2r=l(),$7=a("li"),ibe=a("strong"),n2r=o("convbert"),s2r=o(" \u2014 "),Hz=a("a"),l2r=o("TFConvBertForTokenClassification"),i2r=o(" (ConvBERT model)"),d2r=l(),I7=a("li"),dbe=a("strong"),c2r=o("deberta"),f2r=o(" \u2014 "),Uz=a("a"),m2r=o("TFDebertaForTokenClassification"),g2r=o(" (DeBERTa model)"),h2r=l(),q7=a("li"),cbe=a("strong"),p2r=o("deberta-v2"),_2r=o(" \u2014 "),Jz=a("a"),u2r=o("TFDebertaV2ForTokenClassification"),b2r=o(" (DeBERTa-v2 model)"),v2r=l(),N7=a("li"),fbe=a("strong"),F2r=o("distilbert"),T2r=o(" \u2014 "),Yz=a("a"),M2r=o("TFDistilBertForTokenClassification"),E2r=o(" (DistilBERT model)"),C2r=l(),j7=a("li"),mbe=a("strong"),w2r=o("electra"),A2r=o(" \u2014 "),Kz=a("a"),y2r=o("TFElectraForTokenClassification"),L2r=o(" (ELECTRA model)"),x2r=l(),D7=a("li"),gbe=a("strong"),k2r=o("flaubert"),S2r=o(" \u2014 "),Zz=a("a"),R2r=o("TFFlaubertForTokenClassification"),B2r=o(" (FlauBERT model)"),P2r=l(),G7=a("li"),hbe=a("strong"),$2r=o("funnel"),I2r=o(" \u2014 "),eQ=a("a"),q2r=o("TFFunnelForTokenClassification"),N2r=o(" (Funnel Transformer model)"),j2r=l(),O7=a("li"),pbe=a("strong"),D2r=o("layoutlm"),G2r=o(" \u2014 "),oQ=a("a"),O2r=o("TFLayoutLMForTokenClassification"),V2r=o(" (LayoutLM model)"),X2r=l(),V7=a("li"),_be=a("strong"),z2r=o("longformer"),Q2r=o(" \u2014 "),rQ=a("a"),W2r=o("TFLongformerForTokenClassification"),H2r=o(" (Longformer model)"),U2r=l(),X7=a("li"),ube=a("strong"),J2r=o("mobilebert"),Y2r=o(" \u2014 "),tQ=a("a"),K2r=o("TFMobileBertForTokenClassification"),Z2r=o(" (MobileBERT model)"),evr=l(),z7=a("li"),bbe=a("strong"),ovr=o("mpnet"),rvr=o(" \u2014 "),aQ=a("a"),tvr=o("TFMPNetForTokenClassification"),avr=o(" (MPNet model)"),nvr=l(),Q7=a("li"),vbe=a("strong"),svr=o("rembert"),lvr=o(" \u2014 "),nQ=a("a"),ivr=o("TFRemBertForTokenClassification"),dvr=o(" (RemBERT model)"),cvr=l(),W7=a("li"),Fbe=a("strong"),fvr=o("roberta"),mvr=o(" \u2014 "),sQ=a("a"),gvr=o("TFRobertaForTokenClassification"),hvr=o(" (RoBERTa model)"),pvr=l(),H7=a("li"),Tbe=a("strong"),_vr=o("roformer"),uvr=o(" \u2014 "),lQ=a("a"),bvr=o("TFRoFormerForTokenClassification"),vvr=o(" (RoFormer model)"),Fvr=l(),U7=a("li"),Mbe=a("strong"),Tvr=o("xlm"),Mvr=o(" \u2014 "),iQ=a("a"),Evr=o("TFXLMForTokenClassification"),Cvr=o(" (XLM model)"),wvr=l(),J7=a("li"),Ebe=a("strong"),Avr=o("xlm-roberta"),yvr=o(" \u2014 "),dQ=a("a"),Lvr=o("TFXLMRobertaForTokenClassification"),xvr=o(" (XLM-RoBERTa model)"),kvr=l(),Y7=a("li"),Cbe=a("strong"),Svr=o("xlnet"),Rvr=o(" \u2014 "),cQ=a("a"),Bvr=o("TFXLNetForTokenClassification"),Pvr=o(" (XLNet model)"),$vr=l(),wbe=a("p"),Ivr=o("Examples:"),qvr=l(),f(Cy.$$.fragment),rPe=l(),Vc=a("h2"),K7=a("a"),Abe=a("span"),f(wy.$$.fragment),Nvr=l(),ybe=a("span"),jvr=o("TFAutoModelForQuestionAnswering"),tPe=l(),xr=a("div"),f(Ay.$$.fragment),Dvr=l(),Xc=a("p"),Gvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fQ=a("a"),Ovr=o("from_pretrained()"),Vvr=o(" class method or the "),mQ=a("a"),Xvr=o("from_config()"),zvr=o(` class
method.`),Qvr=l(),yy=a("p"),Wvr=o("This class cannot be instantiated directly using "),Lbe=a("code"),Hvr=o("__init__()"),Uvr=o(" (throws an error)."),Jvr=l(),Et=a("div"),f(Ly.$$.fragment),Yvr=l(),xbe=a("p"),Kvr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Zvr=l(),zc=a("p"),eFr=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),oFr=o("not"),rFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=a("a"),tFr=o("from_pretrained()"),aFr=o(" to load the model weights."),nFr=l(),Sbe=a("p"),sFr=o("Examples:"),lFr=l(),f(xy.$$.fragment),iFr=l(),Co=a("div"),f(ky.$$.fragment),dFr=l(),Rbe=a("p"),cFr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fFr=l(),yn=a("p"),mFr=o("The model class to instantiate is selected based on the "),Bbe=a("code"),gFr=o("model_type"),hFr=o(` property of the config object (either
passed as an argument or loaded from `),Pbe=a("code"),pFr=o("pretrained_model_name_or_path"),_Fr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=a("code"),uFr=o("pretrained_model_name_or_path"),bFr=o(":"),vFr=l(),K=a("ul"),Z7=a("li"),Ibe=a("strong"),FFr=o("albert"),TFr=o(" \u2014 "),hQ=a("a"),MFr=o("TFAlbertForQuestionAnswering"),EFr=o(" (ALBERT model)"),CFr=l(),eM=a("li"),qbe=a("strong"),wFr=o("bert"),AFr=o(" \u2014 "),pQ=a("a"),yFr=o("TFBertForQuestionAnswering"),LFr=o(" (BERT model)"),xFr=l(),oM=a("li"),Nbe=a("strong"),kFr=o("camembert"),SFr=o(" \u2014 "),_Q=a("a"),RFr=o("TFCamembertForQuestionAnswering"),BFr=o(" (CamemBERT model)"),PFr=l(),rM=a("li"),jbe=a("strong"),$Fr=o("convbert"),IFr=o(" \u2014 "),uQ=a("a"),qFr=o("TFConvBertForQuestionAnswering"),NFr=o(" (ConvBERT model)"),jFr=l(),tM=a("li"),Dbe=a("strong"),DFr=o("deberta"),GFr=o(" \u2014 "),bQ=a("a"),OFr=o("TFDebertaForQuestionAnswering"),VFr=o(" (DeBERTa model)"),XFr=l(),aM=a("li"),Gbe=a("strong"),zFr=o("deberta-v2"),QFr=o(" \u2014 "),vQ=a("a"),WFr=o("TFDebertaV2ForQuestionAnswering"),HFr=o(" (DeBERTa-v2 model)"),UFr=l(),nM=a("li"),Obe=a("strong"),JFr=o("distilbert"),YFr=o(" \u2014 "),FQ=a("a"),KFr=o("TFDistilBertForQuestionAnswering"),ZFr=o(" (DistilBERT model)"),e0r=l(),sM=a("li"),Vbe=a("strong"),o0r=o("electra"),r0r=o(" \u2014 "),TQ=a("a"),t0r=o("TFElectraForQuestionAnswering"),a0r=o(" (ELECTRA model)"),n0r=l(),lM=a("li"),Xbe=a("strong"),s0r=o("flaubert"),l0r=o(" \u2014 "),MQ=a("a"),i0r=o("TFFlaubertForQuestionAnsweringSimple"),d0r=o(" (FlauBERT model)"),c0r=l(),iM=a("li"),zbe=a("strong"),f0r=o("funnel"),m0r=o(" \u2014 "),EQ=a("a"),g0r=o("TFFunnelForQuestionAnswering"),h0r=o(" (Funnel Transformer model)"),p0r=l(),dM=a("li"),Qbe=a("strong"),_0r=o("gptj"),u0r=o(" \u2014 "),CQ=a("a"),b0r=o("TFGPTJForQuestionAnswering"),v0r=o(" (GPT-J model)"),F0r=l(),cM=a("li"),Wbe=a("strong"),T0r=o("longformer"),M0r=o(" \u2014 "),wQ=a("a"),E0r=o("TFLongformerForQuestionAnswering"),C0r=o(" (Longformer model)"),w0r=l(),fM=a("li"),Hbe=a("strong"),A0r=o("mobilebert"),y0r=o(" \u2014 "),AQ=a("a"),L0r=o("TFMobileBertForQuestionAnswering"),x0r=o(" (MobileBERT model)"),k0r=l(),mM=a("li"),Ube=a("strong"),S0r=o("mpnet"),R0r=o(" \u2014 "),yQ=a("a"),B0r=o("TFMPNetForQuestionAnswering"),P0r=o(" (MPNet model)"),$0r=l(),gM=a("li"),Jbe=a("strong"),I0r=o("rembert"),q0r=o(" \u2014 "),LQ=a("a"),N0r=o("TFRemBertForQuestionAnswering"),j0r=o(" (RemBERT model)"),D0r=l(),hM=a("li"),Ybe=a("strong"),G0r=o("roberta"),O0r=o(" \u2014 "),xQ=a("a"),V0r=o("TFRobertaForQuestionAnswering"),X0r=o(" (RoBERTa model)"),z0r=l(),pM=a("li"),Kbe=a("strong"),Q0r=o("roformer"),W0r=o(" \u2014 "),kQ=a("a"),H0r=o("TFRoFormerForQuestionAnswering"),U0r=o(" (RoFormer model)"),J0r=l(),_M=a("li"),Zbe=a("strong"),Y0r=o("xlm"),K0r=o(" \u2014 "),SQ=a("a"),Z0r=o("TFXLMForQuestionAnsweringSimple"),eTr=o(" (XLM model)"),oTr=l(),uM=a("li"),e2e=a("strong"),rTr=o("xlm-roberta"),tTr=o(" \u2014 "),RQ=a("a"),aTr=o("TFXLMRobertaForQuestionAnswering"),nTr=o(" (XLM-RoBERTa model)"),sTr=l(),bM=a("li"),o2e=a("strong"),lTr=o("xlnet"),iTr=o(" \u2014 "),BQ=a("a"),dTr=o("TFXLNetForQuestionAnsweringSimple"),cTr=o(" (XLNet model)"),fTr=l(),r2e=a("p"),mTr=o("Examples:"),gTr=l(),f(Sy.$$.fragment),aPe=l(),Qc=a("h2"),vM=a("a"),t2e=a("span"),f(Ry.$$.fragment),hTr=l(),a2e=a("span"),pTr=o("TFAutoModelForVision2Seq"),nPe=l(),kr=a("div"),f(By.$$.fragment),_Tr=l(),Wc=a("p"),uTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PQ=a("a"),bTr=o("from_pretrained()"),vTr=o(" class method or the "),$Q=a("a"),FTr=o("from_config()"),TTr=o(` class
method.`),MTr=l(),Py=a("p"),ETr=o("This class cannot be instantiated directly using "),n2e=a("code"),CTr=o("__init__()"),wTr=o(" (throws an error)."),ATr=l(),Ct=a("div"),f($y.$$.fragment),yTr=l(),s2e=a("p"),LTr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xTr=l(),Hc=a("p"),kTr=o(`Note:
Loading a model from its configuration file does `),l2e=a("strong"),STr=o("not"),RTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),BTr=o("from_pretrained()"),PTr=o(" to load the model weights."),$Tr=l(),i2e=a("p"),ITr=o("Examples:"),qTr=l(),f(Iy.$$.fragment),NTr=l(),wo=a("div"),f(qy.$$.fragment),jTr=l(),d2e=a("p"),DTr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),GTr=l(),Ln=a("p"),OTr=o("The model class to instantiate is selected based on the "),c2e=a("code"),VTr=o("model_type"),XTr=o(` property of the config object (either
passed as an argument or loaded from `),f2e=a("code"),zTr=o("pretrained_model_name_or_path"),QTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=a("code"),WTr=o("pretrained_model_name_or_path"),HTr=o(":"),UTr=l(),g2e=a("ul"),FM=a("li"),h2e=a("strong"),JTr=o("vision-encoder-decoder"),YTr=o(" \u2014 "),qQ=a("a"),KTr=o("TFVisionEncoderDecoderModel"),ZTr=o(" (Vision Encoder decoder model)"),e7r=l(),p2e=a("p"),o7r=o("Examples:"),r7r=l(),f(Ny.$$.fragment),sPe=l(),Uc=a("h2"),TM=a("a"),_2e=a("span"),f(jy.$$.fragment),t7r=l(),u2e=a("span"),a7r=o("TFAutoModelForSpeechSeq2Seq"),lPe=l(),Sr=a("div"),f(Dy.$$.fragment),n7r=l(),Jc=a("p"),s7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NQ=a("a"),l7r=o("from_pretrained()"),i7r=o(" class method or the "),jQ=a("a"),d7r=o("from_config()"),c7r=o(` class
method.`),f7r=l(),Gy=a("p"),m7r=o("This class cannot be instantiated directly using "),b2e=a("code"),g7r=o("__init__()"),h7r=o(" (throws an error)."),p7r=l(),wt=a("div"),f(Oy.$$.fragment),_7r=l(),v2e=a("p"),u7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),b7r=l(),Yc=a("p"),v7r=o(`Note:
Loading a model from its configuration file does `),F2e=a("strong"),F7r=o("not"),T7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),M7r=o("from_pretrained()"),E7r=o(" to load the model weights."),C7r=l(),T2e=a("p"),w7r=o("Examples:"),A7r=l(),f(Vy.$$.fragment),y7r=l(),Ao=a("div"),f(Xy.$$.fragment),L7r=l(),M2e=a("p"),x7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),k7r=l(),xn=a("p"),S7r=o("The model class to instantiate is selected based on the "),E2e=a("code"),R7r=o("model_type"),B7r=o(` property of the config object (either
passed as an argument or loaded from `),C2e=a("code"),P7r=o("pretrained_model_name_or_path"),$7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=a("code"),I7r=o("pretrained_model_name_or_path"),q7r=o(":"),N7r=l(),A2e=a("ul"),MM=a("li"),y2e=a("strong"),j7r=o("speech_to_text"),D7r=o(" \u2014 "),GQ=a("a"),G7r=o("TFSpeech2TextForConditionalGeneration"),O7r=o(" (Speech2Text model)"),V7r=l(),L2e=a("p"),X7r=o("Examples:"),z7r=l(),f(zy.$$.fragment),iPe=l(),Kc=a("h2"),EM=a("a"),x2e=a("span"),f(Qy.$$.fragment),Q7r=l(),k2e=a("span"),W7r=o("FlaxAutoModel"),dPe=l(),Rr=a("div"),f(Wy.$$.fragment),H7r=l(),Zc=a("p"),U7r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OQ=a("a"),J7r=o("from_pretrained()"),Y7r=o(" class method or the "),VQ=a("a"),K7r=o("from_config()"),Z7r=o(` class
method.`),eMr=l(),Hy=a("p"),oMr=o("This class cannot be instantiated directly using "),S2e=a("code"),rMr=o("__init__()"),tMr=o(" (throws an error)."),aMr=l(),At=a("div"),f(Uy.$$.fragment),nMr=l(),R2e=a("p"),sMr=o("Instantiates one of the base model classes of the library from a configuration."),lMr=l(),ef=a("p"),iMr=o(`Note:
Loading a model from its configuration file does `),B2e=a("strong"),dMr=o("not"),cMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),fMr=o("from_pretrained()"),mMr=o(" to load the model weights."),gMr=l(),P2e=a("p"),hMr=o("Examples:"),pMr=l(),f(Jy.$$.fragment),_Mr=l(),yo=a("div"),f(Yy.$$.fragment),uMr=l(),$2e=a("p"),bMr=o("Instantiate one of the base model classes of the library from a pretrained model."),vMr=l(),kn=a("p"),FMr=o("The model class to instantiate is selected based on the "),I2e=a("code"),TMr=o("model_type"),MMr=o(` property of the config object (either
passed as an argument or loaded from `),q2e=a("code"),EMr=o("pretrained_model_name_or_path"),CMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=a("code"),wMr=o("pretrained_model_name_or_path"),AMr=o(":"),yMr=l(),z=a("ul"),CM=a("li"),j2e=a("strong"),LMr=o("albert"),xMr=o(" \u2014 "),zQ=a("a"),kMr=o("FlaxAlbertModel"),SMr=o(" (ALBERT model)"),RMr=l(),wM=a("li"),D2e=a("strong"),BMr=o("bart"),PMr=o(" \u2014 "),QQ=a("a"),$Mr=o("FlaxBartModel"),IMr=o(" (BART model)"),qMr=l(),AM=a("li"),G2e=a("strong"),NMr=o("beit"),jMr=o(" \u2014 "),WQ=a("a"),DMr=o("FlaxBeitModel"),GMr=o(" (BEiT model)"),OMr=l(),yM=a("li"),O2e=a("strong"),VMr=o("bert"),XMr=o(" \u2014 "),HQ=a("a"),zMr=o("FlaxBertModel"),QMr=o(" (BERT model)"),WMr=l(),LM=a("li"),V2e=a("strong"),HMr=o("big_bird"),UMr=o(" \u2014 "),UQ=a("a"),JMr=o("FlaxBigBirdModel"),YMr=o(" (BigBird model)"),KMr=l(),xM=a("li"),X2e=a("strong"),ZMr=o("blenderbot"),e4r=o(" \u2014 "),JQ=a("a"),o4r=o("FlaxBlenderbotModel"),r4r=o(" (Blenderbot model)"),t4r=l(),kM=a("li"),z2e=a("strong"),a4r=o("blenderbot-small"),n4r=o(" \u2014 "),YQ=a("a"),s4r=o("FlaxBlenderbotSmallModel"),l4r=o(" (BlenderbotSmall model)"),i4r=l(),SM=a("li"),Q2e=a("strong"),d4r=o("clip"),c4r=o(" \u2014 "),KQ=a("a"),f4r=o("FlaxCLIPModel"),m4r=o(" (CLIP model)"),g4r=l(),RM=a("li"),W2e=a("strong"),h4r=o("distilbert"),p4r=o(" \u2014 "),ZQ=a("a"),_4r=o("FlaxDistilBertModel"),u4r=o(" (DistilBERT model)"),b4r=l(),BM=a("li"),H2e=a("strong"),v4r=o("electra"),F4r=o(" \u2014 "),eW=a("a"),T4r=o("FlaxElectraModel"),M4r=o(" (ELECTRA model)"),E4r=l(),PM=a("li"),U2e=a("strong"),C4r=o("gpt2"),w4r=o(" \u2014 "),oW=a("a"),A4r=o("FlaxGPT2Model"),y4r=o(" (OpenAI GPT-2 model)"),L4r=l(),$M=a("li"),J2e=a("strong"),x4r=o("gpt_neo"),k4r=o(" \u2014 "),rW=a("a"),S4r=o("FlaxGPTNeoModel"),R4r=o(" (GPT Neo model)"),B4r=l(),IM=a("li"),Y2e=a("strong"),P4r=o("gptj"),$4r=o(" \u2014 "),tW=a("a"),I4r=o("FlaxGPTJModel"),q4r=o(" (GPT-J model)"),N4r=l(),qM=a("li"),K2e=a("strong"),j4r=o("marian"),D4r=o(" \u2014 "),aW=a("a"),G4r=o("FlaxMarianModel"),O4r=o(" (Marian model)"),V4r=l(),NM=a("li"),Z2e=a("strong"),X4r=o("mbart"),z4r=o(" \u2014 "),nW=a("a"),Q4r=o("FlaxMBartModel"),W4r=o(" (mBART model)"),H4r=l(),jM=a("li"),eve=a("strong"),U4r=o("mt5"),J4r=o(" \u2014 "),sW=a("a"),Y4r=o("FlaxMT5Model"),K4r=o(" (mT5 model)"),Z4r=l(),DM=a("li"),ove=a("strong"),eEr=o("pegasus"),oEr=o(" \u2014 "),lW=a("a"),rEr=o("FlaxPegasusModel"),tEr=o(" (Pegasus model)"),aEr=l(),GM=a("li"),rve=a("strong"),nEr=o("roberta"),sEr=o(" \u2014 "),iW=a("a"),lEr=o("FlaxRobertaModel"),iEr=o(" (RoBERTa model)"),dEr=l(),OM=a("li"),tve=a("strong"),cEr=o("roformer"),fEr=o(" \u2014 "),dW=a("a"),mEr=o("FlaxRoFormerModel"),gEr=o(" (RoFormer model)"),hEr=l(),VM=a("li"),ave=a("strong"),pEr=o("t5"),_Er=o(" \u2014 "),cW=a("a"),uEr=o("FlaxT5Model"),bEr=o(" (T5 model)"),vEr=l(),XM=a("li"),nve=a("strong"),FEr=o("vision-text-dual-encoder"),TEr=o(" \u2014 "),fW=a("a"),MEr=o("FlaxVisionTextDualEncoderModel"),EEr=o(" (VisionTextDualEncoder model)"),CEr=l(),zM=a("li"),sve=a("strong"),wEr=o("vit"),AEr=o(" \u2014 "),mW=a("a"),yEr=o("FlaxViTModel"),LEr=o(" (ViT model)"),xEr=l(),QM=a("li"),lve=a("strong"),kEr=o("wav2vec2"),SEr=o(" \u2014 "),gW=a("a"),REr=o("FlaxWav2Vec2Model"),BEr=o(" (Wav2Vec2 model)"),PEr=l(),WM=a("li"),ive=a("strong"),$Er=o("xglm"),IEr=o(" \u2014 "),hW=a("a"),qEr=o("FlaxXGLMModel"),NEr=o(" (XGLM model)"),jEr=l(),HM=a("li"),dve=a("strong"),DEr=o("xlm-roberta"),GEr=o(" \u2014 "),pW=a("a"),OEr=o("FlaxXLMRobertaModel"),VEr=o(" (XLM-RoBERTa model)"),XEr=l(),cve=a("p"),zEr=o("Examples:"),QEr=l(),f(Ky.$$.fragment),cPe=l(),of=a("h2"),UM=a("a"),fve=a("span"),f(Zy.$$.fragment),WEr=l(),mve=a("span"),HEr=o("FlaxAutoModelForCausalLM"),fPe=l(),Br=a("div"),f(eL.$$.fragment),UEr=l(),rf=a("p"),JEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_W=a("a"),YEr=o("from_pretrained()"),KEr=o(" class method or the "),uW=a("a"),ZEr=o("from_config()"),eCr=o(` class
method.`),oCr=l(),oL=a("p"),rCr=o("This class cannot be instantiated directly using "),gve=a("code"),tCr=o("__init__()"),aCr=o(" (throws an error)."),nCr=l(),yt=a("div"),f(rL.$$.fragment),sCr=l(),hve=a("p"),lCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iCr=l(),tf=a("p"),dCr=o(`Note:
Loading a model from its configuration file does `),pve=a("strong"),cCr=o("not"),fCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=a("a"),mCr=o("from_pretrained()"),gCr=o(" to load the model weights."),hCr=l(),_ve=a("p"),pCr=o("Examples:"),_Cr=l(),f(tL.$$.fragment),uCr=l(),Lo=a("div"),f(aL.$$.fragment),bCr=l(),uve=a("p"),vCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FCr=l(),Sn=a("p"),TCr=o("The model class to instantiate is selected based on the "),bve=a("code"),MCr=o("model_type"),ECr=o(` property of the config object (either
passed as an argument or loaded from `),vve=a("code"),CCr=o("pretrained_model_name_or_path"),wCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=a("code"),ACr=o("pretrained_model_name_or_path"),yCr=o(":"),LCr=l(),ca=a("ul"),JM=a("li"),Tve=a("strong"),xCr=o("bart"),kCr=o(" \u2014 "),vW=a("a"),SCr=o("FlaxBartForCausalLM"),RCr=o(" (BART model)"),BCr=l(),YM=a("li"),Mve=a("strong"),PCr=o("gpt2"),$Cr=o(" \u2014 "),FW=a("a"),ICr=o("FlaxGPT2LMHeadModel"),qCr=o(" (OpenAI GPT-2 model)"),NCr=l(),KM=a("li"),Eve=a("strong"),jCr=o("gpt_neo"),DCr=o(" \u2014 "),TW=a("a"),GCr=o("FlaxGPTNeoForCausalLM"),OCr=o(" (GPT Neo model)"),VCr=l(),ZM=a("li"),Cve=a("strong"),XCr=o("gptj"),zCr=o(" \u2014 "),MW=a("a"),QCr=o("FlaxGPTJForCausalLM"),WCr=o(" (GPT-J model)"),HCr=l(),e4=a("li"),wve=a("strong"),UCr=o("xglm"),JCr=o(" \u2014 "),EW=a("a"),YCr=o("FlaxXGLMForCausalLM"),KCr=o(" (XGLM model)"),ZCr=l(),Ave=a("p"),e5r=o("Examples:"),o5r=l(),f(nL.$$.fragment),mPe=l(),af=a("h2"),o4=a("a"),yve=a("span"),f(sL.$$.fragment),r5r=l(),Lve=a("span"),t5r=o("FlaxAutoModelForPreTraining"),gPe=l(),Pr=a("div"),f(lL.$$.fragment),a5r=l(),nf=a("p"),n5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),CW=a("a"),s5r=o("from_pretrained()"),l5r=o(" class method or the "),wW=a("a"),i5r=o("from_config()"),d5r=o(` class
method.`),c5r=l(),iL=a("p"),f5r=o("This class cannot be instantiated directly using "),xve=a("code"),m5r=o("__init__()"),g5r=o(" (throws an error)."),h5r=l(),Lt=a("div"),f(dL.$$.fragment),p5r=l(),kve=a("p"),_5r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),u5r=l(),sf=a("p"),b5r=o(`Note:
Loading a model from its configuration file does `),Sve=a("strong"),v5r=o("not"),F5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=a("a"),T5r=o("from_pretrained()"),M5r=o(" to load the model weights."),E5r=l(),Rve=a("p"),C5r=o("Examples:"),w5r=l(),f(cL.$$.fragment),A5r=l(),xo=a("div"),f(fL.$$.fragment),y5r=l(),Bve=a("p"),L5r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),x5r=l(),Rn=a("p"),k5r=o("The model class to instantiate is selected based on the "),Pve=a("code"),S5r=o("model_type"),R5r=o(` property of the config object (either
passed as an argument or loaded from `),$ve=a("code"),B5r=o("pretrained_model_name_or_path"),P5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=a("code"),$5r=o("pretrained_model_name_or_path"),I5r=o(":"),q5r=l(),me=a("ul"),r4=a("li"),qve=a("strong"),N5r=o("albert"),j5r=o(" \u2014 "),yW=a("a"),D5r=o("FlaxAlbertForPreTraining"),G5r=o(" (ALBERT model)"),O5r=l(),t4=a("li"),Nve=a("strong"),V5r=o("bart"),X5r=o(" \u2014 "),LW=a("a"),z5r=o("FlaxBartForConditionalGeneration"),Q5r=o(" (BART model)"),W5r=l(),a4=a("li"),jve=a("strong"),H5r=o("bert"),U5r=o(" \u2014 "),xW=a("a"),J5r=o("FlaxBertForPreTraining"),Y5r=o(" (BERT model)"),K5r=l(),n4=a("li"),Dve=a("strong"),Z5r=o("big_bird"),e3r=o(" \u2014 "),kW=a("a"),o3r=o("FlaxBigBirdForPreTraining"),r3r=o(" (BigBird model)"),t3r=l(),s4=a("li"),Gve=a("strong"),a3r=o("electra"),n3r=o(" \u2014 "),SW=a("a"),s3r=o("FlaxElectraForPreTraining"),l3r=o(" (ELECTRA model)"),i3r=l(),l4=a("li"),Ove=a("strong"),d3r=o("mbart"),c3r=o(" \u2014 "),RW=a("a"),f3r=o("FlaxMBartForConditionalGeneration"),m3r=o(" (mBART model)"),g3r=l(),i4=a("li"),Vve=a("strong"),h3r=o("mt5"),p3r=o(" \u2014 "),BW=a("a"),_3r=o("FlaxMT5ForConditionalGeneration"),u3r=o(" (mT5 model)"),b3r=l(),d4=a("li"),Xve=a("strong"),v3r=o("roberta"),F3r=o(" \u2014 "),PW=a("a"),T3r=o("FlaxRobertaForMaskedLM"),M3r=o(" (RoBERTa model)"),E3r=l(),c4=a("li"),zve=a("strong"),C3r=o("roformer"),w3r=o(" \u2014 "),$W=a("a"),A3r=o("FlaxRoFormerForMaskedLM"),y3r=o(" (RoFormer model)"),L3r=l(),f4=a("li"),Qve=a("strong"),x3r=o("t5"),k3r=o(" \u2014 "),IW=a("a"),S3r=o("FlaxT5ForConditionalGeneration"),R3r=o(" (T5 model)"),B3r=l(),m4=a("li"),Wve=a("strong"),P3r=o("wav2vec2"),$3r=o(" \u2014 "),qW=a("a"),I3r=o("FlaxWav2Vec2ForPreTraining"),q3r=o(" (Wav2Vec2 model)"),N3r=l(),g4=a("li"),Hve=a("strong"),j3r=o("xlm-roberta"),D3r=o(" \u2014 "),NW=a("a"),G3r=o("FlaxXLMRobertaForMaskedLM"),O3r=o(" (XLM-RoBERTa model)"),V3r=l(),Uve=a("p"),X3r=o("Examples:"),z3r=l(),f(mL.$$.fragment),hPe=l(),lf=a("h2"),h4=a("a"),Jve=a("span"),f(gL.$$.fragment),Q3r=l(),Yve=a("span"),W3r=o("FlaxAutoModelForMaskedLM"),pPe=l(),$r=a("div"),f(hL.$$.fragment),H3r=l(),df=a("p"),U3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jW=a("a"),J3r=o("from_pretrained()"),Y3r=o(" class method or the "),DW=a("a"),K3r=o("from_config()"),Z3r=o(` class
method.`),ewr=l(),pL=a("p"),owr=o("This class cannot be instantiated directly using "),Kve=a("code"),rwr=o("__init__()"),twr=o(" (throws an error)."),awr=l(),xt=a("div"),f(_L.$$.fragment),nwr=l(),Zve=a("p"),swr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lwr=l(),cf=a("p"),iwr=o(`Note:
Loading a model from its configuration file does `),eFe=a("strong"),dwr=o("not"),cwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),fwr=o("from_pretrained()"),mwr=o(" to load the model weights."),gwr=l(),oFe=a("p"),hwr=o("Examples:"),pwr=l(),f(uL.$$.fragment),_wr=l(),ko=a("div"),f(bL.$$.fragment),uwr=l(),rFe=a("p"),bwr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vwr=l(),Bn=a("p"),Fwr=o("The model class to instantiate is selected based on the "),tFe=a("code"),Twr=o("model_type"),Mwr=o(` property of the config object (either
passed as an argument or loaded from `),aFe=a("code"),Ewr=o("pretrained_model_name_or_path"),Cwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nFe=a("code"),wwr=o("pretrained_model_name_or_path"),Awr=o(":"),ywr=l(),ve=a("ul"),p4=a("li"),sFe=a("strong"),Lwr=o("albert"),xwr=o(" \u2014 "),OW=a("a"),kwr=o("FlaxAlbertForMaskedLM"),Swr=o(" (ALBERT model)"),Rwr=l(),_4=a("li"),lFe=a("strong"),Bwr=o("bart"),Pwr=o(" \u2014 "),VW=a("a"),$wr=o("FlaxBartForConditionalGeneration"),Iwr=o(" (BART model)"),qwr=l(),u4=a("li"),iFe=a("strong"),Nwr=o("bert"),jwr=o(" \u2014 "),XW=a("a"),Dwr=o("FlaxBertForMaskedLM"),Gwr=o(" (BERT model)"),Owr=l(),b4=a("li"),dFe=a("strong"),Vwr=o("big_bird"),Xwr=o(" \u2014 "),zW=a("a"),zwr=o("FlaxBigBirdForMaskedLM"),Qwr=o(" (BigBird model)"),Wwr=l(),v4=a("li"),cFe=a("strong"),Hwr=o("distilbert"),Uwr=o(" \u2014 "),QW=a("a"),Jwr=o("FlaxDistilBertForMaskedLM"),Ywr=o(" (DistilBERT model)"),Kwr=l(),F4=a("li"),fFe=a("strong"),Zwr=o("electra"),eAr=o(" \u2014 "),WW=a("a"),oAr=o("FlaxElectraForMaskedLM"),rAr=o(" (ELECTRA model)"),tAr=l(),T4=a("li"),mFe=a("strong"),aAr=o("mbart"),nAr=o(" \u2014 "),HW=a("a"),sAr=o("FlaxMBartForConditionalGeneration"),lAr=o(" (mBART model)"),iAr=l(),M4=a("li"),gFe=a("strong"),dAr=o("roberta"),cAr=o(" \u2014 "),UW=a("a"),fAr=o("FlaxRobertaForMaskedLM"),mAr=o(" (RoBERTa model)"),gAr=l(),E4=a("li"),hFe=a("strong"),hAr=o("roformer"),pAr=o(" \u2014 "),JW=a("a"),_Ar=o("FlaxRoFormerForMaskedLM"),uAr=o(" (RoFormer model)"),bAr=l(),C4=a("li"),pFe=a("strong"),vAr=o("xlm-roberta"),FAr=o(" \u2014 "),YW=a("a"),TAr=o("FlaxXLMRobertaForMaskedLM"),MAr=o(" (XLM-RoBERTa model)"),EAr=l(),_Fe=a("p"),CAr=o("Examples:"),wAr=l(),f(vL.$$.fragment),_Pe=l(),ff=a("h2"),w4=a("a"),uFe=a("span"),f(FL.$$.fragment),AAr=l(),bFe=a("span"),yAr=o("FlaxAutoModelForSeq2SeqLM"),uPe=l(),Ir=a("div"),f(TL.$$.fragment),LAr=l(),mf=a("p"),xAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),KW=a("a"),kAr=o("from_pretrained()"),SAr=o(" class method or the "),ZW=a("a"),RAr=o("from_config()"),BAr=o(` class
method.`),PAr=l(),ML=a("p"),$Ar=o("This class cannot be instantiated directly using "),vFe=a("code"),IAr=o("__init__()"),qAr=o(" (throws an error)."),NAr=l(),kt=a("div"),f(EL.$$.fragment),jAr=l(),FFe=a("p"),DAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),GAr=l(),gf=a("p"),OAr=o(`Note:
Loading a model from its configuration file does `),TFe=a("strong"),VAr=o("not"),XAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),zAr=o("from_pretrained()"),QAr=o(" to load the model weights."),WAr=l(),MFe=a("p"),HAr=o("Examples:"),UAr=l(),f(CL.$$.fragment),JAr=l(),So=a("div"),f(wL.$$.fragment),YAr=l(),EFe=a("p"),KAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ZAr=l(),Pn=a("p"),eyr=o("The model class to instantiate is selected based on the "),CFe=a("code"),oyr=o("model_type"),ryr=o(` property of the config object (either
passed as an argument or loaded from `),wFe=a("code"),tyr=o("pretrained_model_name_or_path"),ayr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=a("code"),nyr=o("pretrained_model_name_or_path"),syr=o(":"),lyr=l(),Ee=a("ul"),A4=a("li"),yFe=a("strong"),iyr=o("bart"),dyr=o(" \u2014 "),oH=a("a"),cyr=o("FlaxBartForConditionalGeneration"),fyr=o(" (BART model)"),myr=l(),y4=a("li"),LFe=a("strong"),gyr=o("blenderbot"),hyr=o(" \u2014 "),rH=a("a"),pyr=o("FlaxBlenderbotForConditionalGeneration"),_yr=o(" (Blenderbot model)"),uyr=l(),L4=a("li"),xFe=a("strong"),byr=o("blenderbot-small"),vyr=o(" \u2014 "),tH=a("a"),Fyr=o("FlaxBlenderbotSmallForConditionalGeneration"),Tyr=o(" (BlenderbotSmall model)"),Myr=l(),x4=a("li"),kFe=a("strong"),Eyr=o("encoder-decoder"),Cyr=o(" \u2014 "),aH=a("a"),wyr=o("FlaxEncoderDecoderModel"),Ayr=o(" (Encoder decoder model)"),yyr=l(),k4=a("li"),SFe=a("strong"),Lyr=o("marian"),xyr=o(" \u2014 "),nH=a("a"),kyr=o("FlaxMarianMTModel"),Syr=o(" (Marian model)"),Ryr=l(),S4=a("li"),RFe=a("strong"),Byr=o("mbart"),Pyr=o(" \u2014 "),sH=a("a"),$yr=o("FlaxMBartForConditionalGeneration"),Iyr=o(" (mBART model)"),qyr=l(),R4=a("li"),BFe=a("strong"),Nyr=o("mt5"),jyr=o(" \u2014 "),lH=a("a"),Dyr=o("FlaxMT5ForConditionalGeneration"),Gyr=o(" (mT5 model)"),Oyr=l(),B4=a("li"),PFe=a("strong"),Vyr=o("pegasus"),Xyr=o(" \u2014 "),iH=a("a"),zyr=o("FlaxPegasusForConditionalGeneration"),Qyr=o(" (Pegasus model)"),Wyr=l(),P4=a("li"),$Fe=a("strong"),Hyr=o("t5"),Uyr=o(" \u2014 "),dH=a("a"),Jyr=o("FlaxT5ForConditionalGeneration"),Yyr=o(" (T5 model)"),Kyr=l(),IFe=a("p"),Zyr=o("Examples:"),eLr=l(),f(AL.$$.fragment),bPe=l(),hf=a("h2"),$4=a("a"),qFe=a("span"),f(yL.$$.fragment),oLr=l(),NFe=a("span"),rLr=o("FlaxAutoModelForSequenceClassification"),vPe=l(),qr=a("div"),f(LL.$$.fragment),tLr=l(),pf=a("p"),aLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cH=a("a"),nLr=o("from_pretrained()"),sLr=o(" class method or the "),fH=a("a"),lLr=o("from_config()"),iLr=o(` class
method.`),dLr=l(),xL=a("p"),cLr=o("This class cannot be instantiated directly using "),jFe=a("code"),fLr=o("__init__()"),mLr=o(" (throws an error)."),gLr=l(),St=a("div"),f(kL.$$.fragment),hLr=l(),DFe=a("p"),pLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_Lr=l(),_f=a("p"),uLr=o(`Note:
Loading a model from its configuration file does `),GFe=a("strong"),bLr=o("not"),vLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),FLr=o("from_pretrained()"),TLr=o(" to load the model weights."),MLr=l(),OFe=a("p"),ELr=o("Examples:"),CLr=l(),f(SL.$$.fragment),wLr=l(),Ro=a("div"),f(RL.$$.fragment),ALr=l(),VFe=a("p"),yLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),LLr=l(),$n=a("p"),xLr=o("The model class to instantiate is selected based on the "),XFe=a("code"),kLr=o("model_type"),SLr=o(` property of the config object (either
passed as an argument or loaded from `),zFe=a("code"),RLr=o("pretrained_model_name_or_path"),BLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=a("code"),PLr=o("pretrained_model_name_or_path"),$Lr=o(":"),ILr=l(),Fe=a("ul"),I4=a("li"),WFe=a("strong"),qLr=o("albert"),NLr=o(" \u2014 "),gH=a("a"),jLr=o("FlaxAlbertForSequenceClassification"),DLr=o(" (ALBERT model)"),GLr=l(),q4=a("li"),HFe=a("strong"),OLr=o("bart"),VLr=o(" \u2014 "),hH=a("a"),XLr=o("FlaxBartForSequenceClassification"),zLr=o(" (BART model)"),QLr=l(),N4=a("li"),UFe=a("strong"),WLr=o("bert"),HLr=o(" \u2014 "),pH=a("a"),ULr=o("FlaxBertForSequenceClassification"),JLr=o(" (BERT model)"),YLr=l(),j4=a("li"),JFe=a("strong"),KLr=o("big_bird"),ZLr=o(" \u2014 "),_H=a("a"),e8r=o("FlaxBigBirdForSequenceClassification"),o8r=o(" (BigBird model)"),r8r=l(),D4=a("li"),YFe=a("strong"),t8r=o("distilbert"),a8r=o(" \u2014 "),uH=a("a"),n8r=o("FlaxDistilBertForSequenceClassification"),s8r=o(" (DistilBERT model)"),l8r=l(),G4=a("li"),KFe=a("strong"),i8r=o("electra"),d8r=o(" \u2014 "),bH=a("a"),c8r=o("FlaxElectraForSequenceClassification"),f8r=o(" (ELECTRA model)"),m8r=l(),O4=a("li"),ZFe=a("strong"),g8r=o("mbart"),h8r=o(" \u2014 "),vH=a("a"),p8r=o("FlaxMBartForSequenceClassification"),_8r=o(" (mBART model)"),u8r=l(),V4=a("li"),e0e=a("strong"),b8r=o("roberta"),v8r=o(" \u2014 "),FH=a("a"),F8r=o("FlaxRobertaForSequenceClassification"),T8r=o(" (RoBERTa model)"),M8r=l(),X4=a("li"),o0e=a("strong"),E8r=o("roformer"),C8r=o(" \u2014 "),TH=a("a"),w8r=o("FlaxRoFormerForSequenceClassification"),A8r=o(" (RoFormer model)"),y8r=l(),z4=a("li"),r0e=a("strong"),L8r=o("xlm-roberta"),x8r=o(" \u2014 "),MH=a("a"),k8r=o("FlaxXLMRobertaForSequenceClassification"),S8r=o(" (XLM-RoBERTa model)"),R8r=l(),t0e=a("p"),B8r=o("Examples:"),P8r=l(),f(BL.$$.fragment),FPe=l(),uf=a("h2"),Q4=a("a"),a0e=a("span"),f(PL.$$.fragment),$8r=l(),n0e=a("span"),I8r=o("FlaxAutoModelForQuestionAnswering"),TPe=l(),Nr=a("div"),f($L.$$.fragment),q8r=l(),bf=a("p"),N8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EH=a("a"),j8r=o("from_pretrained()"),D8r=o(" class method or the "),CH=a("a"),G8r=o("from_config()"),O8r=o(` class
method.`),V8r=l(),IL=a("p"),X8r=o("This class cannot be instantiated directly using "),s0e=a("code"),z8r=o("__init__()"),Q8r=o(" (throws an error)."),W8r=l(),Rt=a("div"),f(qL.$$.fragment),H8r=l(),l0e=a("p"),U8r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),J8r=l(),vf=a("p"),Y8r=o(`Note:
Loading a model from its configuration file does `),i0e=a("strong"),K8r=o("not"),Z8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),e9r=o("from_pretrained()"),o9r=o(" to load the model weights."),r9r=l(),d0e=a("p"),t9r=o("Examples:"),a9r=l(),f(NL.$$.fragment),n9r=l(),Bo=a("div"),f(jL.$$.fragment),s9r=l(),c0e=a("p"),l9r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),i9r=l(),In=a("p"),d9r=o("The model class to instantiate is selected based on the "),f0e=a("code"),c9r=o("model_type"),f9r=o(` property of the config object (either
passed as an argument or loaded from `),m0e=a("code"),m9r=o("pretrained_model_name_or_path"),g9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g0e=a("code"),h9r=o("pretrained_model_name_or_path"),p9r=o(":"),_9r=l(),Te=a("ul"),W4=a("li"),h0e=a("strong"),u9r=o("albert"),b9r=o(" \u2014 "),AH=a("a"),v9r=o("FlaxAlbertForQuestionAnswering"),F9r=o(" (ALBERT model)"),T9r=l(),H4=a("li"),p0e=a("strong"),M9r=o("bart"),E9r=o(" \u2014 "),yH=a("a"),C9r=o("FlaxBartForQuestionAnswering"),w9r=o(" (BART model)"),A9r=l(),U4=a("li"),_0e=a("strong"),y9r=o("bert"),L9r=o(" \u2014 "),LH=a("a"),x9r=o("FlaxBertForQuestionAnswering"),k9r=o(" (BERT model)"),S9r=l(),J4=a("li"),u0e=a("strong"),R9r=o("big_bird"),B9r=o(" \u2014 "),xH=a("a"),P9r=o("FlaxBigBirdForQuestionAnswering"),$9r=o(" (BigBird model)"),I9r=l(),Y4=a("li"),b0e=a("strong"),q9r=o("distilbert"),N9r=o(" \u2014 "),kH=a("a"),j9r=o("FlaxDistilBertForQuestionAnswering"),D9r=o(" (DistilBERT model)"),G9r=l(),K4=a("li"),v0e=a("strong"),O9r=o("electra"),V9r=o(" \u2014 "),SH=a("a"),X9r=o("FlaxElectraForQuestionAnswering"),z9r=o(" (ELECTRA model)"),Q9r=l(),Z4=a("li"),F0e=a("strong"),W9r=o("mbart"),H9r=o(" \u2014 "),RH=a("a"),U9r=o("FlaxMBartForQuestionAnswering"),J9r=o(" (mBART model)"),Y9r=l(),eE=a("li"),T0e=a("strong"),K9r=o("roberta"),Z9r=o(" \u2014 "),BH=a("a"),exr=o("FlaxRobertaForQuestionAnswering"),oxr=o(" (RoBERTa model)"),rxr=l(),oE=a("li"),M0e=a("strong"),txr=o("roformer"),axr=o(" \u2014 "),PH=a("a"),nxr=o("FlaxRoFormerForQuestionAnswering"),sxr=o(" (RoFormer model)"),lxr=l(),rE=a("li"),E0e=a("strong"),ixr=o("xlm-roberta"),dxr=o(" \u2014 "),$H=a("a"),cxr=o("FlaxXLMRobertaForQuestionAnswering"),fxr=o(" (XLM-RoBERTa model)"),mxr=l(),C0e=a("p"),gxr=o("Examples:"),hxr=l(),f(DL.$$.fragment),MPe=l(),Ff=a("h2"),tE=a("a"),w0e=a("span"),f(GL.$$.fragment),pxr=l(),A0e=a("span"),_xr=o("FlaxAutoModelForTokenClassification"),EPe=l(),jr=a("div"),f(OL.$$.fragment),uxr=l(),Tf=a("p"),bxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),IH=a("a"),vxr=o("from_pretrained()"),Fxr=o(" class method or the "),qH=a("a"),Txr=o("from_config()"),Mxr=o(` class
method.`),Exr=l(),VL=a("p"),Cxr=o("This class cannot be instantiated directly using "),y0e=a("code"),wxr=o("__init__()"),Axr=o(" (throws an error)."),yxr=l(),Bt=a("div"),f(XL.$$.fragment),Lxr=l(),L0e=a("p"),xxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kxr=l(),Mf=a("p"),Sxr=o(`Note:
Loading a model from its configuration file does `),x0e=a("strong"),Rxr=o("not"),Bxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),Pxr=o("from_pretrained()"),$xr=o(" to load the model weights."),Ixr=l(),k0e=a("p"),qxr=o("Examples:"),Nxr=l(),f(zL.$$.fragment),jxr=l(),Po=a("div"),f(QL.$$.fragment),Dxr=l(),S0e=a("p"),Gxr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Oxr=l(),qn=a("p"),Vxr=o("The model class to instantiate is selected based on the "),R0e=a("code"),Xxr=o("model_type"),zxr=o(` property of the config object (either
passed as an argument or loaded from `),B0e=a("code"),Qxr=o("pretrained_model_name_or_path"),Wxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P0e=a("code"),Hxr=o("pretrained_model_name_or_path"),Uxr=o(":"),Jxr=l(),Be=a("ul"),aE=a("li"),$0e=a("strong"),Yxr=o("albert"),Kxr=o(" \u2014 "),jH=a("a"),Zxr=o("FlaxAlbertForTokenClassification"),ekr=o(" (ALBERT model)"),okr=l(),nE=a("li"),I0e=a("strong"),rkr=o("bert"),tkr=o(" \u2014 "),DH=a("a"),akr=o("FlaxBertForTokenClassification"),nkr=o(" (BERT model)"),skr=l(),sE=a("li"),q0e=a("strong"),lkr=o("big_bird"),ikr=o(" \u2014 "),GH=a("a"),dkr=o("FlaxBigBirdForTokenClassification"),ckr=o(" (BigBird model)"),fkr=l(),lE=a("li"),N0e=a("strong"),mkr=o("distilbert"),gkr=o(" \u2014 "),OH=a("a"),hkr=o("FlaxDistilBertForTokenClassification"),pkr=o(" (DistilBERT model)"),_kr=l(),iE=a("li"),j0e=a("strong"),ukr=o("electra"),bkr=o(" \u2014 "),VH=a("a"),vkr=o("FlaxElectraForTokenClassification"),Fkr=o(" (ELECTRA model)"),Tkr=l(),dE=a("li"),D0e=a("strong"),Mkr=o("roberta"),Ekr=o(" \u2014 "),XH=a("a"),Ckr=o("FlaxRobertaForTokenClassification"),wkr=o(" (RoBERTa model)"),Akr=l(),cE=a("li"),G0e=a("strong"),ykr=o("roformer"),Lkr=o(" \u2014 "),zH=a("a"),xkr=o("FlaxRoFormerForTokenClassification"),kkr=o(" (RoFormer model)"),Skr=l(),fE=a("li"),O0e=a("strong"),Rkr=o("xlm-roberta"),Bkr=o(" \u2014 "),QH=a("a"),Pkr=o("FlaxXLMRobertaForTokenClassification"),$kr=o(" (XLM-RoBERTa model)"),Ikr=l(),V0e=a("p"),qkr=o("Examples:"),Nkr=l(),f(WL.$$.fragment),CPe=l(),Ef=a("h2"),mE=a("a"),X0e=a("span"),f(HL.$$.fragment),jkr=l(),z0e=a("span"),Dkr=o("FlaxAutoModelForMultipleChoice"),wPe=l(),Dr=a("div"),f(UL.$$.fragment),Gkr=l(),Cf=a("p"),Okr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WH=a("a"),Vkr=o("from_pretrained()"),Xkr=o(" class method or the "),HH=a("a"),zkr=o("from_config()"),Qkr=o(` class
method.`),Wkr=l(),JL=a("p"),Hkr=o("This class cannot be instantiated directly using "),Q0e=a("code"),Ukr=o("__init__()"),Jkr=o(" (throws an error)."),Ykr=l(),Pt=a("div"),f(YL.$$.fragment),Kkr=l(),W0e=a("p"),Zkr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eSr=l(),wf=a("p"),oSr=o(`Note:
Loading a model from its configuration file does `),H0e=a("strong"),rSr=o("not"),tSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),aSr=o("from_pretrained()"),nSr=o(" to load the model weights."),sSr=l(),U0e=a("p"),lSr=o("Examples:"),iSr=l(),f(KL.$$.fragment),dSr=l(),$o=a("div"),f(ZL.$$.fragment),cSr=l(),J0e=a("p"),fSr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mSr=l(),Nn=a("p"),gSr=o("The model class to instantiate is selected based on the "),Y0e=a("code"),hSr=o("model_type"),pSr=o(` property of the config object (either
passed as an argument or loaded from `),K0e=a("code"),_Sr=o("pretrained_model_name_or_path"),uSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=a("code"),bSr=o("pretrained_model_name_or_path"),vSr=o(":"),FSr=l(),Pe=a("ul"),gE=a("li"),eTe=a("strong"),TSr=o("albert"),MSr=o(" \u2014 "),JH=a("a"),ESr=o("FlaxAlbertForMultipleChoice"),CSr=o(" (ALBERT model)"),wSr=l(),hE=a("li"),oTe=a("strong"),ASr=o("bert"),ySr=o(" \u2014 "),YH=a("a"),LSr=o("FlaxBertForMultipleChoice"),xSr=o(" (BERT model)"),kSr=l(),pE=a("li"),rTe=a("strong"),SSr=o("big_bird"),RSr=o(" \u2014 "),KH=a("a"),BSr=o("FlaxBigBirdForMultipleChoice"),PSr=o(" (BigBird model)"),$Sr=l(),_E=a("li"),tTe=a("strong"),ISr=o("distilbert"),qSr=o(" \u2014 "),ZH=a("a"),NSr=o("FlaxDistilBertForMultipleChoice"),jSr=o(" (DistilBERT model)"),DSr=l(),uE=a("li"),aTe=a("strong"),GSr=o("electra"),OSr=o(" \u2014 "),eU=a("a"),VSr=o("FlaxElectraForMultipleChoice"),XSr=o(" (ELECTRA model)"),zSr=l(),bE=a("li"),nTe=a("strong"),QSr=o("roberta"),WSr=o(" \u2014 "),oU=a("a"),HSr=o("FlaxRobertaForMultipleChoice"),USr=o(" (RoBERTa model)"),JSr=l(),vE=a("li"),sTe=a("strong"),YSr=o("roformer"),KSr=o(" \u2014 "),rU=a("a"),ZSr=o("FlaxRoFormerForMultipleChoice"),eRr=o(" (RoFormer model)"),oRr=l(),FE=a("li"),lTe=a("strong"),rRr=o("xlm-roberta"),tRr=o(" \u2014 "),tU=a("a"),aRr=o("FlaxXLMRobertaForMultipleChoice"),nRr=o(" (XLM-RoBERTa model)"),sRr=l(),iTe=a("p"),lRr=o("Examples:"),iRr=l(),f(e8.$$.fragment),APe=l(),Af=a("h2"),TE=a("a"),dTe=a("span"),f(o8.$$.fragment),dRr=l(),cTe=a("span"),cRr=o("FlaxAutoModelForNextSentencePrediction"),yPe=l(),Gr=a("div"),f(r8.$$.fragment),fRr=l(),yf=a("p"),mRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aU=a("a"),gRr=o("from_pretrained()"),hRr=o(" class method or the "),nU=a("a"),pRr=o("from_config()"),_Rr=o(` class
method.`),uRr=l(),t8=a("p"),bRr=o("This class cannot be instantiated directly using "),fTe=a("code"),vRr=o("__init__()"),FRr=o(" (throws an error)."),TRr=l(),$t=a("div"),f(a8.$$.fragment),MRr=l(),mTe=a("p"),ERr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CRr=l(),Lf=a("p"),wRr=o(`Note:
Loading a model from its configuration file does `),gTe=a("strong"),ARr=o("not"),yRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),LRr=o("from_pretrained()"),xRr=o(" to load the model weights."),kRr=l(),hTe=a("p"),SRr=o("Examples:"),RRr=l(),f(n8.$$.fragment),BRr=l(),Io=a("div"),f(s8.$$.fragment),PRr=l(),pTe=a("p"),$Rr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),IRr=l(),jn=a("p"),qRr=o("The model class to instantiate is selected based on the "),_Te=a("code"),NRr=o("model_type"),jRr=o(` property of the config object (either
passed as an argument or loaded from `),uTe=a("code"),DRr=o("pretrained_model_name_or_path"),GRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=a("code"),ORr=o("pretrained_model_name_or_path"),VRr=o(":"),XRr=l(),vTe=a("ul"),ME=a("li"),FTe=a("strong"),zRr=o("bert"),QRr=o(" \u2014 "),lU=a("a"),WRr=o("FlaxBertForNextSentencePrediction"),HRr=o(" (BERT model)"),URr=l(),TTe=a("p"),JRr=o("Examples:"),YRr=l(),f(l8.$$.fragment),LPe=l(),xf=a("h2"),EE=a("a"),MTe=a("span"),f(i8.$$.fragment),KRr=l(),ETe=a("span"),ZRr=o("FlaxAutoModelForImageClassification"),xPe=l(),Or=a("div"),f(d8.$$.fragment),eBr=l(),kf=a("p"),oBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iU=a("a"),rBr=o("from_pretrained()"),tBr=o(" class method or the "),dU=a("a"),aBr=o("from_config()"),nBr=o(` class
method.`),sBr=l(),c8=a("p"),lBr=o("This class cannot be instantiated directly using "),CTe=a("code"),iBr=o("__init__()"),dBr=o(" (throws an error)."),cBr=l(),It=a("div"),f(f8.$$.fragment),fBr=l(),wTe=a("p"),mBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gBr=l(),Sf=a("p"),hBr=o(`Note:
Loading a model from its configuration file does `),ATe=a("strong"),pBr=o("not"),_Br=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),uBr=o("from_pretrained()"),bBr=o(" to load the model weights."),vBr=l(),yTe=a("p"),FBr=o("Examples:"),TBr=l(),f(m8.$$.fragment),MBr=l(),qo=a("div"),f(g8.$$.fragment),EBr=l(),LTe=a("p"),CBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wBr=l(),Dn=a("p"),ABr=o("The model class to instantiate is selected based on the "),xTe=a("code"),yBr=o("model_type"),LBr=o(` property of the config object (either
passed as an argument or loaded from `),kTe=a("code"),xBr=o("pretrained_model_name_or_path"),kBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=a("code"),SBr=o("pretrained_model_name_or_path"),RBr=o(":"),BBr=l(),h8=a("ul"),CE=a("li"),RTe=a("strong"),PBr=o("beit"),$Br=o(" \u2014 "),fU=a("a"),IBr=o("FlaxBeitForImageClassification"),qBr=o(" (BEiT model)"),NBr=l(),wE=a("li"),BTe=a("strong"),jBr=o("vit"),DBr=o(" \u2014 "),mU=a("a"),GBr=o("FlaxViTForImageClassification"),OBr=o(" (ViT model)"),VBr=l(),PTe=a("p"),XBr=o("Examples:"),zBr=l(),f(p8.$$.fragment),kPe=l(),Rf=a("h2"),AE=a("a"),$Te=a("span"),f(_8.$$.fragment),QBr=l(),ITe=a("span"),WBr=o("FlaxAutoModelForVision2Seq"),SPe=l(),Vr=a("div"),f(u8.$$.fragment),HBr=l(),Bf=a("p"),UBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gU=a("a"),JBr=o("from_pretrained()"),YBr=o(" class method or the "),hU=a("a"),KBr=o("from_config()"),ZBr=o(` class
method.`),ePr=l(),b8=a("p"),oPr=o("This class cannot be instantiated directly using "),qTe=a("code"),rPr=o("__init__()"),tPr=o(" (throws an error)."),aPr=l(),qt=a("div"),f(v8.$$.fragment),nPr=l(),NTe=a("p"),sPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lPr=l(),Pf=a("p"),iPr=o(`Note:
Loading a model from its configuration file does `),jTe=a("strong"),dPr=o("not"),cPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),fPr=o("from_pretrained()"),mPr=o(" to load the model weights."),gPr=l(),DTe=a("p"),hPr=o("Examples:"),pPr=l(),f(F8.$$.fragment),_Pr=l(),No=a("div"),f(T8.$$.fragment),uPr=l(),GTe=a("p"),bPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vPr=l(),Gn=a("p"),FPr=o("The model class to instantiate is selected based on the "),OTe=a("code"),TPr=o("model_type"),MPr=o(` property of the config object (either
passed as an argument or loaded from `),VTe=a("code"),EPr=o("pretrained_model_name_or_path"),CPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=a("code"),wPr=o("pretrained_model_name_or_path"),APr=o(":"),yPr=l(),zTe=a("ul"),yE=a("li"),QTe=a("strong"),LPr=o("vision-encoder-decoder"),xPr=o(" \u2014 "),_U=a("a"),kPr=o("FlaxVisionEncoderDecoderModel"),SPr=o(" (Vision Encoder decoder model)"),RPr=l(),WTe=a("p"),BPr=o("Examples:"),PPr=l(),f(M8.$$.fragment),this.h()},l(c){const u=E5t('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),ce=n(c,"H1",{class:!0});var E8=s(ce);Ce=n(E8,"A",{id:!0,class:!0,href:!0});var HTe=s(Ce);lo=n(HTe,"SPAN",{});var UTe=s(lo);m(he.$$.fragment,UTe),UTe.forEach(t),HTe.forEach(t),Me=i(E8),Xo=n(E8,"SPAN",{});var IPr=s(Xo);qi=r(IPr,"Auto Classes"),IPr.forEach(t),E8.forEach(t),qf=i(c),fa=n(c,"P",{});var BPe=s(fa);Ni=r(BPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=n(BPe,"CODE",{});var qPr=s(ji);LC=r(qPr,"from_pretrained()"),qPr.forEach(t),Nf=r(BPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),BPe.forEach(t),xe=i(c),co=n(c,"P",{});var LE=s(co);Di=r(LE,"Instantiating one of "),On=n(LE,"A",{href:!0});var NPr=s(On);xC=r(NPr,"AutoConfig"),NPr.forEach(t),Vn=r(LE,", "),Xn=n(LE,"A",{href:!0});var jPr=s(Xn);kC=r(jPr,"AutoModel"),jPr.forEach(t),Gi=r(LE,`, and
`),zn=n(LE,"A",{href:!0});var DPr=s(zn);SC=r(DPr,"AutoTokenizer"),DPr.forEach(t),Oi=r(LE," will directly create a class of the relevant architecture. For instance"),LE.forEach(t),jf=i(c),m(Da.$$.fragment,c),fo=i(c),ue=n(c,"P",{});var PPe=s(ue);F9=r(PPe,"will create a model that is an instance of "),Vi=n(PPe,"A",{href:!0});var GPr=s(Vi);T9=r(GPr,"BertModel"),GPr.forEach(t),M9=r(PPe,"."),PPe.forEach(t),zo=i(c),Ga=n(c,"P",{});var $Pe=s(Ga);E9=r($Pe,"There is one class of "),Df=n($Pe,"CODE",{});var OPr=s(Df);C9=r(OPr,"AutoModel"),OPr.forEach(t),XIe=r($Pe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),$Pe.forEach(t),SRe=i(c),Xi=n(c,"H2",{class:!0});var IPe=s(Xi);Gf=n(IPe,"A",{id:!0,class:!0,href:!0});var VPr=s(Gf);dY=n(VPr,"SPAN",{});var XPr=s(dY);m(RC.$$.fragment,XPr),XPr.forEach(t),VPr.forEach(t),zIe=i(IPe),cY=n(IPe,"SPAN",{});var zPr=s(cY);QIe=r(zPr,"Extending the Auto Classes"),zPr.forEach(t),IPe.forEach(t),RRe=i(c),Qn=n(c,"P",{});var uU=s(Qn);WIe=r(uU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),fY=n(uU,"CODE",{});var QPr=s(fY);HIe=r(QPr,"NewModel"),QPr.forEach(t),UIe=r(uU,", make sure you have a "),mY=n(uU,"CODE",{});var WPr=s(mY);JIe=r(WPr,"NewModelConfig"),WPr.forEach(t),YIe=r(uU,` then you can add those to the auto
classes like this:`),uU.forEach(t),BRe=i(c),m(BC.$$.fragment,c),PRe=i(c),w9=n(c,"P",{});var HPr=s(w9);KIe=r(HPr,"You will then be able to use the auto classes like you would usually do!"),HPr.forEach(t),$Re=i(c),m(Of.$$.fragment,c),IRe=i(c),zi=n(c,"H2",{class:!0});var qPe=s(zi);Vf=n(qPe,"A",{id:!0,class:!0,href:!0});var UPr=s(Vf);gY=n(UPr,"SPAN",{});var JPr=s(gY);m(PC.$$.fragment,JPr),JPr.forEach(t),UPr.forEach(t),ZIe=i(qPe),hY=n(qPe,"SPAN",{});var YPr=s(hY);eqe=r(YPr,"AutoConfig"),YPr.forEach(t),qPe.forEach(t),qRe=i(c),Qo=n(c,"DIV",{class:!0});var Vs=s(Qo);m($C.$$.fragment,Vs),oqe=i(Vs),IC=n(Vs,"P",{});var NPe=s(IC);rqe=r(NPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),A9=n(NPe,"A",{href:!0});var KPr=s(A9);tqe=r(KPr,"from_pretrained()"),KPr.forEach(t),aqe=r(NPe," class method."),NPe.forEach(t),nqe=i(Vs),qC=n(Vs,"P",{});var jPe=s(qC);sqe=r(jPe,"This class cannot be instantiated directly using "),pY=n(jPe,"CODE",{});var ZPr=s(pY);lqe=r(ZPr,"__init__()"),ZPr.forEach(t),iqe=r(jPe," (throws an error)."),jPe.forEach(t),dqe=i(Vs),mo=n(Vs,"DIV",{class:!0});var ga=s(mo);m(NC.$$.fragment,ga),cqe=i(ga),_Y=n(ga,"P",{});var e$r=s(_Y);fqe=r(e$r,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),e$r.forEach(t),mqe=i(ga),Qi=n(ga,"P",{});var bU=s(Qi);gqe=r(bU,"The configuration class to instantiate is selected based on the "),uY=n(bU,"CODE",{});var o$r=s(uY);hqe=r(o$r,"model_type"),o$r.forEach(t),pqe=r(bU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),bY=n(bU,"CODE",{});var r$r=s(bY);_qe=r(r$r,"pretrained_model_name_or_path"),r$r.forEach(t),uqe=r(bU,":"),bU.forEach(t),bqe=i(ga),v=n(ga,"UL",{});var F=s(v);Xf=n(F,"LI",{});var JTe=s(Xf);vY=n(JTe,"STRONG",{});var t$r=s(vY);vqe=r(t$r,"albert"),t$r.forEach(t),Fqe=r(JTe," \u2014 "),y9=n(JTe,"A",{href:!0});var a$r=s(y9);Tqe=r(a$r,"AlbertConfig"),a$r.forEach(t),Mqe=r(JTe," (ALBERT model)"),JTe.forEach(t),Eqe=i(F),zf=n(F,"LI",{});var YTe=s(zf);FY=n(YTe,"STRONG",{});var n$r=s(FY);Cqe=r(n$r,"bart"),n$r.forEach(t),wqe=r(YTe," \u2014 "),L9=n(YTe,"A",{href:!0});var s$r=s(L9);Aqe=r(s$r,"BartConfig"),s$r.forEach(t),yqe=r(YTe," (BART model)"),YTe.forEach(t),Lqe=i(F),Qf=n(F,"LI",{});var KTe=s(Qf);TY=n(KTe,"STRONG",{});var l$r=s(TY);xqe=r(l$r,"beit"),l$r.forEach(t),kqe=r(KTe," \u2014 "),x9=n(KTe,"A",{href:!0});var i$r=s(x9);Sqe=r(i$r,"BeitConfig"),i$r.forEach(t),Rqe=r(KTe," (BEiT model)"),KTe.forEach(t),Bqe=i(F),Wf=n(F,"LI",{});var ZTe=s(Wf);MY=n(ZTe,"STRONG",{});var d$r=s(MY);Pqe=r(d$r,"bert"),d$r.forEach(t),$qe=r(ZTe," \u2014 "),k9=n(ZTe,"A",{href:!0});var c$r=s(k9);Iqe=r(c$r,"BertConfig"),c$r.forEach(t),qqe=r(ZTe," (BERT model)"),ZTe.forEach(t),Nqe=i(F),Hf=n(F,"LI",{});var e7e=s(Hf);EY=n(e7e,"STRONG",{});var f$r=s(EY);jqe=r(f$r,"bert-generation"),f$r.forEach(t),Dqe=r(e7e," \u2014 "),S9=n(e7e,"A",{href:!0});var m$r=s(S9);Gqe=r(m$r,"BertGenerationConfig"),m$r.forEach(t),Oqe=r(e7e," (Bert Generation model)"),e7e.forEach(t),Vqe=i(F),Uf=n(F,"LI",{});var o7e=s(Uf);CY=n(o7e,"STRONG",{});var g$r=s(CY);Xqe=r(g$r,"big_bird"),g$r.forEach(t),zqe=r(o7e," \u2014 "),R9=n(o7e,"A",{href:!0});var h$r=s(R9);Qqe=r(h$r,"BigBirdConfig"),h$r.forEach(t),Wqe=r(o7e," (BigBird model)"),o7e.forEach(t),Hqe=i(F),Jf=n(F,"LI",{});var r7e=s(Jf);wY=n(r7e,"STRONG",{});var p$r=s(wY);Uqe=r(p$r,"bigbird_pegasus"),p$r.forEach(t),Jqe=r(r7e," \u2014 "),B9=n(r7e,"A",{href:!0});var _$r=s(B9);Yqe=r(_$r,"BigBirdPegasusConfig"),_$r.forEach(t),Kqe=r(r7e," (BigBirdPegasus model)"),r7e.forEach(t),Zqe=i(F),Yf=n(F,"LI",{});var t7e=s(Yf);AY=n(t7e,"STRONG",{});var u$r=s(AY);eNe=r(u$r,"blenderbot"),u$r.forEach(t),oNe=r(t7e," \u2014 "),P9=n(t7e,"A",{href:!0});var b$r=s(P9);rNe=r(b$r,"BlenderbotConfig"),b$r.forEach(t),tNe=r(t7e," (Blenderbot model)"),t7e.forEach(t),aNe=i(F),Kf=n(F,"LI",{});var a7e=s(Kf);yY=n(a7e,"STRONG",{});var v$r=s(yY);nNe=r(v$r,"blenderbot-small"),v$r.forEach(t),sNe=r(a7e," \u2014 "),$9=n(a7e,"A",{href:!0});var F$r=s($9);lNe=r(F$r,"BlenderbotSmallConfig"),F$r.forEach(t),iNe=r(a7e," (BlenderbotSmall model)"),a7e.forEach(t),dNe=i(F),Zf=n(F,"LI",{});var n7e=s(Zf);LY=n(n7e,"STRONG",{});var T$r=s(LY);cNe=r(T$r,"camembert"),T$r.forEach(t),fNe=r(n7e," \u2014 "),I9=n(n7e,"A",{href:!0});var M$r=s(I9);mNe=r(M$r,"CamembertConfig"),M$r.forEach(t),gNe=r(n7e," (CamemBERT model)"),n7e.forEach(t),hNe=i(F),em=n(F,"LI",{});var s7e=s(em);xY=n(s7e,"STRONG",{});var E$r=s(xY);pNe=r(E$r,"canine"),E$r.forEach(t),_Ne=r(s7e," \u2014 "),q9=n(s7e,"A",{href:!0});var C$r=s(q9);uNe=r(C$r,"CanineConfig"),C$r.forEach(t),bNe=r(s7e," (Canine model)"),s7e.forEach(t),vNe=i(F),om=n(F,"LI",{});var l7e=s(om);kY=n(l7e,"STRONG",{});var w$r=s(kY);FNe=r(w$r,"clip"),w$r.forEach(t),TNe=r(l7e," \u2014 "),N9=n(l7e,"A",{href:!0});var A$r=s(N9);MNe=r(A$r,"CLIPConfig"),A$r.forEach(t),ENe=r(l7e," (CLIP model)"),l7e.forEach(t),CNe=i(F),rm=n(F,"LI",{});var i7e=s(rm);SY=n(i7e,"STRONG",{});var y$r=s(SY);wNe=r(y$r,"convbert"),y$r.forEach(t),ANe=r(i7e," \u2014 "),j9=n(i7e,"A",{href:!0});var L$r=s(j9);yNe=r(L$r,"ConvBertConfig"),L$r.forEach(t),LNe=r(i7e," (ConvBERT model)"),i7e.forEach(t),xNe=i(F),tm=n(F,"LI",{});var d7e=s(tm);RY=n(d7e,"STRONG",{});var x$r=s(RY);kNe=r(x$r,"convnext"),x$r.forEach(t),SNe=r(d7e," \u2014 "),D9=n(d7e,"A",{href:!0});var k$r=s(D9);RNe=r(k$r,"ConvNextConfig"),k$r.forEach(t),BNe=r(d7e," (ConvNext model)"),d7e.forEach(t),PNe=i(F),am=n(F,"LI",{});var c7e=s(am);BY=n(c7e,"STRONG",{});var S$r=s(BY);$Ne=r(S$r,"ctrl"),S$r.forEach(t),INe=r(c7e," \u2014 "),G9=n(c7e,"A",{href:!0});var R$r=s(G9);qNe=r(R$r,"CTRLConfig"),R$r.forEach(t),NNe=r(c7e," (CTRL model)"),c7e.forEach(t),jNe=i(F),nm=n(F,"LI",{});var f7e=s(nm);PY=n(f7e,"STRONG",{});var B$r=s(PY);DNe=r(B$r,"data2vec-audio"),B$r.forEach(t),GNe=r(f7e," \u2014 "),O9=n(f7e,"A",{href:!0});var P$r=s(O9);ONe=r(P$r,"Data2VecAudioConfig"),P$r.forEach(t),VNe=r(f7e," (Data2VecAudio model)"),f7e.forEach(t),XNe=i(F),sm=n(F,"LI",{});var m7e=s(sm);$Y=n(m7e,"STRONG",{});var $$r=s($Y);zNe=r($$r,"data2vec-text"),$$r.forEach(t),QNe=r(m7e," \u2014 "),V9=n(m7e,"A",{href:!0});var I$r=s(V9);WNe=r(I$r,"Data2VecTextConfig"),I$r.forEach(t),HNe=r(m7e," (Data2VecText model)"),m7e.forEach(t),UNe=i(F),lm=n(F,"LI",{});var g7e=s(lm);IY=n(g7e,"STRONG",{});var q$r=s(IY);JNe=r(q$r,"data2vec-vision"),q$r.forEach(t),YNe=r(g7e," \u2014 "),X9=n(g7e,"A",{href:!0});var N$r=s(X9);KNe=r(N$r,"Data2VecVisionConfig"),N$r.forEach(t),ZNe=r(g7e," (Data2VecVision model)"),g7e.forEach(t),eje=i(F),im=n(F,"LI",{});var h7e=s(im);qY=n(h7e,"STRONG",{});var j$r=s(qY);oje=r(j$r,"deberta"),j$r.forEach(t),rje=r(h7e," \u2014 "),z9=n(h7e,"A",{href:!0});var D$r=s(z9);tje=r(D$r,"DebertaConfig"),D$r.forEach(t),aje=r(h7e," (DeBERTa model)"),h7e.forEach(t),nje=i(F),dm=n(F,"LI",{});var p7e=s(dm);NY=n(p7e,"STRONG",{});var G$r=s(NY);sje=r(G$r,"deberta-v2"),G$r.forEach(t),lje=r(p7e," \u2014 "),Q9=n(p7e,"A",{href:!0});var O$r=s(Q9);ije=r(O$r,"DebertaV2Config"),O$r.forEach(t),dje=r(p7e," (DeBERTa-v2 model)"),p7e.forEach(t),cje=i(F),cm=n(F,"LI",{});var _7e=s(cm);jY=n(_7e,"STRONG",{});var V$r=s(jY);fje=r(V$r,"decision_transformer"),V$r.forEach(t),mje=r(_7e," \u2014 "),W9=n(_7e,"A",{href:!0});var X$r=s(W9);gje=r(X$r,"DecisionTransformerConfig"),X$r.forEach(t),hje=r(_7e," (Decision Transformer model)"),_7e.forEach(t),pje=i(F),fm=n(F,"LI",{});var u7e=s(fm);DY=n(u7e,"STRONG",{});var z$r=s(DY);_je=r(z$r,"deit"),z$r.forEach(t),uje=r(u7e," \u2014 "),H9=n(u7e,"A",{href:!0});var Q$r=s(H9);bje=r(Q$r,"DeiTConfig"),Q$r.forEach(t),vje=r(u7e," (DeiT model)"),u7e.forEach(t),Fje=i(F),mm=n(F,"LI",{});var b7e=s(mm);GY=n(b7e,"STRONG",{});var W$r=s(GY);Tje=r(W$r,"detr"),W$r.forEach(t),Mje=r(b7e," \u2014 "),U9=n(b7e,"A",{href:!0});var H$r=s(U9);Eje=r(H$r,"DetrConfig"),H$r.forEach(t),Cje=r(b7e," (DETR model)"),b7e.forEach(t),wje=i(F),gm=n(F,"LI",{});var v7e=s(gm);OY=n(v7e,"STRONG",{});var U$r=s(OY);Aje=r(U$r,"distilbert"),U$r.forEach(t),yje=r(v7e," \u2014 "),J9=n(v7e,"A",{href:!0});var J$r=s(J9);Lje=r(J$r,"DistilBertConfig"),J$r.forEach(t),xje=r(v7e," (DistilBERT model)"),v7e.forEach(t),kje=i(F),hm=n(F,"LI",{});var F7e=s(hm);VY=n(F7e,"STRONG",{});var Y$r=s(VY);Sje=r(Y$r,"dpr"),Y$r.forEach(t),Rje=r(F7e," \u2014 "),Y9=n(F7e,"A",{href:!0});var K$r=s(Y9);Bje=r(K$r,"DPRConfig"),K$r.forEach(t),Pje=r(F7e," (DPR model)"),F7e.forEach(t),$je=i(F),pm=n(F,"LI",{});var T7e=s(pm);XY=n(T7e,"STRONG",{});var Z$r=s(XY);Ije=r(Z$r,"dpt"),Z$r.forEach(t),qje=r(T7e," \u2014 "),K9=n(T7e,"A",{href:!0});var eIr=s(K9);Nje=r(eIr,"DPTConfig"),eIr.forEach(t),jje=r(T7e," (DPT model)"),T7e.forEach(t),Dje=i(F),_m=n(F,"LI",{});var M7e=s(_m);zY=n(M7e,"STRONG",{});var oIr=s(zY);Gje=r(oIr,"electra"),oIr.forEach(t),Oje=r(M7e," \u2014 "),Z9=n(M7e,"A",{href:!0});var rIr=s(Z9);Vje=r(rIr,"ElectraConfig"),rIr.forEach(t),Xje=r(M7e," (ELECTRA model)"),M7e.forEach(t),zje=i(F),um=n(F,"LI",{});var E7e=s(um);QY=n(E7e,"STRONG",{});var tIr=s(QY);Qje=r(tIr,"encoder-decoder"),tIr.forEach(t),Wje=r(E7e," \u2014 "),ex=n(E7e,"A",{href:!0});var aIr=s(ex);Hje=r(aIr,"EncoderDecoderConfig"),aIr.forEach(t),Uje=r(E7e," (Encoder decoder model)"),E7e.forEach(t),Jje=i(F),bm=n(F,"LI",{});var C7e=s(bm);WY=n(C7e,"STRONG",{});var nIr=s(WY);Yje=r(nIr,"flaubert"),nIr.forEach(t),Kje=r(C7e," \u2014 "),ox=n(C7e,"A",{href:!0});var sIr=s(ox);Zje=r(sIr,"FlaubertConfig"),sIr.forEach(t),eDe=r(C7e," (FlauBERT model)"),C7e.forEach(t),oDe=i(F),vm=n(F,"LI",{});var w7e=s(vm);HY=n(w7e,"STRONG",{});var lIr=s(HY);rDe=r(lIr,"fnet"),lIr.forEach(t),tDe=r(w7e," \u2014 "),rx=n(w7e,"A",{href:!0});var iIr=s(rx);aDe=r(iIr,"FNetConfig"),iIr.forEach(t),nDe=r(w7e," (FNet model)"),w7e.forEach(t),sDe=i(F),Fm=n(F,"LI",{});var A7e=s(Fm);UY=n(A7e,"STRONG",{});var dIr=s(UY);lDe=r(dIr,"fsmt"),dIr.forEach(t),iDe=r(A7e," \u2014 "),tx=n(A7e,"A",{href:!0});var cIr=s(tx);dDe=r(cIr,"FSMTConfig"),cIr.forEach(t),cDe=r(A7e," (FairSeq Machine-Translation model)"),A7e.forEach(t),fDe=i(F),Tm=n(F,"LI",{});var y7e=s(Tm);JY=n(y7e,"STRONG",{});var fIr=s(JY);mDe=r(fIr,"funnel"),fIr.forEach(t),gDe=r(y7e," \u2014 "),ax=n(y7e,"A",{href:!0});var mIr=s(ax);hDe=r(mIr,"FunnelConfig"),mIr.forEach(t),pDe=r(y7e," (Funnel Transformer model)"),y7e.forEach(t),_De=i(F),Mm=n(F,"LI",{});var L7e=s(Mm);YY=n(L7e,"STRONG",{});var gIr=s(YY);uDe=r(gIr,"glpn"),gIr.forEach(t),bDe=r(L7e," \u2014 "),nx=n(L7e,"A",{href:!0});var hIr=s(nx);vDe=r(hIr,"GLPNConfig"),hIr.forEach(t),FDe=r(L7e," (GLPN model)"),L7e.forEach(t),TDe=i(F),Em=n(F,"LI",{});var x7e=s(Em);KY=n(x7e,"STRONG",{});var pIr=s(KY);MDe=r(pIr,"gpt2"),pIr.forEach(t),EDe=r(x7e," \u2014 "),sx=n(x7e,"A",{href:!0});var _Ir=s(sx);CDe=r(_Ir,"GPT2Config"),_Ir.forEach(t),wDe=r(x7e," (OpenAI GPT-2 model)"),x7e.forEach(t),ADe=i(F),Cm=n(F,"LI",{});var k7e=s(Cm);ZY=n(k7e,"STRONG",{});var uIr=s(ZY);yDe=r(uIr,"gpt_neo"),uIr.forEach(t),LDe=r(k7e," \u2014 "),lx=n(k7e,"A",{href:!0});var bIr=s(lx);xDe=r(bIr,"GPTNeoConfig"),bIr.forEach(t),kDe=r(k7e," (GPT Neo model)"),k7e.forEach(t),SDe=i(F),wm=n(F,"LI",{});var S7e=s(wm);eK=n(S7e,"STRONG",{});var vIr=s(eK);RDe=r(vIr,"gptj"),vIr.forEach(t),BDe=r(S7e," \u2014 "),ix=n(S7e,"A",{href:!0});var FIr=s(ix);PDe=r(FIr,"GPTJConfig"),FIr.forEach(t),$De=r(S7e," (GPT-J model)"),S7e.forEach(t),IDe=i(F),Am=n(F,"LI",{});var R7e=s(Am);oK=n(R7e,"STRONG",{});var TIr=s(oK);qDe=r(TIr,"hubert"),TIr.forEach(t),NDe=r(R7e," \u2014 "),dx=n(R7e,"A",{href:!0});var MIr=s(dx);jDe=r(MIr,"HubertConfig"),MIr.forEach(t),DDe=r(R7e," (Hubert model)"),R7e.forEach(t),GDe=i(F),ym=n(F,"LI",{});var B7e=s(ym);rK=n(B7e,"STRONG",{});var EIr=s(rK);ODe=r(EIr,"ibert"),EIr.forEach(t),VDe=r(B7e," \u2014 "),cx=n(B7e,"A",{href:!0});var CIr=s(cx);XDe=r(CIr,"IBertConfig"),CIr.forEach(t),zDe=r(B7e," (I-BERT model)"),B7e.forEach(t),QDe=i(F),Lm=n(F,"LI",{});var P7e=s(Lm);tK=n(P7e,"STRONG",{});var wIr=s(tK);WDe=r(wIr,"imagegpt"),wIr.forEach(t),HDe=r(P7e," \u2014 "),fx=n(P7e,"A",{href:!0});var AIr=s(fx);UDe=r(AIr,"ImageGPTConfig"),AIr.forEach(t),JDe=r(P7e," (ImageGPT model)"),P7e.forEach(t),YDe=i(F),xm=n(F,"LI",{});var $7e=s(xm);aK=n($7e,"STRONG",{});var yIr=s(aK);KDe=r(yIr,"layoutlm"),yIr.forEach(t),ZDe=r($7e," \u2014 "),mx=n($7e,"A",{href:!0});var LIr=s(mx);eGe=r(LIr,"LayoutLMConfig"),LIr.forEach(t),oGe=r($7e," (LayoutLM model)"),$7e.forEach(t),rGe=i(F),km=n(F,"LI",{});var I7e=s(km);nK=n(I7e,"STRONG",{});var xIr=s(nK);tGe=r(xIr,"layoutlmv2"),xIr.forEach(t),aGe=r(I7e," \u2014 "),gx=n(I7e,"A",{href:!0});var kIr=s(gx);nGe=r(kIr,"LayoutLMv2Config"),kIr.forEach(t),sGe=r(I7e," (LayoutLMv2 model)"),I7e.forEach(t),lGe=i(F),Sm=n(F,"LI",{});var q7e=s(Sm);sK=n(q7e,"STRONG",{});var SIr=s(sK);iGe=r(SIr,"led"),SIr.forEach(t),dGe=r(q7e," \u2014 "),hx=n(q7e,"A",{href:!0});var RIr=s(hx);cGe=r(RIr,"LEDConfig"),RIr.forEach(t),fGe=r(q7e," (LED model)"),q7e.forEach(t),mGe=i(F),Rm=n(F,"LI",{});var N7e=s(Rm);lK=n(N7e,"STRONG",{});var BIr=s(lK);gGe=r(BIr,"longformer"),BIr.forEach(t),hGe=r(N7e," \u2014 "),px=n(N7e,"A",{href:!0});var PIr=s(px);pGe=r(PIr,"LongformerConfig"),PIr.forEach(t),_Ge=r(N7e," (Longformer model)"),N7e.forEach(t),uGe=i(F),Bm=n(F,"LI",{});var j7e=s(Bm);iK=n(j7e,"STRONG",{});var $Ir=s(iK);bGe=r($Ir,"luke"),$Ir.forEach(t),vGe=r(j7e," \u2014 "),_x=n(j7e,"A",{href:!0});var IIr=s(_x);FGe=r(IIr,"LukeConfig"),IIr.forEach(t),TGe=r(j7e," (LUKE model)"),j7e.forEach(t),MGe=i(F),Pm=n(F,"LI",{});var D7e=s(Pm);dK=n(D7e,"STRONG",{});var qIr=s(dK);EGe=r(qIr,"lxmert"),qIr.forEach(t),CGe=r(D7e," \u2014 "),ux=n(D7e,"A",{href:!0});var NIr=s(ux);wGe=r(NIr,"LxmertConfig"),NIr.forEach(t),AGe=r(D7e," (LXMERT model)"),D7e.forEach(t),yGe=i(F),$m=n(F,"LI",{});var G7e=s($m);cK=n(G7e,"STRONG",{});var jIr=s(cK);LGe=r(jIr,"m2m_100"),jIr.forEach(t),xGe=r(G7e," \u2014 "),bx=n(G7e,"A",{href:!0});var DIr=s(bx);kGe=r(DIr,"M2M100Config"),DIr.forEach(t),SGe=r(G7e," (M2M100 model)"),G7e.forEach(t),RGe=i(F),Im=n(F,"LI",{});var O7e=s(Im);fK=n(O7e,"STRONG",{});var GIr=s(fK);BGe=r(GIr,"marian"),GIr.forEach(t),PGe=r(O7e," \u2014 "),vx=n(O7e,"A",{href:!0});var OIr=s(vx);$Ge=r(OIr,"MarianConfig"),OIr.forEach(t),IGe=r(O7e," (Marian model)"),O7e.forEach(t),qGe=i(F),qm=n(F,"LI",{});var V7e=s(qm);mK=n(V7e,"STRONG",{});var VIr=s(mK);NGe=r(VIr,"maskformer"),VIr.forEach(t),jGe=r(V7e," \u2014 "),Fx=n(V7e,"A",{href:!0});var XIr=s(Fx);DGe=r(XIr,"MaskFormerConfig"),XIr.forEach(t),GGe=r(V7e," (MaskFormer model)"),V7e.forEach(t),OGe=i(F),Nm=n(F,"LI",{});var X7e=s(Nm);gK=n(X7e,"STRONG",{});var zIr=s(gK);VGe=r(zIr,"mbart"),zIr.forEach(t),XGe=r(X7e," \u2014 "),Tx=n(X7e,"A",{href:!0});var QIr=s(Tx);zGe=r(QIr,"MBartConfig"),QIr.forEach(t),QGe=r(X7e," (mBART model)"),X7e.forEach(t),WGe=i(F),jm=n(F,"LI",{});var z7e=s(jm);hK=n(z7e,"STRONG",{});var WIr=s(hK);HGe=r(WIr,"megatron-bert"),WIr.forEach(t),UGe=r(z7e," \u2014 "),Mx=n(z7e,"A",{href:!0});var HIr=s(Mx);JGe=r(HIr,"MegatronBertConfig"),HIr.forEach(t),YGe=r(z7e," (MegatronBert model)"),z7e.forEach(t),KGe=i(F),Dm=n(F,"LI",{});var Q7e=s(Dm);pK=n(Q7e,"STRONG",{});var UIr=s(pK);ZGe=r(UIr,"mobilebert"),UIr.forEach(t),eOe=r(Q7e," \u2014 "),Ex=n(Q7e,"A",{href:!0});var JIr=s(Ex);oOe=r(JIr,"MobileBertConfig"),JIr.forEach(t),rOe=r(Q7e," (MobileBERT model)"),Q7e.forEach(t),tOe=i(F),Gm=n(F,"LI",{});var W7e=s(Gm);_K=n(W7e,"STRONG",{});var YIr=s(_K);aOe=r(YIr,"mpnet"),YIr.forEach(t),nOe=r(W7e," \u2014 "),Cx=n(W7e,"A",{href:!0});var KIr=s(Cx);sOe=r(KIr,"MPNetConfig"),KIr.forEach(t),lOe=r(W7e," (MPNet model)"),W7e.forEach(t),iOe=i(F),Om=n(F,"LI",{});var H7e=s(Om);uK=n(H7e,"STRONG",{});var ZIr=s(uK);dOe=r(ZIr,"mt5"),ZIr.forEach(t),cOe=r(H7e," \u2014 "),wx=n(H7e,"A",{href:!0});var eqr=s(wx);fOe=r(eqr,"MT5Config"),eqr.forEach(t),mOe=r(H7e," (mT5 model)"),H7e.forEach(t),gOe=i(F),Vm=n(F,"LI",{});var U7e=s(Vm);bK=n(U7e,"STRONG",{});var oqr=s(bK);hOe=r(oqr,"nystromformer"),oqr.forEach(t),pOe=r(U7e," \u2014 "),Ax=n(U7e,"A",{href:!0});var rqr=s(Ax);_Oe=r(rqr,"NystromformerConfig"),rqr.forEach(t),uOe=r(U7e," (Nystromformer model)"),U7e.forEach(t),bOe=i(F),Xm=n(F,"LI",{});var J7e=s(Xm);vK=n(J7e,"STRONG",{});var tqr=s(vK);vOe=r(tqr,"openai-gpt"),tqr.forEach(t),FOe=r(J7e," \u2014 "),yx=n(J7e,"A",{href:!0});var aqr=s(yx);TOe=r(aqr,"OpenAIGPTConfig"),aqr.forEach(t),MOe=r(J7e," (OpenAI GPT model)"),J7e.forEach(t),EOe=i(F),zm=n(F,"LI",{});var Y7e=s(zm);FK=n(Y7e,"STRONG",{});var nqr=s(FK);COe=r(nqr,"pegasus"),nqr.forEach(t),wOe=r(Y7e," \u2014 "),Lx=n(Y7e,"A",{href:!0});var sqr=s(Lx);AOe=r(sqr,"PegasusConfig"),sqr.forEach(t),yOe=r(Y7e," (Pegasus model)"),Y7e.forEach(t),LOe=i(F),Qm=n(F,"LI",{});var K7e=s(Qm);TK=n(K7e,"STRONG",{});var lqr=s(TK);xOe=r(lqr,"perceiver"),lqr.forEach(t),kOe=r(K7e," \u2014 "),xx=n(K7e,"A",{href:!0});var iqr=s(xx);SOe=r(iqr,"PerceiverConfig"),iqr.forEach(t),ROe=r(K7e," (Perceiver model)"),K7e.forEach(t),BOe=i(F),Wm=n(F,"LI",{});var Z7e=s(Wm);MK=n(Z7e,"STRONG",{});var dqr=s(MK);POe=r(dqr,"plbart"),dqr.forEach(t),$Oe=r(Z7e," \u2014 "),kx=n(Z7e,"A",{href:!0});var cqr=s(kx);IOe=r(cqr,"PLBartConfig"),cqr.forEach(t),qOe=r(Z7e," (PLBart model)"),Z7e.forEach(t),NOe=i(F),Hm=n(F,"LI",{});var eMe=s(Hm);EK=n(eMe,"STRONG",{});var fqr=s(EK);jOe=r(fqr,"poolformer"),fqr.forEach(t),DOe=r(eMe," \u2014 "),Sx=n(eMe,"A",{href:!0});var mqr=s(Sx);GOe=r(mqr,"PoolFormerConfig"),mqr.forEach(t),OOe=r(eMe," (PoolFormer model)"),eMe.forEach(t),VOe=i(F),Um=n(F,"LI",{});var oMe=s(Um);CK=n(oMe,"STRONG",{});var gqr=s(CK);XOe=r(gqr,"prophetnet"),gqr.forEach(t),zOe=r(oMe," \u2014 "),Rx=n(oMe,"A",{href:!0});var hqr=s(Rx);QOe=r(hqr,"ProphetNetConfig"),hqr.forEach(t),WOe=r(oMe," (ProphetNet model)"),oMe.forEach(t),HOe=i(F),Jm=n(F,"LI",{});var rMe=s(Jm);wK=n(rMe,"STRONG",{});var pqr=s(wK);UOe=r(pqr,"qdqbert"),pqr.forEach(t),JOe=r(rMe," \u2014 "),Bx=n(rMe,"A",{href:!0});var _qr=s(Bx);YOe=r(_qr,"QDQBertConfig"),_qr.forEach(t),KOe=r(rMe," (QDQBert model)"),rMe.forEach(t),ZOe=i(F),Ym=n(F,"LI",{});var tMe=s(Ym);AK=n(tMe,"STRONG",{});var uqr=s(AK);eVe=r(uqr,"rag"),uqr.forEach(t),oVe=r(tMe," \u2014 "),Px=n(tMe,"A",{href:!0});var bqr=s(Px);rVe=r(bqr,"RagConfig"),bqr.forEach(t),tVe=r(tMe," (RAG model)"),tMe.forEach(t),aVe=i(F),Km=n(F,"LI",{});var aMe=s(Km);yK=n(aMe,"STRONG",{});var vqr=s(yK);nVe=r(vqr,"realm"),vqr.forEach(t),sVe=r(aMe," \u2014 "),$x=n(aMe,"A",{href:!0});var Fqr=s($x);lVe=r(Fqr,"RealmConfig"),Fqr.forEach(t),iVe=r(aMe," (Realm model)"),aMe.forEach(t),dVe=i(F),Zm=n(F,"LI",{});var nMe=s(Zm);LK=n(nMe,"STRONG",{});var Tqr=s(LK);cVe=r(Tqr,"reformer"),Tqr.forEach(t),fVe=r(nMe," \u2014 "),Ix=n(nMe,"A",{href:!0});var Mqr=s(Ix);mVe=r(Mqr,"ReformerConfig"),Mqr.forEach(t),gVe=r(nMe," (Reformer model)"),nMe.forEach(t),hVe=i(F),eg=n(F,"LI",{});var sMe=s(eg);xK=n(sMe,"STRONG",{});var Eqr=s(xK);pVe=r(Eqr,"regnet"),Eqr.forEach(t),_Ve=r(sMe," \u2014 "),qx=n(sMe,"A",{href:!0});var Cqr=s(qx);uVe=r(Cqr,"RegNetConfig"),Cqr.forEach(t),bVe=r(sMe," (RegNet model)"),sMe.forEach(t),vVe=i(F),og=n(F,"LI",{});var lMe=s(og);kK=n(lMe,"STRONG",{});var wqr=s(kK);FVe=r(wqr,"rembert"),wqr.forEach(t),TVe=r(lMe," \u2014 "),Nx=n(lMe,"A",{href:!0});var Aqr=s(Nx);MVe=r(Aqr,"RemBertConfig"),Aqr.forEach(t),EVe=r(lMe," (RemBERT model)"),lMe.forEach(t),CVe=i(F),rg=n(F,"LI",{});var iMe=s(rg);SK=n(iMe,"STRONG",{});var yqr=s(SK);wVe=r(yqr,"resnet"),yqr.forEach(t),AVe=r(iMe," \u2014 "),jx=n(iMe,"A",{href:!0});var Lqr=s(jx);yVe=r(Lqr,"ResNetConfig"),Lqr.forEach(t),LVe=r(iMe," (ResNet model)"),iMe.forEach(t),xVe=i(F),tg=n(F,"LI",{});var dMe=s(tg);RK=n(dMe,"STRONG",{});var xqr=s(RK);kVe=r(xqr,"retribert"),xqr.forEach(t),SVe=r(dMe," \u2014 "),Dx=n(dMe,"A",{href:!0});var kqr=s(Dx);RVe=r(kqr,"RetriBertConfig"),kqr.forEach(t),BVe=r(dMe," (RetriBERT model)"),dMe.forEach(t),PVe=i(F),ag=n(F,"LI",{});var cMe=s(ag);BK=n(cMe,"STRONG",{});var Sqr=s(BK);$Ve=r(Sqr,"roberta"),Sqr.forEach(t),IVe=r(cMe," \u2014 "),Gx=n(cMe,"A",{href:!0});var Rqr=s(Gx);qVe=r(Rqr,"RobertaConfig"),Rqr.forEach(t),NVe=r(cMe," (RoBERTa model)"),cMe.forEach(t),jVe=i(F),ng=n(F,"LI",{});var fMe=s(ng);PK=n(fMe,"STRONG",{});var Bqr=s(PK);DVe=r(Bqr,"roformer"),Bqr.forEach(t),GVe=r(fMe," \u2014 "),Ox=n(fMe,"A",{href:!0});var Pqr=s(Ox);OVe=r(Pqr,"RoFormerConfig"),Pqr.forEach(t),VVe=r(fMe," (RoFormer model)"),fMe.forEach(t),XVe=i(F),sg=n(F,"LI",{});var mMe=s(sg);$K=n(mMe,"STRONG",{});var $qr=s($K);zVe=r($qr,"segformer"),$qr.forEach(t),QVe=r(mMe," \u2014 "),Vx=n(mMe,"A",{href:!0});var Iqr=s(Vx);WVe=r(Iqr,"SegformerConfig"),Iqr.forEach(t),HVe=r(mMe," (SegFormer model)"),mMe.forEach(t),UVe=i(F),lg=n(F,"LI",{});var gMe=s(lg);IK=n(gMe,"STRONG",{});var qqr=s(IK);JVe=r(qqr,"sew"),qqr.forEach(t),YVe=r(gMe," \u2014 "),Xx=n(gMe,"A",{href:!0});var Nqr=s(Xx);KVe=r(Nqr,"SEWConfig"),Nqr.forEach(t),ZVe=r(gMe," (SEW model)"),gMe.forEach(t),eXe=i(F),ig=n(F,"LI",{});var hMe=s(ig);qK=n(hMe,"STRONG",{});var jqr=s(qK);oXe=r(jqr,"sew-d"),jqr.forEach(t),rXe=r(hMe," \u2014 "),zx=n(hMe,"A",{href:!0});var Dqr=s(zx);tXe=r(Dqr,"SEWDConfig"),Dqr.forEach(t),aXe=r(hMe," (SEW-D model)"),hMe.forEach(t),nXe=i(F),dg=n(F,"LI",{});var pMe=s(dg);NK=n(pMe,"STRONG",{});var Gqr=s(NK);sXe=r(Gqr,"speech-encoder-decoder"),Gqr.forEach(t),lXe=r(pMe," \u2014 "),Qx=n(pMe,"A",{href:!0});var Oqr=s(Qx);iXe=r(Oqr,"SpeechEncoderDecoderConfig"),Oqr.forEach(t),dXe=r(pMe," (Speech Encoder decoder model)"),pMe.forEach(t),cXe=i(F),cg=n(F,"LI",{});var _Me=s(cg);jK=n(_Me,"STRONG",{});var Vqr=s(jK);fXe=r(Vqr,"speech_to_text"),Vqr.forEach(t),mXe=r(_Me," \u2014 "),Wx=n(_Me,"A",{href:!0});var Xqr=s(Wx);gXe=r(Xqr,"Speech2TextConfig"),Xqr.forEach(t),hXe=r(_Me," (Speech2Text model)"),_Me.forEach(t),pXe=i(F),fg=n(F,"LI",{});var uMe=s(fg);DK=n(uMe,"STRONG",{});var zqr=s(DK);_Xe=r(zqr,"speech_to_text_2"),zqr.forEach(t),uXe=r(uMe," \u2014 "),Hx=n(uMe,"A",{href:!0});var Qqr=s(Hx);bXe=r(Qqr,"Speech2Text2Config"),Qqr.forEach(t),vXe=r(uMe," (Speech2Text2 model)"),uMe.forEach(t),FXe=i(F),mg=n(F,"LI",{});var bMe=s(mg);GK=n(bMe,"STRONG",{});var Wqr=s(GK);TXe=r(Wqr,"splinter"),Wqr.forEach(t),MXe=r(bMe," \u2014 "),Ux=n(bMe,"A",{href:!0});var Hqr=s(Ux);EXe=r(Hqr,"SplinterConfig"),Hqr.forEach(t),CXe=r(bMe," (Splinter model)"),bMe.forEach(t),wXe=i(F),gg=n(F,"LI",{});var vMe=s(gg);OK=n(vMe,"STRONG",{});var Uqr=s(OK);AXe=r(Uqr,"squeezebert"),Uqr.forEach(t),yXe=r(vMe," \u2014 "),Jx=n(vMe,"A",{href:!0});var Jqr=s(Jx);LXe=r(Jqr,"SqueezeBertConfig"),Jqr.forEach(t),xXe=r(vMe," (SqueezeBERT model)"),vMe.forEach(t),kXe=i(F),hg=n(F,"LI",{});var FMe=s(hg);VK=n(FMe,"STRONG",{});var Yqr=s(VK);SXe=r(Yqr,"swin"),Yqr.forEach(t),RXe=r(FMe," \u2014 "),Yx=n(FMe,"A",{href:!0});var Kqr=s(Yx);BXe=r(Kqr,"SwinConfig"),Kqr.forEach(t),PXe=r(FMe," (Swin model)"),FMe.forEach(t),$Xe=i(F),pg=n(F,"LI",{});var TMe=s(pg);XK=n(TMe,"STRONG",{});var Zqr=s(XK);IXe=r(Zqr,"t5"),Zqr.forEach(t),qXe=r(TMe," \u2014 "),Kx=n(TMe,"A",{href:!0});var eNr=s(Kx);NXe=r(eNr,"T5Config"),eNr.forEach(t),jXe=r(TMe," (T5 model)"),TMe.forEach(t),DXe=i(F),_g=n(F,"LI",{});var MMe=s(_g);zK=n(MMe,"STRONG",{});var oNr=s(zK);GXe=r(oNr,"tapas"),oNr.forEach(t),OXe=r(MMe," \u2014 "),Zx=n(MMe,"A",{href:!0});var rNr=s(Zx);VXe=r(rNr,"TapasConfig"),rNr.forEach(t),XXe=r(MMe," (TAPAS model)"),MMe.forEach(t),zXe=i(F),ug=n(F,"LI",{});var EMe=s(ug);QK=n(EMe,"STRONG",{});var tNr=s(QK);QXe=r(tNr,"tapex"),tNr.forEach(t),WXe=r(EMe," \u2014 "),ek=n(EMe,"A",{href:!0});var aNr=s(ek);HXe=r(aNr,"BartConfig"),aNr.forEach(t),UXe=r(EMe," (TAPEX model)"),EMe.forEach(t),JXe=i(F),bg=n(F,"LI",{});var CMe=s(bg);WK=n(CMe,"STRONG",{});var nNr=s(WK);YXe=r(nNr,"transfo-xl"),nNr.forEach(t),KXe=r(CMe," \u2014 "),ok=n(CMe,"A",{href:!0});var sNr=s(ok);ZXe=r(sNr,"TransfoXLConfig"),sNr.forEach(t),eze=r(CMe," (Transformer-XL model)"),CMe.forEach(t),oze=i(F),vg=n(F,"LI",{});var wMe=s(vg);HK=n(wMe,"STRONG",{});var lNr=s(HK);rze=r(lNr,"trocr"),lNr.forEach(t),tze=r(wMe," \u2014 "),rk=n(wMe,"A",{href:!0});var iNr=s(rk);aze=r(iNr,"TrOCRConfig"),iNr.forEach(t),nze=r(wMe," (TrOCR model)"),wMe.forEach(t),sze=i(F),Fg=n(F,"LI",{});var AMe=s(Fg);UK=n(AMe,"STRONG",{});var dNr=s(UK);lze=r(dNr,"unispeech"),dNr.forEach(t),ize=r(AMe," \u2014 "),tk=n(AMe,"A",{href:!0});var cNr=s(tk);dze=r(cNr,"UniSpeechConfig"),cNr.forEach(t),cze=r(AMe," (UniSpeech model)"),AMe.forEach(t),fze=i(F),Tg=n(F,"LI",{});var yMe=s(Tg);JK=n(yMe,"STRONG",{});var fNr=s(JK);mze=r(fNr,"unispeech-sat"),fNr.forEach(t),gze=r(yMe," \u2014 "),ak=n(yMe,"A",{href:!0});var mNr=s(ak);hze=r(mNr,"UniSpeechSatConfig"),mNr.forEach(t),pze=r(yMe," (UniSpeechSat model)"),yMe.forEach(t),_ze=i(F),Mg=n(F,"LI",{});var LMe=s(Mg);YK=n(LMe,"STRONG",{});var gNr=s(YK);uze=r(gNr,"van"),gNr.forEach(t),bze=r(LMe," \u2014 "),nk=n(LMe,"A",{href:!0});var hNr=s(nk);vze=r(hNr,"VanConfig"),hNr.forEach(t),Fze=r(LMe," (VAN model)"),LMe.forEach(t),Tze=i(F),Eg=n(F,"LI",{});var xMe=s(Eg);KK=n(xMe,"STRONG",{});var pNr=s(KK);Mze=r(pNr,"vilt"),pNr.forEach(t),Eze=r(xMe," \u2014 "),sk=n(xMe,"A",{href:!0});var _Nr=s(sk);Cze=r(_Nr,"ViltConfig"),_Nr.forEach(t),wze=r(xMe," (ViLT model)"),xMe.forEach(t),Aze=i(F),Cg=n(F,"LI",{});var kMe=s(Cg);ZK=n(kMe,"STRONG",{});var uNr=s(ZK);yze=r(uNr,"vision-encoder-decoder"),uNr.forEach(t),Lze=r(kMe," \u2014 "),lk=n(kMe,"A",{href:!0});var bNr=s(lk);xze=r(bNr,"VisionEncoderDecoderConfig"),bNr.forEach(t),kze=r(kMe," (Vision Encoder decoder model)"),kMe.forEach(t),Sze=i(F),wg=n(F,"LI",{});var SMe=s(wg);eZ=n(SMe,"STRONG",{});var vNr=s(eZ);Rze=r(vNr,"vision-text-dual-encoder"),vNr.forEach(t),Bze=r(SMe," \u2014 "),ik=n(SMe,"A",{href:!0});var FNr=s(ik);Pze=r(FNr,"VisionTextDualEncoderConfig"),FNr.forEach(t),$ze=r(SMe," (VisionTextDualEncoder model)"),SMe.forEach(t),Ize=i(F),Ag=n(F,"LI",{});var RMe=s(Ag);oZ=n(RMe,"STRONG",{});var TNr=s(oZ);qze=r(TNr,"visual_bert"),TNr.forEach(t),Nze=r(RMe," \u2014 "),dk=n(RMe,"A",{href:!0});var MNr=s(dk);jze=r(MNr,"VisualBertConfig"),MNr.forEach(t),Dze=r(RMe," (VisualBert model)"),RMe.forEach(t),Gze=i(F),yg=n(F,"LI",{});var BMe=s(yg);rZ=n(BMe,"STRONG",{});var ENr=s(rZ);Oze=r(ENr,"vit"),ENr.forEach(t),Vze=r(BMe," \u2014 "),ck=n(BMe,"A",{href:!0});var CNr=s(ck);Xze=r(CNr,"ViTConfig"),CNr.forEach(t),zze=r(BMe," (ViT model)"),BMe.forEach(t),Qze=i(F),Lg=n(F,"LI",{});var PMe=s(Lg);tZ=n(PMe,"STRONG",{});var wNr=s(tZ);Wze=r(wNr,"vit_mae"),wNr.forEach(t),Hze=r(PMe," \u2014 "),fk=n(PMe,"A",{href:!0});var ANr=s(fk);Uze=r(ANr,"ViTMAEConfig"),ANr.forEach(t),Jze=r(PMe," (ViTMAE model)"),PMe.forEach(t),Yze=i(F),xg=n(F,"LI",{});var $Me=s(xg);aZ=n($Me,"STRONG",{});var yNr=s(aZ);Kze=r(yNr,"wav2vec2"),yNr.forEach(t),Zze=r($Me," \u2014 "),mk=n($Me,"A",{href:!0});var LNr=s(mk);eQe=r(LNr,"Wav2Vec2Config"),LNr.forEach(t),oQe=r($Me," (Wav2Vec2 model)"),$Me.forEach(t),rQe=i(F),kg=n(F,"LI",{});var IMe=s(kg);nZ=n(IMe,"STRONG",{});var xNr=s(nZ);tQe=r(xNr,"wavlm"),xNr.forEach(t),aQe=r(IMe," \u2014 "),gk=n(IMe,"A",{href:!0});var kNr=s(gk);nQe=r(kNr,"WavLMConfig"),kNr.forEach(t),sQe=r(IMe," (WavLM model)"),IMe.forEach(t),lQe=i(F),Sg=n(F,"LI",{});var qMe=s(Sg);sZ=n(qMe,"STRONG",{});var SNr=s(sZ);iQe=r(SNr,"xglm"),SNr.forEach(t),dQe=r(qMe," \u2014 "),hk=n(qMe,"A",{href:!0});var RNr=s(hk);cQe=r(RNr,"XGLMConfig"),RNr.forEach(t),fQe=r(qMe," (XGLM model)"),qMe.forEach(t),mQe=i(F),Rg=n(F,"LI",{});var NMe=s(Rg);lZ=n(NMe,"STRONG",{});var BNr=s(lZ);gQe=r(BNr,"xlm"),BNr.forEach(t),hQe=r(NMe," \u2014 "),pk=n(NMe,"A",{href:!0});var PNr=s(pk);pQe=r(PNr,"XLMConfig"),PNr.forEach(t),_Qe=r(NMe," (XLM model)"),NMe.forEach(t),uQe=i(F),Bg=n(F,"LI",{});var jMe=s(Bg);iZ=n(jMe,"STRONG",{});var $Nr=s(iZ);bQe=r($Nr,"xlm-prophetnet"),$Nr.forEach(t),vQe=r(jMe," \u2014 "),_k=n(jMe,"A",{href:!0});var INr=s(_k);FQe=r(INr,"XLMProphetNetConfig"),INr.forEach(t),TQe=r(jMe," (XLMProphetNet model)"),jMe.forEach(t),MQe=i(F),Pg=n(F,"LI",{});var DMe=s(Pg);dZ=n(DMe,"STRONG",{});var qNr=s(dZ);EQe=r(qNr,"xlm-roberta"),qNr.forEach(t),CQe=r(DMe," \u2014 "),uk=n(DMe,"A",{href:!0});var NNr=s(uk);wQe=r(NNr,"XLMRobertaConfig"),NNr.forEach(t),AQe=r(DMe," (XLM-RoBERTa model)"),DMe.forEach(t),yQe=i(F),$g=n(F,"LI",{});var GMe=s($g);cZ=n(GMe,"STRONG",{});var jNr=s(cZ);LQe=r(jNr,"xlm-roberta-xl"),jNr.forEach(t),xQe=r(GMe," \u2014 "),bk=n(GMe,"A",{href:!0});var DNr=s(bk);kQe=r(DNr,"XLMRobertaXLConfig"),DNr.forEach(t),SQe=r(GMe," (XLM-RoBERTa-XL model)"),GMe.forEach(t),RQe=i(F),Ig=n(F,"LI",{});var OMe=s(Ig);fZ=n(OMe,"STRONG",{});var GNr=s(fZ);BQe=r(GNr,"xlnet"),GNr.forEach(t),PQe=r(OMe," \u2014 "),vk=n(OMe,"A",{href:!0});var ONr=s(vk);$Qe=r(ONr,"XLNetConfig"),ONr.forEach(t),IQe=r(OMe," (XLNet model)"),OMe.forEach(t),qQe=i(F),qg=n(F,"LI",{});var VMe=s(qg);mZ=n(VMe,"STRONG",{});var VNr=s(mZ);NQe=r(VNr,"yoso"),VNr.forEach(t),jQe=r(VMe," \u2014 "),Fk=n(VMe,"A",{href:!0});var XNr=s(Fk);DQe=r(XNr,"YosoConfig"),XNr.forEach(t),GQe=r(VMe," (YOSO model)"),VMe.forEach(t),F.forEach(t),OQe=i(ga),gZ=n(ga,"P",{});var zNr=s(gZ);VQe=r(zNr,"Examples:"),zNr.forEach(t),XQe=i(ga),m(jC.$$.fragment,ga),ga.forEach(t),zQe=i(Vs),Ng=n(Vs,"DIV",{class:!0});var DPe=s(Ng);m(DC.$$.fragment,DPe),QQe=i(DPe),hZ=n(DPe,"P",{});var QNr=s(hZ);WQe=r(QNr,"Register a new configuration for this class."),QNr.forEach(t),DPe.forEach(t),Vs.forEach(t),NRe=i(c),Wi=n(c,"H2",{class:!0});var GPe=s(Wi);jg=n(GPe,"A",{id:!0,class:!0,href:!0});var WNr=s(jg);pZ=n(WNr,"SPAN",{});var HNr=s(pZ);m(GC.$$.fragment,HNr),HNr.forEach(t),WNr.forEach(t),HQe=i(GPe),_Z=n(GPe,"SPAN",{});var UNr=s(_Z);UQe=r(UNr,"AutoTokenizer"),UNr.forEach(t),GPe.forEach(t),jRe=i(c),Wo=n(c,"DIV",{class:!0});var Xs=s(Wo);m(OC.$$.fragment,Xs),JQe=i(Xs),VC=n(Xs,"P",{});var OPe=s(VC);YQe=r(OPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Tk=n(OPe,"A",{href:!0});var JNr=s(Tk);KQe=r(JNr,"AutoTokenizer.from_pretrained()"),JNr.forEach(t),ZQe=r(OPe," class method."),OPe.forEach(t),eWe=i(Xs),XC=n(Xs,"P",{});var VPe=s(XC);oWe=r(VPe,"This class cannot be instantiated directly using "),uZ=n(VPe,"CODE",{});var YNr=s(uZ);rWe=r(YNr,"__init__()"),YNr.forEach(t),tWe=r(VPe," (throws an error)."),VPe.forEach(t),aWe=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(zC.$$.fragment,ha),nWe=i(ha),bZ=n(ha,"P",{});var KNr=s(bZ);sWe=r(KNr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),KNr.forEach(t),lWe=i(ha),Oa=n(ha,"P",{});var xE=s(Oa);iWe=r(xE,"The tokenizer class to instantiate is selected based on the "),vZ=n(xE,"CODE",{});var ZNr=s(vZ);dWe=r(ZNr,"model_type"),ZNr.forEach(t),cWe=r(xE,` property of the config object (either
passed as an argument or loaded from `),FZ=n(xE,"CODE",{});var ejr=s(FZ);fWe=r(ejr,"pretrained_model_name_or_path"),ejr.forEach(t),mWe=r(xE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TZ=n(xE,"CODE",{});var ojr=s(TZ);gWe=r(ojr,"pretrained_model_name_or_path"),ojr.forEach(t),hWe=r(xE,":"),xE.forEach(t),pWe=i(ha),E=n(ha,"UL",{});var w=s(E);Wn=n(w,"LI",{});var C8=s(Wn);MZ=n(C8,"STRONG",{});var rjr=s(MZ);_We=r(rjr,"albert"),rjr.forEach(t),uWe=r(C8," \u2014 "),Mk=n(C8,"A",{href:!0});var tjr=s(Mk);bWe=r(tjr,"AlbertTokenizer"),tjr.forEach(t),vWe=r(C8," or "),Ek=n(C8,"A",{href:!0});var ajr=s(Ek);FWe=r(ajr,"AlbertTokenizerFast"),ajr.forEach(t),TWe=r(C8," (ALBERT model)"),C8.forEach(t),MWe=i(w),Hn=n(w,"LI",{});var w8=s(Hn);EZ=n(w8,"STRONG",{});var njr=s(EZ);EWe=r(njr,"bart"),njr.forEach(t),CWe=r(w8," \u2014 "),Ck=n(w8,"A",{href:!0});var sjr=s(Ck);wWe=r(sjr,"BartTokenizer"),sjr.forEach(t),AWe=r(w8," or "),wk=n(w8,"A",{href:!0});var ljr=s(wk);yWe=r(ljr,"BartTokenizerFast"),ljr.forEach(t),LWe=r(w8," (BART model)"),w8.forEach(t),xWe=i(w),Un=n(w,"LI",{});var A8=s(Un);CZ=n(A8,"STRONG",{});var ijr=s(CZ);kWe=r(ijr,"barthez"),ijr.forEach(t),SWe=r(A8," \u2014 "),Ak=n(A8,"A",{href:!0});var djr=s(Ak);RWe=r(djr,"BarthezTokenizer"),djr.forEach(t),BWe=r(A8," or "),yk=n(A8,"A",{href:!0});var cjr=s(yk);PWe=r(cjr,"BarthezTokenizerFast"),cjr.forEach(t),$We=r(A8," (BARThez model)"),A8.forEach(t),IWe=i(w),Dg=n(w,"LI",{});var XMe=s(Dg);wZ=n(XMe,"STRONG",{});var fjr=s(wZ);qWe=r(fjr,"bartpho"),fjr.forEach(t),NWe=r(XMe," \u2014 "),Lk=n(XMe,"A",{href:!0});var mjr=s(Lk);jWe=r(mjr,"BartphoTokenizer"),mjr.forEach(t),DWe=r(XMe," (BARTpho model)"),XMe.forEach(t),GWe=i(w),Jn=n(w,"LI",{});var y8=s(Jn);AZ=n(y8,"STRONG",{});var gjr=s(AZ);OWe=r(gjr,"bert"),gjr.forEach(t),VWe=r(y8," \u2014 "),xk=n(y8,"A",{href:!0});var hjr=s(xk);XWe=r(hjr,"BertTokenizer"),hjr.forEach(t),zWe=r(y8," or "),kk=n(y8,"A",{href:!0});var pjr=s(kk);QWe=r(pjr,"BertTokenizerFast"),pjr.forEach(t),WWe=r(y8," (BERT model)"),y8.forEach(t),HWe=i(w),Gg=n(w,"LI",{});var zMe=s(Gg);yZ=n(zMe,"STRONG",{});var _jr=s(yZ);UWe=r(_jr,"bert-generation"),_jr.forEach(t),JWe=r(zMe," \u2014 "),Sk=n(zMe,"A",{href:!0});var ujr=s(Sk);YWe=r(ujr,"BertGenerationTokenizer"),ujr.forEach(t),KWe=r(zMe," (Bert Generation model)"),zMe.forEach(t),ZWe=i(w),Og=n(w,"LI",{});var QMe=s(Og);LZ=n(QMe,"STRONG",{});var bjr=s(LZ);eHe=r(bjr,"bert-japanese"),bjr.forEach(t),oHe=r(QMe," \u2014 "),Rk=n(QMe,"A",{href:!0});var vjr=s(Rk);rHe=r(vjr,"BertJapaneseTokenizer"),vjr.forEach(t),tHe=r(QMe," (BertJapanese model)"),QMe.forEach(t),aHe=i(w),Vg=n(w,"LI",{});var WMe=s(Vg);xZ=n(WMe,"STRONG",{});var Fjr=s(xZ);nHe=r(Fjr,"bertweet"),Fjr.forEach(t),sHe=r(WMe," \u2014 "),Bk=n(WMe,"A",{href:!0});var Tjr=s(Bk);lHe=r(Tjr,"BertweetTokenizer"),Tjr.forEach(t),iHe=r(WMe," (Bertweet model)"),WMe.forEach(t),dHe=i(w),Yn=n(w,"LI",{});var L8=s(Yn);kZ=n(L8,"STRONG",{});var Mjr=s(kZ);cHe=r(Mjr,"big_bird"),Mjr.forEach(t),fHe=r(L8," \u2014 "),Pk=n(L8,"A",{href:!0});var Ejr=s(Pk);mHe=r(Ejr,"BigBirdTokenizer"),Ejr.forEach(t),gHe=r(L8," or "),$k=n(L8,"A",{href:!0});var Cjr=s($k);hHe=r(Cjr,"BigBirdTokenizerFast"),Cjr.forEach(t),pHe=r(L8," (BigBird model)"),L8.forEach(t),_He=i(w),Kn=n(w,"LI",{});var x8=s(Kn);SZ=n(x8,"STRONG",{});var wjr=s(SZ);uHe=r(wjr,"bigbird_pegasus"),wjr.forEach(t),bHe=r(x8," \u2014 "),Ik=n(x8,"A",{href:!0});var Ajr=s(Ik);vHe=r(Ajr,"PegasusTokenizer"),Ajr.forEach(t),FHe=r(x8," or "),qk=n(x8,"A",{href:!0});var yjr=s(qk);THe=r(yjr,"PegasusTokenizerFast"),yjr.forEach(t),MHe=r(x8," (BigBirdPegasus model)"),x8.forEach(t),EHe=i(w),Zn=n(w,"LI",{});var k8=s(Zn);RZ=n(k8,"STRONG",{});var Ljr=s(RZ);CHe=r(Ljr,"blenderbot"),Ljr.forEach(t),wHe=r(k8," \u2014 "),Nk=n(k8,"A",{href:!0});var xjr=s(Nk);AHe=r(xjr,"BlenderbotTokenizer"),xjr.forEach(t),yHe=r(k8," or "),jk=n(k8,"A",{href:!0});var kjr=s(jk);LHe=r(kjr,"BlenderbotTokenizerFast"),kjr.forEach(t),xHe=r(k8," (Blenderbot model)"),k8.forEach(t),kHe=i(w),Xg=n(w,"LI",{});var HMe=s(Xg);BZ=n(HMe,"STRONG",{});var Sjr=s(BZ);SHe=r(Sjr,"blenderbot-small"),Sjr.forEach(t),RHe=r(HMe," \u2014 "),Dk=n(HMe,"A",{href:!0});var Rjr=s(Dk);BHe=r(Rjr,"BlenderbotSmallTokenizer"),Rjr.forEach(t),PHe=r(HMe," (BlenderbotSmall model)"),HMe.forEach(t),$He=i(w),zg=n(w,"LI",{});var UMe=s(zg);PZ=n(UMe,"STRONG",{});var Bjr=s(PZ);IHe=r(Bjr,"byt5"),Bjr.forEach(t),qHe=r(UMe," \u2014 "),Gk=n(UMe,"A",{href:!0});var Pjr=s(Gk);NHe=r(Pjr,"ByT5Tokenizer"),Pjr.forEach(t),jHe=r(UMe," (ByT5 model)"),UMe.forEach(t),DHe=i(w),es=n(w,"LI",{});var S8=s(es);$Z=n(S8,"STRONG",{});var $jr=s($Z);GHe=r($jr,"camembert"),$jr.forEach(t),OHe=r(S8," \u2014 "),Ok=n(S8,"A",{href:!0});var Ijr=s(Ok);VHe=r(Ijr,"CamembertTokenizer"),Ijr.forEach(t),XHe=r(S8," or "),Vk=n(S8,"A",{href:!0});var qjr=s(Vk);zHe=r(qjr,"CamembertTokenizerFast"),qjr.forEach(t),QHe=r(S8," (CamemBERT model)"),S8.forEach(t),WHe=i(w),Qg=n(w,"LI",{});var JMe=s(Qg);IZ=n(JMe,"STRONG",{});var Njr=s(IZ);HHe=r(Njr,"canine"),Njr.forEach(t),UHe=r(JMe," \u2014 "),Xk=n(JMe,"A",{href:!0});var jjr=s(Xk);JHe=r(jjr,"CanineTokenizer"),jjr.forEach(t),YHe=r(JMe," (Canine model)"),JMe.forEach(t),KHe=i(w),os=n(w,"LI",{});var R8=s(os);qZ=n(R8,"STRONG",{});var Djr=s(qZ);ZHe=r(Djr,"clip"),Djr.forEach(t),eUe=r(R8," \u2014 "),zk=n(R8,"A",{href:!0});var Gjr=s(zk);oUe=r(Gjr,"CLIPTokenizer"),Gjr.forEach(t),rUe=r(R8," or "),Qk=n(R8,"A",{href:!0});var Ojr=s(Qk);tUe=r(Ojr,"CLIPTokenizerFast"),Ojr.forEach(t),aUe=r(R8," (CLIP model)"),R8.forEach(t),nUe=i(w),rs=n(w,"LI",{});var B8=s(rs);NZ=n(B8,"STRONG",{});var Vjr=s(NZ);sUe=r(Vjr,"convbert"),Vjr.forEach(t),lUe=r(B8," \u2014 "),Wk=n(B8,"A",{href:!0});var Xjr=s(Wk);iUe=r(Xjr,"ConvBertTokenizer"),Xjr.forEach(t),dUe=r(B8," or "),Hk=n(B8,"A",{href:!0});var zjr=s(Hk);cUe=r(zjr,"ConvBertTokenizerFast"),zjr.forEach(t),fUe=r(B8," (ConvBERT model)"),B8.forEach(t),mUe=i(w),ts=n(w,"LI",{});var P8=s(ts);jZ=n(P8,"STRONG",{});var Qjr=s(jZ);gUe=r(Qjr,"cpm"),Qjr.forEach(t),hUe=r(P8," \u2014 "),Uk=n(P8,"A",{href:!0});var Wjr=s(Uk);pUe=r(Wjr,"CpmTokenizer"),Wjr.forEach(t),_Ue=r(P8," or "),DZ=n(P8,"CODE",{});var Hjr=s(DZ);uUe=r(Hjr,"CpmTokenizerFast"),Hjr.forEach(t),bUe=r(P8," (CPM model)"),P8.forEach(t),vUe=i(w),Wg=n(w,"LI",{});var YMe=s(Wg);GZ=n(YMe,"STRONG",{});var Ujr=s(GZ);FUe=r(Ujr,"ctrl"),Ujr.forEach(t),TUe=r(YMe," \u2014 "),Jk=n(YMe,"A",{href:!0});var Jjr=s(Jk);MUe=r(Jjr,"CTRLTokenizer"),Jjr.forEach(t),EUe=r(YMe," (CTRL model)"),YMe.forEach(t),CUe=i(w),as=n(w,"LI",{});var $8=s(as);OZ=n($8,"STRONG",{});var Yjr=s(OZ);wUe=r(Yjr,"deberta"),Yjr.forEach(t),AUe=r($8," \u2014 "),Yk=n($8,"A",{href:!0});var Kjr=s(Yk);yUe=r(Kjr,"DebertaTokenizer"),Kjr.forEach(t),LUe=r($8," or "),Kk=n($8,"A",{href:!0});var Zjr=s(Kk);xUe=r(Zjr,"DebertaTokenizerFast"),Zjr.forEach(t),kUe=r($8," (DeBERTa model)"),$8.forEach(t),SUe=i(w),Hg=n(w,"LI",{});var KMe=s(Hg);VZ=n(KMe,"STRONG",{});var eDr=s(VZ);RUe=r(eDr,"deberta-v2"),eDr.forEach(t),BUe=r(KMe," \u2014 "),Zk=n(KMe,"A",{href:!0});var oDr=s(Zk);PUe=r(oDr,"DebertaV2Tokenizer"),oDr.forEach(t),$Ue=r(KMe," (DeBERTa-v2 model)"),KMe.forEach(t),IUe=i(w),ns=n(w,"LI",{});var I8=s(ns);XZ=n(I8,"STRONG",{});var rDr=s(XZ);qUe=r(rDr,"distilbert"),rDr.forEach(t),NUe=r(I8," \u2014 "),eS=n(I8,"A",{href:!0});var tDr=s(eS);jUe=r(tDr,"DistilBertTokenizer"),tDr.forEach(t),DUe=r(I8," or "),oS=n(I8,"A",{href:!0});var aDr=s(oS);GUe=r(aDr,"DistilBertTokenizerFast"),aDr.forEach(t),OUe=r(I8," (DistilBERT model)"),I8.forEach(t),VUe=i(w),ss=n(w,"LI",{});var q8=s(ss);zZ=n(q8,"STRONG",{});var nDr=s(zZ);XUe=r(nDr,"dpr"),nDr.forEach(t),zUe=r(q8," \u2014 "),rS=n(q8,"A",{href:!0});var sDr=s(rS);QUe=r(sDr,"DPRQuestionEncoderTokenizer"),sDr.forEach(t),WUe=r(q8," or "),tS=n(q8,"A",{href:!0});var lDr=s(tS);HUe=r(lDr,"DPRQuestionEncoderTokenizerFast"),lDr.forEach(t),UUe=r(q8," (DPR model)"),q8.forEach(t),JUe=i(w),ls=n(w,"LI",{});var N8=s(ls);QZ=n(N8,"STRONG",{});var iDr=s(QZ);YUe=r(iDr,"electra"),iDr.forEach(t),KUe=r(N8," \u2014 "),aS=n(N8,"A",{href:!0});var dDr=s(aS);ZUe=r(dDr,"ElectraTokenizer"),dDr.forEach(t),eJe=r(N8," or "),nS=n(N8,"A",{href:!0});var cDr=s(nS);oJe=r(cDr,"ElectraTokenizerFast"),cDr.forEach(t),rJe=r(N8," (ELECTRA model)"),N8.forEach(t),tJe=i(w),Ug=n(w,"LI",{});var ZMe=s(Ug);WZ=n(ZMe,"STRONG",{});var fDr=s(WZ);aJe=r(fDr,"flaubert"),fDr.forEach(t),nJe=r(ZMe," \u2014 "),sS=n(ZMe,"A",{href:!0});var mDr=s(sS);sJe=r(mDr,"FlaubertTokenizer"),mDr.forEach(t),lJe=r(ZMe," (FlauBERT model)"),ZMe.forEach(t),iJe=i(w),is=n(w,"LI",{});var j8=s(is);HZ=n(j8,"STRONG",{});var gDr=s(HZ);dJe=r(gDr,"fnet"),gDr.forEach(t),cJe=r(j8," \u2014 "),lS=n(j8,"A",{href:!0});var hDr=s(lS);fJe=r(hDr,"FNetTokenizer"),hDr.forEach(t),mJe=r(j8," or "),iS=n(j8,"A",{href:!0});var pDr=s(iS);gJe=r(pDr,"FNetTokenizerFast"),pDr.forEach(t),hJe=r(j8," (FNet model)"),j8.forEach(t),pJe=i(w),Jg=n(w,"LI",{});var e4e=s(Jg);UZ=n(e4e,"STRONG",{});var _Dr=s(UZ);_Je=r(_Dr,"fsmt"),_Dr.forEach(t),uJe=r(e4e," \u2014 "),dS=n(e4e,"A",{href:!0});var uDr=s(dS);bJe=r(uDr,"FSMTTokenizer"),uDr.forEach(t),vJe=r(e4e," (FairSeq Machine-Translation model)"),e4e.forEach(t),FJe=i(w),ds=n(w,"LI",{});var D8=s(ds);JZ=n(D8,"STRONG",{});var bDr=s(JZ);TJe=r(bDr,"funnel"),bDr.forEach(t),MJe=r(D8," \u2014 "),cS=n(D8,"A",{href:!0});var vDr=s(cS);EJe=r(vDr,"FunnelTokenizer"),vDr.forEach(t),CJe=r(D8," or "),fS=n(D8,"A",{href:!0});var FDr=s(fS);wJe=r(FDr,"FunnelTokenizerFast"),FDr.forEach(t),AJe=r(D8," (Funnel Transformer model)"),D8.forEach(t),yJe=i(w),cs=n(w,"LI",{});var G8=s(cs);YZ=n(G8,"STRONG",{});var TDr=s(YZ);LJe=r(TDr,"gpt2"),TDr.forEach(t),xJe=r(G8," \u2014 "),mS=n(G8,"A",{href:!0});var MDr=s(mS);kJe=r(MDr,"GPT2Tokenizer"),MDr.forEach(t),SJe=r(G8," or "),gS=n(G8,"A",{href:!0});var EDr=s(gS);RJe=r(EDr,"GPT2TokenizerFast"),EDr.forEach(t),BJe=r(G8," (OpenAI GPT-2 model)"),G8.forEach(t),PJe=i(w),fs=n(w,"LI",{});var O8=s(fs);KZ=n(O8,"STRONG",{});var CDr=s(KZ);$Je=r(CDr,"gpt_neo"),CDr.forEach(t),IJe=r(O8," \u2014 "),hS=n(O8,"A",{href:!0});var wDr=s(hS);qJe=r(wDr,"GPT2Tokenizer"),wDr.forEach(t),NJe=r(O8," or "),pS=n(O8,"A",{href:!0});var ADr=s(pS);jJe=r(ADr,"GPT2TokenizerFast"),ADr.forEach(t),DJe=r(O8," (GPT Neo model)"),O8.forEach(t),GJe=i(w),ms=n(w,"LI",{});var V8=s(ms);ZZ=n(V8,"STRONG",{});var yDr=s(ZZ);OJe=r(yDr,"herbert"),yDr.forEach(t),VJe=r(V8," \u2014 "),_S=n(V8,"A",{href:!0});var LDr=s(_S);XJe=r(LDr,"HerbertTokenizer"),LDr.forEach(t),zJe=r(V8," or "),uS=n(V8,"A",{href:!0});var xDr=s(uS);QJe=r(xDr,"HerbertTokenizerFast"),xDr.forEach(t),WJe=r(V8," (HerBERT model)"),V8.forEach(t),HJe=i(w),Yg=n(w,"LI",{});var o4e=s(Yg);eee=n(o4e,"STRONG",{});var kDr=s(eee);UJe=r(kDr,"hubert"),kDr.forEach(t),JJe=r(o4e," \u2014 "),bS=n(o4e,"A",{href:!0});var SDr=s(bS);YJe=r(SDr,"Wav2Vec2CTCTokenizer"),SDr.forEach(t),KJe=r(o4e," (Hubert model)"),o4e.forEach(t),ZJe=i(w),gs=n(w,"LI",{});var X8=s(gs);oee=n(X8,"STRONG",{});var RDr=s(oee);eYe=r(RDr,"ibert"),RDr.forEach(t),oYe=r(X8," \u2014 "),vS=n(X8,"A",{href:!0});var BDr=s(vS);rYe=r(BDr,"RobertaTokenizer"),BDr.forEach(t),tYe=r(X8," or "),FS=n(X8,"A",{href:!0});var PDr=s(FS);aYe=r(PDr,"RobertaTokenizerFast"),PDr.forEach(t),nYe=r(X8," (I-BERT model)"),X8.forEach(t),sYe=i(w),hs=n(w,"LI",{});var z8=s(hs);ree=n(z8,"STRONG",{});var $Dr=s(ree);lYe=r($Dr,"layoutlm"),$Dr.forEach(t),iYe=r(z8," \u2014 "),TS=n(z8,"A",{href:!0});var IDr=s(TS);dYe=r(IDr,"LayoutLMTokenizer"),IDr.forEach(t),cYe=r(z8," or "),MS=n(z8,"A",{href:!0});var qDr=s(MS);fYe=r(qDr,"LayoutLMTokenizerFast"),qDr.forEach(t),mYe=r(z8," (LayoutLM model)"),z8.forEach(t),gYe=i(w),ps=n(w,"LI",{});var Q8=s(ps);tee=n(Q8,"STRONG",{});var NDr=s(tee);hYe=r(NDr,"layoutlmv2"),NDr.forEach(t),pYe=r(Q8," \u2014 "),ES=n(Q8,"A",{href:!0});var jDr=s(ES);_Ye=r(jDr,"LayoutLMv2Tokenizer"),jDr.forEach(t),uYe=r(Q8," or "),CS=n(Q8,"A",{href:!0});var DDr=s(CS);bYe=r(DDr,"LayoutLMv2TokenizerFast"),DDr.forEach(t),vYe=r(Q8," (LayoutLMv2 model)"),Q8.forEach(t),FYe=i(w),_s=n(w,"LI",{});var W8=s(_s);aee=n(W8,"STRONG",{});var GDr=s(aee);TYe=r(GDr,"layoutxlm"),GDr.forEach(t),MYe=r(W8," \u2014 "),wS=n(W8,"A",{href:!0});var ODr=s(wS);EYe=r(ODr,"LayoutXLMTokenizer"),ODr.forEach(t),CYe=r(W8," or "),AS=n(W8,"A",{href:!0});var VDr=s(AS);wYe=r(VDr,"LayoutXLMTokenizerFast"),VDr.forEach(t),AYe=r(W8," (LayoutXLM model)"),W8.forEach(t),yYe=i(w),us=n(w,"LI",{});var H8=s(us);nee=n(H8,"STRONG",{});var XDr=s(nee);LYe=r(XDr,"led"),XDr.forEach(t),xYe=r(H8," \u2014 "),yS=n(H8,"A",{href:!0});var zDr=s(yS);kYe=r(zDr,"LEDTokenizer"),zDr.forEach(t),SYe=r(H8," or "),LS=n(H8,"A",{href:!0});var QDr=s(LS);RYe=r(QDr,"LEDTokenizerFast"),QDr.forEach(t),BYe=r(H8," (LED model)"),H8.forEach(t),PYe=i(w),bs=n(w,"LI",{});var U8=s(bs);see=n(U8,"STRONG",{});var WDr=s(see);$Ye=r(WDr,"longformer"),WDr.forEach(t),IYe=r(U8," \u2014 "),xS=n(U8,"A",{href:!0});var HDr=s(xS);qYe=r(HDr,"LongformerTokenizer"),HDr.forEach(t),NYe=r(U8," or "),kS=n(U8,"A",{href:!0});var UDr=s(kS);jYe=r(UDr,"LongformerTokenizerFast"),UDr.forEach(t),DYe=r(U8," (Longformer model)"),U8.forEach(t),GYe=i(w),Kg=n(w,"LI",{});var r4e=s(Kg);lee=n(r4e,"STRONG",{});var JDr=s(lee);OYe=r(JDr,"luke"),JDr.forEach(t),VYe=r(r4e," \u2014 "),SS=n(r4e,"A",{href:!0});var YDr=s(SS);XYe=r(YDr,"LukeTokenizer"),YDr.forEach(t),zYe=r(r4e," (LUKE model)"),r4e.forEach(t),QYe=i(w),vs=n(w,"LI",{});var J8=s(vs);iee=n(J8,"STRONG",{});var KDr=s(iee);WYe=r(KDr,"lxmert"),KDr.forEach(t),HYe=r(J8," \u2014 "),RS=n(J8,"A",{href:!0});var ZDr=s(RS);UYe=r(ZDr,"LxmertTokenizer"),ZDr.forEach(t),JYe=r(J8," or "),BS=n(J8,"A",{href:!0});var eGr=s(BS);YYe=r(eGr,"LxmertTokenizerFast"),eGr.forEach(t),KYe=r(J8," (LXMERT model)"),J8.forEach(t),ZYe=i(w),Zg=n(w,"LI",{});var t4e=s(Zg);dee=n(t4e,"STRONG",{});var oGr=s(dee);eKe=r(oGr,"m2m_100"),oGr.forEach(t),oKe=r(t4e," \u2014 "),PS=n(t4e,"A",{href:!0});var rGr=s(PS);rKe=r(rGr,"M2M100Tokenizer"),rGr.forEach(t),tKe=r(t4e," (M2M100 model)"),t4e.forEach(t),aKe=i(w),eh=n(w,"LI",{});var a4e=s(eh);cee=n(a4e,"STRONG",{});var tGr=s(cee);nKe=r(tGr,"marian"),tGr.forEach(t),sKe=r(a4e," \u2014 "),$S=n(a4e,"A",{href:!0});var aGr=s($S);lKe=r(aGr,"MarianTokenizer"),aGr.forEach(t),iKe=r(a4e," (Marian model)"),a4e.forEach(t),dKe=i(w),Fs=n(w,"LI",{});var Y8=s(Fs);fee=n(Y8,"STRONG",{});var nGr=s(fee);cKe=r(nGr,"mbart"),nGr.forEach(t),fKe=r(Y8," \u2014 "),IS=n(Y8,"A",{href:!0});var sGr=s(IS);mKe=r(sGr,"MBartTokenizer"),sGr.forEach(t),gKe=r(Y8," or "),qS=n(Y8,"A",{href:!0});var lGr=s(qS);hKe=r(lGr,"MBartTokenizerFast"),lGr.forEach(t),pKe=r(Y8," (mBART model)"),Y8.forEach(t),_Ke=i(w),Ts=n(w,"LI",{});var K8=s(Ts);mee=n(K8,"STRONG",{});var iGr=s(mee);uKe=r(iGr,"mbart50"),iGr.forEach(t),bKe=r(K8," \u2014 "),NS=n(K8,"A",{href:!0});var dGr=s(NS);vKe=r(dGr,"MBart50Tokenizer"),dGr.forEach(t),FKe=r(K8," or "),jS=n(K8,"A",{href:!0});var cGr=s(jS);TKe=r(cGr,"MBart50TokenizerFast"),cGr.forEach(t),MKe=r(K8," (mBART-50 model)"),K8.forEach(t),EKe=i(w),oh=n(w,"LI",{});var n4e=s(oh);gee=n(n4e,"STRONG",{});var fGr=s(gee);CKe=r(fGr,"mluke"),fGr.forEach(t),wKe=r(n4e," \u2014 "),DS=n(n4e,"A",{href:!0});var mGr=s(DS);AKe=r(mGr,"MLukeTokenizer"),mGr.forEach(t),yKe=r(n4e," (mLUKE model)"),n4e.forEach(t),LKe=i(w),Ms=n(w,"LI",{});var Z8=s(Ms);hee=n(Z8,"STRONG",{});var gGr=s(hee);xKe=r(gGr,"mobilebert"),gGr.forEach(t),kKe=r(Z8," \u2014 "),GS=n(Z8,"A",{href:!0});var hGr=s(GS);SKe=r(hGr,"MobileBertTokenizer"),hGr.forEach(t),RKe=r(Z8," or "),OS=n(Z8,"A",{href:!0});var pGr=s(OS);BKe=r(pGr,"MobileBertTokenizerFast"),pGr.forEach(t),PKe=r(Z8," (MobileBERT model)"),Z8.forEach(t),$Ke=i(w),Es=n(w,"LI",{});var e9=s(Es);pee=n(e9,"STRONG",{});var _Gr=s(pee);IKe=r(_Gr,"mpnet"),_Gr.forEach(t),qKe=r(e9," \u2014 "),VS=n(e9,"A",{href:!0});var uGr=s(VS);NKe=r(uGr,"MPNetTokenizer"),uGr.forEach(t),jKe=r(e9," or "),XS=n(e9,"A",{href:!0});var bGr=s(XS);DKe=r(bGr,"MPNetTokenizerFast"),bGr.forEach(t),GKe=r(e9," (MPNet model)"),e9.forEach(t),OKe=i(w),Cs=n(w,"LI",{});var o9=s(Cs);_ee=n(o9,"STRONG",{});var vGr=s(_ee);VKe=r(vGr,"mt5"),vGr.forEach(t),XKe=r(o9," \u2014 "),zS=n(o9,"A",{href:!0});var FGr=s(zS);zKe=r(FGr,"MT5Tokenizer"),FGr.forEach(t),QKe=r(o9," or "),QS=n(o9,"A",{href:!0});var TGr=s(QS);WKe=r(TGr,"MT5TokenizerFast"),TGr.forEach(t),HKe=r(o9," (mT5 model)"),o9.forEach(t),UKe=i(w),ws=n(w,"LI",{});var r9=s(ws);uee=n(r9,"STRONG",{});var MGr=s(uee);JKe=r(MGr,"openai-gpt"),MGr.forEach(t),YKe=r(r9," \u2014 "),WS=n(r9,"A",{href:!0});var EGr=s(WS);KKe=r(EGr,"OpenAIGPTTokenizer"),EGr.forEach(t),ZKe=r(r9," or "),HS=n(r9,"A",{href:!0});var CGr=s(HS);eZe=r(CGr,"OpenAIGPTTokenizerFast"),CGr.forEach(t),oZe=r(r9," (OpenAI GPT model)"),r9.forEach(t),rZe=i(w),As=n(w,"LI",{});var t9=s(As);bee=n(t9,"STRONG",{});var wGr=s(bee);tZe=r(wGr,"pegasus"),wGr.forEach(t),aZe=r(t9," \u2014 "),US=n(t9,"A",{href:!0});var AGr=s(US);nZe=r(AGr,"PegasusTokenizer"),AGr.forEach(t),sZe=r(t9," or "),JS=n(t9,"A",{href:!0});var yGr=s(JS);lZe=r(yGr,"PegasusTokenizerFast"),yGr.forEach(t),iZe=r(t9," (Pegasus model)"),t9.forEach(t),dZe=i(w),rh=n(w,"LI",{});var s4e=s(rh);vee=n(s4e,"STRONG",{});var LGr=s(vee);cZe=r(LGr,"perceiver"),LGr.forEach(t),fZe=r(s4e," \u2014 "),YS=n(s4e,"A",{href:!0});var xGr=s(YS);mZe=r(xGr,"PerceiverTokenizer"),xGr.forEach(t),gZe=r(s4e," (Perceiver model)"),s4e.forEach(t),hZe=i(w),th=n(w,"LI",{});var l4e=s(th);Fee=n(l4e,"STRONG",{});var kGr=s(Fee);pZe=r(kGr,"phobert"),kGr.forEach(t),_Ze=r(l4e," \u2014 "),KS=n(l4e,"A",{href:!0});var SGr=s(KS);uZe=r(SGr,"PhobertTokenizer"),SGr.forEach(t),bZe=r(l4e," (PhoBERT model)"),l4e.forEach(t),vZe=i(w),ah=n(w,"LI",{});var i4e=s(ah);Tee=n(i4e,"STRONG",{});var RGr=s(Tee);FZe=r(RGr,"plbart"),RGr.forEach(t),TZe=r(i4e," \u2014 "),ZS=n(i4e,"A",{href:!0});var BGr=s(ZS);MZe=r(BGr,"PLBartTokenizer"),BGr.forEach(t),EZe=r(i4e," (PLBart model)"),i4e.forEach(t),CZe=i(w),nh=n(w,"LI",{});var d4e=s(nh);Mee=n(d4e,"STRONG",{});var PGr=s(Mee);wZe=r(PGr,"prophetnet"),PGr.forEach(t),AZe=r(d4e," \u2014 "),eR=n(d4e,"A",{href:!0});var $Gr=s(eR);yZe=r($Gr,"ProphetNetTokenizer"),$Gr.forEach(t),LZe=r(d4e," (ProphetNet model)"),d4e.forEach(t),xZe=i(w),ys=n(w,"LI",{});var a9=s(ys);Eee=n(a9,"STRONG",{});var IGr=s(Eee);kZe=r(IGr,"qdqbert"),IGr.forEach(t),SZe=r(a9," \u2014 "),oR=n(a9,"A",{href:!0});var qGr=s(oR);RZe=r(qGr,"BertTokenizer"),qGr.forEach(t),BZe=r(a9," or "),rR=n(a9,"A",{href:!0});var NGr=s(rR);PZe=r(NGr,"BertTokenizerFast"),NGr.forEach(t),$Ze=r(a9," (QDQBert model)"),a9.forEach(t),IZe=i(w),sh=n(w,"LI",{});var c4e=s(sh);Cee=n(c4e,"STRONG",{});var jGr=s(Cee);qZe=r(jGr,"rag"),jGr.forEach(t),NZe=r(c4e," \u2014 "),tR=n(c4e,"A",{href:!0});var DGr=s(tR);jZe=r(DGr,"RagTokenizer"),DGr.forEach(t),DZe=r(c4e," (RAG model)"),c4e.forEach(t),GZe=i(w),Ls=n(w,"LI",{});var n9=s(Ls);wee=n(n9,"STRONG",{});var GGr=s(wee);OZe=r(GGr,"realm"),GGr.forEach(t),VZe=r(n9," \u2014 "),aR=n(n9,"A",{href:!0});var OGr=s(aR);XZe=r(OGr,"RealmTokenizer"),OGr.forEach(t),zZe=r(n9," or "),nR=n(n9,"A",{href:!0});var VGr=s(nR);QZe=r(VGr,"RealmTokenizerFast"),VGr.forEach(t),WZe=r(n9," (Realm model)"),n9.forEach(t),HZe=i(w),xs=n(w,"LI",{});var s9=s(xs);Aee=n(s9,"STRONG",{});var XGr=s(Aee);UZe=r(XGr,"reformer"),XGr.forEach(t),JZe=r(s9," \u2014 "),sR=n(s9,"A",{href:!0});var zGr=s(sR);YZe=r(zGr,"ReformerTokenizer"),zGr.forEach(t),KZe=r(s9," or "),lR=n(s9,"A",{href:!0});var QGr=s(lR);ZZe=r(QGr,"ReformerTokenizerFast"),QGr.forEach(t),eeo=r(s9," (Reformer model)"),s9.forEach(t),oeo=i(w),ks=n(w,"LI",{});var l9=s(ks);yee=n(l9,"STRONG",{});var WGr=s(yee);reo=r(WGr,"rembert"),WGr.forEach(t),teo=r(l9," \u2014 "),iR=n(l9,"A",{href:!0});var HGr=s(iR);aeo=r(HGr,"RemBertTokenizer"),HGr.forEach(t),neo=r(l9," or "),dR=n(l9,"A",{href:!0});var UGr=s(dR);seo=r(UGr,"RemBertTokenizerFast"),UGr.forEach(t),leo=r(l9," (RemBERT model)"),l9.forEach(t),ieo=i(w),Ss=n(w,"LI",{});var i9=s(Ss);Lee=n(i9,"STRONG",{});var JGr=s(Lee);deo=r(JGr,"retribert"),JGr.forEach(t),ceo=r(i9," \u2014 "),cR=n(i9,"A",{href:!0});var YGr=s(cR);feo=r(YGr,"RetriBertTokenizer"),YGr.forEach(t),meo=r(i9," or "),fR=n(i9,"A",{href:!0});var KGr=s(fR);geo=r(KGr,"RetriBertTokenizerFast"),KGr.forEach(t),heo=r(i9," (RetriBERT model)"),i9.forEach(t),peo=i(w),Rs=n(w,"LI",{});var d9=s(Rs);xee=n(d9,"STRONG",{});var ZGr=s(xee);_eo=r(ZGr,"roberta"),ZGr.forEach(t),ueo=r(d9," \u2014 "),mR=n(d9,"A",{href:!0});var eOr=s(mR);beo=r(eOr,"RobertaTokenizer"),eOr.forEach(t),veo=r(d9," or "),gR=n(d9,"A",{href:!0});var oOr=s(gR);Feo=r(oOr,"RobertaTokenizerFast"),oOr.forEach(t),Teo=r(d9," (RoBERTa model)"),d9.forEach(t),Meo=i(w),Bs=n(w,"LI",{});var c9=s(Bs);kee=n(c9,"STRONG",{});var rOr=s(kee);Eeo=r(rOr,"roformer"),rOr.forEach(t),Ceo=r(c9," \u2014 "),hR=n(c9,"A",{href:!0});var tOr=s(hR);weo=r(tOr,"RoFormerTokenizer"),tOr.forEach(t),Aeo=r(c9," or "),pR=n(c9,"A",{href:!0});var aOr=s(pR);yeo=r(aOr,"RoFormerTokenizerFast"),aOr.forEach(t),Leo=r(c9," (RoFormer model)"),c9.forEach(t),xeo=i(w),lh=n(w,"LI",{});var f4e=s(lh);See=n(f4e,"STRONG",{});var nOr=s(See);keo=r(nOr,"speech_to_text"),nOr.forEach(t),Seo=r(f4e," \u2014 "),_R=n(f4e,"A",{href:!0});var sOr=s(_R);Reo=r(sOr,"Speech2TextTokenizer"),sOr.forEach(t),Beo=r(f4e," (Speech2Text model)"),f4e.forEach(t),Peo=i(w),ih=n(w,"LI",{});var m4e=s(ih);Ree=n(m4e,"STRONG",{});var lOr=s(Ree);$eo=r(lOr,"speech_to_text_2"),lOr.forEach(t),Ieo=r(m4e," \u2014 "),uR=n(m4e,"A",{href:!0});var iOr=s(uR);qeo=r(iOr,"Speech2Text2Tokenizer"),iOr.forEach(t),Neo=r(m4e," (Speech2Text2 model)"),m4e.forEach(t),jeo=i(w),Ps=n(w,"LI",{});var f9=s(Ps);Bee=n(f9,"STRONG",{});var dOr=s(Bee);Deo=r(dOr,"splinter"),dOr.forEach(t),Geo=r(f9," \u2014 "),bR=n(f9,"A",{href:!0});var cOr=s(bR);Oeo=r(cOr,"SplinterTokenizer"),cOr.forEach(t),Veo=r(f9," or "),vR=n(f9,"A",{href:!0});var fOr=s(vR);Xeo=r(fOr,"SplinterTokenizerFast"),fOr.forEach(t),zeo=r(f9," (Splinter model)"),f9.forEach(t),Qeo=i(w),$s=n(w,"LI",{});var m9=s($s);Pee=n(m9,"STRONG",{});var mOr=s(Pee);Weo=r(mOr,"squeezebert"),mOr.forEach(t),Heo=r(m9," \u2014 "),FR=n(m9,"A",{href:!0});var gOr=s(FR);Ueo=r(gOr,"SqueezeBertTokenizer"),gOr.forEach(t),Jeo=r(m9," or "),TR=n(m9,"A",{href:!0});var hOr=s(TR);Yeo=r(hOr,"SqueezeBertTokenizerFast"),hOr.forEach(t),Keo=r(m9," (SqueezeBERT model)"),m9.forEach(t),Zeo=i(w),Is=n(w,"LI",{});var g9=s(Is);$ee=n(g9,"STRONG",{});var pOr=s($ee);eoo=r(pOr,"t5"),pOr.forEach(t),ooo=r(g9," \u2014 "),MR=n(g9,"A",{href:!0});var _Or=s(MR);roo=r(_Or,"T5Tokenizer"),_Or.forEach(t),too=r(g9," or "),ER=n(g9,"A",{href:!0});var uOr=s(ER);aoo=r(uOr,"T5TokenizerFast"),uOr.forEach(t),noo=r(g9," (T5 model)"),g9.forEach(t),soo=i(w),dh=n(w,"LI",{});var g4e=s(dh);Iee=n(g4e,"STRONG",{});var bOr=s(Iee);loo=r(bOr,"tapas"),bOr.forEach(t),ioo=r(g4e," \u2014 "),CR=n(g4e,"A",{href:!0});var vOr=s(CR);doo=r(vOr,"TapasTokenizer"),vOr.forEach(t),coo=r(g4e," (TAPAS model)"),g4e.forEach(t),foo=i(w),ch=n(w,"LI",{});var h4e=s(ch);qee=n(h4e,"STRONG",{});var FOr=s(qee);moo=r(FOr,"tapex"),FOr.forEach(t),goo=r(h4e," \u2014 "),wR=n(h4e,"A",{href:!0});var TOr=s(wR);hoo=r(TOr,"TapexTokenizer"),TOr.forEach(t),poo=r(h4e," (TAPEX model)"),h4e.forEach(t),_oo=i(w),fh=n(w,"LI",{});var p4e=s(fh);Nee=n(p4e,"STRONG",{});var MOr=s(Nee);uoo=r(MOr,"transfo-xl"),MOr.forEach(t),boo=r(p4e," \u2014 "),AR=n(p4e,"A",{href:!0});var EOr=s(AR);voo=r(EOr,"TransfoXLTokenizer"),EOr.forEach(t),Foo=r(p4e," (Transformer-XL model)"),p4e.forEach(t),Too=i(w),mh=n(w,"LI",{});var _4e=s(mh);jee=n(_4e,"STRONG",{});var COr=s(jee);Moo=r(COr,"wav2vec2"),COr.forEach(t),Eoo=r(_4e," \u2014 "),yR=n(_4e,"A",{href:!0});var wOr=s(yR);Coo=r(wOr,"Wav2Vec2CTCTokenizer"),wOr.forEach(t),woo=r(_4e," (Wav2Vec2 model)"),_4e.forEach(t),Aoo=i(w),gh=n(w,"LI",{});var u4e=s(gh);Dee=n(u4e,"STRONG",{});var AOr=s(Dee);yoo=r(AOr,"wav2vec2_phoneme"),AOr.forEach(t),Loo=r(u4e," \u2014 "),LR=n(u4e,"A",{href:!0});var yOr=s(LR);xoo=r(yOr,"Wav2Vec2PhonemeCTCTokenizer"),yOr.forEach(t),koo=r(u4e," (Wav2Vec2Phoneme model)"),u4e.forEach(t),Soo=i(w),qs=n(w,"LI",{});var h9=s(qs);Gee=n(h9,"STRONG",{});var LOr=s(Gee);Roo=r(LOr,"xglm"),LOr.forEach(t),Boo=r(h9," \u2014 "),xR=n(h9,"A",{href:!0});var xOr=s(xR);Poo=r(xOr,"XGLMTokenizer"),xOr.forEach(t),$oo=r(h9," or "),kR=n(h9,"A",{href:!0});var kOr=s(kR);Ioo=r(kOr,"XGLMTokenizerFast"),kOr.forEach(t),qoo=r(h9," (XGLM model)"),h9.forEach(t),Noo=i(w),hh=n(w,"LI",{});var b4e=s(hh);Oee=n(b4e,"STRONG",{});var SOr=s(Oee);joo=r(SOr,"xlm"),SOr.forEach(t),Doo=r(b4e," \u2014 "),SR=n(b4e,"A",{href:!0});var ROr=s(SR);Goo=r(ROr,"XLMTokenizer"),ROr.forEach(t),Ooo=r(b4e," (XLM model)"),b4e.forEach(t),Voo=i(w),ph=n(w,"LI",{});var v4e=s(ph);Vee=n(v4e,"STRONG",{});var BOr=s(Vee);Xoo=r(BOr,"xlm-prophetnet"),BOr.forEach(t),zoo=r(v4e," \u2014 "),RR=n(v4e,"A",{href:!0});var POr=s(RR);Qoo=r(POr,"XLMProphetNetTokenizer"),POr.forEach(t),Woo=r(v4e," (XLMProphetNet model)"),v4e.forEach(t),Hoo=i(w),Ns=n(w,"LI",{});var p9=s(Ns);Xee=n(p9,"STRONG",{});var $Or=s(Xee);Uoo=r($Or,"xlm-roberta"),$Or.forEach(t),Joo=r(p9," \u2014 "),BR=n(p9,"A",{href:!0});var IOr=s(BR);Yoo=r(IOr,"XLMRobertaTokenizer"),IOr.forEach(t),Koo=r(p9," or "),PR=n(p9,"A",{href:!0});var qOr=s(PR);Zoo=r(qOr,"XLMRobertaTokenizerFast"),qOr.forEach(t),ero=r(p9," (XLM-RoBERTa model)"),p9.forEach(t),oro=i(w),js=n(w,"LI",{});var _9=s(js);zee=n(_9,"STRONG",{});var NOr=s(zee);rro=r(NOr,"xlnet"),NOr.forEach(t),tro=r(_9," \u2014 "),$R=n(_9,"A",{href:!0});var jOr=s($R);aro=r(jOr,"XLNetTokenizer"),jOr.forEach(t),nro=r(_9," or "),IR=n(_9,"A",{href:!0});var DOr=s(IR);sro=r(DOr,"XLNetTokenizerFast"),DOr.forEach(t),lro=r(_9," (XLNet model)"),_9.forEach(t),w.forEach(t),iro=i(ha),Qee=n(ha,"P",{});var GOr=s(Qee);dro=r(GOr,"Examples:"),GOr.forEach(t),cro=i(ha),m(QC.$$.fragment,ha),ha.forEach(t),fro=i(Xs),_h=n(Xs,"DIV",{class:!0});var XPe=s(_h);m(WC.$$.fragment,XPe),mro=i(XPe),Wee=n(XPe,"P",{});var OOr=s(Wee);gro=r(OOr,"Register a new tokenizer in this mapping."),OOr.forEach(t),XPe.forEach(t),Xs.forEach(t),DRe=i(c),Hi=n(c,"H2",{class:!0});var zPe=s(Hi);uh=n(zPe,"A",{id:!0,class:!0,href:!0});var VOr=s(uh);Hee=n(VOr,"SPAN",{});var XOr=s(Hee);m(HC.$$.fragment,XOr),XOr.forEach(t),VOr.forEach(t),hro=i(zPe),Uee=n(zPe,"SPAN",{});var zOr=s(Uee);pro=r(zOr,"AutoFeatureExtractor"),zOr.forEach(t),zPe.forEach(t),GRe=i(c),Ho=n(c,"DIV",{class:!0});var zs=s(Ho);m(UC.$$.fragment,zs),_ro=i(zs),JC=n(zs,"P",{});var QPe=s(JC);uro=r(QPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),qR=n(QPe,"A",{href:!0});var QOr=s(qR);bro=r(QOr,"AutoFeatureExtractor.from_pretrained()"),QOr.forEach(t),vro=r(QPe," class method."),QPe.forEach(t),Fro=i(zs),YC=n(zs,"P",{});var WPe=s(YC);Tro=r(WPe,"This class cannot be instantiated directly using "),Jee=n(WPe,"CODE",{});var WOr=s(Jee);Mro=r(WOr,"__init__()"),WOr.forEach(t),Ero=r(WPe," (throws an error)."),WPe.forEach(t),Cro=i(zs),$e=n(zs,"DIV",{class:!0});var Nt=s($e);m(KC.$$.fragment,Nt),wro=i(Nt),Yee=n(Nt,"P",{});var HOr=s(Yee);Aro=r(HOr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),HOr.forEach(t),yro=i(Nt),Va=n(Nt,"P",{});var kE=s(Va);Lro=r(kE,"The feature extractor class to instantiate is selected based on the "),Kee=n(kE,"CODE",{});var UOr=s(Kee);xro=r(UOr,"model_type"),UOr.forEach(t),kro=r(kE,` property of the config object
(either passed as an argument or loaded from `),Zee=n(kE,"CODE",{});var JOr=s(Zee);Sro=r(JOr,"pretrained_model_name_or_path"),JOr.forEach(t),Rro=r(kE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),eoe=n(kE,"CODE",{});var YOr=s(eoe);Bro=r(YOr,"pretrained_model_name_or_path"),YOr.forEach(t),Pro=r(kE,":"),kE.forEach(t),$ro=i(Nt),ee=n(Nt,"UL",{});var ae=s(ee);bh=n(ae,"LI",{});var F4e=s(bh);ooe=n(F4e,"STRONG",{});var KOr=s(ooe);Iro=r(KOr,"beit"),KOr.forEach(t),qro=r(F4e," \u2014 "),NR=n(F4e,"A",{href:!0});var ZOr=s(NR);Nro=r(ZOr,"BeitFeatureExtractor"),ZOr.forEach(t),jro=r(F4e," (BEiT model)"),F4e.forEach(t),Dro=i(ae),vh=n(ae,"LI",{});var T4e=s(vh);roe=n(T4e,"STRONG",{});var eVr=s(roe);Gro=r(eVr,"clip"),eVr.forEach(t),Oro=r(T4e," \u2014 "),jR=n(T4e,"A",{href:!0});var oVr=s(jR);Vro=r(oVr,"CLIPFeatureExtractor"),oVr.forEach(t),Xro=r(T4e," (CLIP model)"),T4e.forEach(t),zro=i(ae),Fh=n(ae,"LI",{});var M4e=s(Fh);toe=n(M4e,"STRONG",{});var rVr=s(toe);Qro=r(rVr,"convnext"),rVr.forEach(t),Wro=r(M4e," \u2014 "),DR=n(M4e,"A",{href:!0});var tVr=s(DR);Hro=r(tVr,"ConvNextFeatureExtractor"),tVr.forEach(t),Uro=r(M4e," (ConvNext model)"),M4e.forEach(t),Jro=i(ae),Th=n(ae,"LI",{});var E4e=s(Th);aoe=n(E4e,"STRONG",{});var aVr=s(aoe);Yro=r(aVr,"deit"),aVr.forEach(t),Kro=r(E4e," \u2014 "),GR=n(E4e,"A",{href:!0});var nVr=s(GR);Zro=r(nVr,"DeiTFeatureExtractor"),nVr.forEach(t),eto=r(E4e," (DeiT model)"),E4e.forEach(t),oto=i(ae),Mh=n(ae,"LI",{});var C4e=s(Mh);noe=n(C4e,"STRONG",{});var sVr=s(noe);rto=r(sVr,"detr"),sVr.forEach(t),tto=r(C4e," \u2014 "),OR=n(C4e,"A",{href:!0});var lVr=s(OR);ato=r(lVr,"DetrFeatureExtractor"),lVr.forEach(t),nto=r(C4e," (DETR model)"),C4e.forEach(t),sto=i(ae),Eh=n(ae,"LI",{});var w4e=s(Eh);soe=n(w4e,"STRONG",{});var iVr=s(soe);lto=r(iVr,"hubert"),iVr.forEach(t),ito=r(w4e," \u2014 "),VR=n(w4e,"A",{href:!0});var dVr=s(VR);dto=r(dVr,"Wav2Vec2FeatureExtractor"),dVr.forEach(t),cto=r(w4e," (Hubert model)"),w4e.forEach(t),fto=i(ae),Ch=n(ae,"LI",{});var A4e=s(Ch);loe=n(A4e,"STRONG",{});var cVr=s(loe);mto=r(cVr,"layoutlmv2"),cVr.forEach(t),gto=r(A4e," \u2014 "),XR=n(A4e,"A",{href:!0});var fVr=s(XR);hto=r(fVr,"LayoutLMv2FeatureExtractor"),fVr.forEach(t),pto=r(A4e," (LayoutLMv2 model)"),A4e.forEach(t),_to=i(ae),wh=n(ae,"LI",{});var y4e=s(wh);ioe=n(y4e,"STRONG",{});var mVr=s(ioe);uto=r(mVr,"maskformer"),mVr.forEach(t),bto=r(y4e," \u2014 "),zR=n(y4e,"A",{href:!0});var gVr=s(zR);vto=r(gVr,"MaskFormerFeatureExtractor"),gVr.forEach(t),Fto=r(y4e," (MaskFormer model)"),y4e.forEach(t),Tto=i(ae),Ah=n(ae,"LI",{});var L4e=s(Ah);doe=n(L4e,"STRONG",{});var hVr=s(doe);Mto=r(hVr,"perceiver"),hVr.forEach(t),Eto=r(L4e," \u2014 "),QR=n(L4e,"A",{href:!0});var pVr=s(QR);Cto=r(pVr,"PerceiverFeatureExtractor"),pVr.forEach(t),wto=r(L4e," (Perceiver model)"),L4e.forEach(t),Ato=i(ae),yh=n(ae,"LI",{});var x4e=s(yh);coe=n(x4e,"STRONG",{});var _Vr=s(coe);yto=r(_Vr,"poolformer"),_Vr.forEach(t),Lto=r(x4e," \u2014 "),WR=n(x4e,"A",{href:!0});var uVr=s(WR);xto=r(uVr,"PoolFormerFeatureExtractor"),uVr.forEach(t),kto=r(x4e," (PoolFormer model)"),x4e.forEach(t),Sto=i(ae),Lh=n(ae,"LI",{});var k4e=s(Lh);foe=n(k4e,"STRONG",{});var bVr=s(foe);Rto=r(bVr,"regnet"),bVr.forEach(t),Bto=r(k4e," \u2014 "),HR=n(k4e,"A",{href:!0});var vVr=s(HR);Pto=r(vVr,"ConvNextFeatureExtractor"),vVr.forEach(t),$to=r(k4e," (RegNet model)"),k4e.forEach(t),Ito=i(ae),xh=n(ae,"LI",{});var S4e=s(xh);moe=n(S4e,"STRONG",{});var FVr=s(moe);qto=r(FVr,"resnet"),FVr.forEach(t),Nto=r(S4e," \u2014 "),UR=n(S4e,"A",{href:!0});var TVr=s(UR);jto=r(TVr,"ConvNextFeatureExtractor"),TVr.forEach(t),Dto=r(S4e," (ResNet model)"),S4e.forEach(t),Gto=i(ae),kh=n(ae,"LI",{});var R4e=s(kh);goe=n(R4e,"STRONG",{});var MVr=s(goe);Oto=r(MVr,"segformer"),MVr.forEach(t),Vto=r(R4e," \u2014 "),JR=n(R4e,"A",{href:!0});var EVr=s(JR);Xto=r(EVr,"SegformerFeatureExtractor"),EVr.forEach(t),zto=r(R4e," (SegFormer model)"),R4e.forEach(t),Qto=i(ae),Sh=n(ae,"LI",{});var B4e=s(Sh);hoe=n(B4e,"STRONG",{});var CVr=s(hoe);Wto=r(CVr,"speech_to_text"),CVr.forEach(t),Hto=r(B4e," \u2014 "),YR=n(B4e,"A",{href:!0});var wVr=s(YR);Uto=r(wVr,"Speech2TextFeatureExtractor"),wVr.forEach(t),Jto=r(B4e," (Speech2Text model)"),B4e.forEach(t),Yto=i(ae),Rh=n(ae,"LI",{});var P4e=s(Rh);poe=n(P4e,"STRONG",{});var AVr=s(poe);Kto=r(AVr,"swin"),AVr.forEach(t),Zto=r(P4e," \u2014 "),KR=n(P4e,"A",{href:!0});var yVr=s(KR);eao=r(yVr,"ViTFeatureExtractor"),yVr.forEach(t),oao=r(P4e," (Swin model)"),P4e.forEach(t),rao=i(ae),Bh=n(ae,"LI",{});var $4e=s(Bh);_oe=n($4e,"STRONG",{});var LVr=s(_oe);tao=r(LVr,"van"),LVr.forEach(t),aao=r($4e," \u2014 "),ZR=n($4e,"A",{href:!0});var xVr=s(ZR);nao=r(xVr,"ConvNextFeatureExtractor"),xVr.forEach(t),sao=r($4e," (VAN model)"),$4e.forEach(t),lao=i(ae),Ph=n(ae,"LI",{});var I4e=s(Ph);uoe=n(I4e,"STRONG",{});var kVr=s(uoe);iao=r(kVr,"vit"),kVr.forEach(t),dao=r(I4e," \u2014 "),eB=n(I4e,"A",{href:!0});var SVr=s(eB);cao=r(SVr,"ViTFeatureExtractor"),SVr.forEach(t),fao=r(I4e," (ViT model)"),I4e.forEach(t),mao=i(ae),$h=n(ae,"LI",{});var q4e=s($h);boe=n(q4e,"STRONG",{});var RVr=s(boe);gao=r(RVr,"vit_mae"),RVr.forEach(t),hao=r(q4e," \u2014 "),oB=n(q4e,"A",{href:!0});var BVr=s(oB);pao=r(BVr,"ViTFeatureExtractor"),BVr.forEach(t),_ao=r(q4e," (ViTMAE model)"),q4e.forEach(t),uao=i(ae),Ih=n(ae,"LI",{});var N4e=s(Ih);voe=n(N4e,"STRONG",{});var PVr=s(voe);bao=r(PVr,"wav2vec2"),PVr.forEach(t),vao=r(N4e," \u2014 "),rB=n(N4e,"A",{href:!0});var $Vr=s(rB);Fao=r($Vr,"Wav2Vec2FeatureExtractor"),$Vr.forEach(t),Tao=r(N4e," (Wav2Vec2 model)"),N4e.forEach(t),ae.forEach(t),Mao=i(Nt),m(qh.$$.fragment,Nt),Eao=i(Nt),Foe=n(Nt,"P",{});var IVr=s(Foe);Cao=r(IVr,"Examples:"),IVr.forEach(t),wao=i(Nt),m(ZC.$$.fragment,Nt),Nt.forEach(t),Aao=i(zs),Nh=n(zs,"DIV",{class:!0});var HPe=s(Nh);m(e5.$$.fragment,HPe),yao=i(HPe),Toe=n(HPe,"P",{});var qVr=s(Toe);Lao=r(qVr,"Register a new feature extractor for this class."),qVr.forEach(t),HPe.forEach(t),zs.forEach(t),ORe=i(c),Ui=n(c,"H2",{class:!0});var UPe=s(Ui);jh=n(UPe,"A",{id:!0,class:!0,href:!0});var NVr=s(jh);Moe=n(NVr,"SPAN",{});var jVr=s(Moe);m(o5.$$.fragment,jVr),jVr.forEach(t),NVr.forEach(t),xao=i(UPe),Eoe=n(UPe,"SPAN",{});var DVr=s(Eoe);kao=r(DVr,"AutoProcessor"),DVr.forEach(t),UPe.forEach(t),VRe=i(c),Uo=n(c,"DIV",{class:!0});var Qs=s(Uo);m(r5.$$.fragment,Qs),Sao=i(Qs),t5=n(Qs,"P",{});var JPe=s(t5);Rao=r(JPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),tB=n(JPe,"A",{href:!0});var GVr=s(tB);Bao=r(GVr,"AutoProcessor.from_pretrained()"),GVr.forEach(t),Pao=r(JPe," class method."),JPe.forEach(t),$ao=i(Qs),a5=n(Qs,"P",{});var YPe=s(a5);Iao=r(YPe,"This class cannot be instantiated directly using "),Coe=n(YPe,"CODE",{});var OVr=s(Coe);qao=r(OVr,"__init__()"),OVr.forEach(t),Nao=r(YPe," (throws an error)."),YPe.forEach(t),jao=i(Qs),Ie=n(Qs,"DIV",{class:!0});var jt=s(Ie);m(n5.$$.fragment,jt),Dao=i(jt),woe=n(jt,"P",{});var VVr=s(woe);Gao=r(VVr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),VVr.forEach(t),Oao=i(jt),Ji=n(jt,"P",{});var vU=s(Ji);Vao=r(vU,"The processor class to instantiate is selected based on the "),Aoe=n(vU,"CODE",{});var XVr=s(Aoe);Xao=r(XVr,"model_type"),XVr.forEach(t),zao=r(vU,` property of the config object (either
passed as an argument or loaded from `),yoe=n(vU,"CODE",{});var zVr=s(yoe);Qao=r(zVr,"pretrained_model_name_or_path"),zVr.forEach(t),Wao=r(vU," if possible):"),vU.forEach(t),Hao=i(jt),ke=n(jt,"UL",{});var jo=s(ke);Dh=n(jo,"LI",{});var j4e=s(Dh);Loe=n(j4e,"STRONG",{});var QVr=s(Loe);Uao=r(QVr,"clip"),QVr.forEach(t),Jao=r(j4e," \u2014 "),aB=n(j4e,"A",{href:!0});var WVr=s(aB);Yao=r(WVr,"CLIPProcessor"),WVr.forEach(t),Kao=r(j4e," (CLIP model)"),j4e.forEach(t),Zao=i(jo),Gh=n(jo,"LI",{});var D4e=s(Gh);xoe=n(D4e,"STRONG",{});var HVr=s(xoe);eno=r(HVr,"layoutlmv2"),HVr.forEach(t),ono=r(D4e," \u2014 "),nB=n(D4e,"A",{href:!0});var UVr=s(nB);rno=r(UVr,"LayoutLMv2Processor"),UVr.forEach(t),tno=r(D4e," (LayoutLMv2 model)"),D4e.forEach(t),ano=i(jo),Oh=n(jo,"LI",{});var G4e=s(Oh);koe=n(G4e,"STRONG",{});var JVr=s(koe);nno=r(JVr,"layoutxlm"),JVr.forEach(t),sno=r(G4e," \u2014 "),sB=n(G4e,"A",{href:!0});var YVr=s(sB);lno=r(YVr,"LayoutXLMProcessor"),YVr.forEach(t),ino=r(G4e," (LayoutXLM model)"),G4e.forEach(t),dno=i(jo),Vh=n(jo,"LI",{});var O4e=s(Vh);Soe=n(O4e,"STRONG",{});var KVr=s(Soe);cno=r(KVr,"speech_to_text"),KVr.forEach(t),fno=r(O4e," \u2014 "),lB=n(O4e,"A",{href:!0});var ZVr=s(lB);mno=r(ZVr,"Speech2TextProcessor"),ZVr.forEach(t),gno=r(O4e," (Speech2Text model)"),O4e.forEach(t),hno=i(jo),Xh=n(jo,"LI",{});var V4e=s(Xh);Roe=n(V4e,"STRONG",{});var eXr=s(Roe);pno=r(eXr,"speech_to_text_2"),eXr.forEach(t),_no=r(V4e," \u2014 "),iB=n(V4e,"A",{href:!0});var oXr=s(iB);uno=r(oXr,"Speech2Text2Processor"),oXr.forEach(t),bno=r(V4e," (Speech2Text2 model)"),V4e.forEach(t),vno=i(jo),zh=n(jo,"LI",{});var X4e=s(zh);Boe=n(X4e,"STRONG",{});var rXr=s(Boe);Fno=r(rXr,"trocr"),rXr.forEach(t),Tno=r(X4e," \u2014 "),dB=n(X4e,"A",{href:!0});var tXr=s(dB);Mno=r(tXr,"TrOCRProcessor"),tXr.forEach(t),Eno=r(X4e," (TrOCR model)"),X4e.forEach(t),Cno=i(jo),Qh=n(jo,"LI",{});var z4e=s(Qh);Poe=n(z4e,"STRONG",{});var aXr=s(Poe);wno=r(aXr,"vision-text-dual-encoder"),aXr.forEach(t),Ano=r(z4e," \u2014 "),cB=n(z4e,"A",{href:!0});var nXr=s(cB);yno=r(nXr,"VisionTextDualEncoderProcessor"),nXr.forEach(t),Lno=r(z4e," (VisionTextDualEncoder model)"),z4e.forEach(t),xno=i(jo),Wh=n(jo,"LI",{});var Q4e=s(Wh);$oe=n(Q4e,"STRONG",{});var sXr=s($oe);kno=r(sXr,"wav2vec2"),sXr.forEach(t),Sno=r(Q4e," \u2014 "),fB=n(Q4e,"A",{href:!0});var lXr=s(fB);Rno=r(lXr,"Wav2Vec2Processor"),lXr.forEach(t),Bno=r(Q4e," (Wav2Vec2 model)"),Q4e.forEach(t),jo.forEach(t),Pno=i(jt),m(Hh.$$.fragment,jt),$no=i(jt),Ioe=n(jt,"P",{});var iXr=s(Ioe);Ino=r(iXr,"Examples:"),iXr.forEach(t),qno=i(jt),m(s5.$$.fragment,jt),jt.forEach(t),Nno=i(Qs),Uh=n(Qs,"DIV",{class:!0});var KPe=s(Uh);m(l5.$$.fragment,KPe),jno=i(KPe),qoe=n(KPe,"P",{});var dXr=s(qoe);Dno=r(dXr,"Register a new processor for this class."),dXr.forEach(t),KPe.forEach(t),Qs.forEach(t),XRe=i(c),Yi=n(c,"H2",{class:!0});var ZPe=s(Yi);Jh=n(ZPe,"A",{id:!0,class:!0,href:!0});var cXr=s(Jh);Noe=n(cXr,"SPAN",{});var fXr=s(Noe);m(i5.$$.fragment,fXr),fXr.forEach(t),cXr.forEach(t),Gno=i(ZPe),joe=n(ZPe,"SPAN",{});var mXr=s(joe);Ono=r(mXr,"AutoModel"),mXr.forEach(t),ZPe.forEach(t),zRe=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(d5.$$.fragment,Ws),Vno=i(Ws),Ki=n(Ws,"P",{});var FU=s(Ki);Xno=r(FU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mB=n(FU,"A",{href:!0});var gXr=s(mB);zno=r(gXr,"from_pretrained()"),gXr.forEach(t),Qno=r(FU," class method or the "),gB=n(FU,"A",{href:!0});var hXr=s(gB);Wno=r(hXr,"from_config()"),hXr.forEach(t),Hno=r(FU,` class
method.`),FU.forEach(t),Uno=i(Ws),c5=n(Ws,"P",{});var e$e=s(c5);Jno=r(e$e,"This class cannot be instantiated directly using "),Doe=n(e$e,"CODE",{});var pXr=s(Doe);Yno=r(pXr,"__init__()"),pXr.forEach(t),Kno=r(e$e," (throws an error)."),e$e.forEach(t),Zno=i(Ws),Xr=n(Ws,"DIV",{class:!0});var Hs=s(Xr);m(f5.$$.fragment,Hs),eso=i(Hs),Goe=n(Hs,"P",{});var _Xr=s(Goe);oso=r(_Xr,"Instantiates one of the base model classes of the library from a configuration."),_Xr.forEach(t),rso=i(Hs),Zi=n(Hs,"P",{});var TU=s(Zi);tso=r(TU,`Note:
Loading a model from its configuration file does `),Ooe=n(TU,"STRONG",{});var uXr=s(Ooe);aso=r(uXr,"not"),uXr.forEach(t),nso=r(TU,` load the model weights. It only affects the
model\u2019s configuration. Use `),hB=n(TU,"A",{href:!0});var bXr=s(hB);sso=r(bXr,"from_pretrained()"),bXr.forEach(t),lso=r(TU," to load the model weights."),TU.forEach(t),iso=i(Hs),Voe=n(Hs,"P",{});var vXr=s(Voe);dso=r(vXr,"Examples:"),vXr.forEach(t),cso=i(Hs),m(m5.$$.fragment,Hs),Hs.forEach(t),fso=i(Ws),qe=n(Ws,"DIV",{class:!0});var Dt=s(qe);m(g5.$$.fragment,Dt),mso=i(Dt),Xoe=n(Dt,"P",{});var FXr=s(Xoe);gso=r(FXr,"Instantiate one of the base model classes of the library from a pretrained model."),FXr.forEach(t),hso=i(Dt),Xa=n(Dt,"P",{});var SE=s(Xa);pso=r(SE,"The model class to instantiate is selected based on the "),zoe=n(SE,"CODE",{});var TXr=s(zoe);_so=r(TXr,"model_type"),TXr.forEach(t),uso=r(SE,` property of the config object (either
passed as an argument or loaded from `),Qoe=n(SE,"CODE",{});var MXr=s(Qoe);bso=r(MXr,"pretrained_model_name_or_path"),MXr.forEach(t),vso=r(SE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Woe=n(SE,"CODE",{});var EXr=s(Woe);Fso=r(EXr,"pretrained_model_name_or_path"),EXr.forEach(t),Tso=r(SE,":"),SE.forEach(t),Mso=i(Dt),T=n(Dt,"UL",{});var M=s(T);Yh=n(M,"LI",{});var W4e=s(Yh);Hoe=n(W4e,"STRONG",{});var CXr=s(Hoe);Eso=r(CXr,"albert"),CXr.forEach(t),Cso=r(W4e," \u2014 "),pB=n(W4e,"A",{href:!0});var wXr=s(pB);wso=r(wXr,"AlbertModel"),wXr.forEach(t),Aso=r(W4e," (ALBERT model)"),W4e.forEach(t),yso=i(M),Kh=n(M,"LI",{});var H4e=s(Kh);Uoe=n(H4e,"STRONG",{});var AXr=s(Uoe);Lso=r(AXr,"bart"),AXr.forEach(t),xso=r(H4e," \u2014 "),_B=n(H4e,"A",{href:!0});var yXr=s(_B);kso=r(yXr,"BartModel"),yXr.forEach(t),Sso=r(H4e," (BART model)"),H4e.forEach(t),Rso=i(M),Zh=n(M,"LI",{});var U4e=s(Zh);Joe=n(U4e,"STRONG",{});var LXr=s(Joe);Bso=r(LXr,"beit"),LXr.forEach(t),Pso=r(U4e," \u2014 "),uB=n(U4e,"A",{href:!0});var xXr=s(uB);$so=r(xXr,"BeitModel"),xXr.forEach(t),Iso=r(U4e," (BEiT model)"),U4e.forEach(t),qso=i(M),ep=n(M,"LI",{});var J4e=s(ep);Yoe=n(J4e,"STRONG",{});var kXr=s(Yoe);Nso=r(kXr,"bert"),kXr.forEach(t),jso=r(J4e," \u2014 "),bB=n(J4e,"A",{href:!0});var SXr=s(bB);Dso=r(SXr,"BertModel"),SXr.forEach(t),Gso=r(J4e," (BERT model)"),J4e.forEach(t),Oso=i(M),op=n(M,"LI",{});var Y4e=s(op);Koe=n(Y4e,"STRONG",{});var RXr=s(Koe);Vso=r(RXr,"bert-generation"),RXr.forEach(t),Xso=r(Y4e," \u2014 "),vB=n(Y4e,"A",{href:!0});var BXr=s(vB);zso=r(BXr,"BertGenerationEncoder"),BXr.forEach(t),Qso=r(Y4e," (Bert Generation model)"),Y4e.forEach(t),Wso=i(M),rp=n(M,"LI",{});var K4e=s(rp);Zoe=n(K4e,"STRONG",{});var PXr=s(Zoe);Hso=r(PXr,"big_bird"),PXr.forEach(t),Uso=r(K4e," \u2014 "),FB=n(K4e,"A",{href:!0});var $Xr=s(FB);Jso=r($Xr,"BigBirdModel"),$Xr.forEach(t),Yso=r(K4e," (BigBird model)"),K4e.forEach(t),Kso=i(M),tp=n(M,"LI",{});var Z4e=s(tp);ere=n(Z4e,"STRONG",{});var IXr=s(ere);Zso=r(IXr,"bigbird_pegasus"),IXr.forEach(t),elo=r(Z4e," \u2014 "),TB=n(Z4e,"A",{href:!0});var qXr=s(TB);olo=r(qXr,"BigBirdPegasusModel"),qXr.forEach(t),rlo=r(Z4e," (BigBirdPegasus model)"),Z4e.forEach(t),tlo=i(M),ap=n(M,"LI",{});var eEe=s(ap);ore=n(eEe,"STRONG",{});var NXr=s(ore);alo=r(NXr,"blenderbot"),NXr.forEach(t),nlo=r(eEe," \u2014 "),MB=n(eEe,"A",{href:!0});var jXr=s(MB);slo=r(jXr,"BlenderbotModel"),jXr.forEach(t),llo=r(eEe," (Blenderbot model)"),eEe.forEach(t),ilo=i(M),np=n(M,"LI",{});var oEe=s(np);rre=n(oEe,"STRONG",{});var DXr=s(rre);dlo=r(DXr,"blenderbot-small"),DXr.forEach(t),clo=r(oEe," \u2014 "),EB=n(oEe,"A",{href:!0});var GXr=s(EB);flo=r(GXr,"BlenderbotSmallModel"),GXr.forEach(t),mlo=r(oEe," (BlenderbotSmall model)"),oEe.forEach(t),glo=i(M),sp=n(M,"LI",{});var rEe=s(sp);tre=n(rEe,"STRONG",{});var OXr=s(tre);hlo=r(OXr,"camembert"),OXr.forEach(t),plo=r(rEe," \u2014 "),CB=n(rEe,"A",{href:!0});var VXr=s(CB);_lo=r(VXr,"CamembertModel"),VXr.forEach(t),ulo=r(rEe," (CamemBERT model)"),rEe.forEach(t),blo=i(M),lp=n(M,"LI",{});var tEe=s(lp);are=n(tEe,"STRONG",{});var XXr=s(are);vlo=r(XXr,"canine"),XXr.forEach(t),Flo=r(tEe," \u2014 "),wB=n(tEe,"A",{href:!0});var zXr=s(wB);Tlo=r(zXr,"CanineModel"),zXr.forEach(t),Mlo=r(tEe," (Canine model)"),tEe.forEach(t),Elo=i(M),ip=n(M,"LI",{});var aEe=s(ip);nre=n(aEe,"STRONG",{});var QXr=s(nre);Clo=r(QXr,"clip"),QXr.forEach(t),wlo=r(aEe," \u2014 "),AB=n(aEe,"A",{href:!0});var WXr=s(AB);Alo=r(WXr,"CLIPModel"),WXr.forEach(t),ylo=r(aEe," (CLIP model)"),aEe.forEach(t),Llo=i(M),dp=n(M,"LI",{});var nEe=s(dp);sre=n(nEe,"STRONG",{});var HXr=s(sre);xlo=r(HXr,"convbert"),HXr.forEach(t),klo=r(nEe," \u2014 "),yB=n(nEe,"A",{href:!0});var UXr=s(yB);Slo=r(UXr,"ConvBertModel"),UXr.forEach(t),Rlo=r(nEe," (ConvBERT model)"),nEe.forEach(t),Blo=i(M),cp=n(M,"LI",{});var sEe=s(cp);lre=n(sEe,"STRONG",{});var JXr=s(lre);Plo=r(JXr,"convnext"),JXr.forEach(t),$lo=r(sEe," \u2014 "),LB=n(sEe,"A",{href:!0});var YXr=s(LB);Ilo=r(YXr,"ConvNextModel"),YXr.forEach(t),qlo=r(sEe," (ConvNext model)"),sEe.forEach(t),Nlo=i(M),fp=n(M,"LI",{});var lEe=s(fp);ire=n(lEe,"STRONG",{});var KXr=s(ire);jlo=r(KXr,"ctrl"),KXr.forEach(t),Dlo=r(lEe," \u2014 "),xB=n(lEe,"A",{href:!0});var ZXr=s(xB);Glo=r(ZXr,"CTRLModel"),ZXr.forEach(t),Olo=r(lEe," (CTRL model)"),lEe.forEach(t),Vlo=i(M),mp=n(M,"LI",{});var iEe=s(mp);dre=n(iEe,"STRONG",{});var ezr=s(dre);Xlo=r(ezr,"data2vec-audio"),ezr.forEach(t),zlo=r(iEe," \u2014 "),kB=n(iEe,"A",{href:!0});var ozr=s(kB);Qlo=r(ozr,"Data2VecAudioModel"),ozr.forEach(t),Wlo=r(iEe," (Data2VecAudio model)"),iEe.forEach(t),Hlo=i(M),gp=n(M,"LI",{});var dEe=s(gp);cre=n(dEe,"STRONG",{});var rzr=s(cre);Ulo=r(rzr,"data2vec-text"),rzr.forEach(t),Jlo=r(dEe," \u2014 "),SB=n(dEe,"A",{href:!0});var tzr=s(SB);Ylo=r(tzr,"Data2VecTextModel"),tzr.forEach(t),Klo=r(dEe," (Data2VecText model)"),dEe.forEach(t),Zlo=i(M),hp=n(M,"LI",{});var cEe=s(hp);fre=n(cEe,"STRONG",{});var azr=s(fre);eio=r(azr,"data2vec-vision"),azr.forEach(t),oio=r(cEe," \u2014 "),RB=n(cEe,"A",{href:!0});var nzr=s(RB);rio=r(nzr,"Data2VecVisionModel"),nzr.forEach(t),tio=r(cEe," (Data2VecVision model)"),cEe.forEach(t),aio=i(M),pp=n(M,"LI",{});var fEe=s(pp);mre=n(fEe,"STRONG",{});var szr=s(mre);nio=r(szr,"deberta"),szr.forEach(t),sio=r(fEe," \u2014 "),BB=n(fEe,"A",{href:!0});var lzr=s(BB);lio=r(lzr,"DebertaModel"),lzr.forEach(t),iio=r(fEe," (DeBERTa model)"),fEe.forEach(t),dio=i(M),_p=n(M,"LI",{});var mEe=s(_p);gre=n(mEe,"STRONG",{});var izr=s(gre);cio=r(izr,"deberta-v2"),izr.forEach(t),fio=r(mEe," \u2014 "),PB=n(mEe,"A",{href:!0});var dzr=s(PB);mio=r(dzr,"DebertaV2Model"),dzr.forEach(t),gio=r(mEe," (DeBERTa-v2 model)"),mEe.forEach(t),hio=i(M),up=n(M,"LI",{});var gEe=s(up);hre=n(gEe,"STRONG",{});var czr=s(hre);pio=r(czr,"decision_transformer"),czr.forEach(t),_io=r(gEe," \u2014 "),$B=n(gEe,"A",{href:!0});var fzr=s($B);uio=r(fzr,"DecisionTransformerModel"),fzr.forEach(t),bio=r(gEe," (Decision Transformer model)"),gEe.forEach(t),vio=i(M),bp=n(M,"LI",{});var hEe=s(bp);pre=n(hEe,"STRONG",{});var mzr=s(pre);Fio=r(mzr,"deit"),mzr.forEach(t),Tio=r(hEe," \u2014 "),IB=n(hEe,"A",{href:!0});var gzr=s(IB);Mio=r(gzr,"DeiTModel"),gzr.forEach(t),Eio=r(hEe," (DeiT model)"),hEe.forEach(t),Cio=i(M),vp=n(M,"LI",{});var pEe=s(vp);_re=n(pEe,"STRONG",{});var hzr=s(_re);wio=r(hzr,"detr"),hzr.forEach(t),Aio=r(pEe," \u2014 "),qB=n(pEe,"A",{href:!0});var pzr=s(qB);yio=r(pzr,"DetrModel"),pzr.forEach(t),Lio=r(pEe," (DETR model)"),pEe.forEach(t),xio=i(M),Fp=n(M,"LI",{});var _Ee=s(Fp);ure=n(_Ee,"STRONG",{});var _zr=s(ure);kio=r(_zr,"distilbert"),_zr.forEach(t),Sio=r(_Ee," \u2014 "),NB=n(_Ee,"A",{href:!0});var uzr=s(NB);Rio=r(uzr,"DistilBertModel"),uzr.forEach(t),Bio=r(_Ee," (DistilBERT model)"),_Ee.forEach(t),Pio=i(M),Tp=n(M,"LI",{});var uEe=s(Tp);bre=n(uEe,"STRONG",{});var bzr=s(bre);$io=r(bzr,"dpr"),bzr.forEach(t),Iio=r(uEe," \u2014 "),jB=n(uEe,"A",{href:!0});var vzr=s(jB);qio=r(vzr,"DPRQuestionEncoder"),vzr.forEach(t),Nio=r(uEe," (DPR model)"),uEe.forEach(t),jio=i(M),Mp=n(M,"LI",{});var bEe=s(Mp);vre=n(bEe,"STRONG",{});var Fzr=s(vre);Dio=r(Fzr,"dpt"),Fzr.forEach(t),Gio=r(bEe," \u2014 "),DB=n(bEe,"A",{href:!0});var Tzr=s(DB);Oio=r(Tzr,"DPTModel"),Tzr.forEach(t),Vio=r(bEe," (DPT model)"),bEe.forEach(t),Xio=i(M),Ep=n(M,"LI",{});var vEe=s(Ep);Fre=n(vEe,"STRONG",{});var Mzr=s(Fre);zio=r(Mzr,"electra"),Mzr.forEach(t),Qio=r(vEe," \u2014 "),GB=n(vEe,"A",{href:!0});var Ezr=s(GB);Wio=r(Ezr,"ElectraModel"),Ezr.forEach(t),Hio=r(vEe," (ELECTRA model)"),vEe.forEach(t),Uio=i(M),Cp=n(M,"LI",{});var FEe=s(Cp);Tre=n(FEe,"STRONG",{});var Czr=s(Tre);Jio=r(Czr,"flaubert"),Czr.forEach(t),Yio=r(FEe," \u2014 "),OB=n(FEe,"A",{href:!0});var wzr=s(OB);Kio=r(wzr,"FlaubertModel"),wzr.forEach(t),Zio=r(FEe," (FlauBERT model)"),FEe.forEach(t),edo=i(M),wp=n(M,"LI",{});var TEe=s(wp);Mre=n(TEe,"STRONG",{});var Azr=s(Mre);odo=r(Azr,"fnet"),Azr.forEach(t),rdo=r(TEe," \u2014 "),VB=n(TEe,"A",{href:!0});var yzr=s(VB);tdo=r(yzr,"FNetModel"),yzr.forEach(t),ado=r(TEe," (FNet model)"),TEe.forEach(t),ndo=i(M),Ap=n(M,"LI",{});var MEe=s(Ap);Ere=n(MEe,"STRONG",{});var Lzr=s(Ere);sdo=r(Lzr,"fsmt"),Lzr.forEach(t),ldo=r(MEe," \u2014 "),XB=n(MEe,"A",{href:!0});var xzr=s(XB);ido=r(xzr,"FSMTModel"),xzr.forEach(t),ddo=r(MEe," (FairSeq Machine-Translation model)"),MEe.forEach(t),cdo=i(M),Ds=n(M,"LI",{});var u9=s(Ds);Cre=n(u9,"STRONG",{});var kzr=s(Cre);fdo=r(kzr,"funnel"),kzr.forEach(t),mdo=r(u9," \u2014 "),zB=n(u9,"A",{href:!0});var Szr=s(zB);gdo=r(Szr,"FunnelModel"),Szr.forEach(t),hdo=r(u9," or "),QB=n(u9,"A",{href:!0});var Rzr=s(QB);pdo=r(Rzr,"FunnelBaseModel"),Rzr.forEach(t),_do=r(u9," (Funnel Transformer model)"),u9.forEach(t),udo=i(M),yp=n(M,"LI",{});var EEe=s(yp);wre=n(EEe,"STRONG",{});var Bzr=s(wre);bdo=r(Bzr,"glpn"),Bzr.forEach(t),vdo=r(EEe," \u2014 "),WB=n(EEe,"A",{href:!0});var Pzr=s(WB);Fdo=r(Pzr,"GLPNModel"),Pzr.forEach(t),Tdo=r(EEe," (GLPN model)"),EEe.forEach(t),Mdo=i(M),Lp=n(M,"LI",{});var CEe=s(Lp);Are=n(CEe,"STRONG",{});var $zr=s(Are);Edo=r($zr,"gpt2"),$zr.forEach(t),Cdo=r(CEe," \u2014 "),HB=n(CEe,"A",{href:!0});var Izr=s(HB);wdo=r(Izr,"GPT2Model"),Izr.forEach(t),Ado=r(CEe," (OpenAI GPT-2 model)"),CEe.forEach(t),ydo=i(M),xp=n(M,"LI",{});var wEe=s(xp);yre=n(wEe,"STRONG",{});var qzr=s(yre);Ldo=r(qzr,"gpt_neo"),qzr.forEach(t),xdo=r(wEe," \u2014 "),UB=n(wEe,"A",{href:!0});var Nzr=s(UB);kdo=r(Nzr,"GPTNeoModel"),Nzr.forEach(t),Sdo=r(wEe," (GPT Neo model)"),wEe.forEach(t),Rdo=i(M),kp=n(M,"LI",{});var AEe=s(kp);Lre=n(AEe,"STRONG",{});var jzr=s(Lre);Bdo=r(jzr,"gptj"),jzr.forEach(t),Pdo=r(AEe," \u2014 "),JB=n(AEe,"A",{href:!0});var Dzr=s(JB);$do=r(Dzr,"GPTJModel"),Dzr.forEach(t),Ido=r(AEe," (GPT-J model)"),AEe.forEach(t),qdo=i(M),Sp=n(M,"LI",{});var yEe=s(Sp);xre=n(yEe,"STRONG",{});var Gzr=s(xre);Ndo=r(Gzr,"hubert"),Gzr.forEach(t),jdo=r(yEe," \u2014 "),YB=n(yEe,"A",{href:!0});var Ozr=s(YB);Ddo=r(Ozr,"HubertModel"),Ozr.forEach(t),Gdo=r(yEe," (Hubert model)"),yEe.forEach(t),Odo=i(M),Rp=n(M,"LI",{});var LEe=s(Rp);kre=n(LEe,"STRONG",{});var Vzr=s(kre);Vdo=r(Vzr,"ibert"),Vzr.forEach(t),Xdo=r(LEe," \u2014 "),KB=n(LEe,"A",{href:!0});var Xzr=s(KB);zdo=r(Xzr,"IBertModel"),Xzr.forEach(t),Qdo=r(LEe," (I-BERT model)"),LEe.forEach(t),Wdo=i(M),Bp=n(M,"LI",{});var xEe=s(Bp);Sre=n(xEe,"STRONG",{});var zzr=s(Sre);Hdo=r(zzr,"imagegpt"),zzr.forEach(t),Udo=r(xEe," \u2014 "),ZB=n(xEe,"A",{href:!0});var Qzr=s(ZB);Jdo=r(Qzr,"ImageGPTModel"),Qzr.forEach(t),Ydo=r(xEe," (ImageGPT model)"),xEe.forEach(t),Kdo=i(M),Pp=n(M,"LI",{});var kEe=s(Pp);Rre=n(kEe,"STRONG",{});var Wzr=s(Rre);Zdo=r(Wzr,"layoutlm"),Wzr.forEach(t),eco=r(kEe," \u2014 "),eP=n(kEe,"A",{href:!0});var Hzr=s(eP);oco=r(Hzr,"LayoutLMModel"),Hzr.forEach(t),rco=r(kEe," (LayoutLM model)"),kEe.forEach(t),tco=i(M),$p=n(M,"LI",{});var SEe=s($p);Bre=n(SEe,"STRONG",{});var Uzr=s(Bre);aco=r(Uzr,"layoutlmv2"),Uzr.forEach(t),nco=r(SEe," \u2014 "),oP=n(SEe,"A",{href:!0});var Jzr=s(oP);sco=r(Jzr,"LayoutLMv2Model"),Jzr.forEach(t),lco=r(SEe," (LayoutLMv2 model)"),SEe.forEach(t),ico=i(M),Ip=n(M,"LI",{});var REe=s(Ip);Pre=n(REe,"STRONG",{});var Yzr=s(Pre);dco=r(Yzr,"led"),Yzr.forEach(t),cco=r(REe," \u2014 "),rP=n(REe,"A",{href:!0});var Kzr=s(rP);fco=r(Kzr,"LEDModel"),Kzr.forEach(t),mco=r(REe," (LED model)"),REe.forEach(t),gco=i(M),qp=n(M,"LI",{});var BEe=s(qp);$re=n(BEe,"STRONG",{});var Zzr=s($re);hco=r(Zzr,"longformer"),Zzr.forEach(t),pco=r(BEe," \u2014 "),tP=n(BEe,"A",{href:!0});var eQr=s(tP);_co=r(eQr,"LongformerModel"),eQr.forEach(t),uco=r(BEe," (Longformer model)"),BEe.forEach(t),bco=i(M),Np=n(M,"LI",{});var PEe=s(Np);Ire=n(PEe,"STRONG",{});var oQr=s(Ire);vco=r(oQr,"luke"),oQr.forEach(t),Fco=r(PEe," \u2014 "),aP=n(PEe,"A",{href:!0});var rQr=s(aP);Tco=r(rQr,"LukeModel"),rQr.forEach(t),Mco=r(PEe," (LUKE model)"),PEe.forEach(t),Eco=i(M),jp=n(M,"LI",{});var $Ee=s(jp);qre=n($Ee,"STRONG",{});var tQr=s(qre);Cco=r(tQr,"lxmert"),tQr.forEach(t),wco=r($Ee," \u2014 "),nP=n($Ee,"A",{href:!0});var aQr=s(nP);Aco=r(aQr,"LxmertModel"),aQr.forEach(t),yco=r($Ee," (LXMERT model)"),$Ee.forEach(t),Lco=i(M),Dp=n(M,"LI",{});var IEe=s(Dp);Nre=n(IEe,"STRONG",{});var nQr=s(Nre);xco=r(nQr,"m2m_100"),nQr.forEach(t),kco=r(IEe," \u2014 "),sP=n(IEe,"A",{href:!0});var sQr=s(sP);Sco=r(sQr,"M2M100Model"),sQr.forEach(t),Rco=r(IEe," (M2M100 model)"),IEe.forEach(t),Bco=i(M),Gp=n(M,"LI",{});var qEe=s(Gp);jre=n(qEe,"STRONG",{});var lQr=s(jre);Pco=r(lQr,"marian"),lQr.forEach(t),$co=r(qEe," \u2014 "),lP=n(qEe,"A",{href:!0});var iQr=s(lP);Ico=r(iQr,"MarianModel"),iQr.forEach(t),qco=r(qEe," (Marian model)"),qEe.forEach(t),Nco=i(M),Op=n(M,"LI",{});var NEe=s(Op);Dre=n(NEe,"STRONG",{});var dQr=s(Dre);jco=r(dQr,"maskformer"),dQr.forEach(t),Dco=r(NEe," \u2014 "),iP=n(NEe,"A",{href:!0});var cQr=s(iP);Gco=r(cQr,"MaskFormerModel"),cQr.forEach(t),Oco=r(NEe," (MaskFormer model)"),NEe.forEach(t),Vco=i(M),Vp=n(M,"LI",{});var jEe=s(Vp);Gre=n(jEe,"STRONG",{});var fQr=s(Gre);Xco=r(fQr,"mbart"),fQr.forEach(t),zco=r(jEe," \u2014 "),dP=n(jEe,"A",{href:!0});var mQr=s(dP);Qco=r(mQr,"MBartModel"),mQr.forEach(t),Wco=r(jEe," (mBART model)"),jEe.forEach(t),Hco=i(M),Xp=n(M,"LI",{});var DEe=s(Xp);Ore=n(DEe,"STRONG",{});var gQr=s(Ore);Uco=r(gQr,"megatron-bert"),gQr.forEach(t),Jco=r(DEe," \u2014 "),cP=n(DEe,"A",{href:!0});var hQr=s(cP);Yco=r(hQr,"MegatronBertModel"),hQr.forEach(t),Kco=r(DEe," (MegatronBert model)"),DEe.forEach(t),Zco=i(M),zp=n(M,"LI",{});var GEe=s(zp);Vre=n(GEe,"STRONG",{});var pQr=s(Vre);efo=r(pQr,"mobilebert"),pQr.forEach(t),ofo=r(GEe," \u2014 "),fP=n(GEe,"A",{href:!0});var _Qr=s(fP);rfo=r(_Qr,"MobileBertModel"),_Qr.forEach(t),tfo=r(GEe," (MobileBERT model)"),GEe.forEach(t),afo=i(M),Qp=n(M,"LI",{});var OEe=s(Qp);Xre=n(OEe,"STRONG",{});var uQr=s(Xre);nfo=r(uQr,"mpnet"),uQr.forEach(t),sfo=r(OEe," \u2014 "),mP=n(OEe,"A",{href:!0});var bQr=s(mP);lfo=r(bQr,"MPNetModel"),bQr.forEach(t),ifo=r(OEe," (MPNet model)"),OEe.forEach(t),dfo=i(M),Wp=n(M,"LI",{});var VEe=s(Wp);zre=n(VEe,"STRONG",{});var vQr=s(zre);cfo=r(vQr,"mt5"),vQr.forEach(t),ffo=r(VEe," \u2014 "),gP=n(VEe,"A",{href:!0});var FQr=s(gP);mfo=r(FQr,"MT5Model"),FQr.forEach(t),gfo=r(VEe," (mT5 model)"),VEe.forEach(t),hfo=i(M),Hp=n(M,"LI",{});var XEe=s(Hp);Qre=n(XEe,"STRONG",{});var TQr=s(Qre);pfo=r(TQr,"nystromformer"),TQr.forEach(t),_fo=r(XEe," \u2014 "),hP=n(XEe,"A",{href:!0});var MQr=s(hP);ufo=r(MQr,"NystromformerModel"),MQr.forEach(t),bfo=r(XEe," (Nystromformer model)"),XEe.forEach(t),vfo=i(M),Up=n(M,"LI",{});var zEe=s(Up);Wre=n(zEe,"STRONG",{});var EQr=s(Wre);Ffo=r(EQr,"openai-gpt"),EQr.forEach(t),Tfo=r(zEe," \u2014 "),pP=n(zEe,"A",{href:!0});var CQr=s(pP);Mfo=r(CQr,"OpenAIGPTModel"),CQr.forEach(t),Efo=r(zEe," (OpenAI GPT model)"),zEe.forEach(t),Cfo=i(M),Jp=n(M,"LI",{});var QEe=s(Jp);Hre=n(QEe,"STRONG",{});var wQr=s(Hre);wfo=r(wQr,"pegasus"),wQr.forEach(t),Afo=r(QEe," \u2014 "),_P=n(QEe,"A",{href:!0});var AQr=s(_P);yfo=r(AQr,"PegasusModel"),AQr.forEach(t),Lfo=r(QEe," (Pegasus model)"),QEe.forEach(t),xfo=i(M),Yp=n(M,"LI",{});var WEe=s(Yp);Ure=n(WEe,"STRONG",{});var yQr=s(Ure);kfo=r(yQr,"perceiver"),yQr.forEach(t),Sfo=r(WEe," \u2014 "),uP=n(WEe,"A",{href:!0});var LQr=s(uP);Rfo=r(LQr,"PerceiverModel"),LQr.forEach(t),Bfo=r(WEe," (Perceiver model)"),WEe.forEach(t),Pfo=i(M),Kp=n(M,"LI",{});var HEe=s(Kp);Jre=n(HEe,"STRONG",{});var xQr=s(Jre);$fo=r(xQr,"plbart"),xQr.forEach(t),Ifo=r(HEe," \u2014 "),bP=n(HEe,"A",{href:!0});var kQr=s(bP);qfo=r(kQr,"PLBartModel"),kQr.forEach(t),Nfo=r(HEe," (PLBart model)"),HEe.forEach(t),jfo=i(M),Zp=n(M,"LI",{});var UEe=s(Zp);Yre=n(UEe,"STRONG",{});var SQr=s(Yre);Dfo=r(SQr,"poolformer"),SQr.forEach(t),Gfo=r(UEe," \u2014 "),vP=n(UEe,"A",{href:!0});var RQr=s(vP);Ofo=r(RQr,"PoolFormerModel"),RQr.forEach(t),Vfo=r(UEe," (PoolFormer model)"),UEe.forEach(t),Xfo=i(M),e_=n(M,"LI",{});var JEe=s(e_);Kre=n(JEe,"STRONG",{});var BQr=s(Kre);zfo=r(BQr,"prophetnet"),BQr.forEach(t),Qfo=r(JEe," \u2014 "),FP=n(JEe,"A",{href:!0});var PQr=s(FP);Wfo=r(PQr,"ProphetNetModel"),PQr.forEach(t),Hfo=r(JEe," (ProphetNet model)"),JEe.forEach(t),Ufo=i(M),o_=n(M,"LI",{});var YEe=s(o_);Zre=n(YEe,"STRONG",{});var $Qr=s(Zre);Jfo=r($Qr,"qdqbert"),$Qr.forEach(t),Yfo=r(YEe," \u2014 "),TP=n(YEe,"A",{href:!0});var IQr=s(TP);Kfo=r(IQr,"QDQBertModel"),IQr.forEach(t),Zfo=r(YEe," (QDQBert model)"),YEe.forEach(t),emo=i(M),r_=n(M,"LI",{});var KEe=s(r_);ete=n(KEe,"STRONG",{});var qQr=s(ete);omo=r(qQr,"reformer"),qQr.forEach(t),rmo=r(KEe," \u2014 "),MP=n(KEe,"A",{href:!0});var NQr=s(MP);tmo=r(NQr,"ReformerModel"),NQr.forEach(t),amo=r(KEe," (Reformer model)"),KEe.forEach(t),nmo=i(M),t_=n(M,"LI",{});var ZEe=s(t_);ote=n(ZEe,"STRONG",{});var jQr=s(ote);smo=r(jQr,"regnet"),jQr.forEach(t),lmo=r(ZEe," \u2014 "),EP=n(ZEe,"A",{href:!0});var DQr=s(EP);imo=r(DQr,"RegNetModel"),DQr.forEach(t),dmo=r(ZEe," (RegNet model)"),ZEe.forEach(t),cmo=i(M),a_=n(M,"LI",{});var eCe=s(a_);rte=n(eCe,"STRONG",{});var GQr=s(rte);fmo=r(GQr,"rembert"),GQr.forEach(t),mmo=r(eCe," \u2014 "),CP=n(eCe,"A",{href:!0});var OQr=s(CP);gmo=r(OQr,"RemBertModel"),OQr.forEach(t),hmo=r(eCe," (RemBERT model)"),eCe.forEach(t),pmo=i(M),n_=n(M,"LI",{});var oCe=s(n_);tte=n(oCe,"STRONG",{});var VQr=s(tte);_mo=r(VQr,"resnet"),VQr.forEach(t),umo=r(oCe," \u2014 "),wP=n(oCe,"A",{href:!0});var XQr=s(wP);bmo=r(XQr,"ResNetModel"),XQr.forEach(t),vmo=r(oCe," (ResNet model)"),oCe.forEach(t),Fmo=i(M),s_=n(M,"LI",{});var rCe=s(s_);ate=n(rCe,"STRONG",{});var zQr=s(ate);Tmo=r(zQr,"retribert"),zQr.forEach(t),Mmo=r(rCe," \u2014 "),AP=n(rCe,"A",{href:!0});var QQr=s(AP);Emo=r(QQr,"RetriBertModel"),QQr.forEach(t),Cmo=r(rCe," (RetriBERT model)"),rCe.forEach(t),wmo=i(M),l_=n(M,"LI",{});var tCe=s(l_);nte=n(tCe,"STRONG",{});var WQr=s(nte);Amo=r(WQr,"roberta"),WQr.forEach(t),ymo=r(tCe," \u2014 "),yP=n(tCe,"A",{href:!0});var HQr=s(yP);Lmo=r(HQr,"RobertaModel"),HQr.forEach(t),xmo=r(tCe," (RoBERTa model)"),tCe.forEach(t),kmo=i(M),i_=n(M,"LI",{});var aCe=s(i_);ste=n(aCe,"STRONG",{});var UQr=s(ste);Smo=r(UQr,"roformer"),UQr.forEach(t),Rmo=r(aCe," \u2014 "),LP=n(aCe,"A",{href:!0});var JQr=s(LP);Bmo=r(JQr,"RoFormerModel"),JQr.forEach(t),Pmo=r(aCe," (RoFormer model)"),aCe.forEach(t),$mo=i(M),d_=n(M,"LI",{});var nCe=s(d_);lte=n(nCe,"STRONG",{});var YQr=s(lte);Imo=r(YQr,"segformer"),YQr.forEach(t),qmo=r(nCe," \u2014 "),xP=n(nCe,"A",{href:!0});var KQr=s(xP);Nmo=r(KQr,"SegformerModel"),KQr.forEach(t),jmo=r(nCe," (SegFormer model)"),nCe.forEach(t),Dmo=i(M),c_=n(M,"LI",{});var sCe=s(c_);ite=n(sCe,"STRONG",{});var ZQr=s(ite);Gmo=r(ZQr,"sew"),ZQr.forEach(t),Omo=r(sCe," \u2014 "),kP=n(sCe,"A",{href:!0});var eWr=s(kP);Vmo=r(eWr,"SEWModel"),eWr.forEach(t),Xmo=r(sCe," (SEW model)"),sCe.forEach(t),zmo=i(M),f_=n(M,"LI",{});var lCe=s(f_);dte=n(lCe,"STRONG",{});var oWr=s(dte);Qmo=r(oWr,"sew-d"),oWr.forEach(t),Wmo=r(lCe," \u2014 "),SP=n(lCe,"A",{href:!0});var rWr=s(SP);Hmo=r(rWr,"SEWDModel"),rWr.forEach(t),Umo=r(lCe," (SEW-D model)"),lCe.forEach(t),Jmo=i(M),m_=n(M,"LI",{});var iCe=s(m_);cte=n(iCe,"STRONG",{});var tWr=s(cte);Ymo=r(tWr,"speech_to_text"),tWr.forEach(t),Kmo=r(iCe," \u2014 "),RP=n(iCe,"A",{href:!0});var aWr=s(RP);Zmo=r(aWr,"Speech2TextModel"),aWr.forEach(t),ego=r(iCe," (Speech2Text model)"),iCe.forEach(t),ogo=i(M),g_=n(M,"LI",{});var dCe=s(g_);fte=n(dCe,"STRONG",{});var nWr=s(fte);rgo=r(nWr,"splinter"),nWr.forEach(t),tgo=r(dCe," \u2014 "),BP=n(dCe,"A",{href:!0});var sWr=s(BP);ago=r(sWr,"SplinterModel"),sWr.forEach(t),ngo=r(dCe," (Splinter model)"),dCe.forEach(t),sgo=i(M),h_=n(M,"LI",{});var cCe=s(h_);mte=n(cCe,"STRONG",{});var lWr=s(mte);lgo=r(lWr,"squeezebert"),lWr.forEach(t),igo=r(cCe," \u2014 "),PP=n(cCe,"A",{href:!0});var iWr=s(PP);dgo=r(iWr,"SqueezeBertModel"),iWr.forEach(t),cgo=r(cCe," (SqueezeBERT model)"),cCe.forEach(t),fgo=i(M),p_=n(M,"LI",{});var fCe=s(p_);gte=n(fCe,"STRONG",{});var dWr=s(gte);mgo=r(dWr,"swin"),dWr.forEach(t),ggo=r(fCe," \u2014 "),$P=n(fCe,"A",{href:!0});var cWr=s($P);hgo=r(cWr,"SwinModel"),cWr.forEach(t),pgo=r(fCe," (Swin model)"),fCe.forEach(t),_go=i(M),__=n(M,"LI",{});var mCe=s(__);hte=n(mCe,"STRONG",{});var fWr=s(hte);ugo=r(fWr,"t5"),fWr.forEach(t),bgo=r(mCe," \u2014 "),IP=n(mCe,"A",{href:!0});var mWr=s(IP);vgo=r(mWr,"T5Model"),mWr.forEach(t),Fgo=r(mCe," (T5 model)"),mCe.forEach(t),Tgo=i(M),u_=n(M,"LI",{});var gCe=s(u_);pte=n(gCe,"STRONG",{});var gWr=s(pte);Mgo=r(gWr,"tapas"),gWr.forEach(t),Ego=r(gCe," \u2014 "),qP=n(gCe,"A",{href:!0});var hWr=s(qP);Cgo=r(hWr,"TapasModel"),hWr.forEach(t),wgo=r(gCe," (TAPAS model)"),gCe.forEach(t),Ago=i(M),b_=n(M,"LI",{});var hCe=s(b_);_te=n(hCe,"STRONG",{});var pWr=s(_te);ygo=r(pWr,"transfo-xl"),pWr.forEach(t),Lgo=r(hCe," \u2014 "),NP=n(hCe,"A",{href:!0});var _Wr=s(NP);xgo=r(_Wr,"TransfoXLModel"),_Wr.forEach(t),kgo=r(hCe," (Transformer-XL model)"),hCe.forEach(t),Sgo=i(M),v_=n(M,"LI",{});var pCe=s(v_);ute=n(pCe,"STRONG",{});var uWr=s(ute);Rgo=r(uWr,"unispeech"),uWr.forEach(t),Bgo=r(pCe," \u2014 "),jP=n(pCe,"A",{href:!0});var bWr=s(jP);Pgo=r(bWr,"UniSpeechModel"),bWr.forEach(t),$go=r(pCe," (UniSpeech model)"),pCe.forEach(t),Igo=i(M),F_=n(M,"LI",{});var _Ce=s(F_);bte=n(_Ce,"STRONG",{});var vWr=s(bte);qgo=r(vWr,"unispeech-sat"),vWr.forEach(t),Ngo=r(_Ce," \u2014 "),DP=n(_Ce,"A",{href:!0});var FWr=s(DP);jgo=r(FWr,"UniSpeechSatModel"),FWr.forEach(t),Dgo=r(_Ce," (UniSpeechSat model)"),_Ce.forEach(t),Ggo=i(M),T_=n(M,"LI",{});var uCe=s(T_);vte=n(uCe,"STRONG",{});var TWr=s(vte);Ogo=r(TWr,"van"),TWr.forEach(t),Vgo=r(uCe," \u2014 "),GP=n(uCe,"A",{href:!0});var MWr=s(GP);Xgo=r(MWr,"VanModel"),MWr.forEach(t),zgo=r(uCe," (VAN model)"),uCe.forEach(t),Qgo=i(M),M_=n(M,"LI",{});var bCe=s(M_);Fte=n(bCe,"STRONG",{});var EWr=s(Fte);Wgo=r(EWr,"vilt"),EWr.forEach(t),Hgo=r(bCe," \u2014 "),OP=n(bCe,"A",{href:!0});var CWr=s(OP);Ugo=r(CWr,"ViltModel"),CWr.forEach(t),Jgo=r(bCe," (ViLT model)"),bCe.forEach(t),Ygo=i(M),E_=n(M,"LI",{});var vCe=s(E_);Tte=n(vCe,"STRONG",{});var wWr=s(Tte);Kgo=r(wWr,"vision-text-dual-encoder"),wWr.forEach(t),Zgo=r(vCe," \u2014 "),VP=n(vCe,"A",{href:!0});var AWr=s(VP);eho=r(AWr,"VisionTextDualEncoderModel"),AWr.forEach(t),oho=r(vCe," (VisionTextDualEncoder model)"),vCe.forEach(t),rho=i(M),C_=n(M,"LI",{});var FCe=s(C_);Mte=n(FCe,"STRONG",{});var yWr=s(Mte);tho=r(yWr,"visual_bert"),yWr.forEach(t),aho=r(FCe," \u2014 "),XP=n(FCe,"A",{href:!0});var LWr=s(XP);nho=r(LWr,"VisualBertModel"),LWr.forEach(t),sho=r(FCe," (VisualBert model)"),FCe.forEach(t),lho=i(M),w_=n(M,"LI",{});var TCe=s(w_);Ete=n(TCe,"STRONG",{});var xWr=s(Ete);iho=r(xWr,"vit"),xWr.forEach(t),dho=r(TCe," \u2014 "),zP=n(TCe,"A",{href:!0});var kWr=s(zP);cho=r(kWr,"ViTModel"),kWr.forEach(t),fho=r(TCe," (ViT model)"),TCe.forEach(t),mho=i(M),A_=n(M,"LI",{});var MCe=s(A_);Cte=n(MCe,"STRONG",{});var SWr=s(Cte);gho=r(SWr,"vit_mae"),SWr.forEach(t),hho=r(MCe," \u2014 "),QP=n(MCe,"A",{href:!0});var RWr=s(QP);pho=r(RWr,"ViTMAEModel"),RWr.forEach(t),_ho=r(MCe," (ViTMAE model)"),MCe.forEach(t),uho=i(M),y_=n(M,"LI",{});var ECe=s(y_);wte=n(ECe,"STRONG",{});var BWr=s(wte);bho=r(BWr,"wav2vec2"),BWr.forEach(t),vho=r(ECe," \u2014 "),WP=n(ECe,"A",{href:!0});var PWr=s(WP);Fho=r(PWr,"Wav2Vec2Model"),PWr.forEach(t),Tho=r(ECe," (Wav2Vec2 model)"),ECe.forEach(t),Mho=i(M),L_=n(M,"LI",{});var CCe=s(L_);Ate=n(CCe,"STRONG",{});var $Wr=s(Ate);Eho=r($Wr,"wavlm"),$Wr.forEach(t),Cho=r(CCe," \u2014 "),HP=n(CCe,"A",{href:!0});var IWr=s(HP);who=r(IWr,"WavLMModel"),IWr.forEach(t),Aho=r(CCe," (WavLM model)"),CCe.forEach(t),yho=i(M),x_=n(M,"LI",{});var wCe=s(x_);yte=n(wCe,"STRONG",{});var qWr=s(yte);Lho=r(qWr,"xglm"),qWr.forEach(t),xho=r(wCe," \u2014 "),UP=n(wCe,"A",{href:!0});var NWr=s(UP);kho=r(NWr,"XGLMModel"),NWr.forEach(t),Sho=r(wCe," (XGLM model)"),wCe.forEach(t),Rho=i(M),k_=n(M,"LI",{});var ACe=s(k_);Lte=n(ACe,"STRONG",{});var jWr=s(Lte);Bho=r(jWr,"xlm"),jWr.forEach(t),Pho=r(ACe," \u2014 "),JP=n(ACe,"A",{href:!0});var DWr=s(JP);$ho=r(DWr,"XLMModel"),DWr.forEach(t),Iho=r(ACe," (XLM model)"),ACe.forEach(t),qho=i(M),S_=n(M,"LI",{});var yCe=s(S_);xte=n(yCe,"STRONG",{});var GWr=s(xte);Nho=r(GWr,"xlm-prophetnet"),GWr.forEach(t),jho=r(yCe," \u2014 "),YP=n(yCe,"A",{href:!0});var OWr=s(YP);Dho=r(OWr,"XLMProphetNetModel"),OWr.forEach(t),Gho=r(yCe," (XLMProphetNet model)"),yCe.forEach(t),Oho=i(M),R_=n(M,"LI",{});var LCe=s(R_);kte=n(LCe,"STRONG",{});var VWr=s(kte);Vho=r(VWr,"xlm-roberta"),VWr.forEach(t),Xho=r(LCe," \u2014 "),KP=n(LCe,"A",{href:!0});var XWr=s(KP);zho=r(XWr,"XLMRobertaModel"),XWr.forEach(t),Qho=r(LCe," (XLM-RoBERTa model)"),LCe.forEach(t),Who=i(M),B_=n(M,"LI",{});var xCe=s(B_);Ste=n(xCe,"STRONG",{});var zWr=s(Ste);Hho=r(zWr,"xlm-roberta-xl"),zWr.forEach(t),Uho=r(xCe," \u2014 "),ZP=n(xCe,"A",{href:!0});var QWr=s(ZP);Jho=r(QWr,"XLMRobertaXLModel"),QWr.forEach(t),Yho=r(xCe," (XLM-RoBERTa-XL model)"),xCe.forEach(t),Kho=i(M),P_=n(M,"LI",{});var kCe=s(P_);Rte=n(kCe,"STRONG",{});var WWr=s(Rte);Zho=r(WWr,"xlnet"),WWr.forEach(t),epo=r(kCe," \u2014 "),e$=n(kCe,"A",{href:!0});var HWr=s(e$);opo=r(HWr,"XLNetModel"),HWr.forEach(t),rpo=r(kCe," (XLNet model)"),kCe.forEach(t),tpo=i(M),$_=n(M,"LI",{});var SCe=s($_);Bte=n(SCe,"STRONG",{});var UWr=s(Bte);apo=r(UWr,"yoso"),UWr.forEach(t),npo=r(SCe," \u2014 "),o$=n(SCe,"A",{href:!0});var JWr=s(o$);spo=r(JWr,"YosoModel"),JWr.forEach(t),lpo=r(SCe," (YOSO model)"),SCe.forEach(t),M.forEach(t),ipo=i(Dt),I_=n(Dt,"P",{});var RCe=s(I_);dpo=r(RCe,"The model is set in evaluation mode by default using "),Pte=n(RCe,"CODE",{});var YWr=s(Pte);cpo=r(YWr,"model.eval()"),YWr.forEach(t),fpo=r(RCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$te=n(RCe,"CODE",{});var KWr=s($te);mpo=r(KWr,"model.train()"),KWr.forEach(t),RCe.forEach(t),gpo=i(Dt),Ite=n(Dt,"P",{});var ZWr=s(Ite);hpo=r(ZWr,"Examples:"),ZWr.forEach(t),ppo=i(Dt),m(h5.$$.fragment,Dt),Dt.forEach(t),Ws.forEach(t),QRe=i(c),ed=n(c,"H2",{class:!0});var o$e=s(ed);q_=n(o$e,"A",{id:!0,class:!0,href:!0});var eHr=s(q_);qte=n(eHr,"SPAN",{});var oHr=s(qte);m(p5.$$.fragment,oHr),oHr.forEach(t),eHr.forEach(t),_po=i(o$e),Nte=n(o$e,"SPAN",{});var rHr=s(Nte);upo=r(rHr,"AutoModelForPreTraining"),rHr.forEach(t),o$e.forEach(t),WRe=i(c),Yo=n(c,"DIV",{class:!0});var Us=s(Yo);m(_5.$$.fragment,Us),bpo=i(Us),od=n(Us,"P",{});var MU=s(od);vpo=r(MU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),r$=n(MU,"A",{href:!0});var tHr=s(r$);Fpo=r(tHr,"from_pretrained()"),tHr.forEach(t),Tpo=r(MU," class method or the "),t$=n(MU,"A",{href:!0});var aHr=s(t$);Mpo=r(aHr,"from_config()"),aHr.forEach(t),Epo=r(MU,` class
method.`),MU.forEach(t),Cpo=i(Us),u5=n(Us,"P",{});var r$e=s(u5);wpo=r(r$e,"This class cannot be instantiated directly using "),jte=n(r$e,"CODE",{});var nHr=s(jte);Apo=r(nHr,"__init__()"),nHr.forEach(t),ypo=r(r$e," (throws an error)."),r$e.forEach(t),Lpo=i(Us),zr=n(Us,"DIV",{class:!0});var Js=s(zr);m(b5.$$.fragment,Js),xpo=i(Js),Dte=n(Js,"P",{});var sHr=s(Dte);kpo=r(sHr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),sHr.forEach(t),Spo=i(Js),rd=n(Js,"P",{});var EU=s(rd);Rpo=r(EU,`Note:
Loading a model from its configuration file does `),Gte=n(EU,"STRONG",{});var lHr=s(Gte);Bpo=r(lHr,"not"),lHr.forEach(t),Ppo=r(EU,` load the model weights. It only affects the
model\u2019s configuration. Use `),a$=n(EU,"A",{href:!0});var iHr=s(a$);$po=r(iHr,"from_pretrained()"),iHr.forEach(t),Ipo=r(EU," to load the model weights."),EU.forEach(t),qpo=i(Js),Ote=n(Js,"P",{});var dHr=s(Ote);Npo=r(dHr,"Examples:"),dHr.forEach(t),jpo=i(Js),m(v5.$$.fragment,Js),Js.forEach(t),Dpo=i(Us),Ne=n(Us,"DIV",{class:!0});var Gt=s(Ne);m(F5.$$.fragment,Gt),Gpo=i(Gt),Vte=n(Gt,"P",{});var cHr=s(Vte);Opo=r(cHr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cHr.forEach(t),Vpo=i(Gt),za=n(Gt,"P",{});var RE=s(za);Xpo=r(RE,"The model class to instantiate is selected based on the "),Xte=n(RE,"CODE",{});var fHr=s(Xte);zpo=r(fHr,"model_type"),fHr.forEach(t),Qpo=r(RE,` property of the config object (either
passed as an argument or loaded from `),zte=n(RE,"CODE",{});var mHr=s(zte);Wpo=r(mHr,"pretrained_model_name_or_path"),mHr.forEach(t),Hpo=r(RE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qte=n(RE,"CODE",{});var gHr=s(Qte);Upo=r(gHr,"pretrained_model_name_or_path"),gHr.forEach(t),Jpo=r(RE,":"),RE.forEach(t),Ypo=i(Gt),S=n(Gt,"UL",{});var B=s(S);N_=n(B,"LI",{});var BCe=s(N_);Wte=n(BCe,"STRONG",{});var hHr=s(Wte);Kpo=r(hHr,"albert"),hHr.forEach(t),Zpo=r(BCe," \u2014 "),n$=n(BCe,"A",{href:!0});var pHr=s(n$);e_o=r(pHr,"AlbertForPreTraining"),pHr.forEach(t),o_o=r(BCe," (ALBERT model)"),BCe.forEach(t),r_o=i(B),j_=n(B,"LI",{});var PCe=s(j_);Hte=n(PCe,"STRONG",{});var _Hr=s(Hte);t_o=r(_Hr,"bart"),_Hr.forEach(t),a_o=r(PCe," \u2014 "),s$=n(PCe,"A",{href:!0});var uHr=s(s$);n_o=r(uHr,"BartForConditionalGeneration"),uHr.forEach(t),s_o=r(PCe," (BART model)"),PCe.forEach(t),l_o=i(B),D_=n(B,"LI",{});var $Ce=s(D_);Ute=n($Ce,"STRONG",{});var bHr=s(Ute);i_o=r(bHr,"bert"),bHr.forEach(t),d_o=r($Ce," \u2014 "),l$=n($Ce,"A",{href:!0});var vHr=s(l$);c_o=r(vHr,"BertForPreTraining"),vHr.forEach(t),f_o=r($Ce," (BERT model)"),$Ce.forEach(t),m_o=i(B),G_=n(B,"LI",{});var ICe=s(G_);Jte=n(ICe,"STRONG",{});var FHr=s(Jte);g_o=r(FHr,"big_bird"),FHr.forEach(t),h_o=r(ICe," \u2014 "),i$=n(ICe,"A",{href:!0});var THr=s(i$);p_o=r(THr,"BigBirdForPreTraining"),THr.forEach(t),__o=r(ICe," (BigBird model)"),ICe.forEach(t),u_o=i(B),O_=n(B,"LI",{});var qCe=s(O_);Yte=n(qCe,"STRONG",{});var MHr=s(Yte);b_o=r(MHr,"camembert"),MHr.forEach(t),v_o=r(qCe," \u2014 "),d$=n(qCe,"A",{href:!0});var EHr=s(d$);F_o=r(EHr,"CamembertForMaskedLM"),EHr.forEach(t),T_o=r(qCe," (CamemBERT model)"),qCe.forEach(t),M_o=i(B),V_=n(B,"LI",{});var NCe=s(V_);Kte=n(NCe,"STRONG",{});var CHr=s(Kte);E_o=r(CHr,"ctrl"),CHr.forEach(t),C_o=r(NCe," \u2014 "),c$=n(NCe,"A",{href:!0});var wHr=s(c$);w_o=r(wHr,"CTRLLMHeadModel"),wHr.forEach(t),A_o=r(NCe," (CTRL model)"),NCe.forEach(t),y_o=i(B),X_=n(B,"LI",{});var jCe=s(X_);Zte=n(jCe,"STRONG",{});var AHr=s(Zte);L_o=r(AHr,"data2vec-text"),AHr.forEach(t),x_o=r(jCe," \u2014 "),f$=n(jCe,"A",{href:!0});var yHr=s(f$);k_o=r(yHr,"Data2VecTextForMaskedLM"),yHr.forEach(t),S_o=r(jCe," (Data2VecText model)"),jCe.forEach(t),R_o=i(B),z_=n(B,"LI",{});var DCe=s(z_);eae=n(DCe,"STRONG",{});var LHr=s(eae);B_o=r(LHr,"deberta"),LHr.forEach(t),P_o=r(DCe," \u2014 "),m$=n(DCe,"A",{href:!0});var xHr=s(m$);$_o=r(xHr,"DebertaForMaskedLM"),xHr.forEach(t),I_o=r(DCe," (DeBERTa model)"),DCe.forEach(t),q_o=i(B),Q_=n(B,"LI",{});var GCe=s(Q_);oae=n(GCe,"STRONG",{});var kHr=s(oae);N_o=r(kHr,"deberta-v2"),kHr.forEach(t),j_o=r(GCe," \u2014 "),g$=n(GCe,"A",{href:!0});var SHr=s(g$);D_o=r(SHr,"DebertaV2ForMaskedLM"),SHr.forEach(t),G_o=r(GCe," (DeBERTa-v2 model)"),GCe.forEach(t),O_o=i(B),W_=n(B,"LI",{});var OCe=s(W_);rae=n(OCe,"STRONG",{});var RHr=s(rae);V_o=r(RHr,"distilbert"),RHr.forEach(t),X_o=r(OCe," \u2014 "),h$=n(OCe,"A",{href:!0});var BHr=s(h$);z_o=r(BHr,"DistilBertForMaskedLM"),BHr.forEach(t),Q_o=r(OCe," (DistilBERT model)"),OCe.forEach(t),W_o=i(B),H_=n(B,"LI",{});var VCe=s(H_);tae=n(VCe,"STRONG",{});var PHr=s(tae);H_o=r(PHr,"electra"),PHr.forEach(t),U_o=r(VCe," \u2014 "),p$=n(VCe,"A",{href:!0});var $Hr=s(p$);J_o=r($Hr,"ElectraForPreTraining"),$Hr.forEach(t),Y_o=r(VCe," (ELECTRA model)"),VCe.forEach(t),K_o=i(B),U_=n(B,"LI",{});var XCe=s(U_);aae=n(XCe,"STRONG",{});var IHr=s(aae);Z_o=r(IHr,"flaubert"),IHr.forEach(t),euo=r(XCe," \u2014 "),_$=n(XCe,"A",{href:!0});var qHr=s(_$);ouo=r(qHr,"FlaubertWithLMHeadModel"),qHr.forEach(t),ruo=r(XCe," (FlauBERT model)"),XCe.forEach(t),tuo=i(B),J_=n(B,"LI",{});var zCe=s(J_);nae=n(zCe,"STRONG",{});var NHr=s(nae);auo=r(NHr,"fnet"),NHr.forEach(t),nuo=r(zCe," \u2014 "),u$=n(zCe,"A",{href:!0});var jHr=s(u$);suo=r(jHr,"FNetForPreTraining"),jHr.forEach(t),luo=r(zCe," (FNet model)"),zCe.forEach(t),iuo=i(B),Y_=n(B,"LI",{});var QCe=s(Y_);sae=n(QCe,"STRONG",{});var DHr=s(sae);duo=r(DHr,"fsmt"),DHr.forEach(t),cuo=r(QCe," \u2014 "),b$=n(QCe,"A",{href:!0});var GHr=s(b$);fuo=r(GHr,"FSMTForConditionalGeneration"),GHr.forEach(t),muo=r(QCe," (FairSeq Machine-Translation model)"),QCe.forEach(t),guo=i(B),K_=n(B,"LI",{});var WCe=s(K_);lae=n(WCe,"STRONG",{});var OHr=s(lae);huo=r(OHr,"funnel"),OHr.forEach(t),puo=r(WCe," \u2014 "),v$=n(WCe,"A",{href:!0});var VHr=s(v$);_uo=r(VHr,"FunnelForPreTraining"),VHr.forEach(t),uuo=r(WCe," (Funnel Transformer model)"),WCe.forEach(t),buo=i(B),Z_=n(B,"LI",{});var HCe=s(Z_);iae=n(HCe,"STRONG",{});var XHr=s(iae);vuo=r(XHr,"gpt2"),XHr.forEach(t),Fuo=r(HCe," \u2014 "),F$=n(HCe,"A",{href:!0});var zHr=s(F$);Tuo=r(zHr,"GPT2LMHeadModel"),zHr.forEach(t),Muo=r(HCe," (OpenAI GPT-2 model)"),HCe.forEach(t),Euo=i(B),eu=n(B,"LI",{});var UCe=s(eu);dae=n(UCe,"STRONG",{});var QHr=s(dae);Cuo=r(QHr,"ibert"),QHr.forEach(t),wuo=r(UCe," \u2014 "),T$=n(UCe,"A",{href:!0});var WHr=s(T$);Auo=r(WHr,"IBertForMaskedLM"),WHr.forEach(t),yuo=r(UCe," (I-BERT model)"),UCe.forEach(t),Luo=i(B),ou=n(B,"LI",{});var JCe=s(ou);cae=n(JCe,"STRONG",{});var HHr=s(cae);xuo=r(HHr,"layoutlm"),HHr.forEach(t),kuo=r(JCe," \u2014 "),M$=n(JCe,"A",{href:!0});var UHr=s(M$);Suo=r(UHr,"LayoutLMForMaskedLM"),UHr.forEach(t),Ruo=r(JCe," (LayoutLM model)"),JCe.forEach(t),Buo=i(B),ru=n(B,"LI",{});var YCe=s(ru);fae=n(YCe,"STRONG",{});var JHr=s(fae);Puo=r(JHr,"longformer"),JHr.forEach(t),$uo=r(YCe," \u2014 "),E$=n(YCe,"A",{href:!0});var YHr=s(E$);Iuo=r(YHr,"LongformerForMaskedLM"),YHr.forEach(t),quo=r(YCe," (Longformer model)"),YCe.forEach(t),Nuo=i(B),tu=n(B,"LI",{});var KCe=s(tu);mae=n(KCe,"STRONG",{});var KHr=s(mae);juo=r(KHr,"lxmert"),KHr.forEach(t),Duo=r(KCe," \u2014 "),C$=n(KCe,"A",{href:!0});var ZHr=s(C$);Guo=r(ZHr,"LxmertForPreTraining"),ZHr.forEach(t),Ouo=r(KCe," (LXMERT model)"),KCe.forEach(t),Vuo=i(B),au=n(B,"LI",{});var ZCe=s(au);gae=n(ZCe,"STRONG",{});var eUr=s(gae);Xuo=r(eUr,"megatron-bert"),eUr.forEach(t),zuo=r(ZCe," \u2014 "),w$=n(ZCe,"A",{href:!0});var oUr=s(w$);Quo=r(oUr,"MegatronBertForPreTraining"),oUr.forEach(t),Wuo=r(ZCe," (MegatronBert model)"),ZCe.forEach(t),Huo=i(B),nu=n(B,"LI",{});var e5e=s(nu);hae=n(e5e,"STRONG",{});var rUr=s(hae);Uuo=r(rUr,"mobilebert"),rUr.forEach(t),Juo=r(e5e," \u2014 "),A$=n(e5e,"A",{href:!0});var tUr=s(A$);Yuo=r(tUr,"MobileBertForPreTraining"),tUr.forEach(t),Kuo=r(e5e," (MobileBERT model)"),e5e.forEach(t),Zuo=i(B),su=n(B,"LI",{});var o5e=s(su);pae=n(o5e,"STRONG",{});var aUr=s(pae);e6o=r(aUr,"mpnet"),aUr.forEach(t),o6o=r(o5e," \u2014 "),y$=n(o5e,"A",{href:!0});var nUr=s(y$);r6o=r(nUr,"MPNetForMaskedLM"),nUr.forEach(t),t6o=r(o5e," (MPNet model)"),o5e.forEach(t),a6o=i(B),lu=n(B,"LI",{});var r5e=s(lu);_ae=n(r5e,"STRONG",{});var sUr=s(_ae);n6o=r(sUr,"openai-gpt"),sUr.forEach(t),s6o=r(r5e," \u2014 "),L$=n(r5e,"A",{href:!0});var lUr=s(L$);l6o=r(lUr,"OpenAIGPTLMHeadModel"),lUr.forEach(t),i6o=r(r5e," (OpenAI GPT model)"),r5e.forEach(t),d6o=i(B),iu=n(B,"LI",{});var t5e=s(iu);uae=n(t5e,"STRONG",{});var iUr=s(uae);c6o=r(iUr,"retribert"),iUr.forEach(t),f6o=r(t5e," \u2014 "),x$=n(t5e,"A",{href:!0});var dUr=s(x$);m6o=r(dUr,"RetriBertModel"),dUr.forEach(t),g6o=r(t5e," (RetriBERT model)"),t5e.forEach(t),h6o=i(B),du=n(B,"LI",{});var a5e=s(du);bae=n(a5e,"STRONG",{});var cUr=s(bae);p6o=r(cUr,"roberta"),cUr.forEach(t),_6o=r(a5e," \u2014 "),k$=n(a5e,"A",{href:!0});var fUr=s(k$);u6o=r(fUr,"RobertaForMaskedLM"),fUr.forEach(t),b6o=r(a5e," (RoBERTa model)"),a5e.forEach(t),v6o=i(B),cu=n(B,"LI",{});var n5e=s(cu);vae=n(n5e,"STRONG",{});var mUr=s(vae);F6o=r(mUr,"squeezebert"),mUr.forEach(t),T6o=r(n5e," \u2014 "),S$=n(n5e,"A",{href:!0});var gUr=s(S$);M6o=r(gUr,"SqueezeBertForMaskedLM"),gUr.forEach(t),E6o=r(n5e," (SqueezeBERT model)"),n5e.forEach(t),C6o=i(B),fu=n(B,"LI",{});var s5e=s(fu);Fae=n(s5e,"STRONG",{});var hUr=s(Fae);w6o=r(hUr,"t5"),hUr.forEach(t),A6o=r(s5e," \u2014 "),R$=n(s5e,"A",{href:!0});var pUr=s(R$);y6o=r(pUr,"T5ForConditionalGeneration"),pUr.forEach(t),L6o=r(s5e," (T5 model)"),s5e.forEach(t),x6o=i(B),mu=n(B,"LI",{});var l5e=s(mu);Tae=n(l5e,"STRONG",{});var _Ur=s(Tae);k6o=r(_Ur,"tapas"),_Ur.forEach(t),S6o=r(l5e," \u2014 "),B$=n(l5e,"A",{href:!0});var uUr=s(B$);R6o=r(uUr,"TapasForMaskedLM"),uUr.forEach(t),B6o=r(l5e," (TAPAS model)"),l5e.forEach(t),P6o=i(B),gu=n(B,"LI",{});var i5e=s(gu);Mae=n(i5e,"STRONG",{});var bUr=s(Mae);$6o=r(bUr,"transfo-xl"),bUr.forEach(t),I6o=r(i5e," \u2014 "),P$=n(i5e,"A",{href:!0});var vUr=s(P$);q6o=r(vUr,"TransfoXLLMHeadModel"),vUr.forEach(t),N6o=r(i5e," (Transformer-XL model)"),i5e.forEach(t),j6o=i(B),hu=n(B,"LI",{});var d5e=s(hu);Eae=n(d5e,"STRONG",{});var FUr=s(Eae);D6o=r(FUr,"unispeech"),FUr.forEach(t),G6o=r(d5e," \u2014 "),$$=n(d5e,"A",{href:!0});var TUr=s($$);O6o=r(TUr,"UniSpeechForPreTraining"),TUr.forEach(t),V6o=r(d5e," (UniSpeech model)"),d5e.forEach(t),X6o=i(B),pu=n(B,"LI",{});var c5e=s(pu);Cae=n(c5e,"STRONG",{});var MUr=s(Cae);z6o=r(MUr,"unispeech-sat"),MUr.forEach(t),Q6o=r(c5e," \u2014 "),I$=n(c5e,"A",{href:!0});var EUr=s(I$);W6o=r(EUr,"UniSpeechSatForPreTraining"),EUr.forEach(t),H6o=r(c5e," (UniSpeechSat model)"),c5e.forEach(t),U6o=i(B),_u=n(B,"LI",{});var f5e=s(_u);wae=n(f5e,"STRONG",{});var CUr=s(wae);J6o=r(CUr,"visual_bert"),CUr.forEach(t),Y6o=r(f5e," \u2014 "),q$=n(f5e,"A",{href:!0});var wUr=s(q$);K6o=r(wUr,"VisualBertForPreTraining"),wUr.forEach(t),Z6o=r(f5e," (VisualBert model)"),f5e.forEach(t),e1o=i(B),uu=n(B,"LI",{});var m5e=s(uu);Aae=n(m5e,"STRONG",{});var AUr=s(Aae);o1o=r(AUr,"vit_mae"),AUr.forEach(t),r1o=r(m5e," \u2014 "),N$=n(m5e,"A",{href:!0});var yUr=s(N$);t1o=r(yUr,"ViTMAEForPreTraining"),yUr.forEach(t),a1o=r(m5e," (ViTMAE model)"),m5e.forEach(t),n1o=i(B),bu=n(B,"LI",{});var g5e=s(bu);yae=n(g5e,"STRONG",{});var LUr=s(yae);s1o=r(LUr,"wav2vec2"),LUr.forEach(t),l1o=r(g5e," \u2014 "),j$=n(g5e,"A",{href:!0});var xUr=s(j$);i1o=r(xUr,"Wav2Vec2ForPreTraining"),xUr.forEach(t),d1o=r(g5e," (Wav2Vec2 model)"),g5e.forEach(t),c1o=i(B),vu=n(B,"LI",{});var h5e=s(vu);Lae=n(h5e,"STRONG",{});var kUr=s(Lae);f1o=r(kUr,"xlm"),kUr.forEach(t),m1o=r(h5e," \u2014 "),D$=n(h5e,"A",{href:!0});var SUr=s(D$);g1o=r(SUr,"XLMWithLMHeadModel"),SUr.forEach(t),h1o=r(h5e," (XLM model)"),h5e.forEach(t),p1o=i(B),Fu=n(B,"LI",{});var p5e=s(Fu);xae=n(p5e,"STRONG",{});var RUr=s(xae);_1o=r(RUr,"xlm-roberta"),RUr.forEach(t),u1o=r(p5e," \u2014 "),G$=n(p5e,"A",{href:!0});var BUr=s(G$);b1o=r(BUr,"XLMRobertaForMaskedLM"),BUr.forEach(t),v1o=r(p5e," (XLM-RoBERTa model)"),p5e.forEach(t),F1o=i(B),Tu=n(B,"LI",{});var _5e=s(Tu);kae=n(_5e,"STRONG",{});var PUr=s(kae);T1o=r(PUr,"xlm-roberta-xl"),PUr.forEach(t),M1o=r(_5e," \u2014 "),O$=n(_5e,"A",{href:!0});var $Ur=s(O$);E1o=r($Ur,"XLMRobertaXLForMaskedLM"),$Ur.forEach(t),C1o=r(_5e," (XLM-RoBERTa-XL model)"),_5e.forEach(t),w1o=i(B),Mu=n(B,"LI",{});var u5e=s(Mu);Sae=n(u5e,"STRONG",{});var IUr=s(Sae);A1o=r(IUr,"xlnet"),IUr.forEach(t),y1o=r(u5e," \u2014 "),V$=n(u5e,"A",{href:!0});var qUr=s(V$);L1o=r(qUr,"XLNetLMHeadModel"),qUr.forEach(t),x1o=r(u5e," (XLNet model)"),u5e.forEach(t),B.forEach(t),k1o=i(Gt),Eu=n(Gt,"P",{});var b5e=s(Eu);S1o=r(b5e,"The model is set in evaluation mode by default using "),Rae=n(b5e,"CODE",{});var NUr=s(Rae);R1o=r(NUr,"model.eval()"),NUr.forEach(t),B1o=r(b5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bae=n(b5e,"CODE",{});var jUr=s(Bae);P1o=r(jUr,"model.train()"),jUr.forEach(t),b5e.forEach(t),$1o=i(Gt),Pae=n(Gt,"P",{});var DUr=s(Pae);I1o=r(DUr,"Examples:"),DUr.forEach(t),q1o=i(Gt),m(T5.$$.fragment,Gt),Gt.forEach(t),Us.forEach(t),HRe=i(c),td=n(c,"H2",{class:!0});var t$e=s(td);Cu=n(t$e,"A",{id:!0,class:!0,href:!0});var GUr=s(Cu);$ae=n(GUr,"SPAN",{});var OUr=s($ae);m(M5.$$.fragment,OUr),OUr.forEach(t),GUr.forEach(t),N1o=i(t$e),Iae=n(t$e,"SPAN",{});var VUr=s(Iae);j1o=r(VUr,"AutoModelForCausalLM"),VUr.forEach(t),t$e.forEach(t),URe=i(c),Ko=n(c,"DIV",{class:!0});var Ys=s(Ko);m(E5.$$.fragment,Ys),D1o=i(Ys),ad=n(Ys,"P",{});var CU=s(ad);G1o=r(CU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),X$=n(CU,"A",{href:!0});var XUr=s(X$);O1o=r(XUr,"from_pretrained()"),XUr.forEach(t),V1o=r(CU," class method or the "),z$=n(CU,"A",{href:!0});var zUr=s(z$);X1o=r(zUr,"from_config()"),zUr.forEach(t),z1o=r(CU,` class
method.`),CU.forEach(t),Q1o=i(Ys),C5=n(Ys,"P",{});var a$e=s(C5);W1o=r(a$e,"This class cannot be instantiated directly using "),qae=n(a$e,"CODE",{});var QUr=s(qae);H1o=r(QUr,"__init__()"),QUr.forEach(t),U1o=r(a$e," (throws an error)."),a$e.forEach(t),J1o=i(Ys),Qr=n(Ys,"DIV",{class:!0});var Ks=s(Qr);m(w5.$$.fragment,Ks),Y1o=i(Ks),Nae=n(Ks,"P",{});var WUr=s(Nae);K1o=r(WUr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),WUr.forEach(t),Z1o=i(Ks),nd=n(Ks,"P",{});var wU=s(nd);ebo=r(wU,`Note:
Loading a model from its configuration file does `),jae=n(wU,"STRONG",{});var HUr=s(jae);obo=r(HUr,"not"),HUr.forEach(t),rbo=r(wU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Q$=n(wU,"A",{href:!0});var UUr=s(Q$);tbo=r(UUr,"from_pretrained()"),UUr.forEach(t),abo=r(wU," to load the model weights."),wU.forEach(t),nbo=i(Ks),Dae=n(Ks,"P",{});var JUr=s(Dae);sbo=r(JUr,"Examples:"),JUr.forEach(t),lbo=i(Ks),m(A5.$$.fragment,Ks),Ks.forEach(t),ibo=i(Ys),je=n(Ys,"DIV",{class:!0});var Ot=s(je);m(y5.$$.fragment,Ot),dbo=i(Ot),Gae=n(Ot,"P",{});var YUr=s(Gae);cbo=r(YUr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),YUr.forEach(t),fbo=i(Ot),Qa=n(Ot,"P",{});var BE=s(Qa);mbo=r(BE,"The model class to instantiate is selected based on the "),Oae=n(BE,"CODE",{});var KUr=s(Oae);gbo=r(KUr,"model_type"),KUr.forEach(t),hbo=r(BE,` property of the config object (either
passed as an argument or loaded from `),Vae=n(BE,"CODE",{});var ZUr=s(Vae);pbo=r(ZUr,"pretrained_model_name_or_path"),ZUr.forEach(t),_bo=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xae=n(BE,"CODE",{});var eJr=s(Xae);ubo=r(eJr,"pretrained_model_name_or_path"),eJr.forEach(t),bbo=r(BE,":"),BE.forEach(t),vbo=i(Ot),$=n(Ot,"UL",{});var q=s($);wu=n(q,"LI",{});var v5e=s(wu);zae=n(v5e,"STRONG",{});var oJr=s(zae);Fbo=r(oJr,"bart"),oJr.forEach(t),Tbo=r(v5e," \u2014 "),W$=n(v5e,"A",{href:!0});var rJr=s(W$);Mbo=r(rJr,"BartForCausalLM"),rJr.forEach(t),Ebo=r(v5e," (BART model)"),v5e.forEach(t),Cbo=i(q),Au=n(q,"LI",{});var F5e=s(Au);Qae=n(F5e,"STRONG",{});var tJr=s(Qae);wbo=r(tJr,"bert"),tJr.forEach(t),Abo=r(F5e," \u2014 "),H$=n(F5e,"A",{href:!0});var aJr=s(H$);ybo=r(aJr,"BertLMHeadModel"),aJr.forEach(t),Lbo=r(F5e," (BERT model)"),F5e.forEach(t),xbo=i(q),yu=n(q,"LI",{});var T5e=s(yu);Wae=n(T5e,"STRONG",{});var nJr=s(Wae);kbo=r(nJr,"bert-generation"),nJr.forEach(t),Sbo=r(T5e," \u2014 "),U$=n(T5e,"A",{href:!0});var sJr=s(U$);Rbo=r(sJr,"BertGenerationDecoder"),sJr.forEach(t),Bbo=r(T5e," (Bert Generation model)"),T5e.forEach(t),Pbo=i(q),Lu=n(q,"LI",{});var M5e=s(Lu);Hae=n(M5e,"STRONG",{});var lJr=s(Hae);$bo=r(lJr,"big_bird"),lJr.forEach(t),Ibo=r(M5e," \u2014 "),J$=n(M5e,"A",{href:!0});var iJr=s(J$);qbo=r(iJr,"BigBirdForCausalLM"),iJr.forEach(t),Nbo=r(M5e," (BigBird model)"),M5e.forEach(t),jbo=i(q),xu=n(q,"LI",{});var E5e=s(xu);Uae=n(E5e,"STRONG",{});var dJr=s(Uae);Dbo=r(dJr,"bigbird_pegasus"),dJr.forEach(t),Gbo=r(E5e," \u2014 "),Y$=n(E5e,"A",{href:!0});var cJr=s(Y$);Obo=r(cJr,"BigBirdPegasusForCausalLM"),cJr.forEach(t),Vbo=r(E5e," (BigBirdPegasus model)"),E5e.forEach(t),Xbo=i(q),ku=n(q,"LI",{});var C5e=s(ku);Jae=n(C5e,"STRONG",{});var fJr=s(Jae);zbo=r(fJr,"blenderbot"),fJr.forEach(t),Qbo=r(C5e," \u2014 "),K$=n(C5e,"A",{href:!0});var mJr=s(K$);Wbo=r(mJr,"BlenderbotForCausalLM"),mJr.forEach(t),Hbo=r(C5e," (Blenderbot model)"),C5e.forEach(t),Ubo=i(q),Su=n(q,"LI",{});var w5e=s(Su);Yae=n(w5e,"STRONG",{});var gJr=s(Yae);Jbo=r(gJr,"blenderbot-small"),gJr.forEach(t),Ybo=r(w5e," \u2014 "),Z$=n(w5e,"A",{href:!0});var hJr=s(Z$);Kbo=r(hJr,"BlenderbotSmallForCausalLM"),hJr.forEach(t),Zbo=r(w5e," (BlenderbotSmall model)"),w5e.forEach(t),e2o=i(q),Ru=n(q,"LI",{});var A5e=s(Ru);Kae=n(A5e,"STRONG",{});var pJr=s(Kae);o2o=r(pJr,"camembert"),pJr.forEach(t),r2o=r(A5e," \u2014 "),eI=n(A5e,"A",{href:!0});var _Jr=s(eI);t2o=r(_Jr,"CamembertForCausalLM"),_Jr.forEach(t),a2o=r(A5e," (CamemBERT model)"),A5e.forEach(t),n2o=i(q),Bu=n(q,"LI",{});var y5e=s(Bu);Zae=n(y5e,"STRONG",{});var uJr=s(Zae);s2o=r(uJr,"ctrl"),uJr.forEach(t),l2o=r(y5e," \u2014 "),oI=n(y5e,"A",{href:!0});var bJr=s(oI);i2o=r(bJr,"CTRLLMHeadModel"),bJr.forEach(t),d2o=r(y5e," (CTRL model)"),y5e.forEach(t),c2o=i(q),Pu=n(q,"LI",{});var L5e=s(Pu);ene=n(L5e,"STRONG",{});var vJr=s(ene);f2o=r(vJr,"data2vec-text"),vJr.forEach(t),m2o=r(L5e," \u2014 "),rI=n(L5e,"A",{href:!0});var FJr=s(rI);g2o=r(FJr,"Data2VecTextForCausalLM"),FJr.forEach(t),h2o=r(L5e," (Data2VecText model)"),L5e.forEach(t),p2o=i(q),$u=n(q,"LI",{});var x5e=s($u);one=n(x5e,"STRONG",{});var TJr=s(one);_2o=r(TJr,"electra"),TJr.forEach(t),u2o=r(x5e," \u2014 "),tI=n(x5e,"A",{href:!0});var MJr=s(tI);b2o=r(MJr,"ElectraForCausalLM"),MJr.forEach(t),v2o=r(x5e," (ELECTRA model)"),x5e.forEach(t),F2o=i(q),Iu=n(q,"LI",{});var k5e=s(Iu);rne=n(k5e,"STRONG",{});var EJr=s(rne);T2o=r(EJr,"gpt2"),EJr.forEach(t),M2o=r(k5e," \u2014 "),aI=n(k5e,"A",{href:!0});var CJr=s(aI);E2o=r(CJr,"GPT2LMHeadModel"),CJr.forEach(t),C2o=r(k5e," (OpenAI GPT-2 model)"),k5e.forEach(t),w2o=i(q),qu=n(q,"LI",{});var S5e=s(qu);tne=n(S5e,"STRONG",{});var wJr=s(tne);A2o=r(wJr,"gpt_neo"),wJr.forEach(t),y2o=r(S5e," \u2014 "),nI=n(S5e,"A",{href:!0});var AJr=s(nI);L2o=r(AJr,"GPTNeoForCausalLM"),AJr.forEach(t),x2o=r(S5e," (GPT Neo model)"),S5e.forEach(t),k2o=i(q),Nu=n(q,"LI",{});var R5e=s(Nu);ane=n(R5e,"STRONG",{});var yJr=s(ane);S2o=r(yJr,"gptj"),yJr.forEach(t),R2o=r(R5e," \u2014 "),sI=n(R5e,"A",{href:!0});var LJr=s(sI);B2o=r(LJr,"GPTJForCausalLM"),LJr.forEach(t),P2o=r(R5e," (GPT-J model)"),R5e.forEach(t),$2o=i(q),ju=n(q,"LI",{});var B5e=s(ju);nne=n(B5e,"STRONG",{});var xJr=s(nne);I2o=r(xJr,"marian"),xJr.forEach(t),q2o=r(B5e," \u2014 "),lI=n(B5e,"A",{href:!0});var kJr=s(lI);N2o=r(kJr,"MarianForCausalLM"),kJr.forEach(t),j2o=r(B5e," (Marian model)"),B5e.forEach(t),D2o=i(q),Du=n(q,"LI",{});var P5e=s(Du);sne=n(P5e,"STRONG",{});var SJr=s(sne);G2o=r(SJr,"mbart"),SJr.forEach(t),O2o=r(P5e," \u2014 "),iI=n(P5e,"A",{href:!0});var RJr=s(iI);V2o=r(RJr,"MBartForCausalLM"),RJr.forEach(t),X2o=r(P5e," (mBART model)"),P5e.forEach(t),z2o=i(q),Gu=n(q,"LI",{});var $5e=s(Gu);lne=n($5e,"STRONG",{});var BJr=s(lne);Q2o=r(BJr,"megatron-bert"),BJr.forEach(t),W2o=r($5e," \u2014 "),dI=n($5e,"A",{href:!0});var PJr=s(dI);H2o=r(PJr,"MegatronBertForCausalLM"),PJr.forEach(t),U2o=r($5e," (MegatronBert model)"),$5e.forEach(t),J2o=i(q),Ou=n(q,"LI",{});var I5e=s(Ou);ine=n(I5e,"STRONG",{});var $Jr=s(ine);Y2o=r($Jr,"openai-gpt"),$Jr.forEach(t),K2o=r(I5e," \u2014 "),cI=n(I5e,"A",{href:!0});var IJr=s(cI);Z2o=r(IJr,"OpenAIGPTLMHeadModel"),IJr.forEach(t),evo=r(I5e," (OpenAI GPT model)"),I5e.forEach(t),ovo=i(q),Vu=n(q,"LI",{});var q5e=s(Vu);dne=n(q5e,"STRONG",{});var qJr=s(dne);rvo=r(qJr,"pegasus"),qJr.forEach(t),tvo=r(q5e," \u2014 "),fI=n(q5e,"A",{href:!0});var NJr=s(fI);avo=r(NJr,"PegasusForCausalLM"),NJr.forEach(t),nvo=r(q5e," (Pegasus model)"),q5e.forEach(t),svo=i(q),Xu=n(q,"LI",{});var N5e=s(Xu);cne=n(N5e,"STRONG",{});var jJr=s(cne);lvo=r(jJr,"plbart"),jJr.forEach(t),ivo=r(N5e," \u2014 "),mI=n(N5e,"A",{href:!0});var DJr=s(mI);dvo=r(DJr,"PLBartForCausalLM"),DJr.forEach(t),cvo=r(N5e," (PLBart model)"),N5e.forEach(t),fvo=i(q),zu=n(q,"LI",{});var j5e=s(zu);fne=n(j5e,"STRONG",{});var GJr=s(fne);mvo=r(GJr,"prophetnet"),GJr.forEach(t),gvo=r(j5e," \u2014 "),gI=n(j5e,"A",{href:!0});var OJr=s(gI);hvo=r(OJr,"ProphetNetForCausalLM"),OJr.forEach(t),pvo=r(j5e," (ProphetNet model)"),j5e.forEach(t),_vo=i(q),Qu=n(q,"LI",{});var D5e=s(Qu);mne=n(D5e,"STRONG",{});var VJr=s(mne);uvo=r(VJr,"qdqbert"),VJr.forEach(t),bvo=r(D5e," \u2014 "),hI=n(D5e,"A",{href:!0});var XJr=s(hI);vvo=r(XJr,"QDQBertLMHeadModel"),XJr.forEach(t),Fvo=r(D5e," (QDQBert model)"),D5e.forEach(t),Tvo=i(q),Wu=n(q,"LI",{});var G5e=s(Wu);gne=n(G5e,"STRONG",{});var zJr=s(gne);Mvo=r(zJr,"reformer"),zJr.forEach(t),Evo=r(G5e," \u2014 "),pI=n(G5e,"A",{href:!0});var QJr=s(pI);Cvo=r(QJr,"ReformerModelWithLMHead"),QJr.forEach(t),wvo=r(G5e," (Reformer model)"),G5e.forEach(t),Avo=i(q),Hu=n(q,"LI",{});var O5e=s(Hu);hne=n(O5e,"STRONG",{});var WJr=s(hne);yvo=r(WJr,"rembert"),WJr.forEach(t),Lvo=r(O5e," \u2014 "),_I=n(O5e,"A",{href:!0});var HJr=s(_I);xvo=r(HJr,"RemBertForCausalLM"),HJr.forEach(t),kvo=r(O5e," (RemBERT model)"),O5e.forEach(t),Svo=i(q),Uu=n(q,"LI",{});var V5e=s(Uu);pne=n(V5e,"STRONG",{});var UJr=s(pne);Rvo=r(UJr,"roberta"),UJr.forEach(t),Bvo=r(V5e," \u2014 "),uI=n(V5e,"A",{href:!0});var JJr=s(uI);Pvo=r(JJr,"RobertaForCausalLM"),JJr.forEach(t),$vo=r(V5e," (RoBERTa model)"),V5e.forEach(t),Ivo=i(q),Ju=n(q,"LI",{});var X5e=s(Ju);_ne=n(X5e,"STRONG",{});var YJr=s(_ne);qvo=r(YJr,"roformer"),YJr.forEach(t),Nvo=r(X5e," \u2014 "),bI=n(X5e,"A",{href:!0});var KJr=s(bI);jvo=r(KJr,"RoFormerForCausalLM"),KJr.forEach(t),Dvo=r(X5e," (RoFormer model)"),X5e.forEach(t),Gvo=i(q),Yu=n(q,"LI",{});var z5e=s(Yu);une=n(z5e,"STRONG",{});var ZJr=s(une);Ovo=r(ZJr,"speech_to_text_2"),ZJr.forEach(t),Vvo=r(z5e," \u2014 "),vI=n(z5e,"A",{href:!0});var eYr=s(vI);Xvo=r(eYr,"Speech2Text2ForCausalLM"),eYr.forEach(t),zvo=r(z5e," (Speech2Text2 model)"),z5e.forEach(t),Qvo=i(q),Ku=n(q,"LI",{});var Q5e=s(Ku);bne=n(Q5e,"STRONG",{});var oYr=s(bne);Wvo=r(oYr,"transfo-xl"),oYr.forEach(t),Hvo=r(Q5e," \u2014 "),FI=n(Q5e,"A",{href:!0});var rYr=s(FI);Uvo=r(rYr,"TransfoXLLMHeadModel"),rYr.forEach(t),Jvo=r(Q5e," (Transformer-XL model)"),Q5e.forEach(t),Yvo=i(q),Zu=n(q,"LI",{});var W5e=s(Zu);vne=n(W5e,"STRONG",{});var tYr=s(vne);Kvo=r(tYr,"trocr"),tYr.forEach(t),Zvo=r(W5e," \u2014 "),TI=n(W5e,"A",{href:!0});var aYr=s(TI);eFo=r(aYr,"TrOCRForCausalLM"),aYr.forEach(t),oFo=r(W5e," (TrOCR model)"),W5e.forEach(t),rFo=i(q),e6=n(q,"LI",{});var H5e=s(e6);Fne=n(H5e,"STRONG",{});var nYr=s(Fne);tFo=r(nYr,"xglm"),nYr.forEach(t),aFo=r(H5e," \u2014 "),MI=n(H5e,"A",{href:!0});var sYr=s(MI);nFo=r(sYr,"XGLMForCausalLM"),sYr.forEach(t),sFo=r(H5e," (XGLM model)"),H5e.forEach(t),lFo=i(q),o6=n(q,"LI",{});var U5e=s(o6);Tne=n(U5e,"STRONG",{});var lYr=s(Tne);iFo=r(lYr,"xlm"),lYr.forEach(t),dFo=r(U5e," \u2014 "),EI=n(U5e,"A",{href:!0});var iYr=s(EI);cFo=r(iYr,"XLMWithLMHeadModel"),iYr.forEach(t),fFo=r(U5e," (XLM model)"),U5e.forEach(t),mFo=i(q),r6=n(q,"LI",{});var J5e=s(r6);Mne=n(J5e,"STRONG",{});var dYr=s(Mne);gFo=r(dYr,"xlm-prophetnet"),dYr.forEach(t),hFo=r(J5e," \u2014 "),CI=n(J5e,"A",{href:!0});var cYr=s(CI);pFo=r(cYr,"XLMProphetNetForCausalLM"),cYr.forEach(t),_Fo=r(J5e," (XLMProphetNet model)"),J5e.forEach(t),uFo=i(q),t6=n(q,"LI",{});var Y5e=s(t6);Ene=n(Y5e,"STRONG",{});var fYr=s(Ene);bFo=r(fYr,"xlm-roberta"),fYr.forEach(t),vFo=r(Y5e," \u2014 "),wI=n(Y5e,"A",{href:!0});var mYr=s(wI);FFo=r(mYr,"XLMRobertaForCausalLM"),mYr.forEach(t),TFo=r(Y5e," (XLM-RoBERTa model)"),Y5e.forEach(t),MFo=i(q),a6=n(q,"LI",{});var K5e=s(a6);Cne=n(K5e,"STRONG",{});var gYr=s(Cne);EFo=r(gYr,"xlm-roberta-xl"),gYr.forEach(t),CFo=r(K5e," \u2014 "),AI=n(K5e,"A",{href:!0});var hYr=s(AI);wFo=r(hYr,"XLMRobertaXLForCausalLM"),hYr.forEach(t),AFo=r(K5e," (XLM-RoBERTa-XL model)"),K5e.forEach(t),yFo=i(q),n6=n(q,"LI",{});var Z5e=s(n6);wne=n(Z5e,"STRONG",{});var pYr=s(wne);LFo=r(pYr,"xlnet"),pYr.forEach(t),xFo=r(Z5e," \u2014 "),yI=n(Z5e,"A",{href:!0});var _Yr=s(yI);kFo=r(_Yr,"XLNetLMHeadModel"),_Yr.forEach(t),SFo=r(Z5e," (XLNet model)"),Z5e.forEach(t),q.forEach(t),RFo=i(Ot),s6=n(Ot,"P",{});var e3e=s(s6);BFo=r(e3e,"The model is set in evaluation mode by default using "),Ane=n(e3e,"CODE",{});var uYr=s(Ane);PFo=r(uYr,"model.eval()"),uYr.forEach(t),$Fo=r(e3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yne=n(e3e,"CODE",{});var bYr=s(yne);IFo=r(bYr,"model.train()"),bYr.forEach(t),e3e.forEach(t),qFo=i(Ot),Lne=n(Ot,"P",{});var vYr=s(Lne);NFo=r(vYr,"Examples:"),vYr.forEach(t),jFo=i(Ot),m(L5.$$.fragment,Ot),Ot.forEach(t),Ys.forEach(t),JRe=i(c),sd=n(c,"H2",{class:!0});var n$e=s(sd);l6=n(n$e,"A",{id:!0,class:!0,href:!0});var FYr=s(l6);xne=n(FYr,"SPAN",{});var TYr=s(xne);m(x5.$$.fragment,TYr),TYr.forEach(t),FYr.forEach(t),DFo=i(n$e),kne=n(n$e,"SPAN",{});var MYr=s(kne);GFo=r(MYr,"AutoModelForMaskedLM"),MYr.forEach(t),n$e.forEach(t),YRe=i(c),Zo=n(c,"DIV",{class:!0});var Zs=s(Zo);m(k5.$$.fragment,Zs),OFo=i(Zs),ld=n(Zs,"P",{});var AU=s(ld);VFo=r(AU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LI=n(AU,"A",{href:!0});var EYr=s(LI);XFo=r(EYr,"from_pretrained()"),EYr.forEach(t),zFo=r(AU," class method or the "),xI=n(AU,"A",{href:!0});var CYr=s(xI);QFo=r(CYr,"from_config()"),CYr.forEach(t),WFo=r(AU,` class
method.`),AU.forEach(t),HFo=i(Zs),S5=n(Zs,"P",{});var s$e=s(S5);UFo=r(s$e,"This class cannot be instantiated directly using "),Sne=n(s$e,"CODE",{});var wYr=s(Sne);JFo=r(wYr,"__init__()"),wYr.forEach(t),YFo=r(s$e," (throws an error)."),s$e.forEach(t),KFo=i(Zs),Wr=n(Zs,"DIV",{class:!0});var el=s(Wr);m(R5.$$.fragment,el),ZFo=i(el),Rne=n(el,"P",{});var AYr=s(Rne);e0o=r(AYr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),AYr.forEach(t),o0o=i(el),id=n(el,"P",{});var yU=s(id);r0o=r(yU,`Note:
Loading a model from its configuration file does `),Bne=n(yU,"STRONG",{});var yYr=s(Bne);t0o=r(yYr,"not"),yYr.forEach(t),a0o=r(yU,` load the model weights. It only affects the
model\u2019s configuration. Use `),kI=n(yU,"A",{href:!0});var LYr=s(kI);n0o=r(LYr,"from_pretrained()"),LYr.forEach(t),s0o=r(yU," to load the model weights."),yU.forEach(t),l0o=i(el),Pne=n(el,"P",{});var xYr=s(Pne);i0o=r(xYr,"Examples:"),xYr.forEach(t),d0o=i(el),m(B5.$$.fragment,el),el.forEach(t),c0o=i(Zs),De=n(Zs,"DIV",{class:!0});var Vt=s(De);m(P5.$$.fragment,Vt),f0o=i(Vt),$ne=n(Vt,"P",{});var kYr=s($ne);m0o=r(kYr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kYr.forEach(t),g0o=i(Vt),Wa=n(Vt,"P",{});var PE=s(Wa);h0o=r(PE,"The model class to instantiate is selected based on the "),Ine=n(PE,"CODE",{});var SYr=s(Ine);p0o=r(SYr,"model_type"),SYr.forEach(t),_0o=r(PE,` property of the config object (either
passed as an argument or loaded from `),qne=n(PE,"CODE",{});var RYr=s(qne);u0o=r(RYr,"pretrained_model_name_or_path"),RYr.forEach(t),b0o=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nne=n(PE,"CODE",{});var BYr=s(Nne);v0o=r(BYr,"pretrained_model_name_or_path"),BYr.forEach(t),F0o=r(PE,":"),PE.forEach(t),T0o=i(Vt),I=n(Vt,"UL",{});var N=s(I);i6=n(N,"LI",{});var o3e=s(i6);jne=n(o3e,"STRONG",{});var PYr=s(jne);M0o=r(PYr,"albert"),PYr.forEach(t),E0o=r(o3e," \u2014 "),SI=n(o3e,"A",{href:!0});var $Yr=s(SI);C0o=r($Yr,"AlbertForMaskedLM"),$Yr.forEach(t),w0o=r(o3e," (ALBERT model)"),o3e.forEach(t),A0o=i(N),d6=n(N,"LI",{});var r3e=s(d6);Dne=n(r3e,"STRONG",{});var IYr=s(Dne);y0o=r(IYr,"bart"),IYr.forEach(t),L0o=r(r3e," \u2014 "),RI=n(r3e,"A",{href:!0});var qYr=s(RI);x0o=r(qYr,"BartForConditionalGeneration"),qYr.forEach(t),k0o=r(r3e," (BART model)"),r3e.forEach(t),S0o=i(N),c6=n(N,"LI",{});var t3e=s(c6);Gne=n(t3e,"STRONG",{});var NYr=s(Gne);R0o=r(NYr,"bert"),NYr.forEach(t),B0o=r(t3e," \u2014 "),BI=n(t3e,"A",{href:!0});var jYr=s(BI);P0o=r(jYr,"BertForMaskedLM"),jYr.forEach(t),$0o=r(t3e," (BERT model)"),t3e.forEach(t),I0o=i(N),f6=n(N,"LI",{});var a3e=s(f6);One=n(a3e,"STRONG",{});var DYr=s(One);q0o=r(DYr,"big_bird"),DYr.forEach(t),N0o=r(a3e," \u2014 "),PI=n(a3e,"A",{href:!0});var GYr=s(PI);j0o=r(GYr,"BigBirdForMaskedLM"),GYr.forEach(t),D0o=r(a3e," (BigBird model)"),a3e.forEach(t),G0o=i(N),m6=n(N,"LI",{});var n3e=s(m6);Vne=n(n3e,"STRONG",{});var OYr=s(Vne);O0o=r(OYr,"camembert"),OYr.forEach(t),V0o=r(n3e," \u2014 "),$I=n(n3e,"A",{href:!0});var VYr=s($I);X0o=r(VYr,"CamembertForMaskedLM"),VYr.forEach(t),z0o=r(n3e," (CamemBERT model)"),n3e.forEach(t),Q0o=i(N),g6=n(N,"LI",{});var s3e=s(g6);Xne=n(s3e,"STRONG",{});var XYr=s(Xne);W0o=r(XYr,"convbert"),XYr.forEach(t),H0o=r(s3e," \u2014 "),II=n(s3e,"A",{href:!0});var zYr=s(II);U0o=r(zYr,"ConvBertForMaskedLM"),zYr.forEach(t),J0o=r(s3e," (ConvBERT model)"),s3e.forEach(t),Y0o=i(N),h6=n(N,"LI",{});var l3e=s(h6);zne=n(l3e,"STRONG",{});var QYr=s(zne);K0o=r(QYr,"data2vec-text"),QYr.forEach(t),Z0o=r(l3e," \u2014 "),qI=n(l3e,"A",{href:!0});var WYr=s(qI);eTo=r(WYr,"Data2VecTextForMaskedLM"),WYr.forEach(t),oTo=r(l3e," (Data2VecText model)"),l3e.forEach(t),rTo=i(N),p6=n(N,"LI",{});var i3e=s(p6);Qne=n(i3e,"STRONG",{});var HYr=s(Qne);tTo=r(HYr,"deberta"),HYr.forEach(t),aTo=r(i3e," \u2014 "),NI=n(i3e,"A",{href:!0});var UYr=s(NI);nTo=r(UYr,"DebertaForMaskedLM"),UYr.forEach(t),sTo=r(i3e," (DeBERTa model)"),i3e.forEach(t),lTo=i(N),_6=n(N,"LI",{});var d3e=s(_6);Wne=n(d3e,"STRONG",{});var JYr=s(Wne);iTo=r(JYr,"deberta-v2"),JYr.forEach(t),dTo=r(d3e," \u2014 "),jI=n(d3e,"A",{href:!0});var YYr=s(jI);cTo=r(YYr,"DebertaV2ForMaskedLM"),YYr.forEach(t),fTo=r(d3e," (DeBERTa-v2 model)"),d3e.forEach(t),mTo=i(N),u6=n(N,"LI",{});var c3e=s(u6);Hne=n(c3e,"STRONG",{});var KYr=s(Hne);gTo=r(KYr,"distilbert"),KYr.forEach(t),hTo=r(c3e," \u2014 "),DI=n(c3e,"A",{href:!0});var ZYr=s(DI);pTo=r(ZYr,"DistilBertForMaskedLM"),ZYr.forEach(t),_To=r(c3e," (DistilBERT model)"),c3e.forEach(t),uTo=i(N),b6=n(N,"LI",{});var f3e=s(b6);Une=n(f3e,"STRONG",{});var eKr=s(Une);bTo=r(eKr,"electra"),eKr.forEach(t),vTo=r(f3e," \u2014 "),GI=n(f3e,"A",{href:!0});var oKr=s(GI);FTo=r(oKr,"ElectraForMaskedLM"),oKr.forEach(t),TTo=r(f3e," (ELECTRA model)"),f3e.forEach(t),MTo=i(N),v6=n(N,"LI",{});var m3e=s(v6);Jne=n(m3e,"STRONG",{});var rKr=s(Jne);ETo=r(rKr,"flaubert"),rKr.forEach(t),CTo=r(m3e," \u2014 "),OI=n(m3e,"A",{href:!0});var tKr=s(OI);wTo=r(tKr,"FlaubertWithLMHeadModel"),tKr.forEach(t),ATo=r(m3e," (FlauBERT model)"),m3e.forEach(t),yTo=i(N),F6=n(N,"LI",{});var g3e=s(F6);Yne=n(g3e,"STRONG",{});var aKr=s(Yne);LTo=r(aKr,"fnet"),aKr.forEach(t),xTo=r(g3e," \u2014 "),VI=n(g3e,"A",{href:!0});var nKr=s(VI);kTo=r(nKr,"FNetForMaskedLM"),nKr.forEach(t),STo=r(g3e," (FNet model)"),g3e.forEach(t),RTo=i(N),T6=n(N,"LI",{});var h3e=s(T6);Kne=n(h3e,"STRONG",{});var sKr=s(Kne);BTo=r(sKr,"funnel"),sKr.forEach(t),PTo=r(h3e," \u2014 "),XI=n(h3e,"A",{href:!0});var lKr=s(XI);$To=r(lKr,"FunnelForMaskedLM"),lKr.forEach(t),ITo=r(h3e," (Funnel Transformer model)"),h3e.forEach(t),qTo=i(N),M6=n(N,"LI",{});var p3e=s(M6);Zne=n(p3e,"STRONG",{});var iKr=s(Zne);NTo=r(iKr,"ibert"),iKr.forEach(t),jTo=r(p3e," \u2014 "),zI=n(p3e,"A",{href:!0});var dKr=s(zI);DTo=r(dKr,"IBertForMaskedLM"),dKr.forEach(t),GTo=r(p3e," (I-BERT model)"),p3e.forEach(t),OTo=i(N),E6=n(N,"LI",{});var _3e=s(E6);ese=n(_3e,"STRONG",{});var cKr=s(ese);VTo=r(cKr,"layoutlm"),cKr.forEach(t),XTo=r(_3e," \u2014 "),QI=n(_3e,"A",{href:!0});var fKr=s(QI);zTo=r(fKr,"LayoutLMForMaskedLM"),fKr.forEach(t),QTo=r(_3e," (LayoutLM model)"),_3e.forEach(t),WTo=i(N),C6=n(N,"LI",{});var u3e=s(C6);ose=n(u3e,"STRONG",{});var mKr=s(ose);HTo=r(mKr,"longformer"),mKr.forEach(t),UTo=r(u3e," \u2014 "),WI=n(u3e,"A",{href:!0});var gKr=s(WI);JTo=r(gKr,"LongformerForMaskedLM"),gKr.forEach(t),YTo=r(u3e," (Longformer model)"),u3e.forEach(t),KTo=i(N),w6=n(N,"LI",{});var b3e=s(w6);rse=n(b3e,"STRONG",{});var hKr=s(rse);ZTo=r(hKr,"mbart"),hKr.forEach(t),e7o=r(b3e," \u2014 "),HI=n(b3e,"A",{href:!0});var pKr=s(HI);o7o=r(pKr,"MBartForConditionalGeneration"),pKr.forEach(t),r7o=r(b3e," (mBART model)"),b3e.forEach(t),t7o=i(N),A6=n(N,"LI",{});var v3e=s(A6);tse=n(v3e,"STRONG",{});var _Kr=s(tse);a7o=r(_Kr,"megatron-bert"),_Kr.forEach(t),n7o=r(v3e," \u2014 "),UI=n(v3e,"A",{href:!0});var uKr=s(UI);s7o=r(uKr,"MegatronBertForMaskedLM"),uKr.forEach(t),l7o=r(v3e," (MegatronBert model)"),v3e.forEach(t),i7o=i(N),y6=n(N,"LI",{});var F3e=s(y6);ase=n(F3e,"STRONG",{});var bKr=s(ase);d7o=r(bKr,"mobilebert"),bKr.forEach(t),c7o=r(F3e," \u2014 "),JI=n(F3e,"A",{href:!0});var vKr=s(JI);f7o=r(vKr,"MobileBertForMaskedLM"),vKr.forEach(t),m7o=r(F3e," (MobileBERT model)"),F3e.forEach(t),g7o=i(N),L6=n(N,"LI",{});var T3e=s(L6);nse=n(T3e,"STRONG",{});var FKr=s(nse);h7o=r(FKr,"mpnet"),FKr.forEach(t),p7o=r(T3e," \u2014 "),YI=n(T3e,"A",{href:!0});var TKr=s(YI);_7o=r(TKr,"MPNetForMaskedLM"),TKr.forEach(t),u7o=r(T3e," (MPNet model)"),T3e.forEach(t),b7o=i(N),x6=n(N,"LI",{});var M3e=s(x6);sse=n(M3e,"STRONG",{});var MKr=s(sse);v7o=r(MKr,"nystromformer"),MKr.forEach(t),F7o=r(M3e," \u2014 "),KI=n(M3e,"A",{href:!0});var EKr=s(KI);T7o=r(EKr,"NystromformerForMaskedLM"),EKr.forEach(t),M7o=r(M3e," (Nystromformer model)"),M3e.forEach(t),E7o=i(N),k6=n(N,"LI",{});var E3e=s(k6);lse=n(E3e,"STRONG",{});var CKr=s(lse);C7o=r(CKr,"perceiver"),CKr.forEach(t),w7o=r(E3e," \u2014 "),ZI=n(E3e,"A",{href:!0});var wKr=s(ZI);A7o=r(wKr,"PerceiverForMaskedLM"),wKr.forEach(t),y7o=r(E3e," (Perceiver model)"),E3e.forEach(t),L7o=i(N),S6=n(N,"LI",{});var C3e=s(S6);ise=n(C3e,"STRONG",{});var AKr=s(ise);x7o=r(AKr,"qdqbert"),AKr.forEach(t),k7o=r(C3e," \u2014 "),eq=n(C3e,"A",{href:!0});var yKr=s(eq);S7o=r(yKr,"QDQBertForMaskedLM"),yKr.forEach(t),R7o=r(C3e," (QDQBert model)"),C3e.forEach(t),B7o=i(N),R6=n(N,"LI",{});var w3e=s(R6);dse=n(w3e,"STRONG",{});var LKr=s(dse);P7o=r(LKr,"reformer"),LKr.forEach(t),$7o=r(w3e," \u2014 "),oq=n(w3e,"A",{href:!0});var xKr=s(oq);I7o=r(xKr,"ReformerForMaskedLM"),xKr.forEach(t),q7o=r(w3e," (Reformer model)"),w3e.forEach(t),N7o=i(N),B6=n(N,"LI",{});var A3e=s(B6);cse=n(A3e,"STRONG",{});var kKr=s(cse);j7o=r(kKr,"rembert"),kKr.forEach(t),D7o=r(A3e," \u2014 "),rq=n(A3e,"A",{href:!0});var SKr=s(rq);G7o=r(SKr,"RemBertForMaskedLM"),SKr.forEach(t),O7o=r(A3e," (RemBERT model)"),A3e.forEach(t),V7o=i(N),P6=n(N,"LI",{});var y3e=s(P6);fse=n(y3e,"STRONG",{});var RKr=s(fse);X7o=r(RKr,"roberta"),RKr.forEach(t),z7o=r(y3e," \u2014 "),tq=n(y3e,"A",{href:!0});var BKr=s(tq);Q7o=r(BKr,"RobertaForMaskedLM"),BKr.forEach(t),W7o=r(y3e," (RoBERTa model)"),y3e.forEach(t),H7o=i(N),$6=n(N,"LI",{});var L3e=s($6);mse=n(L3e,"STRONG",{});var PKr=s(mse);U7o=r(PKr,"roformer"),PKr.forEach(t),J7o=r(L3e," \u2014 "),aq=n(L3e,"A",{href:!0});var $Kr=s(aq);Y7o=r($Kr,"RoFormerForMaskedLM"),$Kr.forEach(t),K7o=r(L3e," (RoFormer model)"),L3e.forEach(t),Z7o=i(N),I6=n(N,"LI",{});var x3e=s(I6);gse=n(x3e,"STRONG",{});var IKr=s(gse);eMo=r(IKr,"squeezebert"),IKr.forEach(t),oMo=r(x3e," \u2014 "),nq=n(x3e,"A",{href:!0});var qKr=s(nq);rMo=r(qKr,"SqueezeBertForMaskedLM"),qKr.forEach(t),tMo=r(x3e," (SqueezeBERT model)"),x3e.forEach(t),aMo=i(N),q6=n(N,"LI",{});var k3e=s(q6);hse=n(k3e,"STRONG",{});var NKr=s(hse);nMo=r(NKr,"tapas"),NKr.forEach(t),sMo=r(k3e," \u2014 "),sq=n(k3e,"A",{href:!0});var jKr=s(sq);lMo=r(jKr,"TapasForMaskedLM"),jKr.forEach(t),iMo=r(k3e," (TAPAS model)"),k3e.forEach(t),dMo=i(N),N6=n(N,"LI",{});var S3e=s(N6);pse=n(S3e,"STRONG",{});var DKr=s(pse);cMo=r(DKr,"wav2vec2"),DKr.forEach(t),fMo=r(S3e," \u2014 "),_se=n(S3e,"CODE",{});var GKr=s(_se);mMo=r(GKr,"Wav2Vec2ForMaskedLM"),GKr.forEach(t),gMo=r(S3e," (Wav2Vec2 model)"),S3e.forEach(t),hMo=i(N),j6=n(N,"LI",{});var R3e=s(j6);use=n(R3e,"STRONG",{});var OKr=s(use);pMo=r(OKr,"xlm"),OKr.forEach(t),_Mo=r(R3e," \u2014 "),lq=n(R3e,"A",{href:!0});var VKr=s(lq);uMo=r(VKr,"XLMWithLMHeadModel"),VKr.forEach(t),bMo=r(R3e," (XLM model)"),R3e.forEach(t),vMo=i(N),D6=n(N,"LI",{});var B3e=s(D6);bse=n(B3e,"STRONG",{});var XKr=s(bse);FMo=r(XKr,"xlm-roberta"),XKr.forEach(t),TMo=r(B3e," \u2014 "),iq=n(B3e,"A",{href:!0});var zKr=s(iq);MMo=r(zKr,"XLMRobertaForMaskedLM"),zKr.forEach(t),EMo=r(B3e," (XLM-RoBERTa model)"),B3e.forEach(t),CMo=i(N),G6=n(N,"LI",{});var P3e=s(G6);vse=n(P3e,"STRONG",{});var QKr=s(vse);wMo=r(QKr,"xlm-roberta-xl"),QKr.forEach(t),AMo=r(P3e," \u2014 "),dq=n(P3e,"A",{href:!0});var WKr=s(dq);yMo=r(WKr,"XLMRobertaXLForMaskedLM"),WKr.forEach(t),LMo=r(P3e," (XLM-RoBERTa-XL model)"),P3e.forEach(t),xMo=i(N),O6=n(N,"LI",{});var $3e=s(O6);Fse=n($3e,"STRONG",{});var HKr=s(Fse);kMo=r(HKr,"yoso"),HKr.forEach(t),SMo=r($3e," \u2014 "),cq=n($3e,"A",{href:!0});var UKr=s(cq);RMo=r(UKr,"YosoForMaskedLM"),UKr.forEach(t),BMo=r($3e," (YOSO model)"),$3e.forEach(t),N.forEach(t),PMo=i(Vt),V6=n(Vt,"P",{});var I3e=s(V6);$Mo=r(I3e,"The model is set in evaluation mode by default using "),Tse=n(I3e,"CODE",{});var JKr=s(Tse);IMo=r(JKr,"model.eval()"),JKr.forEach(t),qMo=r(I3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mse=n(I3e,"CODE",{});var YKr=s(Mse);NMo=r(YKr,"model.train()"),YKr.forEach(t),I3e.forEach(t),jMo=i(Vt),Ese=n(Vt,"P",{});var KKr=s(Ese);DMo=r(KKr,"Examples:"),KKr.forEach(t),GMo=i(Vt),m($5.$$.fragment,Vt),Vt.forEach(t),Zs.forEach(t),KRe=i(c),dd=n(c,"H2",{class:!0});var l$e=s(dd);X6=n(l$e,"A",{id:!0,class:!0,href:!0});var ZKr=s(X6);Cse=n(ZKr,"SPAN",{});var eZr=s(Cse);m(I5.$$.fragment,eZr),eZr.forEach(t),ZKr.forEach(t),OMo=i(l$e),wse=n(l$e,"SPAN",{});var oZr=s(wse);VMo=r(oZr,"AutoModelForSeq2SeqLM"),oZr.forEach(t),l$e.forEach(t),ZRe=i(c),er=n(c,"DIV",{class:!0});var ol=s(er);m(q5.$$.fragment,ol),XMo=i(ol),cd=n(ol,"P",{});var LU=s(cd);zMo=r(LU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fq=n(LU,"A",{href:!0});var rZr=s(fq);QMo=r(rZr,"from_pretrained()"),rZr.forEach(t),WMo=r(LU," class method or the "),mq=n(LU,"A",{href:!0});var tZr=s(mq);HMo=r(tZr,"from_config()"),tZr.forEach(t),UMo=r(LU,` class
method.`),LU.forEach(t),JMo=i(ol),N5=n(ol,"P",{});var i$e=s(N5);YMo=r(i$e,"This class cannot be instantiated directly using "),Ase=n(i$e,"CODE",{});var aZr=s(Ase);KMo=r(aZr,"__init__()"),aZr.forEach(t),ZMo=r(i$e," (throws an error)."),i$e.forEach(t),e4o=i(ol),Hr=n(ol,"DIV",{class:!0});var rl=s(Hr);m(j5.$$.fragment,rl),o4o=i(rl),yse=n(rl,"P",{});var nZr=s(yse);r4o=r(nZr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nZr.forEach(t),t4o=i(rl),fd=n(rl,"P",{});var xU=s(fd);a4o=r(xU,`Note:
Loading a model from its configuration file does `),Lse=n(xU,"STRONG",{});var sZr=s(Lse);n4o=r(sZr,"not"),sZr.forEach(t),s4o=r(xU,` load the model weights. It only affects the
model\u2019s configuration. Use `),gq=n(xU,"A",{href:!0});var lZr=s(gq);l4o=r(lZr,"from_pretrained()"),lZr.forEach(t),i4o=r(xU," to load the model weights."),xU.forEach(t),d4o=i(rl),xse=n(rl,"P",{});var iZr=s(xse);c4o=r(iZr,"Examples:"),iZr.forEach(t),f4o=i(rl),m(D5.$$.fragment,rl),rl.forEach(t),m4o=i(ol),Ge=n(ol,"DIV",{class:!0});var Xt=s(Ge);m(G5.$$.fragment,Xt),g4o=i(Xt),kse=n(Xt,"P",{});var dZr=s(kse);h4o=r(dZr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dZr.forEach(t),p4o=i(Xt),Ha=n(Xt,"P",{});var $E=s(Ha);_4o=r($E,"The model class to instantiate is selected based on the "),Sse=n($E,"CODE",{});var cZr=s(Sse);u4o=r(cZr,"model_type"),cZr.forEach(t),b4o=r($E,` property of the config object (either
passed as an argument or loaded from `),Rse=n($E,"CODE",{});var fZr=s(Rse);v4o=r(fZr,"pretrained_model_name_or_path"),fZr.forEach(t),F4o=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bse=n($E,"CODE",{});var mZr=s(Bse);T4o=r(mZr,"pretrained_model_name_or_path"),mZr.forEach(t),M4o=r($E,":"),$E.forEach(t),E4o=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);z6=n(le,"LI",{});var q3e=s(z6);Pse=n(q3e,"STRONG",{});var gZr=s(Pse);C4o=r(gZr,"bart"),gZr.forEach(t),w4o=r(q3e," \u2014 "),hq=n(q3e,"A",{href:!0});var hZr=s(hq);A4o=r(hZr,"BartForConditionalGeneration"),hZr.forEach(t),y4o=r(q3e," (BART model)"),q3e.forEach(t),L4o=i(le),Q6=n(le,"LI",{});var N3e=s(Q6);$se=n(N3e,"STRONG",{});var pZr=s($se);x4o=r(pZr,"bigbird_pegasus"),pZr.forEach(t),k4o=r(N3e," \u2014 "),pq=n(N3e,"A",{href:!0});var _Zr=s(pq);S4o=r(_Zr,"BigBirdPegasusForConditionalGeneration"),_Zr.forEach(t),R4o=r(N3e," (BigBirdPegasus model)"),N3e.forEach(t),B4o=i(le),W6=n(le,"LI",{});var j3e=s(W6);Ise=n(j3e,"STRONG",{});var uZr=s(Ise);P4o=r(uZr,"blenderbot"),uZr.forEach(t),$4o=r(j3e," \u2014 "),_q=n(j3e,"A",{href:!0});var bZr=s(_q);I4o=r(bZr,"BlenderbotForConditionalGeneration"),bZr.forEach(t),q4o=r(j3e," (Blenderbot model)"),j3e.forEach(t),N4o=i(le),H6=n(le,"LI",{});var D3e=s(H6);qse=n(D3e,"STRONG",{});var vZr=s(qse);j4o=r(vZr,"blenderbot-small"),vZr.forEach(t),D4o=r(D3e," \u2014 "),uq=n(D3e,"A",{href:!0});var FZr=s(uq);G4o=r(FZr,"BlenderbotSmallForConditionalGeneration"),FZr.forEach(t),O4o=r(D3e," (BlenderbotSmall model)"),D3e.forEach(t),V4o=i(le),U6=n(le,"LI",{});var G3e=s(U6);Nse=n(G3e,"STRONG",{});var TZr=s(Nse);X4o=r(TZr,"encoder-decoder"),TZr.forEach(t),z4o=r(G3e," \u2014 "),bq=n(G3e,"A",{href:!0});var MZr=s(bq);Q4o=r(MZr,"EncoderDecoderModel"),MZr.forEach(t),W4o=r(G3e," (Encoder decoder model)"),G3e.forEach(t),H4o=i(le),J6=n(le,"LI",{});var O3e=s(J6);jse=n(O3e,"STRONG",{});var EZr=s(jse);U4o=r(EZr,"fsmt"),EZr.forEach(t),J4o=r(O3e," \u2014 "),vq=n(O3e,"A",{href:!0});var CZr=s(vq);Y4o=r(CZr,"FSMTForConditionalGeneration"),CZr.forEach(t),K4o=r(O3e," (FairSeq Machine-Translation model)"),O3e.forEach(t),Z4o=i(le),Y6=n(le,"LI",{});var V3e=s(Y6);Dse=n(V3e,"STRONG",{});var wZr=s(Dse);eEo=r(wZr,"led"),wZr.forEach(t),oEo=r(V3e," \u2014 "),Fq=n(V3e,"A",{href:!0});var AZr=s(Fq);rEo=r(AZr,"LEDForConditionalGeneration"),AZr.forEach(t),tEo=r(V3e," (LED model)"),V3e.forEach(t),aEo=i(le),K6=n(le,"LI",{});var X3e=s(K6);Gse=n(X3e,"STRONG",{});var yZr=s(Gse);nEo=r(yZr,"m2m_100"),yZr.forEach(t),sEo=r(X3e," \u2014 "),Tq=n(X3e,"A",{href:!0});var LZr=s(Tq);lEo=r(LZr,"M2M100ForConditionalGeneration"),LZr.forEach(t),iEo=r(X3e," (M2M100 model)"),X3e.forEach(t),dEo=i(le),Z6=n(le,"LI",{});var z3e=s(Z6);Ose=n(z3e,"STRONG",{});var xZr=s(Ose);cEo=r(xZr,"marian"),xZr.forEach(t),fEo=r(z3e," \u2014 "),Mq=n(z3e,"A",{href:!0});var kZr=s(Mq);mEo=r(kZr,"MarianMTModel"),kZr.forEach(t),gEo=r(z3e," (Marian model)"),z3e.forEach(t),hEo=i(le),e1=n(le,"LI",{});var Q3e=s(e1);Vse=n(Q3e,"STRONG",{});var SZr=s(Vse);pEo=r(SZr,"mbart"),SZr.forEach(t),_Eo=r(Q3e," \u2014 "),Eq=n(Q3e,"A",{href:!0});var RZr=s(Eq);uEo=r(RZr,"MBartForConditionalGeneration"),RZr.forEach(t),bEo=r(Q3e," (mBART model)"),Q3e.forEach(t),vEo=i(le),o1=n(le,"LI",{});var W3e=s(o1);Xse=n(W3e,"STRONG",{});var BZr=s(Xse);FEo=r(BZr,"mt5"),BZr.forEach(t),TEo=r(W3e," \u2014 "),Cq=n(W3e,"A",{href:!0});var PZr=s(Cq);MEo=r(PZr,"MT5ForConditionalGeneration"),PZr.forEach(t),EEo=r(W3e," (mT5 model)"),W3e.forEach(t),CEo=i(le),r1=n(le,"LI",{});var H3e=s(r1);zse=n(H3e,"STRONG",{});var $Zr=s(zse);wEo=r($Zr,"pegasus"),$Zr.forEach(t),AEo=r(H3e," \u2014 "),wq=n(H3e,"A",{href:!0});var IZr=s(wq);yEo=r(IZr,"PegasusForConditionalGeneration"),IZr.forEach(t),LEo=r(H3e," (Pegasus model)"),H3e.forEach(t),xEo=i(le),t1=n(le,"LI",{});var U3e=s(t1);Qse=n(U3e,"STRONG",{});var qZr=s(Qse);kEo=r(qZr,"plbart"),qZr.forEach(t),SEo=r(U3e," \u2014 "),Aq=n(U3e,"A",{href:!0});var NZr=s(Aq);REo=r(NZr,"PLBartForConditionalGeneration"),NZr.forEach(t),BEo=r(U3e," (PLBart model)"),U3e.forEach(t),PEo=i(le),a1=n(le,"LI",{});var J3e=s(a1);Wse=n(J3e,"STRONG",{});var jZr=s(Wse);$Eo=r(jZr,"prophetnet"),jZr.forEach(t),IEo=r(J3e," \u2014 "),yq=n(J3e,"A",{href:!0});var DZr=s(yq);qEo=r(DZr,"ProphetNetForConditionalGeneration"),DZr.forEach(t),NEo=r(J3e," (ProphetNet model)"),J3e.forEach(t),jEo=i(le),n1=n(le,"LI",{});var Y3e=s(n1);Hse=n(Y3e,"STRONG",{});var GZr=s(Hse);DEo=r(GZr,"t5"),GZr.forEach(t),GEo=r(Y3e," \u2014 "),Lq=n(Y3e,"A",{href:!0});var OZr=s(Lq);OEo=r(OZr,"T5ForConditionalGeneration"),OZr.forEach(t),VEo=r(Y3e," (T5 model)"),Y3e.forEach(t),XEo=i(le),s1=n(le,"LI",{});var K3e=s(s1);Use=n(K3e,"STRONG",{});var VZr=s(Use);zEo=r(VZr,"tapex"),VZr.forEach(t),QEo=r(K3e," \u2014 "),xq=n(K3e,"A",{href:!0});var XZr=s(xq);WEo=r(XZr,"BartForConditionalGeneration"),XZr.forEach(t),HEo=r(K3e," (TAPEX model)"),K3e.forEach(t),UEo=i(le),l1=n(le,"LI",{});var Z3e=s(l1);Jse=n(Z3e,"STRONG",{});var zZr=s(Jse);JEo=r(zZr,"xlm-prophetnet"),zZr.forEach(t),YEo=r(Z3e," \u2014 "),kq=n(Z3e,"A",{href:!0});var QZr=s(kq);KEo=r(QZr,"XLMProphetNetForConditionalGeneration"),QZr.forEach(t),ZEo=r(Z3e," (XLMProphetNet model)"),Z3e.forEach(t),le.forEach(t),eCo=i(Xt),i1=n(Xt,"P",{});var ewe=s(i1);oCo=r(ewe,"The model is set in evaluation mode by default using "),Yse=n(ewe,"CODE",{});var WZr=s(Yse);rCo=r(WZr,"model.eval()"),WZr.forEach(t),tCo=r(ewe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kse=n(ewe,"CODE",{});var HZr=s(Kse);aCo=r(HZr,"model.train()"),HZr.forEach(t),ewe.forEach(t),nCo=i(Xt),Zse=n(Xt,"P",{});var UZr=s(Zse);sCo=r(UZr,"Examples:"),UZr.forEach(t),lCo=i(Xt),m(O5.$$.fragment,Xt),Xt.forEach(t),ol.forEach(t),eBe=i(c),md=n(c,"H2",{class:!0});var d$e=s(md);d1=n(d$e,"A",{id:!0,class:!0,href:!0});var JZr=s(d1);ele=n(JZr,"SPAN",{});var YZr=s(ele);m(V5.$$.fragment,YZr),YZr.forEach(t),JZr.forEach(t),iCo=i(d$e),ole=n(d$e,"SPAN",{});var KZr=s(ole);dCo=r(KZr,"AutoModelForSequenceClassification"),KZr.forEach(t),d$e.forEach(t),oBe=i(c),or=n(c,"DIV",{class:!0});var tl=s(or);m(X5.$$.fragment,tl),cCo=i(tl),gd=n(tl,"P",{});var kU=s(gd);fCo=r(kU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Sq=n(kU,"A",{href:!0});var ZZr=s(Sq);mCo=r(ZZr,"from_pretrained()"),ZZr.forEach(t),gCo=r(kU," class method or the "),Rq=n(kU,"A",{href:!0});var eet=s(Rq);hCo=r(eet,"from_config()"),eet.forEach(t),pCo=r(kU,` class
method.`),kU.forEach(t),_Co=i(tl),z5=n(tl,"P",{});var c$e=s(z5);uCo=r(c$e,"This class cannot be instantiated directly using "),rle=n(c$e,"CODE",{});var oet=s(rle);bCo=r(oet,"__init__()"),oet.forEach(t),vCo=r(c$e," (throws an error)."),c$e.forEach(t),FCo=i(tl),Ur=n(tl,"DIV",{class:!0});var al=s(Ur);m(Q5.$$.fragment,al),TCo=i(al),tle=n(al,"P",{});var ret=s(tle);MCo=r(ret,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ret.forEach(t),ECo=i(al),hd=n(al,"P",{});var SU=s(hd);CCo=r(SU,`Note:
Loading a model from its configuration file does `),ale=n(SU,"STRONG",{});var tet=s(ale);wCo=r(tet,"not"),tet.forEach(t),ACo=r(SU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bq=n(SU,"A",{href:!0});var aet=s(Bq);yCo=r(aet,"from_pretrained()"),aet.forEach(t),LCo=r(SU," to load the model weights."),SU.forEach(t),xCo=i(al),nle=n(al,"P",{});var net=s(nle);kCo=r(net,"Examples:"),net.forEach(t),SCo=i(al),m(W5.$$.fragment,al),al.forEach(t),RCo=i(tl),Oe=n(tl,"DIV",{class:!0});var zt=s(Oe);m(H5.$$.fragment,zt),BCo=i(zt),sle=n(zt,"P",{});var set=s(sle);PCo=r(set,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),set.forEach(t),$Co=i(zt),Ua=n(zt,"P",{});var IE=s(Ua);ICo=r(IE,"The model class to instantiate is selected based on the "),lle=n(IE,"CODE",{});var iet=s(lle);qCo=r(iet,"model_type"),iet.forEach(t),NCo=r(IE,` property of the config object (either
passed as an argument or loaded from `),ile=n(IE,"CODE",{});var det=s(ile);jCo=r(det,"pretrained_model_name_or_path"),det.forEach(t),DCo=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dle=n(IE,"CODE",{});var cet=s(dle);GCo=r(cet,"pretrained_model_name_or_path"),cet.forEach(t),OCo=r(IE,":"),IE.forEach(t),VCo=i(zt),y=n(zt,"UL",{});var L=s(y);c1=n(L,"LI",{});var owe=s(c1);cle=n(owe,"STRONG",{});var fet=s(cle);XCo=r(fet,"albert"),fet.forEach(t),zCo=r(owe," \u2014 "),Pq=n(owe,"A",{href:!0});var met=s(Pq);QCo=r(met,"AlbertForSequenceClassification"),met.forEach(t),WCo=r(owe," (ALBERT model)"),owe.forEach(t),HCo=i(L),f1=n(L,"LI",{});var rwe=s(f1);fle=n(rwe,"STRONG",{});var get=s(fle);UCo=r(get,"bart"),get.forEach(t),JCo=r(rwe," \u2014 "),$q=n(rwe,"A",{href:!0});var het=s($q);YCo=r(het,"BartForSequenceClassification"),het.forEach(t),KCo=r(rwe," (BART model)"),rwe.forEach(t),ZCo=i(L),m1=n(L,"LI",{});var twe=s(m1);mle=n(twe,"STRONG",{});var pet=s(mle);e5o=r(pet,"bert"),pet.forEach(t),o5o=r(twe," \u2014 "),Iq=n(twe,"A",{href:!0});var _et=s(Iq);r5o=r(_et,"BertForSequenceClassification"),_et.forEach(t),t5o=r(twe," (BERT model)"),twe.forEach(t),a5o=i(L),g1=n(L,"LI",{});var awe=s(g1);gle=n(awe,"STRONG",{});var uet=s(gle);n5o=r(uet,"big_bird"),uet.forEach(t),s5o=r(awe," \u2014 "),qq=n(awe,"A",{href:!0});var bet=s(qq);l5o=r(bet,"BigBirdForSequenceClassification"),bet.forEach(t),i5o=r(awe," (BigBird model)"),awe.forEach(t),d5o=i(L),h1=n(L,"LI",{});var nwe=s(h1);hle=n(nwe,"STRONG",{});var vet=s(hle);c5o=r(vet,"bigbird_pegasus"),vet.forEach(t),f5o=r(nwe," \u2014 "),Nq=n(nwe,"A",{href:!0});var Fet=s(Nq);m5o=r(Fet,"BigBirdPegasusForSequenceClassification"),Fet.forEach(t),g5o=r(nwe," (BigBirdPegasus model)"),nwe.forEach(t),h5o=i(L),p1=n(L,"LI",{});var swe=s(p1);ple=n(swe,"STRONG",{});var Tet=s(ple);p5o=r(Tet,"camembert"),Tet.forEach(t),_5o=r(swe," \u2014 "),jq=n(swe,"A",{href:!0});var Met=s(jq);u5o=r(Met,"CamembertForSequenceClassification"),Met.forEach(t),b5o=r(swe," (CamemBERT model)"),swe.forEach(t),v5o=i(L),_1=n(L,"LI",{});var lwe=s(_1);_le=n(lwe,"STRONG",{});var Eet=s(_le);F5o=r(Eet,"canine"),Eet.forEach(t),T5o=r(lwe," \u2014 "),Dq=n(lwe,"A",{href:!0});var Cet=s(Dq);M5o=r(Cet,"CanineForSequenceClassification"),Cet.forEach(t),E5o=r(lwe," (Canine model)"),lwe.forEach(t),C5o=i(L),u1=n(L,"LI",{});var iwe=s(u1);ule=n(iwe,"STRONG",{});var wet=s(ule);w5o=r(wet,"convbert"),wet.forEach(t),A5o=r(iwe," \u2014 "),Gq=n(iwe,"A",{href:!0});var Aet=s(Gq);y5o=r(Aet,"ConvBertForSequenceClassification"),Aet.forEach(t),L5o=r(iwe," (ConvBERT model)"),iwe.forEach(t),x5o=i(L),b1=n(L,"LI",{});var dwe=s(b1);ble=n(dwe,"STRONG",{});var yet=s(ble);k5o=r(yet,"ctrl"),yet.forEach(t),S5o=r(dwe," \u2014 "),Oq=n(dwe,"A",{href:!0});var Let=s(Oq);R5o=r(Let,"CTRLForSequenceClassification"),Let.forEach(t),B5o=r(dwe," (CTRL model)"),dwe.forEach(t),P5o=i(L),v1=n(L,"LI",{});var cwe=s(v1);vle=n(cwe,"STRONG",{});var xet=s(vle);$5o=r(xet,"data2vec-text"),xet.forEach(t),I5o=r(cwe," \u2014 "),Vq=n(cwe,"A",{href:!0});var ket=s(Vq);q5o=r(ket,"Data2VecTextForSequenceClassification"),ket.forEach(t),N5o=r(cwe," (Data2VecText model)"),cwe.forEach(t),j5o=i(L),F1=n(L,"LI",{});var fwe=s(F1);Fle=n(fwe,"STRONG",{});var Set=s(Fle);D5o=r(Set,"deberta"),Set.forEach(t),G5o=r(fwe," \u2014 "),Xq=n(fwe,"A",{href:!0});var Ret=s(Xq);O5o=r(Ret,"DebertaForSequenceClassification"),Ret.forEach(t),V5o=r(fwe," (DeBERTa model)"),fwe.forEach(t),X5o=i(L),T1=n(L,"LI",{});var mwe=s(T1);Tle=n(mwe,"STRONG",{});var Bet=s(Tle);z5o=r(Bet,"deberta-v2"),Bet.forEach(t),Q5o=r(mwe," \u2014 "),zq=n(mwe,"A",{href:!0});var Pet=s(zq);W5o=r(Pet,"DebertaV2ForSequenceClassification"),Pet.forEach(t),H5o=r(mwe," (DeBERTa-v2 model)"),mwe.forEach(t),U5o=i(L),M1=n(L,"LI",{});var gwe=s(M1);Mle=n(gwe,"STRONG",{});var $et=s(Mle);J5o=r($et,"distilbert"),$et.forEach(t),Y5o=r(gwe," \u2014 "),Qq=n(gwe,"A",{href:!0});var Iet=s(Qq);K5o=r(Iet,"DistilBertForSequenceClassification"),Iet.forEach(t),Z5o=r(gwe," (DistilBERT model)"),gwe.forEach(t),e3o=i(L),E1=n(L,"LI",{});var hwe=s(E1);Ele=n(hwe,"STRONG",{});var qet=s(Ele);o3o=r(qet,"electra"),qet.forEach(t),r3o=r(hwe," \u2014 "),Wq=n(hwe,"A",{href:!0});var Net=s(Wq);t3o=r(Net,"ElectraForSequenceClassification"),Net.forEach(t),a3o=r(hwe," (ELECTRA model)"),hwe.forEach(t),n3o=i(L),C1=n(L,"LI",{});var pwe=s(C1);Cle=n(pwe,"STRONG",{});var jet=s(Cle);s3o=r(jet,"flaubert"),jet.forEach(t),l3o=r(pwe," \u2014 "),Hq=n(pwe,"A",{href:!0});var Det=s(Hq);i3o=r(Det,"FlaubertForSequenceClassification"),Det.forEach(t),d3o=r(pwe," (FlauBERT model)"),pwe.forEach(t),c3o=i(L),w1=n(L,"LI",{});var _we=s(w1);wle=n(_we,"STRONG",{});var Get=s(wle);f3o=r(Get,"fnet"),Get.forEach(t),m3o=r(_we," \u2014 "),Uq=n(_we,"A",{href:!0});var Oet=s(Uq);g3o=r(Oet,"FNetForSequenceClassification"),Oet.forEach(t),h3o=r(_we," (FNet model)"),_we.forEach(t),p3o=i(L),A1=n(L,"LI",{});var uwe=s(A1);Ale=n(uwe,"STRONG",{});var Vet=s(Ale);_3o=r(Vet,"funnel"),Vet.forEach(t),u3o=r(uwe," \u2014 "),Jq=n(uwe,"A",{href:!0});var Xet=s(Jq);b3o=r(Xet,"FunnelForSequenceClassification"),Xet.forEach(t),v3o=r(uwe," (Funnel Transformer model)"),uwe.forEach(t),F3o=i(L),y1=n(L,"LI",{});var bwe=s(y1);yle=n(bwe,"STRONG",{});var zet=s(yle);T3o=r(zet,"gpt2"),zet.forEach(t),M3o=r(bwe," \u2014 "),Yq=n(bwe,"A",{href:!0});var Qet=s(Yq);E3o=r(Qet,"GPT2ForSequenceClassification"),Qet.forEach(t),C3o=r(bwe," (OpenAI GPT-2 model)"),bwe.forEach(t),w3o=i(L),L1=n(L,"LI",{});var vwe=s(L1);Lle=n(vwe,"STRONG",{});var Wet=s(Lle);A3o=r(Wet,"gpt_neo"),Wet.forEach(t),y3o=r(vwe," \u2014 "),Kq=n(vwe,"A",{href:!0});var Het=s(Kq);L3o=r(Het,"GPTNeoForSequenceClassification"),Het.forEach(t),x3o=r(vwe," (GPT Neo model)"),vwe.forEach(t),k3o=i(L),x1=n(L,"LI",{});var Fwe=s(x1);xle=n(Fwe,"STRONG",{});var Uet=s(xle);S3o=r(Uet,"gptj"),Uet.forEach(t),R3o=r(Fwe," \u2014 "),Zq=n(Fwe,"A",{href:!0});var Jet=s(Zq);B3o=r(Jet,"GPTJForSequenceClassification"),Jet.forEach(t),P3o=r(Fwe," (GPT-J model)"),Fwe.forEach(t),$3o=i(L),k1=n(L,"LI",{});var Twe=s(k1);kle=n(Twe,"STRONG",{});var Yet=s(kle);I3o=r(Yet,"ibert"),Yet.forEach(t),q3o=r(Twe," \u2014 "),eN=n(Twe,"A",{href:!0});var Ket=s(eN);N3o=r(Ket,"IBertForSequenceClassification"),Ket.forEach(t),j3o=r(Twe," (I-BERT model)"),Twe.forEach(t),D3o=i(L),S1=n(L,"LI",{});var Mwe=s(S1);Sle=n(Mwe,"STRONG",{});var Zet=s(Sle);G3o=r(Zet,"layoutlm"),Zet.forEach(t),O3o=r(Mwe," \u2014 "),oN=n(Mwe,"A",{href:!0});var eot=s(oN);V3o=r(eot,"LayoutLMForSequenceClassification"),eot.forEach(t),X3o=r(Mwe," (LayoutLM model)"),Mwe.forEach(t),z3o=i(L),R1=n(L,"LI",{});var Ewe=s(R1);Rle=n(Ewe,"STRONG",{});var oot=s(Rle);Q3o=r(oot,"layoutlmv2"),oot.forEach(t),W3o=r(Ewe," \u2014 "),rN=n(Ewe,"A",{href:!0});var rot=s(rN);H3o=r(rot,"LayoutLMv2ForSequenceClassification"),rot.forEach(t),U3o=r(Ewe," (LayoutLMv2 model)"),Ewe.forEach(t),J3o=i(L),B1=n(L,"LI",{});var Cwe=s(B1);Ble=n(Cwe,"STRONG",{});var tot=s(Ble);Y3o=r(tot,"led"),tot.forEach(t),K3o=r(Cwe," \u2014 "),tN=n(Cwe,"A",{href:!0});var aot=s(tN);Z3o=r(aot,"LEDForSequenceClassification"),aot.forEach(t),ewo=r(Cwe," (LED model)"),Cwe.forEach(t),owo=i(L),P1=n(L,"LI",{});var wwe=s(P1);Ple=n(wwe,"STRONG",{});var not=s(Ple);rwo=r(not,"longformer"),not.forEach(t),two=r(wwe," \u2014 "),aN=n(wwe,"A",{href:!0});var sot=s(aN);awo=r(sot,"LongformerForSequenceClassification"),sot.forEach(t),nwo=r(wwe," (Longformer model)"),wwe.forEach(t),swo=i(L),$1=n(L,"LI",{});var Awe=s($1);$le=n(Awe,"STRONG",{});var lot=s($le);lwo=r(lot,"mbart"),lot.forEach(t),iwo=r(Awe," \u2014 "),nN=n(Awe,"A",{href:!0});var iot=s(nN);dwo=r(iot,"MBartForSequenceClassification"),iot.forEach(t),cwo=r(Awe," (mBART model)"),Awe.forEach(t),fwo=i(L),I1=n(L,"LI",{});var ywe=s(I1);Ile=n(ywe,"STRONG",{});var dot=s(Ile);mwo=r(dot,"megatron-bert"),dot.forEach(t),gwo=r(ywe," \u2014 "),sN=n(ywe,"A",{href:!0});var cot=s(sN);hwo=r(cot,"MegatronBertForSequenceClassification"),cot.forEach(t),pwo=r(ywe," (MegatronBert model)"),ywe.forEach(t),_wo=i(L),q1=n(L,"LI",{});var Lwe=s(q1);qle=n(Lwe,"STRONG",{});var fot=s(qle);uwo=r(fot,"mobilebert"),fot.forEach(t),bwo=r(Lwe," \u2014 "),lN=n(Lwe,"A",{href:!0});var mot=s(lN);vwo=r(mot,"MobileBertForSequenceClassification"),mot.forEach(t),Fwo=r(Lwe," (MobileBERT model)"),Lwe.forEach(t),Two=i(L),N1=n(L,"LI",{});var xwe=s(N1);Nle=n(xwe,"STRONG",{});var got=s(Nle);Mwo=r(got,"mpnet"),got.forEach(t),Ewo=r(xwe," \u2014 "),iN=n(xwe,"A",{href:!0});var hot=s(iN);Cwo=r(hot,"MPNetForSequenceClassification"),hot.forEach(t),wwo=r(xwe," (MPNet model)"),xwe.forEach(t),Awo=i(L),j1=n(L,"LI",{});var kwe=s(j1);jle=n(kwe,"STRONG",{});var pot=s(jle);ywo=r(pot,"nystromformer"),pot.forEach(t),Lwo=r(kwe," \u2014 "),dN=n(kwe,"A",{href:!0});var _ot=s(dN);xwo=r(_ot,"NystromformerForSequenceClassification"),_ot.forEach(t),kwo=r(kwe," (Nystromformer model)"),kwe.forEach(t),Swo=i(L),D1=n(L,"LI",{});var Swe=s(D1);Dle=n(Swe,"STRONG",{});var uot=s(Dle);Rwo=r(uot,"openai-gpt"),uot.forEach(t),Bwo=r(Swe," \u2014 "),cN=n(Swe,"A",{href:!0});var bot=s(cN);Pwo=r(bot,"OpenAIGPTForSequenceClassification"),bot.forEach(t),$wo=r(Swe," (OpenAI GPT model)"),Swe.forEach(t),Iwo=i(L),G1=n(L,"LI",{});var Rwe=s(G1);Gle=n(Rwe,"STRONG",{});var vot=s(Gle);qwo=r(vot,"perceiver"),vot.forEach(t),Nwo=r(Rwe," \u2014 "),fN=n(Rwe,"A",{href:!0});var Fot=s(fN);jwo=r(Fot,"PerceiverForSequenceClassification"),Fot.forEach(t),Dwo=r(Rwe," (Perceiver model)"),Rwe.forEach(t),Gwo=i(L),O1=n(L,"LI",{});var Bwe=s(O1);Ole=n(Bwe,"STRONG",{});var Tot=s(Ole);Owo=r(Tot,"plbart"),Tot.forEach(t),Vwo=r(Bwe," \u2014 "),mN=n(Bwe,"A",{href:!0});var Mot=s(mN);Xwo=r(Mot,"PLBartForSequenceClassification"),Mot.forEach(t),zwo=r(Bwe," (PLBart model)"),Bwe.forEach(t),Qwo=i(L),V1=n(L,"LI",{});var Pwe=s(V1);Vle=n(Pwe,"STRONG",{});var Eot=s(Vle);Wwo=r(Eot,"qdqbert"),Eot.forEach(t),Hwo=r(Pwe," \u2014 "),gN=n(Pwe,"A",{href:!0});var Cot=s(gN);Uwo=r(Cot,"QDQBertForSequenceClassification"),Cot.forEach(t),Jwo=r(Pwe," (QDQBert model)"),Pwe.forEach(t),Ywo=i(L),X1=n(L,"LI",{});var $we=s(X1);Xle=n($we,"STRONG",{});var wot=s(Xle);Kwo=r(wot,"reformer"),wot.forEach(t),Zwo=r($we," \u2014 "),hN=n($we,"A",{href:!0});var Aot=s(hN);eAo=r(Aot,"ReformerForSequenceClassification"),Aot.forEach(t),oAo=r($we," (Reformer model)"),$we.forEach(t),rAo=i(L),z1=n(L,"LI",{});var Iwe=s(z1);zle=n(Iwe,"STRONG",{});var yot=s(zle);tAo=r(yot,"rembert"),yot.forEach(t),aAo=r(Iwe," \u2014 "),pN=n(Iwe,"A",{href:!0});var Lot=s(pN);nAo=r(Lot,"RemBertForSequenceClassification"),Lot.forEach(t),sAo=r(Iwe," (RemBERT model)"),Iwe.forEach(t),lAo=i(L),Q1=n(L,"LI",{});var qwe=s(Q1);Qle=n(qwe,"STRONG",{});var xot=s(Qle);iAo=r(xot,"roberta"),xot.forEach(t),dAo=r(qwe," \u2014 "),_N=n(qwe,"A",{href:!0});var kot=s(_N);cAo=r(kot,"RobertaForSequenceClassification"),kot.forEach(t),fAo=r(qwe," (RoBERTa model)"),qwe.forEach(t),mAo=i(L),W1=n(L,"LI",{});var Nwe=s(W1);Wle=n(Nwe,"STRONG",{});var Sot=s(Wle);gAo=r(Sot,"roformer"),Sot.forEach(t),hAo=r(Nwe," \u2014 "),uN=n(Nwe,"A",{href:!0});var Rot=s(uN);pAo=r(Rot,"RoFormerForSequenceClassification"),Rot.forEach(t),_Ao=r(Nwe," (RoFormer model)"),Nwe.forEach(t),uAo=i(L),H1=n(L,"LI",{});var jwe=s(H1);Hle=n(jwe,"STRONG",{});var Bot=s(Hle);bAo=r(Bot,"squeezebert"),Bot.forEach(t),vAo=r(jwe," \u2014 "),bN=n(jwe,"A",{href:!0});var Pot=s(bN);FAo=r(Pot,"SqueezeBertForSequenceClassification"),Pot.forEach(t),TAo=r(jwe," (SqueezeBERT model)"),jwe.forEach(t),MAo=i(L),U1=n(L,"LI",{});var Dwe=s(U1);Ule=n(Dwe,"STRONG",{});var $ot=s(Ule);EAo=r($ot,"tapas"),$ot.forEach(t),CAo=r(Dwe," \u2014 "),vN=n(Dwe,"A",{href:!0});var Iot=s(vN);wAo=r(Iot,"TapasForSequenceClassification"),Iot.forEach(t),AAo=r(Dwe," (TAPAS model)"),Dwe.forEach(t),yAo=i(L),J1=n(L,"LI",{});var Gwe=s(J1);Jle=n(Gwe,"STRONG",{});var qot=s(Jle);LAo=r(qot,"tapex"),qot.forEach(t),xAo=r(Gwe," \u2014 "),FN=n(Gwe,"A",{href:!0});var Not=s(FN);kAo=r(Not,"BartForSequenceClassification"),Not.forEach(t),SAo=r(Gwe," (TAPEX model)"),Gwe.forEach(t),RAo=i(L),Y1=n(L,"LI",{});var Owe=s(Y1);Yle=n(Owe,"STRONG",{});var jot=s(Yle);BAo=r(jot,"transfo-xl"),jot.forEach(t),PAo=r(Owe," \u2014 "),TN=n(Owe,"A",{href:!0});var Dot=s(TN);$Ao=r(Dot,"TransfoXLForSequenceClassification"),Dot.forEach(t),IAo=r(Owe," (Transformer-XL model)"),Owe.forEach(t),qAo=i(L),K1=n(L,"LI",{});var Vwe=s(K1);Kle=n(Vwe,"STRONG",{});var Got=s(Kle);NAo=r(Got,"xlm"),Got.forEach(t),jAo=r(Vwe," \u2014 "),MN=n(Vwe,"A",{href:!0});var Oot=s(MN);DAo=r(Oot,"XLMForSequenceClassification"),Oot.forEach(t),GAo=r(Vwe," (XLM model)"),Vwe.forEach(t),OAo=i(L),Z1=n(L,"LI",{});var Xwe=s(Z1);Zle=n(Xwe,"STRONG",{});var Vot=s(Zle);VAo=r(Vot,"xlm-roberta"),Vot.forEach(t),XAo=r(Xwe," \u2014 "),EN=n(Xwe,"A",{href:!0});var Xot=s(EN);zAo=r(Xot,"XLMRobertaForSequenceClassification"),Xot.forEach(t),QAo=r(Xwe," (XLM-RoBERTa model)"),Xwe.forEach(t),WAo=i(L),eb=n(L,"LI",{});var zwe=s(eb);eie=n(zwe,"STRONG",{});var zot=s(eie);HAo=r(zot,"xlm-roberta-xl"),zot.forEach(t),UAo=r(zwe," \u2014 "),CN=n(zwe,"A",{href:!0});var Qot=s(CN);JAo=r(Qot,"XLMRobertaXLForSequenceClassification"),Qot.forEach(t),YAo=r(zwe," (XLM-RoBERTa-XL model)"),zwe.forEach(t),KAo=i(L),ob=n(L,"LI",{});var Qwe=s(ob);oie=n(Qwe,"STRONG",{});var Wot=s(oie);ZAo=r(Wot,"xlnet"),Wot.forEach(t),eyo=r(Qwe," \u2014 "),wN=n(Qwe,"A",{href:!0});var Hot=s(wN);oyo=r(Hot,"XLNetForSequenceClassification"),Hot.forEach(t),ryo=r(Qwe," (XLNet model)"),Qwe.forEach(t),tyo=i(L),rb=n(L,"LI",{});var Wwe=s(rb);rie=n(Wwe,"STRONG",{});var Uot=s(rie);ayo=r(Uot,"yoso"),Uot.forEach(t),nyo=r(Wwe," \u2014 "),AN=n(Wwe,"A",{href:!0});var Jot=s(AN);syo=r(Jot,"YosoForSequenceClassification"),Jot.forEach(t),lyo=r(Wwe," (YOSO model)"),Wwe.forEach(t),L.forEach(t),iyo=i(zt),tb=n(zt,"P",{});var Hwe=s(tb);dyo=r(Hwe,"The model is set in evaluation mode by default using "),tie=n(Hwe,"CODE",{});var Yot=s(tie);cyo=r(Yot,"model.eval()"),Yot.forEach(t),fyo=r(Hwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aie=n(Hwe,"CODE",{});var Kot=s(aie);myo=r(Kot,"model.train()"),Kot.forEach(t),Hwe.forEach(t),gyo=i(zt),nie=n(zt,"P",{});var Zot=s(nie);hyo=r(Zot,"Examples:"),Zot.forEach(t),pyo=i(zt),m(U5.$$.fragment,zt),zt.forEach(t),tl.forEach(t),rBe=i(c),pd=n(c,"H2",{class:!0});var f$e=s(pd);ab=n(f$e,"A",{id:!0,class:!0,href:!0});var ert=s(ab);sie=n(ert,"SPAN",{});var ort=s(sie);m(J5.$$.fragment,ort),ort.forEach(t),ert.forEach(t),_yo=i(f$e),lie=n(f$e,"SPAN",{});var rrt=s(lie);uyo=r(rrt,"AutoModelForMultipleChoice"),rrt.forEach(t),f$e.forEach(t),tBe=i(c),rr=n(c,"DIV",{class:!0});var nl=s(rr);m(Y5.$$.fragment,nl),byo=i(nl),_d=n(nl,"P",{});var RU=s(_d);vyo=r(RU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yN=n(RU,"A",{href:!0});var trt=s(yN);Fyo=r(trt,"from_pretrained()"),trt.forEach(t),Tyo=r(RU," class method or the "),LN=n(RU,"A",{href:!0});var art=s(LN);Myo=r(art,"from_config()"),art.forEach(t),Eyo=r(RU,` class
method.`),RU.forEach(t),Cyo=i(nl),K5=n(nl,"P",{});var m$e=s(K5);wyo=r(m$e,"This class cannot be instantiated directly using "),iie=n(m$e,"CODE",{});var nrt=s(iie);Ayo=r(nrt,"__init__()"),nrt.forEach(t),yyo=r(m$e," (throws an error)."),m$e.forEach(t),Lyo=i(nl),Jr=n(nl,"DIV",{class:!0});var sl=s(Jr);m(Z5.$$.fragment,sl),xyo=i(sl),die=n(sl,"P",{});var srt=s(die);kyo=r(srt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),srt.forEach(t),Syo=i(sl),ud=n(sl,"P",{});var BU=s(ud);Ryo=r(BU,`Note:
Loading a model from its configuration file does `),cie=n(BU,"STRONG",{});var lrt=s(cie);Byo=r(lrt,"not"),lrt.forEach(t),Pyo=r(BU,` load the model weights. It only affects the
model\u2019s configuration. Use `),xN=n(BU,"A",{href:!0});var irt=s(xN);$yo=r(irt,"from_pretrained()"),irt.forEach(t),Iyo=r(BU," to load the model weights."),BU.forEach(t),qyo=i(sl),fie=n(sl,"P",{});var drt=s(fie);Nyo=r(drt,"Examples:"),drt.forEach(t),jyo=i(sl),m(e3.$$.fragment,sl),sl.forEach(t),Dyo=i(nl),Ve=n(nl,"DIV",{class:!0});var Qt=s(Ve);m(o3.$$.fragment,Qt),Gyo=i(Qt),mie=n(Qt,"P",{});var crt=s(mie);Oyo=r(crt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),crt.forEach(t),Vyo=i(Qt),Ja=n(Qt,"P",{});var qE=s(Ja);Xyo=r(qE,"The model class to instantiate is selected based on the "),gie=n(qE,"CODE",{});var frt=s(gie);zyo=r(frt,"model_type"),frt.forEach(t),Qyo=r(qE,` property of the config object (either
passed as an argument or loaded from `),hie=n(qE,"CODE",{});var mrt=s(hie);Wyo=r(mrt,"pretrained_model_name_or_path"),mrt.forEach(t),Hyo=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pie=n(qE,"CODE",{});var grt=s(pie);Uyo=r(grt,"pretrained_model_name_or_path"),grt.forEach(t),Jyo=r(qE,":"),qE.forEach(t),Yyo=i(Qt),G=n(Qt,"UL",{});var O=s(G);nb=n(O,"LI",{});var Uwe=s(nb);_ie=n(Uwe,"STRONG",{});var hrt=s(_ie);Kyo=r(hrt,"albert"),hrt.forEach(t),Zyo=r(Uwe," \u2014 "),kN=n(Uwe,"A",{href:!0});var prt=s(kN);eLo=r(prt,"AlbertForMultipleChoice"),prt.forEach(t),oLo=r(Uwe," (ALBERT model)"),Uwe.forEach(t),rLo=i(O),sb=n(O,"LI",{});var Jwe=s(sb);uie=n(Jwe,"STRONG",{});var _rt=s(uie);tLo=r(_rt,"bert"),_rt.forEach(t),aLo=r(Jwe," \u2014 "),SN=n(Jwe,"A",{href:!0});var urt=s(SN);nLo=r(urt,"BertForMultipleChoice"),urt.forEach(t),sLo=r(Jwe," (BERT model)"),Jwe.forEach(t),lLo=i(O),lb=n(O,"LI",{});var Ywe=s(lb);bie=n(Ywe,"STRONG",{});var brt=s(bie);iLo=r(brt,"big_bird"),brt.forEach(t),dLo=r(Ywe," \u2014 "),RN=n(Ywe,"A",{href:!0});var vrt=s(RN);cLo=r(vrt,"BigBirdForMultipleChoice"),vrt.forEach(t),fLo=r(Ywe," (BigBird model)"),Ywe.forEach(t),mLo=i(O),ib=n(O,"LI",{});var Kwe=s(ib);vie=n(Kwe,"STRONG",{});var Frt=s(vie);gLo=r(Frt,"camembert"),Frt.forEach(t),hLo=r(Kwe," \u2014 "),BN=n(Kwe,"A",{href:!0});var Trt=s(BN);pLo=r(Trt,"CamembertForMultipleChoice"),Trt.forEach(t),_Lo=r(Kwe," (CamemBERT model)"),Kwe.forEach(t),uLo=i(O),db=n(O,"LI",{});var Zwe=s(db);Fie=n(Zwe,"STRONG",{});var Mrt=s(Fie);bLo=r(Mrt,"canine"),Mrt.forEach(t),vLo=r(Zwe," \u2014 "),PN=n(Zwe,"A",{href:!0});var Ert=s(PN);FLo=r(Ert,"CanineForMultipleChoice"),Ert.forEach(t),TLo=r(Zwe," (Canine model)"),Zwe.forEach(t),MLo=i(O),cb=n(O,"LI",{});var eAe=s(cb);Tie=n(eAe,"STRONG",{});var Crt=s(Tie);ELo=r(Crt,"convbert"),Crt.forEach(t),CLo=r(eAe," \u2014 "),$N=n(eAe,"A",{href:!0});var wrt=s($N);wLo=r(wrt,"ConvBertForMultipleChoice"),wrt.forEach(t),ALo=r(eAe," (ConvBERT model)"),eAe.forEach(t),yLo=i(O),fb=n(O,"LI",{});var oAe=s(fb);Mie=n(oAe,"STRONG",{});var Art=s(Mie);LLo=r(Art,"data2vec-text"),Art.forEach(t),xLo=r(oAe," \u2014 "),IN=n(oAe,"A",{href:!0});var yrt=s(IN);kLo=r(yrt,"Data2VecTextForMultipleChoice"),yrt.forEach(t),SLo=r(oAe," (Data2VecText model)"),oAe.forEach(t),RLo=i(O),mb=n(O,"LI",{});var rAe=s(mb);Eie=n(rAe,"STRONG",{});var Lrt=s(Eie);BLo=r(Lrt,"distilbert"),Lrt.forEach(t),PLo=r(rAe," \u2014 "),qN=n(rAe,"A",{href:!0});var xrt=s(qN);$Lo=r(xrt,"DistilBertForMultipleChoice"),xrt.forEach(t),ILo=r(rAe," (DistilBERT model)"),rAe.forEach(t),qLo=i(O),gb=n(O,"LI",{});var tAe=s(gb);Cie=n(tAe,"STRONG",{});var krt=s(Cie);NLo=r(krt,"electra"),krt.forEach(t),jLo=r(tAe," \u2014 "),NN=n(tAe,"A",{href:!0});var Srt=s(NN);DLo=r(Srt,"ElectraForMultipleChoice"),Srt.forEach(t),GLo=r(tAe," (ELECTRA model)"),tAe.forEach(t),OLo=i(O),hb=n(O,"LI",{});var aAe=s(hb);wie=n(aAe,"STRONG",{});var Rrt=s(wie);VLo=r(Rrt,"flaubert"),Rrt.forEach(t),XLo=r(aAe," \u2014 "),jN=n(aAe,"A",{href:!0});var Brt=s(jN);zLo=r(Brt,"FlaubertForMultipleChoice"),Brt.forEach(t),QLo=r(aAe," (FlauBERT model)"),aAe.forEach(t),WLo=i(O),pb=n(O,"LI",{});var nAe=s(pb);Aie=n(nAe,"STRONG",{});var Prt=s(Aie);HLo=r(Prt,"fnet"),Prt.forEach(t),ULo=r(nAe," \u2014 "),DN=n(nAe,"A",{href:!0});var $rt=s(DN);JLo=r($rt,"FNetForMultipleChoice"),$rt.forEach(t),YLo=r(nAe," (FNet model)"),nAe.forEach(t),KLo=i(O),_b=n(O,"LI",{});var sAe=s(_b);yie=n(sAe,"STRONG",{});var Irt=s(yie);ZLo=r(Irt,"funnel"),Irt.forEach(t),e8o=r(sAe," \u2014 "),GN=n(sAe,"A",{href:!0});var qrt=s(GN);o8o=r(qrt,"FunnelForMultipleChoice"),qrt.forEach(t),r8o=r(sAe," (Funnel Transformer model)"),sAe.forEach(t),t8o=i(O),ub=n(O,"LI",{});var lAe=s(ub);Lie=n(lAe,"STRONG",{});var Nrt=s(Lie);a8o=r(Nrt,"ibert"),Nrt.forEach(t),n8o=r(lAe," \u2014 "),ON=n(lAe,"A",{href:!0});var jrt=s(ON);s8o=r(jrt,"IBertForMultipleChoice"),jrt.forEach(t),l8o=r(lAe," (I-BERT model)"),lAe.forEach(t),i8o=i(O),bb=n(O,"LI",{});var iAe=s(bb);xie=n(iAe,"STRONG",{});var Drt=s(xie);d8o=r(Drt,"longformer"),Drt.forEach(t),c8o=r(iAe," \u2014 "),VN=n(iAe,"A",{href:!0});var Grt=s(VN);f8o=r(Grt,"LongformerForMultipleChoice"),Grt.forEach(t),m8o=r(iAe," (Longformer model)"),iAe.forEach(t),g8o=i(O),vb=n(O,"LI",{});var dAe=s(vb);kie=n(dAe,"STRONG",{});var Ort=s(kie);h8o=r(Ort,"megatron-bert"),Ort.forEach(t),p8o=r(dAe," \u2014 "),XN=n(dAe,"A",{href:!0});var Vrt=s(XN);_8o=r(Vrt,"MegatronBertForMultipleChoice"),Vrt.forEach(t),u8o=r(dAe," (MegatronBert model)"),dAe.forEach(t),b8o=i(O),Fb=n(O,"LI",{});var cAe=s(Fb);Sie=n(cAe,"STRONG",{});var Xrt=s(Sie);v8o=r(Xrt,"mobilebert"),Xrt.forEach(t),F8o=r(cAe," \u2014 "),zN=n(cAe,"A",{href:!0});var zrt=s(zN);T8o=r(zrt,"MobileBertForMultipleChoice"),zrt.forEach(t),M8o=r(cAe," (MobileBERT model)"),cAe.forEach(t),E8o=i(O),Tb=n(O,"LI",{});var fAe=s(Tb);Rie=n(fAe,"STRONG",{});var Qrt=s(Rie);C8o=r(Qrt,"mpnet"),Qrt.forEach(t),w8o=r(fAe," \u2014 "),QN=n(fAe,"A",{href:!0});var Wrt=s(QN);A8o=r(Wrt,"MPNetForMultipleChoice"),Wrt.forEach(t),y8o=r(fAe," (MPNet model)"),fAe.forEach(t),L8o=i(O),Mb=n(O,"LI",{});var mAe=s(Mb);Bie=n(mAe,"STRONG",{});var Hrt=s(Bie);x8o=r(Hrt,"nystromformer"),Hrt.forEach(t),k8o=r(mAe," \u2014 "),WN=n(mAe,"A",{href:!0});var Urt=s(WN);S8o=r(Urt,"NystromformerForMultipleChoice"),Urt.forEach(t),R8o=r(mAe," (Nystromformer model)"),mAe.forEach(t),B8o=i(O),Eb=n(O,"LI",{});var gAe=s(Eb);Pie=n(gAe,"STRONG",{});var Jrt=s(Pie);P8o=r(Jrt,"qdqbert"),Jrt.forEach(t),$8o=r(gAe," \u2014 "),HN=n(gAe,"A",{href:!0});var Yrt=s(HN);I8o=r(Yrt,"QDQBertForMultipleChoice"),Yrt.forEach(t),q8o=r(gAe," (QDQBert model)"),gAe.forEach(t),N8o=i(O),Cb=n(O,"LI",{});var hAe=s(Cb);$ie=n(hAe,"STRONG",{});var Krt=s($ie);j8o=r(Krt,"rembert"),Krt.forEach(t),D8o=r(hAe," \u2014 "),UN=n(hAe,"A",{href:!0});var Zrt=s(UN);G8o=r(Zrt,"RemBertForMultipleChoice"),Zrt.forEach(t),O8o=r(hAe," (RemBERT model)"),hAe.forEach(t),V8o=i(O),wb=n(O,"LI",{});var pAe=s(wb);Iie=n(pAe,"STRONG",{});var ett=s(Iie);X8o=r(ett,"roberta"),ett.forEach(t),z8o=r(pAe," \u2014 "),JN=n(pAe,"A",{href:!0});var ott=s(JN);Q8o=r(ott,"RobertaForMultipleChoice"),ott.forEach(t),W8o=r(pAe," (RoBERTa model)"),pAe.forEach(t),H8o=i(O),Ab=n(O,"LI",{});var _Ae=s(Ab);qie=n(_Ae,"STRONG",{});var rtt=s(qie);U8o=r(rtt,"roformer"),rtt.forEach(t),J8o=r(_Ae," \u2014 "),YN=n(_Ae,"A",{href:!0});var ttt=s(YN);Y8o=r(ttt,"RoFormerForMultipleChoice"),ttt.forEach(t),K8o=r(_Ae," (RoFormer model)"),_Ae.forEach(t),Z8o=i(O),yb=n(O,"LI",{});var uAe=s(yb);Nie=n(uAe,"STRONG",{});var att=s(Nie);e9o=r(att,"squeezebert"),att.forEach(t),o9o=r(uAe," \u2014 "),KN=n(uAe,"A",{href:!0});var ntt=s(KN);r9o=r(ntt,"SqueezeBertForMultipleChoice"),ntt.forEach(t),t9o=r(uAe," (SqueezeBERT model)"),uAe.forEach(t),a9o=i(O),Lb=n(O,"LI",{});var bAe=s(Lb);jie=n(bAe,"STRONG",{});var stt=s(jie);n9o=r(stt,"xlm"),stt.forEach(t),s9o=r(bAe," \u2014 "),ZN=n(bAe,"A",{href:!0});var ltt=s(ZN);l9o=r(ltt,"XLMForMultipleChoice"),ltt.forEach(t),i9o=r(bAe," (XLM model)"),bAe.forEach(t),d9o=i(O),xb=n(O,"LI",{});var vAe=s(xb);Die=n(vAe,"STRONG",{});var itt=s(Die);c9o=r(itt,"xlm-roberta"),itt.forEach(t),f9o=r(vAe," \u2014 "),ej=n(vAe,"A",{href:!0});var dtt=s(ej);m9o=r(dtt,"XLMRobertaForMultipleChoice"),dtt.forEach(t),g9o=r(vAe," (XLM-RoBERTa model)"),vAe.forEach(t),h9o=i(O),kb=n(O,"LI",{});var FAe=s(kb);Gie=n(FAe,"STRONG",{});var ctt=s(Gie);p9o=r(ctt,"xlm-roberta-xl"),ctt.forEach(t),_9o=r(FAe," \u2014 "),oj=n(FAe,"A",{href:!0});var ftt=s(oj);u9o=r(ftt,"XLMRobertaXLForMultipleChoice"),ftt.forEach(t),b9o=r(FAe," (XLM-RoBERTa-XL model)"),FAe.forEach(t),v9o=i(O),Sb=n(O,"LI",{});var TAe=s(Sb);Oie=n(TAe,"STRONG",{});var mtt=s(Oie);F9o=r(mtt,"xlnet"),mtt.forEach(t),T9o=r(TAe," \u2014 "),rj=n(TAe,"A",{href:!0});var gtt=s(rj);M9o=r(gtt,"XLNetForMultipleChoice"),gtt.forEach(t),E9o=r(TAe," (XLNet model)"),TAe.forEach(t),C9o=i(O),Rb=n(O,"LI",{});var MAe=s(Rb);Vie=n(MAe,"STRONG",{});var htt=s(Vie);w9o=r(htt,"yoso"),htt.forEach(t),A9o=r(MAe," \u2014 "),tj=n(MAe,"A",{href:!0});var ptt=s(tj);y9o=r(ptt,"YosoForMultipleChoice"),ptt.forEach(t),L9o=r(MAe," (YOSO model)"),MAe.forEach(t),O.forEach(t),x9o=i(Qt),Bb=n(Qt,"P",{});var EAe=s(Bb);k9o=r(EAe,"The model is set in evaluation mode by default using "),Xie=n(EAe,"CODE",{});var _tt=s(Xie);S9o=r(_tt,"model.eval()"),_tt.forEach(t),R9o=r(EAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zie=n(EAe,"CODE",{});var utt=s(zie);B9o=r(utt,"model.train()"),utt.forEach(t),EAe.forEach(t),P9o=i(Qt),Qie=n(Qt,"P",{});var btt=s(Qie);$9o=r(btt,"Examples:"),btt.forEach(t),I9o=i(Qt),m(r3.$$.fragment,Qt),Qt.forEach(t),nl.forEach(t),aBe=i(c),bd=n(c,"H2",{class:!0});var g$e=s(bd);Pb=n(g$e,"A",{id:!0,class:!0,href:!0});var vtt=s(Pb);Wie=n(vtt,"SPAN",{});var Ftt=s(Wie);m(t3.$$.fragment,Ftt),Ftt.forEach(t),vtt.forEach(t),q9o=i(g$e),Hie=n(g$e,"SPAN",{});var Ttt=s(Hie);N9o=r(Ttt,"AutoModelForNextSentencePrediction"),Ttt.forEach(t),g$e.forEach(t),nBe=i(c),tr=n(c,"DIV",{class:!0});var ll=s(tr);m(a3.$$.fragment,ll),j9o=i(ll),vd=n(ll,"P",{});var PU=s(vd);D9o=r(PU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aj=n(PU,"A",{href:!0});var Mtt=s(aj);G9o=r(Mtt,"from_pretrained()"),Mtt.forEach(t),O9o=r(PU," class method or the "),nj=n(PU,"A",{href:!0});var Ett=s(nj);V9o=r(Ett,"from_config()"),Ett.forEach(t),X9o=r(PU,` class
method.`),PU.forEach(t),z9o=i(ll),n3=n(ll,"P",{});var h$e=s(n3);Q9o=r(h$e,"This class cannot be instantiated directly using "),Uie=n(h$e,"CODE",{});var Ctt=s(Uie);W9o=r(Ctt,"__init__()"),Ctt.forEach(t),H9o=r(h$e," (throws an error)."),h$e.forEach(t),U9o=i(ll),Yr=n(ll,"DIV",{class:!0});var il=s(Yr);m(s3.$$.fragment,il),J9o=i(il),Jie=n(il,"P",{});var wtt=s(Jie);Y9o=r(wtt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wtt.forEach(t),K9o=i(il),Fd=n(il,"P",{});var $U=s(Fd);Z9o=r($U,`Note:
Loading a model from its configuration file does `),Yie=n($U,"STRONG",{});var Att=s(Yie);exo=r(Att,"not"),Att.forEach(t),oxo=r($U,` load the model weights. It only affects the
model\u2019s configuration. Use `),sj=n($U,"A",{href:!0});var ytt=s(sj);rxo=r(ytt,"from_pretrained()"),ytt.forEach(t),txo=r($U," to load the model weights."),$U.forEach(t),axo=i(il),Kie=n(il,"P",{});var Ltt=s(Kie);nxo=r(Ltt,"Examples:"),Ltt.forEach(t),sxo=i(il),m(l3.$$.fragment,il),il.forEach(t),lxo=i(ll),Xe=n(ll,"DIV",{class:!0});var Wt=s(Xe);m(i3.$$.fragment,Wt),ixo=i(Wt),Zie=n(Wt,"P",{});var xtt=s(Zie);dxo=r(xtt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xtt.forEach(t),cxo=i(Wt),Ya=n(Wt,"P",{});var NE=s(Ya);fxo=r(NE,"The model class to instantiate is selected based on the "),ede=n(NE,"CODE",{});var ktt=s(ede);mxo=r(ktt,"model_type"),ktt.forEach(t),gxo=r(NE,` property of the config object (either
passed as an argument or loaded from `),ode=n(NE,"CODE",{});var Stt=s(ode);hxo=r(Stt,"pretrained_model_name_or_path"),Stt.forEach(t),pxo=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rde=n(NE,"CODE",{});var Rtt=s(rde);_xo=r(Rtt,"pretrained_model_name_or_path"),Rtt.forEach(t),uxo=r(NE,":"),NE.forEach(t),bxo=i(Wt),da=n(Wt,"UL",{});var dl=s(da);$b=n(dl,"LI",{});var CAe=s($b);tde=n(CAe,"STRONG",{});var Btt=s(tde);vxo=r(Btt,"bert"),Btt.forEach(t),Fxo=r(CAe," \u2014 "),lj=n(CAe,"A",{href:!0});var Ptt=s(lj);Txo=r(Ptt,"BertForNextSentencePrediction"),Ptt.forEach(t),Mxo=r(CAe," (BERT model)"),CAe.forEach(t),Exo=i(dl),Ib=n(dl,"LI",{});var wAe=s(Ib);ade=n(wAe,"STRONG",{});var $tt=s(ade);Cxo=r($tt,"fnet"),$tt.forEach(t),wxo=r(wAe," \u2014 "),ij=n(wAe,"A",{href:!0});var Itt=s(ij);Axo=r(Itt,"FNetForNextSentencePrediction"),Itt.forEach(t),yxo=r(wAe," (FNet model)"),wAe.forEach(t),Lxo=i(dl),qb=n(dl,"LI",{});var AAe=s(qb);nde=n(AAe,"STRONG",{});var qtt=s(nde);xxo=r(qtt,"megatron-bert"),qtt.forEach(t),kxo=r(AAe," \u2014 "),dj=n(AAe,"A",{href:!0});var Ntt=s(dj);Sxo=r(Ntt,"MegatronBertForNextSentencePrediction"),Ntt.forEach(t),Rxo=r(AAe," (MegatronBert model)"),AAe.forEach(t),Bxo=i(dl),Nb=n(dl,"LI",{});var yAe=s(Nb);sde=n(yAe,"STRONG",{});var jtt=s(sde);Pxo=r(jtt,"mobilebert"),jtt.forEach(t),$xo=r(yAe," \u2014 "),cj=n(yAe,"A",{href:!0});var Dtt=s(cj);Ixo=r(Dtt,"MobileBertForNextSentencePrediction"),Dtt.forEach(t),qxo=r(yAe," (MobileBERT model)"),yAe.forEach(t),Nxo=i(dl),jb=n(dl,"LI",{});var LAe=s(jb);lde=n(LAe,"STRONG",{});var Gtt=s(lde);jxo=r(Gtt,"qdqbert"),Gtt.forEach(t),Dxo=r(LAe," \u2014 "),fj=n(LAe,"A",{href:!0});var Ott=s(fj);Gxo=r(Ott,"QDQBertForNextSentencePrediction"),Ott.forEach(t),Oxo=r(LAe," (QDQBert model)"),LAe.forEach(t),dl.forEach(t),Vxo=i(Wt),Db=n(Wt,"P",{});var xAe=s(Db);Xxo=r(xAe,"The model is set in evaluation mode by default using "),ide=n(xAe,"CODE",{});var Vtt=s(ide);zxo=r(Vtt,"model.eval()"),Vtt.forEach(t),Qxo=r(xAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dde=n(xAe,"CODE",{});var Xtt=s(dde);Wxo=r(Xtt,"model.train()"),Xtt.forEach(t),xAe.forEach(t),Hxo=i(Wt),cde=n(Wt,"P",{});var ztt=s(cde);Uxo=r(ztt,"Examples:"),ztt.forEach(t),Jxo=i(Wt),m(d3.$$.fragment,Wt),Wt.forEach(t),ll.forEach(t),sBe=i(c),Td=n(c,"H2",{class:!0});var p$e=s(Td);Gb=n(p$e,"A",{id:!0,class:!0,href:!0});var Qtt=s(Gb);fde=n(Qtt,"SPAN",{});var Wtt=s(fde);m(c3.$$.fragment,Wtt),Wtt.forEach(t),Qtt.forEach(t),Yxo=i(p$e),mde=n(p$e,"SPAN",{});var Htt=s(mde);Kxo=r(Htt,"AutoModelForTokenClassification"),Htt.forEach(t),p$e.forEach(t),lBe=i(c),ar=n(c,"DIV",{class:!0});var cl=s(ar);m(f3.$$.fragment,cl),Zxo=i(cl),Md=n(cl,"P",{});var IU=s(Md);eko=r(IU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mj=n(IU,"A",{href:!0});var Utt=s(mj);oko=r(Utt,"from_pretrained()"),Utt.forEach(t),rko=r(IU," class method or the "),gj=n(IU,"A",{href:!0});var Jtt=s(gj);tko=r(Jtt,"from_config()"),Jtt.forEach(t),ako=r(IU,` class
method.`),IU.forEach(t),nko=i(cl),m3=n(cl,"P",{});var _$e=s(m3);sko=r(_$e,"This class cannot be instantiated directly using "),gde=n(_$e,"CODE",{});var Ytt=s(gde);lko=r(Ytt,"__init__()"),Ytt.forEach(t),iko=r(_$e," (throws an error)."),_$e.forEach(t),dko=i(cl),Kr=n(cl,"DIV",{class:!0});var fl=s(Kr);m(g3.$$.fragment,fl),cko=i(fl),hde=n(fl,"P",{});var Ktt=s(hde);fko=r(Ktt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ktt.forEach(t),mko=i(fl),Ed=n(fl,"P",{});var qU=s(Ed);gko=r(qU,`Note:
Loading a model from its configuration file does `),pde=n(qU,"STRONG",{});var Ztt=s(pde);hko=r(Ztt,"not"),Ztt.forEach(t),pko=r(qU,` load the model weights. It only affects the
model\u2019s configuration. Use `),hj=n(qU,"A",{href:!0});var eat=s(hj);_ko=r(eat,"from_pretrained()"),eat.forEach(t),uko=r(qU," to load the model weights."),qU.forEach(t),bko=i(fl),_de=n(fl,"P",{});var oat=s(_de);vko=r(oat,"Examples:"),oat.forEach(t),Fko=i(fl),m(h3.$$.fragment,fl),fl.forEach(t),Tko=i(cl),ze=n(cl,"DIV",{class:!0});var Ht=s(ze);m(p3.$$.fragment,Ht),Mko=i(Ht),ude=n(Ht,"P",{});var rat=s(ude);Eko=r(rat,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rat.forEach(t),Cko=i(Ht),Ka=n(Ht,"P",{});var jE=s(Ka);wko=r(jE,"The model class to instantiate is selected based on the "),bde=n(jE,"CODE",{});var tat=s(bde);Ako=r(tat,"model_type"),tat.forEach(t),yko=r(jE,` property of the config object (either
passed as an argument or loaded from `),vde=n(jE,"CODE",{});var aat=s(vde);Lko=r(aat,"pretrained_model_name_or_path"),aat.forEach(t),xko=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=n(jE,"CODE",{});var nat=s(Fde);kko=r(nat,"pretrained_model_name_or_path"),nat.forEach(t),Sko=r(jE,":"),jE.forEach(t),Rko=i(Ht),j=n(Ht,"UL",{});var D=s(j);Ob=n(D,"LI",{});var kAe=s(Ob);Tde=n(kAe,"STRONG",{});var sat=s(Tde);Bko=r(sat,"albert"),sat.forEach(t),Pko=r(kAe," \u2014 "),pj=n(kAe,"A",{href:!0});var lat=s(pj);$ko=r(lat,"AlbertForTokenClassification"),lat.forEach(t),Iko=r(kAe," (ALBERT model)"),kAe.forEach(t),qko=i(D),Vb=n(D,"LI",{});var SAe=s(Vb);Mde=n(SAe,"STRONG",{});var iat=s(Mde);Nko=r(iat,"bert"),iat.forEach(t),jko=r(SAe," \u2014 "),_j=n(SAe,"A",{href:!0});var dat=s(_j);Dko=r(dat,"BertForTokenClassification"),dat.forEach(t),Gko=r(SAe," (BERT model)"),SAe.forEach(t),Oko=i(D),Xb=n(D,"LI",{});var RAe=s(Xb);Ede=n(RAe,"STRONG",{});var cat=s(Ede);Vko=r(cat,"big_bird"),cat.forEach(t),Xko=r(RAe," \u2014 "),uj=n(RAe,"A",{href:!0});var fat=s(uj);zko=r(fat,"BigBirdForTokenClassification"),fat.forEach(t),Qko=r(RAe," (BigBird model)"),RAe.forEach(t),Wko=i(D),zb=n(D,"LI",{});var BAe=s(zb);Cde=n(BAe,"STRONG",{});var mat=s(Cde);Hko=r(mat,"camembert"),mat.forEach(t),Uko=r(BAe," \u2014 "),bj=n(BAe,"A",{href:!0});var gat=s(bj);Jko=r(gat,"CamembertForTokenClassification"),gat.forEach(t),Yko=r(BAe," (CamemBERT model)"),BAe.forEach(t),Kko=i(D),Qb=n(D,"LI",{});var PAe=s(Qb);wde=n(PAe,"STRONG",{});var hat=s(wde);Zko=r(hat,"canine"),hat.forEach(t),eSo=r(PAe," \u2014 "),vj=n(PAe,"A",{href:!0});var pat=s(vj);oSo=r(pat,"CanineForTokenClassification"),pat.forEach(t),rSo=r(PAe," (Canine model)"),PAe.forEach(t),tSo=i(D),Wb=n(D,"LI",{});var $Ae=s(Wb);Ade=n($Ae,"STRONG",{});var _at=s(Ade);aSo=r(_at,"convbert"),_at.forEach(t),nSo=r($Ae," \u2014 "),Fj=n($Ae,"A",{href:!0});var uat=s(Fj);sSo=r(uat,"ConvBertForTokenClassification"),uat.forEach(t),lSo=r($Ae," (ConvBERT model)"),$Ae.forEach(t),iSo=i(D),Hb=n(D,"LI",{});var IAe=s(Hb);yde=n(IAe,"STRONG",{});var bat=s(yde);dSo=r(bat,"data2vec-text"),bat.forEach(t),cSo=r(IAe," \u2014 "),Tj=n(IAe,"A",{href:!0});var vat=s(Tj);fSo=r(vat,"Data2VecTextForTokenClassification"),vat.forEach(t),mSo=r(IAe," (Data2VecText model)"),IAe.forEach(t),gSo=i(D),Ub=n(D,"LI",{});var qAe=s(Ub);Lde=n(qAe,"STRONG",{});var Fat=s(Lde);hSo=r(Fat,"deberta"),Fat.forEach(t),pSo=r(qAe," \u2014 "),Mj=n(qAe,"A",{href:!0});var Tat=s(Mj);_So=r(Tat,"DebertaForTokenClassification"),Tat.forEach(t),uSo=r(qAe," (DeBERTa model)"),qAe.forEach(t),bSo=i(D),Jb=n(D,"LI",{});var NAe=s(Jb);xde=n(NAe,"STRONG",{});var Mat=s(xde);vSo=r(Mat,"deberta-v2"),Mat.forEach(t),FSo=r(NAe," \u2014 "),Ej=n(NAe,"A",{href:!0});var Eat=s(Ej);TSo=r(Eat,"DebertaV2ForTokenClassification"),Eat.forEach(t),MSo=r(NAe," (DeBERTa-v2 model)"),NAe.forEach(t),ESo=i(D),Yb=n(D,"LI",{});var jAe=s(Yb);kde=n(jAe,"STRONG",{});var Cat=s(kde);CSo=r(Cat,"distilbert"),Cat.forEach(t),wSo=r(jAe," \u2014 "),Cj=n(jAe,"A",{href:!0});var wat=s(Cj);ASo=r(wat,"DistilBertForTokenClassification"),wat.forEach(t),ySo=r(jAe," (DistilBERT model)"),jAe.forEach(t),LSo=i(D),Kb=n(D,"LI",{});var DAe=s(Kb);Sde=n(DAe,"STRONG",{});var Aat=s(Sde);xSo=r(Aat,"electra"),Aat.forEach(t),kSo=r(DAe," \u2014 "),wj=n(DAe,"A",{href:!0});var yat=s(wj);SSo=r(yat,"ElectraForTokenClassification"),yat.forEach(t),RSo=r(DAe," (ELECTRA model)"),DAe.forEach(t),BSo=i(D),Zb=n(D,"LI",{});var GAe=s(Zb);Rde=n(GAe,"STRONG",{});var Lat=s(Rde);PSo=r(Lat,"flaubert"),Lat.forEach(t),$So=r(GAe," \u2014 "),Aj=n(GAe,"A",{href:!0});var xat=s(Aj);ISo=r(xat,"FlaubertForTokenClassification"),xat.forEach(t),qSo=r(GAe," (FlauBERT model)"),GAe.forEach(t),NSo=i(D),e2=n(D,"LI",{});var OAe=s(e2);Bde=n(OAe,"STRONG",{});var kat=s(Bde);jSo=r(kat,"fnet"),kat.forEach(t),DSo=r(OAe," \u2014 "),yj=n(OAe,"A",{href:!0});var Sat=s(yj);GSo=r(Sat,"FNetForTokenClassification"),Sat.forEach(t),OSo=r(OAe," (FNet model)"),OAe.forEach(t),VSo=i(D),o2=n(D,"LI",{});var VAe=s(o2);Pde=n(VAe,"STRONG",{});var Rat=s(Pde);XSo=r(Rat,"funnel"),Rat.forEach(t),zSo=r(VAe," \u2014 "),Lj=n(VAe,"A",{href:!0});var Bat=s(Lj);QSo=r(Bat,"FunnelForTokenClassification"),Bat.forEach(t),WSo=r(VAe," (Funnel Transformer model)"),VAe.forEach(t),HSo=i(D),r2=n(D,"LI",{});var XAe=s(r2);$de=n(XAe,"STRONG",{});var Pat=s($de);USo=r(Pat,"gpt2"),Pat.forEach(t),JSo=r(XAe," \u2014 "),xj=n(XAe,"A",{href:!0});var $at=s(xj);YSo=r($at,"GPT2ForTokenClassification"),$at.forEach(t),KSo=r(XAe," (OpenAI GPT-2 model)"),XAe.forEach(t),ZSo=i(D),t2=n(D,"LI",{});var zAe=s(t2);Ide=n(zAe,"STRONG",{});var Iat=s(Ide);eRo=r(Iat,"ibert"),Iat.forEach(t),oRo=r(zAe," \u2014 "),kj=n(zAe,"A",{href:!0});var qat=s(kj);rRo=r(qat,"IBertForTokenClassification"),qat.forEach(t),tRo=r(zAe," (I-BERT model)"),zAe.forEach(t),aRo=i(D),a2=n(D,"LI",{});var QAe=s(a2);qde=n(QAe,"STRONG",{});var Nat=s(qde);nRo=r(Nat,"layoutlm"),Nat.forEach(t),sRo=r(QAe," \u2014 "),Sj=n(QAe,"A",{href:!0});var jat=s(Sj);lRo=r(jat,"LayoutLMForTokenClassification"),jat.forEach(t),iRo=r(QAe," (LayoutLM model)"),QAe.forEach(t),dRo=i(D),n2=n(D,"LI",{});var WAe=s(n2);Nde=n(WAe,"STRONG",{});var Dat=s(Nde);cRo=r(Dat,"layoutlmv2"),Dat.forEach(t),fRo=r(WAe," \u2014 "),Rj=n(WAe,"A",{href:!0});var Gat=s(Rj);mRo=r(Gat,"LayoutLMv2ForTokenClassification"),Gat.forEach(t),gRo=r(WAe," (LayoutLMv2 model)"),WAe.forEach(t),hRo=i(D),s2=n(D,"LI",{});var HAe=s(s2);jde=n(HAe,"STRONG",{});var Oat=s(jde);pRo=r(Oat,"longformer"),Oat.forEach(t),_Ro=r(HAe," \u2014 "),Bj=n(HAe,"A",{href:!0});var Vat=s(Bj);uRo=r(Vat,"LongformerForTokenClassification"),Vat.forEach(t),bRo=r(HAe," (Longformer model)"),HAe.forEach(t),vRo=i(D),l2=n(D,"LI",{});var UAe=s(l2);Dde=n(UAe,"STRONG",{});var Xat=s(Dde);FRo=r(Xat,"megatron-bert"),Xat.forEach(t),TRo=r(UAe," \u2014 "),Pj=n(UAe,"A",{href:!0});var zat=s(Pj);MRo=r(zat,"MegatronBertForTokenClassification"),zat.forEach(t),ERo=r(UAe," (MegatronBert model)"),UAe.forEach(t),CRo=i(D),i2=n(D,"LI",{});var JAe=s(i2);Gde=n(JAe,"STRONG",{});var Qat=s(Gde);wRo=r(Qat,"mobilebert"),Qat.forEach(t),ARo=r(JAe," \u2014 "),$j=n(JAe,"A",{href:!0});var Wat=s($j);yRo=r(Wat,"MobileBertForTokenClassification"),Wat.forEach(t),LRo=r(JAe," (MobileBERT model)"),JAe.forEach(t),xRo=i(D),d2=n(D,"LI",{});var YAe=s(d2);Ode=n(YAe,"STRONG",{});var Hat=s(Ode);kRo=r(Hat,"mpnet"),Hat.forEach(t),SRo=r(YAe," \u2014 "),Ij=n(YAe,"A",{href:!0});var Uat=s(Ij);RRo=r(Uat,"MPNetForTokenClassification"),Uat.forEach(t),BRo=r(YAe," (MPNet model)"),YAe.forEach(t),PRo=i(D),c2=n(D,"LI",{});var KAe=s(c2);Vde=n(KAe,"STRONG",{});var Jat=s(Vde);$Ro=r(Jat,"nystromformer"),Jat.forEach(t),IRo=r(KAe," \u2014 "),qj=n(KAe,"A",{href:!0});var Yat=s(qj);qRo=r(Yat,"NystromformerForTokenClassification"),Yat.forEach(t),NRo=r(KAe," (Nystromformer model)"),KAe.forEach(t),jRo=i(D),f2=n(D,"LI",{});var ZAe=s(f2);Xde=n(ZAe,"STRONG",{});var Kat=s(Xde);DRo=r(Kat,"qdqbert"),Kat.forEach(t),GRo=r(ZAe," \u2014 "),Nj=n(ZAe,"A",{href:!0});var Zat=s(Nj);ORo=r(Zat,"QDQBertForTokenClassification"),Zat.forEach(t),VRo=r(ZAe," (QDQBert model)"),ZAe.forEach(t),XRo=i(D),m2=n(D,"LI",{});var eye=s(m2);zde=n(eye,"STRONG",{});var ent=s(zde);zRo=r(ent,"rembert"),ent.forEach(t),QRo=r(eye," \u2014 "),jj=n(eye,"A",{href:!0});var ont=s(jj);WRo=r(ont,"RemBertForTokenClassification"),ont.forEach(t),HRo=r(eye," (RemBERT model)"),eye.forEach(t),URo=i(D),g2=n(D,"LI",{});var oye=s(g2);Qde=n(oye,"STRONG",{});var rnt=s(Qde);JRo=r(rnt,"roberta"),rnt.forEach(t),YRo=r(oye," \u2014 "),Dj=n(oye,"A",{href:!0});var tnt=s(Dj);KRo=r(tnt,"RobertaForTokenClassification"),tnt.forEach(t),ZRo=r(oye," (RoBERTa model)"),oye.forEach(t),eBo=i(D),h2=n(D,"LI",{});var rye=s(h2);Wde=n(rye,"STRONG",{});var ant=s(Wde);oBo=r(ant,"roformer"),ant.forEach(t),rBo=r(rye," \u2014 "),Gj=n(rye,"A",{href:!0});var nnt=s(Gj);tBo=r(nnt,"RoFormerForTokenClassification"),nnt.forEach(t),aBo=r(rye," (RoFormer model)"),rye.forEach(t),nBo=i(D),p2=n(D,"LI",{});var tye=s(p2);Hde=n(tye,"STRONG",{});var snt=s(Hde);sBo=r(snt,"squeezebert"),snt.forEach(t),lBo=r(tye," \u2014 "),Oj=n(tye,"A",{href:!0});var lnt=s(Oj);iBo=r(lnt,"SqueezeBertForTokenClassification"),lnt.forEach(t),dBo=r(tye," (SqueezeBERT model)"),tye.forEach(t),cBo=i(D),_2=n(D,"LI",{});var aye=s(_2);Ude=n(aye,"STRONG",{});var int=s(Ude);fBo=r(int,"xlm"),int.forEach(t),mBo=r(aye," \u2014 "),Vj=n(aye,"A",{href:!0});var dnt=s(Vj);gBo=r(dnt,"XLMForTokenClassification"),dnt.forEach(t),hBo=r(aye," (XLM model)"),aye.forEach(t),pBo=i(D),u2=n(D,"LI",{});var nye=s(u2);Jde=n(nye,"STRONG",{});var cnt=s(Jde);_Bo=r(cnt,"xlm-roberta"),cnt.forEach(t),uBo=r(nye," \u2014 "),Xj=n(nye,"A",{href:!0});var fnt=s(Xj);bBo=r(fnt,"XLMRobertaForTokenClassification"),fnt.forEach(t),vBo=r(nye," (XLM-RoBERTa model)"),nye.forEach(t),FBo=i(D),b2=n(D,"LI",{});var sye=s(b2);Yde=n(sye,"STRONG",{});var mnt=s(Yde);TBo=r(mnt,"xlm-roberta-xl"),mnt.forEach(t),MBo=r(sye," \u2014 "),zj=n(sye,"A",{href:!0});var gnt=s(zj);EBo=r(gnt,"XLMRobertaXLForTokenClassification"),gnt.forEach(t),CBo=r(sye," (XLM-RoBERTa-XL model)"),sye.forEach(t),wBo=i(D),v2=n(D,"LI",{});var lye=s(v2);Kde=n(lye,"STRONG",{});var hnt=s(Kde);ABo=r(hnt,"xlnet"),hnt.forEach(t),yBo=r(lye," \u2014 "),Qj=n(lye,"A",{href:!0});var pnt=s(Qj);LBo=r(pnt,"XLNetForTokenClassification"),pnt.forEach(t),xBo=r(lye," (XLNet model)"),lye.forEach(t),kBo=i(D),F2=n(D,"LI",{});var iye=s(F2);Zde=n(iye,"STRONG",{});var _nt=s(Zde);SBo=r(_nt,"yoso"),_nt.forEach(t),RBo=r(iye," \u2014 "),Wj=n(iye,"A",{href:!0});var unt=s(Wj);BBo=r(unt,"YosoForTokenClassification"),unt.forEach(t),PBo=r(iye," (YOSO model)"),iye.forEach(t),D.forEach(t),$Bo=i(Ht),T2=n(Ht,"P",{});var dye=s(T2);IBo=r(dye,"The model is set in evaluation mode by default using "),ece=n(dye,"CODE",{});var bnt=s(ece);qBo=r(bnt,"model.eval()"),bnt.forEach(t),NBo=r(dye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oce=n(dye,"CODE",{});var vnt=s(oce);jBo=r(vnt,"model.train()"),vnt.forEach(t),dye.forEach(t),DBo=i(Ht),rce=n(Ht,"P",{});var Fnt=s(rce);GBo=r(Fnt,"Examples:"),Fnt.forEach(t),OBo=i(Ht),m(_3.$$.fragment,Ht),Ht.forEach(t),cl.forEach(t),iBe=i(c),Cd=n(c,"H2",{class:!0});var u$e=s(Cd);M2=n(u$e,"A",{id:!0,class:!0,href:!0});var Tnt=s(M2);tce=n(Tnt,"SPAN",{});var Mnt=s(tce);m(u3.$$.fragment,Mnt),Mnt.forEach(t),Tnt.forEach(t),VBo=i(u$e),ace=n(u$e,"SPAN",{});var Ent=s(ace);XBo=r(Ent,"AutoModelForQuestionAnswering"),Ent.forEach(t),u$e.forEach(t),dBe=i(c),nr=n(c,"DIV",{class:!0});var ml=s(nr);m(b3.$$.fragment,ml),zBo=i(ml),wd=n(ml,"P",{});var NU=s(wd);QBo=r(NU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Hj=n(NU,"A",{href:!0});var Cnt=s(Hj);WBo=r(Cnt,"from_pretrained()"),Cnt.forEach(t),HBo=r(NU," class method or the "),Uj=n(NU,"A",{href:!0});var wnt=s(Uj);UBo=r(wnt,"from_config()"),wnt.forEach(t),JBo=r(NU,` class
method.`),NU.forEach(t),YBo=i(ml),v3=n(ml,"P",{});var b$e=s(v3);KBo=r(b$e,"This class cannot be instantiated directly using "),nce=n(b$e,"CODE",{});var Ant=s(nce);ZBo=r(Ant,"__init__()"),Ant.forEach(t),ePo=r(b$e," (throws an error)."),b$e.forEach(t),oPo=i(ml),Zr=n(ml,"DIV",{class:!0});var gl=s(Zr);m(F3.$$.fragment,gl),rPo=i(gl),sce=n(gl,"P",{});var ynt=s(sce);tPo=r(ynt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ynt.forEach(t),aPo=i(gl),Ad=n(gl,"P",{});var jU=s(Ad);nPo=r(jU,`Note:
Loading a model from its configuration file does `),lce=n(jU,"STRONG",{});var Lnt=s(lce);sPo=r(Lnt,"not"),Lnt.forEach(t),lPo=r(jU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jj=n(jU,"A",{href:!0});var xnt=s(Jj);iPo=r(xnt,"from_pretrained()"),xnt.forEach(t),dPo=r(jU," to load the model weights."),jU.forEach(t),cPo=i(gl),ice=n(gl,"P",{});var knt=s(ice);fPo=r(knt,"Examples:"),knt.forEach(t),mPo=i(gl),m(T3.$$.fragment,gl),gl.forEach(t),gPo=i(ml),Qe=n(ml,"DIV",{class:!0});var Ut=s(Qe);m(M3.$$.fragment,Ut),hPo=i(Ut),dce=n(Ut,"P",{});var Snt=s(dce);pPo=r(Snt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Snt.forEach(t),_Po=i(Ut),Za=n(Ut,"P",{});var DE=s(Za);uPo=r(DE,"The model class to instantiate is selected based on the "),cce=n(DE,"CODE",{});var Rnt=s(cce);bPo=r(Rnt,"model_type"),Rnt.forEach(t),vPo=r(DE,` property of the config object (either
passed as an argument or loaded from `),fce=n(DE,"CODE",{});var Bnt=s(fce);FPo=r(Bnt,"pretrained_model_name_or_path"),Bnt.forEach(t),TPo=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mce=n(DE,"CODE",{});var Pnt=s(mce);MPo=r(Pnt,"pretrained_model_name_or_path"),Pnt.forEach(t),EPo=r(DE,":"),DE.forEach(t),CPo=i(Ut),R=n(Ut,"UL",{});var P=s(R);E2=n(P,"LI",{});var cye=s(E2);gce=n(cye,"STRONG",{});var $nt=s(gce);wPo=r($nt,"albert"),$nt.forEach(t),APo=r(cye," \u2014 "),Yj=n(cye,"A",{href:!0});var Int=s(Yj);yPo=r(Int,"AlbertForQuestionAnswering"),Int.forEach(t),LPo=r(cye," (ALBERT model)"),cye.forEach(t),xPo=i(P),C2=n(P,"LI",{});var fye=s(C2);hce=n(fye,"STRONG",{});var qnt=s(hce);kPo=r(qnt,"bart"),qnt.forEach(t),SPo=r(fye," \u2014 "),Kj=n(fye,"A",{href:!0});var Nnt=s(Kj);RPo=r(Nnt,"BartForQuestionAnswering"),Nnt.forEach(t),BPo=r(fye," (BART model)"),fye.forEach(t),PPo=i(P),w2=n(P,"LI",{});var mye=s(w2);pce=n(mye,"STRONG",{});var jnt=s(pce);$Po=r(jnt,"bert"),jnt.forEach(t),IPo=r(mye," \u2014 "),Zj=n(mye,"A",{href:!0});var Dnt=s(Zj);qPo=r(Dnt,"BertForQuestionAnswering"),Dnt.forEach(t),NPo=r(mye," (BERT model)"),mye.forEach(t),jPo=i(P),A2=n(P,"LI",{});var gye=s(A2);_ce=n(gye,"STRONG",{});var Gnt=s(_ce);DPo=r(Gnt,"big_bird"),Gnt.forEach(t),GPo=r(gye," \u2014 "),eD=n(gye,"A",{href:!0});var Ont=s(eD);OPo=r(Ont,"BigBirdForQuestionAnswering"),Ont.forEach(t),VPo=r(gye," (BigBird model)"),gye.forEach(t),XPo=i(P),y2=n(P,"LI",{});var hye=s(y2);uce=n(hye,"STRONG",{});var Vnt=s(uce);zPo=r(Vnt,"bigbird_pegasus"),Vnt.forEach(t),QPo=r(hye," \u2014 "),oD=n(hye,"A",{href:!0});var Xnt=s(oD);WPo=r(Xnt,"BigBirdPegasusForQuestionAnswering"),Xnt.forEach(t),HPo=r(hye," (BigBirdPegasus model)"),hye.forEach(t),UPo=i(P),L2=n(P,"LI",{});var pye=s(L2);bce=n(pye,"STRONG",{});var znt=s(bce);JPo=r(znt,"camembert"),znt.forEach(t),YPo=r(pye," \u2014 "),rD=n(pye,"A",{href:!0});var Qnt=s(rD);KPo=r(Qnt,"CamembertForQuestionAnswering"),Qnt.forEach(t),ZPo=r(pye," (CamemBERT model)"),pye.forEach(t),e$o=i(P),x2=n(P,"LI",{});var _ye=s(x2);vce=n(_ye,"STRONG",{});var Wnt=s(vce);o$o=r(Wnt,"canine"),Wnt.forEach(t),r$o=r(_ye," \u2014 "),tD=n(_ye,"A",{href:!0});var Hnt=s(tD);t$o=r(Hnt,"CanineForQuestionAnswering"),Hnt.forEach(t),a$o=r(_ye," (Canine model)"),_ye.forEach(t),n$o=i(P),k2=n(P,"LI",{});var uye=s(k2);Fce=n(uye,"STRONG",{});var Unt=s(Fce);s$o=r(Unt,"convbert"),Unt.forEach(t),l$o=r(uye," \u2014 "),aD=n(uye,"A",{href:!0});var Jnt=s(aD);i$o=r(Jnt,"ConvBertForQuestionAnswering"),Jnt.forEach(t),d$o=r(uye," (ConvBERT model)"),uye.forEach(t),c$o=i(P),S2=n(P,"LI",{});var bye=s(S2);Tce=n(bye,"STRONG",{});var Ynt=s(Tce);f$o=r(Ynt,"data2vec-text"),Ynt.forEach(t),m$o=r(bye," \u2014 "),nD=n(bye,"A",{href:!0});var Knt=s(nD);g$o=r(Knt,"Data2VecTextForQuestionAnswering"),Knt.forEach(t),h$o=r(bye," (Data2VecText model)"),bye.forEach(t),p$o=i(P),R2=n(P,"LI",{});var vye=s(R2);Mce=n(vye,"STRONG",{});var Znt=s(Mce);_$o=r(Znt,"deberta"),Znt.forEach(t),u$o=r(vye," \u2014 "),sD=n(vye,"A",{href:!0});var est=s(sD);b$o=r(est,"DebertaForQuestionAnswering"),est.forEach(t),v$o=r(vye," (DeBERTa model)"),vye.forEach(t),F$o=i(P),B2=n(P,"LI",{});var Fye=s(B2);Ece=n(Fye,"STRONG",{});var ost=s(Ece);T$o=r(ost,"deberta-v2"),ost.forEach(t),M$o=r(Fye," \u2014 "),lD=n(Fye,"A",{href:!0});var rst=s(lD);E$o=r(rst,"DebertaV2ForQuestionAnswering"),rst.forEach(t),C$o=r(Fye," (DeBERTa-v2 model)"),Fye.forEach(t),w$o=i(P),P2=n(P,"LI",{});var Tye=s(P2);Cce=n(Tye,"STRONG",{});var tst=s(Cce);A$o=r(tst,"distilbert"),tst.forEach(t),y$o=r(Tye," \u2014 "),iD=n(Tye,"A",{href:!0});var ast=s(iD);L$o=r(ast,"DistilBertForQuestionAnswering"),ast.forEach(t),x$o=r(Tye," (DistilBERT model)"),Tye.forEach(t),k$o=i(P),$2=n(P,"LI",{});var Mye=s($2);wce=n(Mye,"STRONG",{});var nst=s(wce);S$o=r(nst,"electra"),nst.forEach(t),R$o=r(Mye," \u2014 "),dD=n(Mye,"A",{href:!0});var sst=s(dD);B$o=r(sst,"ElectraForQuestionAnswering"),sst.forEach(t),P$o=r(Mye," (ELECTRA model)"),Mye.forEach(t),$$o=i(P),I2=n(P,"LI",{});var Eye=s(I2);Ace=n(Eye,"STRONG",{});var lst=s(Ace);I$o=r(lst,"flaubert"),lst.forEach(t),q$o=r(Eye," \u2014 "),cD=n(Eye,"A",{href:!0});var ist=s(cD);N$o=r(ist,"FlaubertForQuestionAnsweringSimple"),ist.forEach(t),j$o=r(Eye," (FlauBERT model)"),Eye.forEach(t),D$o=i(P),q2=n(P,"LI",{});var Cye=s(q2);yce=n(Cye,"STRONG",{});var dst=s(yce);G$o=r(dst,"fnet"),dst.forEach(t),O$o=r(Cye," \u2014 "),fD=n(Cye,"A",{href:!0});var cst=s(fD);V$o=r(cst,"FNetForQuestionAnswering"),cst.forEach(t),X$o=r(Cye," (FNet model)"),Cye.forEach(t),z$o=i(P),N2=n(P,"LI",{});var wye=s(N2);Lce=n(wye,"STRONG",{});var fst=s(Lce);Q$o=r(fst,"funnel"),fst.forEach(t),W$o=r(wye," \u2014 "),mD=n(wye,"A",{href:!0});var mst=s(mD);H$o=r(mst,"FunnelForQuestionAnswering"),mst.forEach(t),U$o=r(wye," (Funnel Transformer model)"),wye.forEach(t),J$o=i(P),j2=n(P,"LI",{});var Aye=s(j2);xce=n(Aye,"STRONG",{});var gst=s(xce);Y$o=r(gst,"gptj"),gst.forEach(t),K$o=r(Aye," \u2014 "),gD=n(Aye,"A",{href:!0});var hst=s(gD);Z$o=r(hst,"GPTJForQuestionAnswering"),hst.forEach(t),eIo=r(Aye," (GPT-J model)"),Aye.forEach(t),oIo=i(P),D2=n(P,"LI",{});var yye=s(D2);kce=n(yye,"STRONG",{});var pst=s(kce);rIo=r(pst,"ibert"),pst.forEach(t),tIo=r(yye," \u2014 "),hD=n(yye,"A",{href:!0});var _st=s(hD);aIo=r(_st,"IBertForQuestionAnswering"),_st.forEach(t),nIo=r(yye," (I-BERT model)"),yye.forEach(t),sIo=i(P),G2=n(P,"LI",{});var Lye=s(G2);Sce=n(Lye,"STRONG",{});var ust=s(Sce);lIo=r(ust,"layoutlmv2"),ust.forEach(t),iIo=r(Lye," \u2014 "),pD=n(Lye,"A",{href:!0});var bst=s(pD);dIo=r(bst,"LayoutLMv2ForQuestionAnswering"),bst.forEach(t),cIo=r(Lye," (LayoutLMv2 model)"),Lye.forEach(t),fIo=i(P),O2=n(P,"LI",{});var xye=s(O2);Rce=n(xye,"STRONG",{});var vst=s(Rce);mIo=r(vst,"led"),vst.forEach(t),gIo=r(xye," \u2014 "),_D=n(xye,"A",{href:!0});var Fst=s(_D);hIo=r(Fst,"LEDForQuestionAnswering"),Fst.forEach(t),pIo=r(xye," (LED model)"),xye.forEach(t),_Io=i(P),V2=n(P,"LI",{});var kye=s(V2);Bce=n(kye,"STRONG",{});var Tst=s(Bce);uIo=r(Tst,"longformer"),Tst.forEach(t),bIo=r(kye," \u2014 "),uD=n(kye,"A",{href:!0});var Mst=s(uD);vIo=r(Mst,"LongformerForQuestionAnswering"),Mst.forEach(t),FIo=r(kye," (Longformer model)"),kye.forEach(t),TIo=i(P),X2=n(P,"LI",{});var Sye=s(X2);Pce=n(Sye,"STRONG",{});var Est=s(Pce);MIo=r(Est,"lxmert"),Est.forEach(t),EIo=r(Sye," \u2014 "),bD=n(Sye,"A",{href:!0});var Cst=s(bD);CIo=r(Cst,"LxmertForQuestionAnswering"),Cst.forEach(t),wIo=r(Sye," (LXMERT model)"),Sye.forEach(t),AIo=i(P),z2=n(P,"LI",{});var Rye=s(z2);$ce=n(Rye,"STRONG",{});var wst=s($ce);yIo=r(wst,"mbart"),wst.forEach(t),LIo=r(Rye," \u2014 "),vD=n(Rye,"A",{href:!0});var Ast=s(vD);xIo=r(Ast,"MBartForQuestionAnswering"),Ast.forEach(t),kIo=r(Rye," (mBART model)"),Rye.forEach(t),SIo=i(P),Q2=n(P,"LI",{});var Bye=s(Q2);Ice=n(Bye,"STRONG",{});var yst=s(Ice);RIo=r(yst,"megatron-bert"),yst.forEach(t),BIo=r(Bye," \u2014 "),FD=n(Bye,"A",{href:!0});var Lst=s(FD);PIo=r(Lst,"MegatronBertForQuestionAnswering"),Lst.forEach(t),$Io=r(Bye," (MegatronBert model)"),Bye.forEach(t),IIo=i(P),W2=n(P,"LI",{});var Pye=s(W2);qce=n(Pye,"STRONG",{});var xst=s(qce);qIo=r(xst,"mobilebert"),xst.forEach(t),NIo=r(Pye," \u2014 "),TD=n(Pye,"A",{href:!0});var kst=s(TD);jIo=r(kst,"MobileBertForQuestionAnswering"),kst.forEach(t),DIo=r(Pye," (MobileBERT model)"),Pye.forEach(t),GIo=i(P),H2=n(P,"LI",{});var $ye=s(H2);Nce=n($ye,"STRONG",{});var Sst=s(Nce);OIo=r(Sst,"mpnet"),Sst.forEach(t),VIo=r($ye," \u2014 "),MD=n($ye,"A",{href:!0});var Rst=s(MD);XIo=r(Rst,"MPNetForQuestionAnswering"),Rst.forEach(t),zIo=r($ye," (MPNet model)"),$ye.forEach(t),QIo=i(P),U2=n(P,"LI",{});var Iye=s(U2);jce=n(Iye,"STRONG",{});var Bst=s(jce);WIo=r(Bst,"nystromformer"),Bst.forEach(t),HIo=r(Iye," \u2014 "),ED=n(Iye,"A",{href:!0});var Pst=s(ED);UIo=r(Pst,"NystromformerForQuestionAnswering"),Pst.forEach(t),JIo=r(Iye," (Nystromformer model)"),Iye.forEach(t),YIo=i(P),J2=n(P,"LI",{});var qye=s(J2);Dce=n(qye,"STRONG",{});var $st=s(Dce);KIo=r($st,"qdqbert"),$st.forEach(t),ZIo=r(qye," \u2014 "),CD=n(qye,"A",{href:!0});var Ist=s(CD);eqo=r(Ist,"QDQBertForQuestionAnswering"),Ist.forEach(t),oqo=r(qye," (QDQBert model)"),qye.forEach(t),rqo=i(P),Y2=n(P,"LI",{});var Nye=s(Y2);Gce=n(Nye,"STRONG",{});var qst=s(Gce);tqo=r(qst,"reformer"),qst.forEach(t),aqo=r(Nye," \u2014 "),wD=n(Nye,"A",{href:!0});var Nst=s(wD);nqo=r(Nst,"ReformerForQuestionAnswering"),Nst.forEach(t),sqo=r(Nye," (Reformer model)"),Nye.forEach(t),lqo=i(P),K2=n(P,"LI",{});var jye=s(K2);Oce=n(jye,"STRONG",{});var jst=s(Oce);iqo=r(jst,"rembert"),jst.forEach(t),dqo=r(jye," \u2014 "),AD=n(jye,"A",{href:!0});var Dst=s(AD);cqo=r(Dst,"RemBertForQuestionAnswering"),Dst.forEach(t),fqo=r(jye," (RemBERT model)"),jye.forEach(t),mqo=i(P),Z2=n(P,"LI",{});var Dye=s(Z2);Vce=n(Dye,"STRONG",{});var Gst=s(Vce);gqo=r(Gst,"roberta"),Gst.forEach(t),hqo=r(Dye," \u2014 "),yD=n(Dye,"A",{href:!0});var Ost=s(yD);pqo=r(Ost,"RobertaForQuestionAnswering"),Ost.forEach(t),_qo=r(Dye," (RoBERTa model)"),Dye.forEach(t),uqo=i(P),ev=n(P,"LI",{});var Gye=s(ev);Xce=n(Gye,"STRONG",{});var Vst=s(Xce);bqo=r(Vst,"roformer"),Vst.forEach(t),vqo=r(Gye," \u2014 "),LD=n(Gye,"A",{href:!0});var Xst=s(LD);Fqo=r(Xst,"RoFormerForQuestionAnswering"),Xst.forEach(t),Tqo=r(Gye," (RoFormer model)"),Gye.forEach(t),Mqo=i(P),ov=n(P,"LI",{});var Oye=s(ov);zce=n(Oye,"STRONG",{});var zst=s(zce);Eqo=r(zst,"splinter"),zst.forEach(t),Cqo=r(Oye," \u2014 "),xD=n(Oye,"A",{href:!0});var Qst=s(xD);wqo=r(Qst,"SplinterForQuestionAnswering"),Qst.forEach(t),Aqo=r(Oye," (Splinter model)"),Oye.forEach(t),yqo=i(P),rv=n(P,"LI",{});var Vye=s(rv);Qce=n(Vye,"STRONG",{});var Wst=s(Qce);Lqo=r(Wst,"squeezebert"),Wst.forEach(t),xqo=r(Vye," \u2014 "),kD=n(Vye,"A",{href:!0});var Hst=s(kD);kqo=r(Hst,"SqueezeBertForQuestionAnswering"),Hst.forEach(t),Sqo=r(Vye," (SqueezeBERT model)"),Vye.forEach(t),Rqo=i(P),tv=n(P,"LI",{});var Xye=s(tv);Wce=n(Xye,"STRONG",{});var Ust=s(Wce);Bqo=r(Ust,"xlm"),Ust.forEach(t),Pqo=r(Xye," \u2014 "),SD=n(Xye,"A",{href:!0});var Jst=s(SD);$qo=r(Jst,"XLMForQuestionAnsweringSimple"),Jst.forEach(t),Iqo=r(Xye," (XLM model)"),Xye.forEach(t),qqo=i(P),av=n(P,"LI",{});var zye=s(av);Hce=n(zye,"STRONG",{});var Yst=s(Hce);Nqo=r(Yst,"xlm-roberta"),Yst.forEach(t),jqo=r(zye," \u2014 "),RD=n(zye,"A",{href:!0});var Kst=s(RD);Dqo=r(Kst,"XLMRobertaForQuestionAnswering"),Kst.forEach(t),Gqo=r(zye," (XLM-RoBERTa model)"),zye.forEach(t),Oqo=i(P),nv=n(P,"LI",{});var Qye=s(nv);Uce=n(Qye,"STRONG",{});var Zst=s(Uce);Vqo=r(Zst,"xlm-roberta-xl"),Zst.forEach(t),Xqo=r(Qye," \u2014 "),BD=n(Qye,"A",{href:!0});var elt=s(BD);zqo=r(elt,"XLMRobertaXLForQuestionAnswering"),elt.forEach(t),Qqo=r(Qye," (XLM-RoBERTa-XL model)"),Qye.forEach(t),Wqo=i(P),sv=n(P,"LI",{});var Wye=s(sv);Jce=n(Wye,"STRONG",{});var olt=s(Jce);Hqo=r(olt,"xlnet"),olt.forEach(t),Uqo=r(Wye," \u2014 "),PD=n(Wye,"A",{href:!0});var rlt=s(PD);Jqo=r(rlt,"XLNetForQuestionAnsweringSimple"),rlt.forEach(t),Yqo=r(Wye," (XLNet model)"),Wye.forEach(t),Kqo=i(P),lv=n(P,"LI",{});var Hye=s(lv);Yce=n(Hye,"STRONG",{});var tlt=s(Yce);Zqo=r(tlt,"yoso"),tlt.forEach(t),eNo=r(Hye," \u2014 "),$D=n(Hye,"A",{href:!0});var alt=s($D);oNo=r(alt,"YosoForQuestionAnswering"),alt.forEach(t),rNo=r(Hye," (YOSO model)"),Hye.forEach(t),P.forEach(t),tNo=i(Ut),iv=n(Ut,"P",{});var Uye=s(iv);aNo=r(Uye,"The model is set in evaluation mode by default using "),Kce=n(Uye,"CODE",{});var nlt=s(Kce);nNo=r(nlt,"model.eval()"),nlt.forEach(t),sNo=r(Uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zce=n(Uye,"CODE",{});var slt=s(Zce);lNo=r(slt,"model.train()"),slt.forEach(t),Uye.forEach(t),iNo=i(Ut),efe=n(Ut,"P",{});var llt=s(efe);dNo=r(llt,"Examples:"),llt.forEach(t),cNo=i(Ut),m(E3.$$.fragment,Ut),Ut.forEach(t),ml.forEach(t),cBe=i(c),yd=n(c,"H2",{class:!0});var v$e=s(yd);dv=n(v$e,"A",{id:!0,class:!0,href:!0});var ilt=s(dv);ofe=n(ilt,"SPAN",{});var dlt=s(ofe);m(C3.$$.fragment,dlt),dlt.forEach(t),ilt.forEach(t),fNo=i(v$e),rfe=n(v$e,"SPAN",{});var clt=s(rfe);mNo=r(clt,"AutoModelForTableQuestionAnswering"),clt.forEach(t),v$e.forEach(t),fBe=i(c),sr=n(c,"DIV",{class:!0});var hl=s(sr);m(w3.$$.fragment,hl),gNo=i(hl),Ld=n(hl,"P",{});var DU=s(Ld);hNo=r(DU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ID=n(DU,"A",{href:!0});var flt=s(ID);pNo=r(flt,"from_pretrained()"),flt.forEach(t),_No=r(DU," class method or the "),qD=n(DU,"A",{href:!0});var mlt=s(qD);uNo=r(mlt,"from_config()"),mlt.forEach(t),bNo=r(DU,` class
method.`),DU.forEach(t),vNo=i(hl),A3=n(hl,"P",{});var F$e=s(A3);FNo=r(F$e,"This class cannot be instantiated directly using "),tfe=n(F$e,"CODE",{});var glt=s(tfe);TNo=r(glt,"__init__()"),glt.forEach(t),MNo=r(F$e," (throws an error)."),F$e.forEach(t),ENo=i(hl),et=n(hl,"DIV",{class:!0});var pl=s(et);m(y3.$$.fragment,pl),CNo=i(pl),afe=n(pl,"P",{});var hlt=s(afe);wNo=r(hlt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hlt.forEach(t),ANo=i(pl),xd=n(pl,"P",{});var GU=s(xd);yNo=r(GU,`Note:
Loading a model from its configuration file does `),nfe=n(GU,"STRONG",{});var plt=s(nfe);LNo=r(plt,"not"),plt.forEach(t),xNo=r(GU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ND=n(GU,"A",{href:!0});var _lt=s(ND);kNo=r(_lt,"from_pretrained()"),_lt.forEach(t),SNo=r(GU," to load the model weights."),GU.forEach(t),RNo=i(pl),sfe=n(pl,"P",{});var ult=s(sfe);BNo=r(ult,"Examples:"),ult.forEach(t),PNo=i(pl),m(L3.$$.fragment,pl),pl.forEach(t),$No=i(hl),We=n(hl,"DIV",{class:!0});var Jt=s(We);m(x3.$$.fragment,Jt),INo=i(Jt),lfe=n(Jt,"P",{});var blt=s(lfe);qNo=r(blt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),blt.forEach(t),NNo=i(Jt),en=n(Jt,"P",{});var GE=s(en);jNo=r(GE,"The model class to instantiate is selected based on the "),ife=n(GE,"CODE",{});var vlt=s(ife);DNo=r(vlt,"model_type"),vlt.forEach(t),GNo=r(GE,` property of the config object (either
passed as an argument or loaded from `),dfe=n(GE,"CODE",{});var Flt=s(dfe);ONo=r(Flt,"pretrained_model_name_or_path"),Flt.forEach(t),VNo=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cfe=n(GE,"CODE",{});var Tlt=s(cfe);XNo=r(Tlt,"pretrained_model_name_or_path"),Tlt.forEach(t),zNo=r(GE,":"),GE.forEach(t),QNo=i(Jt),ffe=n(Jt,"UL",{});var Mlt=s(ffe);cv=n(Mlt,"LI",{});var Jye=s(cv);mfe=n(Jye,"STRONG",{});var Elt=s(mfe);WNo=r(Elt,"tapas"),Elt.forEach(t),HNo=r(Jye," \u2014 "),jD=n(Jye,"A",{href:!0});var Clt=s(jD);UNo=r(Clt,"TapasForQuestionAnswering"),Clt.forEach(t),JNo=r(Jye," (TAPAS model)"),Jye.forEach(t),Mlt.forEach(t),YNo=i(Jt),fv=n(Jt,"P",{});var Yye=s(fv);KNo=r(Yye,"The model is set in evaluation mode by default using "),gfe=n(Yye,"CODE",{});var wlt=s(gfe);ZNo=r(wlt,"model.eval()"),wlt.forEach(t),ejo=r(Yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hfe=n(Yye,"CODE",{});var Alt=s(hfe);ojo=r(Alt,"model.train()"),Alt.forEach(t),Yye.forEach(t),rjo=i(Jt),pfe=n(Jt,"P",{});var ylt=s(pfe);tjo=r(ylt,"Examples:"),ylt.forEach(t),ajo=i(Jt),m(k3.$$.fragment,Jt),Jt.forEach(t),hl.forEach(t),mBe=i(c),kd=n(c,"H2",{class:!0});var T$e=s(kd);mv=n(T$e,"A",{id:!0,class:!0,href:!0});var Llt=s(mv);_fe=n(Llt,"SPAN",{});var xlt=s(_fe);m(S3.$$.fragment,xlt),xlt.forEach(t),Llt.forEach(t),njo=i(T$e),ufe=n(T$e,"SPAN",{});var klt=s(ufe);sjo=r(klt,"AutoModelForImageClassification"),klt.forEach(t),T$e.forEach(t),gBe=i(c),lr=n(c,"DIV",{class:!0});var _l=s(lr);m(R3.$$.fragment,_l),ljo=i(_l),Sd=n(_l,"P",{});var OU=s(Sd);ijo=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),DD=n(OU,"A",{href:!0});var Slt=s(DD);djo=r(Slt,"from_pretrained()"),Slt.forEach(t),cjo=r(OU," class method or the "),GD=n(OU,"A",{href:!0});var Rlt=s(GD);fjo=r(Rlt,"from_config()"),Rlt.forEach(t),mjo=r(OU,` class
method.`),OU.forEach(t),gjo=i(_l),B3=n(_l,"P",{});var M$e=s(B3);hjo=r(M$e,"This class cannot be instantiated directly using "),bfe=n(M$e,"CODE",{});var Blt=s(bfe);pjo=r(Blt,"__init__()"),Blt.forEach(t),_jo=r(M$e," (throws an error)."),M$e.forEach(t),ujo=i(_l),ot=n(_l,"DIV",{class:!0});var ul=s(ot);m(P3.$$.fragment,ul),bjo=i(ul),vfe=n(ul,"P",{});var Plt=s(vfe);vjo=r(Plt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Plt.forEach(t),Fjo=i(ul),Rd=n(ul,"P",{});var VU=s(Rd);Tjo=r(VU,`Note:
Loading a model from its configuration file does `),Ffe=n(VU,"STRONG",{});var $lt=s(Ffe);Mjo=r($lt,"not"),$lt.forEach(t),Ejo=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),OD=n(VU,"A",{href:!0});var Ilt=s(OD);Cjo=r(Ilt,"from_pretrained()"),Ilt.forEach(t),wjo=r(VU," to load the model weights."),VU.forEach(t),Ajo=i(ul),Tfe=n(ul,"P",{});var qlt=s(Tfe);yjo=r(qlt,"Examples:"),qlt.forEach(t),Ljo=i(ul),m($3.$$.fragment,ul),ul.forEach(t),xjo=i(_l),He=n(_l,"DIV",{class:!0});var Yt=s(He);m(I3.$$.fragment,Yt),kjo=i(Yt),Mfe=n(Yt,"P",{});var Nlt=s(Mfe);Sjo=r(Nlt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Nlt.forEach(t),Rjo=i(Yt),on=n(Yt,"P",{});var OE=s(on);Bjo=r(OE,"The model class to instantiate is selected based on the "),Efe=n(OE,"CODE",{});var jlt=s(Efe);Pjo=r(jlt,"model_type"),jlt.forEach(t),$jo=r(OE,` property of the config object (either
passed as an argument or loaded from `),Cfe=n(OE,"CODE",{});var Dlt=s(Cfe);Ijo=r(Dlt,"pretrained_model_name_or_path"),Dlt.forEach(t),qjo=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=n(OE,"CODE",{});var Glt=s(wfe);Njo=r(Glt,"pretrained_model_name_or_path"),Glt.forEach(t),jjo=r(OE,":"),OE.forEach(t),Djo=i(Yt),de=n(Yt,"UL",{});var ge=s(de);gv=n(ge,"LI",{});var Kye=s(gv);Afe=n(Kye,"STRONG",{});var Olt=s(Afe);Gjo=r(Olt,"beit"),Olt.forEach(t),Ojo=r(Kye," \u2014 "),VD=n(Kye,"A",{href:!0});var Vlt=s(VD);Vjo=r(Vlt,"BeitForImageClassification"),Vlt.forEach(t),Xjo=r(Kye," (BEiT model)"),Kye.forEach(t),zjo=i(ge),hv=n(ge,"LI",{});var Zye=s(hv);yfe=n(Zye,"STRONG",{});var Xlt=s(yfe);Qjo=r(Xlt,"convnext"),Xlt.forEach(t),Wjo=r(Zye," \u2014 "),XD=n(Zye,"A",{href:!0});var zlt=s(XD);Hjo=r(zlt,"ConvNextForImageClassification"),zlt.forEach(t),Ujo=r(Zye," (ConvNext model)"),Zye.forEach(t),Jjo=i(ge),pv=n(ge,"LI",{});var eLe=s(pv);Lfe=n(eLe,"STRONG",{});var Qlt=s(Lfe);Yjo=r(Qlt,"data2vec-vision"),Qlt.forEach(t),Kjo=r(eLe," \u2014 "),zD=n(eLe,"A",{href:!0});var Wlt=s(zD);Zjo=r(Wlt,"Data2VecVisionForImageClassification"),Wlt.forEach(t),eDo=r(eLe," (Data2VecVision model)"),eLe.forEach(t),oDo=i(ge),Gs=n(ge,"LI",{});var b9=s(Gs);xfe=n(b9,"STRONG",{});var Hlt=s(xfe);rDo=r(Hlt,"deit"),Hlt.forEach(t),tDo=r(b9," \u2014 "),QD=n(b9,"A",{href:!0});var Ult=s(QD);aDo=r(Ult,"DeiTForImageClassification"),Ult.forEach(t),nDo=r(b9," or "),WD=n(b9,"A",{href:!0});var Jlt=s(WD);sDo=r(Jlt,"DeiTForImageClassificationWithTeacher"),Jlt.forEach(t),lDo=r(b9," (DeiT model)"),b9.forEach(t),iDo=i(ge),_v=n(ge,"LI",{});var oLe=s(_v);kfe=n(oLe,"STRONG",{});var Ylt=s(kfe);dDo=r(Ylt,"imagegpt"),Ylt.forEach(t),cDo=r(oLe," \u2014 "),HD=n(oLe,"A",{href:!0});var Klt=s(HD);fDo=r(Klt,"ImageGPTForImageClassification"),Klt.forEach(t),mDo=r(oLe," (ImageGPT model)"),oLe.forEach(t),gDo=i(ge),ma=n(ge,"LI",{});var $f=s(ma);Sfe=n($f,"STRONG",{});var Zlt=s(Sfe);hDo=r(Zlt,"perceiver"),Zlt.forEach(t),pDo=r($f," \u2014 "),UD=n($f,"A",{href:!0});var eit=s(UD);_Do=r(eit,"PerceiverForImageClassificationLearned"),eit.forEach(t),uDo=r($f," or "),JD=n($f,"A",{href:!0});var oit=s(JD);bDo=r(oit,"PerceiverForImageClassificationFourier"),oit.forEach(t),vDo=r($f," or "),YD=n($f,"A",{href:!0});var rit=s(YD);FDo=r(rit,"PerceiverForImageClassificationConvProcessing"),rit.forEach(t),TDo=r($f," (Perceiver model)"),$f.forEach(t),MDo=i(ge),uv=n(ge,"LI",{});var rLe=s(uv);Rfe=n(rLe,"STRONG",{});var tit=s(Rfe);EDo=r(tit,"poolformer"),tit.forEach(t),CDo=r(rLe," \u2014 "),KD=n(rLe,"A",{href:!0});var ait=s(KD);wDo=r(ait,"PoolFormerForImageClassification"),ait.forEach(t),ADo=r(rLe," (PoolFormer model)"),rLe.forEach(t),yDo=i(ge),bv=n(ge,"LI",{});var tLe=s(bv);Bfe=n(tLe,"STRONG",{});var nit=s(Bfe);LDo=r(nit,"regnet"),nit.forEach(t),xDo=r(tLe," \u2014 "),ZD=n(tLe,"A",{href:!0});var sit=s(ZD);kDo=r(sit,"RegNetForImageClassification"),sit.forEach(t),SDo=r(tLe," (RegNet model)"),tLe.forEach(t),RDo=i(ge),vv=n(ge,"LI",{});var aLe=s(vv);Pfe=n(aLe,"STRONG",{});var lit=s(Pfe);BDo=r(lit,"resnet"),lit.forEach(t),PDo=r(aLe," \u2014 "),eG=n(aLe,"A",{href:!0});var iit=s(eG);$Do=r(iit,"ResNetForImageClassification"),iit.forEach(t),IDo=r(aLe," (ResNet model)"),aLe.forEach(t),qDo=i(ge),Fv=n(ge,"LI",{});var nLe=s(Fv);$fe=n(nLe,"STRONG",{});var dit=s($fe);NDo=r(dit,"segformer"),dit.forEach(t),jDo=r(nLe," \u2014 "),oG=n(nLe,"A",{href:!0});var cit=s(oG);DDo=r(cit,"SegformerForImageClassification"),cit.forEach(t),GDo=r(nLe," (SegFormer model)"),nLe.forEach(t),ODo=i(ge),Tv=n(ge,"LI",{});var sLe=s(Tv);Ife=n(sLe,"STRONG",{});var fit=s(Ife);VDo=r(fit,"swin"),fit.forEach(t),XDo=r(sLe," \u2014 "),rG=n(sLe,"A",{href:!0});var mit=s(rG);zDo=r(mit,"SwinForImageClassification"),mit.forEach(t),QDo=r(sLe," (Swin model)"),sLe.forEach(t),WDo=i(ge),Mv=n(ge,"LI",{});var lLe=s(Mv);qfe=n(lLe,"STRONG",{});var git=s(qfe);HDo=r(git,"van"),git.forEach(t),UDo=r(lLe," \u2014 "),tG=n(lLe,"A",{href:!0});var hit=s(tG);JDo=r(hit,"VanForImageClassification"),hit.forEach(t),YDo=r(lLe," (VAN model)"),lLe.forEach(t),KDo=i(ge),Ev=n(ge,"LI",{});var iLe=s(Ev);Nfe=n(iLe,"STRONG",{});var pit=s(Nfe);ZDo=r(pit,"vit"),pit.forEach(t),eGo=r(iLe," \u2014 "),aG=n(iLe,"A",{href:!0});var _it=s(aG);oGo=r(_it,"ViTForImageClassification"),_it.forEach(t),rGo=r(iLe," (ViT model)"),iLe.forEach(t),ge.forEach(t),tGo=i(Yt),Cv=n(Yt,"P",{});var dLe=s(Cv);aGo=r(dLe,"The model is set in evaluation mode by default using "),jfe=n(dLe,"CODE",{});var uit=s(jfe);nGo=r(uit,"model.eval()"),uit.forEach(t),sGo=r(dLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dfe=n(dLe,"CODE",{});var bit=s(Dfe);lGo=r(bit,"model.train()"),bit.forEach(t),dLe.forEach(t),iGo=i(Yt),Gfe=n(Yt,"P",{});var vit=s(Gfe);dGo=r(vit,"Examples:"),vit.forEach(t),cGo=i(Yt),m(q3.$$.fragment,Yt),Yt.forEach(t),_l.forEach(t),hBe=i(c),Bd=n(c,"H2",{class:!0});var E$e=s(Bd);wv=n(E$e,"A",{id:!0,class:!0,href:!0});var Fit=s(wv);Ofe=n(Fit,"SPAN",{});var Tit=s(Ofe);m(N3.$$.fragment,Tit),Tit.forEach(t),Fit.forEach(t),fGo=i(E$e),Vfe=n(E$e,"SPAN",{});var Mit=s(Vfe);mGo=r(Mit,"AutoModelForVision2Seq"),Mit.forEach(t),E$e.forEach(t),pBe=i(c),ir=n(c,"DIV",{class:!0});var bl=s(ir);m(j3.$$.fragment,bl),gGo=i(bl),Pd=n(bl,"P",{});var XU=s(Pd);hGo=r(XU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nG=n(XU,"A",{href:!0});var Eit=s(nG);pGo=r(Eit,"from_pretrained()"),Eit.forEach(t),_Go=r(XU," class method or the "),sG=n(XU,"A",{href:!0});var Cit=s(sG);uGo=r(Cit,"from_config()"),Cit.forEach(t),bGo=r(XU,` class
method.`),XU.forEach(t),vGo=i(bl),D3=n(bl,"P",{});var C$e=s(D3);FGo=r(C$e,"This class cannot be instantiated directly using "),Xfe=n(C$e,"CODE",{});var wit=s(Xfe);TGo=r(wit,"__init__()"),wit.forEach(t),MGo=r(C$e," (throws an error)."),C$e.forEach(t),EGo=i(bl),rt=n(bl,"DIV",{class:!0});var vl=s(rt);m(G3.$$.fragment,vl),CGo=i(vl),zfe=n(vl,"P",{});var Ait=s(zfe);wGo=r(Ait,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ait.forEach(t),AGo=i(vl),$d=n(vl,"P",{});var zU=s($d);yGo=r(zU,`Note:
Loading a model from its configuration file does `),Qfe=n(zU,"STRONG",{});var yit=s(Qfe);LGo=r(yit,"not"),yit.forEach(t),xGo=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),lG=n(zU,"A",{href:!0});var Lit=s(lG);kGo=r(Lit,"from_pretrained()"),Lit.forEach(t),SGo=r(zU," to load the model weights."),zU.forEach(t),RGo=i(vl),Wfe=n(vl,"P",{});var xit=s(Wfe);BGo=r(xit,"Examples:"),xit.forEach(t),PGo=i(vl),m(O3.$$.fragment,vl),vl.forEach(t),$Go=i(bl),Ue=n(bl,"DIV",{class:!0});var Kt=s(Ue);m(V3.$$.fragment,Kt),IGo=i(Kt),Hfe=n(Kt,"P",{});var kit=s(Hfe);qGo=r(kit,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kit.forEach(t),NGo=i(Kt),rn=n(Kt,"P",{});var VE=s(rn);jGo=r(VE,"The model class to instantiate is selected based on the "),Ufe=n(VE,"CODE",{});var Sit=s(Ufe);DGo=r(Sit,"model_type"),Sit.forEach(t),GGo=r(VE,` property of the config object (either
passed as an argument or loaded from `),Jfe=n(VE,"CODE",{});var Rit=s(Jfe);OGo=r(Rit,"pretrained_model_name_or_path"),Rit.forEach(t),VGo=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=n(VE,"CODE",{});var Bit=s(Yfe);XGo=r(Bit,"pretrained_model_name_or_path"),Bit.forEach(t),zGo=r(VE,":"),VE.forEach(t),QGo=i(Kt),Kfe=n(Kt,"UL",{});var Pit=s(Kfe);Av=n(Pit,"LI",{});var cLe=s(Av);Zfe=n(cLe,"STRONG",{});var $it=s(Zfe);WGo=r($it,"vision-encoder-decoder"),$it.forEach(t),HGo=r(cLe," \u2014 "),iG=n(cLe,"A",{href:!0});var Iit=s(iG);UGo=r(Iit,"VisionEncoderDecoderModel"),Iit.forEach(t),JGo=r(cLe," (Vision Encoder decoder model)"),cLe.forEach(t),Pit.forEach(t),YGo=i(Kt),yv=n(Kt,"P",{});var fLe=s(yv);KGo=r(fLe,"The model is set in evaluation mode by default using "),eme=n(fLe,"CODE",{});var qit=s(eme);ZGo=r(qit,"model.eval()"),qit.forEach(t),eOo=r(fLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=n(fLe,"CODE",{});var Nit=s(ome);oOo=r(Nit,"model.train()"),Nit.forEach(t),fLe.forEach(t),rOo=i(Kt),rme=n(Kt,"P",{});var jit=s(rme);tOo=r(jit,"Examples:"),jit.forEach(t),aOo=i(Kt),m(X3.$$.fragment,Kt),Kt.forEach(t),bl.forEach(t),_Be=i(c),Id=n(c,"H2",{class:!0});var w$e=s(Id);Lv=n(w$e,"A",{id:!0,class:!0,href:!0});var Dit=s(Lv);tme=n(Dit,"SPAN",{});var Git=s(tme);m(z3.$$.fragment,Git),Git.forEach(t),Dit.forEach(t),nOo=i(w$e),ame=n(w$e,"SPAN",{});var Oit=s(ame);sOo=r(Oit,"AutoModelForAudioClassification"),Oit.forEach(t),w$e.forEach(t),uBe=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);m(Q3.$$.fragment,Fl),lOo=i(Fl),qd=n(Fl,"P",{});var QU=s(qd);iOo=r(QU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),dG=n(QU,"A",{href:!0});var Vit=s(dG);dOo=r(Vit,"from_pretrained()"),Vit.forEach(t),cOo=r(QU," class method or the "),cG=n(QU,"A",{href:!0});var Xit=s(cG);fOo=r(Xit,"from_config()"),Xit.forEach(t),mOo=r(QU,` class
method.`),QU.forEach(t),gOo=i(Fl),W3=n(Fl,"P",{});var A$e=s(W3);hOo=r(A$e,"This class cannot be instantiated directly using "),nme=n(A$e,"CODE",{});var zit=s(nme);pOo=r(zit,"__init__()"),zit.forEach(t),_Oo=r(A$e," (throws an error)."),A$e.forEach(t),uOo=i(Fl),tt=n(Fl,"DIV",{class:!0});var Tl=s(tt);m(H3.$$.fragment,Tl),bOo=i(Tl),sme=n(Tl,"P",{});var Qit=s(sme);vOo=r(Qit,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Qit.forEach(t),FOo=i(Tl),Nd=n(Tl,"P",{});var WU=s(Nd);TOo=r(WU,`Note:
Loading a model from its configuration file does `),lme=n(WU,"STRONG",{});var Wit=s(lme);MOo=r(Wit,"not"),Wit.forEach(t),EOo=r(WU,` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=n(WU,"A",{href:!0});var Hit=s(fG);COo=r(Hit,"from_pretrained()"),Hit.forEach(t),wOo=r(WU," to load the model weights."),WU.forEach(t),AOo=i(Tl),ime=n(Tl,"P",{});var Uit=s(ime);yOo=r(Uit,"Examples:"),Uit.forEach(t),LOo=i(Tl),m(U3.$$.fragment,Tl),Tl.forEach(t),xOo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);m(J3.$$.fragment,Zt),kOo=i(Zt),dme=n(Zt,"P",{});var Jit=s(dme);SOo=r(Jit,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Jit.forEach(t),ROo=i(Zt),tn=n(Zt,"P",{});var XE=s(tn);BOo=r(XE,"The model class to instantiate is selected based on the "),cme=n(XE,"CODE",{});var Yit=s(cme);POo=r(Yit,"model_type"),Yit.forEach(t),$Oo=r(XE,` property of the config object (either
passed as an argument or loaded from `),fme=n(XE,"CODE",{});var Kit=s(fme);IOo=r(Kit,"pretrained_model_name_or_path"),Kit.forEach(t),qOo=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mme=n(XE,"CODE",{});var Zit=s(mme);NOo=r(Zit,"pretrained_model_name_or_path"),Zit.forEach(t),jOo=r(XE,":"),XE.forEach(t),DOo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);xv=n(Do,"LI",{});var mLe=s(xv);gme=n(mLe,"STRONG",{});var edt=s(gme);GOo=r(edt,"data2vec-audio"),edt.forEach(t),OOo=r(mLe," \u2014 "),mG=n(mLe,"A",{href:!0});var odt=s(mG);VOo=r(odt,"Data2VecAudioForSequenceClassification"),odt.forEach(t),XOo=r(mLe," (Data2VecAudio model)"),mLe.forEach(t),zOo=i(Do),kv=n(Do,"LI",{});var gLe=s(kv);hme=n(gLe,"STRONG",{});var rdt=s(hme);QOo=r(rdt,"hubert"),rdt.forEach(t),WOo=r(gLe," \u2014 "),gG=n(gLe,"A",{href:!0});var tdt=s(gG);HOo=r(tdt,"HubertForSequenceClassification"),tdt.forEach(t),UOo=r(gLe," (Hubert model)"),gLe.forEach(t),JOo=i(Do),Sv=n(Do,"LI",{});var hLe=s(Sv);pme=n(hLe,"STRONG",{});var adt=s(pme);YOo=r(adt,"sew"),adt.forEach(t),KOo=r(hLe," \u2014 "),hG=n(hLe,"A",{href:!0});var ndt=s(hG);ZOo=r(ndt,"SEWForSequenceClassification"),ndt.forEach(t),eVo=r(hLe," (SEW model)"),hLe.forEach(t),oVo=i(Do),Rv=n(Do,"LI",{});var pLe=s(Rv);_me=n(pLe,"STRONG",{});var sdt=s(_me);rVo=r(sdt,"sew-d"),sdt.forEach(t),tVo=r(pLe," \u2014 "),pG=n(pLe,"A",{href:!0});var ldt=s(pG);aVo=r(ldt,"SEWDForSequenceClassification"),ldt.forEach(t),nVo=r(pLe," (SEW-D model)"),pLe.forEach(t),sVo=i(Do),Bv=n(Do,"LI",{});var _Le=s(Bv);ume=n(_Le,"STRONG",{});var idt=s(ume);lVo=r(idt,"unispeech"),idt.forEach(t),iVo=r(_Le," \u2014 "),_G=n(_Le,"A",{href:!0});var ddt=s(_G);dVo=r(ddt,"UniSpeechForSequenceClassification"),ddt.forEach(t),cVo=r(_Le," (UniSpeech model)"),_Le.forEach(t),fVo=i(Do),Pv=n(Do,"LI",{});var uLe=s(Pv);bme=n(uLe,"STRONG",{});var cdt=s(bme);mVo=r(cdt,"unispeech-sat"),cdt.forEach(t),gVo=r(uLe," \u2014 "),uG=n(uLe,"A",{href:!0});var fdt=s(uG);hVo=r(fdt,"UniSpeechSatForSequenceClassification"),fdt.forEach(t),pVo=r(uLe," (UniSpeechSat model)"),uLe.forEach(t),_Vo=i(Do),$v=n(Do,"LI",{});var bLe=s($v);vme=n(bLe,"STRONG",{});var mdt=s(vme);uVo=r(mdt,"wav2vec2"),mdt.forEach(t),bVo=r(bLe," \u2014 "),bG=n(bLe,"A",{href:!0});var gdt=s(bG);vVo=r(gdt,"Wav2Vec2ForSequenceClassification"),gdt.forEach(t),FVo=r(bLe," (Wav2Vec2 model)"),bLe.forEach(t),TVo=i(Do),Iv=n(Do,"LI",{});var vLe=s(Iv);Fme=n(vLe,"STRONG",{});var hdt=s(Fme);MVo=r(hdt,"wavlm"),hdt.forEach(t),EVo=r(vLe," \u2014 "),vG=n(vLe,"A",{href:!0});var pdt=s(vG);CVo=r(pdt,"WavLMForSequenceClassification"),pdt.forEach(t),wVo=r(vLe," (WavLM model)"),vLe.forEach(t),Do.forEach(t),AVo=i(Zt),qv=n(Zt,"P",{});var FLe=s(qv);yVo=r(FLe,"The model is set in evaluation mode by default using "),Tme=n(FLe,"CODE",{});var _dt=s(Tme);LVo=r(_dt,"model.eval()"),_dt.forEach(t),xVo=r(FLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=n(FLe,"CODE",{});var udt=s(Mme);kVo=r(udt,"model.train()"),udt.forEach(t),FLe.forEach(t),SVo=i(Zt),Eme=n(Zt,"P",{});var bdt=s(Eme);RVo=r(bdt,"Examples:"),bdt.forEach(t),BVo=i(Zt),m(Y3.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),bBe=i(c),jd=n(c,"H2",{class:!0});var y$e=s(jd);Nv=n(y$e,"A",{id:!0,class:!0,href:!0});var vdt=s(Nv);Cme=n(vdt,"SPAN",{});var Fdt=s(Cme);m(K3.$$.fragment,Fdt),Fdt.forEach(t),vdt.forEach(t),PVo=i(y$e),wme=n(y$e,"SPAN",{});var Tdt=s(wme);$Vo=r(Tdt,"AutoModelForAudioFrameClassification"),Tdt.forEach(t),y$e.forEach(t),vBe=i(c),cr=n(c,"DIV",{class:!0});var Ml=s(cr);m(Z3.$$.fragment,Ml),IVo=i(Ml),Dd=n(Ml,"P",{});var HU=s(Dd);qVo=r(HU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),FG=n(HU,"A",{href:!0});var Mdt=s(FG);NVo=r(Mdt,"from_pretrained()"),Mdt.forEach(t),jVo=r(HU," class method or the "),TG=n(HU,"A",{href:!0});var Edt=s(TG);DVo=r(Edt,"from_config()"),Edt.forEach(t),GVo=r(HU,` class
method.`),HU.forEach(t),OVo=i(Ml),ew=n(Ml,"P",{});var L$e=s(ew);VVo=r(L$e,"This class cannot be instantiated directly using "),Ame=n(L$e,"CODE",{});var Cdt=s(Ame);XVo=r(Cdt,"__init__()"),Cdt.forEach(t),zVo=r(L$e," (throws an error)."),L$e.forEach(t),QVo=i(Ml),at=n(Ml,"DIV",{class:!0});var El=s(at);m(ow.$$.fragment,El),WVo=i(El),yme=n(El,"P",{});var wdt=s(yme);HVo=r(wdt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),wdt.forEach(t),UVo=i(El),Gd=n(El,"P",{});var UU=s(Gd);JVo=r(UU,`Note:
Loading a model from its configuration file does `),Lme=n(UU,"STRONG",{});var Adt=s(Lme);YVo=r(Adt,"not"),Adt.forEach(t),KVo=r(UU,` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=n(UU,"A",{href:!0});var ydt=s(MG);ZVo=r(ydt,"from_pretrained()"),ydt.forEach(t),eXo=r(UU," to load the model weights."),UU.forEach(t),oXo=i(El),xme=n(El,"P",{});var Ldt=s(xme);rXo=r(Ldt,"Examples:"),Ldt.forEach(t),tXo=i(El),m(rw.$$.fragment,El),El.forEach(t),aXo=i(Ml),Ye=n(Ml,"DIV",{class:!0});var ea=s(Ye);m(tw.$$.fragment,ea),nXo=i(ea),kme=n(ea,"P",{});var xdt=s(kme);sXo=r(xdt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xdt.forEach(t),lXo=i(ea),an=n(ea,"P",{});var zE=s(an);iXo=r(zE,"The model class to instantiate is selected based on the "),Sme=n(zE,"CODE",{});var kdt=s(Sme);dXo=r(kdt,"model_type"),kdt.forEach(t),cXo=r(zE,` property of the config object (either
passed as an argument or loaded from `),Rme=n(zE,"CODE",{});var Sdt=s(Rme);fXo=r(Sdt,"pretrained_model_name_or_path"),Sdt.forEach(t),mXo=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bme=n(zE,"CODE",{});var Rdt=s(Bme);gXo=r(Rdt,"pretrained_model_name_or_path"),Rdt.forEach(t),hXo=r(zE,":"),zE.forEach(t),pXo=i(ea),nn=n(ea,"UL",{});var QE=s(nn);jv=n(QE,"LI",{});var TLe=s(jv);Pme=n(TLe,"STRONG",{});var Bdt=s(Pme);_Xo=r(Bdt,"data2vec-audio"),Bdt.forEach(t),uXo=r(TLe," \u2014 "),EG=n(TLe,"A",{href:!0});var Pdt=s(EG);bXo=r(Pdt,"Data2VecAudioForAudioFrameClassification"),Pdt.forEach(t),vXo=r(TLe," (Data2VecAudio model)"),TLe.forEach(t),FXo=i(QE),Dv=n(QE,"LI",{});var MLe=s(Dv);$me=n(MLe,"STRONG",{});var $dt=s($me);TXo=r($dt,"unispeech-sat"),$dt.forEach(t),MXo=r(MLe," \u2014 "),CG=n(MLe,"A",{href:!0});var Idt=s(CG);EXo=r(Idt,"UniSpeechSatForAudioFrameClassification"),Idt.forEach(t),CXo=r(MLe," (UniSpeechSat model)"),MLe.forEach(t),wXo=i(QE),Gv=n(QE,"LI",{});var ELe=s(Gv);Ime=n(ELe,"STRONG",{});var qdt=s(Ime);AXo=r(qdt,"wav2vec2"),qdt.forEach(t),yXo=r(ELe," \u2014 "),wG=n(ELe,"A",{href:!0});var Ndt=s(wG);LXo=r(Ndt,"Wav2Vec2ForAudioFrameClassification"),Ndt.forEach(t),xXo=r(ELe," (Wav2Vec2 model)"),ELe.forEach(t),kXo=i(QE),Ov=n(QE,"LI",{});var CLe=s(Ov);qme=n(CLe,"STRONG",{});var jdt=s(qme);SXo=r(jdt,"wavlm"),jdt.forEach(t),RXo=r(CLe," \u2014 "),AG=n(CLe,"A",{href:!0});var Ddt=s(AG);BXo=r(Ddt,"WavLMForAudioFrameClassification"),Ddt.forEach(t),PXo=r(CLe," (WavLM model)"),CLe.forEach(t),QE.forEach(t),$Xo=i(ea),Vv=n(ea,"P",{});var wLe=s(Vv);IXo=r(wLe,"The model is set in evaluation mode by default using "),Nme=n(wLe,"CODE",{});var Gdt=s(Nme);qXo=r(Gdt,"model.eval()"),Gdt.forEach(t),NXo=r(wLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jme=n(wLe,"CODE",{});var Odt=s(jme);jXo=r(Odt,"model.train()"),Odt.forEach(t),wLe.forEach(t),DXo=i(ea),Dme=n(ea,"P",{});var Vdt=s(Dme);GXo=r(Vdt,"Examples:"),Vdt.forEach(t),OXo=i(ea),m(aw.$$.fragment,ea),ea.forEach(t),Ml.forEach(t),FBe=i(c),Od=n(c,"H2",{class:!0});var x$e=s(Od);Xv=n(x$e,"A",{id:!0,class:!0,href:!0});var Xdt=s(Xv);Gme=n(Xdt,"SPAN",{});var zdt=s(Gme);m(nw.$$.fragment,zdt),zdt.forEach(t),Xdt.forEach(t),VXo=i(x$e),Ome=n(x$e,"SPAN",{});var Qdt=s(Ome);XXo=r(Qdt,"AutoModelForCTC"),Qdt.forEach(t),x$e.forEach(t),TBe=i(c),fr=n(c,"DIV",{class:!0});var Cl=s(fr);m(sw.$$.fragment,Cl),zXo=i(Cl),Vd=n(Cl,"P",{});var JU=s(Vd);QXo=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),yG=n(JU,"A",{href:!0});var Wdt=s(yG);WXo=r(Wdt,"from_pretrained()"),Wdt.forEach(t),HXo=r(JU," class method or the "),LG=n(JU,"A",{href:!0});var Hdt=s(LG);UXo=r(Hdt,"from_config()"),Hdt.forEach(t),JXo=r(JU,` class
method.`),JU.forEach(t),YXo=i(Cl),lw=n(Cl,"P",{});var k$e=s(lw);KXo=r(k$e,"This class cannot be instantiated directly using "),Vme=n(k$e,"CODE",{});var Udt=s(Vme);ZXo=r(Udt,"__init__()"),Udt.forEach(t),ezo=r(k$e," (throws an error)."),k$e.forEach(t),ozo=i(Cl),nt=n(Cl,"DIV",{class:!0});var wl=s(nt);m(iw.$$.fragment,wl),rzo=i(wl),Xme=n(wl,"P",{});var Jdt=s(Xme);tzo=r(Jdt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Jdt.forEach(t),azo=i(wl),Xd=n(wl,"P",{});var YU=s(Xd);nzo=r(YU,`Note:
Loading a model from its configuration file does `),zme=n(YU,"STRONG",{});var Ydt=s(zme);szo=r(Ydt,"not"),Ydt.forEach(t),lzo=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=n(YU,"A",{href:!0});var Kdt=s(xG);izo=r(Kdt,"from_pretrained()"),Kdt.forEach(t),dzo=r(YU," to load the model weights."),YU.forEach(t),czo=i(wl),Qme=n(wl,"P",{});var Zdt=s(Qme);fzo=r(Zdt,"Examples:"),Zdt.forEach(t),mzo=i(wl),m(dw.$$.fragment,wl),wl.forEach(t),gzo=i(Cl),Ke=n(Cl,"DIV",{class:!0});var oa=s(Ke);m(cw.$$.fragment,oa),hzo=i(oa),Wme=n(oa,"P",{});var ect=s(Wme);pzo=r(ect,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ect.forEach(t),_zo=i(oa),sn=n(oa,"P",{});var WE=s(sn);uzo=r(WE,"The model class to instantiate is selected based on the "),Hme=n(WE,"CODE",{});var oct=s(Hme);bzo=r(oct,"model_type"),oct.forEach(t),vzo=r(WE,` property of the config object (either
passed as an argument or loaded from `),Ume=n(WE,"CODE",{});var rct=s(Ume);Fzo=r(rct,"pretrained_model_name_or_path"),rct.forEach(t),Tzo=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jme=n(WE,"CODE",{});var tct=s(Jme);Mzo=r(tct,"pretrained_model_name_or_path"),tct.forEach(t),Ezo=r(WE,":"),WE.forEach(t),Czo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);zv=n(Go,"LI",{});var ALe=s(zv);Yme=n(ALe,"STRONG",{});var act=s(Yme);wzo=r(act,"data2vec-audio"),act.forEach(t),Azo=r(ALe," \u2014 "),kG=n(ALe,"A",{href:!0});var nct=s(kG);yzo=r(nct,"Data2VecAudioForCTC"),nct.forEach(t),Lzo=r(ALe," (Data2VecAudio model)"),ALe.forEach(t),xzo=i(Go),Qv=n(Go,"LI",{});var yLe=s(Qv);Kme=n(yLe,"STRONG",{});var sct=s(Kme);kzo=r(sct,"hubert"),sct.forEach(t),Szo=r(yLe," \u2014 "),SG=n(yLe,"A",{href:!0});var lct=s(SG);Rzo=r(lct,"HubertForCTC"),lct.forEach(t),Bzo=r(yLe," (Hubert model)"),yLe.forEach(t),Pzo=i(Go),Wv=n(Go,"LI",{});var LLe=s(Wv);Zme=n(LLe,"STRONG",{});var ict=s(Zme);$zo=r(ict,"sew"),ict.forEach(t),Izo=r(LLe," \u2014 "),RG=n(LLe,"A",{href:!0});var dct=s(RG);qzo=r(dct,"SEWForCTC"),dct.forEach(t),Nzo=r(LLe," (SEW model)"),LLe.forEach(t),jzo=i(Go),Hv=n(Go,"LI",{});var xLe=s(Hv);ege=n(xLe,"STRONG",{});var cct=s(ege);Dzo=r(cct,"sew-d"),cct.forEach(t),Gzo=r(xLe," \u2014 "),BG=n(xLe,"A",{href:!0});var fct=s(BG);Ozo=r(fct,"SEWDForCTC"),fct.forEach(t),Vzo=r(xLe," (SEW-D model)"),xLe.forEach(t),Xzo=i(Go),Uv=n(Go,"LI",{});var kLe=s(Uv);oge=n(kLe,"STRONG",{});var mct=s(oge);zzo=r(mct,"unispeech"),mct.forEach(t),Qzo=r(kLe," \u2014 "),PG=n(kLe,"A",{href:!0});var gct=s(PG);Wzo=r(gct,"UniSpeechForCTC"),gct.forEach(t),Hzo=r(kLe," (UniSpeech model)"),kLe.forEach(t),Uzo=i(Go),Jv=n(Go,"LI",{});var SLe=s(Jv);rge=n(SLe,"STRONG",{});var hct=s(rge);Jzo=r(hct,"unispeech-sat"),hct.forEach(t),Yzo=r(SLe," \u2014 "),$G=n(SLe,"A",{href:!0});var pct=s($G);Kzo=r(pct,"UniSpeechSatForCTC"),pct.forEach(t),Zzo=r(SLe," (UniSpeechSat model)"),SLe.forEach(t),eQo=i(Go),Yv=n(Go,"LI",{});var RLe=s(Yv);tge=n(RLe,"STRONG",{});var _ct=s(tge);oQo=r(_ct,"wav2vec2"),_ct.forEach(t),rQo=r(RLe," \u2014 "),IG=n(RLe,"A",{href:!0});var uct=s(IG);tQo=r(uct,"Wav2Vec2ForCTC"),uct.forEach(t),aQo=r(RLe," (Wav2Vec2 model)"),RLe.forEach(t),nQo=i(Go),Kv=n(Go,"LI",{});var BLe=s(Kv);age=n(BLe,"STRONG",{});var bct=s(age);sQo=r(bct,"wavlm"),bct.forEach(t),lQo=r(BLe," \u2014 "),qG=n(BLe,"A",{href:!0});var vct=s(qG);iQo=r(vct,"WavLMForCTC"),vct.forEach(t),dQo=r(BLe," (WavLM model)"),BLe.forEach(t),Go.forEach(t),cQo=i(oa),Zv=n(oa,"P",{});var PLe=s(Zv);fQo=r(PLe,"The model is set in evaluation mode by default using "),nge=n(PLe,"CODE",{});var Fct=s(nge);mQo=r(Fct,"model.eval()"),Fct.forEach(t),gQo=r(PLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sge=n(PLe,"CODE",{});var Tct=s(sge);hQo=r(Tct,"model.train()"),Tct.forEach(t),PLe.forEach(t),pQo=i(oa),lge=n(oa,"P",{});var Mct=s(lge);_Qo=r(Mct,"Examples:"),Mct.forEach(t),uQo=i(oa),m(fw.$$.fragment,oa),oa.forEach(t),Cl.forEach(t),MBe=i(c),zd=n(c,"H2",{class:!0});var S$e=s(zd);eF=n(S$e,"A",{id:!0,class:!0,href:!0});var Ect=s(eF);ige=n(Ect,"SPAN",{});var Cct=s(ige);m(mw.$$.fragment,Cct),Cct.forEach(t),Ect.forEach(t),bQo=i(S$e),dge=n(S$e,"SPAN",{});var wct=s(dge);vQo=r(wct,"AutoModelForSpeechSeq2Seq"),wct.forEach(t),S$e.forEach(t),EBe=i(c),mr=n(c,"DIV",{class:!0});var Al=s(mr);m(gw.$$.fragment,Al),FQo=i(Al),Qd=n(Al,"P",{});var KU=s(Qd);TQo=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NG=n(KU,"A",{href:!0});var Act=s(NG);MQo=r(Act,"from_pretrained()"),Act.forEach(t),EQo=r(KU," class method or the "),jG=n(KU,"A",{href:!0});var yct=s(jG);CQo=r(yct,"from_config()"),yct.forEach(t),wQo=r(KU,` class
method.`),KU.forEach(t),AQo=i(Al),hw=n(Al,"P",{});var R$e=s(hw);yQo=r(R$e,"This class cannot be instantiated directly using "),cge=n(R$e,"CODE",{});var Lct=s(cge);LQo=r(Lct,"__init__()"),Lct.forEach(t),xQo=r(R$e," (throws an error)."),R$e.forEach(t),kQo=i(Al),st=n(Al,"DIV",{class:!0});var yl=s(st);m(pw.$$.fragment,yl),SQo=i(yl),fge=n(yl,"P",{});var xct=s(fge);RQo=r(xct,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xct.forEach(t),BQo=i(yl),Wd=n(yl,"P",{});var ZU=s(Wd);PQo=r(ZU,`Note:
Loading a model from its configuration file does `),mge=n(ZU,"STRONG",{});var kct=s(mge);$Qo=r(kct,"not"),kct.forEach(t),IQo=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=n(ZU,"A",{href:!0});var Sct=s(DG);qQo=r(Sct,"from_pretrained()"),Sct.forEach(t),NQo=r(ZU," to load the model weights."),ZU.forEach(t),jQo=i(yl),gge=n(yl,"P",{});var Rct=s(gge);DQo=r(Rct,"Examples:"),Rct.forEach(t),GQo=i(yl),m(_w.$$.fragment,yl),yl.forEach(t),OQo=i(Al),Ze=n(Al,"DIV",{class:!0});var ra=s(Ze);m(uw.$$.fragment,ra),VQo=i(ra),hge=n(ra,"P",{});var Bct=s(hge);XQo=r(Bct,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Bct.forEach(t),zQo=i(ra),ln=n(ra,"P",{});var HE=s(ln);QQo=r(HE,"The model class to instantiate is selected based on the "),pge=n(HE,"CODE",{});var Pct=s(pge);WQo=r(Pct,"model_type"),Pct.forEach(t),HQo=r(HE,` property of the config object (either
passed as an argument or loaded from `),_ge=n(HE,"CODE",{});var $ct=s(_ge);UQo=r($ct,"pretrained_model_name_or_path"),$ct.forEach(t),JQo=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=n(HE,"CODE",{});var Ict=s(uge);YQo=r(Ict,"pretrained_model_name_or_path"),Ict.forEach(t),KQo=r(HE,":"),HE.forEach(t),ZQo=i(ra),bw=n(ra,"UL",{});var B$e=s(bw);oF=n(B$e,"LI",{});var $Le=s(oF);bge=n($Le,"STRONG",{});var qct=s(bge);eWo=r(qct,"speech-encoder-decoder"),qct.forEach(t),oWo=r($Le," \u2014 "),GG=n($Le,"A",{href:!0});var Nct=s(GG);rWo=r(Nct,"SpeechEncoderDecoderModel"),Nct.forEach(t),tWo=r($Le," (Speech Encoder decoder model)"),$Le.forEach(t),aWo=i(B$e),rF=n(B$e,"LI",{});var ILe=s(rF);vge=n(ILe,"STRONG",{});var jct=s(vge);nWo=r(jct,"speech_to_text"),jct.forEach(t),sWo=r(ILe," \u2014 "),OG=n(ILe,"A",{href:!0});var Dct=s(OG);lWo=r(Dct,"Speech2TextForConditionalGeneration"),Dct.forEach(t),iWo=r(ILe," (Speech2Text model)"),ILe.forEach(t),B$e.forEach(t),dWo=i(ra),tF=n(ra,"P",{});var qLe=s(tF);cWo=r(qLe,"The model is set in evaluation mode by default using "),Fge=n(qLe,"CODE",{});var Gct=s(Fge);fWo=r(Gct,"model.eval()"),Gct.forEach(t),mWo=r(qLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=n(qLe,"CODE",{});var Oct=s(Tge);gWo=r(Oct,"model.train()"),Oct.forEach(t),qLe.forEach(t),hWo=i(ra),Mge=n(ra,"P",{});var Vct=s(Mge);pWo=r(Vct,"Examples:"),Vct.forEach(t),_Wo=i(ra),m(vw.$$.fragment,ra),ra.forEach(t),Al.forEach(t),CBe=i(c),Hd=n(c,"H2",{class:!0});var P$e=s(Hd);aF=n(P$e,"A",{id:!0,class:!0,href:!0});var Xct=s(aF);Ege=n(Xct,"SPAN",{});var zct=s(Ege);m(Fw.$$.fragment,zct),zct.forEach(t),Xct.forEach(t),uWo=i(P$e),Cge=n(P$e,"SPAN",{});var Qct=s(Cge);bWo=r(Qct,"AutoModelForAudioXVector"),Qct.forEach(t),P$e.forEach(t),wBe=i(c),gr=n(c,"DIV",{class:!0});var Ll=s(gr);m(Tw.$$.fragment,Ll),vWo=i(Ll),Ud=n(Ll,"P",{});var eJ=s(Ud);FWo=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),VG=n(eJ,"A",{href:!0});var Wct=s(VG);TWo=r(Wct,"from_pretrained()"),Wct.forEach(t),MWo=r(eJ," class method or the "),XG=n(eJ,"A",{href:!0});var Hct=s(XG);EWo=r(Hct,"from_config()"),Hct.forEach(t),CWo=r(eJ,` class
method.`),eJ.forEach(t),wWo=i(Ll),Mw=n(Ll,"P",{});var $$e=s(Mw);AWo=r($$e,"This class cannot be instantiated directly using "),wge=n($$e,"CODE",{});var Uct=s(wge);yWo=r(Uct,"__init__()"),Uct.forEach(t),LWo=r($$e," (throws an error)."),$$e.forEach(t),xWo=i(Ll),lt=n(Ll,"DIV",{class:!0});var xl=s(lt);m(Ew.$$.fragment,xl),kWo=i(xl),Age=n(xl,"P",{});var Jct=s(Age);SWo=r(Jct,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Jct.forEach(t),RWo=i(xl),Jd=n(xl,"P",{});var oJ=s(Jd);BWo=r(oJ,`Note:
Loading a model from its configuration file does `),yge=n(oJ,"STRONG",{});var Yct=s(yge);PWo=r(Yct,"not"),Yct.forEach(t),$Wo=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zG=n(oJ,"A",{href:!0});var Kct=s(zG);IWo=r(Kct,"from_pretrained()"),Kct.forEach(t),qWo=r(oJ," to load the model weights."),oJ.forEach(t),NWo=i(xl),Lge=n(xl,"P",{});var Zct=s(Lge);jWo=r(Zct,"Examples:"),Zct.forEach(t),DWo=i(xl),m(Cw.$$.fragment,xl),xl.forEach(t),GWo=i(Ll),eo=n(Ll,"DIV",{class:!0});var ta=s(eo);m(ww.$$.fragment,ta),OWo=i(ta),xge=n(ta,"P",{});var eft=s(xge);VWo=r(eft,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),eft.forEach(t),XWo=i(ta),dn=n(ta,"P",{});var UE=s(dn);zWo=r(UE,"The model class to instantiate is selected based on the "),kge=n(UE,"CODE",{});var oft=s(kge);QWo=r(oft,"model_type"),oft.forEach(t),WWo=r(UE,` property of the config object (either
passed as an argument or loaded from `),Sge=n(UE,"CODE",{});var rft=s(Sge);HWo=r(rft,"pretrained_model_name_or_path"),rft.forEach(t),UWo=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=n(UE,"CODE",{});var tft=s(Rge);JWo=r(tft,"pretrained_model_name_or_path"),tft.forEach(t),YWo=r(UE,":"),UE.forEach(t),KWo=i(ta),cn=n(ta,"UL",{});var JE=s(cn);nF=n(JE,"LI",{});var NLe=s(nF);Bge=n(NLe,"STRONG",{});var aft=s(Bge);ZWo=r(aft,"data2vec-audio"),aft.forEach(t),eHo=r(NLe," \u2014 "),QG=n(NLe,"A",{href:!0});var nft=s(QG);oHo=r(nft,"Data2VecAudioForXVector"),nft.forEach(t),rHo=r(NLe," (Data2VecAudio model)"),NLe.forEach(t),tHo=i(JE),sF=n(JE,"LI",{});var jLe=s(sF);Pge=n(jLe,"STRONG",{});var sft=s(Pge);aHo=r(sft,"unispeech-sat"),sft.forEach(t),nHo=r(jLe," \u2014 "),WG=n(jLe,"A",{href:!0});var lft=s(WG);sHo=r(lft,"UniSpeechSatForXVector"),lft.forEach(t),lHo=r(jLe," (UniSpeechSat model)"),jLe.forEach(t),iHo=i(JE),lF=n(JE,"LI",{});var DLe=s(lF);$ge=n(DLe,"STRONG",{});var ift=s($ge);dHo=r(ift,"wav2vec2"),ift.forEach(t),cHo=r(DLe," \u2014 "),HG=n(DLe,"A",{href:!0});var dft=s(HG);fHo=r(dft,"Wav2Vec2ForXVector"),dft.forEach(t),mHo=r(DLe," (Wav2Vec2 model)"),DLe.forEach(t),gHo=i(JE),iF=n(JE,"LI",{});var GLe=s(iF);Ige=n(GLe,"STRONG",{});var cft=s(Ige);hHo=r(cft,"wavlm"),cft.forEach(t),pHo=r(GLe," \u2014 "),UG=n(GLe,"A",{href:!0});var fft=s(UG);_Ho=r(fft,"WavLMForXVector"),fft.forEach(t),uHo=r(GLe," (WavLM model)"),GLe.forEach(t),JE.forEach(t),bHo=i(ta),dF=n(ta,"P",{});var OLe=s(dF);vHo=r(OLe,"The model is set in evaluation mode by default using "),qge=n(OLe,"CODE",{});var mft=s(qge);FHo=r(mft,"model.eval()"),mft.forEach(t),THo=r(OLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nge=n(OLe,"CODE",{});var gft=s(Nge);MHo=r(gft,"model.train()"),gft.forEach(t),OLe.forEach(t),EHo=i(ta),jge=n(ta,"P",{});var hft=s(jge);CHo=r(hft,"Examples:"),hft.forEach(t),wHo=i(ta),m(Aw.$$.fragment,ta),ta.forEach(t),Ll.forEach(t),ABe=i(c),Yd=n(c,"H2",{class:!0});var I$e=s(Yd);cF=n(I$e,"A",{id:!0,class:!0,href:!0});var pft=s(cF);Dge=n(pft,"SPAN",{});var _ft=s(Dge);m(yw.$$.fragment,_ft),_ft.forEach(t),pft.forEach(t),AHo=i(I$e),Gge=n(I$e,"SPAN",{});var uft=s(Gge);yHo=r(uft,"AutoModelForMaskedImageModeling"),uft.forEach(t),I$e.forEach(t),yBe=i(c),hr=n(c,"DIV",{class:!0});var kl=s(hr);m(Lw.$$.fragment,kl),LHo=i(kl),Kd=n(kl,"P",{});var rJ=s(Kd);xHo=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),JG=n(rJ,"A",{href:!0});var bft=s(JG);kHo=r(bft,"from_pretrained()"),bft.forEach(t),SHo=r(rJ," class method or the "),YG=n(rJ,"A",{href:!0});var vft=s(YG);RHo=r(vft,"from_config()"),vft.forEach(t),BHo=r(rJ,` class
method.`),rJ.forEach(t),PHo=i(kl),xw=n(kl,"P",{});var q$e=s(xw);$Ho=r(q$e,"This class cannot be instantiated directly using "),Oge=n(q$e,"CODE",{});var Fft=s(Oge);IHo=r(Fft,"__init__()"),Fft.forEach(t),qHo=r(q$e," (throws an error)."),q$e.forEach(t),NHo=i(kl),it=n(kl,"DIV",{class:!0});var Sl=s(it);m(kw.$$.fragment,Sl),jHo=i(Sl),Vge=n(Sl,"P",{});var Tft=s(Vge);DHo=r(Tft,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Tft.forEach(t),GHo=i(Sl),Zd=n(Sl,"P",{});var tJ=s(Zd);OHo=r(tJ,`Note:
Loading a model from its configuration file does `),Xge=n(tJ,"STRONG",{});var Mft=s(Xge);VHo=r(Mft,"not"),Mft.forEach(t),XHo=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=n(tJ,"A",{href:!0});var Eft=s(KG);zHo=r(Eft,"from_pretrained()"),Eft.forEach(t),QHo=r(tJ," to load the model weights."),tJ.forEach(t),WHo=i(Sl),zge=n(Sl,"P",{});var Cft=s(zge);HHo=r(Cft,"Examples:"),Cft.forEach(t),UHo=i(Sl),m(Sw.$$.fragment,Sl),Sl.forEach(t),JHo=i(kl),oo=n(kl,"DIV",{class:!0});var aa=s(oo);m(Rw.$$.fragment,aa),YHo=i(aa),Qge=n(aa,"P",{});var wft=s(Qge);KHo=r(wft,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),wft.forEach(t),ZHo=i(aa),fn=n(aa,"P",{});var YE=s(fn);eUo=r(YE,"The model class to instantiate is selected based on the "),Wge=n(YE,"CODE",{});var Aft=s(Wge);oUo=r(Aft,"model_type"),Aft.forEach(t),rUo=r(YE,` property of the config object (either
passed as an argument or loaded from `),Hge=n(YE,"CODE",{});var yft=s(Hge);tUo=r(yft,"pretrained_model_name_or_path"),yft.forEach(t),aUo=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=n(YE,"CODE",{});var Lft=s(Uge);nUo=r(Lft,"pretrained_model_name_or_path"),Lft.forEach(t),sUo=r(YE,":"),YE.forEach(t),lUo=i(aa),ec=n(aa,"UL",{});var aJ=s(ec);fF=n(aJ,"LI",{});var VLe=s(fF);Jge=n(VLe,"STRONG",{});var xft=s(Jge);iUo=r(xft,"deit"),xft.forEach(t),dUo=r(VLe," \u2014 "),ZG=n(VLe,"A",{href:!0});var kft=s(ZG);cUo=r(kft,"DeiTForMaskedImageModeling"),kft.forEach(t),fUo=r(VLe," (DeiT model)"),VLe.forEach(t),mUo=i(aJ),mF=n(aJ,"LI",{});var XLe=s(mF);Yge=n(XLe,"STRONG",{});var Sft=s(Yge);gUo=r(Sft,"swin"),Sft.forEach(t),hUo=r(XLe," \u2014 "),eO=n(XLe,"A",{href:!0});var Rft=s(eO);pUo=r(Rft,"SwinForMaskedImageModeling"),Rft.forEach(t),_Uo=r(XLe," (Swin model)"),XLe.forEach(t),uUo=i(aJ),gF=n(aJ,"LI",{});var zLe=s(gF);Kge=n(zLe,"STRONG",{});var Bft=s(Kge);bUo=r(Bft,"vit"),Bft.forEach(t),vUo=r(zLe," \u2014 "),oO=n(zLe,"A",{href:!0});var Pft=s(oO);FUo=r(Pft,"ViTForMaskedImageModeling"),Pft.forEach(t),TUo=r(zLe," (ViT model)"),zLe.forEach(t),aJ.forEach(t),MUo=i(aa),hF=n(aa,"P",{});var QLe=s(hF);EUo=r(QLe,"The model is set in evaluation mode by default using "),Zge=n(QLe,"CODE",{});var $ft=s(Zge);CUo=r($ft,"model.eval()"),$ft.forEach(t),wUo=r(QLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ehe=n(QLe,"CODE",{});var Ift=s(ehe);AUo=r(Ift,"model.train()"),Ift.forEach(t),QLe.forEach(t),yUo=i(aa),ohe=n(aa,"P",{});var qft=s(ohe);LUo=r(qft,"Examples:"),qft.forEach(t),xUo=i(aa),m(Bw.$$.fragment,aa),aa.forEach(t),kl.forEach(t),LBe=i(c),oc=n(c,"H2",{class:!0});var N$e=s(oc);pF=n(N$e,"A",{id:!0,class:!0,href:!0});var Nft=s(pF);rhe=n(Nft,"SPAN",{});var jft=s(rhe);m(Pw.$$.fragment,jft),jft.forEach(t),Nft.forEach(t),kUo=i(N$e),the=n(N$e,"SPAN",{});var Dft=s(the);SUo=r(Dft,"AutoModelForObjectDetection"),Dft.forEach(t),N$e.forEach(t),xBe=i(c),pr=n(c,"DIV",{class:!0});var Rl=s(pr);m($w.$$.fragment,Rl),RUo=i(Rl),rc=n(Rl,"P",{});var nJ=s(rc);BUo=r(nJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),rO=n(nJ,"A",{href:!0});var Gft=s(rO);PUo=r(Gft,"from_pretrained()"),Gft.forEach(t),$Uo=r(nJ," class method or the "),tO=n(nJ,"A",{href:!0});var Oft=s(tO);IUo=r(Oft,"from_config()"),Oft.forEach(t),qUo=r(nJ,` class
method.`),nJ.forEach(t),NUo=i(Rl),Iw=n(Rl,"P",{});var j$e=s(Iw);jUo=r(j$e,"This class cannot be instantiated directly using "),ahe=n(j$e,"CODE",{});var Vft=s(ahe);DUo=r(Vft,"__init__()"),Vft.forEach(t),GUo=r(j$e," (throws an error)."),j$e.forEach(t),OUo=i(Rl),dt=n(Rl,"DIV",{class:!0});var Bl=s(dt);m(qw.$$.fragment,Bl),VUo=i(Bl),nhe=n(Bl,"P",{});var Xft=s(nhe);XUo=r(Xft,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Xft.forEach(t),zUo=i(Bl),tc=n(Bl,"P",{});var sJ=s(tc);QUo=r(sJ,`Note:
Loading a model from its configuration file does `),she=n(sJ,"STRONG",{});var zft=s(she);WUo=r(zft,"not"),zft.forEach(t),HUo=r(sJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(sJ,"A",{href:!0});var Qft=s(aO);UUo=r(Qft,"from_pretrained()"),Qft.forEach(t),JUo=r(sJ," to load the model weights."),sJ.forEach(t),YUo=i(Bl),lhe=n(Bl,"P",{});var Wft=s(lhe);KUo=r(Wft,"Examples:"),Wft.forEach(t),ZUo=i(Bl),m(Nw.$$.fragment,Bl),Bl.forEach(t),eJo=i(Rl),ro=n(Rl,"DIV",{class:!0});var na=s(ro);m(jw.$$.fragment,na),oJo=i(na),ihe=n(na,"P",{});var Hft=s(ihe);rJo=r(Hft,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Hft.forEach(t),tJo=i(na),mn=n(na,"P",{});var KE=s(mn);aJo=r(KE,"The model class to instantiate is selected based on the "),dhe=n(KE,"CODE",{});var Uft=s(dhe);nJo=r(Uft,"model_type"),Uft.forEach(t),sJo=r(KE,` property of the config object (either
passed as an argument or loaded from `),che=n(KE,"CODE",{});var Jft=s(che);lJo=r(Jft,"pretrained_model_name_or_path"),Jft.forEach(t),iJo=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fhe=n(KE,"CODE",{});var Yft=s(fhe);dJo=r(Yft,"pretrained_model_name_or_path"),Yft.forEach(t),cJo=r(KE,":"),KE.forEach(t),fJo=i(na),mhe=n(na,"UL",{});var Kft=s(mhe);_F=n(Kft,"LI",{});var WLe=s(_F);ghe=n(WLe,"STRONG",{});var Zft=s(ghe);mJo=r(Zft,"detr"),Zft.forEach(t),gJo=r(WLe," \u2014 "),nO=n(WLe,"A",{href:!0});var emt=s(nO);hJo=r(emt,"DetrForObjectDetection"),emt.forEach(t),pJo=r(WLe," (DETR model)"),WLe.forEach(t),Kft.forEach(t),_Jo=i(na),uF=n(na,"P",{});var HLe=s(uF);uJo=r(HLe,"The model is set in evaluation mode by default using "),hhe=n(HLe,"CODE",{});var omt=s(hhe);bJo=r(omt,"model.eval()"),omt.forEach(t),vJo=r(HLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),phe=n(HLe,"CODE",{});var rmt=s(phe);FJo=r(rmt,"model.train()"),rmt.forEach(t),HLe.forEach(t),TJo=i(na),_he=n(na,"P",{});var tmt=s(_he);MJo=r(tmt,"Examples:"),tmt.forEach(t),EJo=i(na),m(Dw.$$.fragment,na),na.forEach(t),Rl.forEach(t),kBe=i(c),ac=n(c,"H2",{class:!0});var D$e=s(ac);bF=n(D$e,"A",{id:!0,class:!0,href:!0});var amt=s(bF);uhe=n(amt,"SPAN",{});var nmt=s(uhe);m(Gw.$$.fragment,nmt),nmt.forEach(t),amt.forEach(t),CJo=i(D$e),bhe=n(D$e,"SPAN",{});var smt=s(bhe);wJo=r(smt,"AutoModelForImageSegmentation"),smt.forEach(t),D$e.forEach(t),SBe=i(c),_r=n(c,"DIV",{class:!0});var Pl=s(_r);m(Ow.$$.fragment,Pl),AJo=i(Pl),nc=n(Pl,"P",{});var lJ=s(nc);yJo=r(lJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),sO=n(lJ,"A",{href:!0});var lmt=s(sO);LJo=r(lmt,"from_pretrained()"),lmt.forEach(t),xJo=r(lJ," class method or the "),lO=n(lJ,"A",{href:!0});var imt=s(lO);kJo=r(imt,"from_config()"),imt.forEach(t),SJo=r(lJ,` class
method.`),lJ.forEach(t),RJo=i(Pl),Vw=n(Pl,"P",{});var G$e=s(Vw);BJo=r(G$e,"This class cannot be instantiated directly using "),vhe=n(G$e,"CODE",{});var dmt=s(vhe);PJo=r(dmt,"__init__()"),dmt.forEach(t),$Jo=r(G$e," (throws an error)."),G$e.forEach(t),IJo=i(Pl),ct=n(Pl,"DIV",{class:!0});var $l=s(ct);m(Xw.$$.fragment,$l),qJo=i($l),Fhe=n($l,"P",{});var cmt=s(Fhe);NJo=r(cmt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),cmt.forEach(t),jJo=i($l),sc=n($l,"P",{});var iJ=s(sc);DJo=r(iJ,`Note:
Loading a model from its configuration file does `),The=n(iJ,"STRONG",{});var fmt=s(The);GJo=r(fmt,"not"),fmt.forEach(t),OJo=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=n(iJ,"A",{href:!0});var mmt=s(iO);VJo=r(mmt,"from_pretrained()"),mmt.forEach(t),XJo=r(iJ," to load the model weights."),iJ.forEach(t),zJo=i($l),Mhe=n($l,"P",{});var gmt=s(Mhe);QJo=r(gmt,"Examples:"),gmt.forEach(t),WJo=i($l),m(zw.$$.fragment,$l),$l.forEach(t),HJo=i(Pl),to=n(Pl,"DIV",{class:!0});var sa=s(to);m(Qw.$$.fragment,sa),UJo=i(sa),Ehe=n(sa,"P",{});var hmt=s(Ehe);JJo=r(hmt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),hmt.forEach(t),YJo=i(sa),gn=n(sa,"P",{});var ZE=s(gn);KJo=r(ZE,"The model class to instantiate is selected based on the "),Che=n(ZE,"CODE",{});var pmt=s(Che);ZJo=r(pmt,"model_type"),pmt.forEach(t),eYo=r(ZE,` property of the config object (either
passed as an argument or loaded from `),whe=n(ZE,"CODE",{});var _mt=s(whe);oYo=r(_mt,"pretrained_model_name_or_path"),_mt.forEach(t),rYo=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=n(ZE,"CODE",{});var umt=s(Ahe);tYo=r(umt,"pretrained_model_name_or_path"),umt.forEach(t),aYo=r(ZE,":"),ZE.forEach(t),nYo=i(sa),yhe=n(sa,"UL",{});var bmt=s(yhe);vF=n(bmt,"LI",{});var ULe=s(vF);Lhe=n(ULe,"STRONG",{});var vmt=s(Lhe);sYo=r(vmt,"detr"),vmt.forEach(t),lYo=r(ULe," \u2014 "),dO=n(ULe,"A",{href:!0});var Fmt=s(dO);iYo=r(Fmt,"DetrForSegmentation"),Fmt.forEach(t),dYo=r(ULe," (DETR model)"),ULe.forEach(t),bmt.forEach(t),cYo=i(sa),FF=n(sa,"P",{});var JLe=s(FF);fYo=r(JLe,"The model is set in evaluation mode by default using "),xhe=n(JLe,"CODE",{});var Tmt=s(xhe);mYo=r(Tmt,"model.eval()"),Tmt.forEach(t),gYo=r(JLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=n(JLe,"CODE",{});var Mmt=s(khe);hYo=r(Mmt,"model.train()"),Mmt.forEach(t),JLe.forEach(t),pYo=i(sa),She=n(sa,"P",{});var Emt=s(She);_Yo=r(Emt,"Examples:"),Emt.forEach(t),uYo=i(sa),m(Ww.$$.fragment,sa),sa.forEach(t),Pl.forEach(t),RBe=i(c),lc=n(c,"H2",{class:!0});var O$e=s(lc);TF=n(O$e,"A",{id:!0,class:!0,href:!0});var Cmt=s(TF);Rhe=n(Cmt,"SPAN",{});var wmt=s(Rhe);m(Hw.$$.fragment,wmt),wmt.forEach(t),Cmt.forEach(t),bYo=i(O$e),Bhe=n(O$e,"SPAN",{});var Amt=s(Bhe);vYo=r(Amt,"AutoModelForSemanticSegmentation"),Amt.forEach(t),O$e.forEach(t),BBe=i(c),ur=n(c,"DIV",{class:!0});var Il=s(ur);m(Uw.$$.fragment,Il),FYo=i(Il),ic=n(Il,"P",{});var dJ=s(ic);TYo=r(dJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),cO=n(dJ,"A",{href:!0});var ymt=s(cO);MYo=r(ymt,"from_pretrained()"),ymt.forEach(t),EYo=r(dJ," class method or the "),fO=n(dJ,"A",{href:!0});var Lmt=s(fO);CYo=r(Lmt,"from_config()"),Lmt.forEach(t),wYo=r(dJ,` class
method.`),dJ.forEach(t),AYo=i(Il),Jw=n(Il,"P",{});var V$e=s(Jw);yYo=r(V$e,"This class cannot be instantiated directly using "),Phe=n(V$e,"CODE",{});var xmt=s(Phe);LYo=r(xmt,"__init__()"),xmt.forEach(t),xYo=r(V$e," (throws an error)."),V$e.forEach(t),kYo=i(Il),ft=n(Il,"DIV",{class:!0});var ql=s(ft);m(Yw.$$.fragment,ql),SYo=i(ql),$he=n(ql,"P",{});var kmt=s($he);RYo=r(kmt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),kmt.forEach(t),BYo=i(ql),dc=n(ql,"P",{});var cJ=s(dc);PYo=r(cJ,`Note:
Loading a model from its configuration file does `),Ihe=n(cJ,"STRONG",{});var Smt=s(Ihe);$Yo=r(Smt,"not"),Smt.forEach(t),IYo=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=n(cJ,"A",{href:!0});var Rmt=s(mO);qYo=r(Rmt,"from_pretrained()"),Rmt.forEach(t),NYo=r(cJ," to load the model weights."),cJ.forEach(t),jYo=i(ql),qhe=n(ql,"P",{});var Bmt=s(qhe);DYo=r(Bmt,"Examples:"),Bmt.forEach(t),GYo=i(ql),m(Kw.$$.fragment,ql),ql.forEach(t),OYo=i(Il),ao=n(Il,"DIV",{class:!0});var la=s(ao);m(Zw.$$.fragment,la),VYo=i(la),Nhe=n(la,"P",{});var Pmt=s(Nhe);XYo=r(Pmt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Pmt.forEach(t),zYo=i(la),hn=n(la,"P",{});var eC=s(hn);QYo=r(eC,"The model class to instantiate is selected based on the "),jhe=n(eC,"CODE",{});var $mt=s(jhe);WYo=r($mt,"model_type"),$mt.forEach(t),HYo=r(eC,` property of the config object (either
passed as an argument or loaded from `),Dhe=n(eC,"CODE",{});var Imt=s(Dhe);UYo=r(Imt,"pretrained_model_name_or_path"),Imt.forEach(t),JYo=r(eC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=n(eC,"CODE",{});var qmt=s(Ghe);YYo=r(qmt,"pretrained_model_name_or_path"),qmt.forEach(t),KYo=r(eC,":"),eC.forEach(t),ZYo=i(la),pn=n(la,"UL",{});var oC=s(pn);MF=n(oC,"LI",{});var YLe=s(MF);Ohe=n(YLe,"STRONG",{});var Nmt=s(Ohe);eKo=r(Nmt,"beit"),Nmt.forEach(t),oKo=r(YLe," \u2014 "),gO=n(YLe,"A",{href:!0});var jmt=s(gO);rKo=r(jmt,"BeitForSemanticSegmentation"),jmt.forEach(t),tKo=r(YLe," (BEiT model)"),YLe.forEach(t),aKo=i(oC),EF=n(oC,"LI",{});var KLe=s(EF);Vhe=n(KLe,"STRONG",{});var Dmt=s(Vhe);nKo=r(Dmt,"data2vec-vision"),Dmt.forEach(t),sKo=r(KLe," \u2014 "),hO=n(KLe,"A",{href:!0});var Gmt=s(hO);lKo=r(Gmt,"Data2VecVisionForSemanticSegmentation"),Gmt.forEach(t),iKo=r(KLe," (Data2VecVision model)"),KLe.forEach(t),dKo=i(oC),CF=n(oC,"LI",{});var ZLe=s(CF);Xhe=n(ZLe,"STRONG",{});var Omt=s(Xhe);cKo=r(Omt,"dpt"),Omt.forEach(t),fKo=r(ZLe," \u2014 "),pO=n(ZLe,"A",{href:!0});var Vmt=s(pO);mKo=r(Vmt,"DPTForSemanticSegmentation"),Vmt.forEach(t),gKo=r(ZLe," (DPT model)"),ZLe.forEach(t),hKo=i(oC),wF=n(oC,"LI",{});var e8e=s(wF);zhe=n(e8e,"STRONG",{});var Xmt=s(zhe);pKo=r(Xmt,"segformer"),Xmt.forEach(t),_Ko=r(e8e," \u2014 "),_O=n(e8e,"A",{href:!0});var zmt=s(_O);uKo=r(zmt,"SegformerForSemanticSegmentation"),zmt.forEach(t),bKo=r(e8e," (SegFormer model)"),e8e.forEach(t),oC.forEach(t),vKo=i(la),AF=n(la,"P",{});var o8e=s(AF);FKo=r(o8e,"The model is set in evaluation mode by default using "),Qhe=n(o8e,"CODE",{});var Qmt=s(Qhe);TKo=r(Qmt,"model.eval()"),Qmt.forEach(t),MKo=r(o8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=n(o8e,"CODE",{});var Wmt=s(Whe);EKo=r(Wmt,"model.train()"),Wmt.forEach(t),o8e.forEach(t),CKo=i(la),Hhe=n(la,"P",{});var Hmt=s(Hhe);wKo=r(Hmt,"Examples:"),Hmt.forEach(t),AKo=i(la),m(eA.$$.fragment,la),la.forEach(t),Il.forEach(t),PBe=i(c),cc=n(c,"H2",{class:!0});var X$e=s(cc);yF=n(X$e,"A",{id:!0,class:!0,href:!0});var Umt=s(yF);Uhe=n(Umt,"SPAN",{});var Jmt=s(Uhe);m(oA.$$.fragment,Jmt),Jmt.forEach(t),Umt.forEach(t),yKo=i(X$e),Jhe=n(X$e,"SPAN",{});var Ymt=s(Jhe);LKo=r(Ymt,"AutoModelForInstanceSegmentation"),Ymt.forEach(t),X$e.forEach(t),$Be=i(c),br=n(c,"DIV",{class:!0});var Nl=s(br);m(rA.$$.fragment,Nl),xKo=i(Nl),fc=n(Nl,"P",{});var fJ=s(fc);kKo=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),uO=n(fJ,"A",{href:!0});var Kmt=s(uO);SKo=r(Kmt,"from_pretrained()"),Kmt.forEach(t),RKo=r(fJ," class method or the "),bO=n(fJ,"A",{href:!0});var Zmt=s(bO);BKo=r(Zmt,"from_config()"),Zmt.forEach(t),PKo=r(fJ,` class
method.`),fJ.forEach(t),$Ko=i(Nl),tA=n(Nl,"P",{});var z$e=s(tA);IKo=r(z$e,"This class cannot be instantiated directly using "),Yhe=n(z$e,"CODE",{});var egt=s(Yhe);qKo=r(egt,"__init__()"),egt.forEach(t),NKo=r(z$e," (throws an error)."),z$e.forEach(t),jKo=i(Nl),mt=n(Nl,"DIV",{class:!0});var jl=s(mt);m(aA.$$.fragment,jl),DKo=i(jl),Khe=n(jl,"P",{});var ogt=s(Khe);GKo=r(ogt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ogt.forEach(t),OKo=i(jl),mc=n(jl,"P",{});var mJ=s(mc);VKo=r(mJ,`Note:
Loading a model from its configuration file does `),Zhe=n(mJ,"STRONG",{});var rgt=s(Zhe);XKo=r(rgt,"not"),rgt.forEach(t),zKo=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=n(mJ,"A",{href:!0});var tgt=s(vO);QKo=r(tgt,"from_pretrained()"),tgt.forEach(t),WKo=r(mJ," to load the model weights."),mJ.forEach(t),HKo=i(jl),epe=n(jl,"P",{});var agt=s(epe);UKo=r(agt,"Examples:"),agt.forEach(t),JKo=i(jl),m(nA.$$.fragment,jl),jl.forEach(t),YKo=i(Nl),no=n(Nl,"DIV",{class:!0});var ia=s(no);m(sA.$$.fragment,ia),KKo=i(ia),ope=n(ia,"P",{});var ngt=s(ope);ZKo=r(ngt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ngt.forEach(t),eZo=i(ia),_n=n(ia,"P",{});var rC=s(_n);oZo=r(rC,"The model class to instantiate is selected based on the "),rpe=n(rC,"CODE",{});var sgt=s(rpe);rZo=r(sgt,"model_type"),sgt.forEach(t),tZo=r(rC,` property of the config object (either
passed as an argument or loaded from `),tpe=n(rC,"CODE",{});var lgt=s(tpe);aZo=r(lgt,"pretrained_model_name_or_path"),lgt.forEach(t),nZo=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=n(rC,"CODE",{});var igt=s(ape);sZo=r(igt,"pretrained_model_name_or_path"),igt.forEach(t),lZo=r(rC,":"),rC.forEach(t),iZo=i(ia),npe=n(ia,"UL",{});var dgt=s(npe);LF=n(dgt,"LI",{});var r8e=s(LF);spe=n(r8e,"STRONG",{});var cgt=s(spe);dZo=r(cgt,"maskformer"),cgt.forEach(t),cZo=r(r8e," \u2014 "),FO=n(r8e,"A",{href:!0});var fgt=s(FO);fZo=r(fgt,"MaskFormerForInstanceSegmentation"),fgt.forEach(t),mZo=r(r8e," (MaskFormer model)"),r8e.forEach(t),dgt.forEach(t),gZo=i(ia),xF=n(ia,"P",{});var t8e=s(xF);hZo=r(t8e,"The model is set in evaluation mode by default using "),lpe=n(t8e,"CODE",{});var mgt=s(lpe);pZo=r(mgt,"model.eval()"),mgt.forEach(t),_Zo=r(t8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ipe=n(t8e,"CODE",{});var ggt=s(ipe);uZo=r(ggt,"model.train()"),ggt.forEach(t),t8e.forEach(t),bZo=i(ia),dpe=n(ia,"P",{});var hgt=s(dpe);vZo=r(hgt,"Examples:"),hgt.forEach(t),FZo=i(ia),m(lA.$$.fragment,ia),ia.forEach(t),Nl.forEach(t),IBe=i(c),gc=n(c,"H2",{class:!0});var Q$e=s(gc);kF=n(Q$e,"A",{id:!0,class:!0,href:!0});var pgt=s(kF);cpe=n(pgt,"SPAN",{});var _gt=s(cpe);m(iA.$$.fragment,_gt),_gt.forEach(t),pgt.forEach(t),TZo=i(Q$e),fpe=n(Q$e,"SPAN",{});var ugt=s(fpe);MZo=r(ugt,"TFAutoModel"),ugt.forEach(t),Q$e.forEach(t),qBe=i(c),vr=n(c,"DIV",{class:!0});var Dl=s(vr);m(dA.$$.fragment,Dl),EZo=i(Dl),hc=n(Dl,"P",{});var gJ=s(hc);CZo=r(gJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TO=n(gJ,"A",{href:!0});var bgt=s(TO);wZo=r(bgt,"from_pretrained()"),bgt.forEach(t),AZo=r(gJ," class method or the "),MO=n(gJ,"A",{href:!0});var vgt=s(MO);yZo=r(vgt,"from_config()"),vgt.forEach(t),LZo=r(gJ,` class
method.`),gJ.forEach(t),xZo=i(Dl),cA=n(Dl,"P",{});var W$e=s(cA);kZo=r(W$e,"This class cannot be instantiated directly using "),mpe=n(W$e,"CODE",{});var Fgt=s(mpe);SZo=r(Fgt,"__init__()"),Fgt.forEach(t),RZo=r(W$e," (throws an error)."),W$e.forEach(t),BZo=i(Dl),gt=n(Dl,"DIV",{class:!0});var Gl=s(gt);m(fA.$$.fragment,Gl),PZo=i(Gl),gpe=n(Gl,"P",{});var Tgt=s(gpe);$Zo=r(Tgt,"Instantiates one of the base model classes of the library from a configuration."),Tgt.forEach(t),IZo=i(Gl),pc=n(Gl,"P",{});var hJ=s(pc);qZo=r(hJ,`Note:
Loading a model from its configuration file does `),hpe=n(hJ,"STRONG",{});var Mgt=s(hpe);NZo=r(Mgt,"not"),Mgt.forEach(t),jZo=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EO=n(hJ,"A",{href:!0});var Egt=s(EO);DZo=r(Egt,"from_pretrained()"),Egt.forEach(t),GZo=r(hJ," to load the model weights."),hJ.forEach(t),OZo=i(Gl),ppe=n(Gl,"P",{});var Cgt=s(ppe);VZo=r(Cgt,"Examples:"),Cgt.forEach(t),XZo=i(Gl),m(mA.$$.fragment,Gl),Gl.forEach(t),zZo=i(Dl),ho=n(Dl,"DIV",{class:!0});var pa=s(ho);m(gA.$$.fragment,pa),QZo=i(pa),_pe=n(pa,"P",{});var wgt=s(_pe);WZo=r(wgt,"Instantiate one of the base model classes of the library from a pretrained model."),wgt.forEach(t),HZo=i(pa),un=n(pa,"P",{});var tC=s(un);UZo=r(tC,"The model class to instantiate is selected based on the "),upe=n(tC,"CODE",{});var Agt=s(upe);JZo=r(Agt,"model_type"),Agt.forEach(t),YZo=r(tC,` property of the config object (either
passed as an argument or loaded from `),bpe=n(tC,"CODE",{});var ygt=s(bpe);KZo=r(ygt,"pretrained_model_name_or_path"),ygt.forEach(t),ZZo=r(tC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=n(tC,"CODE",{});var Lgt=s(vpe);eer=r(Lgt,"pretrained_model_name_or_path"),Lgt.forEach(t),oer=r(tC,":"),tC.forEach(t),rer=i(pa),x=n(pa,"UL",{});var k=s(x);SF=n(k,"LI",{});var a8e=s(SF);Fpe=n(a8e,"STRONG",{});var xgt=s(Fpe);ter=r(xgt,"albert"),xgt.forEach(t),aer=r(a8e," \u2014 "),CO=n(a8e,"A",{href:!0});var kgt=s(CO);ner=r(kgt,"TFAlbertModel"),kgt.forEach(t),ser=r(a8e," (ALBERT model)"),a8e.forEach(t),ler=i(k),RF=n(k,"LI",{});var n8e=s(RF);Tpe=n(n8e,"STRONG",{});var Sgt=s(Tpe);ier=r(Sgt,"bart"),Sgt.forEach(t),der=r(n8e," \u2014 "),wO=n(n8e,"A",{href:!0});var Rgt=s(wO);cer=r(Rgt,"TFBartModel"),Rgt.forEach(t),fer=r(n8e," (BART model)"),n8e.forEach(t),mer=i(k),BF=n(k,"LI",{});var s8e=s(BF);Mpe=n(s8e,"STRONG",{});var Bgt=s(Mpe);ger=r(Bgt,"bert"),Bgt.forEach(t),her=r(s8e," \u2014 "),AO=n(s8e,"A",{href:!0});var Pgt=s(AO);per=r(Pgt,"TFBertModel"),Pgt.forEach(t),_er=r(s8e," (BERT model)"),s8e.forEach(t),uer=i(k),PF=n(k,"LI",{});var l8e=s(PF);Epe=n(l8e,"STRONG",{});var $gt=s(Epe);ber=r($gt,"blenderbot"),$gt.forEach(t),ver=r(l8e," \u2014 "),yO=n(l8e,"A",{href:!0});var Igt=s(yO);Fer=r(Igt,"TFBlenderbotModel"),Igt.forEach(t),Ter=r(l8e," (Blenderbot model)"),l8e.forEach(t),Mer=i(k),$F=n(k,"LI",{});var i8e=s($F);Cpe=n(i8e,"STRONG",{});var qgt=s(Cpe);Eer=r(qgt,"blenderbot-small"),qgt.forEach(t),Cer=r(i8e," \u2014 "),LO=n(i8e,"A",{href:!0});var Ngt=s(LO);wer=r(Ngt,"TFBlenderbotSmallModel"),Ngt.forEach(t),Aer=r(i8e," (BlenderbotSmall model)"),i8e.forEach(t),yer=i(k),IF=n(k,"LI",{});var d8e=s(IF);wpe=n(d8e,"STRONG",{});var jgt=s(wpe);Ler=r(jgt,"camembert"),jgt.forEach(t),xer=r(d8e," \u2014 "),xO=n(d8e,"A",{href:!0});var Dgt=s(xO);ker=r(Dgt,"TFCamembertModel"),Dgt.forEach(t),Ser=r(d8e," (CamemBERT model)"),d8e.forEach(t),Rer=i(k),qF=n(k,"LI",{});var c8e=s(qF);Ape=n(c8e,"STRONG",{});var Ggt=s(Ape);Ber=r(Ggt,"clip"),Ggt.forEach(t),Per=r(c8e," \u2014 "),kO=n(c8e,"A",{href:!0});var Ogt=s(kO);$er=r(Ogt,"TFCLIPModel"),Ogt.forEach(t),Ier=r(c8e," (CLIP model)"),c8e.forEach(t),qer=i(k),NF=n(k,"LI",{});var f8e=s(NF);ype=n(f8e,"STRONG",{});var Vgt=s(ype);Ner=r(Vgt,"convbert"),Vgt.forEach(t),jer=r(f8e," \u2014 "),SO=n(f8e,"A",{href:!0});var Xgt=s(SO);Der=r(Xgt,"TFConvBertModel"),Xgt.forEach(t),Ger=r(f8e," (ConvBERT model)"),f8e.forEach(t),Oer=i(k),jF=n(k,"LI",{});var m8e=s(jF);Lpe=n(m8e,"STRONG",{});var zgt=s(Lpe);Ver=r(zgt,"convnext"),zgt.forEach(t),Xer=r(m8e," \u2014 "),RO=n(m8e,"A",{href:!0});var Qgt=s(RO);zer=r(Qgt,"TFConvNextModel"),Qgt.forEach(t),Qer=r(m8e," (ConvNext model)"),m8e.forEach(t),Wer=i(k),DF=n(k,"LI",{});var g8e=s(DF);xpe=n(g8e,"STRONG",{});var Wgt=s(xpe);Her=r(Wgt,"ctrl"),Wgt.forEach(t),Uer=r(g8e," \u2014 "),BO=n(g8e,"A",{href:!0});var Hgt=s(BO);Jer=r(Hgt,"TFCTRLModel"),Hgt.forEach(t),Yer=r(g8e," (CTRL model)"),g8e.forEach(t),Ker=i(k),GF=n(k,"LI",{});var h8e=s(GF);kpe=n(h8e,"STRONG",{});var Ugt=s(kpe);Zer=r(Ugt,"deberta"),Ugt.forEach(t),eor=r(h8e," \u2014 "),PO=n(h8e,"A",{href:!0});var Jgt=s(PO);oor=r(Jgt,"TFDebertaModel"),Jgt.forEach(t),ror=r(h8e," (DeBERTa model)"),h8e.forEach(t),tor=i(k),OF=n(k,"LI",{});var p8e=s(OF);Spe=n(p8e,"STRONG",{});var Ygt=s(Spe);aor=r(Ygt,"deberta-v2"),Ygt.forEach(t),nor=r(p8e," \u2014 "),$O=n(p8e,"A",{href:!0});var Kgt=s($O);sor=r(Kgt,"TFDebertaV2Model"),Kgt.forEach(t),lor=r(p8e," (DeBERTa-v2 model)"),p8e.forEach(t),ior=i(k),VF=n(k,"LI",{});var _8e=s(VF);Rpe=n(_8e,"STRONG",{});var Zgt=s(Rpe);dor=r(Zgt,"distilbert"),Zgt.forEach(t),cor=r(_8e," \u2014 "),IO=n(_8e,"A",{href:!0});var eht=s(IO);mor=r(eht,"TFDistilBertModel"),eht.forEach(t),gor=r(_8e," (DistilBERT model)"),_8e.forEach(t),hor=i(k),XF=n(k,"LI",{});var u8e=s(XF);Bpe=n(u8e,"STRONG",{});var oht=s(Bpe);por=r(oht,"dpr"),oht.forEach(t),_or=r(u8e," \u2014 "),qO=n(u8e,"A",{href:!0});var rht=s(qO);uor=r(rht,"TFDPRQuestionEncoder"),rht.forEach(t),bor=r(u8e," (DPR model)"),u8e.forEach(t),vor=i(k),zF=n(k,"LI",{});var b8e=s(zF);Ppe=n(b8e,"STRONG",{});var tht=s(Ppe);For=r(tht,"electra"),tht.forEach(t),Tor=r(b8e," \u2014 "),NO=n(b8e,"A",{href:!0});var aht=s(NO);Mor=r(aht,"TFElectraModel"),aht.forEach(t),Eor=r(b8e," (ELECTRA model)"),b8e.forEach(t),Cor=i(k),QF=n(k,"LI",{});var v8e=s(QF);$pe=n(v8e,"STRONG",{});var nht=s($pe);wor=r(nht,"flaubert"),nht.forEach(t),Aor=r(v8e," \u2014 "),jO=n(v8e,"A",{href:!0});var sht=s(jO);yor=r(sht,"TFFlaubertModel"),sht.forEach(t),Lor=r(v8e," (FlauBERT model)"),v8e.forEach(t),xor=i(k),Os=n(k,"LI",{});var v9=s(Os);Ipe=n(v9,"STRONG",{});var lht=s(Ipe);kor=r(lht,"funnel"),lht.forEach(t),Sor=r(v9," \u2014 "),DO=n(v9,"A",{href:!0});var iht=s(DO);Ror=r(iht,"TFFunnelModel"),iht.forEach(t),Bor=r(v9," or "),GO=n(v9,"A",{href:!0});var dht=s(GO);Por=r(dht,"TFFunnelBaseModel"),dht.forEach(t),$or=r(v9," (Funnel Transformer model)"),v9.forEach(t),Ior=i(k),WF=n(k,"LI",{});var F8e=s(WF);qpe=n(F8e,"STRONG",{});var cht=s(qpe);qor=r(cht,"gpt2"),cht.forEach(t),Nor=r(F8e," \u2014 "),OO=n(F8e,"A",{href:!0});var fht=s(OO);jor=r(fht,"TFGPT2Model"),fht.forEach(t),Dor=r(F8e," (OpenAI GPT-2 model)"),F8e.forEach(t),Gor=i(k),HF=n(k,"LI",{});var T8e=s(HF);Npe=n(T8e,"STRONG",{});var mht=s(Npe);Oor=r(mht,"gptj"),mht.forEach(t),Vor=r(T8e," \u2014 "),VO=n(T8e,"A",{href:!0});var ght=s(VO);Xor=r(ght,"TFGPTJModel"),ght.forEach(t),zor=r(T8e," (GPT-J model)"),T8e.forEach(t),Qor=i(k),UF=n(k,"LI",{});var M8e=s(UF);jpe=n(M8e,"STRONG",{});var hht=s(jpe);Wor=r(hht,"hubert"),hht.forEach(t),Hor=r(M8e," \u2014 "),XO=n(M8e,"A",{href:!0});var pht=s(XO);Uor=r(pht,"TFHubertModel"),pht.forEach(t),Jor=r(M8e," (Hubert model)"),M8e.forEach(t),Yor=i(k),JF=n(k,"LI",{});var E8e=s(JF);Dpe=n(E8e,"STRONG",{});var _ht=s(Dpe);Kor=r(_ht,"layoutlm"),_ht.forEach(t),Zor=r(E8e," \u2014 "),zO=n(E8e,"A",{href:!0});var uht=s(zO);err=r(uht,"TFLayoutLMModel"),uht.forEach(t),orr=r(E8e," (LayoutLM model)"),E8e.forEach(t),rrr=i(k),YF=n(k,"LI",{});var C8e=s(YF);Gpe=n(C8e,"STRONG",{});var bht=s(Gpe);trr=r(bht,"led"),bht.forEach(t),arr=r(C8e," \u2014 "),QO=n(C8e,"A",{href:!0});var vht=s(QO);nrr=r(vht,"TFLEDModel"),vht.forEach(t),srr=r(C8e," (LED model)"),C8e.forEach(t),lrr=i(k),KF=n(k,"LI",{});var w8e=s(KF);Ope=n(w8e,"STRONG",{});var Fht=s(Ope);irr=r(Fht,"longformer"),Fht.forEach(t),drr=r(w8e," \u2014 "),WO=n(w8e,"A",{href:!0});var Tht=s(WO);crr=r(Tht,"TFLongformerModel"),Tht.forEach(t),frr=r(w8e," (Longformer model)"),w8e.forEach(t),mrr=i(k),ZF=n(k,"LI",{});var A8e=s(ZF);Vpe=n(A8e,"STRONG",{});var Mht=s(Vpe);grr=r(Mht,"lxmert"),Mht.forEach(t),hrr=r(A8e," \u2014 "),HO=n(A8e,"A",{href:!0});var Eht=s(HO);prr=r(Eht,"TFLxmertModel"),Eht.forEach(t),_rr=r(A8e," (LXMERT model)"),A8e.forEach(t),urr=i(k),e0=n(k,"LI",{});var y8e=s(e0);Xpe=n(y8e,"STRONG",{});var Cht=s(Xpe);brr=r(Cht,"marian"),Cht.forEach(t),vrr=r(y8e," \u2014 "),UO=n(y8e,"A",{href:!0});var wht=s(UO);Frr=r(wht,"TFMarianModel"),wht.forEach(t),Trr=r(y8e," (Marian model)"),y8e.forEach(t),Mrr=i(k),o0=n(k,"LI",{});var L8e=s(o0);zpe=n(L8e,"STRONG",{});var Aht=s(zpe);Err=r(Aht,"mbart"),Aht.forEach(t),Crr=r(L8e," \u2014 "),JO=n(L8e,"A",{href:!0});var yht=s(JO);wrr=r(yht,"TFMBartModel"),yht.forEach(t),Arr=r(L8e," (mBART model)"),L8e.forEach(t),yrr=i(k),r0=n(k,"LI",{});var x8e=s(r0);Qpe=n(x8e,"STRONG",{});var Lht=s(Qpe);Lrr=r(Lht,"mobilebert"),Lht.forEach(t),xrr=r(x8e," \u2014 "),YO=n(x8e,"A",{href:!0});var xht=s(YO);krr=r(xht,"TFMobileBertModel"),xht.forEach(t),Srr=r(x8e," (MobileBERT model)"),x8e.forEach(t),Rrr=i(k),t0=n(k,"LI",{});var k8e=s(t0);Wpe=n(k8e,"STRONG",{});var kht=s(Wpe);Brr=r(kht,"mpnet"),kht.forEach(t),Prr=r(k8e," \u2014 "),KO=n(k8e,"A",{href:!0});var Sht=s(KO);$rr=r(Sht,"TFMPNetModel"),Sht.forEach(t),Irr=r(k8e," (MPNet model)"),k8e.forEach(t),qrr=i(k),a0=n(k,"LI",{});var S8e=s(a0);Hpe=n(S8e,"STRONG",{});var Rht=s(Hpe);Nrr=r(Rht,"mt5"),Rht.forEach(t),jrr=r(S8e," \u2014 "),ZO=n(S8e,"A",{href:!0});var Bht=s(ZO);Drr=r(Bht,"TFMT5Model"),Bht.forEach(t),Grr=r(S8e," (mT5 model)"),S8e.forEach(t),Orr=i(k),n0=n(k,"LI",{});var R8e=s(n0);Upe=n(R8e,"STRONG",{});var Pht=s(Upe);Vrr=r(Pht,"openai-gpt"),Pht.forEach(t),Xrr=r(R8e," \u2014 "),eV=n(R8e,"A",{href:!0});var $ht=s(eV);zrr=r($ht,"TFOpenAIGPTModel"),$ht.forEach(t),Qrr=r(R8e," (OpenAI GPT model)"),R8e.forEach(t),Wrr=i(k),s0=n(k,"LI",{});var B8e=s(s0);Jpe=n(B8e,"STRONG",{});var Iht=s(Jpe);Hrr=r(Iht,"pegasus"),Iht.forEach(t),Urr=r(B8e," \u2014 "),oV=n(B8e,"A",{href:!0});var qht=s(oV);Jrr=r(qht,"TFPegasusModel"),qht.forEach(t),Yrr=r(B8e," (Pegasus model)"),B8e.forEach(t),Krr=i(k),l0=n(k,"LI",{});var P8e=s(l0);Ype=n(P8e,"STRONG",{});var Nht=s(Ype);Zrr=r(Nht,"rembert"),Nht.forEach(t),etr=r(P8e," \u2014 "),rV=n(P8e,"A",{href:!0});var jht=s(rV);otr=r(jht,"TFRemBertModel"),jht.forEach(t),rtr=r(P8e," (RemBERT model)"),P8e.forEach(t),ttr=i(k),i0=n(k,"LI",{});var $8e=s(i0);Kpe=n($8e,"STRONG",{});var Dht=s(Kpe);atr=r(Dht,"roberta"),Dht.forEach(t),ntr=r($8e," \u2014 "),tV=n($8e,"A",{href:!0});var Ght=s(tV);str=r(Ght,"TFRobertaModel"),Ght.forEach(t),ltr=r($8e," (RoBERTa model)"),$8e.forEach(t),itr=i(k),d0=n(k,"LI",{});var I8e=s(d0);Zpe=n(I8e,"STRONG",{});var Oht=s(Zpe);dtr=r(Oht,"roformer"),Oht.forEach(t),ctr=r(I8e," \u2014 "),aV=n(I8e,"A",{href:!0});var Vht=s(aV);ftr=r(Vht,"TFRoFormerModel"),Vht.forEach(t),mtr=r(I8e," (RoFormer model)"),I8e.forEach(t),gtr=i(k),c0=n(k,"LI",{});var q8e=s(c0);e_e=n(q8e,"STRONG",{});var Xht=s(e_e);htr=r(Xht,"speech_to_text"),Xht.forEach(t),ptr=r(q8e," \u2014 "),nV=n(q8e,"A",{href:!0});var zht=s(nV);_tr=r(zht,"TFSpeech2TextModel"),zht.forEach(t),utr=r(q8e," (Speech2Text model)"),q8e.forEach(t),btr=i(k),f0=n(k,"LI",{});var N8e=s(f0);o_e=n(N8e,"STRONG",{});var Qht=s(o_e);vtr=r(Qht,"t5"),Qht.forEach(t),Ftr=r(N8e," \u2014 "),sV=n(N8e,"A",{href:!0});var Wht=s(sV);Ttr=r(Wht,"TFT5Model"),Wht.forEach(t),Mtr=r(N8e," (T5 model)"),N8e.forEach(t),Etr=i(k),m0=n(k,"LI",{});var j8e=s(m0);r_e=n(j8e,"STRONG",{});var Hht=s(r_e);Ctr=r(Hht,"tapas"),Hht.forEach(t),wtr=r(j8e," \u2014 "),lV=n(j8e,"A",{href:!0});var Uht=s(lV);Atr=r(Uht,"TFTapasModel"),Uht.forEach(t),ytr=r(j8e," (TAPAS model)"),j8e.forEach(t),Ltr=i(k),g0=n(k,"LI",{});var D8e=s(g0);t_e=n(D8e,"STRONG",{});var Jht=s(t_e);xtr=r(Jht,"transfo-xl"),Jht.forEach(t),ktr=r(D8e," \u2014 "),iV=n(D8e,"A",{href:!0});var Yht=s(iV);Str=r(Yht,"TFTransfoXLModel"),Yht.forEach(t),Rtr=r(D8e," (Transformer-XL model)"),D8e.forEach(t),Btr=i(k),h0=n(k,"LI",{});var G8e=s(h0);a_e=n(G8e,"STRONG",{});var Kht=s(a_e);Ptr=r(Kht,"vit"),Kht.forEach(t),$tr=r(G8e," \u2014 "),dV=n(G8e,"A",{href:!0});var Zht=s(dV);Itr=r(Zht,"TFViTModel"),Zht.forEach(t),qtr=r(G8e," (ViT model)"),G8e.forEach(t),Ntr=i(k),p0=n(k,"LI",{});var O8e=s(p0);n_e=n(O8e,"STRONG",{});var ept=s(n_e);jtr=r(ept,"vit_mae"),ept.forEach(t),Dtr=r(O8e," \u2014 "),cV=n(O8e,"A",{href:!0});var opt=s(cV);Gtr=r(opt,"TFViTMAEModel"),opt.forEach(t),Otr=r(O8e," (ViTMAE model)"),O8e.forEach(t),Vtr=i(k),_0=n(k,"LI",{});var V8e=s(_0);s_e=n(V8e,"STRONG",{});var rpt=s(s_e);Xtr=r(rpt,"wav2vec2"),rpt.forEach(t),ztr=r(V8e," \u2014 "),fV=n(V8e,"A",{href:!0});var tpt=s(fV);Qtr=r(tpt,"TFWav2Vec2Model"),tpt.forEach(t),Wtr=r(V8e," (Wav2Vec2 model)"),V8e.forEach(t),Htr=i(k),u0=n(k,"LI",{});var X8e=s(u0);l_e=n(X8e,"STRONG",{});var apt=s(l_e);Utr=r(apt,"xlm"),apt.forEach(t),Jtr=r(X8e," \u2014 "),mV=n(X8e,"A",{href:!0});var npt=s(mV);Ytr=r(npt,"TFXLMModel"),npt.forEach(t),Ktr=r(X8e," (XLM model)"),X8e.forEach(t),Ztr=i(k),b0=n(k,"LI",{});var z8e=s(b0);i_e=n(z8e,"STRONG",{});var spt=s(i_e);ear=r(spt,"xlm-roberta"),spt.forEach(t),oar=r(z8e," \u2014 "),gV=n(z8e,"A",{href:!0});var lpt=s(gV);rar=r(lpt,"TFXLMRobertaModel"),lpt.forEach(t),tar=r(z8e," (XLM-RoBERTa model)"),z8e.forEach(t),aar=i(k),v0=n(k,"LI",{});var Q8e=s(v0);d_e=n(Q8e,"STRONG",{});var ipt=s(d_e);nar=r(ipt,"xlnet"),ipt.forEach(t),sar=r(Q8e," \u2014 "),hV=n(Q8e,"A",{href:!0});var dpt=s(hV);lar=r(dpt,"TFXLNetModel"),dpt.forEach(t),iar=r(Q8e," (XLNet model)"),Q8e.forEach(t),k.forEach(t),dar=i(pa),c_e=n(pa,"P",{});var cpt=s(c_e);car=r(cpt,"Examples:"),cpt.forEach(t),far=i(pa),m(hA.$$.fragment,pa),pa.forEach(t),Dl.forEach(t),NBe=i(c),_c=n(c,"H2",{class:!0});var H$e=s(_c);F0=n(H$e,"A",{id:!0,class:!0,href:!0});var fpt=s(F0);f_e=n(fpt,"SPAN",{});var mpt=s(f_e);m(pA.$$.fragment,mpt),mpt.forEach(t),fpt.forEach(t),mar=i(H$e),m_e=n(H$e,"SPAN",{});var gpt=s(m_e);gar=r(gpt,"TFAutoModelForPreTraining"),gpt.forEach(t),H$e.forEach(t),jBe=i(c),Fr=n(c,"DIV",{class:!0});var Ol=s(Fr);m(_A.$$.fragment,Ol),har=i(Ol),uc=n(Ol,"P",{});var pJ=s(uc);par=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pV=n(pJ,"A",{href:!0});var hpt=s(pV);_ar=r(hpt,"from_pretrained()"),hpt.forEach(t),uar=r(pJ," class method or the "),_V=n(pJ,"A",{href:!0});var ppt=s(_V);bar=r(ppt,"from_config()"),ppt.forEach(t),Far=r(pJ,` class
method.`),pJ.forEach(t),Tar=i(Ol),uA=n(Ol,"P",{});var U$e=s(uA);Mar=r(U$e,"This class cannot be instantiated directly using "),g_e=n(U$e,"CODE",{});var _pt=s(g_e);Ear=r(_pt,"__init__()"),_pt.forEach(t),Car=r(U$e," (throws an error)."),U$e.forEach(t),war=i(Ol),ht=n(Ol,"DIV",{class:!0});var Vl=s(ht);m(bA.$$.fragment,Vl),Aar=i(Vl),h_e=n(Vl,"P",{});var upt=s(h_e);yar=r(upt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),upt.forEach(t),Lar=i(Vl),bc=n(Vl,"P",{});var _J=s(bc);xar=r(_J,`Note:
Loading a model from its configuration file does `),p_e=n(_J,"STRONG",{});var bpt=s(p_e);kar=r(bpt,"not"),bpt.forEach(t),Sar=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=n(_J,"A",{href:!0});var vpt=s(uV);Rar=r(vpt,"from_pretrained()"),vpt.forEach(t),Bar=r(_J," to load the model weights."),_J.forEach(t),Par=i(Vl),__e=n(Vl,"P",{});var Fpt=s(__e);$ar=r(Fpt,"Examples:"),Fpt.forEach(t),Iar=i(Vl),m(vA.$$.fragment,Vl),Vl.forEach(t),qar=i(Ol),po=n(Ol,"DIV",{class:!0});var _a=s(po);m(FA.$$.fragment,_a),Nar=i(_a),u_e=n(_a,"P",{});var Tpt=s(u_e);jar=r(Tpt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Tpt.forEach(t),Dar=i(_a),bn=n(_a,"P",{});var aC=s(bn);Gar=r(aC,"The model class to instantiate is selected based on the "),b_e=n(aC,"CODE",{});var Mpt=s(b_e);Oar=r(Mpt,"model_type"),Mpt.forEach(t),Var=r(aC,` property of the config object (either
passed as an argument or loaded from `),v_e=n(aC,"CODE",{});var Ept=s(v_e);Xar=r(Ept,"pretrained_model_name_or_path"),Ept.forEach(t),zar=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=n(aC,"CODE",{});var Cpt=s(F_e);Qar=r(Cpt,"pretrained_model_name_or_path"),Cpt.forEach(t),War=r(aC,":"),aC.forEach(t),Har=i(_a),H=n(_a,"UL",{});var U=s(H);T0=n(U,"LI",{});var W8e=s(T0);T_e=n(W8e,"STRONG",{});var wpt=s(T_e);Uar=r(wpt,"albert"),wpt.forEach(t),Jar=r(W8e," \u2014 "),bV=n(W8e,"A",{href:!0});var Apt=s(bV);Yar=r(Apt,"TFAlbertForPreTraining"),Apt.forEach(t),Kar=r(W8e," (ALBERT model)"),W8e.forEach(t),Zar=i(U),M0=n(U,"LI",{});var H8e=s(M0);M_e=n(H8e,"STRONG",{});var ypt=s(M_e);enr=r(ypt,"bart"),ypt.forEach(t),onr=r(H8e," \u2014 "),vV=n(H8e,"A",{href:!0});var Lpt=s(vV);rnr=r(Lpt,"TFBartForConditionalGeneration"),Lpt.forEach(t),tnr=r(H8e," (BART model)"),H8e.forEach(t),anr=i(U),E0=n(U,"LI",{});var U8e=s(E0);E_e=n(U8e,"STRONG",{});var xpt=s(E_e);nnr=r(xpt,"bert"),xpt.forEach(t),snr=r(U8e," \u2014 "),FV=n(U8e,"A",{href:!0});var kpt=s(FV);lnr=r(kpt,"TFBertForPreTraining"),kpt.forEach(t),inr=r(U8e," (BERT model)"),U8e.forEach(t),dnr=i(U),C0=n(U,"LI",{});var J8e=s(C0);C_e=n(J8e,"STRONG",{});var Spt=s(C_e);cnr=r(Spt,"camembert"),Spt.forEach(t),fnr=r(J8e," \u2014 "),TV=n(J8e,"A",{href:!0});var Rpt=s(TV);mnr=r(Rpt,"TFCamembertForMaskedLM"),Rpt.forEach(t),gnr=r(J8e," (CamemBERT model)"),J8e.forEach(t),hnr=i(U),w0=n(U,"LI",{});var Y8e=s(w0);w_e=n(Y8e,"STRONG",{});var Bpt=s(w_e);pnr=r(Bpt,"ctrl"),Bpt.forEach(t),_nr=r(Y8e," \u2014 "),MV=n(Y8e,"A",{href:!0});var Ppt=s(MV);unr=r(Ppt,"TFCTRLLMHeadModel"),Ppt.forEach(t),bnr=r(Y8e," (CTRL model)"),Y8e.forEach(t),vnr=i(U),A0=n(U,"LI",{});var K8e=s(A0);A_e=n(K8e,"STRONG",{});var $pt=s(A_e);Fnr=r($pt,"distilbert"),$pt.forEach(t),Tnr=r(K8e," \u2014 "),EV=n(K8e,"A",{href:!0});var Ipt=s(EV);Mnr=r(Ipt,"TFDistilBertForMaskedLM"),Ipt.forEach(t),Enr=r(K8e," (DistilBERT model)"),K8e.forEach(t),Cnr=i(U),y0=n(U,"LI",{});var Z8e=s(y0);y_e=n(Z8e,"STRONG",{});var qpt=s(y_e);wnr=r(qpt,"electra"),qpt.forEach(t),Anr=r(Z8e," \u2014 "),CV=n(Z8e,"A",{href:!0});var Npt=s(CV);ynr=r(Npt,"TFElectraForPreTraining"),Npt.forEach(t),Lnr=r(Z8e," (ELECTRA model)"),Z8e.forEach(t),xnr=i(U),L0=n(U,"LI",{});var e9e=s(L0);L_e=n(e9e,"STRONG",{});var jpt=s(L_e);knr=r(jpt,"flaubert"),jpt.forEach(t),Snr=r(e9e," \u2014 "),wV=n(e9e,"A",{href:!0});var Dpt=s(wV);Rnr=r(Dpt,"TFFlaubertWithLMHeadModel"),Dpt.forEach(t),Bnr=r(e9e," (FlauBERT model)"),e9e.forEach(t),Pnr=i(U),x0=n(U,"LI",{});var o9e=s(x0);x_e=n(o9e,"STRONG",{});var Gpt=s(x_e);$nr=r(Gpt,"funnel"),Gpt.forEach(t),Inr=r(o9e," \u2014 "),AV=n(o9e,"A",{href:!0});var Opt=s(AV);qnr=r(Opt,"TFFunnelForPreTraining"),Opt.forEach(t),Nnr=r(o9e," (Funnel Transformer model)"),o9e.forEach(t),jnr=i(U),k0=n(U,"LI",{});var r9e=s(k0);k_e=n(r9e,"STRONG",{});var Vpt=s(k_e);Dnr=r(Vpt,"gpt2"),Vpt.forEach(t),Gnr=r(r9e," \u2014 "),yV=n(r9e,"A",{href:!0});var Xpt=s(yV);Onr=r(Xpt,"TFGPT2LMHeadModel"),Xpt.forEach(t),Vnr=r(r9e," (OpenAI GPT-2 model)"),r9e.forEach(t),Xnr=i(U),S0=n(U,"LI",{});var t9e=s(S0);S_e=n(t9e,"STRONG",{});var zpt=s(S_e);znr=r(zpt,"layoutlm"),zpt.forEach(t),Qnr=r(t9e," \u2014 "),LV=n(t9e,"A",{href:!0});var Qpt=s(LV);Wnr=r(Qpt,"TFLayoutLMForMaskedLM"),Qpt.forEach(t),Hnr=r(t9e," (LayoutLM model)"),t9e.forEach(t),Unr=i(U),R0=n(U,"LI",{});var a9e=s(R0);R_e=n(a9e,"STRONG",{});var Wpt=s(R_e);Jnr=r(Wpt,"lxmert"),Wpt.forEach(t),Ynr=r(a9e," \u2014 "),xV=n(a9e,"A",{href:!0});var Hpt=s(xV);Knr=r(Hpt,"TFLxmertForPreTraining"),Hpt.forEach(t),Znr=r(a9e," (LXMERT model)"),a9e.forEach(t),esr=i(U),B0=n(U,"LI",{});var n9e=s(B0);B_e=n(n9e,"STRONG",{});var Upt=s(B_e);osr=r(Upt,"mobilebert"),Upt.forEach(t),rsr=r(n9e," \u2014 "),kV=n(n9e,"A",{href:!0});var Jpt=s(kV);tsr=r(Jpt,"TFMobileBertForPreTraining"),Jpt.forEach(t),asr=r(n9e," (MobileBERT model)"),n9e.forEach(t),nsr=i(U),P0=n(U,"LI",{});var s9e=s(P0);P_e=n(s9e,"STRONG",{});var Ypt=s(P_e);ssr=r(Ypt,"mpnet"),Ypt.forEach(t),lsr=r(s9e," \u2014 "),SV=n(s9e,"A",{href:!0});var Kpt=s(SV);isr=r(Kpt,"TFMPNetForMaskedLM"),Kpt.forEach(t),dsr=r(s9e," (MPNet model)"),s9e.forEach(t),csr=i(U),$0=n(U,"LI",{});var l9e=s($0);$_e=n(l9e,"STRONG",{});var Zpt=s($_e);fsr=r(Zpt,"openai-gpt"),Zpt.forEach(t),msr=r(l9e," \u2014 "),RV=n(l9e,"A",{href:!0});var e_t=s(RV);gsr=r(e_t,"TFOpenAIGPTLMHeadModel"),e_t.forEach(t),hsr=r(l9e," (OpenAI GPT model)"),l9e.forEach(t),psr=i(U),I0=n(U,"LI",{});var i9e=s(I0);I_e=n(i9e,"STRONG",{});var o_t=s(I_e);_sr=r(o_t,"roberta"),o_t.forEach(t),usr=r(i9e," \u2014 "),BV=n(i9e,"A",{href:!0});var r_t=s(BV);bsr=r(r_t,"TFRobertaForMaskedLM"),r_t.forEach(t),vsr=r(i9e," (RoBERTa model)"),i9e.forEach(t),Fsr=i(U),q0=n(U,"LI",{});var d9e=s(q0);q_e=n(d9e,"STRONG",{});var t_t=s(q_e);Tsr=r(t_t,"t5"),t_t.forEach(t),Msr=r(d9e," \u2014 "),PV=n(d9e,"A",{href:!0});var a_t=s(PV);Esr=r(a_t,"TFT5ForConditionalGeneration"),a_t.forEach(t),Csr=r(d9e," (T5 model)"),d9e.forEach(t),wsr=i(U),N0=n(U,"LI",{});var c9e=s(N0);N_e=n(c9e,"STRONG",{});var n_t=s(N_e);Asr=r(n_t,"tapas"),n_t.forEach(t),ysr=r(c9e," \u2014 "),$V=n(c9e,"A",{href:!0});var s_t=s($V);Lsr=r(s_t,"TFTapasForMaskedLM"),s_t.forEach(t),xsr=r(c9e," (TAPAS model)"),c9e.forEach(t),ksr=i(U),j0=n(U,"LI",{});var f9e=s(j0);j_e=n(f9e,"STRONG",{});var l_t=s(j_e);Ssr=r(l_t,"transfo-xl"),l_t.forEach(t),Rsr=r(f9e," \u2014 "),IV=n(f9e,"A",{href:!0});var i_t=s(IV);Bsr=r(i_t,"TFTransfoXLLMHeadModel"),i_t.forEach(t),Psr=r(f9e," (Transformer-XL model)"),f9e.forEach(t),$sr=i(U),D0=n(U,"LI",{});var m9e=s(D0);D_e=n(m9e,"STRONG",{});var d_t=s(D_e);Isr=r(d_t,"vit_mae"),d_t.forEach(t),qsr=r(m9e," \u2014 "),qV=n(m9e,"A",{href:!0});var c_t=s(qV);Nsr=r(c_t,"TFViTMAEForPreTraining"),c_t.forEach(t),jsr=r(m9e," (ViTMAE model)"),m9e.forEach(t),Dsr=i(U),G0=n(U,"LI",{});var g9e=s(G0);G_e=n(g9e,"STRONG",{});var f_t=s(G_e);Gsr=r(f_t,"xlm"),f_t.forEach(t),Osr=r(g9e," \u2014 "),NV=n(g9e,"A",{href:!0});var m_t=s(NV);Vsr=r(m_t,"TFXLMWithLMHeadModel"),m_t.forEach(t),Xsr=r(g9e," (XLM model)"),g9e.forEach(t),zsr=i(U),O0=n(U,"LI",{});var h9e=s(O0);O_e=n(h9e,"STRONG",{});var g_t=s(O_e);Qsr=r(g_t,"xlm-roberta"),g_t.forEach(t),Wsr=r(h9e," \u2014 "),jV=n(h9e,"A",{href:!0});var h_t=s(jV);Hsr=r(h_t,"TFXLMRobertaForMaskedLM"),h_t.forEach(t),Usr=r(h9e," (XLM-RoBERTa model)"),h9e.forEach(t),Jsr=i(U),V0=n(U,"LI",{});var p9e=s(V0);V_e=n(p9e,"STRONG",{});var p_t=s(V_e);Ysr=r(p_t,"xlnet"),p_t.forEach(t),Ksr=r(p9e," \u2014 "),DV=n(p9e,"A",{href:!0});var __t=s(DV);Zsr=r(__t,"TFXLNetLMHeadModel"),__t.forEach(t),elr=r(p9e," (XLNet model)"),p9e.forEach(t),U.forEach(t),olr=i(_a),X_e=n(_a,"P",{});var u_t=s(X_e);rlr=r(u_t,"Examples:"),u_t.forEach(t),tlr=i(_a),m(TA.$$.fragment,_a),_a.forEach(t),Ol.forEach(t),DBe=i(c),vc=n(c,"H2",{class:!0});var J$e=s(vc);X0=n(J$e,"A",{id:!0,class:!0,href:!0});var b_t=s(X0);z_e=n(b_t,"SPAN",{});var v_t=s(z_e);m(MA.$$.fragment,v_t),v_t.forEach(t),b_t.forEach(t),alr=i(J$e),Q_e=n(J$e,"SPAN",{});var F_t=s(Q_e);nlr=r(F_t,"TFAutoModelForCausalLM"),F_t.forEach(t),J$e.forEach(t),GBe=i(c),Tr=n(c,"DIV",{class:!0});var Xl=s(Tr);m(EA.$$.fragment,Xl),slr=i(Xl),Fc=n(Xl,"P",{});var uJ=s(Fc);llr=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GV=n(uJ,"A",{href:!0});var T_t=s(GV);ilr=r(T_t,"from_pretrained()"),T_t.forEach(t),dlr=r(uJ," class method or the "),OV=n(uJ,"A",{href:!0});var M_t=s(OV);clr=r(M_t,"from_config()"),M_t.forEach(t),flr=r(uJ,` class
method.`),uJ.forEach(t),mlr=i(Xl),CA=n(Xl,"P",{});var Y$e=s(CA);glr=r(Y$e,"This class cannot be instantiated directly using "),W_e=n(Y$e,"CODE",{});var E_t=s(W_e);hlr=r(E_t,"__init__()"),E_t.forEach(t),plr=r(Y$e," (throws an error)."),Y$e.forEach(t),_lr=i(Xl),pt=n(Xl,"DIV",{class:!0});var zl=s(pt);m(wA.$$.fragment,zl),ulr=i(zl),H_e=n(zl,"P",{});var C_t=s(H_e);blr=r(C_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),C_t.forEach(t),vlr=i(zl),Tc=n(zl,"P",{});var bJ=s(Tc);Flr=r(bJ,`Note:
Loading a model from its configuration file does `),U_e=n(bJ,"STRONG",{});var w_t=s(U_e);Tlr=r(w_t,"not"),w_t.forEach(t),Mlr=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=n(bJ,"A",{href:!0});var A_t=s(VV);Elr=r(A_t,"from_pretrained()"),A_t.forEach(t),Clr=r(bJ," to load the model weights."),bJ.forEach(t),wlr=i(zl),J_e=n(zl,"P",{});var y_t=s(J_e);Alr=r(y_t,"Examples:"),y_t.forEach(t),ylr=i(zl),m(AA.$$.fragment,zl),zl.forEach(t),Llr=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(yA.$$.fragment,ua),xlr=i(ua),Y_e=n(ua,"P",{});var L_t=s(Y_e);klr=r(L_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),L_t.forEach(t),Slr=i(ua),vn=n(ua,"P",{});var nC=s(vn);Rlr=r(nC,"The model class to instantiate is selected based on the "),K_e=n(nC,"CODE",{});var x_t=s(K_e);Blr=r(x_t,"model_type"),x_t.forEach(t),Plr=r(nC,` property of the config object (either
passed as an argument or loaded from `),Z_e=n(nC,"CODE",{});var k_t=s(Z_e);$lr=r(k_t,"pretrained_model_name_or_path"),k_t.forEach(t),Ilr=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=n(nC,"CODE",{});var S_t=s(eue);qlr=r(S_t,"pretrained_model_name_or_path"),S_t.forEach(t),Nlr=r(nC,":"),nC.forEach(t),jlr=i(ua),fe=n(ua,"UL",{});var pe=s(fe);z0=n(pe,"LI",{});var _9e=s(z0);oue=n(_9e,"STRONG",{});var R_t=s(oue);Dlr=r(R_t,"bert"),R_t.forEach(t),Glr=r(_9e," \u2014 "),XV=n(_9e,"A",{href:!0});var B_t=s(XV);Olr=r(B_t,"TFBertLMHeadModel"),B_t.forEach(t),Vlr=r(_9e," (BERT model)"),_9e.forEach(t),Xlr=i(pe),Q0=n(pe,"LI",{});var u9e=s(Q0);rue=n(u9e,"STRONG",{});var P_t=s(rue);zlr=r(P_t,"camembert"),P_t.forEach(t),Qlr=r(u9e," \u2014 "),zV=n(u9e,"A",{href:!0});var $_t=s(zV);Wlr=r($_t,"TFCamembertForCausalLM"),$_t.forEach(t),Hlr=r(u9e," (CamemBERT model)"),u9e.forEach(t),Ulr=i(pe),W0=n(pe,"LI",{});var b9e=s(W0);tue=n(b9e,"STRONG",{});var I_t=s(tue);Jlr=r(I_t,"ctrl"),I_t.forEach(t),Ylr=r(b9e," \u2014 "),QV=n(b9e,"A",{href:!0});var q_t=s(QV);Klr=r(q_t,"TFCTRLLMHeadModel"),q_t.forEach(t),Zlr=r(b9e," (CTRL model)"),b9e.forEach(t),eir=i(pe),H0=n(pe,"LI",{});var v9e=s(H0);aue=n(v9e,"STRONG",{});var N_t=s(aue);oir=r(N_t,"gpt2"),N_t.forEach(t),rir=r(v9e," \u2014 "),WV=n(v9e,"A",{href:!0});var j_t=s(WV);tir=r(j_t,"TFGPT2LMHeadModel"),j_t.forEach(t),air=r(v9e," (OpenAI GPT-2 model)"),v9e.forEach(t),nir=i(pe),U0=n(pe,"LI",{});var F9e=s(U0);nue=n(F9e,"STRONG",{});var D_t=s(nue);sir=r(D_t,"gptj"),D_t.forEach(t),lir=r(F9e," \u2014 "),HV=n(F9e,"A",{href:!0});var G_t=s(HV);iir=r(G_t,"TFGPTJForCausalLM"),G_t.forEach(t),dir=r(F9e," (GPT-J model)"),F9e.forEach(t),cir=i(pe),J0=n(pe,"LI",{});var T9e=s(J0);sue=n(T9e,"STRONG",{});var O_t=s(sue);fir=r(O_t,"openai-gpt"),O_t.forEach(t),mir=r(T9e," \u2014 "),UV=n(T9e,"A",{href:!0});var V_t=s(UV);gir=r(V_t,"TFOpenAIGPTLMHeadModel"),V_t.forEach(t),hir=r(T9e," (OpenAI GPT model)"),T9e.forEach(t),pir=i(pe),Y0=n(pe,"LI",{});var M9e=s(Y0);lue=n(M9e,"STRONG",{});var X_t=s(lue);_ir=r(X_t,"rembert"),X_t.forEach(t),uir=r(M9e," \u2014 "),JV=n(M9e,"A",{href:!0});var z_t=s(JV);bir=r(z_t,"TFRemBertForCausalLM"),z_t.forEach(t),vir=r(M9e," (RemBERT model)"),M9e.forEach(t),Fir=i(pe),K0=n(pe,"LI",{});var E9e=s(K0);iue=n(E9e,"STRONG",{});var Q_t=s(iue);Tir=r(Q_t,"roberta"),Q_t.forEach(t),Mir=r(E9e," \u2014 "),YV=n(E9e,"A",{href:!0});var W_t=s(YV);Eir=r(W_t,"TFRobertaForCausalLM"),W_t.forEach(t),Cir=r(E9e," (RoBERTa model)"),E9e.forEach(t),wir=i(pe),Z0=n(pe,"LI",{});var C9e=s(Z0);due=n(C9e,"STRONG",{});var H_t=s(due);Air=r(H_t,"roformer"),H_t.forEach(t),yir=r(C9e," \u2014 "),KV=n(C9e,"A",{href:!0});var U_t=s(KV);Lir=r(U_t,"TFRoFormerForCausalLM"),U_t.forEach(t),xir=r(C9e," (RoFormer model)"),C9e.forEach(t),kir=i(pe),eT=n(pe,"LI",{});var w9e=s(eT);cue=n(w9e,"STRONG",{});var J_t=s(cue);Sir=r(J_t,"transfo-xl"),J_t.forEach(t),Rir=r(w9e," \u2014 "),ZV=n(w9e,"A",{href:!0});var Y_t=s(ZV);Bir=r(Y_t,"TFTransfoXLLMHeadModel"),Y_t.forEach(t),Pir=r(w9e," (Transformer-XL model)"),w9e.forEach(t),$ir=i(pe),oT=n(pe,"LI",{});var A9e=s(oT);fue=n(A9e,"STRONG",{});var K_t=s(fue);Iir=r(K_t,"xlm"),K_t.forEach(t),qir=r(A9e," \u2014 "),eX=n(A9e,"A",{href:!0});var Z_t=s(eX);Nir=r(Z_t,"TFXLMWithLMHeadModel"),Z_t.forEach(t),jir=r(A9e," (XLM model)"),A9e.forEach(t),Dir=i(pe),rT=n(pe,"LI",{});var y9e=s(rT);mue=n(y9e,"STRONG",{});var eut=s(mue);Gir=r(eut,"xlnet"),eut.forEach(t),Oir=r(y9e," \u2014 "),oX=n(y9e,"A",{href:!0});var out=s(oX);Vir=r(out,"TFXLNetLMHeadModel"),out.forEach(t),Xir=r(y9e," (XLNet model)"),y9e.forEach(t),pe.forEach(t),zir=i(ua),gue=n(ua,"P",{});var rut=s(gue);Qir=r(rut,"Examples:"),rut.forEach(t),Wir=i(ua),m(LA.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),OBe=i(c),Mc=n(c,"H2",{class:!0});var K$e=s(Mc);tT=n(K$e,"A",{id:!0,class:!0,href:!0});var tut=s(tT);hue=n(tut,"SPAN",{});var aut=s(hue);m(xA.$$.fragment,aut),aut.forEach(t),tut.forEach(t),Hir=i(K$e),pue=n(K$e,"SPAN",{});var nut=s(pue);Uir=r(nut,"TFAutoModelForImageClassification"),nut.forEach(t),K$e.forEach(t),VBe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(kA.$$.fragment,Ql),Jir=i(Ql),Ec=n(Ql,"P",{});var vJ=s(Ec);Yir=r(vJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rX=n(vJ,"A",{href:!0});var sut=s(rX);Kir=r(sut,"from_pretrained()"),sut.forEach(t),Zir=r(vJ," class method or the "),tX=n(vJ,"A",{href:!0});var lut=s(tX);edr=r(lut,"from_config()"),lut.forEach(t),odr=r(vJ,` class
method.`),vJ.forEach(t),rdr=i(Ql),SA=n(Ql,"P",{});var Z$e=s(SA);tdr=r(Z$e,"This class cannot be instantiated directly using "),_ue=n(Z$e,"CODE",{});var iut=s(_ue);adr=r(iut,"__init__()"),iut.forEach(t),ndr=r(Z$e," (throws an error)."),Z$e.forEach(t),sdr=i(Ql),_t=n(Ql,"DIV",{class:!0});var Wl=s(_t);m(RA.$$.fragment,Wl),ldr=i(Wl),uue=n(Wl,"P",{});var dut=s(uue);idr=r(dut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dut.forEach(t),ddr=i(Wl),Cc=n(Wl,"P",{});var FJ=s(Cc);cdr=r(FJ,`Note:
Loading a model from its configuration file does `),bue=n(FJ,"STRONG",{});var cut=s(bue);fdr=r(cut,"not"),cut.forEach(t),mdr=r(FJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(FJ,"A",{href:!0});var fut=s(aX);gdr=r(fut,"from_pretrained()"),fut.forEach(t),hdr=r(FJ," to load the model weights."),FJ.forEach(t),pdr=i(Wl),vue=n(Wl,"P",{});var mut=s(vue);_dr=r(mut,"Examples:"),mut.forEach(t),udr=i(Wl),m(BA.$$.fragment,Wl),Wl.forEach(t),bdr=i(Ql),uo=n(Ql,"DIV",{class:!0});var ba=s(uo);m(PA.$$.fragment,ba),vdr=i(ba),Fue=n(ba,"P",{});var gut=s(Fue);Fdr=r(gut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gut.forEach(t),Tdr=i(ba),Fn=n(ba,"P",{});var sC=s(Fn);Mdr=r(sC,"The model class to instantiate is selected based on the "),Tue=n(sC,"CODE",{});var hut=s(Tue);Edr=r(hut,"model_type"),hut.forEach(t),Cdr=r(sC,` property of the config object (either
passed as an argument or loaded from `),Mue=n(sC,"CODE",{});var put=s(Mue);wdr=r(put,"pretrained_model_name_or_path"),put.forEach(t),Adr=r(sC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=n(sC,"CODE",{});var _ut=s(Eue);ydr=r(_ut,"pretrained_model_name_or_path"),_ut.forEach(t),Ldr=r(sC,":"),sC.forEach(t),xdr=i(ba),$A=n(ba,"UL",{});var eIe=s($A);aT=n(eIe,"LI",{});var L9e=s(aT);Cue=n(L9e,"STRONG",{});var uut=s(Cue);kdr=r(uut,"convnext"),uut.forEach(t),Sdr=r(L9e," \u2014 "),nX=n(L9e,"A",{href:!0});var but=s(nX);Rdr=r(but,"TFConvNextForImageClassification"),but.forEach(t),Bdr=r(L9e," (ConvNext model)"),L9e.forEach(t),Pdr=i(eIe),nT=n(eIe,"LI",{});var x9e=s(nT);wue=n(x9e,"STRONG",{});var vut=s(wue);$dr=r(vut,"vit"),vut.forEach(t),Idr=r(x9e," \u2014 "),sX=n(x9e,"A",{href:!0});var Fut=s(sX);qdr=r(Fut,"TFViTForImageClassification"),Fut.forEach(t),Ndr=r(x9e," (ViT model)"),x9e.forEach(t),eIe.forEach(t),jdr=i(ba),Aue=n(ba,"P",{});var Tut=s(Aue);Ddr=r(Tut,"Examples:"),Tut.forEach(t),Gdr=i(ba),m(IA.$$.fragment,ba),ba.forEach(t),Ql.forEach(t),XBe=i(c),wc=n(c,"H2",{class:!0});var oIe=s(wc);sT=n(oIe,"A",{id:!0,class:!0,href:!0});var Mut=s(sT);yue=n(Mut,"SPAN",{});var Eut=s(yue);m(qA.$$.fragment,Eut),Eut.forEach(t),Mut.forEach(t),Odr=i(oIe),Lue=n(oIe,"SPAN",{});var Cut=s(Lue);Vdr=r(Cut,"TFAutoModelForMaskedLM"),Cut.forEach(t),oIe.forEach(t),zBe=i(c),Er=n(c,"DIV",{class:!0});var Hl=s(Er);m(NA.$$.fragment,Hl),Xdr=i(Hl),Ac=n(Hl,"P",{});var TJ=s(Ac);zdr=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lX=n(TJ,"A",{href:!0});var wut=s(lX);Qdr=r(wut,"from_pretrained()"),wut.forEach(t),Wdr=r(TJ," class method or the "),iX=n(TJ,"A",{href:!0});var Aut=s(iX);Hdr=r(Aut,"from_config()"),Aut.forEach(t),Udr=r(TJ,` class
method.`),TJ.forEach(t),Jdr=i(Hl),jA=n(Hl,"P",{});var rIe=s(jA);Ydr=r(rIe,"This class cannot be instantiated directly using "),xue=n(rIe,"CODE",{});var yut=s(xue);Kdr=r(yut,"__init__()"),yut.forEach(t),Zdr=r(rIe," (throws an error)."),rIe.forEach(t),ecr=i(Hl),ut=n(Hl,"DIV",{class:!0});var Ul=s(ut);m(DA.$$.fragment,Ul),ocr=i(Ul),kue=n(Ul,"P",{});var Lut=s(kue);rcr=r(Lut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Lut.forEach(t),tcr=i(Ul),yc=n(Ul,"P",{});var MJ=s(yc);acr=r(MJ,`Note:
Loading a model from its configuration file does `),Sue=n(MJ,"STRONG",{});var xut=s(Sue);ncr=r(xut,"not"),xut.forEach(t),scr=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=n(MJ,"A",{href:!0});var kut=s(dX);lcr=r(kut,"from_pretrained()"),kut.forEach(t),icr=r(MJ," to load the model weights."),MJ.forEach(t),dcr=i(Ul),Rue=n(Ul,"P",{});var Sut=s(Rue);ccr=r(Sut,"Examples:"),Sut.forEach(t),fcr=i(Ul),m(GA.$$.fragment,Ul),Ul.forEach(t),mcr=i(Hl),bo=n(Hl,"DIV",{class:!0});var va=s(bo);m(OA.$$.fragment,va),gcr=i(va),Bue=n(va,"P",{});var Rut=s(Bue);hcr=r(Rut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Rut.forEach(t),pcr=i(va),Tn=n(va,"P",{});var lC=s(Tn);_cr=r(lC,"The model class to instantiate is selected based on the "),Pue=n(lC,"CODE",{});var But=s(Pue);ucr=r(But,"model_type"),But.forEach(t),bcr=r(lC,` property of the config object (either
passed as an argument or loaded from `),$ue=n(lC,"CODE",{});var Put=s($ue);vcr=r(Put,"pretrained_model_name_or_path"),Put.forEach(t),Fcr=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=n(lC,"CODE",{});var $ut=s(Iue);Tcr=r($ut,"pretrained_model_name_or_path"),$ut.forEach(t),Mcr=r(lC,":"),lC.forEach(t),Ecr=i(va),J=n(va,"UL",{});var oe=s(J);lT=n(oe,"LI",{});var k9e=s(lT);que=n(k9e,"STRONG",{});var Iut=s(que);Ccr=r(Iut,"albert"),Iut.forEach(t),wcr=r(k9e," \u2014 "),cX=n(k9e,"A",{href:!0});var qut=s(cX);Acr=r(qut,"TFAlbertForMaskedLM"),qut.forEach(t),ycr=r(k9e," (ALBERT model)"),k9e.forEach(t),Lcr=i(oe),iT=n(oe,"LI",{});var S9e=s(iT);Nue=n(S9e,"STRONG",{});var Nut=s(Nue);xcr=r(Nut,"bert"),Nut.forEach(t),kcr=r(S9e," \u2014 "),fX=n(S9e,"A",{href:!0});var jut=s(fX);Scr=r(jut,"TFBertForMaskedLM"),jut.forEach(t),Rcr=r(S9e," (BERT model)"),S9e.forEach(t),Bcr=i(oe),dT=n(oe,"LI",{});var R9e=s(dT);jue=n(R9e,"STRONG",{});var Dut=s(jue);Pcr=r(Dut,"camembert"),Dut.forEach(t),$cr=r(R9e," \u2014 "),mX=n(R9e,"A",{href:!0});var Gut=s(mX);Icr=r(Gut,"TFCamembertForMaskedLM"),Gut.forEach(t),qcr=r(R9e," (CamemBERT model)"),R9e.forEach(t),Ncr=i(oe),cT=n(oe,"LI",{});var B9e=s(cT);Due=n(B9e,"STRONG",{});var Out=s(Due);jcr=r(Out,"convbert"),Out.forEach(t),Dcr=r(B9e," \u2014 "),gX=n(B9e,"A",{href:!0});var Vut=s(gX);Gcr=r(Vut,"TFConvBertForMaskedLM"),Vut.forEach(t),Ocr=r(B9e," (ConvBERT model)"),B9e.forEach(t),Vcr=i(oe),fT=n(oe,"LI",{});var P9e=s(fT);Gue=n(P9e,"STRONG",{});var Xut=s(Gue);Xcr=r(Xut,"deberta"),Xut.forEach(t),zcr=r(P9e," \u2014 "),hX=n(P9e,"A",{href:!0});var zut=s(hX);Qcr=r(zut,"TFDebertaForMaskedLM"),zut.forEach(t),Wcr=r(P9e," (DeBERTa model)"),P9e.forEach(t),Hcr=i(oe),mT=n(oe,"LI",{});var $9e=s(mT);Oue=n($9e,"STRONG",{});var Qut=s(Oue);Ucr=r(Qut,"deberta-v2"),Qut.forEach(t),Jcr=r($9e," \u2014 "),pX=n($9e,"A",{href:!0});var Wut=s(pX);Ycr=r(Wut,"TFDebertaV2ForMaskedLM"),Wut.forEach(t),Kcr=r($9e," (DeBERTa-v2 model)"),$9e.forEach(t),Zcr=i(oe),gT=n(oe,"LI",{});var I9e=s(gT);Vue=n(I9e,"STRONG",{});var Hut=s(Vue);efr=r(Hut,"distilbert"),Hut.forEach(t),ofr=r(I9e," \u2014 "),_X=n(I9e,"A",{href:!0});var Uut=s(_X);rfr=r(Uut,"TFDistilBertForMaskedLM"),Uut.forEach(t),tfr=r(I9e," (DistilBERT model)"),I9e.forEach(t),afr=i(oe),hT=n(oe,"LI",{});var q9e=s(hT);Xue=n(q9e,"STRONG",{});var Jut=s(Xue);nfr=r(Jut,"electra"),Jut.forEach(t),sfr=r(q9e," \u2014 "),uX=n(q9e,"A",{href:!0});var Yut=s(uX);lfr=r(Yut,"TFElectraForMaskedLM"),Yut.forEach(t),ifr=r(q9e," (ELECTRA model)"),q9e.forEach(t),dfr=i(oe),pT=n(oe,"LI",{});var N9e=s(pT);zue=n(N9e,"STRONG",{});var Kut=s(zue);cfr=r(Kut,"flaubert"),Kut.forEach(t),ffr=r(N9e," \u2014 "),bX=n(N9e,"A",{href:!0});var Zut=s(bX);mfr=r(Zut,"TFFlaubertWithLMHeadModel"),Zut.forEach(t),gfr=r(N9e," (FlauBERT model)"),N9e.forEach(t),hfr=i(oe),_T=n(oe,"LI",{});var j9e=s(_T);Que=n(j9e,"STRONG",{});var e6t=s(Que);pfr=r(e6t,"funnel"),e6t.forEach(t),_fr=r(j9e," \u2014 "),vX=n(j9e,"A",{href:!0});var o6t=s(vX);ufr=r(o6t,"TFFunnelForMaskedLM"),o6t.forEach(t),bfr=r(j9e," (Funnel Transformer model)"),j9e.forEach(t),vfr=i(oe),uT=n(oe,"LI",{});var D9e=s(uT);Wue=n(D9e,"STRONG",{});var r6t=s(Wue);Ffr=r(r6t,"layoutlm"),r6t.forEach(t),Tfr=r(D9e," \u2014 "),FX=n(D9e,"A",{href:!0});var t6t=s(FX);Mfr=r(t6t,"TFLayoutLMForMaskedLM"),t6t.forEach(t),Efr=r(D9e," (LayoutLM model)"),D9e.forEach(t),Cfr=i(oe),bT=n(oe,"LI",{});var G9e=s(bT);Hue=n(G9e,"STRONG",{});var a6t=s(Hue);wfr=r(a6t,"longformer"),a6t.forEach(t),Afr=r(G9e," \u2014 "),TX=n(G9e,"A",{href:!0});var n6t=s(TX);yfr=r(n6t,"TFLongformerForMaskedLM"),n6t.forEach(t),Lfr=r(G9e," (Longformer model)"),G9e.forEach(t),xfr=i(oe),vT=n(oe,"LI",{});var O9e=s(vT);Uue=n(O9e,"STRONG",{});var s6t=s(Uue);kfr=r(s6t,"mobilebert"),s6t.forEach(t),Sfr=r(O9e," \u2014 "),MX=n(O9e,"A",{href:!0});var l6t=s(MX);Rfr=r(l6t,"TFMobileBertForMaskedLM"),l6t.forEach(t),Bfr=r(O9e," (MobileBERT model)"),O9e.forEach(t),Pfr=i(oe),FT=n(oe,"LI",{});var V9e=s(FT);Jue=n(V9e,"STRONG",{});var i6t=s(Jue);$fr=r(i6t,"mpnet"),i6t.forEach(t),Ifr=r(V9e," \u2014 "),EX=n(V9e,"A",{href:!0});var d6t=s(EX);qfr=r(d6t,"TFMPNetForMaskedLM"),d6t.forEach(t),Nfr=r(V9e," (MPNet model)"),V9e.forEach(t),jfr=i(oe),TT=n(oe,"LI",{});var X9e=s(TT);Yue=n(X9e,"STRONG",{});var c6t=s(Yue);Dfr=r(c6t,"rembert"),c6t.forEach(t),Gfr=r(X9e," \u2014 "),CX=n(X9e,"A",{href:!0});var f6t=s(CX);Ofr=r(f6t,"TFRemBertForMaskedLM"),f6t.forEach(t),Vfr=r(X9e," (RemBERT model)"),X9e.forEach(t),Xfr=i(oe),MT=n(oe,"LI",{});var z9e=s(MT);Kue=n(z9e,"STRONG",{});var m6t=s(Kue);zfr=r(m6t,"roberta"),m6t.forEach(t),Qfr=r(z9e," \u2014 "),wX=n(z9e,"A",{href:!0});var g6t=s(wX);Wfr=r(g6t,"TFRobertaForMaskedLM"),g6t.forEach(t),Hfr=r(z9e," (RoBERTa model)"),z9e.forEach(t),Ufr=i(oe),ET=n(oe,"LI",{});var Q9e=s(ET);Zue=n(Q9e,"STRONG",{});var h6t=s(Zue);Jfr=r(h6t,"roformer"),h6t.forEach(t),Yfr=r(Q9e," \u2014 "),AX=n(Q9e,"A",{href:!0});var p6t=s(AX);Kfr=r(p6t,"TFRoFormerForMaskedLM"),p6t.forEach(t),Zfr=r(Q9e," (RoFormer model)"),Q9e.forEach(t),emr=i(oe),CT=n(oe,"LI",{});var W9e=s(CT);e6e=n(W9e,"STRONG",{});var _6t=s(e6e);omr=r(_6t,"tapas"),_6t.forEach(t),rmr=r(W9e," \u2014 "),yX=n(W9e,"A",{href:!0});var u6t=s(yX);tmr=r(u6t,"TFTapasForMaskedLM"),u6t.forEach(t),amr=r(W9e," (TAPAS model)"),W9e.forEach(t),nmr=i(oe),wT=n(oe,"LI",{});var H9e=s(wT);o6e=n(H9e,"STRONG",{});var b6t=s(o6e);smr=r(b6t,"xlm"),b6t.forEach(t),lmr=r(H9e," \u2014 "),LX=n(H9e,"A",{href:!0});var v6t=s(LX);imr=r(v6t,"TFXLMWithLMHeadModel"),v6t.forEach(t),dmr=r(H9e," (XLM model)"),H9e.forEach(t),cmr=i(oe),AT=n(oe,"LI",{});var U9e=s(AT);r6e=n(U9e,"STRONG",{});var F6t=s(r6e);fmr=r(F6t,"xlm-roberta"),F6t.forEach(t),mmr=r(U9e," \u2014 "),xX=n(U9e,"A",{href:!0});var T6t=s(xX);gmr=r(T6t,"TFXLMRobertaForMaskedLM"),T6t.forEach(t),hmr=r(U9e," (XLM-RoBERTa model)"),U9e.forEach(t),oe.forEach(t),pmr=i(va),t6e=n(va,"P",{});var M6t=s(t6e);_mr=r(M6t,"Examples:"),M6t.forEach(t),umr=i(va),m(VA.$$.fragment,va),va.forEach(t),Hl.forEach(t),QBe=i(c),Lc=n(c,"H2",{class:!0});var tIe=s(Lc);yT=n(tIe,"A",{id:!0,class:!0,href:!0});var E6t=s(yT);a6e=n(E6t,"SPAN",{});var C6t=s(a6e);m(XA.$$.fragment,C6t),C6t.forEach(t),E6t.forEach(t),bmr=i(tIe),n6e=n(tIe,"SPAN",{});var w6t=s(n6e);vmr=r(w6t,"TFAutoModelForSeq2SeqLM"),w6t.forEach(t),tIe.forEach(t),WBe=i(c),Cr=n(c,"DIV",{class:!0});var Jl=s(Cr);m(zA.$$.fragment,Jl),Fmr=i(Jl),xc=n(Jl,"P",{});var EJ=s(xc);Tmr=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kX=n(EJ,"A",{href:!0});var A6t=s(kX);Mmr=r(A6t,"from_pretrained()"),A6t.forEach(t),Emr=r(EJ," class method or the "),SX=n(EJ,"A",{href:!0});var y6t=s(SX);Cmr=r(y6t,"from_config()"),y6t.forEach(t),wmr=r(EJ,` class
method.`),EJ.forEach(t),Amr=i(Jl),QA=n(Jl,"P",{});var aIe=s(QA);ymr=r(aIe,"This class cannot be instantiated directly using "),s6e=n(aIe,"CODE",{});var L6t=s(s6e);Lmr=r(L6t,"__init__()"),L6t.forEach(t),xmr=r(aIe," (throws an error)."),aIe.forEach(t),kmr=i(Jl),bt=n(Jl,"DIV",{class:!0});var Yl=s(bt);m(WA.$$.fragment,Yl),Smr=i(Yl),l6e=n(Yl,"P",{});var x6t=s(l6e);Rmr=r(x6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x6t.forEach(t),Bmr=i(Yl),kc=n(Yl,"P",{});var CJ=s(kc);Pmr=r(CJ,`Note:
Loading a model from its configuration file does `),i6e=n(CJ,"STRONG",{});var k6t=s(i6e);$mr=r(k6t,"not"),k6t.forEach(t),Imr=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=n(CJ,"A",{href:!0});var S6t=s(RX);qmr=r(S6t,"from_pretrained()"),S6t.forEach(t),Nmr=r(CJ," to load the model weights."),CJ.forEach(t),jmr=i(Yl),d6e=n(Yl,"P",{});var R6t=s(d6e);Dmr=r(R6t,"Examples:"),R6t.forEach(t),Gmr=i(Yl),m(HA.$$.fragment,Yl),Yl.forEach(t),Omr=i(Jl),vo=n(Jl,"DIV",{class:!0});var Fa=s(vo);m(UA.$$.fragment,Fa),Vmr=i(Fa),c6e=n(Fa,"P",{});var B6t=s(c6e);Xmr=r(B6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),B6t.forEach(t),zmr=i(Fa),Mn=n(Fa,"P",{});var iC=s(Mn);Qmr=r(iC,"The model class to instantiate is selected based on the "),f6e=n(iC,"CODE",{});var P6t=s(f6e);Wmr=r(P6t,"model_type"),P6t.forEach(t),Hmr=r(iC,` property of the config object (either
passed as an argument or loaded from `),m6e=n(iC,"CODE",{});var $6t=s(m6e);Umr=r($6t,"pretrained_model_name_or_path"),$6t.forEach(t),Jmr=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g6e=n(iC,"CODE",{});var I6t=s(g6e);Ymr=r(I6t,"pretrained_model_name_or_path"),I6t.forEach(t),Kmr=r(iC,":"),iC.forEach(t),Zmr=i(Fa),be=n(Fa,"UL",{});var we=s(be);LT=n(we,"LI",{});var J9e=s(LT);h6e=n(J9e,"STRONG",{});var q6t=s(h6e);egr=r(q6t,"bart"),q6t.forEach(t),ogr=r(J9e," \u2014 "),BX=n(J9e,"A",{href:!0});var N6t=s(BX);rgr=r(N6t,"TFBartForConditionalGeneration"),N6t.forEach(t),tgr=r(J9e," (BART model)"),J9e.forEach(t),agr=i(we),xT=n(we,"LI",{});var Y9e=s(xT);p6e=n(Y9e,"STRONG",{});var j6t=s(p6e);ngr=r(j6t,"blenderbot"),j6t.forEach(t),sgr=r(Y9e," \u2014 "),PX=n(Y9e,"A",{href:!0});var D6t=s(PX);lgr=r(D6t,"TFBlenderbotForConditionalGeneration"),D6t.forEach(t),igr=r(Y9e," (Blenderbot model)"),Y9e.forEach(t),dgr=i(we),kT=n(we,"LI",{});var K9e=s(kT);_6e=n(K9e,"STRONG",{});var G6t=s(_6e);cgr=r(G6t,"blenderbot-small"),G6t.forEach(t),fgr=r(K9e," \u2014 "),$X=n(K9e,"A",{href:!0});var O6t=s($X);mgr=r(O6t,"TFBlenderbotSmallForConditionalGeneration"),O6t.forEach(t),ggr=r(K9e," (BlenderbotSmall model)"),K9e.forEach(t),hgr=i(we),ST=n(we,"LI",{});var Z9e=s(ST);u6e=n(Z9e,"STRONG",{});var V6t=s(u6e);pgr=r(V6t,"encoder-decoder"),V6t.forEach(t),_gr=r(Z9e," \u2014 "),IX=n(Z9e,"A",{href:!0});var X6t=s(IX);ugr=r(X6t,"TFEncoderDecoderModel"),X6t.forEach(t),bgr=r(Z9e," (Encoder decoder model)"),Z9e.forEach(t),vgr=i(we),RT=n(we,"LI",{});var exe=s(RT);b6e=n(exe,"STRONG",{});var z6t=s(b6e);Fgr=r(z6t,"led"),z6t.forEach(t),Tgr=r(exe," \u2014 "),qX=n(exe,"A",{href:!0});var Q6t=s(qX);Mgr=r(Q6t,"TFLEDForConditionalGeneration"),Q6t.forEach(t),Egr=r(exe," (LED model)"),exe.forEach(t),Cgr=i(we),BT=n(we,"LI",{});var oxe=s(BT);v6e=n(oxe,"STRONG",{});var W6t=s(v6e);wgr=r(W6t,"marian"),W6t.forEach(t),Agr=r(oxe," \u2014 "),NX=n(oxe,"A",{href:!0});var H6t=s(NX);ygr=r(H6t,"TFMarianMTModel"),H6t.forEach(t),Lgr=r(oxe," (Marian model)"),oxe.forEach(t),xgr=i(we),PT=n(we,"LI",{});var rxe=s(PT);F6e=n(rxe,"STRONG",{});var U6t=s(F6e);kgr=r(U6t,"mbart"),U6t.forEach(t),Sgr=r(rxe," \u2014 "),jX=n(rxe,"A",{href:!0});var J6t=s(jX);Rgr=r(J6t,"TFMBartForConditionalGeneration"),J6t.forEach(t),Bgr=r(rxe," (mBART model)"),rxe.forEach(t),Pgr=i(we),$T=n(we,"LI",{});var txe=s($T);T6e=n(txe,"STRONG",{});var Y6t=s(T6e);$gr=r(Y6t,"mt5"),Y6t.forEach(t),Igr=r(txe," \u2014 "),DX=n(txe,"A",{href:!0});var K6t=s(DX);qgr=r(K6t,"TFMT5ForConditionalGeneration"),K6t.forEach(t),Ngr=r(txe," (mT5 model)"),txe.forEach(t),jgr=i(we),IT=n(we,"LI",{});var axe=s(IT);M6e=n(axe,"STRONG",{});var Z6t=s(M6e);Dgr=r(Z6t,"pegasus"),Z6t.forEach(t),Ggr=r(axe," \u2014 "),GX=n(axe,"A",{href:!0});var e1t=s(GX);Ogr=r(e1t,"TFPegasusForConditionalGeneration"),e1t.forEach(t),Vgr=r(axe," (Pegasus model)"),axe.forEach(t),Xgr=i(we),qT=n(we,"LI",{});var nxe=s(qT);E6e=n(nxe,"STRONG",{});var o1t=s(E6e);zgr=r(o1t,"t5"),o1t.forEach(t),Qgr=r(nxe," \u2014 "),OX=n(nxe,"A",{href:!0});var r1t=s(OX);Wgr=r(r1t,"TFT5ForConditionalGeneration"),r1t.forEach(t),Hgr=r(nxe," (T5 model)"),nxe.forEach(t),we.forEach(t),Ugr=i(Fa),C6e=n(Fa,"P",{});var t1t=s(C6e);Jgr=r(t1t,"Examples:"),t1t.forEach(t),Ygr=i(Fa),m(JA.$$.fragment,Fa),Fa.forEach(t),Jl.forEach(t),HBe=i(c),Sc=n(c,"H2",{class:!0});var nIe=s(Sc);NT=n(nIe,"A",{id:!0,class:!0,href:!0});var a1t=s(NT);w6e=n(a1t,"SPAN",{});var n1t=s(w6e);m(YA.$$.fragment,n1t),n1t.forEach(t),a1t.forEach(t),Kgr=i(nIe),A6e=n(nIe,"SPAN",{});var s1t=s(A6e);Zgr=r(s1t,"TFAutoModelForSequenceClassification"),s1t.forEach(t),nIe.forEach(t),UBe=i(c),wr=n(c,"DIV",{class:!0});var Kl=s(wr);m(KA.$$.fragment,Kl),ehr=i(Kl),Rc=n(Kl,"P",{});var wJ=s(Rc);ohr=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VX=n(wJ,"A",{href:!0});var l1t=s(VX);rhr=r(l1t,"from_pretrained()"),l1t.forEach(t),thr=r(wJ," class method or the "),XX=n(wJ,"A",{href:!0});var i1t=s(XX);ahr=r(i1t,"from_config()"),i1t.forEach(t),nhr=r(wJ,` class
method.`),wJ.forEach(t),shr=i(Kl),ZA=n(Kl,"P",{});var sIe=s(ZA);lhr=r(sIe,"This class cannot be instantiated directly using "),y6e=n(sIe,"CODE",{});var d1t=s(y6e);ihr=r(d1t,"__init__()"),d1t.forEach(t),dhr=r(sIe," (throws an error)."),sIe.forEach(t),chr=i(Kl),vt=n(Kl,"DIV",{class:!0});var Zl=s(vt);m(ey.$$.fragment,Zl),fhr=i(Zl),L6e=n(Zl,"P",{});var c1t=s(L6e);mhr=r(c1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),c1t.forEach(t),ghr=i(Zl),Bc=n(Zl,"P",{});var AJ=s(Bc);hhr=r(AJ,`Note:
Loading a model from its configuration file does `),x6e=n(AJ,"STRONG",{});var f1t=s(x6e);phr=r(f1t,"not"),f1t.forEach(t),_hr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=n(AJ,"A",{href:!0});var m1t=s(zX);uhr=r(m1t,"from_pretrained()"),m1t.forEach(t),bhr=r(AJ," to load the model weights."),AJ.forEach(t),vhr=i(Zl),k6e=n(Zl,"P",{});var g1t=s(k6e);Fhr=r(g1t,"Examples:"),g1t.forEach(t),Thr=i(Zl),m(oy.$$.fragment,Zl),Zl.forEach(t),Mhr=i(Kl),Fo=n(Kl,"DIV",{class:!0});var Ta=s(Fo);m(ry.$$.fragment,Ta),Ehr=i(Ta),S6e=n(Ta,"P",{});var h1t=s(S6e);Chr=r(h1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),h1t.forEach(t),whr=i(Ta),En=n(Ta,"P",{});var dC=s(En);Ahr=r(dC,"The model class to instantiate is selected based on the "),R6e=n(dC,"CODE",{});var p1t=s(R6e);yhr=r(p1t,"model_type"),p1t.forEach(t),Lhr=r(dC,` property of the config object (either
passed as an argument or loaded from `),B6e=n(dC,"CODE",{});var _1t=s(B6e);xhr=r(_1t,"pretrained_model_name_or_path"),_1t.forEach(t),khr=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=n(dC,"CODE",{});var u1t=s(P6e);Shr=r(u1t,"pretrained_model_name_or_path"),u1t.forEach(t),Rhr=r(dC,":"),dC.forEach(t),Bhr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);jT=n(Q,"LI",{});var sxe=s(jT);$6e=n(sxe,"STRONG",{});var b1t=s($6e);Phr=r(b1t,"albert"),b1t.forEach(t),$hr=r(sxe," \u2014 "),QX=n(sxe,"A",{href:!0});var v1t=s(QX);Ihr=r(v1t,"TFAlbertForSequenceClassification"),v1t.forEach(t),qhr=r(sxe," (ALBERT model)"),sxe.forEach(t),Nhr=i(Q),DT=n(Q,"LI",{});var lxe=s(DT);I6e=n(lxe,"STRONG",{});var F1t=s(I6e);jhr=r(F1t,"bert"),F1t.forEach(t),Dhr=r(lxe," \u2014 "),WX=n(lxe,"A",{href:!0});var T1t=s(WX);Ghr=r(T1t,"TFBertForSequenceClassification"),T1t.forEach(t),Ohr=r(lxe," (BERT model)"),lxe.forEach(t),Vhr=i(Q),GT=n(Q,"LI",{});var ixe=s(GT);q6e=n(ixe,"STRONG",{});var M1t=s(q6e);Xhr=r(M1t,"camembert"),M1t.forEach(t),zhr=r(ixe," \u2014 "),HX=n(ixe,"A",{href:!0});var E1t=s(HX);Qhr=r(E1t,"TFCamembertForSequenceClassification"),E1t.forEach(t),Whr=r(ixe," (CamemBERT model)"),ixe.forEach(t),Hhr=i(Q),OT=n(Q,"LI",{});var dxe=s(OT);N6e=n(dxe,"STRONG",{});var C1t=s(N6e);Uhr=r(C1t,"convbert"),C1t.forEach(t),Jhr=r(dxe," \u2014 "),UX=n(dxe,"A",{href:!0});var w1t=s(UX);Yhr=r(w1t,"TFConvBertForSequenceClassification"),w1t.forEach(t),Khr=r(dxe," (ConvBERT model)"),dxe.forEach(t),Zhr=i(Q),VT=n(Q,"LI",{});var cxe=s(VT);j6e=n(cxe,"STRONG",{});var A1t=s(j6e);epr=r(A1t,"ctrl"),A1t.forEach(t),opr=r(cxe," \u2014 "),JX=n(cxe,"A",{href:!0});var y1t=s(JX);rpr=r(y1t,"TFCTRLForSequenceClassification"),y1t.forEach(t),tpr=r(cxe," (CTRL model)"),cxe.forEach(t),apr=i(Q),XT=n(Q,"LI",{});var fxe=s(XT);D6e=n(fxe,"STRONG",{});var L1t=s(D6e);npr=r(L1t,"deberta"),L1t.forEach(t),spr=r(fxe," \u2014 "),YX=n(fxe,"A",{href:!0});var x1t=s(YX);lpr=r(x1t,"TFDebertaForSequenceClassification"),x1t.forEach(t),ipr=r(fxe," (DeBERTa model)"),fxe.forEach(t),dpr=i(Q),zT=n(Q,"LI",{});var mxe=s(zT);G6e=n(mxe,"STRONG",{});var k1t=s(G6e);cpr=r(k1t,"deberta-v2"),k1t.forEach(t),fpr=r(mxe," \u2014 "),KX=n(mxe,"A",{href:!0});var S1t=s(KX);mpr=r(S1t,"TFDebertaV2ForSequenceClassification"),S1t.forEach(t),gpr=r(mxe," (DeBERTa-v2 model)"),mxe.forEach(t),hpr=i(Q),QT=n(Q,"LI",{});var gxe=s(QT);O6e=n(gxe,"STRONG",{});var R1t=s(O6e);ppr=r(R1t,"distilbert"),R1t.forEach(t),_pr=r(gxe," \u2014 "),ZX=n(gxe,"A",{href:!0});var B1t=s(ZX);upr=r(B1t,"TFDistilBertForSequenceClassification"),B1t.forEach(t),bpr=r(gxe," (DistilBERT model)"),gxe.forEach(t),vpr=i(Q),WT=n(Q,"LI",{});var hxe=s(WT);V6e=n(hxe,"STRONG",{});var P1t=s(V6e);Fpr=r(P1t,"electra"),P1t.forEach(t),Tpr=r(hxe," \u2014 "),ez=n(hxe,"A",{href:!0});var $1t=s(ez);Mpr=r($1t,"TFElectraForSequenceClassification"),$1t.forEach(t),Epr=r(hxe," (ELECTRA model)"),hxe.forEach(t),Cpr=i(Q),HT=n(Q,"LI",{});var pxe=s(HT);X6e=n(pxe,"STRONG",{});var I1t=s(X6e);wpr=r(I1t,"flaubert"),I1t.forEach(t),Apr=r(pxe," \u2014 "),oz=n(pxe,"A",{href:!0});var q1t=s(oz);ypr=r(q1t,"TFFlaubertForSequenceClassification"),q1t.forEach(t),Lpr=r(pxe," (FlauBERT model)"),pxe.forEach(t),xpr=i(Q),UT=n(Q,"LI",{});var _xe=s(UT);z6e=n(_xe,"STRONG",{});var N1t=s(z6e);kpr=r(N1t,"funnel"),N1t.forEach(t),Spr=r(_xe," \u2014 "),rz=n(_xe,"A",{href:!0});var j1t=s(rz);Rpr=r(j1t,"TFFunnelForSequenceClassification"),j1t.forEach(t),Bpr=r(_xe," (Funnel Transformer model)"),_xe.forEach(t),Ppr=i(Q),JT=n(Q,"LI",{});var uxe=s(JT);Q6e=n(uxe,"STRONG",{});var D1t=s(Q6e);$pr=r(D1t,"gpt2"),D1t.forEach(t),Ipr=r(uxe," \u2014 "),tz=n(uxe,"A",{href:!0});var G1t=s(tz);qpr=r(G1t,"TFGPT2ForSequenceClassification"),G1t.forEach(t),Npr=r(uxe," (OpenAI GPT-2 model)"),uxe.forEach(t),jpr=i(Q),YT=n(Q,"LI",{});var bxe=s(YT);W6e=n(bxe,"STRONG",{});var O1t=s(W6e);Dpr=r(O1t,"gptj"),O1t.forEach(t),Gpr=r(bxe," \u2014 "),az=n(bxe,"A",{href:!0});var V1t=s(az);Opr=r(V1t,"TFGPTJForSequenceClassification"),V1t.forEach(t),Vpr=r(bxe," (GPT-J model)"),bxe.forEach(t),Xpr=i(Q),KT=n(Q,"LI",{});var vxe=s(KT);H6e=n(vxe,"STRONG",{});var X1t=s(H6e);zpr=r(X1t,"layoutlm"),X1t.forEach(t),Qpr=r(vxe," \u2014 "),nz=n(vxe,"A",{href:!0});var z1t=s(nz);Wpr=r(z1t,"TFLayoutLMForSequenceClassification"),z1t.forEach(t),Hpr=r(vxe," (LayoutLM model)"),vxe.forEach(t),Upr=i(Q),ZT=n(Q,"LI",{});var Fxe=s(ZT);U6e=n(Fxe,"STRONG",{});var Q1t=s(U6e);Jpr=r(Q1t,"longformer"),Q1t.forEach(t),Ypr=r(Fxe," \u2014 "),sz=n(Fxe,"A",{href:!0});var W1t=s(sz);Kpr=r(W1t,"TFLongformerForSequenceClassification"),W1t.forEach(t),Zpr=r(Fxe," (Longformer model)"),Fxe.forEach(t),e_r=i(Q),e7=n(Q,"LI",{});var Txe=s(e7);J6e=n(Txe,"STRONG",{});var H1t=s(J6e);o_r=r(H1t,"mobilebert"),H1t.forEach(t),r_r=r(Txe," \u2014 "),lz=n(Txe,"A",{href:!0});var U1t=s(lz);t_r=r(U1t,"TFMobileBertForSequenceClassification"),U1t.forEach(t),a_r=r(Txe," (MobileBERT model)"),Txe.forEach(t),n_r=i(Q),o7=n(Q,"LI",{});var Mxe=s(o7);Y6e=n(Mxe,"STRONG",{});var J1t=s(Y6e);s_r=r(J1t,"mpnet"),J1t.forEach(t),l_r=r(Mxe," \u2014 "),iz=n(Mxe,"A",{href:!0});var Y1t=s(iz);i_r=r(Y1t,"TFMPNetForSequenceClassification"),Y1t.forEach(t),d_r=r(Mxe," (MPNet model)"),Mxe.forEach(t),c_r=i(Q),r7=n(Q,"LI",{});var Exe=s(r7);K6e=n(Exe,"STRONG",{});var K1t=s(K6e);f_r=r(K1t,"openai-gpt"),K1t.forEach(t),m_r=r(Exe," \u2014 "),dz=n(Exe,"A",{href:!0});var Z1t=s(dz);g_r=r(Z1t,"TFOpenAIGPTForSequenceClassification"),Z1t.forEach(t),h_r=r(Exe," (OpenAI GPT model)"),Exe.forEach(t),p_r=i(Q),t7=n(Q,"LI",{});var Cxe=s(t7);Z6e=n(Cxe,"STRONG",{});var ebt=s(Z6e);__r=r(ebt,"rembert"),ebt.forEach(t),u_r=r(Cxe," \u2014 "),cz=n(Cxe,"A",{href:!0});var obt=s(cz);b_r=r(obt,"TFRemBertForSequenceClassification"),obt.forEach(t),v_r=r(Cxe," (RemBERT model)"),Cxe.forEach(t),F_r=i(Q),a7=n(Q,"LI",{});var wxe=s(a7);e1e=n(wxe,"STRONG",{});var rbt=s(e1e);T_r=r(rbt,"roberta"),rbt.forEach(t),M_r=r(wxe," \u2014 "),fz=n(wxe,"A",{href:!0});var tbt=s(fz);E_r=r(tbt,"TFRobertaForSequenceClassification"),tbt.forEach(t),C_r=r(wxe," (RoBERTa model)"),wxe.forEach(t),w_r=i(Q),n7=n(Q,"LI",{});var Axe=s(n7);o1e=n(Axe,"STRONG",{});var abt=s(o1e);A_r=r(abt,"roformer"),abt.forEach(t),y_r=r(Axe," \u2014 "),mz=n(Axe,"A",{href:!0});var nbt=s(mz);L_r=r(nbt,"TFRoFormerForSequenceClassification"),nbt.forEach(t),x_r=r(Axe," (RoFormer model)"),Axe.forEach(t),k_r=i(Q),s7=n(Q,"LI",{});var yxe=s(s7);r1e=n(yxe,"STRONG",{});var sbt=s(r1e);S_r=r(sbt,"tapas"),sbt.forEach(t),R_r=r(yxe," \u2014 "),gz=n(yxe,"A",{href:!0});var lbt=s(gz);B_r=r(lbt,"TFTapasForSequenceClassification"),lbt.forEach(t),P_r=r(yxe," (TAPAS model)"),yxe.forEach(t),$_r=i(Q),l7=n(Q,"LI",{});var Lxe=s(l7);t1e=n(Lxe,"STRONG",{});var ibt=s(t1e);I_r=r(ibt,"transfo-xl"),ibt.forEach(t),q_r=r(Lxe," \u2014 "),hz=n(Lxe,"A",{href:!0});var dbt=s(hz);N_r=r(dbt,"TFTransfoXLForSequenceClassification"),dbt.forEach(t),j_r=r(Lxe," (Transformer-XL model)"),Lxe.forEach(t),D_r=i(Q),i7=n(Q,"LI",{});var xxe=s(i7);a1e=n(xxe,"STRONG",{});var cbt=s(a1e);G_r=r(cbt,"xlm"),cbt.forEach(t),O_r=r(xxe," \u2014 "),pz=n(xxe,"A",{href:!0});var fbt=s(pz);V_r=r(fbt,"TFXLMForSequenceClassification"),fbt.forEach(t),X_r=r(xxe," (XLM model)"),xxe.forEach(t),z_r=i(Q),d7=n(Q,"LI",{});var kxe=s(d7);n1e=n(kxe,"STRONG",{});var mbt=s(n1e);Q_r=r(mbt,"xlm-roberta"),mbt.forEach(t),W_r=r(kxe," \u2014 "),_z=n(kxe,"A",{href:!0});var gbt=s(_z);H_r=r(gbt,"TFXLMRobertaForSequenceClassification"),gbt.forEach(t),U_r=r(kxe," (XLM-RoBERTa model)"),kxe.forEach(t),J_r=i(Q),c7=n(Q,"LI",{});var Sxe=s(c7);s1e=n(Sxe,"STRONG",{});var hbt=s(s1e);Y_r=r(hbt,"xlnet"),hbt.forEach(t),K_r=r(Sxe," \u2014 "),uz=n(Sxe,"A",{href:!0});var pbt=s(uz);Z_r=r(pbt,"TFXLNetForSequenceClassification"),pbt.forEach(t),eur=r(Sxe," (XLNet model)"),Sxe.forEach(t),Q.forEach(t),our=i(Ta),l1e=n(Ta,"P",{});var _bt=s(l1e);rur=r(_bt,"Examples:"),_bt.forEach(t),tur=i(Ta),m(ty.$$.fragment,Ta),Ta.forEach(t),Kl.forEach(t),JBe=i(c),Pc=n(c,"H2",{class:!0});var lIe=s(Pc);f7=n(lIe,"A",{id:!0,class:!0,href:!0});var ubt=s(f7);i1e=n(ubt,"SPAN",{});var bbt=s(i1e);m(ay.$$.fragment,bbt),bbt.forEach(t),ubt.forEach(t),aur=i(lIe),d1e=n(lIe,"SPAN",{});var vbt=s(d1e);nur=r(vbt,"TFAutoModelForMultipleChoice"),vbt.forEach(t),lIe.forEach(t),YBe=i(c),Ar=n(c,"DIV",{class:!0});var ei=s(Ar);m(ny.$$.fragment,ei),sur=i(ei),$c=n(ei,"P",{});var yJ=s($c);lur=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bz=n(yJ,"A",{href:!0});var Fbt=s(bz);iur=r(Fbt,"from_pretrained()"),Fbt.forEach(t),dur=r(yJ," class method or the "),vz=n(yJ,"A",{href:!0});var Tbt=s(vz);cur=r(Tbt,"from_config()"),Tbt.forEach(t),fur=r(yJ,` class
method.`),yJ.forEach(t),mur=i(ei),sy=n(ei,"P",{});var iIe=s(sy);gur=r(iIe,"This class cannot be instantiated directly using "),c1e=n(iIe,"CODE",{});var Mbt=s(c1e);hur=r(Mbt,"__init__()"),Mbt.forEach(t),pur=r(iIe," (throws an error)."),iIe.forEach(t),_ur=i(ei),Ft=n(ei,"DIV",{class:!0});var oi=s(Ft);m(ly.$$.fragment,oi),uur=i(oi),f1e=n(oi,"P",{});var Ebt=s(f1e);bur=r(Ebt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ebt.forEach(t),vur=i(oi),Ic=n(oi,"P",{});var LJ=s(Ic);Fur=r(LJ,`Note:
Loading a model from its configuration file does `),m1e=n(LJ,"STRONG",{});var Cbt=s(m1e);Tur=r(Cbt,"not"),Cbt.forEach(t),Mur=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=n(LJ,"A",{href:!0});var wbt=s(Fz);Eur=r(wbt,"from_pretrained()"),wbt.forEach(t),Cur=r(LJ," to load the model weights."),LJ.forEach(t),wur=i(oi),g1e=n(oi,"P",{});var Abt=s(g1e);Aur=r(Abt,"Examples:"),Abt.forEach(t),yur=i(oi),m(iy.$$.fragment,oi),oi.forEach(t),Lur=i(ei),To=n(ei,"DIV",{class:!0});var Ma=s(To);m(dy.$$.fragment,Ma),xur=i(Ma),h1e=n(Ma,"P",{});var ybt=s(h1e);kur=r(ybt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ybt.forEach(t),Sur=i(Ma),Cn=n(Ma,"P",{});var cC=s(Cn);Rur=r(cC,"The model class to instantiate is selected based on the "),p1e=n(cC,"CODE",{});var Lbt=s(p1e);Bur=r(Lbt,"model_type"),Lbt.forEach(t),Pur=r(cC,` property of the config object (either
passed as an argument or loaded from `),_1e=n(cC,"CODE",{});var xbt=s(_1e);$ur=r(xbt,"pretrained_model_name_or_path"),xbt.forEach(t),Iur=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=n(cC,"CODE",{});var kbt=s(u1e);qur=r(kbt,"pretrained_model_name_or_path"),kbt.forEach(t),Nur=r(cC,":"),cC.forEach(t),jur=i(Ma),se=n(Ma,"UL",{});var ie=s(se);m7=n(ie,"LI",{});var Rxe=s(m7);b1e=n(Rxe,"STRONG",{});var Sbt=s(b1e);Dur=r(Sbt,"albert"),Sbt.forEach(t),Gur=r(Rxe," \u2014 "),Tz=n(Rxe,"A",{href:!0});var Rbt=s(Tz);Our=r(Rbt,"TFAlbertForMultipleChoice"),Rbt.forEach(t),Vur=r(Rxe," (ALBERT model)"),Rxe.forEach(t),Xur=i(ie),g7=n(ie,"LI",{});var Bxe=s(g7);v1e=n(Bxe,"STRONG",{});var Bbt=s(v1e);zur=r(Bbt,"bert"),Bbt.forEach(t),Qur=r(Bxe," \u2014 "),Mz=n(Bxe,"A",{href:!0});var Pbt=s(Mz);Wur=r(Pbt,"TFBertForMultipleChoice"),Pbt.forEach(t),Hur=r(Bxe," (BERT model)"),Bxe.forEach(t),Uur=i(ie),h7=n(ie,"LI",{});var Pxe=s(h7);F1e=n(Pxe,"STRONG",{});var $bt=s(F1e);Jur=r($bt,"camembert"),$bt.forEach(t),Yur=r(Pxe," \u2014 "),Ez=n(Pxe,"A",{href:!0});var Ibt=s(Ez);Kur=r(Ibt,"TFCamembertForMultipleChoice"),Ibt.forEach(t),Zur=r(Pxe," (CamemBERT model)"),Pxe.forEach(t),e6r=i(ie),p7=n(ie,"LI",{});var $xe=s(p7);T1e=n($xe,"STRONG",{});var qbt=s(T1e);o6r=r(qbt,"convbert"),qbt.forEach(t),r6r=r($xe," \u2014 "),Cz=n($xe,"A",{href:!0});var Nbt=s(Cz);t6r=r(Nbt,"TFConvBertForMultipleChoice"),Nbt.forEach(t),a6r=r($xe," (ConvBERT model)"),$xe.forEach(t),n6r=i(ie),_7=n(ie,"LI",{});var Ixe=s(_7);M1e=n(Ixe,"STRONG",{});var jbt=s(M1e);s6r=r(jbt,"distilbert"),jbt.forEach(t),l6r=r(Ixe," \u2014 "),wz=n(Ixe,"A",{href:!0});var Dbt=s(wz);i6r=r(Dbt,"TFDistilBertForMultipleChoice"),Dbt.forEach(t),d6r=r(Ixe," (DistilBERT model)"),Ixe.forEach(t),c6r=i(ie),u7=n(ie,"LI",{});var qxe=s(u7);E1e=n(qxe,"STRONG",{});var Gbt=s(E1e);f6r=r(Gbt,"electra"),Gbt.forEach(t),m6r=r(qxe," \u2014 "),Az=n(qxe,"A",{href:!0});var Obt=s(Az);g6r=r(Obt,"TFElectraForMultipleChoice"),Obt.forEach(t),h6r=r(qxe," (ELECTRA model)"),qxe.forEach(t),p6r=i(ie),b7=n(ie,"LI",{});var Nxe=s(b7);C1e=n(Nxe,"STRONG",{});var Vbt=s(C1e);_6r=r(Vbt,"flaubert"),Vbt.forEach(t),u6r=r(Nxe," \u2014 "),yz=n(Nxe,"A",{href:!0});var Xbt=s(yz);b6r=r(Xbt,"TFFlaubertForMultipleChoice"),Xbt.forEach(t),v6r=r(Nxe," (FlauBERT model)"),Nxe.forEach(t),F6r=i(ie),v7=n(ie,"LI",{});var jxe=s(v7);w1e=n(jxe,"STRONG",{});var zbt=s(w1e);T6r=r(zbt,"funnel"),zbt.forEach(t),M6r=r(jxe," \u2014 "),Lz=n(jxe,"A",{href:!0});var Qbt=s(Lz);E6r=r(Qbt,"TFFunnelForMultipleChoice"),Qbt.forEach(t),C6r=r(jxe," (Funnel Transformer model)"),jxe.forEach(t),w6r=i(ie),F7=n(ie,"LI",{});var Dxe=s(F7);A1e=n(Dxe,"STRONG",{});var Wbt=s(A1e);A6r=r(Wbt,"longformer"),Wbt.forEach(t),y6r=r(Dxe," \u2014 "),xz=n(Dxe,"A",{href:!0});var Hbt=s(xz);L6r=r(Hbt,"TFLongformerForMultipleChoice"),Hbt.forEach(t),x6r=r(Dxe," (Longformer model)"),Dxe.forEach(t),k6r=i(ie),T7=n(ie,"LI",{});var Gxe=s(T7);y1e=n(Gxe,"STRONG",{});var Ubt=s(y1e);S6r=r(Ubt,"mobilebert"),Ubt.forEach(t),R6r=r(Gxe," \u2014 "),kz=n(Gxe,"A",{href:!0});var Jbt=s(kz);B6r=r(Jbt,"TFMobileBertForMultipleChoice"),Jbt.forEach(t),P6r=r(Gxe," (MobileBERT model)"),Gxe.forEach(t),$6r=i(ie),M7=n(ie,"LI",{});var Oxe=s(M7);L1e=n(Oxe,"STRONG",{});var Ybt=s(L1e);I6r=r(Ybt,"mpnet"),Ybt.forEach(t),q6r=r(Oxe," \u2014 "),Sz=n(Oxe,"A",{href:!0});var Kbt=s(Sz);N6r=r(Kbt,"TFMPNetForMultipleChoice"),Kbt.forEach(t),j6r=r(Oxe," (MPNet model)"),Oxe.forEach(t),D6r=i(ie),E7=n(ie,"LI",{});var Vxe=s(E7);x1e=n(Vxe,"STRONG",{});var Zbt=s(x1e);G6r=r(Zbt,"rembert"),Zbt.forEach(t),O6r=r(Vxe," \u2014 "),Rz=n(Vxe,"A",{href:!0});var e2t=s(Rz);V6r=r(e2t,"TFRemBertForMultipleChoice"),e2t.forEach(t),X6r=r(Vxe," (RemBERT model)"),Vxe.forEach(t),z6r=i(ie),C7=n(ie,"LI",{});var Xxe=s(C7);k1e=n(Xxe,"STRONG",{});var o2t=s(k1e);Q6r=r(o2t,"roberta"),o2t.forEach(t),W6r=r(Xxe," \u2014 "),Bz=n(Xxe,"A",{href:!0});var r2t=s(Bz);H6r=r(r2t,"TFRobertaForMultipleChoice"),r2t.forEach(t),U6r=r(Xxe," (RoBERTa model)"),Xxe.forEach(t),J6r=i(ie),w7=n(ie,"LI",{});var zxe=s(w7);S1e=n(zxe,"STRONG",{});var t2t=s(S1e);Y6r=r(t2t,"roformer"),t2t.forEach(t),K6r=r(zxe," \u2014 "),Pz=n(zxe,"A",{href:!0});var a2t=s(Pz);Z6r=r(a2t,"TFRoFormerForMultipleChoice"),a2t.forEach(t),e1r=r(zxe," (RoFormer model)"),zxe.forEach(t),o1r=i(ie),A7=n(ie,"LI",{});var Qxe=s(A7);R1e=n(Qxe,"STRONG",{});var n2t=s(R1e);r1r=r(n2t,"xlm"),n2t.forEach(t),t1r=r(Qxe," \u2014 "),$z=n(Qxe,"A",{href:!0});var s2t=s($z);a1r=r(s2t,"TFXLMForMultipleChoice"),s2t.forEach(t),n1r=r(Qxe," (XLM model)"),Qxe.forEach(t),s1r=i(ie),y7=n(ie,"LI",{});var Wxe=s(y7);B1e=n(Wxe,"STRONG",{});var l2t=s(B1e);l1r=r(l2t,"xlm-roberta"),l2t.forEach(t),i1r=r(Wxe," \u2014 "),Iz=n(Wxe,"A",{href:!0});var i2t=s(Iz);d1r=r(i2t,"TFXLMRobertaForMultipleChoice"),i2t.forEach(t),c1r=r(Wxe," (XLM-RoBERTa model)"),Wxe.forEach(t),f1r=i(ie),L7=n(ie,"LI",{});var Hxe=s(L7);P1e=n(Hxe,"STRONG",{});var d2t=s(P1e);m1r=r(d2t,"xlnet"),d2t.forEach(t),g1r=r(Hxe," \u2014 "),qz=n(Hxe,"A",{href:!0});var c2t=s(qz);h1r=r(c2t,"TFXLNetForMultipleChoice"),c2t.forEach(t),p1r=r(Hxe," (XLNet model)"),Hxe.forEach(t),ie.forEach(t),_1r=i(Ma),$1e=n(Ma,"P",{});var f2t=s($1e);u1r=r(f2t,"Examples:"),f2t.forEach(t),b1r=i(Ma),m(cy.$$.fragment,Ma),Ma.forEach(t),ei.forEach(t),KBe=i(c),qc=n(c,"H2",{class:!0});var dIe=s(qc);x7=n(dIe,"A",{id:!0,class:!0,href:!0});var m2t=s(x7);I1e=n(m2t,"SPAN",{});var g2t=s(I1e);m(fy.$$.fragment,g2t),g2t.forEach(t),m2t.forEach(t),v1r=i(dIe),q1e=n(dIe,"SPAN",{});var h2t=s(q1e);F1r=r(h2t,"TFAutoModelForTableQuestionAnswering"),h2t.forEach(t),dIe.forEach(t),ZBe=i(c),yr=n(c,"DIV",{class:!0});var ri=s(yr);m(my.$$.fragment,ri),T1r=i(ri),Nc=n(ri,"P",{});var xJ=s(Nc);M1r=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Nz=n(xJ,"A",{href:!0});var p2t=s(Nz);E1r=r(p2t,"from_pretrained()"),p2t.forEach(t),C1r=r(xJ," class method or the "),jz=n(xJ,"A",{href:!0});var _2t=s(jz);w1r=r(_2t,"from_config()"),_2t.forEach(t),A1r=r(xJ,` class
method.`),xJ.forEach(t),y1r=i(ri),gy=n(ri,"P",{});var cIe=s(gy);L1r=r(cIe,"This class cannot be instantiated directly using "),N1e=n(cIe,"CODE",{});var u2t=s(N1e);x1r=r(u2t,"__init__()"),u2t.forEach(t),k1r=r(cIe," (throws an error)."),cIe.forEach(t),S1r=i(ri),Tt=n(ri,"DIV",{class:!0});var ti=s(Tt);m(hy.$$.fragment,ti),R1r=i(ti),j1e=n(ti,"P",{});var b2t=s(j1e);B1r=r(b2t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),b2t.forEach(t),P1r=i(ti),jc=n(ti,"P",{});var kJ=s(jc);$1r=r(kJ,`Note:
Loading a model from its configuration file does `),D1e=n(kJ,"STRONG",{});var v2t=s(D1e);I1r=r(v2t,"not"),v2t.forEach(t),q1r=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(kJ,"A",{href:!0});var F2t=s(Dz);N1r=r(F2t,"from_pretrained()"),F2t.forEach(t),j1r=r(kJ," to load the model weights."),kJ.forEach(t),D1r=i(ti),G1e=n(ti,"P",{});var T2t=s(G1e);G1r=r(T2t,"Examples:"),T2t.forEach(t),O1r=i(ti),m(py.$$.fragment,ti),ti.forEach(t),V1r=i(ri),Mo=n(ri,"DIV",{class:!0});var Ea=s(Mo);m(_y.$$.fragment,Ea),X1r=i(Ea),O1e=n(Ea,"P",{});var M2t=s(O1e);z1r=r(M2t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),M2t.forEach(t),Q1r=i(Ea),wn=n(Ea,"P",{});var fC=s(wn);W1r=r(fC,"The model class to instantiate is selected based on the "),V1e=n(fC,"CODE",{});var E2t=s(V1e);H1r=r(E2t,"model_type"),E2t.forEach(t),U1r=r(fC,` property of the config object (either
passed as an argument or loaded from `),X1e=n(fC,"CODE",{});var C2t=s(X1e);J1r=r(C2t,"pretrained_model_name_or_path"),C2t.forEach(t),Y1r=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=n(fC,"CODE",{});var w2t=s(z1e);K1r=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),Z1r=r(fC,":"),fC.forEach(t),ebr=i(Ea),Q1e=n(Ea,"UL",{});var A2t=s(Q1e);k7=n(A2t,"LI",{});var Uxe=s(k7);W1e=n(Uxe,"STRONG",{});var y2t=s(W1e);obr=r(y2t,"tapas"),y2t.forEach(t),rbr=r(Uxe," \u2014 "),Gz=n(Uxe,"A",{href:!0});var L2t=s(Gz);tbr=r(L2t,"TFTapasForQuestionAnswering"),L2t.forEach(t),abr=r(Uxe," (TAPAS model)"),Uxe.forEach(t),A2t.forEach(t),nbr=i(Ea),H1e=n(Ea,"P",{});var x2t=s(H1e);sbr=r(x2t,"Examples:"),x2t.forEach(t),lbr=i(Ea),m(uy.$$.fragment,Ea),Ea.forEach(t),ri.forEach(t),ePe=i(c),Dc=n(c,"H2",{class:!0});var fIe=s(Dc);S7=n(fIe,"A",{id:!0,class:!0,href:!0});var k2t=s(S7);U1e=n(k2t,"SPAN",{});var S2t=s(U1e);m(by.$$.fragment,S2t),S2t.forEach(t),k2t.forEach(t),ibr=i(fIe),J1e=n(fIe,"SPAN",{});var R2t=s(J1e);dbr=r(R2t,"TFAutoModelForTokenClassification"),R2t.forEach(t),fIe.forEach(t),oPe=i(c),Lr=n(c,"DIV",{class:!0});var ai=s(Lr);m(vy.$$.fragment,ai),cbr=i(ai),Gc=n(ai,"P",{});var SJ=s(Gc);fbr=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Oz=n(SJ,"A",{href:!0});var B2t=s(Oz);mbr=r(B2t,"from_pretrained()"),B2t.forEach(t),gbr=r(SJ," class method or the "),Vz=n(SJ,"A",{href:!0});var P2t=s(Vz);hbr=r(P2t,"from_config()"),P2t.forEach(t),pbr=r(SJ,` class
method.`),SJ.forEach(t),_br=i(ai),Fy=n(ai,"P",{});var mIe=s(Fy);ubr=r(mIe,"This class cannot be instantiated directly using "),Y1e=n(mIe,"CODE",{});var $2t=s(Y1e);bbr=r($2t,"__init__()"),$2t.forEach(t),vbr=r(mIe," (throws an error)."),mIe.forEach(t),Fbr=i(ai),Mt=n(ai,"DIV",{class:!0});var ni=s(Mt);m(Ty.$$.fragment,ni),Tbr=i(ni),K1e=n(ni,"P",{});var I2t=s(K1e);Mbr=r(I2t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),I2t.forEach(t),Ebr=i(ni),Oc=n(ni,"P",{});var RJ=s(Oc);Cbr=r(RJ,`Note:
Loading a model from its configuration file does `),Z1e=n(RJ,"STRONG",{});var q2t=s(Z1e);wbr=r(q2t,"not"),q2t.forEach(t),Abr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=n(RJ,"A",{href:!0});var N2t=s(Xz);ybr=r(N2t,"from_pretrained()"),N2t.forEach(t),Lbr=r(RJ," to load the model weights."),RJ.forEach(t),xbr=i(ni),ebe=n(ni,"P",{});var j2t=s(ebe);kbr=r(j2t,"Examples:"),j2t.forEach(t),Sbr=i(ni),m(My.$$.fragment,ni),ni.forEach(t),Rbr=i(ai),Eo=n(ai,"DIV",{class:!0});var Ca=s(Eo);m(Ey.$$.fragment,Ca),Bbr=i(Ca),obe=n(Ca,"P",{});var D2t=s(obe);Pbr=r(D2t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),D2t.forEach(t),$br=i(Ca),An=n(Ca,"P",{});var mC=s(An);Ibr=r(mC,"The model class to instantiate is selected based on the "),rbe=n(mC,"CODE",{});var G2t=s(rbe);qbr=r(G2t,"model_type"),G2t.forEach(t),Nbr=r(mC,` property of the config object (either
passed as an argument or loaded from `),tbe=n(mC,"CODE",{});var O2t=s(tbe);jbr=r(O2t,"pretrained_model_name_or_path"),O2t.forEach(t),Dbr=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=n(mC,"CODE",{});var V2t=s(abe);Gbr=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),Obr=r(mC,":"),mC.forEach(t),Vbr=i(Ca),Y=n(Ca,"UL",{});var re=s(Y);R7=n(re,"LI",{});var Jxe=s(R7);nbe=n(Jxe,"STRONG",{});var X2t=s(nbe);Xbr=r(X2t,"albert"),X2t.forEach(t),zbr=r(Jxe," \u2014 "),zz=n(Jxe,"A",{href:!0});var z2t=s(zz);Qbr=r(z2t,"TFAlbertForTokenClassification"),z2t.forEach(t),Wbr=r(Jxe," (ALBERT model)"),Jxe.forEach(t),Hbr=i(re),B7=n(re,"LI",{});var Yxe=s(B7);sbe=n(Yxe,"STRONG",{});var Q2t=s(sbe);Ubr=r(Q2t,"bert"),Q2t.forEach(t),Jbr=r(Yxe," \u2014 "),Qz=n(Yxe,"A",{href:!0});var W2t=s(Qz);Ybr=r(W2t,"TFBertForTokenClassification"),W2t.forEach(t),Kbr=r(Yxe," (BERT model)"),Yxe.forEach(t),Zbr=i(re),P7=n(re,"LI",{});var Kxe=s(P7);lbe=n(Kxe,"STRONG",{});var H2t=s(lbe);e2r=r(H2t,"camembert"),H2t.forEach(t),o2r=r(Kxe," \u2014 "),Wz=n(Kxe,"A",{href:!0});var U2t=s(Wz);r2r=r(U2t,"TFCamembertForTokenClassification"),U2t.forEach(t),t2r=r(Kxe," (CamemBERT model)"),Kxe.forEach(t),a2r=i(re),$7=n(re,"LI",{});var Zxe=s($7);ibe=n(Zxe,"STRONG",{});var J2t=s(ibe);n2r=r(J2t,"convbert"),J2t.forEach(t),s2r=r(Zxe," \u2014 "),Hz=n(Zxe,"A",{href:!0});var Y2t=s(Hz);l2r=r(Y2t,"TFConvBertForTokenClassification"),Y2t.forEach(t),i2r=r(Zxe," (ConvBERT model)"),Zxe.forEach(t),d2r=i(re),I7=n(re,"LI",{});var eke=s(I7);dbe=n(eke,"STRONG",{});var K2t=s(dbe);c2r=r(K2t,"deberta"),K2t.forEach(t),f2r=r(eke," \u2014 "),Uz=n(eke,"A",{href:!0});var Z2t=s(Uz);m2r=r(Z2t,"TFDebertaForTokenClassification"),Z2t.forEach(t),g2r=r(eke," (DeBERTa model)"),eke.forEach(t),h2r=i(re),q7=n(re,"LI",{});var oke=s(q7);cbe=n(oke,"STRONG",{});var evt=s(cbe);p2r=r(evt,"deberta-v2"),evt.forEach(t),_2r=r(oke," \u2014 "),Jz=n(oke,"A",{href:!0});var ovt=s(Jz);u2r=r(ovt,"TFDebertaV2ForTokenClassification"),ovt.forEach(t),b2r=r(oke," (DeBERTa-v2 model)"),oke.forEach(t),v2r=i(re),N7=n(re,"LI",{});var rke=s(N7);fbe=n(rke,"STRONG",{});var rvt=s(fbe);F2r=r(rvt,"distilbert"),rvt.forEach(t),T2r=r(rke," \u2014 "),Yz=n(rke,"A",{href:!0});var tvt=s(Yz);M2r=r(tvt,"TFDistilBertForTokenClassification"),tvt.forEach(t),E2r=r(rke," (DistilBERT model)"),rke.forEach(t),C2r=i(re),j7=n(re,"LI",{});var tke=s(j7);mbe=n(tke,"STRONG",{});var avt=s(mbe);w2r=r(avt,"electra"),avt.forEach(t),A2r=r(tke," \u2014 "),Kz=n(tke,"A",{href:!0});var nvt=s(Kz);y2r=r(nvt,"TFElectraForTokenClassification"),nvt.forEach(t),L2r=r(tke," (ELECTRA model)"),tke.forEach(t),x2r=i(re),D7=n(re,"LI",{});var ake=s(D7);gbe=n(ake,"STRONG",{});var svt=s(gbe);k2r=r(svt,"flaubert"),svt.forEach(t),S2r=r(ake," \u2014 "),Zz=n(ake,"A",{href:!0});var lvt=s(Zz);R2r=r(lvt,"TFFlaubertForTokenClassification"),lvt.forEach(t),B2r=r(ake," (FlauBERT model)"),ake.forEach(t),P2r=i(re),G7=n(re,"LI",{});var nke=s(G7);hbe=n(nke,"STRONG",{});var ivt=s(hbe);$2r=r(ivt,"funnel"),ivt.forEach(t),I2r=r(nke," \u2014 "),eQ=n(nke,"A",{href:!0});var dvt=s(eQ);q2r=r(dvt,"TFFunnelForTokenClassification"),dvt.forEach(t),N2r=r(nke," (Funnel Transformer model)"),nke.forEach(t),j2r=i(re),O7=n(re,"LI",{});var ske=s(O7);pbe=n(ske,"STRONG",{});var cvt=s(pbe);D2r=r(cvt,"layoutlm"),cvt.forEach(t),G2r=r(ske," \u2014 "),oQ=n(ske,"A",{href:!0});var fvt=s(oQ);O2r=r(fvt,"TFLayoutLMForTokenClassification"),fvt.forEach(t),V2r=r(ske," (LayoutLM model)"),ske.forEach(t),X2r=i(re),V7=n(re,"LI",{});var lke=s(V7);_be=n(lke,"STRONG",{});var mvt=s(_be);z2r=r(mvt,"longformer"),mvt.forEach(t),Q2r=r(lke," \u2014 "),rQ=n(lke,"A",{href:!0});var gvt=s(rQ);W2r=r(gvt,"TFLongformerForTokenClassification"),gvt.forEach(t),H2r=r(lke," (Longformer model)"),lke.forEach(t),U2r=i(re),X7=n(re,"LI",{});var ike=s(X7);ube=n(ike,"STRONG",{});var hvt=s(ube);J2r=r(hvt,"mobilebert"),hvt.forEach(t),Y2r=r(ike," \u2014 "),tQ=n(ike,"A",{href:!0});var pvt=s(tQ);K2r=r(pvt,"TFMobileBertForTokenClassification"),pvt.forEach(t),Z2r=r(ike," (MobileBERT model)"),ike.forEach(t),evr=i(re),z7=n(re,"LI",{});var dke=s(z7);bbe=n(dke,"STRONG",{});var _vt=s(bbe);ovr=r(_vt,"mpnet"),_vt.forEach(t),rvr=r(dke," \u2014 "),aQ=n(dke,"A",{href:!0});var uvt=s(aQ);tvr=r(uvt,"TFMPNetForTokenClassification"),uvt.forEach(t),avr=r(dke," (MPNet model)"),dke.forEach(t),nvr=i(re),Q7=n(re,"LI",{});var cke=s(Q7);vbe=n(cke,"STRONG",{});var bvt=s(vbe);svr=r(bvt,"rembert"),bvt.forEach(t),lvr=r(cke," \u2014 "),nQ=n(cke,"A",{href:!0});var vvt=s(nQ);ivr=r(vvt,"TFRemBertForTokenClassification"),vvt.forEach(t),dvr=r(cke," (RemBERT model)"),cke.forEach(t),cvr=i(re),W7=n(re,"LI",{});var fke=s(W7);Fbe=n(fke,"STRONG",{});var Fvt=s(Fbe);fvr=r(Fvt,"roberta"),Fvt.forEach(t),mvr=r(fke," \u2014 "),sQ=n(fke,"A",{href:!0});var Tvt=s(sQ);gvr=r(Tvt,"TFRobertaForTokenClassification"),Tvt.forEach(t),hvr=r(fke," (RoBERTa model)"),fke.forEach(t),pvr=i(re),H7=n(re,"LI",{});var mke=s(H7);Tbe=n(mke,"STRONG",{});var Mvt=s(Tbe);_vr=r(Mvt,"roformer"),Mvt.forEach(t),uvr=r(mke," \u2014 "),lQ=n(mke,"A",{href:!0});var Evt=s(lQ);bvr=r(Evt,"TFRoFormerForTokenClassification"),Evt.forEach(t),vvr=r(mke," (RoFormer model)"),mke.forEach(t),Fvr=i(re),U7=n(re,"LI",{});var gke=s(U7);Mbe=n(gke,"STRONG",{});var Cvt=s(Mbe);Tvr=r(Cvt,"xlm"),Cvt.forEach(t),Mvr=r(gke," \u2014 "),iQ=n(gke,"A",{href:!0});var wvt=s(iQ);Evr=r(wvt,"TFXLMForTokenClassification"),wvt.forEach(t),Cvr=r(gke," (XLM model)"),gke.forEach(t),wvr=i(re),J7=n(re,"LI",{});var hke=s(J7);Ebe=n(hke,"STRONG",{});var Avt=s(Ebe);Avr=r(Avt,"xlm-roberta"),Avt.forEach(t),yvr=r(hke," \u2014 "),dQ=n(hke,"A",{href:!0});var yvt=s(dQ);Lvr=r(yvt,"TFXLMRobertaForTokenClassification"),yvt.forEach(t),xvr=r(hke," (XLM-RoBERTa model)"),hke.forEach(t),kvr=i(re),Y7=n(re,"LI",{});var pke=s(Y7);Cbe=n(pke,"STRONG",{});var Lvt=s(Cbe);Svr=r(Lvt,"xlnet"),Lvt.forEach(t),Rvr=r(pke," \u2014 "),cQ=n(pke,"A",{href:!0});var xvt=s(cQ);Bvr=r(xvt,"TFXLNetForTokenClassification"),xvt.forEach(t),Pvr=r(pke," (XLNet model)"),pke.forEach(t),re.forEach(t),$vr=i(Ca),wbe=n(Ca,"P",{});var kvt=s(wbe);Ivr=r(kvt,"Examples:"),kvt.forEach(t),qvr=i(Ca),m(Cy.$$.fragment,Ca),Ca.forEach(t),ai.forEach(t),rPe=i(c),Vc=n(c,"H2",{class:!0});var gIe=s(Vc);K7=n(gIe,"A",{id:!0,class:!0,href:!0});var Svt=s(K7);Abe=n(Svt,"SPAN",{});var Rvt=s(Abe);m(wy.$$.fragment,Rvt),Rvt.forEach(t),Svt.forEach(t),Nvr=i(gIe),ybe=n(gIe,"SPAN",{});var Bvt=s(ybe);jvr=r(Bvt,"TFAutoModelForQuestionAnswering"),Bvt.forEach(t),gIe.forEach(t),tPe=i(c),xr=n(c,"DIV",{class:!0});var si=s(xr);m(Ay.$$.fragment,si),Dvr=i(si),Xc=n(si,"P",{});var BJ=s(Xc);Gvr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fQ=n(BJ,"A",{href:!0});var Pvt=s(fQ);Ovr=r(Pvt,"from_pretrained()"),Pvt.forEach(t),Vvr=r(BJ," class method or the "),mQ=n(BJ,"A",{href:!0});var $vt=s(mQ);Xvr=r($vt,"from_config()"),$vt.forEach(t),zvr=r(BJ,` class
method.`),BJ.forEach(t),Qvr=i(si),yy=n(si,"P",{});var hIe=s(yy);Wvr=r(hIe,"This class cannot be instantiated directly using "),Lbe=n(hIe,"CODE",{});var Ivt=s(Lbe);Hvr=r(Ivt,"__init__()"),Ivt.forEach(t),Uvr=r(hIe," (throws an error)."),hIe.forEach(t),Jvr=i(si),Et=n(si,"DIV",{class:!0});var li=s(Et);m(Ly.$$.fragment,li),Yvr=i(li),xbe=n(li,"P",{});var qvt=s(xbe);Kvr=r(qvt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),qvt.forEach(t),Zvr=i(li),zc=n(li,"P",{});var PJ=s(zc);eFr=r(PJ,`Note:
Loading a model from its configuration file does `),kbe=n(PJ,"STRONG",{});var Nvt=s(kbe);oFr=r(Nvt,"not"),Nvt.forEach(t),rFr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=n(PJ,"A",{href:!0});var jvt=s(gQ);tFr=r(jvt,"from_pretrained()"),jvt.forEach(t),aFr=r(PJ," to load the model weights."),PJ.forEach(t),nFr=i(li),Sbe=n(li,"P",{});var Dvt=s(Sbe);sFr=r(Dvt,"Examples:"),Dvt.forEach(t),lFr=i(li),m(xy.$$.fragment,li),li.forEach(t),iFr=i(si),Co=n(si,"DIV",{class:!0});var wa=s(Co);m(ky.$$.fragment,wa),dFr=i(wa),Rbe=n(wa,"P",{});var Gvt=s(Rbe);cFr=r(Gvt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Gvt.forEach(t),fFr=i(wa),yn=n(wa,"P",{});var gC=s(yn);mFr=r(gC,"The model class to instantiate is selected based on the "),Bbe=n(gC,"CODE",{});var Ovt=s(Bbe);gFr=r(Ovt,"model_type"),Ovt.forEach(t),hFr=r(gC,` property of the config object (either
passed as an argument or loaded from `),Pbe=n(gC,"CODE",{});var Vvt=s(Pbe);pFr=r(Vvt,"pretrained_model_name_or_path"),Vvt.forEach(t),_Fr=r(gC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=n(gC,"CODE",{});var Xvt=s($be);uFr=r(Xvt,"pretrained_model_name_or_path"),Xvt.forEach(t),bFr=r(gC,":"),gC.forEach(t),vFr=i(wa),K=n(wa,"UL",{});var te=s(K);Z7=n(te,"LI",{});var _ke=s(Z7);Ibe=n(_ke,"STRONG",{});var zvt=s(Ibe);FFr=r(zvt,"albert"),zvt.forEach(t),TFr=r(_ke," \u2014 "),hQ=n(_ke,"A",{href:!0});var Qvt=s(hQ);MFr=r(Qvt,"TFAlbertForQuestionAnswering"),Qvt.forEach(t),EFr=r(_ke," (ALBERT model)"),_ke.forEach(t),CFr=i(te),eM=n(te,"LI",{});var uke=s(eM);qbe=n(uke,"STRONG",{});var Wvt=s(qbe);wFr=r(Wvt,"bert"),Wvt.forEach(t),AFr=r(uke," \u2014 "),pQ=n(uke,"A",{href:!0});var Hvt=s(pQ);yFr=r(Hvt,"TFBertForQuestionAnswering"),Hvt.forEach(t),LFr=r(uke," (BERT model)"),uke.forEach(t),xFr=i(te),oM=n(te,"LI",{});var bke=s(oM);Nbe=n(bke,"STRONG",{});var Uvt=s(Nbe);kFr=r(Uvt,"camembert"),Uvt.forEach(t),SFr=r(bke," \u2014 "),_Q=n(bke,"A",{href:!0});var Jvt=s(_Q);RFr=r(Jvt,"TFCamembertForQuestionAnswering"),Jvt.forEach(t),BFr=r(bke," (CamemBERT model)"),bke.forEach(t),PFr=i(te),rM=n(te,"LI",{});var vke=s(rM);jbe=n(vke,"STRONG",{});var Yvt=s(jbe);$Fr=r(Yvt,"convbert"),Yvt.forEach(t),IFr=r(vke," \u2014 "),uQ=n(vke,"A",{href:!0});var Kvt=s(uQ);qFr=r(Kvt,"TFConvBertForQuestionAnswering"),Kvt.forEach(t),NFr=r(vke," (ConvBERT model)"),vke.forEach(t),jFr=i(te),tM=n(te,"LI",{});var Fke=s(tM);Dbe=n(Fke,"STRONG",{});var Zvt=s(Dbe);DFr=r(Zvt,"deberta"),Zvt.forEach(t),GFr=r(Fke," \u2014 "),bQ=n(Fke,"A",{href:!0});var eFt=s(bQ);OFr=r(eFt,"TFDebertaForQuestionAnswering"),eFt.forEach(t),VFr=r(Fke," (DeBERTa model)"),Fke.forEach(t),XFr=i(te),aM=n(te,"LI",{});var Tke=s(aM);Gbe=n(Tke,"STRONG",{});var oFt=s(Gbe);zFr=r(oFt,"deberta-v2"),oFt.forEach(t),QFr=r(Tke," \u2014 "),vQ=n(Tke,"A",{href:!0});var rFt=s(vQ);WFr=r(rFt,"TFDebertaV2ForQuestionAnswering"),rFt.forEach(t),HFr=r(Tke," (DeBERTa-v2 model)"),Tke.forEach(t),UFr=i(te),nM=n(te,"LI",{});var Mke=s(nM);Obe=n(Mke,"STRONG",{});var tFt=s(Obe);JFr=r(tFt,"distilbert"),tFt.forEach(t),YFr=r(Mke," \u2014 "),FQ=n(Mke,"A",{href:!0});var aFt=s(FQ);KFr=r(aFt,"TFDistilBertForQuestionAnswering"),aFt.forEach(t),ZFr=r(Mke," (DistilBERT model)"),Mke.forEach(t),e0r=i(te),sM=n(te,"LI",{});var Eke=s(sM);Vbe=n(Eke,"STRONG",{});var nFt=s(Vbe);o0r=r(nFt,"electra"),nFt.forEach(t),r0r=r(Eke," \u2014 "),TQ=n(Eke,"A",{href:!0});var sFt=s(TQ);t0r=r(sFt,"TFElectraForQuestionAnswering"),sFt.forEach(t),a0r=r(Eke," (ELECTRA model)"),Eke.forEach(t),n0r=i(te),lM=n(te,"LI",{});var Cke=s(lM);Xbe=n(Cke,"STRONG",{});var lFt=s(Xbe);s0r=r(lFt,"flaubert"),lFt.forEach(t),l0r=r(Cke," \u2014 "),MQ=n(Cke,"A",{href:!0});var iFt=s(MQ);i0r=r(iFt,"TFFlaubertForQuestionAnsweringSimple"),iFt.forEach(t),d0r=r(Cke," (FlauBERT model)"),Cke.forEach(t),c0r=i(te),iM=n(te,"LI",{});var wke=s(iM);zbe=n(wke,"STRONG",{});var dFt=s(zbe);f0r=r(dFt,"funnel"),dFt.forEach(t),m0r=r(wke," \u2014 "),EQ=n(wke,"A",{href:!0});var cFt=s(EQ);g0r=r(cFt,"TFFunnelForQuestionAnswering"),cFt.forEach(t),h0r=r(wke," (Funnel Transformer model)"),wke.forEach(t),p0r=i(te),dM=n(te,"LI",{});var Ake=s(dM);Qbe=n(Ake,"STRONG",{});var fFt=s(Qbe);_0r=r(fFt,"gptj"),fFt.forEach(t),u0r=r(Ake," \u2014 "),CQ=n(Ake,"A",{href:!0});var mFt=s(CQ);b0r=r(mFt,"TFGPTJForQuestionAnswering"),mFt.forEach(t),v0r=r(Ake," (GPT-J model)"),Ake.forEach(t),F0r=i(te),cM=n(te,"LI",{});var yke=s(cM);Wbe=n(yke,"STRONG",{});var gFt=s(Wbe);T0r=r(gFt,"longformer"),gFt.forEach(t),M0r=r(yke," \u2014 "),wQ=n(yke,"A",{href:!0});var hFt=s(wQ);E0r=r(hFt,"TFLongformerForQuestionAnswering"),hFt.forEach(t),C0r=r(yke," (Longformer model)"),yke.forEach(t),w0r=i(te),fM=n(te,"LI",{});var Lke=s(fM);Hbe=n(Lke,"STRONG",{});var pFt=s(Hbe);A0r=r(pFt,"mobilebert"),pFt.forEach(t),y0r=r(Lke," \u2014 "),AQ=n(Lke,"A",{href:!0});var _Ft=s(AQ);L0r=r(_Ft,"TFMobileBertForQuestionAnswering"),_Ft.forEach(t),x0r=r(Lke," (MobileBERT model)"),Lke.forEach(t),k0r=i(te),mM=n(te,"LI",{});var xke=s(mM);Ube=n(xke,"STRONG",{});var uFt=s(Ube);S0r=r(uFt,"mpnet"),uFt.forEach(t),R0r=r(xke," \u2014 "),yQ=n(xke,"A",{href:!0});var bFt=s(yQ);B0r=r(bFt,"TFMPNetForQuestionAnswering"),bFt.forEach(t),P0r=r(xke," (MPNet model)"),xke.forEach(t),$0r=i(te),gM=n(te,"LI",{});var kke=s(gM);Jbe=n(kke,"STRONG",{});var vFt=s(Jbe);I0r=r(vFt,"rembert"),vFt.forEach(t),q0r=r(kke," \u2014 "),LQ=n(kke,"A",{href:!0});var FFt=s(LQ);N0r=r(FFt,"TFRemBertForQuestionAnswering"),FFt.forEach(t),j0r=r(kke," (RemBERT model)"),kke.forEach(t),D0r=i(te),hM=n(te,"LI",{});var Ske=s(hM);Ybe=n(Ske,"STRONG",{});var TFt=s(Ybe);G0r=r(TFt,"roberta"),TFt.forEach(t),O0r=r(Ske," \u2014 "),xQ=n(Ske,"A",{href:!0});var MFt=s(xQ);V0r=r(MFt,"TFRobertaForQuestionAnswering"),MFt.forEach(t),X0r=r(Ske," (RoBERTa model)"),Ske.forEach(t),z0r=i(te),pM=n(te,"LI",{});var Rke=s(pM);Kbe=n(Rke,"STRONG",{});var EFt=s(Kbe);Q0r=r(EFt,"roformer"),EFt.forEach(t),W0r=r(Rke," \u2014 "),kQ=n(Rke,"A",{href:!0});var CFt=s(kQ);H0r=r(CFt,"TFRoFormerForQuestionAnswering"),CFt.forEach(t),U0r=r(Rke," (RoFormer model)"),Rke.forEach(t),J0r=i(te),_M=n(te,"LI",{});var Bke=s(_M);Zbe=n(Bke,"STRONG",{});var wFt=s(Zbe);Y0r=r(wFt,"xlm"),wFt.forEach(t),K0r=r(Bke," \u2014 "),SQ=n(Bke,"A",{href:!0});var AFt=s(SQ);Z0r=r(AFt,"TFXLMForQuestionAnsweringSimple"),AFt.forEach(t),eTr=r(Bke," (XLM model)"),Bke.forEach(t),oTr=i(te),uM=n(te,"LI",{});var Pke=s(uM);e2e=n(Pke,"STRONG",{});var yFt=s(e2e);rTr=r(yFt,"xlm-roberta"),yFt.forEach(t),tTr=r(Pke," \u2014 "),RQ=n(Pke,"A",{href:!0});var LFt=s(RQ);aTr=r(LFt,"TFXLMRobertaForQuestionAnswering"),LFt.forEach(t),nTr=r(Pke," (XLM-RoBERTa model)"),Pke.forEach(t),sTr=i(te),bM=n(te,"LI",{});var $ke=s(bM);o2e=n($ke,"STRONG",{});var xFt=s(o2e);lTr=r(xFt,"xlnet"),xFt.forEach(t),iTr=r($ke," \u2014 "),BQ=n($ke,"A",{href:!0});var kFt=s(BQ);dTr=r(kFt,"TFXLNetForQuestionAnsweringSimple"),kFt.forEach(t),cTr=r($ke," (XLNet model)"),$ke.forEach(t),te.forEach(t),fTr=i(wa),r2e=n(wa,"P",{});var SFt=s(r2e);mTr=r(SFt,"Examples:"),SFt.forEach(t),gTr=i(wa),m(Sy.$$.fragment,wa),wa.forEach(t),si.forEach(t),aPe=i(c),Qc=n(c,"H2",{class:!0});var pIe=s(Qc);vM=n(pIe,"A",{id:!0,class:!0,href:!0});var RFt=s(vM);t2e=n(RFt,"SPAN",{});var BFt=s(t2e);m(Ry.$$.fragment,BFt),BFt.forEach(t),RFt.forEach(t),hTr=i(pIe),a2e=n(pIe,"SPAN",{});var PFt=s(a2e);pTr=r(PFt,"TFAutoModelForVision2Seq"),PFt.forEach(t),pIe.forEach(t),nPe=i(c),kr=n(c,"DIV",{class:!0});var ii=s(kr);m(By.$$.fragment,ii),_Tr=i(ii),Wc=n(ii,"P",{});var $J=s(Wc);uTr=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PQ=n($J,"A",{href:!0});var $Ft=s(PQ);bTr=r($Ft,"from_pretrained()"),$Ft.forEach(t),vTr=r($J," class method or the "),$Q=n($J,"A",{href:!0});var IFt=s($Q);FTr=r(IFt,"from_config()"),IFt.forEach(t),TTr=r($J,` class
method.`),$J.forEach(t),MTr=i(ii),Py=n(ii,"P",{});var _Ie=s(Py);ETr=r(_Ie,"This class cannot be instantiated directly using "),n2e=n(_Ie,"CODE",{});var qFt=s(n2e);CTr=r(qFt,"__init__()"),qFt.forEach(t),wTr=r(_Ie," (throws an error)."),_Ie.forEach(t),ATr=i(ii),Ct=n(ii,"DIV",{class:!0});var di=s(Ct);m($y.$$.fragment,di),yTr=i(di),s2e=n(di,"P",{});var NFt=s(s2e);LTr=r(NFt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NFt.forEach(t),xTr=i(di),Hc=n(di,"P",{});var IJ=s(Hc);kTr=r(IJ,`Note:
Loading a model from its configuration file does `),l2e=n(IJ,"STRONG",{});var jFt=s(l2e);STr=r(jFt,"not"),jFt.forEach(t),RTr=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(IJ,"A",{href:!0});var DFt=s(IQ);BTr=r(DFt,"from_pretrained()"),DFt.forEach(t),PTr=r(IJ," to load the model weights."),IJ.forEach(t),$Tr=i(di),i2e=n(di,"P",{});var GFt=s(i2e);ITr=r(GFt,"Examples:"),GFt.forEach(t),qTr=i(di),m(Iy.$$.fragment,di),di.forEach(t),NTr=i(ii),wo=n(ii,"DIV",{class:!0});var Aa=s(wo);m(qy.$$.fragment,Aa),jTr=i(Aa),d2e=n(Aa,"P",{});var OFt=s(d2e);DTr=r(OFt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),OFt.forEach(t),GTr=i(Aa),Ln=n(Aa,"P",{});var hC=s(Ln);OTr=r(hC,"The model class to instantiate is selected based on the "),c2e=n(hC,"CODE",{});var VFt=s(c2e);VTr=r(VFt,"model_type"),VFt.forEach(t),XTr=r(hC,` property of the config object (either
passed as an argument or loaded from `),f2e=n(hC,"CODE",{});var XFt=s(f2e);zTr=r(XFt,"pretrained_model_name_or_path"),XFt.forEach(t),QTr=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=n(hC,"CODE",{});var zFt=s(m2e);WTr=r(zFt,"pretrained_model_name_or_path"),zFt.forEach(t),HTr=r(hC,":"),hC.forEach(t),UTr=i(Aa),g2e=n(Aa,"UL",{});var QFt=s(g2e);FM=n(QFt,"LI",{});var Ike=s(FM);h2e=n(Ike,"STRONG",{});var WFt=s(h2e);JTr=r(WFt,"vision-encoder-decoder"),WFt.forEach(t),YTr=r(Ike," \u2014 "),qQ=n(Ike,"A",{href:!0});var HFt=s(qQ);KTr=r(HFt,"TFVisionEncoderDecoderModel"),HFt.forEach(t),ZTr=r(Ike," (Vision Encoder decoder model)"),Ike.forEach(t),QFt.forEach(t),e7r=i(Aa),p2e=n(Aa,"P",{});var UFt=s(p2e);o7r=r(UFt,"Examples:"),UFt.forEach(t),r7r=i(Aa),m(Ny.$$.fragment,Aa),Aa.forEach(t),ii.forEach(t),sPe=i(c),Uc=n(c,"H2",{class:!0});var uIe=s(Uc);TM=n(uIe,"A",{id:!0,class:!0,href:!0});var JFt=s(TM);_2e=n(JFt,"SPAN",{});var YFt=s(_2e);m(jy.$$.fragment,YFt),YFt.forEach(t),JFt.forEach(t),t7r=i(uIe),u2e=n(uIe,"SPAN",{});var KFt=s(u2e);a7r=r(KFt,"TFAutoModelForSpeechSeq2Seq"),KFt.forEach(t),uIe.forEach(t),lPe=i(c),Sr=n(c,"DIV",{class:!0});var ci=s(Sr);m(Dy.$$.fragment,ci),n7r=i(ci),Jc=n(ci,"P",{});var qJ=s(Jc);s7r=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NQ=n(qJ,"A",{href:!0});var ZFt=s(NQ);l7r=r(ZFt,"from_pretrained()"),ZFt.forEach(t),i7r=r(qJ," class method or the "),jQ=n(qJ,"A",{href:!0});var e0t=s(jQ);d7r=r(e0t,"from_config()"),e0t.forEach(t),c7r=r(qJ,` class
method.`),qJ.forEach(t),f7r=i(ci),Gy=n(ci,"P",{});var bIe=s(Gy);m7r=r(bIe,"This class cannot be instantiated directly using "),b2e=n(bIe,"CODE",{});var o0t=s(b2e);g7r=r(o0t,"__init__()"),o0t.forEach(t),h7r=r(bIe," (throws an error)."),bIe.forEach(t),p7r=i(ci),wt=n(ci,"DIV",{class:!0});var fi=s(wt);m(Oy.$$.fragment,fi),_7r=i(fi),v2e=n(fi,"P",{});var r0t=s(v2e);u7r=r(r0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),r0t.forEach(t),b7r=i(fi),Yc=n(fi,"P",{});var NJ=s(Yc);v7r=r(NJ,`Note:
Loading a model from its configuration file does `),F2e=n(NJ,"STRONG",{});var t0t=s(F2e);F7r=r(t0t,"not"),t0t.forEach(t),T7r=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(NJ,"A",{href:!0});var a0t=s(DQ);M7r=r(a0t,"from_pretrained()"),a0t.forEach(t),E7r=r(NJ," to load the model weights."),NJ.forEach(t),C7r=i(fi),T2e=n(fi,"P",{});var n0t=s(T2e);w7r=r(n0t,"Examples:"),n0t.forEach(t),A7r=i(fi),m(Vy.$$.fragment,fi),fi.forEach(t),y7r=i(ci),Ao=n(ci,"DIV",{class:!0});var ya=s(Ao);m(Xy.$$.fragment,ya),L7r=i(ya),M2e=n(ya,"P",{});var s0t=s(M2e);x7r=r(s0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),s0t.forEach(t),k7r=i(ya),xn=n(ya,"P",{});var pC=s(xn);S7r=r(pC,"The model class to instantiate is selected based on the "),E2e=n(pC,"CODE",{});var l0t=s(E2e);R7r=r(l0t,"model_type"),l0t.forEach(t),B7r=r(pC,` property of the config object (either
passed as an argument or loaded from `),C2e=n(pC,"CODE",{});var i0t=s(C2e);P7r=r(i0t,"pretrained_model_name_or_path"),i0t.forEach(t),$7r=r(pC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=n(pC,"CODE",{});var d0t=s(w2e);I7r=r(d0t,"pretrained_model_name_or_path"),d0t.forEach(t),q7r=r(pC,":"),pC.forEach(t),N7r=i(ya),A2e=n(ya,"UL",{});var c0t=s(A2e);MM=n(c0t,"LI",{});var qke=s(MM);y2e=n(qke,"STRONG",{});var f0t=s(y2e);j7r=r(f0t,"speech_to_text"),f0t.forEach(t),D7r=r(qke," \u2014 "),GQ=n(qke,"A",{href:!0});var m0t=s(GQ);G7r=r(m0t,"TFSpeech2TextForConditionalGeneration"),m0t.forEach(t),O7r=r(qke," (Speech2Text model)"),qke.forEach(t),c0t.forEach(t),V7r=i(ya),L2e=n(ya,"P",{});var g0t=s(L2e);X7r=r(g0t,"Examples:"),g0t.forEach(t),z7r=i(ya),m(zy.$$.fragment,ya),ya.forEach(t),ci.forEach(t),iPe=i(c),Kc=n(c,"H2",{class:!0});var vIe=s(Kc);EM=n(vIe,"A",{id:!0,class:!0,href:!0});var h0t=s(EM);x2e=n(h0t,"SPAN",{});var p0t=s(x2e);m(Qy.$$.fragment,p0t),p0t.forEach(t),h0t.forEach(t),Q7r=i(vIe),k2e=n(vIe,"SPAN",{});var _0t=s(k2e);W7r=r(_0t,"FlaxAutoModel"),_0t.forEach(t),vIe.forEach(t),dPe=i(c),Rr=n(c,"DIV",{class:!0});var mi=s(Rr);m(Wy.$$.fragment,mi),H7r=i(mi),Zc=n(mi,"P",{});var jJ=s(Zc);U7r=r(jJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OQ=n(jJ,"A",{href:!0});var u0t=s(OQ);J7r=r(u0t,"from_pretrained()"),u0t.forEach(t),Y7r=r(jJ," class method or the "),VQ=n(jJ,"A",{href:!0});var b0t=s(VQ);K7r=r(b0t,"from_config()"),b0t.forEach(t),Z7r=r(jJ,` class
method.`),jJ.forEach(t),eMr=i(mi),Hy=n(mi,"P",{});var FIe=s(Hy);oMr=r(FIe,"This class cannot be instantiated directly using "),S2e=n(FIe,"CODE",{});var v0t=s(S2e);rMr=r(v0t,"__init__()"),v0t.forEach(t),tMr=r(FIe," (throws an error)."),FIe.forEach(t),aMr=i(mi),At=n(mi,"DIV",{class:!0});var gi=s(At);m(Uy.$$.fragment,gi),nMr=i(gi),R2e=n(gi,"P",{});var F0t=s(R2e);sMr=r(F0t,"Instantiates one of the base model classes of the library from a configuration."),F0t.forEach(t),lMr=i(gi),ef=n(gi,"P",{});var DJ=s(ef);iMr=r(DJ,`Note:
Loading a model from its configuration file does `),B2e=n(DJ,"STRONG",{});var T0t=s(B2e);dMr=r(T0t,"not"),T0t.forEach(t),cMr=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(DJ,"A",{href:!0});var M0t=s(XQ);fMr=r(M0t,"from_pretrained()"),M0t.forEach(t),mMr=r(DJ," to load the model weights."),DJ.forEach(t),gMr=i(gi),P2e=n(gi,"P",{});var E0t=s(P2e);hMr=r(E0t,"Examples:"),E0t.forEach(t),pMr=i(gi),m(Jy.$$.fragment,gi),gi.forEach(t),_Mr=i(mi),yo=n(mi,"DIV",{class:!0});var La=s(yo);m(Yy.$$.fragment,La),uMr=i(La),$2e=n(La,"P",{});var C0t=s($2e);bMr=r(C0t,"Instantiate one of the base model classes of the library from a pretrained model."),C0t.forEach(t),vMr=i(La),kn=n(La,"P",{});var _C=s(kn);FMr=r(_C,"The model class to instantiate is selected based on the "),I2e=n(_C,"CODE",{});var w0t=s(I2e);TMr=r(w0t,"model_type"),w0t.forEach(t),MMr=r(_C,` property of the config object (either
passed as an argument or loaded from `),q2e=n(_C,"CODE",{});var A0t=s(q2e);EMr=r(A0t,"pretrained_model_name_or_path"),A0t.forEach(t),CMr=r(_C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=n(_C,"CODE",{});var y0t=s(N2e);wMr=r(y0t,"pretrained_model_name_or_path"),y0t.forEach(t),AMr=r(_C,":"),_C.forEach(t),yMr=i(La),z=n(La,"UL",{});var W=s(z);CM=n(W,"LI",{});var Nke=s(CM);j2e=n(Nke,"STRONG",{});var L0t=s(j2e);LMr=r(L0t,"albert"),L0t.forEach(t),xMr=r(Nke," \u2014 "),zQ=n(Nke,"A",{href:!0});var x0t=s(zQ);kMr=r(x0t,"FlaxAlbertModel"),x0t.forEach(t),SMr=r(Nke," (ALBERT model)"),Nke.forEach(t),RMr=i(W),wM=n(W,"LI",{});var jke=s(wM);D2e=n(jke,"STRONG",{});var k0t=s(D2e);BMr=r(k0t,"bart"),k0t.forEach(t),PMr=r(jke," \u2014 "),QQ=n(jke,"A",{href:!0});var S0t=s(QQ);$Mr=r(S0t,"FlaxBartModel"),S0t.forEach(t),IMr=r(jke," (BART model)"),jke.forEach(t),qMr=i(W),AM=n(W,"LI",{});var Dke=s(AM);G2e=n(Dke,"STRONG",{});var R0t=s(G2e);NMr=r(R0t,"beit"),R0t.forEach(t),jMr=r(Dke," \u2014 "),WQ=n(Dke,"A",{href:!0});var B0t=s(WQ);DMr=r(B0t,"FlaxBeitModel"),B0t.forEach(t),GMr=r(Dke," (BEiT model)"),Dke.forEach(t),OMr=i(W),yM=n(W,"LI",{});var Gke=s(yM);O2e=n(Gke,"STRONG",{});var P0t=s(O2e);VMr=r(P0t,"bert"),P0t.forEach(t),XMr=r(Gke," \u2014 "),HQ=n(Gke,"A",{href:!0});var $0t=s(HQ);zMr=r($0t,"FlaxBertModel"),$0t.forEach(t),QMr=r(Gke," (BERT model)"),Gke.forEach(t),WMr=i(W),LM=n(W,"LI",{});var Oke=s(LM);V2e=n(Oke,"STRONG",{});var I0t=s(V2e);HMr=r(I0t,"big_bird"),I0t.forEach(t),UMr=r(Oke," \u2014 "),UQ=n(Oke,"A",{href:!0});var q0t=s(UQ);JMr=r(q0t,"FlaxBigBirdModel"),q0t.forEach(t),YMr=r(Oke," (BigBird model)"),Oke.forEach(t),KMr=i(W),xM=n(W,"LI",{});var Vke=s(xM);X2e=n(Vke,"STRONG",{});var N0t=s(X2e);ZMr=r(N0t,"blenderbot"),N0t.forEach(t),e4r=r(Vke," \u2014 "),JQ=n(Vke,"A",{href:!0});var j0t=s(JQ);o4r=r(j0t,"FlaxBlenderbotModel"),j0t.forEach(t),r4r=r(Vke," (Blenderbot model)"),Vke.forEach(t),t4r=i(W),kM=n(W,"LI",{});var Xke=s(kM);z2e=n(Xke,"STRONG",{});var D0t=s(z2e);a4r=r(D0t,"blenderbot-small"),D0t.forEach(t),n4r=r(Xke," \u2014 "),YQ=n(Xke,"A",{href:!0});var G0t=s(YQ);s4r=r(G0t,"FlaxBlenderbotSmallModel"),G0t.forEach(t),l4r=r(Xke," (BlenderbotSmall model)"),Xke.forEach(t),i4r=i(W),SM=n(W,"LI",{});var zke=s(SM);Q2e=n(zke,"STRONG",{});var O0t=s(Q2e);d4r=r(O0t,"clip"),O0t.forEach(t),c4r=r(zke," \u2014 "),KQ=n(zke,"A",{href:!0});var V0t=s(KQ);f4r=r(V0t,"FlaxCLIPModel"),V0t.forEach(t),m4r=r(zke," (CLIP model)"),zke.forEach(t),g4r=i(W),RM=n(W,"LI",{});var Qke=s(RM);W2e=n(Qke,"STRONG",{});var X0t=s(W2e);h4r=r(X0t,"distilbert"),X0t.forEach(t),p4r=r(Qke," \u2014 "),ZQ=n(Qke,"A",{href:!0});var z0t=s(ZQ);_4r=r(z0t,"FlaxDistilBertModel"),z0t.forEach(t),u4r=r(Qke," (DistilBERT model)"),Qke.forEach(t),b4r=i(W),BM=n(W,"LI",{});var Wke=s(BM);H2e=n(Wke,"STRONG",{});var Q0t=s(H2e);v4r=r(Q0t,"electra"),Q0t.forEach(t),F4r=r(Wke," \u2014 "),eW=n(Wke,"A",{href:!0});var W0t=s(eW);T4r=r(W0t,"FlaxElectraModel"),W0t.forEach(t),M4r=r(Wke," (ELECTRA model)"),Wke.forEach(t),E4r=i(W),PM=n(W,"LI",{});var Hke=s(PM);U2e=n(Hke,"STRONG",{});var H0t=s(U2e);C4r=r(H0t,"gpt2"),H0t.forEach(t),w4r=r(Hke," \u2014 "),oW=n(Hke,"A",{href:!0});var U0t=s(oW);A4r=r(U0t,"FlaxGPT2Model"),U0t.forEach(t),y4r=r(Hke," (OpenAI GPT-2 model)"),Hke.forEach(t),L4r=i(W),$M=n(W,"LI",{});var Uke=s($M);J2e=n(Uke,"STRONG",{});var J0t=s(J2e);x4r=r(J0t,"gpt_neo"),J0t.forEach(t),k4r=r(Uke," \u2014 "),rW=n(Uke,"A",{href:!0});var Y0t=s(rW);S4r=r(Y0t,"FlaxGPTNeoModel"),Y0t.forEach(t),R4r=r(Uke," (GPT Neo model)"),Uke.forEach(t),B4r=i(W),IM=n(W,"LI",{});var Jke=s(IM);Y2e=n(Jke,"STRONG",{});var K0t=s(Y2e);P4r=r(K0t,"gptj"),K0t.forEach(t),$4r=r(Jke," \u2014 "),tW=n(Jke,"A",{href:!0});var Z0t=s(tW);I4r=r(Z0t,"FlaxGPTJModel"),Z0t.forEach(t),q4r=r(Jke," (GPT-J model)"),Jke.forEach(t),N4r=i(W),qM=n(W,"LI",{});var Yke=s(qM);K2e=n(Yke,"STRONG",{});var eTt=s(K2e);j4r=r(eTt,"marian"),eTt.forEach(t),D4r=r(Yke," \u2014 "),aW=n(Yke,"A",{href:!0});var oTt=s(aW);G4r=r(oTt,"FlaxMarianModel"),oTt.forEach(t),O4r=r(Yke," (Marian model)"),Yke.forEach(t),V4r=i(W),NM=n(W,"LI",{});var Kke=s(NM);Z2e=n(Kke,"STRONG",{});var rTt=s(Z2e);X4r=r(rTt,"mbart"),rTt.forEach(t),z4r=r(Kke," \u2014 "),nW=n(Kke,"A",{href:!0});var tTt=s(nW);Q4r=r(tTt,"FlaxMBartModel"),tTt.forEach(t),W4r=r(Kke," (mBART model)"),Kke.forEach(t),H4r=i(W),jM=n(W,"LI",{});var Zke=s(jM);eve=n(Zke,"STRONG",{});var aTt=s(eve);U4r=r(aTt,"mt5"),aTt.forEach(t),J4r=r(Zke," \u2014 "),sW=n(Zke,"A",{href:!0});var nTt=s(sW);Y4r=r(nTt,"FlaxMT5Model"),nTt.forEach(t),K4r=r(Zke," (mT5 model)"),Zke.forEach(t),Z4r=i(W),DM=n(W,"LI",{});var eSe=s(DM);ove=n(eSe,"STRONG",{});var sTt=s(ove);eEr=r(sTt,"pegasus"),sTt.forEach(t),oEr=r(eSe," \u2014 "),lW=n(eSe,"A",{href:!0});var lTt=s(lW);rEr=r(lTt,"FlaxPegasusModel"),lTt.forEach(t),tEr=r(eSe," (Pegasus model)"),eSe.forEach(t),aEr=i(W),GM=n(W,"LI",{});var oSe=s(GM);rve=n(oSe,"STRONG",{});var iTt=s(rve);nEr=r(iTt,"roberta"),iTt.forEach(t),sEr=r(oSe," \u2014 "),iW=n(oSe,"A",{href:!0});var dTt=s(iW);lEr=r(dTt,"FlaxRobertaModel"),dTt.forEach(t),iEr=r(oSe," (RoBERTa model)"),oSe.forEach(t),dEr=i(W),OM=n(W,"LI",{});var rSe=s(OM);tve=n(rSe,"STRONG",{});var cTt=s(tve);cEr=r(cTt,"roformer"),cTt.forEach(t),fEr=r(rSe," \u2014 "),dW=n(rSe,"A",{href:!0});var fTt=s(dW);mEr=r(fTt,"FlaxRoFormerModel"),fTt.forEach(t),gEr=r(rSe," (RoFormer model)"),rSe.forEach(t),hEr=i(W),VM=n(W,"LI",{});var tSe=s(VM);ave=n(tSe,"STRONG",{});var mTt=s(ave);pEr=r(mTt,"t5"),mTt.forEach(t),_Er=r(tSe," \u2014 "),cW=n(tSe,"A",{href:!0});var gTt=s(cW);uEr=r(gTt,"FlaxT5Model"),gTt.forEach(t),bEr=r(tSe," (T5 model)"),tSe.forEach(t),vEr=i(W),XM=n(W,"LI",{});var aSe=s(XM);nve=n(aSe,"STRONG",{});var hTt=s(nve);FEr=r(hTt,"vision-text-dual-encoder"),hTt.forEach(t),TEr=r(aSe," \u2014 "),fW=n(aSe,"A",{href:!0});var pTt=s(fW);MEr=r(pTt,"FlaxVisionTextDualEncoderModel"),pTt.forEach(t),EEr=r(aSe," (VisionTextDualEncoder model)"),aSe.forEach(t),CEr=i(W),zM=n(W,"LI",{});var nSe=s(zM);sve=n(nSe,"STRONG",{});var _Tt=s(sve);wEr=r(_Tt,"vit"),_Tt.forEach(t),AEr=r(nSe," \u2014 "),mW=n(nSe,"A",{href:!0});var uTt=s(mW);yEr=r(uTt,"FlaxViTModel"),uTt.forEach(t),LEr=r(nSe," (ViT model)"),nSe.forEach(t),xEr=i(W),QM=n(W,"LI",{});var sSe=s(QM);lve=n(sSe,"STRONG",{});var bTt=s(lve);kEr=r(bTt,"wav2vec2"),bTt.forEach(t),SEr=r(sSe," \u2014 "),gW=n(sSe,"A",{href:!0});var vTt=s(gW);REr=r(vTt,"FlaxWav2Vec2Model"),vTt.forEach(t),BEr=r(sSe," (Wav2Vec2 model)"),sSe.forEach(t),PEr=i(W),WM=n(W,"LI",{});var lSe=s(WM);ive=n(lSe,"STRONG",{});var FTt=s(ive);$Er=r(FTt,"xglm"),FTt.forEach(t),IEr=r(lSe," \u2014 "),hW=n(lSe,"A",{href:!0});var TTt=s(hW);qEr=r(TTt,"FlaxXGLMModel"),TTt.forEach(t),NEr=r(lSe," (XGLM model)"),lSe.forEach(t),jEr=i(W),HM=n(W,"LI",{});var iSe=s(HM);dve=n(iSe,"STRONG",{});var MTt=s(dve);DEr=r(MTt,"xlm-roberta"),MTt.forEach(t),GEr=r(iSe," \u2014 "),pW=n(iSe,"A",{href:!0});var ETt=s(pW);OEr=r(ETt,"FlaxXLMRobertaModel"),ETt.forEach(t),VEr=r(iSe," (XLM-RoBERTa model)"),iSe.forEach(t),W.forEach(t),XEr=i(La),cve=n(La,"P",{});var CTt=s(cve);zEr=r(CTt,"Examples:"),CTt.forEach(t),QEr=i(La),m(Ky.$$.fragment,La),La.forEach(t),mi.forEach(t),cPe=i(c),of=n(c,"H2",{class:!0});var TIe=s(of);UM=n(TIe,"A",{id:!0,class:!0,href:!0});var wTt=s(UM);fve=n(wTt,"SPAN",{});var ATt=s(fve);m(Zy.$$.fragment,ATt),ATt.forEach(t),wTt.forEach(t),WEr=i(TIe),mve=n(TIe,"SPAN",{});var yTt=s(mve);HEr=r(yTt,"FlaxAutoModelForCausalLM"),yTt.forEach(t),TIe.forEach(t),fPe=i(c),Br=n(c,"DIV",{class:!0});var hi=s(Br);m(eL.$$.fragment,hi),UEr=i(hi),rf=n(hi,"P",{});var GJ=s(rf);JEr=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_W=n(GJ,"A",{href:!0});var LTt=s(_W);YEr=r(LTt,"from_pretrained()"),LTt.forEach(t),KEr=r(GJ," class method or the "),uW=n(GJ,"A",{href:!0});var xTt=s(uW);ZEr=r(xTt,"from_config()"),xTt.forEach(t),eCr=r(GJ,` class
method.`),GJ.forEach(t),oCr=i(hi),oL=n(hi,"P",{});var MIe=s(oL);rCr=r(MIe,"This class cannot be instantiated directly using "),gve=n(MIe,"CODE",{});var kTt=s(gve);tCr=r(kTt,"__init__()"),kTt.forEach(t),aCr=r(MIe," (throws an error)."),MIe.forEach(t),nCr=i(hi),yt=n(hi,"DIV",{class:!0});var pi=s(yt);m(rL.$$.fragment,pi),sCr=i(pi),hve=n(pi,"P",{});var STt=s(hve);lCr=r(STt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),STt.forEach(t),iCr=i(pi),tf=n(pi,"P",{});var OJ=s(tf);dCr=r(OJ,`Note:
Loading a model from its configuration file does `),pve=n(OJ,"STRONG",{});var RTt=s(pve);cCr=r(RTt,"not"),RTt.forEach(t),fCr=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=n(OJ,"A",{href:!0});var BTt=s(bW);mCr=r(BTt,"from_pretrained()"),BTt.forEach(t),gCr=r(OJ," to load the model weights."),OJ.forEach(t),hCr=i(pi),_ve=n(pi,"P",{});var PTt=s(_ve);pCr=r(PTt,"Examples:"),PTt.forEach(t),_Cr=i(pi),m(tL.$$.fragment,pi),pi.forEach(t),uCr=i(hi),Lo=n(hi,"DIV",{class:!0});var xa=s(Lo);m(aL.$$.fragment,xa),bCr=i(xa),uve=n(xa,"P",{});var $Tt=s(uve);vCr=r($Tt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Tt.forEach(t),FCr=i(xa),Sn=n(xa,"P",{});var uC=s(Sn);TCr=r(uC,"The model class to instantiate is selected based on the "),bve=n(uC,"CODE",{});var ITt=s(bve);MCr=r(ITt,"model_type"),ITt.forEach(t),ECr=r(uC,` property of the config object (either
passed as an argument or loaded from `),vve=n(uC,"CODE",{});var qTt=s(vve);CCr=r(qTt,"pretrained_model_name_or_path"),qTt.forEach(t),wCr=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=n(uC,"CODE",{});var NTt=s(Fve);ACr=r(NTt,"pretrained_model_name_or_path"),NTt.forEach(t),yCr=r(uC,":"),uC.forEach(t),LCr=i(xa),ca=n(xa,"UL",{});var _i=s(ca);JM=n(_i,"LI",{});var dSe=s(JM);Tve=n(dSe,"STRONG",{});var jTt=s(Tve);xCr=r(jTt,"bart"),jTt.forEach(t),kCr=r(dSe," \u2014 "),vW=n(dSe,"A",{href:!0});var DTt=s(vW);SCr=r(DTt,"FlaxBartForCausalLM"),DTt.forEach(t),RCr=r(dSe," (BART model)"),dSe.forEach(t),BCr=i(_i),YM=n(_i,"LI",{});var cSe=s(YM);Mve=n(cSe,"STRONG",{});var GTt=s(Mve);PCr=r(GTt,"gpt2"),GTt.forEach(t),$Cr=r(cSe," \u2014 "),FW=n(cSe,"A",{href:!0});var OTt=s(FW);ICr=r(OTt,"FlaxGPT2LMHeadModel"),OTt.forEach(t),qCr=r(cSe," (OpenAI GPT-2 model)"),cSe.forEach(t),NCr=i(_i),KM=n(_i,"LI",{});var fSe=s(KM);Eve=n(fSe,"STRONG",{});var VTt=s(Eve);jCr=r(VTt,"gpt_neo"),VTt.forEach(t),DCr=r(fSe," \u2014 "),TW=n(fSe,"A",{href:!0});var XTt=s(TW);GCr=r(XTt,"FlaxGPTNeoForCausalLM"),XTt.forEach(t),OCr=r(fSe," (GPT Neo model)"),fSe.forEach(t),VCr=i(_i),ZM=n(_i,"LI",{});var mSe=s(ZM);Cve=n(mSe,"STRONG",{});var zTt=s(Cve);XCr=r(zTt,"gptj"),zTt.forEach(t),zCr=r(mSe," \u2014 "),MW=n(mSe,"A",{href:!0});var QTt=s(MW);QCr=r(QTt,"FlaxGPTJForCausalLM"),QTt.forEach(t),WCr=r(mSe," (GPT-J model)"),mSe.forEach(t),HCr=i(_i),e4=n(_i,"LI",{});var gSe=s(e4);wve=n(gSe,"STRONG",{});var WTt=s(wve);UCr=r(WTt,"xglm"),WTt.forEach(t),JCr=r(gSe," \u2014 "),EW=n(gSe,"A",{href:!0});var HTt=s(EW);YCr=r(HTt,"FlaxXGLMForCausalLM"),HTt.forEach(t),KCr=r(gSe," (XGLM model)"),gSe.forEach(t),_i.forEach(t),ZCr=i(xa),Ave=n(xa,"P",{});var UTt=s(Ave);e5r=r(UTt,"Examples:"),UTt.forEach(t),o5r=i(xa),m(nL.$$.fragment,xa),xa.forEach(t),hi.forEach(t),mPe=i(c),af=n(c,"H2",{class:!0});var EIe=s(af);o4=n(EIe,"A",{id:!0,class:!0,href:!0});var JTt=s(o4);yve=n(JTt,"SPAN",{});var YTt=s(yve);m(sL.$$.fragment,YTt),YTt.forEach(t),JTt.forEach(t),r5r=i(EIe),Lve=n(EIe,"SPAN",{});var KTt=s(Lve);t5r=r(KTt,"FlaxAutoModelForPreTraining"),KTt.forEach(t),EIe.forEach(t),gPe=i(c),Pr=n(c,"DIV",{class:!0});var ui=s(Pr);m(lL.$$.fragment,ui),a5r=i(ui),nf=n(ui,"P",{});var VJ=s(nf);n5r=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),CW=n(VJ,"A",{href:!0});var ZTt=s(CW);s5r=r(ZTt,"from_pretrained()"),ZTt.forEach(t),l5r=r(VJ," class method or the "),wW=n(VJ,"A",{href:!0});var e7t=s(wW);i5r=r(e7t,"from_config()"),e7t.forEach(t),d5r=r(VJ,` class
method.`),VJ.forEach(t),c5r=i(ui),iL=n(ui,"P",{});var CIe=s(iL);f5r=r(CIe,"This class cannot be instantiated directly using "),xve=n(CIe,"CODE",{});var o7t=s(xve);m5r=r(o7t,"__init__()"),o7t.forEach(t),g5r=r(CIe," (throws an error)."),CIe.forEach(t),h5r=i(ui),Lt=n(ui,"DIV",{class:!0});var bi=s(Lt);m(dL.$$.fragment,bi),p5r=i(bi),kve=n(bi,"P",{});var r7t=s(kve);_5r=r(r7t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),r7t.forEach(t),u5r=i(bi),sf=n(bi,"P",{});var XJ=s(sf);b5r=r(XJ,`Note:
Loading a model from its configuration file does `),Sve=n(XJ,"STRONG",{});var t7t=s(Sve);v5r=r(t7t,"not"),t7t.forEach(t),F5r=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=n(XJ,"A",{href:!0});var a7t=s(AW);T5r=r(a7t,"from_pretrained()"),a7t.forEach(t),M5r=r(XJ," to load the model weights."),XJ.forEach(t),E5r=i(bi),Rve=n(bi,"P",{});var n7t=s(Rve);C5r=r(n7t,"Examples:"),n7t.forEach(t),w5r=i(bi),m(cL.$$.fragment,bi),bi.forEach(t),A5r=i(ui),xo=n(ui,"DIV",{class:!0});var ka=s(xo);m(fL.$$.fragment,ka),y5r=i(ka),Bve=n(ka,"P",{});var s7t=s(Bve);L5r=r(s7t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),s7t.forEach(t),x5r=i(ka),Rn=n(ka,"P",{});var bC=s(Rn);k5r=r(bC,"The model class to instantiate is selected based on the "),Pve=n(bC,"CODE",{});var l7t=s(Pve);S5r=r(l7t,"model_type"),l7t.forEach(t),R5r=r(bC,` property of the config object (either
passed as an argument or loaded from `),$ve=n(bC,"CODE",{});var i7t=s($ve);B5r=r(i7t,"pretrained_model_name_or_path"),i7t.forEach(t),P5r=r(bC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=n(bC,"CODE",{});var d7t=s(Ive);$5r=r(d7t,"pretrained_model_name_or_path"),d7t.forEach(t),I5r=r(bC,":"),bC.forEach(t),q5r=i(ka),me=n(ka,"UL",{});var _e=s(me);r4=n(_e,"LI",{});var hSe=s(r4);qve=n(hSe,"STRONG",{});var c7t=s(qve);N5r=r(c7t,"albert"),c7t.forEach(t),j5r=r(hSe," \u2014 "),yW=n(hSe,"A",{href:!0});var f7t=s(yW);D5r=r(f7t,"FlaxAlbertForPreTraining"),f7t.forEach(t),G5r=r(hSe," (ALBERT model)"),hSe.forEach(t),O5r=i(_e),t4=n(_e,"LI",{});var pSe=s(t4);Nve=n(pSe,"STRONG",{});var m7t=s(Nve);V5r=r(m7t,"bart"),m7t.forEach(t),X5r=r(pSe," \u2014 "),LW=n(pSe,"A",{href:!0});var g7t=s(LW);z5r=r(g7t,"FlaxBartForConditionalGeneration"),g7t.forEach(t),Q5r=r(pSe," (BART model)"),pSe.forEach(t),W5r=i(_e),a4=n(_e,"LI",{});var _Se=s(a4);jve=n(_Se,"STRONG",{});var h7t=s(jve);H5r=r(h7t,"bert"),h7t.forEach(t),U5r=r(_Se," \u2014 "),xW=n(_Se,"A",{href:!0});var p7t=s(xW);J5r=r(p7t,"FlaxBertForPreTraining"),p7t.forEach(t),Y5r=r(_Se," (BERT model)"),_Se.forEach(t),K5r=i(_e),n4=n(_e,"LI",{});var uSe=s(n4);Dve=n(uSe,"STRONG",{});var _7t=s(Dve);Z5r=r(_7t,"big_bird"),_7t.forEach(t),e3r=r(uSe," \u2014 "),kW=n(uSe,"A",{href:!0});var u7t=s(kW);o3r=r(u7t,"FlaxBigBirdForPreTraining"),u7t.forEach(t),r3r=r(uSe," (BigBird model)"),uSe.forEach(t),t3r=i(_e),s4=n(_e,"LI",{});var bSe=s(s4);Gve=n(bSe,"STRONG",{});var b7t=s(Gve);a3r=r(b7t,"electra"),b7t.forEach(t),n3r=r(bSe," \u2014 "),SW=n(bSe,"A",{href:!0});var v7t=s(SW);s3r=r(v7t,"FlaxElectraForPreTraining"),v7t.forEach(t),l3r=r(bSe," (ELECTRA model)"),bSe.forEach(t),i3r=i(_e),l4=n(_e,"LI",{});var vSe=s(l4);Ove=n(vSe,"STRONG",{});var F7t=s(Ove);d3r=r(F7t,"mbart"),F7t.forEach(t),c3r=r(vSe," \u2014 "),RW=n(vSe,"A",{href:!0});var T7t=s(RW);f3r=r(T7t,"FlaxMBartForConditionalGeneration"),T7t.forEach(t),m3r=r(vSe," (mBART model)"),vSe.forEach(t),g3r=i(_e),i4=n(_e,"LI",{});var FSe=s(i4);Vve=n(FSe,"STRONG",{});var M7t=s(Vve);h3r=r(M7t,"mt5"),M7t.forEach(t),p3r=r(FSe," \u2014 "),BW=n(FSe,"A",{href:!0});var E7t=s(BW);_3r=r(E7t,"FlaxMT5ForConditionalGeneration"),E7t.forEach(t),u3r=r(FSe," (mT5 model)"),FSe.forEach(t),b3r=i(_e),d4=n(_e,"LI",{});var TSe=s(d4);Xve=n(TSe,"STRONG",{});var C7t=s(Xve);v3r=r(C7t,"roberta"),C7t.forEach(t),F3r=r(TSe," \u2014 "),PW=n(TSe,"A",{href:!0});var w7t=s(PW);T3r=r(w7t,"FlaxRobertaForMaskedLM"),w7t.forEach(t),M3r=r(TSe," (RoBERTa model)"),TSe.forEach(t),E3r=i(_e),c4=n(_e,"LI",{});var MSe=s(c4);zve=n(MSe,"STRONG",{});var A7t=s(zve);C3r=r(A7t,"roformer"),A7t.forEach(t),w3r=r(MSe," \u2014 "),$W=n(MSe,"A",{href:!0});var y7t=s($W);A3r=r(y7t,"FlaxRoFormerForMaskedLM"),y7t.forEach(t),y3r=r(MSe," (RoFormer model)"),MSe.forEach(t),L3r=i(_e),f4=n(_e,"LI",{});var ESe=s(f4);Qve=n(ESe,"STRONG",{});var L7t=s(Qve);x3r=r(L7t,"t5"),L7t.forEach(t),k3r=r(ESe," \u2014 "),IW=n(ESe,"A",{href:!0});var x7t=s(IW);S3r=r(x7t,"FlaxT5ForConditionalGeneration"),x7t.forEach(t),R3r=r(ESe," (T5 model)"),ESe.forEach(t),B3r=i(_e),m4=n(_e,"LI",{});var CSe=s(m4);Wve=n(CSe,"STRONG",{});var k7t=s(Wve);P3r=r(k7t,"wav2vec2"),k7t.forEach(t),$3r=r(CSe," \u2014 "),qW=n(CSe,"A",{href:!0});var S7t=s(qW);I3r=r(S7t,"FlaxWav2Vec2ForPreTraining"),S7t.forEach(t),q3r=r(CSe," (Wav2Vec2 model)"),CSe.forEach(t),N3r=i(_e),g4=n(_e,"LI",{});var wSe=s(g4);Hve=n(wSe,"STRONG",{});var R7t=s(Hve);j3r=r(R7t,"xlm-roberta"),R7t.forEach(t),D3r=r(wSe," \u2014 "),NW=n(wSe,"A",{href:!0});var B7t=s(NW);G3r=r(B7t,"FlaxXLMRobertaForMaskedLM"),B7t.forEach(t),O3r=r(wSe," (XLM-RoBERTa model)"),wSe.forEach(t),_e.forEach(t),V3r=i(ka),Uve=n(ka,"P",{});var P7t=s(Uve);X3r=r(P7t,"Examples:"),P7t.forEach(t),z3r=i(ka),m(mL.$$.fragment,ka),ka.forEach(t),ui.forEach(t),hPe=i(c),lf=n(c,"H2",{class:!0});var wIe=s(lf);h4=n(wIe,"A",{id:!0,class:!0,href:!0});var $7t=s(h4);Jve=n($7t,"SPAN",{});var I7t=s(Jve);m(gL.$$.fragment,I7t),I7t.forEach(t),$7t.forEach(t),Q3r=i(wIe),Yve=n(wIe,"SPAN",{});var q7t=s(Yve);W3r=r(q7t,"FlaxAutoModelForMaskedLM"),q7t.forEach(t),wIe.forEach(t),pPe=i(c),$r=n(c,"DIV",{class:!0});var vi=s($r);m(hL.$$.fragment,vi),H3r=i(vi),df=n(vi,"P",{});var zJ=s(df);U3r=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jW=n(zJ,"A",{href:!0});var N7t=s(jW);J3r=r(N7t,"from_pretrained()"),N7t.forEach(t),Y3r=r(zJ," class method or the "),DW=n(zJ,"A",{href:!0});var j7t=s(DW);K3r=r(j7t,"from_config()"),j7t.forEach(t),Z3r=r(zJ,` class
method.`),zJ.forEach(t),ewr=i(vi),pL=n(vi,"P",{});var AIe=s(pL);owr=r(AIe,"This class cannot be instantiated directly using "),Kve=n(AIe,"CODE",{});var D7t=s(Kve);rwr=r(D7t,"__init__()"),D7t.forEach(t),twr=r(AIe," (throws an error)."),AIe.forEach(t),awr=i(vi),xt=n(vi,"DIV",{class:!0});var Fi=s(xt);m(_L.$$.fragment,Fi),nwr=i(Fi),Zve=n(Fi,"P",{});var G7t=s(Zve);swr=r(G7t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),G7t.forEach(t),lwr=i(Fi),cf=n(Fi,"P",{});var QJ=s(cf);iwr=r(QJ,`Note:
Loading a model from its configuration file does `),eFe=n(QJ,"STRONG",{});var O7t=s(eFe);dwr=r(O7t,"not"),O7t.forEach(t),cwr=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(QJ,"A",{href:!0});var V7t=s(GW);fwr=r(V7t,"from_pretrained()"),V7t.forEach(t),mwr=r(QJ," to load the model weights."),QJ.forEach(t),gwr=i(Fi),oFe=n(Fi,"P",{});var X7t=s(oFe);hwr=r(X7t,"Examples:"),X7t.forEach(t),pwr=i(Fi),m(uL.$$.fragment,Fi),Fi.forEach(t),_wr=i(vi),ko=n(vi,"DIV",{class:!0});var Sa=s(ko);m(bL.$$.fragment,Sa),uwr=i(Sa),rFe=n(Sa,"P",{});var z7t=s(rFe);bwr=r(z7t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),z7t.forEach(t),vwr=i(Sa),Bn=n(Sa,"P",{});var vC=s(Bn);Fwr=r(vC,"The model class to instantiate is selected based on the "),tFe=n(vC,"CODE",{});var Q7t=s(tFe);Twr=r(Q7t,"model_type"),Q7t.forEach(t),Mwr=r(vC,` property of the config object (either
passed as an argument or loaded from `),aFe=n(vC,"CODE",{});var W7t=s(aFe);Ewr=r(W7t,"pretrained_model_name_or_path"),W7t.forEach(t),Cwr=r(vC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nFe=n(vC,"CODE",{});var H7t=s(nFe);wwr=r(H7t,"pretrained_model_name_or_path"),H7t.forEach(t),Awr=r(vC,":"),vC.forEach(t),ywr=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);p4=n(Ae,"LI",{});var ASe=s(p4);sFe=n(ASe,"STRONG",{});var U7t=s(sFe);Lwr=r(U7t,"albert"),U7t.forEach(t),xwr=r(ASe," \u2014 "),OW=n(ASe,"A",{href:!0});var J7t=s(OW);kwr=r(J7t,"FlaxAlbertForMaskedLM"),J7t.forEach(t),Swr=r(ASe," (ALBERT model)"),ASe.forEach(t),Rwr=i(Ae),_4=n(Ae,"LI",{});var ySe=s(_4);lFe=n(ySe,"STRONG",{});var Y7t=s(lFe);Bwr=r(Y7t,"bart"),Y7t.forEach(t),Pwr=r(ySe," \u2014 "),VW=n(ySe,"A",{href:!0});var K7t=s(VW);$wr=r(K7t,"FlaxBartForConditionalGeneration"),K7t.forEach(t),Iwr=r(ySe," (BART model)"),ySe.forEach(t),qwr=i(Ae),u4=n(Ae,"LI",{});var LSe=s(u4);iFe=n(LSe,"STRONG",{});var Z7t=s(iFe);Nwr=r(Z7t,"bert"),Z7t.forEach(t),jwr=r(LSe," \u2014 "),XW=n(LSe,"A",{href:!0});var eMt=s(XW);Dwr=r(eMt,"FlaxBertForMaskedLM"),eMt.forEach(t),Gwr=r(LSe," (BERT model)"),LSe.forEach(t),Owr=i(Ae),b4=n(Ae,"LI",{});var xSe=s(b4);dFe=n(xSe,"STRONG",{});var oMt=s(dFe);Vwr=r(oMt,"big_bird"),oMt.forEach(t),Xwr=r(xSe," \u2014 "),zW=n(xSe,"A",{href:!0});var rMt=s(zW);zwr=r(rMt,"FlaxBigBirdForMaskedLM"),rMt.forEach(t),Qwr=r(xSe," (BigBird model)"),xSe.forEach(t),Wwr=i(Ae),v4=n(Ae,"LI",{});var kSe=s(v4);cFe=n(kSe,"STRONG",{});var tMt=s(cFe);Hwr=r(tMt,"distilbert"),tMt.forEach(t),Uwr=r(kSe," \u2014 "),QW=n(kSe,"A",{href:!0});var aMt=s(QW);Jwr=r(aMt,"FlaxDistilBertForMaskedLM"),aMt.forEach(t),Ywr=r(kSe," (DistilBERT model)"),kSe.forEach(t),Kwr=i(Ae),F4=n(Ae,"LI",{});var SSe=s(F4);fFe=n(SSe,"STRONG",{});var nMt=s(fFe);Zwr=r(nMt,"electra"),nMt.forEach(t),eAr=r(SSe," \u2014 "),WW=n(SSe,"A",{href:!0});var sMt=s(WW);oAr=r(sMt,"FlaxElectraForMaskedLM"),sMt.forEach(t),rAr=r(SSe," (ELECTRA model)"),SSe.forEach(t),tAr=i(Ae),T4=n(Ae,"LI",{});var RSe=s(T4);mFe=n(RSe,"STRONG",{});var lMt=s(mFe);aAr=r(lMt,"mbart"),lMt.forEach(t),nAr=r(RSe," \u2014 "),HW=n(RSe,"A",{href:!0});var iMt=s(HW);sAr=r(iMt,"FlaxMBartForConditionalGeneration"),iMt.forEach(t),lAr=r(RSe," (mBART model)"),RSe.forEach(t),iAr=i(Ae),M4=n(Ae,"LI",{});var BSe=s(M4);gFe=n(BSe,"STRONG",{});var dMt=s(gFe);dAr=r(dMt,"roberta"),dMt.forEach(t),cAr=r(BSe," \u2014 "),UW=n(BSe,"A",{href:!0});var cMt=s(UW);fAr=r(cMt,"FlaxRobertaForMaskedLM"),cMt.forEach(t),mAr=r(BSe," (RoBERTa model)"),BSe.forEach(t),gAr=i(Ae),E4=n(Ae,"LI",{});var PSe=s(E4);hFe=n(PSe,"STRONG",{});var fMt=s(hFe);hAr=r(fMt,"roformer"),fMt.forEach(t),pAr=r(PSe," \u2014 "),JW=n(PSe,"A",{href:!0});var mMt=s(JW);_Ar=r(mMt,"FlaxRoFormerForMaskedLM"),mMt.forEach(t),uAr=r(PSe," (RoFormer model)"),PSe.forEach(t),bAr=i(Ae),C4=n(Ae,"LI",{});var $Se=s(C4);pFe=n($Se,"STRONG",{});var gMt=s(pFe);vAr=r(gMt,"xlm-roberta"),gMt.forEach(t),FAr=r($Se," \u2014 "),YW=n($Se,"A",{href:!0});var hMt=s(YW);TAr=r(hMt,"FlaxXLMRobertaForMaskedLM"),hMt.forEach(t),MAr=r($Se," (XLM-RoBERTa model)"),$Se.forEach(t),Ae.forEach(t),EAr=i(Sa),_Fe=n(Sa,"P",{});var pMt=s(_Fe);CAr=r(pMt,"Examples:"),pMt.forEach(t),wAr=i(Sa),m(vL.$$.fragment,Sa),Sa.forEach(t),vi.forEach(t),_Pe=i(c),ff=n(c,"H2",{class:!0});var yIe=s(ff);w4=n(yIe,"A",{id:!0,class:!0,href:!0});var _Mt=s(w4);uFe=n(_Mt,"SPAN",{});var uMt=s(uFe);m(FL.$$.fragment,uMt),uMt.forEach(t),_Mt.forEach(t),AAr=i(yIe),bFe=n(yIe,"SPAN",{});var bMt=s(bFe);yAr=r(bMt,"FlaxAutoModelForSeq2SeqLM"),bMt.forEach(t),yIe.forEach(t),uPe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(TL.$$.fragment,Ti),LAr=i(Ti),mf=n(Ti,"P",{});var WJ=s(mf);xAr=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),KW=n(WJ,"A",{href:!0});var vMt=s(KW);kAr=r(vMt,"from_pretrained()"),vMt.forEach(t),SAr=r(WJ," class method or the "),ZW=n(WJ,"A",{href:!0});var FMt=s(ZW);RAr=r(FMt,"from_config()"),FMt.forEach(t),BAr=r(WJ,` class
method.`),WJ.forEach(t),PAr=i(Ti),ML=n(Ti,"P",{});var LIe=s(ML);$Ar=r(LIe,"This class cannot be instantiated directly using "),vFe=n(LIe,"CODE",{});var TMt=s(vFe);IAr=r(TMt,"__init__()"),TMt.forEach(t),qAr=r(LIe," (throws an error)."),LIe.forEach(t),NAr=i(Ti),kt=n(Ti,"DIV",{class:!0});var Mi=s(kt);m(EL.$$.fragment,Mi),jAr=i(Mi),FFe=n(Mi,"P",{});var MMt=s(FFe);DAr=r(MMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),MMt.forEach(t),GAr=i(Mi),gf=n(Mi,"P",{});var HJ=s(gf);OAr=r(HJ,`Note:
Loading a model from its configuration file does `),TFe=n(HJ,"STRONG",{});var EMt=s(TFe);VAr=r(EMt,"not"),EMt.forEach(t),XAr=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(HJ,"A",{href:!0});var CMt=s(eH);zAr=r(CMt,"from_pretrained()"),CMt.forEach(t),QAr=r(HJ," to load the model weights."),HJ.forEach(t),WAr=i(Mi),MFe=n(Mi,"P",{});var wMt=s(MFe);HAr=r(wMt,"Examples:"),wMt.forEach(t),UAr=i(Mi),m(CL.$$.fragment,Mi),Mi.forEach(t),JAr=i(Ti),So=n(Ti,"DIV",{class:!0});var Ra=s(So);m(wL.$$.fragment,Ra),YAr=i(Ra),EFe=n(Ra,"P",{});var AMt=s(EFe);KAr=r(AMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),AMt.forEach(t),ZAr=i(Ra),Pn=n(Ra,"P",{});var FC=s(Pn);eyr=r(FC,"The model class to instantiate is selected based on the "),CFe=n(FC,"CODE",{});var yMt=s(CFe);oyr=r(yMt,"model_type"),yMt.forEach(t),ryr=r(FC,` property of the config object (either
passed as an argument or loaded from `),wFe=n(FC,"CODE",{});var LMt=s(wFe);tyr=r(LMt,"pretrained_model_name_or_path"),LMt.forEach(t),ayr=r(FC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=n(FC,"CODE",{});var xMt=s(AFe);nyr=r(xMt,"pretrained_model_name_or_path"),xMt.forEach(t),syr=r(FC,":"),FC.forEach(t),lyr=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);A4=n(so,"LI",{});var ISe=s(A4);yFe=n(ISe,"STRONG",{});var kMt=s(yFe);iyr=r(kMt,"bart"),kMt.forEach(t),dyr=r(ISe," \u2014 "),oH=n(ISe,"A",{href:!0});var SMt=s(oH);cyr=r(SMt,"FlaxBartForConditionalGeneration"),SMt.forEach(t),fyr=r(ISe," (BART model)"),ISe.forEach(t),myr=i(so),y4=n(so,"LI",{});var qSe=s(y4);LFe=n(qSe,"STRONG",{});var RMt=s(LFe);gyr=r(RMt,"blenderbot"),RMt.forEach(t),hyr=r(qSe," \u2014 "),rH=n(qSe,"A",{href:!0});var BMt=s(rH);pyr=r(BMt,"FlaxBlenderbotForConditionalGeneration"),BMt.forEach(t),_yr=r(qSe," (Blenderbot model)"),qSe.forEach(t),uyr=i(so),L4=n(so,"LI",{});var NSe=s(L4);xFe=n(NSe,"STRONG",{});var PMt=s(xFe);byr=r(PMt,"blenderbot-small"),PMt.forEach(t),vyr=r(NSe," \u2014 "),tH=n(NSe,"A",{href:!0});var $Mt=s(tH);Fyr=r($Mt,"FlaxBlenderbotSmallForConditionalGeneration"),$Mt.forEach(t),Tyr=r(NSe," (BlenderbotSmall model)"),NSe.forEach(t),Myr=i(so),x4=n(so,"LI",{});var jSe=s(x4);kFe=n(jSe,"STRONG",{});var IMt=s(kFe);Eyr=r(IMt,"encoder-decoder"),IMt.forEach(t),Cyr=r(jSe," \u2014 "),aH=n(jSe,"A",{href:!0});var qMt=s(aH);wyr=r(qMt,"FlaxEncoderDecoderModel"),qMt.forEach(t),Ayr=r(jSe," (Encoder decoder model)"),jSe.forEach(t),yyr=i(so),k4=n(so,"LI",{});var DSe=s(k4);SFe=n(DSe,"STRONG",{});var NMt=s(SFe);Lyr=r(NMt,"marian"),NMt.forEach(t),xyr=r(DSe," \u2014 "),nH=n(DSe,"A",{href:!0});var jMt=s(nH);kyr=r(jMt,"FlaxMarianMTModel"),jMt.forEach(t),Syr=r(DSe," (Marian model)"),DSe.forEach(t),Ryr=i(so),S4=n(so,"LI",{});var GSe=s(S4);RFe=n(GSe,"STRONG",{});var DMt=s(RFe);Byr=r(DMt,"mbart"),DMt.forEach(t),Pyr=r(GSe," \u2014 "),sH=n(GSe,"A",{href:!0});var GMt=s(sH);$yr=r(GMt,"FlaxMBartForConditionalGeneration"),GMt.forEach(t),Iyr=r(GSe," (mBART model)"),GSe.forEach(t),qyr=i(so),R4=n(so,"LI",{});var OSe=s(R4);BFe=n(OSe,"STRONG",{});var OMt=s(BFe);Nyr=r(OMt,"mt5"),OMt.forEach(t),jyr=r(OSe," \u2014 "),lH=n(OSe,"A",{href:!0});var VMt=s(lH);Dyr=r(VMt,"FlaxMT5ForConditionalGeneration"),VMt.forEach(t),Gyr=r(OSe," (mT5 model)"),OSe.forEach(t),Oyr=i(so),B4=n(so,"LI",{});var VSe=s(B4);PFe=n(VSe,"STRONG",{});var XMt=s(PFe);Vyr=r(XMt,"pegasus"),XMt.forEach(t),Xyr=r(VSe," \u2014 "),iH=n(VSe,"A",{href:!0});var zMt=s(iH);zyr=r(zMt,"FlaxPegasusForConditionalGeneration"),zMt.forEach(t),Qyr=r(VSe," (Pegasus model)"),VSe.forEach(t),Wyr=i(so),P4=n(so,"LI",{});var XSe=s(P4);$Fe=n(XSe,"STRONG",{});var QMt=s($Fe);Hyr=r(QMt,"t5"),QMt.forEach(t),Uyr=r(XSe," \u2014 "),dH=n(XSe,"A",{href:!0});var WMt=s(dH);Jyr=r(WMt,"FlaxT5ForConditionalGeneration"),WMt.forEach(t),Yyr=r(XSe," (T5 model)"),XSe.forEach(t),so.forEach(t),Kyr=i(Ra),IFe=n(Ra,"P",{});var HMt=s(IFe);Zyr=r(HMt,"Examples:"),HMt.forEach(t),eLr=i(Ra),m(AL.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),bPe=i(c),hf=n(c,"H2",{class:!0});var xIe=s(hf);$4=n(xIe,"A",{id:!0,class:!0,href:!0});var UMt=s($4);qFe=n(UMt,"SPAN",{});var JMt=s(qFe);m(yL.$$.fragment,JMt),JMt.forEach(t),UMt.forEach(t),oLr=i(xIe),NFe=n(xIe,"SPAN",{});var YMt=s(NFe);rLr=r(YMt,"FlaxAutoModelForSequenceClassification"),YMt.forEach(t),xIe.forEach(t),vPe=i(c),qr=n(c,"DIV",{class:!0});var Ei=s(qr);m(LL.$$.fragment,Ei),tLr=i(Ei),pf=n(Ei,"P",{});var UJ=s(pf);aLr=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cH=n(UJ,"A",{href:!0});var KMt=s(cH);nLr=r(KMt,"from_pretrained()"),KMt.forEach(t),sLr=r(UJ," class method or the "),fH=n(UJ,"A",{href:!0});var ZMt=s(fH);lLr=r(ZMt,"from_config()"),ZMt.forEach(t),iLr=r(UJ,` class
method.`),UJ.forEach(t),dLr=i(Ei),xL=n(Ei,"P",{});var kIe=s(xL);cLr=r(kIe,"This class cannot be instantiated directly using "),jFe=n(kIe,"CODE",{});var e4t=s(jFe);fLr=r(e4t,"__init__()"),e4t.forEach(t),mLr=r(kIe," (throws an error)."),kIe.forEach(t),gLr=i(Ei),St=n(Ei,"DIV",{class:!0});var Ci=s(St);m(kL.$$.fragment,Ci),hLr=i(Ci),DFe=n(Ci,"P",{});var o4t=s(DFe);pLr=r(o4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),o4t.forEach(t),_Lr=i(Ci),_f=n(Ci,"P",{});var JJ=s(_f);uLr=r(JJ,`Note:
Loading a model from its configuration file does `),GFe=n(JJ,"STRONG",{});var r4t=s(GFe);bLr=r(r4t,"not"),r4t.forEach(t),vLr=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(JJ,"A",{href:!0});var t4t=s(mH);FLr=r(t4t,"from_pretrained()"),t4t.forEach(t),TLr=r(JJ," to load the model weights."),JJ.forEach(t),MLr=i(Ci),OFe=n(Ci,"P",{});var a4t=s(OFe);ELr=r(a4t,"Examples:"),a4t.forEach(t),CLr=i(Ci),m(SL.$$.fragment,Ci),Ci.forEach(t),wLr=i(Ei),Ro=n(Ei,"DIV",{class:!0});var Ba=s(Ro);m(RL.$$.fragment,Ba),ALr=i(Ba),VFe=n(Ba,"P",{});var n4t=s(VFe);yLr=r(n4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),n4t.forEach(t),LLr=i(Ba),$n=n(Ba,"P",{});var TC=s($n);xLr=r(TC,"The model class to instantiate is selected based on the "),XFe=n(TC,"CODE",{});var s4t=s(XFe);kLr=r(s4t,"model_type"),s4t.forEach(t),SLr=r(TC,` property of the config object (either
passed as an argument or loaded from `),zFe=n(TC,"CODE",{});var l4t=s(zFe);RLr=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),BLr=r(TC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=n(TC,"CODE",{});var i4t=s(QFe);PLr=r(i4t,"pretrained_model_name_or_path"),i4t.forEach(t),$Lr=r(TC,":"),TC.forEach(t),ILr=i(Ba),Fe=n(Ba,"UL",{});var ye=s(Fe);I4=n(ye,"LI",{});var zSe=s(I4);WFe=n(zSe,"STRONG",{});var d4t=s(WFe);qLr=r(d4t,"albert"),d4t.forEach(t),NLr=r(zSe," \u2014 "),gH=n(zSe,"A",{href:!0});var c4t=s(gH);jLr=r(c4t,"FlaxAlbertForSequenceClassification"),c4t.forEach(t),DLr=r(zSe," (ALBERT model)"),zSe.forEach(t),GLr=i(ye),q4=n(ye,"LI",{});var QSe=s(q4);HFe=n(QSe,"STRONG",{});var f4t=s(HFe);OLr=r(f4t,"bart"),f4t.forEach(t),VLr=r(QSe," \u2014 "),hH=n(QSe,"A",{href:!0});var m4t=s(hH);XLr=r(m4t,"FlaxBartForSequenceClassification"),m4t.forEach(t),zLr=r(QSe," (BART model)"),QSe.forEach(t),QLr=i(ye),N4=n(ye,"LI",{});var WSe=s(N4);UFe=n(WSe,"STRONG",{});var g4t=s(UFe);WLr=r(g4t,"bert"),g4t.forEach(t),HLr=r(WSe," \u2014 "),pH=n(WSe,"A",{href:!0});var h4t=s(pH);ULr=r(h4t,"FlaxBertForSequenceClassification"),h4t.forEach(t),JLr=r(WSe," (BERT model)"),WSe.forEach(t),YLr=i(ye),j4=n(ye,"LI",{});var HSe=s(j4);JFe=n(HSe,"STRONG",{});var p4t=s(JFe);KLr=r(p4t,"big_bird"),p4t.forEach(t),ZLr=r(HSe," \u2014 "),_H=n(HSe,"A",{href:!0});var _4t=s(_H);e8r=r(_4t,"FlaxBigBirdForSequenceClassification"),_4t.forEach(t),o8r=r(HSe," (BigBird model)"),HSe.forEach(t),r8r=i(ye),D4=n(ye,"LI",{});var USe=s(D4);YFe=n(USe,"STRONG",{});var u4t=s(YFe);t8r=r(u4t,"distilbert"),u4t.forEach(t),a8r=r(USe," \u2014 "),uH=n(USe,"A",{href:!0});var b4t=s(uH);n8r=r(b4t,"FlaxDistilBertForSequenceClassification"),b4t.forEach(t),s8r=r(USe," (DistilBERT model)"),USe.forEach(t),l8r=i(ye),G4=n(ye,"LI",{});var JSe=s(G4);KFe=n(JSe,"STRONG",{});var v4t=s(KFe);i8r=r(v4t,"electra"),v4t.forEach(t),d8r=r(JSe," \u2014 "),bH=n(JSe,"A",{href:!0});var F4t=s(bH);c8r=r(F4t,"FlaxElectraForSequenceClassification"),F4t.forEach(t),f8r=r(JSe," (ELECTRA model)"),JSe.forEach(t),m8r=i(ye),O4=n(ye,"LI",{});var YSe=s(O4);ZFe=n(YSe,"STRONG",{});var T4t=s(ZFe);g8r=r(T4t,"mbart"),T4t.forEach(t),h8r=r(YSe," \u2014 "),vH=n(YSe,"A",{href:!0});var M4t=s(vH);p8r=r(M4t,"FlaxMBartForSequenceClassification"),M4t.forEach(t),_8r=r(YSe," (mBART model)"),YSe.forEach(t),u8r=i(ye),V4=n(ye,"LI",{});var KSe=s(V4);e0e=n(KSe,"STRONG",{});var E4t=s(e0e);b8r=r(E4t,"roberta"),E4t.forEach(t),v8r=r(KSe," \u2014 "),FH=n(KSe,"A",{href:!0});var C4t=s(FH);F8r=r(C4t,"FlaxRobertaForSequenceClassification"),C4t.forEach(t),T8r=r(KSe," (RoBERTa model)"),KSe.forEach(t),M8r=i(ye),X4=n(ye,"LI",{});var ZSe=s(X4);o0e=n(ZSe,"STRONG",{});var w4t=s(o0e);E8r=r(w4t,"roformer"),w4t.forEach(t),C8r=r(ZSe," \u2014 "),TH=n(ZSe,"A",{href:!0});var A4t=s(TH);w8r=r(A4t,"FlaxRoFormerForSequenceClassification"),A4t.forEach(t),A8r=r(ZSe," (RoFormer model)"),ZSe.forEach(t),y8r=i(ye),z4=n(ye,"LI",{});var eRe=s(z4);r0e=n(eRe,"STRONG",{});var y4t=s(r0e);L8r=r(y4t,"xlm-roberta"),y4t.forEach(t),x8r=r(eRe," \u2014 "),MH=n(eRe,"A",{href:!0});var L4t=s(MH);k8r=r(L4t,"FlaxXLMRobertaForSequenceClassification"),L4t.forEach(t),S8r=r(eRe," (XLM-RoBERTa model)"),eRe.forEach(t),ye.forEach(t),R8r=i(Ba),t0e=n(Ba,"P",{});var x4t=s(t0e);B8r=r(x4t,"Examples:"),x4t.forEach(t),P8r=i(Ba),m(BL.$$.fragment,Ba),Ba.forEach(t),Ei.forEach(t),FPe=i(c),uf=n(c,"H2",{class:!0});var SIe=s(uf);Q4=n(SIe,"A",{id:!0,class:!0,href:!0});var k4t=s(Q4);a0e=n(k4t,"SPAN",{});var S4t=s(a0e);m(PL.$$.fragment,S4t),S4t.forEach(t),k4t.forEach(t),$8r=i(SIe),n0e=n(SIe,"SPAN",{});var R4t=s(n0e);I8r=r(R4t,"FlaxAutoModelForQuestionAnswering"),R4t.forEach(t),SIe.forEach(t),TPe=i(c),Nr=n(c,"DIV",{class:!0});var wi=s(Nr);m($L.$$.fragment,wi),q8r=i(wi),bf=n(wi,"P",{});var YJ=s(bf);N8r=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EH=n(YJ,"A",{href:!0});var B4t=s(EH);j8r=r(B4t,"from_pretrained()"),B4t.forEach(t),D8r=r(YJ," class method or the "),CH=n(YJ,"A",{href:!0});var P4t=s(CH);G8r=r(P4t,"from_config()"),P4t.forEach(t),O8r=r(YJ,` class
method.`),YJ.forEach(t),V8r=i(wi),IL=n(wi,"P",{});var RIe=s(IL);X8r=r(RIe,"This class cannot be instantiated directly using "),s0e=n(RIe,"CODE",{});var $4t=s(s0e);z8r=r($4t,"__init__()"),$4t.forEach(t),Q8r=r(RIe," (throws an error)."),RIe.forEach(t),W8r=i(wi),Rt=n(wi,"DIV",{class:!0});var Ai=s(Rt);m(qL.$$.fragment,Ai),H8r=i(Ai),l0e=n(Ai,"P",{});var I4t=s(l0e);U8r=r(I4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),I4t.forEach(t),J8r=i(Ai),vf=n(Ai,"P",{});var KJ=s(vf);Y8r=r(KJ,`Note:
Loading a model from its configuration file does `),i0e=n(KJ,"STRONG",{});var q4t=s(i0e);K8r=r(q4t,"not"),q4t.forEach(t),Z8r=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(KJ,"A",{href:!0});var N4t=s(wH);e9r=r(N4t,"from_pretrained()"),N4t.forEach(t),o9r=r(KJ," to load the model weights."),KJ.forEach(t),r9r=i(Ai),d0e=n(Ai,"P",{});var j4t=s(d0e);t9r=r(j4t,"Examples:"),j4t.forEach(t),a9r=i(Ai),m(NL.$$.fragment,Ai),Ai.forEach(t),n9r=i(wi),Bo=n(wi,"DIV",{class:!0});var Pa=s(Bo);m(jL.$$.fragment,Pa),s9r=i(Pa),c0e=n(Pa,"P",{});var D4t=s(c0e);l9r=r(D4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),D4t.forEach(t),i9r=i(Pa),In=n(Pa,"P",{});var MC=s(In);d9r=r(MC,"The model class to instantiate is selected based on the "),f0e=n(MC,"CODE",{});var G4t=s(f0e);c9r=r(G4t,"model_type"),G4t.forEach(t),f9r=r(MC,` property of the config object (either
passed as an argument or loaded from `),m0e=n(MC,"CODE",{});var O4t=s(m0e);m9r=r(O4t,"pretrained_model_name_or_path"),O4t.forEach(t),g9r=r(MC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g0e=n(MC,"CODE",{});var V4t=s(g0e);h9r=r(V4t,"pretrained_model_name_or_path"),V4t.forEach(t),p9r=r(MC,":"),MC.forEach(t),_9r=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);W4=n(Le,"LI",{});var oRe=s(W4);h0e=n(oRe,"STRONG",{});var X4t=s(h0e);u9r=r(X4t,"albert"),X4t.forEach(t),b9r=r(oRe," \u2014 "),AH=n(oRe,"A",{href:!0});var z4t=s(AH);v9r=r(z4t,"FlaxAlbertForQuestionAnswering"),z4t.forEach(t),F9r=r(oRe," (ALBERT model)"),oRe.forEach(t),T9r=i(Le),H4=n(Le,"LI",{});var rRe=s(H4);p0e=n(rRe,"STRONG",{});var Q4t=s(p0e);M9r=r(Q4t,"bart"),Q4t.forEach(t),E9r=r(rRe," \u2014 "),yH=n(rRe,"A",{href:!0});var W4t=s(yH);C9r=r(W4t,"FlaxBartForQuestionAnswering"),W4t.forEach(t),w9r=r(rRe," (BART model)"),rRe.forEach(t),A9r=i(Le),U4=n(Le,"LI",{});var tRe=s(U4);_0e=n(tRe,"STRONG",{});var H4t=s(_0e);y9r=r(H4t,"bert"),H4t.forEach(t),L9r=r(tRe," \u2014 "),LH=n(tRe,"A",{href:!0});var U4t=s(LH);x9r=r(U4t,"FlaxBertForQuestionAnswering"),U4t.forEach(t),k9r=r(tRe," (BERT model)"),tRe.forEach(t),S9r=i(Le),J4=n(Le,"LI",{});var aRe=s(J4);u0e=n(aRe,"STRONG",{});var J4t=s(u0e);R9r=r(J4t,"big_bird"),J4t.forEach(t),B9r=r(aRe," \u2014 "),xH=n(aRe,"A",{href:!0});var Y4t=s(xH);P9r=r(Y4t,"FlaxBigBirdForQuestionAnswering"),Y4t.forEach(t),$9r=r(aRe," (BigBird model)"),aRe.forEach(t),I9r=i(Le),Y4=n(Le,"LI",{});var nRe=s(Y4);b0e=n(nRe,"STRONG",{});var K4t=s(b0e);q9r=r(K4t,"distilbert"),K4t.forEach(t),N9r=r(nRe," \u2014 "),kH=n(nRe,"A",{href:!0});var Z4t=s(kH);j9r=r(Z4t,"FlaxDistilBertForQuestionAnswering"),Z4t.forEach(t),D9r=r(nRe," (DistilBERT model)"),nRe.forEach(t),G9r=i(Le),K4=n(Le,"LI",{});var sRe=s(K4);v0e=n(sRe,"STRONG",{});var eEt=s(v0e);O9r=r(eEt,"electra"),eEt.forEach(t),V9r=r(sRe," \u2014 "),SH=n(sRe,"A",{href:!0});var oEt=s(SH);X9r=r(oEt,"FlaxElectraForQuestionAnswering"),oEt.forEach(t),z9r=r(sRe," (ELECTRA model)"),sRe.forEach(t),Q9r=i(Le),Z4=n(Le,"LI",{});var lRe=s(Z4);F0e=n(lRe,"STRONG",{});var rEt=s(F0e);W9r=r(rEt,"mbart"),rEt.forEach(t),H9r=r(lRe," \u2014 "),RH=n(lRe,"A",{href:!0});var tEt=s(RH);U9r=r(tEt,"FlaxMBartForQuestionAnswering"),tEt.forEach(t),J9r=r(lRe," (mBART model)"),lRe.forEach(t),Y9r=i(Le),eE=n(Le,"LI",{});var iRe=s(eE);T0e=n(iRe,"STRONG",{});var aEt=s(T0e);K9r=r(aEt,"roberta"),aEt.forEach(t),Z9r=r(iRe," \u2014 "),BH=n(iRe,"A",{href:!0});var nEt=s(BH);exr=r(nEt,"FlaxRobertaForQuestionAnswering"),nEt.forEach(t),oxr=r(iRe," (RoBERTa model)"),iRe.forEach(t),rxr=i(Le),oE=n(Le,"LI",{});var dRe=s(oE);M0e=n(dRe,"STRONG",{});var sEt=s(M0e);txr=r(sEt,"roformer"),sEt.forEach(t),axr=r(dRe," \u2014 "),PH=n(dRe,"A",{href:!0});var lEt=s(PH);nxr=r(lEt,"FlaxRoFormerForQuestionAnswering"),lEt.forEach(t),sxr=r(dRe," (RoFormer model)"),dRe.forEach(t),lxr=i(Le),rE=n(Le,"LI",{});var cRe=s(rE);E0e=n(cRe,"STRONG",{});var iEt=s(E0e);ixr=r(iEt,"xlm-roberta"),iEt.forEach(t),dxr=r(cRe," \u2014 "),$H=n(cRe,"A",{href:!0});var dEt=s($H);cxr=r(dEt,"FlaxXLMRobertaForQuestionAnswering"),dEt.forEach(t),fxr=r(cRe," (XLM-RoBERTa model)"),cRe.forEach(t),Le.forEach(t),mxr=i(Pa),C0e=n(Pa,"P",{});var cEt=s(C0e);gxr=r(cEt,"Examples:"),cEt.forEach(t),hxr=i(Pa),m(DL.$$.fragment,Pa),Pa.forEach(t),wi.forEach(t),MPe=i(c),Ff=n(c,"H2",{class:!0});var BIe=s(Ff);tE=n(BIe,"A",{id:!0,class:!0,href:!0});var fEt=s(tE);w0e=n(fEt,"SPAN",{});var mEt=s(w0e);m(GL.$$.fragment,mEt),mEt.forEach(t),fEt.forEach(t),pxr=i(BIe),A0e=n(BIe,"SPAN",{});var gEt=s(A0e);_xr=r(gEt,"FlaxAutoModelForTokenClassification"),gEt.forEach(t),BIe.forEach(t),EPe=i(c),jr=n(c,"DIV",{class:!0});var yi=s(jr);m(OL.$$.fragment,yi),uxr=i(yi),Tf=n(yi,"P",{});var ZJ=s(Tf);bxr=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),IH=n(ZJ,"A",{href:!0});var hEt=s(IH);vxr=r(hEt,"from_pretrained()"),hEt.forEach(t),Fxr=r(ZJ," class method or the "),qH=n(ZJ,"A",{href:!0});var pEt=s(qH);Txr=r(pEt,"from_config()"),pEt.forEach(t),Mxr=r(ZJ,` class
method.`),ZJ.forEach(t),Exr=i(yi),VL=n(yi,"P",{});var PIe=s(VL);Cxr=r(PIe,"This class cannot be instantiated directly using "),y0e=n(PIe,"CODE",{});var _Et=s(y0e);wxr=r(_Et,"__init__()"),_Et.forEach(t),Axr=r(PIe," (throws an error)."),PIe.forEach(t),yxr=i(yi),Bt=n(yi,"DIV",{class:!0});var Li=s(Bt);m(XL.$$.fragment,Li),Lxr=i(Li),L0e=n(Li,"P",{});var uEt=s(L0e);xxr=r(uEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uEt.forEach(t),kxr=i(Li),Mf=n(Li,"P",{});var eY=s(Mf);Sxr=r(eY,`Note:
Loading a model from its configuration file does `),x0e=n(eY,"STRONG",{});var bEt=s(x0e);Rxr=r(bEt,"not"),bEt.forEach(t),Bxr=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(eY,"A",{href:!0});var vEt=s(NH);Pxr=r(vEt,"from_pretrained()"),vEt.forEach(t),$xr=r(eY," to load the model weights."),eY.forEach(t),Ixr=i(Li),k0e=n(Li,"P",{});var FEt=s(k0e);qxr=r(FEt,"Examples:"),FEt.forEach(t),Nxr=i(Li),m(zL.$$.fragment,Li),Li.forEach(t),jxr=i(yi),Po=n(yi,"DIV",{class:!0});var $a=s(Po);m(QL.$$.fragment,$a),Dxr=i($a),S0e=n($a,"P",{});var TEt=s(S0e);Gxr=r(TEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),TEt.forEach(t),Oxr=i($a),qn=n($a,"P",{});var EC=s(qn);Vxr=r(EC,"The model class to instantiate is selected based on the "),R0e=n(EC,"CODE",{});var MEt=s(R0e);Xxr=r(MEt,"model_type"),MEt.forEach(t),zxr=r(EC,` property of the config object (either
passed as an argument or loaded from `),B0e=n(EC,"CODE",{});var EEt=s(B0e);Qxr=r(EEt,"pretrained_model_name_or_path"),EEt.forEach(t),Wxr=r(EC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P0e=n(EC,"CODE",{});var CEt=s(P0e);Hxr=r(CEt,"pretrained_model_name_or_path"),CEt.forEach(t),Uxr=r(EC,":"),EC.forEach(t),Jxr=i($a),Be=n($a,"UL",{});var Oo=s(Be);aE=n(Oo,"LI",{});var fRe=s(aE);$0e=n(fRe,"STRONG",{});var wEt=s($0e);Yxr=r(wEt,"albert"),wEt.forEach(t),Kxr=r(fRe," \u2014 "),jH=n(fRe,"A",{href:!0});var AEt=s(jH);Zxr=r(AEt,"FlaxAlbertForTokenClassification"),AEt.forEach(t),ekr=r(fRe," (ALBERT model)"),fRe.forEach(t),okr=i(Oo),nE=n(Oo,"LI",{});var mRe=s(nE);I0e=n(mRe,"STRONG",{});var yEt=s(I0e);rkr=r(yEt,"bert"),yEt.forEach(t),tkr=r(mRe," \u2014 "),DH=n(mRe,"A",{href:!0});var LEt=s(DH);akr=r(LEt,"FlaxBertForTokenClassification"),LEt.forEach(t),nkr=r(mRe," (BERT model)"),mRe.forEach(t),skr=i(Oo),sE=n(Oo,"LI",{});var gRe=s(sE);q0e=n(gRe,"STRONG",{});var xEt=s(q0e);lkr=r(xEt,"big_bird"),xEt.forEach(t),ikr=r(gRe," \u2014 "),GH=n(gRe,"A",{href:!0});var kEt=s(GH);dkr=r(kEt,"FlaxBigBirdForTokenClassification"),kEt.forEach(t),ckr=r(gRe," (BigBird model)"),gRe.forEach(t),fkr=i(Oo),lE=n(Oo,"LI",{});var hRe=s(lE);N0e=n(hRe,"STRONG",{});var SEt=s(N0e);mkr=r(SEt,"distilbert"),SEt.forEach(t),gkr=r(hRe," \u2014 "),OH=n(hRe,"A",{href:!0});var REt=s(OH);hkr=r(REt,"FlaxDistilBertForTokenClassification"),REt.forEach(t),pkr=r(hRe," (DistilBERT model)"),hRe.forEach(t),_kr=i(Oo),iE=n(Oo,"LI",{});var pRe=s(iE);j0e=n(pRe,"STRONG",{});var BEt=s(j0e);ukr=r(BEt,"electra"),BEt.forEach(t),bkr=r(pRe," \u2014 "),VH=n(pRe,"A",{href:!0});var PEt=s(VH);vkr=r(PEt,"FlaxElectraForTokenClassification"),PEt.forEach(t),Fkr=r(pRe," (ELECTRA model)"),pRe.forEach(t),Tkr=i(Oo),dE=n(Oo,"LI",{});var _Re=s(dE);D0e=n(_Re,"STRONG",{});var $Et=s(D0e);Mkr=r($Et,"roberta"),$Et.forEach(t),Ekr=r(_Re," \u2014 "),XH=n(_Re,"A",{href:!0});var IEt=s(XH);Ckr=r(IEt,"FlaxRobertaForTokenClassification"),IEt.forEach(t),wkr=r(_Re," (RoBERTa model)"),_Re.forEach(t),Akr=i(Oo),cE=n(Oo,"LI",{});var uRe=s(cE);G0e=n(uRe,"STRONG",{});var qEt=s(G0e);ykr=r(qEt,"roformer"),qEt.forEach(t),Lkr=r(uRe," \u2014 "),zH=n(uRe,"A",{href:!0});var NEt=s(zH);xkr=r(NEt,"FlaxRoFormerForTokenClassification"),NEt.forEach(t),kkr=r(uRe," (RoFormer model)"),uRe.forEach(t),Skr=i(Oo),fE=n(Oo,"LI",{});var bRe=s(fE);O0e=n(bRe,"STRONG",{});var jEt=s(O0e);Rkr=r(jEt,"xlm-roberta"),jEt.forEach(t),Bkr=r(bRe," \u2014 "),QH=n(bRe,"A",{href:!0});var DEt=s(QH);Pkr=r(DEt,"FlaxXLMRobertaForTokenClassification"),DEt.forEach(t),$kr=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),Oo.forEach(t),Ikr=i($a),V0e=n($a,"P",{});var GEt=s(V0e);qkr=r(GEt,"Examples:"),GEt.forEach(t),Nkr=i($a),m(WL.$$.fragment,$a),$a.forEach(t),yi.forEach(t),CPe=i(c),Ef=n(c,"H2",{class:!0});var $Ie=s(Ef);mE=n($Ie,"A",{id:!0,class:!0,href:!0});var OEt=s(mE);X0e=n(OEt,"SPAN",{});var VEt=s(X0e);m(HL.$$.fragment,VEt),VEt.forEach(t),OEt.forEach(t),jkr=i($Ie),z0e=n($Ie,"SPAN",{});var XEt=s(z0e);Dkr=r(XEt,"FlaxAutoModelForMultipleChoice"),XEt.forEach(t),$Ie.forEach(t),wPe=i(c),Dr=n(c,"DIV",{class:!0});var xi=s(Dr);m(UL.$$.fragment,xi),Gkr=i(xi),Cf=n(xi,"P",{});var oY=s(Cf);Okr=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WH=n(oY,"A",{href:!0});var zEt=s(WH);Vkr=r(zEt,"from_pretrained()"),zEt.forEach(t),Xkr=r(oY," class method or the "),HH=n(oY,"A",{href:!0});var QEt=s(HH);zkr=r(QEt,"from_config()"),QEt.forEach(t),Qkr=r(oY,` class
method.`),oY.forEach(t),Wkr=i(xi),JL=n(xi,"P",{});var IIe=s(JL);Hkr=r(IIe,"This class cannot be instantiated directly using "),Q0e=n(IIe,"CODE",{});var WEt=s(Q0e);Ukr=r(WEt,"__init__()"),WEt.forEach(t),Jkr=r(IIe," (throws an error)."),IIe.forEach(t),Ykr=i(xi),Pt=n(xi,"DIV",{class:!0});var ki=s(Pt);m(YL.$$.fragment,ki),Kkr=i(ki),W0e=n(ki,"P",{});var HEt=s(W0e);Zkr=r(HEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),HEt.forEach(t),eSr=i(ki),wf=n(ki,"P",{});var rY=s(wf);oSr=r(rY,`Note:
Loading a model from its configuration file does `),H0e=n(rY,"STRONG",{});var UEt=s(H0e);rSr=r(UEt,"not"),UEt.forEach(t),tSr=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(rY,"A",{href:!0});var JEt=s(UH);aSr=r(JEt,"from_pretrained()"),JEt.forEach(t),nSr=r(rY," to load the model weights."),rY.forEach(t),sSr=i(ki),U0e=n(ki,"P",{});var YEt=s(U0e);lSr=r(YEt,"Examples:"),YEt.forEach(t),iSr=i(ki),m(KL.$$.fragment,ki),ki.forEach(t),dSr=i(xi),$o=n(xi,"DIV",{class:!0});var Ia=s($o);m(ZL.$$.fragment,Ia),cSr=i(Ia),J0e=n(Ia,"P",{});var KEt=s(J0e);fSr=r(KEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),KEt.forEach(t),mSr=i(Ia),Nn=n(Ia,"P",{});var CC=s(Nn);gSr=r(CC,"The model class to instantiate is selected based on the "),Y0e=n(CC,"CODE",{});var ZEt=s(Y0e);hSr=r(ZEt,"model_type"),ZEt.forEach(t),pSr=r(CC,` property of the config object (either
passed as an argument or loaded from `),K0e=n(CC,"CODE",{});var eCt=s(K0e);_Sr=r(eCt,"pretrained_model_name_or_path"),eCt.forEach(t),uSr=r(CC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=n(CC,"CODE",{});var oCt=s(Z0e);bSr=r(oCt,"pretrained_model_name_or_path"),oCt.forEach(t),vSr=r(CC,":"),CC.forEach(t),FSr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);gE=n(Vo,"LI",{});var vRe=s(gE);eTe=n(vRe,"STRONG",{});var rCt=s(eTe);TSr=r(rCt,"albert"),rCt.forEach(t),MSr=r(vRe," \u2014 "),JH=n(vRe,"A",{href:!0});var tCt=s(JH);ESr=r(tCt,"FlaxAlbertForMultipleChoice"),tCt.forEach(t),CSr=r(vRe," (ALBERT model)"),vRe.forEach(t),wSr=i(Vo),hE=n(Vo,"LI",{});var FRe=s(hE);oTe=n(FRe,"STRONG",{});var aCt=s(oTe);ASr=r(aCt,"bert"),aCt.forEach(t),ySr=r(FRe," \u2014 "),YH=n(FRe,"A",{href:!0});var nCt=s(YH);LSr=r(nCt,"FlaxBertForMultipleChoice"),nCt.forEach(t),xSr=r(FRe," (BERT model)"),FRe.forEach(t),kSr=i(Vo),pE=n(Vo,"LI",{});var TRe=s(pE);rTe=n(TRe,"STRONG",{});var sCt=s(rTe);SSr=r(sCt,"big_bird"),sCt.forEach(t),RSr=r(TRe," \u2014 "),KH=n(TRe,"A",{href:!0});var lCt=s(KH);BSr=r(lCt,"FlaxBigBirdForMultipleChoice"),lCt.forEach(t),PSr=r(TRe," (BigBird model)"),TRe.forEach(t),$Sr=i(Vo),_E=n(Vo,"LI",{});var MRe=s(_E);tTe=n(MRe,"STRONG",{});var iCt=s(tTe);ISr=r(iCt,"distilbert"),iCt.forEach(t),qSr=r(MRe," \u2014 "),ZH=n(MRe,"A",{href:!0});var dCt=s(ZH);NSr=r(dCt,"FlaxDistilBertForMultipleChoice"),dCt.forEach(t),jSr=r(MRe," (DistilBERT model)"),MRe.forEach(t),DSr=i(Vo),uE=n(Vo,"LI",{});var ERe=s(uE);aTe=n(ERe,"STRONG",{});var cCt=s(aTe);GSr=r(cCt,"electra"),cCt.forEach(t),OSr=r(ERe," \u2014 "),eU=n(ERe,"A",{href:!0});var fCt=s(eU);VSr=r(fCt,"FlaxElectraForMultipleChoice"),fCt.forEach(t),XSr=r(ERe," (ELECTRA model)"),ERe.forEach(t),zSr=i(Vo),bE=n(Vo,"LI",{});var CRe=s(bE);nTe=n(CRe,"STRONG",{});var mCt=s(nTe);QSr=r(mCt,"roberta"),mCt.forEach(t),WSr=r(CRe," \u2014 "),oU=n(CRe,"A",{href:!0});var gCt=s(oU);HSr=r(gCt,"FlaxRobertaForMultipleChoice"),gCt.forEach(t),USr=r(CRe," (RoBERTa model)"),CRe.forEach(t),JSr=i(Vo),vE=n(Vo,"LI",{});var wRe=s(vE);sTe=n(wRe,"STRONG",{});var hCt=s(sTe);YSr=r(hCt,"roformer"),hCt.forEach(t),KSr=r(wRe," \u2014 "),rU=n(wRe,"A",{href:!0});var pCt=s(rU);ZSr=r(pCt,"FlaxRoFormerForMultipleChoice"),pCt.forEach(t),eRr=r(wRe," (RoFormer model)"),wRe.forEach(t),oRr=i(Vo),FE=n(Vo,"LI",{});var ARe=s(FE);lTe=n(ARe,"STRONG",{});var _Ct=s(lTe);rRr=r(_Ct,"xlm-roberta"),_Ct.forEach(t),tRr=r(ARe," \u2014 "),tU=n(ARe,"A",{href:!0});var uCt=s(tU);aRr=r(uCt,"FlaxXLMRobertaForMultipleChoice"),uCt.forEach(t),nRr=r(ARe," (XLM-RoBERTa model)"),ARe.forEach(t),Vo.forEach(t),sRr=i(Ia),iTe=n(Ia,"P",{});var bCt=s(iTe);lRr=r(bCt,"Examples:"),bCt.forEach(t),iRr=i(Ia),m(e8.$$.fragment,Ia),Ia.forEach(t),xi.forEach(t),APe=i(c),Af=n(c,"H2",{class:!0});var qIe=s(Af);TE=n(qIe,"A",{id:!0,class:!0,href:!0});var vCt=s(TE);dTe=n(vCt,"SPAN",{});var FCt=s(dTe);m(o8.$$.fragment,FCt),FCt.forEach(t),vCt.forEach(t),dRr=i(qIe),cTe=n(qIe,"SPAN",{});var TCt=s(cTe);cRr=r(TCt,"FlaxAutoModelForNextSentencePrediction"),TCt.forEach(t),qIe.forEach(t),yPe=i(c),Gr=n(c,"DIV",{class:!0});var Si=s(Gr);m(r8.$$.fragment,Si),fRr=i(Si),yf=n(Si,"P",{});var tY=s(yf);mRr=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aU=n(tY,"A",{href:!0});var MCt=s(aU);gRr=r(MCt,"from_pretrained()"),MCt.forEach(t),hRr=r(tY," class method or the "),nU=n(tY,"A",{href:!0});var ECt=s(nU);pRr=r(ECt,"from_config()"),ECt.forEach(t),_Rr=r(tY,` class
method.`),tY.forEach(t),uRr=i(Si),t8=n(Si,"P",{});var NIe=s(t8);bRr=r(NIe,"This class cannot be instantiated directly using "),fTe=n(NIe,"CODE",{});var CCt=s(fTe);vRr=r(CCt,"__init__()"),CCt.forEach(t),FRr=r(NIe," (throws an error)."),NIe.forEach(t),TRr=i(Si),$t=n(Si,"DIV",{class:!0});var Ri=s($t);m(a8.$$.fragment,Ri),MRr=i(Ri),mTe=n(Ri,"P",{});var wCt=s(mTe);ERr=r(wCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wCt.forEach(t),CRr=i(Ri),Lf=n(Ri,"P",{});var aY=s(Lf);wRr=r(aY,`Note:
Loading a model from its configuration file does `),gTe=n(aY,"STRONG",{});var ACt=s(gTe);ARr=r(ACt,"not"),ACt.forEach(t),yRr=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(aY,"A",{href:!0});var yCt=s(sU);LRr=r(yCt,"from_pretrained()"),yCt.forEach(t),xRr=r(aY," to load the model weights."),aY.forEach(t),kRr=i(Ri),hTe=n(Ri,"P",{});var LCt=s(hTe);SRr=r(LCt,"Examples:"),LCt.forEach(t),RRr=i(Ri),m(n8.$$.fragment,Ri),Ri.forEach(t),BRr=i(Si),Io=n(Si,"DIV",{class:!0});var qa=s(Io);m(s8.$$.fragment,qa),PRr=i(qa),pTe=n(qa,"P",{});var xCt=s(pTe);$Rr=r(xCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xCt.forEach(t),IRr=i(qa),jn=n(qa,"P",{});var wC=s(jn);qRr=r(wC,"The model class to instantiate is selected based on the "),_Te=n(wC,"CODE",{});var kCt=s(_Te);NRr=r(kCt,"model_type"),kCt.forEach(t),jRr=r(wC,` property of the config object (either
passed as an argument or loaded from `),uTe=n(wC,"CODE",{});var SCt=s(uTe);DRr=r(SCt,"pretrained_model_name_or_path"),SCt.forEach(t),GRr=r(wC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=n(wC,"CODE",{});var RCt=s(bTe);ORr=r(RCt,"pretrained_model_name_or_path"),RCt.forEach(t),VRr=r(wC,":"),wC.forEach(t),XRr=i(qa),vTe=n(qa,"UL",{});var BCt=s(vTe);ME=n(BCt,"LI",{});var yRe=s(ME);FTe=n(yRe,"STRONG",{});var PCt=s(FTe);zRr=r(PCt,"bert"),PCt.forEach(t),QRr=r(yRe," \u2014 "),lU=n(yRe,"A",{href:!0});var $Ct=s(lU);WRr=r($Ct,"FlaxBertForNextSentencePrediction"),$Ct.forEach(t),HRr=r(yRe," (BERT model)"),yRe.forEach(t),BCt.forEach(t),URr=i(qa),TTe=n(qa,"P",{});var ICt=s(TTe);JRr=r(ICt,"Examples:"),ICt.forEach(t),YRr=i(qa),m(l8.$$.fragment,qa),qa.forEach(t),Si.forEach(t),LPe=i(c),xf=n(c,"H2",{class:!0});var jIe=s(xf);EE=n(jIe,"A",{id:!0,class:!0,href:!0});var qCt=s(EE);MTe=n(qCt,"SPAN",{});var NCt=s(MTe);m(i8.$$.fragment,NCt),NCt.forEach(t),qCt.forEach(t),KRr=i(jIe),ETe=n(jIe,"SPAN",{});var jCt=s(ETe);ZRr=r(jCt,"FlaxAutoModelForImageClassification"),jCt.forEach(t),jIe.forEach(t),xPe=i(c),Or=n(c,"DIV",{class:!0});var Bi=s(Or);m(d8.$$.fragment,Bi),eBr=i(Bi),kf=n(Bi,"P",{});var nY=s(kf);oBr=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iU=n(nY,"A",{href:!0});var DCt=s(iU);rBr=r(DCt,"from_pretrained()"),DCt.forEach(t),tBr=r(nY," class method or the "),dU=n(nY,"A",{href:!0});var GCt=s(dU);aBr=r(GCt,"from_config()"),GCt.forEach(t),nBr=r(nY,` class
method.`),nY.forEach(t),sBr=i(Bi),c8=n(Bi,"P",{});var DIe=s(c8);lBr=r(DIe,"This class cannot be instantiated directly using "),CTe=n(DIe,"CODE",{});var OCt=s(CTe);iBr=r(OCt,"__init__()"),OCt.forEach(t),dBr=r(DIe," (throws an error)."),DIe.forEach(t),cBr=i(Bi),It=n(Bi,"DIV",{class:!0});var Pi=s(It);m(f8.$$.fragment,Pi),fBr=i(Pi),wTe=n(Pi,"P",{});var VCt=s(wTe);mBr=r(VCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),VCt.forEach(t),gBr=i(Pi),Sf=n(Pi,"P",{});var sY=s(Sf);hBr=r(sY,`Note:
Loading a model from its configuration file does `),ATe=n(sY,"STRONG",{});var XCt=s(ATe);pBr=r(XCt,"not"),XCt.forEach(t),_Br=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(sY,"A",{href:!0});var zCt=s(cU);uBr=r(zCt,"from_pretrained()"),zCt.forEach(t),bBr=r(sY," to load the model weights."),sY.forEach(t),vBr=i(Pi),yTe=n(Pi,"P",{});var QCt=s(yTe);FBr=r(QCt,"Examples:"),QCt.forEach(t),TBr=i(Pi),m(m8.$$.fragment,Pi),Pi.forEach(t),MBr=i(Bi),qo=n(Bi,"DIV",{class:!0});var Na=s(qo);m(g8.$$.fragment,Na),EBr=i(Na),LTe=n(Na,"P",{});var WCt=s(LTe);CBr=r(WCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),WCt.forEach(t),wBr=i(Na),Dn=n(Na,"P",{});var AC=s(Dn);ABr=r(AC,"The model class to instantiate is selected based on the "),xTe=n(AC,"CODE",{});var HCt=s(xTe);yBr=r(HCt,"model_type"),HCt.forEach(t),LBr=r(AC,` property of the config object (either
passed as an argument or loaded from `),kTe=n(AC,"CODE",{});var UCt=s(kTe);xBr=r(UCt,"pretrained_model_name_or_path"),UCt.forEach(t),kBr=r(AC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=n(AC,"CODE",{});var JCt=s(STe);SBr=r(JCt,"pretrained_model_name_or_path"),JCt.forEach(t),RBr=r(AC,":"),AC.forEach(t),BBr=i(Na),h8=n(Na,"UL",{});var GIe=s(h8);CE=n(GIe,"LI",{});var LRe=s(CE);RTe=n(LRe,"STRONG",{});var YCt=s(RTe);PBr=r(YCt,"beit"),YCt.forEach(t),$Br=r(LRe," \u2014 "),fU=n(LRe,"A",{href:!0});var KCt=s(fU);IBr=r(KCt,"FlaxBeitForImageClassification"),KCt.forEach(t),qBr=r(LRe," (BEiT model)"),LRe.forEach(t),NBr=i(GIe),wE=n(GIe,"LI",{});var xRe=s(wE);BTe=n(xRe,"STRONG",{});var ZCt=s(BTe);jBr=r(ZCt,"vit"),ZCt.forEach(t),DBr=r(xRe," \u2014 "),mU=n(xRe,"A",{href:!0});var e5t=s(mU);GBr=r(e5t,"FlaxViTForImageClassification"),e5t.forEach(t),OBr=r(xRe," (ViT model)"),xRe.forEach(t),GIe.forEach(t),VBr=i(Na),PTe=n(Na,"P",{});var o5t=s(PTe);XBr=r(o5t,"Examples:"),o5t.forEach(t),zBr=i(Na),m(p8.$$.fragment,Na),Na.forEach(t),Bi.forEach(t),kPe=i(c),Rf=n(c,"H2",{class:!0});var OIe=s(Rf);AE=n(OIe,"A",{id:!0,class:!0,href:!0});var r5t=s(AE);$Te=n(r5t,"SPAN",{});var t5t=s($Te);m(_8.$$.fragment,t5t),t5t.forEach(t),r5t.forEach(t),QBr=i(OIe),ITe=n(OIe,"SPAN",{});var a5t=s(ITe);WBr=r(a5t,"FlaxAutoModelForVision2Seq"),a5t.forEach(t),OIe.forEach(t),SPe=i(c),Vr=n(c,"DIV",{class:!0});var $i=s(Vr);m(u8.$$.fragment,$i),HBr=i($i),Bf=n($i,"P",{});var lY=s(Bf);UBr=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gU=n(lY,"A",{href:!0});var n5t=s(gU);JBr=r(n5t,"from_pretrained()"),n5t.forEach(t),YBr=r(lY," class method or the "),hU=n(lY,"A",{href:!0});var s5t=s(hU);KBr=r(s5t,"from_config()"),s5t.forEach(t),ZBr=r(lY,` class
method.`),lY.forEach(t),ePr=i($i),b8=n($i,"P",{});var VIe=s(b8);oPr=r(VIe,"This class cannot be instantiated directly using "),qTe=n(VIe,"CODE",{});var l5t=s(qTe);rPr=r(l5t,"__init__()"),l5t.forEach(t),tPr=r(VIe," (throws an error)."),VIe.forEach(t),aPr=i($i),qt=n($i,"DIV",{class:!0});var Ii=s(qt);m(v8.$$.fragment,Ii),nPr=i(Ii),NTe=n(Ii,"P",{});var i5t=s(NTe);sPr=r(i5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),i5t.forEach(t),lPr=i(Ii),Pf=n(Ii,"P",{});var iY=s(Pf);iPr=r(iY,`Note:
Loading a model from its configuration file does `),jTe=n(iY,"STRONG",{});var d5t=s(jTe);dPr=r(d5t,"not"),d5t.forEach(t),cPr=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(iY,"A",{href:!0});var c5t=s(pU);fPr=r(c5t,"from_pretrained()"),c5t.forEach(t),mPr=r(iY," to load the model weights."),iY.forEach(t),gPr=i(Ii),DTe=n(Ii,"P",{});var f5t=s(DTe);hPr=r(f5t,"Examples:"),f5t.forEach(t),pPr=i(Ii),m(F8.$$.fragment,Ii),Ii.forEach(t),_Pr=i($i),No=n($i,"DIV",{class:!0});var ja=s(No);m(T8.$$.fragment,ja),uPr=i(ja),GTe=n(ja,"P",{});var m5t=s(GTe);bPr=r(m5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),m5t.forEach(t),vPr=i(ja),Gn=n(ja,"P",{});var yC=s(Gn);FPr=r(yC,"The model class to instantiate is selected based on the "),OTe=n(yC,"CODE",{});var g5t=s(OTe);TPr=r(g5t,"model_type"),g5t.forEach(t),MPr=r(yC,` property of the config object (either
passed as an argument or loaded from `),VTe=n(yC,"CODE",{});var h5t=s(VTe);EPr=r(h5t,"pretrained_model_name_or_path"),h5t.forEach(t),CPr=r(yC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=n(yC,"CODE",{});var p5t=s(XTe);wPr=r(p5t,"pretrained_model_name_or_path"),p5t.forEach(t),APr=r(yC,":"),yC.forEach(t),yPr=i(ja),zTe=n(ja,"UL",{});var _5t=s(zTe);yE=n(_5t,"LI",{});var kRe=s(yE);QTe=n(kRe,"STRONG",{});var u5t=s(QTe);LPr=r(u5t,"vision-encoder-decoder"),u5t.forEach(t),xPr=r(kRe," \u2014 "),_U=n(kRe,"A",{href:!0});var b5t=s(_U);kPr=r(b5t,"FlaxVisionEncoderDecoderModel"),b5t.forEach(t),SPr=r(kRe," (Vision Encoder decoder model)"),kRe.forEach(t),_5t.forEach(t),RPr=i(ja),WTe=n(ja,"P",{});var v5t=s(WTe);BPr=r(v5t,"Examples:"),v5t.forEach(t),PPr=i(ja),m(M8.$$.fragment,ja),ja.forEach(t),$i.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(x5t)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(ce,"class","relative group"),d(On,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.AutoModel"),d(zn,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.AutoTokenizer"),d(Vi,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Vf,"id","transformers.AutoConfig"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#transformers.AutoConfig"),d(zi,"class","relative group"),d(A9,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(y9,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertConfig"),d(L9,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartConfig"),d(x9,"href","/docs/transformers/pr_16760/en/model_doc/beit#transformers.BeitConfig"),d(k9,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertConfig"),d(S9,"href","/docs/transformers/pr_16760/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(R9,"href","/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdConfig"),d(B9,"href","/docs/transformers/pr_16760/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(P9,"href","/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d($9,"href","/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(I9,"href","/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertConfig"),d(q9,"href","/docs/transformers/pr_16760/en/model_doc/canine#transformers.CanineConfig"),d(N9,"href","/docs/transformers/pr_16760/en/model_doc/clip#transformers.CLIPConfig"),d(j9,"href","/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertConfig"),d(D9,"href","/docs/transformers/pr_16760/en/model_doc/convnext#transformers.ConvNextConfig"),d(G9,"href","/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.CTRLConfig"),d(O9,"href","/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(V9,"href","/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(X9,"href","/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(z9,"href","/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaConfig"),d(Q9,"href","/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(W9,"href","/docs/transformers/pr_16760/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(H9,"href","/docs/transformers/pr_16760/en/model_doc/deit#transformers.DeiTConfig"),d(U9,"href","/docs/transformers/pr_16760/en/model_doc/detr#transformers.DetrConfig"),d(J9,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertConfig"),d(Y9,"href","/docs/transformers/pr_16760/en/model_doc/dpr#transformers.DPRConfig"),d(K9,"href","/docs/transformers/pr_16760/en/model_doc/dpt#transformers.DPTConfig"),d(Z9,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraConfig"),d(ex,"href","/docs/transformers/pr_16760/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(ox,"href","/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertConfig"),d(rx,"href","/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetConfig"),d(tx,"href","/docs/transformers/pr_16760/en/model_doc/fsmt#transformers.FSMTConfig"),d(ax,"href","/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelConfig"),d(nx,"href","/docs/transformers/pr_16760/en/model_doc/glpn#transformers.GLPNConfig"),d(sx,"href","/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2Config"),d(lx,"href","/docs/transformers/pr_16760/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(ix,"href","/docs/transformers/pr_16760/en/model_doc/gptj#transformers.GPTJConfig"),d(dx,"href","/docs/transformers/pr_16760/en/model_doc/hubert#transformers.HubertConfig"),d(cx,"href","/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertConfig"),d(fx,"href","/docs/transformers/pr_16760/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(mx,"href","/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(gx,"href","/docs/transformers/pr_16760/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(hx,"href","/docs/transformers/pr_16760/en/model_doc/led#transformers.LEDConfig"),d(px,"href","/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerConfig"),d(_x,"href","/docs/transformers/pr_16760/en/model_doc/luke#transformers.LukeConfig"),d(ux,"href","/docs/transformers/pr_16760/en/model_doc/lxmert#transformers.LxmertConfig"),d(bx,"href","/docs/transformers/pr_16760/en/model_doc/m2m_100#transformers.M2M100Config"),d(vx,"href","/docs/transformers/pr_16760/en/model_doc/marian#transformers.MarianConfig"),d(Fx,"href","/docs/transformers/pr_16760/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(Tx,"href","/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartConfig"),d(Mx,"href","/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Ex,"href","/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(Cx,"href","/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetConfig"),d(wx,"href","/docs/transformers/pr_16760/en/model_doc/mt5#transformers.MT5Config"),d(Ax,"href","/docs/transformers/pr_16760/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(yx,"href","/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Lx,"href","/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.PegasusConfig"),d(xx,"href","/docs/transformers/pr_16760/en/model_doc/perceiver#transformers.PerceiverConfig"),d(kx,"href","/docs/transformers/pr_16760/en/model_doc/plbart#transformers.PLBartConfig"),d(Sx,"href","/docs/transformers/pr_16760/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Rx,"href","/docs/transformers/pr_16760/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Bx,"href","/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Px,"href","/docs/transformers/pr_16760/en/model_doc/rag#transformers.RagConfig"),d($x,"href","/docs/transformers/pr_16760/en/model_doc/realm#transformers.RealmConfig"),d(Ix,"href","/docs/transformers/pr_16760/en/model_doc/reformer#transformers.ReformerConfig"),d(qx,"href","/docs/transformers/pr_16760/en/model_doc/regnet#transformers.RegNetConfig"),d(Nx,"href","/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertConfig"),d(jx,"href","/docs/transformers/pr_16760/en/model_doc/resnet#transformers.ResNetConfig"),d(Dx,"href","/docs/transformers/pr_16760/en/model_doc/retribert#transformers.RetriBertConfig"),d(Gx,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaConfig"),d(Ox,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerConfig"),d(Vx,"href","/docs/transformers/pr_16760/en/model_doc/segformer#transformers.SegformerConfig"),d(Xx,"href","/docs/transformers/pr_16760/en/model_doc/sew#transformers.SEWConfig"),d(zx,"href","/docs/transformers/pr_16760/en/model_doc/sew-d#transformers.SEWDConfig"),d(Qx,"href","/docs/transformers/pr_16760/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Wx,"href","/docs/transformers/pr_16760/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Hx,"href","/docs/transformers/pr_16760/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Ux,"href","/docs/transformers/pr_16760/en/model_doc/splinter#transformers.SplinterConfig"),d(Jx,"href","/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Yx,"href","/docs/transformers/pr_16760/en/model_doc/swin#transformers.SwinConfig"),d(Kx,"href","/docs/transformers/pr_16760/en/model_doc/t5#transformers.T5Config"),d(Zx,"href","/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasConfig"),d(ek,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartConfig"),d(ok,"href","/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(rk,"href","/docs/transformers/pr_16760/en/model_doc/trocr#transformers.TrOCRConfig"),d(tk,"href","/docs/transformers/pr_16760/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(ak,"href","/docs/transformers/pr_16760/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(nk,"href","/docs/transformers/pr_16760/en/model_doc/van#transformers.VanConfig"),d(sk,"href","/docs/transformers/pr_16760/en/model_doc/vilt#transformers.ViltConfig"),d(lk,"href","/docs/transformers/pr_16760/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(ik,"href","/docs/transformers/pr_16760/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(dk,"href","/docs/transformers/pr_16760/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(ck,"href","/docs/transformers/pr_16760/en/model_doc/vit#transformers.ViTConfig"),d(fk,"href","/docs/transformers/pr_16760/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(mk,"href","/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(gk,"href","/docs/transformers/pr_16760/en/model_doc/wavlm#transformers.WavLMConfig"),d(hk,"href","/docs/transformers/pr_16760/en/model_doc/xglm#transformers.XGLMConfig"),d(pk,"href","/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMConfig"),d(_k,"href","/docs/transformers/pr_16760/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(uk,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(bk,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(vk,"href","/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetConfig"),d(Fk,"href","/docs/transformers/pr_16760/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(Ng,"class","docstring"),d(Qo,"class","docstring"),d(jg,"id","transformers.AutoTokenizer"),d(jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jg,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(Tk,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(Mk,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertTokenizer"),d(Ek,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(Ck,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartTokenizer"),d(wk,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartTokenizerFast"),d(Ak,"href","/docs/transformers/pr_16760/en/model_doc/barthez#transformers.BarthezTokenizer"),d(yk,"href","/docs/transformers/pr_16760/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(Lk,"href","/docs/transformers/pr_16760/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(xk,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertTokenizer"),d(kk,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertTokenizerFast"),d(Sk,"href","/docs/transformers/pr_16760/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(Rk,"href","/docs/transformers/pr_16760/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(Bk,"href","/docs/transformers/pr_16760/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Pk,"href","/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d($k,"href","/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Ik,"href","/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(qk,"href","/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Nk,"href","/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(jk,"href","/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Dk,"href","/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Gk,"href","/docs/transformers/pr_16760/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Ok,"href","/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Vk,"href","/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Xk,"href","/docs/transformers/pr_16760/en/model_doc/canine#transformers.CanineTokenizer"),d(zk,"href","/docs/transformers/pr_16760/en/model_doc/clip#transformers.CLIPTokenizer"),d(Qk,"href","/docs/transformers/pr_16760/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Wk,"href","/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Hk,"href","/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Uk,"href","/docs/transformers/pr_16760/en/model_doc/cpm#transformers.CpmTokenizer"),d(Jk,"href","/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Yk,"href","/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Kk,"href","/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Zk,"href","/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(eS,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(oS,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(rS,"href","/docs/transformers/pr_16760/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(tS,"href","/docs/transformers/pr_16760/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(aS,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraTokenizer"),d(nS,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(sS,"href","/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(lS,"href","/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetTokenizer"),d(iS,"href","/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(dS,"href","/docs/transformers/pr_16760/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(cS,"href","/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelTokenizer"),d(fS,"href","/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(mS,"href","/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(gS,"href","/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(hS,"href","/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(pS,"href","/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(_S,"href","/docs/transformers/pr_16760/en/model_doc/herbert#transformers.HerbertTokenizer"),d(uS,"href","/docs/transformers/pr_16760/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(bS,"href","/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(vS,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaTokenizer"),d(FS,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(TS,"href","/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(MS,"href","/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(ES,"href","/docs/transformers/pr_16760/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(CS,"href","/docs/transformers/pr_16760/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(wS,"href","/docs/transformers/pr_16760/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(AS,"href","/docs/transformers/pr_16760/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(yS,"href","/docs/transformers/pr_16760/en/model_doc/led#transformers.LEDTokenizer"),d(LS,"href","/docs/transformers/pr_16760/en/model_doc/led#transformers.LEDTokenizerFast"),d(xS,"href","/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerTokenizer"),d(kS,"href","/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(SS,"href","/docs/transformers/pr_16760/en/model_doc/luke#transformers.LukeTokenizer"),d(RS,"href","/docs/transformers/pr_16760/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(BS,"href","/docs/transformers/pr_16760/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(PS,"href","/docs/transformers/pr_16760/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d($S,"href","/docs/transformers/pr_16760/en/model_doc/marian#transformers.MarianTokenizer"),d(IS,"href","/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartTokenizer"),d(qS,"href","/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(NS,"href","/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(jS,"href","/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(DS,"href","/docs/transformers/pr_16760/en/model_doc/mluke#transformers.MLukeTokenizer"),d(GS,"href","/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(OS,"href","/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(VS,"href","/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(XS,"href","/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(zS,"href","/docs/transformers/pr_16760/en/model_doc/mt5#transformers.T5Tokenizer"),d(QS,"href","/docs/transformers/pr_16760/en/model_doc/mt5#transformers.T5TokenizerFast"),d(WS,"href","/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(HS,"href","/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(US,"href","/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(JS,"href","/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(YS,"href","/docs/transformers/pr_16760/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(KS,"href","/docs/transformers/pr_16760/en/model_doc/phobert#transformers.PhobertTokenizer"),d(ZS,"href","/docs/transformers/pr_16760/en/model_doc/plbart#transformers.PLBartTokenizer"),d(eR,"href","/docs/transformers/pr_16760/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(oR,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertTokenizer"),d(rR,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertTokenizerFast"),d(tR,"href","/docs/transformers/pr_16760/en/model_doc/rag#transformers.RagTokenizer"),d(aR,"href","/docs/transformers/pr_16760/en/model_doc/realm#transformers.RealmTokenizer"),d(nR,"href","/docs/transformers/pr_16760/en/model_doc/realm#transformers.RealmTokenizerFast"),d(sR,"href","/docs/transformers/pr_16760/en/model_doc/reformer#transformers.ReformerTokenizer"),d(lR,"href","/docs/transformers/pr_16760/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(iR,"href","/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertTokenizer"),d(dR,"href","/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(cR,"href","/docs/transformers/pr_16760/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(fR,"href","/docs/transformers/pr_16760/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(mR,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaTokenizer"),d(gR,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(hR,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(pR,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(_R,"href","/docs/transformers/pr_16760/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(uR,"href","/docs/transformers/pr_16760/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(bR,"href","/docs/transformers/pr_16760/en/model_doc/splinter#transformers.SplinterTokenizer"),d(vR,"href","/docs/transformers/pr_16760/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(FR,"href","/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(TR,"href","/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(MR,"href","/docs/transformers/pr_16760/en/model_doc/mt5#transformers.T5Tokenizer"),d(ER,"href","/docs/transformers/pr_16760/en/model_doc/mt5#transformers.T5TokenizerFast"),d(CR,"href","/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasTokenizer"),d(wR,"href","/docs/transformers/pr_16760/en/model_doc/tapex#transformers.TapexTokenizer"),d(AR,"href","/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(yR,"href","/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(LR,"href","/docs/transformers/pr_16760/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(xR,"href","/docs/transformers/pr_16760/en/model_doc/xglm#transformers.XGLMTokenizer"),d(kR,"href","/docs/transformers/pr_16760/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(SR,"href","/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMTokenizer"),d(RR,"href","/docs/transformers/pr_16760/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(BR,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(PR,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d($R,"href","/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(IR,"href","/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(_h,"class","docstring"),d(Wo,"class","docstring"),d(uh,"id","transformers.AutoFeatureExtractor"),d(uh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uh,"href","#transformers.AutoFeatureExtractor"),d(Hi,"class","relative group"),d(qR,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(NR,"href","/docs/transformers/pr_16760/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(jR,"href","/docs/transformers/pr_16760/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(DR,"href","/docs/transformers/pr_16760/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(GR,"href","/docs/transformers/pr_16760/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(OR,"href","/docs/transformers/pr_16760/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(VR,"href","/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(XR,"href","/docs/transformers/pr_16760/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(zR,"href","/docs/transformers/pr_16760/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(QR,"href","/docs/transformers/pr_16760/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(WR,"href","/docs/transformers/pr_16760/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(HR,"href","/docs/transformers/pr_16760/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(UR,"href","/docs/transformers/pr_16760/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(JR,"href","/docs/transformers/pr_16760/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(YR,"href","/docs/transformers/pr_16760/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(KR,"href","/docs/transformers/pr_16760/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(ZR,"href","/docs/transformers/pr_16760/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(eB,"href","/docs/transformers/pr_16760/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(oB,"href","/docs/transformers/pr_16760/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(rB,"href","/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(Nh,"class","docstring"),d(Ho,"class","docstring"),d(jh,"id","transformers.AutoProcessor"),d(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jh,"href","#transformers.AutoProcessor"),d(Ui,"class","relative group"),d(tB,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(aB,"href","/docs/transformers/pr_16760/en/model_doc/clip#transformers.CLIPProcessor"),d(nB,"href","/docs/transformers/pr_16760/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(sB,"href","/docs/transformers/pr_16760/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(lB,"href","/docs/transformers/pr_16760/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(iB,"href","/docs/transformers/pr_16760/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(dB,"href","/docs/transformers/pr_16760/en/model_doc/trocr#transformers.TrOCRProcessor"),d(cB,"href","/docs/transformers/pr_16760/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(fB,"href","/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Uh,"class","docstring"),d(Uo,"class","docstring"),d(Jh,"id","transformers.AutoModel"),d(Jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jh,"href","#transformers.AutoModel"),d(Yi,"class","relative group"),d(mB,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gB,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hB,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring"),d(pB,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertModel"),d(_B,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartModel"),d(uB,"href","/docs/transformers/pr_16760/en/model_doc/beit#transformers.BeitModel"),d(bB,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertModel"),d(vB,"href","/docs/transformers/pr_16760/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(FB,"href","/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdModel"),d(TB,"href","/docs/transformers/pr_16760/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(MB,"href","/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(EB,"href","/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(CB,"href","/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertModel"),d(wB,"href","/docs/transformers/pr_16760/en/model_doc/canine#transformers.CanineModel"),d(AB,"href","/docs/transformers/pr_16760/en/model_doc/clip#transformers.CLIPModel"),d(yB,"href","/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertModel"),d(LB,"href","/docs/transformers/pr_16760/en/model_doc/convnext#transformers.ConvNextModel"),d(xB,"href","/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.CTRLModel"),d(kB,"href","/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(SB,"href","/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(RB,"href","/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(BB,"href","/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaModel"),d(PB,"href","/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d($B,"href","/docs/transformers/pr_16760/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(IB,"href","/docs/transformers/pr_16760/en/model_doc/deit#transformers.DeiTModel"),d(qB,"href","/docs/transformers/pr_16760/en/model_doc/detr#transformers.DetrModel"),d(NB,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertModel"),d(jB,"href","/docs/transformers/pr_16760/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(DB,"href","/docs/transformers/pr_16760/en/model_doc/dpt#transformers.DPTModel"),d(GB,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraModel"),d(OB,"href","/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertModel"),d(VB,"href","/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetModel"),d(XB,"href","/docs/transformers/pr_16760/en/model_doc/fsmt#transformers.FSMTModel"),d(zB,"href","/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelModel"),d(QB,"href","/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelBaseModel"),d(WB,"href","/docs/transformers/pr_16760/en/model_doc/glpn#transformers.GLPNModel"),d(HB,"href","/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2Model"),d(UB,"href","/docs/transformers/pr_16760/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(JB,"href","/docs/transformers/pr_16760/en/model_doc/gptj#transformers.GPTJModel"),d(YB,"href","/docs/transformers/pr_16760/en/model_doc/hubert#transformers.HubertModel"),d(KB,"href","/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertModel"),d(ZB,"href","/docs/transformers/pr_16760/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(eP,"href","/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(oP,"href","/docs/transformers/pr_16760/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(rP,"href","/docs/transformers/pr_16760/en/model_doc/led#transformers.LEDModel"),d(tP,"href","/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerModel"),d(aP,"href","/docs/transformers/pr_16760/en/model_doc/luke#transformers.LukeModel"),d(nP,"href","/docs/transformers/pr_16760/en/model_doc/lxmert#transformers.LxmertModel"),d(sP,"href","/docs/transformers/pr_16760/en/model_doc/m2m_100#transformers.M2M100Model"),d(lP,"href","/docs/transformers/pr_16760/en/model_doc/marian#transformers.MarianModel"),d(iP,"href","/docs/transformers/pr_16760/en/model_doc/maskformer#transformers.MaskFormerModel"),d(dP,"href","/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartModel"),d(cP,"href","/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(fP,"href","/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertModel"),d(mP,"href","/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetModel"),d(gP,"href","/docs/transformers/pr_16760/en/model_doc/mt5#transformers.MT5Model"),d(hP,"href","/docs/transformers/pr_16760/en/model_doc/nystromformer#transformers.NystromformerModel"),d(pP,"href","/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(_P,"href","/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.PegasusModel"),d(uP,"href","/docs/transformers/pr_16760/en/model_doc/perceiver#transformers.PerceiverModel"),d(bP,"href","/docs/transformers/pr_16760/en/model_doc/plbart#transformers.PLBartModel"),d(vP,"href","/docs/transformers/pr_16760/en/model_doc/poolformer#transformers.PoolFormerModel"),d(FP,"href","/docs/transformers/pr_16760/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(TP,"href","/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertModel"),d(MP,"href","/docs/transformers/pr_16760/en/model_doc/reformer#transformers.ReformerModel"),d(EP,"href","/docs/transformers/pr_16760/en/model_doc/regnet#transformers.RegNetModel"),d(CP,"href","/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertModel"),d(wP,"href","/docs/transformers/pr_16760/en/model_doc/resnet#transformers.ResNetModel"),d(AP,"href","/docs/transformers/pr_16760/en/model_doc/retribert#transformers.RetriBertModel"),d(yP,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaModel"),d(LP,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerModel"),d(xP,"href","/docs/transformers/pr_16760/en/model_doc/segformer#transformers.SegformerModel"),d(kP,"href","/docs/transformers/pr_16760/en/model_doc/sew#transformers.SEWModel"),d(SP,"href","/docs/transformers/pr_16760/en/model_doc/sew-d#transformers.SEWDModel"),d(RP,"href","/docs/transformers/pr_16760/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(BP,"href","/docs/transformers/pr_16760/en/model_doc/splinter#transformers.SplinterModel"),d(PP,"href","/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d($P,"href","/docs/transformers/pr_16760/en/model_doc/swin#transformers.SwinModel"),d(IP,"href","/docs/transformers/pr_16760/en/model_doc/t5#transformers.T5Model"),d(qP,"href","/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasModel"),d(NP,"href","/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(jP,"href","/docs/transformers/pr_16760/en/model_doc/unispeech#transformers.UniSpeechModel"),d(DP,"href","/docs/transformers/pr_16760/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(GP,"href","/docs/transformers/pr_16760/en/model_doc/van#transformers.VanModel"),d(OP,"href","/docs/transformers/pr_16760/en/model_doc/vilt#transformers.ViltModel"),d(VP,"href","/docs/transformers/pr_16760/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(XP,"href","/docs/transformers/pr_16760/en/model_doc/visual_bert#transformers.VisualBertModel"),d(zP,"href","/docs/transformers/pr_16760/en/model_doc/vit#transformers.ViTModel"),d(QP,"href","/docs/transformers/pr_16760/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(WP,"href","/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(HP,"href","/docs/transformers/pr_16760/en/model_doc/wavlm#transformers.WavLMModel"),d(UP,"href","/docs/transformers/pr_16760/en/model_doc/xglm#transformers.XGLMModel"),d(JP,"href","/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMModel"),d(YP,"href","/docs/transformers/pr_16760/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(KP,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(ZP,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(e$,"href","/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetModel"),d(o$,"href","/docs/transformers/pr_16760/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring"),d(Jo,"class","docstring"),d(q_,"id","transformers.AutoModelForPreTraining"),d(q_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q_,"href","#transformers.AutoModelForPreTraining"),d(ed,"class","relative group"),d(r$,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(t$,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(a$,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring"),d(n$,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertForPreTraining"),d(s$,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(l$,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertForPreTraining"),d(i$,"href","/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(d$,"href","/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(c$,"href","/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(f$,"href","/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(m$,"href","/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(g$,"href","/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(h$,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(p$,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraForPreTraining"),d(_$,"href","/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(u$,"href","/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetForPreTraining"),d(b$,"href","/docs/transformers/pr_16760/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(v$,"href","/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(F$,"href","/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(T$,"href","/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(M$,"href","/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(E$,"href","/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(C$,"href","/docs/transformers/pr_16760/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(w$,"href","/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(A$,"href","/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(y$,"href","/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(L$,"href","/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(x$,"href","/docs/transformers/pr_16760/en/model_doc/retribert#transformers.RetriBertModel"),d(k$,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(S$,"href","/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(R$,"href","/docs/transformers/pr_16760/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(B$,"href","/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(P$,"href","/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d($$,"href","/docs/transformers/pr_16760/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(I$,"href","/docs/transformers/pr_16760/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(q$,"href","/docs/transformers/pr_16760/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(N$,"href","/docs/transformers/pr_16760/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(j$,"href","/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(D$,"href","/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(G$,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(O$,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(V$,"href","/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(Cu,"id","transformers.AutoModelForCausalLM"),d(Cu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Cu,"href","#transformers.AutoModelForCausalLM"),d(td,"class","relative group"),d(X$,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(z$,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Q$,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring"),d(W$,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartForCausalLM"),d(H$,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertLMHeadModel"),d(U$,"href","/docs/transformers/pr_16760/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(J$,"href","/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(Y$,"href","/docs/transformers/pr_16760/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(K$,"href","/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(Z$,"href","/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(eI,"href","/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(oI,"href","/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(rI,"href","/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(tI,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraForCausalLM"),d(aI,"href","/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(nI,"href","/docs/transformers/pr_16760/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(sI,"href","/docs/transformers/pr_16760/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(lI,"href","/docs/transformers/pr_16760/en/model_doc/marian#transformers.MarianForCausalLM"),d(iI,"href","/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartForCausalLM"),d(dI,"href","/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(cI,"href","/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(fI,"href","/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(mI,"href","/docs/transformers/pr_16760/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(gI,"href","/docs/transformers/pr_16760/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(hI,"href","/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(pI,"href","/docs/transformers/pr_16760/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(_I,"href","/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(uI,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(bI,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(vI,"href","/docs/transformers/pr_16760/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(FI,"href","/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(TI,"href","/docs/transformers/pr_16760/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(MI,"href","/docs/transformers/pr_16760/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(EI,"href","/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(CI,"href","/docs/transformers/pr_16760/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(wI,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(AI,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(yI,"href","/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(l6,"id","transformers.AutoModelForMaskedLM"),d(l6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l6,"href","#transformers.AutoModelForMaskedLM"),d(sd,"class","relative group"),d(LI,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xI,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kI,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring"),d(SI,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(RI,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(BI,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertForMaskedLM"),d(PI,"href","/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d($I,"href","/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(II,"href","/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(qI,"href","/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(NI,"href","/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(jI,"href","/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(DI,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(GI,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(OI,"href","/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(VI,"href","/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(XI,"href","/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(zI,"href","/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(QI,"href","/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(WI,"href","/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(HI,"href","/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(UI,"href","/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(JI,"href","/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(YI,"href","/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(KI,"href","/docs/transformers/pr_16760/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(ZI,"href","/docs/transformers/pr_16760/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(eq,"href","/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(oq,"href","/docs/transformers/pr_16760/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(rq,"href","/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(tq,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(aq,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(nq,"href","/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(sq,"href","/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(lq,"href","/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(iq,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(dq,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(cq,"href","/docs/transformers/pr_16760/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring"),d(Zo,"class","docstring"),d(X6,"id","transformers.AutoModelForSeq2SeqLM"),d(X6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X6,"href","#transformers.AutoModelForSeq2SeqLM"),d(dd,"class","relative group"),d(fq,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mq,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gq,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring"),d(hq,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(pq,"href","/docs/transformers/pr_16760/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(_q,"href","/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(uq,"href","/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(bq,"href","/docs/transformers/pr_16760/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(vq,"href","/docs/transformers/pr_16760/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(Fq,"href","/docs/transformers/pr_16760/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(Tq,"href","/docs/transformers/pr_16760/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(Mq,"href","/docs/transformers/pr_16760/en/model_doc/marian#transformers.MarianMTModel"),d(Eq,"href","/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(Cq,"href","/docs/transformers/pr_16760/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(wq,"href","/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(Aq,"href","/docs/transformers/pr_16760/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(yq,"href","/docs/transformers/pr_16760/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(Lq,"href","/docs/transformers/pr_16760/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(xq,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(kq,"href","/docs/transformers/pr_16760/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(d1,"id","transformers.AutoModelForSequenceClassification"),d(d1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d1,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(Sq,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rq,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Bq,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring"),d(Pq,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d($q,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartForSequenceClassification"),d(Iq,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertForSequenceClassification"),d(qq,"href","/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Nq,"href","/docs/transformers/pr_16760/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(jq,"href","/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_16760/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(zq,"href","/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16760/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16760/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16760/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16760/en/model_doc/led#transformers.LEDForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16760/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16760/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16760/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(gN,"href","/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(hN,"href","/docs/transformers/pr_16760/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(pN,"href","/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(_N,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(uN,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(bN,"href","/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(vN,"href","/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(FN,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartForSequenceClassification"),d(TN,"href","/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(MN,"href","/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(EN,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(CN,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(wN,"href","/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(AN,"href","/docs/transformers/pr_16760/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(ab,"id","transformers.AutoModelForMultipleChoice"),d(ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ab,"href","#transformers.AutoModelForMultipleChoice"),d(pd,"class","relative group"),d(yN,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LN,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xN,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring"),d(kN,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(SN,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertForMultipleChoice"),d(RN,"href","/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(BN,"href","/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(PN,"href","/docs/transformers/pr_16760/en/model_doc/canine#transformers.CanineForMultipleChoice"),d($N,"href","/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(IN,"href","/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(qN,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(NN,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(jN,"href","/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(DN,"href","/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(GN,"href","/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(ON,"href","/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(VN,"href","/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(XN,"href","/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(zN,"href","/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(QN,"href","/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(WN,"href","/docs/transformers/pr_16760/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(HN,"href","/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(UN,"href","/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(JN,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(YN,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(KN,"href","/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(ej,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(oj,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(rj,"href","/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(tj,"href","/docs/transformers/pr_16760/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(Pb,"id","transformers.AutoModelForNextSentencePrediction"),d(Pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pb,"href","#transformers.AutoModelForNextSentencePrediction"),d(bd,"class","relative group"),d(aj,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nj,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sj,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring"),d(lj,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(ij,"href","/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(dj,"href","/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(cj,"href","/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(fj,"href","/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring"),d(tr,"class","docstring"),d(Gb,"id","transformers.AutoModelForTokenClassification"),d(Gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gb,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(mj,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gj,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hj,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring"),d(pj,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(_j,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertForTokenClassification"),d(uj,"href","/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(bj,"href","/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(vj,"href","/docs/transformers/pr_16760/en/model_doc/canine#transformers.CanineForTokenClassification"),d(Fj,"href","/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(Tj,"href","/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(Mj,"href","/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(Ej,"href","/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(wj,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Aj,"href","/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(yj,"href","/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Lj,"href","/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(xj,"href","/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(kj,"href","/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(Sj,"href","/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Rj,"href","/docs/transformers/pr_16760/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Bj,"href","/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(Pj,"href","/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d($j,"href","/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Ij,"href","/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(qj,"href","/docs/transformers/pr_16760/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Nj,"href","/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(jj,"href","/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(Dj,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Gj,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Oj,"href","/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Vj,"href","/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Xj,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(zj,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Qj,"href","/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Wj,"href","/docs/transformers/pr_16760/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(M2,"id","transformers.AutoModelForQuestionAnswering"),d(M2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M2,"href","#transformers.AutoModelForQuestionAnswering"),d(Cd,"class","relative group"),d(Hj,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Uj,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Jj,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring"),d(Yj,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Kj,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16760/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16760/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16760/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16760/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16760/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(fD,"href","/docs/transformers/pr_16760/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16760/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16760/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16760/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16760/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16760/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16760/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16760/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_16760/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_16760/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_16760/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_16760/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_16760/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_16760/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_16760/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(kD,"href","/docs/transformers/pr_16760/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(SD,"href","/docs/transformers/pr_16760/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(RD,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(BD,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(PD,"href","/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d($D,"href","/docs/transformers/pr_16760/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(dv,"id","transformers.AutoModelForTableQuestionAnswering"),d(dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dv,"href","#transformers.AutoModelForTableQuestionAnswering"),d(yd,"class","relative group"),d(ID,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qD,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ND,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring"),d(jD,"href","/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring"),d(sr,"class","docstring"),d(mv,"id","transformers.AutoModelForImageClassification"),d(mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mv,"href","#transformers.AutoModelForImageClassification"),d(kd,"class","relative group"),d(DD,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GD,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OD,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring"),d(VD,"href","/docs/transformers/pr_16760/en/model_doc/beit#transformers.BeitForImageClassification"),d(XD,"href","/docs/transformers/pr_16760/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(zD,"href","/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(QD,"href","/docs/transformers/pr_16760/en/model_doc/deit#transformers.DeiTForImageClassification"),d(WD,"href","/docs/transformers/pr_16760/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(HD,"href","/docs/transformers/pr_16760/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(UD,"href","/docs/transformers/pr_16760/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(JD,"href","/docs/transformers/pr_16760/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(YD,"href","/docs/transformers/pr_16760/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(KD,"href","/docs/transformers/pr_16760/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(ZD,"href","/docs/transformers/pr_16760/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(eG,"href","/docs/transformers/pr_16760/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(oG,"href","/docs/transformers/pr_16760/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(rG,"href","/docs/transformers/pr_16760/en/model_doc/swin#transformers.SwinForImageClassification"),d(tG,"href","/docs/transformers/pr_16760/en/model_doc/van#transformers.VanForImageClassification"),d(aG,"href","/docs/transformers/pr_16760/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(wv,"id","transformers.AutoModelForVision2Seq"),d(wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wv,"href","#transformers.AutoModelForVision2Seq"),d(Bd,"class","relative group"),d(nG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring"),d(iG,"href","/docs/transformers/pr_16760/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(Lv,"id","transformers.AutoModelForAudioClassification"),d(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lv,"href","#transformers.AutoModelForAudioClassification"),d(Id,"class","relative group"),d(dG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring"),d(mG,"href","/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(gG,"href","/docs/transformers/pr_16760/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(hG,"href","/docs/transformers/pr_16760/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(pG,"href","/docs/transformers/pr_16760/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(_G,"href","/docs/transformers/pr_16760/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(uG,"href","/docs/transformers/pr_16760/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(bG,"href","/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(vG,"href","/docs/transformers/pr_16760/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(Nv,"id","transformers.AutoModelForAudioFrameClassification"),d(Nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Nv,"href","#transformers.AutoModelForAudioFrameClassification"),d(jd,"class","relative group"),d(FG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring"),d(EG,"href","/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(CG,"href","/docs/transformers/pr_16760/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(wG,"href","/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(AG,"href","/docs/transformers/pr_16760/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(Xv,"id","transformers.AutoModelForCTC"),d(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xv,"href","#transformers.AutoModelForCTC"),d(Od,"class","relative group"),d(yG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring"),d(kG,"href","/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(SG,"href","/docs/transformers/pr_16760/en/model_doc/hubert#transformers.HubertForCTC"),d(RG,"href","/docs/transformers/pr_16760/en/model_doc/sew#transformers.SEWForCTC"),d(BG,"href","/docs/transformers/pr_16760/en/model_doc/sew-d#transformers.SEWDForCTC"),d(PG,"href","/docs/transformers/pr_16760/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d($G,"href","/docs/transformers/pr_16760/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(IG,"href","/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(qG,"href","/docs/transformers/pr_16760/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(eF,"id","transformers.AutoModelForSpeechSeq2Seq"),d(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eF,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(zd,"class","relative group"),d(NG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring"),d(GG,"href","/docs/transformers/pr_16760/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(OG,"href","/docs/transformers/pr_16760/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(aF,"id","transformers.AutoModelForAudioXVector"),d(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aF,"href","#transformers.AutoModelForAudioXVector"),d(Hd,"class","relative group"),d(VG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring"),d(QG,"href","/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(WG,"href","/docs/transformers/pr_16760/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(HG,"href","/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(UG,"href","/docs/transformers/pr_16760/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(cF,"id","transformers.AutoModelForMaskedImageModeling"),d(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cF,"href","#transformers.AutoModelForMaskedImageModeling"),d(Yd,"class","relative group"),d(JG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KG,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring"),d(ZG,"href","/docs/transformers/pr_16760/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(eO,"href","/docs/transformers/pr_16760/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(oO,"href","/docs/transformers/pr_16760/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(pF,"id","transformers.AutoModelForObjectDetection"),d(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pF,"href","#transformers.AutoModelForObjectDetection"),d(oc,"class","relative group"),d(rO,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tO,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aO,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring"),d(nO,"href","/docs/transformers/pr_16760/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(bF,"id","transformers.AutoModelForImageSegmentation"),d(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bF,"href","#transformers.AutoModelForImageSegmentation"),d(ac,"class","relative group"),d(sO,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lO,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iO,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring"),d(dO,"href","/docs/transformers/pr_16760/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(TF,"id","transformers.AutoModelForSemanticSegmentation"),d(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TF,"href","#transformers.AutoModelForSemanticSegmentation"),d(lc,"class","relative group"),d(cO,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fO,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mO,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring"),d(gO,"href","/docs/transformers/pr_16760/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(hO,"href","/docs/transformers/pr_16760/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(pO,"href","/docs/transformers/pr_16760/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(_O,"href","/docs/transformers/pr_16760/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(yF,"id","transformers.AutoModelForInstanceSegmentation"),d(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yF,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(uO,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bO,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vO,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring"),d(FO,"href","/docs/transformers/pr_16760/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(kF,"id","transformers.TFAutoModel"),d(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kF,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(TO,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MO,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EO,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring"),d(CO,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.TFAlbertModel"),d(wO,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.TFBartModel"),d(AO,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.TFBertModel"),d(yO,"href","/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(LO,"href","/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(xO,"href","/docs/transformers/pr_16760/en/model_doc/camembert#transformers.TFCamembertModel"),d(kO,"href","/docs/transformers/pr_16760/en/model_doc/clip#transformers.TFCLIPModel"),d(SO,"href","/docs/transformers/pr_16760/en/model_doc/convbert#transformers.TFConvBertModel"),d(RO,"href","/docs/transformers/pr_16760/en/model_doc/convnext#transformers.TFConvNextModel"),d(BO,"href","/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.TFCTRLModel"),d(PO,"href","/docs/transformers/pr_16760/en/model_doc/deberta#transformers.TFDebertaModel"),d($O,"href","/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(IO,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(qO,"href","/docs/transformers/pr_16760/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(NO,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.TFElectraModel"),d(jO,"href","/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(DO,"href","/docs/transformers/pr_16760/en/model_doc/funnel#transformers.TFFunnelModel"),d(GO,"href","/docs/transformers/pr_16760/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(OO,"href","/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.TFGPT2Model"),d(VO,"href","/docs/transformers/pr_16760/en/model_doc/gptj#transformers.TFGPTJModel"),d(XO,"href","/docs/transformers/pr_16760/en/model_doc/hubert#transformers.TFHubertModel"),d(zO,"href","/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(QO,"href","/docs/transformers/pr_16760/en/model_doc/led#transformers.TFLEDModel"),d(WO,"href","/docs/transformers/pr_16760/en/model_doc/longformer#transformers.TFLongformerModel"),d(HO,"href","/docs/transformers/pr_16760/en/model_doc/lxmert#transformers.TFLxmertModel"),d(UO,"href","/docs/transformers/pr_16760/en/model_doc/marian#transformers.TFMarianModel"),d(JO,"href","/docs/transformers/pr_16760/en/model_doc/mbart#transformers.TFMBartModel"),d(YO,"href","/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(KO,"href","/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.TFMPNetModel"),d(ZO,"href","/docs/transformers/pr_16760/en/model_doc/mt5#transformers.TFMT5Model"),d(eV,"href","/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(oV,"href","/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.TFPegasusModel"),d(rV,"href","/docs/transformers/pr_16760/en/model_doc/rembert#transformers.TFRemBertModel"),d(tV,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.TFRobertaModel"),d(aV,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.TFRoFormerModel"),d(nV,"href","/docs/transformers/pr_16760/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(sV,"href","/docs/transformers/pr_16760/en/model_doc/t5#transformers.TFT5Model"),d(lV,"href","/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TFTapasModel"),d(iV,"href","/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(dV,"href","/docs/transformers/pr_16760/en/model_doc/vit#transformers.TFViTModel"),d(cV,"href","/docs/transformers/pr_16760/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(fV,"href","/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(mV,"href","/docs/transformers/pr_16760/en/model_doc/xlm#transformers.TFXLMModel"),d(gV,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(hV,"href","/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(F0,"id","transformers.TFAutoModelForPreTraining"),d(F0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F0,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(pV,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_V,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uV,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring"),d(bV,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(vV,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(FV,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.TFBertForPreTraining"),d(TV,"href","/docs/transformers/pr_16760/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(MV,"href","/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(EV,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(CV,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(wV,"href","/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(AV,"href","/docs/transformers/pr_16760/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(yV,"href","/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(LV,"href","/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(xV,"href","/docs/transformers/pr_16760/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(kV,"href","/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(SV,"href","/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(RV,"href","/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(BV,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(PV,"href","/docs/transformers/pr_16760/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d($V,"href","/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(IV,"href","/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(qV,"href","/docs/transformers/pr_16760/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(NV,"href","/docs/transformers/pr_16760/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(jV,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(DV,"href","/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Fr,"class","docstring"),d(X0,"id","transformers.TFAutoModelForCausalLM"),d(X0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X0,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(GV,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OV,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VV,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring"),d(XV,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(zV,"href","/docs/transformers/pr_16760/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(QV,"href","/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(WV,"href","/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(HV,"href","/docs/transformers/pr_16760/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(UV,"href","/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(JV,"href","/docs/transformers/pr_16760/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(YV,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(KV,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(ZV,"href","/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(eX,"href","/docs/transformers/pr_16760/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(oX,"href","/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Tr,"class","docstring"),d(tT,"id","transformers.TFAutoModelForImageClassification"),d(tT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tT,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(rX,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tX,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aX,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring"),d(nX,"href","/docs/transformers/pr_16760/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(sX,"href","/docs/transformers/pr_16760/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Mr,"class","docstring"),d(sT,"id","transformers.TFAutoModelForMaskedLM"),d(sT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sT,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(lX,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iX,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dX,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring"),d(cX,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(fX,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(mX,"href","/docs/transformers/pr_16760/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(gX,"href","/docs/transformers/pr_16760/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(hX,"href","/docs/transformers/pr_16760/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(pX,"href","/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(_X,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(uX,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(bX,"href","/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(vX,"href","/docs/transformers/pr_16760/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(FX,"href","/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(TX,"href","/docs/transformers/pr_16760/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(MX,"href","/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(EX,"href","/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(CX,"href","/docs/transformers/pr_16760/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(wX,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(AX,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(yX,"href","/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(LX,"href","/docs/transformers/pr_16760/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(xX,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Er,"class","docstring"),d(yT,"id","transformers.TFAutoModelForSeq2SeqLM"),d(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yT,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(kX,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SX,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RX,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring"),d(BX,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(PX,"href","/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d($X,"href","/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(IX,"href","/docs/transformers/pr_16760/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(qX,"href","/docs/transformers/pr_16760/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(NX,"href","/docs/transformers/pr_16760/en/model_doc/marian#transformers.TFMarianMTModel"),d(jX,"href","/docs/transformers/pr_16760/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(DX,"href","/docs/transformers/pr_16760/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(GX,"href","/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(OX,"href","/docs/transformers/pr_16760/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Cr,"class","docstring"),d(NT,"id","transformers.TFAutoModelForSequenceClassification"),d(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(NT,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(VX,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XX,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zX,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring"),d(QX,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(WX,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(HX,"href","/docs/transformers/pr_16760/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(UX,"href","/docs/transformers/pr_16760/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(JX,"href","/docs/transformers/pr_16760/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(YX,"href","/docs/transformers/pr_16760/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(KX,"href","/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(ez,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(oz,"href","/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(rz,"href","/docs/transformers/pr_16760/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(tz,"href","/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(az,"href","/docs/transformers/pr_16760/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(nz,"href","/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(sz,"href","/docs/transformers/pr_16760/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(lz,"href","/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(iz,"href","/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(dz,"href","/docs/transformers/pr_16760/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(cz,"href","/docs/transformers/pr_16760/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(fz,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(mz,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(gz,"href","/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(hz,"href","/docs/transformers/pr_16760/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(pz,"href","/docs/transformers/pr_16760/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(_z,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(uz,"href","/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(f7,"id","transformers.TFAutoModelForMultipleChoice"),d(f7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f7,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(bz,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vz,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Fz,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring"),d(Tz,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(Mz,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(Ez,"href","/docs/transformers/pr_16760/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(Cz,"href","/docs/transformers/pr_16760/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(wz,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(Az,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(yz,"href","/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_16760/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(xz,"href","/docs/transformers/pr_16760/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(kz,"href","/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_16760/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(Bz,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(Pz,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d($z,"href","/docs/transformers/pr_16760/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Iz,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(qz,"href","/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Ar,"class","docstring"),d(x7,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(x7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x7,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(Nz,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jz,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Dz,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring"),d(Gz,"href","/docs/transformers/pr_16760/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(S7,"id","transformers.TFAutoModelForTokenClassification"),d(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S7,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(Oz,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Vz,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Xz,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring"),d(zz,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Qz,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Wz,"href","/docs/transformers/pr_16760/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(Hz,"href","/docs/transformers/pr_16760/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(Uz,"href","/docs/transformers/pr_16760/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(Jz,"href","/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Yz,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(Kz,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Zz,"href","/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(eQ,"href","/docs/transformers/pr_16760/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(oQ,"href","/docs/transformers/pr_16760/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(rQ,"href","/docs/transformers/pr_16760/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(tQ,"href","/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(aQ,"href","/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(nQ,"href","/docs/transformers/pr_16760/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(sQ,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(lQ,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(iQ,"href","/docs/transformers/pr_16760/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(dQ,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(cQ,"href","/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring"),d(Lr,"class","docstring"),d(K7,"id","transformers.TFAutoModelForQuestionAnswering"),d(K7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K7,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(fQ,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mQ,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gQ,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring"),d(hQ,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(pQ,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(_Q,"href","/docs/transformers/pr_16760/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(uQ,"href","/docs/transformers/pr_16760/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(bQ,"href","/docs/transformers/pr_16760/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(vQ,"href","/docs/transformers/pr_16760/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(FQ,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_16760/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(EQ,"href","/docs/transformers/pr_16760/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_16760/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(wQ,"href","/docs/transformers/pr_16760/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_16760/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(yQ,"href","/docs/transformers/pr_16760/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(LQ,"href","/docs/transformers/pr_16760/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(xQ,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(kQ,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(SQ,"href","/docs/transformers/pr_16760/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(RQ,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(BQ,"href","/docs/transformers/pr_16760/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring"),d(xr,"class","docstring"),d(vM,"id","transformers.TFAutoModelForVision2Seq"),d(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vM,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(PQ,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($Q,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IQ,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring"),d(qQ,"href","/docs/transformers/pr_16760/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(TM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(NQ,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jQ,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DQ,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring"),d(GQ,"href","/docs/transformers/pr_16760/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring"),d(Sr,"class","docstring"),d(EM,"id","transformers.FlaxAutoModel"),d(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EM,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(OQ,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VQ,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XQ,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring"),d(zQ,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.FlaxAlbertModel"),d(QQ,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.FlaxBartModel"),d(WQ,"href","/docs/transformers/pr_16760/en/model_doc/beit#transformers.FlaxBeitModel"),d(HQ,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.FlaxBertModel"),d(UQ,"href","/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(JQ,"href","/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(YQ,"href","/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(KQ,"href","/docs/transformers/pr_16760/en/model_doc/clip#transformers.FlaxCLIPModel"),d(ZQ,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(eW,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.FlaxElectraModel"),d(oW,"href","/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(rW,"href","/docs/transformers/pr_16760/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(tW,"href","/docs/transformers/pr_16760/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(aW,"href","/docs/transformers/pr_16760/en/model_doc/marian#transformers.FlaxMarianModel"),d(nW,"href","/docs/transformers/pr_16760/en/model_doc/mbart#transformers.FlaxMBartModel"),d(sW,"href","/docs/transformers/pr_16760/en/model_doc/mt5#transformers.FlaxMT5Model"),d(lW,"href","/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(iW,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(dW,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(cW,"href","/docs/transformers/pr_16760/en/model_doc/t5#transformers.FlaxT5Model"),d(fW,"href","/docs/transformers/pr_16760/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(mW,"href","/docs/transformers/pr_16760/en/model_doc/vit#transformers.FlaxViTModel"),d(gW,"href","/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(hW,"href","/docs/transformers/pr_16760/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(pW,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring"),d(Rr,"class","docstring"),d(UM,"id","transformers.FlaxAutoModelForCausalLM"),d(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UM,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(_W,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uW,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bW,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring"),d(vW,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(FW,"href","/docs/transformers/pr_16760/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(TW,"href","/docs/transformers/pr_16760/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(MW,"href","/docs/transformers/pr_16760/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(EW,"href","/docs/transformers/pr_16760/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Br,"class","docstring"),d(o4,"id","transformers.FlaxAutoModelForPreTraining"),d(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o4,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(CW,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wW,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AW,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring"),d(yW,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(LW,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(xW,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(kW,"href","/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(SW,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(RW,"href","/docs/transformers/pr_16760/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(BW,"href","/docs/transformers/pr_16760/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(PW,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d($W,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(IW,"href","/docs/transformers/pr_16760/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(qW,"href","/docs/transformers/pr_16760/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(NW,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d(Pr,"class","docstring"),d(h4,"id","transformers.FlaxAutoModelForMaskedLM"),d(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h4,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(jW,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DW,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GW,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring"),d(OW,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(VW,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(XW,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(zW,"href","/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(QW,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(WW,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(HW,"href","/docs/transformers/pr_16760/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(UW,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(JW,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(YW,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring"),d($r,"class","docstring"),d(w4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(w4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(KW,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZW,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eH,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring"),d(oH,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(rH,"href","/docs/transformers/pr_16760/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(tH,"href","/docs/transformers/pr_16760/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(aH,"href","/docs/transformers/pr_16760/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(nH,"href","/docs/transformers/pr_16760/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(sH,"href","/docs/transformers/pr_16760/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(lH,"href","/docs/transformers/pr_16760/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(iH,"href","/docs/transformers/pr_16760/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(dH,"href","/docs/transformers/pr_16760/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring"),d(Ir,"class","docstring"),d($4,"id","transformers.FlaxAutoModelForSequenceClassification"),d($4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($4,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(cH,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fH,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mH,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring"),d(gH,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(hH,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(pH,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(_H,"href","/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(uH,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(bH,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(vH,"href","/docs/transformers/pr_16760/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(FH,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(TH,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(MH,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(qr,"class","docstring"),d(Q4,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(EH,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CH,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wH,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring"),d(AH,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(yH,"href","/docs/transformers/pr_16760/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(LH,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(xH,"href","/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(kH,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(SH,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(RH,"href","/docs/transformers/pr_16760/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(BH,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(PH,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d($H,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring"),d(Nr,"class","docstring"),d(tE,"id","transformers.FlaxAutoModelForTokenClassification"),d(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tE,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Ff,"class","relative group"),d(IH,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qH,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NH,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring"),d(jH,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(DH,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(GH,"href","/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(OH,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(VH,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(XH,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(zH,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(QH,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(mE,"id","transformers.FlaxAutoModelForMultipleChoice"),d(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mE,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Ef,"class","relative group"),d(WH,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HH,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UH,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring"),d(JH,"href","/docs/transformers/pr_16760/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(YH,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(KH,"href","/docs/transformers/pr_16760/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(ZH,"href","/docs/transformers/pr_16760/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(eU,"href","/docs/transformers/pr_16760/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(oU,"href","/docs/transformers/pr_16760/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(rU,"href","/docs/transformers/pr_16760/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(tU,"href","/docs/transformers/pr_16760/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(TE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(TE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Af,"class","relative group"),d(aU,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nU,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sU,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring"),d(lU,"href","/docs/transformers/pr_16760/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(EE,"id","transformers.FlaxAutoModelForImageClassification"),d(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EE,"href","#transformers.FlaxAutoModelForImageClassification"),d(xf,"class","relative group"),d(iU,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dU,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cU,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring"),d(fU,"href","/docs/transformers/pr_16760/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(mU,"href","/docs/transformers/pr_16760/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring"),d(Or,"class","docstring"),d(AE,"id","transformers.FlaxAutoModelForVision2Seq"),d(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(gU,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hU,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pU,"href","/docs/transformers/pr_16760/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring"),d(_U,"href","/docs/transformers/pr_16760/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Vr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,ce,u),e(ce,Ce),e(Ce,lo),g(he,lo,null),e(ce,Me),e(ce,Xo),e(Xo,qi),b(c,qf,u),b(c,fa,u),e(fa,Ni),e(fa,ji),e(ji,LC),e(fa,Nf),b(c,xe,u),b(c,co,u),e(co,Di),e(co,On),e(On,xC),e(co,Vn),e(co,Xn),e(Xn,kC),e(co,Gi),e(co,zn),e(zn,SC),e(co,Oi),b(c,jf,u),g(Da,c,u),b(c,fo,u),b(c,ue,u),e(ue,F9),e(ue,Vi),e(Vi,T9),e(ue,M9),b(c,zo,u),b(c,Ga,u),e(Ga,E9),e(Ga,Df),e(Df,C9),e(Ga,XIe),b(c,SRe,u),b(c,Xi,u),e(Xi,Gf),e(Gf,dY),g(RC,dY,null),e(Xi,zIe),e(Xi,cY),e(cY,QIe),b(c,RRe,u),b(c,Qn,u),e(Qn,WIe),e(Qn,fY),e(fY,HIe),e(Qn,UIe),e(Qn,mY),e(mY,JIe),e(Qn,YIe),b(c,BRe,u),g(BC,c,u),b(c,PRe,u),b(c,w9,u),e(w9,KIe),b(c,$Re,u),g(Of,c,u),b(c,IRe,u),b(c,zi,u),e(zi,Vf),e(Vf,gY),g(PC,gY,null),e(zi,ZIe),e(zi,hY),e(hY,eqe),b(c,qRe,u),b(c,Qo,u),g($C,Qo,null),e(Qo,oqe),e(Qo,IC),e(IC,rqe),e(IC,A9),e(A9,tqe),e(IC,aqe),e(Qo,nqe),e(Qo,qC),e(qC,sqe),e(qC,pY),e(pY,lqe),e(qC,iqe),e(Qo,dqe),e(Qo,mo),g(NC,mo,null),e(mo,cqe),e(mo,_Y),e(_Y,fqe),e(mo,mqe),e(mo,Qi),e(Qi,gqe),e(Qi,uY),e(uY,hqe),e(Qi,pqe),e(Qi,bY),e(bY,_qe),e(Qi,uqe),e(mo,bqe),e(mo,v),e(v,Xf),e(Xf,vY),e(vY,vqe),e(Xf,Fqe),e(Xf,y9),e(y9,Tqe),e(Xf,Mqe),e(v,Eqe),e(v,zf),e(zf,FY),e(FY,Cqe),e(zf,wqe),e(zf,L9),e(L9,Aqe),e(zf,yqe),e(v,Lqe),e(v,Qf),e(Qf,TY),e(TY,xqe),e(Qf,kqe),e(Qf,x9),e(x9,Sqe),e(Qf,Rqe),e(v,Bqe),e(v,Wf),e(Wf,MY),e(MY,Pqe),e(Wf,$qe),e(Wf,k9),e(k9,Iqe),e(Wf,qqe),e(v,Nqe),e(v,Hf),e(Hf,EY),e(EY,jqe),e(Hf,Dqe),e(Hf,S9),e(S9,Gqe),e(Hf,Oqe),e(v,Vqe),e(v,Uf),e(Uf,CY),e(CY,Xqe),e(Uf,zqe),e(Uf,R9),e(R9,Qqe),e(Uf,Wqe),e(v,Hqe),e(v,Jf),e(Jf,wY),e(wY,Uqe),e(Jf,Jqe),e(Jf,B9),e(B9,Yqe),e(Jf,Kqe),e(v,Zqe),e(v,Yf),e(Yf,AY),e(AY,eNe),e(Yf,oNe),e(Yf,P9),e(P9,rNe),e(Yf,tNe),e(v,aNe),e(v,Kf),e(Kf,yY),e(yY,nNe),e(Kf,sNe),e(Kf,$9),e($9,lNe),e(Kf,iNe),e(v,dNe),e(v,Zf),e(Zf,LY),e(LY,cNe),e(Zf,fNe),e(Zf,I9),e(I9,mNe),e(Zf,gNe),e(v,hNe),e(v,em),e(em,xY),e(xY,pNe),e(em,_Ne),e(em,q9),e(q9,uNe),e(em,bNe),e(v,vNe),e(v,om),e(om,kY),e(kY,FNe),e(om,TNe),e(om,N9),e(N9,MNe),e(om,ENe),e(v,CNe),e(v,rm),e(rm,SY),e(SY,wNe),e(rm,ANe),e(rm,j9),e(j9,yNe),e(rm,LNe),e(v,xNe),e(v,tm),e(tm,RY),e(RY,kNe),e(tm,SNe),e(tm,D9),e(D9,RNe),e(tm,BNe),e(v,PNe),e(v,am),e(am,BY),e(BY,$Ne),e(am,INe),e(am,G9),e(G9,qNe),e(am,NNe),e(v,jNe),e(v,nm),e(nm,PY),e(PY,DNe),e(nm,GNe),e(nm,O9),e(O9,ONe),e(nm,VNe),e(v,XNe),e(v,sm),e(sm,$Y),e($Y,zNe),e(sm,QNe),e(sm,V9),e(V9,WNe),e(sm,HNe),e(v,UNe),e(v,lm),e(lm,IY),e(IY,JNe),e(lm,YNe),e(lm,X9),e(X9,KNe),e(lm,ZNe),e(v,eje),e(v,im),e(im,qY),e(qY,oje),e(im,rje),e(im,z9),e(z9,tje),e(im,aje),e(v,nje),e(v,dm),e(dm,NY),e(NY,sje),e(dm,lje),e(dm,Q9),e(Q9,ije),e(dm,dje),e(v,cje),e(v,cm),e(cm,jY),e(jY,fje),e(cm,mje),e(cm,W9),e(W9,gje),e(cm,hje),e(v,pje),e(v,fm),e(fm,DY),e(DY,_je),e(fm,uje),e(fm,H9),e(H9,bje),e(fm,vje),e(v,Fje),e(v,mm),e(mm,GY),e(GY,Tje),e(mm,Mje),e(mm,U9),e(U9,Eje),e(mm,Cje),e(v,wje),e(v,gm),e(gm,OY),e(OY,Aje),e(gm,yje),e(gm,J9),e(J9,Lje),e(gm,xje),e(v,kje),e(v,hm),e(hm,VY),e(VY,Sje),e(hm,Rje),e(hm,Y9),e(Y9,Bje),e(hm,Pje),e(v,$je),e(v,pm),e(pm,XY),e(XY,Ije),e(pm,qje),e(pm,K9),e(K9,Nje),e(pm,jje),e(v,Dje),e(v,_m),e(_m,zY),e(zY,Gje),e(_m,Oje),e(_m,Z9),e(Z9,Vje),e(_m,Xje),e(v,zje),e(v,um),e(um,QY),e(QY,Qje),e(um,Wje),e(um,ex),e(ex,Hje),e(um,Uje),e(v,Jje),e(v,bm),e(bm,WY),e(WY,Yje),e(bm,Kje),e(bm,ox),e(ox,Zje),e(bm,eDe),e(v,oDe),e(v,vm),e(vm,HY),e(HY,rDe),e(vm,tDe),e(vm,rx),e(rx,aDe),e(vm,nDe),e(v,sDe),e(v,Fm),e(Fm,UY),e(UY,lDe),e(Fm,iDe),e(Fm,tx),e(tx,dDe),e(Fm,cDe),e(v,fDe),e(v,Tm),e(Tm,JY),e(JY,mDe),e(Tm,gDe),e(Tm,ax),e(ax,hDe),e(Tm,pDe),e(v,_De),e(v,Mm),e(Mm,YY),e(YY,uDe),e(Mm,bDe),e(Mm,nx),e(nx,vDe),e(Mm,FDe),e(v,TDe),e(v,Em),e(Em,KY),e(KY,MDe),e(Em,EDe),e(Em,sx),e(sx,CDe),e(Em,wDe),e(v,ADe),e(v,Cm),e(Cm,ZY),e(ZY,yDe),e(Cm,LDe),e(Cm,lx),e(lx,xDe),e(Cm,kDe),e(v,SDe),e(v,wm),e(wm,eK),e(eK,RDe),e(wm,BDe),e(wm,ix),e(ix,PDe),e(wm,$De),e(v,IDe),e(v,Am),e(Am,oK),e(oK,qDe),e(Am,NDe),e(Am,dx),e(dx,jDe),e(Am,DDe),e(v,GDe),e(v,ym),e(ym,rK),e(rK,ODe),e(ym,VDe),e(ym,cx),e(cx,XDe),e(ym,zDe),e(v,QDe),e(v,Lm),e(Lm,tK),e(tK,WDe),e(Lm,HDe),e(Lm,fx),e(fx,UDe),e(Lm,JDe),e(v,YDe),e(v,xm),e(xm,aK),e(aK,KDe),e(xm,ZDe),e(xm,mx),e(mx,eGe),e(xm,oGe),e(v,rGe),e(v,km),e(km,nK),e(nK,tGe),e(km,aGe),e(km,gx),e(gx,nGe),e(km,sGe),e(v,lGe),e(v,Sm),e(Sm,sK),e(sK,iGe),e(Sm,dGe),e(Sm,hx),e(hx,cGe),e(Sm,fGe),e(v,mGe),e(v,Rm),e(Rm,lK),e(lK,gGe),e(Rm,hGe),e(Rm,px),e(px,pGe),e(Rm,_Ge),e(v,uGe),e(v,Bm),e(Bm,iK),e(iK,bGe),e(Bm,vGe),e(Bm,_x),e(_x,FGe),e(Bm,TGe),e(v,MGe),e(v,Pm),e(Pm,dK),e(dK,EGe),e(Pm,CGe),e(Pm,ux),e(ux,wGe),e(Pm,AGe),e(v,yGe),e(v,$m),e($m,cK),e(cK,LGe),e($m,xGe),e($m,bx),e(bx,kGe),e($m,SGe),e(v,RGe),e(v,Im),e(Im,fK),e(fK,BGe),e(Im,PGe),e(Im,vx),e(vx,$Ge),e(Im,IGe),e(v,qGe),e(v,qm),e(qm,mK),e(mK,NGe),e(qm,jGe),e(qm,Fx),e(Fx,DGe),e(qm,GGe),e(v,OGe),e(v,Nm),e(Nm,gK),e(gK,VGe),e(Nm,XGe),e(Nm,Tx),e(Tx,zGe),e(Nm,QGe),e(v,WGe),e(v,jm),e(jm,hK),e(hK,HGe),e(jm,UGe),e(jm,Mx),e(Mx,JGe),e(jm,YGe),e(v,KGe),e(v,Dm),e(Dm,pK),e(pK,ZGe),e(Dm,eOe),e(Dm,Ex),e(Ex,oOe),e(Dm,rOe),e(v,tOe),e(v,Gm),e(Gm,_K),e(_K,aOe),e(Gm,nOe),e(Gm,Cx),e(Cx,sOe),e(Gm,lOe),e(v,iOe),e(v,Om),e(Om,uK),e(uK,dOe),e(Om,cOe),e(Om,wx),e(wx,fOe),e(Om,mOe),e(v,gOe),e(v,Vm),e(Vm,bK),e(bK,hOe),e(Vm,pOe),e(Vm,Ax),e(Ax,_Oe),e(Vm,uOe),e(v,bOe),e(v,Xm),e(Xm,vK),e(vK,vOe),e(Xm,FOe),e(Xm,yx),e(yx,TOe),e(Xm,MOe),e(v,EOe),e(v,zm),e(zm,FK),e(FK,COe),e(zm,wOe),e(zm,Lx),e(Lx,AOe),e(zm,yOe),e(v,LOe),e(v,Qm),e(Qm,TK),e(TK,xOe),e(Qm,kOe),e(Qm,xx),e(xx,SOe),e(Qm,ROe),e(v,BOe),e(v,Wm),e(Wm,MK),e(MK,POe),e(Wm,$Oe),e(Wm,kx),e(kx,IOe),e(Wm,qOe),e(v,NOe),e(v,Hm),e(Hm,EK),e(EK,jOe),e(Hm,DOe),e(Hm,Sx),e(Sx,GOe),e(Hm,OOe),e(v,VOe),e(v,Um),e(Um,CK),e(CK,XOe),e(Um,zOe),e(Um,Rx),e(Rx,QOe),e(Um,WOe),e(v,HOe),e(v,Jm),e(Jm,wK),e(wK,UOe),e(Jm,JOe),e(Jm,Bx),e(Bx,YOe),e(Jm,KOe),e(v,ZOe),e(v,Ym),e(Ym,AK),e(AK,eVe),e(Ym,oVe),e(Ym,Px),e(Px,rVe),e(Ym,tVe),e(v,aVe),e(v,Km),e(Km,yK),e(yK,nVe),e(Km,sVe),e(Km,$x),e($x,lVe),e(Km,iVe),e(v,dVe),e(v,Zm),e(Zm,LK),e(LK,cVe),e(Zm,fVe),e(Zm,Ix),e(Ix,mVe),e(Zm,gVe),e(v,hVe),e(v,eg),e(eg,xK),e(xK,pVe),e(eg,_Ve),e(eg,qx),e(qx,uVe),e(eg,bVe),e(v,vVe),e(v,og),e(og,kK),e(kK,FVe),e(og,TVe),e(og,Nx),e(Nx,MVe),e(og,EVe),e(v,CVe),e(v,rg),e(rg,SK),e(SK,wVe),e(rg,AVe),e(rg,jx),e(jx,yVe),e(rg,LVe),e(v,xVe),e(v,tg),e(tg,RK),e(RK,kVe),e(tg,SVe),e(tg,Dx),e(Dx,RVe),e(tg,BVe),e(v,PVe),e(v,ag),e(ag,BK),e(BK,$Ve),e(ag,IVe),e(ag,Gx),e(Gx,qVe),e(ag,NVe),e(v,jVe),e(v,ng),e(ng,PK),e(PK,DVe),e(ng,GVe),e(ng,Ox),e(Ox,OVe),e(ng,VVe),e(v,XVe),e(v,sg),e(sg,$K),e($K,zVe),e(sg,QVe),e(sg,Vx),e(Vx,WVe),e(sg,HVe),e(v,UVe),e(v,lg),e(lg,IK),e(IK,JVe),e(lg,YVe),e(lg,Xx),e(Xx,KVe),e(lg,ZVe),e(v,eXe),e(v,ig),e(ig,qK),e(qK,oXe),e(ig,rXe),e(ig,zx),e(zx,tXe),e(ig,aXe),e(v,nXe),e(v,dg),e(dg,NK),e(NK,sXe),e(dg,lXe),e(dg,Qx),e(Qx,iXe),e(dg,dXe),e(v,cXe),e(v,cg),e(cg,jK),e(jK,fXe),e(cg,mXe),e(cg,Wx),e(Wx,gXe),e(cg,hXe),e(v,pXe),e(v,fg),e(fg,DK),e(DK,_Xe),e(fg,uXe),e(fg,Hx),e(Hx,bXe),e(fg,vXe),e(v,FXe),e(v,mg),e(mg,GK),e(GK,TXe),e(mg,MXe),e(mg,Ux),e(Ux,EXe),e(mg,CXe),e(v,wXe),e(v,gg),e(gg,OK),e(OK,AXe),e(gg,yXe),e(gg,Jx),e(Jx,LXe),e(gg,xXe),e(v,kXe),e(v,hg),e(hg,VK),e(VK,SXe),e(hg,RXe),e(hg,Yx),e(Yx,BXe),e(hg,PXe),e(v,$Xe),e(v,pg),e(pg,XK),e(XK,IXe),e(pg,qXe),e(pg,Kx),e(Kx,NXe),e(pg,jXe),e(v,DXe),e(v,_g),e(_g,zK),e(zK,GXe),e(_g,OXe),e(_g,Zx),e(Zx,VXe),e(_g,XXe),e(v,zXe),e(v,ug),e(ug,QK),e(QK,QXe),e(ug,WXe),e(ug,ek),e(ek,HXe),e(ug,UXe),e(v,JXe),e(v,bg),e(bg,WK),e(WK,YXe),e(bg,KXe),e(bg,ok),e(ok,ZXe),e(bg,eze),e(v,oze),e(v,vg),e(vg,HK),e(HK,rze),e(vg,tze),e(vg,rk),e(rk,aze),e(vg,nze),e(v,sze),e(v,Fg),e(Fg,UK),e(UK,lze),e(Fg,ize),e(Fg,tk),e(tk,dze),e(Fg,cze),e(v,fze),e(v,Tg),e(Tg,JK),e(JK,mze),e(Tg,gze),e(Tg,ak),e(ak,hze),e(Tg,pze),e(v,_ze),e(v,Mg),e(Mg,YK),e(YK,uze),e(Mg,bze),e(Mg,nk),e(nk,vze),e(Mg,Fze),e(v,Tze),e(v,Eg),e(Eg,KK),e(KK,Mze),e(Eg,Eze),e(Eg,sk),e(sk,Cze),e(Eg,wze),e(v,Aze),e(v,Cg),e(Cg,ZK),e(ZK,yze),e(Cg,Lze),e(Cg,lk),e(lk,xze),e(Cg,kze),e(v,Sze),e(v,wg),e(wg,eZ),e(eZ,Rze),e(wg,Bze),e(wg,ik),e(ik,Pze),e(wg,$ze),e(v,Ize),e(v,Ag),e(Ag,oZ),e(oZ,qze),e(Ag,Nze),e(Ag,dk),e(dk,jze),e(Ag,Dze),e(v,Gze),e(v,yg),e(yg,rZ),e(rZ,Oze),e(yg,Vze),e(yg,ck),e(ck,Xze),e(yg,zze),e(v,Qze),e(v,Lg),e(Lg,tZ),e(tZ,Wze),e(Lg,Hze),e(Lg,fk),e(fk,Uze),e(Lg,Jze),e(v,Yze),e(v,xg),e(xg,aZ),e(aZ,Kze),e(xg,Zze),e(xg,mk),e(mk,eQe),e(xg,oQe),e(v,rQe),e(v,kg),e(kg,nZ),e(nZ,tQe),e(kg,aQe),e(kg,gk),e(gk,nQe),e(kg,sQe),e(v,lQe),e(v,Sg),e(Sg,sZ),e(sZ,iQe),e(Sg,dQe),e(Sg,hk),e(hk,cQe),e(Sg,fQe),e(v,mQe),e(v,Rg),e(Rg,lZ),e(lZ,gQe),e(Rg,hQe),e(Rg,pk),e(pk,pQe),e(Rg,_Qe),e(v,uQe),e(v,Bg),e(Bg,iZ),e(iZ,bQe),e(Bg,vQe),e(Bg,_k),e(_k,FQe),e(Bg,TQe),e(v,MQe),e(v,Pg),e(Pg,dZ),e(dZ,EQe),e(Pg,CQe),e(Pg,uk),e(uk,wQe),e(Pg,AQe),e(v,yQe),e(v,$g),e($g,cZ),e(cZ,LQe),e($g,xQe),e($g,bk),e(bk,kQe),e($g,SQe),e(v,RQe),e(v,Ig),e(Ig,fZ),e(fZ,BQe),e(Ig,PQe),e(Ig,vk),e(vk,$Qe),e(Ig,IQe),e(v,qQe),e(v,qg),e(qg,mZ),e(mZ,NQe),e(qg,jQe),e(qg,Fk),e(Fk,DQe),e(qg,GQe),e(mo,OQe),e(mo,gZ),e(gZ,VQe),e(mo,XQe),g(jC,mo,null),e(Qo,zQe),e(Qo,Ng),g(DC,Ng,null),e(Ng,QQe),e(Ng,hZ),e(hZ,WQe),b(c,NRe,u),b(c,Wi,u),e(Wi,jg),e(jg,pZ),g(GC,pZ,null),e(Wi,HQe),e(Wi,_Z),e(_Z,UQe),b(c,jRe,u),b(c,Wo,u),g(OC,Wo,null),e(Wo,JQe),e(Wo,VC),e(VC,YQe),e(VC,Tk),e(Tk,KQe),e(VC,ZQe),e(Wo,eWe),e(Wo,XC),e(XC,oWe),e(XC,uZ),e(uZ,rWe),e(XC,tWe),e(Wo,aWe),e(Wo,go),g(zC,go,null),e(go,nWe),e(go,bZ),e(bZ,sWe),e(go,lWe),e(go,Oa),e(Oa,iWe),e(Oa,vZ),e(vZ,dWe),e(Oa,cWe),e(Oa,FZ),e(FZ,fWe),e(Oa,mWe),e(Oa,TZ),e(TZ,gWe),e(Oa,hWe),e(go,pWe),e(go,E),e(E,Wn),e(Wn,MZ),e(MZ,_We),e(Wn,uWe),e(Wn,Mk),e(Mk,bWe),e(Wn,vWe),e(Wn,Ek),e(Ek,FWe),e(Wn,TWe),e(E,MWe),e(E,Hn),e(Hn,EZ),e(EZ,EWe),e(Hn,CWe),e(Hn,Ck),e(Ck,wWe),e(Hn,AWe),e(Hn,wk),e(wk,yWe),e(Hn,LWe),e(E,xWe),e(E,Un),e(Un,CZ),e(CZ,kWe),e(Un,SWe),e(Un,Ak),e(Ak,RWe),e(Un,BWe),e(Un,yk),e(yk,PWe),e(Un,$We),e(E,IWe),e(E,Dg),e(Dg,wZ),e(wZ,qWe),e(Dg,NWe),e(Dg,Lk),e(Lk,jWe),e(Dg,DWe),e(E,GWe),e(E,Jn),e(Jn,AZ),e(AZ,OWe),e(Jn,VWe),e(Jn,xk),e(xk,XWe),e(Jn,zWe),e(Jn,kk),e(kk,QWe),e(Jn,WWe),e(E,HWe),e(E,Gg),e(Gg,yZ),e(yZ,UWe),e(Gg,JWe),e(Gg,Sk),e(Sk,YWe),e(Gg,KWe),e(E,ZWe),e(E,Og),e(Og,LZ),e(LZ,eHe),e(Og,oHe),e(Og,Rk),e(Rk,rHe),e(Og,tHe),e(E,aHe),e(E,Vg),e(Vg,xZ),e(xZ,nHe),e(Vg,sHe),e(Vg,Bk),e(Bk,lHe),e(Vg,iHe),e(E,dHe),e(E,Yn),e(Yn,kZ),e(kZ,cHe),e(Yn,fHe),e(Yn,Pk),e(Pk,mHe),e(Yn,gHe),e(Yn,$k),e($k,hHe),e(Yn,pHe),e(E,_He),e(E,Kn),e(Kn,SZ),e(SZ,uHe),e(Kn,bHe),e(Kn,Ik),e(Ik,vHe),e(Kn,FHe),e(Kn,qk),e(qk,THe),e(Kn,MHe),e(E,EHe),e(E,Zn),e(Zn,RZ),e(RZ,CHe),e(Zn,wHe),e(Zn,Nk),e(Nk,AHe),e(Zn,yHe),e(Zn,jk),e(jk,LHe),e(Zn,xHe),e(E,kHe),e(E,Xg),e(Xg,BZ),e(BZ,SHe),e(Xg,RHe),e(Xg,Dk),e(Dk,BHe),e(Xg,PHe),e(E,$He),e(E,zg),e(zg,PZ),e(PZ,IHe),e(zg,qHe),e(zg,Gk),e(Gk,NHe),e(zg,jHe),e(E,DHe),e(E,es),e(es,$Z),e($Z,GHe),e(es,OHe),e(es,Ok),e(Ok,VHe),e(es,XHe),e(es,Vk),e(Vk,zHe),e(es,QHe),e(E,WHe),e(E,Qg),e(Qg,IZ),e(IZ,HHe),e(Qg,UHe),e(Qg,Xk),e(Xk,JHe),e(Qg,YHe),e(E,KHe),e(E,os),e(os,qZ),e(qZ,ZHe),e(os,eUe),e(os,zk),e(zk,oUe),e(os,rUe),e(os,Qk),e(Qk,tUe),e(os,aUe),e(E,nUe),e(E,rs),e(rs,NZ),e(NZ,sUe),e(rs,lUe),e(rs,Wk),e(Wk,iUe),e(rs,dUe),e(rs,Hk),e(Hk,cUe),e(rs,fUe),e(E,mUe),e(E,ts),e(ts,jZ),e(jZ,gUe),e(ts,hUe),e(ts,Uk),e(Uk,pUe),e(ts,_Ue),e(ts,DZ),e(DZ,uUe),e(ts,bUe),e(E,vUe),e(E,Wg),e(Wg,GZ),e(GZ,FUe),e(Wg,TUe),e(Wg,Jk),e(Jk,MUe),e(Wg,EUe),e(E,CUe),e(E,as),e(as,OZ),e(OZ,wUe),e(as,AUe),e(as,Yk),e(Yk,yUe),e(as,LUe),e(as,Kk),e(Kk,xUe),e(as,kUe),e(E,SUe),e(E,Hg),e(Hg,VZ),e(VZ,RUe),e(Hg,BUe),e(Hg,Zk),e(Zk,PUe),e(Hg,$Ue),e(E,IUe),e(E,ns),e(ns,XZ),e(XZ,qUe),e(ns,NUe),e(ns,eS),e(eS,jUe),e(ns,DUe),e(ns,oS),e(oS,GUe),e(ns,OUe),e(E,VUe),e(E,ss),e(ss,zZ),e(zZ,XUe),e(ss,zUe),e(ss,rS),e(rS,QUe),e(ss,WUe),e(ss,tS),e(tS,HUe),e(ss,UUe),e(E,JUe),e(E,ls),e(ls,QZ),e(QZ,YUe),e(ls,KUe),e(ls,aS),e(aS,ZUe),e(ls,eJe),e(ls,nS),e(nS,oJe),e(ls,rJe),e(E,tJe),e(E,Ug),e(Ug,WZ),e(WZ,aJe),e(Ug,nJe),e(Ug,sS),e(sS,sJe),e(Ug,lJe),e(E,iJe),e(E,is),e(is,HZ),e(HZ,dJe),e(is,cJe),e(is,lS),e(lS,fJe),e(is,mJe),e(is,iS),e(iS,gJe),e(is,hJe),e(E,pJe),e(E,Jg),e(Jg,UZ),e(UZ,_Je),e(Jg,uJe),e(Jg,dS),e(dS,bJe),e(Jg,vJe),e(E,FJe),e(E,ds),e(ds,JZ),e(JZ,TJe),e(ds,MJe),e(ds,cS),e(cS,EJe),e(ds,CJe),e(ds,fS),e(fS,wJe),e(ds,AJe),e(E,yJe),e(E,cs),e(cs,YZ),e(YZ,LJe),e(cs,xJe),e(cs,mS),e(mS,kJe),e(cs,SJe),e(cs,gS),e(gS,RJe),e(cs,BJe),e(E,PJe),e(E,fs),e(fs,KZ),e(KZ,$Je),e(fs,IJe),e(fs,hS),e(hS,qJe),e(fs,NJe),e(fs,pS),e(pS,jJe),e(fs,DJe),e(E,GJe),e(E,ms),e(ms,ZZ),e(ZZ,OJe),e(ms,VJe),e(ms,_S),e(_S,XJe),e(ms,zJe),e(ms,uS),e(uS,QJe),e(ms,WJe),e(E,HJe),e(E,Yg),e(Yg,eee),e(eee,UJe),e(Yg,JJe),e(Yg,bS),e(bS,YJe),e(Yg,KJe),e(E,ZJe),e(E,gs),e(gs,oee),e(oee,eYe),e(gs,oYe),e(gs,vS),e(vS,rYe),e(gs,tYe),e(gs,FS),e(FS,aYe),e(gs,nYe),e(E,sYe),e(E,hs),e(hs,ree),e(ree,lYe),e(hs,iYe),e(hs,TS),e(TS,dYe),e(hs,cYe),e(hs,MS),e(MS,fYe),e(hs,mYe),e(E,gYe),e(E,ps),e(ps,tee),e(tee,hYe),e(ps,pYe),e(ps,ES),e(ES,_Ye),e(ps,uYe),e(ps,CS),e(CS,bYe),e(ps,vYe),e(E,FYe),e(E,_s),e(_s,aee),e(aee,TYe),e(_s,MYe),e(_s,wS),e(wS,EYe),e(_s,CYe),e(_s,AS),e(AS,wYe),e(_s,AYe),e(E,yYe),e(E,us),e(us,nee),e(nee,LYe),e(us,xYe),e(us,yS),e(yS,kYe),e(us,SYe),e(us,LS),e(LS,RYe),e(us,BYe),e(E,PYe),e(E,bs),e(bs,see),e(see,$Ye),e(bs,IYe),e(bs,xS),e(xS,qYe),e(bs,NYe),e(bs,kS),e(kS,jYe),e(bs,DYe),e(E,GYe),e(E,Kg),e(Kg,lee),e(lee,OYe),e(Kg,VYe),e(Kg,SS),e(SS,XYe),e(Kg,zYe),e(E,QYe),e(E,vs),e(vs,iee),e(iee,WYe),e(vs,HYe),e(vs,RS),e(RS,UYe),e(vs,JYe),e(vs,BS),e(BS,YYe),e(vs,KYe),e(E,ZYe),e(E,Zg),e(Zg,dee),e(dee,eKe),e(Zg,oKe),e(Zg,PS),e(PS,rKe),e(Zg,tKe),e(E,aKe),e(E,eh),e(eh,cee),e(cee,nKe),e(eh,sKe),e(eh,$S),e($S,lKe),e(eh,iKe),e(E,dKe),e(E,Fs),e(Fs,fee),e(fee,cKe),e(Fs,fKe),e(Fs,IS),e(IS,mKe),e(Fs,gKe),e(Fs,qS),e(qS,hKe),e(Fs,pKe),e(E,_Ke),e(E,Ts),e(Ts,mee),e(mee,uKe),e(Ts,bKe),e(Ts,NS),e(NS,vKe),e(Ts,FKe),e(Ts,jS),e(jS,TKe),e(Ts,MKe),e(E,EKe),e(E,oh),e(oh,gee),e(gee,CKe),e(oh,wKe),e(oh,DS),e(DS,AKe),e(oh,yKe),e(E,LKe),e(E,Ms),e(Ms,hee),e(hee,xKe),e(Ms,kKe),e(Ms,GS),e(GS,SKe),e(Ms,RKe),e(Ms,OS),e(OS,BKe),e(Ms,PKe),e(E,$Ke),e(E,Es),e(Es,pee),e(pee,IKe),e(Es,qKe),e(Es,VS),e(VS,NKe),e(Es,jKe),e(Es,XS),e(XS,DKe),e(Es,GKe),e(E,OKe),e(E,Cs),e(Cs,_ee),e(_ee,VKe),e(Cs,XKe),e(Cs,zS),e(zS,zKe),e(Cs,QKe),e(Cs,QS),e(QS,WKe),e(Cs,HKe),e(E,UKe),e(E,ws),e(ws,uee),e(uee,JKe),e(ws,YKe),e(ws,WS),e(WS,KKe),e(ws,ZKe),e(ws,HS),e(HS,eZe),e(ws,oZe),e(E,rZe),e(E,As),e(As,bee),e(bee,tZe),e(As,aZe),e(As,US),e(US,nZe),e(As,sZe),e(As,JS),e(JS,lZe),e(As,iZe),e(E,dZe),e(E,rh),e(rh,vee),e(vee,cZe),e(rh,fZe),e(rh,YS),e(YS,mZe),e(rh,gZe),e(E,hZe),e(E,th),e(th,Fee),e(Fee,pZe),e(th,_Ze),e(th,KS),e(KS,uZe),e(th,bZe),e(E,vZe),e(E,ah),e(ah,Tee),e(Tee,FZe),e(ah,TZe),e(ah,ZS),e(ZS,MZe),e(ah,EZe),e(E,CZe),e(E,nh),e(nh,Mee),e(Mee,wZe),e(nh,AZe),e(nh,eR),e(eR,yZe),e(nh,LZe),e(E,xZe),e(E,ys),e(ys,Eee),e(Eee,kZe),e(ys,SZe),e(ys,oR),e(oR,RZe),e(ys,BZe),e(ys,rR),e(rR,PZe),e(ys,$Ze),e(E,IZe),e(E,sh),e(sh,Cee),e(Cee,qZe),e(sh,NZe),e(sh,tR),e(tR,jZe),e(sh,DZe),e(E,GZe),e(E,Ls),e(Ls,wee),e(wee,OZe),e(Ls,VZe),e(Ls,aR),e(aR,XZe),e(Ls,zZe),e(Ls,nR),e(nR,QZe),e(Ls,WZe),e(E,HZe),e(E,xs),e(xs,Aee),e(Aee,UZe),e(xs,JZe),e(xs,sR),e(sR,YZe),e(xs,KZe),e(xs,lR),e(lR,ZZe),e(xs,eeo),e(E,oeo),e(E,ks),e(ks,yee),e(yee,reo),e(ks,teo),e(ks,iR),e(iR,aeo),e(ks,neo),e(ks,dR),e(dR,seo),e(ks,leo),e(E,ieo),e(E,Ss),e(Ss,Lee),e(Lee,deo),e(Ss,ceo),e(Ss,cR),e(cR,feo),e(Ss,meo),e(Ss,fR),e(fR,geo),e(Ss,heo),e(E,peo),e(E,Rs),e(Rs,xee),e(xee,_eo),e(Rs,ueo),e(Rs,mR),e(mR,beo),e(Rs,veo),e(Rs,gR),e(gR,Feo),e(Rs,Teo),e(E,Meo),e(E,Bs),e(Bs,kee),e(kee,Eeo),e(Bs,Ceo),e(Bs,hR),e(hR,weo),e(Bs,Aeo),e(Bs,pR),e(pR,yeo),e(Bs,Leo),e(E,xeo),e(E,lh),e(lh,See),e(See,keo),e(lh,Seo),e(lh,_R),e(_R,Reo),e(lh,Beo),e(E,Peo),e(E,ih),e(ih,Ree),e(Ree,$eo),e(ih,Ieo),e(ih,uR),e(uR,qeo),e(ih,Neo),e(E,jeo),e(E,Ps),e(Ps,Bee),e(Bee,Deo),e(Ps,Geo),e(Ps,bR),e(bR,Oeo),e(Ps,Veo),e(Ps,vR),e(vR,Xeo),e(Ps,zeo),e(E,Qeo),e(E,$s),e($s,Pee),e(Pee,Weo),e($s,Heo),e($s,FR),e(FR,Ueo),e($s,Jeo),e($s,TR),e(TR,Yeo),e($s,Keo),e(E,Zeo),e(E,Is),e(Is,$ee),e($ee,eoo),e(Is,ooo),e(Is,MR),e(MR,roo),e(Is,too),e(Is,ER),e(ER,aoo),e(Is,noo),e(E,soo),e(E,dh),e(dh,Iee),e(Iee,loo),e(dh,ioo),e(dh,CR),e(CR,doo),e(dh,coo),e(E,foo),e(E,ch),e(ch,qee),e(qee,moo),e(ch,goo),e(ch,wR),e(wR,hoo),e(ch,poo),e(E,_oo),e(E,fh),e(fh,Nee),e(Nee,uoo),e(fh,boo),e(fh,AR),e(AR,voo),e(fh,Foo),e(E,Too),e(E,mh),e(mh,jee),e(jee,Moo),e(mh,Eoo),e(mh,yR),e(yR,Coo),e(mh,woo),e(E,Aoo),e(E,gh),e(gh,Dee),e(Dee,yoo),e(gh,Loo),e(gh,LR),e(LR,xoo),e(gh,koo),e(E,Soo),e(E,qs),e(qs,Gee),e(Gee,Roo),e(qs,Boo),e(qs,xR),e(xR,Poo),e(qs,$oo),e(qs,kR),e(kR,Ioo),e(qs,qoo),e(E,Noo),e(E,hh),e(hh,Oee),e(Oee,joo),e(hh,Doo),e(hh,SR),e(SR,Goo),e(hh,Ooo),e(E,Voo),e(E,ph),e(ph,Vee),e(Vee,Xoo),e(ph,zoo),e(ph,RR),e(RR,Qoo),e(ph,Woo),e(E,Hoo),e(E,Ns),e(Ns,Xee),e(Xee,Uoo),e(Ns,Joo),e(Ns,BR),e(BR,Yoo),e(Ns,Koo),e(Ns,PR),e(PR,Zoo),e(Ns,ero),e(E,oro),e(E,js),e(js,zee),e(zee,rro),e(js,tro),e(js,$R),e($R,aro),e(js,nro),e(js,IR),e(IR,sro),e(js,lro),e(go,iro),e(go,Qee),e(Qee,dro),e(go,cro),g(QC,go,null),e(Wo,fro),e(Wo,_h),g(WC,_h,null),e(_h,mro),e(_h,Wee),e(Wee,gro),b(c,DRe,u),b(c,Hi,u),e(Hi,uh),e(uh,Hee),g(HC,Hee,null),e(Hi,hro),e(Hi,Uee),e(Uee,pro),b(c,GRe,u),b(c,Ho,u),g(UC,Ho,null),e(Ho,_ro),e(Ho,JC),e(JC,uro),e(JC,qR),e(qR,bro),e(JC,vro),e(Ho,Fro),e(Ho,YC),e(YC,Tro),e(YC,Jee),e(Jee,Mro),e(YC,Ero),e(Ho,Cro),e(Ho,$e),g(KC,$e,null),e($e,wro),e($e,Yee),e(Yee,Aro),e($e,yro),e($e,Va),e(Va,Lro),e(Va,Kee),e(Kee,xro),e(Va,kro),e(Va,Zee),e(Zee,Sro),e(Va,Rro),e(Va,eoe),e(eoe,Bro),e(Va,Pro),e($e,$ro),e($e,ee),e(ee,bh),e(bh,ooe),e(ooe,Iro),e(bh,qro),e(bh,NR),e(NR,Nro),e(bh,jro),e(ee,Dro),e(ee,vh),e(vh,roe),e(roe,Gro),e(vh,Oro),e(vh,jR),e(jR,Vro),e(vh,Xro),e(ee,zro),e(ee,Fh),e(Fh,toe),e(toe,Qro),e(Fh,Wro),e(Fh,DR),e(DR,Hro),e(Fh,Uro),e(ee,Jro),e(ee,Th),e(Th,aoe),e(aoe,Yro),e(Th,Kro),e(Th,GR),e(GR,Zro),e(Th,eto),e(ee,oto),e(ee,Mh),e(Mh,noe),e(noe,rto),e(Mh,tto),e(Mh,OR),e(OR,ato),e(Mh,nto),e(ee,sto),e(ee,Eh),e(Eh,soe),e(soe,lto),e(Eh,ito),e(Eh,VR),e(VR,dto),e(Eh,cto),e(ee,fto),e(ee,Ch),e(Ch,loe),e(loe,mto),e(Ch,gto),e(Ch,XR),e(XR,hto),e(Ch,pto),e(ee,_to),e(ee,wh),e(wh,ioe),e(ioe,uto),e(wh,bto),e(wh,zR),e(zR,vto),e(wh,Fto),e(ee,Tto),e(ee,Ah),e(Ah,doe),e(doe,Mto),e(Ah,Eto),e(Ah,QR),e(QR,Cto),e(Ah,wto),e(ee,Ato),e(ee,yh),e(yh,coe),e(coe,yto),e(yh,Lto),e(yh,WR),e(WR,xto),e(yh,kto),e(ee,Sto),e(ee,Lh),e(Lh,foe),e(foe,Rto),e(Lh,Bto),e(Lh,HR),e(HR,Pto),e(Lh,$to),e(ee,Ito),e(ee,xh),e(xh,moe),e(moe,qto),e(xh,Nto),e(xh,UR),e(UR,jto),e(xh,Dto),e(ee,Gto),e(ee,kh),e(kh,goe),e(goe,Oto),e(kh,Vto),e(kh,JR),e(JR,Xto),e(kh,zto),e(ee,Qto),e(ee,Sh),e(Sh,hoe),e(hoe,Wto),e(Sh,Hto),e(Sh,YR),e(YR,Uto),e(Sh,Jto),e(ee,Yto),e(ee,Rh),e(Rh,poe),e(poe,Kto),e(Rh,Zto),e(Rh,KR),e(KR,eao),e(Rh,oao),e(ee,rao),e(ee,Bh),e(Bh,_oe),e(_oe,tao),e(Bh,aao),e(Bh,ZR),e(ZR,nao),e(Bh,sao),e(ee,lao),e(ee,Ph),e(Ph,uoe),e(uoe,iao),e(Ph,dao),e(Ph,eB),e(eB,cao),e(Ph,fao),e(ee,mao),e(ee,$h),e($h,boe),e(boe,gao),e($h,hao),e($h,oB),e(oB,pao),e($h,_ao),e(ee,uao),e(ee,Ih),e(Ih,voe),e(voe,bao),e(Ih,vao),e(Ih,rB),e(rB,Fao),e(Ih,Tao),e($e,Mao),g(qh,$e,null),e($e,Eao),e($e,Foe),e(Foe,Cao),e($e,wao),g(ZC,$e,null),e(Ho,Aao),e(Ho,Nh),g(e5,Nh,null),e(Nh,yao),e(Nh,Toe),e(Toe,Lao),b(c,ORe,u),b(c,Ui,u),e(Ui,jh),e(jh,Moe),g(o5,Moe,null),e(Ui,xao),e(Ui,Eoe),e(Eoe,kao),b(c,VRe,u),b(c,Uo,u),g(r5,Uo,null),e(Uo,Sao),e(Uo,t5),e(t5,Rao),e(t5,tB),e(tB,Bao),e(t5,Pao),e(Uo,$ao),e(Uo,a5),e(a5,Iao),e(a5,Coe),e(Coe,qao),e(a5,Nao),e(Uo,jao),e(Uo,Ie),g(n5,Ie,null),e(Ie,Dao),e(Ie,woe),e(woe,Gao),e(Ie,Oao),e(Ie,Ji),e(Ji,Vao),e(Ji,Aoe),e(Aoe,Xao),e(Ji,zao),e(Ji,yoe),e(yoe,Qao),e(Ji,Wao),e(Ie,Hao),e(Ie,ke),e(ke,Dh),e(Dh,Loe),e(Loe,Uao),e(Dh,Jao),e(Dh,aB),e(aB,Yao),e(Dh,Kao),e(ke,Zao),e(ke,Gh),e(Gh,xoe),e(xoe,eno),e(Gh,ono),e(Gh,nB),e(nB,rno),e(Gh,tno),e(ke,ano),e(ke,Oh),e(Oh,koe),e(koe,nno),e(Oh,sno),e(Oh,sB),e(sB,lno),e(Oh,ino),e(ke,dno),e(ke,Vh),e(Vh,Soe),e(Soe,cno),e(Vh,fno),e(Vh,lB),e(lB,mno),e(Vh,gno),e(ke,hno),e(ke,Xh),e(Xh,Roe),e(Roe,pno),e(Xh,_no),e(Xh,iB),e(iB,uno),e(Xh,bno),e(ke,vno),e(ke,zh),e(zh,Boe),e(Boe,Fno),e(zh,Tno),e(zh,dB),e(dB,Mno),e(zh,Eno),e(ke,Cno),e(ke,Qh),e(Qh,Poe),e(Poe,wno),e(Qh,Ano),e(Qh,cB),e(cB,yno),e(Qh,Lno),e(ke,xno),e(ke,Wh),e(Wh,$oe),e($oe,kno),e(Wh,Sno),e(Wh,fB),e(fB,Rno),e(Wh,Bno),e(Ie,Pno),g(Hh,Ie,null),e(Ie,$no),e(Ie,Ioe),e(Ioe,Ino),e(Ie,qno),g(s5,Ie,null),e(Uo,Nno),e(Uo,Uh),g(l5,Uh,null),e(Uh,jno),e(Uh,qoe),e(qoe,Dno),b(c,XRe,u),b(c,Yi,u),e(Yi,Jh),e(Jh,Noe),g(i5,Noe,null),e(Yi,Gno),e(Yi,joe),e(joe,Ono),b(c,zRe,u),b(c,Jo,u),g(d5,Jo,null),e(Jo,Vno),e(Jo,Ki),e(Ki,Xno),e(Ki,mB),e(mB,zno),e(Ki,Qno),e(Ki,gB),e(gB,Wno),e(Ki,Hno),e(Jo,Uno),e(Jo,c5),e(c5,Jno),e(c5,Doe),e(Doe,Yno),e(c5,Kno),e(Jo,Zno),e(Jo,Xr),g(f5,Xr,null),e(Xr,eso),e(Xr,Goe),e(Goe,oso),e(Xr,rso),e(Xr,Zi),e(Zi,tso),e(Zi,Ooe),e(Ooe,aso),e(Zi,nso),e(Zi,hB),e(hB,sso),e(Zi,lso),e(Xr,iso),e(Xr,Voe),e(Voe,dso),e(Xr,cso),g(m5,Xr,null),e(Jo,fso),e(Jo,qe),g(g5,qe,null),e(qe,mso),e(qe,Xoe),e(Xoe,gso),e(qe,hso),e(qe,Xa),e(Xa,pso),e(Xa,zoe),e(zoe,_so),e(Xa,uso),e(Xa,Qoe),e(Qoe,bso),e(Xa,vso),e(Xa,Woe),e(Woe,Fso),e(Xa,Tso),e(qe,Mso),e(qe,T),e(T,Yh),e(Yh,Hoe),e(Hoe,Eso),e(Yh,Cso),e(Yh,pB),e(pB,wso),e(Yh,Aso),e(T,yso),e(T,Kh),e(Kh,Uoe),e(Uoe,Lso),e(Kh,xso),e(Kh,_B),e(_B,kso),e(Kh,Sso),e(T,Rso),e(T,Zh),e(Zh,Joe),e(Joe,Bso),e(Zh,Pso),e(Zh,uB),e(uB,$so),e(Zh,Iso),e(T,qso),e(T,ep),e(ep,Yoe),e(Yoe,Nso),e(ep,jso),e(ep,bB),e(bB,Dso),e(ep,Gso),e(T,Oso),e(T,op),e(op,Koe),e(Koe,Vso),e(op,Xso),e(op,vB),e(vB,zso),e(op,Qso),e(T,Wso),e(T,rp),e(rp,Zoe),e(Zoe,Hso),e(rp,Uso),e(rp,FB),e(FB,Jso),e(rp,Yso),e(T,Kso),e(T,tp),e(tp,ere),e(ere,Zso),e(tp,elo),e(tp,TB),e(TB,olo),e(tp,rlo),e(T,tlo),e(T,ap),e(ap,ore),e(ore,alo),e(ap,nlo),e(ap,MB),e(MB,slo),e(ap,llo),e(T,ilo),e(T,np),e(np,rre),e(rre,dlo),e(np,clo),e(np,EB),e(EB,flo),e(np,mlo),e(T,glo),e(T,sp),e(sp,tre),e(tre,hlo),e(sp,plo),e(sp,CB),e(CB,_lo),e(sp,ulo),e(T,blo),e(T,lp),e(lp,are),e(are,vlo),e(lp,Flo),e(lp,wB),e(wB,Tlo),e(lp,Mlo),e(T,Elo),e(T,ip),e(ip,nre),e(nre,Clo),e(ip,wlo),e(ip,AB),e(AB,Alo),e(ip,ylo),e(T,Llo),e(T,dp),e(dp,sre),e(sre,xlo),e(dp,klo),e(dp,yB),e(yB,Slo),e(dp,Rlo),e(T,Blo),e(T,cp),e(cp,lre),e(lre,Plo),e(cp,$lo),e(cp,LB),e(LB,Ilo),e(cp,qlo),e(T,Nlo),e(T,fp),e(fp,ire),e(ire,jlo),e(fp,Dlo),e(fp,xB),e(xB,Glo),e(fp,Olo),e(T,Vlo),e(T,mp),e(mp,dre),e(dre,Xlo),e(mp,zlo),e(mp,kB),e(kB,Qlo),e(mp,Wlo),e(T,Hlo),e(T,gp),e(gp,cre),e(cre,Ulo),e(gp,Jlo),e(gp,SB),e(SB,Ylo),e(gp,Klo),e(T,Zlo),e(T,hp),e(hp,fre),e(fre,eio),e(hp,oio),e(hp,RB),e(RB,rio),e(hp,tio),e(T,aio),e(T,pp),e(pp,mre),e(mre,nio),e(pp,sio),e(pp,BB),e(BB,lio),e(pp,iio),e(T,dio),e(T,_p),e(_p,gre),e(gre,cio),e(_p,fio),e(_p,PB),e(PB,mio),e(_p,gio),e(T,hio),e(T,up),e(up,hre),e(hre,pio),e(up,_io),e(up,$B),e($B,uio),e(up,bio),e(T,vio),e(T,bp),e(bp,pre),e(pre,Fio),e(bp,Tio),e(bp,IB),e(IB,Mio),e(bp,Eio),e(T,Cio),e(T,vp),e(vp,_re),e(_re,wio),e(vp,Aio),e(vp,qB),e(qB,yio),e(vp,Lio),e(T,xio),e(T,Fp),e(Fp,ure),e(ure,kio),e(Fp,Sio),e(Fp,NB),e(NB,Rio),e(Fp,Bio),e(T,Pio),e(T,Tp),e(Tp,bre),e(bre,$io),e(Tp,Iio),e(Tp,jB),e(jB,qio),e(Tp,Nio),e(T,jio),e(T,Mp),e(Mp,vre),e(vre,Dio),e(Mp,Gio),e(Mp,DB),e(DB,Oio),e(Mp,Vio),e(T,Xio),e(T,Ep),e(Ep,Fre),e(Fre,zio),e(Ep,Qio),e(Ep,GB),e(GB,Wio),e(Ep,Hio),e(T,Uio),e(T,Cp),e(Cp,Tre),e(Tre,Jio),e(Cp,Yio),e(Cp,OB),e(OB,Kio),e(Cp,Zio),e(T,edo),e(T,wp),e(wp,Mre),e(Mre,odo),e(wp,rdo),e(wp,VB),e(VB,tdo),e(wp,ado),e(T,ndo),e(T,Ap),e(Ap,Ere),e(Ere,sdo),e(Ap,ldo),e(Ap,XB),e(XB,ido),e(Ap,ddo),e(T,cdo),e(T,Ds),e(Ds,Cre),e(Cre,fdo),e(Ds,mdo),e(Ds,zB),e(zB,gdo),e(Ds,hdo),e(Ds,QB),e(QB,pdo),e(Ds,_do),e(T,udo),e(T,yp),e(yp,wre),e(wre,bdo),e(yp,vdo),e(yp,WB),e(WB,Fdo),e(yp,Tdo),e(T,Mdo),e(T,Lp),e(Lp,Are),e(Are,Edo),e(Lp,Cdo),e(Lp,HB),e(HB,wdo),e(Lp,Ado),e(T,ydo),e(T,xp),e(xp,yre),e(yre,Ldo),e(xp,xdo),e(xp,UB),e(UB,kdo),e(xp,Sdo),e(T,Rdo),e(T,kp),e(kp,Lre),e(Lre,Bdo),e(kp,Pdo),e(kp,JB),e(JB,$do),e(kp,Ido),e(T,qdo),e(T,Sp),e(Sp,xre),e(xre,Ndo),e(Sp,jdo),e(Sp,YB),e(YB,Ddo),e(Sp,Gdo),e(T,Odo),e(T,Rp),e(Rp,kre),e(kre,Vdo),e(Rp,Xdo),e(Rp,KB),e(KB,zdo),e(Rp,Qdo),e(T,Wdo),e(T,Bp),e(Bp,Sre),e(Sre,Hdo),e(Bp,Udo),e(Bp,ZB),e(ZB,Jdo),e(Bp,Ydo),e(T,Kdo),e(T,Pp),e(Pp,Rre),e(Rre,Zdo),e(Pp,eco),e(Pp,eP),e(eP,oco),e(Pp,rco),e(T,tco),e(T,$p),e($p,Bre),e(Bre,aco),e($p,nco),e($p,oP),e(oP,sco),e($p,lco),e(T,ico),e(T,Ip),e(Ip,Pre),e(Pre,dco),e(Ip,cco),e(Ip,rP),e(rP,fco),e(Ip,mco),e(T,gco),e(T,qp),e(qp,$re),e($re,hco),e(qp,pco),e(qp,tP),e(tP,_co),e(qp,uco),e(T,bco),e(T,Np),e(Np,Ire),e(Ire,vco),e(Np,Fco),e(Np,aP),e(aP,Tco),e(Np,Mco),e(T,Eco),e(T,jp),e(jp,qre),e(qre,Cco),e(jp,wco),e(jp,nP),e(nP,Aco),e(jp,yco),e(T,Lco),e(T,Dp),e(Dp,Nre),e(Nre,xco),e(Dp,kco),e(Dp,sP),e(sP,Sco),e(Dp,Rco),e(T,Bco),e(T,Gp),e(Gp,jre),e(jre,Pco),e(Gp,$co),e(Gp,lP),e(lP,Ico),e(Gp,qco),e(T,Nco),e(T,Op),e(Op,Dre),e(Dre,jco),e(Op,Dco),e(Op,iP),e(iP,Gco),e(Op,Oco),e(T,Vco),e(T,Vp),e(Vp,Gre),e(Gre,Xco),e(Vp,zco),e(Vp,dP),e(dP,Qco),e(Vp,Wco),e(T,Hco),e(T,Xp),e(Xp,Ore),e(Ore,Uco),e(Xp,Jco),e(Xp,cP),e(cP,Yco),e(Xp,Kco),e(T,Zco),e(T,zp),e(zp,Vre),e(Vre,efo),e(zp,ofo),e(zp,fP),e(fP,rfo),e(zp,tfo),e(T,afo),e(T,Qp),e(Qp,Xre),e(Xre,nfo),e(Qp,sfo),e(Qp,mP),e(mP,lfo),e(Qp,ifo),e(T,dfo),e(T,Wp),e(Wp,zre),e(zre,cfo),e(Wp,ffo),e(Wp,gP),e(gP,mfo),e(Wp,gfo),e(T,hfo),e(T,Hp),e(Hp,Qre),e(Qre,pfo),e(Hp,_fo),e(Hp,hP),e(hP,ufo),e(Hp,bfo),e(T,vfo),e(T,Up),e(Up,Wre),e(Wre,Ffo),e(Up,Tfo),e(Up,pP),e(pP,Mfo),e(Up,Efo),e(T,Cfo),e(T,Jp),e(Jp,Hre),e(Hre,wfo),e(Jp,Afo),e(Jp,_P),e(_P,yfo),e(Jp,Lfo),e(T,xfo),e(T,Yp),e(Yp,Ure),e(Ure,kfo),e(Yp,Sfo),e(Yp,uP),e(uP,Rfo),e(Yp,Bfo),e(T,Pfo),e(T,Kp),e(Kp,Jre),e(Jre,$fo),e(Kp,Ifo),e(Kp,bP),e(bP,qfo),e(Kp,Nfo),e(T,jfo),e(T,Zp),e(Zp,Yre),e(Yre,Dfo),e(Zp,Gfo),e(Zp,vP),e(vP,Ofo),e(Zp,Vfo),e(T,Xfo),e(T,e_),e(e_,Kre),e(Kre,zfo),e(e_,Qfo),e(e_,FP),e(FP,Wfo),e(e_,Hfo),e(T,Ufo),e(T,o_),e(o_,Zre),e(Zre,Jfo),e(o_,Yfo),e(o_,TP),e(TP,Kfo),e(o_,Zfo),e(T,emo),e(T,r_),e(r_,ete),e(ete,omo),e(r_,rmo),e(r_,MP),e(MP,tmo),e(r_,amo),e(T,nmo),e(T,t_),e(t_,ote),e(ote,smo),e(t_,lmo),e(t_,EP),e(EP,imo),e(t_,dmo),e(T,cmo),e(T,a_),e(a_,rte),e(rte,fmo),e(a_,mmo),e(a_,CP),e(CP,gmo),e(a_,hmo),e(T,pmo),e(T,n_),e(n_,tte),e(tte,_mo),e(n_,umo),e(n_,wP),e(wP,bmo),e(n_,vmo),e(T,Fmo),e(T,s_),e(s_,ate),e(ate,Tmo),e(s_,Mmo),e(s_,AP),e(AP,Emo),e(s_,Cmo),e(T,wmo),e(T,l_),e(l_,nte),e(nte,Amo),e(l_,ymo),e(l_,yP),e(yP,Lmo),e(l_,xmo),e(T,kmo),e(T,i_),e(i_,ste),e(ste,Smo),e(i_,Rmo),e(i_,LP),e(LP,Bmo),e(i_,Pmo),e(T,$mo),e(T,d_),e(d_,lte),e(lte,Imo),e(d_,qmo),e(d_,xP),e(xP,Nmo),e(d_,jmo),e(T,Dmo),e(T,c_),e(c_,ite),e(ite,Gmo),e(c_,Omo),e(c_,kP),e(kP,Vmo),e(c_,Xmo),e(T,zmo),e(T,f_),e(f_,dte),e(dte,Qmo),e(f_,Wmo),e(f_,SP),e(SP,Hmo),e(f_,Umo),e(T,Jmo),e(T,m_),e(m_,cte),e(cte,Ymo),e(m_,Kmo),e(m_,RP),e(RP,Zmo),e(m_,ego),e(T,ogo),e(T,g_),e(g_,fte),e(fte,rgo),e(g_,tgo),e(g_,BP),e(BP,ago),e(g_,ngo),e(T,sgo),e(T,h_),e(h_,mte),e(mte,lgo),e(h_,igo),e(h_,PP),e(PP,dgo),e(h_,cgo),e(T,fgo),e(T,p_),e(p_,gte),e(gte,mgo),e(p_,ggo),e(p_,$P),e($P,hgo),e(p_,pgo),e(T,_go),e(T,__),e(__,hte),e(hte,ugo),e(__,bgo),e(__,IP),e(IP,vgo),e(__,Fgo),e(T,Tgo),e(T,u_),e(u_,pte),e(pte,Mgo),e(u_,Ego),e(u_,qP),e(qP,Cgo),e(u_,wgo),e(T,Ago),e(T,b_),e(b_,_te),e(_te,ygo),e(b_,Lgo),e(b_,NP),e(NP,xgo),e(b_,kgo),e(T,Sgo),e(T,v_),e(v_,ute),e(ute,Rgo),e(v_,Bgo),e(v_,jP),e(jP,Pgo),e(v_,$go),e(T,Igo),e(T,F_),e(F_,bte),e(bte,qgo),e(F_,Ngo),e(F_,DP),e(DP,jgo),e(F_,Dgo),e(T,Ggo),e(T,T_),e(T_,vte),e(vte,Ogo),e(T_,Vgo),e(T_,GP),e(GP,Xgo),e(T_,zgo),e(T,Qgo),e(T,M_),e(M_,Fte),e(Fte,Wgo),e(M_,Hgo),e(M_,OP),e(OP,Ugo),e(M_,Jgo),e(T,Ygo),e(T,E_),e(E_,Tte),e(Tte,Kgo),e(E_,Zgo),e(E_,VP),e(VP,eho),e(E_,oho),e(T,rho),e(T,C_),e(C_,Mte),e(Mte,tho),e(C_,aho),e(C_,XP),e(XP,nho),e(C_,sho),e(T,lho),e(T,w_),e(w_,Ete),e(Ete,iho),e(w_,dho),e(w_,zP),e(zP,cho),e(w_,fho),e(T,mho),e(T,A_),e(A_,Cte),e(Cte,gho),e(A_,hho),e(A_,QP),e(QP,pho),e(A_,_ho),e(T,uho),e(T,y_),e(y_,wte),e(wte,bho),e(y_,vho),e(y_,WP),e(WP,Fho),e(y_,Tho),e(T,Mho),e(T,L_),e(L_,Ate),e(Ate,Eho),e(L_,Cho),e(L_,HP),e(HP,who),e(L_,Aho),e(T,yho),e(T,x_),e(x_,yte),e(yte,Lho),e(x_,xho),e(x_,UP),e(UP,kho),e(x_,Sho),e(T,Rho),e(T,k_),e(k_,Lte),e(Lte,Bho),e(k_,Pho),e(k_,JP),e(JP,$ho),e(k_,Iho),e(T,qho),e(T,S_),e(S_,xte),e(xte,Nho),e(S_,jho),e(S_,YP),e(YP,Dho),e(S_,Gho),e(T,Oho),e(T,R_),e(R_,kte),e(kte,Vho),e(R_,Xho),e(R_,KP),e(KP,zho),e(R_,Qho),e(T,Who),e(T,B_),e(B_,Ste),e(Ste,Hho),e(B_,Uho),e(B_,ZP),e(ZP,Jho),e(B_,Yho),e(T,Kho),e(T,P_),e(P_,Rte),e(Rte,Zho),e(P_,epo),e(P_,e$),e(e$,opo),e(P_,rpo),e(T,tpo),e(T,$_),e($_,Bte),e(Bte,apo),e($_,npo),e($_,o$),e(o$,spo),e($_,lpo),e(qe,ipo),e(qe,I_),e(I_,dpo),e(I_,Pte),e(Pte,cpo),e(I_,fpo),e(I_,$te),e($te,mpo),e(qe,gpo),e(qe,Ite),e(Ite,hpo),e(qe,ppo),g(h5,qe,null),b(c,QRe,u),b(c,ed,u),e(ed,q_),e(q_,qte),g(p5,qte,null),e(ed,_po),e(ed,Nte),e(Nte,upo),b(c,WRe,u),b(c,Yo,u),g(_5,Yo,null),e(Yo,bpo),e(Yo,od),e(od,vpo),e(od,r$),e(r$,Fpo),e(od,Tpo),e(od,t$),e(t$,Mpo),e(od,Epo),e(Yo,Cpo),e(Yo,u5),e(u5,wpo),e(u5,jte),e(jte,Apo),e(u5,ypo),e(Yo,Lpo),e(Yo,zr),g(b5,zr,null),e(zr,xpo),e(zr,Dte),e(Dte,kpo),e(zr,Spo),e(zr,rd),e(rd,Rpo),e(rd,Gte),e(Gte,Bpo),e(rd,Ppo),e(rd,a$),e(a$,$po),e(rd,Ipo),e(zr,qpo),e(zr,Ote),e(Ote,Npo),e(zr,jpo),g(v5,zr,null),e(Yo,Dpo),e(Yo,Ne),g(F5,Ne,null),e(Ne,Gpo),e(Ne,Vte),e(Vte,Opo),e(Ne,Vpo),e(Ne,za),e(za,Xpo),e(za,Xte),e(Xte,zpo),e(za,Qpo),e(za,zte),e(zte,Wpo),e(za,Hpo),e(za,Qte),e(Qte,Upo),e(za,Jpo),e(Ne,Ypo),e(Ne,S),e(S,N_),e(N_,Wte),e(Wte,Kpo),e(N_,Zpo),e(N_,n$),e(n$,e_o),e(N_,o_o),e(S,r_o),e(S,j_),e(j_,Hte),e(Hte,t_o),e(j_,a_o),e(j_,s$),e(s$,n_o),e(j_,s_o),e(S,l_o),e(S,D_),e(D_,Ute),e(Ute,i_o),e(D_,d_o),e(D_,l$),e(l$,c_o),e(D_,f_o),e(S,m_o),e(S,G_),e(G_,Jte),e(Jte,g_o),e(G_,h_o),e(G_,i$),e(i$,p_o),e(G_,__o),e(S,u_o),e(S,O_),e(O_,Yte),e(Yte,b_o),e(O_,v_o),e(O_,d$),e(d$,F_o),e(O_,T_o),e(S,M_o),e(S,V_),e(V_,Kte),e(Kte,E_o),e(V_,C_o),e(V_,c$),e(c$,w_o),e(V_,A_o),e(S,y_o),e(S,X_),e(X_,Zte),e(Zte,L_o),e(X_,x_o),e(X_,f$),e(f$,k_o),e(X_,S_o),e(S,R_o),e(S,z_),e(z_,eae),e(eae,B_o),e(z_,P_o),e(z_,m$),e(m$,$_o),e(z_,I_o),e(S,q_o),e(S,Q_),e(Q_,oae),e(oae,N_o),e(Q_,j_o),e(Q_,g$),e(g$,D_o),e(Q_,G_o),e(S,O_o),e(S,W_),e(W_,rae),e(rae,V_o),e(W_,X_o),e(W_,h$),e(h$,z_o),e(W_,Q_o),e(S,W_o),e(S,H_),e(H_,tae),e(tae,H_o),e(H_,U_o),e(H_,p$),e(p$,J_o),e(H_,Y_o),e(S,K_o),e(S,U_),e(U_,aae),e(aae,Z_o),e(U_,euo),e(U_,_$),e(_$,ouo),e(U_,ruo),e(S,tuo),e(S,J_),e(J_,nae),e(nae,auo),e(J_,nuo),e(J_,u$),e(u$,suo),e(J_,luo),e(S,iuo),e(S,Y_),e(Y_,sae),e(sae,duo),e(Y_,cuo),e(Y_,b$),e(b$,fuo),e(Y_,muo),e(S,guo),e(S,K_),e(K_,lae),e(lae,huo),e(K_,puo),e(K_,v$),e(v$,_uo),e(K_,uuo),e(S,buo),e(S,Z_),e(Z_,iae),e(iae,vuo),e(Z_,Fuo),e(Z_,F$),e(F$,Tuo),e(Z_,Muo),e(S,Euo),e(S,eu),e(eu,dae),e(dae,Cuo),e(eu,wuo),e(eu,T$),e(T$,Auo),e(eu,yuo),e(S,Luo),e(S,ou),e(ou,cae),e(cae,xuo),e(ou,kuo),e(ou,M$),e(M$,Suo),e(ou,Ruo),e(S,Buo),e(S,ru),e(ru,fae),e(fae,Puo),e(ru,$uo),e(ru,E$),e(E$,Iuo),e(ru,quo),e(S,Nuo),e(S,tu),e(tu,mae),e(mae,juo),e(tu,Duo),e(tu,C$),e(C$,Guo),e(tu,Ouo),e(S,Vuo),e(S,au),e(au,gae),e(gae,Xuo),e(au,zuo),e(au,w$),e(w$,Quo),e(au,Wuo),e(S,Huo),e(S,nu),e(nu,hae),e(hae,Uuo),e(nu,Juo),e(nu,A$),e(A$,Yuo),e(nu,Kuo),e(S,Zuo),e(S,su),e(su,pae),e(pae,e6o),e(su,o6o),e(su,y$),e(y$,r6o),e(su,t6o),e(S,a6o),e(S,lu),e(lu,_ae),e(_ae,n6o),e(lu,s6o),e(lu,L$),e(L$,l6o),e(lu,i6o),e(S,d6o),e(S,iu),e(iu,uae),e(uae,c6o),e(iu,f6o),e(iu,x$),e(x$,m6o),e(iu,g6o),e(S,h6o),e(S,du),e(du,bae),e(bae,p6o),e(du,_6o),e(du,k$),e(k$,u6o),e(du,b6o),e(S,v6o),e(S,cu),e(cu,vae),e(vae,F6o),e(cu,T6o),e(cu,S$),e(S$,M6o),e(cu,E6o),e(S,C6o),e(S,fu),e(fu,Fae),e(Fae,w6o),e(fu,A6o),e(fu,R$),e(R$,y6o),e(fu,L6o),e(S,x6o),e(S,mu),e(mu,Tae),e(Tae,k6o),e(mu,S6o),e(mu,B$),e(B$,R6o),e(mu,B6o),e(S,P6o),e(S,gu),e(gu,Mae),e(Mae,$6o),e(gu,I6o),e(gu,P$),e(P$,q6o),e(gu,N6o),e(S,j6o),e(S,hu),e(hu,Eae),e(Eae,D6o),e(hu,G6o),e(hu,$$),e($$,O6o),e(hu,V6o),e(S,X6o),e(S,pu),e(pu,Cae),e(Cae,z6o),e(pu,Q6o),e(pu,I$),e(I$,W6o),e(pu,H6o),e(S,U6o),e(S,_u),e(_u,wae),e(wae,J6o),e(_u,Y6o),e(_u,q$),e(q$,K6o),e(_u,Z6o),e(S,e1o),e(S,uu),e(uu,Aae),e(Aae,o1o),e(uu,r1o),e(uu,N$),e(N$,t1o),e(uu,a1o),e(S,n1o),e(S,bu),e(bu,yae),e(yae,s1o),e(bu,l1o),e(bu,j$),e(j$,i1o),e(bu,d1o),e(S,c1o),e(S,vu),e(vu,Lae),e(Lae,f1o),e(vu,m1o),e(vu,D$),e(D$,g1o),e(vu,h1o),e(S,p1o),e(S,Fu),e(Fu,xae),e(xae,_1o),e(Fu,u1o),e(Fu,G$),e(G$,b1o),e(Fu,v1o),e(S,F1o),e(S,Tu),e(Tu,kae),e(kae,T1o),e(Tu,M1o),e(Tu,O$),e(O$,E1o),e(Tu,C1o),e(S,w1o),e(S,Mu),e(Mu,Sae),e(Sae,A1o),e(Mu,y1o),e(Mu,V$),e(V$,L1o),e(Mu,x1o),e(Ne,k1o),e(Ne,Eu),e(Eu,S1o),e(Eu,Rae),e(Rae,R1o),e(Eu,B1o),e(Eu,Bae),e(Bae,P1o),e(Ne,$1o),e(Ne,Pae),e(Pae,I1o),e(Ne,q1o),g(T5,Ne,null),b(c,HRe,u),b(c,td,u),e(td,Cu),e(Cu,$ae),g(M5,$ae,null),e(td,N1o),e(td,Iae),e(Iae,j1o),b(c,URe,u),b(c,Ko,u),g(E5,Ko,null),e(Ko,D1o),e(Ko,ad),e(ad,G1o),e(ad,X$),e(X$,O1o),e(ad,V1o),e(ad,z$),e(z$,X1o),e(ad,z1o),e(Ko,Q1o),e(Ko,C5),e(C5,W1o),e(C5,qae),e(qae,H1o),e(C5,U1o),e(Ko,J1o),e(Ko,Qr),g(w5,Qr,null),e(Qr,Y1o),e(Qr,Nae),e(Nae,K1o),e(Qr,Z1o),e(Qr,nd),e(nd,ebo),e(nd,jae),e(jae,obo),e(nd,rbo),e(nd,Q$),e(Q$,tbo),e(nd,abo),e(Qr,nbo),e(Qr,Dae),e(Dae,sbo),e(Qr,lbo),g(A5,Qr,null),e(Ko,ibo),e(Ko,je),g(y5,je,null),e(je,dbo),e(je,Gae),e(Gae,cbo),e(je,fbo),e(je,Qa),e(Qa,mbo),e(Qa,Oae),e(Oae,gbo),e(Qa,hbo),e(Qa,Vae),e(Vae,pbo),e(Qa,_bo),e(Qa,Xae),e(Xae,ubo),e(Qa,bbo),e(je,vbo),e(je,$),e($,wu),e(wu,zae),e(zae,Fbo),e(wu,Tbo),e(wu,W$),e(W$,Mbo),e(wu,Ebo),e($,Cbo),e($,Au),e(Au,Qae),e(Qae,wbo),e(Au,Abo),e(Au,H$),e(H$,ybo),e(Au,Lbo),e($,xbo),e($,yu),e(yu,Wae),e(Wae,kbo),e(yu,Sbo),e(yu,U$),e(U$,Rbo),e(yu,Bbo),e($,Pbo),e($,Lu),e(Lu,Hae),e(Hae,$bo),e(Lu,Ibo),e(Lu,J$),e(J$,qbo),e(Lu,Nbo),e($,jbo),e($,xu),e(xu,Uae),e(Uae,Dbo),e(xu,Gbo),e(xu,Y$),e(Y$,Obo),e(xu,Vbo),e($,Xbo),e($,ku),e(ku,Jae),e(Jae,zbo),e(ku,Qbo),e(ku,K$),e(K$,Wbo),e(ku,Hbo),e($,Ubo),e($,Su),e(Su,Yae),e(Yae,Jbo),e(Su,Ybo),e(Su,Z$),e(Z$,Kbo),e(Su,Zbo),e($,e2o),e($,Ru),e(Ru,Kae),e(Kae,o2o),e(Ru,r2o),e(Ru,eI),e(eI,t2o),e(Ru,a2o),e($,n2o),e($,Bu),e(Bu,Zae),e(Zae,s2o),e(Bu,l2o),e(Bu,oI),e(oI,i2o),e(Bu,d2o),e($,c2o),e($,Pu),e(Pu,ene),e(ene,f2o),e(Pu,m2o),e(Pu,rI),e(rI,g2o),e(Pu,h2o),e($,p2o),e($,$u),e($u,one),e(one,_2o),e($u,u2o),e($u,tI),e(tI,b2o),e($u,v2o),e($,F2o),e($,Iu),e(Iu,rne),e(rne,T2o),e(Iu,M2o),e(Iu,aI),e(aI,E2o),e(Iu,C2o),e($,w2o),e($,qu),e(qu,tne),e(tne,A2o),e(qu,y2o),e(qu,nI),e(nI,L2o),e(qu,x2o),e($,k2o),e($,Nu),e(Nu,ane),e(ane,S2o),e(Nu,R2o),e(Nu,sI),e(sI,B2o),e(Nu,P2o),e($,$2o),e($,ju),e(ju,nne),e(nne,I2o),e(ju,q2o),e(ju,lI),e(lI,N2o),e(ju,j2o),e($,D2o),e($,Du),e(Du,sne),e(sne,G2o),e(Du,O2o),e(Du,iI),e(iI,V2o),e(Du,X2o),e($,z2o),e($,Gu),e(Gu,lne),e(lne,Q2o),e(Gu,W2o),e(Gu,dI),e(dI,H2o),e(Gu,U2o),e($,J2o),e($,Ou),e(Ou,ine),e(ine,Y2o),e(Ou,K2o),e(Ou,cI),e(cI,Z2o),e(Ou,evo),e($,ovo),e($,Vu),e(Vu,dne),e(dne,rvo),e(Vu,tvo),e(Vu,fI),e(fI,avo),e(Vu,nvo),e($,svo),e($,Xu),e(Xu,cne),e(cne,lvo),e(Xu,ivo),e(Xu,mI),e(mI,dvo),e(Xu,cvo),e($,fvo),e($,zu),e(zu,fne),e(fne,mvo),e(zu,gvo),e(zu,gI),e(gI,hvo),e(zu,pvo),e($,_vo),e($,Qu),e(Qu,mne),e(mne,uvo),e(Qu,bvo),e(Qu,hI),e(hI,vvo),e(Qu,Fvo),e($,Tvo),e($,Wu),e(Wu,gne),e(gne,Mvo),e(Wu,Evo),e(Wu,pI),e(pI,Cvo),e(Wu,wvo),e($,Avo),e($,Hu),e(Hu,hne),e(hne,yvo),e(Hu,Lvo),e(Hu,_I),e(_I,xvo),e(Hu,kvo),e($,Svo),e($,Uu),e(Uu,pne),e(pne,Rvo),e(Uu,Bvo),e(Uu,uI),e(uI,Pvo),e(Uu,$vo),e($,Ivo),e($,Ju),e(Ju,_ne),e(_ne,qvo),e(Ju,Nvo),e(Ju,bI),e(bI,jvo),e(Ju,Dvo),e($,Gvo),e($,Yu),e(Yu,une),e(une,Ovo),e(Yu,Vvo),e(Yu,vI),e(vI,Xvo),e(Yu,zvo),e($,Qvo),e($,Ku),e(Ku,bne),e(bne,Wvo),e(Ku,Hvo),e(Ku,FI),e(FI,Uvo),e(Ku,Jvo),e($,Yvo),e($,Zu),e(Zu,vne),e(vne,Kvo),e(Zu,Zvo),e(Zu,TI),e(TI,eFo),e(Zu,oFo),e($,rFo),e($,e6),e(e6,Fne),e(Fne,tFo),e(e6,aFo),e(e6,MI),e(MI,nFo),e(e6,sFo),e($,lFo),e($,o6),e(o6,Tne),e(Tne,iFo),e(o6,dFo),e(o6,EI),e(EI,cFo),e(o6,fFo),e($,mFo),e($,r6),e(r6,Mne),e(Mne,gFo),e(r6,hFo),e(r6,CI),e(CI,pFo),e(r6,_Fo),e($,uFo),e($,t6),e(t6,Ene),e(Ene,bFo),e(t6,vFo),e(t6,wI),e(wI,FFo),e(t6,TFo),e($,MFo),e($,a6),e(a6,Cne),e(Cne,EFo),e(a6,CFo),e(a6,AI),e(AI,wFo),e(a6,AFo),e($,yFo),e($,n6),e(n6,wne),e(wne,LFo),e(n6,xFo),e(n6,yI),e(yI,kFo),e(n6,SFo),e(je,RFo),e(je,s6),e(s6,BFo),e(s6,Ane),e(Ane,PFo),e(s6,$Fo),e(s6,yne),e(yne,IFo),e(je,qFo),e(je,Lne),e(Lne,NFo),e(je,jFo),g(L5,je,null),b(c,JRe,u),b(c,sd,u),e(sd,l6),e(l6,xne),g(x5,xne,null),e(sd,DFo),e(sd,kne),e(kne,GFo),b(c,YRe,u),b(c,Zo,u),g(k5,Zo,null),e(Zo,OFo),e(Zo,ld),e(ld,VFo),e(ld,LI),e(LI,XFo),e(ld,zFo),e(ld,xI),e(xI,QFo),e(ld,WFo),e(Zo,HFo),e(Zo,S5),e(S5,UFo),e(S5,Sne),e(Sne,JFo),e(S5,YFo),e(Zo,KFo),e(Zo,Wr),g(R5,Wr,null),e(Wr,ZFo),e(Wr,Rne),e(Rne,e0o),e(Wr,o0o),e(Wr,id),e(id,r0o),e(id,Bne),e(Bne,t0o),e(id,a0o),e(id,kI),e(kI,n0o),e(id,s0o),e(Wr,l0o),e(Wr,Pne),e(Pne,i0o),e(Wr,d0o),g(B5,Wr,null),e(Zo,c0o),e(Zo,De),g(P5,De,null),e(De,f0o),e(De,$ne),e($ne,m0o),e(De,g0o),e(De,Wa),e(Wa,h0o),e(Wa,Ine),e(Ine,p0o),e(Wa,_0o),e(Wa,qne),e(qne,u0o),e(Wa,b0o),e(Wa,Nne),e(Nne,v0o),e(Wa,F0o),e(De,T0o),e(De,I),e(I,i6),e(i6,jne),e(jne,M0o),e(i6,E0o),e(i6,SI),e(SI,C0o),e(i6,w0o),e(I,A0o),e(I,d6),e(d6,Dne),e(Dne,y0o),e(d6,L0o),e(d6,RI),e(RI,x0o),e(d6,k0o),e(I,S0o),e(I,c6),e(c6,Gne),e(Gne,R0o),e(c6,B0o),e(c6,BI),e(BI,P0o),e(c6,$0o),e(I,I0o),e(I,f6),e(f6,One),e(One,q0o),e(f6,N0o),e(f6,PI),e(PI,j0o),e(f6,D0o),e(I,G0o),e(I,m6),e(m6,Vne),e(Vne,O0o),e(m6,V0o),e(m6,$I),e($I,X0o),e(m6,z0o),e(I,Q0o),e(I,g6),e(g6,Xne),e(Xne,W0o),e(g6,H0o),e(g6,II),e(II,U0o),e(g6,J0o),e(I,Y0o),e(I,h6),e(h6,zne),e(zne,K0o),e(h6,Z0o),e(h6,qI),e(qI,eTo),e(h6,oTo),e(I,rTo),e(I,p6),e(p6,Qne),e(Qne,tTo),e(p6,aTo),e(p6,NI),e(NI,nTo),e(p6,sTo),e(I,lTo),e(I,_6),e(_6,Wne),e(Wne,iTo),e(_6,dTo),e(_6,jI),e(jI,cTo),e(_6,fTo),e(I,mTo),e(I,u6),e(u6,Hne),e(Hne,gTo),e(u6,hTo),e(u6,DI),e(DI,pTo),e(u6,_To),e(I,uTo),e(I,b6),e(b6,Une),e(Une,bTo),e(b6,vTo),e(b6,GI),e(GI,FTo),e(b6,TTo),e(I,MTo),e(I,v6),e(v6,Jne),e(Jne,ETo),e(v6,CTo),e(v6,OI),e(OI,wTo),e(v6,ATo),e(I,yTo),e(I,F6),e(F6,Yne),e(Yne,LTo),e(F6,xTo),e(F6,VI),e(VI,kTo),e(F6,STo),e(I,RTo),e(I,T6),e(T6,Kne),e(Kne,BTo),e(T6,PTo),e(T6,XI),e(XI,$To),e(T6,ITo),e(I,qTo),e(I,M6),e(M6,Zne),e(Zne,NTo),e(M6,jTo),e(M6,zI),e(zI,DTo),e(M6,GTo),e(I,OTo),e(I,E6),e(E6,ese),e(ese,VTo),e(E6,XTo),e(E6,QI),e(QI,zTo),e(E6,QTo),e(I,WTo),e(I,C6),e(C6,ose),e(ose,HTo),e(C6,UTo),e(C6,WI),e(WI,JTo),e(C6,YTo),e(I,KTo),e(I,w6),e(w6,rse),e(rse,ZTo),e(w6,e7o),e(w6,HI),e(HI,o7o),e(w6,r7o),e(I,t7o),e(I,A6),e(A6,tse),e(tse,a7o),e(A6,n7o),e(A6,UI),e(UI,s7o),e(A6,l7o),e(I,i7o),e(I,y6),e(y6,ase),e(ase,d7o),e(y6,c7o),e(y6,JI),e(JI,f7o),e(y6,m7o),e(I,g7o),e(I,L6),e(L6,nse),e(nse,h7o),e(L6,p7o),e(L6,YI),e(YI,_7o),e(L6,u7o),e(I,b7o),e(I,x6),e(x6,sse),e(sse,v7o),e(x6,F7o),e(x6,KI),e(KI,T7o),e(x6,M7o),e(I,E7o),e(I,k6),e(k6,lse),e(lse,C7o),e(k6,w7o),e(k6,ZI),e(ZI,A7o),e(k6,y7o),e(I,L7o),e(I,S6),e(S6,ise),e(ise,x7o),e(S6,k7o),e(S6,eq),e(eq,S7o),e(S6,R7o),e(I,B7o),e(I,R6),e(R6,dse),e(dse,P7o),e(R6,$7o),e(R6,oq),e(oq,I7o),e(R6,q7o),e(I,N7o),e(I,B6),e(B6,cse),e(cse,j7o),e(B6,D7o),e(B6,rq),e(rq,G7o),e(B6,O7o),e(I,V7o),e(I,P6),e(P6,fse),e(fse,X7o),e(P6,z7o),e(P6,tq),e(tq,Q7o),e(P6,W7o),e(I,H7o),e(I,$6),e($6,mse),e(mse,U7o),e($6,J7o),e($6,aq),e(aq,Y7o),e($6,K7o),e(I,Z7o),e(I,I6),e(I6,gse),e(gse,eMo),e(I6,oMo),e(I6,nq),e(nq,rMo),e(I6,tMo),e(I,aMo),e(I,q6),e(q6,hse),e(hse,nMo),e(q6,sMo),e(q6,sq),e(sq,lMo),e(q6,iMo),e(I,dMo),e(I,N6),e(N6,pse),e(pse,cMo),e(N6,fMo),e(N6,_se),e(_se,mMo),e(N6,gMo),e(I,hMo),e(I,j6),e(j6,use),e(use,pMo),e(j6,_Mo),e(j6,lq),e(lq,uMo),e(j6,bMo),e(I,vMo),e(I,D6),e(D6,bse),e(bse,FMo),e(D6,TMo),e(D6,iq),e(iq,MMo),e(D6,EMo),e(I,CMo),e(I,G6),e(G6,vse),e(vse,wMo),e(G6,AMo),e(G6,dq),e(dq,yMo),e(G6,LMo),e(I,xMo),e(I,O6),e(O6,Fse),e(Fse,kMo),e(O6,SMo),e(O6,cq),e(cq,RMo),e(O6,BMo),e(De,PMo),e(De,V6),e(V6,$Mo),e(V6,Tse),e(Tse,IMo),e(V6,qMo),e(V6,Mse),e(Mse,NMo),e(De,jMo),e(De,Ese),e(Ese,DMo),e(De,GMo),g($5,De,null),b(c,KRe,u),b(c,dd,u),e(dd,X6),e(X6,Cse),g(I5,Cse,null),e(dd,OMo),e(dd,wse),e(wse,VMo),b(c,ZRe,u),b(c,er,u),g(q5,er,null),e(er,XMo),e(er,cd),e(cd,zMo),e(cd,fq),e(fq,QMo),e(cd,WMo),e(cd,mq),e(mq,HMo),e(cd,UMo),e(er,JMo),e(er,N5),e(N5,YMo),e(N5,Ase),e(Ase,KMo),e(N5,ZMo),e(er,e4o),e(er,Hr),g(j5,Hr,null),e(Hr,o4o),e(Hr,yse),e(yse,r4o),e(Hr,t4o),e(Hr,fd),e(fd,a4o),e(fd,Lse),e(Lse,n4o),e(fd,s4o),e(fd,gq),e(gq,l4o),e(fd,i4o),e(Hr,d4o),e(Hr,xse),e(xse,c4o),e(Hr,f4o),g(D5,Hr,null),e(er,m4o),e(er,Ge),g(G5,Ge,null),e(Ge,g4o),e(Ge,kse),e(kse,h4o),e(Ge,p4o),e(Ge,Ha),e(Ha,_4o),e(Ha,Sse),e(Sse,u4o),e(Ha,b4o),e(Ha,Rse),e(Rse,v4o),e(Ha,F4o),e(Ha,Bse),e(Bse,T4o),e(Ha,M4o),e(Ge,E4o),e(Ge,ne),e(ne,z6),e(z6,Pse),e(Pse,C4o),e(z6,w4o),e(z6,hq),e(hq,A4o),e(z6,y4o),e(ne,L4o),e(ne,Q6),e(Q6,$se),e($se,x4o),e(Q6,k4o),e(Q6,pq),e(pq,S4o),e(Q6,R4o),e(ne,B4o),e(ne,W6),e(W6,Ise),e(Ise,P4o),e(W6,$4o),e(W6,_q),e(_q,I4o),e(W6,q4o),e(ne,N4o),e(ne,H6),e(H6,qse),e(qse,j4o),e(H6,D4o),e(H6,uq),e(uq,G4o),e(H6,O4o),e(ne,V4o),e(ne,U6),e(U6,Nse),e(Nse,X4o),e(U6,z4o),e(U6,bq),e(bq,Q4o),e(U6,W4o),e(ne,H4o),e(ne,J6),e(J6,jse),e(jse,U4o),e(J6,J4o),e(J6,vq),e(vq,Y4o),e(J6,K4o),e(ne,Z4o),e(ne,Y6),e(Y6,Dse),e(Dse,eEo),e(Y6,oEo),e(Y6,Fq),e(Fq,rEo),e(Y6,tEo),e(ne,aEo),e(ne,K6),e(K6,Gse),e(Gse,nEo),e(K6,sEo),e(K6,Tq),e(Tq,lEo),e(K6,iEo),e(ne,dEo),e(ne,Z6),e(Z6,Ose),e(Ose,cEo),e(Z6,fEo),e(Z6,Mq),e(Mq,mEo),e(Z6,gEo),e(ne,hEo),e(ne,e1),e(e1,Vse),e(Vse,pEo),e(e1,_Eo),e(e1,Eq),e(Eq,uEo),e(e1,bEo),e(ne,vEo),e(ne,o1),e(o1,Xse),e(Xse,FEo),e(o1,TEo),e(o1,Cq),e(Cq,MEo),e(o1,EEo),e(ne,CEo),e(ne,r1),e(r1,zse),e(zse,wEo),e(r1,AEo),e(r1,wq),e(wq,yEo),e(r1,LEo),e(ne,xEo),e(ne,t1),e(t1,Qse),e(Qse,kEo),e(t1,SEo),e(t1,Aq),e(Aq,REo),e(t1,BEo),e(ne,PEo),e(ne,a1),e(a1,Wse),e(Wse,$Eo),e(a1,IEo),e(a1,yq),e(yq,qEo),e(a1,NEo),e(ne,jEo),e(ne,n1),e(n1,Hse),e(Hse,DEo),e(n1,GEo),e(n1,Lq),e(Lq,OEo),e(n1,VEo),e(ne,XEo),e(ne,s1),e(s1,Use),e(Use,zEo),e(s1,QEo),e(s1,xq),e(xq,WEo),e(s1,HEo),e(ne,UEo),e(ne,l1),e(l1,Jse),e(Jse,JEo),e(l1,YEo),e(l1,kq),e(kq,KEo),e(l1,ZEo),e(Ge,eCo),e(Ge,i1),e(i1,oCo),e(i1,Yse),e(Yse,rCo),e(i1,tCo),e(i1,Kse),e(Kse,aCo),e(Ge,nCo),e(Ge,Zse),e(Zse,sCo),e(Ge,lCo),g(O5,Ge,null),b(c,eBe,u),b(c,md,u),e(md,d1),e(d1,ele),g(V5,ele,null),e(md,iCo),e(md,ole),e(ole,dCo),b(c,oBe,u),b(c,or,u),g(X5,or,null),e(or,cCo),e(or,gd),e(gd,fCo),e(gd,Sq),e(Sq,mCo),e(gd,gCo),e(gd,Rq),e(Rq,hCo),e(gd,pCo),e(or,_Co),e(or,z5),e(z5,uCo),e(z5,rle),e(rle,bCo),e(z5,vCo),e(or,FCo),e(or,Ur),g(Q5,Ur,null),e(Ur,TCo),e(Ur,tle),e(tle,MCo),e(Ur,ECo),e(Ur,hd),e(hd,CCo),e(hd,ale),e(ale,wCo),e(hd,ACo),e(hd,Bq),e(Bq,yCo),e(hd,LCo),e(Ur,xCo),e(Ur,nle),e(nle,kCo),e(Ur,SCo),g(W5,Ur,null),e(or,RCo),e(or,Oe),g(H5,Oe,null),e(Oe,BCo),e(Oe,sle),e(sle,PCo),e(Oe,$Co),e(Oe,Ua),e(Ua,ICo),e(Ua,lle),e(lle,qCo),e(Ua,NCo),e(Ua,ile),e(ile,jCo),e(Ua,DCo),e(Ua,dle),e(dle,GCo),e(Ua,OCo),e(Oe,VCo),e(Oe,y),e(y,c1),e(c1,cle),e(cle,XCo),e(c1,zCo),e(c1,Pq),e(Pq,QCo),e(c1,WCo),e(y,HCo),e(y,f1),e(f1,fle),e(fle,UCo),e(f1,JCo),e(f1,$q),e($q,YCo),e(f1,KCo),e(y,ZCo),e(y,m1),e(m1,mle),e(mle,e5o),e(m1,o5o),e(m1,Iq),e(Iq,r5o),e(m1,t5o),e(y,a5o),e(y,g1),e(g1,gle),e(gle,n5o),e(g1,s5o),e(g1,qq),e(qq,l5o),e(g1,i5o),e(y,d5o),e(y,h1),e(h1,hle),e(hle,c5o),e(h1,f5o),e(h1,Nq),e(Nq,m5o),e(h1,g5o),e(y,h5o),e(y,p1),e(p1,ple),e(ple,p5o),e(p1,_5o),e(p1,jq),e(jq,u5o),e(p1,b5o),e(y,v5o),e(y,_1),e(_1,_le),e(_le,F5o),e(_1,T5o),e(_1,Dq),e(Dq,M5o),e(_1,E5o),e(y,C5o),e(y,u1),e(u1,ule),e(ule,w5o),e(u1,A5o),e(u1,Gq),e(Gq,y5o),e(u1,L5o),e(y,x5o),e(y,b1),e(b1,ble),e(ble,k5o),e(b1,S5o),e(b1,Oq),e(Oq,R5o),e(b1,B5o),e(y,P5o),e(y,v1),e(v1,vle),e(vle,$5o),e(v1,I5o),e(v1,Vq),e(Vq,q5o),e(v1,N5o),e(y,j5o),e(y,F1),e(F1,Fle),e(Fle,D5o),e(F1,G5o),e(F1,Xq),e(Xq,O5o),e(F1,V5o),e(y,X5o),e(y,T1),e(T1,Tle),e(Tle,z5o),e(T1,Q5o),e(T1,zq),e(zq,W5o),e(T1,H5o),e(y,U5o),e(y,M1),e(M1,Mle),e(Mle,J5o),e(M1,Y5o),e(M1,Qq),e(Qq,K5o),e(M1,Z5o),e(y,e3o),e(y,E1),e(E1,Ele),e(Ele,o3o),e(E1,r3o),e(E1,Wq),e(Wq,t3o),e(E1,a3o),e(y,n3o),e(y,C1),e(C1,Cle),e(Cle,s3o),e(C1,l3o),e(C1,Hq),e(Hq,i3o),e(C1,d3o),e(y,c3o),e(y,w1),e(w1,wle),e(wle,f3o),e(w1,m3o),e(w1,Uq),e(Uq,g3o),e(w1,h3o),e(y,p3o),e(y,A1),e(A1,Ale),e(Ale,_3o),e(A1,u3o),e(A1,Jq),e(Jq,b3o),e(A1,v3o),e(y,F3o),e(y,y1),e(y1,yle),e(yle,T3o),e(y1,M3o),e(y1,Yq),e(Yq,E3o),e(y1,C3o),e(y,w3o),e(y,L1),e(L1,Lle),e(Lle,A3o),e(L1,y3o),e(L1,Kq),e(Kq,L3o),e(L1,x3o),e(y,k3o),e(y,x1),e(x1,xle),e(xle,S3o),e(x1,R3o),e(x1,Zq),e(Zq,B3o),e(x1,P3o),e(y,$3o),e(y,k1),e(k1,kle),e(kle,I3o),e(k1,q3o),e(k1,eN),e(eN,N3o),e(k1,j3o),e(y,D3o),e(y,S1),e(S1,Sle),e(Sle,G3o),e(S1,O3o),e(S1,oN),e(oN,V3o),e(S1,X3o),e(y,z3o),e(y,R1),e(R1,Rle),e(Rle,Q3o),e(R1,W3o),e(R1,rN),e(rN,H3o),e(R1,U3o),e(y,J3o),e(y,B1),e(B1,Ble),e(Ble,Y3o),e(B1,K3o),e(B1,tN),e(tN,Z3o),e(B1,ewo),e(y,owo),e(y,P1),e(P1,Ple),e(Ple,rwo),e(P1,two),e(P1,aN),e(aN,awo),e(P1,nwo),e(y,swo),e(y,$1),e($1,$le),e($le,lwo),e($1,iwo),e($1,nN),e(nN,dwo),e($1,cwo),e(y,fwo),e(y,I1),e(I1,Ile),e(Ile,mwo),e(I1,gwo),e(I1,sN),e(sN,hwo),e(I1,pwo),e(y,_wo),e(y,q1),e(q1,qle),e(qle,uwo),e(q1,bwo),e(q1,lN),e(lN,vwo),e(q1,Fwo),e(y,Two),e(y,N1),e(N1,Nle),e(Nle,Mwo),e(N1,Ewo),e(N1,iN),e(iN,Cwo),e(N1,wwo),e(y,Awo),e(y,j1),e(j1,jle),e(jle,ywo),e(j1,Lwo),e(j1,dN),e(dN,xwo),e(j1,kwo),e(y,Swo),e(y,D1),e(D1,Dle),e(Dle,Rwo),e(D1,Bwo),e(D1,cN),e(cN,Pwo),e(D1,$wo),e(y,Iwo),e(y,G1),e(G1,Gle),e(Gle,qwo),e(G1,Nwo),e(G1,fN),e(fN,jwo),e(G1,Dwo),e(y,Gwo),e(y,O1),e(O1,Ole),e(Ole,Owo),e(O1,Vwo),e(O1,mN),e(mN,Xwo),e(O1,zwo),e(y,Qwo),e(y,V1),e(V1,Vle),e(Vle,Wwo),e(V1,Hwo),e(V1,gN),e(gN,Uwo),e(V1,Jwo),e(y,Ywo),e(y,X1),e(X1,Xle),e(Xle,Kwo),e(X1,Zwo),e(X1,hN),e(hN,eAo),e(X1,oAo),e(y,rAo),e(y,z1),e(z1,zle),e(zle,tAo),e(z1,aAo),e(z1,pN),e(pN,nAo),e(z1,sAo),e(y,lAo),e(y,Q1),e(Q1,Qle),e(Qle,iAo),e(Q1,dAo),e(Q1,_N),e(_N,cAo),e(Q1,fAo),e(y,mAo),e(y,W1),e(W1,Wle),e(Wle,gAo),e(W1,hAo),e(W1,uN),e(uN,pAo),e(W1,_Ao),e(y,uAo),e(y,H1),e(H1,Hle),e(Hle,bAo),e(H1,vAo),e(H1,bN),e(bN,FAo),e(H1,TAo),e(y,MAo),e(y,U1),e(U1,Ule),e(Ule,EAo),e(U1,CAo),e(U1,vN),e(vN,wAo),e(U1,AAo),e(y,yAo),e(y,J1),e(J1,Jle),e(Jle,LAo),e(J1,xAo),e(J1,FN),e(FN,kAo),e(J1,SAo),e(y,RAo),e(y,Y1),e(Y1,Yle),e(Yle,BAo),e(Y1,PAo),e(Y1,TN),e(TN,$Ao),e(Y1,IAo),e(y,qAo),e(y,K1),e(K1,Kle),e(Kle,NAo),e(K1,jAo),e(K1,MN),e(MN,DAo),e(K1,GAo),e(y,OAo),e(y,Z1),e(Z1,Zle),e(Zle,VAo),e(Z1,XAo),e(Z1,EN),e(EN,zAo),e(Z1,QAo),e(y,WAo),e(y,eb),e(eb,eie),e(eie,HAo),e(eb,UAo),e(eb,CN),e(CN,JAo),e(eb,YAo),e(y,KAo),e(y,ob),e(ob,oie),e(oie,ZAo),e(ob,eyo),e(ob,wN),e(wN,oyo),e(ob,ryo),e(y,tyo),e(y,rb),e(rb,rie),e(rie,ayo),e(rb,nyo),e(rb,AN),e(AN,syo),e(rb,lyo),e(Oe,iyo),e(Oe,tb),e(tb,dyo),e(tb,tie),e(tie,cyo),e(tb,fyo),e(tb,aie),e(aie,myo),e(Oe,gyo),e(Oe,nie),e(nie,hyo),e(Oe,pyo),g(U5,Oe,null),b(c,rBe,u),b(c,pd,u),e(pd,ab),e(ab,sie),g(J5,sie,null),e(pd,_yo),e(pd,lie),e(lie,uyo),b(c,tBe,u),b(c,rr,u),g(Y5,rr,null),e(rr,byo),e(rr,_d),e(_d,vyo),e(_d,yN),e(yN,Fyo),e(_d,Tyo),e(_d,LN),e(LN,Myo),e(_d,Eyo),e(rr,Cyo),e(rr,K5),e(K5,wyo),e(K5,iie),e(iie,Ayo),e(K5,yyo),e(rr,Lyo),e(rr,Jr),g(Z5,Jr,null),e(Jr,xyo),e(Jr,die),e(die,kyo),e(Jr,Syo),e(Jr,ud),e(ud,Ryo),e(ud,cie),e(cie,Byo),e(ud,Pyo),e(ud,xN),e(xN,$yo),e(ud,Iyo),e(Jr,qyo),e(Jr,fie),e(fie,Nyo),e(Jr,jyo),g(e3,Jr,null),e(rr,Dyo),e(rr,Ve),g(o3,Ve,null),e(Ve,Gyo),e(Ve,mie),e(mie,Oyo),e(Ve,Vyo),e(Ve,Ja),e(Ja,Xyo),e(Ja,gie),e(gie,zyo),e(Ja,Qyo),e(Ja,hie),e(hie,Wyo),e(Ja,Hyo),e(Ja,pie),e(pie,Uyo),e(Ja,Jyo),e(Ve,Yyo),e(Ve,G),e(G,nb),e(nb,_ie),e(_ie,Kyo),e(nb,Zyo),e(nb,kN),e(kN,eLo),e(nb,oLo),e(G,rLo),e(G,sb),e(sb,uie),e(uie,tLo),e(sb,aLo),e(sb,SN),e(SN,nLo),e(sb,sLo),e(G,lLo),e(G,lb),e(lb,bie),e(bie,iLo),e(lb,dLo),e(lb,RN),e(RN,cLo),e(lb,fLo),e(G,mLo),e(G,ib),e(ib,vie),e(vie,gLo),e(ib,hLo),e(ib,BN),e(BN,pLo),e(ib,_Lo),e(G,uLo),e(G,db),e(db,Fie),e(Fie,bLo),e(db,vLo),e(db,PN),e(PN,FLo),e(db,TLo),e(G,MLo),e(G,cb),e(cb,Tie),e(Tie,ELo),e(cb,CLo),e(cb,$N),e($N,wLo),e(cb,ALo),e(G,yLo),e(G,fb),e(fb,Mie),e(Mie,LLo),e(fb,xLo),e(fb,IN),e(IN,kLo),e(fb,SLo),e(G,RLo),e(G,mb),e(mb,Eie),e(Eie,BLo),e(mb,PLo),e(mb,qN),e(qN,$Lo),e(mb,ILo),e(G,qLo),e(G,gb),e(gb,Cie),e(Cie,NLo),e(gb,jLo),e(gb,NN),e(NN,DLo),e(gb,GLo),e(G,OLo),e(G,hb),e(hb,wie),e(wie,VLo),e(hb,XLo),e(hb,jN),e(jN,zLo),e(hb,QLo),e(G,WLo),e(G,pb),e(pb,Aie),e(Aie,HLo),e(pb,ULo),e(pb,DN),e(DN,JLo),e(pb,YLo),e(G,KLo),e(G,_b),e(_b,yie),e(yie,ZLo),e(_b,e8o),e(_b,GN),e(GN,o8o),e(_b,r8o),e(G,t8o),e(G,ub),e(ub,Lie),e(Lie,a8o),e(ub,n8o),e(ub,ON),e(ON,s8o),e(ub,l8o),e(G,i8o),e(G,bb),e(bb,xie),e(xie,d8o),e(bb,c8o),e(bb,VN),e(VN,f8o),e(bb,m8o),e(G,g8o),e(G,vb),e(vb,kie),e(kie,h8o),e(vb,p8o),e(vb,XN),e(XN,_8o),e(vb,u8o),e(G,b8o),e(G,Fb),e(Fb,Sie),e(Sie,v8o),e(Fb,F8o),e(Fb,zN),e(zN,T8o),e(Fb,M8o),e(G,E8o),e(G,Tb),e(Tb,Rie),e(Rie,C8o),e(Tb,w8o),e(Tb,QN),e(QN,A8o),e(Tb,y8o),e(G,L8o),e(G,Mb),e(Mb,Bie),e(Bie,x8o),e(Mb,k8o),e(Mb,WN),e(WN,S8o),e(Mb,R8o),e(G,B8o),e(G,Eb),e(Eb,Pie),e(Pie,P8o),e(Eb,$8o),e(Eb,HN),e(HN,I8o),e(Eb,q8o),e(G,N8o),e(G,Cb),e(Cb,$ie),e($ie,j8o),e(Cb,D8o),e(Cb,UN),e(UN,G8o),e(Cb,O8o),e(G,V8o),e(G,wb),e(wb,Iie),e(Iie,X8o),e(wb,z8o),e(wb,JN),e(JN,Q8o),e(wb,W8o),e(G,H8o),e(G,Ab),e(Ab,qie),e(qie,U8o),e(Ab,J8o),e(Ab,YN),e(YN,Y8o),e(Ab,K8o),e(G,Z8o),e(G,yb),e(yb,Nie),e(Nie,e9o),e(yb,o9o),e(yb,KN),e(KN,r9o),e(yb,t9o),e(G,a9o),e(G,Lb),e(Lb,jie),e(jie,n9o),e(Lb,s9o),e(Lb,ZN),e(ZN,l9o),e(Lb,i9o),e(G,d9o),e(G,xb),e(xb,Die),e(Die,c9o),e(xb,f9o),e(xb,ej),e(ej,m9o),e(xb,g9o),e(G,h9o),e(G,kb),e(kb,Gie),e(Gie,p9o),e(kb,_9o),e(kb,oj),e(oj,u9o),e(kb,b9o),e(G,v9o),e(G,Sb),e(Sb,Oie),e(Oie,F9o),e(Sb,T9o),e(Sb,rj),e(rj,M9o),e(Sb,E9o),e(G,C9o),e(G,Rb),e(Rb,Vie),e(Vie,w9o),e(Rb,A9o),e(Rb,tj),e(tj,y9o),e(Rb,L9o),e(Ve,x9o),e(Ve,Bb),e(Bb,k9o),e(Bb,Xie),e(Xie,S9o),e(Bb,R9o),e(Bb,zie),e(zie,B9o),e(Ve,P9o),e(Ve,Qie),e(Qie,$9o),e(Ve,I9o),g(r3,Ve,null),b(c,aBe,u),b(c,bd,u),e(bd,Pb),e(Pb,Wie),g(t3,Wie,null),e(bd,q9o),e(bd,Hie),e(Hie,N9o),b(c,nBe,u),b(c,tr,u),g(a3,tr,null),e(tr,j9o),e(tr,vd),e(vd,D9o),e(vd,aj),e(aj,G9o),e(vd,O9o),e(vd,nj),e(nj,V9o),e(vd,X9o),e(tr,z9o),e(tr,n3),e(n3,Q9o),e(n3,Uie),e(Uie,W9o),e(n3,H9o),e(tr,U9o),e(tr,Yr),g(s3,Yr,null),e(Yr,J9o),e(Yr,Jie),e(Jie,Y9o),e(Yr,K9o),e(Yr,Fd),e(Fd,Z9o),e(Fd,Yie),e(Yie,exo),e(Fd,oxo),e(Fd,sj),e(sj,rxo),e(Fd,txo),e(Yr,axo),e(Yr,Kie),e(Kie,nxo),e(Yr,sxo),g(l3,Yr,null),e(tr,lxo),e(tr,Xe),g(i3,Xe,null),e(Xe,ixo),e(Xe,Zie),e(Zie,dxo),e(Xe,cxo),e(Xe,Ya),e(Ya,fxo),e(Ya,ede),e(ede,mxo),e(Ya,gxo),e(Ya,ode),e(ode,hxo),e(Ya,pxo),e(Ya,rde),e(rde,_xo),e(Ya,uxo),e(Xe,bxo),e(Xe,da),e(da,$b),e($b,tde),e(tde,vxo),e($b,Fxo),e($b,lj),e(lj,Txo),e($b,Mxo),e(da,Exo),e(da,Ib),e(Ib,ade),e(ade,Cxo),e(Ib,wxo),e(Ib,ij),e(ij,Axo),e(Ib,yxo),e(da,Lxo),e(da,qb),e(qb,nde),e(nde,xxo),e(qb,kxo),e(qb,dj),e(dj,Sxo),e(qb,Rxo),e(da,Bxo),e(da,Nb),e(Nb,sde),e(sde,Pxo),e(Nb,$xo),e(Nb,cj),e(cj,Ixo),e(Nb,qxo),e(da,Nxo),e(da,jb),e(jb,lde),e(lde,jxo),e(jb,Dxo),e(jb,fj),e(fj,Gxo),e(jb,Oxo),e(Xe,Vxo),e(Xe,Db),e(Db,Xxo),e(Db,ide),e(ide,zxo),e(Db,Qxo),e(Db,dde),e(dde,Wxo),e(Xe,Hxo),e(Xe,cde),e(cde,Uxo),e(Xe,Jxo),g(d3,Xe,null),b(c,sBe,u),b(c,Td,u),e(Td,Gb),e(Gb,fde),g(c3,fde,null),e(Td,Yxo),e(Td,mde),e(mde,Kxo),b(c,lBe,u),b(c,ar,u),g(f3,ar,null),e(ar,Zxo),e(ar,Md),e(Md,eko),e(Md,mj),e(mj,oko),e(Md,rko),e(Md,gj),e(gj,tko),e(Md,ako),e(ar,nko),e(ar,m3),e(m3,sko),e(m3,gde),e(gde,lko),e(m3,iko),e(ar,dko),e(ar,Kr),g(g3,Kr,null),e(Kr,cko),e(Kr,hde),e(hde,fko),e(Kr,mko),e(Kr,Ed),e(Ed,gko),e(Ed,pde),e(pde,hko),e(Ed,pko),e(Ed,hj),e(hj,_ko),e(Ed,uko),e(Kr,bko),e(Kr,_de),e(_de,vko),e(Kr,Fko),g(h3,Kr,null),e(ar,Tko),e(ar,ze),g(p3,ze,null),e(ze,Mko),e(ze,ude),e(ude,Eko),e(ze,Cko),e(ze,Ka),e(Ka,wko),e(Ka,bde),e(bde,Ako),e(Ka,yko),e(Ka,vde),e(vde,Lko),e(Ka,xko),e(Ka,Fde),e(Fde,kko),e(Ka,Sko),e(ze,Rko),e(ze,j),e(j,Ob),e(Ob,Tde),e(Tde,Bko),e(Ob,Pko),e(Ob,pj),e(pj,$ko),e(Ob,Iko),e(j,qko),e(j,Vb),e(Vb,Mde),e(Mde,Nko),e(Vb,jko),e(Vb,_j),e(_j,Dko),e(Vb,Gko),e(j,Oko),e(j,Xb),e(Xb,Ede),e(Ede,Vko),e(Xb,Xko),e(Xb,uj),e(uj,zko),e(Xb,Qko),e(j,Wko),e(j,zb),e(zb,Cde),e(Cde,Hko),e(zb,Uko),e(zb,bj),e(bj,Jko),e(zb,Yko),e(j,Kko),e(j,Qb),e(Qb,wde),e(wde,Zko),e(Qb,eSo),e(Qb,vj),e(vj,oSo),e(Qb,rSo),e(j,tSo),e(j,Wb),e(Wb,Ade),e(Ade,aSo),e(Wb,nSo),e(Wb,Fj),e(Fj,sSo),e(Wb,lSo),e(j,iSo),e(j,Hb),e(Hb,yde),e(yde,dSo),e(Hb,cSo),e(Hb,Tj),e(Tj,fSo),e(Hb,mSo),e(j,gSo),e(j,Ub),e(Ub,Lde),e(Lde,hSo),e(Ub,pSo),e(Ub,Mj),e(Mj,_So),e(Ub,uSo),e(j,bSo),e(j,Jb),e(Jb,xde),e(xde,vSo),e(Jb,FSo),e(Jb,Ej),e(Ej,TSo),e(Jb,MSo),e(j,ESo),e(j,Yb),e(Yb,kde),e(kde,CSo),e(Yb,wSo),e(Yb,Cj),e(Cj,ASo),e(Yb,ySo),e(j,LSo),e(j,Kb),e(Kb,Sde),e(Sde,xSo),e(Kb,kSo),e(Kb,wj),e(wj,SSo),e(Kb,RSo),e(j,BSo),e(j,Zb),e(Zb,Rde),e(Rde,PSo),e(Zb,$So),e(Zb,Aj),e(Aj,ISo),e(Zb,qSo),e(j,NSo),e(j,e2),e(e2,Bde),e(Bde,jSo),e(e2,DSo),e(e2,yj),e(yj,GSo),e(e2,OSo),e(j,VSo),e(j,o2),e(o2,Pde),e(Pde,XSo),e(o2,zSo),e(o2,Lj),e(Lj,QSo),e(o2,WSo),e(j,HSo),e(j,r2),e(r2,$de),e($de,USo),e(r2,JSo),e(r2,xj),e(xj,YSo),e(r2,KSo),e(j,ZSo),e(j,t2),e(t2,Ide),e(Ide,eRo),e(t2,oRo),e(t2,kj),e(kj,rRo),e(t2,tRo),e(j,aRo),e(j,a2),e(a2,qde),e(qde,nRo),e(a2,sRo),e(a2,Sj),e(Sj,lRo),e(a2,iRo),e(j,dRo),e(j,n2),e(n2,Nde),e(Nde,cRo),e(n2,fRo),e(n2,Rj),e(Rj,mRo),e(n2,gRo),e(j,hRo),e(j,s2),e(s2,jde),e(jde,pRo),e(s2,_Ro),e(s2,Bj),e(Bj,uRo),e(s2,bRo),e(j,vRo),e(j,l2),e(l2,Dde),e(Dde,FRo),e(l2,TRo),e(l2,Pj),e(Pj,MRo),e(l2,ERo),e(j,CRo),e(j,i2),e(i2,Gde),e(Gde,wRo),e(i2,ARo),e(i2,$j),e($j,yRo),e(i2,LRo),e(j,xRo),e(j,d2),e(d2,Ode),e(Ode,kRo),e(d2,SRo),e(d2,Ij),e(Ij,RRo),e(d2,BRo),e(j,PRo),e(j,c2),e(c2,Vde),e(Vde,$Ro),e(c2,IRo),e(c2,qj),e(qj,qRo),e(c2,NRo),e(j,jRo),e(j,f2),e(f2,Xde),e(Xde,DRo),e(f2,GRo),e(f2,Nj),e(Nj,ORo),e(f2,VRo),e(j,XRo),e(j,m2),e(m2,zde),e(zde,zRo),e(m2,QRo),e(m2,jj),e(jj,WRo),e(m2,HRo),e(j,URo),e(j,g2),e(g2,Qde),e(Qde,JRo),e(g2,YRo),e(g2,Dj),e(Dj,KRo),e(g2,ZRo),e(j,eBo),e(j,h2),e(h2,Wde),e(Wde,oBo),e(h2,rBo),e(h2,Gj),e(Gj,tBo),e(h2,aBo),e(j,nBo),e(j,p2),e(p2,Hde),e(Hde,sBo),e(p2,lBo),e(p2,Oj),e(Oj,iBo),e(p2,dBo),e(j,cBo),e(j,_2),e(_2,Ude),e(Ude,fBo),e(_2,mBo),e(_2,Vj),e(Vj,gBo),e(_2,hBo),e(j,pBo),e(j,u2),e(u2,Jde),e(Jde,_Bo),e(u2,uBo),e(u2,Xj),e(Xj,bBo),e(u2,vBo),e(j,FBo),e(j,b2),e(b2,Yde),e(Yde,TBo),e(b2,MBo),e(b2,zj),e(zj,EBo),e(b2,CBo),e(j,wBo),e(j,v2),e(v2,Kde),e(Kde,ABo),e(v2,yBo),e(v2,Qj),e(Qj,LBo),e(v2,xBo),e(j,kBo),e(j,F2),e(F2,Zde),e(Zde,SBo),e(F2,RBo),e(F2,Wj),e(Wj,BBo),e(F2,PBo),e(ze,$Bo),e(ze,T2),e(T2,IBo),e(T2,ece),e(ece,qBo),e(T2,NBo),e(T2,oce),e(oce,jBo),e(ze,DBo),e(ze,rce),e(rce,GBo),e(ze,OBo),g(_3,ze,null),b(c,iBe,u),b(c,Cd,u),e(Cd,M2),e(M2,tce),g(u3,tce,null),e(Cd,VBo),e(Cd,ace),e(ace,XBo),b(c,dBe,u),b(c,nr,u),g(b3,nr,null),e(nr,zBo),e(nr,wd),e(wd,QBo),e(wd,Hj),e(Hj,WBo),e(wd,HBo),e(wd,Uj),e(Uj,UBo),e(wd,JBo),e(nr,YBo),e(nr,v3),e(v3,KBo),e(v3,nce),e(nce,ZBo),e(v3,ePo),e(nr,oPo),e(nr,Zr),g(F3,Zr,null),e(Zr,rPo),e(Zr,sce),e(sce,tPo),e(Zr,aPo),e(Zr,Ad),e(Ad,nPo),e(Ad,lce),e(lce,sPo),e(Ad,lPo),e(Ad,Jj),e(Jj,iPo),e(Ad,dPo),e(Zr,cPo),e(Zr,ice),e(ice,fPo),e(Zr,mPo),g(T3,Zr,null),e(nr,gPo),e(nr,Qe),g(M3,Qe,null),e(Qe,hPo),e(Qe,dce),e(dce,pPo),e(Qe,_Po),e(Qe,Za),e(Za,uPo),e(Za,cce),e(cce,bPo),e(Za,vPo),e(Za,fce),e(fce,FPo),e(Za,TPo),e(Za,mce),e(mce,MPo),e(Za,EPo),e(Qe,CPo),e(Qe,R),e(R,E2),e(E2,gce),e(gce,wPo),e(E2,APo),e(E2,Yj),e(Yj,yPo),e(E2,LPo),e(R,xPo),e(R,C2),e(C2,hce),e(hce,kPo),e(C2,SPo),e(C2,Kj),e(Kj,RPo),e(C2,BPo),e(R,PPo),e(R,w2),e(w2,pce),e(pce,$Po),e(w2,IPo),e(w2,Zj),e(Zj,qPo),e(w2,NPo),e(R,jPo),e(R,A2),e(A2,_ce),e(_ce,DPo),e(A2,GPo),e(A2,eD),e(eD,OPo),e(A2,VPo),e(R,XPo),e(R,y2),e(y2,uce),e(uce,zPo),e(y2,QPo),e(y2,oD),e(oD,WPo),e(y2,HPo),e(R,UPo),e(R,L2),e(L2,bce),e(bce,JPo),e(L2,YPo),e(L2,rD),e(rD,KPo),e(L2,ZPo),e(R,e$o),e(R,x2),e(x2,vce),e(vce,o$o),e(x2,r$o),e(x2,tD),e(tD,t$o),e(x2,a$o),e(R,n$o),e(R,k2),e(k2,Fce),e(Fce,s$o),e(k2,l$o),e(k2,aD),e(aD,i$o),e(k2,d$o),e(R,c$o),e(R,S2),e(S2,Tce),e(Tce,f$o),e(S2,m$o),e(S2,nD),e(nD,g$o),e(S2,h$o),e(R,p$o),e(R,R2),e(R2,Mce),e(Mce,_$o),e(R2,u$o),e(R2,sD),e(sD,b$o),e(R2,v$o),e(R,F$o),e(R,B2),e(B2,Ece),e(Ece,T$o),e(B2,M$o),e(B2,lD),e(lD,E$o),e(B2,C$o),e(R,w$o),e(R,P2),e(P2,Cce),e(Cce,A$o),e(P2,y$o),e(P2,iD),e(iD,L$o),e(P2,x$o),e(R,k$o),e(R,$2),e($2,wce),e(wce,S$o),e($2,R$o),e($2,dD),e(dD,B$o),e($2,P$o),e(R,$$o),e(R,I2),e(I2,Ace),e(Ace,I$o),e(I2,q$o),e(I2,cD),e(cD,N$o),e(I2,j$o),e(R,D$o),e(R,q2),e(q2,yce),e(yce,G$o),e(q2,O$o),e(q2,fD),e(fD,V$o),e(q2,X$o),e(R,z$o),e(R,N2),e(N2,Lce),e(Lce,Q$o),e(N2,W$o),e(N2,mD),e(mD,H$o),e(N2,U$o),e(R,J$o),e(R,j2),e(j2,xce),e(xce,Y$o),e(j2,K$o),e(j2,gD),e(gD,Z$o),e(j2,eIo),e(R,oIo),e(R,D2),e(D2,kce),e(kce,rIo),e(D2,tIo),e(D2,hD),e(hD,aIo),e(D2,nIo),e(R,sIo),e(R,G2),e(G2,Sce),e(Sce,lIo),e(G2,iIo),e(G2,pD),e(pD,dIo),e(G2,cIo),e(R,fIo),e(R,O2),e(O2,Rce),e(Rce,mIo),e(O2,gIo),e(O2,_D),e(_D,hIo),e(O2,pIo),e(R,_Io),e(R,V2),e(V2,Bce),e(Bce,uIo),e(V2,bIo),e(V2,uD),e(uD,vIo),e(V2,FIo),e(R,TIo),e(R,X2),e(X2,Pce),e(Pce,MIo),e(X2,EIo),e(X2,bD),e(bD,CIo),e(X2,wIo),e(R,AIo),e(R,z2),e(z2,$ce),e($ce,yIo),e(z2,LIo),e(z2,vD),e(vD,xIo),e(z2,kIo),e(R,SIo),e(R,Q2),e(Q2,Ice),e(Ice,RIo),e(Q2,BIo),e(Q2,FD),e(FD,PIo),e(Q2,$Io),e(R,IIo),e(R,W2),e(W2,qce),e(qce,qIo),e(W2,NIo),e(W2,TD),e(TD,jIo),e(W2,DIo),e(R,GIo),e(R,H2),e(H2,Nce),e(Nce,OIo),e(H2,VIo),e(H2,MD),e(MD,XIo),e(H2,zIo),e(R,QIo),e(R,U2),e(U2,jce),e(jce,WIo),e(U2,HIo),e(U2,ED),e(ED,UIo),e(U2,JIo),e(R,YIo),e(R,J2),e(J2,Dce),e(Dce,KIo),e(J2,ZIo),e(J2,CD),e(CD,eqo),e(J2,oqo),e(R,rqo),e(R,Y2),e(Y2,Gce),e(Gce,tqo),e(Y2,aqo),e(Y2,wD),e(wD,nqo),e(Y2,sqo),e(R,lqo),e(R,K2),e(K2,Oce),e(Oce,iqo),e(K2,dqo),e(K2,AD),e(AD,cqo),e(K2,fqo),e(R,mqo),e(R,Z2),e(Z2,Vce),e(Vce,gqo),e(Z2,hqo),e(Z2,yD),e(yD,pqo),e(Z2,_qo),e(R,uqo),e(R,ev),e(ev,Xce),e(Xce,bqo),e(ev,vqo),e(ev,LD),e(LD,Fqo),e(ev,Tqo),e(R,Mqo),e(R,ov),e(ov,zce),e(zce,Eqo),e(ov,Cqo),e(ov,xD),e(xD,wqo),e(ov,Aqo),e(R,yqo),e(R,rv),e(rv,Qce),e(Qce,Lqo),e(rv,xqo),e(rv,kD),e(kD,kqo),e(rv,Sqo),e(R,Rqo),e(R,tv),e(tv,Wce),e(Wce,Bqo),e(tv,Pqo),e(tv,SD),e(SD,$qo),e(tv,Iqo),e(R,qqo),e(R,av),e(av,Hce),e(Hce,Nqo),e(av,jqo),e(av,RD),e(RD,Dqo),e(av,Gqo),e(R,Oqo),e(R,nv),e(nv,Uce),e(Uce,Vqo),e(nv,Xqo),e(nv,BD),e(BD,zqo),e(nv,Qqo),e(R,Wqo),e(R,sv),e(sv,Jce),e(Jce,Hqo),e(sv,Uqo),e(sv,PD),e(PD,Jqo),e(sv,Yqo),e(R,Kqo),e(R,lv),e(lv,Yce),e(Yce,Zqo),e(lv,eNo),e(lv,$D),e($D,oNo),e(lv,rNo),e(Qe,tNo),e(Qe,iv),e(iv,aNo),e(iv,Kce),e(Kce,nNo),e(iv,sNo),e(iv,Zce),e(Zce,lNo),e(Qe,iNo),e(Qe,efe),e(efe,dNo),e(Qe,cNo),g(E3,Qe,null),b(c,cBe,u),b(c,yd,u),e(yd,dv),e(dv,ofe),g(C3,ofe,null),e(yd,fNo),e(yd,rfe),e(rfe,mNo),b(c,fBe,u),b(c,sr,u),g(w3,sr,null),e(sr,gNo),e(sr,Ld),e(Ld,hNo),e(Ld,ID),e(ID,pNo),e(Ld,_No),e(Ld,qD),e(qD,uNo),e(Ld,bNo),e(sr,vNo),e(sr,A3),e(A3,FNo),e(A3,tfe),e(tfe,TNo),e(A3,MNo),e(sr,ENo),e(sr,et),g(y3,et,null),e(et,CNo),e(et,afe),e(afe,wNo),e(et,ANo),e(et,xd),e(xd,yNo),e(xd,nfe),e(nfe,LNo),e(xd,xNo),e(xd,ND),e(ND,kNo),e(xd,SNo),e(et,RNo),e(et,sfe),e(sfe,BNo),e(et,PNo),g(L3,et,null),e(sr,$No),e(sr,We),g(x3,We,null),e(We,INo),e(We,lfe),e(lfe,qNo),e(We,NNo),e(We,en),e(en,jNo),e(en,ife),e(ife,DNo),e(en,GNo),e(en,dfe),e(dfe,ONo),e(en,VNo),e(en,cfe),e(cfe,XNo),e(en,zNo),e(We,QNo),e(We,ffe),e(ffe,cv),e(cv,mfe),e(mfe,WNo),e(cv,HNo),e(cv,jD),e(jD,UNo),e(cv,JNo),e(We,YNo),e(We,fv),e(fv,KNo),e(fv,gfe),e(gfe,ZNo),e(fv,ejo),e(fv,hfe),e(hfe,ojo),e(We,rjo),e(We,pfe),e(pfe,tjo),e(We,ajo),g(k3,We,null),b(c,mBe,u),b(c,kd,u),e(kd,mv),e(mv,_fe),g(S3,_fe,null),e(kd,njo),e(kd,ufe),e(ufe,sjo),b(c,gBe,u),b(c,lr,u),g(R3,lr,null),e(lr,ljo),e(lr,Sd),e(Sd,ijo),e(Sd,DD),e(DD,djo),e(Sd,cjo),e(Sd,GD),e(GD,fjo),e(Sd,mjo),e(lr,gjo),e(lr,B3),e(B3,hjo),e(B3,bfe),e(bfe,pjo),e(B3,_jo),e(lr,ujo),e(lr,ot),g(P3,ot,null),e(ot,bjo),e(ot,vfe),e(vfe,vjo),e(ot,Fjo),e(ot,Rd),e(Rd,Tjo),e(Rd,Ffe),e(Ffe,Mjo),e(Rd,Ejo),e(Rd,OD),e(OD,Cjo),e(Rd,wjo),e(ot,Ajo),e(ot,Tfe),e(Tfe,yjo),e(ot,Ljo),g($3,ot,null),e(lr,xjo),e(lr,He),g(I3,He,null),e(He,kjo),e(He,Mfe),e(Mfe,Sjo),e(He,Rjo),e(He,on),e(on,Bjo),e(on,Efe),e(Efe,Pjo),e(on,$jo),e(on,Cfe),e(Cfe,Ijo),e(on,qjo),e(on,wfe),e(wfe,Njo),e(on,jjo),e(He,Djo),e(He,de),e(de,gv),e(gv,Afe),e(Afe,Gjo),e(gv,Ojo),e(gv,VD),e(VD,Vjo),e(gv,Xjo),e(de,zjo),e(de,hv),e(hv,yfe),e(yfe,Qjo),e(hv,Wjo),e(hv,XD),e(XD,Hjo),e(hv,Ujo),e(de,Jjo),e(de,pv),e(pv,Lfe),e(Lfe,Yjo),e(pv,Kjo),e(pv,zD),e(zD,Zjo),e(pv,eDo),e(de,oDo),e(de,Gs),e(Gs,xfe),e(xfe,rDo),e(Gs,tDo),e(Gs,QD),e(QD,aDo),e(Gs,nDo),e(Gs,WD),e(WD,sDo),e(Gs,lDo),e(de,iDo),e(de,_v),e(_v,kfe),e(kfe,dDo),e(_v,cDo),e(_v,HD),e(HD,fDo),e(_v,mDo),e(de,gDo),e(de,ma),e(ma,Sfe),e(Sfe,hDo),e(ma,pDo),e(ma,UD),e(UD,_Do),e(ma,uDo),e(ma,JD),e(JD,bDo),e(ma,vDo),e(ma,YD),e(YD,FDo),e(ma,TDo),e(de,MDo),e(de,uv),e(uv,Rfe),e(Rfe,EDo),e(uv,CDo),e(uv,KD),e(KD,wDo),e(uv,ADo),e(de,yDo),e(de,bv),e(bv,Bfe),e(Bfe,LDo),e(bv,xDo),e(bv,ZD),e(ZD,kDo),e(bv,SDo),e(de,RDo),e(de,vv),e(vv,Pfe),e(Pfe,BDo),e(vv,PDo),e(vv,eG),e(eG,$Do),e(vv,IDo),e(de,qDo),e(de,Fv),e(Fv,$fe),e($fe,NDo),e(Fv,jDo),e(Fv,oG),e(oG,DDo),e(Fv,GDo),e(de,ODo),e(de,Tv),e(Tv,Ife),e(Ife,VDo),e(Tv,XDo),e(Tv,rG),e(rG,zDo),e(Tv,QDo),e(de,WDo),e(de,Mv),e(Mv,qfe),e(qfe,HDo),e(Mv,UDo),e(Mv,tG),e(tG,JDo),e(Mv,YDo),e(de,KDo),e(de,Ev),e(Ev,Nfe),e(Nfe,ZDo),e(Ev,eGo),e(Ev,aG),e(aG,oGo),e(Ev,rGo),e(He,tGo),e(He,Cv),e(Cv,aGo),e(Cv,jfe),e(jfe,nGo),e(Cv,sGo),e(Cv,Dfe),e(Dfe,lGo),e(He,iGo),e(He,Gfe),e(Gfe,dGo),e(He,cGo),g(q3,He,null),b(c,hBe,u),b(c,Bd,u),e(Bd,wv),e(wv,Ofe),g(N3,Ofe,null),e(Bd,fGo),e(Bd,Vfe),e(Vfe,mGo),b(c,pBe,u),b(c,ir,u),g(j3,ir,null),e(ir,gGo),e(ir,Pd),e(Pd,hGo),e(Pd,nG),e(nG,pGo),e(Pd,_Go),e(Pd,sG),e(sG,uGo),e(Pd,bGo),e(ir,vGo),e(ir,D3),e(D3,FGo),e(D3,Xfe),e(Xfe,TGo),e(D3,MGo),e(ir,EGo),e(ir,rt),g(G3,rt,null),e(rt,CGo),e(rt,zfe),e(zfe,wGo),e(rt,AGo),e(rt,$d),e($d,yGo),e($d,Qfe),e(Qfe,LGo),e($d,xGo),e($d,lG),e(lG,kGo),e($d,SGo),e(rt,RGo),e(rt,Wfe),e(Wfe,BGo),e(rt,PGo),g(O3,rt,null),e(ir,$Go),e(ir,Ue),g(V3,Ue,null),e(Ue,IGo),e(Ue,Hfe),e(Hfe,qGo),e(Ue,NGo),e(Ue,rn),e(rn,jGo),e(rn,Ufe),e(Ufe,DGo),e(rn,GGo),e(rn,Jfe),e(Jfe,OGo),e(rn,VGo),e(rn,Yfe),e(Yfe,XGo),e(rn,zGo),e(Ue,QGo),e(Ue,Kfe),e(Kfe,Av),e(Av,Zfe),e(Zfe,WGo),e(Av,HGo),e(Av,iG),e(iG,UGo),e(Av,JGo),e(Ue,YGo),e(Ue,yv),e(yv,KGo),e(yv,eme),e(eme,ZGo),e(yv,eOo),e(yv,ome),e(ome,oOo),e(Ue,rOo),e(Ue,rme),e(rme,tOo),e(Ue,aOo),g(X3,Ue,null),b(c,_Be,u),b(c,Id,u),e(Id,Lv),e(Lv,tme),g(z3,tme,null),e(Id,nOo),e(Id,ame),e(ame,sOo),b(c,uBe,u),b(c,dr,u),g(Q3,dr,null),e(dr,lOo),e(dr,qd),e(qd,iOo),e(qd,dG),e(dG,dOo),e(qd,cOo),e(qd,cG),e(cG,fOo),e(qd,mOo),e(dr,gOo),e(dr,W3),e(W3,hOo),e(W3,nme),e(nme,pOo),e(W3,_Oo),e(dr,uOo),e(dr,tt),g(H3,tt,null),e(tt,bOo),e(tt,sme),e(sme,vOo),e(tt,FOo),e(tt,Nd),e(Nd,TOo),e(Nd,lme),e(lme,MOo),e(Nd,EOo),e(Nd,fG),e(fG,COo),e(Nd,wOo),e(tt,AOo),e(tt,ime),e(ime,yOo),e(tt,LOo),g(U3,tt,null),e(dr,xOo),e(dr,Je),g(J3,Je,null),e(Je,kOo),e(Je,dme),e(dme,SOo),e(Je,ROo),e(Je,tn),e(tn,BOo),e(tn,cme),e(cme,POo),e(tn,$Oo),e(tn,fme),e(fme,IOo),e(tn,qOo),e(tn,mme),e(mme,NOo),e(tn,jOo),e(Je,DOo),e(Je,Se),e(Se,xv),e(xv,gme),e(gme,GOo),e(xv,OOo),e(xv,mG),e(mG,VOo),e(xv,XOo),e(Se,zOo),e(Se,kv),e(kv,hme),e(hme,QOo),e(kv,WOo),e(kv,gG),e(gG,HOo),e(kv,UOo),e(Se,JOo),e(Se,Sv),e(Sv,pme),e(pme,YOo),e(Sv,KOo),e(Sv,hG),e(hG,ZOo),e(Sv,eVo),e(Se,oVo),e(Se,Rv),e(Rv,_me),e(_me,rVo),e(Rv,tVo),e(Rv,pG),e(pG,aVo),e(Rv,nVo),e(Se,sVo),e(Se,Bv),e(Bv,ume),e(ume,lVo),e(Bv,iVo),e(Bv,_G),e(_G,dVo),e(Bv,cVo),e(Se,fVo),e(Se,Pv),e(Pv,bme),e(bme,mVo),e(Pv,gVo),e(Pv,uG),e(uG,hVo),e(Pv,pVo),e(Se,_Vo),e(Se,$v),e($v,vme),e(vme,uVo),e($v,bVo),e($v,bG),e(bG,vVo),e($v,FVo),e(Se,TVo),e(Se,Iv),e(Iv,Fme),e(Fme,MVo),e(Iv,EVo),e(Iv,vG),e(vG,CVo),e(Iv,wVo),e(Je,AVo),e(Je,qv),e(qv,yVo),e(qv,Tme),e(Tme,LVo),e(qv,xVo),e(qv,Mme),e(Mme,kVo),e(Je,SVo),e(Je,Eme),e(Eme,RVo),e(Je,BVo),g(Y3,Je,null),b(c,bBe,u),b(c,jd,u),e(jd,Nv),e(Nv,Cme),g(K3,Cme,null),e(jd,PVo),e(jd,wme),e(wme,$Vo),b(c,vBe,u),b(c,cr,u),g(Z3,cr,null),e(cr,IVo),e(cr,Dd),e(Dd,qVo),e(Dd,FG),e(FG,NVo),e(Dd,jVo),e(Dd,TG),e(TG,DVo),e(Dd,GVo),e(cr,OVo),e(cr,ew),e(ew,VVo),e(ew,Ame),e(Ame,XVo),e(ew,zVo),e(cr,QVo),e(cr,at),g(ow,at,null),e(at,WVo),e(at,yme),e(yme,HVo),e(at,UVo),e(at,Gd),e(Gd,JVo),e(Gd,Lme),e(Lme,YVo),e(Gd,KVo),e(Gd,MG),e(MG,ZVo),e(Gd,eXo),e(at,oXo),e(at,xme),e(xme,rXo),e(at,tXo),g(rw,at,null),e(cr,aXo),e(cr,Ye),g(tw,Ye,null),e(Ye,nXo),e(Ye,kme),e(kme,sXo),e(Ye,lXo),e(Ye,an),e(an,iXo),e(an,Sme),e(Sme,dXo),e(an,cXo),e(an,Rme),e(Rme,fXo),e(an,mXo),e(an,Bme),e(Bme,gXo),e(an,hXo),e(Ye,pXo),e(Ye,nn),e(nn,jv),e(jv,Pme),e(Pme,_Xo),e(jv,uXo),e(jv,EG),e(EG,bXo),e(jv,vXo),e(nn,FXo),e(nn,Dv),e(Dv,$me),e($me,TXo),e(Dv,MXo),e(Dv,CG),e(CG,EXo),e(Dv,CXo),e(nn,wXo),e(nn,Gv),e(Gv,Ime),e(Ime,AXo),e(Gv,yXo),e(Gv,wG),e(wG,LXo),e(Gv,xXo),e(nn,kXo),e(nn,Ov),e(Ov,qme),e(qme,SXo),e(Ov,RXo),e(Ov,AG),e(AG,BXo),e(Ov,PXo),e(Ye,$Xo),e(Ye,Vv),e(Vv,IXo),e(Vv,Nme),e(Nme,qXo),e(Vv,NXo),e(Vv,jme),e(jme,jXo),e(Ye,DXo),e(Ye,Dme),e(Dme,GXo),e(Ye,OXo),g(aw,Ye,null),b(c,FBe,u),b(c,Od,u),e(Od,Xv),e(Xv,Gme),g(nw,Gme,null),e(Od,VXo),e(Od,Ome),e(Ome,XXo),b(c,TBe,u),b(c,fr,u),g(sw,fr,null),e(fr,zXo),e(fr,Vd),e(Vd,QXo),e(Vd,yG),e(yG,WXo),e(Vd,HXo),e(Vd,LG),e(LG,UXo),e(Vd,JXo),e(fr,YXo),e(fr,lw),e(lw,KXo),e(lw,Vme),e(Vme,ZXo),e(lw,ezo),e(fr,ozo),e(fr,nt),g(iw,nt,null),e(nt,rzo),e(nt,Xme),e(Xme,tzo),e(nt,azo),e(nt,Xd),e(Xd,nzo),e(Xd,zme),e(zme,szo),e(Xd,lzo),e(Xd,xG),e(xG,izo),e(Xd,dzo),e(nt,czo),e(nt,Qme),e(Qme,fzo),e(nt,mzo),g(dw,nt,null),e(fr,gzo),e(fr,Ke),g(cw,Ke,null),e(Ke,hzo),e(Ke,Wme),e(Wme,pzo),e(Ke,_zo),e(Ke,sn),e(sn,uzo),e(sn,Hme),e(Hme,bzo),e(sn,vzo),e(sn,Ume),e(Ume,Fzo),e(sn,Tzo),e(sn,Jme),e(Jme,Mzo),e(sn,Ezo),e(Ke,Czo),e(Ke,Re),e(Re,zv),e(zv,Yme),e(Yme,wzo),e(zv,Azo),e(zv,kG),e(kG,yzo),e(zv,Lzo),e(Re,xzo),e(Re,Qv),e(Qv,Kme),e(Kme,kzo),e(Qv,Szo),e(Qv,SG),e(SG,Rzo),e(Qv,Bzo),e(Re,Pzo),e(Re,Wv),e(Wv,Zme),e(Zme,$zo),e(Wv,Izo),e(Wv,RG),e(RG,qzo),e(Wv,Nzo),e(Re,jzo),e(Re,Hv),e(Hv,ege),e(ege,Dzo),e(Hv,Gzo),e(Hv,BG),e(BG,Ozo),e(Hv,Vzo),e(Re,Xzo),e(Re,Uv),e(Uv,oge),e(oge,zzo),e(Uv,Qzo),e(Uv,PG),e(PG,Wzo),e(Uv,Hzo),e(Re,Uzo),e(Re,Jv),e(Jv,rge),e(rge,Jzo),e(Jv,Yzo),e(Jv,$G),e($G,Kzo),e(Jv,Zzo),e(Re,eQo),e(Re,Yv),e(Yv,tge),e(tge,oQo),e(Yv,rQo),e(Yv,IG),e(IG,tQo),e(Yv,aQo),e(Re,nQo),e(Re,Kv),e(Kv,age),e(age,sQo),e(Kv,lQo),e(Kv,qG),e(qG,iQo),e(Kv,dQo),e(Ke,cQo),e(Ke,Zv),e(Zv,fQo),e(Zv,nge),e(nge,mQo),e(Zv,gQo),e(Zv,sge),e(sge,hQo),e(Ke,pQo),e(Ke,lge),e(lge,_Qo),e(Ke,uQo),g(fw,Ke,null),b(c,MBe,u),b(c,zd,u),e(zd,eF),e(eF,ige),g(mw,ige,null),e(zd,bQo),e(zd,dge),e(dge,vQo),b(c,EBe,u),b(c,mr,u),g(gw,mr,null),e(mr,FQo),e(mr,Qd),e(Qd,TQo),e(Qd,NG),e(NG,MQo),e(Qd,EQo),e(Qd,jG),e(jG,CQo),e(Qd,wQo),e(mr,AQo),e(mr,hw),e(hw,yQo),e(hw,cge),e(cge,LQo),e(hw,xQo),e(mr,kQo),e(mr,st),g(pw,st,null),e(st,SQo),e(st,fge),e(fge,RQo),e(st,BQo),e(st,Wd),e(Wd,PQo),e(Wd,mge),e(mge,$Qo),e(Wd,IQo),e(Wd,DG),e(DG,qQo),e(Wd,NQo),e(st,jQo),e(st,gge),e(gge,DQo),e(st,GQo),g(_w,st,null),e(mr,OQo),e(mr,Ze),g(uw,Ze,null),e(Ze,VQo),e(Ze,hge),e(hge,XQo),e(Ze,zQo),e(Ze,ln),e(ln,QQo),e(ln,pge),e(pge,WQo),e(ln,HQo),e(ln,_ge),e(_ge,UQo),e(ln,JQo),e(ln,uge),e(uge,YQo),e(ln,KQo),e(Ze,ZQo),e(Ze,bw),e(bw,oF),e(oF,bge),e(bge,eWo),e(oF,oWo),e(oF,GG),e(GG,rWo),e(oF,tWo),e(bw,aWo),e(bw,rF),e(rF,vge),e(vge,nWo),e(rF,sWo),e(rF,OG),e(OG,lWo),e(rF,iWo),e(Ze,dWo),e(Ze,tF),e(tF,cWo),e(tF,Fge),e(Fge,fWo),e(tF,mWo),e(tF,Tge),e(Tge,gWo),e(Ze,hWo),e(Ze,Mge),e(Mge,pWo),e(Ze,_Wo),g(vw,Ze,null),b(c,CBe,u),b(c,Hd,u),e(Hd,aF),e(aF,Ege),g(Fw,Ege,null),e(Hd,uWo),e(Hd,Cge),e(Cge,bWo),b(c,wBe,u),b(c,gr,u),g(Tw,gr,null),e(gr,vWo),e(gr,Ud),e(Ud,FWo),e(Ud,VG),e(VG,TWo),e(Ud,MWo),e(Ud,XG),e(XG,EWo),e(Ud,CWo),e(gr,wWo),e(gr,Mw),e(Mw,AWo),e(Mw,wge),e(wge,yWo),e(Mw,LWo),e(gr,xWo),e(gr,lt),g(Ew,lt,null),e(lt,kWo),e(lt,Age),e(Age,SWo),e(lt,RWo),e(lt,Jd),e(Jd,BWo),e(Jd,yge),e(yge,PWo),e(Jd,$Wo),e(Jd,zG),e(zG,IWo),e(Jd,qWo),e(lt,NWo),e(lt,Lge),e(Lge,jWo),e(lt,DWo),g(Cw,lt,null),e(gr,GWo),e(gr,eo),g(ww,eo,null),e(eo,OWo),e(eo,xge),e(xge,VWo),e(eo,XWo),e(eo,dn),e(dn,zWo),e(dn,kge),e(kge,QWo),e(dn,WWo),e(dn,Sge),e(Sge,HWo),e(dn,UWo),e(dn,Rge),e(Rge,JWo),e(dn,YWo),e(eo,KWo),e(eo,cn),e(cn,nF),e(nF,Bge),e(Bge,ZWo),e(nF,eHo),e(nF,QG),e(QG,oHo),e(nF,rHo),e(cn,tHo),e(cn,sF),e(sF,Pge),e(Pge,aHo),e(sF,nHo),e(sF,WG),e(WG,sHo),e(sF,lHo),e(cn,iHo),e(cn,lF),e(lF,$ge),e($ge,dHo),e(lF,cHo),e(lF,HG),e(HG,fHo),e(lF,mHo),e(cn,gHo),e(cn,iF),e(iF,Ige),e(Ige,hHo),e(iF,pHo),e(iF,UG),e(UG,_Ho),e(iF,uHo),e(eo,bHo),e(eo,dF),e(dF,vHo),e(dF,qge),e(qge,FHo),e(dF,THo),e(dF,Nge),e(Nge,MHo),e(eo,EHo),e(eo,jge),e(jge,CHo),e(eo,wHo),g(Aw,eo,null),b(c,ABe,u),b(c,Yd,u),e(Yd,cF),e(cF,Dge),g(yw,Dge,null),e(Yd,AHo),e(Yd,Gge),e(Gge,yHo),b(c,yBe,u),b(c,hr,u),g(Lw,hr,null),e(hr,LHo),e(hr,Kd),e(Kd,xHo),e(Kd,JG),e(JG,kHo),e(Kd,SHo),e(Kd,YG),e(YG,RHo),e(Kd,BHo),e(hr,PHo),e(hr,xw),e(xw,$Ho),e(xw,Oge),e(Oge,IHo),e(xw,qHo),e(hr,NHo),e(hr,it),g(kw,it,null),e(it,jHo),e(it,Vge),e(Vge,DHo),e(it,GHo),e(it,Zd),e(Zd,OHo),e(Zd,Xge),e(Xge,VHo),e(Zd,XHo),e(Zd,KG),e(KG,zHo),e(Zd,QHo),e(it,WHo),e(it,zge),e(zge,HHo),e(it,UHo),g(Sw,it,null),e(hr,JHo),e(hr,oo),g(Rw,oo,null),e(oo,YHo),e(oo,Qge),e(Qge,KHo),e(oo,ZHo),e(oo,fn),e(fn,eUo),e(fn,Wge),e(Wge,oUo),e(fn,rUo),e(fn,Hge),e(Hge,tUo),e(fn,aUo),e(fn,Uge),e(Uge,nUo),e(fn,sUo),e(oo,lUo),e(oo,ec),e(ec,fF),e(fF,Jge),e(Jge,iUo),e(fF,dUo),e(fF,ZG),e(ZG,cUo),e(fF,fUo),e(ec,mUo),e(ec,mF),e(mF,Yge),e(Yge,gUo),e(mF,hUo),e(mF,eO),e(eO,pUo),e(mF,_Uo),e(ec,uUo),e(ec,gF),e(gF,Kge),e(Kge,bUo),e(gF,vUo),e(gF,oO),e(oO,FUo),e(gF,TUo),e(oo,MUo),e(oo,hF),e(hF,EUo),e(hF,Zge),e(Zge,CUo),e(hF,wUo),e(hF,ehe),e(ehe,AUo),e(oo,yUo),e(oo,ohe),e(ohe,LUo),e(oo,xUo),g(Bw,oo,null),b(c,LBe,u),b(c,oc,u),e(oc,pF),e(pF,rhe),g(Pw,rhe,null),e(oc,kUo),e(oc,the),e(the,SUo),b(c,xBe,u),b(c,pr,u),g($w,pr,null),e(pr,RUo),e(pr,rc),e(rc,BUo),e(rc,rO),e(rO,PUo),e(rc,$Uo),e(rc,tO),e(tO,IUo),e(rc,qUo),e(pr,NUo),e(pr,Iw),e(Iw,jUo),e(Iw,ahe),e(ahe,DUo),e(Iw,GUo),e(pr,OUo),e(pr,dt),g(qw,dt,null),e(dt,VUo),e(dt,nhe),e(nhe,XUo),e(dt,zUo),e(dt,tc),e(tc,QUo),e(tc,she),e(she,WUo),e(tc,HUo),e(tc,aO),e(aO,UUo),e(tc,JUo),e(dt,YUo),e(dt,lhe),e(lhe,KUo),e(dt,ZUo),g(Nw,dt,null),e(pr,eJo),e(pr,ro),g(jw,ro,null),e(ro,oJo),e(ro,ihe),e(ihe,rJo),e(ro,tJo),e(ro,mn),e(mn,aJo),e(mn,dhe),e(dhe,nJo),e(mn,sJo),e(mn,che),e(che,lJo),e(mn,iJo),e(mn,fhe),e(fhe,dJo),e(mn,cJo),e(ro,fJo),e(ro,mhe),e(mhe,_F),e(_F,ghe),e(ghe,mJo),e(_F,gJo),e(_F,nO),e(nO,hJo),e(_F,pJo),e(ro,_Jo),e(ro,uF),e(uF,uJo),e(uF,hhe),e(hhe,bJo),e(uF,vJo),e(uF,phe),e(phe,FJo),e(ro,TJo),e(ro,_he),e(_he,MJo),e(ro,EJo),g(Dw,ro,null),b(c,kBe,u),b(c,ac,u),e(ac,bF),e(bF,uhe),g(Gw,uhe,null),e(ac,CJo),e(ac,bhe),e(bhe,wJo),b(c,SBe,u),b(c,_r,u),g(Ow,_r,null),e(_r,AJo),e(_r,nc),e(nc,yJo),e(nc,sO),e(sO,LJo),e(nc,xJo),e(nc,lO),e(lO,kJo),e(nc,SJo),e(_r,RJo),e(_r,Vw),e(Vw,BJo),e(Vw,vhe),e(vhe,PJo),e(Vw,$Jo),e(_r,IJo),e(_r,ct),g(Xw,ct,null),e(ct,qJo),e(ct,Fhe),e(Fhe,NJo),e(ct,jJo),e(ct,sc),e(sc,DJo),e(sc,The),e(The,GJo),e(sc,OJo),e(sc,iO),e(iO,VJo),e(sc,XJo),e(ct,zJo),e(ct,Mhe),e(Mhe,QJo),e(ct,WJo),g(zw,ct,null),e(_r,HJo),e(_r,to),g(Qw,to,null),e(to,UJo),e(to,Ehe),e(Ehe,JJo),e(to,YJo),e(to,gn),e(gn,KJo),e(gn,Che),e(Che,ZJo),e(gn,eYo),e(gn,whe),e(whe,oYo),e(gn,rYo),e(gn,Ahe),e(Ahe,tYo),e(gn,aYo),e(to,nYo),e(to,yhe),e(yhe,vF),e(vF,Lhe),e(Lhe,sYo),e(vF,lYo),e(vF,dO),e(dO,iYo),e(vF,dYo),e(to,cYo),e(to,FF),e(FF,fYo),e(FF,xhe),e(xhe,mYo),e(FF,gYo),e(FF,khe),e(khe,hYo),e(to,pYo),e(to,She),e(She,_Yo),e(to,uYo),g(Ww,to,null),b(c,RBe,u),b(c,lc,u),e(lc,TF),e(TF,Rhe),g(Hw,Rhe,null),e(lc,bYo),e(lc,Bhe),e(Bhe,vYo),b(c,BBe,u),b(c,ur,u),g(Uw,ur,null),e(ur,FYo),e(ur,ic),e(ic,TYo),e(ic,cO),e(cO,MYo),e(ic,EYo),e(ic,fO),e(fO,CYo),e(ic,wYo),e(ur,AYo),e(ur,Jw),e(Jw,yYo),e(Jw,Phe),e(Phe,LYo),e(Jw,xYo),e(ur,kYo),e(ur,ft),g(Yw,ft,null),e(ft,SYo),e(ft,$he),e($he,RYo),e(ft,BYo),e(ft,dc),e(dc,PYo),e(dc,Ihe),e(Ihe,$Yo),e(dc,IYo),e(dc,mO),e(mO,qYo),e(dc,NYo),e(ft,jYo),e(ft,qhe),e(qhe,DYo),e(ft,GYo),g(Kw,ft,null),e(ur,OYo),e(ur,ao),g(Zw,ao,null),e(ao,VYo),e(ao,Nhe),e(Nhe,XYo),e(ao,zYo),e(ao,hn),e(hn,QYo),e(hn,jhe),e(jhe,WYo),e(hn,HYo),e(hn,Dhe),e(Dhe,UYo),e(hn,JYo),e(hn,Ghe),e(Ghe,YYo),e(hn,KYo),e(ao,ZYo),e(ao,pn),e(pn,MF),e(MF,Ohe),e(Ohe,eKo),e(MF,oKo),e(MF,gO),e(gO,rKo),e(MF,tKo),e(pn,aKo),e(pn,EF),e(EF,Vhe),e(Vhe,nKo),e(EF,sKo),e(EF,hO),e(hO,lKo),e(EF,iKo),e(pn,dKo),e(pn,CF),e(CF,Xhe),e(Xhe,cKo),e(CF,fKo),e(CF,pO),e(pO,mKo),e(CF,gKo),e(pn,hKo),e(pn,wF),e(wF,zhe),e(zhe,pKo),e(wF,_Ko),e(wF,_O),e(_O,uKo),e(wF,bKo),e(ao,vKo),e(ao,AF),e(AF,FKo),e(AF,Qhe),e(Qhe,TKo),e(AF,MKo),e(AF,Whe),e(Whe,EKo),e(ao,CKo),e(ao,Hhe),e(Hhe,wKo),e(ao,AKo),g(eA,ao,null),b(c,PBe,u),b(c,cc,u),e(cc,yF),e(yF,Uhe),g(oA,Uhe,null),e(cc,yKo),e(cc,Jhe),e(Jhe,LKo),b(c,$Be,u),b(c,br,u),g(rA,br,null),e(br,xKo),e(br,fc),e(fc,kKo),e(fc,uO),e(uO,SKo),e(fc,RKo),e(fc,bO),e(bO,BKo),e(fc,PKo),e(br,$Ko),e(br,tA),e(tA,IKo),e(tA,Yhe),e(Yhe,qKo),e(tA,NKo),e(br,jKo),e(br,mt),g(aA,mt,null),e(mt,DKo),e(mt,Khe),e(Khe,GKo),e(mt,OKo),e(mt,mc),e(mc,VKo),e(mc,Zhe),e(Zhe,XKo),e(mc,zKo),e(mc,vO),e(vO,QKo),e(mc,WKo),e(mt,HKo),e(mt,epe),e(epe,UKo),e(mt,JKo),g(nA,mt,null),e(br,YKo),e(br,no),g(sA,no,null),e(no,KKo),e(no,ope),e(ope,ZKo),e(no,eZo),e(no,_n),e(_n,oZo),e(_n,rpe),e(rpe,rZo),e(_n,tZo),e(_n,tpe),e(tpe,aZo),e(_n,nZo),e(_n,ape),e(ape,sZo),e(_n,lZo),e(no,iZo),e(no,npe),e(npe,LF),e(LF,spe),e(spe,dZo),e(LF,cZo),e(LF,FO),e(FO,fZo),e(LF,mZo),e(no,gZo),e(no,xF),e(xF,hZo),e(xF,lpe),e(lpe,pZo),e(xF,_Zo),e(xF,ipe),e(ipe,uZo),e(no,bZo),e(no,dpe),e(dpe,vZo),e(no,FZo),g(lA,no,null),b(c,IBe,u),b(c,gc,u),e(gc,kF),e(kF,cpe),g(iA,cpe,null),e(gc,TZo),e(gc,fpe),e(fpe,MZo),b(c,qBe,u),b(c,vr,u),g(dA,vr,null),e(vr,EZo),e(vr,hc),e(hc,CZo),e(hc,TO),e(TO,wZo),e(hc,AZo),e(hc,MO),e(MO,yZo),e(hc,LZo),e(vr,xZo),e(vr,cA),e(cA,kZo),e(cA,mpe),e(mpe,SZo),e(cA,RZo),e(vr,BZo),e(vr,gt),g(fA,gt,null),e(gt,PZo),e(gt,gpe),e(gpe,$Zo),e(gt,IZo),e(gt,pc),e(pc,qZo),e(pc,hpe),e(hpe,NZo),e(pc,jZo),e(pc,EO),e(EO,DZo),e(pc,GZo),e(gt,OZo),e(gt,ppe),e(ppe,VZo),e(gt,XZo),g(mA,gt,null),e(vr,zZo),e(vr,ho),g(gA,ho,null),e(ho,QZo),e(ho,_pe),e(_pe,WZo),e(ho,HZo),e(ho,un),e(un,UZo),e(un,upe),e(upe,JZo),e(un,YZo),e(un,bpe),e(bpe,KZo),e(un,ZZo),e(un,vpe),e(vpe,eer),e(un,oer),e(ho,rer),e(ho,x),e(x,SF),e(SF,Fpe),e(Fpe,ter),e(SF,aer),e(SF,CO),e(CO,ner),e(SF,ser),e(x,ler),e(x,RF),e(RF,Tpe),e(Tpe,ier),e(RF,der),e(RF,wO),e(wO,cer),e(RF,fer),e(x,mer),e(x,BF),e(BF,Mpe),e(Mpe,ger),e(BF,her),e(BF,AO),e(AO,per),e(BF,_er),e(x,uer),e(x,PF),e(PF,Epe),e(Epe,ber),e(PF,ver),e(PF,yO),e(yO,Fer),e(PF,Ter),e(x,Mer),e(x,$F),e($F,Cpe),e(Cpe,Eer),e($F,Cer),e($F,LO),e(LO,wer),e($F,Aer),e(x,yer),e(x,IF),e(IF,wpe),e(wpe,Ler),e(IF,xer),e(IF,xO),e(xO,ker),e(IF,Ser),e(x,Rer),e(x,qF),e(qF,Ape),e(Ape,Ber),e(qF,Per),e(qF,kO),e(kO,$er),e(qF,Ier),e(x,qer),e(x,NF),e(NF,ype),e(ype,Ner),e(NF,jer),e(NF,SO),e(SO,Der),e(NF,Ger),e(x,Oer),e(x,jF),e(jF,Lpe),e(Lpe,Ver),e(jF,Xer),e(jF,RO),e(RO,zer),e(jF,Qer),e(x,Wer),e(x,DF),e(DF,xpe),e(xpe,Her),e(DF,Uer),e(DF,BO),e(BO,Jer),e(DF,Yer),e(x,Ker),e(x,GF),e(GF,kpe),e(kpe,Zer),e(GF,eor),e(GF,PO),e(PO,oor),e(GF,ror),e(x,tor),e(x,OF),e(OF,Spe),e(Spe,aor),e(OF,nor),e(OF,$O),e($O,sor),e(OF,lor),e(x,ior),e(x,VF),e(VF,Rpe),e(Rpe,dor),e(VF,cor),e(VF,IO),e(IO,mor),e(VF,gor),e(x,hor),e(x,XF),e(XF,Bpe),e(Bpe,por),e(XF,_or),e(XF,qO),e(qO,uor),e(XF,bor),e(x,vor),e(x,zF),e(zF,Ppe),e(Ppe,For),e(zF,Tor),e(zF,NO),e(NO,Mor),e(zF,Eor),e(x,Cor),e(x,QF),e(QF,$pe),e($pe,wor),e(QF,Aor),e(QF,jO),e(jO,yor),e(QF,Lor),e(x,xor),e(x,Os),e(Os,Ipe),e(Ipe,kor),e(Os,Sor),e(Os,DO),e(DO,Ror),e(Os,Bor),e(Os,GO),e(GO,Por),e(Os,$or),e(x,Ior),e(x,WF),e(WF,qpe),e(qpe,qor),e(WF,Nor),e(WF,OO),e(OO,jor),e(WF,Dor),e(x,Gor),e(x,HF),e(HF,Npe),e(Npe,Oor),e(HF,Vor),e(HF,VO),e(VO,Xor),e(HF,zor),e(x,Qor),e(x,UF),e(UF,jpe),e(jpe,Wor),e(UF,Hor),e(UF,XO),e(XO,Uor),e(UF,Jor),e(x,Yor),e(x,JF),e(JF,Dpe),e(Dpe,Kor),e(JF,Zor),e(JF,zO),e(zO,err),e(JF,orr),e(x,rrr),e(x,YF),e(YF,Gpe),e(Gpe,trr),e(YF,arr),e(YF,QO),e(QO,nrr),e(YF,srr),e(x,lrr),e(x,KF),e(KF,Ope),e(Ope,irr),e(KF,drr),e(KF,WO),e(WO,crr),e(KF,frr),e(x,mrr),e(x,ZF),e(ZF,Vpe),e(Vpe,grr),e(ZF,hrr),e(ZF,HO),e(HO,prr),e(ZF,_rr),e(x,urr),e(x,e0),e(e0,Xpe),e(Xpe,brr),e(e0,vrr),e(e0,UO),e(UO,Frr),e(e0,Trr),e(x,Mrr),e(x,o0),e(o0,zpe),e(zpe,Err),e(o0,Crr),e(o0,JO),e(JO,wrr),e(o0,Arr),e(x,yrr),e(x,r0),e(r0,Qpe),e(Qpe,Lrr),e(r0,xrr),e(r0,YO),e(YO,krr),e(r0,Srr),e(x,Rrr),e(x,t0),e(t0,Wpe),e(Wpe,Brr),e(t0,Prr),e(t0,KO),e(KO,$rr),e(t0,Irr),e(x,qrr),e(x,a0),e(a0,Hpe),e(Hpe,Nrr),e(a0,jrr),e(a0,ZO),e(ZO,Drr),e(a0,Grr),e(x,Orr),e(x,n0),e(n0,Upe),e(Upe,Vrr),e(n0,Xrr),e(n0,eV),e(eV,zrr),e(n0,Qrr),e(x,Wrr),e(x,s0),e(s0,Jpe),e(Jpe,Hrr),e(s0,Urr),e(s0,oV),e(oV,Jrr),e(s0,Yrr),e(x,Krr),e(x,l0),e(l0,Ype),e(Ype,Zrr),e(l0,etr),e(l0,rV),e(rV,otr),e(l0,rtr),e(x,ttr),e(x,i0),e(i0,Kpe),e(Kpe,atr),e(i0,ntr),e(i0,tV),e(tV,str),e(i0,ltr),e(x,itr),e(x,d0),e(d0,Zpe),e(Zpe,dtr),e(d0,ctr),e(d0,aV),e(aV,ftr),e(d0,mtr),e(x,gtr),e(x,c0),e(c0,e_e),e(e_e,htr),e(c0,ptr),e(c0,nV),e(nV,_tr),e(c0,utr),e(x,btr),e(x,f0),e(f0,o_e),e(o_e,vtr),e(f0,Ftr),e(f0,sV),e(sV,Ttr),e(f0,Mtr),e(x,Etr),e(x,m0),e(m0,r_e),e(r_e,Ctr),e(m0,wtr),e(m0,lV),e(lV,Atr),e(m0,ytr),e(x,Ltr),e(x,g0),e(g0,t_e),e(t_e,xtr),e(g0,ktr),e(g0,iV),e(iV,Str),e(g0,Rtr),e(x,Btr),e(x,h0),e(h0,a_e),e(a_e,Ptr),e(h0,$tr),e(h0,dV),e(dV,Itr),e(h0,qtr),e(x,Ntr),e(x,p0),e(p0,n_e),e(n_e,jtr),e(p0,Dtr),e(p0,cV),e(cV,Gtr),e(p0,Otr),e(x,Vtr),e(x,_0),e(_0,s_e),e(s_e,Xtr),e(_0,ztr),e(_0,fV),e(fV,Qtr),e(_0,Wtr),e(x,Htr),e(x,u0),e(u0,l_e),e(l_e,Utr),e(u0,Jtr),e(u0,mV),e(mV,Ytr),e(u0,Ktr),e(x,Ztr),e(x,b0),e(b0,i_e),e(i_e,ear),e(b0,oar),e(b0,gV),e(gV,rar),e(b0,tar),e(x,aar),e(x,v0),e(v0,d_e),e(d_e,nar),e(v0,sar),e(v0,hV),e(hV,lar),e(v0,iar),e(ho,dar),e(ho,c_e),e(c_e,car),e(ho,far),g(hA,ho,null),b(c,NBe,u),b(c,_c,u),e(_c,F0),e(F0,f_e),g(pA,f_e,null),e(_c,mar),e(_c,m_e),e(m_e,gar),b(c,jBe,u),b(c,Fr,u),g(_A,Fr,null),e(Fr,har),e(Fr,uc),e(uc,par),e(uc,pV),e(pV,_ar),e(uc,uar),e(uc,_V),e(_V,bar),e(uc,Far),e(Fr,Tar),e(Fr,uA),e(uA,Mar),e(uA,g_e),e(g_e,Ear),e(uA,Car),e(Fr,war),e(Fr,ht),g(bA,ht,null),e(ht,Aar),e(ht,h_e),e(h_e,yar),e(ht,Lar),e(ht,bc),e(bc,xar),e(bc,p_e),e(p_e,kar),e(bc,Sar),e(bc,uV),e(uV,Rar),e(bc,Bar),e(ht,Par),e(ht,__e),e(__e,$ar),e(ht,Iar),g(vA,ht,null),e(Fr,qar),e(Fr,po),g(FA,po,null),e(po,Nar),e(po,u_e),e(u_e,jar),e(po,Dar),e(po,bn),e(bn,Gar),e(bn,b_e),e(b_e,Oar),e(bn,Var),e(bn,v_e),e(v_e,Xar),e(bn,zar),e(bn,F_e),e(F_e,Qar),e(bn,War),e(po,Har),e(po,H),e(H,T0),e(T0,T_e),e(T_e,Uar),e(T0,Jar),e(T0,bV),e(bV,Yar),e(T0,Kar),e(H,Zar),e(H,M0),e(M0,M_e),e(M_e,enr),e(M0,onr),e(M0,vV),e(vV,rnr),e(M0,tnr),e(H,anr),e(H,E0),e(E0,E_e),e(E_e,nnr),e(E0,snr),e(E0,FV),e(FV,lnr),e(E0,inr),e(H,dnr),e(H,C0),e(C0,C_e),e(C_e,cnr),e(C0,fnr),e(C0,TV),e(TV,mnr),e(C0,gnr),e(H,hnr),e(H,w0),e(w0,w_e),e(w_e,pnr),e(w0,_nr),e(w0,MV),e(MV,unr),e(w0,bnr),e(H,vnr),e(H,A0),e(A0,A_e),e(A_e,Fnr),e(A0,Tnr),e(A0,EV),e(EV,Mnr),e(A0,Enr),e(H,Cnr),e(H,y0),e(y0,y_e),e(y_e,wnr),e(y0,Anr),e(y0,CV),e(CV,ynr),e(y0,Lnr),e(H,xnr),e(H,L0),e(L0,L_e),e(L_e,knr),e(L0,Snr),e(L0,wV),e(wV,Rnr),e(L0,Bnr),e(H,Pnr),e(H,x0),e(x0,x_e),e(x_e,$nr),e(x0,Inr),e(x0,AV),e(AV,qnr),e(x0,Nnr),e(H,jnr),e(H,k0),e(k0,k_e),e(k_e,Dnr),e(k0,Gnr),e(k0,yV),e(yV,Onr),e(k0,Vnr),e(H,Xnr),e(H,S0),e(S0,S_e),e(S_e,znr),e(S0,Qnr),e(S0,LV),e(LV,Wnr),e(S0,Hnr),e(H,Unr),e(H,R0),e(R0,R_e),e(R_e,Jnr),e(R0,Ynr),e(R0,xV),e(xV,Knr),e(R0,Znr),e(H,esr),e(H,B0),e(B0,B_e),e(B_e,osr),e(B0,rsr),e(B0,kV),e(kV,tsr),e(B0,asr),e(H,nsr),e(H,P0),e(P0,P_e),e(P_e,ssr),e(P0,lsr),e(P0,SV),e(SV,isr),e(P0,dsr),e(H,csr),e(H,$0),e($0,$_e),e($_e,fsr),e($0,msr),e($0,RV),e(RV,gsr),e($0,hsr),e(H,psr),e(H,I0),e(I0,I_e),e(I_e,_sr),e(I0,usr),e(I0,BV),e(BV,bsr),e(I0,vsr),e(H,Fsr),e(H,q0),e(q0,q_e),e(q_e,Tsr),e(q0,Msr),e(q0,PV),e(PV,Esr),e(q0,Csr),e(H,wsr),e(H,N0),e(N0,N_e),e(N_e,Asr),e(N0,ysr),e(N0,$V),e($V,Lsr),e(N0,xsr),e(H,ksr),e(H,j0),e(j0,j_e),e(j_e,Ssr),e(j0,Rsr),e(j0,IV),e(IV,Bsr),e(j0,Psr),e(H,$sr),e(H,D0),e(D0,D_e),e(D_e,Isr),e(D0,qsr),e(D0,qV),e(qV,Nsr),e(D0,jsr),e(H,Dsr),e(H,G0),e(G0,G_e),e(G_e,Gsr),e(G0,Osr),e(G0,NV),e(NV,Vsr),e(G0,Xsr),e(H,zsr),e(H,O0),e(O0,O_e),e(O_e,Qsr),e(O0,Wsr),e(O0,jV),e(jV,Hsr),e(O0,Usr),e(H,Jsr),e(H,V0),e(V0,V_e),e(V_e,Ysr),e(V0,Ksr),e(V0,DV),e(DV,Zsr),e(V0,elr),e(po,olr),e(po,X_e),e(X_e,rlr),e(po,tlr),g(TA,po,null),b(c,DBe,u),b(c,vc,u),e(vc,X0),e(X0,z_e),g(MA,z_e,null),e(vc,alr),e(vc,Q_e),e(Q_e,nlr),b(c,GBe,u),b(c,Tr,u),g(EA,Tr,null),e(Tr,slr),e(Tr,Fc),e(Fc,llr),e(Fc,GV),e(GV,ilr),e(Fc,dlr),e(Fc,OV),e(OV,clr),e(Fc,flr),e(Tr,mlr),e(Tr,CA),e(CA,glr),e(CA,W_e),e(W_e,hlr),e(CA,plr),e(Tr,_lr),e(Tr,pt),g(wA,pt,null),e(pt,ulr),e(pt,H_e),e(H_e,blr),e(pt,vlr),e(pt,Tc),e(Tc,Flr),e(Tc,U_e),e(U_e,Tlr),e(Tc,Mlr),e(Tc,VV),e(VV,Elr),e(Tc,Clr),e(pt,wlr),e(pt,J_e),e(J_e,Alr),e(pt,ylr),g(AA,pt,null),e(Tr,Llr),e(Tr,_o),g(yA,_o,null),e(_o,xlr),e(_o,Y_e),e(Y_e,klr),e(_o,Slr),e(_o,vn),e(vn,Rlr),e(vn,K_e),e(K_e,Blr),e(vn,Plr),e(vn,Z_e),e(Z_e,$lr),e(vn,Ilr),e(vn,eue),e(eue,qlr),e(vn,Nlr),e(_o,jlr),e(_o,fe),e(fe,z0),e(z0,oue),e(oue,Dlr),e(z0,Glr),e(z0,XV),e(XV,Olr),e(z0,Vlr),e(fe,Xlr),e(fe,Q0),e(Q0,rue),e(rue,zlr),e(Q0,Qlr),e(Q0,zV),e(zV,Wlr),e(Q0,Hlr),e(fe,Ulr),e(fe,W0),e(W0,tue),e(tue,Jlr),e(W0,Ylr),e(W0,QV),e(QV,Klr),e(W0,Zlr),e(fe,eir),e(fe,H0),e(H0,aue),e(aue,oir),e(H0,rir),e(H0,WV),e(WV,tir),e(H0,air),e(fe,nir),e(fe,U0),e(U0,nue),e(nue,sir),e(U0,lir),e(U0,HV),e(HV,iir),e(U0,dir),e(fe,cir),e(fe,J0),e(J0,sue),e(sue,fir),e(J0,mir),e(J0,UV),e(UV,gir),e(J0,hir),e(fe,pir),e(fe,Y0),e(Y0,lue),e(lue,_ir),e(Y0,uir),e(Y0,JV),e(JV,bir),e(Y0,vir),e(fe,Fir),e(fe,K0),e(K0,iue),e(iue,Tir),e(K0,Mir),e(K0,YV),e(YV,Eir),e(K0,Cir),e(fe,wir),e(fe,Z0),e(Z0,due),e(due,Air),e(Z0,yir),e(Z0,KV),e(KV,Lir),e(Z0,xir),e(fe,kir),e(fe,eT),e(eT,cue),e(cue,Sir),e(eT,Rir),e(eT,ZV),e(ZV,Bir),e(eT,Pir),e(fe,$ir),e(fe,oT),e(oT,fue),e(fue,Iir),e(oT,qir),e(oT,eX),e(eX,Nir),e(oT,jir),e(fe,Dir),e(fe,rT),e(rT,mue),e(mue,Gir),e(rT,Oir),e(rT,oX),e(oX,Vir),e(rT,Xir),e(_o,zir),e(_o,gue),e(gue,Qir),e(_o,Wir),g(LA,_o,null),b(c,OBe,u),b(c,Mc,u),e(Mc,tT),e(tT,hue),g(xA,hue,null),e(Mc,Hir),e(Mc,pue),e(pue,Uir),b(c,VBe,u),b(c,Mr,u),g(kA,Mr,null),e(Mr,Jir),e(Mr,Ec),e(Ec,Yir),e(Ec,rX),e(rX,Kir),e(Ec,Zir),e(Ec,tX),e(tX,edr),e(Ec,odr),e(Mr,rdr),e(Mr,SA),e(SA,tdr),e(SA,_ue),e(_ue,adr),e(SA,ndr),e(Mr,sdr),e(Mr,_t),g(RA,_t,null),e(_t,ldr),e(_t,uue),e(uue,idr),e(_t,ddr),e(_t,Cc),e(Cc,cdr),e(Cc,bue),e(bue,fdr),e(Cc,mdr),e(Cc,aX),e(aX,gdr),e(Cc,hdr),e(_t,pdr),e(_t,vue),e(vue,_dr),e(_t,udr),g(BA,_t,null),e(Mr,bdr),e(Mr,uo),g(PA,uo,null),e(uo,vdr),e(uo,Fue),e(Fue,Fdr),e(uo,Tdr),e(uo,Fn),e(Fn,Mdr),e(Fn,Tue),e(Tue,Edr),e(Fn,Cdr),e(Fn,Mue),e(Mue,wdr),e(Fn,Adr),e(Fn,Eue),e(Eue,ydr),e(Fn,Ldr),e(uo,xdr),e(uo,$A),e($A,aT),e(aT,Cue),e(Cue,kdr),e(aT,Sdr),e(aT,nX),e(nX,Rdr),e(aT,Bdr),e($A,Pdr),e($A,nT),e(nT,wue),e(wue,$dr),e(nT,Idr),e(nT,sX),e(sX,qdr),e(nT,Ndr),e(uo,jdr),e(uo,Aue),e(Aue,Ddr),e(uo,Gdr),g(IA,uo,null),b(c,XBe,u),b(c,wc,u),e(wc,sT),e(sT,yue),g(qA,yue,null),e(wc,Odr),e(wc,Lue),e(Lue,Vdr),b(c,zBe,u),b(c,Er,u),g(NA,Er,null),e(Er,Xdr),e(Er,Ac),e(Ac,zdr),e(Ac,lX),e(lX,Qdr),e(Ac,Wdr),e(Ac,iX),e(iX,Hdr),e(Ac,Udr),e(Er,Jdr),e(Er,jA),e(jA,Ydr),e(jA,xue),e(xue,Kdr),e(jA,Zdr),e(Er,ecr),e(Er,ut),g(DA,ut,null),e(ut,ocr),e(ut,kue),e(kue,rcr),e(ut,tcr),e(ut,yc),e(yc,acr),e(yc,Sue),e(Sue,ncr),e(yc,scr),e(yc,dX),e(dX,lcr),e(yc,icr),e(ut,dcr),e(ut,Rue),e(Rue,ccr),e(ut,fcr),g(GA,ut,null),e(Er,mcr),e(Er,bo),g(OA,bo,null),e(bo,gcr),e(bo,Bue),e(Bue,hcr),e(bo,pcr),e(bo,Tn),e(Tn,_cr),e(Tn,Pue),e(Pue,ucr),e(Tn,bcr),e(Tn,$ue),e($ue,vcr),e(Tn,Fcr),e(Tn,Iue),e(Iue,Tcr),e(Tn,Mcr),e(bo,Ecr),e(bo,J),e(J,lT),e(lT,que),e(que,Ccr),e(lT,wcr),e(lT,cX),e(cX,Acr),e(lT,ycr),e(J,Lcr),e(J,iT),e(iT,Nue),e(Nue,xcr),e(iT,kcr),e(iT,fX),e(fX,Scr),e(iT,Rcr),e(J,Bcr),e(J,dT),e(dT,jue),e(jue,Pcr),e(dT,$cr),e(dT,mX),e(mX,Icr),e(dT,qcr),e(J,Ncr),e(J,cT),e(cT,Due),e(Due,jcr),e(cT,Dcr),e(cT,gX),e(gX,Gcr),e(cT,Ocr),e(J,Vcr),e(J,fT),e(fT,Gue),e(Gue,Xcr),e(fT,zcr),e(fT,hX),e(hX,Qcr),e(fT,Wcr),e(J,Hcr),e(J,mT),e(mT,Oue),e(Oue,Ucr),e(mT,Jcr),e(mT,pX),e(pX,Ycr),e(mT,Kcr),e(J,Zcr),e(J,gT),e(gT,Vue),e(Vue,efr),e(gT,ofr),e(gT,_X),e(_X,rfr),e(gT,tfr),e(J,afr),e(J,hT),e(hT,Xue),e(Xue,nfr),e(hT,sfr),e(hT,uX),e(uX,lfr),e(hT,ifr),e(J,dfr),e(J,pT),e(pT,zue),e(zue,cfr),e(pT,ffr),e(pT,bX),e(bX,mfr),e(pT,gfr),e(J,hfr),e(J,_T),e(_T,Que),e(Que,pfr),e(_T,_fr),e(_T,vX),e(vX,ufr),e(_T,bfr),e(J,vfr),e(J,uT),e(uT,Wue),e(Wue,Ffr),e(uT,Tfr),e(uT,FX),e(FX,Mfr),e(uT,Efr),e(J,Cfr),e(J,bT),e(bT,Hue),e(Hue,wfr),e(bT,Afr),e(bT,TX),e(TX,yfr),e(bT,Lfr),e(J,xfr),e(J,vT),e(vT,Uue),e(Uue,kfr),e(vT,Sfr),e(vT,MX),e(MX,Rfr),e(vT,Bfr),e(J,Pfr),e(J,FT),e(FT,Jue),e(Jue,$fr),e(FT,Ifr),e(FT,EX),e(EX,qfr),e(FT,Nfr),e(J,jfr),e(J,TT),e(TT,Yue),e(Yue,Dfr),e(TT,Gfr),e(TT,CX),e(CX,Ofr),e(TT,Vfr),e(J,Xfr),e(J,MT),e(MT,Kue),e(Kue,zfr),e(MT,Qfr),e(MT,wX),e(wX,Wfr),e(MT,Hfr),e(J,Ufr),e(J,ET),e(ET,Zue),e(Zue,Jfr),e(ET,Yfr),e(ET,AX),e(AX,Kfr),e(ET,Zfr),e(J,emr),e(J,CT),e(CT,e6e),e(e6e,omr),e(CT,rmr),e(CT,yX),e(yX,tmr),e(CT,amr),e(J,nmr),e(J,wT),e(wT,o6e),e(o6e,smr),e(wT,lmr),e(wT,LX),e(LX,imr),e(wT,dmr),e(J,cmr),e(J,AT),e(AT,r6e),e(r6e,fmr),e(AT,mmr),e(AT,xX),e(xX,gmr),e(AT,hmr),e(bo,pmr),e(bo,t6e),e(t6e,_mr),e(bo,umr),g(VA,bo,null),b(c,QBe,u),b(c,Lc,u),e(Lc,yT),e(yT,a6e),g(XA,a6e,null),e(Lc,bmr),e(Lc,n6e),e(n6e,vmr),b(c,WBe,u),b(c,Cr,u),g(zA,Cr,null),e(Cr,Fmr),e(Cr,xc),e(xc,Tmr),e(xc,kX),e(kX,Mmr),e(xc,Emr),e(xc,SX),e(SX,Cmr),e(xc,wmr),e(Cr,Amr),e(Cr,QA),e(QA,ymr),e(QA,s6e),e(s6e,Lmr),e(QA,xmr),e(Cr,kmr),e(Cr,bt),g(WA,bt,null),e(bt,Smr),e(bt,l6e),e(l6e,Rmr),e(bt,Bmr),e(bt,kc),e(kc,Pmr),e(kc,i6e),e(i6e,$mr),e(kc,Imr),e(kc,RX),e(RX,qmr),e(kc,Nmr),e(bt,jmr),e(bt,d6e),e(d6e,Dmr),e(bt,Gmr),g(HA,bt,null),e(Cr,Omr),e(Cr,vo),g(UA,vo,null),e(vo,Vmr),e(vo,c6e),e(c6e,Xmr),e(vo,zmr),e(vo,Mn),e(Mn,Qmr),e(Mn,f6e),e(f6e,Wmr),e(Mn,Hmr),e(Mn,m6e),e(m6e,Umr),e(Mn,Jmr),e(Mn,g6e),e(g6e,Ymr),e(Mn,Kmr),e(vo,Zmr),e(vo,be),e(be,LT),e(LT,h6e),e(h6e,egr),e(LT,ogr),e(LT,BX),e(BX,rgr),e(LT,tgr),e(be,agr),e(be,xT),e(xT,p6e),e(p6e,ngr),e(xT,sgr),e(xT,PX),e(PX,lgr),e(xT,igr),e(be,dgr),e(be,kT),e(kT,_6e),e(_6e,cgr),e(kT,fgr),e(kT,$X),e($X,mgr),e(kT,ggr),e(be,hgr),e(be,ST),e(ST,u6e),e(u6e,pgr),e(ST,_gr),e(ST,IX),e(IX,ugr),e(ST,bgr),e(be,vgr),e(be,RT),e(RT,b6e),e(b6e,Fgr),e(RT,Tgr),e(RT,qX),e(qX,Mgr),e(RT,Egr),e(be,Cgr),e(be,BT),e(BT,v6e),e(v6e,wgr),e(BT,Agr),e(BT,NX),e(NX,ygr),e(BT,Lgr),e(be,xgr),e(be,PT),e(PT,F6e),e(F6e,kgr),e(PT,Sgr),e(PT,jX),e(jX,Rgr),e(PT,Bgr),e(be,Pgr),e(be,$T),e($T,T6e),e(T6e,$gr),e($T,Igr),e($T,DX),e(DX,qgr),e($T,Ngr),e(be,jgr),e(be,IT),e(IT,M6e),e(M6e,Dgr),e(IT,Ggr),e(IT,GX),e(GX,Ogr),e(IT,Vgr),e(be,Xgr),e(be,qT),e(qT,E6e),e(E6e,zgr),e(qT,Qgr),e(qT,OX),e(OX,Wgr),e(qT,Hgr),e(vo,Ugr),e(vo,C6e),e(C6e,Jgr),e(vo,Ygr),g(JA,vo,null),b(c,HBe,u),b(c,Sc,u),e(Sc,NT),e(NT,w6e),g(YA,w6e,null),e(Sc,Kgr),e(Sc,A6e),e(A6e,Zgr),b(c,UBe,u),b(c,wr,u),g(KA,wr,null),e(wr,ehr),e(wr,Rc),e(Rc,ohr),e(Rc,VX),e(VX,rhr),e(Rc,thr),e(Rc,XX),e(XX,ahr),e(Rc,nhr),e(wr,shr),e(wr,ZA),e(ZA,lhr),e(ZA,y6e),e(y6e,ihr),e(ZA,dhr),e(wr,chr),e(wr,vt),g(ey,vt,null),e(vt,fhr),e(vt,L6e),e(L6e,mhr),e(vt,ghr),e(vt,Bc),e(Bc,hhr),e(Bc,x6e),e(x6e,phr),e(Bc,_hr),e(Bc,zX),e(zX,uhr),e(Bc,bhr),e(vt,vhr),e(vt,k6e),e(k6e,Fhr),e(vt,Thr),g(oy,vt,null),e(wr,Mhr),e(wr,Fo),g(ry,Fo,null),e(Fo,Ehr),e(Fo,S6e),e(S6e,Chr),e(Fo,whr),e(Fo,En),e(En,Ahr),e(En,R6e),e(R6e,yhr),e(En,Lhr),e(En,B6e),e(B6e,xhr),e(En,khr),e(En,P6e),e(P6e,Shr),e(En,Rhr),e(Fo,Bhr),e(Fo,V),e(V,jT),e(jT,$6e),e($6e,Phr),e(jT,$hr),e(jT,QX),e(QX,Ihr),e(jT,qhr),e(V,Nhr),e(V,DT),e(DT,I6e),e(I6e,jhr),e(DT,Dhr),e(DT,WX),e(WX,Ghr),e(DT,Ohr),e(V,Vhr),e(V,GT),e(GT,q6e),e(q6e,Xhr),e(GT,zhr),e(GT,HX),e(HX,Qhr),e(GT,Whr),e(V,Hhr),e(V,OT),e(OT,N6e),e(N6e,Uhr),e(OT,Jhr),e(OT,UX),e(UX,Yhr),e(OT,Khr),e(V,Zhr),e(V,VT),e(VT,j6e),e(j6e,epr),e(VT,opr),e(VT,JX),e(JX,rpr),e(VT,tpr),e(V,apr),e(V,XT),e(XT,D6e),e(D6e,npr),e(XT,spr),e(XT,YX),e(YX,lpr),e(XT,ipr),e(V,dpr),e(V,zT),e(zT,G6e),e(G6e,cpr),e(zT,fpr),e(zT,KX),e(KX,mpr),e(zT,gpr),e(V,hpr),e(V,QT),e(QT,O6e),e(O6e,ppr),e(QT,_pr),e(QT,ZX),e(ZX,upr),e(QT,bpr),e(V,vpr),e(V,WT),e(WT,V6e),e(V6e,Fpr),e(WT,Tpr),e(WT,ez),e(ez,Mpr),e(WT,Epr),e(V,Cpr),e(V,HT),e(HT,X6e),e(X6e,wpr),e(HT,Apr),e(HT,oz),e(oz,ypr),e(HT,Lpr),e(V,xpr),e(V,UT),e(UT,z6e),e(z6e,kpr),e(UT,Spr),e(UT,rz),e(rz,Rpr),e(UT,Bpr),e(V,Ppr),e(V,JT),e(JT,Q6e),e(Q6e,$pr),e(JT,Ipr),e(JT,tz),e(tz,qpr),e(JT,Npr),e(V,jpr),e(V,YT),e(YT,W6e),e(W6e,Dpr),e(YT,Gpr),e(YT,az),e(az,Opr),e(YT,Vpr),e(V,Xpr),e(V,KT),e(KT,H6e),e(H6e,zpr),e(KT,Qpr),e(KT,nz),e(nz,Wpr),e(KT,Hpr),e(V,Upr),e(V,ZT),e(ZT,U6e),e(U6e,Jpr),e(ZT,Ypr),e(ZT,sz),e(sz,Kpr),e(ZT,Zpr),e(V,e_r),e(V,e7),e(e7,J6e),e(J6e,o_r),e(e7,r_r),e(e7,lz),e(lz,t_r),e(e7,a_r),e(V,n_r),e(V,o7),e(o7,Y6e),e(Y6e,s_r),e(o7,l_r),e(o7,iz),e(iz,i_r),e(o7,d_r),e(V,c_r),e(V,r7),e(r7,K6e),e(K6e,f_r),e(r7,m_r),e(r7,dz),e(dz,g_r),e(r7,h_r),e(V,p_r),e(V,t7),e(t7,Z6e),e(Z6e,__r),e(t7,u_r),e(t7,cz),e(cz,b_r),e(t7,v_r),e(V,F_r),e(V,a7),e(a7,e1e),e(e1e,T_r),e(a7,M_r),e(a7,fz),e(fz,E_r),e(a7,C_r),e(V,w_r),e(V,n7),e(n7,o1e),e(o1e,A_r),e(n7,y_r),e(n7,mz),e(mz,L_r),e(n7,x_r),e(V,k_r),e(V,s7),e(s7,r1e),e(r1e,S_r),e(s7,R_r),e(s7,gz),e(gz,B_r),e(s7,P_r),e(V,$_r),e(V,l7),e(l7,t1e),e(t1e,I_r),e(l7,q_r),e(l7,hz),e(hz,N_r),e(l7,j_r),e(V,D_r),e(V,i7),e(i7,a1e),e(a1e,G_r),e(i7,O_r),e(i7,pz),e(pz,V_r),e(i7,X_r),e(V,z_r),e(V,d7),e(d7,n1e),e(n1e,Q_r),e(d7,W_r),e(d7,_z),e(_z,H_r),e(d7,U_r),e(V,J_r),e(V,c7),e(c7,s1e),e(s1e,Y_r),e(c7,K_r),e(c7,uz),e(uz,Z_r),e(c7,eur),e(Fo,our),e(Fo,l1e),e(l1e,rur),e(Fo,tur),g(ty,Fo,null),b(c,JBe,u),b(c,Pc,u),e(Pc,f7),e(f7,i1e),g(ay,i1e,null),e(Pc,aur),e(Pc,d1e),e(d1e,nur),b(c,YBe,u),b(c,Ar,u),g(ny,Ar,null),e(Ar,sur),e(Ar,$c),e($c,lur),e($c,bz),e(bz,iur),e($c,dur),e($c,vz),e(vz,cur),e($c,fur),e(Ar,mur),e(Ar,sy),e(sy,gur),e(sy,c1e),e(c1e,hur),e(sy,pur),e(Ar,_ur),e(Ar,Ft),g(ly,Ft,null),e(Ft,uur),e(Ft,f1e),e(f1e,bur),e(Ft,vur),e(Ft,Ic),e(Ic,Fur),e(Ic,m1e),e(m1e,Tur),e(Ic,Mur),e(Ic,Fz),e(Fz,Eur),e(Ic,Cur),e(Ft,wur),e(Ft,g1e),e(g1e,Aur),e(Ft,yur),g(iy,Ft,null),e(Ar,Lur),e(Ar,To),g(dy,To,null),e(To,xur),e(To,h1e),e(h1e,kur),e(To,Sur),e(To,Cn),e(Cn,Rur),e(Cn,p1e),e(p1e,Bur),e(Cn,Pur),e(Cn,_1e),e(_1e,$ur),e(Cn,Iur),e(Cn,u1e),e(u1e,qur),e(Cn,Nur),e(To,jur),e(To,se),e(se,m7),e(m7,b1e),e(b1e,Dur),e(m7,Gur),e(m7,Tz),e(Tz,Our),e(m7,Vur),e(se,Xur),e(se,g7),e(g7,v1e),e(v1e,zur),e(g7,Qur),e(g7,Mz),e(Mz,Wur),e(g7,Hur),e(se,Uur),e(se,h7),e(h7,F1e),e(F1e,Jur),e(h7,Yur),e(h7,Ez),e(Ez,Kur),e(h7,Zur),e(se,e6r),e(se,p7),e(p7,T1e),e(T1e,o6r),e(p7,r6r),e(p7,Cz),e(Cz,t6r),e(p7,a6r),e(se,n6r),e(se,_7),e(_7,M1e),e(M1e,s6r),e(_7,l6r),e(_7,wz),e(wz,i6r),e(_7,d6r),e(se,c6r),e(se,u7),e(u7,E1e),e(E1e,f6r),e(u7,m6r),e(u7,Az),e(Az,g6r),e(u7,h6r),e(se,p6r),e(se,b7),e(b7,C1e),e(C1e,_6r),e(b7,u6r),e(b7,yz),e(yz,b6r),e(b7,v6r),e(se,F6r),e(se,v7),e(v7,w1e),e(w1e,T6r),e(v7,M6r),e(v7,Lz),e(Lz,E6r),e(v7,C6r),e(se,w6r),e(se,F7),e(F7,A1e),e(A1e,A6r),e(F7,y6r),e(F7,xz),e(xz,L6r),e(F7,x6r),e(se,k6r),e(se,T7),e(T7,y1e),e(y1e,S6r),e(T7,R6r),e(T7,kz),e(kz,B6r),e(T7,P6r),e(se,$6r),e(se,M7),e(M7,L1e),e(L1e,I6r),e(M7,q6r),e(M7,Sz),e(Sz,N6r),e(M7,j6r),e(se,D6r),e(se,E7),e(E7,x1e),e(x1e,G6r),e(E7,O6r),e(E7,Rz),e(Rz,V6r),e(E7,X6r),e(se,z6r),e(se,C7),e(C7,k1e),e(k1e,Q6r),e(C7,W6r),e(C7,Bz),e(Bz,H6r),e(C7,U6r),e(se,J6r),e(se,w7),e(w7,S1e),e(S1e,Y6r),e(w7,K6r),e(w7,Pz),e(Pz,Z6r),e(w7,e1r),e(se,o1r),e(se,A7),e(A7,R1e),e(R1e,r1r),e(A7,t1r),e(A7,$z),e($z,a1r),e(A7,n1r),e(se,s1r),e(se,y7),e(y7,B1e),e(B1e,l1r),e(y7,i1r),e(y7,Iz),e(Iz,d1r),e(y7,c1r),e(se,f1r),e(se,L7),e(L7,P1e),e(P1e,m1r),e(L7,g1r),e(L7,qz),e(qz,h1r),e(L7,p1r),e(To,_1r),e(To,$1e),e($1e,u1r),e(To,b1r),g(cy,To,null),b(c,KBe,u),b(c,qc,u),e(qc,x7),e(x7,I1e),g(fy,I1e,null),e(qc,v1r),e(qc,q1e),e(q1e,F1r),b(c,ZBe,u),b(c,yr,u),g(my,yr,null),e(yr,T1r),e(yr,Nc),e(Nc,M1r),e(Nc,Nz),e(Nz,E1r),e(Nc,C1r),e(Nc,jz),e(jz,w1r),e(Nc,A1r),e(yr,y1r),e(yr,gy),e(gy,L1r),e(gy,N1e),e(N1e,x1r),e(gy,k1r),e(yr,S1r),e(yr,Tt),g(hy,Tt,null),e(Tt,R1r),e(Tt,j1e),e(j1e,B1r),e(Tt,P1r),e(Tt,jc),e(jc,$1r),e(jc,D1e),e(D1e,I1r),e(jc,q1r),e(jc,Dz),e(Dz,N1r),e(jc,j1r),e(Tt,D1r),e(Tt,G1e),e(G1e,G1r),e(Tt,O1r),g(py,Tt,null),e(yr,V1r),e(yr,Mo),g(_y,Mo,null),e(Mo,X1r),e(Mo,O1e),e(O1e,z1r),e(Mo,Q1r),e(Mo,wn),e(wn,W1r),e(wn,V1e),e(V1e,H1r),e(wn,U1r),e(wn,X1e),e(X1e,J1r),e(wn,Y1r),e(wn,z1e),e(z1e,K1r),e(wn,Z1r),e(Mo,ebr),e(Mo,Q1e),e(Q1e,k7),e(k7,W1e),e(W1e,obr),e(k7,rbr),e(k7,Gz),e(Gz,tbr),e(k7,abr),e(Mo,nbr),e(Mo,H1e),e(H1e,sbr),e(Mo,lbr),g(uy,Mo,null),b(c,ePe,u),b(c,Dc,u),e(Dc,S7),e(S7,U1e),g(by,U1e,null),e(Dc,ibr),e(Dc,J1e),e(J1e,dbr),b(c,oPe,u),b(c,Lr,u),g(vy,Lr,null),e(Lr,cbr),e(Lr,Gc),e(Gc,fbr),e(Gc,Oz),e(Oz,mbr),e(Gc,gbr),e(Gc,Vz),e(Vz,hbr),e(Gc,pbr),e(Lr,_br),e(Lr,Fy),e(Fy,ubr),e(Fy,Y1e),e(Y1e,bbr),e(Fy,vbr),e(Lr,Fbr),e(Lr,Mt),g(Ty,Mt,null),e(Mt,Tbr),e(Mt,K1e),e(K1e,Mbr),e(Mt,Ebr),e(Mt,Oc),e(Oc,Cbr),e(Oc,Z1e),e(Z1e,wbr),e(Oc,Abr),e(Oc,Xz),e(Xz,ybr),e(Oc,Lbr),e(Mt,xbr),e(Mt,ebe),e(ebe,kbr),e(Mt,Sbr),g(My,Mt,null),e(Lr,Rbr),e(Lr,Eo),g(Ey,Eo,null),e(Eo,Bbr),e(Eo,obe),e(obe,Pbr),e(Eo,$br),e(Eo,An),e(An,Ibr),e(An,rbe),e(rbe,qbr),e(An,Nbr),e(An,tbe),e(tbe,jbr),e(An,Dbr),e(An,abe),e(abe,Gbr),e(An,Obr),e(Eo,Vbr),e(Eo,Y),e(Y,R7),e(R7,nbe),e(nbe,Xbr),e(R7,zbr),e(R7,zz),e(zz,Qbr),e(R7,Wbr),e(Y,Hbr),e(Y,B7),e(B7,sbe),e(sbe,Ubr),e(B7,Jbr),e(B7,Qz),e(Qz,Ybr),e(B7,Kbr),e(Y,Zbr),e(Y,P7),e(P7,lbe),e(lbe,e2r),e(P7,o2r),e(P7,Wz),e(Wz,r2r),e(P7,t2r),e(Y,a2r),e(Y,$7),e($7,ibe),e(ibe,n2r),e($7,s2r),e($7,Hz),e(Hz,l2r),e($7,i2r),e(Y,d2r),e(Y,I7),e(I7,dbe),e(dbe,c2r),e(I7,f2r),e(I7,Uz),e(Uz,m2r),e(I7,g2r),e(Y,h2r),e(Y,q7),e(q7,cbe),e(cbe,p2r),e(q7,_2r),e(q7,Jz),e(Jz,u2r),e(q7,b2r),e(Y,v2r),e(Y,N7),e(N7,fbe),e(fbe,F2r),e(N7,T2r),e(N7,Yz),e(Yz,M2r),e(N7,E2r),e(Y,C2r),e(Y,j7),e(j7,mbe),e(mbe,w2r),e(j7,A2r),e(j7,Kz),e(Kz,y2r),e(j7,L2r),e(Y,x2r),e(Y,D7),e(D7,gbe),e(gbe,k2r),e(D7,S2r),e(D7,Zz),e(Zz,R2r),e(D7,B2r),e(Y,P2r),e(Y,G7),e(G7,hbe),e(hbe,$2r),e(G7,I2r),e(G7,eQ),e(eQ,q2r),e(G7,N2r),e(Y,j2r),e(Y,O7),e(O7,pbe),e(pbe,D2r),e(O7,G2r),e(O7,oQ),e(oQ,O2r),e(O7,V2r),e(Y,X2r),e(Y,V7),e(V7,_be),e(_be,z2r),e(V7,Q2r),e(V7,rQ),e(rQ,W2r),e(V7,H2r),e(Y,U2r),e(Y,X7),e(X7,ube),e(ube,J2r),e(X7,Y2r),e(X7,tQ),e(tQ,K2r),e(X7,Z2r),e(Y,evr),e(Y,z7),e(z7,bbe),e(bbe,ovr),e(z7,rvr),e(z7,aQ),e(aQ,tvr),e(z7,avr),e(Y,nvr),e(Y,Q7),e(Q7,vbe),e(vbe,svr),e(Q7,lvr),e(Q7,nQ),e(nQ,ivr),e(Q7,dvr),e(Y,cvr),e(Y,W7),e(W7,Fbe),e(Fbe,fvr),e(W7,mvr),e(W7,sQ),e(sQ,gvr),e(W7,hvr),e(Y,pvr),e(Y,H7),e(H7,Tbe),e(Tbe,_vr),e(H7,uvr),e(H7,lQ),e(lQ,bvr),e(H7,vvr),e(Y,Fvr),e(Y,U7),e(U7,Mbe),e(Mbe,Tvr),e(U7,Mvr),e(U7,iQ),e(iQ,Evr),e(U7,Cvr),e(Y,wvr),e(Y,J7),e(J7,Ebe),e(Ebe,Avr),e(J7,yvr),e(J7,dQ),e(dQ,Lvr),e(J7,xvr),e(Y,kvr),e(Y,Y7),e(Y7,Cbe),e(Cbe,Svr),e(Y7,Rvr),e(Y7,cQ),e(cQ,Bvr),e(Y7,Pvr),e(Eo,$vr),e(Eo,wbe),e(wbe,Ivr),e(Eo,qvr),g(Cy,Eo,null),b(c,rPe,u),b(c,Vc,u),e(Vc,K7),e(K7,Abe),g(wy,Abe,null),e(Vc,Nvr),e(Vc,ybe),e(ybe,jvr),b(c,tPe,u),b(c,xr,u),g(Ay,xr,null),e(xr,Dvr),e(xr,Xc),e(Xc,Gvr),e(Xc,fQ),e(fQ,Ovr),e(Xc,Vvr),e(Xc,mQ),e(mQ,Xvr),e(Xc,zvr),e(xr,Qvr),e(xr,yy),e(yy,Wvr),e(yy,Lbe),e(Lbe,Hvr),e(yy,Uvr),e(xr,Jvr),e(xr,Et),g(Ly,Et,null),e(Et,Yvr),e(Et,xbe),e(xbe,Kvr),e(Et,Zvr),e(Et,zc),e(zc,eFr),e(zc,kbe),e(kbe,oFr),e(zc,rFr),e(zc,gQ),e(gQ,tFr),e(zc,aFr),e(Et,nFr),e(Et,Sbe),e(Sbe,sFr),e(Et,lFr),g(xy,Et,null),e(xr,iFr),e(xr,Co),g(ky,Co,null),e(Co,dFr),e(Co,Rbe),e(Rbe,cFr),e(Co,fFr),e(Co,yn),e(yn,mFr),e(yn,Bbe),e(Bbe,gFr),e(yn,hFr),e(yn,Pbe),e(Pbe,pFr),e(yn,_Fr),e(yn,$be),e($be,uFr),e(yn,bFr),e(Co,vFr),e(Co,K),e(K,Z7),e(Z7,Ibe),e(Ibe,FFr),e(Z7,TFr),e(Z7,hQ),e(hQ,MFr),e(Z7,EFr),e(K,CFr),e(K,eM),e(eM,qbe),e(qbe,wFr),e(eM,AFr),e(eM,pQ),e(pQ,yFr),e(eM,LFr),e(K,xFr),e(K,oM),e(oM,Nbe),e(Nbe,kFr),e(oM,SFr),e(oM,_Q),e(_Q,RFr),e(oM,BFr),e(K,PFr),e(K,rM),e(rM,jbe),e(jbe,$Fr),e(rM,IFr),e(rM,uQ),e(uQ,qFr),e(rM,NFr),e(K,jFr),e(K,tM),e(tM,Dbe),e(Dbe,DFr),e(tM,GFr),e(tM,bQ),e(bQ,OFr),e(tM,VFr),e(K,XFr),e(K,aM),e(aM,Gbe),e(Gbe,zFr),e(aM,QFr),e(aM,vQ),e(vQ,WFr),e(aM,HFr),e(K,UFr),e(K,nM),e(nM,Obe),e(Obe,JFr),e(nM,YFr),e(nM,FQ),e(FQ,KFr),e(nM,ZFr),e(K,e0r),e(K,sM),e(sM,Vbe),e(Vbe,o0r),e(sM,r0r),e(sM,TQ),e(TQ,t0r),e(sM,a0r),e(K,n0r),e(K,lM),e(lM,Xbe),e(Xbe,s0r),e(lM,l0r),e(lM,MQ),e(MQ,i0r),e(lM,d0r),e(K,c0r),e(K,iM),e(iM,zbe),e(zbe,f0r),e(iM,m0r),e(iM,EQ),e(EQ,g0r),e(iM,h0r),e(K,p0r),e(K,dM),e(dM,Qbe),e(Qbe,_0r),e(dM,u0r),e(dM,CQ),e(CQ,b0r),e(dM,v0r),e(K,F0r),e(K,cM),e(cM,Wbe),e(Wbe,T0r),e(cM,M0r),e(cM,wQ),e(wQ,E0r),e(cM,C0r),e(K,w0r),e(K,fM),e(fM,Hbe),e(Hbe,A0r),e(fM,y0r),e(fM,AQ),e(AQ,L0r),e(fM,x0r),e(K,k0r),e(K,mM),e(mM,Ube),e(Ube,S0r),e(mM,R0r),e(mM,yQ),e(yQ,B0r),e(mM,P0r),e(K,$0r),e(K,gM),e(gM,Jbe),e(Jbe,I0r),e(gM,q0r),e(gM,LQ),e(LQ,N0r),e(gM,j0r),e(K,D0r),e(K,hM),e(hM,Ybe),e(Ybe,G0r),e(hM,O0r),e(hM,xQ),e(xQ,V0r),e(hM,X0r),e(K,z0r),e(K,pM),e(pM,Kbe),e(Kbe,Q0r),e(pM,W0r),e(pM,kQ),e(kQ,H0r),e(pM,U0r),e(K,J0r),e(K,_M),e(_M,Zbe),e(Zbe,Y0r),e(_M,K0r),e(_M,SQ),e(SQ,Z0r),e(_M,eTr),e(K,oTr),e(K,uM),e(uM,e2e),e(e2e,rTr),e(uM,tTr),e(uM,RQ),e(RQ,aTr),e(uM,nTr),e(K,sTr),e(K,bM),e(bM,o2e),e(o2e,lTr),e(bM,iTr),e(bM,BQ),e(BQ,dTr),e(bM,cTr),e(Co,fTr),e(Co,r2e),e(r2e,mTr),e(Co,gTr),g(Sy,Co,null),b(c,aPe,u),b(c,Qc,u),e(Qc,vM),e(vM,t2e),g(Ry,t2e,null),e(Qc,hTr),e(Qc,a2e),e(a2e,pTr),b(c,nPe,u),b(c,kr,u),g(By,kr,null),e(kr,_Tr),e(kr,Wc),e(Wc,uTr),e(Wc,PQ),e(PQ,bTr),e(Wc,vTr),e(Wc,$Q),e($Q,FTr),e(Wc,TTr),e(kr,MTr),e(kr,Py),e(Py,ETr),e(Py,n2e),e(n2e,CTr),e(Py,wTr),e(kr,ATr),e(kr,Ct),g($y,Ct,null),e(Ct,yTr),e(Ct,s2e),e(s2e,LTr),e(Ct,xTr),e(Ct,Hc),e(Hc,kTr),e(Hc,l2e),e(l2e,STr),e(Hc,RTr),e(Hc,IQ),e(IQ,BTr),e(Hc,PTr),e(Ct,$Tr),e(Ct,i2e),e(i2e,ITr),e(Ct,qTr),g(Iy,Ct,null),e(kr,NTr),e(kr,wo),g(qy,wo,null),e(wo,jTr),e(wo,d2e),e(d2e,DTr),e(wo,GTr),e(wo,Ln),e(Ln,OTr),e(Ln,c2e),e(c2e,VTr),e(Ln,XTr),e(Ln,f2e),e(f2e,zTr),e(Ln,QTr),e(Ln,m2e),e(m2e,WTr),e(Ln,HTr),e(wo,UTr),e(wo,g2e),e(g2e,FM),e(FM,h2e),e(h2e,JTr),e(FM,YTr),e(FM,qQ),e(qQ,KTr),e(FM,ZTr),e(wo,e7r),e(wo,p2e),e(p2e,o7r),e(wo,r7r),g(Ny,wo,null),b(c,sPe,u),b(c,Uc,u),e(Uc,TM),e(TM,_2e),g(jy,_2e,null),e(Uc,t7r),e(Uc,u2e),e(u2e,a7r),b(c,lPe,u),b(c,Sr,u),g(Dy,Sr,null),e(Sr,n7r),e(Sr,Jc),e(Jc,s7r),e(Jc,NQ),e(NQ,l7r),e(Jc,i7r),e(Jc,jQ),e(jQ,d7r),e(Jc,c7r),e(Sr,f7r),e(Sr,Gy),e(Gy,m7r),e(Gy,b2e),e(b2e,g7r),e(Gy,h7r),e(Sr,p7r),e(Sr,wt),g(Oy,wt,null),e(wt,_7r),e(wt,v2e),e(v2e,u7r),e(wt,b7r),e(wt,Yc),e(Yc,v7r),e(Yc,F2e),e(F2e,F7r),e(Yc,T7r),e(Yc,DQ),e(DQ,M7r),e(Yc,E7r),e(wt,C7r),e(wt,T2e),e(T2e,w7r),e(wt,A7r),g(Vy,wt,null),e(Sr,y7r),e(Sr,Ao),g(Xy,Ao,null),e(Ao,L7r),e(Ao,M2e),e(M2e,x7r),e(Ao,k7r),e(Ao,xn),e(xn,S7r),e(xn,E2e),e(E2e,R7r),e(xn,B7r),e(xn,C2e),e(C2e,P7r),e(xn,$7r),e(xn,w2e),e(w2e,I7r),e(xn,q7r),e(Ao,N7r),e(Ao,A2e),e(A2e,MM),e(MM,y2e),e(y2e,j7r),e(MM,D7r),e(MM,GQ),e(GQ,G7r),e(MM,O7r),e(Ao,V7r),e(Ao,L2e),e(L2e,X7r),e(Ao,z7r),g(zy,Ao,null),b(c,iPe,u),b(c,Kc,u),e(Kc,EM),e(EM,x2e),g(Qy,x2e,null),e(Kc,Q7r),e(Kc,k2e),e(k2e,W7r),b(c,dPe,u),b(c,Rr,u),g(Wy,Rr,null),e(Rr,H7r),e(Rr,Zc),e(Zc,U7r),e(Zc,OQ),e(OQ,J7r),e(Zc,Y7r),e(Zc,VQ),e(VQ,K7r),e(Zc,Z7r),e(Rr,eMr),e(Rr,Hy),e(Hy,oMr),e(Hy,S2e),e(S2e,rMr),e(Hy,tMr),e(Rr,aMr),e(Rr,At),g(Uy,At,null),e(At,nMr),e(At,R2e),e(R2e,sMr),e(At,lMr),e(At,ef),e(ef,iMr),e(ef,B2e),e(B2e,dMr),e(ef,cMr),e(ef,XQ),e(XQ,fMr),e(ef,mMr),e(At,gMr),e(At,P2e),e(P2e,hMr),e(At,pMr),g(Jy,At,null),e(Rr,_Mr),e(Rr,yo),g(Yy,yo,null),e(yo,uMr),e(yo,$2e),e($2e,bMr),e(yo,vMr),e(yo,kn),e(kn,FMr),e(kn,I2e),e(I2e,TMr),e(kn,MMr),e(kn,q2e),e(q2e,EMr),e(kn,CMr),e(kn,N2e),e(N2e,wMr),e(kn,AMr),e(yo,yMr),e(yo,z),e(z,CM),e(CM,j2e),e(j2e,LMr),e(CM,xMr),e(CM,zQ),e(zQ,kMr),e(CM,SMr),e(z,RMr),e(z,wM),e(wM,D2e),e(D2e,BMr),e(wM,PMr),e(wM,QQ),e(QQ,$Mr),e(wM,IMr),e(z,qMr),e(z,AM),e(AM,G2e),e(G2e,NMr),e(AM,jMr),e(AM,WQ),e(WQ,DMr),e(AM,GMr),e(z,OMr),e(z,yM),e(yM,O2e),e(O2e,VMr),e(yM,XMr),e(yM,HQ),e(HQ,zMr),e(yM,QMr),e(z,WMr),e(z,LM),e(LM,V2e),e(V2e,HMr),e(LM,UMr),e(LM,UQ),e(UQ,JMr),e(LM,YMr),e(z,KMr),e(z,xM),e(xM,X2e),e(X2e,ZMr),e(xM,e4r),e(xM,JQ),e(JQ,o4r),e(xM,r4r),e(z,t4r),e(z,kM),e(kM,z2e),e(z2e,a4r),e(kM,n4r),e(kM,YQ),e(YQ,s4r),e(kM,l4r),e(z,i4r),e(z,SM),e(SM,Q2e),e(Q2e,d4r),e(SM,c4r),e(SM,KQ),e(KQ,f4r),e(SM,m4r),e(z,g4r),e(z,RM),e(RM,W2e),e(W2e,h4r),e(RM,p4r),e(RM,ZQ),e(ZQ,_4r),e(RM,u4r),e(z,b4r),e(z,BM),e(BM,H2e),e(H2e,v4r),e(BM,F4r),e(BM,eW),e(eW,T4r),e(BM,M4r),e(z,E4r),e(z,PM),e(PM,U2e),e(U2e,C4r),e(PM,w4r),e(PM,oW),e(oW,A4r),e(PM,y4r),e(z,L4r),e(z,$M),e($M,J2e),e(J2e,x4r),e($M,k4r),e($M,rW),e(rW,S4r),e($M,R4r),e(z,B4r),e(z,IM),e(IM,Y2e),e(Y2e,P4r),e(IM,$4r),e(IM,tW),e(tW,I4r),e(IM,q4r),e(z,N4r),e(z,qM),e(qM,K2e),e(K2e,j4r),e(qM,D4r),e(qM,aW),e(aW,G4r),e(qM,O4r),e(z,V4r),e(z,NM),e(NM,Z2e),e(Z2e,X4r),e(NM,z4r),e(NM,nW),e(nW,Q4r),e(NM,W4r),e(z,H4r),e(z,jM),e(jM,eve),e(eve,U4r),e(jM,J4r),e(jM,sW),e(sW,Y4r),e(jM,K4r),e(z,Z4r),e(z,DM),e(DM,ove),e(ove,eEr),e(DM,oEr),e(DM,lW),e(lW,rEr),e(DM,tEr),e(z,aEr),e(z,GM),e(GM,rve),e(rve,nEr),e(GM,sEr),e(GM,iW),e(iW,lEr),e(GM,iEr),e(z,dEr),e(z,OM),e(OM,tve),e(tve,cEr),e(OM,fEr),e(OM,dW),e(dW,mEr),e(OM,gEr),e(z,hEr),e(z,VM),e(VM,ave),e(ave,pEr),e(VM,_Er),e(VM,cW),e(cW,uEr),e(VM,bEr),e(z,vEr),e(z,XM),e(XM,nve),e(nve,FEr),e(XM,TEr),e(XM,fW),e(fW,MEr),e(XM,EEr),e(z,CEr),e(z,zM),e(zM,sve),e(sve,wEr),e(zM,AEr),e(zM,mW),e(mW,yEr),e(zM,LEr),e(z,xEr),e(z,QM),e(QM,lve),e(lve,kEr),e(QM,SEr),e(QM,gW),e(gW,REr),e(QM,BEr),e(z,PEr),e(z,WM),e(WM,ive),e(ive,$Er),e(WM,IEr),e(WM,hW),e(hW,qEr),e(WM,NEr),e(z,jEr),e(z,HM),e(HM,dve),e(dve,DEr),e(HM,GEr),e(HM,pW),e(pW,OEr),e(HM,VEr),e(yo,XEr),e(yo,cve),e(cve,zEr),e(yo,QEr),g(Ky,yo,null),b(c,cPe,u),b(c,of,u),e(of,UM),e(UM,fve),g(Zy,fve,null),e(of,WEr),e(of,mve),e(mve,HEr),b(c,fPe,u),b(c,Br,u),g(eL,Br,null),e(Br,UEr),e(Br,rf),e(rf,JEr),e(rf,_W),e(_W,YEr),e(rf,KEr),e(rf,uW),e(uW,ZEr),e(rf,eCr),e(Br,oCr),e(Br,oL),e(oL,rCr),e(oL,gve),e(gve,tCr),e(oL,aCr),e(Br,nCr),e(Br,yt),g(rL,yt,null),e(yt,sCr),e(yt,hve),e(hve,lCr),e(yt,iCr),e(yt,tf),e(tf,dCr),e(tf,pve),e(pve,cCr),e(tf,fCr),e(tf,bW),e(bW,mCr),e(tf,gCr),e(yt,hCr),e(yt,_ve),e(_ve,pCr),e(yt,_Cr),g(tL,yt,null),e(Br,uCr),e(Br,Lo),g(aL,Lo,null),e(Lo,bCr),e(Lo,uve),e(uve,vCr),e(Lo,FCr),e(Lo,Sn),e(Sn,TCr),e(Sn,bve),e(bve,MCr),e(Sn,ECr),e(Sn,vve),e(vve,CCr),e(Sn,wCr),e(Sn,Fve),e(Fve,ACr),e(Sn,yCr),e(Lo,LCr),e(Lo,ca),e(ca,JM),e(JM,Tve),e(Tve,xCr),e(JM,kCr),e(JM,vW),e(vW,SCr),e(JM,RCr),e(ca,BCr),e(ca,YM),e(YM,Mve),e(Mve,PCr),e(YM,$Cr),e(YM,FW),e(FW,ICr),e(YM,qCr),e(ca,NCr),e(ca,KM),e(KM,Eve),e(Eve,jCr),e(KM,DCr),e(KM,TW),e(TW,GCr),e(KM,OCr),e(ca,VCr),e(ca,ZM),e(ZM,Cve),e(Cve,XCr),e(ZM,zCr),e(ZM,MW),e(MW,QCr),e(ZM,WCr),e(ca,HCr),e(ca,e4),e(e4,wve),e(wve,UCr),e(e4,JCr),e(e4,EW),e(EW,YCr),e(e4,KCr),e(Lo,ZCr),e(Lo,Ave),e(Ave,e5r),e(Lo,o5r),g(nL,Lo,null),b(c,mPe,u),b(c,af,u),e(af,o4),e(o4,yve),g(sL,yve,null),e(af,r5r),e(af,Lve),e(Lve,t5r),b(c,gPe,u),b(c,Pr,u),g(lL,Pr,null),e(Pr,a5r),e(Pr,nf),e(nf,n5r),e(nf,CW),e(CW,s5r),e(nf,l5r),e(nf,wW),e(wW,i5r),e(nf,d5r),e(Pr,c5r),e(Pr,iL),e(iL,f5r),e(iL,xve),e(xve,m5r),e(iL,g5r),e(Pr,h5r),e(Pr,Lt),g(dL,Lt,null),e(Lt,p5r),e(Lt,kve),e(kve,_5r),e(Lt,u5r),e(Lt,sf),e(sf,b5r),e(sf,Sve),e(Sve,v5r),e(sf,F5r),e(sf,AW),e(AW,T5r),e(sf,M5r),e(Lt,E5r),e(Lt,Rve),e(Rve,C5r),e(Lt,w5r),g(cL,Lt,null),e(Pr,A5r),e(Pr,xo),g(fL,xo,null),e(xo,y5r),e(xo,Bve),e(Bve,L5r),e(xo,x5r),e(xo,Rn),e(Rn,k5r),e(Rn,Pve),e(Pve,S5r),e(Rn,R5r),e(Rn,$ve),e($ve,B5r),e(Rn,P5r),e(Rn,Ive),e(Ive,$5r),e(Rn,I5r),e(xo,q5r),e(xo,me),e(me,r4),e(r4,qve),e(qve,N5r),e(r4,j5r),e(r4,yW),e(yW,D5r),e(r4,G5r),e(me,O5r),e(me,t4),e(t4,Nve),e(Nve,V5r),e(t4,X5r),e(t4,LW),e(LW,z5r),e(t4,Q5r),e(me,W5r),e(me,a4),e(a4,jve),e(jve,H5r),e(a4,U5r),e(a4,xW),e(xW,J5r),e(a4,Y5r),e(me,K5r),e(me,n4),e(n4,Dve),e(Dve,Z5r),e(n4,e3r),e(n4,kW),e(kW,o3r),e(n4,r3r),e(me,t3r),e(me,s4),e(s4,Gve),e(Gve,a3r),e(s4,n3r),e(s4,SW),e(SW,s3r),e(s4,l3r),e(me,i3r),e(me,l4),e(l4,Ove),e(Ove,d3r),e(l4,c3r),e(l4,RW),e(RW,f3r),e(l4,m3r),e(me,g3r),e(me,i4),e(i4,Vve),e(Vve,h3r),e(i4,p3r),e(i4,BW),e(BW,_3r),e(i4,u3r),e(me,b3r),e(me,d4),e(d4,Xve),e(Xve,v3r),e(d4,F3r),e(d4,PW),e(PW,T3r),e(d4,M3r),e(me,E3r),e(me,c4),e(c4,zve),e(zve,C3r),e(c4,w3r),e(c4,$W),e($W,A3r),e(c4,y3r),e(me,L3r),e(me,f4),e(f4,Qve),e(Qve,x3r),e(f4,k3r),e(f4,IW),e(IW,S3r),e(f4,R3r),e(me,B3r),e(me,m4),e(m4,Wve),e(Wve,P3r),e(m4,$3r),e(m4,qW),e(qW,I3r),e(m4,q3r),e(me,N3r),e(me,g4),e(g4,Hve),e(Hve,j3r),e(g4,D3r),e(g4,NW),e(NW,G3r),e(g4,O3r),e(xo,V3r),e(xo,Uve),e(Uve,X3r),e(xo,z3r),g(mL,xo,null),b(c,hPe,u),b(c,lf,u),e(lf,h4),e(h4,Jve),g(gL,Jve,null),e(lf,Q3r),e(lf,Yve),e(Yve,W3r),b(c,pPe,u),b(c,$r,u),g(hL,$r,null),e($r,H3r),e($r,df),e(df,U3r),e(df,jW),e(jW,J3r),e(df,Y3r),e(df,DW),e(DW,K3r),e(df,Z3r),e($r,ewr),e($r,pL),e(pL,owr),e(pL,Kve),e(Kve,rwr),e(pL,twr),e($r,awr),e($r,xt),g(_L,xt,null),e(xt,nwr),e(xt,Zve),e(Zve,swr),e(xt,lwr),e(xt,cf),e(cf,iwr),e(cf,eFe),e(eFe,dwr),e(cf,cwr),e(cf,GW),e(GW,fwr),e(cf,mwr),e(xt,gwr),e(xt,oFe),e(oFe,hwr),e(xt,pwr),g(uL,xt,null),e($r,_wr),e($r,ko),g(bL,ko,null),e(ko,uwr),e(ko,rFe),e(rFe,bwr),e(ko,vwr),e(ko,Bn),e(Bn,Fwr),e(Bn,tFe),e(tFe,Twr),e(Bn,Mwr),e(Bn,aFe),e(aFe,Ewr),e(Bn,Cwr),e(Bn,nFe),e(nFe,wwr),e(Bn,Awr),e(ko,ywr),e(ko,ve),e(ve,p4),e(p4,sFe),e(sFe,Lwr),e(p4,xwr),e(p4,OW),e(OW,kwr),e(p4,Swr),e(ve,Rwr),e(ve,_4),e(_4,lFe),e(lFe,Bwr),e(_4,Pwr),e(_4,VW),e(VW,$wr),e(_4,Iwr),e(ve,qwr),e(ve,u4),e(u4,iFe),e(iFe,Nwr),e(u4,jwr),e(u4,XW),e(XW,Dwr),e(u4,Gwr),e(ve,Owr),e(ve,b4),e(b4,dFe),e(dFe,Vwr),e(b4,Xwr),e(b4,zW),e(zW,zwr),e(b4,Qwr),e(ve,Wwr),e(ve,v4),e(v4,cFe),e(cFe,Hwr),e(v4,Uwr),e(v4,QW),e(QW,Jwr),e(v4,Ywr),e(ve,Kwr),e(ve,F4),e(F4,fFe),e(fFe,Zwr),e(F4,eAr),e(F4,WW),e(WW,oAr),e(F4,rAr),e(ve,tAr),e(ve,T4),e(T4,mFe),e(mFe,aAr),e(T4,nAr),e(T4,HW),e(HW,sAr),e(T4,lAr),e(ve,iAr),e(ve,M4),e(M4,gFe),e(gFe,dAr),e(M4,cAr),e(M4,UW),e(UW,fAr),e(M4,mAr),e(ve,gAr),e(ve,E4),e(E4,hFe),e(hFe,hAr),e(E4,pAr),e(E4,JW),e(JW,_Ar),e(E4,uAr),e(ve,bAr),e(ve,C4),e(C4,pFe),e(pFe,vAr),e(C4,FAr),e(C4,YW),e(YW,TAr),e(C4,MAr),e(ko,EAr),e(ko,_Fe),e(_Fe,CAr),e(ko,wAr),g(vL,ko,null),b(c,_Pe,u),b(c,ff,u),e(ff,w4),e(w4,uFe),g(FL,uFe,null),e(ff,AAr),e(ff,bFe),e(bFe,yAr),b(c,uPe,u),b(c,Ir,u),g(TL,Ir,null),e(Ir,LAr),e(Ir,mf),e(mf,xAr),e(mf,KW),e(KW,kAr),e(mf,SAr),e(mf,ZW),e(ZW,RAr),e(mf,BAr),e(Ir,PAr),e(Ir,ML),e(ML,$Ar),e(ML,vFe),e(vFe,IAr),e(ML,qAr),e(Ir,NAr),e(Ir,kt),g(EL,kt,null),e(kt,jAr),e(kt,FFe),e(FFe,DAr),e(kt,GAr),e(kt,gf),e(gf,OAr),e(gf,TFe),e(TFe,VAr),e(gf,XAr),e(gf,eH),e(eH,zAr),e(gf,QAr),e(kt,WAr),e(kt,MFe),e(MFe,HAr),e(kt,UAr),g(CL,kt,null),e(Ir,JAr),e(Ir,So),g(wL,So,null),e(So,YAr),e(So,EFe),e(EFe,KAr),e(So,ZAr),e(So,Pn),e(Pn,eyr),e(Pn,CFe),e(CFe,oyr),e(Pn,ryr),e(Pn,wFe),e(wFe,tyr),e(Pn,ayr),e(Pn,AFe),e(AFe,nyr),e(Pn,syr),e(So,lyr),e(So,Ee),e(Ee,A4),e(A4,yFe),e(yFe,iyr),e(A4,dyr),e(A4,oH),e(oH,cyr),e(A4,fyr),e(Ee,myr),e(Ee,y4),e(y4,LFe),e(LFe,gyr),e(y4,hyr),e(y4,rH),e(rH,pyr),e(y4,_yr),e(Ee,uyr),e(Ee,L4),e(L4,xFe),e(xFe,byr),e(L4,vyr),e(L4,tH),e(tH,Fyr),e(L4,Tyr),e(Ee,Myr),e(Ee,x4),e(x4,kFe),e(kFe,Eyr),e(x4,Cyr),e(x4,aH),e(aH,wyr),e(x4,Ayr),e(Ee,yyr),e(Ee,k4),e(k4,SFe),e(SFe,Lyr),e(k4,xyr),e(k4,nH),e(nH,kyr),e(k4,Syr),e(Ee,Ryr),e(Ee,S4),e(S4,RFe),e(RFe,Byr),e(S4,Pyr),e(S4,sH),e(sH,$yr),e(S4,Iyr),e(Ee,qyr),e(Ee,R4),e(R4,BFe),e(BFe,Nyr),e(R4,jyr),e(R4,lH),e(lH,Dyr),e(R4,Gyr),e(Ee,Oyr),e(Ee,B4),e(B4,PFe),e(PFe,Vyr),e(B4,Xyr),e(B4,iH),e(iH,zyr),e(B4,Qyr),e(Ee,Wyr),e(Ee,P4),e(P4,$Fe),e($Fe,Hyr),e(P4,Uyr),e(P4,dH),e(dH,Jyr),e(P4,Yyr),e(So,Kyr),e(So,IFe),e(IFe,Zyr),e(So,eLr),g(AL,So,null),b(c,bPe,u),b(c,hf,u),e(hf,$4),e($4,qFe),g(yL,qFe,null),e(hf,oLr),e(hf,NFe),e(NFe,rLr),b(c,vPe,u),b(c,qr,u),g(LL,qr,null),e(qr,tLr),e(qr,pf),e(pf,aLr),e(pf,cH),e(cH,nLr),e(pf,sLr),e(pf,fH),e(fH,lLr),e(pf,iLr),e(qr,dLr),e(qr,xL),e(xL,cLr),e(xL,jFe),e(jFe,fLr),e(xL,mLr),e(qr,gLr),e(qr,St),g(kL,St,null),e(St,hLr),e(St,DFe),e(DFe,pLr),e(St,_Lr),e(St,_f),e(_f,uLr),e(_f,GFe),e(GFe,bLr),e(_f,vLr),e(_f,mH),e(mH,FLr),e(_f,TLr),e(St,MLr),e(St,OFe),e(OFe,ELr),e(St,CLr),g(SL,St,null),e(qr,wLr),e(qr,Ro),g(RL,Ro,null),e(Ro,ALr),e(Ro,VFe),e(VFe,yLr),e(Ro,LLr),e(Ro,$n),e($n,xLr),e($n,XFe),e(XFe,kLr),e($n,SLr),e($n,zFe),e(zFe,RLr),e($n,BLr),e($n,QFe),e(QFe,PLr),e($n,$Lr),e(Ro,ILr),e(Ro,Fe),e(Fe,I4),e(I4,WFe),e(WFe,qLr),e(I4,NLr),e(I4,gH),e(gH,jLr),e(I4,DLr),e(Fe,GLr),e(Fe,q4),e(q4,HFe),e(HFe,OLr),e(q4,VLr),e(q4,hH),e(hH,XLr),e(q4,zLr),e(Fe,QLr),e(Fe,N4),e(N4,UFe),e(UFe,WLr),e(N4,HLr),e(N4,pH),e(pH,ULr),e(N4,JLr),e(Fe,YLr),e(Fe,j4),e(j4,JFe),e(JFe,KLr),e(j4,ZLr),e(j4,_H),e(_H,e8r),e(j4,o8r),e(Fe,r8r),e(Fe,D4),e(D4,YFe),e(YFe,t8r),e(D4,a8r),e(D4,uH),e(uH,n8r),e(D4,s8r),e(Fe,l8r),e(Fe,G4),e(G4,KFe),e(KFe,i8r),e(G4,d8r),e(G4,bH),e(bH,c8r),e(G4,f8r),e(Fe,m8r),e(Fe,O4),e(O4,ZFe),e(ZFe,g8r),e(O4,h8r),e(O4,vH),e(vH,p8r),e(O4,_8r),e(Fe,u8r),e(Fe,V4),e(V4,e0e),e(e0e,b8r),e(V4,v8r),e(V4,FH),e(FH,F8r),e(V4,T8r),e(Fe,M8r),e(Fe,X4),e(X4,o0e),e(o0e,E8r),e(X4,C8r),e(X4,TH),e(TH,w8r),e(X4,A8r),e(Fe,y8r),e(Fe,z4),e(z4,r0e),e(r0e,L8r),e(z4,x8r),e(z4,MH),e(MH,k8r),e(z4,S8r),e(Ro,R8r),e(Ro,t0e),e(t0e,B8r),e(Ro,P8r),g(BL,Ro,null),b(c,FPe,u),b(c,uf,u),e(uf,Q4),e(Q4,a0e),g(PL,a0e,null),e(uf,$8r),e(uf,n0e),e(n0e,I8r),b(c,TPe,u),b(c,Nr,u),g($L,Nr,null),e(Nr,q8r),e(Nr,bf),e(bf,N8r),e(bf,EH),e(EH,j8r),e(bf,D8r),e(bf,CH),e(CH,G8r),e(bf,O8r),e(Nr,V8r),e(Nr,IL),e(IL,X8r),e(IL,s0e),e(s0e,z8r),e(IL,Q8r),e(Nr,W8r),e(Nr,Rt),g(qL,Rt,null),e(Rt,H8r),e(Rt,l0e),e(l0e,U8r),e(Rt,J8r),e(Rt,vf),e(vf,Y8r),e(vf,i0e),e(i0e,K8r),e(vf,Z8r),e(vf,wH),e(wH,e9r),e(vf,o9r),e(Rt,r9r),e(Rt,d0e),e(d0e,t9r),e(Rt,a9r),g(NL,Rt,null),e(Nr,n9r),e(Nr,Bo),g(jL,Bo,null),e(Bo,s9r),e(Bo,c0e),e(c0e,l9r),e(Bo,i9r),e(Bo,In),e(In,d9r),e(In,f0e),e(f0e,c9r),e(In,f9r),e(In,m0e),e(m0e,m9r),e(In,g9r),e(In,g0e),e(g0e,h9r),e(In,p9r),e(Bo,_9r),e(Bo,Te),e(Te,W4),e(W4,h0e),e(h0e,u9r),e(W4,b9r),e(W4,AH),e(AH,v9r),e(W4,F9r),e(Te,T9r),e(Te,H4),e(H4,p0e),e(p0e,M9r),e(H4,E9r),e(H4,yH),e(yH,C9r),e(H4,w9r),e(Te,A9r),e(Te,U4),e(U4,_0e),e(_0e,y9r),e(U4,L9r),e(U4,LH),e(LH,x9r),e(U4,k9r),e(Te,S9r),e(Te,J4),e(J4,u0e),e(u0e,R9r),e(J4,B9r),e(J4,xH),e(xH,P9r),e(J4,$9r),e(Te,I9r),e(Te,Y4),e(Y4,b0e),e(b0e,q9r),e(Y4,N9r),e(Y4,kH),e(kH,j9r),e(Y4,D9r),e(Te,G9r),e(Te,K4),e(K4,v0e),e(v0e,O9r),e(K4,V9r),e(K4,SH),e(SH,X9r),e(K4,z9r),e(Te,Q9r),e(Te,Z4),e(Z4,F0e),e(F0e,W9r),e(Z4,H9r),e(Z4,RH),e(RH,U9r),e(Z4,J9r),e(Te,Y9r),e(Te,eE),e(eE,T0e),e(T0e,K9r),e(eE,Z9r),e(eE,BH),e(BH,exr),e(eE,oxr),e(Te,rxr),e(Te,oE),e(oE,M0e),e(M0e,txr),e(oE,axr),e(oE,PH),e(PH,nxr),e(oE,sxr),e(Te,lxr),e(Te,rE),e(rE,E0e),e(E0e,ixr),e(rE,dxr),e(rE,$H),e($H,cxr),e(rE,fxr),e(Bo,mxr),e(Bo,C0e),e(C0e,gxr),e(Bo,hxr),g(DL,Bo,null),b(c,MPe,u),b(c,Ff,u),e(Ff,tE),e(tE,w0e),g(GL,w0e,null),e(Ff,pxr),e(Ff,A0e),e(A0e,_xr),b(c,EPe,u),b(c,jr,u),g(OL,jr,null),e(jr,uxr),e(jr,Tf),e(Tf,bxr),e(Tf,IH),e(IH,vxr),e(Tf,Fxr),e(Tf,qH),e(qH,Txr),e(Tf,Mxr),e(jr,Exr),e(jr,VL),e(VL,Cxr),e(VL,y0e),e(y0e,wxr),e(VL,Axr),e(jr,yxr),e(jr,Bt),g(XL,Bt,null),e(Bt,Lxr),e(Bt,L0e),e(L0e,xxr),e(Bt,kxr),e(Bt,Mf),e(Mf,Sxr),e(Mf,x0e),e(x0e,Rxr),e(Mf,Bxr),e(Mf,NH),e(NH,Pxr),e(Mf,$xr),e(Bt,Ixr),e(Bt,k0e),e(k0e,qxr),e(Bt,Nxr),g(zL,Bt,null),e(jr,jxr),e(jr,Po),g(QL,Po,null),e(Po,Dxr),e(Po,S0e),e(S0e,Gxr),e(Po,Oxr),e(Po,qn),e(qn,Vxr),e(qn,R0e),e(R0e,Xxr),e(qn,zxr),e(qn,B0e),e(B0e,Qxr),e(qn,Wxr),e(qn,P0e),e(P0e,Hxr),e(qn,Uxr),e(Po,Jxr),e(Po,Be),e(Be,aE),e(aE,$0e),e($0e,Yxr),e(aE,Kxr),e(aE,jH),e(jH,Zxr),e(aE,ekr),e(Be,okr),e(Be,nE),e(nE,I0e),e(I0e,rkr),e(nE,tkr),e(nE,DH),e(DH,akr),e(nE,nkr),e(Be,skr),e(Be,sE),e(sE,q0e),e(q0e,lkr),e(sE,ikr),e(sE,GH),e(GH,dkr),e(sE,ckr),e(Be,fkr),e(Be,lE),e(lE,N0e),e(N0e,mkr),e(lE,gkr),e(lE,OH),e(OH,hkr),e(lE,pkr),e(Be,_kr),e(Be,iE),e(iE,j0e),e(j0e,ukr),e(iE,bkr),e(iE,VH),e(VH,vkr),e(iE,Fkr),e(Be,Tkr),e(Be,dE),e(dE,D0e),e(D0e,Mkr),e(dE,Ekr),e(dE,XH),e(XH,Ckr),e(dE,wkr),e(Be,Akr),e(Be,cE),e(cE,G0e),e(G0e,ykr),e(cE,Lkr),e(cE,zH),e(zH,xkr),e(cE,kkr),e(Be,Skr),e(Be,fE),e(fE,O0e),e(O0e,Rkr),e(fE,Bkr),e(fE,QH),e(QH,Pkr),e(fE,$kr),e(Po,Ikr),e(Po,V0e),e(V0e,qkr),e(Po,Nkr),g(WL,Po,null),b(c,CPe,u),b(c,Ef,u),e(Ef,mE),e(mE,X0e),g(HL,X0e,null),e(Ef,jkr),e(Ef,z0e),e(z0e,Dkr),b(c,wPe,u),b(c,Dr,u),g(UL,Dr,null),e(Dr,Gkr),e(Dr,Cf),e(Cf,Okr),e(Cf,WH),e(WH,Vkr),e(Cf,Xkr),e(Cf,HH),e(HH,zkr),e(Cf,Qkr),e(Dr,Wkr),e(Dr,JL),e(JL,Hkr),e(JL,Q0e),e(Q0e,Ukr),e(JL,Jkr),e(Dr,Ykr),e(Dr,Pt),g(YL,Pt,null),e(Pt,Kkr),e(Pt,W0e),e(W0e,Zkr),e(Pt,eSr),e(Pt,wf),e(wf,oSr),e(wf,H0e),e(H0e,rSr),e(wf,tSr),e(wf,UH),e(UH,aSr),e(wf,nSr),e(Pt,sSr),e(Pt,U0e),e(U0e,lSr),e(Pt,iSr),g(KL,Pt,null),e(Dr,dSr),e(Dr,$o),g(ZL,$o,null),e($o,cSr),e($o,J0e),e(J0e,fSr),e($o,mSr),e($o,Nn),e(Nn,gSr),e(Nn,Y0e),e(Y0e,hSr),e(Nn,pSr),e(Nn,K0e),e(K0e,_Sr),e(Nn,uSr),e(Nn,Z0e),e(Z0e,bSr),e(Nn,vSr),e($o,FSr),e($o,Pe),e(Pe,gE),e(gE,eTe),e(eTe,TSr),e(gE,MSr),e(gE,JH),e(JH,ESr),e(gE,CSr),e(Pe,wSr),e(Pe,hE),e(hE,oTe),e(oTe,ASr),e(hE,ySr),e(hE,YH),e(YH,LSr),e(hE,xSr),e(Pe,kSr),e(Pe,pE),e(pE,rTe),e(rTe,SSr),e(pE,RSr),e(pE,KH),e(KH,BSr),e(pE,PSr),e(Pe,$Sr),e(Pe,_E),e(_E,tTe),e(tTe,ISr),e(_E,qSr),e(_E,ZH),e(ZH,NSr),e(_E,jSr),e(Pe,DSr),e(Pe,uE),e(uE,aTe),e(aTe,GSr),e(uE,OSr),e(uE,eU),e(eU,VSr),e(uE,XSr),e(Pe,zSr),e(Pe,bE),e(bE,nTe),e(nTe,QSr),e(bE,WSr),e(bE,oU),e(oU,HSr),e(bE,USr),e(Pe,JSr),e(Pe,vE),e(vE,sTe),e(sTe,YSr),e(vE,KSr),e(vE,rU),e(rU,ZSr),e(vE,eRr),e(Pe,oRr),e(Pe,FE),e(FE,lTe),e(lTe,rRr),e(FE,tRr),e(FE,tU),e(tU,aRr),e(FE,nRr),e($o,sRr),e($o,iTe),e(iTe,lRr),e($o,iRr),g(e8,$o,null),b(c,APe,u),b(c,Af,u),e(Af,TE),e(TE,dTe),g(o8,dTe,null),e(Af,dRr),e(Af,cTe),e(cTe,cRr),b(c,yPe,u),b(c,Gr,u),g(r8,Gr,null),e(Gr,fRr),e(Gr,yf),e(yf,mRr),e(yf,aU),e(aU,gRr),e(yf,hRr),e(yf,nU),e(nU,pRr),e(yf,_Rr),e(Gr,uRr),e(Gr,t8),e(t8,bRr),e(t8,fTe),e(fTe,vRr),e(t8,FRr),e(Gr,TRr),e(Gr,$t),g(a8,$t,null),e($t,MRr),e($t,mTe),e(mTe,ERr),e($t,CRr),e($t,Lf),e(Lf,wRr),e(Lf,gTe),e(gTe,ARr),e(Lf,yRr),e(Lf,sU),e(sU,LRr),e(Lf,xRr),e($t,kRr),e($t,hTe),e(hTe,SRr),e($t,RRr),g(n8,$t,null),e(Gr,BRr),e(Gr,Io),g(s8,Io,null),e(Io,PRr),e(Io,pTe),e(pTe,$Rr),e(Io,IRr),e(Io,jn),e(jn,qRr),e(jn,_Te),e(_Te,NRr),e(jn,jRr),e(jn,uTe),e(uTe,DRr),e(jn,GRr),e(jn,bTe),e(bTe,ORr),e(jn,VRr),e(Io,XRr),e(Io,vTe),e(vTe,ME),e(ME,FTe),e(FTe,zRr),e(ME,QRr),e(ME,lU),e(lU,WRr),e(ME,HRr),e(Io,URr),e(Io,TTe),e(TTe,JRr),e(Io,YRr),g(l8,Io,null),b(c,LPe,u),b(c,xf,u),e(xf,EE),e(EE,MTe),g(i8,MTe,null),e(xf,KRr),e(xf,ETe),e(ETe,ZRr),b(c,xPe,u),b(c,Or,u),g(d8,Or,null),e(Or,eBr),e(Or,kf),e(kf,oBr),e(kf,iU),e(iU,rBr),e(kf,tBr),e(kf,dU),e(dU,aBr),e(kf,nBr),e(Or,sBr),e(Or,c8),e(c8,lBr),e(c8,CTe),e(CTe,iBr),e(c8,dBr),e(Or,cBr),e(Or,It),g(f8,It,null),e(It,fBr),e(It,wTe),e(wTe,mBr),e(It,gBr),e(It,Sf),e(Sf,hBr),e(Sf,ATe),e(ATe,pBr),e(Sf,_Br),e(Sf,cU),e(cU,uBr),e(Sf,bBr),e(It,vBr),e(It,yTe),e(yTe,FBr),e(It,TBr),g(m8,It,null),e(Or,MBr),e(Or,qo),g(g8,qo,null),e(qo,EBr),e(qo,LTe),e(LTe,CBr),e(qo,wBr),e(qo,Dn),e(Dn,ABr),e(Dn,xTe),e(xTe,yBr),e(Dn,LBr),e(Dn,kTe),e(kTe,xBr),e(Dn,kBr),e(Dn,STe),e(STe,SBr),e(Dn,RBr),e(qo,BBr),e(qo,h8),e(h8,CE),e(CE,RTe),e(RTe,PBr),e(CE,$Br),e(CE,fU),e(fU,IBr),e(CE,qBr),e(h8,NBr),e(h8,wE),e(wE,BTe),e(BTe,jBr),e(wE,DBr),e(wE,mU),e(mU,GBr),e(wE,OBr),e(qo,VBr),e(qo,PTe),e(PTe,XBr),e(qo,zBr),g(p8,qo,null),b(c,kPe,u),b(c,Rf,u),e(Rf,AE),e(AE,$Te),g(_8,$Te,null),e(Rf,QBr),e(Rf,ITe),e(ITe,WBr),b(c,SPe,u),b(c,Vr,u),g(u8,Vr,null),e(Vr,HBr),e(Vr,Bf),e(Bf,UBr),e(Bf,gU),e(gU,JBr),e(Bf,YBr),e(Bf,hU),e(hU,KBr),e(Bf,ZBr),e(Vr,ePr),e(Vr,b8),e(b8,oPr),e(b8,qTe),e(qTe,rPr),e(b8,tPr),e(Vr,aPr),e(Vr,qt),g(v8,qt,null),e(qt,nPr),e(qt,NTe),e(NTe,sPr),e(qt,lPr),e(qt,Pf),e(Pf,iPr),e(Pf,jTe),e(jTe,dPr),e(Pf,cPr),e(Pf,pU),e(pU,fPr),e(Pf,mPr),e(qt,gPr),e(qt,DTe),e(DTe,hPr),e(qt,pPr),g(F8,qt,null),e(Vr,_Pr),e(Vr,No),g(T8,No,null),e(No,uPr),e(No,GTe),e(GTe,bPr),e(No,vPr),e(No,Gn),e(Gn,FPr),e(Gn,OTe),e(OTe,TPr),e(Gn,MPr),e(Gn,VTe),e(VTe,EPr),e(Gn,CPr),e(Gn,XTe),e(XTe,wPr),e(Gn,APr),e(No,yPr),e(No,zTe),e(zTe,yE),e(yE,QTe),e(QTe,LPr),e(yE,xPr),e(yE,_U),e(_U,kPr),e(yE,SPr),e(No,RPr),e(No,WTe),e(WTe,BPr),e(No,PPr),g(M8,No,null),RPe=!0},p(c,[u]){const E8={};u&2&&(E8.$$scope={dirty:u,ctx:c}),Of.$set(E8);const HTe={};u&2&&(HTe.$$scope={dirty:u,ctx:c}),qh.$set(HTe);const UTe={};u&2&&(UTe.$$scope={dirty:u,ctx:c}),Hh.$set(UTe)},i(c){RPe||(h(he.$$.fragment,c),h(Da.$$.fragment,c),h(RC.$$.fragment,c),h(BC.$$.fragment,c),h(Of.$$.fragment,c),h(PC.$$.fragment,c),h($C.$$.fragment,c),h(NC.$$.fragment,c),h(jC.$$.fragment,c),h(DC.$$.fragment,c),h(GC.$$.fragment,c),h(OC.$$.fragment,c),h(zC.$$.fragment,c),h(QC.$$.fragment,c),h(WC.$$.fragment,c),h(HC.$$.fragment,c),h(UC.$$.fragment,c),h(KC.$$.fragment,c),h(qh.$$.fragment,c),h(ZC.$$.fragment,c),h(e5.$$.fragment,c),h(o5.$$.fragment,c),h(r5.$$.fragment,c),h(n5.$$.fragment,c),h(Hh.$$.fragment,c),h(s5.$$.fragment,c),h(l5.$$.fragment,c),h(i5.$$.fragment,c),h(d5.$$.fragment,c),h(f5.$$.fragment,c),h(m5.$$.fragment,c),h(g5.$$.fragment,c),h(h5.$$.fragment,c),h(p5.$$.fragment,c),h(_5.$$.fragment,c),h(b5.$$.fragment,c),h(v5.$$.fragment,c),h(F5.$$.fragment,c),h(T5.$$.fragment,c),h(M5.$$.fragment,c),h(E5.$$.fragment,c),h(w5.$$.fragment,c),h(A5.$$.fragment,c),h(y5.$$.fragment,c),h(L5.$$.fragment,c),h(x5.$$.fragment,c),h(k5.$$.fragment,c),h(R5.$$.fragment,c),h(B5.$$.fragment,c),h(P5.$$.fragment,c),h($5.$$.fragment,c),h(I5.$$.fragment,c),h(q5.$$.fragment,c),h(j5.$$.fragment,c),h(D5.$$.fragment,c),h(G5.$$.fragment,c),h(O5.$$.fragment,c),h(V5.$$.fragment,c),h(X5.$$.fragment,c),h(Q5.$$.fragment,c),h(W5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(J5.$$.fragment,c),h(Y5.$$.fragment,c),h(Z5.$$.fragment,c),h(e3.$$.fragment,c),h(o3.$$.fragment,c),h(r3.$$.fragment,c),h(t3.$$.fragment,c),h(a3.$$.fragment,c),h(s3.$$.fragment,c),h(l3.$$.fragment,c),h(i3.$$.fragment,c),h(d3.$$.fragment,c),h(c3.$$.fragment,c),h(f3.$$.fragment,c),h(g3.$$.fragment,c),h(h3.$$.fragment,c),h(p3.$$.fragment,c),h(_3.$$.fragment,c),h(u3.$$.fragment,c),h(b3.$$.fragment,c),h(F3.$$.fragment,c),h(T3.$$.fragment,c),h(M3.$$.fragment,c),h(E3.$$.fragment,c),h(C3.$$.fragment,c),h(w3.$$.fragment,c),h(y3.$$.fragment,c),h(L3.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(S3.$$.fragment,c),h(R3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(q3.$$.fragment,c),h(N3.$$.fragment,c),h(j3.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(V3.$$.fragment,c),h(X3.$$.fragment,c),h(z3.$$.fragment,c),h(Q3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(Z3.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(vw.$$.fragment,c),h(Fw.$$.fragment,c),h(Tw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(FA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(FL.$$.fragment,c),h(TL.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(RL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(qL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(a8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),h(d8.$$.fragment,c),h(f8.$$.fragment,c),h(m8.$$.fragment,c),h(g8.$$.fragment,c),h(p8.$$.fragment,c),h(_8.$$.fragment,c),h(u8.$$.fragment,c),h(v8.$$.fragment,c),h(F8.$$.fragment,c),h(T8.$$.fragment,c),h(M8.$$.fragment,c),RPe=!0)},o(c){p(he.$$.fragment,c),p(Da.$$.fragment,c),p(RC.$$.fragment,c),p(BC.$$.fragment,c),p(Of.$$.fragment,c),p(PC.$$.fragment,c),p($C.$$.fragment,c),p(NC.$$.fragment,c),p(jC.$$.fragment,c),p(DC.$$.fragment,c),p(GC.$$.fragment,c),p(OC.$$.fragment,c),p(zC.$$.fragment,c),p(QC.$$.fragment,c),p(WC.$$.fragment,c),p(HC.$$.fragment,c),p(UC.$$.fragment,c),p(KC.$$.fragment,c),p(qh.$$.fragment,c),p(ZC.$$.fragment,c),p(e5.$$.fragment,c),p(o5.$$.fragment,c),p(r5.$$.fragment,c),p(n5.$$.fragment,c),p(Hh.$$.fragment,c),p(s5.$$.fragment,c),p(l5.$$.fragment,c),p(i5.$$.fragment,c),p(d5.$$.fragment,c),p(f5.$$.fragment,c),p(m5.$$.fragment,c),p(g5.$$.fragment,c),p(h5.$$.fragment,c),p(p5.$$.fragment,c),p(_5.$$.fragment,c),p(b5.$$.fragment,c),p(v5.$$.fragment,c),p(F5.$$.fragment,c),p(T5.$$.fragment,c),p(M5.$$.fragment,c),p(E5.$$.fragment,c),p(w5.$$.fragment,c),p(A5.$$.fragment,c),p(y5.$$.fragment,c),p(L5.$$.fragment,c),p(x5.$$.fragment,c),p(k5.$$.fragment,c),p(R5.$$.fragment,c),p(B5.$$.fragment,c),p(P5.$$.fragment,c),p($5.$$.fragment,c),p(I5.$$.fragment,c),p(q5.$$.fragment,c),p(j5.$$.fragment,c),p(D5.$$.fragment,c),p(G5.$$.fragment,c),p(O5.$$.fragment,c),p(V5.$$.fragment,c),p(X5.$$.fragment,c),p(Q5.$$.fragment,c),p(W5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(J5.$$.fragment,c),p(Y5.$$.fragment,c),p(Z5.$$.fragment,c),p(e3.$$.fragment,c),p(o3.$$.fragment,c),p(r3.$$.fragment,c),p(t3.$$.fragment,c),p(a3.$$.fragment,c),p(s3.$$.fragment,c),p(l3.$$.fragment,c),p(i3.$$.fragment,c),p(d3.$$.fragment,c),p(c3.$$.fragment,c),p(f3.$$.fragment,c),p(g3.$$.fragment,c),p(h3.$$.fragment,c),p(p3.$$.fragment,c),p(_3.$$.fragment,c),p(u3.$$.fragment,c),p(b3.$$.fragment,c),p(F3.$$.fragment,c),p(T3.$$.fragment,c),p(M3.$$.fragment,c),p(E3.$$.fragment,c),p(C3.$$.fragment,c),p(w3.$$.fragment,c),p(y3.$$.fragment,c),p(L3.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(S3.$$.fragment,c),p(R3.$$.fragment,c),p(P3.$$.fragment,c),p($3.$$.fragment,c),p(I3.$$.fragment,c),p(q3.$$.fragment,c),p(N3.$$.fragment,c),p(j3.$$.fragment,c),p(G3.$$.fragment,c),p(O3.$$.fragment,c),p(V3.$$.fragment,c),p(X3.$$.fragment,c),p(z3.$$.fragment,c),p(Q3.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(Z3.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(vw.$$.fragment,c),p(Fw.$$.fragment,c),p(Tw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(FA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(NA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(eL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(FL.$$.fragment,c),p(TL.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(yL.$$.fragment,c),p(LL.$$.fragment,c),p(kL.$$.fragment,c),p(SL.$$.fragment,c),p(RL.$$.fragment,c),p(BL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(qL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(DL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(XL.$$.fragment,c),p(zL.$$.fragment,c),p(QL.$$.fragment,c),p(WL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(e8.$$.fragment,c),p(o8.$$.fragment,c),p(r8.$$.fragment,c),p(a8.$$.fragment,c),p(n8.$$.fragment,c),p(s8.$$.fragment,c),p(l8.$$.fragment,c),p(i8.$$.fragment,c),p(d8.$$.fragment,c),p(f8.$$.fragment,c),p(m8.$$.fragment,c),p(g8.$$.fragment,c),p(p8.$$.fragment,c),p(_8.$$.fragment,c),p(u8.$$.fragment,c),p(v8.$$.fragment,c),p(F8.$$.fragment,c),p(T8.$$.fragment,c),p(M8.$$.fragment,c),RPe=!1},d(c){t(Z),c&&t(io),c&&t(ce),_(he),c&&t(qf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(jf),_(Da,c),c&&t(fo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(SRe),c&&t(Xi),_(RC),c&&t(RRe),c&&t(Qn),c&&t(BRe),_(BC,c),c&&t(PRe),c&&t(w9),c&&t($Re),_(Of,c),c&&t(IRe),c&&t(zi),_(PC),c&&t(qRe),c&&t(Qo),_($C),_(NC),_(jC),_(DC),c&&t(NRe),c&&t(Wi),_(GC),c&&t(jRe),c&&t(Wo),_(OC),_(zC),_(QC),_(WC),c&&t(DRe),c&&t(Hi),_(HC),c&&t(GRe),c&&t(Ho),_(UC),_(KC),_(qh),_(ZC),_(e5),c&&t(ORe),c&&t(Ui),_(o5),c&&t(VRe),c&&t(Uo),_(r5),_(n5),_(Hh),_(s5),_(l5),c&&t(XRe),c&&t(Yi),_(i5),c&&t(zRe),c&&t(Jo),_(d5),_(f5),_(m5),_(g5),_(h5),c&&t(QRe),c&&t(ed),_(p5),c&&t(WRe),c&&t(Yo),_(_5),_(b5),_(v5),_(F5),_(T5),c&&t(HRe),c&&t(td),_(M5),c&&t(URe),c&&t(Ko),_(E5),_(w5),_(A5),_(y5),_(L5),c&&t(JRe),c&&t(sd),_(x5),c&&t(YRe),c&&t(Zo),_(k5),_(R5),_(B5),_(P5),_($5),c&&t(KRe),c&&t(dd),_(I5),c&&t(ZRe),c&&t(er),_(q5),_(j5),_(D5),_(G5),_(O5),c&&t(eBe),c&&t(md),_(V5),c&&t(oBe),c&&t(or),_(X5),_(Q5),_(W5),_(H5),_(U5),c&&t(rBe),c&&t(pd),_(J5),c&&t(tBe),c&&t(rr),_(Y5),_(Z5),_(e3),_(o3),_(r3),c&&t(aBe),c&&t(bd),_(t3),c&&t(nBe),c&&t(tr),_(a3),_(s3),_(l3),_(i3),_(d3),c&&t(sBe),c&&t(Td),_(c3),c&&t(lBe),c&&t(ar),_(f3),_(g3),_(h3),_(p3),_(_3),c&&t(iBe),c&&t(Cd),_(u3),c&&t(dBe),c&&t(nr),_(b3),_(F3),_(T3),_(M3),_(E3),c&&t(cBe),c&&t(yd),_(C3),c&&t(fBe),c&&t(sr),_(w3),_(y3),_(L3),_(x3),_(k3),c&&t(mBe),c&&t(kd),_(S3),c&&t(gBe),c&&t(lr),_(R3),_(P3),_($3),_(I3),_(q3),c&&t(hBe),c&&t(Bd),_(N3),c&&t(pBe),c&&t(ir),_(j3),_(G3),_(O3),_(V3),_(X3),c&&t(_Be),c&&t(Id),_(z3),c&&t(uBe),c&&t(dr),_(Q3),_(H3),_(U3),_(J3),_(Y3),c&&t(bBe),c&&t(jd),_(K3),c&&t(vBe),c&&t(cr),_(Z3),_(ow),_(rw),_(tw),_(aw),c&&t(FBe),c&&t(Od),_(nw),c&&t(TBe),c&&t(fr),_(sw),_(iw),_(dw),_(cw),_(fw),c&&t(MBe),c&&t(zd),_(mw),c&&t(EBe),c&&t(mr),_(gw),_(pw),_(_w),_(uw),_(vw),c&&t(CBe),c&&t(Hd),_(Fw),c&&t(wBe),c&&t(gr),_(Tw),_(Ew),_(Cw),_(ww),_(Aw),c&&t(ABe),c&&t(Yd),_(yw),c&&t(yBe),c&&t(hr),_(Lw),_(kw),_(Sw),_(Rw),_(Bw),c&&t(LBe),c&&t(oc),_(Pw),c&&t(xBe),c&&t(pr),_($w),_(qw),_(Nw),_(jw),_(Dw),c&&t(kBe),c&&t(ac),_(Gw),c&&t(SBe),c&&t(_r),_(Ow),_(Xw),_(zw),_(Qw),_(Ww),c&&t(RBe),c&&t(lc),_(Hw),c&&t(BBe),c&&t(ur),_(Uw),_(Yw),_(Kw),_(Zw),_(eA),c&&t(PBe),c&&t(cc),_(oA),c&&t($Be),c&&t(br),_(rA),_(aA),_(nA),_(sA),_(lA),c&&t(IBe),c&&t(gc),_(iA),c&&t(qBe),c&&t(vr),_(dA),_(fA),_(mA),_(gA),_(hA),c&&t(NBe),c&&t(_c),_(pA),c&&t(jBe),c&&t(Fr),_(_A),_(bA),_(vA),_(FA),_(TA),c&&t(DBe),c&&t(vc),_(MA),c&&t(GBe),c&&t(Tr),_(EA),_(wA),_(AA),_(yA),_(LA),c&&t(OBe),c&&t(Mc),_(xA),c&&t(VBe),c&&t(Mr),_(kA),_(RA),_(BA),_(PA),_(IA),c&&t(XBe),c&&t(wc),_(qA),c&&t(zBe),c&&t(Er),_(NA),_(DA),_(GA),_(OA),_(VA),c&&t(QBe),c&&t(Lc),_(XA),c&&t(WBe),c&&t(Cr),_(zA),_(WA),_(HA),_(UA),_(JA),c&&t(HBe),c&&t(Sc),_(YA),c&&t(UBe),c&&t(wr),_(KA),_(ey),_(oy),_(ry),_(ty),c&&t(JBe),c&&t(Pc),_(ay),c&&t(YBe),c&&t(Ar),_(ny),_(ly),_(iy),_(dy),_(cy),c&&t(KBe),c&&t(qc),_(fy),c&&t(ZBe),c&&t(yr),_(my),_(hy),_(py),_(_y),_(uy),c&&t(ePe),c&&t(Dc),_(by),c&&t(oPe),c&&t(Lr),_(vy),_(Ty),_(My),_(Ey),_(Cy),c&&t(rPe),c&&t(Vc),_(wy),c&&t(tPe),c&&t(xr),_(Ay),_(Ly),_(xy),_(ky),_(Sy),c&&t(aPe),c&&t(Qc),_(Ry),c&&t(nPe),c&&t(kr),_(By),_($y),_(Iy),_(qy),_(Ny),c&&t(sPe),c&&t(Uc),_(jy),c&&t(lPe),c&&t(Sr),_(Dy),_(Oy),_(Vy),_(Xy),_(zy),c&&t(iPe),c&&t(Kc),_(Qy),c&&t(dPe),c&&t(Rr),_(Wy),_(Uy),_(Jy),_(Yy),_(Ky),c&&t(cPe),c&&t(of),_(Zy),c&&t(fPe),c&&t(Br),_(eL),_(rL),_(tL),_(aL),_(nL),c&&t(mPe),c&&t(af),_(sL),c&&t(gPe),c&&t(Pr),_(lL),_(dL),_(cL),_(fL),_(mL),c&&t(hPe),c&&t(lf),_(gL),c&&t(pPe),c&&t($r),_(hL),_(_L),_(uL),_(bL),_(vL),c&&t(_Pe),c&&t(ff),_(FL),c&&t(uPe),c&&t(Ir),_(TL),_(EL),_(CL),_(wL),_(AL),c&&t(bPe),c&&t(hf),_(yL),c&&t(vPe),c&&t(qr),_(LL),_(kL),_(SL),_(RL),_(BL),c&&t(FPe),c&&t(uf),_(PL),c&&t(TPe),c&&t(Nr),_($L),_(qL),_(NL),_(jL),_(DL),c&&t(MPe),c&&t(Ff),_(GL),c&&t(EPe),c&&t(jr),_(OL),_(XL),_(zL),_(QL),_(WL),c&&t(CPe),c&&t(Ef),_(HL),c&&t(wPe),c&&t(Dr),_(UL),_(YL),_(KL),_(ZL),_(e8),c&&t(APe),c&&t(Af),_(o8),c&&t(yPe),c&&t(Gr),_(r8),_(a8),_(n8),_(s8),_(l8),c&&t(LPe),c&&t(xf),_(i8),c&&t(xPe),c&&t(Or),_(d8),_(f8),_(m8),_(g8),_(p8),c&&t(kPe),c&&t(Rf),_(_8),c&&t(SPe),c&&t(Vr),_(u8),_(v8),_(F8),_(T8),_(M8)}}}const x5t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function k5t(If){return C5t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class I5t extends F5t{constructor(Z){super();T5t(this,Z,k5t,L5t,M5t,{})}}export{I5t as default,x5t as metadata};
