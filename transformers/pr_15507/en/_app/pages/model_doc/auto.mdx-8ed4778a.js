import{S as T1t,i as F1t,s as C1t,e as a,k as l,w as f,t as o,L as M1t,c as n,d as t,m as i,a as s,x as m,h as r,b as c,J as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-9e2b328e.js";import{T as X6r}from"../../chunks/Tip-76f97a76.js";import{D as E}from"../../chunks/Docstring-50fd6873.js";import{C as w}from"../../chunks/CodeBlock-88e23343.js";import{I as V}from"../../chunks/IconCopyLink-fd0e58fd.js";import"../../chunks/CopyButton-4ae140ab.js";function E1t(Ai){let J,Be,ie,me,no,ce,ue,Go,Li,Ef,sa,Bi,xi,bM,yf,ye,io,ki,In,vM,Dn,jn,TM,Ri,Nn,FM,Si,wf,$a;return{c(){J=a("p"),Be=o("If your "),ie=a("code"),me=o("NewModelConfig"),no=o(" is a subclass of "),ce=a("code"),ue=o("PretrainedConfig"),Go=o(`, make sure its
`),Li=a("code"),Ef=o("model_type"),sa=o(" attribute is set to the same key you use when registering the config (here "),Bi=a("code"),xi=o('"new-model"'),bM=o(")."),yf=l(),ye=a("p"),io=o("Likewise, if your "),ki=a("code"),In=o("NewModel"),vM=o(" is a subclass of "),Dn=a("a"),jn=o("PreTrainedModel"),TM=o(`, make sure its
`),Ri=a("code"),Nn=o("config_class"),FM=o(` attribute is set to the same class you use when registering the model (here
`),Si=a("code"),wf=o("NewModelConfig"),$a=o(")."),this.h()},l(co){J=n(co,"P",{});var ge=s(J);Be=r(ge,"If your "),ie=n(ge,"CODE",{});var r8=s(ie);me=r(r8,"NewModelConfig"),r8.forEach(t),no=r(ge," is a subclass of "),ce=n(ge,"CODE",{});var Pi=s(ce);ue=r(Pi,"PretrainedConfig"),Pi.forEach(t),Go=r(ge,`, make sure its
`),Li=n(ge,"CODE",{});var t8=s(Li);Ef=r(t8,"model_type"),t8.forEach(t),sa=r(ge," attribute is set to the same key you use when registering the config (here "),Bi=n(ge,"CODE",{});var a8=s(Bi);xi=r(a8,'"new-model"'),a8.forEach(t),bM=r(ge,")."),ge.forEach(t),yf=i(co),ye=n(co,"P",{});var Oo=s(ye);io=r(Oo,"Likewise, if your "),ki=n(Oo,"CODE",{});var Ia=s(ki);In=r(Ia,"NewModel"),Ia.forEach(t),vM=r(Oo," is a subclass of "),Dn=n(Oo,"A",{href:!0});var n8=s(Dn);jn=r(n8,"PreTrainedModel"),n8.forEach(t),TM=r(Oo,`, make sure its
`),Ri=n(Oo,"CODE",{});var Af=s(Ri);Nn=r(Af,"config_class"),Af.forEach(t),FM=r(Oo,` attribute is set to the same class you use when registering the model (here
`),Si=n(Oo,"CODE",{});var s8=s(Si);wf=r(s8,"NewModelConfig"),s8.forEach(t),$a=r(Oo,")."),Oo.forEach(t),this.h()},h(){c(Dn,"href","/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel")},m(co,ge){b(co,J,ge),e(J,Be),e(J,ie),e(ie,me),e(J,no),e(J,ce),e(ce,ue),e(J,Go),e(J,Li),e(Li,Ef),e(J,sa),e(J,Bi),e(Bi,xi),e(J,bM),b(co,yf,ge),b(co,ye,ge),e(ye,io),e(ye,ki),e(ki,In),e(ye,vM),e(ye,Dn),e(Dn,jn),e(ye,TM),e(ye,Ri),e(Ri,Nn),e(ye,FM),e(ye,Si),e(Si,wf),e(ye,$a)},d(co){co&&t(J),co&&t(yf),co&&t(ye)}}}function y1t(Ai){let J,Be,ie,me,no;return{c(){J=a("p"),Be=o("Passing "),ie=a("code"),me=o("use_auth_token=True"),no=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Be=r(ue,"Passing "),ie=n(ue,"CODE",{});var Go=s(ie);me=r(Go,"use_auth_token=True"),Go.forEach(t),no=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Be),e(J,ie),e(ie,me),e(J,no)},d(ce){ce&&t(J)}}}function w1t(Ai){let J,Be,ie,me,no;return{c(){J=a("p"),Be=o("Passing "),ie=a("code"),me=o("use_auth_token=True"),no=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Be=r(ue,"Passing "),ie=n(ue,"CODE",{});var Go=s(ie);me=r(Go,"use_auth_token=True"),Go.forEach(t),no=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Be),e(J,ie),e(ie,me),e(J,no)},d(ce){ce&&t(J)}}}function A1t(Ai){let J,Be,ie,me,no,ce,ue,Go,Li,Ef,sa,Bi,xi,bM,yf,ye,io,ki,In,vM,Dn,jn,TM,Ri,Nn,FM,Si,wf,$a,co,ge,r8,Pi,t8,a8,Oo,Ia,n8,Af,s8,bRe,d9e,$i,Lf,fW,CM,vRe,mW,TRe,c9e,qn,FRe,gW,CRe,MRe,hW,ERe,yRe,f9e,MM,m9e,l8,wRe,g9e,Bf,h9e,Ii,xf,pW,EM,ARe,_W,LRe,p9e,Xo,yM,BRe,wM,xRe,i8,kRe,RRe,SRe,AM,PRe,uW,$Re,IRe,DRe,fo,LM,jRe,bW,NRe,qRe,Di,GRe,vW,ORe,XRe,TW,VRe,zRe,WRe,v,kf,FW,QRe,HRe,d8,URe,JRe,YRe,Rf,CW,KRe,ZRe,c8,eSe,oSe,rSe,Sf,MW,tSe,aSe,f8,nSe,sSe,lSe,Pf,EW,iSe,dSe,m8,cSe,fSe,mSe,$f,yW,gSe,hSe,g8,pSe,_Se,uSe,If,wW,bSe,vSe,h8,TSe,FSe,CSe,Df,AW,MSe,ESe,p8,ySe,wSe,ASe,jf,LW,LSe,BSe,_8,xSe,kSe,RSe,Nf,BW,SSe,PSe,u8,$Se,ISe,DSe,qf,xW,jSe,NSe,b8,qSe,GSe,OSe,Gf,kW,XSe,VSe,v8,zSe,WSe,QSe,Of,RW,HSe,USe,T8,JSe,YSe,KSe,Xf,SW,ZSe,ePe,F8,oPe,rPe,tPe,Vf,PW,aPe,nPe,C8,sPe,lPe,iPe,zf,$W,dPe,cPe,M8,fPe,mPe,gPe,Wf,IW,hPe,pPe,E8,_Pe,uPe,bPe,Qf,DW,vPe,TPe,y8,FPe,CPe,MPe,Hf,jW,EPe,yPe,w8,wPe,APe,LPe,Uf,NW,BPe,xPe,A8,kPe,RPe,SPe,Jf,qW,PPe,$Pe,L8,IPe,DPe,jPe,Yf,GW,NPe,qPe,B8,GPe,OPe,XPe,Kf,OW,VPe,zPe,x8,WPe,QPe,HPe,Zf,XW,UPe,JPe,k8,YPe,KPe,ZPe,em,VW,e$e,o$e,R8,r$e,t$e,a$e,om,zW,n$e,s$e,S8,l$e,i$e,d$e,rm,WW,c$e,f$e,P8,m$e,g$e,h$e,tm,QW,p$e,_$e,$8,u$e,b$e,v$e,am,HW,T$e,F$e,I8,C$e,M$e,E$e,nm,UW,y$e,w$e,D8,A$e,L$e,B$e,sm,JW,x$e,k$e,j8,R$e,S$e,P$e,lm,YW,$$e,I$e,N8,D$e,j$e,N$e,im,KW,q$e,G$e,q8,O$e,X$e,V$e,dm,ZW,z$e,W$e,G8,Q$e,H$e,U$e,cm,eQ,J$e,Y$e,O8,K$e,Z$e,eIe,fm,oQ,oIe,rIe,X8,tIe,aIe,nIe,mm,rQ,sIe,lIe,V8,iIe,dIe,cIe,gm,tQ,fIe,mIe,z8,gIe,hIe,pIe,hm,aQ,_Ie,uIe,W8,bIe,vIe,TIe,pm,nQ,FIe,CIe,Q8,MIe,EIe,yIe,_m,sQ,wIe,AIe,H8,LIe,BIe,xIe,um,lQ,kIe,RIe,U8,SIe,PIe,$Ie,bm,iQ,IIe,DIe,J8,jIe,NIe,qIe,vm,dQ,GIe,OIe,Y8,XIe,VIe,zIe,Tm,cQ,WIe,QIe,K8,HIe,UIe,JIe,Fm,fQ,YIe,KIe,Z8,ZIe,eDe,oDe,Cm,mQ,rDe,tDe,e9,aDe,nDe,sDe,Mm,gQ,lDe,iDe,o9,dDe,cDe,fDe,Em,hQ,mDe,gDe,r9,hDe,pDe,_De,ym,pQ,uDe,bDe,t9,vDe,TDe,FDe,wm,_Q,CDe,MDe,a9,EDe,yDe,wDe,Am,uQ,ADe,LDe,n9,BDe,xDe,kDe,Lm,bQ,RDe,SDe,s9,PDe,$De,IDe,Bm,vQ,DDe,jDe,l9,NDe,qDe,GDe,xm,TQ,ODe,XDe,i9,VDe,zDe,WDe,km,FQ,QDe,HDe,d9,UDe,JDe,YDe,Rm,CQ,KDe,ZDe,c9,eje,oje,rje,Sm,MQ,tje,aje,f9,nje,sje,lje,Pm,EQ,ije,dje,m9,cje,fje,mje,$m,yQ,gje,hje,g9,pje,_je,uje,Im,wQ,bje,vje,h9,Tje,Fje,Cje,Dm,AQ,Mje,Eje,p9,yje,wje,Aje,jm,LQ,Lje,Bje,_9,xje,kje,Rje,Nm,BQ,Sje,Pje,u9,$je,Ije,Dje,qm,xQ,jje,Nje,b9,qje,Gje,Oje,Gm,kQ,Xje,Vje,v9,zje,Wje,Qje,Om,RQ,Hje,Uje,T9,Jje,Yje,Kje,Xm,SQ,Zje,eNe,F9,oNe,rNe,tNe,Vm,PQ,aNe,nNe,C9,sNe,lNe,iNe,zm,$Q,dNe,cNe,M9,fNe,mNe,gNe,Wm,IQ,hNe,pNe,E9,_Ne,uNe,bNe,Qm,DQ,vNe,TNe,y9,FNe,CNe,MNe,Hm,jQ,ENe,yNe,w9,wNe,ANe,LNe,Um,NQ,BNe,xNe,A9,kNe,RNe,SNe,Jm,qQ,PNe,$Ne,L9,INe,DNe,jNe,Ym,GQ,NNe,qNe,B9,GNe,ONe,XNe,Km,OQ,VNe,zNe,x9,WNe,QNe,HNe,Zm,XQ,UNe,JNe,k9,YNe,KNe,ZNe,eg,VQ,eqe,oqe,R9,rqe,tqe,aqe,og,zQ,nqe,sqe,S9,lqe,iqe,dqe,rg,WQ,cqe,fqe,P9,mqe,gqe,hqe,tg,QQ,pqe,_qe,$9,uqe,bqe,vqe,ag,HQ,Tqe,Fqe,I9,Cqe,Mqe,Eqe,ng,UQ,yqe,wqe,D9,Aqe,Lqe,Bqe,sg,JQ,xqe,kqe,j9,Rqe,Sqe,Pqe,lg,YQ,$qe,Iqe,N9,Dqe,jqe,Nqe,ig,KQ,qqe,Gqe,q9,Oqe,Xqe,Vqe,dg,ZQ,zqe,Wqe,G9,Qqe,Hqe,Uqe,cg,eH,Jqe,Yqe,O9,Kqe,Zqe,eGe,fg,oH,oGe,rGe,X9,tGe,aGe,nGe,mg,rH,sGe,lGe,V9,iGe,dGe,cGe,gg,tH,fGe,mGe,z9,gGe,hGe,pGe,hg,aH,_Ge,uGe,W9,bGe,vGe,TGe,pg,nH,FGe,CGe,Q9,MGe,EGe,yGe,sH,wGe,AGe,BM,LGe,_g,xM,BGe,lH,xGe,_9e,ji,ug,iH,kM,kGe,dH,RGe,u9e,Vo,RM,SGe,SM,PGe,H9,$Ge,IGe,DGe,PM,jGe,cH,NGe,qGe,GGe,mo,$M,OGe,fH,XGe,VGe,Da,zGe,mH,WGe,QGe,gH,HGe,UGe,hH,JGe,YGe,KGe,M,Gn,pH,ZGe,eOe,U9,oOe,rOe,J9,tOe,aOe,nOe,On,_H,sOe,lOe,Y9,iOe,dOe,K9,cOe,fOe,mOe,Xn,uH,gOe,hOe,Z9,pOe,_Oe,eB,uOe,bOe,vOe,bg,bH,TOe,FOe,oB,COe,MOe,EOe,Vn,vH,yOe,wOe,rB,AOe,LOe,tB,BOe,xOe,kOe,vg,TH,ROe,SOe,aB,POe,$Oe,IOe,Tg,FH,DOe,jOe,nB,NOe,qOe,GOe,Fg,CH,OOe,XOe,sB,VOe,zOe,WOe,zn,MH,QOe,HOe,lB,UOe,JOe,iB,YOe,KOe,ZOe,Wn,EH,eXe,oXe,dB,rXe,tXe,cB,aXe,nXe,sXe,Qn,yH,lXe,iXe,fB,dXe,cXe,mB,fXe,mXe,gXe,Cg,wH,hXe,pXe,gB,_Xe,uXe,bXe,Mg,AH,vXe,TXe,hB,FXe,CXe,MXe,Hn,LH,EXe,yXe,pB,wXe,AXe,_B,LXe,BXe,xXe,Eg,BH,kXe,RXe,uB,SXe,PXe,$Xe,Un,xH,IXe,DXe,bB,jXe,NXe,vB,qXe,GXe,OXe,Jn,kH,XXe,VXe,TB,zXe,WXe,FB,QXe,HXe,UXe,Yn,RH,JXe,YXe,CB,KXe,ZXe,SH,eVe,oVe,rVe,yg,PH,tVe,aVe,MB,nVe,sVe,lVe,Kn,$H,iVe,dVe,EB,cVe,fVe,yB,mVe,gVe,hVe,wg,IH,pVe,_Ve,wB,uVe,bVe,vVe,Zn,DH,TVe,FVe,AB,CVe,MVe,LB,EVe,yVe,wVe,es,jH,AVe,LVe,BB,BVe,xVe,xB,kVe,RVe,SVe,os,NH,PVe,$Ve,kB,IVe,DVe,RB,jVe,NVe,qVe,Ag,qH,GVe,OVe,SB,XVe,VVe,zVe,rs,GH,WVe,QVe,PB,HVe,UVe,$B,JVe,YVe,KVe,Lg,OH,ZVe,eze,IB,oze,rze,tze,ts,XH,aze,nze,DB,sze,lze,jB,ize,dze,cze,as,VH,fze,mze,NB,gze,hze,qB,pze,_ze,uze,ns,zH,bze,vze,GB,Tze,Fze,OB,Cze,Mze,Eze,ss,WH,yze,wze,XB,Aze,Lze,VB,Bze,xze,kze,Bg,QH,Rze,Sze,zB,Pze,$ze,Ize,ls,HH,Dze,jze,WB,Nze,qze,QB,Gze,Oze,Xze,is,UH,Vze,zze,HB,Wze,Qze,UB,Hze,Uze,Jze,ds,JH,Yze,Kze,JB,Zze,eWe,YB,oWe,rWe,tWe,cs,YH,aWe,nWe,KB,sWe,lWe,ZB,iWe,dWe,cWe,fs,KH,fWe,mWe,ex,gWe,hWe,ox,pWe,_We,uWe,ms,ZH,bWe,vWe,rx,TWe,FWe,tx,CWe,MWe,EWe,xg,eU,yWe,wWe,ax,AWe,LWe,BWe,gs,oU,xWe,kWe,nx,RWe,SWe,sx,PWe,$We,IWe,kg,rU,DWe,jWe,lx,NWe,qWe,GWe,Rg,tU,OWe,XWe,ix,VWe,zWe,WWe,hs,aU,QWe,HWe,dx,UWe,JWe,cx,YWe,KWe,ZWe,ps,nU,eQe,oQe,fx,rQe,tQe,mx,aQe,nQe,sQe,Sg,sU,lQe,iQe,gx,dQe,cQe,fQe,_s,lU,mQe,gQe,hx,hQe,pQe,px,_Qe,uQe,bQe,us,iU,vQe,TQe,_x,FQe,CQe,ux,MQe,EQe,yQe,bs,dU,wQe,AQe,bx,LQe,BQe,vx,xQe,kQe,RQe,vs,cU,SQe,PQe,Tx,$Qe,IQe,Fx,DQe,jQe,NQe,Ts,fU,qQe,GQe,Cx,OQe,XQe,Mx,VQe,zQe,WQe,Pg,mU,QQe,HQe,Ex,UQe,JQe,YQe,$g,gU,KQe,ZQe,yx,eHe,oHe,rHe,Ig,hU,tHe,aHe,wx,nHe,sHe,lHe,Dg,pU,iHe,dHe,Ax,cHe,fHe,mHe,Fs,_U,gHe,hHe,Lx,pHe,_He,Bx,uHe,bHe,vHe,jg,uU,THe,FHe,xx,CHe,MHe,EHe,Cs,bU,yHe,wHe,kx,AHe,LHe,Rx,BHe,xHe,kHe,Ms,vU,RHe,SHe,Sx,PHe,$He,Px,IHe,DHe,jHe,Es,TU,NHe,qHe,$x,GHe,OHe,Ix,XHe,VHe,zHe,ys,FU,WHe,QHe,Dx,HHe,UHe,jx,JHe,YHe,KHe,ws,CU,ZHe,eUe,Nx,oUe,rUe,qx,tUe,aUe,nUe,Ng,MU,sUe,lUe,Gx,iUe,dUe,cUe,qg,EU,fUe,mUe,Ox,gUe,hUe,pUe,As,yU,_Ue,uUe,Xx,bUe,vUe,Vx,TUe,FUe,CUe,Ls,wU,MUe,EUe,zx,yUe,wUe,Wx,AUe,LUe,BUe,Bs,AU,xUe,kUe,Qx,RUe,SUe,Hx,PUe,$Ue,IUe,Gg,LU,DUe,jUe,Ux,NUe,qUe,GUe,Og,BU,OUe,XUe,Jx,VUe,zUe,WUe,Xg,xU,QUe,HUe,Yx,UUe,JUe,YUe,Vg,kU,KUe,ZUe,Kx,eJe,oJe,rJe,xs,RU,tJe,aJe,Zx,nJe,sJe,ek,lJe,iJe,dJe,zg,SU,cJe,fJe,ok,mJe,gJe,hJe,Wg,PU,pJe,_Je,rk,uJe,bJe,vJe,ks,$U,TJe,FJe,tk,CJe,MJe,ak,EJe,yJe,wJe,Rs,IU,AJe,LJe,nk,BJe,xJe,sk,kJe,RJe,SJe,DU,PJe,$Je,IM,IJe,Qg,DM,DJe,jU,jJe,b9e,Ni,Hg,NU,jM,NJe,qU,qJe,v9e,zo,NM,GJe,qM,OJe,lk,XJe,VJe,zJe,GM,WJe,GU,QJe,HJe,UJe,xe,OM,JJe,OU,YJe,KJe,ja,ZJe,XU,eYe,oYe,VU,rYe,tYe,zU,aYe,nYe,sYe,se,Ug,WU,lYe,iYe,ik,dYe,cYe,fYe,Jg,QU,mYe,gYe,dk,hYe,pYe,_Ye,Yg,HU,uYe,bYe,ck,vYe,TYe,FYe,Kg,UU,CYe,MYe,fk,EYe,yYe,wYe,Zg,JU,AYe,LYe,mk,BYe,xYe,kYe,eh,YU,RYe,SYe,gk,PYe,$Ye,IYe,oh,KU,DYe,jYe,hk,NYe,qYe,GYe,rh,ZU,OYe,XYe,pk,VYe,zYe,WYe,th,eJ,QYe,HYe,_k,UYe,JYe,YYe,ah,oJ,KYe,ZYe,uk,eKe,oKe,rKe,nh,rJ,tKe,aKe,bk,nKe,sKe,lKe,sh,tJ,iKe,dKe,vk,cKe,fKe,mKe,lh,aJ,gKe,hKe,Tk,pKe,_Ke,uKe,ih,nJ,bKe,vKe,Fk,TKe,FKe,CKe,dh,sJ,MKe,EKe,Ck,yKe,wKe,AKe,ch,LKe,lJ,BKe,xKe,XM,kKe,fh,VM,RKe,iJ,SKe,T9e,qi,mh,dJ,zM,PKe,cJ,$Ke,F9e,Wo,WM,IKe,QM,DKe,Mk,jKe,NKe,qKe,HM,GKe,fJ,OKe,XKe,VKe,ke,UM,zKe,mJ,WKe,QKe,Gi,HKe,gJ,UKe,JKe,hJ,YKe,KKe,ZKe,we,gh,pJ,eZe,oZe,Ek,rZe,tZe,aZe,hh,_J,nZe,sZe,yk,lZe,iZe,dZe,ph,uJ,cZe,fZe,wk,mZe,gZe,hZe,_h,bJ,pZe,_Ze,Ak,uZe,bZe,vZe,uh,vJ,TZe,FZe,Lk,CZe,MZe,EZe,bh,TJ,yZe,wZe,Bk,AZe,LZe,BZe,vh,FJ,xZe,kZe,xk,RZe,SZe,PZe,Th,CJ,$Ze,IZe,kk,DZe,jZe,NZe,Fh,qZe,MJ,GZe,OZe,JM,XZe,Ch,YM,VZe,EJ,zZe,C9e,Oi,Mh,yJ,KM,WZe,wJ,QZe,M9e,Qo,ZM,HZe,Xi,UZe,AJ,JZe,YZe,LJ,KZe,ZZe,eeo,eE,oeo,BJ,reo,teo,aeo,qr,oE,neo,xJ,seo,leo,Vi,ieo,kJ,deo,ceo,RJ,feo,meo,geo,SJ,heo,peo,rE,_eo,Re,tE,ueo,PJ,beo,veo,Na,Teo,$J,Feo,Ceo,IJ,Meo,Eeo,DJ,yeo,weo,Aeo,F,Eh,jJ,Leo,Beo,Rk,xeo,keo,Reo,yh,NJ,Seo,Peo,Sk,$eo,Ieo,Deo,wh,qJ,jeo,Neo,Pk,qeo,Geo,Oeo,Ah,GJ,Xeo,Veo,$k,zeo,Weo,Qeo,Lh,OJ,Heo,Ueo,Ik,Jeo,Yeo,Keo,Bh,XJ,Zeo,eoo,Dk,ooo,roo,too,xh,VJ,aoo,noo,jk,soo,loo,ioo,kh,zJ,doo,coo,Nk,foo,moo,goo,Rh,WJ,hoo,poo,qk,_oo,uoo,boo,Sh,QJ,voo,Too,Gk,Foo,Coo,Moo,Ph,HJ,Eoo,yoo,Ok,woo,Aoo,Loo,$h,UJ,Boo,xoo,Xk,koo,Roo,Soo,Ih,JJ,Poo,$oo,Vk,Ioo,Doo,joo,Dh,YJ,Noo,qoo,zk,Goo,Ooo,Xoo,jh,KJ,Voo,zoo,Wk,Woo,Qoo,Hoo,Nh,ZJ,Uoo,Joo,Qk,Yoo,Koo,Zoo,qh,eY,ero,oro,Hk,rro,tro,aro,Gh,oY,nro,sro,Uk,lro,iro,dro,Oh,rY,cro,fro,Jk,mro,gro,hro,Xh,tY,pro,_ro,Yk,uro,bro,vro,Vh,aY,Tro,Fro,Kk,Cro,Mro,Ero,zh,nY,yro,wro,Zk,Aro,Lro,Bro,Wh,sY,xro,kro,eR,Rro,Sro,Pro,Qh,lY,$ro,Iro,oR,Dro,jro,Nro,Hh,iY,qro,Gro,rR,Oro,Xro,Vro,Uh,dY,zro,Wro,tR,Qro,Hro,Uro,Jh,cY,Jro,Yro,aR,Kro,Zro,eto,Ss,fY,oto,rto,nR,tto,ato,sR,nto,sto,lto,Yh,mY,ito,dto,lR,cto,fto,mto,Kh,gY,gto,hto,iR,pto,_to,uto,Zh,hY,bto,vto,dR,Tto,Fto,Cto,ep,pY,Mto,Eto,cR,yto,wto,Ato,op,_Y,Lto,Bto,fR,xto,kto,Rto,rp,uY,Sto,Pto,mR,$to,Ito,Dto,tp,bY,jto,Nto,gR,qto,Gto,Oto,ap,vY,Xto,Vto,hR,zto,Wto,Qto,np,TY,Hto,Uto,pR,Jto,Yto,Kto,sp,FY,Zto,eao,_R,oao,rao,tao,lp,CY,aao,nao,uR,sao,lao,iao,ip,MY,dao,cao,bR,fao,mao,gao,dp,EY,hao,pao,vR,_ao,uao,bao,cp,yY,vao,Tao,TR,Fao,Cao,Mao,fp,wY,Eao,yao,FR,wao,Aao,Lao,mp,AY,Bao,xao,CR,kao,Rao,Sao,gp,LY,Pao,$ao,MR,Iao,Dao,jao,hp,BY,Nao,qao,ER,Gao,Oao,Xao,pp,xY,Vao,zao,yR,Wao,Qao,Hao,_p,kY,Uao,Jao,wR,Yao,Kao,Zao,up,RY,eno,ono,AR,rno,tno,ano,bp,SY,nno,sno,LR,lno,ino,dno,vp,PY,cno,fno,BR,mno,gno,hno,Tp,$Y,pno,_no,xR,uno,bno,vno,Fp,IY,Tno,Fno,kR,Cno,Mno,Eno,Cp,DY,yno,wno,RR,Ano,Lno,Bno,Mp,jY,xno,kno,SR,Rno,Sno,Pno,Ep,NY,$no,Ino,PR,Dno,jno,Nno,yp,qY,qno,Gno,$R,Ono,Xno,Vno,wp,GY,zno,Wno,IR,Qno,Hno,Uno,Ap,OY,Jno,Yno,DR,Kno,Zno,eso,Lp,XY,oso,rso,jR,tso,aso,nso,Bp,VY,sso,lso,NR,iso,dso,cso,xp,zY,fso,mso,qR,gso,hso,pso,kp,WY,_so,uso,GR,bso,vso,Tso,Rp,QY,Fso,Cso,OR,Mso,Eso,yso,Sp,HY,wso,Aso,XR,Lso,Bso,xso,Pp,UY,kso,Rso,VR,Sso,Pso,$so,$p,JY,Iso,Dso,zR,jso,Nso,qso,Ip,YY,Gso,Oso,WR,Xso,Vso,zso,Dp,KY,Wso,Qso,QR,Hso,Uso,Jso,jp,ZY,Yso,Kso,HR,Zso,elo,olo,Np,eK,rlo,tlo,UR,alo,nlo,slo,qp,oK,llo,ilo,JR,dlo,clo,flo,Gp,rK,mlo,glo,YR,hlo,plo,_lo,Op,tK,ulo,blo,KR,vlo,Tlo,Flo,Xp,aK,Clo,Mlo,ZR,Elo,ylo,wlo,Vp,nK,Alo,Llo,eS,Blo,xlo,klo,zp,sK,Rlo,Slo,oS,Plo,$lo,Ilo,Wp,lK,Dlo,jlo,rS,Nlo,qlo,Glo,Qp,iK,Olo,Xlo,tS,Vlo,zlo,Wlo,Hp,dK,Qlo,Hlo,aS,Ulo,Jlo,Ylo,Up,cK,Klo,Zlo,nS,eio,oio,rio,Jp,fK,tio,aio,sS,nio,sio,lio,Yp,mK,iio,dio,lS,cio,fio,mio,Kp,gK,gio,hio,iS,pio,_io,uio,Zp,hK,bio,vio,dS,Tio,Fio,Cio,e_,pK,Mio,Eio,cS,yio,wio,Aio,o_,Lio,_K,Bio,xio,uK,kio,Rio,bK,Sio,Pio,aE,E9e,zi,r_,vK,nE,$io,TK,Iio,y9e,Ho,sE,Dio,Wi,jio,FK,Nio,qio,CK,Gio,Oio,Xio,lE,Vio,MK,zio,Wio,Qio,Gr,iE,Hio,EK,Uio,Jio,Qi,Yio,yK,Kio,Zio,wK,edo,odo,rdo,AK,tdo,ado,dE,ndo,Se,cE,sdo,LK,ldo,ido,qa,ddo,BK,cdo,fdo,xK,mdo,gdo,kK,hdo,pdo,_do,k,t_,RK,udo,bdo,fS,vdo,Tdo,Fdo,a_,SK,Cdo,Mdo,mS,Edo,ydo,wdo,n_,PK,Ado,Ldo,gS,Bdo,xdo,kdo,s_,$K,Rdo,Sdo,hS,Pdo,$do,Ido,l_,IK,Ddo,jdo,pS,Ndo,qdo,Gdo,i_,DK,Odo,Xdo,_S,Vdo,zdo,Wdo,d_,jK,Qdo,Hdo,uS,Udo,Jdo,Ydo,c_,NK,Kdo,Zdo,bS,eco,oco,rco,f_,qK,tco,aco,vS,nco,sco,lco,m_,GK,ico,dco,TS,cco,fco,mco,g_,OK,gco,hco,FS,pco,_co,uco,h_,XK,bco,vco,CS,Tco,Fco,Cco,p_,VK,Mco,Eco,MS,yco,wco,Aco,__,zK,Lco,Bco,ES,xco,kco,Rco,u_,WK,Sco,Pco,yS,$co,Ico,Dco,b_,QK,jco,Nco,wS,qco,Gco,Oco,v_,HK,Xco,Vco,AS,zco,Wco,Qco,T_,UK,Hco,Uco,LS,Jco,Yco,Kco,F_,JK,Zco,efo,BS,ofo,rfo,tfo,C_,YK,afo,nfo,xS,sfo,lfo,ifo,M_,KK,dfo,cfo,kS,ffo,mfo,gfo,E_,ZK,hfo,pfo,RS,_fo,ufo,bfo,y_,eZ,vfo,Tfo,SS,Ffo,Cfo,Mfo,w_,oZ,Efo,yfo,PS,wfo,Afo,Lfo,A_,rZ,Bfo,xfo,$S,kfo,Rfo,Sfo,L_,tZ,Pfo,$fo,IS,Ifo,Dfo,jfo,B_,aZ,Nfo,qfo,DS,Gfo,Ofo,Xfo,x_,nZ,Vfo,zfo,jS,Wfo,Qfo,Hfo,k_,sZ,Ufo,Jfo,NS,Yfo,Kfo,Zfo,R_,lZ,emo,omo,qS,rmo,tmo,amo,S_,iZ,nmo,smo,GS,lmo,imo,dmo,P_,dZ,cmo,fmo,OS,mmo,gmo,hmo,$_,cZ,pmo,_mo,XS,umo,bmo,vmo,I_,fZ,Tmo,Fmo,VS,Cmo,Mmo,Emo,D_,mZ,ymo,wmo,zS,Amo,Lmo,Bmo,j_,gZ,xmo,kmo,WS,Rmo,Smo,Pmo,N_,hZ,$mo,Imo,QS,Dmo,jmo,Nmo,q_,pZ,qmo,Gmo,HS,Omo,Xmo,Vmo,G_,_Z,zmo,Wmo,US,Qmo,Hmo,Umo,O_,Jmo,uZ,Ymo,Kmo,bZ,Zmo,ego,vZ,ogo,rgo,fE,w9e,Hi,X_,TZ,mE,tgo,FZ,ago,A9e,Uo,gE,ngo,Ui,sgo,CZ,lgo,igo,MZ,dgo,cgo,fgo,hE,mgo,EZ,ggo,hgo,pgo,Or,pE,_go,yZ,ugo,bgo,Ji,vgo,wZ,Tgo,Fgo,AZ,Cgo,Mgo,Ego,LZ,ygo,wgo,_E,Ago,Pe,uE,Lgo,BZ,Bgo,xgo,Ga,kgo,xZ,Rgo,Sgo,kZ,Pgo,$go,RZ,Igo,Dgo,jgo,$,V_,SZ,Ngo,qgo,JS,Ggo,Ogo,Xgo,z_,PZ,Vgo,zgo,YS,Wgo,Qgo,Hgo,W_,$Z,Ugo,Jgo,KS,Ygo,Kgo,Zgo,Q_,IZ,eho,oho,ZS,rho,tho,aho,H_,DZ,nho,sho,eP,lho,iho,dho,U_,jZ,cho,fho,oP,mho,gho,hho,J_,NZ,pho,_ho,rP,uho,bho,vho,Y_,qZ,Tho,Fho,tP,Cho,Mho,Eho,K_,GZ,yho,who,aP,Aho,Lho,Bho,Z_,OZ,xho,kho,nP,Rho,Sho,Pho,eu,XZ,$ho,Iho,sP,Dho,jho,Nho,ou,VZ,qho,Gho,lP,Oho,Xho,Vho,ru,zZ,zho,Who,iP,Qho,Hho,Uho,tu,WZ,Jho,Yho,dP,Kho,Zho,epo,au,QZ,opo,rpo,cP,tpo,apo,npo,nu,HZ,spo,lpo,fP,ipo,dpo,cpo,su,UZ,fpo,mpo,mP,gpo,hpo,ppo,lu,JZ,_po,upo,gP,bpo,vpo,Tpo,iu,YZ,Fpo,Cpo,hP,Mpo,Epo,ypo,du,KZ,wpo,Apo,pP,Lpo,Bpo,xpo,cu,ZZ,kpo,Rpo,_P,Spo,Ppo,$po,fu,eee,Ipo,Dpo,uP,jpo,Npo,qpo,mu,oee,Gpo,Opo,bP,Xpo,Vpo,zpo,gu,ree,Wpo,Qpo,vP,Hpo,Upo,Jpo,hu,tee,Ypo,Kpo,TP,Zpo,e_o,o_o,pu,aee,r_o,t_o,FP,a_o,n_o,s_o,_u,nee,l_o,i_o,CP,d_o,c_o,f_o,uu,see,m_o,g_o,MP,h_o,p_o,__o,bu,lee,u_o,b_o,EP,v_o,T_o,F_o,vu,iee,C_o,M_o,yP,E_o,y_o,w_o,Tu,dee,A_o,L_o,wP,B_o,x_o,k_o,Fu,cee,R_o,S_o,AP,P_o,$_o,I_o,Cu,fee,D_o,j_o,LP,N_o,q_o,G_o,Mu,mee,O_o,X_o,BP,V_o,z_o,W_o,Eu,gee,Q_o,H_o,xP,U_o,J_o,Y_o,yu,K_o,hee,Z_o,euo,pee,ouo,ruo,_ee,tuo,auo,bE,L9e,Yi,wu,uee,vE,nuo,bee,suo,B9e,Jo,TE,luo,Ki,iuo,vee,duo,cuo,Tee,fuo,muo,guo,FE,huo,Fee,puo,_uo,uuo,Xr,CE,buo,Cee,vuo,Tuo,Zi,Fuo,Mee,Cuo,Muo,Eee,Euo,yuo,wuo,yee,Auo,Luo,ME,Buo,$e,EE,xuo,wee,kuo,Ruo,Oa,Suo,Aee,Puo,$uo,Lee,Iuo,Duo,Bee,juo,Nuo,quo,I,Au,xee,Guo,Ouo,kP,Xuo,Vuo,zuo,Lu,kee,Wuo,Quo,RP,Huo,Uuo,Juo,Bu,Ree,Yuo,Kuo,SP,Zuo,e5o,o5o,xu,See,r5o,t5o,PP,a5o,n5o,s5o,ku,Pee,l5o,i5o,$P,d5o,c5o,f5o,Ru,$ee,m5o,g5o,IP,h5o,p5o,_5o,Su,Iee,u5o,b5o,DP,v5o,T5o,F5o,Pu,Dee,C5o,M5o,jP,E5o,y5o,w5o,$u,jee,A5o,L5o,NP,B5o,x5o,k5o,Iu,Nee,R5o,S5o,qP,P5o,$5o,I5o,Du,qee,D5o,j5o,GP,N5o,q5o,G5o,ju,Gee,O5o,X5o,OP,V5o,z5o,W5o,Nu,Oee,Q5o,H5o,XP,U5o,J5o,Y5o,qu,Xee,K5o,Z5o,VP,e1o,o1o,r1o,Gu,Vee,t1o,a1o,zP,n1o,s1o,l1o,Ou,zee,i1o,d1o,WP,c1o,f1o,m1o,Xu,Wee,g1o,h1o,QP,p1o,_1o,u1o,Vu,Qee,b1o,v1o,HP,T1o,F1o,C1o,zu,Hee,M1o,E1o,UP,y1o,w1o,A1o,Wu,Uee,L1o,B1o,JP,x1o,k1o,R1o,Qu,Jee,S1o,P1o,YP,$1o,I1o,D1o,Hu,Yee,j1o,N1o,KP,q1o,G1o,O1o,Uu,Kee,X1o,V1o,ZP,z1o,W1o,Q1o,Ju,Zee,H1o,U1o,e$,J1o,Y1o,K1o,Yu,eoe,Z1o,ebo,o$,obo,rbo,tbo,Ku,ooe,abo,nbo,r$,sbo,lbo,ibo,Zu,roe,dbo,cbo,t$,fbo,mbo,gbo,e5,toe,hbo,pbo,a$,_bo,ubo,bbo,o5,aoe,vbo,Tbo,n$,Fbo,Cbo,Mbo,r5,noe,Ebo,ybo,s$,wbo,Abo,Lbo,t5,soe,Bbo,xbo,loe,kbo,Rbo,Sbo,a5,ioe,Pbo,$bo,l$,Ibo,Dbo,jbo,n5,doe,Nbo,qbo,i$,Gbo,Obo,Xbo,s5,coe,Vbo,zbo,d$,Wbo,Qbo,Hbo,l5,foe,Ubo,Jbo,c$,Ybo,Kbo,Zbo,i5,e2o,moe,o2o,r2o,goe,t2o,a2o,hoe,n2o,s2o,yE,x9e,ed,d5,poe,wE,l2o,_oe,i2o,k9e,Yo,AE,d2o,od,c2o,uoe,f2o,m2o,boe,g2o,h2o,p2o,LE,_2o,voe,u2o,b2o,v2o,Vr,BE,T2o,Toe,F2o,C2o,rd,M2o,Foe,E2o,y2o,Coe,w2o,A2o,L2o,Moe,B2o,x2o,xE,k2o,Ie,kE,R2o,Eoe,S2o,P2o,Xa,$2o,yoe,I2o,D2o,woe,j2o,N2o,Aoe,q2o,G2o,O2o,ae,c5,Loe,X2o,V2o,f$,z2o,W2o,Q2o,f5,Boe,H2o,U2o,m$,J2o,Y2o,K2o,m5,xoe,Z2o,evo,g$,ovo,rvo,tvo,g5,koe,avo,nvo,h$,svo,lvo,ivo,h5,Roe,dvo,cvo,p$,fvo,mvo,gvo,p5,Soe,hvo,pvo,_$,_vo,uvo,bvo,_5,Poe,vvo,Tvo,u$,Fvo,Cvo,Mvo,u5,$oe,Evo,yvo,b$,wvo,Avo,Lvo,b5,Ioe,Bvo,xvo,v$,kvo,Rvo,Svo,v5,Doe,Pvo,$vo,T$,Ivo,Dvo,jvo,T5,joe,Nvo,qvo,F$,Gvo,Ovo,Xvo,F5,Noe,Vvo,zvo,C$,Wvo,Qvo,Hvo,C5,qoe,Uvo,Jvo,M$,Yvo,Kvo,Zvo,M5,Goe,e0o,o0o,E$,r0o,t0o,a0o,E5,Ooe,n0o,s0o,y$,l0o,i0o,d0o,y5,Xoe,c0o,f0o,w$,m0o,g0o,h0o,w5,p0o,Voe,_0o,u0o,zoe,b0o,v0o,Woe,T0o,F0o,RE,R9e,td,A5,Qoe,SE,C0o,Hoe,M0o,S9e,Ko,PE,E0o,ad,y0o,Uoe,w0o,A0o,Joe,L0o,B0o,x0o,$E,k0o,Yoe,R0o,S0o,P0o,zr,IE,$0o,Koe,I0o,D0o,nd,j0o,Zoe,N0o,q0o,ere,G0o,O0o,X0o,ore,V0o,z0o,DE,W0o,De,jE,Q0o,rre,H0o,U0o,Va,J0o,tre,Y0o,K0o,are,Z0o,eTo,nre,oTo,rTo,tTo,A,L5,sre,aTo,nTo,A$,sTo,lTo,iTo,B5,lre,dTo,cTo,L$,fTo,mTo,gTo,x5,ire,hTo,pTo,B$,_To,uTo,bTo,k5,dre,vTo,TTo,x$,FTo,CTo,MTo,R5,cre,ETo,yTo,k$,wTo,ATo,LTo,S5,fre,BTo,xTo,R$,kTo,RTo,STo,P5,mre,PTo,$To,S$,ITo,DTo,jTo,$5,gre,NTo,qTo,P$,GTo,OTo,XTo,I5,hre,VTo,zTo,$$,WTo,QTo,HTo,D5,pre,UTo,JTo,I$,YTo,KTo,ZTo,j5,_re,e7o,o7o,D$,r7o,t7o,a7o,N5,ure,n7o,s7o,j$,l7o,i7o,d7o,q5,bre,c7o,f7o,N$,m7o,g7o,h7o,G5,vre,p7o,_7o,q$,u7o,b7o,v7o,O5,Tre,T7o,F7o,G$,C7o,M7o,E7o,X5,Fre,y7o,w7o,O$,A7o,L7o,B7o,V5,Cre,x7o,k7o,X$,R7o,S7o,P7o,z5,Mre,$7o,I7o,V$,D7o,j7o,N7o,W5,Ere,q7o,G7o,z$,O7o,X7o,V7o,Q5,yre,z7o,W7o,W$,Q7o,H7o,U7o,H5,wre,J7o,Y7o,Q$,K7o,Z7o,eFo,U5,Are,oFo,rFo,H$,tFo,aFo,nFo,J5,Lre,sFo,lFo,U$,iFo,dFo,cFo,Y5,Bre,fFo,mFo,J$,gFo,hFo,pFo,K5,xre,_Fo,uFo,Y$,bFo,vFo,TFo,Z5,kre,FFo,CFo,K$,MFo,EFo,yFo,e1,Rre,wFo,AFo,Z$,LFo,BFo,xFo,o1,Sre,kFo,RFo,eI,SFo,PFo,$Fo,r1,Pre,IFo,DFo,oI,jFo,NFo,qFo,t1,$re,GFo,OFo,rI,XFo,VFo,zFo,a1,Ire,WFo,QFo,tI,HFo,UFo,JFo,n1,Dre,YFo,KFo,aI,ZFo,eCo,oCo,s1,jre,rCo,tCo,nI,aCo,nCo,sCo,l1,Nre,lCo,iCo,sI,dCo,cCo,fCo,i1,qre,mCo,gCo,lI,hCo,pCo,_Co,d1,Gre,uCo,bCo,iI,vCo,TCo,FCo,c1,Ore,CCo,MCo,dI,ECo,yCo,wCo,f1,Xre,ACo,LCo,cI,BCo,xCo,kCo,m1,Vre,RCo,SCo,fI,PCo,$Co,ICo,g1,zre,DCo,jCo,mI,NCo,qCo,GCo,h1,Wre,OCo,XCo,gI,VCo,zCo,WCo,p1,Qre,QCo,HCo,hI,UCo,JCo,YCo,_1,Hre,KCo,ZCo,pI,e4o,o4o,r4o,u1,Ure,t4o,a4o,_I,n4o,s4o,l4o,b1,Jre,i4o,d4o,uI,c4o,f4o,m4o,v1,Yre,g4o,h4o,bI,p4o,_4o,u4o,T1,b4o,Kre,v4o,T4o,Zre,F4o,C4o,ete,M4o,E4o,NE,P9e,sd,F1,ote,qE,y4o,rte,w4o,$9e,Zo,GE,A4o,ld,L4o,tte,B4o,x4o,ate,k4o,R4o,S4o,OE,P4o,nte,$4o,I4o,D4o,Wr,XE,j4o,ste,N4o,q4o,id,G4o,lte,O4o,X4o,ite,V4o,z4o,W4o,dte,Q4o,H4o,VE,U4o,je,zE,J4o,cte,Y4o,K4o,za,Z4o,fte,eMo,oMo,mte,rMo,tMo,gte,aMo,nMo,sMo,G,C1,hte,lMo,iMo,vI,dMo,cMo,fMo,M1,pte,mMo,gMo,TI,hMo,pMo,_Mo,E1,_te,uMo,bMo,FI,vMo,TMo,FMo,y1,ute,CMo,MMo,CI,EMo,yMo,wMo,w1,bte,AMo,LMo,MI,BMo,xMo,kMo,A1,vte,RMo,SMo,EI,PMo,$Mo,IMo,L1,Tte,DMo,jMo,yI,NMo,qMo,GMo,B1,Fte,OMo,XMo,wI,VMo,zMo,WMo,x1,Cte,QMo,HMo,AI,UMo,JMo,YMo,k1,Mte,KMo,ZMo,LI,eEo,oEo,rEo,R1,Ete,tEo,aEo,BI,nEo,sEo,lEo,S1,yte,iEo,dEo,xI,cEo,fEo,mEo,P1,wte,gEo,hEo,kI,pEo,_Eo,uEo,$1,Ate,bEo,vEo,RI,TEo,FEo,CEo,I1,Lte,MEo,EEo,SI,yEo,wEo,AEo,D1,Bte,LEo,BEo,PI,xEo,kEo,REo,j1,xte,SEo,PEo,$I,$Eo,IEo,DEo,N1,kte,jEo,NEo,II,qEo,GEo,OEo,q1,Rte,XEo,VEo,DI,zEo,WEo,QEo,G1,Ste,HEo,UEo,jI,JEo,YEo,KEo,O1,Pte,ZEo,e3o,NI,o3o,r3o,t3o,X1,$te,a3o,n3o,qI,s3o,l3o,i3o,V1,Ite,d3o,c3o,GI,f3o,m3o,g3o,z1,Dte,h3o,p3o,OI,_3o,u3o,b3o,W1,jte,v3o,T3o,XI,F3o,C3o,M3o,Q1,Nte,E3o,y3o,VI,w3o,A3o,L3o,H1,qte,B3o,x3o,zI,k3o,R3o,S3o,U1,Gte,P3o,$3o,WI,I3o,D3o,j3o,J1,N3o,Ote,q3o,G3o,Xte,O3o,X3o,Vte,V3o,z3o,WE,I9e,dd,Y1,zte,QE,W3o,Wte,Q3o,D9e,er,HE,H3o,cd,U3o,Qte,J3o,Y3o,Hte,K3o,Z3o,eyo,UE,oyo,Ute,ryo,tyo,ayo,Qr,JE,nyo,Jte,syo,lyo,fd,iyo,Yte,dyo,cyo,Kte,fyo,myo,gyo,Zte,hyo,pyo,YE,_yo,Ne,KE,uyo,eae,byo,vyo,Wa,Tyo,oae,Fyo,Cyo,rae,Myo,Eyo,tae,yyo,wyo,Ayo,na,K1,aae,Lyo,Byo,QI,xyo,kyo,Ryo,Z1,nae,Syo,Pyo,HI,$yo,Iyo,Dyo,eb,sae,jyo,Nyo,UI,qyo,Gyo,Oyo,ob,lae,Xyo,Vyo,JI,zyo,Wyo,Qyo,rb,iae,Hyo,Uyo,YI,Jyo,Yyo,Kyo,tb,Zyo,dae,ewo,owo,cae,rwo,two,fae,awo,nwo,ZE,j9e,md,ab,mae,e3,swo,gae,lwo,N9e,or,o3,iwo,gd,dwo,hae,cwo,fwo,pae,mwo,gwo,hwo,r3,pwo,_ae,_wo,uwo,bwo,Hr,t3,vwo,uae,Two,Fwo,hd,Cwo,bae,Mwo,Ewo,vae,ywo,wwo,Awo,Tae,Lwo,Bwo,a3,xwo,qe,n3,kwo,Fae,Rwo,Swo,Qa,Pwo,Cae,$wo,Iwo,Mae,Dwo,jwo,Eae,Nwo,qwo,Gwo,N,nb,yae,Owo,Xwo,KI,Vwo,zwo,Wwo,sb,wae,Qwo,Hwo,ZI,Uwo,Jwo,Ywo,lb,Aae,Kwo,Zwo,eD,e6o,o6o,r6o,ib,Lae,t6o,a6o,oD,n6o,s6o,l6o,db,Bae,i6o,d6o,rD,c6o,f6o,m6o,cb,xae,g6o,h6o,tD,p6o,_6o,u6o,fb,kae,b6o,v6o,aD,T6o,F6o,C6o,mb,Rae,M6o,E6o,nD,y6o,w6o,A6o,gb,Sae,L6o,B6o,sD,x6o,k6o,R6o,hb,Pae,S6o,P6o,lD,$6o,I6o,D6o,pb,$ae,j6o,N6o,iD,q6o,G6o,O6o,_b,Iae,X6o,V6o,dD,z6o,W6o,Q6o,ub,Dae,H6o,U6o,cD,J6o,Y6o,K6o,bb,jae,Z6o,eAo,fD,oAo,rAo,tAo,vb,Nae,aAo,nAo,mD,sAo,lAo,iAo,Tb,qae,dAo,cAo,gD,fAo,mAo,gAo,Fb,Gae,hAo,pAo,hD,_Ao,uAo,bAo,Cb,Oae,vAo,TAo,pD,FAo,CAo,MAo,Mb,Xae,EAo,yAo,_D,wAo,AAo,LAo,Eb,Vae,BAo,xAo,uD,kAo,RAo,SAo,yb,zae,PAo,$Ao,bD,IAo,DAo,jAo,wb,Wae,NAo,qAo,vD,GAo,OAo,XAo,Ab,Qae,VAo,zAo,TD,WAo,QAo,HAo,Lb,Hae,UAo,JAo,FD,YAo,KAo,ZAo,Bb,Uae,eLo,oLo,CD,rLo,tLo,aLo,xb,Jae,nLo,sLo,MD,lLo,iLo,dLo,kb,Yae,cLo,fLo,ED,mLo,gLo,hLo,Rb,Kae,pLo,_Lo,yD,uLo,bLo,vLo,Sb,Zae,TLo,FLo,wD,CLo,MLo,ELo,Pb,ene,yLo,wLo,AD,ALo,LLo,BLo,$b,one,xLo,kLo,LD,RLo,SLo,PLo,Ib,rne,$Lo,ILo,BD,DLo,jLo,NLo,Db,tne,qLo,GLo,xD,OLo,XLo,VLo,jb,zLo,ane,WLo,QLo,nne,HLo,ULo,sne,JLo,YLo,s3,q9e,pd,Nb,lne,l3,KLo,ine,ZLo,G9e,rr,i3,e8o,_d,o8o,dne,r8o,t8o,cne,a8o,n8o,s8o,d3,l8o,fne,i8o,d8o,c8o,Ur,c3,f8o,mne,m8o,g8o,ud,h8o,gne,p8o,_8o,hne,u8o,b8o,v8o,pne,T8o,F8o,f3,C8o,Ge,m3,M8o,_ne,E8o,y8o,Ha,w8o,une,A8o,L8o,bne,B8o,x8o,vne,k8o,R8o,S8o,R,qb,Tne,P8o,$8o,kD,I8o,D8o,j8o,Gb,Fne,N8o,q8o,RD,G8o,O8o,X8o,Ob,Cne,V8o,z8o,SD,W8o,Q8o,H8o,Xb,Mne,U8o,J8o,PD,Y8o,K8o,Z8o,Vb,Ene,e9o,o9o,$D,r9o,t9o,a9o,zb,yne,n9o,s9o,ID,l9o,i9o,d9o,Wb,wne,c9o,f9o,DD,m9o,g9o,h9o,Qb,Ane,p9o,_9o,jD,u9o,b9o,v9o,Hb,Lne,T9o,F9o,ND,C9o,M9o,E9o,Ub,Bne,y9o,w9o,qD,A9o,L9o,B9o,Jb,xne,x9o,k9o,GD,R9o,S9o,P9o,Yb,kne,$9o,I9o,OD,D9o,j9o,N9o,Kb,Rne,q9o,G9o,XD,O9o,X9o,V9o,Zb,Sne,z9o,W9o,VD,Q9o,H9o,U9o,e2,Pne,J9o,Y9o,zD,K9o,Z9o,eBo,o2,$ne,oBo,rBo,WD,tBo,aBo,nBo,r2,Ine,sBo,lBo,QD,iBo,dBo,cBo,t2,Dne,fBo,mBo,HD,gBo,hBo,pBo,a2,jne,_Bo,uBo,UD,bBo,vBo,TBo,n2,Nne,FBo,CBo,JD,MBo,EBo,yBo,s2,qne,wBo,ABo,YD,LBo,BBo,xBo,l2,Gne,kBo,RBo,KD,SBo,PBo,$Bo,i2,One,IBo,DBo,ZD,jBo,NBo,qBo,d2,Xne,GBo,OBo,ej,XBo,VBo,zBo,c2,Vne,WBo,QBo,oj,HBo,UBo,JBo,f2,zne,YBo,KBo,rj,ZBo,exo,oxo,m2,Wne,rxo,txo,tj,axo,nxo,sxo,g2,Qne,lxo,ixo,aj,dxo,cxo,fxo,h2,Hne,mxo,gxo,nj,hxo,pxo,_xo,p2,Une,uxo,bxo,sj,vxo,Txo,Fxo,_2,Jne,Cxo,Mxo,lj,Exo,yxo,wxo,u2,Yne,Axo,Lxo,ij,Bxo,xxo,kxo,b2,Kne,Rxo,Sxo,dj,Pxo,$xo,Ixo,v2,Zne,Dxo,jxo,cj,Nxo,qxo,Gxo,T2,ese,Oxo,Xxo,fj,Vxo,zxo,Wxo,F2,ose,Qxo,Hxo,mj,Uxo,Jxo,Yxo,C2,rse,Kxo,Zxo,gj,eko,oko,rko,M2,tse,tko,ako,hj,nko,sko,lko,E2,ase,iko,dko,pj,cko,fko,mko,y2,gko,nse,hko,pko,sse,_ko,uko,lse,bko,vko,g3,O9e,bd,w2,ise,h3,Tko,dse,Fko,X9e,tr,p3,Cko,vd,Mko,cse,Eko,yko,fse,wko,Ako,Lko,_3,Bko,mse,xko,kko,Rko,Jr,u3,Sko,gse,Pko,$ko,Td,Iko,hse,Dko,jko,pse,Nko,qko,Gko,_se,Oko,Xko,b3,Vko,Oe,v3,zko,use,Wko,Qko,Ua,Hko,bse,Uko,Jko,vse,Yko,Kko,Tse,Zko,eRo,oRo,Fse,A2,Cse,rRo,tRo,_j,aRo,nRo,sRo,L2,lRo,Mse,iRo,dRo,Ese,cRo,fRo,yse,mRo,gRo,T3,V9e,Fd,B2,wse,F3,hRo,Ase,pRo,z9e,ar,C3,_Ro,Cd,uRo,Lse,bRo,vRo,Bse,TRo,FRo,CRo,M3,MRo,xse,ERo,yRo,wRo,Yr,E3,ARo,kse,LRo,BRo,Md,xRo,Rse,kRo,RRo,Sse,SRo,PRo,$Ro,Pse,IRo,DRo,y3,jRo,Xe,w3,NRo,$se,qRo,GRo,Ja,ORo,Ise,XRo,VRo,Dse,zRo,WRo,jse,QRo,HRo,URo,be,x2,Nse,JRo,YRo,uj,KRo,ZRo,eSo,k2,qse,oSo,rSo,bj,tSo,aSo,nSo,Ps,Gse,sSo,lSo,vj,iSo,dSo,Tj,cSo,fSo,mSo,R2,Ose,gSo,hSo,Fj,pSo,_So,uSo,la,Xse,bSo,vSo,Cj,TSo,FSo,Mj,CSo,MSo,Ej,ESo,ySo,wSo,S2,Vse,ASo,LSo,yj,BSo,xSo,kSo,P2,zse,RSo,SSo,wj,PSo,$So,ISo,$2,Wse,DSo,jSo,Aj,NSo,qSo,GSo,I2,Qse,OSo,XSo,Lj,VSo,zSo,WSo,D2,QSo,Hse,HSo,USo,Use,JSo,YSo,Jse,KSo,ZSo,A3,W9e,Ed,j2,Yse,L3,ePo,Kse,oPo,Q9e,nr,B3,rPo,yd,tPo,Zse,aPo,nPo,ele,sPo,lPo,iPo,x3,dPo,ole,cPo,fPo,mPo,Kr,k3,gPo,rle,hPo,pPo,wd,_Po,tle,uPo,bPo,ale,vPo,TPo,FPo,nle,CPo,MPo,R3,EPo,Ve,S3,yPo,sle,wPo,APo,Ya,LPo,lle,BPo,xPo,ile,kPo,RPo,dle,SPo,PPo,$Po,cle,N2,fle,IPo,DPo,Bj,jPo,NPo,qPo,q2,GPo,mle,OPo,XPo,gle,VPo,zPo,hle,WPo,QPo,P3,H9e,Ad,G2,ple,$3,HPo,_le,UPo,U9e,sr,I3,JPo,Ld,YPo,ule,KPo,ZPo,ble,e$o,o$o,r$o,D3,t$o,vle,a$o,n$o,s$o,Zr,j3,l$o,Tle,i$o,d$o,Bd,c$o,Fle,f$o,m$o,Cle,g$o,h$o,p$o,Mle,_$o,u$o,N3,b$o,ze,q3,v$o,Ele,T$o,F$o,Ka,C$o,yle,M$o,E$o,wle,y$o,w$o,Ale,A$o,L$o,B$o,Ae,O2,Lle,x$o,k$o,xj,R$o,S$o,P$o,X2,Ble,$$o,I$o,kj,D$o,j$o,N$o,V2,xle,q$o,G$o,Rj,O$o,X$o,V$o,z2,kle,z$o,W$o,Sj,Q$o,H$o,U$o,W2,Rle,J$o,Y$o,Pj,K$o,Z$o,eIo,Q2,Sle,oIo,rIo,$j,tIo,aIo,nIo,H2,Ple,sIo,lIo,Ij,iIo,dIo,cIo,U2,$le,fIo,mIo,Dj,gIo,hIo,pIo,J2,_Io,Ile,uIo,bIo,Dle,vIo,TIo,jle,FIo,CIo,G3,J9e,xd,Y2,Nle,O3,MIo,qle,EIo,Y9e,lr,X3,yIo,kd,wIo,Gle,AIo,LIo,Ole,BIo,xIo,kIo,V3,RIo,Xle,SIo,PIo,$Io,et,z3,IIo,Vle,DIo,jIo,Rd,NIo,zle,qIo,GIo,Wle,OIo,XIo,VIo,Qle,zIo,WIo,W3,QIo,We,Q3,HIo,Hle,UIo,JIo,Za,YIo,Ule,KIo,ZIo,Jle,eDo,oDo,Yle,rDo,tDo,aDo,en,K2,Kle,nDo,sDo,jj,lDo,iDo,dDo,Z2,Zle,cDo,fDo,Nj,mDo,gDo,hDo,ev,eie,pDo,_Do,qj,uDo,bDo,vDo,ov,oie,TDo,FDo,Gj,CDo,MDo,EDo,rv,yDo,rie,wDo,ADo,tie,LDo,BDo,aie,xDo,kDo,H3,K9e,Sd,tv,nie,U3,RDo,sie,SDo,Z9e,ir,J3,PDo,Pd,$Do,lie,IDo,DDo,iie,jDo,NDo,qDo,Y3,GDo,die,ODo,XDo,VDo,ot,K3,zDo,cie,WDo,QDo,$d,HDo,fie,UDo,JDo,mie,YDo,KDo,ZDo,gie,ejo,ojo,Z3,rjo,Qe,ey,tjo,hie,ajo,njo,on,sjo,pie,ljo,ijo,_ie,djo,cjo,uie,fjo,mjo,gjo,Le,av,bie,hjo,pjo,Oj,_jo,ujo,bjo,nv,vie,vjo,Tjo,Xj,Fjo,Cjo,Mjo,sv,Tie,Ejo,yjo,Vj,wjo,Ajo,Ljo,lv,Fie,Bjo,xjo,zj,kjo,Rjo,Sjo,iv,Cie,Pjo,$jo,Wj,Ijo,Djo,jjo,dv,Mie,Njo,qjo,Qj,Gjo,Ojo,Xjo,cv,Eie,Vjo,zjo,Hj,Wjo,Qjo,Hjo,fv,yie,Ujo,Jjo,Uj,Yjo,Kjo,Zjo,mv,eNo,wie,oNo,rNo,Aie,tNo,aNo,Lie,nNo,sNo,oy,eBe,Id,gv,Bie,ry,lNo,xie,iNo,oBe,dr,ty,dNo,Dd,cNo,kie,fNo,mNo,Rie,gNo,hNo,pNo,ay,_No,Sie,uNo,bNo,vNo,rt,ny,TNo,Pie,FNo,CNo,jd,MNo,$ie,ENo,yNo,Iie,wNo,ANo,LNo,Die,BNo,xNo,sy,kNo,He,ly,RNo,jie,SNo,PNo,rn,$No,Nie,INo,DNo,qie,jNo,NNo,Gie,qNo,GNo,ONo,iy,hv,Oie,XNo,VNo,Jj,zNo,WNo,QNo,pv,Xie,HNo,UNo,Yj,JNo,YNo,KNo,_v,ZNo,Vie,eqo,oqo,zie,rqo,tqo,Wie,aqo,nqo,dy,rBe,Nd,uv,Qie,cy,sqo,Hie,lqo,tBe,cr,fy,iqo,qd,dqo,Uie,cqo,fqo,Jie,mqo,gqo,hqo,my,pqo,Yie,_qo,uqo,bqo,tt,gy,vqo,Kie,Tqo,Fqo,Gd,Cqo,Zie,Mqo,Eqo,ede,yqo,wqo,Aqo,ode,Lqo,Bqo,hy,xqo,Ue,py,kqo,rde,Rqo,Sqo,tn,Pqo,tde,$qo,Iqo,ade,Dqo,jqo,nde,Nqo,qqo,Gqo,an,bv,sde,Oqo,Xqo,Kj,Vqo,zqo,Wqo,vv,lde,Qqo,Hqo,Zj,Uqo,Jqo,Yqo,Tv,ide,Kqo,Zqo,eN,eGo,oGo,rGo,Fv,dde,tGo,aGo,oN,nGo,sGo,lGo,Cv,iGo,cde,dGo,cGo,fde,fGo,mGo,mde,gGo,hGo,_y,aBe,Od,Mv,gde,uy,pGo,hde,_Go,nBe,fr,by,uGo,Xd,bGo,pde,vGo,TGo,_de,FGo,CGo,MGo,vy,EGo,ude,yGo,wGo,AGo,at,Ty,LGo,bde,BGo,xGo,Vd,kGo,vde,RGo,SGo,Tde,PGo,$Go,IGo,Fde,DGo,jGo,Fy,NGo,Je,Cy,qGo,Cde,GGo,OGo,nn,XGo,Mde,VGo,zGo,Ede,WGo,QGo,yde,HGo,UGo,JGo,zd,Ev,wde,YGo,KGo,rN,ZGo,eOo,oOo,yv,Ade,rOo,tOo,tN,aOo,nOo,sOo,wv,Lde,lOo,iOo,aN,dOo,cOo,fOo,Av,mOo,Bde,gOo,hOo,xde,pOo,_Oo,kde,uOo,bOo,My,sBe,Wd,Lv,Rde,Ey,vOo,Sde,TOo,lBe,mr,yy,FOo,Qd,COo,Pde,MOo,EOo,$de,yOo,wOo,AOo,wy,LOo,Ide,BOo,xOo,kOo,nt,Ay,ROo,Dde,SOo,POo,Hd,$Oo,jde,IOo,DOo,Nde,jOo,NOo,qOo,qde,GOo,OOo,Ly,XOo,Ye,By,VOo,Gde,zOo,WOo,sn,QOo,Ode,HOo,UOo,Xde,JOo,YOo,Vde,KOo,ZOo,eXo,zde,Bv,Wde,oXo,rXo,nN,tXo,aXo,nXo,xv,sXo,Qde,lXo,iXo,Hde,dXo,cXo,Ude,fXo,mXo,xy,iBe,Ud,kv,Jde,ky,gXo,Yde,hXo,dBe,gr,Ry,pXo,Jd,_Xo,Kde,uXo,bXo,Zde,vXo,TXo,FXo,Sy,CXo,ece,MXo,EXo,yXo,st,Py,wXo,oce,AXo,LXo,Yd,BXo,rce,xXo,kXo,tce,RXo,SXo,PXo,ace,$Xo,IXo,$y,DXo,Ke,Iy,jXo,nce,NXo,qXo,ln,GXo,sce,OXo,XXo,lce,VXo,zXo,ice,WXo,QXo,HXo,dce,Rv,cce,UXo,JXo,sN,YXo,KXo,ZXo,Sv,eVo,fce,oVo,rVo,mce,tVo,aVo,gce,nVo,sVo,Dy,cBe,Kd,Pv,hce,jy,lVo,pce,iVo,fBe,hr,Ny,dVo,Zd,cVo,_ce,fVo,mVo,uce,gVo,hVo,pVo,qy,_Vo,bce,uVo,bVo,vVo,lt,Gy,TVo,vce,FVo,CVo,ec,MVo,Tce,EVo,yVo,Fce,wVo,AVo,LVo,Cce,BVo,xVo,Oy,kVo,Ze,Xy,RVo,Mce,SVo,PVo,dn,$Vo,Ece,IVo,DVo,yce,jVo,NVo,wce,qVo,GVo,OVo,Vy,$v,Ace,XVo,VVo,lN,zVo,WVo,QVo,Iv,Lce,HVo,UVo,iN,JVo,YVo,KVo,Dv,ZVo,Bce,ezo,ozo,xce,rzo,tzo,kce,azo,nzo,zy,mBe,oc,jv,Rce,Wy,szo,Sce,lzo,gBe,pr,Qy,izo,rc,dzo,Pce,czo,fzo,$ce,mzo,gzo,hzo,Hy,pzo,Ice,_zo,uzo,bzo,it,Uy,vzo,Dce,Tzo,Fzo,tc,Czo,jce,Mzo,Ezo,Nce,yzo,wzo,Azo,qce,Lzo,Bzo,Jy,xzo,go,Yy,kzo,Gce,Rzo,Szo,cn,Pzo,Oce,$zo,Izo,Xce,Dzo,jzo,Vce,Nzo,qzo,Gzo,B,Nv,zce,Ozo,Xzo,dN,Vzo,zzo,Wzo,qv,Wce,Qzo,Hzo,cN,Uzo,Jzo,Yzo,Gv,Qce,Kzo,Zzo,fN,eWo,oWo,rWo,Ov,Hce,tWo,aWo,mN,nWo,sWo,lWo,Xv,Uce,iWo,dWo,gN,cWo,fWo,mWo,Vv,Jce,gWo,hWo,hN,pWo,_Wo,uWo,zv,Yce,bWo,vWo,pN,TWo,FWo,CWo,Wv,Kce,MWo,EWo,_N,yWo,wWo,AWo,Qv,Zce,LWo,BWo,uN,xWo,kWo,RWo,Hv,efe,SWo,PWo,bN,$Wo,IWo,DWo,Uv,ofe,jWo,NWo,vN,qWo,GWo,OWo,Jv,rfe,XWo,VWo,TN,zWo,WWo,QWo,Yv,tfe,HWo,UWo,FN,JWo,YWo,KWo,Kv,afe,ZWo,eQo,CN,oQo,rQo,tQo,Zv,nfe,aQo,nQo,MN,sQo,lQo,iQo,$s,sfe,dQo,cQo,EN,fQo,mQo,yN,gQo,hQo,pQo,e0,lfe,_Qo,uQo,wN,bQo,vQo,TQo,o0,ife,FQo,CQo,AN,MQo,EQo,yQo,r0,dfe,wQo,AQo,LN,LQo,BQo,xQo,t0,cfe,kQo,RQo,BN,SQo,PQo,$Qo,a0,ffe,IQo,DQo,xN,jQo,NQo,qQo,n0,mfe,GQo,OQo,kN,XQo,VQo,zQo,s0,gfe,WQo,QQo,RN,HQo,UQo,JQo,l0,hfe,YQo,KQo,SN,ZQo,eHo,oHo,i0,pfe,rHo,tHo,PN,aHo,nHo,sHo,d0,_fe,lHo,iHo,$N,dHo,cHo,fHo,c0,ufe,mHo,gHo,IN,hHo,pHo,_Ho,f0,bfe,uHo,bHo,DN,vHo,THo,FHo,m0,vfe,CHo,MHo,jN,EHo,yHo,wHo,g0,Tfe,AHo,LHo,NN,BHo,xHo,kHo,h0,Ffe,RHo,SHo,qN,PHo,$Ho,IHo,p0,Cfe,DHo,jHo,GN,NHo,qHo,GHo,_0,Mfe,OHo,XHo,ON,VHo,zHo,WHo,u0,Efe,QHo,HHo,XN,UHo,JHo,YHo,b0,yfe,KHo,ZHo,VN,eUo,oUo,rUo,v0,wfe,tUo,aUo,zN,nUo,sUo,lUo,T0,Afe,iUo,dUo,WN,cUo,fUo,mUo,F0,Lfe,gUo,hUo,QN,pUo,_Uo,uUo,C0,Bfe,bUo,vUo,HN,TUo,FUo,CUo,M0,xfe,MUo,EUo,UN,yUo,wUo,AUo,E0,kfe,LUo,BUo,JN,xUo,kUo,RUo,Rfe,SUo,PUo,Ky,hBe,ac,y0,Sfe,Zy,$Uo,Pfe,IUo,pBe,_r,ew,DUo,nc,jUo,$fe,NUo,qUo,Ife,GUo,OUo,XUo,ow,VUo,Dfe,zUo,WUo,QUo,dt,rw,HUo,jfe,UUo,JUo,sc,YUo,Nfe,KUo,ZUo,qfe,eJo,oJo,rJo,Gfe,tJo,aJo,tw,nJo,ho,aw,sJo,Ofe,lJo,iJo,fn,dJo,Xfe,cJo,fJo,Vfe,mJo,gJo,zfe,hJo,pJo,_Jo,H,w0,Wfe,uJo,bJo,YN,vJo,TJo,FJo,A0,Qfe,CJo,MJo,KN,EJo,yJo,wJo,L0,Hfe,AJo,LJo,ZN,BJo,xJo,kJo,B0,Ufe,RJo,SJo,eq,PJo,$Jo,IJo,x0,Jfe,DJo,jJo,oq,NJo,qJo,GJo,k0,Yfe,OJo,XJo,rq,VJo,zJo,WJo,R0,Kfe,QJo,HJo,tq,UJo,JJo,YJo,S0,Zfe,KJo,ZJo,aq,eYo,oYo,rYo,P0,eme,tYo,aYo,nq,nYo,sYo,lYo,$0,ome,iYo,dYo,sq,cYo,fYo,mYo,I0,rme,gYo,hYo,lq,pYo,_Yo,uYo,D0,tme,bYo,vYo,iq,TYo,FYo,CYo,j0,ame,MYo,EYo,dq,yYo,wYo,AYo,N0,nme,LYo,BYo,cq,xYo,kYo,RYo,q0,sme,SYo,PYo,fq,$Yo,IYo,DYo,G0,lme,jYo,NYo,mq,qYo,GYo,OYo,O0,ime,XYo,VYo,gq,zYo,WYo,QYo,X0,dme,HYo,UYo,hq,JYo,YYo,KYo,V0,cme,ZYo,eKo,pq,oKo,rKo,tKo,z0,fme,aKo,nKo,_q,sKo,lKo,iKo,W0,mme,dKo,cKo,uq,fKo,mKo,gKo,Q0,gme,hKo,pKo,bq,_Ko,uKo,bKo,hme,vKo,TKo,nw,_Be,lc,H0,pme,sw,FKo,_me,CKo,uBe,ur,lw,MKo,ic,EKo,ume,yKo,wKo,bme,AKo,LKo,BKo,iw,xKo,vme,kKo,RKo,SKo,ct,dw,PKo,Tme,$Ko,IKo,dc,DKo,Fme,jKo,NKo,Cme,qKo,GKo,OKo,Mme,XKo,VKo,cw,zKo,po,fw,WKo,Eme,QKo,HKo,mn,UKo,yme,JKo,YKo,wme,KKo,ZKo,Ame,eZo,oZo,rZo,he,U0,Lme,tZo,aZo,vq,nZo,sZo,lZo,J0,Bme,iZo,dZo,Tq,cZo,fZo,mZo,Y0,xme,gZo,hZo,Fq,pZo,_Zo,uZo,K0,kme,bZo,vZo,Cq,TZo,FZo,CZo,Z0,Rme,MZo,EZo,Mq,yZo,wZo,AZo,eT,Sme,LZo,BZo,Eq,xZo,kZo,RZo,oT,Pme,SZo,PZo,yq,$Zo,IZo,DZo,rT,$me,jZo,NZo,wq,qZo,GZo,OZo,tT,Ime,XZo,VZo,Aq,zZo,WZo,QZo,aT,Dme,HZo,UZo,Lq,JZo,YZo,KZo,jme,ZZo,eer,mw,bBe,cc,nT,Nme,gw,oer,qme,rer,vBe,br,hw,ter,fc,aer,Gme,ner,ser,Ome,ler,ier,der,pw,cer,Xme,fer,mer,ger,ft,_w,her,Vme,per,_er,mc,uer,zme,ber,ver,Wme,Ter,Fer,Cer,Qme,Mer,Eer,uw,yer,_o,bw,wer,Hme,Aer,Ler,gn,Ber,Ume,xer,ker,Jme,Rer,Ser,Yme,Per,$er,Ier,Kme,sT,Zme,Der,jer,Bq,Ner,qer,Ger,ege,Oer,Xer,vw,TBe,gc,lT,oge,Tw,Ver,rge,zer,FBe,vr,Fw,Wer,hc,Qer,tge,Her,Uer,age,Jer,Yer,Ker,Cw,Zer,nge,eor,oor,ror,mt,Mw,tor,sge,aor,nor,pc,sor,lge,lor,ior,ige,dor,cor,mor,dge,gor,hor,Ew,por,uo,yw,_or,cge,uor,bor,hn,vor,fge,Tor,For,mge,Cor,Mor,gge,Eor,yor,wor,Y,iT,hge,Aor,Lor,xq,Bor,xor,kor,dT,pge,Ror,Sor,kq,Por,$or,Ior,cT,_ge,Dor,jor,Rq,Nor,qor,Gor,fT,uge,Oor,Xor,Sq,Vor,zor,Wor,mT,bge,Qor,Hor,Pq,Uor,Jor,Yor,gT,vge,Kor,Zor,$q,err,orr,rrr,hT,Tge,trr,arr,Iq,nrr,srr,lrr,pT,Fge,irr,drr,Dq,crr,frr,mrr,_T,Cge,grr,hrr,jq,prr,_rr,urr,uT,Mge,brr,vrr,Nq,Trr,Frr,Crr,bT,Ege,Mrr,Err,qq,yrr,wrr,Arr,vT,yge,Lrr,Brr,Gq,xrr,krr,Rrr,TT,wge,Srr,Prr,Oq,$rr,Irr,Drr,FT,Age,jrr,Nrr,Xq,qrr,Grr,Orr,CT,Lge,Xrr,Vrr,Vq,zrr,Wrr,Qrr,MT,Bge,Hrr,Urr,zq,Jrr,Yrr,Krr,ET,xge,Zrr,etr,Wq,otr,rtr,ttr,yT,kge,atr,ntr,Qq,str,ltr,itr,wT,Rge,dtr,ctr,Hq,ftr,mtr,gtr,AT,Sge,htr,ptr,Uq,_tr,utr,btr,Pge,vtr,Ttr,ww,CBe,_c,LT,$ge,Aw,Ftr,Ige,Ctr,MBe,Tr,Lw,Mtr,uc,Etr,Dge,ytr,wtr,jge,Atr,Ltr,Btr,Bw,xtr,Nge,ktr,Rtr,Str,gt,xw,Ptr,qge,$tr,Itr,bc,Dtr,Gge,jtr,Ntr,Oge,qtr,Gtr,Otr,Xge,Xtr,Vtr,kw,ztr,bo,Rw,Wtr,Vge,Qtr,Htr,pn,Utr,zge,Jtr,Ytr,Wge,Ktr,Ztr,Qge,ear,oar,rar,pe,BT,Hge,tar,aar,Jq,nar,sar,lar,xT,Uge,iar,dar,Yq,car,far,mar,kT,Jge,gar,har,Kq,par,_ar,uar,RT,Yge,bar,Tar,Zq,Far,Car,Mar,ST,Kge,Ear,yar,eG,war,Aar,Lar,PT,Zge,Bar,xar,oG,kar,Rar,Sar,$T,ehe,Par,$ar,rG,Iar,Dar,jar,IT,ohe,Nar,qar,tG,Gar,Oar,Xar,DT,rhe,Var,zar,aG,War,Qar,Har,jT,the,Uar,Jar,nG,Yar,Kar,Zar,ahe,enr,onr,Sw,EBe,vc,NT,nhe,Pw,rnr,she,tnr,yBe,Fr,$w,anr,Tc,nnr,lhe,snr,lnr,ihe,inr,dnr,cnr,Iw,fnr,dhe,mnr,gnr,hnr,ht,Dw,pnr,che,_nr,unr,Fc,bnr,fhe,vnr,Tnr,mhe,Fnr,Cnr,Mnr,ghe,Enr,ynr,jw,wnr,vo,Nw,Anr,hhe,Lnr,Bnr,_n,xnr,phe,knr,Rnr,_he,Snr,Pnr,uhe,$nr,Inr,Dnr,X,qT,bhe,jnr,Nnr,sG,qnr,Gnr,Onr,GT,vhe,Xnr,Vnr,lG,znr,Wnr,Qnr,OT,The,Hnr,Unr,iG,Jnr,Ynr,Knr,XT,Fhe,Znr,esr,dG,osr,rsr,tsr,VT,Che,asr,nsr,cG,ssr,lsr,isr,zT,Mhe,dsr,csr,fG,fsr,msr,gsr,WT,Ehe,hsr,psr,mG,_sr,usr,bsr,QT,yhe,vsr,Tsr,gG,Fsr,Csr,Msr,HT,whe,Esr,ysr,hG,wsr,Asr,Lsr,UT,Ahe,Bsr,xsr,pG,ksr,Rsr,Ssr,JT,Lhe,Psr,$sr,_G,Isr,Dsr,jsr,YT,Bhe,Nsr,qsr,uG,Gsr,Osr,Xsr,KT,xhe,Vsr,zsr,bG,Wsr,Qsr,Hsr,ZT,khe,Usr,Jsr,vG,Ysr,Ksr,Zsr,e7,Rhe,elr,olr,TG,rlr,tlr,alr,o7,She,nlr,slr,FG,llr,ilr,dlr,r7,Phe,clr,flr,CG,mlr,glr,hlr,t7,$he,plr,_lr,MG,ulr,blr,vlr,a7,Ihe,Tlr,Flr,EG,Clr,Mlr,Elr,n7,Dhe,ylr,wlr,yG,Alr,Llr,Blr,s7,jhe,xlr,klr,wG,Rlr,Slr,Plr,l7,Nhe,$lr,Ilr,AG,Dlr,jlr,Nlr,i7,qhe,qlr,Glr,LG,Olr,Xlr,Vlr,d7,Ghe,zlr,Wlr,BG,Qlr,Hlr,Ulr,c7,Ohe,Jlr,Ylr,xG,Klr,Zlr,eir,Xhe,oir,rir,qw,wBe,Cc,f7,Vhe,Gw,tir,zhe,air,ABe,Cr,Ow,nir,Mc,sir,Whe,lir,iir,Qhe,dir,cir,fir,Xw,mir,Hhe,gir,hir,pir,pt,Vw,_ir,Uhe,uir,bir,Ec,vir,Jhe,Tir,Fir,Yhe,Cir,Mir,Eir,Khe,yir,wir,zw,Air,To,Ww,Lir,Zhe,Bir,xir,un,kir,epe,Rir,Sir,ope,Pir,$ir,rpe,Iir,Dir,jir,te,m7,tpe,Nir,qir,kG,Gir,Oir,Xir,g7,ape,Vir,zir,RG,Wir,Qir,Hir,h7,npe,Uir,Jir,SG,Yir,Kir,Zir,p7,spe,edr,odr,PG,rdr,tdr,adr,_7,lpe,ndr,sdr,$G,ldr,idr,ddr,u7,ipe,cdr,fdr,IG,mdr,gdr,hdr,b7,dpe,pdr,_dr,DG,udr,bdr,vdr,v7,cpe,Tdr,Fdr,jG,Cdr,Mdr,Edr,T7,fpe,ydr,wdr,NG,Adr,Ldr,Bdr,F7,mpe,xdr,kdr,qG,Rdr,Sdr,Pdr,C7,gpe,$dr,Idr,GG,Ddr,jdr,Ndr,M7,hpe,qdr,Gdr,OG,Odr,Xdr,Vdr,E7,ppe,zdr,Wdr,XG,Qdr,Hdr,Udr,y7,_pe,Jdr,Ydr,VG,Kdr,Zdr,ecr,w7,upe,ocr,rcr,zG,tcr,acr,ncr,A7,bpe,scr,lcr,WG,icr,dcr,ccr,L7,vpe,fcr,mcr,QG,gcr,hcr,pcr,Tpe,_cr,ucr,Qw,LBe,yc,B7,Fpe,Hw,bcr,Cpe,vcr,BBe,Mr,Uw,Tcr,wc,Fcr,Mpe,Ccr,Mcr,Epe,Ecr,ycr,wcr,Jw,Acr,ype,Lcr,Bcr,xcr,_t,Yw,kcr,wpe,Rcr,Scr,Ac,Pcr,Ape,$cr,Icr,Lpe,Dcr,jcr,Ncr,Bpe,qcr,Gcr,Kw,Ocr,Fo,Zw,Xcr,xpe,Vcr,zcr,bn,Wcr,kpe,Qcr,Hcr,Rpe,Ucr,Jcr,Spe,Ycr,Kcr,Zcr,Ppe,x7,$pe,efr,ofr,HG,rfr,tfr,afr,Ipe,nfr,sfr,e6,xBe,Lc,k7,Dpe,o6,lfr,jpe,ifr,kBe,Er,r6,dfr,Bc,cfr,Npe,ffr,mfr,qpe,gfr,hfr,pfr,t6,_fr,Gpe,ufr,bfr,vfr,ut,a6,Tfr,Ope,Ffr,Cfr,xc,Mfr,Xpe,Efr,yfr,Vpe,wfr,Afr,Lfr,zpe,Bfr,xfr,n6,kfr,Co,s6,Rfr,Wpe,Sfr,Pfr,vn,$fr,Qpe,Ifr,Dfr,Hpe,jfr,Nfr,Upe,qfr,Gfr,Ofr,K,R7,Jpe,Xfr,Vfr,UG,zfr,Wfr,Qfr,S7,Ype,Hfr,Ufr,JG,Jfr,Yfr,Kfr,P7,Kpe,Zfr,emr,YG,omr,rmr,tmr,$7,Zpe,amr,nmr,KG,smr,lmr,imr,I7,e_e,dmr,cmr,ZG,fmr,mmr,gmr,D7,o_e,hmr,pmr,eO,_mr,umr,bmr,j7,r_e,vmr,Tmr,oO,Fmr,Cmr,Mmr,N7,t_e,Emr,ymr,rO,wmr,Amr,Lmr,q7,a_e,Bmr,xmr,tO,kmr,Rmr,Smr,G7,n_e,Pmr,$mr,aO,Imr,Dmr,jmr,O7,s_e,Nmr,qmr,nO,Gmr,Omr,Xmr,X7,l_e,Vmr,zmr,sO,Wmr,Qmr,Hmr,V7,i_e,Umr,Jmr,lO,Ymr,Kmr,Zmr,z7,d_e,egr,ogr,iO,rgr,tgr,agr,W7,c_e,ngr,sgr,dO,lgr,igr,dgr,Q7,f_e,cgr,fgr,cO,mgr,ggr,hgr,H7,m_e,pgr,_gr,fO,ugr,bgr,vgr,U7,g_e,Tgr,Fgr,mO,Cgr,Mgr,Egr,J7,h_e,ygr,wgr,gO,Agr,Lgr,Bgr,Y7,p_e,xgr,kgr,hO,Rgr,Sgr,Pgr,__e,$gr,Igr,l6,RBe,kc,K7,u_e,i6,Dgr,b_e,jgr,SBe,yr,d6,Ngr,Rc,qgr,v_e,Ggr,Ogr,T_e,Xgr,Vgr,zgr,c6,Wgr,F_e,Qgr,Hgr,Ugr,bt,f6,Jgr,C_e,Ygr,Kgr,Sc,Zgr,M_e,ehr,ohr,E_e,rhr,thr,ahr,y_e,nhr,shr,m6,lhr,Mo,g6,ihr,w_e,dhr,chr,Tn,fhr,A_e,mhr,ghr,L_e,hhr,phr,B_e,_hr,uhr,bhr,Z,Z7,x_e,vhr,Thr,pO,Fhr,Chr,Mhr,eF,k_e,Ehr,yhr,_O,whr,Ahr,Lhr,oF,R_e,Bhr,xhr,uO,khr,Rhr,Shr,rF,S_e,Phr,$hr,bO,Ihr,Dhr,jhr,tF,P_e,Nhr,qhr,vO,Ghr,Ohr,Xhr,aF,$_e,Vhr,zhr,TO,Whr,Qhr,Hhr,nF,I_e,Uhr,Jhr,FO,Yhr,Khr,Zhr,sF,D_e,epr,opr,CO,rpr,tpr,apr,lF,j_e,npr,spr,MO,lpr,ipr,dpr,iF,N_e,cpr,fpr,EO,mpr,gpr,hpr,dF,q_e,ppr,_pr,yO,upr,bpr,vpr,cF,G_e,Tpr,Fpr,wO,Cpr,Mpr,Epr,fF,O_e,ypr,wpr,AO,Apr,Lpr,Bpr,mF,X_e,xpr,kpr,LO,Rpr,Spr,Ppr,gF,V_e,$pr,Ipr,BO,Dpr,jpr,Npr,hF,z_e,qpr,Gpr,xO,Opr,Xpr,Vpr,pF,W_e,zpr,Wpr,kO,Qpr,Hpr,Upr,_F,Q_e,Jpr,Ypr,RO,Kpr,Zpr,e_r,uF,H_e,o_r,r_r,SO,t_r,a_r,n_r,U_e,s_r,l_r,h6,PBe,Pc,bF,J_e,p6,i_r,Y_e,d_r,$Be,wr,_6,c_r,$c,f_r,K_e,m_r,g_r,Z_e,h_r,p_r,__r,u6,u_r,eue,b_r,v_r,T_r,vt,b6,F_r,oue,C_r,M_r,Ic,E_r,rue,y_r,w_r,tue,A_r,L_r,B_r,aue,x_r,k_r,v6,R_r,Eo,T6,S_r,nue,P_r,$_r,Fn,I_r,sue,D_r,j_r,lue,N_r,q_r,iue,G_r,O_r,X_r,due,vF,cue,V_r,z_r,PO,W_r,Q_r,H_r,fue,U_r,J_r,F6,IBe,Dc,TF,mue,C6,Y_r,gue,K_r,DBe,Ar,M6,Z_r,jc,eur,hue,our,rur,pue,tur,aur,nur,E6,sur,_ue,lur,iur,dur,Tt,y6,cur,uue,fur,mur,Nc,gur,bue,hur,pur,vue,_ur,uur,bur,Tue,vur,Tur,w6,Fur,yo,A6,Cur,Fue,Mur,Eur,Cn,yur,Cue,wur,Aur,Mue,Lur,Bur,Eue,xur,kur,Rur,yue,FF,wue,Sur,Pur,$O,$ur,Iur,Dur,Aue,jur,Nur,L6,jBe,qc,CF,Lue,B6,qur,Bue,Gur,NBe,Lr,x6,Our,Gc,Xur,xue,Vur,zur,kue,Wur,Qur,Hur,k6,Uur,Rue,Jur,Yur,Kur,Ft,R6,Zur,Sue,e5r,o5r,Oc,r5r,Pue,t5r,a5r,$ue,n5r,s5r,l5r,Iue,i5r,d5r,S6,c5r,wo,P6,f5r,Due,m5r,g5r,Mn,h5r,jue,p5r,_5r,Nue,u5r,b5r,que,v5r,T5r,F5r,z,MF,Gue,C5r,M5r,IO,E5r,y5r,w5r,EF,Oue,A5r,L5r,DO,B5r,x5r,k5r,yF,Xue,R5r,S5r,jO,P5r,$5r,I5r,wF,Vue,D5r,j5r,NO,N5r,q5r,G5r,AF,zue,O5r,X5r,qO,V5r,z5r,W5r,LF,Wue,Q5r,H5r,GO,U5r,J5r,Y5r,BF,Que,K5r,Z5r,OO,e1r,o1r,r1r,xF,Hue,t1r,a1r,XO,n1r,s1r,l1r,kF,Uue,i1r,d1r,VO,c1r,f1r,m1r,RF,Jue,g1r,h1r,zO,p1r,_1r,u1r,SF,Yue,b1r,v1r,WO,T1r,F1r,C1r,PF,Kue,M1r,E1r,QO,y1r,w1r,A1r,$F,Zue,L1r,B1r,HO,x1r,k1r,R1r,IF,e5e,S1r,P1r,UO,$1r,I1r,D1r,DF,o5e,j1r,N1r,JO,q1r,G1r,O1r,jF,r5e,X1r,V1r,YO,z1r,W1r,Q1r,NF,t5e,H1r,U1r,KO,J1r,Y1r,K1r,qF,a5e,Z1r,ebr,ZO,obr,rbr,tbr,GF,n5e,abr,nbr,eX,sbr,lbr,ibr,OF,s5e,dbr,cbr,oX,fbr,mbr,gbr,XF,l5e,hbr,pbr,rX,_br,ubr,bbr,VF,i5e,vbr,Tbr,tX,Fbr,Cbr,Mbr,zF,d5e,Ebr,ybr,aX,wbr,Abr,Lbr,WF,c5e,Bbr,xbr,nX,kbr,Rbr,Sbr,f5e,Pbr,$br,$6,qBe,Xc,QF,m5e,I6,Ibr,g5e,Dbr,GBe,Br,D6,jbr,Vc,Nbr,h5e,qbr,Gbr,p5e,Obr,Xbr,Vbr,j6,zbr,_5e,Wbr,Qbr,Hbr,Ct,N6,Ubr,u5e,Jbr,Ybr,zc,Kbr,b5e,Zbr,e2r,v5e,o2r,r2r,t2r,T5e,a2r,n2r,q6,s2r,Ao,G6,l2r,F5e,i2r,d2r,En,c2r,C5e,f2r,m2r,M5e,g2r,h2r,E5e,p2r,_2r,u2r,yn,HF,y5e,b2r,v2r,sX,T2r,F2r,C2r,UF,w5e,M2r,E2r,lX,y2r,w2r,A2r,JF,A5e,L2r,B2r,iX,x2r,k2r,R2r,YF,L5e,S2r,P2r,dX,$2r,I2r,D2r,B5e,j2r,N2r,O6,OBe,Wc,KF,x5e,X6,q2r,k5e,G2r,XBe,xr,V6,O2r,Qc,X2r,R5e,V2r,z2r,S5e,W2r,Q2r,H2r,z6,U2r,P5e,J2r,Y2r,K2r,Mt,W6,Z2r,$5e,evr,ovr,Hc,rvr,I5e,tvr,avr,D5e,nvr,svr,lvr,j5e,ivr,dvr,Q6,cvr,Lo,H6,fvr,N5e,mvr,gvr,wn,hvr,q5e,pvr,_vr,G5e,uvr,bvr,O5e,vvr,Tvr,Fvr,fe,ZF,X5e,Cvr,Mvr,cX,Evr,yvr,wvr,eC,V5e,Avr,Lvr,fX,Bvr,xvr,kvr,oC,z5e,Rvr,Svr,mX,Pvr,$vr,Ivr,rC,W5e,Dvr,jvr,gX,Nvr,qvr,Gvr,tC,Q5e,Ovr,Xvr,hX,Vvr,zvr,Wvr,aC,H5e,Qvr,Hvr,pX,Uvr,Jvr,Yvr,nC,U5e,Kvr,Zvr,_X,e0r,o0r,r0r,sC,J5e,t0r,a0r,uX,n0r,s0r,l0r,lC,Y5e,i0r,d0r,bX,c0r,f0r,m0r,iC,K5e,g0r,h0r,vX,p0r,_0r,u0r,dC,Z5e,b0r,v0r,TX,T0r,F0r,C0r,e1e,M0r,E0r,U6,VBe,Uc,cC,o1e,J6,y0r,r1e,w0r,zBe,kr,Y6,A0r,Jc,L0r,t1e,B0r,x0r,a1e,k0r,R0r,S0r,K6,P0r,n1e,$0r,I0r,D0r,Et,Z6,j0r,s1e,N0r,q0r,Yc,G0r,l1e,O0r,X0r,i1e,V0r,z0r,W0r,d1e,Q0r,H0r,eA,U0r,Bo,oA,J0r,c1e,Y0r,K0r,An,Z0r,f1e,eTr,oTr,m1e,rTr,tTr,g1e,aTr,nTr,sTr,ve,fC,h1e,lTr,iTr,FX,dTr,cTr,fTr,mC,p1e,mTr,gTr,CX,hTr,pTr,_Tr,gC,_1e,uTr,bTr,MX,vTr,TTr,FTr,hC,u1e,CTr,MTr,EX,ETr,yTr,wTr,pC,b1e,ATr,LTr,yX,BTr,xTr,kTr,_C,v1e,RTr,STr,wX,PTr,$Tr,ITr,uC,T1e,DTr,jTr,AX,NTr,qTr,GTr,bC,F1e,OTr,XTr,LX,VTr,zTr,WTr,vC,C1e,QTr,HTr,BX,UTr,JTr,YTr,M1e,KTr,ZTr,rA,WBe,Kc,TC,E1e,tA,e7r,y1e,o7r,QBe,Rr,aA,r7r,Zc,t7r,w1e,a7r,n7r,A1e,s7r,l7r,i7r,nA,d7r,L1e,c7r,f7r,m7r,yt,sA,g7r,B1e,h7r,p7r,ef,_7r,x1e,u7r,b7r,k1e,v7r,T7r,F7r,R1e,C7r,M7r,lA,E7r,xo,iA,y7r,S1e,w7r,A7r,Ln,L7r,P1e,B7r,x7r,$1e,k7r,R7r,I1e,S7r,P7r,$7r,Te,FC,D1e,I7r,D7r,xX,j7r,N7r,q7r,CC,j1e,G7r,O7r,kX,X7r,V7r,z7r,MC,N1e,W7r,Q7r,RX,H7r,U7r,J7r,EC,q1e,Y7r,K7r,SX,Z7r,eFr,oFr,yC,G1e,rFr,tFr,PX,aFr,nFr,sFr,wC,O1e,lFr,iFr,$X,dFr,cFr,fFr,AC,X1e,mFr,gFr,IX,hFr,pFr,_Fr,LC,V1e,uFr,bFr,DX,vFr,TFr,FFr,BC,z1e,CFr,MFr,jX,EFr,yFr,wFr,W1e,AFr,LFr,dA,HBe,of,xC,Q1e,cA,BFr,H1e,xFr,UBe,Sr,fA,kFr,rf,RFr,U1e,SFr,PFr,J1e,$Fr,IFr,DFr,mA,jFr,Y1e,NFr,qFr,GFr,wt,gA,OFr,K1e,XFr,VFr,tf,zFr,Z1e,WFr,QFr,ebe,HFr,UFr,JFr,obe,YFr,KFr,hA,ZFr,ko,pA,eCr,rbe,oCr,rCr,Bn,tCr,tbe,aCr,nCr,abe,sCr,lCr,nbe,iCr,dCr,cCr,Fe,kC,sbe,fCr,mCr,NX,gCr,hCr,pCr,RC,lbe,_Cr,uCr,qX,bCr,vCr,TCr,SC,ibe,FCr,CCr,GX,MCr,ECr,yCr,PC,dbe,wCr,ACr,OX,LCr,BCr,xCr,$C,cbe,kCr,RCr,XX,SCr,PCr,$Cr,IC,fbe,ICr,DCr,VX,jCr,NCr,qCr,DC,mbe,GCr,OCr,zX,XCr,VCr,zCr,jC,gbe,WCr,QCr,WX,HCr,UCr,JCr,NC,hbe,YCr,KCr,QX,ZCr,e4r,o4r,pbe,r4r,t4r,_A,JBe,af,qC,_be,uA,a4r,ube,n4r,YBe,Pr,bA,s4r,nf,l4r,bbe,i4r,d4r,vbe,c4r,f4r,m4r,vA,g4r,Tbe,h4r,p4r,_4r,At,TA,u4r,Fbe,b4r,v4r,sf,T4r,Cbe,F4r,C4r,Mbe,M4r,E4r,y4r,Ebe,w4r,A4r,FA,L4r,Ro,CA,B4r,ybe,x4r,k4r,xn,R4r,wbe,S4r,P4r,Abe,$4r,I4r,Lbe,D4r,j4r,N4r,Ce,GC,Bbe,q4r,G4r,HX,O4r,X4r,V4r,OC,xbe,z4r,W4r,UX,Q4r,H4r,U4r,XC,kbe,J4r,Y4r,JX,K4r,Z4r,eMr,VC,Rbe,oMr,rMr,YX,tMr,aMr,nMr,zC,Sbe,sMr,lMr,KX,iMr,dMr,cMr,WC,Pbe,fMr,mMr,ZX,gMr,hMr,pMr,QC,$be,_Mr,uMr,eV,bMr,vMr,TMr,HC,Ibe,FMr,CMr,oV,MMr,EMr,yMr,UC,Dbe,wMr,AMr,rV,LMr,BMr,xMr,jbe,kMr,RMr,MA,KBe,lf,JC,Nbe,EA,SMr,qbe,PMr,ZBe,$r,yA,$Mr,df,IMr,Gbe,DMr,jMr,Obe,NMr,qMr,GMr,wA,OMr,Xbe,XMr,VMr,zMr,Lt,AA,WMr,Vbe,QMr,HMr,cf,UMr,zbe,JMr,YMr,Wbe,KMr,ZMr,eEr,Qbe,oEr,rEr,LA,tEr,So,BA,aEr,Hbe,nEr,sEr,kn,lEr,Ube,iEr,dEr,Jbe,cEr,fEr,Ybe,mEr,gEr,hEr,so,YC,Kbe,pEr,_Er,tV,uEr,bEr,vEr,KC,Zbe,TEr,FEr,aV,CEr,MEr,EEr,ZC,e2e,yEr,wEr,nV,AEr,LEr,BEr,e4,o2e,xEr,kEr,sV,REr,SEr,PEr,o4,r2e,$Er,IEr,lV,DEr,jEr,NEr,r4,t2e,qEr,GEr,iV,OEr,XEr,VEr,t4,a2e,zEr,WEr,dV,QEr,HEr,UEr,n2e,JEr,YEr,xA,exe,ff,a4,s2e,kA,KEr,l2e,ZEr,oxe,Ir,RA,e3r,mf,o3r,i2e,r3r,t3r,d2e,a3r,n3r,s3r,SA,l3r,c2e,i3r,d3r,c3r,Bt,PA,f3r,f2e,m3r,g3r,gf,h3r,m2e,p3r,_3r,g2e,u3r,b3r,v3r,h2e,T3r,F3r,$A,C3r,Po,IA,M3r,p2e,E3r,y3r,Rn,w3r,_2e,A3r,L3r,u2e,B3r,x3r,b2e,k3r,R3r,S3r,lo,n4,v2e,P3r,$3r,cV,I3r,D3r,j3r,s4,T2e,N3r,q3r,fV,G3r,O3r,X3r,l4,F2e,V3r,z3r,mV,W3r,Q3r,H3r,i4,C2e,U3r,J3r,gV,Y3r,K3r,Z3r,d4,M2e,eyr,oyr,hV,ryr,tyr,ayr,c4,E2e,nyr,syr,pV,lyr,iyr,dyr,f4,y2e,cyr,fyr,_V,myr,gyr,hyr,w2e,pyr,_yr,DA,rxe,hf,m4,A2e,jA,uyr,L2e,byr,txe,Dr,NA,vyr,pf,Tyr,B2e,Fyr,Cyr,x2e,Myr,Eyr,yyr,qA,wyr,k2e,Ayr,Lyr,Byr,xt,GA,xyr,R2e,kyr,Ryr,_f,Syr,S2e,Pyr,$yr,P2e,Iyr,Dyr,jyr,$2e,Nyr,qyr,OA,Gyr,$o,XA,Oyr,I2e,Xyr,Vyr,Sn,zyr,D2e,Wyr,Qyr,j2e,Hyr,Uyr,N2e,Jyr,Yyr,Kyr,q2e,g4,G2e,Zyr,ewr,uV,owr,rwr,twr,O2e,awr,nwr,VA,axe,uf,h4,X2e,zA,swr,V2e,lwr,nxe,jr,WA,iwr,bf,dwr,z2e,cwr,fwr,W2e,mwr,gwr,hwr,QA,pwr,Q2e,_wr,uwr,bwr,kt,HA,vwr,H2e,Twr,Fwr,vf,Cwr,U2e,Mwr,Ewr,J2e,ywr,wwr,Awr,Y2e,Lwr,Bwr,UA,xwr,Io,JA,kwr,K2e,Rwr,Swr,Pn,Pwr,Z2e,$wr,Iwr,eve,Dwr,jwr,ove,Nwr,qwr,Gwr,YA,p4,rve,Owr,Xwr,bV,Vwr,zwr,Wwr,_4,tve,Qwr,Hwr,vV,Uwr,Jwr,Ywr,ave,Kwr,Zwr,KA,sxe,Tf,u4,nve,ZA,e6r,sve,o6r,lxe,Nr,eL,r6r,Ff,t6r,lve,a6r,n6r,ive,s6r,l6r,i6r,oL,d6r,dve,c6r,f6r,m6r,Rt,rL,g6r,cve,h6r,p6r,Cf,_6r,fve,u6r,b6r,mve,v6r,T6r,F6r,gve,C6r,M6r,tL,E6r,Do,aL,y6r,hve,w6r,A6r,$n,L6r,pve,B6r,x6r,_ve,k6r,R6r,uve,S6r,P6r,$6r,bve,b4,vve,I6r,D6r,TV,j6r,N6r,q6r,Tve,G6r,O6r,nL,ixe;return ce=new V({}),$a=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased"),',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),CM=new V({}),MM=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Bf=new X6r({props:{warning:"&lcub;true}",$$slots:{default:[E1t]},$$scope:{ctx:Ai}}}),EM=new V({}),yM=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/configuration_auto.py#L523"}}),LM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/configuration_auto.py#L546",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),BM=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),xM=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/configuration_auto.py#L668",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),kM=new V({}),RM=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/tokenization_auto.py#L351"}}),$M=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15507/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),IM=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),DM=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),jM=new V({}),NM=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/feature_extraction_auto.py#L169"}}),OM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/feature_extraction_auto.py#L183",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15507/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),ch=new X6r({props:{$$slots:{default:[y1t]},$$scope:{ctx:Ai}}}),XM=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),VM=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/feature_extraction_auto.py#L310",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),zM=new V({}),WM=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/processing_auto.py#L71"}}),UM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Fh=new X6r({props:{$$slots:{default:[w1t]},$$scope:{ctx:Ai}}}),JM=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),YM=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),KM=new V({}),ZM=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L686"}}),oE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),rE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),tE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nE=new V({}),sE=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L693"}}),iE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),dE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),cE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mE=new V({}),gE=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L708"}}),pE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),_E=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),uE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vE=new V({}),TE=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L715"}}),CE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ME=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),EE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wE=new V({}),AE=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L722"}}),BE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),xE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),kE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),RE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SE=new V({}),PE=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L731"}}),IE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),DE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),jE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qE=new V({}),GE=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L765"}}),XE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),VE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),zE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QE=new V({}),HE=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L772"}}),JE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),YE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),KE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ZE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e3=new V({}),o3=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L758"}}),t3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),a3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),n3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l3=new V({}),i3=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L740"}}),c3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),f3=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),m3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g3=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h3=new V({}),p3=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L747"}}),u3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),b3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),v3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),T3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F3=new V({}),C3=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L781"}}),E3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15507/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15507/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15507/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),y3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),w3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),A3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L3=new V({}),B3=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L811"}}),k3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),R3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),S3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),P3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$3=new V({}),I3=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L818"}}),j3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),N3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),q3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),G3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),O3=new V({}),X3=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L841"}}),z3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),W3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Q3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),H3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U3=new V({}),J3=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L825"}}),K3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Z3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),ey=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ry=new V({}),ty=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L832"}}),ny=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),sy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),ly=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cy=new V({}),fy=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L850"}}),gy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),hy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),py=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_y=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uy=new V({}),by=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L857"}}),Ty=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Fy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),Cy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),My=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ey=new V({}),yy=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L804"}}),Ay=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),By=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ky=new V({}),Ry=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L788"}}),Py=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),$y=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Iy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jy=new V({}),Ny=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_auto.py#L795"}}),Gy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Xy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Wy=new V({}),Qy=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_tf_auto.py#L371"}}),Uy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Jy=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),Yy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ky=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zy=new V({}),ew=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_tf_auto.py#L378"}}),rw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),tw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),aw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sw=new V({}),lw=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_tf_auto.py#L393"}}),dw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),cw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),fw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gw=new V({}),hw=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_tf_auto.py#L400"}}),_w=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),uw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),bw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Tw=new V({}),Fw=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_tf_auto.py#L414"}}),Mw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Ew=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),yw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Aw=new V({}),Lw=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),xw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),kw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),Rw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Pw=new V({}),$w=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),Dw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),jw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),Nw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gw=new V({}),Ow=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),Vw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),zw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Ww=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hw=new V({}),Uw=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),Yw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Kw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),Zw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o6=new V({}),r6=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),a6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),n6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),s6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i6=new V({}),d6=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_tf_auto.py#L439"}}),f6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),m6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),g6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p6=new V({}),_6=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_tf_auto.py#L407"}}),b6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),v6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),T6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),F6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C6=new V({}),M6=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),y6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),w6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),A6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),L6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B6=new V({}),x6=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_flax_auto.py#L220"}}),R6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),S6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),P6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I6=new V({}),D6=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_flax_auto.py#L234"}}),N6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),q6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),G6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X6=new V({}),V6=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_flax_auto.py#L227"}}),W6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
</ul>`,name:"config"}]}}),Q6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),H6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J6=new V({}),Y6=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),Z6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),oA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tA=new V({}),aA=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),sA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),iA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cA=new V({}),fA=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),gA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),pA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_A=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uA=new V({}),bA=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_flax_auto.py#L266"}}),TA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),CA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),MA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EA=new V({}),yA=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_flax_auto.py#L273"}}),AA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),LA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),BA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kA=new V({}),RA=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),PA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),IA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),DA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jA=new V({}),NA=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),GA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),OA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),XA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zA=new V({}),WA=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),HA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15507/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),UA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),JA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),KA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZA=new V({}),eL=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/modeling_flax_auto.py#L307"}}),rL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15507/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15507/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),tL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),aL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15507/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15507/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15507/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Be=l(),ie=a("h1"),me=a("a"),no=a("span"),f(ce.$$.fragment),ue=l(),Go=a("span"),Li=o("Auto Classes"),Ef=l(),sa=a("p"),Bi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=a("code"),bM=o("from_pretrained()"),yf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ye=l(),io=a("p"),ki=o("Instantiating one of "),In=a("a"),vM=o("AutoConfig"),Dn=o(", "),jn=a("a"),TM=o("AutoModel"),Ri=o(`, and
`),Nn=a("a"),FM=o("AutoTokenizer"),Si=o(" will directly create a class of the relevant architecture. For instance"),wf=l(),f($a.$$.fragment),co=l(),ge=a("p"),r8=o("will create a model that is an instance of "),Pi=a("a"),t8=o("BertModel"),a8=o("."),Oo=l(),Ia=a("p"),n8=o("There is one class of "),Af=a("code"),s8=o("AutoModel"),bRe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),d9e=l(),$i=a("h2"),Lf=a("a"),fW=a("span"),f(CM.$$.fragment),vRe=l(),mW=a("span"),TRe=o("Extending the Auto Classes"),c9e=l(),qn=a("p"),FRe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),gW=a("code"),CRe=o("NewModel"),MRe=o(", make sure you have a "),hW=a("code"),ERe=o("NewModelConfig"),yRe=o(` then you can add those to the auto
classes like this:`),f9e=l(),f(MM.$$.fragment),m9e=l(),l8=a("p"),wRe=o("You will then be able to use the auto classes like you would usually do!"),g9e=l(),f(Bf.$$.fragment),h9e=l(),Ii=a("h2"),xf=a("a"),pW=a("span"),f(EM.$$.fragment),ARe=l(),_W=a("span"),LRe=o("AutoConfig"),p9e=l(),Xo=a("div"),f(yM.$$.fragment),BRe=l(),wM=a("p"),xRe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),i8=a("a"),kRe=o("from_pretrained()"),RRe=o(" class method."),SRe=l(),AM=a("p"),PRe=o("This class cannot be instantiated directly using "),uW=a("code"),$Re=o("__init__()"),IRe=o(" (throws an error)."),DRe=l(),fo=a("div"),f(LM.$$.fragment),jRe=l(),bW=a("p"),NRe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),qRe=l(),Di=a("p"),GRe=o("The configuration class to instantiate is selected based on the "),vW=a("code"),ORe=o("model_type"),XRe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),TW=a("code"),VRe=o("pretrained_model_name_or_path"),zRe=o(":"),WRe=l(),v=a("ul"),kf=a("li"),FW=a("strong"),QRe=o("albert"),HRe=o(" \u2014 "),d8=a("a"),URe=o("AlbertConfig"),JRe=o(" (ALBERT model)"),YRe=l(),Rf=a("li"),CW=a("strong"),KRe=o("bart"),ZRe=o(" \u2014 "),c8=a("a"),eSe=o("BartConfig"),oSe=o(" (BART model)"),rSe=l(),Sf=a("li"),MW=a("strong"),tSe=o("beit"),aSe=o(" \u2014 "),f8=a("a"),nSe=o("BeitConfig"),sSe=o(" (BEiT model)"),lSe=l(),Pf=a("li"),EW=a("strong"),iSe=o("bert"),dSe=o(" \u2014 "),m8=a("a"),cSe=o("BertConfig"),fSe=o(" (BERT model)"),mSe=l(),$f=a("li"),yW=a("strong"),gSe=o("bert-generation"),hSe=o(" \u2014 "),g8=a("a"),pSe=o("BertGenerationConfig"),_Se=o(" (Bert Generation model)"),uSe=l(),If=a("li"),wW=a("strong"),bSe=o("big_bird"),vSe=o(" \u2014 "),h8=a("a"),TSe=o("BigBirdConfig"),FSe=o(" (BigBird model)"),CSe=l(),Df=a("li"),AW=a("strong"),MSe=o("bigbird_pegasus"),ESe=o(" \u2014 "),p8=a("a"),ySe=o("BigBirdPegasusConfig"),wSe=o(" (BigBirdPegasus model)"),ASe=l(),jf=a("li"),LW=a("strong"),LSe=o("blenderbot"),BSe=o(" \u2014 "),_8=a("a"),xSe=o("BlenderbotConfig"),kSe=o(" (Blenderbot model)"),RSe=l(),Nf=a("li"),BW=a("strong"),SSe=o("blenderbot-small"),PSe=o(" \u2014 "),u8=a("a"),$Se=o("BlenderbotSmallConfig"),ISe=o(" (BlenderbotSmall model)"),DSe=l(),qf=a("li"),xW=a("strong"),jSe=o("camembert"),NSe=o(" \u2014 "),b8=a("a"),qSe=o("CamembertConfig"),GSe=o(" (CamemBERT model)"),OSe=l(),Gf=a("li"),kW=a("strong"),XSe=o("canine"),VSe=o(" \u2014 "),v8=a("a"),zSe=o("CanineConfig"),WSe=o(" (Canine model)"),QSe=l(),Of=a("li"),RW=a("strong"),HSe=o("clip"),USe=o(" \u2014 "),T8=a("a"),JSe=o("CLIPConfig"),YSe=o(" (CLIP model)"),KSe=l(),Xf=a("li"),SW=a("strong"),ZSe=o("convbert"),ePe=o(" \u2014 "),F8=a("a"),oPe=o("ConvBertConfig"),rPe=o(" (ConvBERT model)"),tPe=l(),Vf=a("li"),PW=a("strong"),aPe=o("convnext"),nPe=o(" \u2014 "),C8=a("a"),sPe=o("ConvNextConfig"),lPe=o(" (ConvNext model)"),iPe=l(),zf=a("li"),$W=a("strong"),dPe=o("ctrl"),cPe=o(" \u2014 "),M8=a("a"),fPe=o("CTRLConfig"),mPe=o(" (CTRL model)"),gPe=l(),Wf=a("li"),IW=a("strong"),hPe=o("data2vec-audio"),pPe=o(" \u2014 "),E8=a("a"),_Pe=o("Data2VecAudioConfig"),uPe=o(" (Data2VecAudio model)"),bPe=l(),Qf=a("li"),DW=a("strong"),vPe=o("data2vec-text"),TPe=o(" \u2014 "),y8=a("a"),FPe=o("Data2VecTextConfig"),CPe=o(" (Data2VecText model)"),MPe=l(),Hf=a("li"),jW=a("strong"),EPe=o("deberta"),yPe=o(" \u2014 "),w8=a("a"),wPe=o("DebertaConfig"),APe=o(" (DeBERTa model)"),LPe=l(),Uf=a("li"),NW=a("strong"),BPe=o("deberta-v2"),xPe=o(" \u2014 "),A8=a("a"),kPe=o("DebertaV2Config"),RPe=o(" (DeBERTa-v2 model)"),SPe=l(),Jf=a("li"),qW=a("strong"),PPe=o("deit"),$Pe=o(" \u2014 "),L8=a("a"),IPe=o("DeiTConfig"),DPe=o(" (DeiT model)"),jPe=l(),Yf=a("li"),GW=a("strong"),NPe=o("detr"),qPe=o(" \u2014 "),B8=a("a"),GPe=o("DetrConfig"),OPe=o(" (DETR model)"),XPe=l(),Kf=a("li"),OW=a("strong"),VPe=o("distilbert"),zPe=o(" \u2014 "),x8=a("a"),WPe=o("DistilBertConfig"),QPe=o(" (DistilBERT model)"),HPe=l(),Zf=a("li"),XW=a("strong"),UPe=o("dpr"),JPe=o(" \u2014 "),k8=a("a"),YPe=o("DPRConfig"),KPe=o(" (DPR model)"),ZPe=l(),em=a("li"),VW=a("strong"),e$e=o("electra"),o$e=o(" \u2014 "),R8=a("a"),r$e=o("ElectraConfig"),t$e=o(" (ELECTRA model)"),a$e=l(),om=a("li"),zW=a("strong"),n$e=o("encoder-decoder"),s$e=o(" \u2014 "),S8=a("a"),l$e=o("EncoderDecoderConfig"),i$e=o(" (Encoder decoder model)"),d$e=l(),rm=a("li"),WW=a("strong"),c$e=o("flaubert"),f$e=o(" \u2014 "),P8=a("a"),m$e=o("FlaubertConfig"),g$e=o(" (FlauBERT model)"),h$e=l(),tm=a("li"),QW=a("strong"),p$e=o("fnet"),_$e=o(" \u2014 "),$8=a("a"),u$e=o("FNetConfig"),b$e=o(" (FNet model)"),v$e=l(),am=a("li"),HW=a("strong"),T$e=o("fsmt"),F$e=o(" \u2014 "),I8=a("a"),C$e=o("FSMTConfig"),M$e=o(" (FairSeq Machine-Translation model)"),E$e=l(),nm=a("li"),UW=a("strong"),y$e=o("funnel"),w$e=o(" \u2014 "),D8=a("a"),A$e=o("FunnelConfig"),L$e=o(" (Funnel Transformer model)"),B$e=l(),sm=a("li"),JW=a("strong"),x$e=o("gpt2"),k$e=o(" \u2014 "),j8=a("a"),R$e=o("GPT2Config"),S$e=o(" (OpenAI GPT-2 model)"),P$e=l(),lm=a("li"),YW=a("strong"),$$e=o("gpt_neo"),I$e=o(" \u2014 "),N8=a("a"),D$e=o("GPTNeoConfig"),j$e=o(" (GPT Neo model)"),N$e=l(),im=a("li"),KW=a("strong"),q$e=o("gptj"),G$e=o(" \u2014 "),q8=a("a"),O$e=o("GPTJConfig"),X$e=o(" (GPT-J model)"),V$e=l(),dm=a("li"),ZW=a("strong"),z$e=o("hubert"),W$e=o(" \u2014 "),G8=a("a"),Q$e=o("HubertConfig"),H$e=o(" (Hubert model)"),U$e=l(),cm=a("li"),eQ=a("strong"),J$e=o("ibert"),Y$e=o(" \u2014 "),O8=a("a"),K$e=o("IBertConfig"),Z$e=o(" (I-BERT model)"),eIe=l(),fm=a("li"),oQ=a("strong"),oIe=o("imagegpt"),rIe=o(" \u2014 "),X8=a("a"),tIe=o("ImageGPTConfig"),aIe=o(" (ImageGPT model)"),nIe=l(),mm=a("li"),rQ=a("strong"),sIe=o("layoutlm"),lIe=o(" \u2014 "),V8=a("a"),iIe=o("LayoutLMConfig"),dIe=o(" (LayoutLM model)"),cIe=l(),gm=a("li"),tQ=a("strong"),fIe=o("layoutlmv2"),mIe=o(" \u2014 "),z8=a("a"),gIe=o("LayoutLMv2Config"),hIe=o(" (LayoutLMv2 model)"),pIe=l(),hm=a("li"),aQ=a("strong"),_Ie=o("led"),uIe=o(" \u2014 "),W8=a("a"),bIe=o("LEDConfig"),vIe=o(" (LED model)"),TIe=l(),pm=a("li"),nQ=a("strong"),FIe=o("longformer"),CIe=o(" \u2014 "),Q8=a("a"),MIe=o("LongformerConfig"),EIe=o(" (Longformer model)"),yIe=l(),_m=a("li"),sQ=a("strong"),wIe=o("luke"),AIe=o(" \u2014 "),H8=a("a"),LIe=o("LukeConfig"),BIe=o(" (LUKE model)"),xIe=l(),um=a("li"),lQ=a("strong"),kIe=o("lxmert"),RIe=o(" \u2014 "),U8=a("a"),SIe=o("LxmertConfig"),PIe=o(" (LXMERT model)"),$Ie=l(),bm=a("li"),iQ=a("strong"),IIe=o("m2m_100"),DIe=o(" \u2014 "),J8=a("a"),jIe=o("M2M100Config"),NIe=o(" (M2M100 model)"),qIe=l(),vm=a("li"),dQ=a("strong"),GIe=o("marian"),OIe=o(" \u2014 "),Y8=a("a"),XIe=o("MarianConfig"),VIe=o(" (Marian model)"),zIe=l(),Tm=a("li"),cQ=a("strong"),WIe=o("mbart"),QIe=o(" \u2014 "),K8=a("a"),HIe=o("MBartConfig"),UIe=o(" (mBART model)"),JIe=l(),Fm=a("li"),fQ=a("strong"),YIe=o("megatron-bert"),KIe=o(" \u2014 "),Z8=a("a"),ZIe=o("MegatronBertConfig"),eDe=o(" (MegatronBert model)"),oDe=l(),Cm=a("li"),mQ=a("strong"),rDe=o("mobilebert"),tDe=o(" \u2014 "),e9=a("a"),aDe=o("MobileBertConfig"),nDe=o(" (MobileBERT model)"),sDe=l(),Mm=a("li"),gQ=a("strong"),lDe=o("mpnet"),iDe=o(" \u2014 "),o9=a("a"),dDe=o("MPNetConfig"),cDe=o(" (MPNet model)"),fDe=l(),Em=a("li"),hQ=a("strong"),mDe=o("mt5"),gDe=o(" \u2014 "),r9=a("a"),hDe=o("MT5Config"),pDe=o(" (mT5 model)"),_De=l(),ym=a("li"),pQ=a("strong"),uDe=o("nystromformer"),bDe=o(" \u2014 "),t9=a("a"),vDe=o("NystromformerConfig"),TDe=o(" (Nystromformer model)"),FDe=l(),wm=a("li"),_Q=a("strong"),CDe=o("openai-gpt"),MDe=o(" \u2014 "),a9=a("a"),EDe=o("OpenAIGPTConfig"),yDe=o(" (OpenAI GPT model)"),wDe=l(),Am=a("li"),uQ=a("strong"),ADe=o("pegasus"),LDe=o(" \u2014 "),n9=a("a"),BDe=o("PegasusConfig"),xDe=o(" (Pegasus model)"),kDe=l(),Lm=a("li"),bQ=a("strong"),RDe=o("perceiver"),SDe=o(" \u2014 "),s9=a("a"),PDe=o("PerceiverConfig"),$De=o(" (Perceiver model)"),IDe=l(),Bm=a("li"),vQ=a("strong"),DDe=o("plbart"),jDe=o(" \u2014 "),l9=a("a"),NDe=o("PLBartConfig"),qDe=o(" (PLBart model)"),GDe=l(),xm=a("li"),TQ=a("strong"),ODe=o("poolformer"),XDe=o(" \u2014 "),i9=a("a"),VDe=o("PoolFormerConfig"),zDe=o(" (PoolFormer model)"),WDe=l(),km=a("li"),FQ=a("strong"),QDe=o("prophetnet"),HDe=o(" \u2014 "),d9=a("a"),UDe=o("ProphetNetConfig"),JDe=o(" (ProphetNet model)"),YDe=l(),Rm=a("li"),CQ=a("strong"),KDe=o("qdqbert"),ZDe=o(" \u2014 "),c9=a("a"),eje=o("QDQBertConfig"),oje=o(" (QDQBert model)"),rje=l(),Sm=a("li"),MQ=a("strong"),tje=o("rag"),aje=o(" \u2014 "),f9=a("a"),nje=o("RagConfig"),sje=o(" (RAG model)"),lje=l(),Pm=a("li"),EQ=a("strong"),ije=o("realm"),dje=o(" \u2014 "),m9=a("a"),cje=o("RealmConfig"),fje=o(" (Realm model)"),mje=l(),$m=a("li"),yQ=a("strong"),gje=o("reformer"),hje=o(" \u2014 "),g9=a("a"),pje=o("ReformerConfig"),_je=o(" (Reformer model)"),uje=l(),Im=a("li"),wQ=a("strong"),bje=o("rembert"),vje=o(" \u2014 "),h9=a("a"),Tje=o("RemBertConfig"),Fje=o(" (RemBERT model)"),Cje=l(),Dm=a("li"),AQ=a("strong"),Mje=o("retribert"),Eje=o(" \u2014 "),p9=a("a"),yje=o("RetriBertConfig"),wje=o(" (RetriBERT model)"),Aje=l(),jm=a("li"),LQ=a("strong"),Lje=o("roberta"),Bje=o(" \u2014 "),_9=a("a"),xje=o("RobertaConfig"),kje=o(" (RoBERTa model)"),Rje=l(),Nm=a("li"),BQ=a("strong"),Sje=o("roformer"),Pje=o(" \u2014 "),u9=a("a"),$je=o("RoFormerConfig"),Ije=o(" (RoFormer model)"),Dje=l(),qm=a("li"),xQ=a("strong"),jje=o("segformer"),Nje=o(" \u2014 "),b9=a("a"),qje=o("SegformerConfig"),Gje=o(" (SegFormer model)"),Oje=l(),Gm=a("li"),kQ=a("strong"),Xje=o("sew"),Vje=o(" \u2014 "),v9=a("a"),zje=o("SEWConfig"),Wje=o(" (SEW model)"),Qje=l(),Om=a("li"),RQ=a("strong"),Hje=o("sew-d"),Uje=o(" \u2014 "),T9=a("a"),Jje=o("SEWDConfig"),Yje=o(" (SEW-D model)"),Kje=l(),Xm=a("li"),SQ=a("strong"),Zje=o("speech-encoder-decoder"),eNe=o(" \u2014 "),F9=a("a"),oNe=o("SpeechEncoderDecoderConfig"),rNe=o(" (Speech Encoder decoder model)"),tNe=l(),Vm=a("li"),PQ=a("strong"),aNe=o("speech_to_text"),nNe=o(" \u2014 "),C9=a("a"),sNe=o("Speech2TextConfig"),lNe=o(" (Speech2Text model)"),iNe=l(),zm=a("li"),$Q=a("strong"),dNe=o("speech_to_text_2"),cNe=o(" \u2014 "),M9=a("a"),fNe=o("Speech2Text2Config"),mNe=o(" (Speech2Text2 model)"),gNe=l(),Wm=a("li"),IQ=a("strong"),hNe=o("splinter"),pNe=o(" \u2014 "),E9=a("a"),_Ne=o("SplinterConfig"),uNe=o(" (Splinter model)"),bNe=l(),Qm=a("li"),DQ=a("strong"),vNe=o("squeezebert"),TNe=o(" \u2014 "),y9=a("a"),FNe=o("SqueezeBertConfig"),CNe=o(" (SqueezeBERT model)"),MNe=l(),Hm=a("li"),jQ=a("strong"),ENe=o("swin"),yNe=o(" \u2014 "),w9=a("a"),wNe=o("SwinConfig"),ANe=o(" (Swin model)"),LNe=l(),Um=a("li"),NQ=a("strong"),BNe=o("t5"),xNe=o(" \u2014 "),A9=a("a"),kNe=o("T5Config"),RNe=o(" (T5 model)"),SNe=l(),Jm=a("li"),qQ=a("strong"),PNe=o("tapas"),$Ne=o(" \u2014 "),L9=a("a"),INe=o("TapasConfig"),DNe=o(" (TAPAS model)"),jNe=l(),Ym=a("li"),GQ=a("strong"),NNe=o("transfo-xl"),qNe=o(" \u2014 "),B9=a("a"),GNe=o("TransfoXLConfig"),ONe=o(" (Transformer-XL model)"),XNe=l(),Km=a("li"),OQ=a("strong"),VNe=o("trocr"),zNe=o(" \u2014 "),x9=a("a"),WNe=o("TrOCRConfig"),QNe=o(" (TrOCR model)"),HNe=l(),Zm=a("li"),XQ=a("strong"),UNe=o("unispeech"),JNe=o(" \u2014 "),k9=a("a"),YNe=o("UniSpeechConfig"),KNe=o(" (UniSpeech model)"),ZNe=l(),eg=a("li"),VQ=a("strong"),eqe=o("unispeech-sat"),oqe=o(" \u2014 "),R9=a("a"),rqe=o("UniSpeechSatConfig"),tqe=o(" (UniSpeechSat model)"),aqe=l(),og=a("li"),zQ=a("strong"),nqe=o("vilt"),sqe=o(" \u2014 "),S9=a("a"),lqe=o("ViltConfig"),iqe=o(" (ViLT model)"),dqe=l(),rg=a("li"),WQ=a("strong"),cqe=o("vision-encoder-decoder"),fqe=o(" \u2014 "),P9=a("a"),mqe=o("VisionEncoderDecoderConfig"),gqe=o(" (Vision Encoder decoder model)"),hqe=l(),tg=a("li"),QQ=a("strong"),pqe=o("vision-text-dual-encoder"),_qe=o(" \u2014 "),$9=a("a"),uqe=o("VisionTextDualEncoderConfig"),bqe=o(" (VisionTextDualEncoder model)"),vqe=l(),ag=a("li"),HQ=a("strong"),Tqe=o("visual_bert"),Fqe=o(" \u2014 "),I9=a("a"),Cqe=o("VisualBertConfig"),Mqe=o(" (VisualBert model)"),Eqe=l(),ng=a("li"),UQ=a("strong"),yqe=o("vit"),wqe=o(" \u2014 "),D9=a("a"),Aqe=o("ViTConfig"),Lqe=o(" (ViT model)"),Bqe=l(),sg=a("li"),JQ=a("strong"),xqe=o("vit_mae"),kqe=o(" \u2014 "),j9=a("a"),Rqe=o("ViTMAEConfig"),Sqe=o(" (ViTMAE model)"),Pqe=l(),lg=a("li"),YQ=a("strong"),$qe=o("wav2vec2"),Iqe=o(" \u2014 "),N9=a("a"),Dqe=o("Wav2Vec2Config"),jqe=o(" (Wav2Vec2 model)"),Nqe=l(),ig=a("li"),KQ=a("strong"),qqe=o("wavlm"),Gqe=o(" \u2014 "),q9=a("a"),Oqe=o("WavLMConfig"),Xqe=o(" (WavLM model)"),Vqe=l(),dg=a("li"),ZQ=a("strong"),zqe=o("xglm"),Wqe=o(" \u2014 "),G9=a("a"),Qqe=o("XGLMConfig"),Hqe=o(" (XGLM model)"),Uqe=l(),cg=a("li"),eH=a("strong"),Jqe=o("xlm"),Yqe=o(" \u2014 "),O9=a("a"),Kqe=o("XLMConfig"),Zqe=o(" (XLM model)"),eGe=l(),fg=a("li"),oH=a("strong"),oGe=o("xlm-prophetnet"),rGe=o(" \u2014 "),X9=a("a"),tGe=o("XLMProphetNetConfig"),aGe=o(" (XLMProphetNet model)"),nGe=l(),mg=a("li"),rH=a("strong"),sGe=o("xlm-roberta"),lGe=o(" \u2014 "),V9=a("a"),iGe=o("XLMRobertaConfig"),dGe=o(" (XLM-RoBERTa model)"),cGe=l(),gg=a("li"),tH=a("strong"),fGe=o("xlm-roberta-xl"),mGe=o(" \u2014 "),z9=a("a"),gGe=o("XLMRobertaXLConfig"),hGe=o(" (XLM-RoBERTa-XL model)"),pGe=l(),hg=a("li"),aH=a("strong"),_Ge=o("xlnet"),uGe=o(" \u2014 "),W9=a("a"),bGe=o("XLNetConfig"),vGe=o(" (XLNet model)"),TGe=l(),pg=a("li"),nH=a("strong"),FGe=o("yoso"),CGe=o(" \u2014 "),Q9=a("a"),MGe=o("YosoConfig"),EGe=o(" (YOSO model)"),yGe=l(),sH=a("p"),wGe=o("Examples:"),AGe=l(),f(BM.$$.fragment),LGe=l(),_g=a("div"),f(xM.$$.fragment),BGe=l(),lH=a("p"),xGe=o("Register a new configuration for this class."),_9e=l(),ji=a("h2"),ug=a("a"),iH=a("span"),f(kM.$$.fragment),kGe=l(),dH=a("span"),RGe=o("AutoTokenizer"),u9e=l(),Vo=a("div"),f(RM.$$.fragment),SGe=l(),SM=a("p"),PGe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),H9=a("a"),$Ge=o("AutoTokenizer.from_pretrained()"),IGe=o(" class method."),DGe=l(),PM=a("p"),jGe=o("This class cannot be instantiated directly using "),cH=a("code"),NGe=o("__init__()"),qGe=o(" (throws an error)."),GGe=l(),mo=a("div"),f($M.$$.fragment),OGe=l(),fH=a("p"),XGe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),VGe=l(),Da=a("p"),zGe=o("The tokenizer class to instantiate is selected based on the "),mH=a("code"),WGe=o("model_type"),QGe=o(` property of the config object (either
passed as an argument or loaded from `),gH=a("code"),HGe=o("pretrained_model_name_or_path"),UGe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hH=a("code"),JGe=o("pretrained_model_name_or_path"),YGe=o(":"),KGe=l(),M=a("ul"),Gn=a("li"),pH=a("strong"),ZGe=o("albert"),eOe=o(" \u2014 "),U9=a("a"),oOe=o("AlbertTokenizer"),rOe=o(" or "),J9=a("a"),tOe=o("AlbertTokenizerFast"),aOe=o(" (ALBERT model)"),nOe=l(),On=a("li"),_H=a("strong"),sOe=o("bart"),lOe=o(" \u2014 "),Y9=a("a"),iOe=o("BartTokenizer"),dOe=o(" or "),K9=a("a"),cOe=o("BartTokenizerFast"),fOe=o(" (BART model)"),mOe=l(),Xn=a("li"),uH=a("strong"),gOe=o("barthez"),hOe=o(" \u2014 "),Z9=a("a"),pOe=o("BarthezTokenizer"),_Oe=o(" or "),eB=a("a"),uOe=o("BarthezTokenizerFast"),bOe=o(" (BARThez model)"),vOe=l(),bg=a("li"),bH=a("strong"),TOe=o("bartpho"),FOe=o(" \u2014 "),oB=a("a"),COe=o("BartphoTokenizer"),MOe=o(" (BARTpho model)"),EOe=l(),Vn=a("li"),vH=a("strong"),yOe=o("bert"),wOe=o(" \u2014 "),rB=a("a"),AOe=o("BertTokenizer"),LOe=o(" or "),tB=a("a"),BOe=o("BertTokenizerFast"),xOe=o(" (BERT model)"),kOe=l(),vg=a("li"),TH=a("strong"),ROe=o("bert-generation"),SOe=o(" \u2014 "),aB=a("a"),POe=o("BertGenerationTokenizer"),$Oe=o(" (Bert Generation model)"),IOe=l(),Tg=a("li"),FH=a("strong"),DOe=o("bert-japanese"),jOe=o(" \u2014 "),nB=a("a"),NOe=o("BertJapaneseTokenizer"),qOe=o(" (BertJapanese model)"),GOe=l(),Fg=a("li"),CH=a("strong"),OOe=o("bertweet"),XOe=o(" \u2014 "),sB=a("a"),VOe=o("BertweetTokenizer"),zOe=o(" (Bertweet model)"),WOe=l(),zn=a("li"),MH=a("strong"),QOe=o("big_bird"),HOe=o(" \u2014 "),lB=a("a"),UOe=o("BigBirdTokenizer"),JOe=o(" or "),iB=a("a"),YOe=o("BigBirdTokenizerFast"),KOe=o(" (BigBird model)"),ZOe=l(),Wn=a("li"),EH=a("strong"),eXe=o("bigbird_pegasus"),oXe=o(" \u2014 "),dB=a("a"),rXe=o("PegasusTokenizer"),tXe=o(" or "),cB=a("a"),aXe=o("PegasusTokenizerFast"),nXe=o(" (BigBirdPegasus model)"),sXe=l(),Qn=a("li"),yH=a("strong"),lXe=o("blenderbot"),iXe=o(" \u2014 "),fB=a("a"),dXe=o("BlenderbotTokenizer"),cXe=o(" or "),mB=a("a"),fXe=o("BlenderbotTokenizerFast"),mXe=o(" (Blenderbot model)"),gXe=l(),Cg=a("li"),wH=a("strong"),hXe=o("blenderbot-small"),pXe=o(" \u2014 "),gB=a("a"),_Xe=o("BlenderbotSmallTokenizer"),uXe=o(" (BlenderbotSmall model)"),bXe=l(),Mg=a("li"),AH=a("strong"),vXe=o("byt5"),TXe=o(" \u2014 "),hB=a("a"),FXe=o("ByT5Tokenizer"),CXe=o(" (ByT5 model)"),MXe=l(),Hn=a("li"),LH=a("strong"),EXe=o("camembert"),yXe=o(" \u2014 "),pB=a("a"),wXe=o("CamembertTokenizer"),AXe=o(" or "),_B=a("a"),LXe=o("CamembertTokenizerFast"),BXe=o(" (CamemBERT model)"),xXe=l(),Eg=a("li"),BH=a("strong"),kXe=o("canine"),RXe=o(" \u2014 "),uB=a("a"),SXe=o("CanineTokenizer"),PXe=o(" (Canine model)"),$Xe=l(),Un=a("li"),xH=a("strong"),IXe=o("clip"),DXe=o(" \u2014 "),bB=a("a"),jXe=o("CLIPTokenizer"),NXe=o(" or "),vB=a("a"),qXe=o("CLIPTokenizerFast"),GXe=o(" (CLIP model)"),OXe=l(),Jn=a("li"),kH=a("strong"),XXe=o("convbert"),VXe=o(" \u2014 "),TB=a("a"),zXe=o("ConvBertTokenizer"),WXe=o(" or "),FB=a("a"),QXe=o("ConvBertTokenizerFast"),HXe=o(" (ConvBERT model)"),UXe=l(),Yn=a("li"),RH=a("strong"),JXe=o("cpm"),YXe=o(" \u2014 "),CB=a("a"),KXe=o("CpmTokenizer"),ZXe=o(" or "),SH=a("code"),eVe=o("CpmTokenizerFast"),oVe=o(" (CPM model)"),rVe=l(),yg=a("li"),PH=a("strong"),tVe=o("ctrl"),aVe=o(" \u2014 "),MB=a("a"),nVe=o("CTRLTokenizer"),sVe=o(" (CTRL model)"),lVe=l(),Kn=a("li"),$H=a("strong"),iVe=o("deberta"),dVe=o(" \u2014 "),EB=a("a"),cVe=o("DebertaTokenizer"),fVe=o(" or "),yB=a("a"),mVe=o("DebertaTokenizerFast"),gVe=o(" (DeBERTa model)"),hVe=l(),wg=a("li"),IH=a("strong"),pVe=o("deberta-v2"),_Ve=o(" \u2014 "),wB=a("a"),uVe=o("DebertaV2Tokenizer"),bVe=o(" (DeBERTa-v2 model)"),vVe=l(),Zn=a("li"),DH=a("strong"),TVe=o("distilbert"),FVe=o(" \u2014 "),AB=a("a"),CVe=o("DistilBertTokenizer"),MVe=o(" or "),LB=a("a"),EVe=o("DistilBertTokenizerFast"),yVe=o(" (DistilBERT model)"),wVe=l(),es=a("li"),jH=a("strong"),AVe=o("dpr"),LVe=o(" \u2014 "),BB=a("a"),BVe=o("DPRQuestionEncoderTokenizer"),xVe=o(" or "),xB=a("a"),kVe=o("DPRQuestionEncoderTokenizerFast"),RVe=o(" (DPR model)"),SVe=l(),os=a("li"),NH=a("strong"),PVe=o("electra"),$Ve=o(" \u2014 "),kB=a("a"),IVe=o("ElectraTokenizer"),DVe=o(" or "),RB=a("a"),jVe=o("ElectraTokenizerFast"),NVe=o(" (ELECTRA model)"),qVe=l(),Ag=a("li"),qH=a("strong"),GVe=o("flaubert"),OVe=o(" \u2014 "),SB=a("a"),XVe=o("FlaubertTokenizer"),VVe=o(" (FlauBERT model)"),zVe=l(),rs=a("li"),GH=a("strong"),WVe=o("fnet"),QVe=o(" \u2014 "),PB=a("a"),HVe=o("FNetTokenizer"),UVe=o(" or "),$B=a("a"),JVe=o("FNetTokenizerFast"),YVe=o(" (FNet model)"),KVe=l(),Lg=a("li"),OH=a("strong"),ZVe=o("fsmt"),eze=o(" \u2014 "),IB=a("a"),oze=o("FSMTTokenizer"),rze=o(" (FairSeq Machine-Translation model)"),tze=l(),ts=a("li"),XH=a("strong"),aze=o("funnel"),nze=o(" \u2014 "),DB=a("a"),sze=o("FunnelTokenizer"),lze=o(" or "),jB=a("a"),ize=o("FunnelTokenizerFast"),dze=o(" (Funnel Transformer model)"),cze=l(),as=a("li"),VH=a("strong"),fze=o("gpt2"),mze=o(" \u2014 "),NB=a("a"),gze=o("GPT2Tokenizer"),hze=o(" or "),qB=a("a"),pze=o("GPT2TokenizerFast"),_ze=o(" (OpenAI GPT-2 model)"),uze=l(),ns=a("li"),zH=a("strong"),bze=o("gpt_neo"),vze=o(" \u2014 "),GB=a("a"),Tze=o("GPT2Tokenizer"),Fze=o(" or "),OB=a("a"),Cze=o("GPT2TokenizerFast"),Mze=o(" (GPT Neo model)"),Eze=l(),ss=a("li"),WH=a("strong"),yze=o("herbert"),wze=o(" \u2014 "),XB=a("a"),Aze=o("HerbertTokenizer"),Lze=o(" or "),VB=a("a"),Bze=o("HerbertTokenizerFast"),xze=o(" (HerBERT model)"),kze=l(),Bg=a("li"),QH=a("strong"),Rze=o("hubert"),Sze=o(" \u2014 "),zB=a("a"),Pze=o("Wav2Vec2CTCTokenizer"),$ze=o(" (Hubert model)"),Ize=l(),ls=a("li"),HH=a("strong"),Dze=o("ibert"),jze=o(" \u2014 "),WB=a("a"),Nze=o("RobertaTokenizer"),qze=o(" or "),QB=a("a"),Gze=o("RobertaTokenizerFast"),Oze=o(" (I-BERT model)"),Xze=l(),is=a("li"),UH=a("strong"),Vze=o("layoutlm"),zze=o(" \u2014 "),HB=a("a"),Wze=o("LayoutLMTokenizer"),Qze=o(" or "),UB=a("a"),Hze=o("LayoutLMTokenizerFast"),Uze=o(" (LayoutLM model)"),Jze=l(),ds=a("li"),JH=a("strong"),Yze=o("layoutlmv2"),Kze=o(" \u2014 "),JB=a("a"),Zze=o("LayoutLMv2Tokenizer"),eWe=o(" or "),YB=a("a"),oWe=o("LayoutLMv2TokenizerFast"),rWe=o(" (LayoutLMv2 model)"),tWe=l(),cs=a("li"),YH=a("strong"),aWe=o("layoutxlm"),nWe=o(" \u2014 "),KB=a("a"),sWe=o("LayoutXLMTokenizer"),lWe=o(" or "),ZB=a("a"),iWe=o("LayoutXLMTokenizerFast"),dWe=o(" (LayoutXLM model)"),cWe=l(),fs=a("li"),KH=a("strong"),fWe=o("led"),mWe=o(" \u2014 "),ex=a("a"),gWe=o("LEDTokenizer"),hWe=o(" or "),ox=a("a"),pWe=o("LEDTokenizerFast"),_We=o(" (LED model)"),uWe=l(),ms=a("li"),ZH=a("strong"),bWe=o("longformer"),vWe=o(" \u2014 "),rx=a("a"),TWe=o("LongformerTokenizer"),FWe=o(" or "),tx=a("a"),CWe=o("LongformerTokenizerFast"),MWe=o(" (Longformer model)"),EWe=l(),xg=a("li"),eU=a("strong"),yWe=o("luke"),wWe=o(" \u2014 "),ax=a("a"),AWe=o("LukeTokenizer"),LWe=o(" (LUKE model)"),BWe=l(),gs=a("li"),oU=a("strong"),xWe=o("lxmert"),kWe=o(" \u2014 "),nx=a("a"),RWe=o("LxmertTokenizer"),SWe=o(" or "),sx=a("a"),PWe=o("LxmertTokenizerFast"),$We=o(" (LXMERT model)"),IWe=l(),kg=a("li"),rU=a("strong"),DWe=o("m2m_100"),jWe=o(" \u2014 "),lx=a("a"),NWe=o("M2M100Tokenizer"),qWe=o(" (M2M100 model)"),GWe=l(),Rg=a("li"),tU=a("strong"),OWe=o("marian"),XWe=o(" \u2014 "),ix=a("a"),VWe=o("MarianTokenizer"),zWe=o(" (Marian model)"),WWe=l(),hs=a("li"),aU=a("strong"),QWe=o("mbart"),HWe=o(" \u2014 "),dx=a("a"),UWe=o("MBartTokenizer"),JWe=o(" or "),cx=a("a"),YWe=o("MBartTokenizerFast"),KWe=o(" (mBART model)"),ZWe=l(),ps=a("li"),nU=a("strong"),eQe=o("mbart50"),oQe=o(" \u2014 "),fx=a("a"),rQe=o("MBart50Tokenizer"),tQe=o(" or "),mx=a("a"),aQe=o("MBart50TokenizerFast"),nQe=o(" (mBART-50 model)"),sQe=l(),Sg=a("li"),sU=a("strong"),lQe=o("mluke"),iQe=o(" \u2014 "),gx=a("a"),dQe=o("MLukeTokenizer"),cQe=o(" (mLUKE model)"),fQe=l(),_s=a("li"),lU=a("strong"),mQe=o("mobilebert"),gQe=o(" \u2014 "),hx=a("a"),hQe=o("MobileBertTokenizer"),pQe=o(" or "),px=a("a"),_Qe=o("MobileBertTokenizerFast"),uQe=o(" (MobileBERT model)"),bQe=l(),us=a("li"),iU=a("strong"),vQe=o("mpnet"),TQe=o(" \u2014 "),_x=a("a"),FQe=o("MPNetTokenizer"),CQe=o(" or "),ux=a("a"),MQe=o("MPNetTokenizerFast"),EQe=o(" (MPNet model)"),yQe=l(),bs=a("li"),dU=a("strong"),wQe=o("mt5"),AQe=o(" \u2014 "),bx=a("a"),LQe=o("MT5Tokenizer"),BQe=o(" or "),vx=a("a"),xQe=o("MT5TokenizerFast"),kQe=o(" (mT5 model)"),RQe=l(),vs=a("li"),cU=a("strong"),SQe=o("openai-gpt"),PQe=o(" \u2014 "),Tx=a("a"),$Qe=o("OpenAIGPTTokenizer"),IQe=o(" or "),Fx=a("a"),DQe=o("OpenAIGPTTokenizerFast"),jQe=o(" (OpenAI GPT model)"),NQe=l(),Ts=a("li"),fU=a("strong"),qQe=o("pegasus"),GQe=o(" \u2014 "),Cx=a("a"),OQe=o("PegasusTokenizer"),XQe=o(" or "),Mx=a("a"),VQe=o("PegasusTokenizerFast"),zQe=o(" (Pegasus model)"),WQe=l(),Pg=a("li"),mU=a("strong"),QQe=o("perceiver"),HQe=o(" \u2014 "),Ex=a("a"),UQe=o("PerceiverTokenizer"),JQe=o(" (Perceiver model)"),YQe=l(),$g=a("li"),gU=a("strong"),KQe=o("phobert"),ZQe=o(" \u2014 "),yx=a("a"),eHe=o("PhobertTokenizer"),oHe=o(" (PhoBERT model)"),rHe=l(),Ig=a("li"),hU=a("strong"),tHe=o("plbart"),aHe=o(" \u2014 "),wx=a("a"),nHe=o("PLBartTokenizer"),sHe=o(" (PLBart model)"),lHe=l(),Dg=a("li"),pU=a("strong"),iHe=o("prophetnet"),dHe=o(" \u2014 "),Ax=a("a"),cHe=o("ProphetNetTokenizer"),fHe=o(" (ProphetNet model)"),mHe=l(),Fs=a("li"),_U=a("strong"),gHe=o("qdqbert"),hHe=o(" \u2014 "),Lx=a("a"),pHe=o("BertTokenizer"),_He=o(" or "),Bx=a("a"),uHe=o("BertTokenizerFast"),bHe=o(" (QDQBert model)"),vHe=l(),jg=a("li"),uU=a("strong"),THe=o("rag"),FHe=o(" \u2014 "),xx=a("a"),CHe=o("RagTokenizer"),MHe=o(" (RAG model)"),EHe=l(),Cs=a("li"),bU=a("strong"),yHe=o("reformer"),wHe=o(" \u2014 "),kx=a("a"),AHe=o("ReformerTokenizer"),LHe=o(" or "),Rx=a("a"),BHe=o("ReformerTokenizerFast"),xHe=o(" (Reformer model)"),kHe=l(),Ms=a("li"),vU=a("strong"),RHe=o("rembert"),SHe=o(" \u2014 "),Sx=a("a"),PHe=o("RemBertTokenizer"),$He=o(" or "),Px=a("a"),IHe=o("RemBertTokenizerFast"),DHe=o(" (RemBERT model)"),jHe=l(),Es=a("li"),TU=a("strong"),NHe=o("retribert"),qHe=o(" \u2014 "),$x=a("a"),GHe=o("RetriBertTokenizer"),OHe=o(" or "),Ix=a("a"),XHe=o("RetriBertTokenizerFast"),VHe=o(" (RetriBERT model)"),zHe=l(),ys=a("li"),FU=a("strong"),WHe=o("roberta"),QHe=o(" \u2014 "),Dx=a("a"),HHe=o("RobertaTokenizer"),UHe=o(" or "),jx=a("a"),JHe=o("RobertaTokenizerFast"),YHe=o(" (RoBERTa model)"),KHe=l(),ws=a("li"),CU=a("strong"),ZHe=o("roformer"),eUe=o(" \u2014 "),Nx=a("a"),oUe=o("RoFormerTokenizer"),rUe=o(" or "),qx=a("a"),tUe=o("RoFormerTokenizerFast"),aUe=o(" (RoFormer model)"),nUe=l(),Ng=a("li"),MU=a("strong"),sUe=o("speech_to_text"),lUe=o(" \u2014 "),Gx=a("a"),iUe=o("Speech2TextTokenizer"),dUe=o(" (Speech2Text model)"),cUe=l(),qg=a("li"),EU=a("strong"),fUe=o("speech_to_text_2"),mUe=o(" \u2014 "),Ox=a("a"),gUe=o("Speech2Text2Tokenizer"),hUe=o(" (Speech2Text2 model)"),pUe=l(),As=a("li"),yU=a("strong"),_Ue=o("splinter"),uUe=o(" \u2014 "),Xx=a("a"),bUe=o("SplinterTokenizer"),vUe=o(" or "),Vx=a("a"),TUe=o("SplinterTokenizerFast"),FUe=o(" (Splinter model)"),CUe=l(),Ls=a("li"),wU=a("strong"),MUe=o("squeezebert"),EUe=o(" \u2014 "),zx=a("a"),yUe=o("SqueezeBertTokenizer"),wUe=o(" or "),Wx=a("a"),AUe=o("SqueezeBertTokenizerFast"),LUe=o(" (SqueezeBERT model)"),BUe=l(),Bs=a("li"),AU=a("strong"),xUe=o("t5"),kUe=o(" \u2014 "),Qx=a("a"),RUe=o("T5Tokenizer"),SUe=o(" or "),Hx=a("a"),PUe=o("T5TokenizerFast"),$Ue=o(" (T5 model)"),IUe=l(),Gg=a("li"),LU=a("strong"),DUe=o("tapas"),jUe=o(" \u2014 "),Ux=a("a"),NUe=o("TapasTokenizer"),qUe=o(" (TAPAS model)"),GUe=l(),Og=a("li"),BU=a("strong"),OUe=o("transfo-xl"),XUe=o(" \u2014 "),Jx=a("a"),VUe=o("TransfoXLTokenizer"),zUe=o(" (Transformer-XL model)"),WUe=l(),Xg=a("li"),xU=a("strong"),QUe=o("wav2vec2"),HUe=o(" \u2014 "),Yx=a("a"),UUe=o("Wav2Vec2CTCTokenizer"),JUe=o(" (Wav2Vec2 model)"),YUe=l(),Vg=a("li"),kU=a("strong"),KUe=o("wav2vec2_phoneme"),ZUe=o(" \u2014 "),Kx=a("a"),eJe=o("Wav2Vec2PhonemeCTCTokenizer"),oJe=o(" (Wav2Vec2Phoneme model)"),rJe=l(),xs=a("li"),RU=a("strong"),tJe=o("xglm"),aJe=o(" \u2014 "),Zx=a("a"),nJe=o("XGLMTokenizer"),sJe=o(" or "),ek=a("a"),lJe=o("XGLMTokenizerFast"),iJe=o(" (XGLM model)"),dJe=l(),zg=a("li"),SU=a("strong"),cJe=o("xlm"),fJe=o(" \u2014 "),ok=a("a"),mJe=o("XLMTokenizer"),gJe=o(" (XLM model)"),hJe=l(),Wg=a("li"),PU=a("strong"),pJe=o("xlm-prophetnet"),_Je=o(" \u2014 "),rk=a("a"),uJe=o("XLMProphetNetTokenizer"),bJe=o(" (XLMProphetNet model)"),vJe=l(),ks=a("li"),$U=a("strong"),TJe=o("xlm-roberta"),FJe=o(" \u2014 "),tk=a("a"),CJe=o("XLMRobertaTokenizer"),MJe=o(" or "),ak=a("a"),EJe=o("XLMRobertaTokenizerFast"),yJe=o(" (XLM-RoBERTa model)"),wJe=l(),Rs=a("li"),IU=a("strong"),AJe=o("xlnet"),LJe=o(" \u2014 "),nk=a("a"),BJe=o("XLNetTokenizer"),xJe=o(" or "),sk=a("a"),kJe=o("XLNetTokenizerFast"),RJe=o(" (XLNet model)"),SJe=l(),DU=a("p"),PJe=o("Examples:"),$Je=l(),f(IM.$$.fragment),IJe=l(),Qg=a("div"),f(DM.$$.fragment),DJe=l(),jU=a("p"),jJe=o("Register a new tokenizer in this mapping."),b9e=l(),Ni=a("h2"),Hg=a("a"),NU=a("span"),f(jM.$$.fragment),NJe=l(),qU=a("span"),qJe=o("AutoFeatureExtractor"),v9e=l(),zo=a("div"),f(NM.$$.fragment),GJe=l(),qM=a("p"),OJe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),lk=a("a"),XJe=o("AutoFeatureExtractor.from_pretrained()"),VJe=o(" class method."),zJe=l(),GM=a("p"),WJe=o("This class cannot be instantiated directly using "),GU=a("code"),QJe=o("__init__()"),HJe=o(" (throws an error)."),UJe=l(),xe=a("div"),f(OM.$$.fragment),JJe=l(),OU=a("p"),YJe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),KJe=l(),ja=a("p"),ZJe=o("The feature extractor class to instantiate is selected based on the "),XU=a("code"),eYe=o("model_type"),oYe=o(` property of the config object
(either passed as an argument or loaded from `),VU=a("code"),rYe=o("pretrained_model_name_or_path"),tYe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),zU=a("code"),aYe=o("pretrained_model_name_or_path"),nYe=o(":"),sYe=l(),se=a("ul"),Ug=a("li"),WU=a("strong"),lYe=o("beit"),iYe=o(" \u2014 "),ik=a("a"),dYe=o("BeitFeatureExtractor"),cYe=o(" (BEiT model)"),fYe=l(),Jg=a("li"),QU=a("strong"),mYe=o("clip"),gYe=o(" \u2014 "),dk=a("a"),hYe=o("CLIPFeatureExtractor"),pYe=o(" (CLIP model)"),_Ye=l(),Yg=a("li"),HU=a("strong"),uYe=o("convnext"),bYe=o(" \u2014 "),ck=a("a"),vYe=o("ConvNextFeatureExtractor"),TYe=o(" (ConvNext model)"),FYe=l(),Kg=a("li"),UU=a("strong"),CYe=o("deit"),MYe=o(" \u2014 "),fk=a("a"),EYe=o("DeiTFeatureExtractor"),yYe=o(" (DeiT model)"),wYe=l(),Zg=a("li"),JU=a("strong"),AYe=o("detr"),LYe=o(" \u2014 "),mk=a("a"),BYe=o("DetrFeatureExtractor"),xYe=o(" (DETR model)"),kYe=l(),eh=a("li"),YU=a("strong"),RYe=o("hubert"),SYe=o(" \u2014 "),gk=a("a"),PYe=o("Wav2Vec2FeatureExtractor"),$Ye=o(" (Hubert model)"),IYe=l(),oh=a("li"),KU=a("strong"),DYe=o("layoutlmv2"),jYe=o(" \u2014 "),hk=a("a"),NYe=o("LayoutLMv2FeatureExtractor"),qYe=o(" (LayoutLMv2 model)"),GYe=l(),rh=a("li"),ZU=a("strong"),OYe=o("perceiver"),XYe=o(" \u2014 "),pk=a("a"),VYe=o("PerceiverFeatureExtractor"),zYe=o(" (Perceiver model)"),WYe=l(),th=a("li"),eJ=a("strong"),QYe=o("poolformer"),HYe=o(" \u2014 "),_k=a("a"),UYe=o("PoolFormerFeatureExtractor"),JYe=o(" (PoolFormer model)"),YYe=l(),ah=a("li"),oJ=a("strong"),KYe=o("segformer"),ZYe=o(" \u2014 "),uk=a("a"),eKe=o("SegformerFeatureExtractor"),oKe=o(" (SegFormer model)"),rKe=l(),nh=a("li"),rJ=a("strong"),tKe=o("speech_to_text"),aKe=o(" \u2014 "),bk=a("a"),nKe=o("Speech2TextFeatureExtractor"),sKe=o(" (Speech2Text model)"),lKe=l(),sh=a("li"),tJ=a("strong"),iKe=o("swin"),dKe=o(" \u2014 "),vk=a("a"),cKe=o("ViTFeatureExtractor"),fKe=o(" (Swin model)"),mKe=l(),lh=a("li"),aJ=a("strong"),gKe=o("vit"),hKe=o(" \u2014 "),Tk=a("a"),pKe=o("ViTFeatureExtractor"),_Ke=o(" (ViT model)"),uKe=l(),ih=a("li"),nJ=a("strong"),bKe=o("vit_mae"),vKe=o(" \u2014 "),Fk=a("a"),TKe=o("ViTFeatureExtractor"),FKe=o(" (ViTMAE model)"),CKe=l(),dh=a("li"),sJ=a("strong"),MKe=o("wav2vec2"),EKe=o(" \u2014 "),Ck=a("a"),yKe=o("Wav2Vec2FeatureExtractor"),wKe=o(" (Wav2Vec2 model)"),AKe=l(),f(ch.$$.fragment),LKe=l(),lJ=a("p"),BKe=o("Examples:"),xKe=l(),f(XM.$$.fragment),kKe=l(),fh=a("div"),f(VM.$$.fragment),RKe=l(),iJ=a("p"),SKe=o("Register a new feature extractor for this class."),T9e=l(),qi=a("h2"),mh=a("a"),dJ=a("span"),f(zM.$$.fragment),PKe=l(),cJ=a("span"),$Ke=o("AutoProcessor"),F9e=l(),Wo=a("div"),f(WM.$$.fragment),IKe=l(),QM=a("p"),DKe=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Mk=a("a"),jKe=o("AutoProcessor.from_pretrained()"),NKe=o(" class method."),qKe=l(),HM=a("p"),GKe=o("This class cannot be instantiated directly using "),fJ=a("code"),OKe=o("__init__()"),XKe=o(" (throws an error)."),VKe=l(),ke=a("div"),f(UM.$$.fragment),zKe=l(),mJ=a("p"),WKe=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),QKe=l(),Gi=a("p"),HKe=o("The processor class to instantiate is selected based on the "),gJ=a("code"),UKe=o("model_type"),JKe=o(` property of the config object (either
passed as an argument or loaded from `),hJ=a("code"),YKe=o("pretrained_model_name_or_path"),KKe=o(" if possible):"),ZKe=l(),we=a("ul"),gh=a("li"),pJ=a("strong"),eZe=o("clip"),oZe=o(" \u2014 "),Ek=a("a"),rZe=o("CLIPProcessor"),tZe=o(" (CLIP model)"),aZe=l(),hh=a("li"),_J=a("strong"),nZe=o("layoutlmv2"),sZe=o(" \u2014 "),yk=a("a"),lZe=o("LayoutLMv2Processor"),iZe=o(" (LayoutLMv2 model)"),dZe=l(),ph=a("li"),uJ=a("strong"),cZe=o("layoutxlm"),fZe=o(" \u2014 "),wk=a("a"),mZe=o("LayoutXLMProcessor"),gZe=o(" (LayoutXLM model)"),hZe=l(),_h=a("li"),bJ=a("strong"),pZe=o("speech_to_text"),_Ze=o(" \u2014 "),Ak=a("a"),uZe=o("Speech2TextProcessor"),bZe=o(" (Speech2Text model)"),vZe=l(),uh=a("li"),vJ=a("strong"),TZe=o("speech_to_text_2"),FZe=o(" \u2014 "),Lk=a("a"),CZe=o("Speech2Text2Processor"),MZe=o(" (Speech2Text2 model)"),EZe=l(),bh=a("li"),TJ=a("strong"),yZe=o("trocr"),wZe=o(" \u2014 "),Bk=a("a"),AZe=o("TrOCRProcessor"),LZe=o(" (TrOCR model)"),BZe=l(),vh=a("li"),FJ=a("strong"),xZe=o("vision-text-dual-encoder"),kZe=o(" \u2014 "),xk=a("a"),RZe=o("VisionTextDualEncoderProcessor"),SZe=o(" (VisionTextDualEncoder model)"),PZe=l(),Th=a("li"),CJ=a("strong"),$Ze=o("wav2vec2"),IZe=o(" \u2014 "),kk=a("a"),DZe=o("Wav2Vec2Processor"),jZe=o(" (Wav2Vec2 model)"),NZe=l(),f(Fh.$$.fragment),qZe=l(),MJ=a("p"),GZe=o("Examples:"),OZe=l(),f(JM.$$.fragment),XZe=l(),Ch=a("div"),f(YM.$$.fragment),VZe=l(),EJ=a("p"),zZe=o("Register a new processor for this class."),C9e=l(),Oi=a("h2"),Mh=a("a"),yJ=a("span"),f(KM.$$.fragment),WZe=l(),wJ=a("span"),QZe=o("AutoModel"),M9e=l(),Qo=a("div"),f(ZM.$$.fragment),HZe=l(),Xi=a("p"),UZe=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),AJ=a("code"),JZe=o("from_pretrained()"),YZe=o("class method or the "),LJ=a("code"),KZe=o("from_config()"),ZZe=o(`class
method.`),eeo=l(),eE=a("p"),oeo=o("This class cannot be instantiated directly using "),BJ=a("code"),reo=o("__init__()"),teo=o(" (throws an error)."),aeo=l(),qr=a("div"),f(oE.$$.fragment),neo=l(),xJ=a("p"),seo=o("Instantiates one of the base model classes of the library from a configuration."),leo=l(),Vi=a("p"),ieo=o(`Note:
Loading a model from its configuration file does `),kJ=a("strong"),deo=o("not"),ceo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("code"),feo=o("from_pretrained()"),meo=o("to load the model weights."),geo=l(),SJ=a("p"),heo=o("Examples:"),peo=l(),f(rE.$$.fragment),_eo=l(),Re=a("div"),f(tE.$$.fragment),ueo=l(),PJ=a("p"),beo=o("Instantiate one of the base model classes of the library from a pretrained model."),veo=l(),Na=a("p"),Teo=o("The model class to instantiate is selected based on the "),$J=a("code"),Feo=o("model_type"),Ceo=o(` property of the config object (either
passed as an argument or loaded from `),IJ=a("code"),Meo=o("pretrained_model_name_or_path"),Eeo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DJ=a("code"),yeo=o("pretrained_model_name_or_path"),weo=o(":"),Aeo=l(),F=a("ul"),Eh=a("li"),jJ=a("strong"),Leo=o("albert"),Beo=o(" \u2014 "),Rk=a("a"),xeo=o("AlbertModel"),keo=o(" (ALBERT model)"),Reo=l(),yh=a("li"),NJ=a("strong"),Seo=o("bart"),Peo=o(" \u2014 "),Sk=a("a"),$eo=o("BartModel"),Ieo=o(" (BART model)"),Deo=l(),wh=a("li"),qJ=a("strong"),jeo=o("beit"),Neo=o(" \u2014 "),Pk=a("a"),qeo=o("BeitModel"),Geo=o(" (BEiT model)"),Oeo=l(),Ah=a("li"),GJ=a("strong"),Xeo=o("bert"),Veo=o(" \u2014 "),$k=a("a"),zeo=o("BertModel"),Weo=o(" (BERT model)"),Qeo=l(),Lh=a("li"),OJ=a("strong"),Heo=o("bert-generation"),Ueo=o(" \u2014 "),Ik=a("a"),Jeo=o("BertGenerationEncoder"),Yeo=o(" (Bert Generation model)"),Keo=l(),Bh=a("li"),XJ=a("strong"),Zeo=o("big_bird"),eoo=o(" \u2014 "),Dk=a("a"),ooo=o("BigBirdModel"),roo=o(" (BigBird model)"),too=l(),xh=a("li"),VJ=a("strong"),aoo=o("bigbird_pegasus"),noo=o(" \u2014 "),jk=a("a"),soo=o("BigBirdPegasusModel"),loo=o(" (BigBirdPegasus model)"),ioo=l(),kh=a("li"),zJ=a("strong"),doo=o("blenderbot"),coo=o(" \u2014 "),Nk=a("a"),foo=o("BlenderbotModel"),moo=o(" (Blenderbot model)"),goo=l(),Rh=a("li"),WJ=a("strong"),hoo=o("blenderbot-small"),poo=o(" \u2014 "),qk=a("a"),_oo=o("BlenderbotSmallModel"),uoo=o(" (BlenderbotSmall model)"),boo=l(),Sh=a("li"),QJ=a("strong"),voo=o("camembert"),Too=o(" \u2014 "),Gk=a("a"),Foo=o("CamembertModel"),Coo=o(" (CamemBERT model)"),Moo=l(),Ph=a("li"),HJ=a("strong"),Eoo=o("canine"),yoo=o(" \u2014 "),Ok=a("a"),woo=o("CanineModel"),Aoo=o(" (Canine model)"),Loo=l(),$h=a("li"),UJ=a("strong"),Boo=o("clip"),xoo=o(" \u2014 "),Xk=a("a"),koo=o("CLIPModel"),Roo=o(" (CLIP model)"),Soo=l(),Ih=a("li"),JJ=a("strong"),Poo=o("convbert"),$oo=o(" \u2014 "),Vk=a("a"),Ioo=o("ConvBertModel"),Doo=o(" (ConvBERT model)"),joo=l(),Dh=a("li"),YJ=a("strong"),Noo=o("convnext"),qoo=o(" \u2014 "),zk=a("a"),Goo=o("ConvNextModel"),Ooo=o(" (ConvNext model)"),Xoo=l(),jh=a("li"),KJ=a("strong"),Voo=o("ctrl"),zoo=o(" \u2014 "),Wk=a("a"),Woo=o("CTRLModel"),Qoo=o(" (CTRL model)"),Hoo=l(),Nh=a("li"),ZJ=a("strong"),Uoo=o("data2vec-audio"),Joo=o(" \u2014 "),Qk=a("a"),Yoo=o("Data2VecAudioModel"),Koo=o(" (Data2VecAudio model)"),Zoo=l(),qh=a("li"),eY=a("strong"),ero=o("data2vec-text"),oro=o(" \u2014 "),Hk=a("a"),rro=o("Data2VecTextModel"),tro=o(" (Data2VecText model)"),aro=l(),Gh=a("li"),oY=a("strong"),nro=o("deberta"),sro=o(" \u2014 "),Uk=a("a"),lro=o("DebertaModel"),iro=o(" (DeBERTa model)"),dro=l(),Oh=a("li"),rY=a("strong"),cro=o("deberta-v2"),fro=o(" \u2014 "),Jk=a("a"),mro=o("DebertaV2Model"),gro=o(" (DeBERTa-v2 model)"),hro=l(),Xh=a("li"),tY=a("strong"),pro=o("deit"),_ro=o(" \u2014 "),Yk=a("a"),uro=o("DeiTModel"),bro=o(" (DeiT model)"),vro=l(),Vh=a("li"),aY=a("strong"),Tro=o("detr"),Fro=o(" \u2014 "),Kk=a("a"),Cro=o("DetrModel"),Mro=o(" (DETR model)"),Ero=l(),zh=a("li"),nY=a("strong"),yro=o("distilbert"),wro=o(" \u2014 "),Zk=a("a"),Aro=o("DistilBertModel"),Lro=o(" (DistilBERT model)"),Bro=l(),Wh=a("li"),sY=a("strong"),xro=o("dpr"),kro=o(" \u2014 "),eR=a("a"),Rro=o("DPRQuestionEncoder"),Sro=o(" (DPR model)"),Pro=l(),Qh=a("li"),lY=a("strong"),$ro=o("electra"),Iro=o(" \u2014 "),oR=a("a"),Dro=o("ElectraModel"),jro=o(" (ELECTRA model)"),Nro=l(),Hh=a("li"),iY=a("strong"),qro=o("flaubert"),Gro=o(" \u2014 "),rR=a("a"),Oro=o("FlaubertModel"),Xro=o(" (FlauBERT model)"),Vro=l(),Uh=a("li"),dY=a("strong"),zro=o("fnet"),Wro=o(" \u2014 "),tR=a("a"),Qro=o("FNetModel"),Hro=o(" (FNet model)"),Uro=l(),Jh=a("li"),cY=a("strong"),Jro=o("fsmt"),Yro=o(" \u2014 "),aR=a("a"),Kro=o("FSMTModel"),Zro=o(" (FairSeq Machine-Translation model)"),eto=l(),Ss=a("li"),fY=a("strong"),oto=o("funnel"),rto=o(" \u2014 "),nR=a("a"),tto=o("FunnelModel"),ato=o(" or "),sR=a("a"),nto=o("FunnelBaseModel"),sto=o(" (Funnel Transformer model)"),lto=l(),Yh=a("li"),mY=a("strong"),ito=o("gpt2"),dto=o(" \u2014 "),lR=a("a"),cto=o("GPT2Model"),fto=o(" (OpenAI GPT-2 model)"),mto=l(),Kh=a("li"),gY=a("strong"),gto=o("gpt_neo"),hto=o(" \u2014 "),iR=a("a"),pto=o("GPTNeoModel"),_to=o(" (GPT Neo model)"),uto=l(),Zh=a("li"),hY=a("strong"),bto=o("gptj"),vto=o(" \u2014 "),dR=a("a"),Tto=o("GPTJModel"),Fto=o(" (GPT-J model)"),Cto=l(),ep=a("li"),pY=a("strong"),Mto=o("hubert"),Eto=o(" \u2014 "),cR=a("a"),yto=o("HubertModel"),wto=o(" (Hubert model)"),Ato=l(),op=a("li"),_Y=a("strong"),Lto=o("ibert"),Bto=o(" \u2014 "),fR=a("a"),xto=o("IBertModel"),kto=o(" (I-BERT model)"),Rto=l(),rp=a("li"),uY=a("strong"),Sto=o("imagegpt"),Pto=o(" \u2014 "),mR=a("a"),$to=o("ImageGPTModel"),Ito=o(" (ImageGPT model)"),Dto=l(),tp=a("li"),bY=a("strong"),jto=o("layoutlm"),Nto=o(" \u2014 "),gR=a("a"),qto=o("LayoutLMModel"),Gto=o(" (LayoutLM model)"),Oto=l(),ap=a("li"),vY=a("strong"),Xto=o("layoutlmv2"),Vto=o(" \u2014 "),hR=a("a"),zto=o("LayoutLMv2Model"),Wto=o(" (LayoutLMv2 model)"),Qto=l(),np=a("li"),TY=a("strong"),Hto=o("led"),Uto=o(" \u2014 "),pR=a("a"),Jto=o("LEDModel"),Yto=o(" (LED model)"),Kto=l(),sp=a("li"),FY=a("strong"),Zto=o("longformer"),eao=o(" \u2014 "),_R=a("a"),oao=o("LongformerModel"),rao=o(" (Longformer model)"),tao=l(),lp=a("li"),CY=a("strong"),aao=o("luke"),nao=o(" \u2014 "),uR=a("a"),sao=o("LukeModel"),lao=o(" (LUKE model)"),iao=l(),ip=a("li"),MY=a("strong"),dao=o("lxmert"),cao=o(" \u2014 "),bR=a("a"),fao=o("LxmertModel"),mao=o(" (LXMERT model)"),gao=l(),dp=a("li"),EY=a("strong"),hao=o("m2m_100"),pao=o(" \u2014 "),vR=a("a"),_ao=o("M2M100Model"),uao=o(" (M2M100 model)"),bao=l(),cp=a("li"),yY=a("strong"),vao=o("marian"),Tao=o(" \u2014 "),TR=a("a"),Fao=o("MarianModel"),Cao=o(" (Marian model)"),Mao=l(),fp=a("li"),wY=a("strong"),Eao=o("mbart"),yao=o(" \u2014 "),FR=a("a"),wao=o("MBartModel"),Aao=o(" (mBART model)"),Lao=l(),mp=a("li"),AY=a("strong"),Bao=o("megatron-bert"),xao=o(" \u2014 "),CR=a("a"),kao=o("MegatronBertModel"),Rao=o(" (MegatronBert model)"),Sao=l(),gp=a("li"),LY=a("strong"),Pao=o("mobilebert"),$ao=o(" \u2014 "),MR=a("a"),Iao=o("MobileBertModel"),Dao=o(" (MobileBERT model)"),jao=l(),hp=a("li"),BY=a("strong"),Nao=o("mpnet"),qao=o(" \u2014 "),ER=a("a"),Gao=o("MPNetModel"),Oao=o(" (MPNet model)"),Xao=l(),pp=a("li"),xY=a("strong"),Vao=o("mt5"),zao=o(" \u2014 "),yR=a("a"),Wao=o("MT5Model"),Qao=o(" (mT5 model)"),Hao=l(),_p=a("li"),kY=a("strong"),Uao=o("nystromformer"),Jao=o(" \u2014 "),wR=a("a"),Yao=o("NystromformerModel"),Kao=o(" (Nystromformer model)"),Zao=l(),up=a("li"),RY=a("strong"),eno=o("openai-gpt"),ono=o(" \u2014 "),AR=a("a"),rno=o("OpenAIGPTModel"),tno=o(" (OpenAI GPT model)"),ano=l(),bp=a("li"),SY=a("strong"),nno=o("pegasus"),sno=o(" \u2014 "),LR=a("a"),lno=o("PegasusModel"),ino=o(" (Pegasus model)"),dno=l(),vp=a("li"),PY=a("strong"),cno=o("perceiver"),fno=o(" \u2014 "),BR=a("a"),mno=o("PerceiverModel"),gno=o(" (Perceiver model)"),hno=l(),Tp=a("li"),$Y=a("strong"),pno=o("plbart"),_no=o(" \u2014 "),xR=a("a"),uno=o("PLBartModel"),bno=o(" (PLBart model)"),vno=l(),Fp=a("li"),IY=a("strong"),Tno=o("poolformer"),Fno=o(" \u2014 "),kR=a("a"),Cno=o("PoolFormerModel"),Mno=o(" (PoolFormer model)"),Eno=l(),Cp=a("li"),DY=a("strong"),yno=o("prophetnet"),wno=o(" \u2014 "),RR=a("a"),Ano=o("ProphetNetModel"),Lno=o(" (ProphetNet model)"),Bno=l(),Mp=a("li"),jY=a("strong"),xno=o("qdqbert"),kno=o(" \u2014 "),SR=a("a"),Rno=o("QDQBertModel"),Sno=o(" (QDQBert model)"),Pno=l(),Ep=a("li"),NY=a("strong"),$no=o("reformer"),Ino=o(" \u2014 "),PR=a("a"),Dno=o("ReformerModel"),jno=o(" (Reformer model)"),Nno=l(),yp=a("li"),qY=a("strong"),qno=o("rembert"),Gno=o(" \u2014 "),$R=a("a"),Ono=o("RemBertModel"),Xno=o(" (RemBERT model)"),Vno=l(),wp=a("li"),GY=a("strong"),zno=o("retribert"),Wno=o(" \u2014 "),IR=a("a"),Qno=o("RetriBertModel"),Hno=o(" (RetriBERT model)"),Uno=l(),Ap=a("li"),OY=a("strong"),Jno=o("roberta"),Yno=o(" \u2014 "),DR=a("a"),Kno=o("RobertaModel"),Zno=o(" (RoBERTa model)"),eso=l(),Lp=a("li"),XY=a("strong"),oso=o("roformer"),rso=o(" \u2014 "),jR=a("a"),tso=o("RoFormerModel"),aso=o(" (RoFormer model)"),nso=l(),Bp=a("li"),VY=a("strong"),sso=o("segformer"),lso=o(" \u2014 "),NR=a("a"),iso=o("SegformerModel"),dso=o(" (SegFormer model)"),cso=l(),xp=a("li"),zY=a("strong"),fso=o("sew"),mso=o(" \u2014 "),qR=a("a"),gso=o("SEWModel"),hso=o(" (SEW model)"),pso=l(),kp=a("li"),WY=a("strong"),_so=o("sew-d"),uso=o(" \u2014 "),GR=a("a"),bso=o("SEWDModel"),vso=o(" (SEW-D model)"),Tso=l(),Rp=a("li"),QY=a("strong"),Fso=o("speech_to_text"),Cso=o(" \u2014 "),OR=a("a"),Mso=o("Speech2TextModel"),Eso=o(" (Speech2Text model)"),yso=l(),Sp=a("li"),HY=a("strong"),wso=o("splinter"),Aso=o(" \u2014 "),XR=a("a"),Lso=o("SplinterModel"),Bso=o(" (Splinter model)"),xso=l(),Pp=a("li"),UY=a("strong"),kso=o("squeezebert"),Rso=o(" \u2014 "),VR=a("a"),Sso=o("SqueezeBertModel"),Pso=o(" (SqueezeBERT model)"),$so=l(),$p=a("li"),JY=a("strong"),Iso=o("swin"),Dso=o(" \u2014 "),zR=a("a"),jso=o("SwinModel"),Nso=o(" (Swin model)"),qso=l(),Ip=a("li"),YY=a("strong"),Gso=o("t5"),Oso=o(" \u2014 "),WR=a("a"),Xso=o("T5Model"),Vso=o(" (T5 model)"),zso=l(),Dp=a("li"),KY=a("strong"),Wso=o("tapas"),Qso=o(" \u2014 "),QR=a("a"),Hso=o("TapasModel"),Uso=o(" (TAPAS model)"),Jso=l(),jp=a("li"),ZY=a("strong"),Yso=o("transfo-xl"),Kso=o(" \u2014 "),HR=a("a"),Zso=o("TransfoXLModel"),elo=o(" (Transformer-XL model)"),olo=l(),Np=a("li"),eK=a("strong"),rlo=o("unispeech"),tlo=o(" \u2014 "),UR=a("a"),alo=o("UniSpeechModel"),nlo=o(" (UniSpeech model)"),slo=l(),qp=a("li"),oK=a("strong"),llo=o("unispeech-sat"),ilo=o(" \u2014 "),JR=a("a"),dlo=o("UniSpeechSatModel"),clo=o(" (UniSpeechSat model)"),flo=l(),Gp=a("li"),rK=a("strong"),mlo=o("vilt"),glo=o(" \u2014 "),YR=a("a"),hlo=o("ViltModel"),plo=o(" (ViLT model)"),_lo=l(),Op=a("li"),tK=a("strong"),ulo=o("vision-text-dual-encoder"),blo=o(" \u2014 "),KR=a("a"),vlo=o("VisionTextDualEncoderModel"),Tlo=o(" (VisionTextDualEncoder model)"),Flo=l(),Xp=a("li"),aK=a("strong"),Clo=o("visual_bert"),Mlo=o(" \u2014 "),ZR=a("a"),Elo=o("VisualBertModel"),ylo=o(" (VisualBert model)"),wlo=l(),Vp=a("li"),nK=a("strong"),Alo=o("vit"),Llo=o(" \u2014 "),eS=a("a"),Blo=o("ViTModel"),xlo=o(" (ViT model)"),klo=l(),zp=a("li"),sK=a("strong"),Rlo=o("vit_mae"),Slo=o(" \u2014 "),oS=a("a"),Plo=o("ViTMAEModel"),$lo=o(" (ViTMAE model)"),Ilo=l(),Wp=a("li"),lK=a("strong"),Dlo=o("wav2vec2"),jlo=o(" \u2014 "),rS=a("a"),Nlo=o("Wav2Vec2Model"),qlo=o(" (Wav2Vec2 model)"),Glo=l(),Qp=a("li"),iK=a("strong"),Olo=o("wavlm"),Xlo=o(" \u2014 "),tS=a("a"),Vlo=o("WavLMModel"),zlo=o(" (WavLM model)"),Wlo=l(),Hp=a("li"),dK=a("strong"),Qlo=o("xglm"),Hlo=o(" \u2014 "),aS=a("a"),Ulo=o("XGLMModel"),Jlo=o(" (XGLM model)"),Ylo=l(),Up=a("li"),cK=a("strong"),Klo=o("xlm"),Zlo=o(" \u2014 "),nS=a("a"),eio=o("XLMModel"),oio=o(" (XLM model)"),rio=l(),Jp=a("li"),fK=a("strong"),tio=o("xlm-prophetnet"),aio=o(" \u2014 "),sS=a("a"),nio=o("XLMProphetNetModel"),sio=o(" (XLMProphetNet model)"),lio=l(),Yp=a("li"),mK=a("strong"),iio=o("xlm-roberta"),dio=o(" \u2014 "),lS=a("a"),cio=o("XLMRobertaModel"),fio=o(" (XLM-RoBERTa model)"),mio=l(),Kp=a("li"),gK=a("strong"),gio=o("xlm-roberta-xl"),hio=o(" \u2014 "),iS=a("a"),pio=o("XLMRobertaXLModel"),_io=o(" (XLM-RoBERTa-XL model)"),uio=l(),Zp=a("li"),hK=a("strong"),bio=o("xlnet"),vio=o(" \u2014 "),dS=a("a"),Tio=o("XLNetModel"),Fio=o(" (XLNet model)"),Cio=l(),e_=a("li"),pK=a("strong"),Mio=o("yoso"),Eio=o(" \u2014 "),cS=a("a"),yio=o("YosoModel"),wio=o(" (YOSO model)"),Aio=l(),o_=a("p"),Lio=o("The model is set in evaluation mode by default using "),_K=a("code"),Bio=o("model.eval()"),xio=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uK=a("code"),kio=o("model.train()"),Rio=l(),bK=a("p"),Sio=o("Examples:"),Pio=l(),f(aE.$$.fragment),E9e=l(),zi=a("h2"),r_=a("a"),vK=a("span"),f(nE.$$.fragment),$io=l(),TK=a("span"),Iio=o("AutoModelForPreTraining"),y9e=l(),Ho=a("div"),f(sE.$$.fragment),Dio=l(),Wi=a("p"),jio=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FK=a("code"),Nio=o("from_pretrained()"),qio=o("class method or the "),CK=a("code"),Gio=o("from_config()"),Oio=o(`class
method.`),Xio=l(),lE=a("p"),Vio=o("This class cannot be instantiated directly using "),MK=a("code"),zio=o("__init__()"),Wio=o(" (throws an error)."),Qio=l(),Gr=a("div"),f(iE.$$.fragment),Hio=l(),EK=a("p"),Uio=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Jio=l(),Qi=a("p"),Yio=o(`Note:
Loading a model from its configuration file does `),yK=a("strong"),Kio=o("not"),Zio=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=a("code"),edo=o("from_pretrained()"),odo=o("to load the model weights."),rdo=l(),AK=a("p"),tdo=o("Examples:"),ado=l(),f(dE.$$.fragment),ndo=l(),Se=a("div"),f(cE.$$.fragment),sdo=l(),LK=a("p"),ldo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ido=l(),qa=a("p"),ddo=o("The model class to instantiate is selected based on the "),BK=a("code"),cdo=o("model_type"),fdo=o(` property of the config object (either
passed as an argument or loaded from `),xK=a("code"),mdo=o("pretrained_model_name_or_path"),gdo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kK=a("code"),hdo=o("pretrained_model_name_or_path"),pdo=o(":"),_do=l(),k=a("ul"),t_=a("li"),RK=a("strong"),udo=o("albert"),bdo=o(" \u2014 "),fS=a("a"),vdo=o("AlbertForPreTraining"),Tdo=o(" (ALBERT model)"),Fdo=l(),a_=a("li"),SK=a("strong"),Cdo=o("bart"),Mdo=o(" \u2014 "),mS=a("a"),Edo=o("BartForConditionalGeneration"),ydo=o(" (BART model)"),wdo=l(),n_=a("li"),PK=a("strong"),Ado=o("bert"),Ldo=o(" \u2014 "),gS=a("a"),Bdo=o("BertForPreTraining"),xdo=o(" (BERT model)"),kdo=l(),s_=a("li"),$K=a("strong"),Rdo=o("big_bird"),Sdo=o(" \u2014 "),hS=a("a"),Pdo=o("BigBirdForPreTraining"),$do=o(" (BigBird model)"),Ido=l(),l_=a("li"),IK=a("strong"),Ddo=o("camembert"),jdo=o(" \u2014 "),pS=a("a"),Ndo=o("CamembertForMaskedLM"),qdo=o(" (CamemBERT model)"),Gdo=l(),i_=a("li"),DK=a("strong"),Odo=o("ctrl"),Xdo=o(" \u2014 "),_S=a("a"),Vdo=o("CTRLLMHeadModel"),zdo=o(" (CTRL model)"),Wdo=l(),d_=a("li"),jK=a("strong"),Qdo=o("data2vec-text"),Hdo=o(" \u2014 "),uS=a("a"),Udo=o("Data2VecTextForMaskedLM"),Jdo=o(" (Data2VecText model)"),Ydo=l(),c_=a("li"),NK=a("strong"),Kdo=o("deberta"),Zdo=o(" \u2014 "),bS=a("a"),eco=o("DebertaForMaskedLM"),oco=o(" (DeBERTa model)"),rco=l(),f_=a("li"),qK=a("strong"),tco=o("deberta-v2"),aco=o(" \u2014 "),vS=a("a"),nco=o("DebertaV2ForMaskedLM"),sco=o(" (DeBERTa-v2 model)"),lco=l(),m_=a("li"),GK=a("strong"),ico=o("distilbert"),dco=o(" \u2014 "),TS=a("a"),cco=o("DistilBertForMaskedLM"),fco=o(" (DistilBERT model)"),mco=l(),g_=a("li"),OK=a("strong"),gco=o("electra"),hco=o(" \u2014 "),FS=a("a"),pco=o("ElectraForPreTraining"),_co=o(" (ELECTRA model)"),uco=l(),h_=a("li"),XK=a("strong"),bco=o("flaubert"),vco=o(" \u2014 "),CS=a("a"),Tco=o("FlaubertWithLMHeadModel"),Fco=o(" (FlauBERT model)"),Cco=l(),p_=a("li"),VK=a("strong"),Mco=o("fnet"),Eco=o(" \u2014 "),MS=a("a"),yco=o("FNetForPreTraining"),wco=o(" (FNet model)"),Aco=l(),__=a("li"),zK=a("strong"),Lco=o("fsmt"),Bco=o(" \u2014 "),ES=a("a"),xco=o("FSMTForConditionalGeneration"),kco=o(" (FairSeq Machine-Translation model)"),Rco=l(),u_=a("li"),WK=a("strong"),Sco=o("funnel"),Pco=o(" \u2014 "),yS=a("a"),$co=o("FunnelForPreTraining"),Ico=o(" (Funnel Transformer model)"),Dco=l(),b_=a("li"),QK=a("strong"),jco=o("gpt2"),Nco=o(" \u2014 "),wS=a("a"),qco=o("GPT2LMHeadModel"),Gco=o(" (OpenAI GPT-2 model)"),Oco=l(),v_=a("li"),HK=a("strong"),Xco=o("ibert"),Vco=o(" \u2014 "),AS=a("a"),zco=o("IBertForMaskedLM"),Wco=o(" (I-BERT model)"),Qco=l(),T_=a("li"),UK=a("strong"),Hco=o("layoutlm"),Uco=o(" \u2014 "),LS=a("a"),Jco=o("LayoutLMForMaskedLM"),Yco=o(" (LayoutLM model)"),Kco=l(),F_=a("li"),JK=a("strong"),Zco=o("longformer"),efo=o(" \u2014 "),BS=a("a"),ofo=o("LongformerForMaskedLM"),rfo=o(" (Longformer model)"),tfo=l(),C_=a("li"),YK=a("strong"),afo=o("lxmert"),nfo=o(" \u2014 "),xS=a("a"),sfo=o("LxmertForPreTraining"),lfo=o(" (LXMERT model)"),ifo=l(),M_=a("li"),KK=a("strong"),dfo=o("megatron-bert"),cfo=o(" \u2014 "),kS=a("a"),ffo=o("MegatronBertForPreTraining"),mfo=o(" (MegatronBert model)"),gfo=l(),E_=a("li"),ZK=a("strong"),hfo=o("mobilebert"),pfo=o(" \u2014 "),RS=a("a"),_fo=o("MobileBertForPreTraining"),ufo=o(" (MobileBERT model)"),bfo=l(),y_=a("li"),eZ=a("strong"),vfo=o("mpnet"),Tfo=o(" \u2014 "),SS=a("a"),Ffo=o("MPNetForMaskedLM"),Cfo=o(" (MPNet model)"),Mfo=l(),w_=a("li"),oZ=a("strong"),Efo=o("openai-gpt"),yfo=o(" \u2014 "),PS=a("a"),wfo=o("OpenAIGPTLMHeadModel"),Afo=o(" (OpenAI GPT model)"),Lfo=l(),A_=a("li"),rZ=a("strong"),Bfo=o("retribert"),xfo=o(" \u2014 "),$S=a("a"),kfo=o("RetriBertModel"),Rfo=o(" (RetriBERT model)"),Sfo=l(),L_=a("li"),tZ=a("strong"),Pfo=o("roberta"),$fo=o(" \u2014 "),IS=a("a"),Ifo=o("RobertaForMaskedLM"),Dfo=o(" (RoBERTa model)"),jfo=l(),B_=a("li"),aZ=a("strong"),Nfo=o("squeezebert"),qfo=o(" \u2014 "),DS=a("a"),Gfo=o("SqueezeBertForMaskedLM"),Ofo=o(" (SqueezeBERT model)"),Xfo=l(),x_=a("li"),nZ=a("strong"),Vfo=o("t5"),zfo=o(" \u2014 "),jS=a("a"),Wfo=o("T5ForConditionalGeneration"),Qfo=o(" (T5 model)"),Hfo=l(),k_=a("li"),sZ=a("strong"),Ufo=o("tapas"),Jfo=o(" \u2014 "),NS=a("a"),Yfo=o("TapasForMaskedLM"),Kfo=o(" (TAPAS model)"),Zfo=l(),R_=a("li"),lZ=a("strong"),emo=o("transfo-xl"),omo=o(" \u2014 "),qS=a("a"),rmo=o("TransfoXLLMHeadModel"),tmo=o(" (Transformer-XL model)"),amo=l(),S_=a("li"),iZ=a("strong"),nmo=o("unispeech"),smo=o(" \u2014 "),GS=a("a"),lmo=o("UniSpeechForPreTraining"),imo=o(" (UniSpeech model)"),dmo=l(),P_=a("li"),dZ=a("strong"),cmo=o("unispeech-sat"),fmo=o(" \u2014 "),OS=a("a"),mmo=o("UniSpeechSatForPreTraining"),gmo=o(" (UniSpeechSat model)"),hmo=l(),$_=a("li"),cZ=a("strong"),pmo=o("visual_bert"),_mo=o(" \u2014 "),XS=a("a"),umo=o("VisualBertForPreTraining"),bmo=o(" (VisualBert model)"),vmo=l(),I_=a("li"),fZ=a("strong"),Tmo=o("vit_mae"),Fmo=o(" \u2014 "),VS=a("a"),Cmo=o("ViTMAEForPreTraining"),Mmo=o(" (ViTMAE model)"),Emo=l(),D_=a("li"),mZ=a("strong"),ymo=o("wav2vec2"),wmo=o(" \u2014 "),zS=a("a"),Amo=o("Wav2Vec2ForPreTraining"),Lmo=o(" (Wav2Vec2 model)"),Bmo=l(),j_=a("li"),gZ=a("strong"),xmo=o("xlm"),kmo=o(" \u2014 "),WS=a("a"),Rmo=o("XLMWithLMHeadModel"),Smo=o(" (XLM model)"),Pmo=l(),N_=a("li"),hZ=a("strong"),$mo=o("xlm-roberta"),Imo=o(" \u2014 "),QS=a("a"),Dmo=o("XLMRobertaForMaskedLM"),jmo=o(" (XLM-RoBERTa model)"),Nmo=l(),q_=a("li"),pZ=a("strong"),qmo=o("xlm-roberta-xl"),Gmo=o(" \u2014 "),HS=a("a"),Omo=o("XLMRobertaXLForMaskedLM"),Xmo=o(" (XLM-RoBERTa-XL model)"),Vmo=l(),G_=a("li"),_Z=a("strong"),zmo=o("xlnet"),Wmo=o(" \u2014 "),US=a("a"),Qmo=o("XLNetLMHeadModel"),Hmo=o(" (XLNet model)"),Umo=l(),O_=a("p"),Jmo=o("The model is set in evaluation mode by default using "),uZ=a("code"),Ymo=o("model.eval()"),Kmo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bZ=a("code"),Zmo=o("model.train()"),ego=l(),vZ=a("p"),ogo=o("Examples:"),rgo=l(),f(fE.$$.fragment),w9e=l(),Hi=a("h2"),X_=a("a"),TZ=a("span"),f(mE.$$.fragment),tgo=l(),FZ=a("span"),ago=o("AutoModelForCausalLM"),A9e=l(),Uo=a("div"),f(gE.$$.fragment),ngo=l(),Ui=a("p"),sgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CZ=a("code"),lgo=o("from_pretrained()"),igo=o("class method or the "),MZ=a("code"),dgo=o("from_config()"),cgo=o(`class
method.`),fgo=l(),hE=a("p"),mgo=o("This class cannot be instantiated directly using "),EZ=a("code"),ggo=o("__init__()"),hgo=o(" (throws an error)."),pgo=l(),Or=a("div"),f(pE.$$.fragment),_go=l(),yZ=a("p"),ugo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),bgo=l(),Ji=a("p"),vgo=o(`Note:
Loading a model from its configuration file does `),wZ=a("strong"),Tgo=o("not"),Fgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AZ=a("code"),Cgo=o("from_pretrained()"),Mgo=o("to load the model weights."),Ego=l(),LZ=a("p"),ygo=o("Examples:"),wgo=l(),f(_E.$$.fragment),Ago=l(),Pe=a("div"),f(uE.$$.fragment),Lgo=l(),BZ=a("p"),Bgo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xgo=l(),Ga=a("p"),kgo=o("The model class to instantiate is selected based on the "),xZ=a("code"),Rgo=o("model_type"),Sgo=o(` property of the config object (either
passed as an argument or loaded from `),kZ=a("code"),Pgo=o("pretrained_model_name_or_path"),$go=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RZ=a("code"),Igo=o("pretrained_model_name_or_path"),Dgo=o(":"),jgo=l(),$=a("ul"),V_=a("li"),SZ=a("strong"),Ngo=o("bart"),qgo=o(" \u2014 "),JS=a("a"),Ggo=o("BartForCausalLM"),Ogo=o(" (BART model)"),Xgo=l(),z_=a("li"),PZ=a("strong"),Vgo=o("bert"),zgo=o(" \u2014 "),YS=a("a"),Wgo=o("BertLMHeadModel"),Qgo=o(" (BERT model)"),Hgo=l(),W_=a("li"),$Z=a("strong"),Ugo=o("bert-generation"),Jgo=o(" \u2014 "),KS=a("a"),Ygo=o("BertGenerationDecoder"),Kgo=o(" (Bert Generation model)"),Zgo=l(),Q_=a("li"),IZ=a("strong"),eho=o("big_bird"),oho=o(" \u2014 "),ZS=a("a"),rho=o("BigBirdForCausalLM"),tho=o(" (BigBird model)"),aho=l(),H_=a("li"),DZ=a("strong"),nho=o("bigbird_pegasus"),sho=o(" \u2014 "),eP=a("a"),lho=o("BigBirdPegasusForCausalLM"),iho=o(" (BigBirdPegasus model)"),dho=l(),U_=a("li"),jZ=a("strong"),cho=o("blenderbot"),fho=o(" \u2014 "),oP=a("a"),mho=o("BlenderbotForCausalLM"),gho=o(" (Blenderbot model)"),hho=l(),J_=a("li"),NZ=a("strong"),pho=o("blenderbot-small"),_ho=o(" \u2014 "),rP=a("a"),uho=o("BlenderbotSmallForCausalLM"),bho=o(" (BlenderbotSmall model)"),vho=l(),Y_=a("li"),qZ=a("strong"),Tho=o("camembert"),Fho=o(" \u2014 "),tP=a("a"),Cho=o("CamembertForCausalLM"),Mho=o(" (CamemBERT model)"),Eho=l(),K_=a("li"),GZ=a("strong"),yho=o("ctrl"),who=o(" \u2014 "),aP=a("a"),Aho=o("CTRLLMHeadModel"),Lho=o(" (CTRL model)"),Bho=l(),Z_=a("li"),OZ=a("strong"),xho=o("data2vec-text"),kho=o(" \u2014 "),nP=a("a"),Rho=o("Data2VecTextForCausalLM"),Sho=o(" (Data2VecText model)"),Pho=l(),eu=a("li"),XZ=a("strong"),$ho=o("electra"),Iho=o(" \u2014 "),sP=a("a"),Dho=o("ElectraForCausalLM"),jho=o(" (ELECTRA model)"),Nho=l(),ou=a("li"),VZ=a("strong"),qho=o("gpt2"),Gho=o(" \u2014 "),lP=a("a"),Oho=o("GPT2LMHeadModel"),Xho=o(" (OpenAI GPT-2 model)"),Vho=l(),ru=a("li"),zZ=a("strong"),zho=o("gpt_neo"),Who=o(" \u2014 "),iP=a("a"),Qho=o("GPTNeoForCausalLM"),Hho=o(" (GPT Neo model)"),Uho=l(),tu=a("li"),WZ=a("strong"),Jho=o("gptj"),Yho=o(" \u2014 "),dP=a("a"),Kho=o("GPTJForCausalLM"),Zho=o(" (GPT-J model)"),epo=l(),au=a("li"),QZ=a("strong"),opo=o("marian"),rpo=o(" \u2014 "),cP=a("a"),tpo=o("MarianForCausalLM"),apo=o(" (Marian model)"),npo=l(),nu=a("li"),HZ=a("strong"),spo=o("mbart"),lpo=o(" \u2014 "),fP=a("a"),ipo=o("MBartForCausalLM"),dpo=o(" (mBART model)"),cpo=l(),su=a("li"),UZ=a("strong"),fpo=o("megatron-bert"),mpo=o(" \u2014 "),mP=a("a"),gpo=o("MegatronBertForCausalLM"),hpo=o(" (MegatronBert model)"),ppo=l(),lu=a("li"),JZ=a("strong"),_po=o("openai-gpt"),upo=o(" \u2014 "),gP=a("a"),bpo=o("OpenAIGPTLMHeadModel"),vpo=o(" (OpenAI GPT model)"),Tpo=l(),iu=a("li"),YZ=a("strong"),Fpo=o("pegasus"),Cpo=o(" \u2014 "),hP=a("a"),Mpo=o("PegasusForCausalLM"),Epo=o(" (Pegasus model)"),ypo=l(),du=a("li"),KZ=a("strong"),wpo=o("plbart"),Apo=o(" \u2014 "),pP=a("a"),Lpo=o("PLBartForCausalLM"),Bpo=o(" (PLBart model)"),xpo=l(),cu=a("li"),ZZ=a("strong"),kpo=o("prophetnet"),Rpo=o(" \u2014 "),_P=a("a"),Spo=o("ProphetNetForCausalLM"),Ppo=o(" (ProphetNet model)"),$po=l(),fu=a("li"),eee=a("strong"),Ipo=o("qdqbert"),Dpo=o(" \u2014 "),uP=a("a"),jpo=o("QDQBertLMHeadModel"),Npo=o(" (QDQBert model)"),qpo=l(),mu=a("li"),oee=a("strong"),Gpo=o("reformer"),Opo=o(" \u2014 "),bP=a("a"),Xpo=o("ReformerModelWithLMHead"),Vpo=o(" (Reformer model)"),zpo=l(),gu=a("li"),ree=a("strong"),Wpo=o("rembert"),Qpo=o(" \u2014 "),vP=a("a"),Hpo=o("RemBertForCausalLM"),Upo=o(" (RemBERT model)"),Jpo=l(),hu=a("li"),tee=a("strong"),Ypo=o("roberta"),Kpo=o(" \u2014 "),TP=a("a"),Zpo=o("RobertaForCausalLM"),e_o=o(" (RoBERTa model)"),o_o=l(),pu=a("li"),aee=a("strong"),r_o=o("roformer"),t_o=o(" \u2014 "),FP=a("a"),a_o=o("RoFormerForCausalLM"),n_o=o(" (RoFormer model)"),s_o=l(),_u=a("li"),nee=a("strong"),l_o=o("speech_to_text_2"),i_o=o(" \u2014 "),CP=a("a"),d_o=o("Speech2Text2ForCausalLM"),c_o=o(" (Speech2Text2 model)"),f_o=l(),uu=a("li"),see=a("strong"),m_o=o("transfo-xl"),g_o=o(" \u2014 "),MP=a("a"),h_o=o("TransfoXLLMHeadModel"),p_o=o(" (Transformer-XL model)"),__o=l(),bu=a("li"),lee=a("strong"),u_o=o("trocr"),b_o=o(" \u2014 "),EP=a("a"),v_o=o("TrOCRForCausalLM"),T_o=o(" (TrOCR model)"),F_o=l(),vu=a("li"),iee=a("strong"),C_o=o("xglm"),M_o=o(" \u2014 "),yP=a("a"),E_o=o("XGLMForCausalLM"),y_o=o(" (XGLM model)"),w_o=l(),Tu=a("li"),dee=a("strong"),A_o=o("xlm"),L_o=o(" \u2014 "),wP=a("a"),B_o=o("XLMWithLMHeadModel"),x_o=o(" (XLM model)"),k_o=l(),Fu=a("li"),cee=a("strong"),R_o=o("xlm-prophetnet"),S_o=o(" \u2014 "),AP=a("a"),P_o=o("XLMProphetNetForCausalLM"),$_o=o(" (XLMProphetNet model)"),I_o=l(),Cu=a("li"),fee=a("strong"),D_o=o("xlm-roberta"),j_o=o(" \u2014 "),LP=a("a"),N_o=o("XLMRobertaForCausalLM"),q_o=o(" (XLM-RoBERTa model)"),G_o=l(),Mu=a("li"),mee=a("strong"),O_o=o("xlm-roberta-xl"),X_o=o(" \u2014 "),BP=a("a"),V_o=o("XLMRobertaXLForCausalLM"),z_o=o(" (XLM-RoBERTa-XL model)"),W_o=l(),Eu=a("li"),gee=a("strong"),Q_o=o("xlnet"),H_o=o(" \u2014 "),xP=a("a"),U_o=o("XLNetLMHeadModel"),J_o=o(" (XLNet model)"),Y_o=l(),yu=a("p"),K_o=o("The model is set in evaluation mode by default using "),hee=a("code"),Z_o=o("model.eval()"),euo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pee=a("code"),ouo=o("model.train()"),ruo=l(),_ee=a("p"),tuo=o("Examples:"),auo=l(),f(bE.$$.fragment),L9e=l(),Yi=a("h2"),wu=a("a"),uee=a("span"),f(vE.$$.fragment),nuo=l(),bee=a("span"),suo=o("AutoModelForMaskedLM"),B9e=l(),Jo=a("div"),f(TE.$$.fragment),luo=l(),Ki=a("p"),iuo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vee=a("code"),duo=o("from_pretrained()"),cuo=o("class method or the "),Tee=a("code"),fuo=o("from_config()"),muo=o(`class
method.`),guo=l(),FE=a("p"),huo=o("This class cannot be instantiated directly using "),Fee=a("code"),puo=o("__init__()"),_uo=o(" (throws an error)."),uuo=l(),Xr=a("div"),f(CE.$$.fragment),buo=l(),Cee=a("p"),vuo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Tuo=l(),Zi=a("p"),Fuo=o(`Note:
Loading a model from its configuration file does `),Mee=a("strong"),Cuo=o("not"),Muo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eee=a("code"),Euo=o("from_pretrained()"),yuo=o("to load the model weights."),wuo=l(),yee=a("p"),Auo=o("Examples:"),Luo=l(),f(ME.$$.fragment),Buo=l(),$e=a("div"),f(EE.$$.fragment),xuo=l(),wee=a("p"),kuo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ruo=l(),Oa=a("p"),Suo=o("The model class to instantiate is selected based on the "),Aee=a("code"),Puo=o("model_type"),$uo=o(` property of the config object (either
passed as an argument or loaded from `),Lee=a("code"),Iuo=o("pretrained_model_name_or_path"),Duo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bee=a("code"),juo=o("pretrained_model_name_or_path"),Nuo=o(":"),quo=l(),I=a("ul"),Au=a("li"),xee=a("strong"),Guo=o("albert"),Ouo=o(" \u2014 "),kP=a("a"),Xuo=o("AlbertForMaskedLM"),Vuo=o(" (ALBERT model)"),zuo=l(),Lu=a("li"),kee=a("strong"),Wuo=o("bart"),Quo=o(" \u2014 "),RP=a("a"),Huo=o("BartForConditionalGeneration"),Uuo=o(" (BART model)"),Juo=l(),Bu=a("li"),Ree=a("strong"),Yuo=o("bert"),Kuo=o(" \u2014 "),SP=a("a"),Zuo=o("BertForMaskedLM"),e5o=o(" (BERT model)"),o5o=l(),xu=a("li"),See=a("strong"),r5o=o("big_bird"),t5o=o(" \u2014 "),PP=a("a"),a5o=o("BigBirdForMaskedLM"),n5o=o(" (BigBird model)"),s5o=l(),ku=a("li"),Pee=a("strong"),l5o=o("camembert"),i5o=o(" \u2014 "),$P=a("a"),d5o=o("CamembertForMaskedLM"),c5o=o(" (CamemBERT model)"),f5o=l(),Ru=a("li"),$ee=a("strong"),m5o=o("convbert"),g5o=o(" \u2014 "),IP=a("a"),h5o=o("ConvBertForMaskedLM"),p5o=o(" (ConvBERT model)"),_5o=l(),Su=a("li"),Iee=a("strong"),u5o=o("data2vec-text"),b5o=o(" \u2014 "),DP=a("a"),v5o=o("Data2VecTextForMaskedLM"),T5o=o(" (Data2VecText model)"),F5o=l(),Pu=a("li"),Dee=a("strong"),C5o=o("deberta"),M5o=o(" \u2014 "),jP=a("a"),E5o=o("DebertaForMaskedLM"),y5o=o(" (DeBERTa model)"),w5o=l(),$u=a("li"),jee=a("strong"),A5o=o("deberta-v2"),L5o=o(" \u2014 "),NP=a("a"),B5o=o("DebertaV2ForMaskedLM"),x5o=o(" (DeBERTa-v2 model)"),k5o=l(),Iu=a("li"),Nee=a("strong"),R5o=o("distilbert"),S5o=o(" \u2014 "),qP=a("a"),P5o=o("DistilBertForMaskedLM"),$5o=o(" (DistilBERT model)"),I5o=l(),Du=a("li"),qee=a("strong"),D5o=o("electra"),j5o=o(" \u2014 "),GP=a("a"),N5o=o("ElectraForMaskedLM"),q5o=o(" (ELECTRA model)"),G5o=l(),ju=a("li"),Gee=a("strong"),O5o=o("flaubert"),X5o=o(" \u2014 "),OP=a("a"),V5o=o("FlaubertWithLMHeadModel"),z5o=o(" (FlauBERT model)"),W5o=l(),Nu=a("li"),Oee=a("strong"),Q5o=o("fnet"),H5o=o(" \u2014 "),XP=a("a"),U5o=o("FNetForMaskedLM"),J5o=o(" (FNet model)"),Y5o=l(),qu=a("li"),Xee=a("strong"),K5o=o("funnel"),Z5o=o(" \u2014 "),VP=a("a"),e1o=o("FunnelForMaskedLM"),o1o=o(" (Funnel Transformer model)"),r1o=l(),Gu=a("li"),Vee=a("strong"),t1o=o("ibert"),a1o=o(" \u2014 "),zP=a("a"),n1o=o("IBertForMaskedLM"),s1o=o(" (I-BERT model)"),l1o=l(),Ou=a("li"),zee=a("strong"),i1o=o("layoutlm"),d1o=o(" \u2014 "),WP=a("a"),c1o=o("LayoutLMForMaskedLM"),f1o=o(" (LayoutLM model)"),m1o=l(),Xu=a("li"),Wee=a("strong"),g1o=o("longformer"),h1o=o(" \u2014 "),QP=a("a"),p1o=o("LongformerForMaskedLM"),_1o=o(" (Longformer model)"),u1o=l(),Vu=a("li"),Qee=a("strong"),b1o=o("mbart"),v1o=o(" \u2014 "),HP=a("a"),T1o=o("MBartForConditionalGeneration"),F1o=o(" (mBART model)"),C1o=l(),zu=a("li"),Hee=a("strong"),M1o=o("megatron-bert"),E1o=o(" \u2014 "),UP=a("a"),y1o=o("MegatronBertForMaskedLM"),w1o=o(" (MegatronBert model)"),A1o=l(),Wu=a("li"),Uee=a("strong"),L1o=o("mobilebert"),B1o=o(" \u2014 "),JP=a("a"),x1o=o("MobileBertForMaskedLM"),k1o=o(" (MobileBERT model)"),R1o=l(),Qu=a("li"),Jee=a("strong"),S1o=o("mpnet"),P1o=o(" \u2014 "),YP=a("a"),$1o=o("MPNetForMaskedLM"),I1o=o(" (MPNet model)"),D1o=l(),Hu=a("li"),Yee=a("strong"),j1o=o("nystromformer"),N1o=o(" \u2014 "),KP=a("a"),q1o=o("NystromformerForMaskedLM"),G1o=o(" (Nystromformer model)"),O1o=l(),Uu=a("li"),Kee=a("strong"),X1o=o("perceiver"),V1o=o(" \u2014 "),ZP=a("a"),z1o=o("PerceiverForMaskedLM"),W1o=o(" (Perceiver model)"),Q1o=l(),Ju=a("li"),Zee=a("strong"),H1o=o("qdqbert"),U1o=o(" \u2014 "),e$=a("a"),J1o=o("QDQBertForMaskedLM"),Y1o=o(" (QDQBert model)"),K1o=l(),Yu=a("li"),eoe=a("strong"),Z1o=o("reformer"),ebo=o(" \u2014 "),o$=a("a"),obo=o("ReformerForMaskedLM"),rbo=o(" (Reformer model)"),tbo=l(),Ku=a("li"),ooe=a("strong"),abo=o("rembert"),nbo=o(" \u2014 "),r$=a("a"),sbo=o("RemBertForMaskedLM"),lbo=o(" (RemBERT model)"),ibo=l(),Zu=a("li"),roe=a("strong"),dbo=o("roberta"),cbo=o(" \u2014 "),t$=a("a"),fbo=o("RobertaForMaskedLM"),mbo=o(" (RoBERTa model)"),gbo=l(),e5=a("li"),toe=a("strong"),hbo=o("roformer"),pbo=o(" \u2014 "),a$=a("a"),_bo=o("RoFormerForMaskedLM"),ubo=o(" (RoFormer model)"),bbo=l(),o5=a("li"),aoe=a("strong"),vbo=o("squeezebert"),Tbo=o(" \u2014 "),n$=a("a"),Fbo=o("SqueezeBertForMaskedLM"),Cbo=o(" (SqueezeBERT model)"),Mbo=l(),r5=a("li"),noe=a("strong"),Ebo=o("tapas"),ybo=o(" \u2014 "),s$=a("a"),wbo=o("TapasForMaskedLM"),Abo=o(" (TAPAS model)"),Lbo=l(),t5=a("li"),soe=a("strong"),Bbo=o("wav2vec2"),xbo=o(" \u2014 "),loe=a("code"),kbo=o("Wav2Vec2ForMaskedLM"),Rbo=o("(Wav2Vec2 model)"),Sbo=l(),a5=a("li"),ioe=a("strong"),Pbo=o("xlm"),$bo=o(" \u2014 "),l$=a("a"),Ibo=o("XLMWithLMHeadModel"),Dbo=o(" (XLM model)"),jbo=l(),n5=a("li"),doe=a("strong"),Nbo=o("xlm-roberta"),qbo=o(" \u2014 "),i$=a("a"),Gbo=o("XLMRobertaForMaskedLM"),Obo=o(" (XLM-RoBERTa model)"),Xbo=l(),s5=a("li"),coe=a("strong"),Vbo=o("xlm-roberta-xl"),zbo=o(" \u2014 "),d$=a("a"),Wbo=o("XLMRobertaXLForMaskedLM"),Qbo=o(" (XLM-RoBERTa-XL model)"),Hbo=l(),l5=a("li"),foe=a("strong"),Ubo=o("yoso"),Jbo=o(" \u2014 "),c$=a("a"),Ybo=o("YosoForMaskedLM"),Kbo=o(" (YOSO model)"),Zbo=l(),i5=a("p"),e2o=o("The model is set in evaluation mode by default using "),moe=a("code"),o2o=o("model.eval()"),r2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),goe=a("code"),t2o=o("model.train()"),a2o=l(),hoe=a("p"),n2o=o("Examples:"),s2o=l(),f(yE.$$.fragment),x9e=l(),ed=a("h2"),d5=a("a"),poe=a("span"),f(wE.$$.fragment),l2o=l(),_oe=a("span"),i2o=o("AutoModelForSeq2SeqLM"),k9e=l(),Yo=a("div"),f(AE.$$.fragment),d2o=l(),od=a("p"),c2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uoe=a("code"),f2o=o("from_pretrained()"),m2o=o("class method or the "),boe=a("code"),g2o=o("from_config()"),h2o=o(`class
method.`),p2o=l(),LE=a("p"),_2o=o("This class cannot be instantiated directly using "),voe=a("code"),u2o=o("__init__()"),b2o=o(" (throws an error)."),v2o=l(),Vr=a("div"),f(BE.$$.fragment),T2o=l(),Toe=a("p"),F2o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),C2o=l(),rd=a("p"),M2o=o(`Note:
Loading a model from its configuration file does `),Foe=a("strong"),E2o=o("not"),y2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Coe=a("code"),w2o=o("from_pretrained()"),A2o=o("to load the model weights."),L2o=l(),Moe=a("p"),B2o=o("Examples:"),x2o=l(),f(xE.$$.fragment),k2o=l(),Ie=a("div"),f(kE.$$.fragment),R2o=l(),Eoe=a("p"),S2o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),P2o=l(),Xa=a("p"),$2o=o("The model class to instantiate is selected based on the "),yoe=a("code"),I2o=o("model_type"),D2o=o(` property of the config object (either
passed as an argument or loaded from `),woe=a("code"),j2o=o("pretrained_model_name_or_path"),N2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aoe=a("code"),q2o=o("pretrained_model_name_or_path"),G2o=o(":"),O2o=l(),ae=a("ul"),c5=a("li"),Loe=a("strong"),X2o=o("bart"),V2o=o(" \u2014 "),f$=a("a"),z2o=o("BartForConditionalGeneration"),W2o=o(" (BART model)"),Q2o=l(),f5=a("li"),Boe=a("strong"),H2o=o("bigbird_pegasus"),U2o=o(" \u2014 "),m$=a("a"),J2o=o("BigBirdPegasusForConditionalGeneration"),Y2o=o(" (BigBirdPegasus model)"),K2o=l(),m5=a("li"),xoe=a("strong"),Z2o=o("blenderbot"),evo=o(" \u2014 "),g$=a("a"),ovo=o("BlenderbotForConditionalGeneration"),rvo=o(" (Blenderbot model)"),tvo=l(),g5=a("li"),koe=a("strong"),avo=o("blenderbot-small"),nvo=o(" \u2014 "),h$=a("a"),svo=o("BlenderbotSmallForConditionalGeneration"),lvo=o(" (BlenderbotSmall model)"),ivo=l(),h5=a("li"),Roe=a("strong"),dvo=o("encoder-decoder"),cvo=o(" \u2014 "),p$=a("a"),fvo=o("EncoderDecoderModel"),mvo=o(" (Encoder decoder model)"),gvo=l(),p5=a("li"),Soe=a("strong"),hvo=o("fsmt"),pvo=o(" \u2014 "),_$=a("a"),_vo=o("FSMTForConditionalGeneration"),uvo=o(" (FairSeq Machine-Translation model)"),bvo=l(),_5=a("li"),Poe=a("strong"),vvo=o("led"),Tvo=o(" \u2014 "),u$=a("a"),Fvo=o("LEDForConditionalGeneration"),Cvo=o(" (LED model)"),Mvo=l(),u5=a("li"),$oe=a("strong"),Evo=o("m2m_100"),yvo=o(" \u2014 "),b$=a("a"),wvo=o("M2M100ForConditionalGeneration"),Avo=o(" (M2M100 model)"),Lvo=l(),b5=a("li"),Ioe=a("strong"),Bvo=o("marian"),xvo=o(" \u2014 "),v$=a("a"),kvo=o("MarianMTModel"),Rvo=o(" (Marian model)"),Svo=l(),v5=a("li"),Doe=a("strong"),Pvo=o("mbart"),$vo=o(" \u2014 "),T$=a("a"),Ivo=o("MBartForConditionalGeneration"),Dvo=o(" (mBART model)"),jvo=l(),T5=a("li"),joe=a("strong"),Nvo=o("mt5"),qvo=o(" \u2014 "),F$=a("a"),Gvo=o("MT5ForConditionalGeneration"),Ovo=o(" (mT5 model)"),Xvo=l(),F5=a("li"),Noe=a("strong"),Vvo=o("pegasus"),zvo=o(" \u2014 "),C$=a("a"),Wvo=o("PegasusForConditionalGeneration"),Qvo=o(" (Pegasus model)"),Hvo=l(),C5=a("li"),qoe=a("strong"),Uvo=o("plbart"),Jvo=o(" \u2014 "),M$=a("a"),Yvo=o("PLBartForConditionalGeneration"),Kvo=o(" (PLBart model)"),Zvo=l(),M5=a("li"),Goe=a("strong"),e0o=o("prophetnet"),o0o=o(" \u2014 "),E$=a("a"),r0o=o("ProphetNetForConditionalGeneration"),t0o=o(" (ProphetNet model)"),a0o=l(),E5=a("li"),Ooe=a("strong"),n0o=o("t5"),s0o=o(" \u2014 "),y$=a("a"),l0o=o("T5ForConditionalGeneration"),i0o=o(" (T5 model)"),d0o=l(),y5=a("li"),Xoe=a("strong"),c0o=o("xlm-prophetnet"),f0o=o(" \u2014 "),w$=a("a"),m0o=o("XLMProphetNetForConditionalGeneration"),g0o=o(" (XLMProphetNet model)"),h0o=l(),w5=a("p"),p0o=o("The model is set in evaluation mode by default using "),Voe=a("code"),_0o=o("model.eval()"),u0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zoe=a("code"),b0o=o("model.train()"),v0o=l(),Woe=a("p"),T0o=o("Examples:"),F0o=l(),f(RE.$$.fragment),R9e=l(),td=a("h2"),A5=a("a"),Qoe=a("span"),f(SE.$$.fragment),C0o=l(),Hoe=a("span"),M0o=o("AutoModelForSequenceClassification"),S9e=l(),Ko=a("div"),f(PE.$$.fragment),E0o=l(),ad=a("p"),y0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Uoe=a("code"),w0o=o("from_pretrained()"),A0o=o("class method or the "),Joe=a("code"),L0o=o("from_config()"),B0o=o(`class
method.`),x0o=l(),$E=a("p"),k0o=o("This class cannot be instantiated directly using "),Yoe=a("code"),R0o=o("__init__()"),S0o=o(" (throws an error)."),P0o=l(),zr=a("div"),f(IE.$$.fragment),$0o=l(),Koe=a("p"),I0o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),D0o=l(),nd=a("p"),j0o=o(`Note:
Loading a model from its configuration file does `),Zoe=a("strong"),N0o=o("not"),q0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ere=a("code"),G0o=o("from_pretrained()"),O0o=o("to load the model weights."),X0o=l(),ore=a("p"),V0o=o("Examples:"),z0o=l(),f(DE.$$.fragment),W0o=l(),De=a("div"),f(jE.$$.fragment),Q0o=l(),rre=a("p"),H0o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),U0o=l(),Va=a("p"),J0o=o("The model class to instantiate is selected based on the "),tre=a("code"),Y0o=o("model_type"),K0o=o(` property of the config object (either
passed as an argument or loaded from `),are=a("code"),Z0o=o("pretrained_model_name_or_path"),eTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nre=a("code"),oTo=o("pretrained_model_name_or_path"),rTo=o(":"),tTo=l(),A=a("ul"),L5=a("li"),sre=a("strong"),aTo=o("albert"),nTo=o(" \u2014 "),A$=a("a"),sTo=o("AlbertForSequenceClassification"),lTo=o(" (ALBERT model)"),iTo=l(),B5=a("li"),lre=a("strong"),dTo=o("bart"),cTo=o(" \u2014 "),L$=a("a"),fTo=o("BartForSequenceClassification"),mTo=o(" (BART model)"),gTo=l(),x5=a("li"),ire=a("strong"),hTo=o("bert"),pTo=o(" \u2014 "),B$=a("a"),_To=o("BertForSequenceClassification"),uTo=o(" (BERT model)"),bTo=l(),k5=a("li"),dre=a("strong"),vTo=o("big_bird"),TTo=o(" \u2014 "),x$=a("a"),FTo=o("BigBirdForSequenceClassification"),CTo=o(" (BigBird model)"),MTo=l(),R5=a("li"),cre=a("strong"),ETo=o("bigbird_pegasus"),yTo=o(" \u2014 "),k$=a("a"),wTo=o("BigBirdPegasusForSequenceClassification"),ATo=o(" (BigBirdPegasus model)"),LTo=l(),S5=a("li"),fre=a("strong"),BTo=o("camembert"),xTo=o(" \u2014 "),R$=a("a"),kTo=o("CamembertForSequenceClassification"),RTo=o(" (CamemBERT model)"),STo=l(),P5=a("li"),mre=a("strong"),PTo=o("canine"),$To=o(" \u2014 "),S$=a("a"),ITo=o("CanineForSequenceClassification"),DTo=o(" (Canine model)"),jTo=l(),$5=a("li"),gre=a("strong"),NTo=o("convbert"),qTo=o(" \u2014 "),P$=a("a"),GTo=o("ConvBertForSequenceClassification"),OTo=o(" (ConvBERT model)"),XTo=l(),I5=a("li"),hre=a("strong"),VTo=o("ctrl"),zTo=o(" \u2014 "),$$=a("a"),WTo=o("CTRLForSequenceClassification"),QTo=o(" (CTRL model)"),HTo=l(),D5=a("li"),pre=a("strong"),UTo=o("data2vec-text"),JTo=o(" \u2014 "),I$=a("a"),YTo=o("Data2VecTextForSequenceClassification"),KTo=o(" (Data2VecText model)"),ZTo=l(),j5=a("li"),_re=a("strong"),e7o=o("deberta"),o7o=o(" \u2014 "),D$=a("a"),r7o=o("DebertaForSequenceClassification"),t7o=o(" (DeBERTa model)"),a7o=l(),N5=a("li"),ure=a("strong"),n7o=o("deberta-v2"),s7o=o(" \u2014 "),j$=a("a"),l7o=o("DebertaV2ForSequenceClassification"),i7o=o(" (DeBERTa-v2 model)"),d7o=l(),q5=a("li"),bre=a("strong"),c7o=o("distilbert"),f7o=o(" \u2014 "),N$=a("a"),m7o=o("DistilBertForSequenceClassification"),g7o=o(" (DistilBERT model)"),h7o=l(),G5=a("li"),vre=a("strong"),p7o=o("electra"),_7o=o(" \u2014 "),q$=a("a"),u7o=o("ElectraForSequenceClassification"),b7o=o(" (ELECTRA model)"),v7o=l(),O5=a("li"),Tre=a("strong"),T7o=o("flaubert"),F7o=o(" \u2014 "),G$=a("a"),C7o=o("FlaubertForSequenceClassification"),M7o=o(" (FlauBERT model)"),E7o=l(),X5=a("li"),Fre=a("strong"),y7o=o("fnet"),w7o=o(" \u2014 "),O$=a("a"),A7o=o("FNetForSequenceClassification"),L7o=o(" (FNet model)"),B7o=l(),V5=a("li"),Cre=a("strong"),x7o=o("funnel"),k7o=o(" \u2014 "),X$=a("a"),R7o=o("FunnelForSequenceClassification"),S7o=o(" (Funnel Transformer model)"),P7o=l(),z5=a("li"),Mre=a("strong"),$7o=o("gpt2"),I7o=o(" \u2014 "),V$=a("a"),D7o=o("GPT2ForSequenceClassification"),j7o=o(" (OpenAI GPT-2 model)"),N7o=l(),W5=a("li"),Ere=a("strong"),q7o=o("gpt_neo"),G7o=o(" \u2014 "),z$=a("a"),O7o=o("GPTNeoForSequenceClassification"),X7o=o(" (GPT Neo model)"),V7o=l(),Q5=a("li"),yre=a("strong"),z7o=o("gptj"),W7o=o(" \u2014 "),W$=a("a"),Q7o=o("GPTJForSequenceClassification"),H7o=o(" (GPT-J model)"),U7o=l(),H5=a("li"),wre=a("strong"),J7o=o("ibert"),Y7o=o(" \u2014 "),Q$=a("a"),K7o=o("IBertForSequenceClassification"),Z7o=o(" (I-BERT model)"),eFo=l(),U5=a("li"),Are=a("strong"),oFo=o("layoutlm"),rFo=o(" \u2014 "),H$=a("a"),tFo=o("LayoutLMForSequenceClassification"),aFo=o(" (LayoutLM model)"),nFo=l(),J5=a("li"),Lre=a("strong"),sFo=o("layoutlmv2"),lFo=o(" \u2014 "),U$=a("a"),iFo=o("LayoutLMv2ForSequenceClassification"),dFo=o(" (LayoutLMv2 model)"),cFo=l(),Y5=a("li"),Bre=a("strong"),fFo=o("led"),mFo=o(" \u2014 "),J$=a("a"),gFo=o("LEDForSequenceClassification"),hFo=o(" (LED model)"),pFo=l(),K5=a("li"),xre=a("strong"),_Fo=o("longformer"),uFo=o(" \u2014 "),Y$=a("a"),bFo=o("LongformerForSequenceClassification"),vFo=o(" (Longformer model)"),TFo=l(),Z5=a("li"),kre=a("strong"),FFo=o("mbart"),CFo=o(" \u2014 "),K$=a("a"),MFo=o("MBartForSequenceClassification"),EFo=o(" (mBART model)"),yFo=l(),e1=a("li"),Rre=a("strong"),wFo=o("megatron-bert"),AFo=o(" \u2014 "),Z$=a("a"),LFo=o("MegatronBertForSequenceClassification"),BFo=o(" (MegatronBert model)"),xFo=l(),o1=a("li"),Sre=a("strong"),kFo=o("mobilebert"),RFo=o(" \u2014 "),eI=a("a"),SFo=o("MobileBertForSequenceClassification"),PFo=o(" (MobileBERT model)"),$Fo=l(),r1=a("li"),Pre=a("strong"),IFo=o("mpnet"),DFo=o(" \u2014 "),oI=a("a"),jFo=o("MPNetForSequenceClassification"),NFo=o(" (MPNet model)"),qFo=l(),t1=a("li"),$re=a("strong"),GFo=o("nystromformer"),OFo=o(" \u2014 "),rI=a("a"),XFo=o("NystromformerForSequenceClassification"),VFo=o(" (Nystromformer model)"),zFo=l(),a1=a("li"),Ire=a("strong"),WFo=o("openai-gpt"),QFo=o(" \u2014 "),tI=a("a"),HFo=o("OpenAIGPTForSequenceClassification"),UFo=o(" (OpenAI GPT model)"),JFo=l(),n1=a("li"),Dre=a("strong"),YFo=o("perceiver"),KFo=o(" \u2014 "),aI=a("a"),ZFo=o("PerceiverForSequenceClassification"),eCo=o(" (Perceiver model)"),oCo=l(),s1=a("li"),jre=a("strong"),rCo=o("plbart"),tCo=o(" \u2014 "),nI=a("a"),aCo=o("PLBartForSequenceClassification"),nCo=o(" (PLBart model)"),sCo=l(),l1=a("li"),Nre=a("strong"),lCo=o("qdqbert"),iCo=o(" \u2014 "),sI=a("a"),dCo=o("QDQBertForSequenceClassification"),cCo=o(" (QDQBert model)"),fCo=l(),i1=a("li"),qre=a("strong"),mCo=o("reformer"),gCo=o(" \u2014 "),lI=a("a"),hCo=o("ReformerForSequenceClassification"),pCo=o(" (Reformer model)"),_Co=l(),d1=a("li"),Gre=a("strong"),uCo=o("rembert"),bCo=o(" \u2014 "),iI=a("a"),vCo=o("RemBertForSequenceClassification"),TCo=o(" (RemBERT model)"),FCo=l(),c1=a("li"),Ore=a("strong"),CCo=o("roberta"),MCo=o(" \u2014 "),dI=a("a"),ECo=o("RobertaForSequenceClassification"),yCo=o(" (RoBERTa model)"),wCo=l(),f1=a("li"),Xre=a("strong"),ACo=o("roformer"),LCo=o(" \u2014 "),cI=a("a"),BCo=o("RoFormerForSequenceClassification"),xCo=o(" (RoFormer model)"),kCo=l(),m1=a("li"),Vre=a("strong"),RCo=o("squeezebert"),SCo=o(" \u2014 "),fI=a("a"),PCo=o("SqueezeBertForSequenceClassification"),$Co=o(" (SqueezeBERT model)"),ICo=l(),g1=a("li"),zre=a("strong"),DCo=o("tapas"),jCo=o(" \u2014 "),mI=a("a"),NCo=o("TapasForSequenceClassification"),qCo=o(" (TAPAS model)"),GCo=l(),h1=a("li"),Wre=a("strong"),OCo=o("transfo-xl"),XCo=o(" \u2014 "),gI=a("a"),VCo=o("TransfoXLForSequenceClassification"),zCo=o(" (Transformer-XL model)"),WCo=l(),p1=a("li"),Qre=a("strong"),QCo=o("xlm"),HCo=o(" \u2014 "),hI=a("a"),UCo=o("XLMForSequenceClassification"),JCo=o(" (XLM model)"),YCo=l(),_1=a("li"),Hre=a("strong"),KCo=o("xlm-roberta"),ZCo=o(" \u2014 "),pI=a("a"),e4o=o("XLMRobertaForSequenceClassification"),o4o=o(" (XLM-RoBERTa model)"),r4o=l(),u1=a("li"),Ure=a("strong"),t4o=o("xlm-roberta-xl"),a4o=o(" \u2014 "),_I=a("a"),n4o=o("XLMRobertaXLForSequenceClassification"),s4o=o(" (XLM-RoBERTa-XL model)"),l4o=l(),b1=a("li"),Jre=a("strong"),i4o=o("xlnet"),d4o=o(" \u2014 "),uI=a("a"),c4o=o("XLNetForSequenceClassification"),f4o=o(" (XLNet model)"),m4o=l(),v1=a("li"),Yre=a("strong"),g4o=o("yoso"),h4o=o(" \u2014 "),bI=a("a"),p4o=o("YosoForSequenceClassification"),_4o=o(" (YOSO model)"),u4o=l(),T1=a("p"),b4o=o("The model is set in evaluation mode by default using "),Kre=a("code"),v4o=o("model.eval()"),T4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zre=a("code"),F4o=o("model.train()"),C4o=l(),ete=a("p"),M4o=o("Examples:"),E4o=l(),f(NE.$$.fragment),P9e=l(),sd=a("h2"),F1=a("a"),ote=a("span"),f(qE.$$.fragment),y4o=l(),rte=a("span"),w4o=o("AutoModelForMultipleChoice"),$9e=l(),Zo=a("div"),f(GE.$$.fragment),A4o=l(),ld=a("p"),L4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tte=a("code"),B4o=o("from_pretrained()"),x4o=o("class method or the "),ate=a("code"),k4o=o("from_config()"),R4o=o(`class
method.`),S4o=l(),OE=a("p"),P4o=o("This class cannot be instantiated directly using "),nte=a("code"),$4o=o("__init__()"),I4o=o(" (throws an error)."),D4o=l(),Wr=a("div"),f(XE.$$.fragment),j4o=l(),ste=a("p"),N4o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),q4o=l(),id=a("p"),G4o=o(`Note:
Loading a model from its configuration file does `),lte=a("strong"),O4o=o("not"),X4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ite=a("code"),V4o=o("from_pretrained()"),z4o=o("to load the model weights."),W4o=l(),dte=a("p"),Q4o=o("Examples:"),H4o=l(),f(VE.$$.fragment),U4o=l(),je=a("div"),f(zE.$$.fragment),J4o=l(),cte=a("p"),Y4o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),K4o=l(),za=a("p"),Z4o=o("The model class to instantiate is selected based on the "),fte=a("code"),eMo=o("model_type"),oMo=o(` property of the config object (either
passed as an argument or loaded from `),mte=a("code"),rMo=o("pretrained_model_name_or_path"),tMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gte=a("code"),aMo=o("pretrained_model_name_or_path"),nMo=o(":"),sMo=l(),G=a("ul"),C1=a("li"),hte=a("strong"),lMo=o("albert"),iMo=o(" \u2014 "),vI=a("a"),dMo=o("AlbertForMultipleChoice"),cMo=o(" (ALBERT model)"),fMo=l(),M1=a("li"),pte=a("strong"),mMo=o("bert"),gMo=o(" \u2014 "),TI=a("a"),hMo=o("BertForMultipleChoice"),pMo=o(" (BERT model)"),_Mo=l(),E1=a("li"),_te=a("strong"),uMo=o("big_bird"),bMo=o(" \u2014 "),FI=a("a"),vMo=o("BigBirdForMultipleChoice"),TMo=o(" (BigBird model)"),FMo=l(),y1=a("li"),ute=a("strong"),CMo=o("camembert"),MMo=o(" \u2014 "),CI=a("a"),EMo=o("CamembertForMultipleChoice"),yMo=o(" (CamemBERT model)"),wMo=l(),w1=a("li"),bte=a("strong"),AMo=o("canine"),LMo=o(" \u2014 "),MI=a("a"),BMo=o("CanineForMultipleChoice"),xMo=o(" (Canine model)"),kMo=l(),A1=a("li"),vte=a("strong"),RMo=o("convbert"),SMo=o(" \u2014 "),EI=a("a"),PMo=o("ConvBertForMultipleChoice"),$Mo=o(" (ConvBERT model)"),IMo=l(),L1=a("li"),Tte=a("strong"),DMo=o("data2vec-text"),jMo=o(" \u2014 "),yI=a("a"),NMo=o("Data2VecTextForMultipleChoice"),qMo=o(" (Data2VecText model)"),GMo=l(),B1=a("li"),Fte=a("strong"),OMo=o("distilbert"),XMo=o(" \u2014 "),wI=a("a"),VMo=o("DistilBertForMultipleChoice"),zMo=o(" (DistilBERT model)"),WMo=l(),x1=a("li"),Cte=a("strong"),QMo=o("electra"),HMo=o(" \u2014 "),AI=a("a"),UMo=o("ElectraForMultipleChoice"),JMo=o(" (ELECTRA model)"),YMo=l(),k1=a("li"),Mte=a("strong"),KMo=o("flaubert"),ZMo=o(" \u2014 "),LI=a("a"),eEo=o("FlaubertForMultipleChoice"),oEo=o(" (FlauBERT model)"),rEo=l(),R1=a("li"),Ete=a("strong"),tEo=o("fnet"),aEo=o(" \u2014 "),BI=a("a"),nEo=o("FNetForMultipleChoice"),sEo=o(" (FNet model)"),lEo=l(),S1=a("li"),yte=a("strong"),iEo=o("funnel"),dEo=o(" \u2014 "),xI=a("a"),cEo=o("FunnelForMultipleChoice"),fEo=o(" (Funnel Transformer model)"),mEo=l(),P1=a("li"),wte=a("strong"),gEo=o("ibert"),hEo=o(" \u2014 "),kI=a("a"),pEo=o("IBertForMultipleChoice"),_Eo=o(" (I-BERT model)"),uEo=l(),$1=a("li"),Ate=a("strong"),bEo=o("longformer"),vEo=o(" \u2014 "),RI=a("a"),TEo=o("LongformerForMultipleChoice"),FEo=o(" (Longformer model)"),CEo=l(),I1=a("li"),Lte=a("strong"),MEo=o("megatron-bert"),EEo=o(" \u2014 "),SI=a("a"),yEo=o("MegatronBertForMultipleChoice"),wEo=o(" (MegatronBert model)"),AEo=l(),D1=a("li"),Bte=a("strong"),LEo=o("mobilebert"),BEo=o(" \u2014 "),PI=a("a"),xEo=o("MobileBertForMultipleChoice"),kEo=o(" (MobileBERT model)"),REo=l(),j1=a("li"),xte=a("strong"),SEo=o("mpnet"),PEo=o(" \u2014 "),$I=a("a"),$Eo=o("MPNetForMultipleChoice"),IEo=o(" (MPNet model)"),DEo=l(),N1=a("li"),kte=a("strong"),jEo=o("nystromformer"),NEo=o(" \u2014 "),II=a("a"),qEo=o("NystromformerForMultipleChoice"),GEo=o(" (Nystromformer model)"),OEo=l(),q1=a("li"),Rte=a("strong"),XEo=o("qdqbert"),VEo=o(" \u2014 "),DI=a("a"),zEo=o("QDQBertForMultipleChoice"),WEo=o(" (QDQBert model)"),QEo=l(),G1=a("li"),Ste=a("strong"),HEo=o("rembert"),UEo=o(" \u2014 "),jI=a("a"),JEo=o("RemBertForMultipleChoice"),YEo=o(" (RemBERT model)"),KEo=l(),O1=a("li"),Pte=a("strong"),ZEo=o("roberta"),e3o=o(" \u2014 "),NI=a("a"),o3o=o("RobertaForMultipleChoice"),r3o=o(" (RoBERTa model)"),t3o=l(),X1=a("li"),$te=a("strong"),a3o=o("roformer"),n3o=o(" \u2014 "),qI=a("a"),s3o=o("RoFormerForMultipleChoice"),l3o=o(" (RoFormer model)"),i3o=l(),V1=a("li"),Ite=a("strong"),d3o=o("squeezebert"),c3o=o(" \u2014 "),GI=a("a"),f3o=o("SqueezeBertForMultipleChoice"),m3o=o(" (SqueezeBERT model)"),g3o=l(),z1=a("li"),Dte=a("strong"),h3o=o("xlm"),p3o=o(" \u2014 "),OI=a("a"),_3o=o("XLMForMultipleChoice"),u3o=o(" (XLM model)"),b3o=l(),W1=a("li"),jte=a("strong"),v3o=o("xlm-roberta"),T3o=o(" \u2014 "),XI=a("a"),F3o=o("XLMRobertaForMultipleChoice"),C3o=o(" (XLM-RoBERTa model)"),M3o=l(),Q1=a("li"),Nte=a("strong"),E3o=o("xlm-roberta-xl"),y3o=o(" \u2014 "),VI=a("a"),w3o=o("XLMRobertaXLForMultipleChoice"),A3o=o(" (XLM-RoBERTa-XL model)"),L3o=l(),H1=a("li"),qte=a("strong"),B3o=o("xlnet"),x3o=o(" \u2014 "),zI=a("a"),k3o=o("XLNetForMultipleChoice"),R3o=o(" (XLNet model)"),S3o=l(),U1=a("li"),Gte=a("strong"),P3o=o("yoso"),$3o=o(" \u2014 "),WI=a("a"),I3o=o("YosoForMultipleChoice"),D3o=o(" (YOSO model)"),j3o=l(),J1=a("p"),N3o=o("The model is set in evaluation mode by default using "),Ote=a("code"),q3o=o("model.eval()"),G3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xte=a("code"),O3o=o("model.train()"),X3o=l(),Vte=a("p"),V3o=o("Examples:"),z3o=l(),f(WE.$$.fragment),I9e=l(),dd=a("h2"),Y1=a("a"),zte=a("span"),f(QE.$$.fragment),W3o=l(),Wte=a("span"),Q3o=o("AutoModelForNextSentencePrediction"),D9e=l(),er=a("div"),f(HE.$$.fragment),H3o=l(),cd=a("p"),U3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Qte=a("code"),J3o=o("from_pretrained()"),Y3o=o("class method or the "),Hte=a("code"),K3o=o("from_config()"),Z3o=o(`class
method.`),eyo=l(),UE=a("p"),oyo=o("This class cannot be instantiated directly using "),Ute=a("code"),ryo=o("__init__()"),tyo=o(" (throws an error)."),ayo=l(),Qr=a("div"),f(JE.$$.fragment),nyo=l(),Jte=a("p"),syo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lyo=l(),fd=a("p"),iyo=o(`Note:
Loading a model from its configuration file does `),Yte=a("strong"),dyo=o("not"),cyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kte=a("code"),fyo=o("from_pretrained()"),myo=o("to load the model weights."),gyo=l(),Zte=a("p"),hyo=o("Examples:"),pyo=l(),f(YE.$$.fragment),_yo=l(),Ne=a("div"),f(KE.$$.fragment),uyo=l(),eae=a("p"),byo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vyo=l(),Wa=a("p"),Tyo=o("The model class to instantiate is selected based on the "),oae=a("code"),Fyo=o("model_type"),Cyo=o(` property of the config object (either
passed as an argument or loaded from `),rae=a("code"),Myo=o("pretrained_model_name_or_path"),Eyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tae=a("code"),yyo=o("pretrained_model_name_or_path"),wyo=o(":"),Ayo=l(),na=a("ul"),K1=a("li"),aae=a("strong"),Lyo=o("bert"),Byo=o(" \u2014 "),QI=a("a"),xyo=o("BertForNextSentencePrediction"),kyo=o(" (BERT model)"),Ryo=l(),Z1=a("li"),nae=a("strong"),Syo=o("fnet"),Pyo=o(" \u2014 "),HI=a("a"),$yo=o("FNetForNextSentencePrediction"),Iyo=o(" (FNet model)"),Dyo=l(),eb=a("li"),sae=a("strong"),jyo=o("megatron-bert"),Nyo=o(" \u2014 "),UI=a("a"),qyo=o("MegatronBertForNextSentencePrediction"),Gyo=o(" (MegatronBert model)"),Oyo=l(),ob=a("li"),lae=a("strong"),Xyo=o("mobilebert"),Vyo=o(" \u2014 "),JI=a("a"),zyo=o("MobileBertForNextSentencePrediction"),Wyo=o(" (MobileBERT model)"),Qyo=l(),rb=a("li"),iae=a("strong"),Hyo=o("qdqbert"),Uyo=o(" \u2014 "),YI=a("a"),Jyo=o("QDQBertForNextSentencePrediction"),Yyo=o(" (QDQBert model)"),Kyo=l(),tb=a("p"),Zyo=o("The model is set in evaluation mode by default using "),dae=a("code"),ewo=o("model.eval()"),owo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cae=a("code"),rwo=o("model.train()"),two=l(),fae=a("p"),awo=o("Examples:"),nwo=l(),f(ZE.$$.fragment),j9e=l(),md=a("h2"),ab=a("a"),mae=a("span"),f(e3.$$.fragment),swo=l(),gae=a("span"),lwo=o("AutoModelForTokenClassification"),N9e=l(),or=a("div"),f(o3.$$.fragment),iwo=l(),gd=a("p"),dwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hae=a("code"),cwo=o("from_pretrained()"),fwo=o("class method or the "),pae=a("code"),mwo=o("from_config()"),gwo=o(`class
method.`),hwo=l(),r3=a("p"),pwo=o("This class cannot be instantiated directly using "),_ae=a("code"),_wo=o("__init__()"),uwo=o(" (throws an error)."),bwo=l(),Hr=a("div"),f(t3.$$.fragment),vwo=l(),uae=a("p"),Two=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Fwo=l(),hd=a("p"),Cwo=o(`Note:
Loading a model from its configuration file does `),bae=a("strong"),Mwo=o("not"),Ewo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vae=a("code"),ywo=o("from_pretrained()"),wwo=o("to load the model weights."),Awo=l(),Tae=a("p"),Lwo=o("Examples:"),Bwo=l(),f(a3.$$.fragment),xwo=l(),qe=a("div"),f(n3.$$.fragment),kwo=l(),Fae=a("p"),Rwo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Swo=l(),Qa=a("p"),Pwo=o("The model class to instantiate is selected based on the "),Cae=a("code"),$wo=o("model_type"),Iwo=o(` property of the config object (either
passed as an argument or loaded from `),Mae=a("code"),Dwo=o("pretrained_model_name_or_path"),jwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eae=a("code"),Nwo=o("pretrained_model_name_or_path"),qwo=o(":"),Gwo=l(),N=a("ul"),nb=a("li"),yae=a("strong"),Owo=o("albert"),Xwo=o(" \u2014 "),KI=a("a"),Vwo=o("AlbertForTokenClassification"),zwo=o(" (ALBERT model)"),Wwo=l(),sb=a("li"),wae=a("strong"),Qwo=o("bert"),Hwo=o(" \u2014 "),ZI=a("a"),Uwo=o("BertForTokenClassification"),Jwo=o(" (BERT model)"),Ywo=l(),lb=a("li"),Aae=a("strong"),Kwo=o("big_bird"),Zwo=o(" \u2014 "),eD=a("a"),e6o=o("BigBirdForTokenClassification"),o6o=o(" (BigBird model)"),r6o=l(),ib=a("li"),Lae=a("strong"),t6o=o("camembert"),a6o=o(" \u2014 "),oD=a("a"),n6o=o("CamembertForTokenClassification"),s6o=o(" (CamemBERT model)"),l6o=l(),db=a("li"),Bae=a("strong"),i6o=o("canine"),d6o=o(" \u2014 "),rD=a("a"),c6o=o("CanineForTokenClassification"),f6o=o(" (Canine model)"),m6o=l(),cb=a("li"),xae=a("strong"),g6o=o("convbert"),h6o=o(" \u2014 "),tD=a("a"),p6o=o("ConvBertForTokenClassification"),_6o=o(" (ConvBERT model)"),u6o=l(),fb=a("li"),kae=a("strong"),b6o=o("data2vec-text"),v6o=o(" \u2014 "),aD=a("a"),T6o=o("Data2VecTextForTokenClassification"),F6o=o(" (Data2VecText model)"),C6o=l(),mb=a("li"),Rae=a("strong"),M6o=o("deberta"),E6o=o(" \u2014 "),nD=a("a"),y6o=o("DebertaForTokenClassification"),w6o=o(" (DeBERTa model)"),A6o=l(),gb=a("li"),Sae=a("strong"),L6o=o("deberta-v2"),B6o=o(" \u2014 "),sD=a("a"),x6o=o("DebertaV2ForTokenClassification"),k6o=o(" (DeBERTa-v2 model)"),R6o=l(),hb=a("li"),Pae=a("strong"),S6o=o("distilbert"),P6o=o(" \u2014 "),lD=a("a"),$6o=o("DistilBertForTokenClassification"),I6o=o(" (DistilBERT model)"),D6o=l(),pb=a("li"),$ae=a("strong"),j6o=o("electra"),N6o=o(" \u2014 "),iD=a("a"),q6o=o("ElectraForTokenClassification"),G6o=o(" (ELECTRA model)"),O6o=l(),_b=a("li"),Iae=a("strong"),X6o=o("flaubert"),V6o=o(" \u2014 "),dD=a("a"),z6o=o("FlaubertForTokenClassification"),W6o=o(" (FlauBERT model)"),Q6o=l(),ub=a("li"),Dae=a("strong"),H6o=o("fnet"),U6o=o(" \u2014 "),cD=a("a"),J6o=o("FNetForTokenClassification"),Y6o=o(" (FNet model)"),K6o=l(),bb=a("li"),jae=a("strong"),Z6o=o("funnel"),eAo=o(" \u2014 "),fD=a("a"),oAo=o("FunnelForTokenClassification"),rAo=o(" (Funnel Transformer model)"),tAo=l(),vb=a("li"),Nae=a("strong"),aAo=o("gpt2"),nAo=o(" \u2014 "),mD=a("a"),sAo=o("GPT2ForTokenClassification"),lAo=o(" (OpenAI GPT-2 model)"),iAo=l(),Tb=a("li"),qae=a("strong"),dAo=o("ibert"),cAo=o(" \u2014 "),gD=a("a"),fAo=o("IBertForTokenClassification"),mAo=o(" (I-BERT model)"),gAo=l(),Fb=a("li"),Gae=a("strong"),hAo=o("layoutlm"),pAo=o(" \u2014 "),hD=a("a"),_Ao=o("LayoutLMForTokenClassification"),uAo=o(" (LayoutLM model)"),bAo=l(),Cb=a("li"),Oae=a("strong"),vAo=o("layoutlmv2"),TAo=o(" \u2014 "),pD=a("a"),FAo=o("LayoutLMv2ForTokenClassification"),CAo=o(" (LayoutLMv2 model)"),MAo=l(),Mb=a("li"),Xae=a("strong"),EAo=o("longformer"),yAo=o(" \u2014 "),_D=a("a"),wAo=o("LongformerForTokenClassification"),AAo=o(" (Longformer model)"),LAo=l(),Eb=a("li"),Vae=a("strong"),BAo=o("megatron-bert"),xAo=o(" \u2014 "),uD=a("a"),kAo=o("MegatronBertForTokenClassification"),RAo=o(" (MegatronBert model)"),SAo=l(),yb=a("li"),zae=a("strong"),PAo=o("mobilebert"),$Ao=o(" \u2014 "),bD=a("a"),IAo=o("MobileBertForTokenClassification"),DAo=o(" (MobileBERT model)"),jAo=l(),wb=a("li"),Wae=a("strong"),NAo=o("mpnet"),qAo=o(" \u2014 "),vD=a("a"),GAo=o("MPNetForTokenClassification"),OAo=o(" (MPNet model)"),XAo=l(),Ab=a("li"),Qae=a("strong"),VAo=o("nystromformer"),zAo=o(" \u2014 "),TD=a("a"),WAo=o("NystromformerForTokenClassification"),QAo=o(" (Nystromformer model)"),HAo=l(),Lb=a("li"),Hae=a("strong"),UAo=o("qdqbert"),JAo=o(" \u2014 "),FD=a("a"),YAo=o("QDQBertForTokenClassification"),KAo=o(" (QDQBert model)"),ZAo=l(),Bb=a("li"),Uae=a("strong"),eLo=o("rembert"),oLo=o(" \u2014 "),CD=a("a"),rLo=o("RemBertForTokenClassification"),tLo=o(" (RemBERT model)"),aLo=l(),xb=a("li"),Jae=a("strong"),nLo=o("roberta"),sLo=o(" \u2014 "),MD=a("a"),lLo=o("RobertaForTokenClassification"),iLo=o(" (RoBERTa model)"),dLo=l(),kb=a("li"),Yae=a("strong"),cLo=o("roformer"),fLo=o(" \u2014 "),ED=a("a"),mLo=o("RoFormerForTokenClassification"),gLo=o(" (RoFormer model)"),hLo=l(),Rb=a("li"),Kae=a("strong"),pLo=o("squeezebert"),_Lo=o(" \u2014 "),yD=a("a"),uLo=o("SqueezeBertForTokenClassification"),bLo=o(" (SqueezeBERT model)"),vLo=l(),Sb=a("li"),Zae=a("strong"),TLo=o("xlm"),FLo=o(" \u2014 "),wD=a("a"),CLo=o("XLMForTokenClassification"),MLo=o(" (XLM model)"),ELo=l(),Pb=a("li"),ene=a("strong"),yLo=o("xlm-roberta"),wLo=o(" \u2014 "),AD=a("a"),ALo=o("XLMRobertaForTokenClassification"),LLo=o(" (XLM-RoBERTa model)"),BLo=l(),$b=a("li"),one=a("strong"),xLo=o("xlm-roberta-xl"),kLo=o(" \u2014 "),LD=a("a"),RLo=o("XLMRobertaXLForTokenClassification"),SLo=o(" (XLM-RoBERTa-XL model)"),PLo=l(),Ib=a("li"),rne=a("strong"),$Lo=o("xlnet"),ILo=o(" \u2014 "),BD=a("a"),DLo=o("XLNetForTokenClassification"),jLo=o(" (XLNet model)"),NLo=l(),Db=a("li"),tne=a("strong"),qLo=o("yoso"),GLo=o(" \u2014 "),xD=a("a"),OLo=o("YosoForTokenClassification"),XLo=o(" (YOSO model)"),VLo=l(),jb=a("p"),zLo=o("The model is set in evaluation mode by default using "),ane=a("code"),WLo=o("model.eval()"),QLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nne=a("code"),HLo=o("model.train()"),ULo=l(),sne=a("p"),JLo=o("Examples:"),YLo=l(),f(s3.$$.fragment),q9e=l(),pd=a("h2"),Nb=a("a"),lne=a("span"),f(l3.$$.fragment),KLo=l(),ine=a("span"),ZLo=o("AutoModelForQuestionAnswering"),G9e=l(),rr=a("div"),f(i3.$$.fragment),e8o=l(),_d=a("p"),o8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dne=a("code"),r8o=o("from_pretrained()"),t8o=o("class method or the "),cne=a("code"),a8o=o("from_config()"),n8o=o(`class
method.`),s8o=l(),d3=a("p"),l8o=o("This class cannot be instantiated directly using "),fne=a("code"),i8o=o("__init__()"),d8o=o(" (throws an error)."),c8o=l(),Ur=a("div"),f(c3.$$.fragment),f8o=l(),mne=a("p"),m8o=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),g8o=l(),ud=a("p"),h8o=o(`Note:
Loading a model from its configuration file does `),gne=a("strong"),p8o=o("not"),_8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hne=a("code"),u8o=o("from_pretrained()"),b8o=o("to load the model weights."),v8o=l(),pne=a("p"),T8o=o("Examples:"),F8o=l(),f(f3.$$.fragment),C8o=l(),Ge=a("div"),f(m3.$$.fragment),M8o=l(),_ne=a("p"),E8o=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),y8o=l(),Ha=a("p"),w8o=o("The model class to instantiate is selected based on the "),une=a("code"),A8o=o("model_type"),L8o=o(` property of the config object (either
passed as an argument or loaded from `),bne=a("code"),B8o=o("pretrained_model_name_or_path"),x8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vne=a("code"),k8o=o("pretrained_model_name_or_path"),R8o=o(":"),S8o=l(),R=a("ul"),qb=a("li"),Tne=a("strong"),P8o=o("albert"),$8o=o(" \u2014 "),kD=a("a"),I8o=o("AlbertForQuestionAnswering"),D8o=o(" (ALBERT model)"),j8o=l(),Gb=a("li"),Fne=a("strong"),N8o=o("bart"),q8o=o(" \u2014 "),RD=a("a"),G8o=o("BartForQuestionAnswering"),O8o=o(" (BART model)"),X8o=l(),Ob=a("li"),Cne=a("strong"),V8o=o("bert"),z8o=o(" \u2014 "),SD=a("a"),W8o=o("BertForQuestionAnswering"),Q8o=o(" (BERT model)"),H8o=l(),Xb=a("li"),Mne=a("strong"),U8o=o("big_bird"),J8o=o(" \u2014 "),PD=a("a"),Y8o=o("BigBirdForQuestionAnswering"),K8o=o(" (BigBird model)"),Z8o=l(),Vb=a("li"),Ene=a("strong"),e9o=o("bigbird_pegasus"),o9o=o(" \u2014 "),$D=a("a"),r9o=o("BigBirdPegasusForQuestionAnswering"),t9o=o(" (BigBirdPegasus model)"),a9o=l(),zb=a("li"),yne=a("strong"),n9o=o("camembert"),s9o=o(" \u2014 "),ID=a("a"),l9o=o("CamembertForQuestionAnswering"),i9o=o(" (CamemBERT model)"),d9o=l(),Wb=a("li"),wne=a("strong"),c9o=o("canine"),f9o=o(" \u2014 "),DD=a("a"),m9o=o("CanineForQuestionAnswering"),g9o=o(" (Canine model)"),h9o=l(),Qb=a("li"),Ane=a("strong"),p9o=o("convbert"),_9o=o(" \u2014 "),jD=a("a"),u9o=o("ConvBertForQuestionAnswering"),b9o=o(" (ConvBERT model)"),v9o=l(),Hb=a("li"),Lne=a("strong"),T9o=o("data2vec-text"),F9o=o(" \u2014 "),ND=a("a"),C9o=o("Data2VecTextForQuestionAnswering"),M9o=o(" (Data2VecText model)"),E9o=l(),Ub=a("li"),Bne=a("strong"),y9o=o("deberta"),w9o=o(" \u2014 "),qD=a("a"),A9o=o("DebertaForQuestionAnswering"),L9o=o(" (DeBERTa model)"),B9o=l(),Jb=a("li"),xne=a("strong"),x9o=o("deberta-v2"),k9o=o(" \u2014 "),GD=a("a"),R9o=o("DebertaV2ForQuestionAnswering"),S9o=o(" (DeBERTa-v2 model)"),P9o=l(),Yb=a("li"),kne=a("strong"),$9o=o("distilbert"),I9o=o(" \u2014 "),OD=a("a"),D9o=o("DistilBertForQuestionAnswering"),j9o=o(" (DistilBERT model)"),N9o=l(),Kb=a("li"),Rne=a("strong"),q9o=o("electra"),G9o=o(" \u2014 "),XD=a("a"),O9o=o("ElectraForQuestionAnswering"),X9o=o(" (ELECTRA model)"),V9o=l(),Zb=a("li"),Sne=a("strong"),z9o=o("flaubert"),W9o=o(" \u2014 "),VD=a("a"),Q9o=o("FlaubertForQuestionAnsweringSimple"),H9o=o(" (FlauBERT model)"),U9o=l(),e2=a("li"),Pne=a("strong"),J9o=o("fnet"),Y9o=o(" \u2014 "),zD=a("a"),K9o=o("FNetForQuestionAnswering"),Z9o=o(" (FNet model)"),eBo=l(),o2=a("li"),$ne=a("strong"),oBo=o("funnel"),rBo=o(" \u2014 "),WD=a("a"),tBo=o("FunnelForQuestionAnswering"),aBo=o(" (Funnel Transformer model)"),nBo=l(),r2=a("li"),Ine=a("strong"),sBo=o("gptj"),lBo=o(" \u2014 "),QD=a("a"),iBo=o("GPTJForQuestionAnswering"),dBo=o(" (GPT-J model)"),cBo=l(),t2=a("li"),Dne=a("strong"),fBo=o("ibert"),mBo=o(" \u2014 "),HD=a("a"),gBo=o("IBertForQuestionAnswering"),hBo=o(" (I-BERT model)"),pBo=l(),a2=a("li"),jne=a("strong"),_Bo=o("layoutlmv2"),uBo=o(" \u2014 "),UD=a("a"),bBo=o("LayoutLMv2ForQuestionAnswering"),vBo=o(" (LayoutLMv2 model)"),TBo=l(),n2=a("li"),Nne=a("strong"),FBo=o("led"),CBo=o(" \u2014 "),JD=a("a"),MBo=o("LEDForQuestionAnswering"),EBo=o(" (LED model)"),yBo=l(),s2=a("li"),qne=a("strong"),wBo=o("longformer"),ABo=o(" \u2014 "),YD=a("a"),LBo=o("LongformerForQuestionAnswering"),BBo=o(" (Longformer model)"),xBo=l(),l2=a("li"),Gne=a("strong"),kBo=o("lxmert"),RBo=o(" \u2014 "),KD=a("a"),SBo=o("LxmertForQuestionAnswering"),PBo=o(" (LXMERT model)"),$Bo=l(),i2=a("li"),One=a("strong"),IBo=o("mbart"),DBo=o(" \u2014 "),ZD=a("a"),jBo=o("MBartForQuestionAnswering"),NBo=o(" (mBART model)"),qBo=l(),d2=a("li"),Xne=a("strong"),GBo=o("megatron-bert"),OBo=o(" \u2014 "),ej=a("a"),XBo=o("MegatronBertForQuestionAnswering"),VBo=o(" (MegatronBert model)"),zBo=l(),c2=a("li"),Vne=a("strong"),WBo=o("mobilebert"),QBo=o(" \u2014 "),oj=a("a"),HBo=o("MobileBertForQuestionAnswering"),UBo=o(" (MobileBERT model)"),JBo=l(),f2=a("li"),zne=a("strong"),YBo=o("mpnet"),KBo=o(" \u2014 "),rj=a("a"),ZBo=o("MPNetForQuestionAnswering"),exo=o(" (MPNet model)"),oxo=l(),m2=a("li"),Wne=a("strong"),rxo=o("nystromformer"),txo=o(" \u2014 "),tj=a("a"),axo=o("NystromformerForQuestionAnswering"),nxo=o(" (Nystromformer model)"),sxo=l(),g2=a("li"),Qne=a("strong"),lxo=o("qdqbert"),ixo=o(" \u2014 "),aj=a("a"),dxo=o("QDQBertForQuestionAnswering"),cxo=o(" (QDQBert model)"),fxo=l(),h2=a("li"),Hne=a("strong"),mxo=o("reformer"),gxo=o(" \u2014 "),nj=a("a"),hxo=o("ReformerForQuestionAnswering"),pxo=o(" (Reformer model)"),_xo=l(),p2=a("li"),Une=a("strong"),uxo=o("rembert"),bxo=o(" \u2014 "),sj=a("a"),vxo=o("RemBertForQuestionAnswering"),Txo=o(" (RemBERT model)"),Fxo=l(),_2=a("li"),Jne=a("strong"),Cxo=o("roberta"),Mxo=o(" \u2014 "),lj=a("a"),Exo=o("RobertaForQuestionAnswering"),yxo=o(" (RoBERTa model)"),wxo=l(),u2=a("li"),Yne=a("strong"),Axo=o("roformer"),Lxo=o(" \u2014 "),ij=a("a"),Bxo=o("RoFormerForQuestionAnswering"),xxo=o(" (RoFormer model)"),kxo=l(),b2=a("li"),Kne=a("strong"),Rxo=o("splinter"),Sxo=o(" \u2014 "),dj=a("a"),Pxo=o("SplinterForQuestionAnswering"),$xo=o(" (Splinter model)"),Ixo=l(),v2=a("li"),Zne=a("strong"),Dxo=o("squeezebert"),jxo=o(" \u2014 "),cj=a("a"),Nxo=o("SqueezeBertForQuestionAnswering"),qxo=o(" (SqueezeBERT model)"),Gxo=l(),T2=a("li"),ese=a("strong"),Oxo=o("xlm"),Xxo=o(" \u2014 "),fj=a("a"),Vxo=o("XLMForQuestionAnsweringSimple"),zxo=o(" (XLM model)"),Wxo=l(),F2=a("li"),ose=a("strong"),Qxo=o("xlm-roberta"),Hxo=o(" \u2014 "),mj=a("a"),Uxo=o("XLMRobertaForQuestionAnswering"),Jxo=o(" (XLM-RoBERTa model)"),Yxo=l(),C2=a("li"),rse=a("strong"),Kxo=o("xlm-roberta-xl"),Zxo=o(" \u2014 "),gj=a("a"),eko=o("XLMRobertaXLForQuestionAnswering"),oko=o(" (XLM-RoBERTa-XL model)"),rko=l(),M2=a("li"),tse=a("strong"),tko=o("xlnet"),ako=o(" \u2014 "),hj=a("a"),nko=o("XLNetForQuestionAnsweringSimple"),sko=o(" (XLNet model)"),lko=l(),E2=a("li"),ase=a("strong"),iko=o("yoso"),dko=o(" \u2014 "),pj=a("a"),cko=o("YosoForQuestionAnswering"),fko=o(" (YOSO model)"),mko=l(),y2=a("p"),gko=o("The model is set in evaluation mode by default using "),nse=a("code"),hko=o("model.eval()"),pko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sse=a("code"),_ko=o("model.train()"),uko=l(),lse=a("p"),bko=o("Examples:"),vko=l(),f(g3.$$.fragment),O9e=l(),bd=a("h2"),w2=a("a"),ise=a("span"),f(h3.$$.fragment),Tko=l(),dse=a("span"),Fko=o("AutoModelForTableQuestionAnswering"),X9e=l(),tr=a("div"),f(p3.$$.fragment),Cko=l(),vd=a("p"),Mko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),cse=a("code"),Eko=o("from_pretrained()"),yko=o("class method or the "),fse=a("code"),wko=o("from_config()"),Ako=o(`class
method.`),Lko=l(),_3=a("p"),Bko=o("This class cannot be instantiated directly using "),mse=a("code"),xko=o("__init__()"),kko=o(" (throws an error)."),Rko=l(),Jr=a("div"),f(u3.$$.fragment),Sko=l(),gse=a("p"),Pko=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$ko=l(),Td=a("p"),Iko=o(`Note:
Loading a model from its configuration file does `),hse=a("strong"),Dko=o("not"),jko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pse=a("code"),Nko=o("from_pretrained()"),qko=o("to load the model weights."),Gko=l(),_se=a("p"),Oko=o("Examples:"),Xko=l(),f(b3.$$.fragment),Vko=l(),Oe=a("div"),f(v3.$$.fragment),zko=l(),use=a("p"),Wko=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Qko=l(),Ua=a("p"),Hko=o("The model class to instantiate is selected based on the "),bse=a("code"),Uko=o("model_type"),Jko=o(` property of the config object (either
passed as an argument or loaded from `),vse=a("code"),Yko=o("pretrained_model_name_or_path"),Kko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tse=a("code"),Zko=o("pretrained_model_name_or_path"),eRo=o(":"),oRo=l(),Fse=a("ul"),A2=a("li"),Cse=a("strong"),rRo=o("tapas"),tRo=o(" \u2014 "),_j=a("a"),aRo=o("TapasForQuestionAnswering"),nRo=o(" (TAPAS model)"),sRo=l(),L2=a("p"),lRo=o("The model is set in evaluation mode by default using "),Mse=a("code"),iRo=o("model.eval()"),dRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ese=a("code"),cRo=o("model.train()"),fRo=l(),yse=a("p"),mRo=o("Examples:"),gRo=l(),f(T3.$$.fragment),V9e=l(),Fd=a("h2"),B2=a("a"),wse=a("span"),f(F3.$$.fragment),hRo=l(),Ase=a("span"),pRo=o("AutoModelForImageClassification"),z9e=l(),ar=a("div"),f(C3.$$.fragment),_Ro=l(),Cd=a("p"),uRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Lse=a("code"),bRo=o("from_pretrained()"),vRo=o("class method or the "),Bse=a("code"),TRo=o("from_config()"),FRo=o(`class
method.`),CRo=l(),M3=a("p"),MRo=o("This class cannot be instantiated directly using "),xse=a("code"),ERo=o("__init__()"),yRo=o(" (throws an error)."),wRo=l(),Yr=a("div"),f(E3.$$.fragment),ARo=l(),kse=a("p"),LRo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),BRo=l(),Md=a("p"),xRo=o(`Note:
Loading a model from its configuration file does `),Rse=a("strong"),kRo=o("not"),RRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sse=a("code"),SRo=o("from_pretrained()"),PRo=o("to load the model weights."),$Ro=l(),Pse=a("p"),IRo=o("Examples:"),DRo=l(),f(y3.$$.fragment),jRo=l(),Xe=a("div"),f(w3.$$.fragment),NRo=l(),$se=a("p"),qRo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GRo=l(),Ja=a("p"),ORo=o("The model class to instantiate is selected based on the "),Ise=a("code"),XRo=o("model_type"),VRo=o(` property of the config object (either
passed as an argument or loaded from `),Dse=a("code"),zRo=o("pretrained_model_name_or_path"),WRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jse=a("code"),QRo=o("pretrained_model_name_or_path"),HRo=o(":"),URo=l(),be=a("ul"),x2=a("li"),Nse=a("strong"),JRo=o("beit"),YRo=o(" \u2014 "),uj=a("a"),KRo=o("BeitForImageClassification"),ZRo=o(" (BEiT model)"),eSo=l(),k2=a("li"),qse=a("strong"),oSo=o("convnext"),rSo=o(" \u2014 "),bj=a("a"),tSo=o("ConvNextForImageClassification"),aSo=o(" (ConvNext model)"),nSo=l(),Ps=a("li"),Gse=a("strong"),sSo=o("deit"),lSo=o(" \u2014 "),vj=a("a"),iSo=o("DeiTForImageClassification"),dSo=o(" or "),Tj=a("a"),cSo=o("DeiTForImageClassificationWithTeacher"),fSo=o(" (DeiT model)"),mSo=l(),R2=a("li"),Ose=a("strong"),gSo=o("imagegpt"),hSo=o(" \u2014 "),Fj=a("a"),pSo=o("ImageGPTForImageClassification"),_So=o(" (ImageGPT model)"),uSo=l(),la=a("li"),Xse=a("strong"),bSo=o("perceiver"),vSo=o(" \u2014 "),Cj=a("a"),TSo=o("PerceiverForImageClassificationLearned"),FSo=o(" or "),Mj=a("a"),CSo=o("PerceiverForImageClassificationFourier"),MSo=o(" or "),Ej=a("a"),ESo=o("PerceiverForImageClassificationConvProcessing"),ySo=o(" (Perceiver model)"),wSo=l(),S2=a("li"),Vse=a("strong"),ASo=o("poolformer"),LSo=o(" \u2014 "),yj=a("a"),BSo=o("PoolFormerForImageClassification"),xSo=o(" (PoolFormer model)"),kSo=l(),P2=a("li"),zse=a("strong"),RSo=o("segformer"),SSo=o(" \u2014 "),wj=a("a"),PSo=o("SegformerForImageClassification"),$So=o(" (SegFormer model)"),ISo=l(),$2=a("li"),Wse=a("strong"),DSo=o("swin"),jSo=o(" \u2014 "),Aj=a("a"),NSo=o("SwinForImageClassification"),qSo=o(" (Swin model)"),GSo=l(),I2=a("li"),Qse=a("strong"),OSo=o("vit"),XSo=o(" \u2014 "),Lj=a("a"),VSo=o("ViTForImageClassification"),zSo=o(" (ViT model)"),WSo=l(),D2=a("p"),QSo=o("The model is set in evaluation mode by default using "),Hse=a("code"),HSo=o("model.eval()"),USo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Use=a("code"),JSo=o("model.train()"),YSo=l(),Jse=a("p"),KSo=o("Examples:"),ZSo=l(),f(A3.$$.fragment),W9e=l(),Ed=a("h2"),j2=a("a"),Yse=a("span"),f(L3.$$.fragment),ePo=l(),Kse=a("span"),oPo=o("AutoModelForVision2Seq"),Q9e=l(),nr=a("div"),f(B3.$$.fragment),rPo=l(),yd=a("p"),tPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Zse=a("code"),aPo=o("from_pretrained()"),nPo=o("class method or the "),ele=a("code"),sPo=o("from_config()"),lPo=o(`class
method.`),iPo=l(),x3=a("p"),dPo=o("This class cannot be instantiated directly using "),ole=a("code"),cPo=o("__init__()"),fPo=o(" (throws an error)."),mPo=l(),Kr=a("div"),f(k3.$$.fragment),gPo=l(),rle=a("p"),hPo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pPo=l(),wd=a("p"),_Po=o(`Note:
Loading a model from its configuration file does `),tle=a("strong"),uPo=o("not"),bPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ale=a("code"),vPo=o("from_pretrained()"),TPo=o("to load the model weights."),FPo=l(),nle=a("p"),CPo=o("Examples:"),MPo=l(),f(R3.$$.fragment),EPo=l(),Ve=a("div"),f(S3.$$.fragment),yPo=l(),sle=a("p"),wPo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),APo=l(),Ya=a("p"),LPo=o("The model class to instantiate is selected based on the "),lle=a("code"),BPo=o("model_type"),xPo=o(` property of the config object (either
passed as an argument or loaded from `),ile=a("code"),kPo=o("pretrained_model_name_or_path"),RPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dle=a("code"),SPo=o("pretrained_model_name_or_path"),PPo=o(":"),$Po=l(),cle=a("ul"),N2=a("li"),fle=a("strong"),IPo=o("vision-encoder-decoder"),DPo=o(" \u2014 "),Bj=a("a"),jPo=o("VisionEncoderDecoderModel"),NPo=o(" (Vision Encoder decoder model)"),qPo=l(),q2=a("p"),GPo=o("The model is set in evaluation mode by default using "),mle=a("code"),OPo=o("model.eval()"),XPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gle=a("code"),VPo=o("model.train()"),zPo=l(),hle=a("p"),WPo=o("Examples:"),QPo=l(),f(P3.$$.fragment),H9e=l(),Ad=a("h2"),G2=a("a"),ple=a("span"),f($3.$$.fragment),HPo=l(),_le=a("span"),UPo=o("AutoModelForAudioClassification"),U9e=l(),sr=a("div"),f(I3.$$.fragment),JPo=l(),Ld=a("p"),YPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),ule=a("code"),KPo=o("from_pretrained()"),ZPo=o("class method or the "),ble=a("code"),e$o=o("from_config()"),o$o=o(`class
method.`),r$o=l(),D3=a("p"),t$o=o("This class cannot be instantiated directly using "),vle=a("code"),a$o=o("__init__()"),n$o=o(" (throws an error)."),s$o=l(),Zr=a("div"),f(j3.$$.fragment),l$o=l(),Tle=a("p"),i$o=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),d$o=l(),Bd=a("p"),c$o=o(`Note:
Loading a model from its configuration file does `),Fle=a("strong"),f$o=o("not"),m$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cle=a("code"),g$o=o("from_pretrained()"),h$o=o("to load the model weights."),p$o=l(),Mle=a("p"),_$o=o("Examples:"),u$o=l(),f(N3.$$.fragment),b$o=l(),ze=a("div"),f(q3.$$.fragment),v$o=l(),Ele=a("p"),T$o=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),F$o=l(),Ka=a("p"),C$o=o("The model class to instantiate is selected based on the "),yle=a("code"),M$o=o("model_type"),E$o=o(` property of the config object (either
passed as an argument or loaded from `),wle=a("code"),y$o=o("pretrained_model_name_or_path"),w$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ale=a("code"),A$o=o("pretrained_model_name_or_path"),L$o=o(":"),B$o=l(),Ae=a("ul"),O2=a("li"),Lle=a("strong"),x$o=o("data2vec-audio"),k$o=o(" \u2014 "),xj=a("a"),R$o=o("Data2VecAudioForSequenceClassification"),S$o=o(" (Data2VecAudio model)"),P$o=l(),X2=a("li"),Ble=a("strong"),$$o=o("hubert"),I$o=o(" \u2014 "),kj=a("a"),D$o=o("HubertForSequenceClassification"),j$o=o(" (Hubert model)"),N$o=l(),V2=a("li"),xle=a("strong"),q$o=o("sew"),G$o=o(" \u2014 "),Rj=a("a"),O$o=o("SEWForSequenceClassification"),X$o=o(" (SEW model)"),V$o=l(),z2=a("li"),kle=a("strong"),z$o=o("sew-d"),W$o=o(" \u2014 "),Sj=a("a"),Q$o=o("SEWDForSequenceClassification"),H$o=o(" (SEW-D model)"),U$o=l(),W2=a("li"),Rle=a("strong"),J$o=o("unispeech"),Y$o=o(" \u2014 "),Pj=a("a"),K$o=o("UniSpeechForSequenceClassification"),Z$o=o(" (UniSpeech model)"),eIo=l(),Q2=a("li"),Sle=a("strong"),oIo=o("unispeech-sat"),rIo=o(" \u2014 "),$j=a("a"),tIo=o("UniSpeechSatForSequenceClassification"),aIo=o(" (UniSpeechSat model)"),nIo=l(),H2=a("li"),Ple=a("strong"),sIo=o("wav2vec2"),lIo=o(" \u2014 "),Ij=a("a"),iIo=o("Wav2Vec2ForSequenceClassification"),dIo=o(" (Wav2Vec2 model)"),cIo=l(),U2=a("li"),$le=a("strong"),fIo=o("wavlm"),mIo=o(" \u2014 "),Dj=a("a"),gIo=o("WavLMForSequenceClassification"),hIo=o(" (WavLM model)"),pIo=l(),J2=a("p"),_Io=o("The model is set in evaluation mode by default using "),Ile=a("code"),uIo=o("model.eval()"),bIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dle=a("code"),vIo=o("model.train()"),TIo=l(),jle=a("p"),FIo=o("Examples:"),CIo=l(),f(G3.$$.fragment),J9e=l(),xd=a("h2"),Y2=a("a"),Nle=a("span"),f(O3.$$.fragment),MIo=l(),qle=a("span"),EIo=o("AutoModelForAudioFrameClassification"),Y9e=l(),lr=a("div"),f(X3.$$.fragment),yIo=l(),kd=a("p"),wIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Gle=a("code"),AIo=o("from_pretrained()"),LIo=o("class method or the "),Ole=a("code"),BIo=o("from_config()"),xIo=o(`class
method.`),kIo=l(),V3=a("p"),RIo=o("This class cannot be instantiated directly using "),Xle=a("code"),SIo=o("__init__()"),PIo=o(" (throws an error)."),$Io=l(),et=a("div"),f(z3.$$.fragment),IIo=l(),Vle=a("p"),DIo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),jIo=l(),Rd=a("p"),NIo=o(`Note:
Loading a model from its configuration file does `),zle=a("strong"),qIo=o("not"),GIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wle=a("code"),OIo=o("from_pretrained()"),XIo=o("to load the model weights."),VIo=l(),Qle=a("p"),zIo=o("Examples:"),WIo=l(),f(W3.$$.fragment),QIo=l(),We=a("div"),f(Q3.$$.fragment),HIo=l(),Hle=a("p"),UIo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),JIo=l(),Za=a("p"),YIo=o("The model class to instantiate is selected based on the "),Ule=a("code"),KIo=o("model_type"),ZIo=o(` property of the config object (either
passed as an argument or loaded from `),Jle=a("code"),eDo=o("pretrained_model_name_or_path"),oDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yle=a("code"),rDo=o("pretrained_model_name_or_path"),tDo=o(":"),aDo=l(),en=a("ul"),K2=a("li"),Kle=a("strong"),nDo=o("data2vec-audio"),sDo=o(" \u2014 "),jj=a("a"),lDo=o("Data2VecAudioForAudioFrameClassification"),iDo=o(" (Data2VecAudio model)"),dDo=l(),Z2=a("li"),Zle=a("strong"),cDo=o("unispeech-sat"),fDo=o(" \u2014 "),Nj=a("a"),mDo=o("UniSpeechSatForAudioFrameClassification"),gDo=o(" (UniSpeechSat model)"),hDo=l(),ev=a("li"),eie=a("strong"),pDo=o("wav2vec2"),_Do=o(" \u2014 "),qj=a("a"),uDo=o("Wav2Vec2ForAudioFrameClassification"),bDo=o(" (Wav2Vec2 model)"),vDo=l(),ov=a("li"),oie=a("strong"),TDo=o("wavlm"),FDo=o(" \u2014 "),Gj=a("a"),CDo=o("WavLMForAudioFrameClassification"),MDo=o(" (WavLM model)"),EDo=l(),rv=a("p"),yDo=o("The model is set in evaluation mode by default using "),rie=a("code"),wDo=o("model.eval()"),ADo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tie=a("code"),LDo=o("model.train()"),BDo=l(),aie=a("p"),xDo=o("Examples:"),kDo=l(),f(H3.$$.fragment),K9e=l(),Sd=a("h2"),tv=a("a"),nie=a("span"),f(U3.$$.fragment),RDo=l(),sie=a("span"),SDo=o("AutoModelForCTC"),Z9e=l(),ir=a("div"),f(J3.$$.fragment),PDo=l(),Pd=a("p"),$Do=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),lie=a("code"),IDo=o("from_pretrained()"),DDo=o("class method or the "),iie=a("code"),jDo=o("from_config()"),NDo=o(`class
method.`),qDo=l(),Y3=a("p"),GDo=o("This class cannot be instantiated directly using "),die=a("code"),ODo=o("__init__()"),XDo=o(" (throws an error)."),VDo=l(),ot=a("div"),f(K3.$$.fragment),zDo=l(),cie=a("p"),WDo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),QDo=l(),$d=a("p"),HDo=o(`Note:
Loading a model from its configuration file does `),fie=a("strong"),UDo=o("not"),JDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mie=a("code"),YDo=o("from_pretrained()"),KDo=o("to load the model weights."),ZDo=l(),gie=a("p"),ejo=o("Examples:"),ojo=l(),f(Z3.$$.fragment),rjo=l(),Qe=a("div"),f(ey.$$.fragment),tjo=l(),hie=a("p"),ajo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),njo=l(),on=a("p"),sjo=o("The model class to instantiate is selected based on the "),pie=a("code"),ljo=o("model_type"),ijo=o(` property of the config object (either
passed as an argument or loaded from `),_ie=a("code"),djo=o("pretrained_model_name_or_path"),cjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uie=a("code"),fjo=o("pretrained_model_name_or_path"),mjo=o(":"),gjo=l(),Le=a("ul"),av=a("li"),bie=a("strong"),hjo=o("data2vec-audio"),pjo=o(" \u2014 "),Oj=a("a"),_jo=o("Data2VecAudioForCTC"),ujo=o(" (Data2VecAudio model)"),bjo=l(),nv=a("li"),vie=a("strong"),vjo=o("hubert"),Tjo=o(" \u2014 "),Xj=a("a"),Fjo=o("HubertForCTC"),Cjo=o(" (Hubert model)"),Mjo=l(),sv=a("li"),Tie=a("strong"),Ejo=o("sew"),yjo=o(" \u2014 "),Vj=a("a"),wjo=o("SEWForCTC"),Ajo=o(" (SEW model)"),Ljo=l(),lv=a("li"),Fie=a("strong"),Bjo=o("sew-d"),xjo=o(" \u2014 "),zj=a("a"),kjo=o("SEWDForCTC"),Rjo=o(" (SEW-D model)"),Sjo=l(),iv=a("li"),Cie=a("strong"),Pjo=o("unispeech"),$jo=o(" \u2014 "),Wj=a("a"),Ijo=o("UniSpeechForCTC"),Djo=o(" (UniSpeech model)"),jjo=l(),dv=a("li"),Mie=a("strong"),Njo=o("unispeech-sat"),qjo=o(" \u2014 "),Qj=a("a"),Gjo=o("UniSpeechSatForCTC"),Ojo=o(" (UniSpeechSat model)"),Xjo=l(),cv=a("li"),Eie=a("strong"),Vjo=o("wav2vec2"),zjo=o(" \u2014 "),Hj=a("a"),Wjo=o("Wav2Vec2ForCTC"),Qjo=o(" (Wav2Vec2 model)"),Hjo=l(),fv=a("li"),yie=a("strong"),Ujo=o("wavlm"),Jjo=o(" \u2014 "),Uj=a("a"),Yjo=o("WavLMForCTC"),Kjo=o(" (WavLM model)"),Zjo=l(),mv=a("p"),eNo=o("The model is set in evaluation mode by default using "),wie=a("code"),oNo=o("model.eval()"),rNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aie=a("code"),tNo=o("model.train()"),aNo=l(),Lie=a("p"),nNo=o("Examples:"),sNo=l(),f(oy.$$.fragment),eBe=l(),Id=a("h2"),gv=a("a"),Bie=a("span"),f(ry.$$.fragment),lNo=l(),xie=a("span"),iNo=o("AutoModelForSpeechSeq2Seq"),oBe=l(),dr=a("div"),f(ty.$$.fragment),dNo=l(),Dd=a("p"),cNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kie=a("code"),fNo=o("from_pretrained()"),mNo=o("class method or the "),Rie=a("code"),gNo=o("from_config()"),hNo=o(`class
method.`),pNo=l(),ay=a("p"),_No=o("This class cannot be instantiated directly using "),Sie=a("code"),uNo=o("__init__()"),bNo=o(" (throws an error)."),vNo=l(),rt=a("div"),f(ny.$$.fragment),TNo=l(),Pie=a("p"),FNo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),CNo=l(),jd=a("p"),MNo=o(`Note:
Loading a model from its configuration file does `),$ie=a("strong"),ENo=o("not"),yNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iie=a("code"),wNo=o("from_pretrained()"),ANo=o("to load the model weights."),LNo=l(),Die=a("p"),BNo=o("Examples:"),xNo=l(),f(sy.$$.fragment),kNo=l(),He=a("div"),f(ly.$$.fragment),RNo=l(),jie=a("p"),SNo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),PNo=l(),rn=a("p"),$No=o("The model class to instantiate is selected based on the "),Nie=a("code"),INo=o("model_type"),DNo=o(` property of the config object (either
passed as an argument or loaded from `),qie=a("code"),jNo=o("pretrained_model_name_or_path"),NNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gie=a("code"),qNo=o("pretrained_model_name_or_path"),GNo=o(":"),ONo=l(),iy=a("ul"),hv=a("li"),Oie=a("strong"),XNo=o("speech-encoder-decoder"),VNo=o(" \u2014 "),Jj=a("a"),zNo=o("SpeechEncoderDecoderModel"),WNo=o(" (Speech Encoder decoder model)"),QNo=l(),pv=a("li"),Xie=a("strong"),HNo=o("speech_to_text"),UNo=o(" \u2014 "),Yj=a("a"),JNo=o("Speech2TextForConditionalGeneration"),YNo=o(" (Speech2Text model)"),KNo=l(),_v=a("p"),ZNo=o("The model is set in evaluation mode by default using "),Vie=a("code"),eqo=o("model.eval()"),oqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zie=a("code"),rqo=o("model.train()"),tqo=l(),Wie=a("p"),aqo=o("Examples:"),nqo=l(),f(dy.$$.fragment),rBe=l(),Nd=a("h2"),uv=a("a"),Qie=a("span"),f(cy.$$.fragment),sqo=l(),Hie=a("span"),lqo=o("AutoModelForAudioXVector"),tBe=l(),cr=a("div"),f(fy.$$.fragment),iqo=l(),qd=a("p"),dqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Uie=a("code"),cqo=o("from_pretrained()"),fqo=o("class method or the "),Jie=a("code"),mqo=o("from_config()"),gqo=o(`class
method.`),hqo=l(),my=a("p"),pqo=o("This class cannot be instantiated directly using "),Yie=a("code"),_qo=o("__init__()"),uqo=o(" (throws an error)."),bqo=l(),tt=a("div"),f(gy.$$.fragment),vqo=l(),Kie=a("p"),Tqo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Fqo=l(),Gd=a("p"),Cqo=o(`Note:
Loading a model from its configuration file does `),Zie=a("strong"),Mqo=o("not"),Eqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ede=a("code"),yqo=o("from_pretrained()"),wqo=o("to load the model weights."),Aqo=l(),ode=a("p"),Lqo=o("Examples:"),Bqo=l(),f(hy.$$.fragment),xqo=l(),Ue=a("div"),f(py.$$.fragment),kqo=l(),rde=a("p"),Rqo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Sqo=l(),tn=a("p"),Pqo=o("The model class to instantiate is selected based on the "),tde=a("code"),$qo=o("model_type"),Iqo=o(` property of the config object (either
passed as an argument or loaded from `),ade=a("code"),Dqo=o("pretrained_model_name_or_path"),jqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nde=a("code"),Nqo=o("pretrained_model_name_or_path"),qqo=o(":"),Gqo=l(),an=a("ul"),bv=a("li"),sde=a("strong"),Oqo=o("data2vec-audio"),Xqo=o(" \u2014 "),Kj=a("a"),Vqo=o("Data2VecAudioForXVector"),zqo=o(" (Data2VecAudio model)"),Wqo=l(),vv=a("li"),lde=a("strong"),Qqo=o("unispeech-sat"),Hqo=o(" \u2014 "),Zj=a("a"),Uqo=o("UniSpeechSatForXVector"),Jqo=o(" (UniSpeechSat model)"),Yqo=l(),Tv=a("li"),ide=a("strong"),Kqo=o("wav2vec2"),Zqo=o(" \u2014 "),eN=a("a"),eGo=o("Wav2Vec2ForXVector"),oGo=o(" (Wav2Vec2 model)"),rGo=l(),Fv=a("li"),dde=a("strong"),tGo=o("wavlm"),aGo=o(" \u2014 "),oN=a("a"),nGo=o("WavLMForXVector"),sGo=o(" (WavLM model)"),lGo=l(),Cv=a("p"),iGo=o("The model is set in evaluation mode by default using "),cde=a("code"),dGo=o("model.eval()"),cGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=a("code"),fGo=o("model.train()"),mGo=l(),mde=a("p"),gGo=o("Examples:"),hGo=l(),f(_y.$$.fragment),aBe=l(),Od=a("h2"),Mv=a("a"),gde=a("span"),f(uy.$$.fragment),pGo=l(),hde=a("span"),_Go=o("AutoModelForMaskedImageModeling"),nBe=l(),fr=a("div"),f(by.$$.fragment),uGo=l(),Xd=a("p"),bGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),pde=a("code"),vGo=o("from_pretrained()"),TGo=o("class method or the "),_de=a("code"),FGo=o("from_config()"),CGo=o(`class
method.`),MGo=l(),vy=a("p"),EGo=o("This class cannot be instantiated directly using "),ude=a("code"),yGo=o("__init__()"),wGo=o(" (throws an error)."),AGo=l(),at=a("div"),f(Ty.$$.fragment),LGo=l(),bde=a("p"),BGo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),xGo=l(),Vd=a("p"),kGo=o(`Note:
Loading a model from its configuration file does `),vde=a("strong"),RGo=o("not"),SGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tde=a("code"),PGo=o("from_pretrained()"),$Go=o("to load the model weights."),IGo=l(),Fde=a("p"),DGo=o("Examples:"),jGo=l(),f(Fy.$$.fragment),NGo=l(),Je=a("div"),f(Cy.$$.fragment),qGo=l(),Cde=a("p"),GGo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),OGo=l(),nn=a("p"),XGo=o("The model class to instantiate is selected based on the "),Mde=a("code"),VGo=o("model_type"),zGo=o(` property of the config object (either
passed as an argument or loaded from `),Ede=a("code"),WGo=o("pretrained_model_name_or_path"),QGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=a("code"),HGo=o("pretrained_model_name_or_path"),UGo=o(":"),JGo=l(),zd=a("ul"),Ev=a("li"),wde=a("strong"),YGo=o("deit"),KGo=o(" \u2014 "),rN=a("a"),ZGo=o("DeiTForMaskedImageModeling"),eOo=o(" (DeiT model)"),oOo=l(),yv=a("li"),Ade=a("strong"),rOo=o("swin"),tOo=o(" \u2014 "),tN=a("a"),aOo=o("SwinForMaskedImageModeling"),nOo=o(" (Swin model)"),sOo=l(),wv=a("li"),Lde=a("strong"),lOo=o("vit"),iOo=o(" \u2014 "),aN=a("a"),dOo=o("ViTForMaskedImageModeling"),cOo=o(" (ViT model)"),fOo=l(),Av=a("p"),mOo=o("The model is set in evaluation mode by default using "),Bde=a("code"),gOo=o("model.eval()"),hOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xde=a("code"),pOo=o("model.train()"),_Oo=l(),kde=a("p"),uOo=o("Examples:"),bOo=l(),f(My.$$.fragment),sBe=l(),Wd=a("h2"),Lv=a("a"),Rde=a("span"),f(Ey.$$.fragment),vOo=l(),Sde=a("span"),TOo=o("AutoModelForObjectDetection"),lBe=l(),mr=a("div"),f(yy.$$.fragment),FOo=l(),Qd=a("p"),COo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Pde=a("code"),MOo=o("from_pretrained()"),EOo=o("class method or the "),$de=a("code"),yOo=o("from_config()"),wOo=o(`class
method.`),AOo=l(),wy=a("p"),LOo=o("This class cannot be instantiated directly using "),Ide=a("code"),BOo=o("__init__()"),xOo=o(" (throws an error)."),kOo=l(),nt=a("div"),f(Ay.$$.fragment),ROo=l(),Dde=a("p"),SOo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),POo=l(),Hd=a("p"),$Oo=o(`Note:
Loading a model from its configuration file does `),jde=a("strong"),IOo=o("not"),DOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nde=a("code"),jOo=o("from_pretrained()"),NOo=o("to load the model weights."),qOo=l(),qde=a("p"),GOo=o("Examples:"),OOo=l(),f(Ly.$$.fragment),XOo=l(),Ye=a("div"),f(By.$$.fragment),VOo=l(),Gde=a("p"),zOo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),WOo=l(),sn=a("p"),QOo=o("The model class to instantiate is selected based on the "),Ode=a("code"),HOo=o("model_type"),UOo=o(` property of the config object (either
passed as an argument or loaded from `),Xde=a("code"),JOo=o("pretrained_model_name_or_path"),YOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vde=a("code"),KOo=o("pretrained_model_name_or_path"),ZOo=o(":"),eXo=l(),zde=a("ul"),Bv=a("li"),Wde=a("strong"),oXo=o("detr"),rXo=o(" \u2014 "),nN=a("a"),tXo=o("DetrForObjectDetection"),aXo=o(" (DETR model)"),nXo=l(),xv=a("p"),sXo=o("The model is set in evaluation mode by default using "),Qde=a("code"),lXo=o("model.eval()"),iXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hde=a("code"),dXo=o("model.train()"),cXo=l(),Ude=a("p"),fXo=o("Examples:"),mXo=l(),f(xy.$$.fragment),iBe=l(),Ud=a("h2"),kv=a("a"),Jde=a("span"),f(ky.$$.fragment),gXo=l(),Yde=a("span"),hXo=o("AutoModelForImageSegmentation"),dBe=l(),gr=a("div"),f(Ry.$$.fragment),pXo=l(),Jd=a("p"),_Xo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Kde=a("code"),uXo=o("from_pretrained()"),bXo=o("class method or the "),Zde=a("code"),vXo=o("from_config()"),TXo=o(`class
method.`),FXo=l(),Sy=a("p"),CXo=o("This class cannot be instantiated directly using "),ece=a("code"),MXo=o("__init__()"),EXo=o(" (throws an error)."),yXo=l(),st=a("div"),f(Py.$$.fragment),wXo=l(),oce=a("p"),AXo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),LXo=l(),Yd=a("p"),BXo=o(`Note:
Loading a model from its configuration file does `),rce=a("strong"),xXo=o("not"),kXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tce=a("code"),RXo=o("from_pretrained()"),SXo=o("to load the model weights."),PXo=l(),ace=a("p"),$Xo=o("Examples:"),IXo=l(),f($y.$$.fragment),DXo=l(),Ke=a("div"),f(Iy.$$.fragment),jXo=l(),nce=a("p"),NXo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),qXo=l(),ln=a("p"),GXo=o("The model class to instantiate is selected based on the "),sce=a("code"),OXo=o("model_type"),XXo=o(` property of the config object (either
passed as an argument or loaded from `),lce=a("code"),VXo=o("pretrained_model_name_or_path"),zXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=a("code"),WXo=o("pretrained_model_name_or_path"),QXo=o(":"),HXo=l(),dce=a("ul"),Rv=a("li"),cce=a("strong"),UXo=o("detr"),JXo=o(" \u2014 "),sN=a("a"),YXo=o("DetrForSegmentation"),KXo=o(" (DETR model)"),ZXo=l(),Sv=a("p"),eVo=o("The model is set in evaluation mode by default using "),fce=a("code"),oVo=o("model.eval()"),rVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mce=a("code"),tVo=o("model.train()"),aVo=l(),gce=a("p"),nVo=o("Examples:"),sVo=l(),f(Dy.$$.fragment),cBe=l(),Kd=a("h2"),Pv=a("a"),hce=a("span"),f(jy.$$.fragment),lVo=l(),pce=a("span"),iVo=o("AutoModelForSemanticSegmentation"),fBe=l(),hr=a("div"),f(Ny.$$.fragment),dVo=l(),Zd=a("p"),cVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),_ce=a("code"),fVo=o("from_pretrained()"),mVo=o("class method or the "),uce=a("code"),gVo=o("from_config()"),hVo=o(`class
method.`),pVo=l(),qy=a("p"),_Vo=o("This class cannot be instantiated directly using "),bce=a("code"),uVo=o("__init__()"),bVo=o(" (throws an error)."),vVo=l(),lt=a("div"),f(Gy.$$.fragment),TVo=l(),vce=a("p"),FVo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),CVo=l(),ec=a("p"),MVo=o(`Note:
Loading a model from its configuration file does `),Tce=a("strong"),EVo=o("not"),yVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fce=a("code"),wVo=o("from_pretrained()"),AVo=o("to load the model weights."),LVo=l(),Cce=a("p"),BVo=o("Examples:"),xVo=l(),f(Oy.$$.fragment),kVo=l(),Ze=a("div"),f(Xy.$$.fragment),RVo=l(),Mce=a("p"),SVo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),PVo=l(),dn=a("p"),$Vo=o("The model class to instantiate is selected based on the "),Ece=a("code"),IVo=o("model_type"),DVo=o(` property of the config object (either
passed as an argument or loaded from `),yce=a("code"),jVo=o("pretrained_model_name_or_path"),NVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wce=a("code"),qVo=o("pretrained_model_name_or_path"),GVo=o(":"),OVo=l(),Vy=a("ul"),$v=a("li"),Ace=a("strong"),XVo=o("beit"),VVo=o(" \u2014 "),lN=a("a"),zVo=o("BeitForSemanticSegmentation"),WVo=o(" (BEiT model)"),QVo=l(),Iv=a("li"),Lce=a("strong"),HVo=o("segformer"),UVo=o(" \u2014 "),iN=a("a"),JVo=o("SegformerForSemanticSegmentation"),YVo=o(" (SegFormer model)"),KVo=l(),Dv=a("p"),ZVo=o("The model is set in evaluation mode by default using "),Bce=a("code"),ezo=o("model.eval()"),ozo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xce=a("code"),rzo=o("model.train()"),tzo=l(),kce=a("p"),azo=o("Examples:"),nzo=l(),f(zy.$$.fragment),mBe=l(),oc=a("h2"),jv=a("a"),Rce=a("span"),f(Wy.$$.fragment),szo=l(),Sce=a("span"),lzo=o("TFAutoModel"),gBe=l(),pr=a("div"),f(Qy.$$.fragment),izo=l(),rc=a("p"),dzo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Pce=a("code"),czo=o("from_pretrained()"),fzo=o("class method or the "),$ce=a("code"),mzo=o("from_config()"),gzo=o(`class
method.`),hzo=l(),Hy=a("p"),pzo=o("This class cannot be instantiated directly using "),Ice=a("code"),_zo=o("__init__()"),uzo=o(" (throws an error)."),bzo=l(),it=a("div"),f(Uy.$$.fragment),vzo=l(),Dce=a("p"),Tzo=o("Instantiates one of the base model classes of the library from a configuration."),Fzo=l(),tc=a("p"),Czo=o(`Note:
Loading a model from its configuration file does `),jce=a("strong"),Mzo=o("not"),Ezo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nce=a("code"),yzo=o("from_pretrained()"),wzo=o("to load the model weights."),Azo=l(),qce=a("p"),Lzo=o("Examples:"),Bzo=l(),f(Jy.$$.fragment),xzo=l(),go=a("div"),f(Yy.$$.fragment),kzo=l(),Gce=a("p"),Rzo=o("Instantiate one of the base model classes of the library from a pretrained model."),Szo=l(),cn=a("p"),Pzo=o("The model class to instantiate is selected based on the "),Oce=a("code"),$zo=o("model_type"),Izo=o(` property of the config object (either
passed as an argument or loaded from `),Xce=a("code"),Dzo=o("pretrained_model_name_or_path"),jzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=a("code"),Nzo=o("pretrained_model_name_or_path"),qzo=o(":"),Gzo=l(),B=a("ul"),Nv=a("li"),zce=a("strong"),Ozo=o("albert"),Xzo=o(" \u2014 "),dN=a("a"),Vzo=o("TFAlbertModel"),zzo=o(" (ALBERT model)"),Wzo=l(),qv=a("li"),Wce=a("strong"),Qzo=o("bart"),Hzo=o(" \u2014 "),cN=a("a"),Uzo=o("TFBartModel"),Jzo=o(" (BART model)"),Yzo=l(),Gv=a("li"),Qce=a("strong"),Kzo=o("bert"),Zzo=o(" \u2014 "),fN=a("a"),eWo=o("TFBertModel"),oWo=o(" (BERT model)"),rWo=l(),Ov=a("li"),Hce=a("strong"),tWo=o("blenderbot"),aWo=o(" \u2014 "),mN=a("a"),nWo=o("TFBlenderbotModel"),sWo=o(" (Blenderbot model)"),lWo=l(),Xv=a("li"),Uce=a("strong"),iWo=o("blenderbot-small"),dWo=o(" \u2014 "),gN=a("a"),cWo=o("TFBlenderbotSmallModel"),fWo=o(" (BlenderbotSmall model)"),mWo=l(),Vv=a("li"),Jce=a("strong"),gWo=o("camembert"),hWo=o(" \u2014 "),hN=a("a"),pWo=o("TFCamembertModel"),_Wo=o(" (CamemBERT model)"),uWo=l(),zv=a("li"),Yce=a("strong"),bWo=o("clip"),vWo=o(" \u2014 "),pN=a("a"),TWo=o("TFCLIPModel"),FWo=o(" (CLIP model)"),CWo=l(),Wv=a("li"),Kce=a("strong"),MWo=o("convbert"),EWo=o(" \u2014 "),_N=a("a"),yWo=o("TFConvBertModel"),wWo=o(" (ConvBERT model)"),AWo=l(),Qv=a("li"),Zce=a("strong"),LWo=o("ctrl"),BWo=o(" \u2014 "),uN=a("a"),xWo=o("TFCTRLModel"),kWo=o(" (CTRL model)"),RWo=l(),Hv=a("li"),efe=a("strong"),SWo=o("deberta"),PWo=o(" \u2014 "),bN=a("a"),$Wo=o("TFDebertaModel"),IWo=o(" (DeBERTa model)"),DWo=l(),Uv=a("li"),ofe=a("strong"),jWo=o("deberta-v2"),NWo=o(" \u2014 "),vN=a("a"),qWo=o("TFDebertaV2Model"),GWo=o(" (DeBERTa-v2 model)"),OWo=l(),Jv=a("li"),rfe=a("strong"),XWo=o("distilbert"),VWo=o(" \u2014 "),TN=a("a"),zWo=o("TFDistilBertModel"),WWo=o(" (DistilBERT model)"),QWo=l(),Yv=a("li"),tfe=a("strong"),HWo=o("dpr"),UWo=o(" \u2014 "),FN=a("a"),JWo=o("TFDPRQuestionEncoder"),YWo=o(" (DPR model)"),KWo=l(),Kv=a("li"),afe=a("strong"),ZWo=o("electra"),eQo=o(" \u2014 "),CN=a("a"),oQo=o("TFElectraModel"),rQo=o(" (ELECTRA model)"),tQo=l(),Zv=a("li"),nfe=a("strong"),aQo=o("flaubert"),nQo=o(" \u2014 "),MN=a("a"),sQo=o("TFFlaubertModel"),lQo=o(" (FlauBERT model)"),iQo=l(),$s=a("li"),sfe=a("strong"),dQo=o("funnel"),cQo=o(" \u2014 "),EN=a("a"),fQo=o("TFFunnelModel"),mQo=o(" or "),yN=a("a"),gQo=o("TFFunnelBaseModel"),hQo=o(" (Funnel Transformer model)"),pQo=l(),e0=a("li"),lfe=a("strong"),_Qo=o("gpt2"),uQo=o(" \u2014 "),wN=a("a"),bQo=o("TFGPT2Model"),vQo=o(" (OpenAI GPT-2 model)"),TQo=l(),o0=a("li"),ife=a("strong"),FQo=o("hubert"),CQo=o(" \u2014 "),AN=a("a"),MQo=o("TFHubertModel"),EQo=o(" (Hubert model)"),yQo=l(),r0=a("li"),dfe=a("strong"),wQo=o("layoutlm"),AQo=o(" \u2014 "),LN=a("a"),LQo=o("TFLayoutLMModel"),BQo=o(" (LayoutLM model)"),xQo=l(),t0=a("li"),cfe=a("strong"),kQo=o("led"),RQo=o(" \u2014 "),BN=a("a"),SQo=o("TFLEDModel"),PQo=o(" (LED model)"),$Qo=l(),a0=a("li"),ffe=a("strong"),IQo=o("longformer"),DQo=o(" \u2014 "),xN=a("a"),jQo=o("TFLongformerModel"),NQo=o(" (Longformer model)"),qQo=l(),n0=a("li"),mfe=a("strong"),GQo=o("lxmert"),OQo=o(" \u2014 "),kN=a("a"),XQo=o("TFLxmertModel"),VQo=o(" (LXMERT model)"),zQo=l(),s0=a("li"),gfe=a("strong"),WQo=o("marian"),QQo=o(" \u2014 "),RN=a("a"),HQo=o("TFMarianModel"),UQo=o(" (Marian model)"),JQo=l(),l0=a("li"),hfe=a("strong"),YQo=o("mbart"),KQo=o(" \u2014 "),SN=a("a"),ZQo=o("TFMBartModel"),eHo=o(" (mBART model)"),oHo=l(),i0=a("li"),pfe=a("strong"),rHo=o("mobilebert"),tHo=o(" \u2014 "),PN=a("a"),aHo=o("TFMobileBertModel"),nHo=o(" (MobileBERT model)"),sHo=l(),d0=a("li"),_fe=a("strong"),lHo=o("mpnet"),iHo=o(" \u2014 "),$N=a("a"),dHo=o("TFMPNetModel"),cHo=o(" (MPNet model)"),fHo=l(),c0=a("li"),ufe=a("strong"),mHo=o("mt5"),gHo=o(" \u2014 "),IN=a("a"),hHo=o("TFMT5Model"),pHo=o(" (mT5 model)"),_Ho=l(),f0=a("li"),bfe=a("strong"),uHo=o("openai-gpt"),bHo=o(" \u2014 "),DN=a("a"),vHo=o("TFOpenAIGPTModel"),THo=o(" (OpenAI GPT model)"),FHo=l(),m0=a("li"),vfe=a("strong"),CHo=o("pegasus"),MHo=o(" \u2014 "),jN=a("a"),EHo=o("TFPegasusModel"),yHo=o(" (Pegasus model)"),wHo=l(),g0=a("li"),Tfe=a("strong"),AHo=o("rembert"),LHo=o(" \u2014 "),NN=a("a"),BHo=o("TFRemBertModel"),xHo=o(" (RemBERT model)"),kHo=l(),h0=a("li"),Ffe=a("strong"),RHo=o("roberta"),SHo=o(" \u2014 "),qN=a("a"),PHo=o("TFRobertaModel"),$Ho=o(" (RoBERTa model)"),IHo=l(),p0=a("li"),Cfe=a("strong"),DHo=o("roformer"),jHo=o(" \u2014 "),GN=a("a"),NHo=o("TFRoFormerModel"),qHo=o(" (RoFormer model)"),GHo=l(),_0=a("li"),Mfe=a("strong"),OHo=o("speech_to_text"),XHo=o(" \u2014 "),ON=a("a"),VHo=o("TFSpeech2TextModel"),zHo=o(" (Speech2Text model)"),WHo=l(),u0=a("li"),Efe=a("strong"),QHo=o("t5"),HHo=o(" \u2014 "),XN=a("a"),UHo=o("TFT5Model"),JHo=o(" (T5 model)"),YHo=l(),b0=a("li"),yfe=a("strong"),KHo=o("tapas"),ZHo=o(" \u2014 "),VN=a("a"),eUo=o("TFTapasModel"),oUo=o(" (TAPAS model)"),rUo=l(),v0=a("li"),wfe=a("strong"),tUo=o("transfo-xl"),aUo=o(" \u2014 "),zN=a("a"),nUo=o("TFTransfoXLModel"),sUo=o(" (Transformer-XL model)"),lUo=l(),T0=a("li"),Afe=a("strong"),iUo=o("vit"),dUo=o(" \u2014 "),WN=a("a"),cUo=o("TFViTModel"),fUo=o(" (ViT model)"),mUo=l(),F0=a("li"),Lfe=a("strong"),gUo=o("wav2vec2"),hUo=o(" \u2014 "),QN=a("a"),pUo=o("TFWav2Vec2Model"),_Uo=o(" (Wav2Vec2 model)"),uUo=l(),C0=a("li"),Bfe=a("strong"),bUo=o("xlm"),vUo=o(" \u2014 "),HN=a("a"),TUo=o("TFXLMModel"),FUo=o(" (XLM model)"),CUo=l(),M0=a("li"),xfe=a("strong"),MUo=o("xlm-roberta"),EUo=o(" \u2014 "),UN=a("a"),yUo=o("TFXLMRobertaModel"),wUo=o(" (XLM-RoBERTa model)"),AUo=l(),E0=a("li"),kfe=a("strong"),LUo=o("xlnet"),BUo=o(" \u2014 "),JN=a("a"),xUo=o("TFXLNetModel"),kUo=o(" (XLNet model)"),RUo=l(),Rfe=a("p"),SUo=o("Examples:"),PUo=l(),f(Ky.$$.fragment),hBe=l(),ac=a("h2"),y0=a("a"),Sfe=a("span"),f(Zy.$$.fragment),$Uo=l(),Pfe=a("span"),IUo=o("TFAutoModelForPreTraining"),pBe=l(),_r=a("div"),f(ew.$$.fragment),DUo=l(),nc=a("p"),jUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),$fe=a("code"),NUo=o("from_pretrained()"),qUo=o("class method or the "),Ife=a("code"),GUo=o("from_config()"),OUo=o(`class
method.`),XUo=l(),ow=a("p"),VUo=o("This class cannot be instantiated directly using "),Dfe=a("code"),zUo=o("__init__()"),WUo=o(" (throws an error)."),QUo=l(),dt=a("div"),f(rw.$$.fragment),HUo=l(),jfe=a("p"),UUo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),JUo=l(),sc=a("p"),YUo=o(`Note:
Loading a model from its configuration file does `),Nfe=a("strong"),KUo=o("not"),ZUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qfe=a("code"),eJo=o("from_pretrained()"),oJo=o("to load the model weights."),rJo=l(),Gfe=a("p"),tJo=o("Examples:"),aJo=l(),f(tw.$$.fragment),nJo=l(),ho=a("div"),f(aw.$$.fragment),sJo=l(),Ofe=a("p"),lJo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),iJo=l(),fn=a("p"),dJo=o("The model class to instantiate is selected based on the "),Xfe=a("code"),cJo=o("model_type"),fJo=o(` property of the config object (either
passed as an argument or loaded from `),Vfe=a("code"),mJo=o("pretrained_model_name_or_path"),gJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=a("code"),hJo=o("pretrained_model_name_or_path"),pJo=o(":"),_Jo=l(),H=a("ul"),w0=a("li"),Wfe=a("strong"),uJo=o("albert"),bJo=o(" \u2014 "),YN=a("a"),vJo=o("TFAlbertForPreTraining"),TJo=o(" (ALBERT model)"),FJo=l(),A0=a("li"),Qfe=a("strong"),CJo=o("bart"),MJo=o(" \u2014 "),KN=a("a"),EJo=o("TFBartForConditionalGeneration"),yJo=o(" (BART model)"),wJo=l(),L0=a("li"),Hfe=a("strong"),AJo=o("bert"),LJo=o(" \u2014 "),ZN=a("a"),BJo=o("TFBertForPreTraining"),xJo=o(" (BERT model)"),kJo=l(),B0=a("li"),Ufe=a("strong"),RJo=o("camembert"),SJo=o(" \u2014 "),eq=a("a"),PJo=o("TFCamembertForMaskedLM"),$Jo=o(" (CamemBERT model)"),IJo=l(),x0=a("li"),Jfe=a("strong"),DJo=o("ctrl"),jJo=o(" \u2014 "),oq=a("a"),NJo=o("TFCTRLLMHeadModel"),qJo=o(" (CTRL model)"),GJo=l(),k0=a("li"),Yfe=a("strong"),OJo=o("distilbert"),XJo=o(" \u2014 "),rq=a("a"),VJo=o("TFDistilBertForMaskedLM"),zJo=o(" (DistilBERT model)"),WJo=l(),R0=a("li"),Kfe=a("strong"),QJo=o("electra"),HJo=o(" \u2014 "),tq=a("a"),UJo=o("TFElectraForPreTraining"),JJo=o(" (ELECTRA model)"),YJo=l(),S0=a("li"),Zfe=a("strong"),KJo=o("flaubert"),ZJo=o(" \u2014 "),aq=a("a"),eYo=o("TFFlaubertWithLMHeadModel"),oYo=o(" (FlauBERT model)"),rYo=l(),P0=a("li"),eme=a("strong"),tYo=o("funnel"),aYo=o(" \u2014 "),nq=a("a"),nYo=o("TFFunnelForPreTraining"),sYo=o(" (Funnel Transformer model)"),lYo=l(),$0=a("li"),ome=a("strong"),iYo=o("gpt2"),dYo=o(" \u2014 "),sq=a("a"),cYo=o("TFGPT2LMHeadModel"),fYo=o(" (OpenAI GPT-2 model)"),mYo=l(),I0=a("li"),rme=a("strong"),gYo=o("layoutlm"),hYo=o(" \u2014 "),lq=a("a"),pYo=o("TFLayoutLMForMaskedLM"),_Yo=o(" (LayoutLM model)"),uYo=l(),D0=a("li"),tme=a("strong"),bYo=o("lxmert"),vYo=o(" \u2014 "),iq=a("a"),TYo=o("TFLxmertForPreTraining"),FYo=o(" (LXMERT model)"),CYo=l(),j0=a("li"),ame=a("strong"),MYo=o("mobilebert"),EYo=o(" \u2014 "),dq=a("a"),yYo=o("TFMobileBertForPreTraining"),wYo=o(" (MobileBERT model)"),AYo=l(),N0=a("li"),nme=a("strong"),LYo=o("mpnet"),BYo=o(" \u2014 "),cq=a("a"),xYo=o("TFMPNetForMaskedLM"),kYo=o(" (MPNet model)"),RYo=l(),q0=a("li"),sme=a("strong"),SYo=o("openai-gpt"),PYo=o(" \u2014 "),fq=a("a"),$Yo=o("TFOpenAIGPTLMHeadModel"),IYo=o(" (OpenAI GPT model)"),DYo=l(),G0=a("li"),lme=a("strong"),jYo=o("roberta"),NYo=o(" \u2014 "),mq=a("a"),qYo=o("TFRobertaForMaskedLM"),GYo=o(" (RoBERTa model)"),OYo=l(),O0=a("li"),ime=a("strong"),XYo=o("t5"),VYo=o(" \u2014 "),gq=a("a"),zYo=o("TFT5ForConditionalGeneration"),WYo=o(" (T5 model)"),QYo=l(),X0=a("li"),dme=a("strong"),HYo=o("tapas"),UYo=o(" \u2014 "),hq=a("a"),JYo=o("TFTapasForMaskedLM"),YYo=o(" (TAPAS model)"),KYo=l(),V0=a("li"),cme=a("strong"),ZYo=o("transfo-xl"),eKo=o(" \u2014 "),pq=a("a"),oKo=o("TFTransfoXLLMHeadModel"),rKo=o(" (Transformer-XL model)"),tKo=l(),z0=a("li"),fme=a("strong"),aKo=o("xlm"),nKo=o(" \u2014 "),_q=a("a"),sKo=o("TFXLMWithLMHeadModel"),lKo=o(" (XLM model)"),iKo=l(),W0=a("li"),mme=a("strong"),dKo=o("xlm-roberta"),cKo=o(" \u2014 "),uq=a("a"),fKo=o("TFXLMRobertaForMaskedLM"),mKo=o(" (XLM-RoBERTa model)"),gKo=l(),Q0=a("li"),gme=a("strong"),hKo=o("xlnet"),pKo=o(" \u2014 "),bq=a("a"),_Ko=o("TFXLNetLMHeadModel"),uKo=o(" (XLNet model)"),bKo=l(),hme=a("p"),vKo=o("Examples:"),TKo=l(),f(nw.$$.fragment),_Be=l(),lc=a("h2"),H0=a("a"),pme=a("span"),f(sw.$$.fragment),FKo=l(),_me=a("span"),CKo=o("TFAutoModelForCausalLM"),uBe=l(),ur=a("div"),f(lw.$$.fragment),MKo=l(),ic=a("p"),EKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ume=a("code"),yKo=o("from_pretrained()"),wKo=o("class method or the "),bme=a("code"),AKo=o("from_config()"),LKo=o(`class
method.`),BKo=l(),iw=a("p"),xKo=o("This class cannot be instantiated directly using "),vme=a("code"),kKo=o("__init__()"),RKo=o(" (throws an error)."),SKo=l(),ct=a("div"),f(dw.$$.fragment),PKo=l(),Tme=a("p"),$Ko=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),IKo=l(),dc=a("p"),DKo=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),jKo=o("not"),NKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cme=a("code"),qKo=o("from_pretrained()"),GKo=o("to load the model weights."),OKo=l(),Mme=a("p"),XKo=o("Examples:"),VKo=l(),f(cw.$$.fragment),zKo=l(),po=a("div"),f(fw.$$.fragment),WKo=l(),Eme=a("p"),QKo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),HKo=l(),mn=a("p"),UKo=o("The model class to instantiate is selected based on the "),yme=a("code"),JKo=o("model_type"),YKo=o(` property of the config object (either
passed as an argument or loaded from `),wme=a("code"),KKo=o("pretrained_model_name_or_path"),ZKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=a("code"),eZo=o("pretrained_model_name_or_path"),oZo=o(":"),rZo=l(),he=a("ul"),U0=a("li"),Lme=a("strong"),tZo=o("bert"),aZo=o(" \u2014 "),vq=a("a"),nZo=o("TFBertLMHeadModel"),sZo=o(" (BERT model)"),lZo=l(),J0=a("li"),Bme=a("strong"),iZo=o("ctrl"),dZo=o(" \u2014 "),Tq=a("a"),cZo=o("TFCTRLLMHeadModel"),fZo=o(" (CTRL model)"),mZo=l(),Y0=a("li"),xme=a("strong"),gZo=o("gpt2"),hZo=o(" \u2014 "),Fq=a("a"),pZo=o("TFGPT2LMHeadModel"),_Zo=o(" (OpenAI GPT-2 model)"),uZo=l(),K0=a("li"),kme=a("strong"),bZo=o("openai-gpt"),vZo=o(" \u2014 "),Cq=a("a"),TZo=o("TFOpenAIGPTLMHeadModel"),FZo=o(" (OpenAI GPT model)"),CZo=l(),Z0=a("li"),Rme=a("strong"),MZo=o("rembert"),EZo=o(" \u2014 "),Mq=a("a"),yZo=o("TFRemBertForCausalLM"),wZo=o(" (RemBERT model)"),AZo=l(),eT=a("li"),Sme=a("strong"),LZo=o("roberta"),BZo=o(" \u2014 "),Eq=a("a"),xZo=o("TFRobertaForCausalLM"),kZo=o(" (RoBERTa model)"),RZo=l(),oT=a("li"),Pme=a("strong"),SZo=o("roformer"),PZo=o(" \u2014 "),yq=a("a"),$Zo=o("TFRoFormerForCausalLM"),IZo=o(" (RoFormer model)"),DZo=l(),rT=a("li"),$me=a("strong"),jZo=o("transfo-xl"),NZo=o(" \u2014 "),wq=a("a"),qZo=o("TFTransfoXLLMHeadModel"),GZo=o(" (Transformer-XL model)"),OZo=l(),tT=a("li"),Ime=a("strong"),XZo=o("xlm"),VZo=o(" \u2014 "),Aq=a("a"),zZo=o("TFXLMWithLMHeadModel"),WZo=o(" (XLM model)"),QZo=l(),aT=a("li"),Dme=a("strong"),HZo=o("xlnet"),UZo=o(" \u2014 "),Lq=a("a"),JZo=o("TFXLNetLMHeadModel"),YZo=o(" (XLNet model)"),KZo=l(),jme=a("p"),ZZo=o("Examples:"),eer=l(),f(mw.$$.fragment),bBe=l(),cc=a("h2"),nT=a("a"),Nme=a("span"),f(gw.$$.fragment),oer=l(),qme=a("span"),rer=o("TFAutoModelForImageClassification"),vBe=l(),br=a("div"),f(hw.$$.fragment),ter=l(),fc=a("p"),aer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gme=a("code"),ner=o("from_pretrained()"),ser=o("class method or the "),Ome=a("code"),ler=o("from_config()"),ier=o(`class
method.`),der=l(),pw=a("p"),cer=o("This class cannot be instantiated directly using "),Xme=a("code"),fer=o("__init__()"),mer=o(" (throws an error)."),ger=l(),ft=a("div"),f(_w.$$.fragment),her=l(),Vme=a("p"),per=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_er=l(),mc=a("p"),uer=o(`Note:
Loading a model from its configuration file does `),zme=a("strong"),ber=o("not"),ver=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wme=a("code"),Ter=o("from_pretrained()"),Fer=o("to load the model weights."),Cer=l(),Qme=a("p"),Mer=o("Examples:"),Eer=l(),f(uw.$$.fragment),yer=l(),_o=a("div"),f(bw.$$.fragment),wer=l(),Hme=a("p"),Aer=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ler=l(),gn=a("p"),Ber=o("The model class to instantiate is selected based on the "),Ume=a("code"),xer=o("model_type"),ker=o(` property of the config object (either
passed as an argument or loaded from `),Jme=a("code"),Rer=o("pretrained_model_name_or_path"),Ser=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=a("code"),Per=o("pretrained_model_name_or_path"),$er=o(":"),Ier=l(),Kme=a("ul"),sT=a("li"),Zme=a("strong"),Der=o("vit"),jer=o(" \u2014 "),Bq=a("a"),Ner=o("TFViTForImageClassification"),qer=o(" (ViT model)"),Ger=l(),ege=a("p"),Oer=o("Examples:"),Xer=l(),f(vw.$$.fragment),TBe=l(),gc=a("h2"),lT=a("a"),oge=a("span"),f(Tw.$$.fragment),Ver=l(),rge=a("span"),zer=o("TFAutoModelForMaskedLM"),FBe=l(),vr=a("div"),f(Fw.$$.fragment),Wer=l(),hc=a("p"),Qer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tge=a("code"),Her=o("from_pretrained()"),Uer=o("class method or the "),age=a("code"),Jer=o("from_config()"),Yer=o(`class
method.`),Ker=l(),Cw=a("p"),Zer=o("This class cannot be instantiated directly using "),nge=a("code"),eor=o("__init__()"),oor=o(" (throws an error)."),ror=l(),mt=a("div"),f(Mw.$$.fragment),tor=l(),sge=a("p"),aor=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nor=l(),pc=a("p"),sor=o(`Note:
Loading a model from its configuration file does `),lge=a("strong"),lor=o("not"),ior=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ige=a("code"),dor=o("from_pretrained()"),cor=o("to load the model weights."),mor=l(),dge=a("p"),gor=o("Examples:"),hor=l(),f(Ew.$$.fragment),por=l(),uo=a("div"),f(yw.$$.fragment),_or=l(),cge=a("p"),uor=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),bor=l(),hn=a("p"),vor=o("The model class to instantiate is selected based on the "),fge=a("code"),Tor=o("model_type"),For=o(` property of the config object (either
passed as an argument or loaded from `),mge=a("code"),Cor=o("pretrained_model_name_or_path"),Mor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gge=a("code"),Eor=o("pretrained_model_name_or_path"),yor=o(":"),wor=l(),Y=a("ul"),iT=a("li"),hge=a("strong"),Aor=o("albert"),Lor=o(" \u2014 "),xq=a("a"),Bor=o("TFAlbertForMaskedLM"),xor=o(" (ALBERT model)"),kor=l(),dT=a("li"),pge=a("strong"),Ror=o("bert"),Sor=o(" \u2014 "),kq=a("a"),Por=o("TFBertForMaskedLM"),$or=o(" (BERT model)"),Ior=l(),cT=a("li"),_ge=a("strong"),Dor=o("camembert"),jor=o(" \u2014 "),Rq=a("a"),Nor=o("TFCamembertForMaskedLM"),qor=o(" (CamemBERT model)"),Gor=l(),fT=a("li"),uge=a("strong"),Oor=o("convbert"),Xor=o(" \u2014 "),Sq=a("a"),Vor=o("TFConvBertForMaskedLM"),zor=o(" (ConvBERT model)"),Wor=l(),mT=a("li"),bge=a("strong"),Qor=o("deberta"),Hor=o(" \u2014 "),Pq=a("a"),Uor=o("TFDebertaForMaskedLM"),Jor=o(" (DeBERTa model)"),Yor=l(),gT=a("li"),vge=a("strong"),Kor=o("deberta-v2"),Zor=o(" \u2014 "),$q=a("a"),err=o("TFDebertaV2ForMaskedLM"),orr=o(" (DeBERTa-v2 model)"),rrr=l(),hT=a("li"),Tge=a("strong"),trr=o("distilbert"),arr=o(" \u2014 "),Iq=a("a"),nrr=o("TFDistilBertForMaskedLM"),srr=o(" (DistilBERT model)"),lrr=l(),pT=a("li"),Fge=a("strong"),irr=o("electra"),drr=o(" \u2014 "),Dq=a("a"),crr=o("TFElectraForMaskedLM"),frr=o(" (ELECTRA model)"),mrr=l(),_T=a("li"),Cge=a("strong"),grr=o("flaubert"),hrr=o(" \u2014 "),jq=a("a"),prr=o("TFFlaubertWithLMHeadModel"),_rr=o(" (FlauBERT model)"),urr=l(),uT=a("li"),Mge=a("strong"),brr=o("funnel"),vrr=o(" \u2014 "),Nq=a("a"),Trr=o("TFFunnelForMaskedLM"),Frr=o(" (Funnel Transformer model)"),Crr=l(),bT=a("li"),Ege=a("strong"),Mrr=o("layoutlm"),Err=o(" \u2014 "),qq=a("a"),yrr=o("TFLayoutLMForMaskedLM"),wrr=o(" (LayoutLM model)"),Arr=l(),vT=a("li"),yge=a("strong"),Lrr=o("longformer"),Brr=o(" \u2014 "),Gq=a("a"),xrr=o("TFLongformerForMaskedLM"),krr=o(" (Longformer model)"),Rrr=l(),TT=a("li"),wge=a("strong"),Srr=o("mobilebert"),Prr=o(" \u2014 "),Oq=a("a"),$rr=o("TFMobileBertForMaskedLM"),Irr=o(" (MobileBERT model)"),Drr=l(),FT=a("li"),Age=a("strong"),jrr=o("mpnet"),Nrr=o(" \u2014 "),Xq=a("a"),qrr=o("TFMPNetForMaskedLM"),Grr=o(" (MPNet model)"),Orr=l(),CT=a("li"),Lge=a("strong"),Xrr=o("rembert"),Vrr=o(" \u2014 "),Vq=a("a"),zrr=o("TFRemBertForMaskedLM"),Wrr=o(" (RemBERT model)"),Qrr=l(),MT=a("li"),Bge=a("strong"),Hrr=o("roberta"),Urr=o(" \u2014 "),zq=a("a"),Jrr=o("TFRobertaForMaskedLM"),Yrr=o(" (RoBERTa model)"),Krr=l(),ET=a("li"),xge=a("strong"),Zrr=o("roformer"),etr=o(" \u2014 "),Wq=a("a"),otr=o("TFRoFormerForMaskedLM"),rtr=o(" (RoFormer model)"),ttr=l(),yT=a("li"),kge=a("strong"),atr=o("tapas"),ntr=o(" \u2014 "),Qq=a("a"),str=o("TFTapasForMaskedLM"),ltr=o(" (TAPAS model)"),itr=l(),wT=a("li"),Rge=a("strong"),dtr=o("xlm"),ctr=o(" \u2014 "),Hq=a("a"),ftr=o("TFXLMWithLMHeadModel"),mtr=o(" (XLM model)"),gtr=l(),AT=a("li"),Sge=a("strong"),htr=o("xlm-roberta"),ptr=o(" \u2014 "),Uq=a("a"),_tr=o("TFXLMRobertaForMaskedLM"),utr=o(" (XLM-RoBERTa model)"),btr=l(),Pge=a("p"),vtr=o("Examples:"),Ttr=l(),f(ww.$$.fragment),CBe=l(),_c=a("h2"),LT=a("a"),$ge=a("span"),f(Aw.$$.fragment),Ftr=l(),Ige=a("span"),Ctr=o("TFAutoModelForSeq2SeqLM"),MBe=l(),Tr=a("div"),f(Lw.$$.fragment),Mtr=l(),uc=a("p"),Etr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Dge=a("code"),ytr=o("from_pretrained()"),wtr=o("class method or the "),jge=a("code"),Atr=o("from_config()"),Ltr=o(`class
method.`),Btr=l(),Bw=a("p"),xtr=o("This class cannot be instantiated directly using "),Nge=a("code"),ktr=o("__init__()"),Rtr=o(" (throws an error)."),Str=l(),gt=a("div"),f(xw.$$.fragment),Ptr=l(),qge=a("p"),$tr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Itr=l(),bc=a("p"),Dtr=o(`Note:
Loading a model from its configuration file does `),Gge=a("strong"),jtr=o("not"),Ntr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oge=a("code"),qtr=o("from_pretrained()"),Gtr=o("to load the model weights."),Otr=l(),Xge=a("p"),Xtr=o("Examples:"),Vtr=l(),f(kw.$$.fragment),ztr=l(),bo=a("div"),f(Rw.$$.fragment),Wtr=l(),Vge=a("p"),Qtr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Htr=l(),pn=a("p"),Utr=o("The model class to instantiate is selected based on the "),zge=a("code"),Jtr=o("model_type"),Ytr=o(` property of the config object (either
passed as an argument or loaded from `),Wge=a("code"),Ktr=o("pretrained_model_name_or_path"),Ztr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=a("code"),ear=o("pretrained_model_name_or_path"),oar=o(":"),rar=l(),pe=a("ul"),BT=a("li"),Hge=a("strong"),tar=o("bart"),aar=o(" \u2014 "),Jq=a("a"),nar=o("TFBartForConditionalGeneration"),sar=o(" (BART model)"),lar=l(),xT=a("li"),Uge=a("strong"),iar=o("blenderbot"),dar=o(" \u2014 "),Yq=a("a"),car=o("TFBlenderbotForConditionalGeneration"),far=o(" (Blenderbot model)"),mar=l(),kT=a("li"),Jge=a("strong"),gar=o("blenderbot-small"),har=o(" \u2014 "),Kq=a("a"),par=o("TFBlenderbotSmallForConditionalGeneration"),_ar=o(" (BlenderbotSmall model)"),uar=l(),RT=a("li"),Yge=a("strong"),bar=o("encoder-decoder"),Tar=o(" \u2014 "),Zq=a("a"),Far=o("TFEncoderDecoderModel"),Car=o(" (Encoder decoder model)"),Mar=l(),ST=a("li"),Kge=a("strong"),Ear=o("led"),yar=o(" \u2014 "),eG=a("a"),war=o("TFLEDForConditionalGeneration"),Aar=o(" (LED model)"),Lar=l(),PT=a("li"),Zge=a("strong"),Bar=o("marian"),xar=o(" \u2014 "),oG=a("a"),kar=o("TFMarianMTModel"),Rar=o(" (Marian model)"),Sar=l(),$T=a("li"),ehe=a("strong"),Par=o("mbart"),$ar=o(" \u2014 "),rG=a("a"),Iar=o("TFMBartForConditionalGeneration"),Dar=o(" (mBART model)"),jar=l(),IT=a("li"),ohe=a("strong"),Nar=o("mt5"),qar=o(" \u2014 "),tG=a("a"),Gar=o("TFMT5ForConditionalGeneration"),Oar=o(" (mT5 model)"),Xar=l(),DT=a("li"),rhe=a("strong"),Var=o("pegasus"),zar=o(" \u2014 "),aG=a("a"),War=o("TFPegasusForConditionalGeneration"),Qar=o(" (Pegasus model)"),Har=l(),jT=a("li"),the=a("strong"),Uar=o("t5"),Jar=o(" \u2014 "),nG=a("a"),Yar=o("TFT5ForConditionalGeneration"),Kar=o(" (T5 model)"),Zar=l(),ahe=a("p"),enr=o("Examples:"),onr=l(),f(Sw.$$.fragment),EBe=l(),vc=a("h2"),NT=a("a"),nhe=a("span"),f(Pw.$$.fragment),rnr=l(),she=a("span"),tnr=o("TFAutoModelForSequenceClassification"),yBe=l(),Fr=a("div"),f($w.$$.fragment),anr=l(),Tc=a("p"),nnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lhe=a("code"),snr=o("from_pretrained()"),lnr=o("class method or the "),ihe=a("code"),inr=o("from_config()"),dnr=o(`class
method.`),cnr=l(),Iw=a("p"),fnr=o("This class cannot be instantiated directly using "),dhe=a("code"),mnr=o("__init__()"),gnr=o(" (throws an error)."),hnr=l(),ht=a("div"),f(Dw.$$.fragment),pnr=l(),che=a("p"),_nr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),unr=l(),Fc=a("p"),bnr=o(`Note:
Loading a model from its configuration file does `),fhe=a("strong"),vnr=o("not"),Tnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mhe=a("code"),Fnr=o("from_pretrained()"),Cnr=o("to load the model weights."),Mnr=l(),ghe=a("p"),Enr=o("Examples:"),ynr=l(),f(jw.$$.fragment),wnr=l(),vo=a("div"),f(Nw.$$.fragment),Anr=l(),hhe=a("p"),Lnr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Bnr=l(),_n=a("p"),xnr=o("The model class to instantiate is selected based on the "),phe=a("code"),knr=o("model_type"),Rnr=o(` property of the config object (either
passed as an argument or loaded from `),_he=a("code"),Snr=o("pretrained_model_name_or_path"),Pnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=a("code"),$nr=o("pretrained_model_name_or_path"),Inr=o(":"),Dnr=l(),X=a("ul"),qT=a("li"),bhe=a("strong"),jnr=o("albert"),Nnr=o(" \u2014 "),sG=a("a"),qnr=o("TFAlbertForSequenceClassification"),Gnr=o(" (ALBERT model)"),Onr=l(),GT=a("li"),vhe=a("strong"),Xnr=o("bert"),Vnr=o(" \u2014 "),lG=a("a"),znr=o("TFBertForSequenceClassification"),Wnr=o(" (BERT model)"),Qnr=l(),OT=a("li"),The=a("strong"),Hnr=o("camembert"),Unr=o(" \u2014 "),iG=a("a"),Jnr=o("TFCamembertForSequenceClassification"),Ynr=o(" (CamemBERT model)"),Knr=l(),XT=a("li"),Fhe=a("strong"),Znr=o("convbert"),esr=o(" \u2014 "),dG=a("a"),osr=o("TFConvBertForSequenceClassification"),rsr=o(" (ConvBERT model)"),tsr=l(),VT=a("li"),Che=a("strong"),asr=o("ctrl"),nsr=o(" \u2014 "),cG=a("a"),ssr=o("TFCTRLForSequenceClassification"),lsr=o(" (CTRL model)"),isr=l(),zT=a("li"),Mhe=a("strong"),dsr=o("deberta"),csr=o(" \u2014 "),fG=a("a"),fsr=o("TFDebertaForSequenceClassification"),msr=o(" (DeBERTa model)"),gsr=l(),WT=a("li"),Ehe=a("strong"),hsr=o("deberta-v2"),psr=o(" \u2014 "),mG=a("a"),_sr=o("TFDebertaV2ForSequenceClassification"),usr=o(" (DeBERTa-v2 model)"),bsr=l(),QT=a("li"),yhe=a("strong"),vsr=o("distilbert"),Tsr=o(" \u2014 "),gG=a("a"),Fsr=o("TFDistilBertForSequenceClassification"),Csr=o(" (DistilBERT model)"),Msr=l(),HT=a("li"),whe=a("strong"),Esr=o("electra"),ysr=o(" \u2014 "),hG=a("a"),wsr=o("TFElectraForSequenceClassification"),Asr=o(" (ELECTRA model)"),Lsr=l(),UT=a("li"),Ahe=a("strong"),Bsr=o("flaubert"),xsr=o(" \u2014 "),pG=a("a"),ksr=o("TFFlaubertForSequenceClassification"),Rsr=o(" (FlauBERT model)"),Ssr=l(),JT=a("li"),Lhe=a("strong"),Psr=o("funnel"),$sr=o(" \u2014 "),_G=a("a"),Isr=o("TFFunnelForSequenceClassification"),Dsr=o(" (Funnel Transformer model)"),jsr=l(),YT=a("li"),Bhe=a("strong"),Nsr=o("gpt2"),qsr=o(" \u2014 "),uG=a("a"),Gsr=o("TFGPT2ForSequenceClassification"),Osr=o(" (OpenAI GPT-2 model)"),Xsr=l(),KT=a("li"),xhe=a("strong"),Vsr=o("layoutlm"),zsr=o(" \u2014 "),bG=a("a"),Wsr=o("TFLayoutLMForSequenceClassification"),Qsr=o(" (LayoutLM model)"),Hsr=l(),ZT=a("li"),khe=a("strong"),Usr=o("longformer"),Jsr=o(" \u2014 "),vG=a("a"),Ysr=o("TFLongformerForSequenceClassification"),Ksr=o(" (Longformer model)"),Zsr=l(),e7=a("li"),Rhe=a("strong"),elr=o("mobilebert"),olr=o(" \u2014 "),TG=a("a"),rlr=o("TFMobileBertForSequenceClassification"),tlr=o(" (MobileBERT model)"),alr=l(),o7=a("li"),She=a("strong"),nlr=o("mpnet"),slr=o(" \u2014 "),FG=a("a"),llr=o("TFMPNetForSequenceClassification"),ilr=o(" (MPNet model)"),dlr=l(),r7=a("li"),Phe=a("strong"),clr=o("openai-gpt"),flr=o(" \u2014 "),CG=a("a"),mlr=o("TFOpenAIGPTForSequenceClassification"),glr=o(" (OpenAI GPT model)"),hlr=l(),t7=a("li"),$he=a("strong"),plr=o("rembert"),_lr=o(" \u2014 "),MG=a("a"),ulr=o("TFRemBertForSequenceClassification"),blr=o(" (RemBERT model)"),vlr=l(),a7=a("li"),Ihe=a("strong"),Tlr=o("roberta"),Flr=o(" \u2014 "),EG=a("a"),Clr=o("TFRobertaForSequenceClassification"),Mlr=o(" (RoBERTa model)"),Elr=l(),n7=a("li"),Dhe=a("strong"),ylr=o("roformer"),wlr=o(" \u2014 "),yG=a("a"),Alr=o("TFRoFormerForSequenceClassification"),Llr=o(" (RoFormer model)"),Blr=l(),s7=a("li"),jhe=a("strong"),xlr=o("tapas"),klr=o(" \u2014 "),wG=a("a"),Rlr=o("TFTapasForSequenceClassification"),Slr=o(" (TAPAS model)"),Plr=l(),l7=a("li"),Nhe=a("strong"),$lr=o("transfo-xl"),Ilr=o(" \u2014 "),AG=a("a"),Dlr=o("TFTransfoXLForSequenceClassification"),jlr=o(" (Transformer-XL model)"),Nlr=l(),i7=a("li"),qhe=a("strong"),qlr=o("xlm"),Glr=o(" \u2014 "),LG=a("a"),Olr=o("TFXLMForSequenceClassification"),Xlr=o(" (XLM model)"),Vlr=l(),d7=a("li"),Ghe=a("strong"),zlr=o("xlm-roberta"),Wlr=o(" \u2014 "),BG=a("a"),Qlr=o("TFXLMRobertaForSequenceClassification"),Hlr=o(" (XLM-RoBERTa model)"),Ulr=l(),c7=a("li"),Ohe=a("strong"),Jlr=o("xlnet"),Ylr=o(" \u2014 "),xG=a("a"),Klr=o("TFXLNetForSequenceClassification"),Zlr=o(" (XLNet model)"),eir=l(),Xhe=a("p"),oir=o("Examples:"),rir=l(),f(qw.$$.fragment),wBe=l(),Cc=a("h2"),f7=a("a"),Vhe=a("span"),f(Gw.$$.fragment),tir=l(),zhe=a("span"),air=o("TFAutoModelForMultipleChoice"),ABe=l(),Cr=a("div"),f(Ow.$$.fragment),nir=l(),Mc=a("p"),sir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Whe=a("code"),lir=o("from_pretrained()"),iir=o("class method or the "),Qhe=a("code"),dir=o("from_config()"),cir=o(`class
method.`),fir=l(),Xw=a("p"),mir=o("This class cannot be instantiated directly using "),Hhe=a("code"),gir=o("__init__()"),hir=o(" (throws an error)."),pir=l(),pt=a("div"),f(Vw.$$.fragment),_ir=l(),Uhe=a("p"),uir=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bir=l(),Ec=a("p"),vir=o(`Note:
Loading a model from its configuration file does `),Jhe=a("strong"),Tir=o("not"),Fir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yhe=a("code"),Cir=o("from_pretrained()"),Mir=o("to load the model weights."),Eir=l(),Khe=a("p"),yir=o("Examples:"),wir=l(),f(zw.$$.fragment),Air=l(),To=a("div"),f(Ww.$$.fragment),Lir=l(),Zhe=a("p"),Bir=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xir=l(),un=a("p"),kir=o("The model class to instantiate is selected based on the "),epe=a("code"),Rir=o("model_type"),Sir=o(` property of the config object (either
passed as an argument or loaded from `),ope=a("code"),Pir=o("pretrained_model_name_or_path"),$ir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=a("code"),Iir=o("pretrained_model_name_or_path"),Dir=o(":"),jir=l(),te=a("ul"),m7=a("li"),tpe=a("strong"),Nir=o("albert"),qir=o(" \u2014 "),kG=a("a"),Gir=o("TFAlbertForMultipleChoice"),Oir=o(" (ALBERT model)"),Xir=l(),g7=a("li"),ape=a("strong"),Vir=o("bert"),zir=o(" \u2014 "),RG=a("a"),Wir=o("TFBertForMultipleChoice"),Qir=o(" (BERT model)"),Hir=l(),h7=a("li"),npe=a("strong"),Uir=o("camembert"),Jir=o(" \u2014 "),SG=a("a"),Yir=o("TFCamembertForMultipleChoice"),Kir=o(" (CamemBERT model)"),Zir=l(),p7=a("li"),spe=a("strong"),edr=o("convbert"),odr=o(" \u2014 "),PG=a("a"),rdr=o("TFConvBertForMultipleChoice"),tdr=o(" (ConvBERT model)"),adr=l(),_7=a("li"),lpe=a("strong"),ndr=o("distilbert"),sdr=o(" \u2014 "),$G=a("a"),ldr=o("TFDistilBertForMultipleChoice"),idr=o(" (DistilBERT model)"),ddr=l(),u7=a("li"),ipe=a("strong"),cdr=o("electra"),fdr=o(" \u2014 "),IG=a("a"),mdr=o("TFElectraForMultipleChoice"),gdr=o(" (ELECTRA model)"),hdr=l(),b7=a("li"),dpe=a("strong"),pdr=o("flaubert"),_dr=o(" \u2014 "),DG=a("a"),udr=o("TFFlaubertForMultipleChoice"),bdr=o(" (FlauBERT model)"),vdr=l(),v7=a("li"),cpe=a("strong"),Tdr=o("funnel"),Fdr=o(" \u2014 "),jG=a("a"),Cdr=o("TFFunnelForMultipleChoice"),Mdr=o(" (Funnel Transformer model)"),Edr=l(),T7=a("li"),fpe=a("strong"),ydr=o("longformer"),wdr=o(" \u2014 "),NG=a("a"),Adr=o("TFLongformerForMultipleChoice"),Ldr=o(" (Longformer model)"),Bdr=l(),F7=a("li"),mpe=a("strong"),xdr=o("mobilebert"),kdr=o(" \u2014 "),qG=a("a"),Rdr=o("TFMobileBertForMultipleChoice"),Sdr=o(" (MobileBERT model)"),Pdr=l(),C7=a("li"),gpe=a("strong"),$dr=o("mpnet"),Idr=o(" \u2014 "),GG=a("a"),Ddr=o("TFMPNetForMultipleChoice"),jdr=o(" (MPNet model)"),Ndr=l(),M7=a("li"),hpe=a("strong"),qdr=o("rembert"),Gdr=o(" \u2014 "),OG=a("a"),Odr=o("TFRemBertForMultipleChoice"),Xdr=o(" (RemBERT model)"),Vdr=l(),E7=a("li"),ppe=a("strong"),zdr=o("roberta"),Wdr=o(" \u2014 "),XG=a("a"),Qdr=o("TFRobertaForMultipleChoice"),Hdr=o(" (RoBERTa model)"),Udr=l(),y7=a("li"),_pe=a("strong"),Jdr=o("roformer"),Ydr=o(" \u2014 "),VG=a("a"),Kdr=o("TFRoFormerForMultipleChoice"),Zdr=o(" (RoFormer model)"),ecr=l(),w7=a("li"),upe=a("strong"),ocr=o("xlm"),rcr=o(" \u2014 "),zG=a("a"),tcr=o("TFXLMForMultipleChoice"),acr=o(" (XLM model)"),ncr=l(),A7=a("li"),bpe=a("strong"),scr=o("xlm-roberta"),lcr=o(" \u2014 "),WG=a("a"),icr=o("TFXLMRobertaForMultipleChoice"),dcr=o(" (XLM-RoBERTa model)"),ccr=l(),L7=a("li"),vpe=a("strong"),fcr=o("xlnet"),mcr=o(" \u2014 "),QG=a("a"),gcr=o("TFXLNetForMultipleChoice"),hcr=o(" (XLNet model)"),pcr=l(),Tpe=a("p"),_cr=o("Examples:"),ucr=l(),f(Qw.$$.fragment),LBe=l(),yc=a("h2"),B7=a("a"),Fpe=a("span"),f(Hw.$$.fragment),bcr=l(),Cpe=a("span"),vcr=o("TFAutoModelForTableQuestionAnswering"),BBe=l(),Mr=a("div"),f(Uw.$$.fragment),Tcr=l(),wc=a("p"),Fcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Mpe=a("code"),Ccr=o("from_pretrained()"),Mcr=o("class method or the "),Epe=a("code"),Ecr=o("from_config()"),ycr=o(`class
method.`),wcr=l(),Jw=a("p"),Acr=o("This class cannot be instantiated directly using "),ype=a("code"),Lcr=o("__init__()"),Bcr=o(" (throws an error)."),xcr=l(),_t=a("div"),f(Yw.$$.fragment),kcr=l(),wpe=a("p"),Rcr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Scr=l(),Ac=a("p"),Pcr=o(`Note:
Loading a model from its configuration file does `),Ape=a("strong"),$cr=o("not"),Icr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lpe=a("code"),Dcr=o("from_pretrained()"),jcr=o("to load the model weights."),Ncr=l(),Bpe=a("p"),qcr=o("Examples:"),Gcr=l(),f(Kw.$$.fragment),Ocr=l(),Fo=a("div"),f(Zw.$$.fragment),Xcr=l(),xpe=a("p"),Vcr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zcr=l(),bn=a("p"),Wcr=o("The model class to instantiate is selected based on the "),kpe=a("code"),Qcr=o("model_type"),Hcr=o(` property of the config object (either
passed as an argument or loaded from `),Rpe=a("code"),Ucr=o("pretrained_model_name_or_path"),Jcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Spe=a("code"),Ycr=o("pretrained_model_name_or_path"),Kcr=o(":"),Zcr=l(),Ppe=a("ul"),x7=a("li"),$pe=a("strong"),efr=o("tapas"),ofr=o(" \u2014 "),HG=a("a"),rfr=o("TFTapasForQuestionAnswering"),tfr=o(" (TAPAS model)"),afr=l(),Ipe=a("p"),nfr=o("Examples:"),sfr=l(),f(e6.$$.fragment),xBe=l(),Lc=a("h2"),k7=a("a"),Dpe=a("span"),f(o6.$$.fragment),lfr=l(),jpe=a("span"),ifr=o("TFAutoModelForTokenClassification"),kBe=l(),Er=a("div"),f(r6.$$.fragment),dfr=l(),Bc=a("p"),cfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Npe=a("code"),ffr=o("from_pretrained()"),mfr=o("class method or the "),qpe=a("code"),gfr=o("from_config()"),hfr=o(`class
method.`),pfr=l(),t6=a("p"),_fr=o("This class cannot be instantiated directly using "),Gpe=a("code"),ufr=o("__init__()"),bfr=o(" (throws an error)."),vfr=l(),ut=a("div"),f(a6.$$.fragment),Tfr=l(),Ope=a("p"),Ffr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Cfr=l(),xc=a("p"),Mfr=o(`Note:
Loading a model from its configuration file does `),Xpe=a("strong"),Efr=o("not"),yfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vpe=a("code"),wfr=o("from_pretrained()"),Afr=o("to load the model weights."),Lfr=l(),zpe=a("p"),Bfr=o("Examples:"),xfr=l(),f(n6.$$.fragment),kfr=l(),Co=a("div"),f(s6.$$.fragment),Rfr=l(),Wpe=a("p"),Sfr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Pfr=l(),vn=a("p"),$fr=o("The model class to instantiate is selected based on the "),Qpe=a("code"),Ifr=o("model_type"),Dfr=o(` property of the config object (either
passed as an argument or loaded from `),Hpe=a("code"),jfr=o("pretrained_model_name_or_path"),Nfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=a("code"),qfr=o("pretrained_model_name_or_path"),Gfr=o(":"),Ofr=l(),K=a("ul"),R7=a("li"),Jpe=a("strong"),Xfr=o("albert"),Vfr=o(" \u2014 "),UG=a("a"),zfr=o("TFAlbertForTokenClassification"),Wfr=o(" (ALBERT model)"),Qfr=l(),S7=a("li"),Ype=a("strong"),Hfr=o("bert"),Ufr=o(" \u2014 "),JG=a("a"),Jfr=o("TFBertForTokenClassification"),Yfr=o(" (BERT model)"),Kfr=l(),P7=a("li"),Kpe=a("strong"),Zfr=o("camembert"),emr=o(" \u2014 "),YG=a("a"),omr=o("TFCamembertForTokenClassification"),rmr=o(" (CamemBERT model)"),tmr=l(),$7=a("li"),Zpe=a("strong"),amr=o("convbert"),nmr=o(" \u2014 "),KG=a("a"),smr=o("TFConvBertForTokenClassification"),lmr=o(" (ConvBERT model)"),imr=l(),I7=a("li"),e_e=a("strong"),dmr=o("deberta"),cmr=o(" \u2014 "),ZG=a("a"),fmr=o("TFDebertaForTokenClassification"),mmr=o(" (DeBERTa model)"),gmr=l(),D7=a("li"),o_e=a("strong"),hmr=o("deberta-v2"),pmr=o(" \u2014 "),eO=a("a"),_mr=o("TFDebertaV2ForTokenClassification"),umr=o(" (DeBERTa-v2 model)"),bmr=l(),j7=a("li"),r_e=a("strong"),vmr=o("distilbert"),Tmr=o(" \u2014 "),oO=a("a"),Fmr=o("TFDistilBertForTokenClassification"),Cmr=o(" (DistilBERT model)"),Mmr=l(),N7=a("li"),t_e=a("strong"),Emr=o("electra"),ymr=o(" \u2014 "),rO=a("a"),wmr=o("TFElectraForTokenClassification"),Amr=o(" (ELECTRA model)"),Lmr=l(),q7=a("li"),a_e=a("strong"),Bmr=o("flaubert"),xmr=o(" \u2014 "),tO=a("a"),kmr=o("TFFlaubertForTokenClassification"),Rmr=o(" (FlauBERT model)"),Smr=l(),G7=a("li"),n_e=a("strong"),Pmr=o("funnel"),$mr=o(" \u2014 "),aO=a("a"),Imr=o("TFFunnelForTokenClassification"),Dmr=o(" (Funnel Transformer model)"),jmr=l(),O7=a("li"),s_e=a("strong"),Nmr=o("layoutlm"),qmr=o(" \u2014 "),nO=a("a"),Gmr=o("TFLayoutLMForTokenClassification"),Omr=o(" (LayoutLM model)"),Xmr=l(),X7=a("li"),l_e=a("strong"),Vmr=o("longformer"),zmr=o(" \u2014 "),sO=a("a"),Wmr=o("TFLongformerForTokenClassification"),Qmr=o(" (Longformer model)"),Hmr=l(),V7=a("li"),i_e=a("strong"),Umr=o("mobilebert"),Jmr=o(" \u2014 "),lO=a("a"),Ymr=o("TFMobileBertForTokenClassification"),Kmr=o(" (MobileBERT model)"),Zmr=l(),z7=a("li"),d_e=a("strong"),egr=o("mpnet"),ogr=o(" \u2014 "),iO=a("a"),rgr=o("TFMPNetForTokenClassification"),tgr=o(" (MPNet model)"),agr=l(),W7=a("li"),c_e=a("strong"),ngr=o("rembert"),sgr=o(" \u2014 "),dO=a("a"),lgr=o("TFRemBertForTokenClassification"),igr=o(" (RemBERT model)"),dgr=l(),Q7=a("li"),f_e=a("strong"),cgr=o("roberta"),fgr=o(" \u2014 "),cO=a("a"),mgr=o("TFRobertaForTokenClassification"),ggr=o(" (RoBERTa model)"),hgr=l(),H7=a("li"),m_e=a("strong"),pgr=o("roformer"),_gr=o(" \u2014 "),fO=a("a"),ugr=o("TFRoFormerForTokenClassification"),bgr=o(" (RoFormer model)"),vgr=l(),U7=a("li"),g_e=a("strong"),Tgr=o("xlm"),Fgr=o(" \u2014 "),mO=a("a"),Cgr=o("TFXLMForTokenClassification"),Mgr=o(" (XLM model)"),Egr=l(),J7=a("li"),h_e=a("strong"),ygr=o("xlm-roberta"),wgr=o(" \u2014 "),gO=a("a"),Agr=o("TFXLMRobertaForTokenClassification"),Lgr=o(" (XLM-RoBERTa model)"),Bgr=l(),Y7=a("li"),p_e=a("strong"),xgr=o("xlnet"),kgr=o(" \u2014 "),hO=a("a"),Rgr=o("TFXLNetForTokenClassification"),Sgr=o(" (XLNet model)"),Pgr=l(),__e=a("p"),$gr=o("Examples:"),Igr=l(),f(l6.$$.fragment),RBe=l(),kc=a("h2"),K7=a("a"),u_e=a("span"),f(i6.$$.fragment),Dgr=l(),b_e=a("span"),jgr=o("TFAutoModelForQuestionAnswering"),SBe=l(),yr=a("div"),f(d6.$$.fragment),Ngr=l(),Rc=a("p"),qgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),v_e=a("code"),Ggr=o("from_pretrained()"),Ogr=o("class method or the "),T_e=a("code"),Xgr=o("from_config()"),Vgr=o(`class
method.`),zgr=l(),c6=a("p"),Wgr=o("This class cannot be instantiated directly using "),F_e=a("code"),Qgr=o("__init__()"),Hgr=o(" (throws an error)."),Ugr=l(),bt=a("div"),f(f6.$$.fragment),Jgr=l(),C_e=a("p"),Ygr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Kgr=l(),Sc=a("p"),Zgr=o(`Note:
Loading a model from its configuration file does `),M_e=a("strong"),ehr=o("not"),ohr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),E_e=a("code"),rhr=o("from_pretrained()"),thr=o("to load the model weights."),ahr=l(),y_e=a("p"),nhr=o("Examples:"),shr=l(),f(m6.$$.fragment),lhr=l(),Mo=a("div"),f(g6.$$.fragment),ihr=l(),w_e=a("p"),dhr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),chr=l(),Tn=a("p"),fhr=o("The model class to instantiate is selected based on the "),A_e=a("code"),mhr=o("model_type"),ghr=o(` property of the config object (either
passed as an argument or loaded from `),L_e=a("code"),hhr=o("pretrained_model_name_or_path"),phr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=a("code"),_hr=o("pretrained_model_name_or_path"),uhr=o(":"),bhr=l(),Z=a("ul"),Z7=a("li"),x_e=a("strong"),vhr=o("albert"),Thr=o(" \u2014 "),pO=a("a"),Fhr=o("TFAlbertForQuestionAnswering"),Chr=o(" (ALBERT model)"),Mhr=l(),eF=a("li"),k_e=a("strong"),Ehr=o("bert"),yhr=o(" \u2014 "),_O=a("a"),whr=o("TFBertForQuestionAnswering"),Ahr=o(" (BERT model)"),Lhr=l(),oF=a("li"),R_e=a("strong"),Bhr=o("camembert"),xhr=o(" \u2014 "),uO=a("a"),khr=o("TFCamembertForQuestionAnswering"),Rhr=o(" (CamemBERT model)"),Shr=l(),rF=a("li"),S_e=a("strong"),Phr=o("convbert"),$hr=o(" \u2014 "),bO=a("a"),Ihr=o("TFConvBertForQuestionAnswering"),Dhr=o(" (ConvBERT model)"),jhr=l(),tF=a("li"),P_e=a("strong"),Nhr=o("deberta"),qhr=o(" \u2014 "),vO=a("a"),Ghr=o("TFDebertaForQuestionAnswering"),Ohr=o(" (DeBERTa model)"),Xhr=l(),aF=a("li"),$_e=a("strong"),Vhr=o("deberta-v2"),zhr=o(" \u2014 "),TO=a("a"),Whr=o("TFDebertaV2ForQuestionAnswering"),Qhr=o(" (DeBERTa-v2 model)"),Hhr=l(),nF=a("li"),I_e=a("strong"),Uhr=o("distilbert"),Jhr=o(" \u2014 "),FO=a("a"),Yhr=o("TFDistilBertForQuestionAnswering"),Khr=o(" (DistilBERT model)"),Zhr=l(),sF=a("li"),D_e=a("strong"),epr=o("electra"),opr=o(" \u2014 "),CO=a("a"),rpr=o("TFElectraForQuestionAnswering"),tpr=o(" (ELECTRA model)"),apr=l(),lF=a("li"),j_e=a("strong"),npr=o("flaubert"),spr=o(" \u2014 "),MO=a("a"),lpr=o("TFFlaubertForQuestionAnsweringSimple"),ipr=o(" (FlauBERT model)"),dpr=l(),iF=a("li"),N_e=a("strong"),cpr=o("funnel"),fpr=o(" \u2014 "),EO=a("a"),mpr=o("TFFunnelForQuestionAnswering"),gpr=o(" (Funnel Transformer model)"),hpr=l(),dF=a("li"),q_e=a("strong"),ppr=o("longformer"),_pr=o(" \u2014 "),yO=a("a"),upr=o("TFLongformerForQuestionAnswering"),bpr=o(" (Longformer model)"),vpr=l(),cF=a("li"),G_e=a("strong"),Tpr=o("mobilebert"),Fpr=o(" \u2014 "),wO=a("a"),Cpr=o("TFMobileBertForQuestionAnswering"),Mpr=o(" (MobileBERT model)"),Epr=l(),fF=a("li"),O_e=a("strong"),ypr=o("mpnet"),wpr=o(" \u2014 "),AO=a("a"),Apr=o("TFMPNetForQuestionAnswering"),Lpr=o(" (MPNet model)"),Bpr=l(),mF=a("li"),X_e=a("strong"),xpr=o("rembert"),kpr=o(" \u2014 "),LO=a("a"),Rpr=o("TFRemBertForQuestionAnswering"),Spr=o(" (RemBERT model)"),Ppr=l(),gF=a("li"),V_e=a("strong"),$pr=o("roberta"),Ipr=o(" \u2014 "),BO=a("a"),Dpr=o("TFRobertaForQuestionAnswering"),jpr=o(" (RoBERTa model)"),Npr=l(),hF=a("li"),z_e=a("strong"),qpr=o("roformer"),Gpr=o(" \u2014 "),xO=a("a"),Opr=o("TFRoFormerForQuestionAnswering"),Xpr=o(" (RoFormer model)"),Vpr=l(),pF=a("li"),W_e=a("strong"),zpr=o("xlm"),Wpr=o(" \u2014 "),kO=a("a"),Qpr=o("TFXLMForQuestionAnsweringSimple"),Hpr=o(" (XLM model)"),Upr=l(),_F=a("li"),Q_e=a("strong"),Jpr=o("xlm-roberta"),Ypr=o(" \u2014 "),RO=a("a"),Kpr=o("TFXLMRobertaForQuestionAnswering"),Zpr=o(" (XLM-RoBERTa model)"),e_r=l(),uF=a("li"),H_e=a("strong"),o_r=o("xlnet"),r_r=o(" \u2014 "),SO=a("a"),t_r=o("TFXLNetForQuestionAnsweringSimple"),a_r=o(" (XLNet model)"),n_r=l(),U_e=a("p"),s_r=o("Examples:"),l_r=l(),f(h6.$$.fragment),PBe=l(),Pc=a("h2"),bF=a("a"),J_e=a("span"),f(p6.$$.fragment),i_r=l(),Y_e=a("span"),d_r=o("TFAutoModelForVision2Seq"),$Be=l(),wr=a("div"),f(_6.$$.fragment),c_r=l(),$c=a("p"),f_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),K_e=a("code"),m_r=o("from_pretrained()"),g_r=o("class method or the "),Z_e=a("code"),h_r=o("from_config()"),p_r=o(`class
method.`),__r=l(),u6=a("p"),u_r=o("This class cannot be instantiated directly using "),eue=a("code"),b_r=o("__init__()"),v_r=o(" (throws an error)."),T_r=l(),vt=a("div"),f(b6.$$.fragment),F_r=l(),oue=a("p"),C_r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),M_r=l(),Ic=a("p"),E_r=o(`Note:
Loading a model from its configuration file does `),rue=a("strong"),y_r=o("not"),w_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tue=a("code"),A_r=o("from_pretrained()"),L_r=o("to load the model weights."),B_r=l(),aue=a("p"),x_r=o("Examples:"),k_r=l(),f(v6.$$.fragment),R_r=l(),Eo=a("div"),f(T6.$$.fragment),S_r=l(),nue=a("p"),P_r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$_r=l(),Fn=a("p"),I_r=o("The model class to instantiate is selected based on the "),sue=a("code"),D_r=o("model_type"),j_r=o(` property of the config object (either
passed as an argument or loaded from `),lue=a("code"),N_r=o("pretrained_model_name_or_path"),q_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=a("code"),G_r=o("pretrained_model_name_or_path"),O_r=o(":"),X_r=l(),due=a("ul"),vF=a("li"),cue=a("strong"),V_r=o("vision-encoder-decoder"),z_r=o(" \u2014 "),PO=a("a"),W_r=o("TFVisionEncoderDecoderModel"),Q_r=o(" (Vision Encoder decoder model)"),H_r=l(),fue=a("p"),U_r=o("Examples:"),J_r=l(),f(F6.$$.fragment),IBe=l(),Dc=a("h2"),TF=a("a"),mue=a("span"),f(C6.$$.fragment),Y_r=l(),gue=a("span"),K_r=o("TFAutoModelForSpeechSeq2Seq"),DBe=l(),Ar=a("div"),f(M6.$$.fragment),Z_r=l(),jc=a("p"),eur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hue=a("code"),our=o("from_pretrained()"),rur=o("class method or the "),pue=a("code"),tur=o("from_config()"),aur=o(`class
method.`),nur=l(),E6=a("p"),sur=o("This class cannot be instantiated directly using "),_ue=a("code"),lur=o("__init__()"),iur=o(" (throws an error)."),dur=l(),Tt=a("div"),f(y6.$$.fragment),cur=l(),uue=a("p"),fur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mur=l(),Nc=a("p"),gur=o(`Note:
Loading a model from its configuration file does `),bue=a("strong"),hur=o("not"),pur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vue=a("code"),_ur=o("from_pretrained()"),uur=o("to load the model weights."),bur=l(),Tue=a("p"),vur=o("Examples:"),Tur=l(),f(w6.$$.fragment),Fur=l(),yo=a("div"),f(A6.$$.fragment),Cur=l(),Fue=a("p"),Mur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Eur=l(),Cn=a("p"),yur=o("The model class to instantiate is selected based on the "),Cue=a("code"),wur=o("model_type"),Aur=o(` property of the config object (either
passed as an argument or loaded from `),Mue=a("code"),Lur=o("pretrained_model_name_or_path"),Bur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=a("code"),xur=o("pretrained_model_name_or_path"),kur=o(":"),Rur=l(),yue=a("ul"),FF=a("li"),wue=a("strong"),Sur=o("speech_to_text"),Pur=o(" \u2014 "),$O=a("a"),$ur=o("TFSpeech2TextForConditionalGeneration"),Iur=o(" (Speech2Text model)"),Dur=l(),Aue=a("p"),jur=o("Examples:"),Nur=l(),f(L6.$$.fragment),jBe=l(),qc=a("h2"),CF=a("a"),Lue=a("span"),f(B6.$$.fragment),qur=l(),Bue=a("span"),Gur=o("FlaxAutoModel"),NBe=l(),Lr=a("div"),f(x6.$$.fragment),Our=l(),Gc=a("p"),Xur=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xue=a("code"),Vur=o("from_pretrained()"),zur=o("class method or the "),kue=a("code"),Wur=o("from_config()"),Qur=o(`class
method.`),Hur=l(),k6=a("p"),Uur=o("This class cannot be instantiated directly using "),Rue=a("code"),Jur=o("__init__()"),Yur=o(" (throws an error)."),Kur=l(),Ft=a("div"),f(R6.$$.fragment),Zur=l(),Sue=a("p"),e5r=o("Instantiates one of the base model classes of the library from a configuration."),o5r=l(),Oc=a("p"),r5r=o(`Note:
Loading a model from its configuration file does `),Pue=a("strong"),t5r=o("not"),a5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ue=a("code"),n5r=o("from_pretrained()"),s5r=o("to load the model weights."),l5r=l(),Iue=a("p"),i5r=o("Examples:"),d5r=l(),f(S6.$$.fragment),c5r=l(),wo=a("div"),f(P6.$$.fragment),f5r=l(),Due=a("p"),m5r=o("Instantiate one of the base model classes of the library from a pretrained model."),g5r=l(),Mn=a("p"),h5r=o("The model class to instantiate is selected based on the "),jue=a("code"),p5r=o("model_type"),_5r=o(` property of the config object (either
passed as an argument or loaded from `),Nue=a("code"),u5r=o("pretrained_model_name_or_path"),b5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=a("code"),v5r=o("pretrained_model_name_or_path"),T5r=o(":"),F5r=l(),z=a("ul"),MF=a("li"),Gue=a("strong"),C5r=o("albert"),M5r=o(" \u2014 "),IO=a("a"),E5r=o("FlaxAlbertModel"),y5r=o(" (ALBERT model)"),w5r=l(),EF=a("li"),Oue=a("strong"),A5r=o("bart"),L5r=o(" \u2014 "),DO=a("a"),B5r=o("FlaxBartModel"),x5r=o(" (BART model)"),k5r=l(),yF=a("li"),Xue=a("strong"),R5r=o("beit"),S5r=o(" \u2014 "),jO=a("a"),P5r=o("FlaxBeitModel"),$5r=o(" (BEiT model)"),I5r=l(),wF=a("li"),Vue=a("strong"),D5r=o("bert"),j5r=o(" \u2014 "),NO=a("a"),N5r=o("FlaxBertModel"),q5r=o(" (BERT model)"),G5r=l(),AF=a("li"),zue=a("strong"),O5r=o("big_bird"),X5r=o(" \u2014 "),qO=a("a"),V5r=o("FlaxBigBirdModel"),z5r=o(" (BigBird model)"),W5r=l(),LF=a("li"),Wue=a("strong"),Q5r=o("blenderbot"),H5r=o(" \u2014 "),GO=a("a"),U5r=o("FlaxBlenderbotModel"),J5r=o(" (Blenderbot model)"),Y5r=l(),BF=a("li"),Que=a("strong"),K5r=o("blenderbot-small"),Z5r=o(" \u2014 "),OO=a("a"),e1r=o("FlaxBlenderbotSmallModel"),o1r=o(" (BlenderbotSmall model)"),r1r=l(),xF=a("li"),Hue=a("strong"),t1r=o("clip"),a1r=o(" \u2014 "),XO=a("a"),n1r=o("FlaxCLIPModel"),s1r=o(" (CLIP model)"),l1r=l(),kF=a("li"),Uue=a("strong"),i1r=o("distilbert"),d1r=o(" \u2014 "),VO=a("a"),c1r=o("FlaxDistilBertModel"),f1r=o(" (DistilBERT model)"),m1r=l(),RF=a("li"),Jue=a("strong"),g1r=o("electra"),h1r=o(" \u2014 "),zO=a("a"),p1r=o("FlaxElectraModel"),_1r=o(" (ELECTRA model)"),u1r=l(),SF=a("li"),Yue=a("strong"),b1r=o("gpt2"),v1r=o(" \u2014 "),WO=a("a"),T1r=o("FlaxGPT2Model"),F1r=o(" (OpenAI GPT-2 model)"),C1r=l(),PF=a("li"),Kue=a("strong"),M1r=o("gpt_neo"),E1r=o(" \u2014 "),QO=a("a"),y1r=o("FlaxGPTNeoModel"),w1r=o(" (GPT Neo model)"),A1r=l(),$F=a("li"),Zue=a("strong"),L1r=o("gptj"),B1r=o(" \u2014 "),HO=a("a"),x1r=o("FlaxGPTJModel"),k1r=o(" (GPT-J model)"),R1r=l(),IF=a("li"),e5e=a("strong"),S1r=o("marian"),P1r=o(" \u2014 "),UO=a("a"),$1r=o("FlaxMarianModel"),I1r=o(" (Marian model)"),D1r=l(),DF=a("li"),o5e=a("strong"),j1r=o("mbart"),N1r=o(" \u2014 "),JO=a("a"),q1r=o("FlaxMBartModel"),G1r=o(" (mBART model)"),O1r=l(),jF=a("li"),r5e=a("strong"),X1r=o("mt5"),V1r=o(" \u2014 "),YO=a("a"),z1r=o("FlaxMT5Model"),W1r=o(" (mT5 model)"),Q1r=l(),NF=a("li"),t5e=a("strong"),H1r=o("pegasus"),U1r=o(" \u2014 "),KO=a("a"),J1r=o("FlaxPegasusModel"),Y1r=o(" (Pegasus model)"),K1r=l(),qF=a("li"),a5e=a("strong"),Z1r=o("roberta"),ebr=o(" \u2014 "),ZO=a("a"),obr=o("FlaxRobertaModel"),rbr=o(" (RoBERTa model)"),tbr=l(),GF=a("li"),n5e=a("strong"),abr=o("roformer"),nbr=o(" \u2014 "),eX=a("a"),sbr=o("FlaxRoFormerModel"),lbr=o(" (RoFormer model)"),ibr=l(),OF=a("li"),s5e=a("strong"),dbr=o("t5"),cbr=o(" \u2014 "),oX=a("a"),fbr=o("FlaxT5Model"),mbr=o(" (T5 model)"),gbr=l(),XF=a("li"),l5e=a("strong"),hbr=o("vision-text-dual-encoder"),pbr=o(" \u2014 "),rX=a("a"),_br=o("FlaxVisionTextDualEncoderModel"),ubr=o(" (VisionTextDualEncoder model)"),bbr=l(),VF=a("li"),i5e=a("strong"),vbr=o("vit"),Tbr=o(" \u2014 "),tX=a("a"),Fbr=o("FlaxViTModel"),Cbr=o(" (ViT model)"),Mbr=l(),zF=a("li"),d5e=a("strong"),Ebr=o("wav2vec2"),ybr=o(" \u2014 "),aX=a("a"),wbr=o("FlaxWav2Vec2Model"),Abr=o(" (Wav2Vec2 model)"),Lbr=l(),WF=a("li"),c5e=a("strong"),Bbr=o("xglm"),xbr=o(" \u2014 "),nX=a("a"),kbr=o("FlaxXGLMModel"),Rbr=o(" (XGLM model)"),Sbr=l(),f5e=a("p"),Pbr=o("Examples:"),$br=l(),f($6.$$.fragment),qBe=l(),Xc=a("h2"),QF=a("a"),m5e=a("span"),f(I6.$$.fragment),Ibr=l(),g5e=a("span"),Dbr=o("FlaxAutoModelForCausalLM"),GBe=l(),Br=a("div"),f(D6.$$.fragment),jbr=l(),Vc=a("p"),Nbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),h5e=a("code"),qbr=o("from_pretrained()"),Gbr=o("class method or the "),p5e=a("code"),Obr=o("from_config()"),Xbr=o(`class
method.`),Vbr=l(),j6=a("p"),zbr=o("This class cannot be instantiated directly using "),_5e=a("code"),Wbr=o("__init__()"),Qbr=o(" (throws an error)."),Hbr=l(),Ct=a("div"),f(N6.$$.fragment),Ubr=l(),u5e=a("p"),Jbr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ybr=l(),zc=a("p"),Kbr=o(`Note:
Loading a model from its configuration file does `),b5e=a("strong"),Zbr=o("not"),e2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),v5e=a("code"),o2r=o("from_pretrained()"),r2r=o("to load the model weights."),t2r=l(),T5e=a("p"),a2r=o("Examples:"),n2r=l(),f(q6.$$.fragment),s2r=l(),Ao=a("div"),f(G6.$$.fragment),l2r=l(),F5e=a("p"),i2r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),d2r=l(),En=a("p"),c2r=o("The model class to instantiate is selected based on the "),C5e=a("code"),f2r=o("model_type"),m2r=o(` property of the config object (either
passed as an argument or loaded from `),M5e=a("code"),g2r=o("pretrained_model_name_or_path"),h2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=a("code"),p2r=o("pretrained_model_name_or_path"),_2r=o(":"),u2r=l(),yn=a("ul"),HF=a("li"),y5e=a("strong"),b2r=o("gpt2"),v2r=o(" \u2014 "),sX=a("a"),T2r=o("FlaxGPT2LMHeadModel"),F2r=o(" (OpenAI GPT-2 model)"),C2r=l(),UF=a("li"),w5e=a("strong"),M2r=o("gpt_neo"),E2r=o(" \u2014 "),lX=a("a"),y2r=o("FlaxGPTNeoForCausalLM"),w2r=o(" (GPT Neo model)"),A2r=l(),JF=a("li"),A5e=a("strong"),L2r=o("gptj"),B2r=o(" \u2014 "),iX=a("a"),x2r=o("FlaxGPTJForCausalLM"),k2r=o(" (GPT-J model)"),R2r=l(),YF=a("li"),L5e=a("strong"),S2r=o("xglm"),P2r=o(" \u2014 "),dX=a("a"),$2r=o("FlaxXGLMForCausalLM"),I2r=o(" (XGLM model)"),D2r=l(),B5e=a("p"),j2r=o("Examples:"),N2r=l(),f(O6.$$.fragment),OBe=l(),Wc=a("h2"),KF=a("a"),x5e=a("span"),f(X6.$$.fragment),q2r=l(),k5e=a("span"),G2r=o("FlaxAutoModelForPreTraining"),XBe=l(),xr=a("div"),f(V6.$$.fragment),O2r=l(),Qc=a("p"),X2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),R5e=a("code"),V2r=o("from_pretrained()"),z2r=o("class method or the "),S5e=a("code"),W2r=o("from_config()"),Q2r=o(`class
method.`),H2r=l(),z6=a("p"),U2r=o("This class cannot be instantiated directly using "),P5e=a("code"),J2r=o("__init__()"),Y2r=o(" (throws an error)."),K2r=l(),Mt=a("div"),f(W6.$$.fragment),Z2r=l(),$5e=a("p"),evr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ovr=l(),Hc=a("p"),rvr=o(`Note:
Loading a model from its configuration file does `),I5e=a("strong"),tvr=o("not"),avr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),D5e=a("code"),nvr=o("from_pretrained()"),svr=o("to load the model weights."),lvr=l(),j5e=a("p"),ivr=o("Examples:"),dvr=l(),f(Q6.$$.fragment),cvr=l(),Lo=a("div"),f(H6.$$.fragment),fvr=l(),N5e=a("p"),mvr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gvr=l(),wn=a("p"),hvr=o("The model class to instantiate is selected based on the "),q5e=a("code"),pvr=o("model_type"),_vr=o(` property of the config object (either
passed as an argument or loaded from `),G5e=a("code"),uvr=o("pretrained_model_name_or_path"),bvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O5e=a("code"),vvr=o("pretrained_model_name_or_path"),Tvr=o(":"),Fvr=l(),fe=a("ul"),ZF=a("li"),X5e=a("strong"),Cvr=o("albert"),Mvr=o(" \u2014 "),cX=a("a"),Evr=o("FlaxAlbertForPreTraining"),yvr=o(" (ALBERT model)"),wvr=l(),eC=a("li"),V5e=a("strong"),Avr=o("bart"),Lvr=o(" \u2014 "),fX=a("a"),Bvr=o("FlaxBartForConditionalGeneration"),xvr=o(" (BART model)"),kvr=l(),oC=a("li"),z5e=a("strong"),Rvr=o("bert"),Svr=o(" \u2014 "),mX=a("a"),Pvr=o("FlaxBertForPreTraining"),$vr=o(" (BERT model)"),Ivr=l(),rC=a("li"),W5e=a("strong"),Dvr=o("big_bird"),jvr=o(" \u2014 "),gX=a("a"),Nvr=o("FlaxBigBirdForPreTraining"),qvr=o(" (BigBird model)"),Gvr=l(),tC=a("li"),Q5e=a("strong"),Ovr=o("electra"),Xvr=o(" \u2014 "),hX=a("a"),Vvr=o("FlaxElectraForPreTraining"),zvr=o(" (ELECTRA model)"),Wvr=l(),aC=a("li"),H5e=a("strong"),Qvr=o("mbart"),Hvr=o(" \u2014 "),pX=a("a"),Uvr=o("FlaxMBartForConditionalGeneration"),Jvr=o(" (mBART model)"),Yvr=l(),nC=a("li"),U5e=a("strong"),Kvr=o("mt5"),Zvr=o(" \u2014 "),_X=a("a"),e0r=o("FlaxMT5ForConditionalGeneration"),o0r=o(" (mT5 model)"),r0r=l(),sC=a("li"),J5e=a("strong"),t0r=o("roberta"),a0r=o(" \u2014 "),uX=a("a"),n0r=o("FlaxRobertaForMaskedLM"),s0r=o(" (RoBERTa model)"),l0r=l(),lC=a("li"),Y5e=a("strong"),i0r=o("roformer"),d0r=o(" \u2014 "),bX=a("a"),c0r=o("FlaxRoFormerForMaskedLM"),f0r=o(" (RoFormer model)"),m0r=l(),iC=a("li"),K5e=a("strong"),g0r=o("t5"),h0r=o(" \u2014 "),vX=a("a"),p0r=o("FlaxT5ForConditionalGeneration"),_0r=o(" (T5 model)"),u0r=l(),dC=a("li"),Z5e=a("strong"),b0r=o("wav2vec2"),v0r=o(" \u2014 "),TX=a("a"),T0r=o("FlaxWav2Vec2ForPreTraining"),F0r=o(" (Wav2Vec2 model)"),C0r=l(),e1e=a("p"),M0r=o("Examples:"),E0r=l(),f(U6.$$.fragment),VBe=l(),Uc=a("h2"),cC=a("a"),o1e=a("span"),f(J6.$$.fragment),y0r=l(),r1e=a("span"),w0r=o("FlaxAutoModelForMaskedLM"),zBe=l(),kr=a("div"),f(Y6.$$.fragment),A0r=l(),Jc=a("p"),L0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),t1e=a("code"),B0r=o("from_pretrained()"),x0r=o("class method or the "),a1e=a("code"),k0r=o("from_config()"),R0r=o(`class
method.`),S0r=l(),K6=a("p"),P0r=o("This class cannot be instantiated directly using "),n1e=a("code"),$0r=o("__init__()"),I0r=o(" (throws an error)."),D0r=l(),Et=a("div"),f(Z6.$$.fragment),j0r=l(),s1e=a("p"),N0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),q0r=l(),Yc=a("p"),G0r=o(`Note:
Loading a model from its configuration file does `),l1e=a("strong"),O0r=o("not"),X0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),i1e=a("code"),V0r=o("from_pretrained()"),z0r=o("to load the model weights."),W0r=l(),d1e=a("p"),Q0r=o("Examples:"),H0r=l(),f(eA.$$.fragment),U0r=l(),Bo=a("div"),f(oA.$$.fragment),J0r=l(),c1e=a("p"),Y0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),K0r=l(),An=a("p"),Z0r=o("The model class to instantiate is selected based on the "),f1e=a("code"),eTr=o("model_type"),oTr=o(` property of the config object (either
passed as an argument or loaded from `),m1e=a("code"),rTr=o("pretrained_model_name_or_path"),tTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=a("code"),aTr=o("pretrained_model_name_or_path"),nTr=o(":"),sTr=l(),ve=a("ul"),fC=a("li"),h1e=a("strong"),lTr=o("albert"),iTr=o(" \u2014 "),FX=a("a"),dTr=o("FlaxAlbertForMaskedLM"),cTr=o(" (ALBERT model)"),fTr=l(),mC=a("li"),p1e=a("strong"),mTr=o("bart"),gTr=o(" \u2014 "),CX=a("a"),hTr=o("FlaxBartForConditionalGeneration"),pTr=o(" (BART model)"),_Tr=l(),gC=a("li"),_1e=a("strong"),uTr=o("bert"),bTr=o(" \u2014 "),MX=a("a"),vTr=o("FlaxBertForMaskedLM"),TTr=o(" (BERT model)"),FTr=l(),hC=a("li"),u1e=a("strong"),CTr=o("big_bird"),MTr=o(" \u2014 "),EX=a("a"),ETr=o("FlaxBigBirdForMaskedLM"),yTr=o(" (BigBird model)"),wTr=l(),pC=a("li"),b1e=a("strong"),ATr=o("distilbert"),LTr=o(" \u2014 "),yX=a("a"),BTr=o("FlaxDistilBertForMaskedLM"),xTr=o(" (DistilBERT model)"),kTr=l(),_C=a("li"),v1e=a("strong"),RTr=o("electra"),STr=o(" \u2014 "),wX=a("a"),PTr=o("FlaxElectraForMaskedLM"),$Tr=o(" (ELECTRA model)"),ITr=l(),uC=a("li"),T1e=a("strong"),DTr=o("mbart"),jTr=o(" \u2014 "),AX=a("a"),NTr=o("FlaxMBartForConditionalGeneration"),qTr=o(" (mBART model)"),GTr=l(),bC=a("li"),F1e=a("strong"),OTr=o("roberta"),XTr=o(" \u2014 "),LX=a("a"),VTr=o("FlaxRobertaForMaskedLM"),zTr=o(" (RoBERTa model)"),WTr=l(),vC=a("li"),C1e=a("strong"),QTr=o("roformer"),HTr=o(" \u2014 "),BX=a("a"),UTr=o("FlaxRoFormerForMaskedLM"),JTr=o(" (RoFormer model)"),YTr=l(),M1e=a("p"),KTr=o("Examples:"),ZTr=l(),f(rA.$$.fragment),WBe=l(),Kc=a("h2"),TC=a("a"),E1e=a("span"),f(tA.$$.fragment),e7r=l(),y1e=a("span"),o7r=o("FlaxAutoModelForSeq2SeqLM"),QBe=l(),Rr=a("div"),f(aA.$$.fragment),r7r=l(),Zc=a("p"),t7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),w1e=a("code"),a7r=o("from_pretrained()"),n7r=o("class method or the "),A1e=a("code"),s7r=o("from_config()"),l7r=o(`class
method.`),i7r=l(),nA=a("p"),d7r=o("This class cannot be instantiated directly using "),L1e=a("code"),c7r=o("__init__()"),f7r=o(" (throws an error)."),m7r=l(),yt=a("div"),f(sA.$$.fragment),g7r=l(),B1e=a("p"),h7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),p7r=l(),ef=a("p"),_7r=o(`Note:
Loading a model from its configuration file does `),x1e=a("strong"),u7r=o("not"),b7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),k1e=a("code"),v7r=o("from_pretrained()"),T7r=o("to load the model weights."),F7r=l(),R1e=a("p"),C7r=o("Examples:"),M7r=l(),f(lA.$$.fragment),E7r=l(),xo=a("div"),f(iA.$$.fragment),y7r=l(),S1e=a("p"),w7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),A7r=l(),Ln=a("p"),L7r=o("The model class to instantiate is selected based on the "),P1e=a("code"),B7r=o("model_type"),x7r=o(` property of the config object (either
passed as an argument or loaded from `),$1e=a("code"),k7r=o("pretrained_model_name_or_path"),R7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=a("code"),S7r=o("pretrained_model_name_or_path"),P7r=o(":"),$7r=l(),Te=a("ul"),FC=a("li"),D1e=a("strong"),I7r=o("bart"),D7r=o(" \u2014 "),xX=a("a"),j7r=o("FlaxBartForConditionalGeneration"),N7r=o(" (BART model)"),q7r=l(),CC=a("li"),j1e=a("strong"),G7r=o("blenderbot"),O7r=o(" \u2014 "),kX=a("a"),X7r=o("FlaxBlenderbotForConditionalGeneration"),V7r=o(" (Blenderbot model)"),z7r=l(),MC=a("li"),N1e=a("strong"),W7r=o("blenderbot-small"),Q7r=o(" \u2014 "),RX=a("a"),H7r=o("FlaxBlenderbotSmallForConditionalGeneration"),U7r=o(" (BlenderbotSmall model)"),J7r=l(),EC=a("li"),q1e=a("strong"),Y7r=o("encoder-decoder"),K7r=o(" \u2014 "),SX=a("a"),Z7r=o("FlaxEncoderDecoderModel"),eFr=o(" (Encoder decoder model)"),oFr=l(),yC=a("li"),G1e=a("strong"),rFr=o("marian"),tFr=o(" \u2014 "),PX=a("a"),aFr=o("FlaxMarianMTModel"),nFr=o(" (Marian model)"),sFr=l(),wC=a("li"),O1e=a("strong"),lFr=o("mbart"),iFr=o(" \u2014 "),$X=a("a"),dFr=o("FlaxMBartForConditionalGeneration"),cFr=o(" (mBART model)"),fFr=l(),AC=a("li"),X1e=a("strong"),mFr=o("mt5"),gFr=o(" \u2014 "),IX=a("a"),hFr=o("FlaxMT5ForConditionalGeneration"),pFr=o(" (mT5 model)"),_Fr=l(),LC=a("li"),V1e=a("strong"),uFr=o("pegasus"),bFr=o(" \u2014 "),DX=a("a"),vFr=o("FlaxPegasusForConditionalGeneration"),TFr=o(" (Pegasus model)"),FFr=l(),BC=a("li"),z1e=a("strong"),CFr=o("t5"),MFr=o(" \u2014 "),jX=a("a"),EFr=o("FlaxT5ForConditionalGeneration"),yFr=o(" (T5 model)"),wFr=l(),W1e=a("p"),AFr=o("Examples:"),LFr=l(),f(dA.$$.fragment),HBe=l(),of=a("h2"),xC=a("a"),Q1e=a("span"),f(cA.$$.fragment),BFr=l(),H1e=a("span"),xFr=o("FlaxAutoModelForSequenceClassification"),UBe=l(),Sr=a("div"),f(fA.$$.fragment),kFr=l(),rf=a("p"),RFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),U1e=a("code"),SFr=o("from_pretrained()"),PFr=o("class method or the "),J1e=a("code"),$Fr=o("from_config()"),IFr=o(`class
method.`),DFr=l(),mA=a("p"),jFr=o("This class cannot be instantiated directly using "),Y1e=a("code"),NFr=o("__init__()"),qFr=o(" (throws an error)."),GFr=l(),wt=a("div"),f(gA.$$.fragment),OFr=l(),K1e=a("p"),XFr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VFr=l(),tf=a("p"),zFr=o(`Note:
Loading a model from its configuration file does `),Z1e=a("strong"),WFr=o("not"),QFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ebe=a("code"),HFr=o("from_pretrained()"),UFr=o("to load the model weights."),JFr=l(),obe=a("p"),YFr=o("Examples:"),KFr=l(),f(hA.$$.fragment),ZFr=l(),ko=a("div"),f(pA.$$.fragment),eCr=l(),rbe=a("p"),oCr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rCr=l(),Bn=a("p"),tCr=o("The model class to instantiate is selected based on the "),tbe=a("code"),aCr=o("model_type"),nCr=o(` property of the config object (either
passed as an argument or loaded from `),abe=a("code"),sCr=o("pretrained_model_name_or_path"),lCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=a("code"),iCr=o("pretrained_model_name_or_path"),dCr=o(":"),cCr=l(),Fe=a("ul"),kC=a("li"),sbe=a("strong"),fCr=o("albert"),mCr=o(" \u2014 "),NX=a("a"),gCr=o("FlaxAlbertForSequenceClassification"),hCr=o(" (ALBERT model)"),pCr=l(),RC=a("li"),lbe=a("strong"),_Cr=o("bart"),uCr=o(" \u2014 "),qX=a("a"),bCr=o("FlaxBartForSequenceClassification"),vCr=o(" (BART model)"),TCr=l(),SC=a("li"),ibe=a("strong"),FCr=o("bert"),CCr=o(" \u2014 "),GX=a("a"),MCr=o("FlaxBertForSequenceClassification"),ECr=o(" (BERT model)"),yCr=l(),PC=a("li"),dbe=a("strong"),wCr=o("big_bird"),ACr=o(" \u2014 "),OX=a("a"),LCr=o("FlaxBigBirdForSequenceClassification"),BCr=o(" (BigBird model)"),xCr=l(),$C=a("li"),cbe=a("strong"),kCr=o("distilbert"),RCr=o(" \u2014 "),XX=a("a"),SCr=o("FlaxDistilBertForSequenceClassification"),PCr=o(" (DistilBERT model)"),$Cr=l(),IC=a("li"),fbe=a("strong"),ICr=o("electra"),DCr=o(" \u2014 "),VX=a("a"),jCr=o("FlaxElectraForSequenceClassification"),NCr=o(" (ELECTRA model)"),qCr=l(),DC=a("li"),mbe=a("strong"),GCr=o("mbart"),OCr=o(" \u2014 "),zX=a("a"),XCr=o("FlaxMBartForSequenceClassification"),VCr=o(" (mBART model)"),zCr=l(),jC=a("li"),gbe=a("strong"),WCr=o("roberta"),QCr=o(" \u2014 "),WX=a("a"),HCr=o("FlaxRobertaForSequenceClassification"),UCr=o(" (RoBERTa model)"),JCr=l(),NC=a("li"),hbe=a("strong"),YCr=o("roformer"),KCr=o(" \u2014 "),QX=a("a"),ZCr=o("FlaxRoFormerForSequenceClassification"),e4r=o(" (RoFormer model)"),o4r=l(),pbe=a("p"),r4r=o("Examples:"),t4r=l(),f(_A.$$.fragment),JBe=l(),af=a("h2"),qC=a("a"),_be=a("span"),f(uA.$$.fragment),a4r=l(),ube=a("span"),n4r=o("FlaxAutoModelForQuestionAnswering"),YBe=l(),Pr=a("div"),f(bA.$$.fragment),s4r=l(),nf=a("p"),l4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bbe=a("code"),i4r=o("from_pretrained()"),d4r=o("class method or the "),vbe=a("code"),c4r=o("from_config()"),f4r=o(`class
method.`),m4r=l(),vA=a("p"),g4r=o("This class cannot be instantiated directly using "),Tbe=a("code"),h4r=o("__init__()"),p4r=o(" (throws an error)."),_4r=l(),At=a("div"),f(TA.$$.fragment),u4r=l(),Fbe=a("p"),b4r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),v4r=l(),sf=a("p"),T4r=o(`Note:
Loading a model from its configuration file does `),Cbe=a("strong"),F4r=o("not"),C4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mbe=a("code"),M4r=o("from_pretrained()"),E4r=o("to load the model weights."),y4r=l(),Ebe=a("p"),w4r=o("Examples:"),A4r=l(),f(FA.$$.fragment),L4r=l(),Ro=a("div"),f(CA.$$.fragment),B4r=l(),ybe=a("p"),x4r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),k4r=l(),xn=a("p"),R4r=o("The model class to instantiate is selected based on the "),wbe=a("code"),S4r=o("model_type"),P4r=o(` property of the config object (either
passed as an argument or loaded from `),Abe=a("code"),$4r=o("pretrained_model_name_or_path"),I4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=a("code"),D4r=o("pretrained_model_name_or_path"),j4r=o(":"),N4r=l(),Ce=a("ul"),GC=a("li"),Bbe=a("strong"),q4r=o("albert"),G4r=o(" \u2014 "),HX=a("a"),O4r=o("FlaxAlbertForQuestionAnswering"),X4r=o(" (ALBERT model)"),V4r=l(),OC=a("li"),xbe=a("strong"),z4r=o("bart"),W4r=o(" \u2014 "),UX=a("a"),Q4r=o("FlaxBartForQuestionAnswering"),H4r=o(" (BART model)"),U4r=l(),XC=a("li"),kbe=a("strong"),J4r=o("bert"),Y4r=o(" \u2014 "),JX=a("a"),K4r=o("FlaxBertForQuestionAnswering"),Z4r=o(" (BERT model)"),eMr=l(),VC=a("li"),Rbe=a("strong"),oMr=o("big_bird"),rMr=o(" \u2014 "),YX=a("a"),tMr=o("FlaxBigBirdForQuestionAnswering"),aMr=o(" (BigBird model)"),nMr=l(),zC=a("li"),Sbe=a("strong"),sMr=o("distilbert"),lMr=o(" \u2014 "),KX=a("a"),iMr=o("FlaxDistilBertForQuestionAnswering"),dMr=o(" (DistilBERT model)"),cMr=l(),WC=a("li"),Pbe=a("strong"),fMr=o("electra"),mMr=o(" \u2014 "),ZX=a("a"),gMr=o("FlaxElectraForQuestionAnswering"),hMr=o(" (ELECTRA model)"),pMr=l(),QC=a("li"),$be=a("strong"),_Mr=o("mbart"),uMr=o(" \u2014 "),eV=a("a"),bMr=o("FlaxMBartForQuestionAnswering"),vMr=o(" (mBART model)"),TMr=l(),HC=a("li"),Ibe=a("strong"),FMr=o("roberta"),CMr=o(" \u2014 "),oV=a("a"),MMr=o("FlaxRobertaForQuestionAnswering"),EMr=o(" (RoBERTa model)"),yMr=l(),UC=a("li"),Dbe=a("strong"),wMr=o("roformer"),AMr=o(" \u2014 "),rV=a("a"),LMr=o("FlaxRoFormerForQuestionAnswering"),BMr=o(" (RoFormer model)"),xMr=l(),jbe=a("p"),kMr=o("Examples:"),RMr=l(),f(MA.$$.fragment),KBe=l(),lf=a("h2"),JC=a("a"),Nbe=a("span"),f(EA.$$.fragment),SMr=l(),qbe=a("span"),PMr=o("FlaxAutoModelForTokenClassification"),ZBe=l(),$r=a("div"),f(yA.$$.fragment),$Mr=l(),df=a("p"),IMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Gbe=a("code"),DMr=o("from_pretrained()"),jMr=o("class method or the "),Obe=a("code"),NMr=o("from_config()"),qMr=o(`class
method.`),GMr=l(),wA=a("p"),OMr=o("This class cannot be instantiated directly using "),Xbe=a("code"),XMr=o("__init__()"),VMr=o(" (throws an error)."),zMr=l(),Lt=a("div"),f(AA.$$.fragment),WMr=l(),Vbe=a("p"),QMr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),HMr=l(),cf=a("p"),UMr=o(`Note:
Loading a model from its configuration file does `),zbe=a("strong"),JMr=o("not"),YMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wbe=a("code"),KMr=o("from_pretrained()"),ZMr=o("to load the model weights."),eEr=l(),Qbe=a("p"),oEr=o("Examples:"),rEr=l(),f(LA.$$.fragment),tEr=l(),So=a("div"),f(BA.$$.fragment),aEr=l(),Hbe=a("p"),nEr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sEr=l(),kn=a("p"),lEr=o("The model class to instantiate is selected based on the "),Ube=a("code"),iEr=o("model_type"),dEr=o(` property of the config object (either
passed as an argument or loaded from `),Jbe=a("code"),cEr=o("pretrained_model_name_or_path"),fEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=a("code"),mEr=o("pretrained_model_name_or_path"),gEr=o(":"),hEr=l(),so=a("ul"),YC=a("li"),Kbe=a("strong"),pEr=o("albert"),_Er=o(" \u2014 "),tV=a("a"),uEr=o("FlaxAlbertForTokenClassification"),bEr=o(" (ALBERT model)"),vEr=l(),KC=a("li"),Zbe=a("strong"),TEr=o("bert"),FEr=o(" \u2014 "),aV=a("a"),CEr=o("FlaxBertForTokenClassification"),MEr=o(" (BERT model)"),EEr=l(),ZC=a("li"),e2e=a("strong"),yEr=o("big_bird"),wEr=o(" \u2014 "),nV=a("a"),AEr=o("FlaxBigBirdForTokenClassification"),LEr=o(" (BigBird model)"),BEr=l(),e4=a("li"),o2e=a("strong"),xEr=o("distilbert"),kEr=o(" \u2014 "),sV=a("a"),REr=o("FlaxDistilBertForTokenClassification"),SEr=o(" (DistilBERT model)"),PEr=l(),o4=a("li"),r2e=a("strong"),$Er=o("electra"),IEr=o(" \u2014 "),lV=a("a"),DEr=o("FlaxElectraForTokenClassification"),jEr=o(" (ELECTRA model)"),NEr=l(),r4=a("li"),t2e=a("strong"),qEr=o("roberta"),GEr=o(" \u2014 "),iV=a("a"),OEr=o("FlaxRobertaForTokenClassification"),XEr=o(" (RoBERTa model)"),VEr=l(),t4=a("li"),a2e=a("strong"),zEr=o("roformer"),WEr=o(" \u2014 "),dV=a("a"),QEr=o("FlaxRoFormerForTokenClassification"),HEr=o(" (RoFormer model)"),UEr=l(),n2e=a("p"),JEr=o("Examples:"),YEr=l(),f(xA.$$.fragment),exe=l(),ff=a("h2"),a4=a("a"),s2e=a("span"),f(kA.$$.fragment),KEr=l(),l2e=a("span"),ZEr=o("FlaxAutoModelForMultipleChoice"),oxe=l(),Ir=a("div"),f(RA.$$.fragment),e3r=l(),mf=a("p"),o3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),i2e=a("code"),r3r=o("from_pretrained()"),t3r=o("class method or the "),d2e=a("code"),a3r=o("from_config()"),n3r=o(`class
method.`),s3r=l(),SA=a("p"),l3r=o("This class cannot be instantiated directly using "),c2e=a("code"),i3r=o("__init__()"),d3r=o(" (throws an error)."),c3r=l(),Bt=a("div"),f(PA.$$.fragment),f3r=l(),f2e=a("p"),m3r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),g3r=l(),gf=a("p"),h3r=o(`Note:
Loading a model from its configuration file does `),m2e=a("strong"),p3r=o("not"),_3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),g2e=a("code"),u3r=o("from_pretrained()"),b3r=o("to load the model weights."),v3r=l(),h2e=a("p"),T3r=o("Examples:"),F3r=l(),f($A.$$.fragment),C3r=l(),Po=a("div"),f(IA.$$.fragment),M3r=l(),p2e=a("p"),E3r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),y3r=l(),Rn=a("p"),w3r=o("The model class to instantiate is selected based on the "),_2e=a("code"),A3r=o("model_type"),L3r=o(` property of the config object (either
passed as an argument or loaded from `),u2e=a("code"),B3r=o("pretrained_model_name_or_path"),x3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b2e=a("code"),k3r=o("pretrained_model_name_or_path"),R3r=o(":"),S3r=l(),lo=a("ul"),n4=a("li"),v2e=a("strong"),P3r=o("albert"),$3r=o(" \u2014 "),cV=a("a"),I3r=o("FlaxAlbertForMultipleChoice"),D3r=o(" (ALBERT model)"),j3r=l(),s4=a("li"),T2e=a("strong"),N3r=o("bert"),q3r=o(" \u2014 "),fV=a("a"),G3r=o("FlaxBertForMultipleChoice"),O3r=o(" (BERT model)"),X3r=l(),l4=a("li"),F2e=a("strong"),V3r=o("big_bird"),z3r=o(" \u2014 "),mV=a("a"),W3r=o("FlaxBigBirdForMultipleChoice"),Q3r=o(" (BigBird model)"),H3r=l(),i4=a("li"),C2e=a("strong"),U3r=o("distilbert"),J3r=o(" \u2014 "),gV=a("a"),Y3r=o("FlaxDistilBertForMultipleChoice"),K3r=o(" (DistilBERT model)"),Z3r=l(),d4=a("li"),M2e=a("strong"),eyr=o("electra"),oyr=o(" \u2014 "),hV=a("a"),ryr=o("FlaxElectraForMultipleChoice"),tyr=o(" (ELECTRA model)"),ayr=l(),c4=a("li"),E2e=a("strong"),nyr=o("roberta"),syr=o(" \u2014 "),pV=a("a"),lyr=o("FlaxRobertaForMultipleChoice"),iyr=o(" (RoBERTa model)"),dyr=l(),f4=a("li"),y2e=a("strong"),cyr=o("roformer"),fyr=o(" \u2014 "),_V=a("a"),myr=o("FlaxRoFormerForMultipleChoice"),gyr=o(" (RoFormer model)"),hyr=l(),w2e=a("p"),pyr=o("Examples:"),_yr=l(),f(DA.$$.fragment),rxe=l(),hf=a("h2"),m4=a("a"),A2e=a("span"),f(jA.$$.fragment),uyr=l(),L2e=a("span"),byr=o("FlaxAutoModelForNextSentencePrediction"),txe=l(),Dr=a("div"),f(NA.$$.fragment),vyr=l(),pf=a("p"),Tyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),B2e=a("code"),Fyr=o("from_pretrained()"),Cyr=o("class method or the "),x2e=a("code"),Myr=o("from_config()"),Eyr=o(`class
method.`),yyr=l(),qA=a("p"),wyr=o("This class cannot be instantiated directly using "),k2e=a("code"),Ayr=o("__init__()"),Lyr=o(" (throws an error)."),Byr=l(),xt=a("div"),f(GA.$$.fragment),xyr=l(),R2e=a("p"),kyr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ryr=l(),_f=a("p"),Syr=o(`Note:
Loading a model from its configuration file does `),S2e=a("strong"),Pyr=o("not"),$yr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),P2e=a("code"),Iyr=o("from_pretrained()"),Dyr=o("to load the model weights."),jyr=l(),$2e=a("p"),Nyr=o("Examples:"),qyr=l(),f(OA.$$.fragment),Gyr=l(),$o=a("div"),f(XA.$$.fragment),Oyr=l(),I2e=a("p"),Xyr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Vyr=l(),Sn=a("p"),zyr=o("The model class to instantiate is selected based on the "),D2e=a("code"),Wyr=o("model_type"),Qyr=o(` property of the config object (either
passed as an argument or loaded from `),j2e=a("code"),Hyr=o("pretrained_model_name_or_path"),Uyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=a("code"),Jyr=o("pretrained_model_name_or_path"),Yyr=o(":"),Kyr=l(),q2e=a("ul"),g4=a("li"),G2e=a("strong"),Zyr=o("bert"),ewr=o(" \u2014 "),uV=a("a"),owr=o("FlaxBertForNextSentencePrediction"),rwr=o(" (BERT model)"),twr=l(),O2e=a("p"),awr=o("Examples:"),nwr=l(),f(VA.$$.fragment),axe=l(),uf=a("h2"),h4=a("a"),X2e=a("span"),f(zA.$$.fragment),swr=l(),V2e=a("span"),lwr=o("FlaxAutoModelForImageClassification"),nxe=l(),jr=a("div"),f(WA.$$.fragment),iwr=l(),bf=a("p"),dwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),z2e=a("code"),cwr=o("from_pretrained()"),fwr=o("class method or the "),W2e=a("code"),mwr=o("from_config()"),gwr=o(`class
method.`),hwr=l(),QA=a("p"),pwr=o("This class cannot be instantiated directly using "),Q2e=a("code"),_wr=o("__init__()"),uwr=o(" (throws an error)."),bwr=l(),kt=a("div"),f(HA.$$.fragment),vwr=l(),H2e=a("p"),Twr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Fwr=l(),vf=a("p"),Cwr=o(`Note:
Loading a model from its configuration file does `),U2e=a("strong"),Mwr=o("not"),Ewr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),J2e=a("code"),ywr=o("from_pretrained()"),wwr=o("to load the model weights."),Awr=l(),Y2e=a("p"),Lwr=o("Examples:"),Bwr=l(),f(UA.$$.fragment),xwr=l(),Io=a("div"),f(JA.$$.fragment),kwr=l(),K2e=a("p"),Rwr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Swr=l(),Pn=a("p"),Pwr=o("The model class to instantiate is selected based on the "),Z2e=a("code"),$wr=o("model_type"),Iwr=o(` property of the config object (either
passed as an argument or loaded from `),eve=a("code"),Dwr=o("pretrained_model_name_or_path"),jwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=a("code"),Nwr=o("pretrained_model_name_or_path"),qwr=o(":"),Gwr=l(),YA=a("ul"),p4=a("li"),rve=a("strong"),Owr=o("beit"),Xwr=o(" \u2014 "),bV=a("a"),Vwr=o("FlaxBeitForImageClassification"),zwr=o(" (BEiT model)"),Wwr=l(),_4=a("li"),tve=a("strong"),Qwr=o("vit"),Hwr=o(" \u2014 "),vV=a("a"),Uwr=o("FlaxViTForImageClassification"),Jwr=o(" (ViT model)"),Ywr=l(),ave=a("p"),Kwr=o("Examples:"),Zwr=l(),f(KA.$$.fragment),sxe=l(),Tf=a("h2"),u4=a("a"),nve=a("span"),f(ZA.$$.fragment),e6r=l(),sve=a("span"),o6r=o("FlaxAutoModelForVision2Seq"),lxe=l(),Nr=a("div"),f(eL.$$.fragment),r6r=l(),Ff=a("p"),t6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),lve=a("code"),a6r=o("from_pretrained()"),n6r=o("class method or the "),ive=a("code"),s6r=o("from_config()"),l6r=o(`class
method.`),i6r=l(),oL=a("p"),d6r=o("This class cannot be instantiated directly using "),dve=a("code"),c6r=o("__init__()"),f6r=o(" (throws an error)."),m6r=l(),Rt=a("div"),f(rL.$$.fragment),g6r=l(),cve=a("p"),h6r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),p6r=l(),Cf=a("p"),_6r=o(`Note:
Loading a model from its configuration file does `),fve=a("strong"),u6r=o("not"),b6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mve=a("code"),v6r=o("from_pretrained()"),T6r=o("to load the model weights."),F6r=l(),gve=a("p"),C6r=o("Examples:"),M6r=l(),f(tL.$$.fragment),E6r=l(),Do=a("div"),f(aL.$$.fragment),y6r=l(),hve=a("p"),w6r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),A6r=l(),$n=a("p"),L6r=o("The model class to instantiate is selected based on the "),pve=a("code"),B6r=o("model_type"),x6r=o(` property of the config object (either
passed as an argument or loaded from `),_ve=a("code"),k6r=o("pretrained_model_name_or_path"),R6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=a("code"),S6r=o("pretrained_model_name_or_path"),P6r=o(":"),$6r=l(),bve=a("ul"),b4=a("li"),vve=a("strong"),I6r=o("vision-encoder-decoder"),D6r=o(" \u2014 "),TV=a("a"),j6r=o("FlaxVisionEncoderDecoderModel"),N6r=o(" (Vision Encoder decoder model)"),q6r=l(),Tve=a("p"),G6r=o("Examples:"),O6r=l(),f(nL.$$.fragment),this.h()},l(d){const u=M1t('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),Be=i(d),ie=n(d,"H1",{class:!0});var sL=s(ie);me=n(sL,"A",{id:!0,class:!0,href:!0});var Fve=s(me);no=n(Fve,"SPAN",{});var Cve=s(no);m(ce.$$.fragment,Cve),Cve.forEach(t),Fve.forEach(t),ue=i(sL),Go=n(sL,"SPAN",{});var V6r=s(Go);Li=r(V6r,"Auto Classes"),V6r.forEach(t),sL.forEach(t),Ef=i(d),sa=n(d,"P",{});var dxe=s(sa);Bi=r(dxe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=n(dxe,"CODE",{});var z6r=s(xi);bM=r(z6r,"from_pretrained()"),z6r.forEach(t),yf=r(dxe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),dxe.forEach(t),ye=i(d),io=n(d,"P",{});var v4=s(io);ki=r(v4,"Instantiating one of "),In=n(v4,"A",{href:!0});var W6r=s(In);vM=r(W6r,"AutoConfig"),W6r.forEach(t),Dn=r(v4,", "),jn=n(v4,"A",{href:!0});var Q6r=s(jn);TM=r(Q6r,"AutoModel"),Q6r.forEach(t),Ri=r(v4,`, and
`),Nn=n(v4,"A",{href:!0});var H6r=s(Nn);FM=r(H6r,"AutoTokenizer"),H6r.forEach(t),Si=r(v4," will directly create a class of the relevant architecture. For instance"),v4.forEach(t),wf=i(d),m($a.$$.fragment,d),co=i(d),ge=n(d,"P",{});var cxe=s(ge);r8=r(cxe,"will create a model that is an instance of "),Pi=n(cxe,"A",{href:!0});var U6r=s(Pi);t8=r(U6r,"BertModel"),U6r.forEach(t),a8=r(cxe,"."),cxe.forEach(t),Oo=i(d),Ia=n(d,"P",{});var fxe=s(Ia);n8=r(fxe,"There is one class of "),Af=n(fxe,"CODE",{});var J6r=s(Af);s8=r(J6r,"AutoModel"),J6r.forEach(t),bRe=r(fxe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),fxe.forEach(t),d9e=i(d),$i=n(d,"H2",{class:!0});var mxe=s($i);Lf=n(mxe,"A",{id:!0,class:!0,href:!0});var Y6r=s(Lf);fW=n(Y6r,"SPAN",{});var K6r=s(fW);m(CM.$$.fragment,K6r),K6r.forEach(t),Y6r.forEach(t),vRe=i(mxe),mW=n(mxe,"SPAN",{});var Z6r=s(mW);TRe=r(Z6r,"Extending the Auto Classes"),Z6r.forEach(t),mxe.forEach(t),c9e=i(d),qn=n(d,"P",{});var FV=s(qn);FRe=r(FV,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),gW=n(FV,"CODE",{});var eAr=s(gW);CRe=r(eAr,"NewModel"),eAr.forEach(t),MRe=r(FV,", make sure you have a "),hW=n(FV,"CODE",{});var oAr=s(hW);ERe=r(oAr,"NewModelConfig"),oAr.forEach(t),yRe=r(FV,` then you can add those to the auto
classes like this:`),FV.forEach(t),f9e=i(d),m(MM.$$.fragment,d),m9e=i(d),l8=n(d,"P",{});var rAr=s(l8);wRe=r(rAr,"You will then be able to use the auto classes like you would usually do!"),rAr.forEach(t),g9e=i(d),m(Bf.$$.fragment,d),h9e=i(d),Ii=n(d,"H2",{class:!0});var gxe=s(Ii);xf=n(gxe,"A",{id:!0,class:!0,href:!0});var tAr=s(xf);pW=n(tAr,"SPAN",{});var aAr=s(pW);m(EM.$$.fragment,aAr),aAr.forEach(t),tAr.forEach(t),ARe=i(gxe),_W=n(gxe,"SPAN",{});var nAr=s(_W);LRe=r(nAr,"AutoConfig"),nAr.forEach(t),gxe.forEach(t),p9e=i(d),Xo=n(d,"DIV",{class:!0});var Is=s(Xo);m(yM.$$.fragment,Is),BRe=i(Is),wM=n(Is,"P",{});var hxe=s(wM);xRe=r(hxe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),i8=n(hxe,"A",{href:!0});var sAr=s(i8);kRe=r(sAr,"from_pretrained()"),sAr.forEach(t),RRe=r(hxe," class method."),hxe.forEach(t),SRe=i(Is),AM=n(Is,"P",{});var pxe=s(AM);PRe=r(pxe,"This class cannot be instantiated directly using "),uW=n(pxe,"CODE",{});var lAr=s(uW);$Re=r(lAr,"__init__()"),lAr.forEach(t),IRe=r(pxe," (throws an error)."),pxe.forEach(t),DRe=i(Is),fo=n(Is,"DIV",{class:!0});var ia=s(fo);m(LM.$$.fragment,ia),jRe=i(ia),bW=n(ia,"P",{});var iAr=s(bW);NRe=r(iAr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),iAr.forEach(t),qRe=i(ia),Di=n(ia,"P",{});var CV=s(Di);GRe=r(CV,"The configuration class to instantiate is selected based on the "),vW=n(CV,"CODE",{});var dAr=s(vW);ORe=r(dAr,"model_type"),dAr.forEach(t),XRe=r(CV,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),TW=n(CV,"CODE",{});var cAr=s(TW);VRe=r(cAr,"pretrained_model_name_or_path"),cAr.forEach(t),zRe=r(CV,":"),CV.forEach(t),WRe=i(ia),v=n(ia,"UL",{});var T=s(v);kf=n(T,"LI",{});var Mve=s(kf);FW=n(Mve,"STRONG",{});var fAr=s(FW);QRe=r(fAr,"albert"),fAr.forEach(t),HRe=r(Mve," \u2014 "),d8=n(Mve,"A",{href:!0});var mAr=s(d8);URe=r(mAr,"AlbertConfig"),mAr.forEach(t),JRe=r(Mve," (ALBERT model)"),Mve.forEach(t),YRe=i(T),Rf=n(T,"LI",{});var Eve=s(Rf);CW=n(Eve,"STRONG",{});var gAr=s(CW);KRe=r(gAr,"bart"),gAr.forEach(t),ZRe=r(Eve," \u2014 "),c8=n(Eve,"A",{href:!0});var hAr=s(c8);eSe=r(hAr,"BartConfig"),hAr.forEach(t),oSe=r(Eve," (BART model)"),Eve.forEach(t),rSe=i(T),Sf=n(T,"LI",{});var yve=s(Sf);MW=n(yve,"STRONG",{});var pAr=s(MW);tSe=r(pAr,"beit"),pAr.forEach(t),aSe=r(yve," \u2014 "),f8=n(yve,"A",{href:!0});var _Ar=s(f8);nSe=r(_Ar,"BeitConfig"),_Ar.forEach(t),sSe=r(yve," (BEiT model)"),yve.forEach(t),lSe=i(T),Pf=n(T,"LI",{});var wve=s(Pf);EW=n(wve,"STRONG",{});var uAr=s(EW);iSe=r(uAr,"bert"),uAr.forEach(t),dSe=r(wve," \u2014 "),m8=n(wve,"A",{href:!0});var bAr=s(m8);cSe=r(bAr,"BertConfig"),bAr.forEach(t),fSe=r(wve," (BERT model)"),wve.forEach(t),mSe=i(T),$f=n(T,"LI",{});var Ave=s($f);yW=n(Ave,"STRONG",{});var vAr=s(yW);gSe=r(vAr,"bert-generation"),vAr.forEach(t),hSe=r(Ave," \u2014 "),g8=n(Ave,"A",{href:!0});var TAr=s(g8);pSe=r(TAr,"BertGenerationConfig"),TAr.forEach(t),_Se=r(Ave," (Bert Generation model)"),Ave.forEach(t),uSe=i(T),If=n(T,"LI",{});var Lve=s(If);wW=n(Lve,"STRONG",{});var FAr=s(wW);bSe=r(FAr,"big_bird"),FAr.forEach(t),vSe=r(Lve," \u2014 "),h8=n(Lve,"A",{href:!0});var CAr=s(h8);TSe=r(CAr,"BigBirdConfig"),CAr.forEach(t),FSe=r(Lve," (BigBird model)"),Lve.forEach(t),CSe=i(T),Df=n(T,"LI",{});var Bve=s(Df);AW=n(Bve,"STRONG",{});var MAr=s(AW);MSe=r(MAr,"bigbird_pegasus"),MAr.forEach(t),ESe=r(Bve," \u2014 "),p8=n(Bve,"A",{href:!0});var EAr=s(p8);ySe=r(EAr,"BigBirdPegasusConfig"),EAr.forEach(t),wSe=r(Bve," (BigBirdPegasus model)"),Bve.forEach(t),ASe=i(T),jf=n(T,"LI",{});var xve=s(jf);LW=n(xve,"STRONG",{});var yAr=s(LW);LSe=r(yAr,"blenderbot"),yAr.forEach(t),BSe=r(xve," \u2014 "),_8=n(xve,"A",{href:!0});var wAr=s(_8);xSe=r(wAr,"BlenderbotConfig"),wAr.forEach(t),kSe=r(xve," (Blenderbot model)"),xve.forEach(t),RSe=i(T),Nf=n(T,"LI",{});var kve=s(Nf);BW=n(kve,"STRONG",{});var AAr=s(BW);SSe=r(AAr,"blenderbot-small"),AAr.forEach(t),PSe=r(kve," \u2014 "),u8=n(kve,"A",{href:!0});var LAr=s(u8);$Se=r(LAr,"BlenderbotSmallConfig"),LAr.forEach(t),ISe=r(kve," (BlenderbotSmall model)"),kve.forEach(t),DSe=i(T),qf=n(T,"LI",{});var Rve=s(qf);xW=n(Rve,"STRONG",{});var BAr=s(xW);jSe=r(BAr,"camembert"),BAr.forEach(t),NSe=r(Rve," \u2014 "),b8=n(Rve,"A",{href:!0});var xAr=s(b8);qSe=r(xAr,"CamembertConfig"),xAr.forEach(t),GSe=r(Rve," (CamemBERT model)"),Rve.forEach(t),OSe=i(T),Gf=n(T,"LI",{});var Sve=s(Gf);kW=n(Sve,"STRONG",{});var kAr=s(kW);XSe=r(kAr,"canine"),kAr.forEach(t),VSe=r(Sve," \u2014 "),v8=n(Sve,"A",{href:!0});var RAr=s(v8);zSe=r(RAr,"CanineConfig"),RAr.forEach(t),WSe=r(Sve," (Canine model)"),Sve.forEach(t),QSe=i(T),Of=n(T,"LI",{});var Pve=s(Of);RW=n(Pve,"STRONG",{});var SAr=s(RW);HSe=r(SAr,"clip"),SAr.forEach(t),USe=r(Pve," \u2014 "),T8=n(Pve,"A",{href:!0});var PAr=s(T8);JSe=r(PAr,"CLIPConfig"),PAr.forEach(t),YSe=r(Pve," (CLIP model)"),Pve.forEach(t),KSe=i(T),Xf=n(T,"LI",{});var $ve=s(Xf);SW=n($ve,"STRONG",{});var $Ar=s(SW);ZSe=r($Ar,"convbert"),$Ar.forEach(t),ePe=r($ve," \u2014 "),F8=n($ve,"A",{href:!0});var IAr=s(F8);oPe=r(IAr,"ConvBertConfig"),IAr.forEach(t),rPe=r($ve," (ConvBERT model)"),$ve.forEach(t),tPe=i(T),Vf=n(T,"LI",{});var Ive=s(Vf);PW=n(Ive,"STRONG",{});var DAr=s(PW);aPe=r(DAr,"convnext"),DAr.forEach(t),nPe=r(Ive," \u2014 "),C8=n(Ive,"A",{href:!0});var jAr=s(C8);sPe=r(jAr,"ConvNextConfig"),jAr.forEach(t),lPe=r(Ive," (ConvNext model)"),Ive.forEach(t),iPe=i(T),zf=n(T,"LI",{});var Dve=s(zf);$W=n(Dve,"STRONG",{});var NAr=s($W);dPe=r(NAr,"ctrl"),NAr.forEach(t),cPe=r(Dve," \u2014 "),M8=n(Dve,"A",{href:!0});var qAr=s(M8);fPe=r(qAr,"CTRLConfig"),qAr.forEach(t),mPe=r(Dve," (CTRL model)"),Dve.forEach(t),gPe=i(T),Wf=n(T,"LI",{});var jve=s(Wf);IW=n(jve,"STRONG",{});var GAr=s(IW);hPe=r(GAr,"data2vec-audio"),GAr.forEach(t),pPe=r(jve," \u2014 "),E8=n(jve,"A",{href:!0});var OAr=s(E8);_Pe=r(OAr,"Data2VecAudioConfig"),OAr.forEach(t),uPe=r(jve," (Data2VecAudio model)"),jve.forEach(t),bPe=i(T),Qf=n(T,"LI",{});var Nve=s(Qf);DW=n(Nve,"STRONG",{});var XAr=s(DW);vPe=r(XAr,"data2vec-text"),XAr.forEach(t),TPe=r(Nve," \u2014 "),y8=n(Nve,"A",{href:!0});var VAr=s(y8);FPe=r(VAr,"Data2VecTextConfig"),VAr.forEach(t),CPe=r(Nve," (Data2VecText model)"),Nve.forEach(t),MPe=i(T),Hf=n(T,"LI",{});var qve=s(Hf);jW=n(qve,"STRONG",{});var zAr=s(jW);EPe=r(zAr,"deberta"),zAr.forEach(t),yPe=r(qve," \u2014 "),w8=n(qve,"A",{href:!0});var WAr=s(w8);wPe=r(WAr,"DebertaConfig"),WAr.forEach(t),APe=r(qve," (DeBERTa model)"),qve.forEach(t),LPe=i(T),Uf=n(T,"LI",{});var Gve=s(Uf);NW=n(Gve,"STRONG",{});var QAr=s(NW);BPe=r(QAr,"deberta-v2"),QAr.forEach(t),xPe=r(Gve," \u2014 "),A8=n(Gve,"A",{href:!0});var HAr=s(A8);kPe=r(HAr,"DebertaV2Config"),HAr.forEach(t),RPe=r(Gve," (DeBERTa-v2 model)"),Gve.forEach(t),SPe=i(T),Jf=n(T,"LI",{});var Ove=s(Jf);qW=n(Ove,"STRONG",{});var UAr=s(qW);PPe=r(UAr,"deit"),UAr.forEach(t),$Pe=r(Ove," \u2014 "),L8=n(Ove,"A",{href:!0});var JAr=s(L8);IPe=r(JAr,"DeiTConfig"),JAr.forEach(t),DPe=r(Ove," (DeiT model)"),Ove.forEach(t),jPe=i(T),Yf=n(T,"LI",{});var Xve=s(Yf);GW=n(Xve,"STRONG",{});var YAr=s(GW);NPe=r(YAr,"detr"),YAr.forEach(t),qPe=r(Xve," \u2014 "),B8=n(Xve,"A",{href:!0});var KAr=s(B8);GPe=r(KAr,"DetrConfig"),KAr.forEach(t),OPe=r(Xve," (DETR model)"),Xve.forEach(t),XPe=i(T),Kf=n(T,"LI",{});var Vve=s(Kf);OW=n(Vve,"STRONG",{});var ZAr=s(OW);VPe=r(ZAr,"distilbert"),ZAr.forEach(t),zPe=r(Vve," \u2014 "),x8=n(Vve,"A",{href:!0});var eLr=s(x8);WPe=r(eLr,"DistilBertConfig"),eLr.forEach(t),QPe=r(Vve," (DistilBERT model)"),Vve.forEach(t),HPe=i(T),Zf=n(T,"LI",{});var zve=s(Zf);XW=n(zve,"STRONG",{});var oLr=s(XW);UPe=r(oLr,"dpr"),oLr.forEach(t),JPe=r(zve," \u2014 "),k8=n(zve,"A",{href:!0});var rLr=s(k8);YPe=r(rLr,"DPRConfig"),rLr.forEach(t),KPe=r(zve," (DPR model)"),zve.forEach(t),ZPe=i(T),em=n(T,"LI",{});var Wve=s(em);VW=n(Wve,"STRONG",{});var tLr=s(VW);e$e=r(tLr,"electra"),tLr.forEach(t),o$e=r(Wve," \u2014 "),R8=n(Wve,"A",{href:!0});var aLr=s(R8);r$e=r(aLr,"ElectraConfig"),aLr.forEach(t),t$e=r(Wve," (ELECTRA model)"),Wve.forEach(t),a$e=i(T),om=n(T,"LI",{});var Qve=s(om);zW=n(Qve,"STRONG",{});var nLr=s(zW);n$e=r(nLr,"encoder-decoder"),nLr.forEach(t),s$e=r(Qve," \u2014 "),S8=n(Qve,"A",{href:!0});var sLr=s(S8);l$e=r(sLr,"EncoderDecoderConfig"),sLr.forEach(t),i$e=r(Qve," (Encoder decoder model)"),Qve.forEach(t),d$e=i(T),rm=n(T,"LI",{});var Hve=s(rm);WW=n(Hve,"STRONG",{});var lLr=s(WW);c$e=r(lLr,"flaubert"),lLr.forEach(t),f$e=r(Hve," \u2014 "),P8=n(Hve,"A",{href:!0});var iLr=s(P8);m$e=r(iLr,"FlaubertConfig"),iLr.forEach(t),g$e=r(Hve," (FlauBERT model)"),Hve.forEach(t),h$e=i(T),tm=n(T,"LI",{});var Uve=s(tm);QW=n(Uve,"STRONG",{});var dLr=s(QW);p$e=r(dLr,"fnet"),dLr.forEach(t),_$e=r(Uve," \u2014 "),$8=n(Uve,"A",{href:!0});var cLr=s($8);u$e=r(cLr,"FNetConfig"),cLr.forEach(t),b$e=r(Uve," (FNet model)"),Uve.forEach(t),v$e=i(T),am=n(T,"LI",{});var Jve=s(am);HW=n(Jve,"STRONG",{});var fLr=s(HW);T$e=r(fLr,"fsmt"),fLr.forEach(t),F$e=r(Jve," \u2014 "),I8=n(Jve,"A",{href:!0});var mLr=s(I8);C$e=r(mLr,"FSMTConfig"),mLr.forEach(t),M$e=r(Jve," (FairSeq Machine-Translation model)"),Jve.forEach(t),E$e=i(T),nm=n(T,"LI",{});var Yve=s(nm);UW=n(Yve,"STRONG",{});var gLr=s(UW);y$e=r(gLr,"funnel"),gLr.forEach(t),w$e=r(Yve," \u2014 "),D8=n(Yve,"A",{href:!0});var hLr=s(D8);A$e=r(hLr,"FunnelConfig"),hLr.forEach(t),L$e=r(Yve," (Funnel Transformer model)"),Yve.forEach(t),B$e=i(T),sm=n(T,"LI",{});var Kve=s(sm);JW=n(Kve,"STRONG",{});var pLr=s(JW);x$e=r(pLr,"gpt2"),pLr.forEach(t),k$e=r(Kve," \u2014 "),j8=n(Kve,"A",{href:!0});var _Lr=s(j8);R$e=r(_Lr,"GPT2Config"),_Lr.forEach(t),S$e=r(Kve," (OpenAI GPT-2 model)"),Kve.forEach(t),P$e=i(T),lm=n(T,"LI",{});var Zve=s(lm);YW=n(Zve,"STRONG",{});var uLr=s(YW);$$e=r(uLr,"gpt_neo"),uLr.forEach(t),I$e=r(Zve," \u2014 "),N8=n(Zve,"A",{href:!0});var bLr=s(N8);D$e=r(bLr,"GPTNeoConfig"),bLr.forEach(t),j$e=r(Zve," (GPT Neo model)"),Zve.forEach(t),N$e=i(T),im=n(T,"LI",{});var e0e=s(im);KW=n(e0e,"STRONG",{});var vLr=s(KW);q$e=r(vLr,"gptj"),vLr.forEach(t),G$e=r(e0e," \u2014 "),q8=n(e0e,"A",{href:!0});var TLr=s(q8);O$e=r(TLr,"GPTJConfig"),TLr.forEach(t),X$e=r(e0e," (GPT-J model)"),e0e.forEach(t),V$e=i(T),dm=n(T,"LI",{});var o0e=s(dm);ZW=n(o0e,"STRONG",{});var FLr=s(ZW);z$e=r(FLr,"hubert"),FLr.forEach(t),W$e=r(o0e," \u2014 "),G8=n(o0e,"A",{href:!0});var CLr=s(G8);Q$e=r(CLr,"HubertConfig"),CLr.forEach(t),H$e=r(o0e," (Hubert model)"),o0e.forEach(t),U$e=i(T),cm=n(T,"LI",{});var r0e=s(cm);eQ=n(r0e,"STRONG",{});var MLr=s(eQ);J$e=r(MLr,"ibert"),MLr.forEach(t),Y$e=r(r0e," \u2014 "),O8=n(r0e,"A",{href:!0});var ELr=s(O8);K$e=r(ELr,"IBertConfig"),ELr.forEach(t),Z$e=r(r0e," (I-BERT model)"),r0e.forEach(t),eIe=i(T),fm=n(T,"LI",{});var t0e=s(fm);oQ=n(t0e,"STRONG",{});var yLr=s(oQ);oIe=r(yLr,"imagegpt"),yLr.forEach(t),rIe=r(t0e," \u2014 "),X8=n(t0e,"A",{href:!0});var wLr=s(X8);tIe=r(wLr,"ImageGPTConfig"),wLr.forEach(t),aIe=r(t0e," (ImageGPT model)"),t0e.forEach(t),nIe=i(T),mm=n(T,"LI",{});var a0e=s(mm);rQ=n(a0e,"STRONG",{});var ALr=s(rQ);sIe=r(ALr,"layoutlm"),ALr.forEach(t),lIe=r(a0e," \u2014 "),V8=n(a0e,"A",{href:!0});var LLr=s(V8);iIe=r(LLr,"LayoutLMConfig"),LLr.forEach(t),dIe=r(a0e," (LayoutLM model)"),a0e.forEach(t),cIe=i(T),gm=n(T,"LI",{});var n0e=s(gm);tQ=n(n0e,"STRONG",{});var BLr=s(tQ);fIe=r(BLr,"layoutlmv2"),BLr.forEach(t),mIe=r(n0e," \u2014 "),z8=n(n0e,"A",{href:!0});var xLr=s(z8);gIe=r(xLr,"LayoutLMv2Config"),xLr.forEach(t),hIe=r(n0e," (LayoutLMv2 model)"),n0e.forEach(t),pIe=i(T),hm=n(T,"LI",{});var s0e=s(hm);aQ=n(s0e,"STRONG",{});var kLr=s(aQ);_Ie=r(kLr,"led"),kLr.forEach(t),uIe=r(s0e," \u2014 "),W8=n(s0e,"A",{href:!0});var RLr=s(W8);bIe=r(RLr,"LEDConfig"),RLr.forEach(t),vIe=r(s0e," (LED model)"),s0e.forEach(t),TIe=i(T),pm=n(T,"LI",{});var l0e=s(pm);nQ=n(l0e,"STRONG",{});var SLr=s(nQ);FIe=r(SLr,"longformer"),SLr.forEach(t),CIe=r(l0e," \u2014 "),Q8=n(l0e,"A",{href:!0});var PLr=s(Q8);MIe=r(PLr,"LongformerConfig"),PLr.forEach(t),EIe=r(l0e," (Longformer model)"),l0e.forEach(t),yIe=i(T),_m=n(T,"LI",{});var i0e=s(_m);sQ=n(i0e,"STRONG",{});var $Lr=s(sQ);wIe=r($Lr,"luke"),$Lr.forEach(t),AIe=r(i0e," \u2014 "),H8=n(i0e,"A",{href:!0});var ILr=s(H8);LIe=r(ILr,"LukeConfig"),ILr.forEach(t),BIe=r(i0e," (LUKE model)"),i0e.forEach(t),xIe=i(T),um=n(T,"LI",{});var d0e=s(um);lQ=n(d0e,"STRONG",{});var DLr=s(lQ);kIe=r(DLr,"lxmert"),DLr.forEach(t),RIe=r(d0e," \u2014 "),U8=n(d0e,"A",{href:!0});var jLr=s(U8);SIe=r(jLr,"LxmertConfig"),jLr.forEach(t),PIe=r(d0e," (LXMERT model)"),d0e.forEach(t),$Ie=i(T),bm=n(T,"LI",{});var c0e=s(bm);iQ=n(c0e,"STRONG",{});var NLr=s(iQ);IIe=r(NLr,"m2m_100"),NLr.forEach(t),DIe=r(c0e," \u2014 "),J8=n(c0e,"A",{href:!0});var qLr=s(J8);jIe=r(qLr,"M2M100Config"),qLr.forEach(t),NIe=r(c0e," (M2M100 model)"),c0e.forEach(t),qIe=i(T),vm=n(T,"LI",{});var f0e=s(vm);dQ=n(f0e,"STRONG",{});var GLr=s(dQ);GIe=r(GLr,"marian"),GLr.forEach(t),OIe=r(f0e," \u2014 "),Y8=n(f0e,"A",{href:!0});var OLr=s(Y8);XIe=r(OLr,"MarianConfig"),OLr.forEach(t),VIe=r(f0e," (Marian model)"),f0e.forEach(t),zIe=i(T),Tm=n(T,"LI",{});var m0e=s(Tm);cQ=n(m0e,"STRONG",{});var XLr=s(cQ);WIe=r(XLr,"mbart"),XLr.forEach(t),QIe=r(m0e," \u2014 "),K8=n(m0e,"A",{href:!0});var VLr=s(K8);HIe=r(VLr,"MBartConfig"),VLr.forEach(t),UIe=r(m0e," (mBART model)"),m0e.forEach(t),JIe=i(T),Fm=n(T,"LI",{});var g0e=s(Fm);fQ=n(g0e,"STRONG",{});var zLr=s(fQ);YIe=r(zLr,"megatron-bert"),zLr.forEach(t),KIe=r(g0e," \u2014 "),Z8=n(g0e,"A",{href:!0});var WLr=s(Z8);ZIe=r(WLr,"MegatronBertConfig"),WLr.forEach(t),eDe=r(g0e," (MegatronBert model)"),g0e.forEach(t),oDe=i(T),Cm=n(T,"LI",{});var h0e=s(Cm);mQ=n(h0e,"STRONG",{});var QLr=s(mQ);rDe=r(QLr,"mobilebert"),QLr.forEach(t),tDe=r(h0e," \u2014 "),e9=n(h0e,"A",{href:!0});var HLr=s(e9);aDe=r(HLr,"MobileBertConfig"),HLr.forEach(t),nDe=r(h0e," (MobileBERT model)"),h0e.forEach(t),sDe=i(T),Mm=n(T,"LI",{});var p0e=s(Mm);gQ=n(p0e,"STRONG",{});var ULr=s(gQ);lDe=r(ULr,"mpnet"),ULr.forEach(t),iDe=r(p0e," \u2014 "),o9=n(p0e,"A",{href:!0});var JLr=s(o9);dDe=r(JLr,"MPNetConfig"),JLr.forEach(t),cDe=r(p0e," (MPNet model)"),p0e.forEach(t),fDe=i(T),Em=n(T,"LI",{});var _0e=s(Em);hQ=n(_0e,"STRONG",{});var YLr=s(hQ);mDe=r(YLr,"mt5"),YLr.forEach(t),gDe=r(_0e," \u2014 "),r9=n(_0e,"A",{href:!0});var KLr=s(r9);hDe=r(KLr,"MT5Config"),KLr.forEach(t),pDe=r(_0e," (mT5 model)"),_0e.forEach(t),_De=i(T),ym=n(T,"LI",{});var u0e=s(ym);pQ=n(u0e,"STRONG",{});var ZLr=s(pQ);uDe=r(ZLr,"nystromformer"),ZLr.forEach(t),bDe=r(u0e," \u2014 "),t9=n(u0e,"A",{href:!0});var e8r=s(t9);vDe=r(e8r,"NystromformerConfig"),e8r.forEach(t),TDe=r(u0e," (Nystromformer model)"),u0e.forEach(t),FDe=i(T),wm=n(T,"LI",{});var b0e=s(wm);_Q=n(b0e,"STRONG",{});var o8r=s(_Q);CDe=r(o8r,"openai-gpt"),o8r.forEach(t),MDe=r(b0e," \u2014 "),a9=n(b0e,"A",{href:!0});var r8r=s(a9);EDe=r(r8r,"OpenAIGPTConfig"),r8r.forEach(t),yDe=r(b0e," (OpenAI GPT model)"),b0e.forEach(t),wDe=i(T),Am=n(T,"LI",{});var v0e=s(Am);uQ=n(v0e,"STRONG",{});var t8r=s(uQ);ADe=r(t8r,"pegasus"),t8r.forEach(t),LDe=r(v0e," \u2014 "),n9=n(v0e,"A",{href:!0});var a8r=s(n9);BDe=r(a8r,"PegasusConfig"),a8r.forEach(t),xDe=r(v0e," (Pegasus model)"),v0e.forEach(t),kDe=i(T),Lm=n(T,"LI",{});var T0e=s(Lm);bQ=n(T0e,"STRONG",{});var n8r=s(bQ);RDe=r(n8r,"perceiver"),n8r.forEach(t),SDe=r(T0e," \u2014 "),s9=n(T0e,"A",{href:!0});var s8r=s(s9);PDe=r(s8r,"PerceiverConfig"),s8r.forEach(t),$De=r(T0e," (Perceiver model)"),T0e.forEach(t),IDe=i(T),Bm=n(T,"LI",{});var F0e=s(Bm);vQ=n(F0e,"STRONG",{});var l8r=s(vQ);DDe=r(l8r,"plbart"),l8r.forEach(t),jDe=r(F0e," \u2014 "),l9=n(F0e,"A",{href:!0});var i8r=s(l9);NDe=r(i8r,"PLBartConfig"),i8r.forEach(t),qDe=r(F0e," (PLBart model)"),F0e.forEach(t),GDe=i(T),xm=n(T,"LI",{});var C0e=s(xm);TQ=n(C0e,"STRONG",{});var d8r=s(TQ);ODe=r(d8r,"poolformer"),d8r.forEach(t),XDe=r(C0e," \u2014 "),i9=n(C0e,"A",{href:!0});var c8r=s(i9);VDe=r(c8r,"PoolFormerConfig"),c8r.forEach(t),zDe=r(C0e," (PoolFormer model)"),C0e.forEach(t),WDe=i(T),km=n(T,"LI",{});var M0e=s(km);FQ=n(M0e,"STRONG",{});var f8r=s(FQ);QDe=r(f8r,"prophetnet"),f8r.forEach(t),HDe=r(M0e," \u2014 "),d9=n(M0e,"A",{href:!0});var m8r=s(d9);UDe=r(m8r,"ProphetNetConfig"),m8r.forEach(t),JDe=r(M0e," (ProphetNet model)"),M0e.forEach(t),YDe=i(T),Rm=n(T,"LI",{});var E0e=s(Rm);CQ=n(E0e,"STRONG",{});var g8r=s(CQ);KDe=r(g8r,"qdqbert"),g8r.forEach(t),ZDe=r(E0e," \u2014 "),c9=n(E0e,"A",{href:!0});var h8r=s(c9);eje=r(h8r,"QDQBertConfig"),h8r.forEach(t),oje=r(E0e," (QDQBert model)"),E0e.forEach(t),rje=i(T),Sm=n(T,"LI",{});var y0e=s(Sm);MQ=n(y0e,"STRONG",{});var p8r=s(MQ);tje=r(p8r,"rag"),p8r.forEach(t),aje=r(y0e," \u2014 "),f9=n(y0e,"A",{href:!0});var _8r=s(f9);nje=r(_8r,"RagConfig"),_8r.forEach(t),sje=r(y0e," (RAG model)"),y0e.forEach(t),lje=i(T),Pm=n(T,"LI",{});var w0e=s(Pm);EQ=n(w0e,"STRONG",{});var u8r=s(EQ);ije=r(u8r,"realm"),u8r.forEach(t),dje=r(w0e," \u2014 "),m9=n(w0e,"A",{href:!0});var b8r=s(m9);cje=r(b8r,"RealmConfig"),b8r.forEach(t),fje=r(w0e," (Realm model)"),w0e.forEach(t),mje=i(T),$m=n(T,"LI",{});var A0e=s($m);yQ=n(A0e,"STRONG",{});var v8r=s(yQ);gje=r(v8r,"reformer"),v8r.forEach(t),hje=r(A0e," \u2014 "),g9=n(A0e,"A",{href:!0});var T8r=s(g9);pje=r(T8r,"ReformerConfig"),T8r.forEach(t),_je=r(A0e," (Reformer model)"),A0e.forEach(t),uje=i(T),Im=n(T,"LI",{});var L0e=s(Im);wQ=n(L0e,"STRONG",{});var F8r=s(wQ);bje=r(F8r,"rembert"),F8r.forEach(t),vje=r(L0e," \u2014 "),h9=n(L0e,"A",{href:!0});var C8r=s(h9);Tje=r(C8r,"RemBertConfig"),C8r.forEach(t),Fje=r(L0e," (RemBERT model)"),L0e.forEach(t),Cje=i(T),Dm=n(T,"LI",{});var B0e=s(Dm);AQ=n(B0e,"STRONG",{});var M8r=s(AQ);Mje=r(M8r,"retribert"),M8r.forEach(t),Eje=r(B0e," \u2014 "),p9=n(B0e,"A",{href:!0});var E8r=s(p9);yje=r(E8r,"RetriBertConfig"),E8r.forEach(t),wje=r(B0e," (RetriBERT model)"),B0e.forEach(t),Aje=i(T),jm=n(T,"LI",{});var x0e=s(jm);LQ=n(x0e,"STRONG",{});var y8r=s(LQ);Lje=r(y8r,"roberta"),y8r.forEach(t),Bje=r(x0e," \u2014 "),_9=n(x0e,"A",{href:!0});var w8r=s(_9);xje=r(w8r,"RobertaConfig"),w8r.forEach(t),kje=r(x0e," (RoBERTa model)"),x0e.forEach(t),Rje=i(T),Nm=n(T,"LI",{});var k0e=s(Nm);BQ=n(k0e,"STRONG",{});var A8r=s(BQ);Sje=r(A8r,"roformer"),A8r.forEach(t),Pje=r(k0e," \u2014 "),u9=n(k0e,"A",{href:!0});var L8r=s(u9);$je=r(L8r,"RoFormerConfig"),L8r.forEach(t),Ije=r(k0e," (RoFormer model)"),k0e.forEach(t),Dje=i(T),qm=n(T,"LI",{});var R0e=s(qm);xQ=n(R0e,"STRONG",{});var B8r=s(xQ);jje=r(B8r,"segformer"),B8r.forEach(t),Nje=r(R0e," \u2014 "),b9=n(R0e,"A",{href:!0});var x8r=s(b9);qje=r(x8r,"SegformerConfig"),x8r.forEach(t),Gje=r(R0e," (SegFormer model)"),R0e.forEach(t),Oje=i(T),Gm=n(T,"LI",{});var S0e=s(Gm);kQ=n(S0e,"STRONG",{});var k8r=s(kQ);Xje=r(k8r,"sew"),k8r.forEach(t),Vje=r(S0e," \u2014 "),v9=n(S0e,"A",{href:!0});var R8r=s(v9);zje=r(R8r,"SEWConfig"),R8r.forEach(t),Wje=r(S0e," (SEW model)"),S0e.forEach(t),Qje=i(T),Om=n(T,"LI",{});var P0e=s(Om);RQ=n(P0e,"STRONG",{});var S8r=s(RQ);Hje=r(S8r,"sew-d"),S8r.forEach(t),Uje=r(P0e," \u2014 "),T9=n(P0e,"A",{href:!0});var P8r=s(T9);Jje=r(P8r,"SEWDConfig"),P8r.forEach(t),Yje=r(P0e," (SEW-D model)"),P0e.forEach(t),Kje=i(T),Xm=n(T,"LI",{});var $0e=s(Xm);SQ=n($0e,"STRONG",{});var $8r=s(SQ);Zje=r($8r,"speech-encoder-decoder"),$8r.forEach(t),eNe=r($0e," \u2014 "),F9=n($0e,"A",{href:!0});var I8r=s(F9);oNe=r(I8r,"SpeechEncoderDecoderConfig"),I8r.forEach(t),rNe=r($0e," (Speech Encoder decoder model)"),$0e.forEach(t),tNe=i(T),Vm=n(T,"LI",{});var I0e=s(Vm);PQ=n(I0e,"STRONG",{});var D8r=s(PQ);aNe=r(D8r,"speech_to_text"),D8r.forEach(t),nNe=r(I0e," \u2014 "),C9=n(I0e,"A",{href:!0});var j8r=s(C9);sNe=r(j8r,"Speech2TextConfig"),j8r.forEach(t),lNe=r(I0e," (Speech2Text model)"),I0e.forEach(t),iNe=i(T),zm=n(T,"LI",{});var D0e=s(zm);$Q=n(D0e,"STRONG",{});var N8r=s($Q);dNe=r(N8r,"speech_to_text_2"),N8r.forEach(t),cNe=r(D0e," \u2014 "),M9=n(D0e,"A",{href:!0});var q8r=s(M9);fNe=r(q8r,"Speech2Text2Config"),q8r.forEach(t),mNe=r(D0e," (Speech2Text2 model)"),D0e.forEach(t),gNe=i(T),Wm=n(T,"LI",{});var j0e=s(Wm);IQ=n(j0e,"STRONG",{});var G8r=s(IQ);hNe=r(G8r,"splinter"),G8r.forEach(t),pNe=r(j0e," \u2014 "),E9=n(j0e,"A",{href:!0});var O8r=s(E9);_Ne=r(O8r,"SplinterConfig"),O8r.forEach(t),uNe=r(j0e," (Splinter model)"),j0e.forEach(t),bNe=i(T),Qm=n(T,"LI",{});var N0e=s(Qm);DQ=n(N0e,"STRONG",{});var X8r=s(DQ);vNe=r(X8r,"squeezebert"),X8r.forEach(t),TNe=r(N0e," \u2014 "),y9=n(N0e,"A",{href:!0});var V8r=s(y9);FNe=r(V8r,"SqueezeBertConfig"),V8r.forEach(t),CNe=r(N0e," (SqueezeBERT model)"),N0e.forEach(t),MNe=i(T),Hm=n(T,"LI",{});var q0e=s(Hm);jQ=n(q0e,"STRONG",{});var z8r=s(jQ);ENe=r(z8r,"swin"),z8r.forEach(t),yNe=r(q0e," \u2014 "),w9=n(q0e,"A",{href:!0});var W8r=s(w9);wNe=r(W8r,"SwinConfig"),W8r.forEach(t),ANe=r(q0e," (Swin model)"),q0e.forEach(t),LNe=i(T),Um=n(T,"LI",{});var G0e=s(Um);NQ=n(G0e,"STRONG",{});var Q8r=s(NQ);BNe=r(Q8r,"t5"),Q8r.forEach(t),xNe=r(G0e," \u2014 "),A9=n(G0e,"A",{href:!0});var H8r=s(A9);kNe=r(H8r,"T5Config"),H8r.forEach(t),RNe=r(G0e," (T5 model)"),G0e.forEach(t),SNe=i(T),Jm=n(T,"LI",{});var O0e=s(Jm);qQ=n(O0e,"STRONG",{});var U8r=s(qQ);PNe=r(U8r,"tapas"),U8r.forEach(t),$Ne=r(O0e," \u2014 "),L9=n(O0e,"A",{href:!0});var J8r=s(L9);INe=r(J8r,"TapasConfig"),J8r.forEach(t),DNe=r(O0e," (TAPAS model)"),O0e.forEach(t),jNe=i(T),Ym=n(T,"LI",{});var X0e=s(Ym);GQ=n(X0e,"STRONG",{});var Y8r=s(GQ);NNe=r(Y8r,"transfo-xl"),Y8r.forEach(t),qNe=r(X0e," \u2014 "),B9=n(X0e,"A",{href:!0});var K8r=s(B9);GNe=r(K8r,"TransfoXLConfig"),K8r.forEach(t),ONe=r(X0e," (Transformer-XL model)"),X0e.forEach(t),XNe=i(T),Km=n(T,"LI",{});var V0e=s(Km);OQ=n(V0e,"STRONG",{});var Z8r=s(OQ);VNe=r(Z8r,"trocr"),Z8r.forEach(t),zNe=r(V0e," \u2014 "),x9=n(V0e,"A",{href:!0});var e9r=s(x9);WNe=r(e9r,"TrOCRConfig"),e9r.forEach(t),QNe=r(V0e," (TrOCR model)"),V0e.forEach(t),HNe=i(T),Zm=n(T,"LI",{});var z0e=s(Zm);XQ=n(z0e,"STRONG",{});var o9r=s(XQ);UNe=r(o9r,"unispeech"),o9r.forEach(t),JNe=r(z0e," \u2014 "),k9=n(z0e,"A",{href:!0});var r9r=s(k9);YNe=r(r9r,"UniSpeechConfig"),r9r.forEach(t),KNe=r(z0e," (UniSpeech model)"),z0e.forEach(t),ZNe=i(T),eg=n(T,"LI",{});var W0e=s(eg);VQ=n(W0e,"STRONG",{});var t9r=s(VQ);eqe=r(t9r,"unispeech-sat"),t9r.forEach(t),oqe=r(W0e," \u2014 "),R9=n(W0e,"A",{href:!0});var a9r=s(R9);rqe=r(a9r,"UniSpeechSatConfig"),a9r.forEach(t),tqe=r(W0e," (UniSpeechSat model)"),W0e.forEach(t),aqe=i(T),og=n(T,"LI",{});var Q0e=s(og);zQ=n(Q0e,"STRONG",{});var n9r=s(zQ);nqe=r(n9r,"vilt"),n9r.forEach(t),sqe=r(Q0e," \u2014 "),S9=n(Q0e,"A",{href:!0});var s9r=s(S9);lqe=r(s9r,"ViltConfig"),s9r.forEach(t),iqe=r(Q0e," (ViLT model)"),Q0e.forEach(t),dqe=i(T),rg=n(T,"LI",{});var H0e=s(rg);WQ=n(H0e,"STRONG",{});var l9r=s(WQ);cqe=r(l9r,"vision-encoder-decoder"),l9r.forEach(t),fqe=r(H0e," \u2014 "),P9=n(H0e,"A",{href:!0});var i9r=s(P9);mqe=r(i9r,"VisionEncoderDecoderConfig"),i9r.forEach(t),gqe=r(H0e," (Vision Encoder decoder model)"),H0e.forEach(t),hqe=i(T),tg=n(T,"LI",{});var U0e=s(tg);QQ=n(U0e,"STRONG",{});var d9r=s(QQ);pqe=r(d9r,"vision-text-dual-encoder"),d9r.forEach(t),_qe=r(U0e," \u2014 "),$9=n(U0e,"A",{href:!0});var c9r=s($9);uqe=r(c9r,"VisionTextDualEncoderConfig"),c9r.forEach(t),bqe=r(U0e," (VisionTextDualEncoder model)"),U0e.forEach(t),vqe=i(T),ag=n(T,"LI",{});var J0e=s(ag);HQ=n(J0e,"STRONG",{});var f9r=s(HQ);Tqe=r(f9r,"visual_bert"),f9r.forEach(t),Fqe=r(J0e," \u2014 "),I9=n(J0e,"A",{href:!0});var m9r=s(I9);Cqe=r(m9r,"VisualBertConfig"),m9r.forEach(t),Mqe=r(J0e," (VisualBert model)"),J0e.forEach(t),Eqe=i(T),ng=n(T,"LI",{});var Y0e=s(ng);UQ=n(Y0e,"STRONG",{});var g9r=s(UQ);yqe=r(g9r,"vit"),g9r.forEach(t),wqe=r(Y0e," \u2014 "),D9=n(Y0e,"A",{href:!0});var h9r=s(D9);Aqe=r(h9r,"ViTConfig"),h9r.forEach(t),Lqe=r(Y0e," (ViT model)"),Y0e.forEach(t),Bqe=i(T),sg=n(T,"LI",{});var K0e=s(sg);JQ=n(K0e,"STRONG",{});var p9r=s(JQ);xqe=r(p9r,"vit_mae"),p9r.forEach(t),kqe=r(K0e," \u2014 "),j9=n(K0e,"A",{href:!0});var _9r=s(j9);Rqe=r(_9r,"ViTMAEConfig"),_9r.forEach(t),Sqe=r(K0e," (ViTMAE model)"),K0e.forEach(t),Pqe=i(T),lg=n(T,"LI",{});var Z0e=s(lg);YQ=n(Z0e,"STRONG",{});var u9r=s(YQ);$qe=r(u9r,"wav2vec2"),u9r.forEach(t),Iqe=r(Z0e," \u2014 "),N9=n(Z0e,"A",{href:!0});var b9r=s(N9);Dqe=r(b9r,"Wav2Vec2Config"),b9r.forEach(t),jqe=r(Z0e," (Wav2Vec2 model)"),Z0e.forEach(t),Nqe=i(T),ig=n(T,"LI",{});var eTe=s(ig);KQ=n(eTe,"STRONG",{});var v9r=s(KQ);qqe=r(v9r,"wavlm"),v9r.forEach(t),Gqe=r(eTe," \u2014 "),q9=n(eTe,"A",{href:!0});var T9r=s(q9);Oqe=r(T9r,"WavLMConfig"),T9r.forEach(t),Xqe=r(eTe," (WavLM model)"),eTe.forEach(t),Vqe=i(T),dg=n(T,"LI",{});var oTe=s(dg);ZQ=n(oTe,"STRONG",{});var F9r=s(ZQ);zqe=r(F9r,"xglm"),F9r.forEach(t),Wqe=r(oTe," \u2014 "),G9=n(oTe,"A",{href:!0});var C9r=s(G9);Qqe=r(C9r,"XGLMConfig"),C9r.forEach(t),Hqe=r(oTe," (XGLM model)"),oTe.forEach(t),Uqe=i(T),cg=n(T,"LI",{});var rTe=s(cg);eH=n(rTe,"STRONG",{});var M9r=s(eH);Jqe=r(M9r,"xlm"),M9r.forEach(t),Yqe=r(rTe," \u2014 "),O9=n(rTe,"A",{href:!0});var E9r=s(O9);Kqe=r(E9r,"XLMConfig"),E9r.forEach(t),Zqe=r(rTe," (XLM model)"),rTe.forEach(t),eGe=i(T),fg=n(T,"LI",{});var tTe=s(fg);oH=n(tTe,"STRONG",{});var y9r=s(oH);oGe=r(y9r,"xlm-prophetnet"),y9r.forEach(t),rGe=r(tTe," \u2014 "),X9=n(tTe,"A",{href:!0});var w9r=s(X9);tGe=r(w9r,"XLMProphetNetConfig"),w9r.forEach(t),aGe=r(tTe," (XLMProphetNet model)"),tTe.forEach(t),nGe=i(T),mg=n(T,"LI",{});var aTe=s(mg);rH=n(aTe,"STRONG",{});var A9r=s(rH);sGe=r(A9r,"xlm-roberta"),A9r.forEach(t),lGe=r(aTe," \u2014 "),V9=n(aTe,"A",{href:!0});var L9r=s(V9);iGe=r(L9r,"XLMRobertaConfig"),L9r.forEach(t),dGe=r(aTe," (XLM-RoBERTa model)"),aTe.forEach(t),cGe=i(T),gg=n(T,"LI",{});var nTe=s(gg);tH=n(nTe,"STRONG",{});var B9r=s(tH);fGe=r(B9r,"xlm-roberta-xl"),B9r.forEach(t),mGe=r(nTe," \u2014 "),z9=n(nTe,"A",{href:!0});var x9r=s(z9);gGe=r(x9r,"XLMRobertaXLConfig"),x9r.forEach(t),hGe=r(nTe," (XLM-RoBERTa-XL model)"),nTe.forEach(t),pGe=i(T),hg=n(T,"LI",{});var sTe=s(hg);aH=n(sTe,"STRONG",{});var k9r=s(aH);_Ge=r(k9r,"xlnet"),k9r.forEach(t),uGe=r(sTe," \u2014 "),W9=n(sTe,"A",{href:!0});var R9r=s(W9);bGe=r(R9r,"XLNetConfig"),R9r.forEach(t),vGe=r(sTe," (XLNet model)"),sTe.forEach(t),TGe=i(T),pg=n(T,"LI",{});var lTe=s(pg);nH=n(lTe,"STRONG",{});var S9r=s(nH);FGe=r(S9r,"yoso"),S9r.forEach(t),CGe=r(lTe," \u2014 "),Q9=n(lTe,"A",{href:!0});var P9r=s(Q9);MGe=r(P9r,"YosoConfig"),P9r.forEach(t),EGe=r(lTe," (YOSO model)"),lTe.forEach(t),T.forEach(t),yGe=i(ia),sH=n(ia,"P",{});var $9r=s(sH);wGe=r($9r,"Examples:"),$9r.forEach(t),AGe=i(ia),m(BM.$$.fragment,ia),ia.forEach(t),LGe=i(Is),_g=n(Is,"DIV",{class:!0});var _xe=s(_g);m(xM.$$.fragment,_xe),BGe=i(_xe),lH=n(_xe,"P",{});var I9r=s(lH);xGe=r(I9r,"Register a new configuration for this class."),I9r.forEach(t),_xe.forEach(t),Is.forEach(t),_9e=i(d),ji=n(d,"H2",{class:!0});var uxe=s(ji);ug=n(uxe,"A",{id:!0,class:!0,href:!0});var D9r=s(ug);iH=n(D9r,"SPAN",{});var j9r=s(iH);m(kM.$$.fragment,j9r),j9r.forEach(t),D9r.forEach(t),kGe=i(uxe),dH=n(uxe,"SPAN",{});var N9r=s(dH);RGe=r(N9r,"AutoTokenizer"),N9r.forEach(t),uxe.forEach(t),u9e=i(d),Vo=n(d,"DIV",{class:!0});var Ds=s(Vo);m(RM.$$.fragment,Ds),SGe=i(Ds),SM=n(Ds,"P",{});var bxe=s(SM);PGe=r(bxe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),H9=n(bxe,"A",{href:!0});var q9r=s(H9);$Ge=r(q9r,"AutoTokenizer.from_pretrained()"),q9r.forEach(t),IGe=r(bxe," class method."),bxe.forEach(t),DGe=i(Ds),PM=n(Ds,"P",{});var vxe=s(PM);jGe=r(vxe,"This class cannot be instantiated directly using "),cH=n(vxe,"CODE",{});var G9r=s(cH);NGe=r(G9r,"__init__()"),G9r.forEach(t),qGe=r(vxe," (throws an error)."),vxe.forEach(t),GGe=i(Ds),mo=n(Ds,"DIV",{class:!0});var da=s(mo);m($M.$$.fragment,da),OGe=i(da),fH=n(da,"P",{});var O9r=s(fH);XGe=r(O9r,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),O9r.forEach(t),VGe=i(da),Da=n(da,"P",{});var T4=s(Da);zGe=r(T4,"The tokenizer class to instantiate is selected based on the "),mH=n(T4,"CODE",{});var X9r=s(mH);WGe=r(X9r,"model_type"),X9r.forEach(t),QGe=r(T4,` property of the config object (either
passed as an argument or loaded from `),gH=n(T4,"CODE",{});var V9r=s(gH);HGe=r(V9r,"pretrained_model_name_or_path"),V9r.forEach(t),UGe=r(T4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hH=n(T4,"CODE",{});var z9r=s(hH);JGe=r(z9r,"pretrained_model_name_or_path"),z9r.forEach(t),YGe=r(T4,":"),T4.forEach(t),KGe=i(da),M=n(da,"UL",{});var y=s(M);Gn=n(y,"LI",{});var lL=s(Gn);pH=n(lL,"STRONG",{});var W9r=s(pH);ZGe=r(W9r,"albert"),W9r.forEach(t),eOe=r(lL," \u2014 "),U9=n(lL,"A",{href:!0});var Q9r=s(U9);oOe=r(Q9r,"AlbertTokenizer"),Q9r.forEach(t),rOe=r(lL," or "),J9=n(lL,"A",{href:!0});var H9r=s(J9);tOe=r(H9r,"AlbertTokenizerFast"),H9r.forEach(t),aOe=r(lL," (ALBERT model)"),lL.forEach(t),nOe=i(y),On=n(y,"LI",{});var iL=s(On);_H=n(iL,"STRONG",{});var U9r=s(_H);sOe=r(U9r,"bart"),U9r.forEach(t),lOe=r(iL," \u2014 "),Y9=n(iL,"A",{href:!0});var J9r=s(Y9);iOe=r(J9r,"BartTokenizer"),J9r.forEach(t),dOe=r(iL," or "),K9=n(iL,"A",{href:!0});var Y9r=s(K9);cOe=r(Y9r,"BartTokenizerFast"),Y9r.forEach(t),fOe=r(iL," (BART model)"),iL.forEach(t),mOe=i(y),Xn=n(y,"LI",{});var dL=s(Xn);uH=n(dL,"STRONG",{});var K9r=s(uH);gOe=r(K9r,"barthez"),K9r.forEach(t),hOe=r(dL," \u2014 "),Z9=n(dL,"A",{href:!0});var Z9r=s(Z9);pOe=r(Z9r,"BarthezTokenizer"),Z9r.forEach(t),_Oe=r(dL," or "),eB=n(dL,"A",{href:!0});var eBr=s(eB);uOe=r(eBr,"BarthezTokenizerFast"),eBr.forEach(t),bOe=r(dL," (BARThez model)"),dL.forEach(t),vOe=i(y),bg=n(y,"LI",{});var iTe=s(bg);bH=n(iTe,"STRONG",{});var oBr=s(bH);TOe=r(oBr,"bartpho"),oBr.forEach(t),FOe=r(iTe," \u2014 "),oB=n(iTe,"A",{href:!0});var rBr=s(oB);COe=r(rBr,"BartphoTokenizer"),rBr.forEach(t),MOe=r(iTe," (BARTpho model)"),iTe.forEach(t),EOe=i(y),Vn=n(y,"LI",{});var cL=s(Vn);vH=n(cL,"STRONG",{});var tBr=s(vH);yOe=r(tBr,"bert"),tBr.forEach(t),wOe=r(cL," \u2014 "),rB=n(cL,"A",{href:!0});var aBr=s(rB);AOe=r(aBr,"BertTokenizer"),aBr.forEach(t),LOe=r(cL," or "),tB=n(cL,"A",{href:!0});var nBr=s(tB);BOe=r(nBr,"BertTokenizerFast"),nBr.forEach(t),xOe=r(cL," (BERT model)"),cL.forEach(t),kOe=i(y),vg=n(y,"LI",{});var dTe=s(vg);TH=n(dTe,"STRONG",{});var sBr=s(TH);ROe=r(sBr,"bert-generation"),sBr.forEach(t),SOe=r(dTe," \u2014 "),aB=n(dTe,"A",{href:!0});var lBr=s(aB);POe=r(lBr,"BertGenerationTokenizer"),lBr.forEach(t),$Oe=r(dTe," (Bert Generation model)"),dTe.forEach(t),IOe=i(y),Tg=n(y,"LI",{});var cTe=s(Tg);FH=n(cTe,"STRONG",{});var iBr=s(FH);DOe=r(iBr,"bert-japanese"),iBr.forEach(t),jOe=r(cTe," \u2014 "),nB=n(cTe,"A",{href:!0});var dBr=s(nB);NOe=r(dBr,"BertJapaneseTokenizer"),dBr.forEach(t),qOe=r(cTe," (BertJapanese model)"),cTe.forEach(t),GOe=i(y),Fg=n(y,"LI",{});var fTe=s(Fg);CH=n(fTe,"STRONG",{});var cBr=s(CH);OOe=r(cBr,"bertweet"),cBr.forEach(t),XOe=r(fTe," \u2014 "),sB=n(fTe,"A",{href:!0});var fBr=s(sB);VOe=r(fBr,"BertweetTokenizer"),fBr.forEach(t),zOe=r(fTe," (Bertweet model)"),fTe.forEach(t),WOe=i(y),zn=n(y,"LI",{});var fL=s(zn);MH=n(fL,"STRONG",{});var mBr=s(MH);QOe=r(mBr,"big_bird"),mBr.forEach(t),HOe=r(fL," \u2014 "),lB=n(fL,"A",{href:!0});var gBr=s(lB);UOe=r(gBr,"BigBirdTokenizer"),gBr.forEach(t),JOe=r(fL," or "),iB=n(fL,"A",{href:!0});var hBr=s(iB);YOe=r(hBr,"BigBirdTokenizerFast"),hBr.forEach(t),KOe=r(fL," (BigBird model)"),fL.forEach(t),ZOe=i(y),Wn=n(y,"LI",{});var mL=s(Wn);EH=n(mL,"STRONG",{});var pBr=s(EH);eXe=r(pBr,"bigbird_pegasus"),pBr.forEach(t),oXe=r(mL," \u2014 "),dB=n(mL,"A",{href:!0});var _Br=s(dB);rXe=r(_Br,"PegasusTokenizer"),_Br.forEach(t),tXe=r(mL," or "),cB=n(mL,"A",{href:!0});var uBr=s(cB);aXe=r(uBr,"PegasusTokenizerFast"),uBr.forEach(t),nXe=r(mL," (BigBirdPegasus model)"),mL.forEach(t),sXe=i(y),Qn=n(y,"LI",{});var gL=s(Qn);yH=n(gL,"STRONG",{});var bBr=s(yH);lXe=r(bBr,"blenderbot"),bBr.forEach(t),iXe=r(gL," \u2014 "),fB=n(gL,"A",{href:!0});var vBr=s(fB);dXe=r(vBr,"BlenderbotTokenizer"),vBr.forEach(t),cXe=r(gL," or "),mB=n(gL,"A",{href:!0});var TBr=s(mB);fXe=r(TBr,"BlenderbotTokenizerFast"),TBr.forEach(t),mXe=r(gL," (Blenderbot model)"),gL.forEach(t),gXe=i(y),Cg=n(y,"LI",{});var mTe=s(Cg);wH=n(mTe,"STRONG",{});var FBr=s(wH);hXe=r(FBr,"blenderbot-small"),FBr.forEach(t),pXe=r(mTe," \u2014 "),gB=n(mTe,"A",{href:!0});var CBr=s(gB);_Xe=r(CBr,"BlenderbotSmallTokenizer"),CBr.forEach(t),uXe=r(mTe," (BlenderbotSmall model)"),mTe.forEach(t),bXe=i(y),Mg=n(y,"LI",{});var gTe=s(Mg);AH=n(gTe,"STRONG",{});var MBr=s(AH);vXe=r(MBr,"byt5"),MBr.forEach(t),TXe=r(gTe," \u2014 "),hB=n(gTe,"A",{href:!0});var EBr=s(hB);FXe=r(EBr,"ByT5Tokenizer"),EBr.forEach(t),CXe=r(gTe," (ByT5 model)"),gTe.forEach(t),MXe=i(y),Hn=n(y,"LI",{});var hL=s(Hn);LH=n(hL,"STRONG",{});var yBr=s(LH);EXe=r(yBr,"camembert"),yBr.forEach(t),yXe=r(hL," \u2014 "),pB=n(hL,"A",{href:!0});var wBr=s(pB);wXe=r(wBr,"CamembertTokenizer"),wBr.forEach(t),AXe=r(hL," or "),_B=n(hL,"A",{href:!0});var ABr=s(_B);LXe=r(ABr,"CamembertTokenizerFast"),ABr.forEach(t),BXe=r(hL," (CamemBERT model)"),hL.forEach(t),xXe=i(y),Eg=n(y,"LI",{});var hTe=s(Eg);BH=n(hTe,"STRONG",{});var LBr=s(BH);kXe=r(LBr,"canine"),LBr.forEach(t),RXe=r(hTe," \u2014 "),uB=n(hTe,"A",{href:!0});var BBr=s(uB);SXe=r(BBr,"CanineTokenizer"),BBr.forEach(t),PXe=r(hTe," (Canine model)"),hTe.forEach(t),$Xe=i(y),Un=n(y,"LI",{});var pL=s(Un);xH=n(pL,"STRONG",{});var xBr=s(xH);IXe=r(xBr,"clip"),xBr.forEach(t),DXe=r(pL," \u2014 "),bB=n(pL,"A",{href:!0});var kBr=s(bB);jXe=r(kBr,"CLIPTokenizer"),kBr.forEach(t),NXe=r(pL," or "),vB=n(pL,"A",{href:!0});var RBr=s(vB);qXe=r(RBr,"CLIPTokenizerFast"),RBr.forEach(t),GXe=r(pL," (CLIP model)"),pL.forEach(t),OXe=i(y),Jn=n(y,"LI",{});var _L=s(Jn);kH=n(_L,"STRONG",{});var SBr=s(kH);XXe=r(SBr,"convbert"),SBr.forEach(t),VXe=r(_L," \u2014 "),TB=n(_L,"A",{href:!0});var PBr=s(TB);zXe=r(PBr,"ConvBertTokenizer"),PBr.forEach(t),WXe=r(_L," or "),FB=n(_L,"A",{href:!0});var $Br=s(FB);QXe=r($Br,"ConvBertTokenizerFast"),$Br.forEach(t),HXe=r(_L," (ConvBERT model)"),_L.forEach(t),UXe=i(y),Yn=n(y,"LI",{});var uL=s(Yn);RH=n(uL,"STRONG",{});var IBr=s(RH);JXe=r(IBr,"cpm"),IBr.forEach(t),YXe=r(uL," \u2014 "),CB=n(uL,"A",{href:!0});var DBr=s(CB);KXe=r(DBr,"CpmTokenizer"),DBr.forEach(t),ZXe=r(uL," or "),SH=n(uL,"CODE",{});var jBr=s(SH);eVe=r(jBr,"CpmTokenizerFast"),jBr.forEach(t),oVe=r(uL," (CPM model)"),uL.forEach(t),rVe=i(y),yg=n(y,"LI",{});var pTe=s(yg);PH=n(pTe,"STRONG",{});var NBr=s(PH);tVe=r(NBr,"ctrl"),NBr.forEach(t),aVe=r(pTe," \u2014 "),MB=n(pTe,"A",{href:!0});var qBr=s(MB);nVe=r(qBr,"CTRLTokenizer"),qBr.forEach(t),sVe=r(pTe," (CTRL model)"),pTe.forEach(t),lVe=i(y),Kn=n(y,"LI",{});var bL=s(Kn);$H=n(bL,"STRONG",{});var GBr=s($H);iVe=r(GBr,"deberta"),GBr.forEach(t),dVe=r(bL," \u2014 "),EB=n(bL,"A",{href:!0});var OBr=s(EB);cVe=r(OBr,"DebertaTokenizer"),OBr.forEach(t),fVe=r(bL," or "),yB=n(bL,"A",{href:!0});var XBr=s(yB);mVe=r(XBr,"DebertaTokenizerFast"),XBr.forEach(t),gVe=r(bL," (DeBERTa model)"),bL.forEach(t),hVe=i(y),wg=n(y,"LI",{});var _Te=s(wg);IH=n(_Te,"STRONG",{});var VBr=s(IH);pVe=r(VBr,"deberta-v2"),VBr.forEach(t),_Ve=r(_Te," \u2014 "),wB=n(_Te,"A",{href:!0});var zBr=s(wB);uVe=r(zBr,"DebertaV2Tokenizer"),zBr.forEach(t),bVe=r(_Te," (DeBERTa-v2 model)"),_Te.forEach(t),vVe=i(y),Zn=n(y,"LI",{});var vL=s(Zn);DH=n(vL,"STRONG",{});var WBr=s(DH);TVe=r(WBr,"distilbert"),WBr.forEach(t),FVe=r(vL," \u2014 "),AB=n(vL,"A",{href:!0});var QBr=s(AB);CVe=r(QBr,"DistilBertTokenizer"),QBr.forEach(t),MVe=r(vL," or "),LB=n(vL,"A",{href:!0});var HBr=s(LB);EVe=r(HBr,"DistilBertTokenizerFast"),HBr.forEach(t),yVe=r(vL," (DistilBERT model)"),vL.forEach(t),wVe=i(y),es=n(y,"LI",{});var TL=s(es);jH=n(TL,"STRONG",{});var UBr=s(jH);AVe=r(UBr,"dpr"),UBr.forEach(t),LVe=r(TL," \u2014 "),BB=n(TL,"A",{href:!0});var JBr=s(BB);BVe=r(JBr,"DPRQuestionEncoderTokenizer"),JBr.forEach(t),xVe=r(TL," or "),xB=n(TL,"A",{href:!0});var YBr=s(xB);kVe=r(YBr,"DPRQuestionEncoderTokenizerFast"),YBr.forEach(t),RVe=r(TL," (DPR model)"),TL.forEach(t),SVe=i(y),os=n(y,"LI",{});var FL=s(os);NH=n(FL,"STRONG",{});var KBr=s(NH);PVe=r(KBr,"electra"),KBr.forEach(t),$Ve=r(FL," \u2014 "),kB=n(FL,"A",{href:!0});var ZBr=s(kB);IVe=r(ZBr,"ElectraTokenizer"),ZBr.forEach(t),DVe=r(FL," or "),RB=n(FL,"A",{href:!0});var exr=s(RB);jVe=r(exr,"ElectraTokenizerFast"),exr.forEach(t),NVe=r(FL," (ELECTRA model)"),FL.forEach(t),qVe=i(y),Ag=n(y,"LI",{});var uTe=s(Ag);qH=n(uTe,"STRONG",{});var oxr=s(qH);GVe=r(oxr,"flaubert"),oxr.forEach(t),OVe=r(uTe," \u2014 "),SB=n(uTe,"A",{href:!0});var rxr=s(SB);XVe=r(rxr,"FlaubertTokenizer"),rxr.forEach(t),VVe=r(uTe," (FlauBERT model)"),uTe.forEach(t),zVe=i(y),rs=n(y,"LI",{});var CL=s(rs);GH=n(CL,"STRONG",{});var txr=s(GH);WVe=r(txr,"fnet"),txr.forEach(t),QVe=r(CL," \u2014 "),PB=n(CL,"A",{href:!0});var axr=s(PB);HVe=r(axr,"FNetTokenizer"),axr.forEach(t),UVe=r(CL," or "),$B=n(CL,"A",{href:!0});var nxr=s($B);JVe=r(nxr,"FNetTokenizerFast"),nxr.forEach(t),YVe=r(CL," (FNet model)"),CL.forEach(t),KVe=i(y),Lg=n(y,"LI",{});var bTe=s(Lg);OH=n(bTe,"STRONG",{});var sxr=s(OH);ZVe=r(sxr,"fsmt"),sxr.forEach(t),eze=r(bTe," \u2014 "),IB=n(bTe,"A",{href:!0});var lxr=s(IB);oze=r(lxr,"FSMTTokenizer"),lxr.forEach(t),rze=r(bTe," (FairSeq Machine-Translation model)"),bTe.forEach(t),tze=i(y),ts=n(y,"LI",{});var ML=s(ts);XH=n(ML,"STRONG",{});var ixr=s(XH);aze=r(ixr,"funnel"),ixr.forEach(t),nze=r(ML," \u2014 "),DB=n(ML,"A",{href:!0});var dxr=s(DB);sze=r(dxr,"FunnelTokenizer"),dxr.forEach(t),lze=r(ML," or "),jB=n(ML,"A",{href:!0});var cxr=s(jB);ize=r(cxr,"FunnelTokenizerFast"),cxr.forEach(t),dze=r(ML," (Funnel Transformer model)"),ML.forEach(t),cze=i(y),as=n(y,"LI",{});var EL=s(as);VH=n(EL,"STRONG",{});var fxr=s(VH);fze=r(fxr,"gpt2"),fxr.forEach(t),mze=r(EL," \u2014 "),NB=n(EL,"A",{href:!0});var mxr=s(NB);gze=r(mxr,"GPT2Tokenizer"),mxr.forEach(t),hze=r(EL," or "),qB=n(EL,"A",{href:!0});var gxr=s(qB);pze=r(gxr,"GPT2TokenizerFast"),gxr.forEach(t),_ze=r(EL," (OpenAI GPT-2 model)"),EL.forEach(t),uze=i(y),ns=n(y,"LI",{});var yL=s(ns);zH=n(yL,"STRONG",{});var hxr=s(zH);bze=r(hxr,"gpt_neo"),hxr.forEach(t),vze=r(yL," \u2014 "),GB=n(yL,"A",{href:!0});var pxr=s(GB);Tze=r(pxr,"GPT2Tokenizer"),pxr.forEach(t),Fze=r(yL," or "),OB=n(yL,"A",{href:!0});var _xr=s(OB);Cze=r(_xr,"GPT2TokenizerFast"),_xr.forEach(t),Mze=r(yL," (GPT Neo model)"),yL.forEach(t),Eze=i(y),ss=n(y,"LI",{});var wL=s(ss);WH=n(wL,"STRONG",{});var uxr=s(WH);yze=r(uxr,"herbert"),uxr.forEach(t),wze=r(wL," \u2014 "),XB=n(wL,"A",{href:!0});var bxr=s(XB);Aze=r(bxr,"HerbertTokenizer"),bxr.forEach(t),Lze=r(wL," or "),VB=n(wL,"A",{href:!0});var vxr=s(VB);Bze=r(vxr,"HerbertTokenizerFast"),vxr.forEach(t),xze=r(wL," (HerBERT model)"),wL.forEach(t),kze=i(y),Bg=n(y,"LI",{});var vTe=s(Bg);QH=n(vTe,"STRONG",{});var Txr=s(QH);Rze=r(Txr,"hubert"),Txr.forEach(t),Sze=r(vTe," \u2014 "),zB=n(vTe,"A",{href:!0});var Fxr=s(zB);Pze=r(Fxr,"Wav2Vec2CTCTokenizer"),Fxr.forEach(t),$ze=r(vTe," (Hubert model)"),vTe.forEach(t),Ize=i(y),ls=n(y,"LI",{});var AL=s(ls);HH=n(AL,"STRONG",{});var Cxr=s(HH);Dze=r(Cxr,"ibert"),Cxr.forEach(t),jze=r(AL," \u2014 "),WB=n(AL,"A",{href:!0});var Mxr=s(WB);Nze=r(Mxr,"RobertaTokenizer"),Mxr.forEach(t),qze=r(AL," or "),QB=n(AL,"A",{href:!0});var Exr=s(QB);Gze=r(Exr,"RobertaTokenizerFast"),Exr.forEach(t),Oze=r(AL," (I-BERT model)"),AL.forEach(t),Xze=i(y),is=n(y,"LI",{});var LL=s(is);UH=n(LL,"STRONG",{});var yxr=s(UH);Vze=r(yxr,"layoutlm"),yxr.forEach(t),zze=r(LL," \u2014 "),HB=n(LL,"A",{href:!0});var wxr=s(HB);Wze=r(wxr,"LayoutLMTokenizer"),wxr.forEach(t),Qze=r(LL," or "),UB=n(LL,"A",{href:!0});var Axr=s(UB);Hze=r(Axr,"LayoutLMTokenizerFast"),Axr.forEach(t),Uze=r(LL," (LayoutLM model)"),LL.forEach(t),Jze=i(y),ds=n(y,"LI",{});var BL=s(ds);JH=n(BL,"STRONG",{});var Lxr=s(JH);Yze=r(Lxr,"layoutlmv2"),Lxr.forEach(t),Kze=r(BL," \u2014 "),JB=n(BL,"A",{href:!0});var Bxr=s(JB);Zze=r(Bxr,"LayoutLMv2Tokenizer"),Bxr.forEach(t),eWe=r(BL," or "),YB=n(BL,"A",{href:!0});var xxr=s(YB);oWe=r(xxr,"LayoutLMv2TokenizerFast"),xxr.forEach(t),rWe=r(BL," (LayoutLMv2 model)"),BL.forEach(t),tWe=i(y),cs=n(y,"LI",{});var xL=s(cs);YH=n(xL,"STRONG",{});var kxr=s(YH);aWe=r(kxr,"layoutxlm"),kxr.forEach(t),nWe=r(xL," \u2014 "),KB=n(xL,"A",{href:!0});var Rxr=s(KB);sWe=r(Rxr,"LayoutXLMTokenizer"),Rxr.forEach(t),lWe=r(xL," or "),ZB=n(xL,"A",{href:!0});var Sxr=s(ZB);iWe=r(Sxr,"LayoutXLMTokenizerFast"),Sxr.forEach(t),dWe=r(xL," (LayoutXLM model)"),xL.forEach(t),cWe=i(y),fs=n(y,"LI",{});var kL=s(fs);KH=n(kL,"STRONG",{});var Pxr=s(KH);fWe=r(Pxr,"led"),Pxr.forEach(t),mWe=r(kL," \u2014 "),ex=n(kL,"A",{href:!0});var $xr=s(ex);gWe=r($xr,"LEDTokenizer"),$xr.forEach(t),hWe=r(kL," or "),ox=n(kL,"A",{href:!0});var Ixr=s(ox);pWe=r(Ixr,"LEDTokenizerFast"),Ixr.forEach(t),_We=r(kL," (LED model)"),kL.forEach(t),uWe=i(y),ms=n(y,"LI",{});var RL=s(ms);ZH=n(RL,"STRONG",{});var Dxr=s(ZH);bWe=r(Dxr,"longformer"),Dxr.forEach(t),vWe=r(RL," \u2014 "),rx=n(RL,"A",{href:!0});var jxr=s(rx);TWe=r(jxr,"LongformerTokenizer"),jxr.forEach(t),FWe=r(RL," or "),tx=n(RL,"A",{href:!0});var Nxr=s(tx);CWe=r(Nxr,"LongformerTokenizerFast"),Nxr.forEach(t),MWe=r(RL," (Longformer model)"),RL.forEach(t),EWe=i(y),xg=n(y,"LI",{});var TTe=s(xg);eU=n(TTe,"STRONG",{});var qxr=s(eU);yWe=r(qxr,"luke"),qxr.forEach(t),wWe=r(TTe," \u2014 "),ax=n(TTe,"A",{href:!0});var Gxr=s(ax);AWe=r(Gxr,"LukeTokenizer"),Gxr.forEach(t),LWe=r(TTe," (LUKE model)"),TTe.forEach(t),BWe=i(y),gs=n(y,"LI",{});var SL=s(gs);oU=n(SL,"STRONG",{});var Oxr=s(oU);xWe=r(Oxr,"lxmert"),Oxr.forEach(t),kWe=r(SL," \u2014 "),nx=n(SL,"A",{href:!0});var Xxr=s(nx);RWe=r(Xxr,"LxmertTokenizer"),Xxr.forEach(t),SWe=r(SL," or "),sx=n(SL,"A",{href:!0});var Vxr=s(sx);PWe=r(Vxr,"LxmertTokenizerFast"),Vxr.forEach(t),$We=r(SL," (LXMERT model)"),SL.forEach(t),IWe=i(y),kg=n(y,"LI",{});var FTe=s(kg);rU=n(FTe,"STRONG",{});var zxr=s(rU);DWe=r(zxr,"m2m_100"),zxr.forEach(t),jWe=r(FTe," \u2014 "),lx=n(FTe,"A",{href:!0});var Wxr=s(lx);NWe=r(Wxr,"M2M100Tokenizer"),Wxr.forEach(t),qWe=r(FTe," (M2M100 model)"),FTe.forEach(t),GWe=i(y),Rg=n(y,"LI",{});var CTe=s(Rg);tU=n(CTe,"STRONG",{});var Qxr=s(tU);OWe=r(Qxr,"marian"),Qxr.forEach(t),XWe=r(CTe," \u2014 "),ix=n(CTe,"A",{href:!0});var Hxr=s(ix);VWe=r(Hxr,"MarianTokenizer"),Hxr.forEach(t),zWe=r(CTe," (Marian model)"),CTe.forEach(t),WWe=i(y),hs=n(y,"LI",{});var PL=s(hs);aU=n(PL,"STRONG",{});var Uxr=s(aU);QWe=r(Uxr,"mbart"),Uxr.forEach(t),HWe=r(PL," \u2014 "),dx=n(PL,"A",{href:!0});var Jxr=s(dx);UWe=r(Jxr,"MBartTokenizer"),Jxr.forEach(t),JWe=r(PL," or "),cx=n(PL,"A",{href:!0});var Yxr=s(cx);YWe=r(Yxr,"MBartTokenizerFast"),Yxr.forEach(t),KWe=r(PL," (mBART model)"),PL.forEach(t),ZWe=i(y),ps=n(y,"LI",{});var $L=s(ps);nU=n($L,"STRONG",{});var Kxr=s(nU);eQe=r(Kxr,"mbart50"),Kxr.forEach(t),oQe=r($L," \u2014 "),fx=n($L,"A",{href:!0});var Zxr=s(fx);rQe=r(Zxr,"MBart50Tokenizer"),Zxr.forEach(t),tQe=r($L," or "),mx=n($L,"A",{href:!0});var ekr=s(mx);aQe=r(ekr,"MBart50TokenizerFast"),ekr.forEach(t),nQe=r($L," (mBART-50 model)"),$L.forEach(t),sQe=i(y),Sg=n(y,"LI",{});var MTe=s(Sg);sU=n(MTe,"STRONG",{});var okr=s(sU);lQe=r(okr,"mluke"),okr.forEach(t),iQe=r(MTe," \u2014 "),gx=n(MTe,"A",{href:!0});var rkr=s(gx);dQe=r(rkr,"MLukeTokenizer"),rkr.forEach(t),cQe=r(MTe," (mLUKE model)"),MTe.forEach(t),fQe=i(y),_s=n(y,"LI",{});var IL=s(_s);lU=n(IL,"STRONG",{});var tkr=s(lU);mQe=r(tkr,"mobilebert"),tkr.forEach(t),gQe=r(IL," \u2014 "),hx=n(IL,"A",{href:!0});var akr=s(hx);hQe=r(akr,"MobileBertTokenizer"),akr.forEach(t),pQe=r(IL," or "),px=n(IL,"A",{href:!0});var nkr=s(px);_Qe=r(nkr,"MobileBertTokenizerFast"),nkr.forEach(t),uQe=r(IL," (MobileBERT model)"),IL.forEach(t),bQe=i(y),us=n(y,"LI",{});var DL=s(us);iU=n(DL,"STRONG",{});var skr=s(iU);vQe=r(skr,"mpnet"),skr.forEach(t),TQe=r(DL," \u2014 "),_x=n(DL,"A",{href:!0});var lkr=s(_x);FQe=r(lkr,"MPNetTokenizer"),lkr.forEach(t),CQe=r(DL," or "),ux=n(DL,"A",{href:!0});var ikr=s(ux);MQe=r(ikr,"MPNetTokenizerFast"),ikr.forEach(t),EQe=r(DL," (MPNet model)"),DL.forEach(t),yQe=i(y),bs=n(y,"LI",{});var jL=s(bs);dU=n(jL,"STRONG",{});var dkr=s(dU);wQe=r(dkr,"mt5"),dkr.forEach(t),AQe=r(jL," \u2014 "),bx=n(jL,"A",{href:!0});var ckr=s(bx);LQe=r(ckr,"MT5Tokenizer"),ckr.forEach(t),BQe=r(jL," or "),vx=n(jL,"A",{href:!0});var fkr=s(vx);xQe=r(fkr,"MT5TokenizerFast"),fkr.forEach(t),kQe=r(jL," (mT5 model)"),jL.forEach(t),RQe=i(y),vs=n(y,"LI",{});var NL=s(vs);cU=n(NL,"STRONG",{});var mkr=s(cU);SQe=r(mkr,"openai-gpt"),mkr.forEach(t),PQe=r(NL," \u2014 "),Tx=n(NL,"A",{href:!0});var gkr=s(Tx);$Qe=r(gkr,"OpenAIGPTTokenizer"),gkr.forEach(t),IQe=r(NL," or "),Fx=n(NL,"A",{href:!0});var hkr=s(Fx);DQe=r(hkr,"OpenAIGPTTokenizerFast"),hkr.forEach(t),jQe=r(NL," (OpenAI GPT model)"),NL.forEach(t),NQe=i(y),Ts=n(y,"LI",{});var qL=s(Ts);fU=n(qL,"STRONG",{});var pkr=s(fU);qQe=r(pkr,"pegasus"),pkr.forEach(t),GQe=r(qL," \u2014 "),Cx=n(qL,"A",{href:!0});var _kr=s(Cx);OQe=r(_kr,"PegasusTokenizer"),_kr.forEach(t),XQe=r(qL," or "),Mx=n(qL,"A",{href:!0});var ukr=s(Mx);VQe=r(ukr,"PegasusTokenizerFast"),ukr.forEach(t),zQe=r(qL," (Pegasus model)"),qL.forEach(t),WQe=i(y),Pg=n(y,"LI",{});var ETe=s(Pg);mU=n(ETe,"STRONG",{});var bkr=s(mU);QQe=r(bkr,"perceiver"),bkr.forEach(t),HQe=r(ETe," \u2014 "),Ex=n(ETe,"A",{href:!0});var vkr=s(Ex);UQe=r(vkr,"PerceiverTokenizer"),vkr.forEach(t),JQe=r(ETe," (Perceiver model)"),ETe.forEach(t),YQe=i(y),$g=n(y,"LI",{});var yTe=s($g);gU=n(yTe,"STRONG",{});var Tkr=s(gU);KQe=r(Tkr,"phobert"),Tkr.forEach(t),ZQe=r(yTe," \u2014 "),yx=n(yTe,"A",{href:!0});var Fkr=s(yx);eHe=r(Fkr,"PhobertTokenizer"),Fkr.forEach(t),oHe=r(yTe," (PhoBERT model)"),yTe.forEach(t),rHe=i(y),Ig=n(y,"LI",{});var wTe=s(Ig);hU=n(wTe,"STRONG",{});var Ckr=s(hU);tHe=r(Ckr,"plbart"),Ckr.forEach(t),aHe=r(wTe," \u2014 "),wx=n(wTe,"A",{href:!0});var Mkr=s(wx);nHe=r(Mkr,"PLBartTokenizer"),Mkr.forEach(t),sHe=r(wTe," (PLBart model)"),wTe.forEach(t),lHe=i(y),Dg=n(y,"LI",{});var ATe=s(Dg);pU=n(ATe,"STRONG",{});var Ekr=s(pU);iHe=r(Ekr,"prophetnet"),Ekr.forEach(t),dHe=r(ATe," \u2014 "),Ax=n(ATe,"A",{href:!0});var ykr=s(Ax);cHe=r(ykr,"ProphetNetTokenizer"),ykr.forEach(t),fHe=r(ATe," (ProphetNet model)"),ATe.forEach(t),mHe=i(y),Fs=n(y,"LI",{});var GL=s(Fs);_U=n(GL,"STRONG",{});var wkr=s(_U);gHe=r(wkr,"qdqbert"),wkr.forEach(t),hHe=r(GL," \u2014 "),Lx=n(GL,"A",{href:!0});var Akr=s(Lx);pHe=r(Akr,"BertTokenizer"),Akr.forEach(t),_He=r(GL," or "),Bx=n(GL,"A",{href:!0});var Lkr=s(Bx);uHe=r(Lkr,"BertTokenizerFast"),Lkr.forEach(t),bHe=r(GL," (QDQBert model)"),GL.forEach(t),vHe=i(y),jg=n(y,"LI",{});var LTe=s(jg);uU=n(LTe,"STRONG",{});var Bkr=s(uU);THe=r(Bkr,"rag"),Bkr.forEach(t),FHe=r(LTe," \u2014 "),xx=n(LTe,"A",{href:!0});var xkr=s(xx);CHe=r(xkr,"RagTokenizer"),xkr.forEach(t),MHe=r(LTe," (RAG model)"),LTe.forEach(t),EHe=i(y),Cs=n(y,"LI",{});var OL=s(Cs);bU=n(OL,"STRONG",{});var kkr=s(bU);yHe=r(kkr,"reformer"),kkr.forEach(t),wHe=r(OL," \u2014 "),kx=n(OL,"A",{href:!0});var Rkr=s(kx);AHe=r(Rkr,"ReformerTokenizer"),Rkr.forEach(t),LHe=r(OL," or "),Rx=n(OL,"A",{href:!0});var Skr=s(Rx);BHe=r(Skr,"ReformerTokenizerFast"),Skr.forEach(t),xHe=r(OL," (Reformer model)"),OL.forEach(t),kHe=i(y),Ms=n(y,"LI",{});var XL=s(Ms);vU=n(XL,"STRONG",{});var Pkr=s(vU);RHe=r(Pkr,"rembert"),Pkr.forEach(t),SHe=r(XL," \u2014 "),Sx=n(XL,"A",{href:!0});var $kr=s(Sx);PHe=r($kr,"RemBertTokenizer"),$kr.forEach(t),$He=r(XL," or "),Px=n(XL,"A",{href:!0});var Ikr=s(Px);IHe=r(Ikr,"RemBertTokenizerFast"),Ikr.forEach(t),DHe=r(XL," (RemBERT model)"),XL.forEach(t),jHe=i(y),Es=n(y,"LI",{});var VL=s(Es);TU=n(VL,"STRONG",{});var Dkr=s(TU);NHe=r(Dkr,"retribert"),Dkr.forEach(t),qHe=r(VL," \u2014 "),$x=n(VL,"A",{href:!0});var jkr=s($x);GHe=r(jkr,"RetriBertTokenizer"),jkr.forEach(t),OHe=r(VL," or "),Ix=n(VL,"A",{href:!0});var Nkr=s(Ix);XHe=r(Nkr,"RetriBertTokenizerFast"),Nkr.forEach(t),VHe=r(VL," (RetriBERT model)"),VL.forEach(t),zHe=i(y),ys=n(y,"LI",{});var zL=s(ys);FU=n(zL,"STRONG",{});var qkr=s(FU);WHe=r(qkr,"roberta"),qkr.forEach(t),QHe=r(zL," \u2014 "),Dx=n(zL,"A",{href:!0});var Gkr=s(Dx);HHe=r(Gkr,"RobertaTokenizer"),Gkr.forEach(t),UHe=r(zL," or "),jx=n(zL,"A",{href:!0});var Okr=s(jx);JHe=r(Okr,"RobertaTokenizerFast"),Okr.forEach(t),YHe=r(zL," (RoBERTa model)"),zL.forEach(t),KHe=i(y),ws=n(y,"LI",{});var WL=s(ws);CU=n(WL,"STRONG",{});var Xkr=s(CU);ZHe=r(Xkr,"roformer"),Xkr.forEach(t),eUe=r(WL," \u2014 "),Nx=n(WL,"A",{href:!0});var Vkr=s(Nx);oUe=r(Vkr,"RoFormerTokenizer"),Vkr.forEach(t),rUe=r(WL," or "),qx=n(WL,"A",{href:!0});var zkr=s(qx);tUe=r(zkr,"RoFormerTokenizerFast"),zkr.forEach(t),aUe=r(WL," (RoFormer model)"),WL.forEach(t),nUe=i(y),Ng=n(y,"LI",{});var BTe=s(Ng);MU=n(BTe,"STRONG",{});var Wkr=s(MU);sUe=r(Wkr,"speech_to_text"),Wkr.forEach(t),lUe=r(BTe," \u2014 "),Gx=n(BTe,"A",{href:!0});var Qkr=s(Gx);iUe=r(Qkr,"Speech2TextTokenizer"),Qkr.forEach(t),dUe=r(BTe," (Speech2Text model)"),BTe.forEach(t),cUe=i(y),qg=n(y,"LI",{});var xTe=s(qg);EU=n(xTe,"STRONG",{});var Hkr=s(EU);fUe=r(Hkr,"speech_to_text_2"),Hkr.forEach(t),mUe=r(xTe," \u2014 "),Ox=n(xTe,"A",{href:!0});var Ukr=s(Ox);gUe=r(Ukr,"Speech2Text2Tokenizer"),Ukr.forEach(t),hUe=r(xTe," (Speech2Text2 model)"),xTe.forEach(t),pUe=i(y),As=n(y,"LI",{});var QL=s(As);yU=n(QL,"STRONG",{});var Jkr=s(yU);_Ue=r(Jkr,"splinter"),Jkr.forEach(t),uUe=r(QL," \u2014 "),Xx=n(QL,"A",{href:!0});var Ykr=s(Xx);bUe=r(Ykr,"SplinterTokenizer"),Ykr.forEach(t),vUe=r(QL," or "),Vx=n(QL,"A",{href:!0});var Kkr=s(Vx);TUe=r(Kkr,"SplinterTokenizerFast"),Kkr.forEach(t),FUe=r(QL," (Splinter model)"),QL.forEach(t),CUe=i(y),Ls=n(y,"LI",{});var HL=s(Ls);wU=n(HL,"STRONG",{});var Zkr=s(wU);MUe=r(Zkr,"squeezebert"),Zkr.forEach(t),EUe=r(HL," \u2014 "),zx=n(HL,"A",{href:!0});var eRr=s(zx);yUe=r(eRr,"SqueezeBertTokenizer"),eRr.forEach(t),wUe=r(HL," or "),Wx=n(HL,"A",{href:!0});var oRr=s(Wx);AUe=r(oRr,"SqueezeBertTokenizerFast"),oRr.forEach(t),LUe=r(HL," (SqueezeBERT model)"),HL.forEach(t),BUe=i(y),Bs=n(y,"LI",{});var UL=s(Bs);AU=n(UL,"STRONG",{});var rRr=s(AU);xUe=r(rRr,"t5"),rRr.forEach(t),kUe=r(UL," \u2014 "),Qx=n(UL,"A",{href:!0});var tRr=s(Qx);RUe=r(tRr,"T5Tokenizer"),tRr.forEach(t),SUe=r(UL," or "),Hx=n(UL,"A",{href:!0});var aRr=s(Hx);PUe=r(aRr,"T5TokenizerFast"),aRr.forEach(t),$Ue=r(UL," (T5 model)"),UL.forEach(t),IUe=i(y),Gg=n(y,"LI",{});var kTe=s(Gg);LU=n(kTe,"STRONG",{});var nRr=s(LU);DUe=r(nRr,"tapas"),nRr.forEach(t),jUe=r(kTe," \u2014 "),Ux=n(kTe,"A",{href:!0});var sRr=s(Ux);NUe=r(sRr,"TapasTokenizer"),sRr.forEach(t),qUe=r(kTe," (TAPAS model)"),kTe.forEach(t),GUe=i(y),Og=n(y,"LI",{});var RTe=s(Og);BU=n(RTe,"STRONG",{});var lRr=s(BU);OUe=r(lRr,"transfo-xl"),lRr.forEach(t),XUe=r(RTe," \u2014 "),Jx=n(RTe,"A",{href:!0});var iRr=s(Jx);VUe=r(iRr,"TransfoXLTokenizer"),iRr.forEach(t),zUe=r(RTe," (Transformer-XL model)"),RTe.forEach(t),WUe=i(y),Xg=n(y,"LI",{});var STe=s(Xg);xU=n(STe,"STRONG",{});var dRr=s(xU);QUe=r(dRr,"wav2vec2"),dRr.forEach(t),HUe=r(STe," \u2014 "),Yx=n(STe,"A",{href:!0});var cRr=s(Yx);UUe=r(cRr,"Wav2Vec2CTCTokenizer"),cRr.forEach(t),JUe=r(STe," (Wav2Vec2 model)"),STe.forEach(t),YUe=i(y),Vg=n(y,"LI",{});var PTe=s(Vg);kU=n(PTe,"STRONG",{});var fRr=s(kU);KUe=r(fRr,"wav2vec2_phoneme"),fRr.forEach(t),ZUe=r(PTe," \u2014 "),Kx=n(PTe,"A",{href:!0});var mRr=s(Kx);eJe=r(mRr,"Wav2Vec2PhonemeCTCTokenizer"),mRr.forEach(t),oJe=r(PTe," (Wav2Vec2Phoneme model)"),PTe.forEach(t),rJe=i(y),xs=n(y,"LI",{});var JL=s(xs);RU=n(JL,"STRONG",{});var gRr=s(RU);tJe=r(gRr,"xglm"),gRr.forEach(t),aJe=r(JL," \u2014 "),Zx=n(JL,"A",{href:!0});var hRr=s(Zx);nJe=r(hRr,"XGLMTokenizer"),hRr.forEach(t),sJe=r(JL," or "),ek=n(JL,"A",{href:!0});var pRr=s(ek);lJe=r(pRr,"XGLMTokenizerFast"),pRr.forEach(t),iJe=r(JL," (XGLM model)"),JL.forEach(t),dJe=i(y),zg=n(y,"LI",{});var $Te=s(zg);SU=n($Te,"STRONG",{});var _Rr=s(SU);cJe=r(_Rr,"xlm"),_Rr.forEach(t),fJe=r($Te," \u2014 "),ok=n($Te,"A",{href:!0});var uRr=s(ok);mJe=r(uRr,"XLMTokenizer"),uRr.forEach(t),gJe=r($Te," (XLM model)"),$Te.forEach(t),hJe=i(y),Wg=n(y,"LI",{});var ITe=s(Wg);PU=n(ITe,"STRONG",{});var bRr=s(PU);pJe=r(bRr,"xlm-prophetnet"),bRr.forEach(t),_Je=r(ITe," \u2014 "),rk=n(ITe,"A",{href:!0});var vRr=s(rk);uJe=r(vRr,"XLMProphetNetTokenizer"),vRr.forEach(t),bJe=r(ITe," (XLMProphetNet model)"),ITe.forEach(t),vJe=i(y),ks=n(y,"LI",{});var YL=s(ks);$U=n(YL,"STRONG",{});var TRr=s($U);TJe=r(TRr,"xlm-roberta"),TRr.forEach(t),FJe=r(YL," \u2014 "),tk=n(YL,"A",{href:!0});var FRr=s(tk);CJe=r(FRr,"XLMRobertaTokenizer"),FRr.forEach(t),MJe=r(YL," or "),ak=n(YL,"A",{href:!0});var CRr=s(ak);EJe=r(CRr,"XLMRobertaTokenizerFast"),CRr.forEach(t),yJe=r(YL," (XLM-RoBERTa model)"),YL.forEach(t),wJe=i(y),Rs=n(y,"LI",{});var KL=s(Rs);IU=n(KL,"STRONG",{});var MRr=s(IU);AJe=r(MRr,"xlnet"),MRr.forEach(t),LJe=r(KL," \u2014 "),nk=n(KL,"A",{href:!0});var ERr=s(nk);BJe=r(ERr,"XLNetTokenizer"),ERr.forEach(t),xJe=r(KL," or "),sk=n(KL,"A",{href:!0});var yRr=s(sk);kJe=r(yRr,"XLNetTokenizerFast"),yRr.forEach(t),RJe=r(KL," (XLNet model)"),KL.forEach(t),y.forEach(t),SJe=i(da),DU=n(da,"P",{});var wRr=s(DU);PJe=r(wRr,"Examples:"),wRr.forEach(t),$Je=i(da),m(IM.$$.fragment,da),da.forEach(t),IJe=i(Ds),Qg=n(Ds,"DIV",{class:!0});var Txe=s(Qg);m(DM.$$.fragment,Txe),DJe=i(Txe),jU=n(Txe,"P",{});var ARr=s(jU);jJe=r(ARr,"Register a new tokenizer in this mapping."),ARr.forEach(t),Txe.forEach(t),Ds.forEach(t),b9e=i(d),Ni=n(d,"H2",{class:!0});var Fxe=s(Ni);Hg=n(Fxe,"A",{id:!0,class:!0,href:!0});var LRr=s(Hg);NU=n(LRr,"SPAN",{});var BRr=s(NU);m(jM.$$.fragment,BRr),BRr.forEach(t),LRr.forEach(t),NJe=i(Fxe),qU=n(Fxe,"SPAN",{});var xRr=s(qU);qJe=r(xRr,"AutoFeatureExtractor"),xRr.forEach(t),Fxe.forEach(t),v9e=i(d),zo=n(d,"DIV",{class:!0});var js=s(zo);m(NM.$$.fragment,js),GJe=i(js),qM=n(js,"P",{});var Cxe=s(qM);OJe=r(Cxe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),lk=n(Cxe,"A",{href:!0});var kRr=s(lk);XJe=r(kRr,"AutoFeatureExtractor.from_pretrained()"),kRr.forEach(t),VJe=r(Cxe," class method."),Cxe.forEach(t),zJe=i(js),GM=n(js,"P",{});var Mxe=s(GM);WJe=r(Mxe,"This class cannot be instantiated directly using "),GU=n(Mxe,"CODE",{});var RRr=s(GU);QJe=r(RRr,"__init__()"),RRr.forEach(t),HJe=r(Mxe," (throws an error)."),Mxe.forEach(t),UJe=i(js),xe=n(js,"DIV",{class:!0});var St=s(xe);m(OM.$$.fragment,St),JJe=i(St),OU=n(St,"P",{});var SRr=s(OU);YJe=r(SRr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),SRr.forEach(t),KJe=i(St),ja=n(St,"P",{});var F4=s(ja);ZJe=r(F4,"The feature extractor class to instantiate is selected based on the "),XU=n(F4,"CODE",{});var PRr=s(XU);eYe=r(PRr,"model_type"),PRr.forEach(t),oYe=r(F4,` property of the config object
(either passed as an argument or loaded from `),VU=n(F4,"CODE",{});var $Rr=s(VU);rYe=r($Rr,"pretrained_model_name_or_path"),$Rr.forEach(t),tYe=r(F4,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),zU=n(F4,"CODE",{});var IRr=s(zU);aYe=r(IRr,"pretrained_model_name_or_path"),IRr.forEach(t),nYe=r(F4,":"),F4.forEach(t),sYe=i(St),se=n(St,"UL",{});var de=s(se);Ug=n(de,"LI",{});var DTe=s(Ug);WU=n(DTe,"STRONG",{});var DRr=s(WU);lYe=r(DRr,"beit"),DRr.forEach(t),iYe=r(DTe," \u2014 "),ik=n(DTe,"A",{href:!0});var jRr=s(ik);dYe=r(jRr,"BeitFeatureExtractor"),jRr.forEach(t),cYe=r(DTe," (BEiT model)"),DTe.forEach(t),fYe=i(de),Jg=n(de,"LI",{});var jTe=s(Jg);QU=n(jTe,"STRONG",{});var NRr=s(QU);mYe=r(NRr,"clip"),NRr.forEach(t),gYe=r(jTe," \u2014 "),dk=n(jTe,"A",{href:!0});var qRr=s(dk);hYe=r(qRr,"CLIPFeatureExtractor"),qRr.forEach(t),pYe=r(jTe," (CLIP model)"),jTe.forEach(t),_Ye=i(de),Yg=n(de,"LI",{});var NTe=s(Yg);HU=n(NTe,"STRONG",{});var GRr=s(HU);uYe=r(GRr,"convnext"),GRr.forEach(t),bYe=r(NTe," \u2014 "),ck=n(NTe,"A",{href:!0});var ORr=s(ck);vYe=r(ORr,"ConvNextFeatureExtractor"),ORr.forEach(t),TYe=r(NTe," (ConvNext model)"),NTe.forEach(t),FYe=i(de),Kg=n(de,"LI",{});var qTe=s(Kg);UU=n(qTe,"STRONG",{});var XRr=s(UU);CYe=r(XRr,"deit"),XRr.forEach(t),MYe=r(qTe," \u2014 "),fk=n(qTe,"A",{href:!0});var VRr=s(fk);EYe=r(VRr,"DeiTFeatureExtractor"),VRr.forEach(t),yYe=r(qTe," (DeiT model)"),qTe.forEach(t),wYe=i(de),Zg=n(de,"LI",{});var GTe=s(Zg);JU=n(GTe,"STRONG",{});var zRr=s(JU);AYe=r(zRr,"detr"),zRr.forEach(t),LYe=r(GTe," \u2014 "),mk=n(GTe,"A",{href:!0});var WRr=s(mk);BYe=r(WRr,"DetrFeatureExtractor"),WRr.forEach(t),xYe=r(GTe," (DETR model)"),GTe.forEach(t),kYe=i(de),eh=n(de,"LI",{});var OTe=s(eh);YU=n(OTe,"STRONG",{});var QRr=s(YU);RYe=r(QRr,"hubert"),QRr.forEach(t),SYe=r(OTe," \u2014 "),gk=n(OTe,"A",{href:!0});var HRr=s(gk);PYe=r(HRr,"Wav2Vec2FeatureExtractor"),HRr.forEach(t),$Ye=r(OTe," (Hubert model)"),OTe.forEach(t),IYe=i(de),oh=n(de,"LI",{});var XTe=s(oh);KU=n(XTe,"STRONG",{});var URr=s(KU);DYe=r(URr,"layoutlmv2"),URr.forEach(t),jYe=r(XTe," \u2014 "),hk=n(XTe,"A",{href:!0});var JRr=s(hk);NYe=r(JRr,"LayoutLMv2FeatureExtractor"),JRr.forEach(t),qYe=r(XTe," (LayoutLMv2 model)"),XTe.forEach(t),GYe=i(de),rh=n(de,"LI",{});var VTe=s(rh);ZU=n(VTe,"STRONG",{});var YRr=s(ZU);OYe=r(YRr,"perceiver"),YRr.forEach(t),XYe=r(VTe," \u2014 "),pk=n(VTe,"A",{href:!0});var KRr=s(pk);VYe=r(KRr,"PerceiverFeatureExtractor"),KRr.forEach(t),zYe=r(VTe," (Perceiver model)"),VTe.forEach(t),WYe=i(de),th=n(de,"LI",{});var zTe=s(th);eJ=n(zTe,"STRONG",{});var ZRr=s(eJ);QYe=r(ZRr,"poolformer"),ZRr.forEach(t),HYe=r(zTe," \u2014 "),_k=n(zTe,"A",{href:!0});var eSr=s(_k);UYe=r(eSr,"PoolFormerFeatureExtractor"),eSr.forEach(t),JYe=r(zTe," (PoolFormer model)"),zTe.forEach(t),YYe=i(de),ah=n(de,"LI",{});var WTe=s(ah);oJ=n(WTe,"STRONG",{});var oSr=s(oJ);KYe=r(oSr,"segformer"),oSr.forEach(t),ZYe=r(WTe," \u2014 "),uk=n(WTe,"A",{href:!0});var rSr=s(uk);eKe=r(rSr,"SegformerFeatureExtractor"),rSr.forEach(t),oKe=r(WTe," (SegFormer model)"),WTe.forEach(t),rKe=i(de),nh=n(de,"LI",{});var QTe=s(nh);rJ=n(QTe,"STRONG",{});var tSr=s(rJ);tKe=r(tSr,"speech_to_text"),tSr.forEach(t),aKe=r(QTe," \u2014 "),bk=n(QTe,"A",{href:!0});var aSr=s(bk);nKe=r(aSr,"Speech2TextFeatureExtractor"),aSr.forEach(t),sKe=r(QTe," (Speech2Text model)"),QTe.forEach(t),lKe=i(de),sh=n(de,"LI",{});var HTe=s(sh);tJ=n(HTe,"STRONG",{});var nSr=s(tJ);iKe=r(nSr,"swin"),nSr.forEach(t),dKe=r(HTe," \u2014 "),vk=n(HTe,"A",{href:!0});var sSr=s(vk);cKe=r(sSr,"ViTFeatureExtractor"),sSr.forEach(t),fKe=r(HTe," (Swin model)"),HTe.forEach(t),mKe=i(de),lh=n(de,"LI",{});var UTe=s(lh);aJ=n(UTe,"STRONG",{});var lSr=s(aJ);gKe=r(lSr,"vit"),lSr.forEach(t),hKe=r(UTe," \u2014 "),Tk=n(UTe,"A",{href:!0});var iSr=s(Tk);pKe=r(iSr,"ViTFeatureExtractor"),iSr.forEach(t),_Ke=r(UTe," (ViT model)"),UTe.forEach(t),uKe=i(de),ih=n(de,"LI",{});var JTe=s(ih);nJ=n(JTe,"STRONG",{});var dSr=s(nJ);bKe=r(dSr,"vit_mae"),dSr.forEach(t),vKe=r(JTe," \u2014 "),Fk=n(JTe,"A",{href:!0});var cSr=s(Fk);TKe=r(cSr,"ViTFeatureExtractor"),cSr.forEach(t),FKe=r(JTe," (ViTMAE model)"),JTe.forEach(t),CKe=i(de),dh=n(de,"LI",{});var YTe=s(dh);sJ=n(YTe,"STRONG",{});var fSr=s(sJ);MKe=r(fSr,"wav2vec2"),fSr.forEach(t),EKe=r(YTe," \u2014 "),Ck=n(YTe,"A",{href:!0});var mSr=s(Ck);yKe=r(mSr,"Wav2Vec2FeatureExtractor"),mSr.forEach(t),wKe=r(YTe," (Wav2Vec2 model)"),YTe.forEach(t),de.forEach(t),AKe=i(St),m(ch.$$.fragment,St),LKe=i(St),lJ=n(St,"P",{});var gSr=s(lJ);BKe=r(gSr,"Examples:"),gSr.forEach(t),xKe=i(St),m(XM.$$.fragment,St),St.forEach(t),kKe=i(js),fh=n(js,"DIV",{class:!0});var Exe=s(fh);m(VM.$$.fragment,Exe),RKe=i(Exe),iJ=n(Exe,"P",{});var hSr=s(iJ);SKe=r(hSr,"Register a new feature extractor for this class."),hSr.forEach(t),Exe.forEach(t),js.forEach(t),T9e=i(d),qi=n(d,"H2",{class:!0});var yxe=s(qi);mh=n(yxe,"A",{id:!0,class:!0,href:!0});var pSr=s(mh);dJ=n(pSr,"SPAN",{});var _Sr=s(dJ);m(zM.$$.fragment,_Sr),_Sr.forEach(t),pSr.forEach(t),PKe=i(yxe),cJ=n(yxe,"SPAN",{});var uSr=s(cJ);$Ke=r(uSr,"AutoProcessor"),uSr.forEach(t),yxe.forEach(t),F9e=i(d),Wo=n(d,"DIV",{class:!0});var Ns=s(Wo);m(WM.$$.fragment,Ns),IKe=i(Ns),QM=n(Ns,"P",{});var wxe=s(QM);DKe=r(wxe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Mk=n(wxe,"A",{href:!0});var bSr=s(Mk);jKe=r(bSr,"AutoProcessor.from_pretrained()"),bSr.forEach(t),NKe=r(wxe," class method."),wxe.forEach(t),qKe=i(Ns),HM=n(Ns,"P",{});var Axe=s(HM);GKe=r(Axe,"This class cannot be instantiated directly using "),fJ=n(Axe,"CODE",{});var vSr=s(fJ);OKe=r(vSr,"__init__()"),vSr.forEach(t),XKe=r(Axe," (throws an error)."),Axe.forEach(t),VKe=i(Ns),ke=n(Ns,"DIV",{class:!0});var Pt=s(ke);m(UM.$$.fragment,Pt),zKe=i(Pt),mJ=n(Pt,"P",{});var TSr=s(mJ);WKe=r(TSr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),TSr.forEach(t),QKe=i(Pt),Gi=n(Pt,"P",{});var MV=s(Gi);HKe=r(MV,"The processor class to instantiate is selected based on the "),gJ=n(MV,"CODE",{});var FSr=s(gJ);UKe=r(FSr,"model_type"),FSr.forEach(t),JKe=r(MV,` property of the config object (either
passed as an argument or loaded from `),hJ=n(MV,"CODE",{});var CSr=s(hJ);YKe=r(CSr,"pretrained_model_name_or_path"),CSr.forEach(t),KKe=r(MV," if possible):"),MV.forEach(t),ZKe=i(Pt),we=n(Pt,"UL",{});var jo=s(we);gh=n(jo,"LI",{});var KTe=s(gh);pJ=n(KTe,"STRONG",{});var MSr=s(pJ);eZe=r(MSr,"clip"),MSr.forEach(t),oZe=r(KTe," \u2014 "),Ek=n(KTe,"A",{href:!0});var ESr=s(Ek);rZe=r(ESr,"CLIPProcessor"),ESr.forEach(t),tZe=r(KTe," (CLIP model)"),KTe.forEach(t),aZe=i(jo),hh=n(jo,"LI",{});var ZTe=s(hh);_J=n(ZTe,"STRONG",{});var ySr=s(_J);nZe=r(ySr,"layoutlmv2"),ySr.forEach(t),sZe=r(ZTe," \u2014 "),yk=n(ZTe,"A",{href:!0});var wSr=s(yk);lZe=r(wSr,"LayoutLMv2Processor"),wSr.forEach(t),iZe=r(ZTe," (LayoutLMv2 model)"),ZTe.forEach(t),dZe=i(jo),ph=n(jo,"LI",{});var e7e=s(ph);uJ=n(e7e,"STRONG",{});var ASr=s(uJ);cZe=r(ASr,"layoutxlm"),ASr.forEach(t),fZe=r(e7e," \u2014 "),wk=n(e7e,"A",{href:!0});var LSr=s(wk);mZe=r(LSr,"LayoutXLMProcessor"),LSr.forEach(t),gZe=r(e7e," (LayoutXLM model)"),e7e.forEach(t),hZe=i(jo),_h=n(jo,"LI",{});var o7e=s(_h);bJ=n(o7e,"STRONG",{});var BSr=s(bJ);pZe=r(BSr,"speech_to_text"),BSr.forEach(t),_Ze=r(o7e," \u2014 "),Ak=n(o7e,"A",{href:!0});var xSr=s(Ak);uZe=r(xSr,"Speech2TextProcessor"),xSr.forEach(t),bZe=r(o7e," (Speech2Text model)"),o7e.forEach(t),vZe=i(jo),uh=n(jo,"LI",{});var r7e=s(uh);vJ=n(r7e,"STRONG",{});var kSr=s(vJ);TZe=r(kSr,"speech_to_text_2"),kSr.forEach(t),FZe=r(r7e," \u2014 "),Lk=n(r7e,"A",{href:!0});var RSr=s(Lk);CZe=r(RSr,"Speech2Text2Processor"),RSr.forEach(t),MZe=r(r7e," (Speech2Text2 model)"),r7e.forEach(t),EZe=i(jo),bh=n(jo,"LI",{});var t7e=s(bh);TJ=n(t7e,"STRONG",{});var SSr=s(TJ);yZe=r(SSr,"trocr"),SSr.forEach(t),wZe=r(t7e," \u2014 "),Bk=n(t7e,"A",{href:!0});var PSr=s(Bk);AZe=r(PSr,"TrOCRProcessor"),PSr.forEach(t),LZe=r(t7e," (TrOCR model)"),t7e.forEach(t),BZe=i(jo),vh=n(jo,"LI",{});var a7e=s(vh);FJ=n(a7e,"STRONG",{});var $Sr=s(FJ);xZe=r($Sr,"vision-text-dual-encoder"),$Sr.forEach(t),kZe=r(a7e," \u2014 "),xk=n(a7e,"A",{href:!0});var ISr=s(xk);RZe=r(ISr,"VisionTextDualEncoderProcessor"),ISr.forEach(t),SZe=r(a7e," (VisionTextDualEncoder model)"),a7e.forEach(t),PZe=i(jo),Th=n(jo,"LI",{});var n7e=s(Th);CJ=n(n7e,"STRONG",{});var DSr=s(CJ);$Ze=r(DSr,"wav2vec2"),DSr.forEach(t),IZe=r(n7e," \u2014 "),kk=n(n7e,"A",{href:!0});var jSr=s(kk);DZe=r(jSr,"Wav2Vec2Processor"),jSr.forEach(t),jZe=r(n7e," (Wav2Vec2 model)"),n7e.forEach(t),jo.forEach(t),NZe=i(Pt),m(Fh.$$.fragment,Pt),qZe=i(Pt),MJ=n(Pt,"P",{});var NSr=s(MJ);GZe=r(NSr,"Examples:"),NSr.forEach(t),OZe=i(Pt),m(JM.$$.fragment,Pt),Pt.forEach(t),XZe=i(Ns),Ch=n(Ns,"DIV",{class:!0});var Lxe=s(Ch);m(YM.$$.fragment,Lxe),VZe=i(Lxe),EJ=n(Lxe,"P",{});var qSr=s(EJ);zZe=r(qSr,"Register a new processor for this class."),qSr.forEach(t),Lxe.forEach(t),Ns.forEach(t),C9e=i(d),Oi=n(d,"H2",{class:!0});var Bxe=s(Oi);Mh=n(Bxe,"A",{id:!0,class:!0,href:!0});var GSr=s(Mh);yJ=n(GSr,"SPAN",{});var OSr=s(yJ);m(KM.$$.fragment,OSr),OSr.forEach(t),GSr.forEach(t),WZe=i(Bxe),wJ=n(Bxe,"SPAN",{});var XSr=s(wJ);QZe=r(XSr,"AutoModel"),XSr.forEach(t),Bxe.forEach(t),M9e=i(d),Qo=n(d,"DIV",{class:!0});var qs=s(Qo);m(ZM.$$.fragment,qs),HZe=i(qs),Xi=n(qs,"P",{});var EV=s(Xi);UZe=r(EV,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),AJ=n(EV,"CODE",{});var VSr=s(AJ);JZe=r(VSr,"from_pretrained()"),VSr.forEach(t),YZe=r(EV,"class method or the "),LJ=n(EV,"CODE",{});var zSr=s(LJ);KZe=r(zSr,"from_config()"),zSr.forEach(t),ZZe=r(EV,`class
method.`),EV.forEach(t),eeo=i(qs),eE=n(qs,"P",{});var xxe=s(eE);oeo=r(xxe,"This class cannot be instantiated directly using "),BJ=n(xxe,"CODE",{});var WSr=s(BJ);reo=r(WSr,"__init__()"),WSr.forEach(t),teo=r(xxe," (throws an error)."),xxe.forEach(t),aeo=i(qs),qr=n(qs,"DIV",{class:!0});var Gs=s(qr);m(oE.$$.fragment,Gs),neo=i(Gs),xJ=n(Gs,"P",{});var QSr=s(xJ);seo=r(QSr,"Instantiates one of the base model classes of the library from a configuration."),QSr.forEach(t),leo=i(Gs),Vi=n(Gs,"P",{});var yV=s(Vi);ieo=r(yV,`Note:
Loading a model from its configuration file does `),kJ=n(yV,"STRONG",{});var HSr=s(kJ);deo=r(HSr,"not"),HSr.forEach(t),ceo=r(yV,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(yV,"CODE",{});var USr=s(RJ);feo=r(USr,"from_pretrained()"),USr.forEach(t),meo=r(yV,"to load the model weights."),yV.forEach(t),geo=i(Gs),SJ=n(Gs,"P",{});var JSr=s(SJ);heo=r(JSr,"Examples:"),JSr.forEach(t),peo=i(Gs),m(rE.$$.fragment,Gs),Gs.forEach(t),_eo=i(qs),Re=n(qs,"DIV",{class:!0});var $t=s(Re);m(tE.$$.fragment,$t),ueo=i($t),PJ=n($t,"P",{});var YSr=s(PJ);beo=r(YSr,"Instantiate one of the base model classes of the library from a pretrained model."),YSr.forEach(t),veo=i($t),Na=n($t,"P",{});var C4=s(Na);Teo=r(C4,"The model class to instantiate is selected based on the "),$J=n(C4,"CODE",{});var KSr=s($J);Feo=r(KSr,"model_type"),KSr.forEach(t),Ceo=r(C4,` property of the config object (either
passed as an argument or loaded from `),IJ=n(C4,"CODE",{});var ZSr=s(IJ);Meo=r(ZSr,"pretrained_model_name_or_path"),ZSr.forEach(t),Eeo=r(C4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DJ=n(C4,"CODE",{});var ePr=s(DJ);yeo=r(ePr,"pretrained_model_name_or_path"),ePr.forEach(t),weo=r(C4,":"),C4.forEach(t),Aeo=i($t),F=n($t,"UL",{});var C=s(F);Eh=n(C,"LI",{});var s7e=s(Eh);jJ=n(s7e,"STRONG",{});var oPr=s(jJ);Leo=r(oPr,"albert"),oPr.forEach(t),Beo=r(s7e," \u2014 "),Rk=n(s7e,"A",{href:!0});var rPr=s(Rk);xeo=r(rPr,"AlbertModel"),rPr.forEach(t),keo=r(s7e," (ALBERT model)"),s7e.forEach(t),Reo=i(C),yh=n(C,"LI",{});var l7e=s(yh);NJ=n(l7e,"STRONG",{});var tPr=s(NJ);Seo=r(tPr,"bart"),tPr.forEach(t),Peo=r(l7e," \u2014 "),Sk=n(l7e,"A",{href:!0});var aPr=s(Sk);$eo=r(aPr,"BartModel"),aPr.forEach(t),Ieo=r(l7e," (BART model)"),l7e.forEach(t),Deo=i(C),wh=n(C,"LI",{});var i7e=s(wh);qJ=n(i7e,"STRONG",{});var nPr=s(qJ);jeo=r(nPr,"beit"),nPr.forEach(t),Neo=r(i7e," \u2014 "),Pk=n(i7e,"A",{href:!0});var sPr=s(Pk);qeo=r(sPr,"BeitModel"),sPr.forEach(t),Geo=r(i7e," (BEiT model)"),i7e.forEach(t),Oeo=i(C),Ah=n(C,"LI",{});var d7e=s(Ah);GJ=n(d7e,"STRONG",{});var lPr=s(GJ);Xeo=r(lPr,"bert"),lPr.forEach(t),Veo=r(d7e," \u2014 "),$k=n(d7e,"A",{href:!0});var iPr=s($k);zeo=r(iPr,"BertModel"),iPr.forEach(t),Weo=r(d7e," (BERT model)"),d7e.forEach(t),Qeo=i(C),Lh=n(C,"LI",{});var c7e=s(Lh);OJ=n(c7e,"STRONG",{});var dPr=s(OJ);Heo=r(dPr,"bert-generation"),dPr.forEach(t),Ueo=r(c7e," \u2014 "),Ik=n(c7e,"A",{href:!0});var cPr=s(Ik);Jeo=r(cPr,"BertGenerationEncoder"),cPr.forEach(t),Yeo=r(c7e," (Bert Generation model)"),c7e.forEach(t),Keo=i(C),Bh=n(C,"LI",{});var f7e=s(Bh);XJ=n(f7e,"STRONG",{});var fPr=s(XJ);Zeo=r(fPr,"big_bird"),fPr.forEach(t),eoo=r(f7e," \u2014 "),Dk=n(f7e,"A",{href:!0});var mPr=s(Dk);ooo=r(mPr,"BigBirdModel"),mPr.forEach(t),roo=r(f7e," (BigBird model)"),f7e.forEach(t),too=i(C),xh=n(C,"LI",{});var m7e=s(xh);VJ=n(m7e,"STRONG",{});var gPr=s(VJ);aoo=r(gPr,"bigbird_pegasus"),gPr.forEach(t),noo=r(m7e," \u2014 "),jk=n(m7e,"A",{href:!0});var hPr=s(jk);soo=r(hPr,"BigBirdPegasusModel"),hPr.forEach(t),loo=r(m7e," (BigBirdPegasus model)"),m7e.forEach(t),ioo=i(C),kh=n(C,"LI",{});var g7e=s(kh);zJ=n(g7e,"STRONG",{});var pPr=s(zJ);doo=r(pPr,"blenderbot"),pPr.forEach(t),coo=r(g7e," \u2014 "),Nk=n(g7e,"A",{href:!0});var _Pr=s(Nk);foo=r(_Pr,"BlenderbotModel"),_Pr.forEach(t),moo=r(g7e," (Blenderbot model)"),g7e.forEach(t),goo=i(C),Rh=n(C,"LI",{});var h7e=s(Rh);WJ=n(h7e,"STRONG",{});var uPr=s(WJ);hoo=r(uPr,"blenderbot-small"),uPr.forEach(t),poo=r(h7e," \u2014 "),qk=n(h7e,"A",{href:!0});var bPr=s(qk);_oo=r(bPr,"BlenderbotSmallModel"),bPr.forEach(t),uoo=r(h7e," (BlenderbotSmall model)"),h7e.forEach(t),boo=i(C),Sh=n(C,"LI",{});var p7e=s(Sh);QJ=n(p7e,"STRONG",{});var vPr=s(QJ);voo=r(vPr,"camembert"),vPr.forEach(t),Too=r(p7e," \u2014 "),Gk=n(p7e,"A",{href:!0});var TPr=s(Gk);Foo=r(TPr,"CamembertModel"),TPr.forEach(t),Coo=r(p7e," (CamemBERT model)"),p7e.forEach(t),Moo=i(C),Ph=n(C,"LI",{});var _7e=s(Ph);HJ=n(_7e,"STRONG",{});var FPr=s(HJ);Eoo=r(FPr,"canine"),FPr.forEach(t),yoo=r(_7e," \u2014 "),Ok=n(_7e,"A",{href:!0});var CPr=s(Ok);woo=r(CPr,"CanineModel"),CPr.forEach(t),Aoo=r(_7e," (Canine model)"),_7e.forEach(t),Loo=i(C),$h=n(C,"LI",{});var u7e=s($h);UJ=n(u7e,"STRONG",{});var MPr=s(UJ);Boo=r(MPr,"clip"),MPr.forEach(t),xoo=r(u7e," \u2014 "),Xk=n(u7e,"A",{href:!0});var EPr=s(Xk);koo=r(EPr,"CLIPModel"),EPr.forEach(t),Roo=r(u7e," (CLIP model)"),u7e.forEach(t),Soo=i(C),Ih=n(C,"LI",{});var b7e=s(Ih);JJ=n(b7e,"STRONG",{});var yPr=s(JJ);Poo=r(yPr,"convbert"),yPr.forEach(t),$oo=r(b7e," \u2014 "),Vk=n(b7e,"A",{href:!0});var wPr=s(Vk);Ioo=r(wPr,"ConvBertModel"),wPr.forEach(t),Doo=r(b7e," (ConvBERT model)"),b7e.forEach(t),joo=i(C),Dh=n(C,"LI",{});var v7e=s(Dh);YJ=n(v7e,"STRONG",{});var APr=s(YJ);Noo=r(APr,"convnext"),APr.forEach(t),qoo=r(v7e," \u2014 "),zk=n(v7e,"A",{href:!0});var LPr=s(zk);Goo=r(LPr,"ConvNextModel"),LPr.forEach(t),Ooo=r(v7e," (ConvNext model)"),v7e.forEach(t),Xoo=i(C),jh=n(C,"LI",{});var T7e=s(jh);KJ=n(T7e,"STRONG",{});var BPr=s(KJ);Voo=r(BPr,"ctrl"),BPr.forEach(t),zoo=r(T7e," \u2014 "),Wk=n(T7e,"A",{href:!0});var xPr=s(Wk);Woo=r(xPr,"CTRLModel"),xPr.forEach(t),Qoo=r(T7e," (CTRL model)"),T7e.forEach(t),Hoo=i(C),Nh=n(C,"LI",{});var F7e=s(Nh);ZJ=n(F7e,"STRONG",{});var kPr=s(ZJ);Uoo=r(kPr,"data2vec-audio"),kPr.forEach(t),Joo=r(F7e," \u2014 "),Qk=n(F7e,"A",{href:!0});var RPr=s(Qk);Yoo=r(RPr,"Data2VecAudioModel"),RPr.forEach(t),Koo=r(F7e," (Data2VecAudio model)"),F7e.forEach(t),Zoo=i(C),qh=n(C,"LI",{});var C7e=s(qh);eY=n(C7e,"STRONG",{});var SPr=s(eY);ero=r(SPr,"data2vec-text"),SPr.forEach(t),oro=r(C7e," \u2014 "),Hk=n(C7e,"A",{href:!0});var PPr=s(Hk);rro=r(PPr,"Data2VecTextModel"),PPr.forEach(t),tro=r(C7e," (Data2VecText model)"),C7e.forEach(t),aro=i(C),Gh=n(C,"LI",{});var M7e=s(Gh);oY=n(M7e,"STRONG",{});var $Pr=s(oY);nro=r($Pr,"deberta"),$Pr.forEach(t),sro=r(M7e," \u2014 "),Uk=n(M7e,"A",{href:!0});var IPr=s(Uk);lro=r(IPr,"DebertaModel"),IPr.forEach(t),iro=r(M7e," (DeBERTa model)"),M7e.forEach(t),dro=i(C),Oh=n(C,"LI",{});var E7e=s(Oh);rY=n(E7e,"STRONG",{});var DPr=s(rY);cro=r(DPr,"deberta-v2"),DPr.forEach(t),fro=r(E7e," \u2014 "),Jk=n(E7e,"A",{href:!0});var jPr=s(Jk);mro=r(jPr,"DebertaV2Model"),jPr.forEach(t),gro=r(E7e," (DeBERTa-v2 model)"),E7e.forEach(t),hro=i(C),Xh=n(C,"LI",{});var y7e=s(Xh);tY=n(y7e,"STRONG",{});var NPr=s(tY);pro=r(NPr,"deit"),NPr.forEach(t),_ro=r(y7e," \u2014 "),Yk=n(y7e,"A",{href:!0});var qPr=s(Yk);uro=r(qPr,"DeiTModel"),qPr.forEach(t),bro=r(y7e," (DeiT model)"),y7e.forEach(t),vro=i(C),Vh=n(C,"LI",{});var w7e=s(Vh);aY=n(w7e,"STRONG",{});var GPr=s(aY);Tro=r(GPr,"detr"),GPr.forEach(t),Fro=r(w7e," \u2014 "),Kk=n(w7e,"A",{href:!0});var OPr=s(Kk);Cro=r(OPr,"DetrModel"),OPr.forEach(t),Mro=r(w7e," (DETR model)"),w7e.forEach(t),Ero=i(C),zh=n(C,"LI",{});var A7e=s(zh);nY=n(A7e,"STRONG",{});var XPr=s(nY);yro=r(XPr,"distilbert"),XPr.forEach(t),wro=r(A7e," \u2014 "),Zk=n(A7e,"A",{href:!0});var VPr=s(Zk);Aro=r(VPr,"DistilBertModel"),VPr.forEach(t),Lro=r(A7e," (DistilBERT model)"),A7e.forEach(t),Bro=i(C),Wh=n(C,"LI",{});var L7e=s(Wh);sY=n(L7e,"STRONG",{});var zPr=s(sY);xro=r(zPr,"dpr"),zPr.forEach(t),kro=r(L7e," \u2014 "),eR=n(L7e,"A",{href:!0});var WPr=s(eR);Rro=r(WPr,"DPRQuestionEncoder"),WPr.forEach(t),Sro=r(L7e," (DPR model)"),L7e.forEach(t),Pro=i(C),Qh=n(C,"LI",{});var B7e=s(Qh);lY=n(B7e,"STRONG",{});var QPr=s(lY);$ro=r(QPr,"electra"),QPr.forEach(t),Iro=r(B7e," \u2014 "),oR=n(B7e,"A",{href:!0});var HPr=s(oR);Dro=r(HPr,"ElectraModel"),HPr.forEach(t),jro=r(B7e," (ELECTRA model)"),B7e.forEach(t),Nro=i(C),Hh=n(C,"LI",{});var x7e=s(Hh);iY=n(x7e,"STRONG",{});var UPr=s(iY);qro=r(UPr,"flaubert"),UPr.forEach(t),Gro=r(x7e," \u2014 "),rR=n(x7e,"A",{href:!0});var JPr=s(rR);Oro=r(JPr,"FlaubertModel"),JPr.forEach(t),Xro=r(x7e," (FlauBERT model)"),x7e.forEach(t),Vro=i(C),Uh=n(C,"LI",{});var k7e=s(Uh);dY=n(k7e,"STRONG",{});var YPr=s(dY);zro=r(YPr,"fnet"),YPr.forEach(t),Wro=r(k7e," \u2014 "),tR=n(k7e,"A",{href:!0});var KPr=s(tR);Qro=r(KPr,"FNetModel"),KPr.forEach(t),Hro=r(k7e," (FNet model)"),k7e.forEach(t),Uro=i(C),Jh=n(C,"LI",{});var R7e=s(Jh);cY=n(R7e,"STRONG",{});var ZPr=s(cY);Jro=r(ZPr,"fsmt"),ZPr.forEach(t),Yro=r(R7e," \u2014 "),aR=n(R7e,"A",{href:!0});var e$r=s(aR);Kro=r(e$r,"FSMTModel"),e$r.forEach(t),Zro=r(R7e," (FairSeq Machine-Translation model)"),R7e.forEach(t),eto=i(C),Ss=n(C,"LI",{});var ZL=s(Ss);fY=n(ZL,"STRONG",{});var o$r=s(fY);oto=r(o$r,"funnel"),o$r.forEach(t),rto=r(ZL," \u2014 "),nR=n(ZL,"A",{href:!0});var r$r=s(nR);tto=r(r$r,"FunnelModel"),r$r.forEach(t),ato=r(ZL," or "),sR=n(ZL,"A",{href:!0});var t$r=s(sR);nto=r(t$r,"FunnelBaseModel"),t$r.forEach(t),sto=r(ZL," (Funnel Transformer model)"),ZL.forEach(t),lto=i(C),Yh=n(C,"LI",{});var S7e=s(Yh);mY=n(S7e,"STRONG",{});var a$r=s(mY);ito=r(a$r,"gpt2"),a$r.forEach(t),dto=r(S7e," \u2014 "),lR=n(S7e,"A",{href:!0});var n$r=s(lR);cto=r(n$r,"GPT2Model"),n$r.forEach(t),fto=r(S7e," (OpenAI GPT-2 model)"),S7e.forEach(t),mto=i(C),Kh=n(C,"LI",{});var P7e=s(Kh);gY=n(P7e,"STRONG",{});var s$r=s(gY);gto=r(s$r,"gpt_neo"),s$r.forEach(t),hto=r(P7e," \u2014 "),iR=n(P7e,"A",{href:!0});var l$r=s(iR);pto=r(l$r,"GPTNeoModel"),l$r.forEach(t),_to=r(P7e," (GPT Neo model)"),P7e.forEach(t),uto=i(C),Zh=n(C,"LI",{});var $7e=s(Zh);hY=n($7e,"STRONG",{});var i$r=s(hY);bto=r(i$r,"gptj"),i$r.forEach(t),vto=r($7e," \u2014 "),dR=n($7e,"A",{href:!0});var d$r=s(dR);Tto=r(d$r,"GPTJModel"),d$r.forEach(t),Fto=r($7e," (GPT-J model)"),$7e.forEach(t),Cto=i(C),ep=n(C,"LI",{});var I7e=s(ep);pY=n(I7e,"STRONG",{});var c$r=s(pY);Mto=r(c$r,"hubert"),c$r.forEach(t),Eto=r(I7e," \u2014 "),cR=n(I7e,"A",{href:!0});var f$r=s(cR);yto=r(f$r,"HubertModel"),f$r.forEach(t),wto=r(I7e," (Hubert model)"),I7e.forEach(t),Ato=i(C),op=n(C,"LI",{});var D7e=s(op);_Y=n(D7e,"STRONG",{});var m$r=s(_Y);Lto=r(m$r,"ibert"),m$r.forEach(t),Bto=r(D7e," \u2014 "),fR=n(D7e,"A",{href:!0});var g$r=s(fR);xto=r(g$r,"IBertModel"),g$r.forEach(t),kto=r(D7e," (I-BERT model)"),D7e.forEach(t),Rto=i(C),rp=n(C,"LI",{});var j7e=s(rp);uY=n(j7e,"STRONG",{});var h$r=s(uY);Sto=r(h$r,"imagegpt"),h$r.forEach(t),Pto=r(j7e," \u2014 "),mR=n(j7e,"A",{href:!0});var p$r=s(mR);$to=r(p$r,"ImageGPTModel"),p$r.forEach(t),Ito=r(j7e," (ImageGPT model)"),j7e.forEach(t),Dto=i(C),tp=n(C,"LI",{});var N7e=s(tp);bY=n(N7e,"STRONG",{});var _$r=s(bY);jto=r(_$r,"layoutlm"),_$r.forEach(t),Nto=r(N7e," \u2014 "),gR=n(N7e,"A",{href:!0});var u$r=s(gR);qto=r(u$r,"LayoutLMModel"),u$r.forEach(t),Gto=r(N7e," (LayoutLM model)"),N7e.forEach(t),Oto=i(C),ap=n(C,"LI",{});var q7e=s(ap);vY=n(q7e,"STRONG",{});var b$r=s(vY);Xto=r(b$r,"layoutlmv2"),b$r.forEach(t),Vto=r(q7e," \u2014 "),hR=n(q7e,"A",{href:!0});var v$r=s(hR);zto=r(v$r,"LayoutLMv2Model"),v$r.forEach(t),Wto=r(q7e," (LayoutLMv2 model)"),q7e.forEach(t),Qto=i(C),np=n(C,"LI",{});var G7e=s(np);TY=n(G7e,"STRONG",{});var T$r=s(TY);Hto=r(T$r,"led"),T$r.forEach(t),Uto=r(G7e," \u2014 "),pR=n(G7e,"A",{href:!0});var F$r=s(pR);Jto=r(F$r,"LEDModel"),F$r.forEach(t),Yto=r(G7e," (LED model)"),G7e.forEach(t),Kto=i(C),sp=n(C,"LI",{});var O7e=s(sp);FY=n(O7e,"STRONG",{});var C$r=s(FY);Zto=r(C$r,"longformer"),C$r.forEach(t),eao=r(O7e," \u2014 "),_R=n(O7e,"A",{href:!0});var M$r=s(_R);oao=r(M$r,"LongformerModel"),M$r.forEach(t),rao=r(O7e," (Longformer model)"),O7e.forEach(t),tao=i(C),lp=n(C,"LI",{});var X7e=s(lp);CY=n(X7e,"STRONG",{});var E$r=s(CY);aao=r(E$r,"luke"),E$r.forEach(t),nao=r(X7e," \u2014 "),uR=n(X7e,"A",{href:!0});var y$r=s(uR);sao=r(y$r,"LukeModel"),y$r.forEach(t),lao=r(X7e," (LUKE model)"),X7e.forEach(t),iao=i(C),ip=n(C,"LI",{});var V7e=s(ip);MY=n(V7e,"STRONG",{});var w$r=s(MY);dao=r(w$r,"lxmert"),w$r.forEach(t),cao=r(V7e," \u2014 "),bR=n(V7e,"A",{href:!0});var A$r=s(bR);fao=r(A$r,"LxmertModel"),A$r.forEach(t),mao=r(V7e," (LXMERT model)"),V7e.forEach(t),gao=i(C),dp=n(C,"LI",{});var z7e=s(dp);EY=n(z7e,"STRONG",{});var L$r=s(EY);hao=r(L$r,"m2m_100"),L$r.forEach(t),pao=r(z7e," \u2014 "),vR=n(z7e,"A",{href:!0});var B$r=s(vR);_ao=r(B$r,"M2M100Model"),B$r.forEach(t),uao=r(z7e," (M2M100 model)"),z7e.forEach(t),bao=i(C),cp=n(C,"LI",{});var W7e=s(cp);yY=n(W7e,"STRONG",{});var x$r=s(yY);vao=r(x$r,"marian"),x$r.forEach(t),Tao=r(W7e," \u2014 "),TR=n(W7e,"A",{href:!0});var k$r=s(TR);Fao=r(k$r,"MarianModel"),k$r.forEach(t),Cao=r(W7e," (Marian model)"),W7e.forEach(t),Mao=i(C),fp=n(C,"LI",{});var Q7e=s(fp);wY=n(Q7e,"STRONG",{});var R$r=s(wY);Eao=r(R$r,"mbart"),R$r.forEach(t),yao=r(Q7e," \u2014 "),FR=n(Q7e,"A",{href:!0});var S$r=s(FR);wao=r(S$r,"MBartModel"),S$r.forEach(t),Aao=r(Q7e," (mBART model)"),Q7e.forEach(t),Lao=i(C),mp=n(C,"LI",{});var H7e=s(mp);AY=n(H7e,"STRONG",{});var P$r=s(AY);Bao=r(P$r,"megatron-bert"),P$r.forEach(t),xao=r(H7e," \u2014 "),CR=n(H7e,"A",{href:!0});var $$r=s(CR);kao=r($$r,"MegatronBertModel"),$$r.forEach(t),Rao=r(H7e," (MegatronBert model)"),H7e.forEach(t),Sao=i(C),gp=n(C,"LI",{});var U7e=s(gp);LY=n(U7e,"STRONG",{});var I$r=s(LY);Pao=r(I$r,"mobilebert"),I$r.forEach(t),$ao=r(U7e," \u2014 "),MR=n(U7e,"A",{href:!0});var D$r=s(MR);Iao=r(D$r,"MobileBertModel"),D$r.forEach(t),Dao=r(U7e," (MobileBERT model)"),U7e.forEach(t),jao=i(C),hp=n(C,"LI",{});var J7e=s(hp);BY=n(J7e,"STRONG",{});var j$r=s(BY);Nao=r(j$r,"mpnet"),j$r.forEach(t),qao=r(J7e," \u2014 "),ER=n(J7e,"A",{href:!0});var N$r=s(ER);Gao=r(N$r,"MPNetModel"),N$r.forEach(t),Oao=r(J7e," (MPNet model)"),J7e.forEach(t),Xao=i(C),pp=n(C,"LI",{});var Y7e=s(pp);xY=n(Y7e,"STRONG",{});var q$r=s(xY);Vao=r(q$r,"mt5"),q$r.forEach(t),zao=r(Y7e," \u2014 "),yR=n(Y7e,"A",{href:!0});var G$r=s(yR);Wao=r(G$r,"MT5Model"),G$r.forEach(t),Qao=r(Y7e," (mT5 model)"),Y7e.forEach(t),Hao=i(C),_p=n(C,"LI",{});var K7e=s(_p);kY=n(K7e,"STRONG",{});var O$r=s(kY);Uao=r(O$r,"nystromformer"),O$r.forEach(t),Jao=r(K7e," \u2014 "),wR=n(K7e,"A",{href:!0});var X$r=s(wR);Yao=r(X$r,"NystromformerModel"),X$r.forEach(t),Kao=r(K7e," (Nystromformer model)"),K7e.forEach(t),Zao=i(C),up=n(C,"LI",{});var Z7e=s(up);RY=n(Z7e,"STRONG",{});var V$r=s(RY);eno=r(V$r,"openai-gpt"),V$r.forEach(t),ono=r(Z7e," \u2014 "),AR=n(Z7e,"A",{href:!0});var z$r=s(AR);rno=r(z$r,"OpenAIGPTModel"),z$r.forEach(t),tno=r(Z7e," (OpenAI GPT model)"),Z7e.forEach(t),ano=i(C),bp=n(C,"LI",{});var eFe=s(bp);SY=n(eFe,"STRONG",{});var W$r=s(SY);nno=r(W$r,"pegasus"),W$r.forEach(t),sno=r(eFe," \u2014 "),LR=n(eFe,"A",{href:!0});var Q$r=s(LR);lno=r(Q$r,"PegasusModel"),Q$r.forEach(t),ino=r(eFe," (Pegasus model)"),eFe.forEach(t),dno=i(C),vp=n(C,"LI",{});var oFe=s(vp);PY=n(oFe,"STRONG",{});var H$r=s(PY);cno=r(H$r,"perceiver"),H$r.forEach(t),fno=r(oFe," \u2014 "),BR=n(oFe,"A",{href:!0});var U$r=s(BR);mno=r(U$r,"PerceiverModel"),U$r.forEach(t),gno=r(oFe," (Perceiver model)"),oFe.forEach(t),hno=i(C),Tp=n(C,"LI",{});var rFe=s(Tp);$Y=n(rFe,"STRONG",{});var J$r=s($Y);pno=r(J$r,"plbart"),J$r.forEach(t),_no=r(rFe," \u2014 "),xR=n(rFe,"A",{href:!0});var Y$r=s(xR);uno=r(Y$r,"PLBartModel"),Y$r.forEach(t),bno=r(rFe," (PLBart model)"),rFe.forEach(t),vno=i(C),Fp=n(C,"LI",{});var tFe=s(Fp);IY=n(tFe,"STRONG",{});var K$r=s(IY);Tno=r(K$r,"poolformer"),K$r.forEach(t),Fno=r(tFe," \u2014 "),kR=n(tFe,"A",{href:!0});var Z$r=s(kR);Cno=r(Z$r,"PoolFormerModel"),Z$r.forEach(t),Mno=r(tFe," (PoolFormer model)"),tFe.forEach(t),Eno=i(C),Cp=n(C,"LI",{});var aFe=s(Cp);DY=n(aFe,"STRONG",{});var eIr=s(DY);yno=r(eIr,"prophetnet"),eIr.forEach(t),wno=r(aFe," \u2014 "),RR=n(aFe,"A",{href:!0});var oIr=s(RR);Ano=r(oIr,"ProphetNetModel"),oIr.forEach(t),Lno=r(aFe," (ProphetNet model)"),aFe.forEach(t),Bno=i(C),Mp=n(C,"LI",{});var nFe=s(Mp);jY=n(nFe,"STRONG",{});var rIr=s(jY);xno=r(rIr,"qdqbert"),rIr.forEach(t),kno=r(nFe," \u2014 "),SR=n(nFe,"A",{href:!0});var tIr=s(SR);Rno=r(tIr,"QDQBertModel"),tIr.forEach(t),Sno=r(nFe," (QDQBert model)"),nFe.forEach(t),Pno=i(C),Ep=n(C,"LI",{});var sFe=s(Ep);NY=n(sFe,"STRONG",{});var aIr=s(NY);$no=r(aIr,"reformer"),aIr.forEach(t),Ino=r(sFe," \u2014 "),PR=n(sFe,"A",{href:!0});var nIr=s(PR);Dno=r(nIr,"ReformerModel"),nIr.forEach(t),jno=r(sFe," (Reformer model)"),sFe.forEach(t),Nno=i(C),yp=n(C,"LI",{});var lFe=s(yp);qY=n(lFe,"STRONG",{});var sIr=s(qY);qno=r(sIr,"rembert"),sIr.forEach(t),Gno=r(lFe," \u2014 "),$R=n(lFe,"A",{href:!0});var lIr=s($R);Ono=r(lIr,"RemBertModel"),lIr.forEach(t),Xno=r(lFe," (RemBERT model)"),lFe.forEach(t),Vno=i(C),wp=n(C,"LI",{});var iFe=s(wp);GY=n(iFe,"STRONG",{});var iIr=s(GY);zno=r(iIr,"retribert"),iIr.forEach(t),Wno=r(iFe," \u2014 "),IR=n(iFe,"A",{href:!0});var dIr=s(IR);Qno=r(dIr,"RetriBertModel"),dIr.forEach(t),Hno=r(iFe," (RetriBERT model)"),iFe.forEach(t),Uno=i(C),Ap=n(C,"LI",{});var dFe=s(Ap);OY=n(dFe,"STRONG",{});var cIr=s(OY);Jno=r(cIr,"roberta"),cIr.forEach(t),Yno=r(dFe," \u2014 "),DR=n(dFe,"A",{href:!0});var fIr=s(DR);Kno=r(fIr,"RobertaModel"),fIr.forEach(t),Zno=r(dFe," (RoBERTa model)"),dFe.forEach(t),eso=i(C),Lp=n(C,"LI",{});var cFe=s(Lp);XY=n(cFe,"STRONG",{});var mIr=s(XY);oso=r(mIr,"roformer"),mIr.forEach(t),rso=r(cFe," \u2014 "),jR=n(cFe,"A",{href:!0});var gIr=s(jR);tso=r(gIr,"RoFormerModel"),gIr.forEach(t),aso=r(cFe," (RoFormer model)"),cFe.forEach(t),nso=i(C),Bp=n(C,"LI",{});var fFe=s(Bp);VY=n(fFe,"STRONG",{});var hIr=s(VY);sso=r(hIr,"segformer"),hIr.forEach(t),lso=r(fFe," \u2014 "),NR=n(fFe,"A",{href:!0});var pIr=s(NR);iso=r(pIr,"SegformerModel"),pIr.forEach(t),dso=r(fFe," (SegFormer model)"),fFe.forEach(t),cso=i(C),xp=n(C,"LI",{});var mFe=s(xp);zY=n(mFe,"STRONG",{});var _Ir=s(zY);fso=r(_Ir,"sew"),_Ir.forEach(t),mso=r(mFe," \u2014 "),qR=n(mFe,"A",{href:!0});var uIr=s(qR);gso=r(uIr,"SEWModel"),uIr.forEach(t),hso=r(mFe," (SEW model)"),mFe.forEach(t),pso=i(C),kp=n(C,"LI",{});var gFe=s(kp);WY=n(gFe,"STRONG",{});var bIr=s(WY);_so=r(bIr,"sew-d"),bIr.forEach(t),uso=r(gFe," \u2014 "),GR=n(gFe,"A",{href:!0});var vIr=s(GR);bso=r(vIr,"SEWDModel"),vIr.forEach(t),vso=r(gFe," (SEW-D model)"),gFe.forEach(t),Tso=i(C),Rp=n(C,"LI",{});var hFe=s(Rp);QY=n(hFe,"STRONG",{});var TIr=s(QY);Fso=r(TIr,"speech_to_text"),TIr.forEach(t),Cso=r(hFe," \u2014 "),OR=n(hFe,"A",{href:!0});var FIr=s(OR);Mso=r(FIr,"Speech2TextModel"),FIr.forEach(t),Eso=r(hFe," (Speech2Text model)"),hFe.forEach(t),yso=i(C),Sp=n(C,"LI",{});var pFe=s(Sp);HY=n(pFe,"STRONG",{});var CIr=s(HY);wso=r(CIr,"splinter"),CIr.forEach(t),Aso=r(pFe," \u2014 "),XR=n(pFe,"A",{href:!0});var MIr=s(XR);Lso=r(MIr,"SplinterModel"),MIr.forEach(t),Bso=r(pFe," (Splinter model)"),pFe.forEach(t),xso=i(C),Pp=n(C,"LI",{});var _Fe=s(Pp);UY=n(_Fe,"STRONG",{});var EIr=s(UY);kso=r(EIr,"squeezebert"),EIr.forEach(t),Rso=r(_Fe," \u2014 "),VR=n(_Fe,"A",{href:!0});var yIr=s(VR);Sso=r(yIr,"SqueezeBertModel"),yIr.forEach(t),Pso=r(_Fe," (SqueezeBERT model)"),_Fe.forEach(t),$so=i(C),$p=n(C,"LI",{});var uFe=s($p);JY=n(uFe,"STRONG",{});var wIr=s(JY);Iso=r(wIr,"swin"),wIr.forEach(t),Dso=r(uFe," \u2014 "),zR=n(uFe,"A",{href:!0});var AIr=s(zR);jso=r(AIr,"SwinModel"),AIr.forEach(t),Nso=r(uFe," (Swin model)"),uFe.forEach(t),qso=i(C),Ip=n(C,"LI",{});var bFe=s(Ip);YY=n(bFe,"STRONG",{});var LIr=s(YY);Gso=r(LIr,"t5"),LIr.forEach(t),Oso=r(bFe," \u2014 "),WR=n(bFe,"A",{href:!0});var BIr=s(WR);Xso=r(BIr,"T5Model"),BIr.forEach(t),Vso=r(bFe," (T5 model)"),bFe.forEach(t),zso=i(C),Dp=n(C,"LI",{});var vFe=s(Dp);KY=n(vFe,"STRONG",{});var xIr=s(KY);Wso=r(xIr,"tapas"),xIr.forEach(t),Qso=r(vFe," \u2014 "),QR=n(vFe,"A",{href:!0});var kIr=s(QR);Hso=r(kIr,"TapasModel"),kIr.forEach(t),Uso=r(vFe," (TAPAS model)"),vFe.forEach(t),Jso=i(C),jp=n(C,"LI",{});var TFe=s(jp);ZY=n(TFe,"STRONG",{});var RIr=s(ZY);Yso=r(RIr,"transfo-xl"),RIr.forEach(t),Kso=r(TFe," \u2014 "),HR=n(TFe,"A",{href:!0});var SIr=s(HR);Zso=r(SIr,"TransfoXLModel"),SIr.forEach(t),elo=r(TFe," (Transformer-XL model)"),TFe.forEach(t),olo=i(C),Np=n(C,"LI",{});var FFe=s(Np);eK=n(FFe,"STRONG",{});var PIr=s(eK);rlo=r(PIr,"unispeech"),PIr.forEach(t),tlo=r(FFe," \u2014 "),UR=n(FFe,"A",{href:!0});var $Ir=s(UR);alo=r($Ir,"UniSpeechModel"),$Ir.forEach(t),nlo=r(FFe," (UniSpeech model)"),FFe.forEach(t),slo=i(C),qp=n(C,"LI",{});var CFe=s(qp);oK=n(CFe,"STRONG",{});var IIr=s(oK);llo=r(IIr,"unispeech-sat"),IIr.forEach(t),ilo=r(CFe," \u2014 "),JR=n(CFe,"A",{href:!0});var DIr=s(JR);dlo=r(DIr,"UniSpeechSatModel"),DIr.forEach(t),clo=r(CFe," (UniSpeechSat model)"),CFe.forEach(t),flo=i(C),Gp=n(C,"LI",{});var MFe=s(Gp);rK=n(MFe,"STRONG",{});var jIr=s(rK);mlo=r(jIr,"vilt"),jIr.forEach(t),glo=r(MFe," \u2014 "),YR=n(MFe,"A",{href:!0});var NIr=s(YR);hlo=r(NIr,"ViltModel"),NIr.forEach(t),plo=r(MFe," (ViLT model)"),MFe.forEach(t),_lo=i(C),Op=n(C,"LI",{});var EFe=s(Op);tK=n(EFe,"STRONG",{});var qIr=s(tK);ulo=r(qIr,"vision-text-dual-encoder"),qIr.forEach(t),blo=r(EFe," \u2014 "),KR=n(EFe,"A",{href:!0});var GIr=s(KR);vlo=r(GIr,"VisionTextDualEncoderModel"),GIr.forEach(t),Tlo=r(EFe," (VisionTextDualEncoder model)"),EFe.forEach(t),Flo=i(C),Xp=n(C,"LI",{});var yFe=s(Xp);aK=n(yFe,"STRONG",{});var OIr=s(aK);Clo=r(OIr,"visual_bert"),OIr.forEach(t),Mlo=r(yFe," \u2014 "),ZR=n(yFe,"A",{href:!0});var XIr=s(ZR);Elo=r(XIr,"VisualBertModel"),XIr.forEach(t),ylo=r(yFe," (VisualBert model)"),yFe.forEach(t),wlo=i(C),Vp=n(C,"LI",{});var wFe=s(Vp);nK=n(wFe,"STRONG",{});var VIr=s(nK);Alo=r(VIr,"vit"),VIr.forEach(t),Llo=r(wFe," \u2014 "),eS=n(wFe,"A",{href:!0});var zIr=s(eS);Blo=r(zIr,"ViTModel"),zIr.forEach(t),xlo=r(wFe," (ViT model)"),wFe.forEach(t),klo=i(C),zp=n(C,"LI",{});var AFe=s(zp);sK=n(AFe,"STRONG",{});var WIr=s(sK);Rlo=r(WIr,"vit_mae"),WIr.forEach(t),Slo=r(AFe," \u2014 "),oS=n(AFe,"A",{href:!0});var QIr=s(oS);Plo=r(QIr,"ViTMAEModel"),QIr.forEach(t),$lo=r(AFe," (ViTMAE model)"),AFe.forEach(t),Ilo=i(C),Wp=n(C,"LI",{});var LFe=s(Wp);lK=n(LFe,"STRONG",{});var HIr=s(lK);Dlo=r(HIr,"wav2vec2"),HIr.forEach(t),jlo=r(LFe," \u2014 "),rS=n(LFe,"A",{href:!0});var UIr=s(rS);Nlo=r(UIr,"Wav2Vec2Model"),UIr.forEach(t),qlo=r(LFe," (Wav2Vec2 model)"),LFe.forEach(t),Glo=i(C),Qp=n(C,"LI",{});var BFe=s(Qp);iK=n(BFe,"STRONG",{});var JIr=s(iK);Olo=r(JIr,"wavlm"),JIr.forEach(t),Xlo=r(BFe," \u2014 "),tS=n(BFe,"A",{href:!0});var YIr=s(tS);Vlo=r(YIr,"WavLMModel"),YIr.forEach(t),zlo=r(BFe," (WavLM model)"),BFe.forEach(t),Wlo=i(C),Hp=n(C,"LI",{});var xFe=s(Hp);dK=n(xFe,"STRONG",{});var KIr=s(dK);Qlo=r(KIr,"xglm"),KIr.forEach(t),Hlo=r(xFe," \u2014 "),aS=n(xFe,"A",{href:!0});var ZIr=s(aS);Ulo=r(ZIr,"XGLMModel"),ZIr.forEach(t),Jlo=r(xFe," (XGLM model)"),xFe.forEach(t),Ylo=i(C),Up=n(C,"LI",{});var kFe=s(Up);cK=n(kFe,"STRONG",{});var eDr=s(cK);Klo=r(eDr,"xlm"),eDr.forEach(t),Zlo=r(kFe," \u2014 "),nS=n(kFe,"A",{href:!0});var oDr=s(nS);eio=r(oDr,"XLMModel"),oDr.forEach(t),oio=r(kFe," (XLM model)"),kFe.forEach(t),rio=i(C),Jp=n(C,"LI",{});var RFe=s(Jp);fK=n(RFe,"STRONG",{});var rDr=s(fK);tio=r(rDr,"xlm-prophetnet"),rDr.forEach(t),aio=r(RFe," \u2014 "),sS=n(RFe,"A",{href:!0});var tDr=s(sS);nio=r(tDr,"XLMProphetNetModel"),tDr.forEach(t),sio=r(RFe," (XLMProphetNet model)"),RFe.forEach(t),lio=i(C),Yp=n(C,"LI",{});var SFe=s(Yp);mK=n(SFe,"STRONG",{});var aDr=s(mK);iio=r(aDr,"xlm-roberta"),aDr.forEach(t),dio=r(SFe," \u2014 "),lS=n(SFe,"A",{href:!0});var nDr=s(lS);cio=r(nDr,"XLMRobertaModel"),nDr.forEach(t),fio=r(SFe," (XLM-RoBERTa model)"),SFe.forEach(t),mio=i(C),Kp=n(C,"LI",{});var PFe=s(Kp);gK=n(PFe,"STRONG",{});var sDr=s(gK);gio=r(sDr,"xlm-roberta-xl"),sDr.forEach(t),hio=r(PFe," \u2014 "),iS=n(PFe,"A",{href:!0});var lDr=s(iS);pio=r(lDr,"XLMRobertaXLModel"),lDr.forEach(t),_io=r(PFe," (XLM-RoBERTa-XL model)"),PFe.forEach(t),uio=i(C),Zp=n(C,"LI",{});var $Fe=s(Zp);hK=n($Fe,"STRONG",{});var iDr=s(hK);bio=r(iDr,"xlnet"),iDr.forEach(t),vio=r($Fe," \u2014 "),dS=n($Fe,"A",{href:!0});var dDr=s(dS);Tio=r(dDr,"XLNetModel"),dDr.forEach(t),Fio=r($Fe," (XLNet model)"),$Fe.forEach(t),Cio=i(C),e_=n(C,"LI",{});var IFe=s(e_);pK=n(IFe,"STRONG",{});var cDr=s(pK);Mio=r(cDr,"yoso"),cDr.forEach(t),Eio=r(IFe," \u2014 "),cS=n(IFe,"A",{href:!0});var fDr=s(cS);yio=r(fDr,"YosoModel"),fDr.forEach(t),wio=r(IFe," (YOSO model)"),IFe.forEach(t),C.forEach(t),Aio=i($t),o_=n($t,"P",{});var DFe=s(o_);Lio=r(DFe,"The model is set in evaluation mode by default using "),_K=n(DFe,"CODE",{});var mDr=s(_K);Bio=r(mDr,"model.eval()"),mDr.forEach(t),xio=r(DFe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uK=n(DFe,"CODE",{});var gDr=s(uK);kio=r(gDr,"model.train()"),gDr.forEach(t),DFe.forEach(t),Rio=i($t),bK=n($t,"P",{});var hDr=s(bK);Sio=r(hDr,"Examples:"),hDr.forEach(t),Pio=i($t),m(aE.$$.fragment,$t),$t.forEach(t),qs.forEach(t),E9e=i(d),zi=n(d,"H2",{class:!0});var kxe=s(zi);r_=n(kxe,"A",{id:!0,class:!0,href:!0});var pDr=s(r_);vK=n(pDr,"SPAN",{});var _Dr=s(vK);m(nE.$$.fragment,_Dr),_Dr.forEach(t),pDr.forEach(t),$io=i(kxe),TK=n(kxe,"SPAN",{});var uDr=s(TK);Iio=r(uDr,"AutoModelForPreTraining"),uDr.forEach(t),kxe.forEach(t),y9e=i(d),Ho=n(d,"DIV",{class:!0});var Os=s(Ho);m(sE.$$.fragment,Os),Dio=i(Os),Wi=n(Os,"P",{});var wV=s(Wi);jio=r(wV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FK=n(wV,"CODE",{});var bDr=s(FK);Nio=r(bDr,"from_pretrained()"),bDr.forEach(t),qio=r(wV,"class method or the "),CK=n(wV,"CODE",{});var vDr=s(CK);Gio=r(vDr,"from_config()"),vDr.forEach(t),Oio=r(wV,`class
method.`),wV.forEach(t),Xio=i(Os),lE=n(Os,"P",{});var Rxe=s(lE);Vio=r(Rxe,"This class cannot be instantiated directly using "),MK=n(Rxe,"CODE",{});var TDr=s(MK);zio=r(TDr,"__init__()"),TDr.forEach(t),Wio=r(Rxe," (throws an error)."),Rxe.forEach(t),Qio=i(Os),Gr=n(Os,"DIV",{class:!0});var Xs=s(Gr);m(iE.$$.fragment,Xs),Hio=i(Xs),EK=n(Xs,"P",{});var FDr=s(EK);Uio=r(FDr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),FDr.forEach(t),Jio=i(Xs),Qi=n(Xs,"P",{});var AV=s(Qi);Yio=r(AV,`Note:
Loading a model from its configuration file does `),yK=n(AV,"STRONG",{});var CDr=s(yK);Kio=r(CDr,"not"),CDr.forEach(t),Zio=r(AV,` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=n(AV,"CODE",{});var MDr=s(wK);edo=r(MDr,"from_pretrained()"),MDr.forEach(t),odo=r(AV,"to load the model weights."),AV.forEach(t),rdo=i(Xs),AK=n(Xs,"P",{});var EDr=s(AK);tdo=r(EDr,"Examples:"),EDr.forEach(t),ado=i(Xs),m(dE.$$.fragment,Xs),Xs.forEach(t),ndo=i(Os),Se=n(Os,"DIV",{class:!0});var It=s(Se);m(cE.$$.fragment,It),sdo=i(It),LK=n(It,"P",{});var yDr=s(LK);ldo=r(yDr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),yDr.forEach(t),ido=i(It),qa=n(It,"P",{});var M4=s(qa);ddo=r(M4,"The model class to instantiate is selected based on the "),BK=n(M4,"CODE",{});var wDr=s(BK);cdo=r(wDr,"model_type"),wDr.forEach(t),fdo=r(M4,` property of the config object (either
passed as an argument or loaded from `),xK=n(M4,"CODE",{});var ADr=s(xK);mdo=r(ADr,"pretrained_model_name_or_path"),ADr.forEach(t),gdo=r(M4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kK=n(M4,"CODE",{});var LDr=s(kK);hdo=r(LDr,"pretrained_model_name_or_path"),LDr.forEach(t),pdo=r(M4,":"),M4.forEach(t),_do=i(It),k=n(It,"UL",{});var S=s(k);t_=n(S,"LI",{});var jFe=s(t_);RK=n(jFe,"STRONG",{});var BDr=s(RK);udo=r(BDr,"albert"),BDr.forEach(t),bdo=r(jFe," \u2014 "),fS=n(jFe,"A",{href:!0});var xDr=s(fS);vdo=r(xDr,"AlbertForPreTraining"),xDr.forEach(t),Tdo=r(jFe," (ALBERT model)"),jFe.forEach(t),Fdo=i(S),a_=n(S,"LI",{});var NFe=s(a_);SK=n(NFe,"STRONG",{});var kDr=s(SK);Cdo=r(kDr,"bart"),kDr.forEach(t),Mdo=r(NFe," \u2014 "),mS=n(NFe,"A",{href:!0});var RDr=s(mS);Edo=r(RDr,"BartForConditionalGeneration"),RDr.forEach(t),ydo=r(NFe," (BART model)"),NFe.forEach(t),wdo=i(S),n_=n(S,"LI",{});var qFe=s(n_);PK=n(qFe,"STRONG",{});var SDr=s(PK);Ado=r(SDr,"bert"),SDr.forEach(t),Ldo=r(qFe," \u2014 "),gS=n(qFe,"A",{href:!0});var PDr=s(gS);Bdo=r(PDr,"BertForPreTraining"),PDr.forEach(t),xdo=r(qFe," (BERT model)"),qFe.forEach(t),kdo=i(S),s_=n(S,"LI",{});var GFe=s(s_);$K=n(GFe,"STRONG",{});var $Dr=s($K);Rdo=r($Dr,"big_bird"),$Dr.forEach(t),Sdo=r(GFe," \u2014 "),hS=n(GFe,"A",{href:!0});var IDr=s(hS);Pdo=r(IDr,"BigBirdForPreTraining"),IDr.forEach(t),$do=r(GFe," (BigBird model)"),GFe.forEach(t),Ido=i(S),l_=n(S,"LI",{});var OFe=s(l_);IK=n(OFe,"STRONG",{});var DDr=s(IK);Ddo=r(DDr,"camembert"),DDr.forEach(t),jdo=r(OFe," \u2014 "),pS=n(OFe,"A",{href:!0});var jDr=s(pS);Ndo=r(jDr,"CamembertForMaskedLM"),jDr.forEach(t),qdo=r(OFe," (CamemBERT model)"),OFe.forEach(t),Gdo=i(S),i_=n(S,"LI",{});var XFe=s(i_);DK=n(XFe,"STRONG",{});var NDr=s(DK);Odo=r(NDr,"ctrl"),NDr.forEach(t),Xdo=r(XFe," \u2014 "),_S=n(XFe,"A",{href:!0});var qDr=s(_S);Vdo=r(qDr,"CTRLLMHeadModel"),qDr.forEach(t),zdo=r(XFe," (CTRL model)"),XFe.forEach(t),Wdo=i(S),d_=n(S,"LI",{});var VFe=s(d_);jK=n(VFe,"STRONG",{});var GDr=s(jK);Qdo=r(GDr,"data2vec-text"),GDr.forEach(t),Hdo=r(VFe," \u2014 "),uS=n(VFe,"A",{href:!0});var ODr=s(uS);Udo=r(ODr,"Data2VecTextForMaskedLM"),ODr.forEach(t),Jdo=r(VFe," (Data2VecText model)"),VFe.forEach(t),Ydo=i(S),c_=n(S,"LI",{});var zFe=s(c_);NK=n(zFe,"STRONG",{});var XDr=s(NK);Kdo=r(XDr,"deberta"),XDr.forEach(t),Zdo=r(zFe," \u2014 "),bS=n(zFe,"A",{href:!0});var VDr=s(bS);eco=r(VDr,"DebertaForMaskedLM"),VDr.forEach(t),oco=r(zFe," (DeBERTa model)"),zFe.forEach(t),rco=i(S),f_=n(S,"LI",{});var WFe=s(f_);qK=n(WFe,"STRONG",{});var zDr=s(qK);tco=r(zDr,"deberta-v2"),zDr.forEach(t),aco=r(WFe," \u2014 "),vS=n(WFe,"A",{href:!0});var WDr=s(vS);nco=r(WDr,"DebertaV2ForMaskedLM"),WDr.forEach(t),sco=r(WFe," (DeBERTa-v2 model)"),WFe.forEach(t),lco=i(S),m_=n(S,"LI",{});var QFe=s(m_);GK=n(QFe,"STRONG",{});var QDr=s(GK);ico=r(QDr,"distilbert"),QDr.forEach(t),dco=r(QFe," \u2014 "),TS=n(QFe,"A",{href:!0});var HDr=s(TS);cco=r(HDr,"DistilBertForMaskedLM"),HDr.forEach(t),fco=r(QFe," (DistilBERT model)"),QFe.forEach(t),mco=i(S),g_=n(S,"LI",{});var HFe=s(g_);OK=n(HFe,"STRONG",{});var UDr=s(OK);gco=r(UDr,"electra"),UDr.forEach(t),hco=r(HFe," \u2014 "),FS=n(HFe,"A",{href:!0});var JDr=s(FS);pco=r(JDr,"ElectraForPreTraining"),JDr.forEach(t),_co=r(HFe," (ELECTRA model)"),HFe.forEach(t),uco=i(S),h_=n(S,"LI",{});var UFe=s(h_);XK=n(UFe,"STRONG",{});var YDr=s(XK);bco=r(YDr,"flaubert"),YDr.forEach(t),vco=r(UFe," \u2014 "),CS=n(UFe,"A",{href:!0});var KDr=s(CS);Tco=r(KDr,"FlaubertWithLMHeadModel"),KDr.forEach(t),Fco=r(UFe," (FlauBERT model)"),UFe.forEach(t),Cco=i(S),p_=n(S,"LI",{});var JFe=s(p_);VK=n(JFe,"STRONG",{});var ZDr=s(VK);Mco=r(ZDr,"fnet"),ZDr.forEach(t),Eco=r(JFe," \u2014 "),MS=n(JFe,"A",{href:!0});var ejr=s(MS);yco=r(ejr,"FNetForPreTraining"),ejr.forEach(t),wco=r(JFe," (FNet model)"),JFe.forEach(t),Aco=i(S),__=n(S,"LI",{});var YFe=s(__);zK=n(YFe,"STRONG",{});var ojr=s(zK);Lco=r(ojr,"fsmt"),ojr.forEach(t),Bco=r(YFe," \u2014 "),ES=n(YFe,"A",{href:!0});var rjr=s(ES);xco=r(rjr,"FSMTForConditionalGeneration"),rjr.forEach(t),kco=r(YFe," (FairSeq Machine-Translation model)"),YFe.forEach(t),Rco=i(S),u_=n(S,"LI",{});var KFe=s(u_);WK=n(KFe,"STRONG",{});var tjr=s(WK);Sco=r(tjr,"funnel"),tjr.forEach(t),Pco=r(KFe," \u2014 "),yS=n(KFe,"A",{href:!0});var ajr=s(yS);$co=r(ajr,"FunnelForPreTraining"),ajr.forEach(t),Ico=r(KFe," (Funnel Transformer model)"),KFe.forEach(t),Dco=i(S),b_=n(S,"LI",{});var ZFe=s(b_);QK=n(ZFe,"STRONG",{});var njr=s(QK);jco=r(njr,"gpt2"),njr.forEach(t),Nco=r(ZFe," \u2014 "),wS=n(ZFe,"A",{href:!0});var sjr=s(wS);qco=r(sjr,"GPT2LMHeadModel"),sjr.forEach(t),Gco=r(ZFe," (OpenAI GPT-2 model)"),ZFe.forEach(t),Oco=i(S),v_=n(S,"LI",{});var eCe=s(v_);HK=n(eCe,"STRONG",{});var ljr=s(HK);Xco=r(ljr,"ibert"),ljr.forEach(t),Vco=r(eCe," \u2014 "),AS=n(eCe,"A",{href:!0});var ijr=s(AS);zco=r(ijr,"IBertForMaskedLM"),ijr.forEach(t),Wco=r(eCe," (I-BERT model)"),eCe.forEach(t),Qco=i(S),T_=n(S,"LI",{});var oCe=s(T_);UK=n(oCe,"STRONG",{});var djr=s(UK);Hco=r(djr,"layoutlm"),djr.forEach(t),Uco=r(oCe," \u2014 "),LS=n(oCe,"A",{href:!0});var cjr=s(LS);Jco=r(cjr,"LayoutLMForMaskedLM"),cjr.forEach(t),Yco=r(oCe," (LayoutLM model)"),oCe.forEach(t),Kco=i(S),F_=n(S,"LI",{});var rCe=s(F_);JK=n(rCe,"STRONG",{});var fjr=s(JK);Zco=r(fjr,"longformer"),fjr.forEach(t),efo=r(rCe," \u2014 "),BS=n(rCe,"A",{href:!0});var mjr=s(BS);ofo=r(mjr,"LongformerForMaskedLM"),mjr.forEach(t),rfo=r(rCe," (Longformer model)"),rCe.forEach(t),tfo=i(S),C_=n(S,"LI",{});var tCe=s(C_);YK=n(tCe,"STRONG",{});var gjr=s(YK);afo=r(gjr,"lxmert"),gjr.forEach(t),nfo=r(tCe," \u2014 "),xS=n(tCe,"A",{href:!0});var hjr=s(xS);sfo=r(hjr,"LxmertForPreTraining"),hjr.forEach(t),lfo=r(tCe," (LXMERT model)"),tCe.forEach(t),ifo=i(S),M_=n(S,"LI",{});var aCe=s(M_);KK=n(aCe,"STRONG",{});var pjr=s(KK);dfo=r(pjr,"megatron-bert"),pjr.forEach(t),cfo=r(aCe," \u2014 "),kS=n(aCe,"A",{href:!0});var _jr=s(kS);ffo=r(_jr,"MegatronBertForPreTraining"),_jr.forEach(t),mfo=r(aCe," (MegatronBert model)"),aCe.forEach(t),gfo=i(S),E_=n(S,"LI",{});var nCe=s(E_);ZK=n(nCe,"STRONG",{});var ujr=s(ZK);hfo=r(ujr,"mobilebert"),ujr.forEach(t),pfo=r(nCe," \u2014 "),RS=n(nCe,"A",{href:!0});var bjr=s(RS);_fo=r(bjr,"MobileBertForPreTraining"),bjr.forEach(t),ufo=r(nCe," (MobileBERT model)"),nCe.forEach(t),bfo=i(S),y_=n(S,"LI",{});var sCe=s(y_);eZ=n(sCe,"STRONG",{});var vjr=s(eZ);vfo=r(vjr,"mpnet"),vjr.forEach(t),Tfo=r(sCe," \u2014 "),SS=n(sCe,"A",{href:!0});var Tjr=s(SS);Ffo=r(Tjr,"MPNetForMaskedLM"),Tjr.forEach(t),Cfo=r(sCe," (MPNet model)"),sCe.forEach(t),Mfo=i(S),w_=n(S,"LI",{});var lCe=s(w_);oZ=n(lCe,"STRONG",{});var Fjr=s(oZ);Efo=r(Fjr,"openai-gpt"),Fjr.forEach(t),yfo=r(lCe," \u2014 "),PS=n(lCe,"A",{href:!0});var Cjr=s(PS);wfo=r(Cjr,"OpenAIGPTLMHeadModel"),Cjr.forEach(t),Afo=r(lCe," (OpenAI GPT model)"),lCe.forEach(t),Lfo=i(S),A_=n(S,"LI",{});var iCe=s(A_);rZ=n(iCe,"STRONG",{});var Mjr=s(rZ);Bfo=r(Mjr,"retribert"),Mjr.forEach(t),xfo=r(iCe," \u2014 "),$S=n(iCe,"A",{href:!0});var Ejr=s($S);kfo=r(Ejr,"RetriBertModel"),Ejr.forEach(t),Rfo=r(iCe," (RetriBERT model)"),iCe.forEach(t),Sfo=i(S),L_=n(S,"LI",{});var dCe=s(L_);tZ=n(dCe,"STRONG",{});var yjr=s(tZ);Pfo=r(yjr,"roberta"),yjr.forEach(t),$fo=r(dCe," \u2014 "),IS=n(dCe,"A",{href:!0});var wjr=s(IS);Ifo=r(wjr,"RobertaForMaskedLM"),wjr.forEach(t),Dfo=r(dCe," (RoBERTa model)"),dCe.forEach(t),jfo=i(S),B_=n(S,"LI",{});var cCe=s(B_);aZ=n(cCe,"STRONG",{});var Ajr=s(aZ);Nfo=r(Ajr,"squeezebert"),Ajr.forEach(t),qfo=r(cCe," \u2014 "),DS=n(cCe,"A",{href:!0});var Ljr=s(DS);Gfo=r(Ljr,"SqueezeBertForMaskedLM"),Ljr.forEach(t),Ofo=r(cCe," (SqueezeBERT model)"),cCe.forEach(t),Xfo=i(S),x_=n(S,"LI",{});var fCe=s(x_);nZ=n(fCe,"STRONG",{});var Bjr=s(nZ);Vfo=r(Bjr,"t5"),Bjr.forEach(t),zfo=r(fCe," \u2014 "),jS=n(fCe,"A",{href:!0});var xjr=s(jS);Wfo=r(xjr,"T5ForConditionalGeneration"),xjr.forEach(t),Qfo=r(fCe," (T5 model)"),fCe.forEach(t),Hfo=i(S),k_=n(S,"LI",{});var mCe=s(k_);sZ=n(mCe,"STRONG",{});var kjr=s(sZ);Ufo=r(kjr,"tapas"),kjr.forEach(t),Jfo=r(mCe," \u2014 "),NS=n(mCe,"A",{href:!0});var Rjr=s(NS);Yfo=r(Rjr,"TapasForMaskedLM"),Rjr.forEach(t),Kfo=r(mCe," (TAPAS model)"),mCe.forEach(t),Zfo=i(S),R_=n(S,"LI",{});var gCe=s(R_);lZ=n(gCe,"STRONG",{});var Sjr=s(lZ);emo=r(Sjr,"transfo-xl"),Sjr.forEach(t),omo=r(gCe," \u2014 "),qS=n(gCe,"A",{href:!0});var Pjr=s(qS);rmo=r(Pjr,"TransfoXLLMHeadModel"),Pjr.forEach(t),tmo=r(gCe," (Transformer-XL model)"),gCe.forEach(t),amo=i(S),S_=n(S,"LI",{});var hCe=s(S_);iZ=n(hCe,"STRONG",{});var $jr=s(iZ);nmo=r($jr,"unispeech"),$jr.forEach(t),smo=r(hCe," \u2014 "),GS=n(hCe,"A",{href:!0});var Ijr=s(GS);lmo=r(Ijr,"UniSpeechForPreTraining"),Ijr.forEach(t),imo=r(hCe," (UniSpeech model)"),hCe.forEach(t),dmo=i(S),P_=n(S,"LI",{});var pCe=s(P_);dZ=n(pCe,"STRONG",{});var Djr=s(dZ);cmo=r(Djr,"unispeech-sat"),Djr.forEach(t),fmo=r(pCe," \u2014 "),OS=n(pCe,"A",{href:!0});var jjr=s(OS);mmo=r(jjr,"UniSpeechSatForPreTraining"),jjr.forEach(t),gmo=r(pCe," (UniSpeechSat model)"),pCe.forEach(t),hmo=i(S),$_=n(S,"LI",{});var _Ce=s($_);cZ=n(_Ce,"STRONG",{});var Njr=s(cZ);pmo=r(Njr,"visual_bert"),Njr.forEach(t),_mo=r(_Ce," \u2014 "),XS=n(_Ce,"A",{href:!0});var qjr=s(XS);umo=r(qjr,"VisualBertForPreTraining"),qjr.forEach(t),bmo=r(_Ce," (VisualBert model)"),_Ce.forEach(t),vmo=i(S),I_=n(S,"LI",{});var uCe=s(I_);fZ=n(uCe,"STRONG",{});var Gjr=s(fZ);Tmo=r(Gjr,"vit_mae"),Gjr.forEach(t),Fmo=r(uCe," \u2014 "),VS=n(uCe,"A",{href:!0});var Ojr=s(VS);Cmo=r(Ojr,"ViTMAEForPreTraining"),Ojr.forEach(t),Mmo=r(uCe," (ViTMAE model)"),uCe.forEach(t),Emo=i(S),D_=n(S,"LI",{});var bCe=s(D_);mZ=n(bCe,"STRONG",{});var Xjr=s(mZ);ymo=r(Xjr,"wav2vec2"),Xjr.forEach(t),wmo=r(bCe," \u2014 "),zS=n(bCe,"A",{href:!0});var Vjr=s(zS);Amo=r(Vjr,"Wav2Vec2ForPreTraining"),Vjr.forEach(t),Lmo=r(bCe," (Wav2Vec2 model)"),bCe.forEach(t),Bmo=i(S),j_=n(S,"LI",{});var vCe=s(j_);gZ=n(vCe,"STRONG",{});var zjr=s(gZ);xmo=r(zjr,"xlm"),zjr.forEach(t),kmo=r(vCe," \u2014 "),WS=n(vCe,"A",{href:!0});var Wjr=s(WS);Rmo=r(Wjr,"XLMWithLMHeadModel"),Wjr.forEach(t),Smo=r(vCe," (XLM model)"),vCe.forEach(t),Pmo=i(S),N_=n(S,"LI",{});var TCe=s(N_);hZ=n(TCe,"STRONG",{});var Qjr=s(hZ);$mo=r(Qjr,"xlm-roberta"),Qjr.forEach(t),Imo=r(TCe," \u2014 "),QS=n(TCe,"A",{href:!0});var Hjr=s(QS);Dmo=r(Hjr,"XLMRobertaForMaskedLM"),Hjr.forEach(t),jmo=r(TCe," (XLM-RoBERTa model)"),TCe.forEach(t),Nmo=i(S),q_=n(S,"LI",{});var FCe=s(q_);pZ=n(FCe,"STRONG",{});var Ujr=s(pZ);qmo=r(Ujr,"xlm-roberta-xl"),Ujr.forEach(t),Gmo=r(FCe," \u2014 "),HS=n(FCe,"A",{href:!0});var Jjr=s(HS);Omo=r(Jjr,"XLMRobertaXLForMaskedLM"),Jjr.forEach(t),Xmo=r(FCe," (XLM-RoBERTa-XL model)"),FCe.forEach(t),Vmo=i(S),G_=n(S,"LI",{});var CCe=s(G_);_Z=n(CCe,"STRONG",{});var Yjr=s(_Z);zmo=r(Yjr,"xlnet"),Yjr.forEach(t),Wmo=r(CCe," \u2014 "),US=n(CCe,"A",{href:!0});var Kjr=s(US);Qmo=r(Kjr,"XLNetLMHeadModel"),Kjr.forEach(t),Hmo=r(CCe," (XLNet model)"),CCe.forEach(t),S.forEach(t),Umo=i(It),O_=n(It,"P",{});var MCe=s(O_);Jmo=r(MCe,"The model is set in evaluation mode by default using "),uZ=n(MCe,"CODE",{});var Zjr=s(uZ);Ymo=r(Zjr,"model.eval()"),Zjr.forEach(t),Kmo=r(MCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bZ=n(MCe,"CODE",{});var eNr=s(bZ);Zmo=r(eNr,"model.train()"),eNr.forEach(t),MCe.forEach(t),ego=i(It),vZ=n(It,"P",{});var oNr=s(vZ);ogo=r(oNr,"Examples:"),oNr.forEach(t),rgo=i(It),m(fE.$$.fragment,It),It.forEach(t),Os.forEach(t),w9e=i(d),Hi=n(d,"H2",{class:!0});var Sxe=s(Hi);X_=n(Sxe,"A",{id:!0,class:!0,href:!0});var rNr=s(X_);TZ=n(rNr,"SPAN",{});var tNr=s(TZ);m(mE.$$.fragment,tNr),tNr.forEach(t),rNr.forEach(t),tgo=i(Sxe),FZ=n(Sxe,"SPAN",{});var aNr=s(FZ);ago=r(aNr,"AutoModelForCausalLM"),aNr.forEach(t),Sxe.forEach(t),A9e=i(d),Uo=n(d,"DIV",{class:!0});var Vs=s(Uo);m(gE.$$.fragment,Vs),ngo=i(Vs),Ui=n(Vs,"P",{});var LV=s(Ui);sgo=r(LV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CZ=n(LV,"CODE",{});var nNr=s(CZ);lgo=r(nNr,"from_pretrained()"),nNr.forEach(t),igo=r(LV,"class method or the "),MZ=n(LV,"CODE",{});var sNr=s(MZ);dgo=r(sNr,"from_config()"),sNr.forEach(t),cgo=r(LV,`class
method.`),LV.forEach(t),fgo=i(Vs),hE=n(Vs,"P",{});var Pxe=s(hE);mgo=r(Pxe,"This class cannot be instantiated directly using "),EZ=n(Pxe,"CODE",{});var lNr=s(EZ);ggo=r(lNr,"__init__()"),lNr.forEach(t),hgo=r(Pxe," (throws an error)."),Pxe.forEach(t),pgo=i(Vs),Or=n(Vs,"DIV",{class:!0});var zs=s(Or);m(pE.$$.fragment,zs),_go=i(zs),yZ=n(zs,"P",{});var iNr=s(yZ);ugo=r(iNr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iNr.forEach(t),bgo=i(zs),Ji=n(zs,"P",{});var BV=s(Ji);vgo=r(BV,`Note:
Loading a model from its configuration file does `),wZ=n(BV,"STRONG",{});var dNr=s(wZ);Tgo=r(dNr,"not"),dNr.forEach(t),Fgo=r(BV,` load the model weights. It only affects the
model\u2019s configuration. Use `),AZ=n(BV,"CODE",{});var cNr=s(AZ);Cgo=r(cNr,"from_pretrained()"),cNr.forEach(t),Mgo=r(BV,"to load the model weights."),BV.forEach(t),Ego=i(zs),LZ=n(zs,"P",{});var fNr=s(LZ);ygo=r(fNr,"Examples:"),fNr.forEach(t),wgo=i(zs),m(_E.$$.fragment,zs),zs.forEach(t),Ago=i(Vs),Pe=n(Vs,"DIV",{class:!0});var Dt=s(Pe);m(uE.$$.fragment,Dt),Lgo=i(Dt),BZ=n(Dt,"P",{});var mNr=s(BZ);Bgo=r(mNr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mNr.forEach(t),xgo=i(Dt),Ga=n(Dt,"P",{});var E4=s(Ga);kgo=r(E4,"The model class to instantiate is selected based on the "),xZ=n(E4,"CODE",{});var gNr=s(xZ);Rgo=r(gNr,"model_type"),gNr.forEach(t),Sgo=r(E4,` property of the config object (either
passed as an argument or loaded from `),kZ=n(E4,"CODE",{});var hNr=s(kZ);Pgo=r(hNr,"pretrained_model_name_or_path"),hNr.forEach(t),$go=r(E4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RZ=n(E4,"CODE",{});var pNr=s(RZ);Igo=r(pNr,"pretrained_model_name_or_path"),pNr.forEach(t),Dgo=r(E4,":"),E4.forEach(t),jgo=i(Dt),$=n(Dt,"UL",{});var D=s($);V_=n(D,"LI",{});var ECe=s(V_);SZ=n(ECe,"STRONG",{});var _Nr=s(SZ);Ngo=r(_Nr,"bart"),_Nr.forEach(t),qgo=r(ECe," \u2014 "),JS=n(ECe,"A",{href:!0});var uNr=s(JS);Ggo=r(uNr,"BartForCausalLM"),uNr.forEach(t),Ogo=r(ECe," (BART model)"),ECe.forEach(t),Xgo=i(D),z_=n(D,"LI",{});var yCe=s(z_);PZ=n(yCe,"STRONG",{});var bNr=s(PZ);Vgo=r(bNr,"bert"),bNr.forEach(t),zgo=r(yCe," \u2014 "),YS=n(yCe,"A",{href:!0});var vNr=s(YS);Wgo=r(vNr,"BertLMHeadModel"),vNr.forEach(t),Qgo=r(yCe," (BERT model)"),yCe.forEach(t),Hgo=i(D),W_=n(D,"LI",{});var wCe=s(W_);$Z=n(wCe,"STRONG",{});var TNr=s($Z);Ugo=r(TNr,"bert-generation"),TNr.forEach(t),Jgo=r(wCe," \u2014 "),KS=n(wCe,"A",{href:!0});var FNr=s(KS);Ygo=r(FNr,"BertGenerationDecoder"),FNr.forEach(t),Kgo=r(wCe," (Bert Generation model)"),wCe.forEach(t),Zgo=i(D),Q_=n(D,"LI",{});var ACe=s(Q_);IZ=n(ACe,"STRONG",{});var CNr=s(IZ);eho=r(CNr,"big_bird"),CNr.forEach(t),oho=r(ACe," \u2014 "),ZS=n(ACe,"A",{href:!0});var MNr=s(ZS);rho=r(MNr,"BigBirdForCausalLM"),MNr.forEach(t),tho=r(ACe," (BigBird model)"),ACe.forEach(t),aho=i(D),H_=n(D,"LI",{});var LCe=s(H_);DZ=n(LCe,"STRONG",{});var ENr=s(DZ);nho=r(ENr,"bigbird_pegasus"),ENr.forEach(t),sho=r(LCe," \u2014 "),eP=n(LCe,"A",{href:!0});var yNr=s(eP);lho=r(yNr,"BigBirdPegasusForCausalLM"),yNr.forEach(t),iho=r(LCe," (BigBirdPegasus model)"),LCe.forEach(t),dho=i(D),U_=n(D,"LI",{});var BCe=s(U_);jZ=n(BCe,"STRONG",{});var wNr=s(jZ);cho=r(wNr,"blenderbot"),wNr.forEach(t),fho=r(BCe," \u2014 "),oP=n(BCe,"A",{href:!0});var ANr=s(oP);mho=r(ANr,"BlenderbotForCausalLM"),ANr.forEach(t),gho=r(BCe," (Blenderbot model)"),BCe.forEach(t),hho=i(D),J_=n(D,"LI",{});var xCe=s(J_);NZ=n(xCe,"STRONG",{});var LNr=s(NZ);pho=r(LNr,"blenderbot-small"),LNr.forEach(t),_ho=r(xCe," \u2014 "),rP=n(xCe,"A",{href:!0});var BNr=s(rP);uho=r(BNr,"BlenderbotSmallForCausalLM"),BNr.forEach(t),bho=r(xCe," (BlenderbotSmall model)"),xCe.forEach(t),vho=i(D),Y_=n(D,"LI",{});var kCe=s(Y_);qZ=n(kCe,"STRONG",{});var xNr=s(qZ);Tho=r(xNr,"camembert"),xNr.forEach(t),Fho=r(kCe," \u2014 "),tP=n(kCe,"A",{href:!0});var kNr=s(tP);Cho=r(kNr,"CamembertForCausalLM"),kNr.forEach(t),Mho=r(kCe," (CamemBERT model)"),kCe.forEach(t),Eho=i(D),K_=n(D,"LI",{});var RCe=s(K_);GZ=n(RCe,"STRONG",{});var RNr=s(GZ);yho=r(RNr,"ctrl"),RNr.forEach(t),who=r(RCe," \u2014 "),aP=n(RCe,"A",{href:!0});var SNr=s(aP);Aho=r(SNr,"CTRLLMHeadModel"),SNr.forEach(t),Lho=r(RCe," (CTRL model)"),RCe.forEach(t),Bho=i(D),Z_=n(D,"LI",{});var SCe=s(Z_);OZ=n(SCe,"STRONG",{});var PNr=s(OZ);xho=r(PNr,"data2vec-text"),PNr.forEach(t),kho=r(SCe," \u2014 "),nP=n(SCe,"A",{href:!0});var $Nr=s(nP);Rho=r($Nr,"Data2VecTextForCausalLM"),$Nr.forEach(t),Sho=r(SCe," (Data2VecText model)"),SCe.forEach(t),Pho=i(D),eu=n(D,"LI",{});var PCe=s(eu);XZ=n(PCe,"STRONG",{});var INr=s(XZ);$ho=r(INr,"electra"),INr.forEach(t),Iho=r(PCe," \u2014 "),sP=n(PCe,"A",{href:!0});var DNr=s(sP);Dho=r(DNr,"ElectraForCausalLM"),DNr.forEach(t),jho=r(PCe," (ELECTRA model)"),PCe.forEach(t),Nho=i(D),ou=n(D,"LI",{});var $Ce=s(ou);VZ=n($Ce,"STRONG",{});var jNr=s(VZ);qho=r(jNr,"gpt2"),jNr.forEach(t),Gho=r($Ce," \u2014 "),lP=n($Ce,"A",{href:!0});var NNr=s(lP);Oho=r(NNr,"GPT2LMHeadModel"),NNr.forEach(t),Xho=r($Ce," (OpenAI GPT-2 model)"),$Ce.forEach(t),Vho=i(D),ru=n(D,"LI",{});var ICe=s(ru);zZ=n(ICe,"STRONG",{});var qNr=s(zZ);zho=r(qNr,"gpt_neo"),qNr.forEach(t),Who=r(ICe," \u2014 "),iP=n(ICe,"A",{href:!0});var GNr=s(iP);Qho=r(GNr,"GPTNeoForCausalLM"),GNr.forEach(t),Hho=r(ICe," (GPT Neo model)"),ICe.forEach(t),Uho=i(D),tu=n(D,"LI",{});var DCe=s(tu);WZ=n(DCe,"STRONG",{});var ONr=s(WZ);Jho=r(ONr,"gptj"),ONr.forEach(t),Yho=r(DCe," \u2014 "),dP=n(DCe,"A",{href:!0});var XNr=s(dP);Kho=r(XNr,"GPTJForCausalLM"),XNr.forEach(t),Zho=r(DCe," (GPT-J model)"),DCe.forEach(t),epo=i(D),au=n(D,"LI",{});var jCe=s(au);QZ=n(jCe,"STRONG",{});var VNr=s(QZ);opo=r(VNr,"marian"),VNr.forEach(t),rpo=r(jCe," \u2014 "),cP=n(jCe,"A",{href:!0});var zNr=s(cP);tpo=r(zNr,"MarianForCausalLM"),zNr.forEach(t),apo=r(jCe," (Marian model)"),jCe.forEach(t),npo=i(D),nu=n(D,"LI",{});var NCe=s(nu);HZ=n(NCe,"STRONG",{});var WNr=s(HZ);spo=r(WNr,"mbart"),WNr.forEach(t),lpo=r(NCe," \u2014 "),fP=n(NCe,"A",{href:!0});var QNr=s(fP);ipo=r(QNr,"MBartForCausalLM"),QNr.forEach(t),dpo=r(NCe," (mBART model)"),NCe.forEach(t),cpo=i(D),su=n(D,"LI",{});var qCe=s(su);UZ=n(qCe,"STRONG",{});var HNr=s(UZ);fpo=r(HNr,"megatron-bert"),HNr.forEach(t),mpo=r(qCe," \u2014 "),mP=n(qCe,"A",{href:!0});var UNr=s(mP);gpo=r(UNr,"MegatronBertForCausalLM"),UNr.forEach(t),hpo=r(qCe," (MegatronBert model)"),qCe.forEach(t),ppo=i(D),lu=n(D,"LI",{});var GCe=s(lu);JZ=n(GCe,"STRONG",{});var JNr=s(JZ);_po=r(JNr,"openai-gpt"),JNr.forEach(t),upo=r(GCe," \u2014 "),gP=n(GCe,"A",{href:!0});var YNr=s(gP);bpo=r(YNr,"OpenAIGPTLMHeadModel"),YNr.forEach(t),vpo=r(GCe," (OpenAI GPT model)"),GCe.forEach(t),Tpo=i(D),iu=n(D,"LI",{});var OCe=s(iu);YZ=n(OCe,"STRONG",{});var KNr=s(YZ);Fpo=r(KNr,"pegasus"),KNr.forEach(t),Cpo=r(OCe," \u2014 "),hP=n(OCe,"A",{href:!0});var ZNr=s(hP);Mpo=r(ZNr,"PegasusForCausalLM"),ZNr.forEach(t),Epo=r(OCe," (Pegasus model)"),OCe.forEach(t),ypo=i(D),du=n(D,"LI",{});var XCe=s(du);KZ=n(XCe,"STRONG",{});var eqr=s(KZ);wpo=r(eqr,"plbart"),eqr.forEach(t),Apo=r(XCe," \u2014 "),pP=n(XCe,"A",{href:!0});var oqr=s(pP);Lpo=r(oqr,"PLBartForCausalLM"),oqr.forEach(t),Bpo=r(XCe," (PLBart model)"),XCe.forEach(t),xpo=i(D),cu=n(D,"LI",{});var VCe=s(cu);ZZ=n(VCe,"STRONG",{});var rqr=s(ZZ);kpo=r(rqr,"prophetnet"),rqr.forEach(t),Rpo=r(VCe," \u2014 "),_P=n(VCe,"A",{href:!0});var tqr=s(_P);Spo=r(tqr,"ProphetNetForCausalLM"),tqr.forEach(t),Ppo=r(VCe," (ProphetNet model)"),VCe.forEach(t),$po=i(D),fu=n(D,"LI",{});var zCe=s(fu);eee=n(zCe,"STRONG",{});var aqr=s(eee);Ipo=r(aqr,"qdqbert"),aqr.forEach(t),Dpo=r(zCe," \u2014 "),uP=n(zCe,"A",{href:!0});var nqr=s(uP);jpo=r(nqr,"QDQBertLMHeadModel"),nqr.forEach(t),Npo=r(zCe," (QDQBert model)"),zCe.forEach(t),qpo=i(D),mu=n(D,"LI",{});var WCe=s(mu);oee=n(WCe,"STRONG",{});var sqr=s(oee);Gpo=r(sqr,"reformer"),sqr.forEach(t),Opo=r(WCe," \u2014 "),bP=n(WCe,"A",{href:!0});var lqr=s(bP);Xpo=r(lqr,"ReformerModelWithLMHead"),lqr.forEach(t),Vpo=r(WCe," (Reformer model)"),WCe.forEach(t),zpo=i(D),gu=n(D,"LI",{});var QCe=s(gu);ree=n(QCe,"STRONG",{});var iqr=s(ree);Wpo=r(iqr,"rembert"),iqr.forEach(t),Qpo=r(QCe," \u2014 "),vP=n(QCe,"A",{href:!0});var dqr=s(vP);Hpo=r(dqr,"RemBertForCausalLM"),dqr.forEach(t),Upo=r(QCe," (RemBERT model)"),QCe.forEach(t),Jpo=i(D),hu=n(D,"LI",{});var HCe=s(hu);tee=n(HCe,"STRONG",{});var cqr=s(tee);Ypo=r(cqr,"roberta"),cqr.forEach(t),Kpo=r(HCe," \u2014 "),TP=n(HCe,"A",{href:!0});var fqr=s(TP);Zpo=r(fqr,"RobertaForCausalLM"),fqr.forEach(t),e_o=r(HCe," (RoBERTa model)"),HCe.forEach(t),o_o=i(D),pu=n(D,"LI",{});var UCe=s(pu);aee=n(UCe,"STRONG",{});var mqr=s(aee);r_o=r(mqr,"roformer"),mqr.forEach(t),t_o=r(UCe," \u2014 "),FP=n(UCe,"A",{href:!0});var gqr=s(FP);a_o=r(gqr,"RoFormerForCausalLM"),gqr.forEach(t),n_o=r(UCe," (RoFormer model)"),UCe.forEach(t),s_o=i(D),_u=n(D,"LI",{});var JCe=s(_u);nee=n(JCe,"STRONG",{});var hqr=s(nee);l_o=r(hqr,"speech_to_text_2"),hqr.forEach(t),i_o=r(JCe," \u2014 "),CP=n(JCe,"A",{href:!0});var pqr=s(CP);d_o=r(pqr,"Speech2Text2ForCausalLM"),pqr.forEach(t),c_o=r(JCe," (Speech2Text2 model)"),JCe.forEach(t),f_o=i(D),uu=n(D,"LI",{});var YCe=s(uu);see=n(YCe,"STRONG",{});var _qr=s(see);m_o=r(_qr,"transfo-xl"),_qr.forEach(t),g_o=r(YCe," \u2014 "),MP=n(YCe,"A",{href:!0});var uqr=s(MP);h_o=r(uqr,"TransfoXLLMHeadModel"),uqr.forEach(t),p_o=r(YCe," (Transformer-XL model)"),YCe.forEach(t),__o=i(D),bu=n(D,"LI",{});var KCe=s(bu);lee=n(KCe,"STRONG",{});var bqr=s(lee);u_o=r(bqr,"trocr"),bqr.forEach(t),b_o=r(KCe," \u2014 "),EP=n(KCe,"A",{href:!0});var vqr=s(EP);v_o=r(vqr,"TrOCRForCausalLM"),vqr.forEach(t),T_o=r(KCe," (TrOCR model)"),KCe.forEach(t),F_o=i(D),vu=n(D,"LI",{});var ZCe=s(vu);iee=n(ZCe,"STRONG",{});var Tqr=s(iee);C_o=r(Tqr,"xglm"),Tqr.forEach(t),M_o=r(ZCe," \u2014 "),yP=n(ZCe,"A",{href:!0});var Fqr=s(yP);E_o=r(Fqr,"XGLMForCausalLM"),Fqr.forEach(t),y_o=r(ZCe," (XGLM model)"),ZCe.forEach(t),w_o=i(D),Tu=n(D,"LI",{});var e4e=s(Tu);dee=n(e4e,"STRONG",{});var Cqr=s(dee);A_o=r(Cqr,"xlm"),Cqr.forEach(t),L_o=r(e4e," \u2014 "),wP=n(e4e,"A",{href:!0});var Mqr=s(wP);B_o=r(Mqr,"XLMWithLMHeadModel"),Mqr.forEach(t),x_o=r(e4e," (XLM model)"),e4e.forEach(t),k_o=i(D),Fu=n(D,"LI",{});var o4e=s(Fu);cee=n(o4e,"STRONG",{});var Eqr=s(cee);R_o=r(Eqr,"xlm-prophetnet"),Eqr.forEach(t),S_o=r(o4e," \u2014 "),AP=n(o4e,"A",{href:!0});var yqr=s(AP);P_o=r(yqr,"XLMProphetNetForCausalLM"),yqr.forEach(t),$_o=r(o4e," (XLMProphetNet model)"),o4e.forEach(t),I_o=i(D),Cu=n(D,"LI",{});var r4e=s(Cu);fee=n(r4e,"STRONG",{});var wqr=s(fee);D_o=r(wqr,"xlm-roberta"),wqr.forEach(t),j_o=r(r4e," \u2014 "),LP=n(r4e,"A",{href:!0});var Aqr=s(LP);N_o=r(Aqr,"XLMRobertaForCausalLM"),Aqr.forEach(t),q_o=r(r4e," (XLM-RoBERTa model)"),r4e.forEach(t),G_o=i(D),Mu=n(D,"LI",{});var t4e=s(Mu);mee=n(t4e,"STRONG",{});var Lqr=s(mee);O_o=r(Lqr,"xlm-roberta-xl"),Lqr.forEach(t),X_o=r(t4e," \u2014 "),BP=n(t4e,"A",{href:!0});var Bqr=s(BP);V_o=r(Bqr,"XLMRobertaXLForCausalLM"),Bqr.forEach(t),z_o=r(t4e," (XLM-RoBERTa-XL model)"),t4e.forEach(t),W_o=i(D),Eu=n(D,"LI",{});var a4e=s(Eu);gee=n(a4e,"STRONG",{});var xqr=s(gee);Q_o=r(xqr,"xlnet"),xqr.forEach(t),H_o=r(a4e," \u2014 "),xP=n(a4e,"A",{href:!0});var kqr=s(xP);U_o=r(kqr,"XLNetLMHeadModel"),kqr.forEach(t),J_o=r(a4e," (XLNet model)"),a4e.forEach(t),D.forEach(t),Y_o=i(Dt),yu=n(Dt,"P",{});var n4e=s(yu);K_o=r(n4e,"The model is set in evaluation mode by default using "),hee=n(n4e,"CODE",{});var Rqr=s(hee);Z_o=r(Rqr,"model.eval()"),Rqr.forEach(t),euo=r(n4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pee=n(n4e,"CODE",{});var Sqr=s(pee);ouo=r(Sqr,"model.train()"),Sqr.forEach(t),n4e.forEach(t),ruo=i(Dt),_ee=n(Dt,"P",{});var Pqr=s(_ee);tuo=r(Pqr,"Examples:"),Pqr.forEach(t),auo=i(Dt),m(bE.$$.fragment,Dt),Dt.forEach(t),Vs.forEach(t),L9e=i(d),Yi=n(d,"H2",{class:!0});var $xe=s(Yi);wu=n($xe,"A",{id:!0,class:!0,href:!0});var $qr=s(wu);uee=n($qr,"SPAN",{});var Iqr=s(uee);m(vE.$$.fragment,Iqr),Iqr.forEach(t),$qr.forEach(t),nuo=i($xe),bee=n($xe,"SPAN",{});var Dqr=s(bee);suo=r(Dqr,"AutoModelForMaskedLM"),Dqr.forEach(t),$xe.forEach(t),B9e=i(d),Jo=n(d,"DIV",{class:!0});var Ws=s(Jo);m(TE.$$.fragment,Ws),luo=i(Ws),Ki=n(Ws,"P",{});var xV=s(Ki);iuo=r(xV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vee=n(xV,"CODE",{});var jqr=s(vee);duo=r(jqr,"from_pretrained()"),jqr.forEach(t),cuo=r(xV,"class method or the "),Tee=n(xV,"CODE",{});var Nqr=s(Tee);fuo=r(Nqr,"from_config()"),Nqr.forEach(t),muo=r(xV,`class
method.`),xV.forEach(t),guo=i(Ws),FE=n(Ws,"P",{});var Ixe=s(FE);huo=r(Ixe,"This class cannot be instantiated directly using "),Fee=n(Ixe,"CODE",{});var qqr=s(Fee);puo=r(qqr,"__init__()"),qqr.forEach(t),_uo=r(Ixe," (throws an error)."),Ixe.forEach(t),uuo=i(Ws),Xr=n(Ws,"DIV",{class:!0});var Qs=s(Xr);m(CE.$$.fragment,Qs),buo=i(Qs),Cee=n(Qs,"P",{});var Gqr=s(Cee);vuo=r(Gqr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Gqr.forEach(t),Tuo=i(Qs),Zi=n(Qs,"P",{});var kV=s(Zi);Fuo=r(kV,`Note:
Loading a model from its configuration file does `),Mee=n(kV,"STRONG",{});var Oqr=s(Mee);Cuo=r(Oqr,"not"),Oqr.forEach(t),Muo=r(kV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eee=n(kV,"CODE",{});var Xqr=s(Eee);Euo=r(Xqr,"from_pretrained()"),Xqr.forEach(t),yuo=r(kV,"to load the model weights."),kV.forEach(t),wuo=i(Qs),yee=n(Qs,"P",{});var Vqr=s(yee);Auo=r(Vqr,"Examples:"),Vqr.forEach(t),Luo=i(Qs),m(ME.$$.fragment,Qs),Qs.forEach(t),Buo=i(Ws),$e=n(Ws,"DIV",{class:!0});var jt=s($e);m(EE.$$.fragment,jt),xuo=i(jt),wee=n(jt,"P",{});var zqr=s(wee);kuo=r(zqr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zqr.forEach(t),Ruo=i(jt),Oa=n(jt,"P",{});var y4=s(Oa);Suo=r(y4,"The model class to instantiate is selected based on the "),Aee=n(y4,"CODE",{});var Wqr=s(Aee);Puo=r(Wqr,"model_type"),Wqr.forEach(t),$uo=r(y4,` property of the config object (either
passed as an argument or loaded from `),Lee=n(y4,"CODE",{});var Qqr=s(Lee);Iuo=r(Qqr,"pretrained_model_name_or_path"),Qqr.forEach(t),Duo=r(y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bee=n(y4,"CODE",{});var Hqr=s(Bee);juo=r(Hqr,"pretrained_model_name_or_path"),Hqr.forEach(t),Nuo=r(y4,":"),y4.forEach(t),quo=i(jt),I=n(jt,"UL",{});var j=s(I);Au=n(j,"LI",{});var s4e=s(Au);xee=n(s4e,"STRONG",{});var Uqr=s(xee);Guo=r(Uqr,"albert"),Uqr.forEach(t),Ouo=r(s4e," \u2014 "),kP=n(s4e,"A",{href:!0});var Jqr=s(kP);Xuo=r(Jqr,"AlbertForMaskedLM"),Jqr.forEach(t),Vuo=r(s4e," (ALBERT model)"),s4e.forEach(t),zuo=i(j),Lu=n(j,"LI",{});var l4e=s(Lu);kee=n(l4e,"STRONG",{});var Yqr=s(kee);Wuo=r(Yqr,"bart"),Yqr.forEach(t),Quo=r(l4e," \u2014 "),RP=n(l4e,"A",{href:!0});var Kqr=s(RP);Huo=r(Kqr,"BartForConditionalGeneration"),Kqr.forEach(t),Uuo=r(l4e," (BART model)"),l4e.forEach(t),Juo=i(j),Bu=n(j,"LI",{});var i4e=s(Bu);Ree=n(i4e,"STRONG",{});var Zqr=s(Ree);Yuo=r(Zqr,"bert"),Zqr.forEach(t),Kuo=r(i4e," \u2014 "),SP=n(i4e,"A",{href:!0});var eGr=s(SP);Zuo=r(eGr,"BertForMaskedLM"),eGr.forEach(t),e5o=r(i4e," (BERT model)"),i4e.forEach(t),o5o=i(j),xu=n(j,"LI",{});var d4e=s(xu);See=n(d4e,"STRONG",{});var oGr=s(See);r5o=r(oGr,"big_bird"),oGr.forEach(t),t5o=r(d4e," \u2014 "),PP=n(d4e,"A",{href:!0});var rGr=s(PP);a5o=r(rGr,"BigBirdForMaskedLM"),rGr.forEach(t),n5o=r(d4e," (BigBird model)"),d4e.forEach(t),s5o=i(j),ku=n(j,"LI",{});var c4e=s(ku);Pee=n(c4e,"STRONG",{});var tGr=s(Pee);l5o=r(tGr,"camembert"),tGr.forEach(t),i5o=r(c4e," \u2014 "),$P=n(c4e,"A",{href:!0});var aGr=s($P);d5o=r(aGr,"CamembertForMaskedLM"),aGr.forEach(t),c5o=r(c4e," (CamemBERT model)"),c4e.forEach(t),f5o=i(j),Ru=n(j,"LI",{});var f4e=s(Ru);$ee=n(f4e,"STRONG",{});var nGr=s($ee);m5o=r(nGr,"convbert"),nGr.forEach(t),g5o=r(f4e," \u2014 "),IP=n(f4e,"A",{href:!0});var sGr=s(IP);h5o=r(sGr,"ConvBertForMaskedLM"),sGr.forEach(t),p5o=r(f4e," (ConvBERT model)"),f4e.forEach(t),_5o=i(j),Su=n(j,"LI",{});var m4e=s(Su);Iee=n(m4e,"STRONG",{});var lGr=s(Iee);u5o=r(lGr,"data2vec-text"),lGr.forEach(t),b5o=r(m4e," \u2014 "),DP=n(m4e,"A",{href:!0});var iGr=s(DP);v5o=r(iGr,"Data2VecTextForMaskedLM"),iGr.forEach(t),T5o=r(m4e," (Data2VecText model)"),m4e.forEach(t),F5o=i(j),Pu=n(j,"LI",{});var g4e=s(Pu);Dee=n(g4e,"STRONG",{});var dGr=s(Dee);C5o=r(dGr,"deberta"),dGr.forEach(t),M5o=r(g4e," \u2014 "),jP=n(g4e,"A",{href:!0});var cGr=s(jP);E5o=r(cGr,"DebertaForMaskedLM"),cGr.forEach(t),y5o=r(g4e," (DeBERTa model)"),g4e.forEach(t),w5o=i(j),$u=n(j,"LI",{});var h4e=s($u);jee=n(h4e,"STRONG",{});var fGr=s(jee);A5o=r(fGr,"deberta-v2"),fGr.forEach(t),L5o=r(h4e," \u2014 "),NP=n(h4e,"A",{href:!0});var mGr=s(NP);B5o=r(mGr,"DebertaV2ForMaskedLM"),mGr.forEach(t),x5o=r(h4e," (DeBERTa-v2 model)"),h4e.forEach(t),k5o=i(j),Iu=n(j,"LI",{});var p4e=s(Iu);Nee=n(p4e,"STRONG",{});var gGr=s(Nee);R5o=r(gGr,"distilbert"),gGr.forEach(t),S5o=r(p4e," \u2014 "),qP=n(p4e,"A",{href:!0});var hGr=s(qP);P5o=r(hGr,"DistilBertForMaskedLM"),hGr.forEach(t),$5o=r(p4e," (DistilBERT model)"),p4e.forEach(t),I5o=i(j),Du=n(j,"LI",{});var _4e=s(Du);qee=n(_4e,"STRONG",{});var pGr=s(qee);D5o=r(pGr,"electra"),pGr.forEach(t),j5o=r(_4e," \u2014 "),GP=n(_4e,"A",{href:!0});var _Gr=s(GP);N5o=r(_Gr,"ElectraForMaskedLM"),_Gr.forEach(t),q5o=r(_4e," (ELECTRA model)"),_4e.forEach(t),G5o=i(j),ju=n(j,"LI",{});var u4e=s(ju);Gee=n(u4e,"STRONG",{});var uGr=s(Gee);O5o=r(uGr,"flaubert"),uGr.forEach(t),X5o=r(u4e," \u2014 "),OP=n(u4e,"A",{href:!0});var bGr=s(OP);V5o=r(bGr,"FlaubertWithLMHeadModel"),bGr.forEach(t),z5o=r(u4e," (FlauBERT model)"),u4e.forEach(t),W5o=i(j),Nu=n(j,"LI",{});var b4e=s(Nu);Oee=n(b4e,"STRONG",{});var vGr=s(Oee);Q5o=r(vGr,"fnet"),vGr.forEach(t),H5o=r(b4e," \u2014 "),XP=n(b4e,"A",{href:!0});var TGr=s(XP);U5o=r(TGr,"FNetForMaskedLM"),TGr.forEach(t),J5o=r(b4e," (FNet model)"),b4e.forEach(t),Y5o=i(j),qu=n(j,"LI",{});var v4e=s(qu);Xee=n(v4e,"STRONG",{});var FGr=s(Xee);K5o=r(FGr,"funnel"),FGr.forEach(t),Z5o=r(v4e," \u2014 "),VP=n(v4e,"A",{href:!0});var CGr=s(VP);e1o=r(CGr,"FunnelForMaskedLM"),CGr.forEach(t),o1o=r(v4e," (Funnel Transformer model)"),v4e.forEach(t),r1o=i(j),Gu=n(j,"LI",{});var T4e=s(Gu);Vee=n(T4e,"STRONG",{});var MGr=s(Vee);t1o=r(MGr,"ibert"),MGr.forEach(t),a1o=r(T4e," \u2014 "),zP=n(T4e,"A",{href:!0});var EGr=s(zP);n1o=r(EGr,"IBertForMaskedLM"),EGr.forEach(t),s1o=r(T4e," (I-BERT model)"),T4e.forEach(t),l1o=i(j),Ou=n(j,"LI",{});var F4e=s(Ou);zee=n(F4e,"STRONG",{});var yGr=s(zee);i1o=r(yGr,"layoutlm"),yGr.forEach(t),d1o=r(F4e," \u2014 "),WP=n(F4e,"A",{href:!0});var wGr=s(WP);c1o=r(wGr,"LayoutLMForMaskedLM"),wGr.forEach(t),f1o=r(F4e," (LayoutLM model)"),F4e.forEach(t),m1o=i(j),Xu=n(j,"LI",{});var C4e=s(Xu);Wee=n(C4e,"STRONG",{});var AGr=s(Wee);g1o=r(AGr,"longformer"),AGr.forEach(t),h1o=r(C4e," \u2014 "),QP=n(C4e,"A",{href:!0});var LGr=s(QP);p1o=r(LGr,"LongformerForMaskedLM"),LGr.forEach(t),_1o=r(C4e," (Longformer model)"),C4e.forEach(t),u1o=i(j),Vu=n(j,"LI",{});var M4e=s(Vu);Qee=n(M4e,"STRONG",{});var BGr=s(Qee);b1o=r(BGr,"mbart"),BGr.forEach(t),v1o=r(M4e," \u2014 "),HP=n(M4e,"A",{href:!0});var xGr=s(HP);T1o=r(xGr,"MBartForConditionalGeneration"),xGr.forEach(t),F1o=r(M4e," (mBART model)"),M4e.forEach(t),C1o=i(j),zu=n(j,"LI",{});var E4e=s(zu);Hee=n(E4e,"STRONG",{});var kGr=s(Hee);M1o=r(kGr,"megatron-bert"),kGr.forEach(t),E1o=r(E4e," \u2014 "),UP=n(E4e,"A",{href:!0});var RGr=s(UP);y1o=r(RGr,"MegatronBertForMaskedLM"),RGr.forEach(t),w1o=r(E4e," (MegatronBert model)"),E4e.forEach(t),A1o=i(j),Wu=n(j,"LI",{});var y4e=s(Wu);Uee=n(y4e,"STRONG",{});var SGr=s(Uee);L1o=r(SGr,"mobilebert"),SGr.forEach(t),B1o=r(y4e," \u2014 "),JP=n(y4e,"A",{href:!0});var PGr=s(JP);x1o=r(PGr,"MobileBertForMaskedLM"),PGr.forEach(t),k1o=r(y4e," (MobileBERT model)"),y4e.forEach(t),R1o=i(j),Qu=n(j,"LI",{});var w4e=s(Qu);Jee=n(w4e,"STRONG",{});var $Gr=s(Jee);S1o=r($Gr,"mpnet"),$Gr.forEach(t),P1o=r(w4e," \u2014 "),YP=n(w4e,"A",{href:!0});var IGr=s(YP);$1o=r(IGr,"MPNetForMaskedLM"),IGr.forEach(t),I1o=r(w4e," (MPNet model)"),w4e.forEach(t),D1o=i(j),Hu=n(j,"LI",{});var A4e=s(Hu);Yee=n(A4e,"STRONG",{});var DGr=s(Yee);j1o=r(DGr,"nystromformer"),DGr.forEach(t),N1o=r(A4e," \u2014 "),KP=n(A4e,"A",{href:!0});var jGr=s(KP);q1o=r(jGr,"NystromformerForMaskedLM"),jGr.forEach(t),G1o=r(A4e," (Nystromformer model)"),A4e.forEach(t),O1o=i(j),Uu=n(j,"LI",{});var L4e=s(Uu);Kee=n(L4e,"STRONG",{});var NGr=s(Kee);X1o=r(NGr,"perceiver"),NGr.forEach(t),V1o=r(L4e," \u2014 "),ZP=n(L4e,"A",{href:!0});var qGr=s(ZP);z1o=r(qGr,"PerceiverForMaskedLM"),qGr.forEach(t),W1o=r(L4e," (Perceiver model)"),L4e.forEach(t),Q1o=i(j),Ju=n(j,"LI",{});var B4e=s(Ju);Zee=n(B4e,"STRONG",{});var GGr=s(Zee);H1o=r(GGr,"qdqbert"),GGr.forEach(t),U1o=r(B4e," \u2014 "),e$=n(B4e,"A",{href:!0});var OGr=s(e$);J1o=r(OGr,"QDQBertForMaskedLM"),OGr.forEach(t),Y1o=r(B4e," (QDQBert model)"),B4e.forEach(t),K1o=i(j),Yu=n(j,"LI",{});var x4e=s(Yu);eoe=n(x4e,"STRONG",{});var XGr=s(eoe);Z1o=r(XGr,"reformer"),XGr.forEach(t),ebo=r(x4e," \u2014 "),o$=n(x4e,"A",{href:!0});var VGr=s(o$);obo=r(VGr,"ReformerForMaskedLM"),VGr.forEach(t),rbo=r(x4e," (Reformer model)"),x4e.forEach(t),tbo=i(j),Ku=n(j,"LI",{});var k4e=s(Ku);ooe=n(k4e,"STRONG",{});var zGr=s(ooe);abo=r(zGr,"rembert"),zGr.forEach(t),nbo=r(k4e," \u2014 "),r$=n(k4e,"A",{href:!0});var WGr=s(r$);sbo=r(WGr,"RemBertForMaskedLM"),WGr.forEach(t),lbo=r(k4e," (RemBERT model)"),k4e.forEach(t),ibo=i(j),Zu=n(j,"LI",{});var R4e=s(Zu);roe=n(R4e,"STRONG",{});var QGr=s(roe);dbo=r(QGr,"roberta"),QGr.forEach(t),cbo=r(R4e," \u2014 "),t$=n(R4e,"A",{href:!0});var HGr=s(t$);fbo=r(HGr,"RobertaForMaskedLM"),HGr.forEach(t),mbo=r(R4e," (RoBERTa model)"),R4e.forEach(t),gbo=i(j),e5=n(j,"LI",{});var S4e=s(e5);toe=n(S4e,"STRONG",{});var UGr=s(toe);hbo=r(UGr,"roformer"),UGr.forEach(t),pbo=r(S4e," \u2014 "),a$=n(S4e,"A",{href:!0});var JGr=s(a$);_bo=r(JGr,"RoFormerForMaskedLM"),JGr.forEach(t),ubo=r(S4e," (RoFormer model)"),S4e.forEach(t),bbo=i(j),o5=n(j,"LI",{});var P4e=s(o5);aoe=n(P4e,"STRONG",{});var YGr=s(aoe);vbo=r(YGr,"squeezebert"),YGr.forEach(t),Tbo=r(P4e," \u2014 "),n$=n(P4e,"A",{href:!0});var KGr=s(n$);Fbo=r(KGr,"SqueezeBertForMaskedLM"),KGr.forEach(t),Cbo=r(P4e," (SqueezeBERT model)"),P4e.forEach(t),Mbo=i(j),r5=n(j,"LI",{});var $4e=s(r5);noe=n($4e,"STRONG",{});var ZGr=s(noe);Ebo=r(ZGr,"tapas"),ZGr.forEach(t),ybo=r($4e," \u2014 "),s$=n($4e,"A",{href:!0});var eOr=s(s$);wbo=r(eOr,"TapasForMaskedLM"),eOr.forEach(t),Abo=r($4e," (TAPAS model)"),$4e.forEach(t),Lbo=i(j),t5=n(j,"LI",{});var I4e=s(t5);soe=n(I4e,"STRONG",{});var oOr=s(soe);Bbo=r(oOr,"wav2vec2"),oOr.forEach(t),xbo=r(I4e," \u2014 "),loe=n(I4e,"CODE",{});var rOr=s(loe);kbo=r(rOr,"Wav2Vec2ForMaskedLM"),rOr.forEach(t),Rbo=r(I4e,"(Wav2Vec2 model)"),I4e.forEach(t),Sbo=i(j),a5=n(j,"LI",{});var D4e=s(a5);ioe=n(D4e,"STRONG",{});var tOr=s(ioe);Pbo=r(tOr,"xlm"),tOr.forEach(t),$bo=r(D4e," \u2014 "),l$=n(D4e,"A",{href:!0});var aOr=s(l$);Ibo=r(aOr,"XLMWithLMHeadModel"),aOr.forEach(t),Dbo=r(D4e," (XLM model)"),D4e.forEach(t),jbo=i(j),n5=n(j,"LI",{});var j4e=s(n5);doe=n(j4e,"STRONG",{});var nOr=s(doe);Nbo=r(nOr,"xlm-roberta"),nOr.forEach(t),qbo=r(j4e," \u2014 "),i$=n(j4e,"A",{href:!0});var sOr=s(i$);Gbo=r(sOr,"XLMRobertaForMaskedLM"),sOr.forEach(t),Obo=r(j4e," (XLM-RoBERTa model)"),j4e.forEach(t),Xbo=i(j),s5=n(j,"LI",{});var N4e=s(s5);coe=n(N4e,"STRONG",{});var lOr=s(coe);Vbo=r(lOr,"xlm-roberta-xl"),lOr.forEach(t),zbo=r(N4e," \u2014 "),d$=n(N4e,"A",{href:!0});var iOr=s(d$);Wbo=r(iOr,"XLMRobertaXLForMaskedLM"),iOr.forEach(t),Qbo=r(N4e," (XLM-RoBERTa-XL model)"),N4e.forEach(t),Hbo=i(j),l5=n(j,"LI",{});var q4e=s(l5);foe=n(q4e,"STRONG",{});var dOr=s(foe);Ubo=r(dOr,"yoso"),dOr.forEach(t),Jbo=r(q4e," \u2014 "),c$=n(q4e,"A",{href:!0});var cOr=s(c$);Ybo=r(cOr,"YosoForMaskedLM"),cOr.forEach(t),Kbo=r(q4e," (YOSO model)"),q4e.forEach(t),j.forEach(t),Zbo=i(jt),i5=n(jt,"P",{});var G4e=s(i5);e2o=r(G4e,"The model is set in evaluation mode by default using "),moe=n(G4e,"CODE",{});var fOr=s(moe);o2o=r(fOr,"model.eval()"),fOr.forEach(t),r2o=r(G4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),goe=n(G4e,"CODE",{});var mOr=s(goe);t2o=r(mOr,"model.train()"),mOr.forEach(t),G4e.forEach(t),a2o=i(jt),hoe=n(jt,"P",{});var gOr=s(hoe);n2o=r(gOr,"Examples:"),gOr.forEach(t),s2o=i(jt),m(yE.$$.fragment,jt),jt.forEach(t),Ws.forEach(t),x9e=i(d),ed=n(d,"H2",{class:!0});var Dxe=s(ed);d5=n(Dxe,"A",{id:!0,class:!0,href:!0});var hOr=s(d5);poe=n(hOr,"SPAN",{});var pOr=s(poe);m(wE.$$.fragment,pOr),pOr.forEach(t),hOr.forEach(t),l2o=i(Dxe),_oe=n(Dxe,"SPAN",{});var _Or=s(_oe);i2o=r(_Or,"AutoModelForSeq2SeqLM"),_Or.forEach(t),Dxe.forEach(t),k9e=i(d),Yo=n(d,"DIV",{class:!0});var Hs=s(Yo);m(AE.$$.fragment,Hs),d2o=i(Hs),od=n(Hs,"P",{});var RV=s(od);c2o=r(RV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uoe=n(RV,"CODE",{});var uOr=s(uoe);f2o=r(uOr,"from_pretrained()"),uOr.forEach(t),m2o=r(RV,"class method or the "),boe=n(RV,"CODE",{});var bOr=s(boe);g2o=r(bOr,"from_config()"),bOr.forEach(t),h2o=r(RV,`class
method.`),RV.forEach(t),p2o=i(Hs),LE=n(Hs,"P",{});var jxe=s(LE);_2o=r(jxe,"This class cannot be instantiated directly using "),voe=n(jxe,"CODE",{});var vOr=s(voe);u2o=r(vOr,"__init__()"),vOr.forEach(t),b2o=r(jxe," (throws an error)."),jxe.forEach(t),v2o=i(Hs),Vr=n(Hs,"DIV",{class:!0});var Us=s(Vr);m(BE.$$.fragment,Us),T2o=i(Us),Toe=n(Us,"P",{});var TOr=s(Toe);F2o=r(TOr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),TOr.forEach(t),C2o=i(Us),rd=n(Us,"P",{});var SV=s(rd);M2o=r(SV,`Note:
Loading a model from its configuration file does `),Foe=n(SV,"STRONG",{});var FOr=s(Foe);E2o=r(FOr,"not"),FOr.forEach(t),y2o=r(SV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Coe=n(SV,"CODE",{});var COr=s(Coe);w2o=r(COr,"from_pretrained()"),COr.forEach(t),A2o=r(SV,"to load the model weights."),SV.forEach(t),L2o=i(Us),Moe=n(Us,"P",{});var MOr=s(Moe);B2o=r(MOr,"Examples:"),MOr.forEach(t),x2o=i(Us),m(xE.$$.fragment,Us),Us.forEach(t),k2o=i(Hs),Ie=n(Hs,"DIV",{class:!0});var Nt=s(Ie);m(kE.$$.fragment,Nt),R2o=i(Nt),Eoe=n(Nt,"P",{});var EOr=s(Eoe);S2o=r(EOr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),EOr.forEach(t),P2o=i(Nt),Xa=n(Nt,"P",{});var w4=s(Xa);$2o=r(w4,"The model class to instantiate is selected based on the "),yoe=n(w4,"CODE",{});var yOr=s(yoe);I2o=r(yOr,"model_type"),yOr.forEach(t),D2o=r(w4,` property of the config object (either
passed as an argument or loaded from `),woe=n(w4,"CODE",{});var wOr=s(woe);j2o=r(wOr,"pretrained_model_name_or_path"),wOr.forEach(t),N2o=r(w4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aoe=n(w4,"CODE",{});var AOr=s(Aoe);q2o=r(AOr,"pretrained_model_name_or_path"),AOr.forEach(t),G2o=r(w4,":"),w4.forEach(t),O2o=i(Nt),ae=n(Nt,"UL",{});var le=s(ae);c5=n(le,"LI",{});var O4e=s(c5);Loe=n(O4e,"STRONG",{});var LOr=s(Loe);X2o=r(LOr,"bart"),LOr.forEach(t),V2o=r(O4e," \u2014 "),f$=n(O4e,"A",{href:!0});var BOr=s(f$);z2o=r(BOr,"BartForConditionalGeneration"),BOr.forEach(t),W2o=r(O4e," (BART model)"),O4e.forEach(t),Q2o=i(le),f5=n(le,"LI",{});var X4e=s(f5);Boe=n(X4e,"STRONG",{});var xOr=s(Boe);H2o=r(xOr,"bigbird_pegasus"),xOr.forEach(t),U2o=r(X4e," \u2014 "),m$=n(X4e,"A",{href:!0});var kOr=s(m$);J2o=r(kOr,"BigBirdPegasusForConditionalGeneration"),kOr.forEach(t),Y2o=r(X4e," (BigBirdPegasus model)"),X4e.forEach(t),K2o=i(le),m5=n(le,"LI",{});var V4e=s(m5);xoe=n(V4e,"STRONG",{});var ROr=s(xoe);Z2o=r(ROr,"blenderbot"),ROr.forEach(t),evo=r(V4e," \u2014 "),g$=n(V4e,"A",{href:!0});var SOr=s(g$);ovo=r(SOr,"BlenderbotForConditionalGeneration"),SOr.forEach(t),rvo=r(V4e," (Blenderbot model)"),V4e.forEach(t),tvo=i(le),g5=n(le,"LI",{});var z4e=s(g5);koe=n(z4e,"STRONG",{});var POr=s(koe);avo=r(POr,"blenderbot-small"),POr.forEach(t),nvo=r(z4e," \u2014 "),h$=n(z4e,"A",{href:!0});var $Or=s(h$);svo=r($Or,"BlenderbotSmallForConditionalGeneration"),$Or.forEach(t),lvo=r(z4e," (BlenderbotSmall model)"),z4e.forEach(t),ivo=i(le),h5=n(le,"LI",{});var W4e=s(h5);Roe=n(W4e,"STRONG",{});var IOr=s(Roe);dvo=r(IOr,"encoder-decoder"),IOr.forEach(t),cvo=r(W4e," \u2014 "),p$=n(W4e,"A",{href:!0});var DOr=s(p$);fvo=r(DOr,"EncoderDecoderModel"),DOr.forEach(t),mvo=r(W4e," (Encoder decoder model)"),W4e.forEach(t),gvo=i(le),p5=n(le,"LI",{});var Q4e=s(p5);Soe=n(Q4e,"STRONG",{});var jOr=s(Soe);hvo=r(jOr,"fsmt"),jOr.forEach(t),pvo=r(Q4e," \u2014 "),_$=n(Q4e,"A",{href:!0});var NOr=s(_$);_vo=r(NOr,"FSMTForConditionalGeneration"),NOr.forEach(t),uvo=r(Q4e," (FairSeq Machine-Translation model)"),Q4e.forEach(t),bvo=i(le),_5=n(le,"LI",{});var H4e=s(_5);Poe=n(H4e,"STRONG",{});var qOr=s(Poe);vvo=r(qOr,"led"),qOr.forEach(t),Tvo=r(H4e," \u2014 "),u$=n(H4e,"A",{href:!0});var GOr=s(u$);Fvo=r(GOr,"LEDForConditionalGeneration"),GOr.forEach(t),Cvo=r(H4e," (LED model)"),H4e.forEach(t),Mvo=i(le),u5=n(le,"LI",{});var U4e=s(u5);$oe=n(U4e,"STRONG",{});var OOr=s($oe);Evo=r(OOr,"m2m_100"),OOr.forEach(t),yvo=r(U4e," \u2014 "),b$=n(U4e,"A",{href:!0});var XOr=s(b$);wvo=r(XOr,"M2M100ForConditionalGeneration"),XOr.forEach(t),Avo=r(U4e," (M2M100 model)"),U4e.forEach(t),Lvo=i(le),b5=n(le,"LI",{});var J4e=s(b5);Ioe=n(J4e,"STRONG",{});var VOr=s(Ioe);Bvo=r(VOr,"marian"),VOr.forEach(t),xvo=r(J4e," \u2014 "),v$=n(J4e,"A",{href:!0});var zOr=s(v$);kvo=r(zOr,"MarianMTModel"),zOr.forEach(t),Rvo=r(J4e," (Marian model)"),J4e.forEach(t),Svo=i(le),v5=n(le,"LI",{});var Y4e=s(v5);Doe=n(Y4e,"STRONG",{});var WOr=s(Doe);Pvo=r(WOr,"mbart"),WOr.forEach(t),$vo=r(Y4e," \u2014 "),T$=n(Y4e,"A",{href:!0});var QOr=s(T$);Ivo=r(QOr,"MBartForConditionalGeneration"),QOr.forEach(t),Dvo=r(Y4e," (mBART model)"),Y4e.forEach(t),jvo=i(le),T5=n(le,"LI",{});var K4e=s(T5);joe=n(K4e,"STRONG",{});var HOr=s(joe);Nvo=r(HOr,"mt5"),HOr.forEach(t),qvo=r(K4e," \u2014 "),F$=n(K4e,"A",{href:!0});var UOr=s(F$);Gvo=r(UOr,"MT5ForConditionalGeneration"),UOr.forEach(t),Ovo=r(K4e," (mT5 model)"),K4e.forEach(t),Xvo=i(le),F5=n(le,"LI",{});var Z4e=s(F5);Noe=n(Z4e,"STRONG",{});var JOr=s(Noe);Vvo=r(JOr,"pegasus"),JOr.forEach(t),zvo=r(Z4e," \u2014 "),C$=n(Z4e,"A",{href:!0});var YOr=s(C$);Wvo=r(YOr,"PegasusForConditionalGeneration"),YOr.forEach(t),Qvo=r(Z4e," (Pegasus model)"),Z4e.forEach(t),Hvo=i(le),C5=n(le,"LI",{});var eMe=s(C5);qoe=n(eMe,"STRONG",{});var KOr=s(qoe);Uvo=r(KOr,"plbart"),KOr.forEach(t),Jvo=r(eMe," \u2014 "),M$=n(eMe,"A",{href:!0});var ZOr=s(M$);Yvo=r(ZOr,"PLBartForConditionalGeneration"),ZOr.forEach(t),Kvo=r(eMe," (PLBart model)"),eMe.forEach(t),Zvo=i(le),M5=n(le,"LI",{});var oMe=s(M5);Goe=n(oMe,"STRONG",{});var eXr=s(Goe);e0o=r(eXr,"prophetnet"),eXr.forEach(t),o0o=r(oMe," \u2014 "),E$=n(oMe,"A",{href:!0});var oXr=s(E$);r0o=r(oXr,"ProphetNetForConditionalGeneration"),oXr.forEach(t),t0o=r(oMe," (ProphetNet model)"),oMe.forEach(t),a0o=i(le),E5=n(le,"LI",{});var rMe=s(E5);Ooe=n(rMe,"STRONG",{});var rXr=s(Ooe);n0o=r(rXr,"t5"),rXr.forEach(t),s0o=r(rMe," \u2014 "),y$=n(rMe,"A",{href:!0});var tXr=s(y$);l0o=r(tXr,"T5ForConditionalGeneration"),tXr.forEach(t),i0o=r(rMe," (T5 model)"),rMe.forEach(t),d0o=i(le),y5=n(le,"LI",{});var tMe=s(y5);Xoe=n(tMe,"STRONG",{});var aXr=s(Xoe);c0o=r(aXr,"xlm-prophetnet"),aXr.forEach(t),f0o=r(tMe," \u2014 "),w$=n(tMe,"A",{href:!0});var nXr=s(w$);m0o=r(nXr,"XLMProphetNetForConditionalGeneration"),nXr.forEach(t),g0o=r(tMe," (XLMProphetNet model)"),tMe.forEach(t),le.forEach(t),h0o=i(Nt),w5=n(Nt,"P",{});var aMe=s(w5);p0o=r(aMe,"The model is set in evaluation mode by default using "),Voe=n(aMe,"CODE",{});var sXr=s(Voe);_0o=r(sXr,"model.eval()"),sXr.forEach(t),u0o=r(aMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zoe=n(aMe,"CODE",{});var lXr=s(zoe);b0o=r(lXr,"model.train()"),lXr.forEach(t),aMe.forEach(t),v0o=i(Nt),Woe=n(Nt,"P",{});var iXr=s(Woe);T0o=r(iXr,"Examples:"),iXr.forEach(t),F0o=i(Nt),m(RE.$$.fragment,Nt),Nt.forEach(t),Hs.forEach(t),R9e=i(d),td=n(d,"H2",{class:!0});var Nxe=s(td);A5=n(Nxe,"A",{id:!0,class:!0,href:!0});var dXr=s(A5);Qoe=n(dXr,"SPAN",{});var cXr=s(Qoe);m(SE.$$.fragment,cXr),cXr.forEach(t),dXr.forEach(t),C0o=i(Nxe),Hoe=n(Nxe,"SPAN",{});var fXr=s(Hoe);M0o=r(fXr,"AutoModelForSequenceClassification"),fXr.forEach(t),Nxe.forEach(t),S9e=i(d),Ko=n(d,"DIV",{class:!0});var Js=s(Ko);m(PE.$$.fragment,Js),E0o=i(Js),ad=n(Js,"P",{});var PV=s(ad);y0o=r(PV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Uoe=n(PV,"CODE",{});var mXr=s(Uoe);w0o=r(mXr,"from_pretrained()"),mXr.forEach(t),A0o=r(PV,"class method or the "),Joe=n(PV,"CODE",{});var gXr=s(Joe);L0o=r(gXr,"from_config()"),gXr.forEach(t),B0o=r(PV,`class
method.`),PV.forEach(t),x0o=i(Js),$E=n(Js,"P",{});var qxe=s($E);k0o=r(qxe,"This class cannot be instantiated directly using "),Yoe=n(qxe,"CODE",{});var hXr=s(Yoe);R0o=r(hXr,"__init__()"),hXr.forEach(t),S0o=r(qxe," (throws an error)."),qxe.forEach(t),P0o=i(Js),zr=n(Js,"DIV",{class:!0});var Ys=s(zr);m(IE.$$.fragment,Ys),$0o=i(Ys),Koe=n(Ys,"P",{});var pXr=s(Koe);I0o=r(pXr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),pXr.forEach(t),D0o=i(Ys),nd=n(Ys,"P",{});var $V=s(nd);j0o=r($V,`Note:
Loading a model from its configuration file does `),Zoe=n($V,"STRONG",{});var _Xr=s(Zoe);N0o=r(_Xr,"not"),_Xr.forEach(t),q0o=r($V,` load the model weights. It only affects the
model\u2019s configuration. Use `),ere=n($V,"CODE",{});var uXr=s(ere);G0o=r(uXr,"from_pretrained()"),uXr.forEach(t),O0o=r($V,"to load the model weights."),$V.forEach(t),X0o=i(Ys),ore=n(Ys,"P",{});var bXr=s(ore);V0o=r(bXr,"Examples:"),bXr.forEach(t),z0o=i(Ys),m(DE.$$.fragment,Ys),Ys.forEach(t),W0o=i(Js),De=n(Js,"DIV",{class:!0});var qt=s(De);m(jE.$$.fragment,qt),Q0o=i(qt),rre=n(qt,"P",{});var vXr=s(rre);H0o=r(vXr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vXr.forEach(t),U0o=i(qt),Va=n(qt,"P",{});var A4=s(Va);J0o=r(A4,"The model class to instantiate is selected based on the "),tre=n(A4,"CODE",{});var TXr=s(tre);Y0o=r(TXr,"model_type"),TXr.forEach(t),K0o=r(A4,` property of the config object (either
passed as an argument or loaded from `),are=n(A4,"CODE",{});var FXr=s(are);Z0o=r(FXr,"pretrained_model_name_or_path"),FXr.forEach(t),eTo=r(A4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nre=n(A4,"CODE",{});var CXr=s(nre);oTo=r(CXr,"pretrained_model_name_or_path"),CXr.forEach(t),rTo=r(A4,":"),A4.forEach(t),tTo=i(qt),A=n(qt,"UL",{});var L=s(A);L5=n(L,"LI",{});var nMe=s(L5);sre=n(nMe,"STRONG",{});var MXr=s(sre);aTo=r(MXr,"albert"),MXr.forEach(t),nTo=r(nMe," \u2014 "),A$=n(nMe,"A",{href:!0});var EXr=s(A$);sTo=r(EXr,"AlbertForSequenceClassification"),EXr.forEach(t),lTo=r(nMe," (ALBERT model)"),nMe.forEach(t),iTo=i(L),B5=n(L,"LI",{});var sMe=s(B5);lre=n(sMe,"STRONG",{});var yXr=s(lre);dTo=r(yXr,"bart"),yXr.forEach(t),cTo=r(sMe," \u2014 "),L$=n(sMe,"A",{href:!0});var wXr=s(L$);fTo=r(wXr,"BartForSequenceClassification"),wXr.forEach(t),mTo=r(sMe," (BART model)"),sMe.forEach(t),gTo=i(L),x5=n(L,"LI",{});var lMe=s(x5);ire=n(lMe,"STRONG",{});var AXr=s(ire);hTo=r(AXr,"bert"),AXr.forEach(t),pTo=r(lMe," \u2014 "),B$=n(lMe,"A",{href:!0});var LXr=s(B$);_To=r(LXr,"BertForSequenceClassification"),LXr.forEach(t),uTo=r(lMe," (BERT model)"),lMe.forEach(t),bTo=i(L),k5=n(L,"LI",{});var iMe=s(k5);dre=n(iMe,"STRONG",{});var BXr=s(dre);vTo=r(BXr,"big_bird"),BXr.forEach(t),TTo=r(iMe," \u2014 "),x$=n(iMe,"A",{href:!0});var xXr=s(x$);FTo=r(xXr,"BigBirdForSequenceClassification"),xXr.forEach(t),CTo=r(iMe," (BigBird model)"),iMe.forEach(t),MTo=i(L),R5=n(L,"LI",{});var dMe=s(R5);cre=n(dMe,"STRONG",{});var kXr=s(cre);ETo=r(kXr,"bigbird_pegasus"),kXr.forEach(t),yTo=r(dMe," \u2014 "),k$=n(dMe,"A",{href:!0});var RXr=s(k$);wTo=r(RXr,"BigBirdPegasusForSequenceClassification"),RXr.forEach(t),ATo=r(dMe," (BigBirdPegasus model)"),dMe.forEach(t),LTo=i(L),S5=n(L,"LI",{});var cMe=s(S5);fre=n(cMe,"STRONG",{});var SXr=s(fre);BTo=r(SXr,"camembert"),SXr.forEach(t),xTo=r(cMe," \u2014 "),R$=n(cMe,"A",{href:!0});var PXr=s(R$);kTo=r(PXr,"CamembertForSequenceClassification"),PXr.forEach(t),RTo=r(cMe," (CamemBERT model)"),cMe.forEach(t),STo=i(L),P5=n(L,"LI",{});var fMe=s(P5);mre=n(fMe,"STRONG",{});var $Xr=s(mre);PTo=r($Xr,"canine"),$Xr.forEach(t),$To=r(fMe," \u2014 "),S$=n(fMe,"A",{href:!0});var IXr=s(S$);ITo=r(IXr,"CanineForSequenceClassification"),IXr.forEach(t),DTo=r(fMe," (Canine model)"),fMe.forEach(t),jTo=i(L),$5=n(L,"LI",{});var mMe=s($5);gre=n(mMe,"STRONG",{});var DXr=s(gre);NTo=r(DXr,"convbert"),DXr.forEach(t),qTo=r(mMe," \u2014 "),P$=n(mMe,"A",{href:!0});var jXr=s(P$);GTo=r(jXr,"ConvBertForSequenceClassification"),jXr.forEach(t),OTo=r(mMe," (ConvBERT model)"),mMe.forEach(t),XTo=i(L),I5=n(L,"LI",{});var gMe=s(I5);hre=n(gMe,"STRONG",{});var NXr=s(hre);VTo=r(NXr,"ctrl"),NXr.forEach(t),zTo=r(gMe," \u2014 "),$$=n(gMe,"A",{href:!0});var qXr=s($$);WTo=r(qXr,"CTRLForSequenceClassification"),qXr.forEach(t),QTo=r(gMe," (CTRL model)"),gMe.forEach(t),HTo=i(L),D5=n(L,"LI",{});var hMe=s(D5);pre=n(hMe,"STRONG",{});var GXr=s(pre);UTo=r(GXr,"data2vec-text"),GXr.forEach(t),JTo=r(hMe," \u2014 "),I$=n(hMe,"A",{href:!0});var OXr=s(I$);YTo=r(OXr,"Data2VecTextForSequenceClassification"),OXr.forEach(t),KTo=r(hMe," (Data2VecText model)"),hMe.forEach(t),ZTo=i(L),j5=n(L,"LI",{});var pMe=s(j5);_re=n(pMe,"STRONG",{});var XXr=s(_re);e7o=r(XXr,"deberta"),XXr.forEach(t),o7o=r(pMe," \u2014 "),D$=n(pMe,"A",{href:!0});var VXr=s(D$);r7o=r(VXr,"DebertaForSequenceClassification"),VXr.forEach(t),t7o=r(pMe," (DeBERTa model)"),pMe.forEach(t),a7o=i(L),N5=n(L,"LI",{});var _Me=s(N5);ure=n(_Me,"STRONG",{});var zXr=s(ure);n7o=r(zXr,"deberta-v2"),zXr.forEach(t),s7o=r(_Me," \u2014 "),j$=n(_Me,"A",{href:!0});var WXr=s(j$);l7o=r(WXr,"DebertaV2ForSequenceClassification"),WXr.forEach(t),i7o=r(_Me," (DeBERTa-v2 model)"),_Me.forEach(t),d7o=i(L),q5=n(L,"LI",{});var uMe=s(q5);bre=n(uMe,"STRONG",{});var QXr=s(bre);c7o=r(QXr,"distilbert"),QXr.forEach(t),f7o=r(uMe," \u2014 "),N$=n(uMe,"A",{href:!0});var HXr=s(N$);m7o=r(HXr,"DistilBertForSequenceClassification"),HXr.forEach(t),g7o=r(uMe," (DistilBERT model)"),uMe.forEach(t),h7o=i(L),G5=n(L,"LI",{});var bMe=s(G5);vre=n(bMe,"STRONG",{});var UXr=s(vre);p7o=r(UXr,"electra"),UXr.forEach(t),_7o=r(bMe," \u2014 "),q$=n(bMe,"A",{href:!0});var JXr=s(q$);u7o=r(JXr,"ElectraForSequenceClassification"),JXr.forEach(t),b7o=r(bMe," (ELECTRA model)"),bMe.forEach(t),v7o=i(L),O5=n(L,"LI",{});var vMe=s(O5);Tre=n(vMe,"STRONG",{});var YXr=s(Tre);T7o=r(YXr,"flaubert"),YXr.forEach(t),F7o=r(vMe," \u2014 "),G$=n(vMe,"A",{href:!0});var KXr=s(G$);C7o=r(KXr,"FlaubertForSequenceClassification"),KXr.forEach(t),M7o=r(vMe," (FlauBERT model)"),vMe.forEach(t),E7o=i(L),X5=n(L,"LI",{});var TMe=s(X5);Fre=n(TMe,"STRONG",{});var ZXr=s(Fre);y7o=r(ZXr,"fnet"),ZXr.forEach(t),w7o=r(TMe," \u2014 "),O$=n(TMe,"A",{href:!0});var eVr=s(O$);A7o=r(eVr,"FNetForSequenceClassification"),eVr.forEach(t),L7o=r(TMe," (FNet model)"),TMe.forEach(t),B7o=i(L),V5=n(L,"LI",{});var FMe=s(V5);Cre=n(FMe,"STRONG",{});var oVr=s(Cre);x7o=r(oVr,"funnel"),oVr.forEach(t),k7o=r(FMe," \u2014 "),X$=n(FMe,"A",{href:!0});var rVr=s(X$);R7o=r(rVr,"FunnelForSequenceClassification"),rVr.forEach(t),S7o=r(FMe," (Funnel Transformer model)"),FMe.forEach(t),P7o=i(L),z5=n(L,"LI",{});var CMe=s(z5);Mre=n(CMe,"STRONG",{});var tVr=s(Mre);$7o=r(tVr,"gpt2"),tVr.forEach(t),I7o=r(CMe," \u2014 "),V$=n(CMe,"A",{href:!0});var aVr=s(V$);D7o=r(aVr,"GPT2ForSequenceClassification"),aVr.forEach(t),j7o=r(CMe," (OpenAI GPT-2 model)"),CMe.forEach(t),N7o=i(L),W5=n(L,"LI",{});var MMe=s(W5);Ere=n(MMe,"STRONG",{});var nVr=s(Ere);q7o=r(nVr,"gpt_neo"),nVr.forEach(t),G7o=r(MMe," \u2014 "),z$=n(MMe,"A",{href:!0});var sVr=s(z$);O7o=r(sVr,"GPTNeoForSequenceClassification"),sVr.forEach(t),X7o=r(MMe," (GPT Neo model)"),MMe.forEach(t),V7o=i(L),Q5=n(L,"LI",{});var EMe=s(Q5);yre=n(EMe,"STRONG",{});var lVr=s(yre);z7o=r(lVr,"gptj"),lVr.forEach(t),W7o=r(EMe," \u2014 "),W$=n(EMe,"A",{href:!0});var iVr=s(W$);Q7o=r(iVr,"GPTJForSequenceClassification"),iVr.forEach(t),H7o=r(EMe," (GPT-J model)"),EMe.forEach(t),U7o=i(L),H5=n(L,"LI",{});var yMe=s(H5);wre=n(yMe,"STRONG",{});var dVr=s(wre);J7o=r(dVr,"ibert"),dVr.forEach(t),Y7o=r(yMe," \u2014 "),Q$=n(yMe,"A",{href:!0});var cVr=s(Q$);K7o=r(cVr,"IBertForSequenceClassification"),cVr.forEach(t),Z7o=r(yMe," (I-BERT model)"),yMe.forEach(t),eFo=i(L),U5=n(L,"LI",{});var wMe=s(U5);Are=n(wMe,"STRONG",{});var fVr=s(Are);oFo=r(fVr,"layoutlm"),fVr.forEach(t),rFo=r(wMe," \u2014 "),H$=n(wMe,"A",{href:!0});var mVr=s(H$);tFo=r(mVr,"LayoutLMForSequenceClassification"),mVr.forEach(t),aFo=r(wMe," (LayoutLM model)"),wMe.forEach(t),nFo=i(L),J5=n(L,"LI",{});var AMe=s(J5);Lre=n(AMe,"STRONG",{});var gVr=s(Lre);sFo=r(gVr,"layoutlmv2"),gVr.forEach(t),lFo=r(AMe," \u2014 "),U$=n(AMe,"A",{href:!0});var hVr=s(U$);iFo=r(hVr,"LayoutLMv2ForSequenceClassification"),hVr.forEach(t),dFo=r(AMe," (LayoutLMv2 model)"),AMe.forEach(t),cFo=i(L),Y5=n(L,"LI",{});var LMe=s(Y5);Bre=n(LMe,"STRONG",{});var pVr=s(Bre);fFo=r(pVr,"led"),pVr.forEach(t),mFo=r(LMe," \u2014 "),J$=n(LMe,"A",{href:!0});var _Vr=s(J$);gFo=r(_Vr,"LEDForSequenceClassification"),_Vr.forEach(t),hFo=r(LMe," (LED model)"),LMe.forEach(t),pFo=i(L),K5=n(L,"LI",{});var BMe=s(K5);xre=n(BMe,"STRONG",{});var uVr=s(xre);_Fo=r(uVr,"longformer"),uVr.forEach(t),uFo=r(BMe," \u2014 "),Y$=n(BMe,"A",{href:!0});var bVr=s(Y$);bFo=r(bVr,"LongformerForSequenceClassification"),bVr.forEach(t),vFo=r(BMe," (Longformer model)"),BMe.forEach(t),TFo=i(L),Z5=n(L,"LI",{});var xMe=s(Z5);kre=n(xMe,"STRONG",{});var vVr=s(kre);FFo=r(vVr,"mbart"),vVr.forEach(t),CFo=r(xMe," \u2014 "),K$=n(xMe,"A",{href:!0});var TVr=s(K$);MFo=r(TVr,"MBartForSequenceClassification"),TVr.forEach(t),EFo=r(xMe," (mBART model)"),xMe.forEach(t),yFo=i(L),e1=n(L,"LI",{});var kMe=s(e1);Rre=n(kMe,"STRONG",{});var FVr=s(Rre);wFo=r(FVr,"megatron-bert"),FVr.forEach(t),AFo=r(kMe," \u2014 "),Z$=n(kMe,"A",{href:!0});var CVr=s(Z$);LFo=r(CVr,"MegatronBertForSequenceClassification"),CVr.forEach(t),BFo=r(kMe," (MegatronBert model)"),kMe.forEach(t),xFo=i(L),o1=n(L,"LI",{});var RMe=s(o1);Sre=n(RMe,"STRONG",{});var MVr=s(Sre);kFo=r(MVr,"mobilebert"),MVr.forEach(t),RFo=r(RMe," \u2014 "),eI=n(RMe,"A",{href:!0});var EVr=s(eI);SFo=r(EVr,"MobileBertForSequenceClassification"),EVr.forEach(t),PFo=r(RMe," (MobileBERT model)"),RMe.forEach(t),$Fo=i(L),r1=n(L,"LI",{});var SMe=s(r1);Pre=n(SMe,"STRONG",{});var yVr=s(Pre);IFo=r(yVr,"mpnet"),yVr.forEach(t),DFo=r(SMe," \u2014 "),oI=n(SMe,"A",{href:!0});var wVr=s(oI);jFo=r(wVr,"MPNetForSequenceClassification"),wVr.forEach(t),NFo=r(SMe," (MPNet model)"),SMe.forEach(t),qFo=i(L),t1=n(L,"LI",{});var PMe=s(t1);$re=n(PMe,"STRONG",{});var AVr=s($re);GFo=r(AVr,"nystromformer"),AVr.forEach(t),OFo=r(PMe," \u2014 "),rI=n(PMe,"A",{href:!0});var LVr=s(rI);XFo=r(LVr,"NystromformerForSequenceClassification"),LVr.forEach(t),VFo=r(PMe," (Nystromformer model)"),PMe.forEach(t),zFo=i(L),a1=n(L,"LI",{});var $Me=s(a1);Ire=n($Me,"STRONG",{});var BVr=s(Ire);WFo=r(BVr,"openai-gpt"),BVr.forEach(t),QFo=r($Me," \u2014 "),tI=n($Me,"A",{href:!0});var xVr=s(tI);HFo=r(xVr,"OpenAIGPTForSequenceClassification"),xVr.forEach(t),UFo=r($Me," (OpenAI GPT model)"),$Me.forEach(t),JFo=i(L),n1=n(L,"LI",{});var IMe=s(n1);Dre=n(IMe,"STRONG",{});var kVr=s(Dre);YFo=r(kVr,"perceiver"),kVr.forEach(t),KFo=r(IMe," \u2014 "),aI=n(IMe,"A",{href:!0});var RVr=s(aI);ZFo=r(RVr,"PerceiverForSequenceClassification"),RVr.forEach(t),eCo=r(IMe," (Perceiver model)"),IMe.forEach(t),oCo=i(L),s1=n(L,"LI",{});var DMe=s(s1);jre=n(DMe,"STRONG",{});var SVr=s(jre);rCo=r(SVr,"plbart"),SVr.forEach(t),tCo=r(DMe," \u2014 "),nI=n(DMe,"A",{href:!0});var PVr=s(nI);aCo=r(PVr,"PLBartForSequenceClassification"),PVr.forEach(t),nCo=r(DMe," (PLBart model)"),DMe.forEach(t),sCo=i(L),l1=n(L,"LI",{});var jMe=s(l1);Nre=n(jMe,"STRONG",{});var $Vr=s(Nre);lCo=r($Vr,"qdqbert"),$Vr.forEach(t),iCo=r(jMe," \u2014 "),sI=n(jMe,"A",{href:!0});var IVr=s(sI);dCo=r(IVr,"QDQBertForSequenceClassification"),IVr.forEach(t),cCo=r(jMe," (QDQBert model)"),jMe.forEach(t),fCo=i(L),i1=n(L,"LI",{});var NMe=s(i1);qre=n(NMe,"STRONG",{});var DVr=s(qre);mCo=r(DVr,"reformer"),DVr.forEach(t),gCo=r(NMe," \u2014 "),lI=n(NMe,"A",{href:!0});var jVr=s(lI);hCo=r(jVr,"ReformerForSequenceClassification"),jVr.forEach(t),pCo=r(NMe," (Reformer model)"),NMe.forEach(t),_Co=i(L),d1=n(L,"LI",{});var qMe=s(d1);Gre=n(qMe,"STRONG",{});var NVr=s(Gre);uCo=r(NVr,"rembert"),NVr.forEach(t),bCo=r(qMe," \u2014 "),iI=n(qMe,"A",{href:!0});var qVr=s(iI);vCo=r(qVr,"RemBertForSequenceClassification"),qVr.forEach(t),TCo=r(qMe," (RemBERT model)"),qMe.forEach(t),FCo=i(L),c1=n(L,"LI",{});var GMe=s(c1);Ore=n(GMe,"STRONG",{});var GVr=s(Ore);CCo=r(GVr,"roberta"),GVr.forEach(t),MCo=r(GMe," \u2014 "),dI=n(GMe,"A",{href:!0});var OVr=s(dI);ECo=r(OVr,"RobertaForSequenceClassification"),OVr.forEach(t),yCo=r(GMe," (RoBERTa model)"),GMe.forEach(t),wCo=i(L),f1=n(L,"LI",{});var OMe=s(f1);Xre=n(OMe,"STRONG",{});var XVr=s(Xre);ACo=r(XVr,"roformer"),XVr.forEach(t),LCo=r(OMe," \u2014 "),cI=n(OMe,"A",{href:!0});var VVr=s(cI);BCo=r(VVr,"RoFormerForSequenceClassification"),VVr.forEach(t),xCo=r(OMe," (RoFormer model)"),OMe.forEach(t),kCo=i(L),m1=n(L,"LI",{});var XMe=s(m1);Vre=n(XMe,"STRONG",{});var zVr=s(Vre);RCo=r(zVr,"squeezebert"),zVr.forEach(t),SCo=r(XMe," \u2014 "),fI=n(XMe,"A",{href:!0});var WVr=s(fI);PCo=r(WVr,"SqueezeBertForSequenceClassification"),WVr.forEach(t),$Co=r(XMe," (SqueezeBERT model)"),XMe.forEach(t),ICo=i(L),g1=n(L,"LI",{});var VMe=s(g1);zre=n(VMe,"STRONG",{});var QVr=s(zre);DCo=r(QVr,"tapas"),QVr.forEach(t),jCo=r(VMe," \u2014 "),mI=n(VMe,"A",{href:!0});var HVr=s(mI);NCo=r(HVr,"TapasForSequenceClassification"),HVr.forEach(t),qCo=r(VMe," (TAPAS model)"),VMe.forEach(t),GCo=i(L),h1=n(L,"LI",{});var zMe=s(h1);Wre=n(zMe,"STRONG",{});var UVr=s(Wre);OCo=r(UVr,"transfo-xl"),UVr.forEach(t),XCo=r(zMe," \u2014 "),gI=n(zMe,"A",{href:!0});var JVr=s(gI);VCo=r(JVr,"TransfoXLForSequenceClassification"),JVr.forEach(t),zCo=r(zMe," (Transformer-XL model)"),zMe.forEach(t),WCo=i(L),p1=n(L,"LI",{});var WMe=s(p1);Qre=n(WMe,"STRONG",{});var YVr=s(Qre);QCo=r(YVr,"xlm"),YVr.forEach(t),HCo=r(WMe," \u2014 "),hI=n(WMe,"A",{href:!0});var KVr=s(hI);UCo=r(KVr,"XLMForSequenceClassification"),KVr.forEach(t),JCo=r(WMe," (XLM model)"),WMe.forEach(t),YCo=i(L),_1=n(L,"LI",{});var QMe=s(_1);Hre=n(QMe,"STRONG",{});var ZVr=s(Hre);KCo=r(ZVr,"xlm-roberta"),ZVr.forEach(t),ZCo=r(QMe," \u2014 "),pI=n(QMe,"A",{href:!0});var ezr=s(pI);e4o=r(ezr,"XLMRobertaForSequenceClassification"),ezr.forEach(t),o4o=r(QMe," (XLM-RoBERTa model)"),QMe.forEach(t),r4o=i(L),u1=n(L,"LI",{});var HMe=s(u1);Ure=n(HMe,"STRONG",{});var ozr=s(Ure);t4o=r(ozr,"xlm-roberta-xl"),ozr.forEach(t),a4o=r(HMe," \u2014 "),_I=n(HMe,"A",{href:!0});var rzr=s(_I);n4o=r(rzr,"XLMRobertaXLForSequenceClassification"),rzr.forEach(t),s4o=r(HMe," (XLM-RoBERTa-XL model)"),HMe.forEach(t),l4o=i(L),b1=n(L,"LI",{});var UMe=s(b1);Jre=n(UMe,"STRONG",{});var tzr=s(Jre);i4o=r(tzr,"xlnet"),tzr.forEach(t),d4o=r(UMe," \u2014 "),uI=n(UMe,"A",{href:!0});var azr=s(uI);c4o=r(azr,"XLNetForSequenceClassification"),azr.forEach(t),f4o=r(UMe," (XLNet model)"),UMe.forEach(t),m4o=i(L),v1=n(L,"LI",{});var JMe=s(v1);Yre=n(JMe,"STRONG",{});var nzr=s(Yre);g4o=r(nzr,"yoso"),nzr.forEach(t),h4o=r(JMe," \u2014 "),bI=n(JMe,"A",{href:!0});var szr=s(bI);p4o=r(szr,"YosoForSequenceClassification"),szr.forEach(t),_4o=r(JMe," (YOSO model)"),JMe.forEach(t),L.forEach(t),u4o=i(qt),T1=n(qt,"P",{});var YMe=s(T1);b4o=r(YMe,"The model is set in evaluation mode by default using "),Kre=n(YMe,"CODE",{});var lzr=s(Kre);v4o=r(lzr,"model.eval()"),lzr.forEach(t),T4o=r(YMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zre=n(YMe,"CODE",{});var izr=s(Zre);F4o=r(izr,"model.train()"),izr.forEach(t),YMe.forEach(t),C4o=i(qt),ete=n(qt,"P",{});var dzr=s(ete);M4o=r(dzr,"Examples:"),dzr.forEach(t),E4o=i(qt),m(NE.$$.fragment,qt),qt.forEach(t),Js.forEach(t),P9e=i(d),sd=n(d,"H2",{class:!0});var Gxe=s(sd);F1=n(Gxe,"A",{id:!0,class:!0,href:!0});var czr=s(F1);ote=n(czr,"SPAN",{});var fzr=s(ote);m(qE.$$.fragment,fzr),fzr.forEach(t),czr.forEach(t),y4o=i(Gxe),rte=n(Gxe,"SPAN",{});var mzr=s(rte);w4o=r(mzr,"AutoModelForMultipleChoice"),mzr.forEach(t),Gxe.forEach(t),$9e=i(d),Zo=n(d,"DIV",{class:!0});var Ks=s(Zo);m(GE.$$.fragment,Ks),A4o=i(Ks),ld=n(Ks,"P",{});var IV=s(ld);L4o=r(IV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tte=n(IV,"CODE",{});var gzr=s(tte);B4o=r(gzr,"from_pretrained()"),gzr.forEach(t),x4o=r(IV,"class method or the "),ate=n(IV,"CODE",{});var hzr=s(ate);k4o=r(hzr,"from_config()"),hzr.forEach(t),R4o=r(IV,`class
method.`),IV.forEach(t),S4o=i(Ks),OE=n(Ks,"P",{});var Oxe=s(OE);P4o=r(Oxe,"This class cannot be instantiated directly using "),nte=n(Oxe,"CODE",{});var pzr=s(nte);$4o=r(pzr,"__init__()"),pzr.forEach(t),I4o=r(Oxe," (throws an error)."),Oxe.forEach(t),D4o=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(XE.$$.fragment,Zs),j4o=i(Zs),ste=n(Zs,"P",{});var _zr=s(ste);N4o=r(_zr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_zr.forEach(t),q4o=i(Zs),id=n(Zs,"P",{});var DV=s(id);G4o=r(DV,`Note:
Loading a model from its configuration file does `),lte=n(DV,"STRONG",{});var uzr=s(lte);O4o=r(uzr,"not"),uzr.forEach(t),X4o=r(DV,` load the model weights. It only affects the
model\u2019s configuration. Use `),ite=n(DV,"CODE",{});var bzr=s(ite);V4o=r(bzr,"from_pretrained()"),bzr.forEach(t),z4o=r(DV,"to load the model weights."),DV.forEach(t),W4o=i(Zs),dte=n(Zs,"P",{});var vzr=s(dte);Q4o=r(vzr,"Examples:"),vzr.forEach(t),H4o=i(Zs),m(VE.$$.fragment,Zs),Zs.forEach(t),U4o=i(Ks),je=n(Ks,"DIV",{class:!0});var Gt=s(je);m(zE.$$.fragment,Gt),J4o=i(Gt),cte=n(Gt,"P",{});var Tzr=s(cte);Y4o=r(Tzr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Tzr.forEach(t),K4o=i(Gt),za=n(Gt,"P",{});var L4=s(za);Z4o=r(L4,"The model class to instantiate is selected based on the "),fte=n(L4,"CODE",{});var Fzr=s(fte);eMo=r(Fzr,"model_type"),Fzr.forEach(t),oMo=r(L4,` property of the config object (either
passed as an argument or loaded from `),mte=n(L4,"CODE",{});var Czr=s(mte);rMo=r(Czr,"pretrained_model_name_or_path"),Czr.forEach(t),tMo=r(L4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gte=n(L4,"CODE",{});var Mzr=s(gte);aMo=r(Mzr,"pretrained_model_name_or_path"),Mzr.forEach(t),nMo=r(L4,":"),L4.forEach(t),sMo=i(Gt),G=n(Gt,"UL",{});var O=s(G);C1=n(O,"LI",{});var KMe=s(C1);hte=n(KMe,"STRONG",{});var Ezr=s(hte);lMo=r(Ezr,"albert"),Ezr.forEach(t),iMo=r(KMe," \u2014 "),vI=n(KMe,"A",{href:!0});var yzr=s(vI);dMo=r(yzr,"AlbertForMultipleChoice"),yzr.forEach(t),cMo=r(KMe," (ALBERT model)"),KMe.forEach(t),fMo=i(O),M1=n(O,"LI",{});var ZMe=s(M1);pte=n(ZMe,"STRONG",{});var wzr=s(pte);mMo=r(wzr,"bert"),wzr.forEach(t),gMo=r(ZMe," \u2014 "),TI=n(ZMe,"A",{href:!0});var Azr=s(TI);hMo=r(Azr,"BertForMultipleChoice"),Azr.forEach(t),pMo=r(ZMe," (BERT model)"),ZMe.forEach(t),_Mo=i(O),E1=n(O,"LI",{});var eEe=s(E1);_te=n(eEe,"STRONG",{});var Lzr=s(_te);uMo=r(Lzr,"big_bird"),Lzr.forEach(t),bMo=r(eEe," \u2014 "),FI=n(eEe,"A",{href:!0});var Bzr=s(FI);vMo=r(Bzr,"BigBirdForMultipleChoice"),Bzr.forEach(t),TMo=r(eEe," (BigBird model)"),eEe.forEach(t),FMo=i(O),y1=n(O,"LI",{});var oEe=s(y1);ute=n(oEe,"STRONG",{});var xzr=s(ute);CMo=r(xzr,"camembert"),xzr.forEach(t),MMo=r(oEe," \u2014 "),CI=n(oEe,"A",{href:!0});var kzr=s(CI);EMo=r(kzr,"CamembertForMultipleChoice"),kzr.forEach(t),yMo=r(oEe," (CamemBERT model)"),oEe.forEach(t),wMo=i(O),w1=n(O,"LI",{});var rEe=s(w1);bte=n(rEe,"STRONG",{});var Rzr=s(bte);AMo=r(Rzr,"canine"),Rzr.forEach(t),LMo=r(rEe," \u2014 "),MI=n(rEe,"A",{href:!0});var Szr=s(MI);BMo=r(Szr,"CanineForMultipleChoice"),Szr.forEach(t),xMo=r(rEe," (Canine model)"),rEe.forEach(t),kMo=i(O),A1=n(O,"LI",{});var tEe=s(A1);vte=n(tEe,"STRONG",{});var Pzr=s(vte);RMo=r(Pzr,"convbert"),Pzr.forEach(t),SMo=r(tEe," \u2014 "),EI=n(tEe,"A",{href:!0});var $zr=s(EI);PMo=r($zr,"ConvBertForMultipleChoice"),$zr.forEach(t),$Mo=r(tEe," (ConvBERT model)"),tEe.forEach(t),IMo=i(O),L1=n(O,"LI",{});var aEe=s(L1);Tte=n(aEe,"STRONG",{});var Izr=s(Tte);DMo=r(Izr,"data2vec-text"),Izr.forEach(t),jMo=r(aEe," \u2014 "),yI=n(aEe,"A",{href:!0});var Dzr=s(yI);NMo=r(Dzr,"Data2VecTextForMultipleChoice"),Dzr.forEach(t),qMo=r(aEe," (Data2VecText model)"),aEe.forEach(t),GMo=i(O),B1=n(O,"LI",{});var nEe=s(B1);Fte=n(nEe,"STRONG",{});var jzr=s(Fte);OMo=r(jzr,"distilbert"),jzr.forEach(t),XMo=r(nEe," \u2014 "),wI=n(nEe,"A",{href:!0});var Nzr=s(wI);VMo=r(Nzr,"DistilBertForMultipleChoice"),Nzr.forEach(t),zMo=r(nEe," (DistilBERT model)"),nEe.forEach(t),WMo=i(O),x1=n(O,"LI",{});var sEe=s(x1);Cte=n(sEe,"STRONG",{});var qzr=s(Cte);QMo=r(qzr,"electra"),qzr.forEach(t),HMo=r(sEe," \u2014 "),AI=n(sEe,"A",{href:!0});var Gzr=s(AI);UMo=r(Gzr,"ElectraForMultipleChoice"),Gzr.forEach(t),JMo=r(sEe," (ELECTRA model)"),sEe.forEach(t),YMo=i(O),k1=n(O,"LI",{});var lEe=s(k1);Mte=n(lEe,"STRONG",{});var Ozr=s(Mte);KMo=r(Ozr,"flaubert"),Ozr.forEach(t),ZMo=r(lEe," \u2014 "),LI=n(lEe,"A",{href:!0});var Xzr=s(LI);eEo=r(Xzr,"FlaubertForMultipleChoice"),Xzr.forEach(t),oEo=r(lEe," (FlauBERT model)"),lEe.forEach(t),rEo=i(O),R1=n(O,"LI",{});var iEe=s(R1);Ete=n(iEe,"STRONG",{});var Vzr=s(Ete);tEo=r(Vzr,"fnet"),Vzr.forEach(t),aEo=r(iEe," \u2014 "),BI=n(iEe,"A",{href:!0});var zzr=s(BI);nEo=r(zzr,"FNetForMultipleChoice"),zzr.forEach(t),sEo=r(iEe," (FNet model)"),iEe.forEach(t),lEo=i(O),S1=n(O,"LI",{});var dEe=s(S1);yte=n(dEe,"STRONG",{});var Wzr=s(yte);iEo=r(Wzr,"funnel"),Wzr.forEach(t),dEo=r(dEe," \u2014 "),xI=n(dEe,"A",{href:!0});var Qzr=s(xI);cEo=r(Qzr,"FunnelForMultipleChoice"),Qzr.forEach(t),fEo=r(dEe," (Funnel Transformer model)"),dEe.forEach(t),mEo=i(O),P1=n(O,"LI",{});var cEe=s(P1);wte=n(cEe,"STRONG",{});var Hzr=s(wte);gEo=r(Hzr,"ibert"),Hzr.forEach(t),hEo=r(cEe," \u2014 "),kI=n(cEe,"A",{href:!0});var Uzr=s(kI);pEo=r(Uzr,"IBertForMultipleChoice"),Uzr.forEach(t),_Eo=r(cEe," (I-BERT model)"),cEe.forEach(t),uEo=i(O),$1=n(O,"LI",{});var fEe=s($1);Ate=n(fEe,"STRONG",{});var Jzr=s(Ate);bEo=r(Jzr,"longformer"),Jzr.forEach(t),vEo=r(fEe," \u2014 "),RI=n(fEe,"A",{href:!0});var Yzr=s(RI);TEo=r(Yzr,"LongformerForMultipleChoice"),Yzr.forEach(t),FEo=r(fEe," (Longformer model)"),fEe.forEach(t),CEo=i(O),I1=n(O,"LI",{});var mEe=s(I1);Lte=n(mEe,"STRONG",{});var Kzr=s(Lte);MEo=r(Kzr,"megatron-bert"),Kzr.forEach(t),EEo=r(mEe," \u2014 "),SI=n(mEe,"A",{href:!0});var Zzr=s(SI);yEo=r(Zzr,"MegatronBertForMultipleChoice"),Zzr.forEach(t),wEo=r(mEe," (MegatronBert model)"),mEe.forEach(t),AEo=i(O),D1=n(O,"LI",{});var gEe=s(D1);Bte=n(gEe,"STRONG",{});var eWr=s(Bte);LEo=r(eWr,"mobilebert"),eWr.forEach(t),BEo=r(gEe," \u2014 "),PI=n(gEe,"A",{href:!0});var oWr=s(PI);xEo=r(oWr,"MobileBertForMultipleChoice"),oWr.forEach(t),kEo=r(gEe," (MobileBERT model)"),gEe.forEach(t),REo=i(O),j1=n(O,"LI",{});var hEe=s(j1);xte=n(hEe,"STRONG",{});var rWr=s(xte);SEo=r(rWr,"mpnet"),rWr.forEach(t),PEo=r(hEe," \u2014 "),$I=n(hEe,"A",{href:!0});var tWr=s($I);$Eo=r(tWr,"MPNetForMultipleChoice"),tWr.forEach(t),IEo=r(hEe," (MPNet model)"),hEe.forEach(t),DEo=i(O),N1=n(O,"LI",{});var pEe=s(N1);kte=n(pEe,"STRONG",{});var aWr=s(kte);jEo=r(aWr,"nystromformer"),aWr.forEach(t),NEo=r(pEe," \u2014 "),II=n(pEe,"A",{href:!0});var nWr=s(II);qEo=r(nWr,"NystromformerForMultipleChoice"),nWr.forEach(t),GEo=r(pEe," (Nystromformer model)"),pEe.forEach(t),OEo=i(O),q1=n(O,"LI",{});var _Ee=s(q1);Rte=n(_Ee,"STRONG",{});var sWr=s(Rte);XEo=r(sWr,"qdqbert"),sWr.forEach(t),VEo=r(_Ee," \u2014 "),DI=n(_Ee,"A",{href:!0});var lWr=s(DI);zEo=r(lWr,"QDQBertForMultipleChoice"),lWr.forEach(t),WEo=r(_Ee," (QDQBert model)"),_Ee.forEach(t),QEo=i(O),G1=n(O,"LI",{});var uEe=s(G1);Ste=n(uEe,"STRONG",{});var iWr=s(Ste);HEo=r(iWr,"rembert"),iWr.forEach(t),UEo=r(uEe," \u2014 "),jI=n(uEe,"A",{href:!0});var dWr=s(jI);JEo=r(dWr,"RemBertForMultipleChoice"),dWr.forEach(t),YEo=r(uEe," (RemBERT model)"),uEe.forEach(t),KEo=i(O),O1=n(O,"LI",{});var bEe=s(O1);Pte=n(bEe,"STRONG",{});var cWr=s(Pte);ZEo=r(cWr,"roberta"),cWr.forEach(t),e3o=r(bEe," \u2014 "),NI=n(bEe,"A",{href:!0});var fWr=s(NI);o3o=r(fWr,"RobertaForMultipleChoice"),fWr.forEach(t),r3o=r(bEe," (RoBERTa model)"),bEe.forEach(t),t3o=i(O),X1=n(O,"LI",{});var vEe=s(X1);$te=n(vEe,"STRONG",{});var mWr=s($te);a3o=r(mWr,"roformer"),mWr.forEach(t),n3o=r(vEe," \u2014 "),qI=n(vEe,"A",{href:!0});var gWr=s(qI);s3o=r(gWr,"RoFormerForMultipleChoice"),gWr.forEach(t),l3o=r(vEe," (RoFormer model)"),vEe.forEach(t),i3o=i(O),V1=n(O,"LI",{});var TEe=s(V1);Ite=n(TEe,"STRONG",{});var hWr=s(Ite);d3o=r(hWr,"squeezebert"),hWr.forEach(t),c3o=r(TEe," \u2014 "),GI=n(TEe,"A",{href:!0});var pWr=s(GI);f3o=r(pWr,"SqueezeBertForMultipleChoice"),pWr.forEach(t),m3o=r(TEe," (SqueezeBERT model)"),TEe.forEach(t),g3o=i(O),z1=n(O,"LI",{});var FEe=s(z1);Dte=n(FEe,"STRONG",{});var _Wr=s(Dte);h3o=r(_Wr,"xlm"),_Wr.forEach(t),p3o=r(FEe," \u2014 "),OI=n(FEe,"A",{href:!0});var uWr=s(OI);_3o=r(uWr,"XLMForMultipleChoice"),uWr.forEach(t),u3o=r(FEe," (XLM model)"),FEe.forEach(t),b3o=i(O),W1=n(O,"LI",{});var CEe=s(W1);jte=n(CEe,"STRONG",{});var bWr=s(jte);v3o=r(bWr,"xlm-roberta"),bWr.forEach(t),T3o=r(CEe," \u2014 "),XI=n(CEe,"A",{href:!0});var vWr=s(XI);F3o=r(vWr,"XLMRobertaForMultipleChoice"),vWr.forEach(t),C3o=r(CEe," (XLM-RoBERTa model)"),CEe.forEach(t),M3o=i(O),Q1=n(O,"LI",{});var MEe=s(Q1);Nte=n(MEe,"STRONG",{});var TWr=s(Nte);E3o=r(TWr,"xlm-roberta-xl"),TWr.forEach(t),y3o=r(MEe," \u2014 "),VI=n(MEe,"A",{href:!0});var FWr=s(VI);w3o=r(FWr,"XLMRobertaXLForMultipleChoice"),FWr.forEach(t),A3o=r(MEe," (XLM-RoBERTa-XL model)"),MEe.forEach(t),L3o=i(O),H1=n(O,"LI",{});var EEe=s(H1);qte=n(EEe,"STRONG",{});var CWr=s(qte);B3o=r(CWr,"xlnet"),CWr.forEach(t),x3o=r(EEe," \u2014 "),zI=n(EEe,"A",{href:!0});var MWr=s(zI);k3o=r(MWr,"XLNetForMultipleChoice"),MWr.forEach(t),R3o=r(EEe," (XLNet model)"),EEe.forEach(t),S3o=i(O),U1=n(O,"LI",{});var yEe=s(U1);Gte=n(yEe,"STRONG",{});var EWr=s(Gte);P3o=r(EWr,"yoso"),EWr.forEach(t),$3o=r(yEe," \u2014 "),WI=n(yEe,"A",{href:!0});var yWr=s(WI);I3o=r(yWr,"YosoForMultipleChoice"),yWr.forEach(t),D3o=r(yEe," (YOSO model)"),yEe.forEach(t),O.forEach(t),j3o=i(Gt),J1=n(Gt,"P",{});var wEe=s(J1);N3o=r(wEe,"The model is set in evaluation mode by default using "),Ote=n(wEe,"CODE",{});var wWr=s(Ote);q3o=r(wWr,"model.eval()"),wWr.forEach(t),G3o=r(wEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xte=n(wEe,"CODE",{});var AWr=s(Xte);O3o=r(AWr,"model.train()"),AWr.forEach(t),wEe.forEach(t),X3o=i(Gt),Vte=n(Gt,"P",{});var LWr=s(Vte);V3o=r(LWr,"Examples:"),LWr.forEach(t),z3o=i(Gt),m(WE.$$.fragment,Gt),Gt.forEach(t),Ks.forEach(t),I9e=i(d),dd=n(d,"H2",{class:!0});var Xxe=s(dd);Y1=n(Xxe,"A",{id:!0,class:!0,href:!0});var BWr=s(Y1);zte=n(BWr,"SPAN",{});var xWr=s(zte);m(QE.$$.fragment,xWr),xWr.forEach(t),BWr.forEach(t),W3o=i(Xxe),Wte=n(Xxe,"SPAN",{});var kWr=s(Wte);Q3o=r(kWr,"AutoModelForNextSentencePrediction"),kWr.forEach(t),Xxe.forEach(t),D9e=i(d),er=n(d,"DIV",{class:!0});var el=s(er);m(HE.$$.fragment,el),H3o=i(el),cd=n(el,"P",{});var jV=s(cd);U3o=r(jV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Qte=n(jV,"CODE",{});var RWr=s(Qte);J3o=r(RWr,"from_pretrained()"),RWr.forEach(t),Y3o=r(jV,"class method or the "),Hte=n(jV,"CODE",{});var SWr=s(Hte);K3o=r(SWr,"from_config()"),SWr.forEach(t),Z3o=r(jV,`class
method.`),jV.forEach(t),eyo=i(el),UE=n(el,"P",{});var Vxe=s(UE);oyo=r(Vxe,"This class cannot be instantiated directly using "),Ute=n(Vxe,"CODE",{});var PWr=s(Ute);ryo=r(PWr,"__init__()"),PWr.forEach(t),tyo=r(Vxe," (throws an error)."),Vxe.forEach(t),ayo=i(el),Qr=n(el,"DIV",{class:!0});var ol=s(Qr);m(JE.$$.fragment,ol),nyo=i(ol),Jte=n(ol,"P",{});var $Wr=s(Jte);syo=r($Wr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Wr.forEach(t),lyo=i(ol),fd=n(ol,"P",{});var NV=s(fd);iyo=r(NV,`Note:
Loading a model from its configuration file does `),Yte=n(NV,"STRONG",{});var IWr=s(Yte);dyo=r(IWr,"not"),IWr.forEach(t),cyo=r(NV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kte=n(NV,"CODE",{});var DWr=s(Kte);fyo=r(DWr,"from_pretrained()"),DWr.forEach(t),myo=r(NV,"to load the model weights."),NV.forEach(t),gyo=i(ol),Zte=n(ol,"P",{});var jWr=s(Zte);hyo=r(jWr,"Examples:"),jWr.forEach(t),pyo=i(ol),m(YE.$$.fragment,ol),ol.forEach(t),_yo=i(el),Ne=n(el,"DIV",{class:!0});var Ot=s(Ne);m(KE.$$.fragment,Ot),uyo=i(Ot),eae=n(Ot,"P",{});var NWr=s(eae);byo=r(NWr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),NWr.forEach(t),vyo=i(Ot),Wa=n(Ot,"P",{});var B4=s(Wa);Tyo=r(B4,"The model class to instantiate is selected based on the "),oae=n(B4,"CODE",{});var qWr=s(oae);Fyo=r(qWr,"model_type"),qWr.forEach(t),Cyo=r(B4,` property of the config object (either
passed as an argument or loaded from `),rae=n(B4,"CODE",{});var GWr=s(rae);Myo=r(GWr,"pretrained_model_name_or_path"),GWr.forEach(t),Eyo=r(B4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tae=n(B4,"CODE",{});var OWr=s(tae);yyo=r(OWr,"pretrained_model_name_or_path"),OWr.forEach(t),wyo=r(B4,":"),B4.forEach(t),Ayo=i(Ot),na=n(Ot,"UL",{});var rl=s(na);K1=n(rl,"LI",{});var AEe=s(K1);aae=n(AEe,"STRONG",{});var XWr=s(aae);Lyo=r(XWr,"bert"),XWr.forEach(t),Byo=r(AEe," \u2014 "),QI=n(AEe,"A",{href:!0});var VWr=s(QI);xyo=r(VWr,"BertForNextSentencePrediction"),VWr.forEach(t),kyo=r(AEe," (BERT model)"),AEe.forEach(t),Ryo=i(rl),Z1=n(rl,"LI",{});var LEe=s(Z1);nae=n(LEe,"STRONG",{});var zWr=s(nae);Syo=r(zWr,"fnet"),zWr.forEach(t),Pyo=r(LEe," \u2014 "),HI=n(LEe,"A",{href:!0});var WWr=s(HI);$yo=r(WWr,"FNetForNextSentencePrediction"),WWr.forEach(t),Iyo=r(LEe," (FNet model)"),LEe.forEach(t),Dyo=i(rl),eb=n(rl,"LI",{});var BEe=s(eb);sae=n(BEe,"STRONG",{});var QWr=s(sae);jyo=r(QWr,"megatron-bert"),QWr.forEach(t),Nyo=r(BEe," \u2014 "),UI=n(BEe,"A",{href:!0});var HWr=s(UI);qyo=r(HWr,"MegatronBertForNextSentencePrediction"),HWr.forEach(t),Gyo=r(BEe," (MegatronBert model)"),BEe.forEach(t),Oyo=i(rl),ob=n(rl,"LI",{});var xEe=s(ob);lae=n(xEe,"STRONG",{});var UWr=s(lae);Xyo=r(UWr,"mobilebert"),UWr.forEach(t),Vyo=r(xEe," \u2014 "),JI=n(xEe,"A",{href:!0});var JWr=s(JI);zyo=r(JWr,"MobileBertForNextSentencePrediction"),JWr.forEach(t),Wyo=r(xEe," (MobileBERT model)"),xEe.forEach(t),Qyo=i(rl),rb=n(rl,"LI",{});var kEe=s(rb);iae=n(kEe,"STRONG",{});var YWr=s(iae);Hyo=r(YWr,"qdqbert"),YWr.forEach(t),Uyo=r(kEe," \u2014 "),YI=n(kEe,"A",{href:!0});var KWr=s(YI);Jyo=r(KWr,"QDQBertForNextSentencePrediction"),KWr.forEach(t),Yyo=r(kEe," (QDQBert model)"),kEe.forEach(t),rl.forEach(t),Kyo=i(Ot),tb=n(Ot,"P",{});var REe=s(tb);Zyo=r(REe,"The model is set in evaluation mode by default using "),dae=n(REe,"CODE",{});var ZWr=s(dae);ewo=r(ZWr,"model.eval()"),ZWr.forEach(t),owo=r(REe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cae=n(REe,"CODE",{});var eQr=s(cae);rwo=r(eQr,"model.train()"),eQr.forEach(t),REe.forEach(t),two=i(Ot),fae=n(Ot,"P",{});var oQr=s(fae);awo=r(oQr,"Examples:"),oQr.forEach(t),nwo=i(Ot),m(ZE.$$.fragment,Ot),Ot.forEach(t),el.forEach(t),j9e=i(d),md=n(d,"H2",{class:!0});var zxe=s(md);ab=n(zxe,"A",{id:!0,class:!0,href:!0});var rQr=s(ab);mae=n(rQr,"SPAN",{});var tQr=s(mae);m(e3.$$.fragment,tQr),tQr.forEach(t),rQr.forEach(t),swo=i(zxe),gae=n(zxe,"SPAN",{});var aQr=s(gae);lwo=r(aQr,"AutoModelForTokenClassification"),aQr.forEach(t),zxe.forEach(t),N9e=i(d),or=n(d,"DIV",{class:!0});var tl=s(or);m(o3.$$.fragment,tl),iwo=i(tl),gd=n(tl,"P",{});var qV=s(gd);dwo=r(qV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hae=n(qV,"CODE",{});var nQr=s(hae);cwo=r(nQr,"from_pretrained()"),nQr.forEach(t),fwo=r(qV,"class method or the "),pae=n(qV,"CODE",{});var sQr=s(pae);mwo=r(sQr,"from_config()"),sQr.forEach(t),gwo=r(qV,`class
method.`),qV.forEach(t),hwo=i(tl),r3=n(tl,"P",{});var Wxe=s(r3);pwo=r(Wxe,"This class cannot be instantiated directly using "),_ae=n(Wxe,"CODE",{});var lQr=s(_ae);_wo=r(lQr,"__init__()"),lQr.forEach(t),uwo=r(Wxe," (throws an error)."),Wxe.forEach(t),bwo=i(tl),Hr=n(tl,"DIV",{class:!0});var al=s(Hr);m(t3.$$.fragment,al),vwo=i(al),uae=n(al,"P",{});var iQr=s(uae);Two=r(iQr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),iQr.forEach(t),Fwo=i(al),hd=n(al,"P",{});var GV=s(hd);Cwo=r(GV,`Note:
Loading a model from its configuration file does `),bae=n(GV,"STRONG",{});var dQr=s(bae);Mwo=r(dQr,"not"),dQr.forEach(t),Ewo=r(GV,` load the model weights. It only affects the
model\u2019s configuration. Use `),vae=n(GV,"CODE",{});var cQr=s(vae);ywo=r(cQr,"from_pretrained()"),cQr.forEach(t),wwo=r(GV,"to load the model weights."),GV.forEach(t),Awo=i(al),Tae=n(al,"P",{});var fQr=s(Tae);Lwo=r(fQr,"Examples:"),fQr.forEach(t),Bwo=i(al),m(a3.$$.fragment,al),al.forEach(t),xwo=i(tl),qe=n(tl,"DIV",{class:!0});var Xt=s(qe);m(n3.$$.fragment,Xt),kwo=i(Xt),Fae=n(Xt,"P",{});var mQr=s(Fae);Rwo=r(mQr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),mQr.forEach(t),Swo=i(Xt),Qa=n(Xt,"P",{});var x4=s(Qa);Pwo=r(x4,"The model class to instantiate is selected based on the "),Cae=n(x4,"CODE",{});var gQr=s(Cae);$wo=r(gQr,"model_type"),gQr.forEach(t),Iwo=r(x4,` property of the config object (either
passed as an argument or loaded from `),Mae=n(x4,"CODE",{});var hQr=s(Mae);Dwo=r(hQr,"pretrained_model_name_or_path"),hQr.forEach(t),jwo=r(x4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eae=n(x4,"CODE",{});var pQr=s(Eae);Nwo=r(pQr,"pretrained_model_name_or_path"),pQr.forEach(t),qwo=r(x4,":"),x4.forEach(t),Gwo=i(Xt),N=n(Xt,"UL",{});var q=s(N);nb=n(q,"LI",{});var SEe=s(nb);yae=n(SEe,"STRONG",{});var _Qr=s(yae);Owo=r(_Qr,"albert"),_Qr.forEach(t),Xwo=r(SEe," \u2014 "),KI=n(SEe,"A",{href:!0});var uQr=s(KI);Vwo=r(uQr,"AlbertForTokenClassification"),uQr.forEach(t),zwo=r(SEe," (ALBERT model)"),SEe.forEach(t),Wwo=i(q),sb=n(q,"LI",{});var PEe=s(sb);wae=n(PEe,"STRONG",{});var bQr=s(wae);Qwo=r(bQr,"bert"),bQr.forEach(t),Hwo=r(PEe," \u2014 "),ZI=n(PEe,"A",{href:!0});var vQr=s(ZI);Uwo=r(vQr,"BertForTokenClassification"),vQr.forEach(t),Jwo=r(PEe," (BERT model)"),PEe.forEach(t),Ywo=i(q),lb=n(q,"LI",{});var $Ee=s(lb);Aae=n($Ee,"STRONG",{});var TQr=s(Aae);Kwo=r(TQr,"big_bird"),TQr.forEach(t),Zwo=r($Ee," \u2014 "),eD=n($Ee,"A",{href:!0});var FQr=s(eD);e6o=r(FQr,"BigBirdForTokenClassification"),FQr.forEach(t),o6o=r($Ee," (BigBird model)"),$Ee.forEach(t),r6o=i(q),ib=n(q,"LI",{});var IEe=s(ib);Lae=n(IEe,"STRONG",{});var CQr=s(Lae);t6o=r(CQr,"camembert"),CQr.forEach(t),a6o=r(IEe," \u2014 "),oD=n(IEe,"A",{href:!0});var MQr=s(oD);n6o=r(MQr,"CamembertForTokenClassification"),MQr.forEach(t),s6o=r(IEe," (CamemBERT model)"),IEe.forEach(t),l6o=i(q),db=n(q,"LI",{});var DEe=s(db);Bae=n(DEe,"STRONG",{});var EQr=s(Bae);i6o=r(EQr,"canine"),EQr.forEach(t),d6o=r(DEe," \u2014 "),rD=n(DEe,"A",{href:!0});var yQr=s(rD);c6o=r(yQr,"CanineForTokenClassification"),yQr.forEach(t),f6o=r(DEe," (Canine model)"),DEe.forEach(t),m6o=i(q),cb=n(q,"LI",{});var jEe=s(cb);xae=n(jEe,"STRONG",{});var wQr=s(xae);g6o=r(wQr,"convbert"),wQr.forEach(t),h6o=r(jEe," \u2014 "),tD=n(jEe,"A",{href:!0});var AQr=s(tD);p6o=r(AQr,"ConvBertForTokenClassification"),AQr.forEach(t),_6o=r(jEe," (ConvBERT model)"),jEe.forEach(t),u6o=i(q),fb=n(q,"LI",{});var NEe=s(fb);kae=n(NEe,"STRONG",{});var LQr=s(kae);b6o=r(LQr,"data2vec-text"),LQr.forEach(t),v6o=r(NEe," \u2014 "),aD=n(NEe,"A",{href:!0});var BQr=s(aD);T6o=r(BQr,"Data2VecTextForTokenClassification"),BQr.forEach(t),F6o=r(NEe," (Data2VecText model)"),NEe.forEach(t),C6o=i(q),mb=n(q,"LI",{});var qEe=s(mb);Rae=n(qEe,"STRONG",{});var xQr=s(Rae);M6o=r(xQr,"deberta"),xQr.forEach(t),E6o=r(qEe," \u2014 "),nD=n(qEe,"A",{href:!0});var kQr=s(nD);y6o=r(kQr,"DebertaForTokenClassification"),kQr.forEach(t),w6o=r(qEe," (DeBERTa model)"),qEe.forEach(t),A6o=i(q),gb=n(q,"LI",{});var GEe=s(gb);Sae=n(GEe,"STRONG",{});var RQr=s(Sae);L6o=r(RQr,"deberta-v2"),RQr.forEach(t),B6o=r(GEe," \u2014 "),sD=n(GEe,"A",{href:!0});var SQr=s(sD);x6o=r(SQr,"DebertaV2ForTokenClassification"),SQr.forEach(t),k6o=r(GEe," (DeBERTa-v2 model)"),GEe.forEach(t),R6o=i(q),hb=n(q,"LI",{});var OEe=s(hb);Pae=n(OEe,"STRONG",{});var PQr=s(Pae);S6o=r(PQr,"distilbert"),PQr.forEach(t),P6o=r(OEe," \u2014 "),lD=n(OEe,"A",{href:!0});var $Qr=s(lD);$6o=r($Qr,"DistilBertForTokenClassification"),$Qr.forEach(t),I6o=r(OEe," (DistilBERT model)"),OEe.forEach(t),D6o=i(q),pb=n(q,"LI",{});var XEe=s(pb);$ae=n(XEe,"STRONG",{});var IQr=s($ae);j6o=r(IQr,"electra"),IQr.forEach(t),N6o=r(XEe," \u2014 "),iD=n(XEe,"A",{href:!0});var DQr=s(iD);q6o=r(DQr,"ElectraForTokenClassification"),DQr.forEach(t),G6o=r(XEe," (ELECTRA model)"),XEe.forEach(t),O6o=i(q),_b=n(q,"LI",{});var VEe=s(_b);Iae=n(VEe,"STRONG",{});var jQr=s(Iae);X6o=r(jQr,"flaubert"),jQr.forEach(t),V6o=r(VEe," \u2014 "),dD=n(VEe,"A",{href:!0});var NQr=s(dD);z6o=r(NQr,"FlaubertForTokenClassification"),NQr.forEach(t),W6o=r(VEe," (FlauBERT model)"),VEe.forEach(t),Q6o=i(q),ub=n(q,"LI",{});var zEe=s(ub);Dae=n(zEe,"STRONG",{});var qQr=s(Dae);H6o=r(qQr,"fnet"),qQr.forEach(t),U6o=r(zEe," \u2014 "),cD=n(zEe,"A",{href:!0});var GQr=s(cD);J6o=r(GQr,"FNetForTokenClassification"),GQr.forEach(t),Y6o=r(zEe," (FNet model)"),zEe.forEach(t),K6o=i(q),bb=n(q,"LI",{});var WEe=s(bb);jae=n(WEe,"STRONG",{});var OQr=s(jae);Z6o=r(OQr,"funnel"),OQr.forEach(t),eAo=r(WEe," \u2014 "),fD=n(WEe,"A",{href:!0});var XQr=s(fD);oAo=r(XQr,"FunnelForTokenClassification"),XQr.forEach(t),rAo=r(WEe," (Funnel Transformer model)"),WEe.forEach(t),tAo=i(q),vb=n(q,"LI",{});var QEe=s(vb);Nae=n(QEe,"STRONG",{});var VQr=s(Nae);aAo=r(VQr,"gpt2"),VQr.forEach(t),nAo=r(QEe," \u2014 "),mD=n(QEe,"A",{href:!0});var zQr=s(mD);sAo=r(zQr,"GPT2ForTokenClassification"),zQr.forEach(t),lAo=r(QEe," (OpenAI GPT-2 model)"),QEe.forEach(t),iAo=i(q),Tb=n(q,"LI",{});var HEe=s(Tb);qae=n(HEe,"STRONG",{});var WQr=s(qae);dAo=r(WQr,"ibert"),WQr.forEach(t),cAo=r(HEe," \u2014 "),gD=n(HEe,"A",{href:!0});var QQr=s(gD);fAo=r(QQr,"IBertForTokenClassification"),QQr.forEach(t),mAo=r(HEe," (I-BERT model)"),HEe.forEach(t),gAo=i(q),Fb=n(q,"LI",{});var UEe=s(Fb);Gae=n(UEe,"STRONG",{});var HQr=s(Gae);hAo=r(HQr,"layoutlm"),HQr.forEach(t),pAo=r(UEe," \u2014 "),hD=n(UEe,"A",{href:!0});var UQr=s(hD);_Ao=r(UQr,"LayoutLMForTokenClassification"),UQr.forEach(t),uAo=r(UEe," (LayoutLM model)"),UEe.forEach(t),bAo=i(q),Cb=n(q,"LI",{});var JEe=s(Cb);Oae=n(JEe,"STRONG",{});var JQr=s(Oae);vAo=r(JQr,"layoutlmv2"),JQr.forEach(t),TAo=r(JEe," \u2014 "),pD=n(JEe,"A",{href:!0});var YQr=s(pD);FAo=r(YQr,"LayoutLMv2ForTokenClassification"),YQr.forEach(t),CAo=r(JEe," (LayoutLMv2 model)"),JEe.forEach(t),MAo=i(q),Mb=n(q,"LI",{});var YEe=s(Mb);Xae=n(YEe,"STRONG",{});var KQr=s(Xae);EAo=r(KQr,"longformer"),KQr.forEach(t),yAo=r(YEe," \u2014 "),_D=n(YEe,"A",{href:!0});var ZQr=s(_D);wAo=r(ZQr,"LongformerForTokenClassification"),ZQr.forEach(t),AAo=r(YEe," (Longformer model)"),YEe.forEach(t),LAo=i(q),Eb=n(q,"LI",{});var KEe=s(Eb);Vae=n(KEe,"STRONG",{});var eHr=s(Vae);BAo=r(eHr,"megatron-bert"),eHr.forEach(t),xAo=r(KEe," \u2014 "),uD=n(KEe,"A",{href:!0});var oHr=s(uD);kAo=r(oHr,"MegatronBertForTokenClassification"),oHr.forEach(t),RAo=r(KEe," (MegatronBert model)"),KEe.forEach(t),SAo=i(q),yb=n(q,"LI",{});var ZEe=s(yb);zae=n(ZEe,"STRONG",{});var rHr=s(zae);PAo=r(rHr,"mobilebert"),rHr.forEach(t),$Ao=r(ZEe," \u2014 "),bD=n(ZEe,"A",{href:!0});var tHr=s(bD);IAo=r(tHr,"MobileBertForTokenClassification"),tHr.forEach(t),DAo=r(ZEe," (MobileBERT model)"),ZEe.forEach(t),jAo=i(q),wb=n(q,"LI",{});var e3e=s(wb);Wae=n(e3e,"STRONG",{});var aHr=s(Wae);NAo=r(aHr,"mpnet"),aHr.forEach(t),qAo=r(e3e," \u2014 "),vD=n(e3e,"A",{href:!0});var nHr=s(vD);GAo=r(nHr,"MPNetForTokenClassification"),nHr.forEach(t),OAo=r(e3e," (MPNet model)"),e3e.forEach(t),XAo=i(q),Ab=n(q,"LI",{});var o3e=s(Ab);Qae=n(o3e,"STRONG",{});var sHr=s(Qae);VAo=r(sHr,"nystromformer"),sHr.forEach(t),zAo=r(o3e," \u2014 "),TD=n(o3e,"A",{href:!0});var lHr=s(TD);WAo=r(lHr,"NystromformerForTokenClassification"),lHr.forEach(t),QAo=r(o3e," (Nystromformer model)"),o3e.forEach(t),HAo=i(q),Lb=n(q,"LI",{});var r3e=s(Lb);Hae=n(r3e,"STRONG",{});var iHr=s(Hae);UAo=r(iHr,"qdqbert"),iHr.forEach(t),JAo=r(r3e," \u2014 "),FD=n(r3e,"A",{href:!0});var dHr=s(FD);YAo=r(dHr,"QDQBertForTokenClassification"),dHr.forEach(t),KAo=r(r3e," (QDQBert model)"),r3e.forEach(t),ZAo=i(q),Bb=n(q,"LI",{});var t3e=s(Bb);Uae=n(t3e,"STRONG",{});var cHr=s(Uae);eLo=r(cHr,"rembert"),cHr.forEach(t),oLo=r(t3e," \u2014 "),CD=n(t3e,"A",{href:!0});var fHr=s(CD);rLo=r(fHr,"RemBertForTokenClassification"),fHr.forEach(t),tLo=r(t3e," (RemBERT model)"),t3e.forEach(t),aLo=i(q),xb=n(q,"LI",{});var a3e=s(xb);Jae=n(a3e,"STRONG",{});var mHr=s(Jae);nLo=r(mHr,"roberta"),mHr.forEach(t),sLo=r(a3e," \u2014 "),MD=n(a3e,"A",{href:!0});var gHr=s(MD);lLo=r(gHr,"RobertaForTokenClassification"),gHr.forEach(t),iLo=r(a3e," (RoBERTa model)"),a3e.forEach(t),dLo=i(q),kb=n(q,"LI",{});var n3e=s(kb);Yae=n(n3e,"STRONG",{});var hHr=s(Yae);cLo=r(hHr,"roformer"),hHr.forEach(t),fLo=r(n3e," \u2014 "),ED=n(n3e,"A",{href:!0});var pHr=s(ED);mLo=r(pHr,"RoFormerForTokenClassification"),pHr.forEach(t),gLo=r(n3e," (RoFormer model)"),n3e.forEach(t),hLo=i(q),Rb=n(q,"LI",{});var s3e=s(Rb);Kae=n(s3e,"STRONG",{});var _Hr=s(Kae);pLo=r(_Hr,"squeezebert"),_Hr.forEach(t),_Lo=r(s3e," \u2014 "),yD=n(s3e,"A",{href:!0});var uHr=s(yD);uLo=r(uHr,"SqueezeBertForTokenClassification"),uHr.forEach(t),bLo=r(s3e," (SqueezeBERT model)"),s3e.forEach(t),vLo=i(q),Sb=n(q,"LI",{});var l3e=s(Sb);Zae=n(l3e,"STRONG",{});var bHr=s(Zae);TLo=r(bHr,"xlm"),bHr.forEach(t),FLo=r(l3e," \u2014 "),wD=n(l3e,"A",{href:!0});var vHr=s(wD);CLo=r(vHr,"XLMForTokenClassification"),vHr.forEach(t),MLo=r(l3e," (XLM model)"),l3e.forEach(t),ELo=i(q),Pb=n(q,"LI",{});var i3e=s(Pb);ene=n(i3e,"STRONG",{});var THr=s(ene);yLo=r(THr,"xlm-roberta"),THr.forEach(t),wLo=r(i3e," \u2014 "),AD=n(i3e,"A",{href:!0});var FHr=s(AD);ALo=r(FHr,"XLMRobertaForTokenClassification"),FHr.forEach(t),LLo=r(i3e," (XLM-RoBERTa model)"),i3e.forEach(t),BLo=i(q),$b=n(q,"LI",{});var d3e=s($b);one=n(d3e,"STRONG",{});var CHr=s(one);xLo=r(CHr,"xlm-roberta-xl"),CHr.forEach(t),kLo=r(d3e," \u2014 "),LD=n(d3e,"A",{href:!0});var MHr=s(LD);RLo=r(MHr,"XLMRobertaXLForTokenClassification"),MHr.forEach(t),SLo=r(d3e," (XLM-RoBERTa-XL model)"),d3e.forEach(t),PLo=i(q),Ib=n(q,"LI",{});var c3e=s(Ib);rne=n(c3e,"STRONG",{});var EHr=s(rne);$Lo=r(EHr,"xlnet"),EHr.forEach(t),ILo=r(c3e," \u2014 "),BD=n(c3e,"A",{href:!0});var yHr=s(BD);DLo=r(yHr,"XLNetForTokenClassification"),yHr.forEach(t),jLo=r(c3e," (XLNet model)"),c3e.forEach(t),NLo=i(q),Db=n(q,"LI",{});var f3e=s(Db);tne=n(f3e,"STRONG",{});var wHr=s(tne);qLo=r(wHr,"yoso"),wHr.forEach(t),GLo=r(f3e," \u2014 "),xD=n(f3e,"A",{href:!0});var AHr=s(xD);OLo=r(AHr,"YosoForTokenClassification"),AHr.forEach(t),XLo=r(f3e," (YOSO model)"),f3e.forEach(t),q.forEach(t),VLo=i(Xt),jb=n(Xt,"P",{});var m3e=s(jb);zLo=r(m3e,"The model is set in evaluation mode by default using "),ane=n(m3e,"CODE",{});var LHr=s(ane);WLo=r(LHr,"model.eval()"),LHr.forEach(t),QLo=r(m3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nne=n(m3e,"CODE",{});var BHr=s(nne);HLo=r(BHr,"model.train()"),BHr.forEach(t),m3e.forEach(t),ULo=i(Xt),sne=n(Xt,"P",{});var xHr=s(sne);JLo=r(xHr,"Examples:"),xHr.forEach(t),YLo=i(Xt),m(s3.$$.fragment,Xt),Xt.forEach(t),tl.forEach(t),q9e=i(d),pd=n(d,"H2",{class:!0});var Qxe=s(pd);Nb=n(Qxe,"A",{id:!0,class:!0,href:!0});var kHr=s(Nb);lne=n(kHr,"SPAN",{});var RHr=s(lne);m(l3.$$.fragment,RHr),RHr.forEach(t),kHr.forEach(t),KLo=i(Qxe),ine=n(Qxe,"SPAN",{});var SHr=s(ine);ZLo=r(SHr,"AutoModelForQuestionAnswering"),SHr.forEach(t),Qxe.forEach(t),G9e=i(d),rr=n(d,"DIV",{class:!0});var nl=s(rr);m(i3.$$.fragment,nl),e8o=i(nl),_d=n(nl,"P",{});var OV=s(_d);o8o=r(OV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dne=n(OV,"CODE",{});var PHr=s(dne);r8o=r(PHr,"from_pretrained()"),PHr.forEach(t),t8o=r(OV,"class method or the "),cne=n(OV,"CODE",{});var $Hr=s(cne);a8o=r($Hr,"from_config()"),$Hr.forEach(t),n8o=r(OV,`class
method.`),OV.forEach(t),s8o=i(nl),d3=n(nl,"P",{});var Hxe=s(d3);l8o=r(Hxe,"This class cannot be instantiated directly using "),fne=n(Hxe,"CODE",{});var IHr=s(fne);i8o=r(IHr,"__init__()"),IHr.forEach(t),d8o=r(Hxe," (throws an error)."),Hxe.forEach(t),c8o=i(nl),Ur=n(nl,"DIV",{class:!0});var sl=s(Ur);m(c3.$$.fragment,sl),f8o=i(sl),mne=n(sl,"P",{});var DHr=s(mne);m8o=r(DHr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DHr.forEach(t),g8o=i(sl),ud=n(sl,"P",{});var XV=s(ud);h8o=r(XV,`Note:
Loading a model from its configuration file does `),gne=n(XV,"STRONG",{});var jHr=s(gne);p8o=r(jHr,"not"),jHr.forEach(t),_8o=r(XV,` load the model weights. It only affects the
model\u2019s configuration. Use `),hne=n(XV,"CODE",{});var NHr=s(hne);u8o=r(NHr,"from_pretrained()"),NHr.forEach(t),b8o=r(XV,"to load the model weights."),XV.forEach(t),v8o=i(sl),pne=n(sl,"P",{});var qHr=s(pne);T8o=r(qHr,"Examples:"),qHr.forEach(t),F8o=i(sl),m(f3.$$.fragment,sl),sl.forEach(t),C8o=i(nl),Ge=n(nl,"DIV",{class:!0});var Vt=s(Ge);m(m3.$$.fragment,Vt),M8o=i(Vt),_ne=n(Vt,"P",{});var GHr=s(_ne);E8o=r(GHr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),GHr.forEach(t),y8o=i(Vt),Ha=n(Vt,"P",{});var k4=s(Ha);w8o=r(k4,"The model class to instantiate is selected based on the "),une=n(k4,"CODE",{});var OHr=s(une);A8o=r(OHr,"model_type"),OHr.forEach(t),L8o=r(k4,` property of the config object (either
passed as an argument or loaded from `),bne=n(k4,"CODE",{});var XHr=s(bne);B8o=r(XHr,"pretrained_model_name_or_path"),XHr.forEach(t),x8o=r(k4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vne=n(k4,"CODE",{});var VHr=s(vne);k8o=r(VHr,"pretrained_model_name_or_path"),VHr.forEach(t),R8o=r(k4,":"),k4.forEach(t),S8o=i(Vt),R=n(Vt,"UL",{});var P=s(R);qb=n(P,"LI",{});var g3e=s(qb);Tne=n(g3e,"STRONG",{});var zHr=s(Tne);P8o=r(zHr,"albert"),zHr.forEach(t),$8o=r(g3e," \u2014 "),kD=n(g3e,"A",{href:!0});var WHr=s(kD);I8o=r(WHr,"AlbertForQuestionAnswering"),WHr.forEach(t),D8o=r(g3e," (ALBERT model)"),g3e.forEach(t),j8o=i(P),Gb=n(P,"LI",{});var h3e=s(Gb);Fne=n(h3e,"STRONG",{});var QHr=s(Fne);N8o=r(QHr,"bart"),QHr.forEach(t),q8o=r(h3e," \u2014 "),RD=n(h3e,"A",{href:!0});var HHr=s(RD);G8o=r(HHr,"BartForQuestionAnswering"),HHr.forEach(t),O8o=r(h3e," (BART model)"),h3e.forEach(t),X8o=i(P),Ob=n(P,"LI",{});var p3e=s(Ob);Cne=n(p3e,"STRONG",{});var UHr=s(Cne);V8o=r(UHr,"bert"),UHr.forEach(t),z8o=r(p3e," \u2014 "),SD=n(p3e,"A",{href:!0});var JHr=s(SD);W8o=r(JHr,"BertForQuestionAnswering"),JHr.forEach(t),Q8o=r(p3e," (BERT model)"),p3e.forEach(t),H8o=i(P),Xb=n(P,"LI",{});var _3e=s(Xb);Mne=n(_3e,"STRONG",{});var YHr=s(Mne);U8o=r(YHr,"big_bird"),YHr.forEach(t),J8o=r(_3e," \u2014 "),PD=n(_3e,"A",{href:!0});var KHr=s(PD);Y8o=r(KHr,"BigBirdForQuestionAnswering"),KHr.forEach(t),K8o=r(_3e," (BigBird model)"),_3e.forEach(t),Z8o=i(P),Vb=n(P,"LI",{});var u3e=s(Vb);Ene=n(u3e,"STRONG",{});var ZHr=s(Ene);e9o=r(ZHr,"bigbird_pegasus"),ZHr.forEach(t),o9o=r(u3e," \u2014 "),$D=n(u3e,"A",{href:!0});var eUr=s($D);r9o=r(eUr,"BigBirdPegasusForQuestionAnswering"),eUr.forEach(t),t9o=r(u3e," (BigBirdPegasus model)"),u3e.forEach(t),a9o=i(P),zb=n(P,"LI",{});var b3e=s(zb);yne=n(b3e,"STRONG",{});var oUr=s(yne);n9o=r(oUr,"camembert"),oUr.forEach(t),s9o=r(b3e," \u2014 "),ID=n(b3e,"A",{href:!0});var rUr=s(ID);l9o=r(rUr,"CamembertForQuestionAnswering"),rUr.forEach(t),i9o=r(b3e," (CamemBERT model)"),b3e.forEach(t),d9o=i(P),Wb=n(P,"LI",{});var v3e=s(Wb);wne=n(v3e,"STRONG",{});var tUr=s(wne);c9o=r(tUr,"canine"),tUr.forEach(t),f9o=r(v3e," \u2014 "),DD=n(v3e,"A",{href:!0});var aUr=s(DD);m9o=r(aUr,"CanineForQuestionAnswering"),aUr.forEach(t),g9o=r(v3e," (Canine model)"),v3e.forEach(t),h9o=i(P),Qb=n(P,"LI",{});var T3e=s(Qb);Ane=n(T3e,"STRONG",{});var nUr=s(Ane);p9o=r(nUr,"convbert"),nUr.forEach(t),_9o=r(T3e," \u2014 "),jD=n(T3e,"A",{href:!0});var sUr=s(jD);u9o=r(sUr,"ConvBertForQuestionAnswering"),sUr.forEach(t),b9o=r(T3e," (ConvBERT model)"),T3e.forEach(t),v9o=i(P),Hb=n(P,"LI",{});var F3e=s(Hb);Lne=n(F3e,"STRONG",{});var lUr=s(Lne);T9o=r(lUr,"data2vec-text"),lUr.forEach(t),F9o=r(F3e," \u2014 "),ND=n(F3e,"A",{href:!0});var iUr=s(ND);C9o=r(iUr,"Data2VecTextForQuestionAnswering"),iUr.forEach(t),M9o=r(F3e," (Data2VecText model)"),F3e.forEach(t),E9o=i(P),Ub=n(P,"LI",{});var C3e=s(Ub);Bne=n(C3e,"STRONG",{});var dUr=s(Bne);y9o=r(dUr,"deberta"),dUr.forEach(t),w9o=r(C3e," \u2014 "),qD=n(C3e,"A",{href:!0});var cUr=s(qD);A9o=r(cUr,"DebertaForQuestionAnswering"),cUr.forEach(t),L9o=r(C3e," (DeBERTa model)"),C3e.forEach(t),B9o=i(P),Jb=n(P,"LI",{});var M3e=s(Jb);xne=n(M3e,"STRONG",{});var fUr=s(xne);x9o=r(fUr,"deberta-v2"),fUr.forEach(t),k9o=r(M3e," \u2014 "),GD=n(M3e,"A",{href:!0});var mUr=s(GD);R9o=r(mUr,"DebertaV2ForQuestionAnswering"),mUr.forEach(t),S9o=r(M3e," (DeBERTa-v2 model)"),M3e.forEach(t),P9o=i(P),Yb=n(P,"LI",{});var E3e=s(Yb);kne=n(E3e,"STRONG",{});var gUr=s(kne);$9o=r(gUr,"distilbert"),gUr.forEach(t),I9o=r(E3e," \u2014 "),OD=n(E3e,"A",{href:!0});var hUr=s(OD);D9o=r(hUr,"DistilBertForQuestionAnswering"),hUr.forEach(t),j9o=r(E3e," (DistilBERT model)"),E3e.forEach(t),N9o=i(P),Kb=n(P,"LI",{});var y3e=s(Kb);Rne=n(y3e,"STRONG",{});var pUr=s(Rne);q9o=r(pUr,"electra"),pUr.forEach(t),G9o=r(y3e," \u2014 "),XD=n(y3e,"A",{href:!0});var _Ur=s(XD);O9o=r(_Ur,"ElectraForQuestionAnswering"),_Ur.forEach(t),X9o=r(y3e," (ELECTRA model)"),y3e.forEach(t),V9o=i(P),Zb=n(P,"LI",{});var w3e=s(Zb);Sne=n(w3e,"STRONG",{});var uUr=s(Sne);z9o=r(uUr,"flaubert"),uUr.forEach(t),W9o=r(w3e," \u2014 "),VD=n(w3e,"A",{href:!0});var bUr=s(VD);Q9o=r(bUr,"FlaubertForQuestionAnsweringSimple"),bUr.forEach(t),H9o=r(w3e," (FlauBERT model)"),w3e.forEach(t),U9o=i(P),e2=n(P,"LI",{});var A3e=s(e2);Pne=n(A3e,"STRONG",{});var vUr=s(Pne);J9o=r(vUr,"fnet"),vUr.forEach(t),Y9o=r(A3e," \u2014 "),zD=n(A3e,"A",{href:!0});var TUr=s(zD);K9o=r(TUr,"FNetForQuestionAnswering"),TUr.forEach(t),Z9o=r(A3e," (FNet model)"),A3e.forEach(t),eBo=i(P),o2=n(P,"LI",{});var L3e=s(o2);$ne=n(L3e,"STRONG",{});var FUr=s($ne);oBo=r(FUr,"funnel"),FUr.forEach(t),rBo=r(L3e," \u2014 "),WD=n(L3e,"A",{href:!0});var CUr=s(WD);tBo=r(CUr,"FunnelForQuestionAnswering"),CUr.forEach(t),aBo=r(L3e," (Funnel Transformer model)"),L3e.forEach(t),nBo=i(P),r2=n(P,"LI",{});var B3e=s(r2);Ine=n(B3e,"STRONG",{});var MUr=s(Ine);sBo=r(MUr,"gptj"),MUr.forEach(t),lBo=r(B3e," \u2014 "),QD=n(B3e,"A",{href:!0});var EUr=s(QD);iBo=r(EUr,"GPTJForQuestionAnswering"),EUr.forEach(t),dBo=r(B3e," (GPT-J model)"),B3e.forEach(t),cBo=i(P),t2=n(P,"LI",{});var x3e=s(t2);Dne=n(x3e,"STRONG",{});var yUr=s(Dne);fBo=r(yUr,"ibert"),yUr.forEach(t),mBo=r(x3e," \u2014 "),HD=n(x3e,"A",{href:!0});var wUr=s(HD);gBo=r(wUr,"IBertForQuestionAnswering"),wUr.forEach(t),hBo=r(x3e," (I-BERT model)"),x3e.forEach(t),pBo=i(P),a2=n(P,"LI",{});var k3e=s(a2);jne=n(k3e,"STRONG",{});var AUr=s(jne);_Bo=r(AUr,"layoutlmv2"),AUr.forEach(t),uBo=r(k3e," \u2014 "),UD=n(k3e,"A",{href:!0});var LUr=s(UD);bBo=r(LUr,"LayoutLMv2ForQuestionAnswering"),LUr.forEach(t),vBo=r(k3e," (LayoutLMv2 model)"),k3e.forEach(t),TBo=i(P),n2=n(P,"LI",{});var R3e=s(n2);Nne=n(R3e,"STRONG",{});var BUr=s(Nne);FBo=r(BUr,"led"),BUr.forEach(t),CBo=r(R3e," \u2014 "),JD=n(R3e,"A",{href:!0});var xUr=s(JD);MBo=r(xUr,"LEDForQuestionAnswering"),xUr.forEach(t),EBo=r(R3e," (LED model)"),R3e.forEach(t),yBo=i(P),s2=n(P,"LI",{});var S3e=s(s2);qne=n(S3e,"STRONG",{});var kUr=s(qne);wBo=r(kUr,"longformer"),kUr.forEach(t),ABo=r(S3e," \u2014 "),YD=n(S3e,"A",{href:!0});var RUr=s(YD);LBo=r(RUr,"LongformerForQuestionAnswering"),RUr.forEach(t),BBo=r(S3e," (Longformer model)"),S3e.forEach(t),xBo=i(P),l2=n(P,"LI",{});var P3e=s(l2);Gne=n(P3e,"STRONG",{});var SUr=s(Gne);kBo=r(SUr,"lxmert"),SUr.forEach(t),RBo=r(P3e," \u2014 "),KD=n(P3e,"A",{href:!0});var PUr=s(KD);SBo=r(PUr,"LxmertForQuestionAnswering"),PUr.forEach(t),PBo=r(P3e," (LXMERT model)"),P3e.forEach(t),$Bo=i(P),i2=n(P,"LI",{});var $3e=s(i2);One=n($3e,"STRONG",{});var $Ur=s(One);IBo=r($Ur,"mbart"),$Ur.forEach(t),DBo=r($3e," \u2014 "),ZD=n($3e,"A",{href:!0});var IUr=s(ZD);jBo=r(IUr,"MBartForQuestionAnswering"),IUr.forEach(t),NBo=r($3e," (mBART model)"),$3e.forEach(t),qBo=i(P),d2=n(P,"LI",{});var I3e=s(d2);Xne=n(I3e,"STRONG",{});var DUr=s(Xne);GBo=r(DUr,"megatron-bert"),DUr.forEach(t),OBo=r(I3e," \u2014 "),ej=n(I3e,"A",{href:!0});var jUr=s(ej);XBo=r(jUr,"MegatronBertForQuestionAnswering"),jUr.forEach(t),VBo=r(I3e," (MegatronBert model)"),I3e.forEach(t),zBo=i(P),c2=n(P,"LI",{});var D3e=s(c2);Vne=n(D3e,"STRONG",{});var NUr=s(Vne);WBo=r(NUr,"mobilebert"),NUr.forEach(t),QBo=r(D3e," \u2014 "),oj=n(D3e,"A",{href:!0});var qUr=s(oj);HBo=r(qUr,"MobileBertForQuestionAnswering"),qUr.forEach(t),UBo=r(D3e," (MobileBERT model)"),D3e.forEach(t),JBo=i(P),f2=n(P,"LI",{});var j3e=s(f2);zne=n(j3e,"STRONG",{});var GUr=s(zne);YBo=r(GUr,"mpnet"),GUr.forEach(t),KBo=r(j3e," \u2014 "),rj=n(j3e,"A",{href:!0});var OUr=s(rj);ZBo=r(OUr,"MPNetForQuestionAnswering"),OUr.forEach(t),exo=r(j3e," (MPNet model)"),j3e.forEach(t),oxo=i(P),m2=n(P,"LI",{});var N3e=s(m2);Wne=n(N3e,"STRONG",{});var XUr=s(Wne);rxo=r(XUr,"nystromformer"),XUr.forEach(t),txo=r(N3e," \u2014 "),tj=n(N3e,"A",{href:!0});var VUr=s(tj);axo=r(VUr,"NystromformerForQuestionAnswering"),VUr.forEach(t),nxo=r(N3e," (Nystromformer model)"),N3e.forEach(t),sxo=i(P),g2=n(P,"LI",{});var q3e=s(g2);Qne=n(q3e,"STRONG",{});var zUr=s(Qne);lxo=r(zUr,"qdqbert"),zUr.forEach(t),ixo=r(q3e," \u2014 "),aj=n(q3e,"A",{href:!0});var WUr=s(aj);dxo=r(WUr,"QDQBertForQuestionAnswering"),WUr.forEach(t),cxo=r(q3e," (QDQBert model)"),q3e.forEach(t),fxo=i(P),h2=n(P,"LI",{});var G3e=s(h2);Hne=n(G3e,"STRONG",{});var QUr=s(Hne);mxo=r(QUr,"reformer"),QUr.forEach(t),gxo=r(G3e," \u2014 "),nj=n(G3e,"A",{href:!0});var HUr=s(nj);hxo=r(HUr,"ReformerForQuestionAnswering"),HUr.forEach(t),pxo=r(G3e," (Reformer model)"),G3e.forEach(t),_xo=i(P),p2=n(P,"LI",{});var O3e=s(p2);Une=n(O3e,"STRONG",{});var UUr=s(Une);uxo=r(UUr,"rembert"),UUr.forEach(t),bxo=r(O3e," \u2014 "),sj=n(O3e,"A",{href:!0});var JUr=s(sj);vxo=r(JUr,"RemBertForQuestionAnswering"),JUr.forEach(t),Txo=r(O3e," (RemBERT model)"),O3e.forEach(t),Fxo=i(P),_2=n(P,"LI",{});var X3e=s(_2);Jne=n(X3e,"STRONG",{});var YUr=s(Jne);Cxo=r(YUr,"roberta"),YUr.forEach(t),Mxo=r(X3e," \u2014 "),lj=n(X3e,"A",{href:!0});var KUr=s(lj);Exo=r(KUr,"RobertaForQuestionAnswering"),KUr.forEach(t),yxo=r(X3e," (RoBERTa model)"),X3e.forEach(t),wxo=i(P),u2=n(P,"LI",{});var V3e=s(u2);Yne=n(V3e,"STRONG",{});var ZUr=s(Yne);Axo=r(ZUr,"roformer"),ZUr.forEach(t),Lxo=r(V3e," \u2014 "),ij=n(V3e,"A",{href:!0});var eJr=s(ij);Bxo=r(eJr,"RoFormerForQuestionAnswering"),eJr.forEach(t),xxo=r(V3e," (RoFormer model)"),V3e.forEach(t),kxo=i(P),b2=n(P,"LI",{});var z3e=s(b2);Kne=n(z3e,"STRONG",{});var oJr=s(Kne);Rxo=r(oJr,"splinter"),oJr.forEach(t),Sxo=r(z3e," \u2014 "),dj=n(z3e,"A",{href:!0});var rJr=s(dj);Pxo=r(rJr,"SplinterForQuestionAnswering"),rJr.forEach(t),$xo=r(z3e," (Splinter model)"),z3e.forEach(t),Ixo=i(P),v2=n(P,"LI",{});var W3e=s(v2);Zne=n(W3e,"STRONG",{});var tJr=s(Zne);Dxo=r(tJr,"squeezebert"),tJr.forEach(t),jxo=r(W3e," \u2014 "),cj=n(W3e,"A",{href:!0});var aJr=s(cj);Nxo=r(aJr,"SqueezeBertForQuestionAnswering"),aJr.forEach(t),qxo=r(W3e," (SqueezeBERT model)"),W3e.forEach(t),Gxo=i(P),T2=n(P,"LI",{});var Q3e=s(T2);ese=n(Q3e,"STRONG",{});var nJr=s(ese);Oxo=r(nJr,"xlm"),nJr.forEach(t),Xxo=r(Q3e," \u2014 "),fj=n(Q3e,"A",{href:!0});var sJr=s(fj);Vxo=r(sJr,"XLMForQuestionAnsweringSimple"),sJr.forEach(t),zxo=r(Q3e," (XLM model)"),Q3e.forEach(t),Wxo=i(P),F2=n(P,"LI",{});var H3e=s(F2);ose=n(H3e,"STRONG",{});var lJr=s(ose);Qxo=r(lJr,"xlm-roberta"),lJr.forEach(t),Hxo=r(H3e," \u2014 "),mj=n(H3e,"A",{href:!0});var iJr=s(mj);Uxo=r(iJr,"XLMRobertaForQuestionAnswering"),iJr.forEach(t),Jxo=r(H3e," (XLM-RoBERTa model)"),H3e.forEach(t),Yxo=i(P),C2=n(P,"LI",{});var U3e=s(C2);rse=n(U3e,"STRONG",{});var dJr=s(rse);Kxo=r(dJr,"xlm-roberta-xl"),dJr.forEach(t),Zxo=r(U3e," \u2014 "),gj=n(U3e,"A",{href:!0});var cJr=s(gj);eko=r(cJr,"XLMRobertaXLForQuestionAnswering"),cJr.forEach(t),oko=r(U3e," (XLM-RoBERTa-XL model)"),U3e.forEach(t),rko=i(P),M2=n(P,"LI",{});var J3e=s(M2);tse=n(J3e,"STRONG",{});var fJr=s(tse);tko=r(fJr,"xlnet"),fJr.forEach(t),ako=r(J3e," \u2014 "),hj=n(J3e,"A",{href:!0});var mJr=s(hj);nko=r(mJr,"XLNetForQuestionAnsweringSimple"),mJr.forEach(t),sko=r(J3e," (XLNet model)"),J3e.forEach(t),lko=i(P),E2=n(P,"LI",{});var Y3e=s(E2);ase=n(Y3e,"STRONG",{});var gJr=s(ase);iko=r(gJr,"yoso"),gJr.forEach(t),dko=r(Y3e," \u2014 "),pj=n(Y3e,"A",{href:!0});var hJr=s(pj);cko=r(hJr,"YosoForQuestionAnswering"),hJr.forEach(t),fko=r(Y3e," (YOSO model)"),Y3e.forEach(t),P.forEach(t),mko=i(Vt),y2=n(Vt,"P",{});var K3e=s(y2);gko=r(K3e,"The model is set in evaluation mode by default using "),nse=n(K3e,"CODE",{});var pJr=s(nse);hko=r(pJr,"model.eval()"),pJr.forEach(t),pko=r(K3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sse=n(K3e,"CODE",{});var _Jr=s(sse);_ko=r(_Jr,"model.train()"),_Jr.forEach(t),K3e.forEach(t),uko=i(Vt),lse=n(Vt,"P",{});var uJr=s(lse);bko=r(uJr,"Examples:"),uJr.forEach(t),vko=i(Vt),m(g3.$$.fragment,Vt),Vt.forEach(t),nl.forEach(t),O9e=i(d),bd=n(d,"H2",{class:!0});var Uxe=s(bd);w2=n(Uxe,"A",{id:!0,class:!0,href:!0});var bJr=s(w2);ise=n(bJr,"SPAN",{});var vJr=s(ise);m(h3.$$.fragment,vJr),vJr.forEach(t),bJr.forEach(t),Tko=i(Uxe),dse=n(Uxe,"SPAN",{});var TJr=s(dse);Fko=r(TJr,"AutoModelForTableQuestionAnswering"),TJr.forEach(t),Uxe.forEach(t),X9e=i(d),tr=n(d,"DIV",{class:!0});var ll=s(tr);m(p3.$$.fragment,ll),Cko=i(ll),vd=n(ll,"P",{});var VV=s(vd);Mko=r(VV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),cse=n(VV,"CODE",{});var FJr=s(cse);Eko=r(FJr,"from_pretrained()"),FJr.forEach(t),yko=r(VV,"class method or the "),fse=n(VV,"CODE",{});var CJr=s(fse);wko=r(CJr,"from_config()"),CJr.forEach(t),Ako=r(VV,`class
method.`),VV.forEach(t),Lko=i(ll),_3=n(ll,"P",{});var Jxe=s(_3);Bko=r(Jxe,"This class cannot be instantiated directly using "),mse=n(Jxe,"CODE",{});var MJr=s(mse);xko=r(MJr,"__init__()"),MJr.forEach(t),kko=r(Jxe," (throws an error)."),Jxe.forEach(t),Rko=i(ll),Jr=n(ll,"DIV",{class:!0});var il=s(Jr);m(u3.$$.fragment,il),Sko=i(il),gse=n(il,"P",{});var EJr=s(gse);Pko=r(EJr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),EJr.forEach(t),$ko=i(il),Td=n(il,"P",{});var zV=s(Td);Iko=r(zV,`Note:
Loading a model from its configuration file does `),hse=n(zV,"STRONG",{});var yJr=s(hse);Dko=r(yJr,"not"),yJr.forEach(t),jko=r(zV,` load the model weights. It only affects the
model\u2019s configuration. Use `),pse=n(zV,"CODE",{});var wJr=s(pse);Nko=r(wJr,"from_pretrained()"),wJr.forEach(t),qko=r(zV,"to load the model weights."),zV.forEach(t),Gko=i(il),_se=n(il,"P",{});var AJr=s(_se);Oko=r(AJr,"Examples:"),AJr.forEach(t),Xko=i(il),m(b3.$$.fragment,il),il.forEach(t),Vko=i(ll),Oe=n(ll,"DIV",{class:!0});var zt=s(Oe);m(v3.$$.fragment,zt),zko=i(zt),use=n(zt,"P",{});var LJr=s(use);Wko=r(LJr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),LJr.forEach(t),Qko=i(zt),Ua=n(zt,"P",{});var R4=s(Ua);Hko=r(R4,"The model class to instantiate is selected based on the "),bse=n(R4,"CODE",{});var BJr=s(bse);Uko=r(BJr,"model_type"),BJr.forEach(t),Jko=r(R4,` property of the config object (either
passed as an argument or loaded from `),vse=n(R4,"CODE",{});var xJr=s(vse);Yko=r(xJr,"pretrained_model_name_or_path"),xJr.forEach(t),Kko=r(R4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tse=n(R4,"CODE",{});var kJr=s(Tse);Zko=r(kJr,"pretrained_model_name_or_path"),kJr.forEach(t),eRo=r(R4,":"),R4.forEach(t),oRo=i(zt),Fse=n(zt,"UL",{});var RJr=s(Fse);A2=n(RJr,"LI",{});var Z3e=s(A2);Cse=n(Z3e,"STRONG",{});var SJr=s(Cse);rRo=r(SJr,"tapas"),SJr.forEach(t),tRo=r(Z3e," \u2014 "),_j=n(Z3e,"A",{href:!0});var PJr=s(_j);aRo=r(PJr,"TapasForQuestionAnswering"),PJr.forEach(t),nRo=r(Z3e," (TAPAS model)"),Z3e.forEach(t),RJr.forEach(t),sRo=i(zt),L2=n(zt,"P",{});var eye=s(L2);lRo=r(eye,"The model is set in evaluation mode by default using "),Mse=n(eye,"CODE",{});var $Jr=s(Mse);iRo=r($Jr,"model.eval()"),$Jr.forEach(t),dRo=r(eye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ese=n(eye,"CODE",{});var IJr=s(Ese);cRo=r(IJr,"model.train()"),IJr.forEach(t),eye.forEach(t),fRo=i(zt),yse=n(zt,"P",{});var DJr=s(yse);mRo=r(DJr,"Examples:"),DJr.forEach(t),gRo=i(zt),m(T3.$$.fragment,zt),zt.forEach(t),ll.forEach(t),V9e=i(d),Fd=n(d,"H2",{class:!0});var Yxe=s(Fd);B2=n(Yxe,"A",{id:!0,class:!0,href:!0});var jJr=s(B2);wse=n(jJr,"SPAN",{});var NJr=s(wse);m(F3.$$.fragment,NJr),NJr.forEach(t),jJr.forEach(t),hRo=i(Yxe),Ase=n(Yxe,"SPAN",{});var qJr=s(Ase);pRo=r(qJr,"AutoModelForImageClassification"),qJr.forEach(t),Yxe.forEach(t),z9e=i(d),ar=n(d,"DIV",{class:!0});var dl=s(ar);m(C3.$$.fragment,dl),_Ro=i(dl),Cd=n(dl,"P",{});var WV=s(Cd);uRo=r(WV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Lse=n(WV,"CODE",{});var GJr=s(Lse);bRo=r(GJr,"from_pretrained()"),GJr.forEach(t),vRo=r(WV,"class method or the "),Bse=n(WV,"CODE",{});var OJr=s(Bse);TRo=r(OJr,"from_config()"),OJr.forEach(t),FRo=r(WV,`class
method.`),WV.forEach(t),CRo=i(dl),M3=n(dl,"P",{});var Kxe=s(M3);MRo=r(Kxe,"This class cannot be instantiated directly using "),xse=n(Kxe,"CODE",{});var XJr=s(xse);ERo=r(XJr,"__init__()"),XJr.forEach(t),yRo=r(Kxe," (throws an error)."),Kxe.forEach(t),wRo=i(dl),Yr=n(dl,"DIV",{class:!0});var cl=s(Yr);m(E3.$$.fragment,cl),ARo=i(cl),kse=n(cl,"P",{});var VJr=s(kse);LRo=r(VJr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),VJr.forEach(t),BRo=i(cl),Md=n(cl,"P",{});var QV=s(Md);xRo=r(QV,`Note:
Loading a model from its configuration file does `),Rse=n(QV,"STRONG",{});var zJr=s(Rse);kRo=r(zJr,"not"),zJr.forEach(t),RRo=r(QV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sse=n(QV,"CODE",{});var WJr=s(Sse);SRo=r(WJr,"from_pretrained()"),WJr.forEach(t),PRo=r(QV,"to load the model weights."),QV.forEach(t),$Ro=i(cl),Pse=n(cl,"P",{});var QJr=s(Pse);IRo=r(QJr,"Examples:"),QJr.forEach(t),DRo=i(cl),m(y3.$$.fragment,cl),cl.forEach(t),jRo=i(dl),Xe=n(dl,"DIV",{class:!0});var Wt=s(Xe);m(w3.$$.fragment,Wt),NRo=i(Wt),$se=n(Wt,"P",{});var HJr=s($se);qRo=r(HJr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),HJr.forEach(t),GRo=i(Wt),Ja=n(Wt,"P",{});var S4=s(Ja);ORo=r(S4,"The model class to instantiate is selected based on the "),Ise=n(S4,"CODE",{});var UJr=s(Ise);XRo=r(UJr,"model_type"),UJr.forEach(t),VRo=r(S4,` property of the config object (either
passed as an argument or loaded from `),Dse=n(S4,"CODE",{});var JJr=s(Dse);zRo=r(JJr,"pretrained_model_name_or_path"),JJr.forEach(t),WRo=r(S4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jse=n(S4,"CODE",{});var YJr=s(jse);QRo=r(YJr,"pretrained_model_name_or_path"),YJr.forEach(t),HRo=r(S4,":"),S4.forEach(t),URo=i(Wt),be=n(Wt,"UL",{});var eo=s(be);x2=n(eo,"LI",{});var oye=s(x2);Nse=n(oye,"STRONG",{});var KJr=s(Nse);JRo=r(KJr,"beit"),KJr.forEach(t),YRo=r(oye," \u2014 "),uj=n(oye,"A",{href:!0});var ZJr=s(uj);KRo=r(ZJr,"BeitForImageClassification"),ZJr.forEach(t),ZRo=r(oye," (BEiT model)"),oye.forEach(t),eSo=i(eo),k2=n(eo,"LI",{});var rye=s(k2);qse=n(rye,"STRONG",{});var eYr=s(qse);oSo=r(eYr,"convnext"),eYr.forEach(t),rSo=r(rye," \u2014 "),bj=n(rye,"A",{href:!0});var oYr=s(bj);tSo=r(oYr,"ConvNextForImageClassification"),oYr.forEach(t),aSo=r(rye," (ConvNext model)"),rye.forEach(t),nSo=i(eo),Ps=n(eo,"LI",{});var e8=s(Ps);Gse=n(e8,"STRONG",{});var rYr=s(Gse);sSo=r(rYr,"deit"),rYr.forEach(t),lSo=r(e8," \u2014 "),vj=n(e8,"A",{href:!0});var tYr=s(vj);iSo=r(tYr,"DeiTForImageClassification"),tYr.forEach(t),dSo=r(e8," or "),Tj=n(e8,"A",{href:!0});var aYr=s(Tj);cSo=r(aYr,"DeiTForImageClassificationWithTeacher"),aYr.forEach(t),fSo=r(e8," (DeiT model)"),e8.forEach(t),mSo=i(eo),R2=n(eo,"LI",{});var tye=s(R2);Ose=n(tye,"STRONG",{});var nYr=s(Ose);gSo=r(nYr,"imagegpt"),nYr.forEach(t),hSo=r(tye," \u2014 "),Fj=n(tye,"A",{href:!0});var sYr=s(Fj);pSo=r(sYr,"ImageGPTForImageClassification"),sYr.forEach(t),_So=r(tye," (ImageGPT model)"),tye.forEach(t),uSo=i(eo),la=n(eo,"LI",{});var Mf=s(la);Xse=n(Mf,"STRONG",{});var lYr=s(Xse);bSo=r(lYr,"perceiver"),lYr.forEach(t),vSo=r(Mf," \u2014 "),Cj=n(Mf,"A",{href:!0});var iYr=s(Cj);TSo=r(iYr,"PerceiverForImageClassificationLearned"),iYr.forEach(t),FSo=r(Mf," or "),Mj=n(Mf,"A",{href:!0});var dYr=s(Mj);CSo=r(dYr,"PerceiverForImageClassificationFourier"),dYr.forEach(t),MSo=r(Mf," or "),Ej=n(Mf,"A",{href:!0});var cYr=s(Ej);ESo=r(cYr,"PerceiverForImageClassificationConvProcessing"),cYr.forEach(t),ySo=r(Mf," (Perceiver model)"),Mf.forEach(t),wSo=i(eo),S2=n(eo,"LI",{});var aye=s(S2);Vse=n(aye,"STRONG",{});var fYr=s(Vse);ASo=r(fYr,"poolformer"),fYr.forEach(t),LSo=r(aye," \u2014 "),yj=n(aye,"A",{href:!0});var mYr=s(yj);BSo=r(mYr,"PoolFormerForImageClassification"),mYr.forEach(t),xSo=r(aye," (PoolFormer model)"),aye.forEach(t),kSo=i(eo),P2=n(eo,"LI",{});var nye=s(P2);zse=n(nye,"STRONG",{});var gYr=s(zse);RSo=r(gYr,"segformer"),gYr.forEach(t),SSo=r(nye," \u2014 "),wj=n(nye,"A",{href:!0});var hYr=s(wj);PSo=r(hYr,"SegformerForImageClassification"),hYr.forEach(t),$So=r(nye," (SegFormer model)"),nye.forEach(t),ISo=i(eo),$2=n(eo,"LI",{});var sye=s($2);Wse=n(sye,"STRONG",{});var pYr=s(Wse);DSo=r(pYr,"swin"),pYr.forEach(t),jSo=r(sye," \u2014 "),Aj=n(sye,"A",{href:!0});var _Yr=s(Aj);NSo=r(_Yr,"SwinForImageClassification"),_Yr.forEach(t),qSo=r(sye," (Swin model)"),sye.forEach(t),GSo=i(eo),I2=n(eo,"LI",{});var lye=s(I2);Qse=n(lye,"STRONG",{});var uYr=s(Qse);OSo=r(uYr,"vit"),uYr.forEach(t),XSo=r(lye," \u2014 "),Lj=n(lye,"A",{href:!0});var bYr=s(Lj);VSo=r(bYr,"ViTForImageClassification"),bYr.forEach(t),zSo=r(lye," (ViT model)"),lye.forEach(t),eo.forEach(t),WSo=i(Wt),D2=n(Wt,"P",{});var iye=s(D2);QSo=r(iye,"The model is set in evaluation mode by default using "),Hse=n(iye,"CODE",{});var vYr=s(Hse);HSo=r(vYr,"model.eval()"),vYr.forEach(t),USo=r(iye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Use=n(iye,"CODE",{});var TYr=s(Use);JSo=r(TYr,"model.train()"),TYr.forEach(t),iye.forEach(t),YSo=i(Wt),Jse=n(Wt,"P",{});var FYr=s(Jse);KSo=r(FYr,"Examples:"),FYr.forEach(t),ZSo=i(Wt),m(A3.$$.fragment,Wt),Wt.forEach(t),dl.forEach(t),W9e=i(d),Ed=n(d,"H2",{class:!0});var Zxe=s(Ed);j2=n(Zxe,"A",{id:!0,class:!0,href:!0});var CYr=s(j2);Yse=n(CYr,"SPAN",{});var MYr=s(Yse);m(L3.$$.fragment,MYr),MYr.forEach(t),CYr.forEach(t),ePo=i(Zxe),Kse=n(Zxe,"SPAN",{});var EYr=s(Kse);oPo=r(EYr,"AutoModelForVision2Seq"),EYr.forEach(t),Zxe.forEach(t),Q9e=i(d),nr=n(d,"DIV",{class:!0});var fl=s(nr);m(B3.$$.fragment,fl),rPo=i(fl),yd=n(fl,"P",{});var HV=s(yd);tPo=r(HV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Zse=n(HV,"CODE",{});var yYr=s(Zse);aPo=r(yYr,"from_pretrained()"),yYr.forEach(t),nPo=r(HV,"class method or the "),ele=n(HV,"CODE",{});var wYr=s(ele);sPo=r(wYr,"from_config()"),wYr.forEach(t),lPo=r(HV,`class
method.`),HV.forEach(t),iPo=i(fl),x3=n(fl,"P",{});var eke=s(x3);dPo=r(eke,"This class cannot be instantiated directly using "),ole=n(eke,"CODE",{});var AYr=s(ole);cPo=r(AYr,"__init__()"),AYr.forEach(t),fPo=r(eke," (throws an error)."),eke.forEach(t),mPo=i(fl),Kr=n(fl,"DIV",{class:!0});var ml=s(Kr);m(k3.$$.fragment,ml),gPo=i(ml),rle=n(ml,"P",{});var LYr=s(rle);hPo=r(LYr,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),LYr.forEach(t),pPo=i(ml),wd=n(ml,"P",{});var UV=s(wd);_Po=r(UV,`Note:
Loading a model from its configuration file does `),tle=n(UV,"STRONG",{});var BYr=s(tle);uPo=r(BYr,"not"),BYr.forEach(t),bPo=r(UV,` load the model weights. It only affects the
model\u2019s configuration. Use `),ale=n(UV,"CODE",{});var xYr=s(ale);vPo=r(xYr,"from_pretrained()"),xYr.forEach(t),TPo=r(UV,"to load the model weights."),UV.forEach(t),FPo=i(ml),nle=n(ml,"P",{});var kYr=s(nle);CPo=r(kYr,"Examples:"),kYr.forEach(t),MPo=i(ml),m(R3.$$.fragment,ml),ml.forEach(t),EPo=i(fl),Ve=n(fl,"DIV",{class:!0});var Qt=s(Ve);m(S3.$$.fragment,Qt),yPo=i(Qt),sle=n(Qt,"P",{});var RYr=s(sle);wPo=r(RYr,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),RYr.forEach(t),APo=i(Qt),Ya=n(Qt,"P",{});var P4=s(Ya);LPo=r(P4,"The model class to instantiate is selected based on the "),lle=n(P4,"CODE",{});var SYr=s(lle);BPo=r(SYr,"model_type"),SYr.forEach(t),xPo=r(P4,` property of the config object (either
passed as an argument or loaded from `),ile=n(P4,"CODE",{});var PYr=s(ile);kPo=r(PYr,"pretrained_model_name_or_path"),PYr.forEach(t),RPo=r(P4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dle=n(P4,"CODE",{});var $Yr=s(dle);SPo=r($Yr,"pretrained_model_name_or_path"),$Yr.forEach(t),PPo=r(P4,":"),P4.forEach(t),$Po=i(Qt),cle=n(Qt,"UL",{});var IYr=s(cle);N2=n(IYr,"LI",{});var dye=s(N2);fle=n(dye,"STRONG",{});var DYr=s(fle);IPo=r(DYr,"vision-encoder-decoder"),DYr.forEach(t),DPo=r(dye," \u2014 "),Bj=n(dye,"A",{href:!0});var jYr=s(Bj);jPo=r(jYr,"VisionEncoderDecoderModel"),jYr.forEach(t),NPo=r(dye," (Vision Encoder decoder model)"),dye.forEach(t),IYr.forEach(t),qPo=i(Qt),q2=n(Qt,"P",{});var cye=s(q2);GPo=r(cye,"The model is set in evaluation mode by default using "),mle=n(cye,"CODE",{});var NYr=s(mle);OPo=r(NYr,"model.eval()"),NYr.forEach(t),XPo=r(cye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gle=n(cye,"CODE",{});var qYr=s(gle);VPo=r(qYr,"model.train()"),qYr.forEach(t),cye.forEach(t),zPo=i(Qt),hle=n(Qt,"P",{});var GYr=s(hle);WPo=r(GYr,"Examples:"),GYr.forEach(t),QPo=i(Qt),m(P3.$$.fragment,Qt),Qt.forEach(t),fl.forEach(t),H9e=i(d),Ad=n(d,"H2",{class:!0});var oke=s(Ad);G2=n(oke,"A",{id:!0,class:!0,href:!0});var OYr=s(G2);ple=n(OYr,"SPAN",{});var XYr=s(ple);m($3.$$.fragment,XYr),XYr.forEach(t),OYr.forEach(t),HPo=i(oke),_le=n(oke,"SPAN",{});var VYr=s(_le);UPo=r(VYr,"AutoModelForAudioClassification"),VYr.forEach(t),oke.forEach(t),U9e=i(d),sr=n(d,"DIV",{class:!0});var gl=s(sr);m(I3.$$.fragment,gl),JPo=i(gl),Ld=n(gl,"P",{});var JV=s(Ld);YPo=r(JV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),ule=n(JV,"CODE",{});var zYr=s(ule);KPo=r(zYr,"from_pretrained()"),zYr.forEach(t),ZPo=r(JV,"class method or the "),ble=n(JV,"CODE",{});var WYr=s(ble);e$o=r(WYr,"from_config()"),WYr.forEach(t),o$o=r(JV,`class
method.`),JV.forEach(t),r$o=i(gl),D3=n(gl,"P",{});var rke=s(D3);t$o=r(rke,"This class cannot be instantiated directly using "),vle=n(rke,"CODE",{});var QYr=s(vle);a$o=r(QYr,"__init__()"),QYr.forEach(t),n$o=r(rke," (throws an error)."),rke.forEach(t),s$o=i(gl),Zr=n(gl,"DIV",{class:!0});var hl=s(Zr);m(j3.$$.fragment,hl),l$o=i(hl),Tle=n(hl,"P",{});var HYr=s(Tle);i$o=r(HYr,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),HYr.forEach(t),d$o=i(hl),Bd=n(hl,"P",{});var YV=s(Bd);c$o=r(YV,`Note:
Loading a model from its configuration file does `),Fle=n(YV,"STRONG",{});var UYr=s(Fle);f$o=r(UYr,"not"),UYr.forEach(t),m$o=r(YV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cle=n(YV,"CODE",{});var JYr=s(Cle);g$o=r(JYr,"from_pretrained()"),JYr.forEach(t),h$o=r(YV,"to load the model weights."),YV.forEach(t),p$o=i(hl),Mle=n(hl,"P",{});var YYr=s(Mle);_$o=r(YYr,"Examples:"),YYr.forEach(t),u$o=i(hl),m(N3.$$.fragment,hl),hl.forEach(t),b$o=i(gl),ze=n(gl,"DIV",{class:!0});var Ht=s(ze);m(q3.$$.fragment,Ht),v$o=i(Ht),Ele=n(Ht,"P",{});var KYr=s(Ele);T$o=r(KYr,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),KYr.forEach(t),F$o=i(Ht),Ka=n(Ht,"P",{});var $4=s(Ka);C$o=r($4,"The model class to instantiate is selected based on the "),yle=n($4,"CODE",{});var ZYr=s(yle);M$o=r(ZYr,"model_type"),ZYr.forEach(t),E$o=r($4,` property of the config object (either
passed as an argument or loaded from `),wle=n($4,"CODE",{});var eKr=s(wle);y$o=r(eKr,"pretrained_model_name_or_path"),eKr.forEach(t),w$o=r($4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ale=n($4,"CODE",{});var oKr=s(Ale);A$o=r(oKr,"pretrained_model_name_or_path"),oKr.forEach(t),L$o=r($4,":"),$4.forEach(t),B$o=i(Ht),Ae=n(Ht,"UL",{});var No=s(Ae);O2=n(No,"LI",{});var fye=s(O2);Lle=n(fye,"STRONG",{});var rKr=s(Lle);x$o=r(rKr,"data2vec-audio"),rKr.forEach(t),k$o=r(fye," \u2014 "),xj=n(fye,"A",{href:!0});var tKr=s(xj);R$o=r(tKr,"Data2VecAudioForSequenceClassification"),tKr.forEach(t),S$o=r(fye," (Data2VecAudio model)"),fye.forEach(t),P$o=i(No),X2=n(No,"LI",{});var mye=s(X2);Ble=n(mye,"STRONG",{});var aKr=s(Ble);$$o=r(aKr,"hubert"),aKr.forEach(t),I$o=r(mye," \u2014 "),kj=n(mye,"A",{href:!0});var nKr=s(kj);D$o=r(nKr,"HubertForSequenceClassification"),nKr.forEach(t),j$o=r(mye," (Hubert model)"),mye.forEach(t),N$o=i(No),V2=n(No,"LI",{});var gye=s(V2);xle=n(gye,"STRONG",{});var sKr=s(xle);q$o=r(sKr,"sew"),sKr.forEach(t),G$o=r(gye," \u2014 "),Rj=n(gye,"A",{href:!0});var lKr=s(Rj);O$o=r(lKr,"SEWForSequenceClassification"),lKr.forEach(t),X$o=r(gye," (SEW model)"),gye.forEach(t),V$o=i(No),z2=n(No,"LI",{});var hye=s(z2);kle=n(hye,"STRONG",{});var iKr=s(kle);z$o=r(iKr,"sew-d"),iKr.forEach(t),W$o=r(hye," \u2014 "),Sj=n(hye,"A",{href:!0});var dKr=s(Sj);Q$o=r(dKr,"SEWDForSequenceClassification"),dKr.forEach(t),H$o=r(hye," (SEW-D model)"),hye.forEach(t),U$o=i(No),W2=n(No,"LI",{});var pye=s(W2);Rle=n(pye,"STRONG",{});var cKr=s(Rle);J$o=r(cKr,"unispeech"),cKr.forEach(t),Y$o=r(pye," \u2014 "),Pj=n(pye,"A",{href:!0});var fKr=s(Pj);K$o=r(fKr,"UniSpeechForSequenceClassification"),fKr.forEach(t),Z$o=r(pye," (UniSpeech model)"),pye.forEach(t),eIo=i(No),Q2=n(No,"LI",{});var _ye=s(Q2);Sle=n(_ye,"STRONG",{});var mKr=s(Sle);oIo=r(mKr,"unispeech-sat"),mKr.forEach(t),rIo=r(_ye," \u2014 "),$j=n(_ye,"A",{href:!0});var gKr=s($j);tIo=r(gKr,"UniSpeechSatForSequenceClassification"),gKr.forEach(t),aIo=r(_ye," (UniSpeechSat model)"),_ye.forEach(t),nIo=i(No),H2=n(No,"LI",{});var uye=s(H2);Ple=n(uye,"STRONG",{});var hKr=s(Ple);sIo=r(hKr,"wav2vec2"),hKr.forEach(t),lIo=r(uye," \u2014 "),Ij=n(uye,"A",{href:!0});var pKr=s(Ij);iIo=r(pKr,"Wav2Vec2ForSequenceClassification"),pKr.forEach(t),dIo=r(uye," (Wav2Vec2 model)"),uye.forEach(t),cIo=i(No),U2=n(No,"LI",{});var bye=s(U2);$le=n(bye,"STRONG",{});var _Kr=s($le);fIo=r(_Kr,"wavlm"),_Kr.forEach(t),mIo=r(bye," \u2014 "),Dj=n(bye,"A",{href:!0});var uKr=s(Dj);gIo=r(uKr,"WavLMForSequenceClassification"),uKr.forEach(t),hIo=r(bye," (WavLM model)"),bye.forEach(t),No.forEach(t),pIo=i(Ht),J2=n(Ht,"P",{});var vye=s(J2);_Io=r(vye,"The model is set in evaluation mode by default using "),Ile=n(vye,"CODE",{});var bKr=s(Ile);uIo=r(bKr,"model.eval()"),bKr.forEach(t),bIo=r(vye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dle=n(vye,"CODE",{});var vKr=s(Dle);vIo=r(vKr,"model.train()"),vKr.forEach(t),vye.forEach(t),TIo=i(Ht),jle=n(Ht,"P",{});var TKr=s(jle);FIo=r(TKr,"Examples:"),TKr.forEach(t),CIo=i(Ht),m(G3.$$.fragment,Ht),Ht.forEach(t),gl.forEach(t),J9e=i(d),xd=n(d,"H2",{class:!0});var tke=s(xd);Y2=n(tke,"A",{id:!0,class:!0,href:!0});var FKr=s(Y2);Nle=n(FKr,"SPAN",{});var CKr=s(Nle);m(O3.$$.fragment,CKr),CKr.forEach(t),FKr.forEach(t),MIo=i(tke),qle=n(tke,"SPAN",{});var MKr=s(qle);EIo=r(MKr,"AutoModelForAudioFrameClassification"),MKr.forEach(t),tke.forEach(t),Y9e=i(d),lr=n(d,"DIV",{class:!0});var pl=s(lr);m(X3.$$.fragment,pl),yIo=i(pl),kd=n(pl,"P",{});var KV=s(kd);wIo=r(KV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Gle=n(KV,"CODE",{});var EKr=s(Gle);AIo=r(EKr,"from_pretrained()"),EKr.forEach(t),LIo=r(KV,"class method or the "),Ole=n(KV,"CODE",{});var yKr=s(Ole);BIo=r(yKr,"from_config()"),yKr.forEach(t),xIo=r(KV,`class
method.`),KV.forEach(t),kIo=i(pl),V3=n(pl,"P",{});var ake=s(V3);RIo=r(ake,"This class cannot be instantiated directly using "),Xle=n(ake,"CODE",{});var wKr=s(Xle);SIo=r(wKr,"__init__()"),wKr.forEach(t),PIo=r(ake," (throws an error)."),ake.forEach(t),$Io=i(pl),et=n(pl,"DIV",{class:!0});var _l=s(et);m(z3.$$.fragment,_l),IIo=i(_l),Vle=n(_l,"P",{});var AKr=s(Vle);DIo=r(AKr,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),AKr.forEach(t),jIo=i(_l),Rd=n(_l,"P",{});var ZV=s(Rd);NIo=r(ZV,`Note:
Loading a model from its configuration file does `),zle=n(ZV,"STRONG",{});var LKr=s(zle);qIo=r(LKr,"not"),LKr.forEach(t),GIo=r(ZV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wle=n(ZV,"CODE",{});var BKr=s(Wle);OIo=r(BKr,"from_pretrained()"),BKr.forEach(t),XIo=r(ZV,"to load the model weights."),ZV.forEach(t),VIo=i(_l),Qle=n(_l,"P",{});var xKr=s(Qle);zIo=r(xKr,"Examples:"),xKr.forEach(t),WIo=i(_l),m(W3.$$.fragment,_l),_l.forEach(t),QIo=i(pl),We=n(pl,"DIV",{class:!0});var Ut=s(We);m(Q3.$$.fragment,Ut),HIo=i(Ut),Hle=n(Ut,"P",{});var kKr=s(Hle);UIo=r(kKr,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),kKr.forEach(t),JIo=i(Ut),Za=n(Ut,"P",{});var I4=s(Za);YIo=r(I4,"The model class to instantiate is selected based on the "),Ule=n(I4,"CODE",{});var RKr=s(Ule);KIo=r(RKr,"model_type"),RKr.forEach(t),ZIo=r(I4,` property of the config object (either
passed as an argument or loaded from `),Jle=n(I4,"CODE",{});var SKr=s(Jle);eDo=r(SKr,"pretrained_model_name_or_path"),SKr.forEach(t),oDo=r(I4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yle=n(I4,"CODE",{});var PKr=s(Yle);rDo=r(PKr,"pretrained_model_name_or_path"),PKr.forEach(t),tDo=r(I4,":"),I4.forEach(t),aDo=i(Ut),en=n(Ut,"UL",{});var D4=s(en);K2=n(D4,"LI",{});var Tye=s(K2);Kle=n(Tye,"STRONG",{});var $Kr=s(Kle);nDo=r($Kr,"data2vec-audio"),$Kr.forEach(t),sDo=r(Tye," \u2014 "),jj=n(Tye,"A",{href:!0});var IKr=s(jj);lDo=r(IKr,"Data2VecAudioForAudioFrameClassification"),IKr.forEach(t),iDo=r(Tye," (Data2VecAudio model)"),Tye.forEach(t),dDo=i(D4),Z2=n(D4,"LI",{});var Fye=s(Z2);Zle=n(Fye,"STRONG",{});var DKr=s(Zle);cDo=r(DKr,"unispeech-sat"),DKr.forEach(t),fDo=r(Fye," \u2014 "),Nj=n(Fye,"A",{href:!0});var jKr=s(Nj);mDo=r(jKr,"UniSpeechSatForAudioFrameClassification"),jKr.forEach(t),gDo=r(Fye," (UniSpeechSat model)"),Fye.forEach(t),hDo=i(D4),ev=n(D4,"LI",{});var Cye=s(ev);eie=n(Cye,"STRONG",{});var NKr=s(eie);pDo=r(NKr,"wav2vec2"),NKr.forEach(t),_Do=r(Cye," \u2014 "),qj=n(Cye,"A",{href:!0});var qKr=s(qj);uDo=r(qKr,"Wav2Vec2ForAudioFrameClassification"),qKr.forEach(t),bDo=r(Cye," (Wav2Vec2 model)"),Cye.forEach(t),vDo=i(D4),ov=n(D4,"LI",{});var Mye=s(ov);oie=n(Mye,"STRONG",{});var GKr=s(oie);TDo=r(GKr,"wavlm"),GKr.forEach(t),FDo=r(Mye," \u2014 "),Gj=n(Mye,"A",{href:!0});var OKr=s(Gj);CDo=r(OKr,"WavLMForAudioFrameClassification"),OKr.forEach(t),MDo=r(Mye," (WavLM model)"),Mye.forEach(t),D4.forEach(t),EDo=i(Ut),rv=n(Ut,"P",{});var Eye=s(rv);yDo=r(Eye,"The model is set in evaluation mode by default using "),rie=n(Eye,"CODE",{});var XKr=s(rie);wDo=r(XKr,"model.eval()"),XKr.forEach(t),ADo=r(Eye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tie=n(Eye,"CODE",{});var VKr=s(tie);LDo=r(VKr,"model.train()"),VKr.forEach(t),Eye.forEach(t),BDo=i(Ut),aie=n(Ut,"P",{});var zKr=s(aie);xDo=r(zKr,"Examples:"),zKr.forEach(t),kDo=i(Ut),m(H3.$$.fragment,Ut),Ut.forEach(t),pl.forEach(t),K9e=i(d),Sd=n(d,"H2",{class:!0});var nke=s(Sd);tv=n(nke,"A",{id:!0,class:!0,href:!0});var WKr=s(tv);nie=n(WKr,"SPAN",{});var QKr=s(nie);m(U3.$$.fragment,QKr),QKr.forEach(t),WKr.forEach(t),RDo=i(nke),sie=n(nke,"SPAN",{});var HKr=s(sie);SDo=r(HKr,"AutoModelForCTC"),HKr.forEach(t),nke.forEach(t),Z9e=i(d),ir=n(d,"DIV",{class:!0});var ul=s(ir);m(J3.$$.fragment,ul),PDo=i(ul),Pd=n(ul,"P",{});var ez=s(Pd);$Do=r(ez,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),lie=n(ez,"CODE",{});var UKr=s(lie);IDo=r(UKr,"from_pretrained()"),UKr.forEach(t),DDo=r(ez,"class method or the "),iie=n(ez,"CODE",{});var JKr=s(iie);jDo=r(JKr,"from_config()"),JKr.forEach(t),NDo=r(ez,`class
method.`),ez.forEach(t),qDo=i(ul),Y3=n(ul,"P",{});var ske=s(Y3);GDo=r(ske,"This class cannot be instantiated directly using "),die=n(ske,"CODE",{});var YKr=s(die);ODo=r(YKr,"__init__()"),YKr.forEach(t),XDo=r(ske," (throws an error)."),ske.forEach(t),VDo=i(ul),ot=n(ul,"DIV",{class:!0});var bl=s(ot);m(K3.$$.fragment,bl),zDo=i(bl),cie=n(bl,"P",{});var KKr=s(cie);WDo=r(KKr,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),KKr.forEach(t),QDo=i(bl),$d=n(bl,"P",{});var oz=s($d);HDo=r(oz,`Note:
Loading a model from its configuration file does `),fie=n(oz,"STRONG",{});var ZKr=s(fie);UDo=r(ZKr,"not"),ZKr.forEach(t),JDo=r(oz,` load the model weights. It only affects the
model\u2019s configuration. Use `),mie=n(oz,"CODE",{});var eZr=s(mie);YDo=r(eZr,"from_pretrained()"),eZr.forEach(t),KDo=r(oz,"to load the model weights."),oz.forEach(t),ZDo=i(bl),gie=n(bl,"P",{});var oZr=s(gie);ejo=r(oZr,"Examples:"),oZr.forEach(t),ojo=i(bl),m(Z3.$$.fragment,bl),bl.forEach(t),rjo=i(ul),Qe=n(ul,"DIV",{class:!0});var Jt=s(Qe);m(ey.$$.fragment,Jt),tjo=i(Jt),hie=n(Jt,"P",{});var rZr=s(hie);ajo=r(rZr,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),rZr.forEach(t),njo=i(Jt),on=n(Jt,"P",{});var j4=s(on);sjo=r(j4,"The model class to instantiate is selected based on the "),pie=n(j4,"CODE",{});var tZr=s(pie);ljo=r(tZr,"model_type"),tZr.forEach(t),ijo=r(j4,` property of the config object (either
passed as an argument or loaded from `),_ie=n(j4,"CODE",{});var aZr=s(_ie);djo=r(aZr,"pretrained_model_name_or_path"),aZr.forEach(t),cjo=r(j4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uie=n(j4,"CODE",{});var nZr=s(uie);fjo=r(nZr,"pretrained_model_name_or_path"),nZr.forEach(t),mjo=r(j4,":"),j4.forEach(t),gjo=i(Jt),Le=n(Jt,"UL",{});var qo=s(Le);av=n(qo,"LI",{});var yye=s(av);bie=n(yye,"STRONG",{});var sZr=s(bie);hjo=r(sZr,"data2vec-audio"),sZr.forEach(t),pjo=r(yye," \u2014 "),Oj=n(yye,"A",{href:!0});var lZr=s(Oj);_jo=r(lZr,"Data2VecAudioForCTC"),lZr.forEach(t),ujo=r(yye," (Data2VecAudio model)"),yye.forEach(t),bjo=i(qo),nv=n(qo,"LI",{});var wye=s(nv);vie=n(wye,"STRONG",{});var iZr=s(vie);vjo=r(iZr,"hubert"),iZr.forEach(t),Tjo=r(wye," \u2014 "),Xj=n(wye,"A",{href:!0});var dZr=s(Xj);Fjo=r(dZr,"HubertForCTC"),dZr.forEach(t),Cjo=r(wye," (Hubert model)"),wye.forEach(t),Mjo=i(qo),sv=n(qo,"LI",{});var Aye=s(sv);Tie=n(Aye,"STRONG",{});var cZr=s(Tie);Ejo=r(cZr,"sew"),cZr.forEach(t),yjo=r(Aye," \u2014 "),Vj=n(Aye,"A",{href:!0});var fZr=s(Vj);wjo=r(fZr,"SEWForCTC"),fZr.forEach(t),Ajo=r(Aye," (SEW model)"),Aye.forEach(t),Ljo=i(qo),lv=n(qo,"LI",{});var Lye=s(lv);Fie=n(Lye,"STRONG",{});var mZr=s(Fie);Bjo=r(mZr,"sew-d"),mZr.forEach(t),xjo=r(Lye," \u2014 "),zj=n(Lye,"A",{href:!0});var gZr=s(zj);kjo=r(gZr,"SEWDForCTC"),gZr.forEach(t),Rjo=r(Lye," (SEW-D model)"),Lye.forEach(t),Sjo=i(qo),iv=n(qo,"LI",{});var Bye=s(iv);Cie=n(Bye,"STRONG",{});var hZr=s(Cie);Pjo=r(hZr,"unispeech"),hZr.forEach(t),$jo=r(Bye," \u2014 "),Wj=n(Bye,"A",{href:!0});var pZr=s(Wj);Ijo=r(pZr,"UniSpeechForCTC"),pZr.forEach(t),Djo=r(Bye," (UniSpeech model)"),Bye.forEach(t),jjo=i(qo),dv=n(qo,"LI",{});var xye=s(dv);Mie=n(xye,"STRONG",{});var _Zr=s(Mie);Njo=r(_Zr,"unispeech-sat"),_Zr.forEach(t),qjo=r(xye," \u2014 "),Qj=n(xye,"A",{href:!0});var uZr=s(Qj);Gjo=r(uZr,"UniSpeechSatForCTC"),uZr.forEach(t),Ojo=r(xye," (UniSpeechSat model)"),xye.forEach(t),Xjo=i(qo),cv=n(qo,"LI",{});var kye=s(cv);Eie=n(kye,"STRONG",{});var bZr=s(Eie);Vjo=r(bZr,"wav2vec2"),bZr.forEach(t),zjo=r(kye," \u2014 "),Hj=n(kye,"A",{href:!0});var vZr=s(Hj);Wjo=r(vZr,"Wav2Vec2ForCTC"),vZr.forEach(t),Qjo=r(kye," (Wav2Vec2 model)"),kye.forEach(t),Hjo=i(qo),fv=n(qo,"LI",{});var Rye=s(fv);yie=n(Rye,"STRONG",{});var TZr=s(yie);Ujo=r(TZr,"wavlm"),TZr.forEach(t),Jjo=r(Rye," \u2014 "),Uj=n(Rye,"A",{href:!0});var FZr=s(Uj);Yjo=r(FZr,"WavLMForCTC"),FZr.forEach(t),Kjo=r(Rye," (WavLM model)"),Rye.forEach(t),qo.forEach(t),Zjo=i(Jt),mv=n(Jt,"P",{});var Sye=s(mv);eNo=r(Sye,"The model is set in evaluation mode by default using "),wie=n(Sye,"CODE",{});var CZr=s(wie);oNo=r(CZr,"model.eval()"),CZr.forEach(t),rNo=r(Sye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aie=n(Sye,"CODE",{});var MZr=s(Aie);tNo=r(MZr,"model.train()"),MZr.forEach(t),Sye.forEach(t),aNo=i(Jt),Lie=n(Jt,"P",{});var EZr=s(Lie);nNo=r(EZr,"Examples:"),EZr.forEach(t),sNo=i(Jt),m(oy.$$.fragment,Jt),Jt.forEach(t),ul.forEach(t),eBe=i(d),Id=n(d,"H2",{class:!0});var lke=s(Id);gv=n(lke,"A",{id:!0,class:!0,href:!0});var yZr=s(gv);Bie=n(yZr,"SPAN",{});var wZr=s(Bie);m(ry.$$.fragment,wZr),wZr.forEach(t),yZr.forEach(t),lNo=i(lke),xie=n(lke,"SPAN",{});var AZr=s(xie);iNo=r(AZr,"AutoModelForSpeechSeq2Seq"),AZr.forEach(t),lke.forEach(t),oBe=i(d),dr=n(d,"DIV",{class:!0});var vl=s(dr);m(ty.$$.fragment,vl),dNo=i(vl),Dd=n(vl,"P",{});var rz=s(Dd);cNo=r(rz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kie=n(rz,"CODE",{});var LZr=s(kie);fNo=r(LZr,"from_pretrained()"),LZr.forEach(t),mNo=r(rz,"class method or the "),Rie=n(rz,"CODE",{});var BZr=s(Rie);gNo=r(BZr,"from_config()"),BZr.forEach(t),hNo=r(rz,`class
method.`),rz.forEach(t),pNo=i(vl),ay=n(vl,"P",{});var ike=s(ay);_No=r(ike,"This class cannot be instantiated directly using "),Sie=n(ike,"CODE",{});var xZr=s(Sie);uNo=r(xZr,"__init__()"),xZr.forEach(t),bNo=r(ike," (throws an error)."),ike.forEach(t),vNo=i(vl),rt=n(vl,"DIV",{class:!0});var Tl=s(rt);m(ny.$$.fragment,Tl),TNo=i(Tl),Pie=n(Tl,"P",{});var kZr=s(Pie);FNo=r(kZr,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),kZr.forEach(t),CNo=i(Tl),jd=n(Tl,"P",{});var tz=s(jd);MNo=r(tz,`Note:
Loading a model from its configuration file does `),$ie=n(tz,"STRONG",{});var RZr=s($ie);ENo=r(RZr,"not"),RZr.forEach(t),yNo=r(tz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iie=n(tz,"CODE",{});var SZr=s(Iie);wNo=r(SZr,"from_pretrained()"),SZr.forEach(t),ANo=r(tz,"to load the model weights."),tz.forEach(t),LNo=i(Tl),Die=n(Tl,"P",{});var PZr=s(Die);BNo=r(PZr,"Examples:"),PZr.forEach(t),xNo=i(Tl),m(sy.$$.fragment,Tl),Tl.forEach(t),kNo=i(vl),He=n(vl,"DIV",{class:!0});var Yt=s(He);m(ly.$$.fragment,Yt),RNo=i(Yt),jie=n(Yt,"P",{});var $Zr=s(jie);SNo=r($Zr,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),$Zr.forEach(t),PNo=i(Yt),rn=n(Yt,"P",{});var N4=s(rn);$No=r(N4,"The model class to instantiate is selected based on the "),Nie=n(N4,"CODE",{});var IZr=s(Nie);INo=r(IZr,"model_type"),IZr.forEach(t),DNo=r(N4,` property of the config object (either
passed as an argument or loaded from `),qie=n(N4,"CODE",{});var DZr=s(qie);jNo=r(DZr,"pretrained_model_name_or_path"),DZr.forEach(t),NNo=r(N4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gie=n(N4,"CODE",{});var jZr=s(Gie);qNo=r(jZr,"pretrained_model_name_or_path"),jZr.forEach(t),GNo=r(N4,":"),N4.forEach(t),ONo=i(Yt),iy=n(Yt,"UL",{});var dke=s(iy);hv=n(dke,"LI",{});var Pye=s(hv);Oie=n(Pye,"STRONG",{});var NZr=s(Oie);XNo=r(NZr,"speech-encoder-decoder"),NZr.forEach(t),VNo=r(Pye," \u2014 "),Jj=n(Pye,"A",{href:!0});var qZr=s(Jj);zNo=r(qZr,"SpeechEncoderDecoderModel"),qZr.forEach(t),WNo=r(Pye," (Speech Encoder decoder model)"),Pye.forEach(t),QNo=i(dke),pv=n(dke,"LI",{});var $ye=s(pv);Xie=n($ye,"STRONG",{});var GZr=s(Xie);HNo=r(GZr,"speech_to_text"),GZr.forEach(t),UNo=r($ye," \u2014 "),Yj=n($ye,"A",{href:!0});var OZr=s(Yj);JNo=r(OZr,"Speech2TextForConditionalGeneration"),OZr.forEach(t),YNo=r($ye," (Speech2Text model)"),$ye.forEach(t),dke.forEach(t),KNo=i(Yt),_v=n(Yt,"P",{});var Iye=s(_v);ZNo=r(Iye,"The model is set in evaluation mode by default using "),Vie=n(Iye,"CODE",{});var XZr=s(Vie);eqo=r(XZr,"model.eval()"),XZr.forEach(t),oqo=r(Iye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zie=n(Iye,"CODE",{});var VZr=s(zie);rqo=r(VZr,"model.train()"),VZr.forEach(t),Iye.forEach(t),tqo=i(Yt),Wie=n(Yt,"P",{});var zZr=s(Wie);aqo=r(zZr,"Examples:"),zZr.forEach(t),nqo=i(Yt),m(dy.$$.fragment,Yt),Yt.forEach(t),vl.forEach(t),rBe=i(d),Nd=n(d,"H2",{class:!0});var cke=s(Nd);uv=n(cke,"A",{id:!0,class:!0,href:!0});var WZr=s(uv);Qie=n(WZr,"SPAN",{});var QZr=s(Qie);m(cy.$$.fragment,QZr),QZr.forEach(t),WZr.forEach(t),sqo=i(cke),Hie=n(cke,"SPAN",{});var HZr=s(Hie);lqo=r(HZr,"AutoModelForAudioXVector"),HZr.forEach(t),cke.forEach(t),tBe=i(d),cr=n(d,"DIV",{class:!0});var Fl=s(cr);m(fy.$$.fragment,Fl),iqo=i(Fl),qd=n(Fl,"P",{});var az=s(qd);dqo=r(az,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Uie=n(az,"CODE",{});var UZr=s(Uie);cqo=r(UZr,"from_pretrained()"),UZr.forEach(t),fqo=r(az,"class method or the "),Jie=n(az,"CODE",{});var JZr=s(Jie);mqo=r(JZr,"from_config()"),JZr.forEach(t),gqo=r(az,`class
method.`),az.forEach(t),hqo=i(Fl),my=n(Fl,"P",{});var fke=s(my);pqo=r(fke,"This class cannot be instantiated directly using "),Yie=n(fke,"CODE",{});var YZr=s(Yie);_qo=r(YZr,"__init__()"),YZr.forEach(t),uqo=r(fke," (throws an error)."),fke.forEach(t),bqo=i(Fl),tt=n(Fl,"DIV",{class:!0});var Cl=s(tt);m(gy.$$.fragment,Cl),vqo=i(Cl),Kie=n(Cl,"P",{});var KZr=s(Kie);Tqo=r(KZr,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),KZr.forEach(t),Fqo=i(Cl),Gd=n(Cl,"P",{});var nz=s(Gd);Cqo=r(nz,`Note:
Loading a model from its configuration file does `),Zie=n(nz,"STRONG",{});var ZZr=s(Zie);Mqo=r(ZZr,"not"),ZZr.forEach(t),Eqo=r(nz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ede=n(nz,"CODE",{});var eet=s(ede);yqo=r(eet,"from_pretrained()"),eet.forEach(t),wqo=r(nz,"to load the model weights."),nz.forEach(t),Aqo=i(Cl),ode=n(Cl,"P",{});var oet=s(ode);Lqo=r(oet,"Examples:"),oet.forEach(t),Bqo=i(Cl),m(hy.$$.fragment,Cl),Cl.forEach(t),xqo=i(Fl),Ue=n(Fl,"DIV",{class:!0});var Kt=s(Ue);m(py.$$.fragment,Kt),kqo=i(Kt),rde=n(Kt,"P",{});var ret=s(rde);Rqo=r(ret,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),ret.forEach(t),Sqo=i(Kt),tn=n(Kt,"P",{});var q4=s(tn);Pqo=r(q4,"The model class to instantiate is selected based on the "),tde=n(q4,"CODE",{});var tet=s(tde);$qo=r(tet,"model_type"),tet.forEach(t),Iqo=r(q4,` property of the config object (either
passed as an argument or loaded from `),ade=n(q4,"CODE",{});var aet=s(ade);Dqo=r(aet,"pretrained_model_name_or_path"),aet.forEach(t),jqo=r(q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nde=n(q4,"CODE",{});var net=s(nde);Nqo=r(net,"pretrained_model_name_or_path"),net.forEach(t),qqo=r(q4,":"),q4.forEach(t),Gqo=i(Kt),an=n(Kt,"UL",{});var G4=s(an);bv=n(G4,"LI",{});var Dye=s(bv);sde=n(Dye,"STRONG",{});var set=s(sde);Oqo=r(set,"data2vec-audio"),set.forEach(t),Xqo=r(Dye," \u2014 "),Kj=n(Dye,"A",{href:!0});var iet=s(Kj);Vqo=r(iet,"Data2VecAudioForXVector"),iet.forEach(t),zqo=r(Dye," (Data2VecAudio model)"),Dye.forEach(t),Wqo=i(G4),vv=n(G4,"LI",{});var jye=s(vv);lde=n(jye,"STRONG",{});var det=s(lde);Qqo=r(det,"unispeech-sat"),det.forEach(t),Hqo=r(jye," \u2014 "),Zj=n(jye,"A",{href:!0});var cet=s(Zj);Uqo=r(cet,"UniSpeechSatForXVector"),cet.forEach(t),Jqo=r(jye," (UniSpeechSat model)"),jye.forEach(t),Yqo=i(G4),Tv=n(G4,"LI",{});var Nye=s(Tv);ide=n(Nye,"STRONG",{});var fet=s(ide);Kqo=r(fet,"wav2vec2"),fet.forEach(t),Zqo=r(Nye," \u2014 "),eN=n(Nye,"A",{href:!0});var met=s(eN);eGo=r(met,"Wav2Vec2ForXVector"),met.forEach(t),oGo=r(Nye," (Wav2Vec2 model)"),Nye.forEach(t),rGo=i(G4),Fv=n(G4,"LI",{});var qye=s(Fv);dde=n(qye,"STRONG",{});var get=s(dde);tGo=r(get,"wavlm"),get.forEach(t),aGo=r(qye," \u2014 "),oN=n(qye,"A",{href:!0});var het=s(oN);nGo=r(het,"WavLMForXVector"),het.forEach(t),sGo=r(qye," (WavLM model)"),qye.forEach(t),G4.forEach(t),lGo=i(Kt),Cv=n(Kt,"P",{});var Gye=s(Cv);iGo=r(Gye,"The model is set in evaluation mode by default using "),cde=n(Gye,"CODE",{});var pet=s(cde);dGo=r(pet,"model.eval()"),pet.forEach(t),cGo=r(Gye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=n(Gye,"CODE",{});var _et=s(fde);fGo=r(_et,"model.train()"),_et.forEach(t),Gye.forEach(t),mGo=i(Kt),mde=n(Kt,"P",{});var uet=s(mde);gGo=r(uet,"Examples:"),uet.forEach(t),hGo=i(Kt),m(_y.$$.fragment,Kt),Kt.forEach(t),Fl.forEach(t),aBe=i(d),Od=n(d,"H2",{class:!0});var mke=s(Od);Mv=n(mke,"A",{id:!0,class:!0,href:!0});var bet=s(Mv);gde=n(bet,"SPAN",{});var vet=s(gde);m(uy.$$.fragment,vet),vet.forEach(t),bet.forEach(t),pGo=i(mke),hde=n(mke,"SPAN",{});var Tet=s(hde);_Go=r(Tet,"AutoModelForMaskedImageModeling"),Tet.forEach(t),mke.forEach(t),nBe=i(d),fr=n(d,"DIV",{class:!0});var Ml=s(fr);m(by.$$.fragment,Ml),uGo=i(Ml),Xd=n(Ml,"P",{});var sz=s(Xd);bGo=r(sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),pde=n(sz,"CODE",{});var Fet=s(pde);vGo=r(Fet,"from_pretrained()"),Fet.forEach(t),TGo=r(sz,"class method or the "),_de=n(sz,"CODE",{});var Cet=s(_de);FGo=r(Cet,"from_config()"),Cet.forEach(t),CGo=r(sz,`class
method.`),sz.forEach(t),MGo=i(Ml),vy=n(Ml,"P",{});var gke=s(vy);EGo=r(gke,"This class cannot be instantiated directly using "),ude=n(gke,"CODE",{});var Met=s(ude);yGo=r(Met,"__init__()"),Met.forEach(t),wGo=r(gke," (throws an error)."),gke.forEach(t),AGo=i(Ml),at=n(Ml,"DIV",{class:!0});var El=s(at);m(Ty.$$.fragment,El),LGo=i(El),bde=n(El,"P",{});var Eet=s(bde);BGo=r(Eet,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Eet.forEach(t),xGo=i(El),Vd=n(El,"P",{});var lz=s(Vd);kGo=r(lz,`Note:
Loading a model from its configuration file does `),vde=n(lz,"STRONG",{});var yet=s(vde);RGo=r(yet,"not"),yet.forEach(t),SGo=r(lz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tde=n(lz,"CODE",{});var wet=s(Tde);PGo=r(wet,"from_pretrained()"),wet.forEach(t),$Go=r(lz,"to load the model weights."),lz.forEach(t),IGo=i(El),Fde=n(El,"P",{});var Aet=s(Fde);DGo=r(Aet,"Examples:"),Aet.forEach(t),jGo=i(El),m(Fy.$$.fragment,El),El.forEach(t),NGo=i(Ml),Je=n(Ml,"DIV",{class:!0});var Zt=s(Je);m(Cy.$$.fragment,Zt),qGo=i(Zt),Cde=n(Zt,"P",{});var Let=s(Cde);GGo=r(Let,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Let.forEach(t),OGo=i(Zt),nn=n(Zt,"P",{});var O4=s(nn);XGo=r(O4,"The model class to instantiate is selected based on the "),Mde=n(O4,"CODE",{});var Bet=s(Mde);VGo=r(Bet,"model_type"),Bet.forEach(t),zGo=r(O4,` property of the config object (either
passed as an argument or loaded from `),Ede=n(O4,"CODE",{});var xet=s(Ede);WGo=r(xet,"pretrained_model_name_or_path"),xet.forEach(t),QGo=r(O4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=n(O4,"CODE",{});var ket=s(yde);HGo=r(ket,"pretrained_model_name_or_path"),ket.forEach(t),UGo=r(O4,":"),O4.forEach(t),JGo=i(Zt),zd=n(Zt,"UL",{});var iz=s(zd);Ev=n(iz,"LI",{});var Oye=s(Ev);wde=n(Oye,"STRONG",{});var Ret=s(wde);YGo=r(Ret,"deit"),Ret.forEach(t),KGo=r(Oye," \u2014 "),rN=n(Oye,"A",{href:!0});var Set=s(rN);ZGo=r(Set,"DeiTForMaskedImageModeling"),Set.forEach(t),eOo=r(Oye," (DeiT model)"),Oye.forEach(t),oOo=i(iz),yv=n(iz,"LI",{});var Xye=s(yv);Ade=n(Xye,"STRONG",{});var Pet=s(Ade);rOo=r(Pet,"swin"),Pet.forEach(t),tOo=r(Xye," \u2014 "),tN=n(Xye,"A",{href:!0});var $et=s(tN);aOo=r($et,"SwinForMaskedImageModeling"),$et.forEach(t),nOo=r(Xye," (Swin model)"),Xye.forEach(t),sOo=i(iz),wv=n(iz,"LI",{});var Vye=s(wv);Lde=n(Vye,"STRONG",{});var Iet=s(Lde);lOo=r(Iet,"vit"),Iet.forEach(t),iOo=r(Vye," \u2014 "),aN=n(Vye,"A",{href:!0});var Det=s(aN);dOo=r(Det,"ViTForMaskedImageModeling"),Det.forEach(t),cOo=r(Vye," (ViT model)"),Vye.forEach(t),iz.forEach(t),fOo=i(Zt),Av=n(Zt,"P",{});var zye=s(Av);mOo=r(zye,"The model is set in evaluation mode by default using "),Bde=n(zye,"CODE",{});var jet=s(Bde);gOo=r(jet,"model.eval()"),jet.forEach(t),hOo=r(zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xde=n(zye,"CODE",{});var Net=s(xde);pOo=r(Net,"model.train()"),Net.forEach(t),zye.forEach(t),_Oo=i(Zt),kde=n(Zt,"P",{});var qet=s(kde);uOo=r(qet,"Examples:"),qet.forEach(t),bOo=i(Zt),m(My.$$.fragment,Zt),Zt.forEach(t),Ml.forEach(t),sBe=i(d),Wd=n(d,"H2",{class:!0});var hke=s(Wd);Lv=n(hke,"A",{id:!0,class:!0,href:!0});var Get=s(Lv);Rde=n(Get,"SPAN",{});var Oet=s(Rde);m(Ey.$$.fragment,Oet),Oet.forEach(t),Get.forEach(t),vOo=i(hke),Sde=n(hke,"SPAN",{});var Xet=s(Sde);TOo=r(Xet,"AutoModelForObjectDetection"),Xet.forEach(t),hke.forEach(t),lBe=i(d),mr=n(d,"DIV",{class:!0});var yl=s(mr);m(yy.$$.fragment,yl),FOo=i(yl),Qd=n(yl,"P",{});var dz=s(Qd);COo=r(dz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Pde=n(dz,"CODE",{});var Vet=s(Pde);MOo=r(Vet,"from_pretrained()"),Vet.forEach(t),EOo=r(dz,"class method or the "),$de=n(dz,"CODE",{});var zet=s($de);yOo=r(zet,"from_config()"),zet.forEach(t),wOo=r(dz,`class
method.`),dz.forEach(t),AOo=i(yl),wy=n(yl,"P",{});var pke=s(wy);LOo=r(pke,"This class cannot be instantiated directly using "),Ide=n(pke,"CODE",{});var Wet=s(Ide);BOo=r(Wet,"__init__()"),Wet.forEach(t),xOo=r(pke," (throws an error)."),pke.forEach(t),kOo=i(yl),nt=n(yl,"DIV",{class:!0});var wl=s(nt);m(Ay.$$.fragment,wl),ROo=i(wl),Dde=n(wl,"P",{});var Qet=s(Dde);SOo=r(Qet,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Qet.forEach(t),POo=i(wl),Hd=n(wl,"P",{});var cz=s(Hd);$Oo=r(cz,`Note:
Loading a model from its configuration file does `),jde=n(cz,"STRONG",{});var Het=s(jde);IOo=r(Het,"not"),Het.forEach(t),DOo=r(cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nde=n(cz,"CODE",{});var Uet=s(Nde);jOo=r(Uet,"from_pretrained()"),Uet.forEach(t),NOo=r(cz,"to load the model weights."),cz.forEach(t),qOo=i(wl),qde=n(wl,"P",{});var Jet=s(qde);GOo=r(Jet,"Examples:"),Jet.forEach(t),OOo=i(wl),m(Ly.$$.fragment,wl),wl.forEach(t),XOo=i(yl),Ye=n(yl,"DIV",{class:!0});var ea=s(Ye);m(By.$$.fragment,ea),VOo=i(ea),Gde=n(ea,"P",{});var Yet=s(Gde);zOo=r(Yet,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Yet.forEach(t),WOo=i(ea),sn=n(ea,"P",{});var X4=s(sn);QOo=r(X4,"The model class to instantiate is selected based on the "),Ode=n(X4,"CODE",{});var Ket=s(Ode);HOo=r(Ket,"model_type"),Ket.forEach(t),UOo=r(X4,` property of the config object (either
passed as an argument or loaded from `),Xde=n(X4,"CODE",{});var Zet=s(Xde);JOo=r(Zet,"pretrained_model_name_or_path"),Zet.forEach(t),YOo=r(X4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vde=n(X4,"CODE",{});var eot=s(Vde);KOo=r(eot,"pretrained_model_name_or_path"),eot.forEach(t),ZOo=r(X4,":"),X4.forEach(t),eXo=i(ea),zde=n(ea,"UL",{});var oot=s(zde);Bv=n(oot,"LI",{});var Wye=s(Bv);Wde=n(Wye,"STRONG",{});var rot=s(Wde);oXo=r(rot,"detr"),rot.forEach(t),rXo=r(Wye," \u2014 "),nN=n(Wye,"A",{href:!0});var tot=s(nN);tXo=r(tot,"DetrForObjectDetection"),tot.forEach(t),aXo=r(Wye," (DETR model)"),Wye.forEach(t),oot.forEach(t),nXo=i(ea),xv=n(ea,"P",{});var Qye=s(xv);sXo=r(Qye,"The model is set in evaluation mode by default using "),Qde=n(Qye,"CODE",{});var aot=s(Qde);lXo=r(aot,"model.eval()"),aot.forEach(t),iXo=r(Qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hde=n(Qye,"CODE",{});var not=s(Hde);dXo=r(not,"model.train()"),not.forEach(t),Qye.forEach(t),cXo=i(ea),Ude=n(ea,"P",{});var sot=s(Ude);fXo=r(sot,"Examples:"),sot.forEach(t),mXo=i(ea),m(xy.$$.fragment,ea),ea.forEach(t),yl.forEach(t),iBe=i(d),Ud=n(d,"H2",{class:!0});var _ke=s(Ud);kv=n(_ke,"A",{id:!0,class:!0,href:!0});var lot=s(kv);Jde=n(lot,"SPAN",{});var iot=s(Jde);m(ky.$$.fragment,iot),iot.forEach(t),lot.forEach(t),gXo=i(_ke),Yde=n(_ke,"SPAN",{});var dot=s(Yde);hXo=r(dot,"AutoModelForImageSegmentation"),dot.forEach(t),_ke.forEach(t),dBe=i(d),gr=n(d,"DIV",{class:!0});var Al=s(gr);m(Ry.$$.fragment,Al),pXo=i(Al),Jd=n(Al,"P",{});var fz=s(Jd);_Xo=r(fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Kde=n(fz,"CODE",{});var cot=s(Kde);uXo=r(cot,"from_pretrained()"),cot.forEach(t),bXo=r(fz,"class method or the "),Zde=n(fz,"CODE",{});var fot=s(Zde);vXo=r(fot,"from_config()"),fot.forEach(t),TXo=r(fz,`class
method.`),fz.forEach(t),FXo=i(Al),Sy=n(Al,"P",{});var uke=s(Sy);CXo=r(uke,"This class cannot be instantiated directly using "),ece=n(uke,"CODE",{});var mot=s(ece);MXo=r(mot,"__init__()"),mot.forEach(t),EXo=r(uke," (throws an error)."),uke.forEach(t),yXo=i(Al),st=n(Al,"DIV",{class:!0});var Ll=s(st);m(Py.$$.fragment,Ll),wXo=i(Ll),oce=n(Ll,"P",{});var got=s(oce);AXo=r(got,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),got.forEach(t),LXo=i(Ll),Yd=n(Ll,"P",{});var mz=s(Yd);BXo=r(mz,`Note:
Loading a model from its configuration file does `),rce=n(mz,"STRONG",{});var hot=s(rce);xXo=r(hot,"not"),hot.forEach(t),kXo=r(mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),tce=n(mz,"CODE",{});var pot=s(tce);RXo=r(pot,"from_pretrained()"),pot.forEach(t),SXo=r(mz,"to load the model weights."),mz.forEach(t),PXo=i(Ll),ace=n(Ll,"P",{});var _ot=s(ace);$Xo=r(_ot,"Examples:"),_ot.forEach(t),IXo=i(Ll),m($y.$$.fragment,Ll),Ll.forEach(t),DXo=i(Al),Ke=n(Al,"DIV",{class:!0});var oa=s(Ke);m(Iy.$$.fragment,oa),jXo=i(oa),nce=n(oa,"P",{});var uot=s(nce);NXo=r(uot,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),uot.forEach(t),qXo=i(oa),ln=n(oa,"P",{});var V4=s(ln);GXo=r(V4,"The model class to instantiate is selected based on the "),sce=n(V4,"CODE",{});var bot=s(sce);OXo=r(bot,"model_type"),bot.forEach(t),XXo=r(V4,` property of the config object (either
passed as an argument or loaded from `),lce=n(V4,"CODE",{});var vot=s(lce);VXo=r(vot,"pretrained_model_name_or_path"),vot.forEach(t),zXo=r(V4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=n(V4,"CODE",{});var Tot=s(ice);WXo=r(Tot,"pretrained_model_name_or_path"),Tot.forEach(t),QXo=r(V4,":"),V4.forEach(t),HXo=i(oa),dce=n(oa,"UL",{});var Fot=s(dce);Rv=n(Fot,"LI",{});var Hye=s(Rv);cce=n(Hye,"STRONG",{});var Cot=s(cce);UXo=r(Cot,"detr"),Cot.forEach(t),JXo=r(Hye," \u2014 "),sN=n(Hye,"A",{href:!0});var Mot=s(sN);YXo=r(Mot,"DetrForSegmentation"),Mot.forEach(t),KXo=r(Hye," (DETR model)"),Hye.forEach(t),Fot.forEach(t),ZXo=i(oa),Sv=n(oa,"P",{});var Uye=s(Sv);eVo=r(Uye,"The model is set in evaluation mode by default using "),fce=n(Uye,"CODE",{});var Eot=s(fce);oVo=r(Eot,"model.eval()"),Eot.forEach(t),rVo=r(Uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mce=n(Uye,"CODE",{});var yot=s(mce);tVo=r(yot,"model.train()"),yot.forEach(t),Uye.forEach(t),aVo=i(oa),gce=n(oa,"P",{});var wot=s(gce);nVo=r(wot,"Examples:"),wot.forEach(t),sVo=i(oa),m(Dy.$$.fragment,oa),oa.forEach(t),Al.forEach(t),cBe=i(d),Kd=n(d,"H2",{class:!0});var bke=s(Kd);Pv=n(bke,"A",{id:!0,class:!0,href:!0});var Aot=s(Pv);hce=n(Aot,"SPAN",{});var Lot=s(hce);m(jy.$$.fragment,Lot),Lot.forEach(t),Aot.forEach(t),lVo=i(bke),pce=n(bke,"SPAN",{});var Bot=s(pce);iVo=r(Bot,"AutoModelForSemanticSegmentation"),Bot.forEach(t),bke.forEach(t),fBe=i(d),hr=n(d,"DIV",{class:!0});var Bl=s(hr);m(Ny.$$.fragment,Bl),dVo=i(Bl),Zd=n(Bl,"P",{});var gz=s(Zd);cVo=r(gz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),_ce=n(gz,"CODE",{});var xot=s(_ce);fVo=r(xot,"from_pretrained()"),xot.forEach(t),mVo=r(gz,"class method or the "),uce=n(gz,"CODE",{});var kot=s(uce);gVo=r(kot,"from_config()"),kot.forEach(t),hVo=r(gz,`class
method.`),gz.forEach(t),pVo=i(Bl),qy=n(Bl,"P",{});var vke=s(qy);_Vo=r(vke,"This class cannot be instantiated directly using "),bce=n(vke,"CODE",{});var Rot=s(bce);uVo=r(Rot,"__init__()"),Rot.forEach(t),bVo=r(vke," (throws an error)."),vke.forEach(t),vVo=i(Bl),lt=n(Bl,"DIV",{class:!0});var xl=s(lt);m(Gy.$$.fragment,xl),TVo=i(xl),vce=n(xl,"P",{});var Sot=s(vce);FVo=r(Sot,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Sot.forEach(t),CVo=i(xl),ec=n(xl,"P",{});var hz=s(ec);MVo=r(hz,`Note:
Loading a model from its configuration file does `),Tce=n(hz,"STRONG",{});var Pot=s(Tce);EVo=r(Pot,"not"),Pot.forEach(t),yVo=r(hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fce=n(hz,"CODE",{});var $ot=s(Fce);wVo=r($ot,"from_pretrained()"),$ot.forEach(t),AVo=r(hz,"to load the model weights."),hz.forEach(t),LVo=i(xl),Cce=n(xl,"P",{});var Iot=s(Cce);BVo=r(Iot,"Examples:"),Iot.forEach(t),xVo=i(xl),m(Oy.$$.fragment,xl),xl.forEach(t),kVo=i(Bl),Ze=n(Bl,"DIV",{class:!0});var ra=s(Ze);m(Xy.$$.fragment,ra),RVo=i(ra),Mce=n(ra,"P",{});var Dot=s(Mce);SVo=r(Dot,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Dot.forEach(t),PVo=i(ra),dn=n(ra,"P",{});var z4=s(dn);$Vo=r(z4,"The model class to instantiate is selected based on the "),Ece=n(z4,"CODE",{});var jot=s(Ece);IVo=r(jot,"model_type"),jot.forEach(t),DVo=r(z4,` property of the config object (either
passed as an argument or loaded from `),yce=n(z4,"CODE",{});var Not=s(yce);jVo=r(Not,"pretrained_model_name_or_path"),Not.forEach(t),NVo=r(z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wce=n(z4,"CODE",{});var qot=s(wce);qVo=r(qot,"pretrained_model_name_or_path"),qot.forEach(t),GVo=r(z4,":"),z4.forEach(t),OVo=i(ra),Vy=n(ra,"UL",{});var Tke=s(Vy);$v=n(Tke,"LI",{});var Jye=s($v);Ace=n(Jye,"STRONG",{});var Got=s(Ace);XVo=r(Got,"beit"),Got.forEach(t),VVo=r(Jye," \u2014 "),lN=n(Jye,"A",{href:!0});var Oot=s(lN);zVo=r(Oot,"BeitForSemanticSegmentation"),Oot.forEach(t),WVo=r(Jye," (BEiT model)"),Jye.forEach(t),QVo=i(Tke),Iv=n(Tke,"LI",{});var Yye=s(Iv);Lce=n(Yye,"STRONG",{});var Xot=s(Lce);HVo=r(Xot,"segformer"),Xot.forEach(t),UVo=r(Yye," \u2014 "),iN=n(Yye,"A",{href:!0});var Vot=s(iN);JVo=r(Vot,"SegformerForSemanticSegmentation"),Vot.forEach(t),YVo=r(Yye," (SegFormer model)"),Yye.forEach(t),Tke.forEach(t),KVo=i(ra),Dv=n(ra,"P",{});var Kye=s(Dv);ZVo=r(Kye,"The model is set in evaluation mode by default using "),Bce=n(Kye,"CODE",{});var zot=s(Bce);ezo=r(zot,"model.eval()"),zot.forEach(t),ozo=r(Kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xce=n(Kye,"CODE",{});var Wot=s(xce);rzo=r(Wot,"model.train()"),Wot.forEach(t),Kye.forEach(t),tzo=i(ra),kce=n(ra,"P",{});var Qot=s(kce);azo=r(Qot,"Examples:"),Qot.forEach(t),nzo=i(ra),m(zy.$$.fragment,ra),ra.forEach(t),Bl.forEach(t),mBe=i(d),oc=n(d,"H2",{class:!0});var Fke=s(oc);jv=n(Fke,"A",{id:!0,class:!0,href:!0});var Hot=s(jv);Rce=n(Hot,"SPAN",{});var Uot=s(Rce);m(Wy.$$.fragment,Uot),Uot.forEach(t),Hot.forEach(t),szo=i(Fke),Sce=n(Fke,"SPAN",{});var Jot=s(Sce);lzo=r(Jot,"TFAutoModel"),Jot.forEach(t),Fke.forEach(t),gBe=i(d),pr=n(d,"DIV",{class:!0});var kl=s(pr);m(Qy.$$.fragment,kl),izo=i(kl),rc=n(kl,"P",{});var pz=s(rc);dzo=r(pz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Pce=n(pz,"CODE",{});var Yot=s(Pce);czo=r(Yot,"from_pretrained()"),Yot.forEach(t),fzo=r(pz,"class method or the "),$ce=n(pz,"CODE",{});var Kot=s($ce);mzo=r(Kot,"from_config()"),Kot.forEach(t),gzo=r(pz,`class
method.`),pz.forEach(t),hzo=i(kl),Hy=n(kl,"P",{});var Cke=s(Hy);pzo=r(Cke,"This class cannot be instantiated directly using "),Ice=n(Cke,"CODE",{});var Zot=s(Ice);_zo=r(Zot,"__init__()"),Zot.forEach(t),uzo=r(Cke," (throws an error)."),Cke.forEach(t),bzo=i(kl),it=n(kl,"DIV",{class:!0});var Rl=s(it);m(Uy.$$.fragment,Rl),vzo=i(Rl),Dce=n(Rl,"P",{});var ert=s(Dce);Tzo=r(ert,"Instantiates one of the base model classes of the library from a configuration."),ert.forEach(t),Fzo=i(Rl),tc=n(Rl,"P",{});var _z=s(tc);Czo=r(_z,`Note:
Loading a model from its configuration file does `),jce=n(_z,"STRONG",{});var ort=s(jce);Mzo=r(ort,"not"),ort.forEach(t),Ezo=r(_z,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nce=n(_z,"CODE",{});var rrt=s(Nce);yzo=r(rrt,"from_pretrained()"),rrt.forEach(t),wzo=r(_z,"to load the model weights."),_z.forEach(t),Azo=i(Rl),qce=n(Rl,"P",{});var trt=s(qce);Lzo=r(trt,"Examples:"),trt.forEach(t),Bzo=i(Rl),m(Jy.$$.fragment,Rl),Rl.forEach(t),xzo=i(kl),go=n(kl,"DIV",{class:!0});var ca=s(go);m(Yy.$$.fragment,ca),kzo=i(ca),Gce=n(ca,"P",{});var art=s(Gce);Rzo=r(art,"Instantiate one of the base model classes of the library from a pretrained model."),art.forEach(t),Szo=i(ca),cn=n(ca,"P",{});var W4=s(cn);Pzo=r(W4,"The model class to instantiate is selected based on the "),Oce=n(W4,"CODE",{});var nrt=s(Oce);$zo=r(nrt,"model_type"),nrt.forEach(t),Izo=r(W4,` property of the config object (either
passed as an argument or loaded from `),Xce=n(W4,"CODE",{});var srt=s(Xce);Dzo=r(srt,"pretrained_model_name_or_path"),srt.forEach(t),jzo=r(W4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=n(W4,"CODE",{});var lrt=s(Vce);Nzo=r(lrt,"pretrained_model_name_or_path"),lrt.forEach(t),qzo=r(W4,":"),W4.forEach(t),Gzo=i(ca),B=n(ca,"UL",{});var x=s(B);Nv=n(x,"LI",{});var Zye=s(Nv);zce=n(Zye,"STRONG",{});var irt=s(zce);Ozo=r(irt,"albert"),irt.forEach(t),Xzo=r(Zye," \u2014 "),dN=n(Zye,"A",{href:!0});var drt=s(dN);Vzo=r(drt,"TFAlbertModel"),drt.forEach(t),zzo=r(Zye," (ALBERT model)"),Zye.forEach(t),Wzo=i(x),qv=n(x,"LI",{});var ewe=s(qv);Wce=n(ewe,"STRONG",{});var crt=s(Wce);Qzo=r(crt,"bart"),crt.forEach(t),Hzo=r(ewe," \u2014 "),cN=n(ewe,"A",{href:!0});var frt=s(cN);Uzo=r(frt,"TFBartModel"),frt.forEach(t),Jzo=r(ewe," (BART model)"),ewe.forEach(t),Yzo=i(x),Gv=n(x,"LI",{});var owe=s(Gv);Qce=n(owe,"STRONG",{});var mrt=s(Qce);Kzo=r(mrt,"bert"),mrt.forEach(t),Zzo=r(owe," \u2014 "),fN=n(owe,"A",{href:!0});var grt=s(fN);eWo=r(grt,"TFBertModel"),grt.forEach(t),oWo=r(owe," (BERT model)"),owe.forEach(t),rWo=i(x),Ov=n(x,"LI",{});var rwe=s(Ov);Hce=n(rwe,"STRONG",{});var hrt=s(Hce);tWo=r(hrt,"blenderbot"),hrt.forEach(t),aWo=r(rwe," \u2014 "),mN=n(rwe,"A",{href:!0});var prt=s(mN);nWo=r(prt,"TFBlenderbotModel"),prt.forEach(t),sWo=r(rwe," (Blenderbot model)"),rwe.forEach(t),lWo=i(x),Xv=n(x,"LI",{});var twe=s(Xv);Uce=n(twe,"STRONG",{});var _rt=s(Uce);iWo=r(_rt,"blenderbot-small"),_rt.forEach(t),dWo=r(twe," \u2014 "),gN=n(twe,"A",{href:!0});var urt=s(gN);cWo=r(urt,"TFBlenderbotSmallModel"),urt.forEach(t),fWo=r(twe," (BlenderbotSmall model)"),twe.forEach(t),mWo=i(x),Vv=n(x,"LI",{});var awe=s(Vv);Jce=n(awe,"STRONG",{});var brt=s(Jce);gWo=r(brt,"camembert"),brt.forEach(t),hWo=r(awe," \u2014 "),hN=n(awe,"A",{href:!0});var vrt=s(hN);pWo=r(vrt,"TFCamembertModel"),vrt.forEach(t),_Wo=r(awe," (CamemBERT model)"),awe.forEach(t),uWo=i(x),zv=n(x,"LI",{});var nwe=s(zv);Yce=n(nwe,"STRONG",{});var Trt=s(Yce);bWo=r(Trt,"clip"),Trt.forEach(t),vWo=r(nwe," \u2014 "),pN=n(nwe,"A",{href:!0});var Frt=s(pN);TWo=r(Frt,"TFCLIPModel"),Frt.forEach(t),FWo=r(nwe," (CLIP model)"),nwe.forEach(t),CWo=i(x),Wv=n(x,"LI",{});var swe=s(Wv);Kce=n(swe,"STRONG",{});var Crt=s(Kce);MWo=r(Crt,"convbert"),Crt.forEach(t),EWo=r(swe," \u2014 "),_N=n(swe,"A",{href:!0});var Mrt=s(_N);yWo=r(Mrt,"TFConvBertModel"),Mrt.forEach(t),wWo=r(swe," (ConvBERT model)"),swe.forEach(t),AWo=i(x),Qv=n(x,"LI",{});var lwe=s(Qv);Zce=n(lwe,"STRONG",{});var Ert=s(Zce);LWo=r(Ert,"ctrl"),Ert.forEach(t),BWo=r(lwe," \u2014 "),uN=n(lwe,"A",{href:!0});var yrt=s(uN);xWo=r(yrt,"TFCTRLModel"),yrt.forEach(t),kWo=r(lwe," (CTRL model)"),lwe.forEach(t),RWo=i(x),Hv=n(x,"LI",{});var iwe=s(Hv);efe=n(iwe,"STRONG",{});var wrt=s(efe);SWo=r(wrt,"deberta"),wrt.forEach(t),PWo=r(iwe," \u2014 "),bN=n(iwe,"A",{href:!0});var Art=s(bN);$Wo=r(Art,"TFDebertaModel"),Art.forEach(t),IWo=r(iwe," (DeBERTa model)"),iwe.forEach(t),DWo=i(x),Uv=n(x,"LI",{});var dwe=s(Uv);ofe=n(dwe,"STRONG",{});var Lrt=s(ofe);jWo=r(Lrt,"deberta-v2"),Lrt.forEach(t),NWo=r(dwe," \u2014 "),vN=n(dwe,"A",{href:!0});var Brt=s(vN);qWo=r(Brt,"TFDebertaV2Model"),Brt.forEach(t),GWo=r(dwe," (DeBERTa-v2 model)"),dwe.forEach(t),OWo=i(x),Jv=n(x,"LI",{});var cwe=s(Jv);rfe=n(cwe,"STRONG",{});var xrt=s(rfe);XWo=r(xrt,"distilbert"),xrt.forEach(t),VWo=r(cwe," \u2014 "),TN=n(cwe,"A",{href:!0});var krt=s(TN);zWo=r(krt,"TFDistilBertModel"),krt.forEach(t),WWo=r(cwe," (DistilBERT model)"),cwe.forEach(t),QWo=i(x),Yv=n(x,"LI",{});var fwe=s(Yv);tfe=n(fwe,"STRONG",{});var Rrt=s(tfe);HWo=r(Rrt,"dpr"),Rrt.forEach(t),UWo=r(fwe," \u2014 "),FN=n(fwe,"A",{href:!0});var Srt=s(FN);JWo=r(Srt,"TFDPRQuestionEncoder"),Srt.forEach(t),YWo=r(fwe," (DPR model)"),fwe.forEach(t),KWo=i(x),Kv=n(x,"LI",{});var mwe=s(Kv);afe=n(mwe,"STRONG",{});var Prt=s(afe);ZWo=r(Prt,"electra"),Prt.forEach(t),eQo=r(mwe," \u2014 "),CN=n(mwe,"A",{href:!0});var $rt=s(CN);oQo=r($rt,"TFElectraModel"),$rt.forEach(t),rQo=r(mwe," (ELECTRA model)"),mwe.forEach(t),tQo=i(x),Zv=n(x,"LI",{});var gwe=s(Zv);nfe=n(gwe,"STRONG",{});var Irt=s(nfe);aQo=r(Irt,"flaubert"),Irt.forEach(t),nQo=r(gwe," \u2014 "),MN=n(gwe,"A",{href:!0});var Drt=s(MN);sQo=r(Drt,"TFFlaubertModel"),Drt.forEach(t),lQo=r(gwe," (FlauBERT model)"),gwe.forEach(t),iQo=i(x),$s=n(x,"LI",{});var o8=s($s);sfe=n(o8,"STRONG",{});var jrt=s(sfe);dQo=r(jrt,"funnel"),jrt.forEach(t),cQo=r(o8," \u2014 "),EN=n(o8,"A",{href:!0});var Nrt=s(EN);fQo=r(Nrt,"TFFunnelModel"),Nrt.forEach(t),mQo=r(o8," or "),yN=n(o8,"A",{href:!0});var qrt=s(yN);gQo=r(qrt,"TFFunnelBaseModel"),qrt.forEach(t),hQo=r(o8," (Funnel Transformer model)"),o8.forEach(t),pQo=i(x),e0=n(x,"LI",{});var hwe=s(e0);lfe=n(hwe,"STRONG",{});var Grt=s(lfe);_Qo=r(Grt,"gpt2"),Grt.forEach(t),uQo=r(hwe," \u2014 "),wN=n(hwe,"A",{href:!0});var Ort=s(wN);bQo=r(Ort,"TFGPT2Model"),Ort.forEach(t),vQo=r(hwe," (OpenAI GPT-2 model)"),hwe.forEach(t),TQo=i(x),o0=n(x,"LI",{});var pwe=s(o0);ife=n(pwe,"STRONG",{});var Xrt=s(ife);FQo=r(Xrt,"hubert"),Xrt.forEach(t),CQo=r(pwe," \u2014 "),AN=n(pwe,"A",{href:!0});var Vrt=s(AN);MQo=r(Vrt,"TFHubertModel"),Vrt.forEach(t),EQo=r(pwe," (Hubert model)"),pwe.forEach(t),yQo=i(x),r0=n(x,"LI",{});var _we=s(r0);dfe=n(_we,"STRONG",{});var zrt=s(dfe);wQo=r(zrt,"layoutlm"),zrt.forEach(t),AQo=r(_we," \u2014 "),LN=n(_we,"A",{href:!0});var Wrt=s(LN);LQo=r(Wrt,"TFLayoutLMModel"),Wrt.forEach(t),BQo=r(_we," (LayoutLM model)"),_we.forEach(t),xQo=i(x),t0=n(x,"LI",{});var uwe=s(t0);cfe=n(uwe,"STRONG",{});var Qrt=s(cfe);kQo=r(Qrt,"led"),Qrt.forEach(t),RQo=r(uwe," \u2014 "),BN=n(uwe,"A",{href:!0});var Hrt=s(BN);SQo=r(Hrt,"TFLEDModel"),Hrt.forEach(t),PQo=r(uwe," (LED model)"),uwe.forEach(t),$Qo=i(x),a0=n(x,"LI",{});var bwe=s(a0);ffe=n(bwe,"STRONG",{});var Urt=s(ffe);IQo=r(Urt,"longformer"),Urt.forEach(t),DQo=r(bwe," \u2014 "),xN=n(bwe,"A",{href:!0});var Jrt=s(xN);jQo=r(Jrt,"TFLongformerModel"),Jrt.forEach(t),NQo=r(bwe," (Longformer model)"),bwe.forEach(t),qQo=i(x),n0=n(x,"LI",{});var vwe=s(n0);mfe=n(vwe,"STRONG",{});var Yrt=s(mfe);GQo=r(Yrt,"lxmert"),Yrt.forEach(t),OQo=r(vwe," \u2014 "),kN=n(vwe,"A",{href:!0});var Krt=s(kN);XQo=r(Krt,"TFLxmertModel"),Krt.forEach(t),VQo=r(vwe," (LXMERT model)"),vwe.forEach(t),zQo=i(x),s0=n(x,"LI",{});var Twe=s(s0);gfe=n(Twe,"STRONG",{});var Zrt=s(gfe);WQo=r(Zrt,"marian"),Zrt.forEach(t),QQo=r(Twe," \u2014 "),RN=n(Twe,"A",{href:!0});var ett=s(RN);HQo=r(ett,"TFMarianModel"),ett.forEach(t),UQo=r(Twe," (Marian model)"),Twe.forEach(t),JQo=i(x),l0=n(x,"LI",{});var Fwe=s(l0);hfe=n(Fwe,"STRONG",{});var ott=s(hfe);YQo=r(ott,"mbart"),ott.forEach(t),KQo=r(Fwe," \u2014 "),SN=n(Fwe,"A",{href:!0});var rtt=s(SN);ZQo=r(rtt,"TFMBartModel"),rtt.forEach(t),eHo=r(Fwe," (mBART model)"),Fwe.forEach(t),oHo=i(x),i0=n(x,"LI",{});var Cwe=s(i0);pfe=n(Cwe,"STRONG",{});var ttt=s(pfe);rHo=r(ttt,"mobilebert"),ttt.forEach(t),tHo=r(Cwe," \u2014 "),PN=n(Cwe,"A",{href:!0});var att=s(PN);aHo=r(att,"TFMobileBertModel"),att.forEach(t),nHo=r(Cwe," (MobileBERT model)"),Cwe.forEach(t),sHo=i(x),d0=n(x,"LI",{});var Mwe=s(d0);_fe=n(Mwe,"STRONG",{});var ntt=s(_fe);lHo=r(ntt,"mpnet"),ntt.forEach(t),iHo=r(Mwe," \u2014 "),$N=n(Mwe,"A",{href:!0});var stt=s($N);dHo=r(stt,"TFMPNetModel"),stt.forEach(t),cHo=r(Mwe," (MPNet model)"),Mwe.forEach(t),fHo=i(x),c0=n(x,"LI",{});var Ewe=s(c0);ufe=n(Ewe,"STRONG",{});var ltt=s(ufe);mHo=r(ltt,"mt5"),ltt.forEach(t),gHo=r(Ewe," \u2014 "),IN=n(Ewe,"A",{href:!0});var itt=s(IN);hHo=r(itt,"TFMT5Model"),itt.forEach(t),pHo=r(Ewe," (mT5 model)"),Ewe.forEach(t),_Ho=i(x),f0=n(x,"LI",{});var ywe=s(f0);bfe=n(ywe,"STRONG",{});var dtt=s(bfe);uHo=r(dtt,"openai-gpt"),dtt.forEach(t),bHo=r(ywe," \u2014 "),DN=n(ywe,"A",{href:!0});var ctt=s(DN);vHo=r(ctt,"TFOpenAIGPTModel"),ctt.forEach(t),THo=r(ywe," (OpenAI GPT model)"),ywe.forEach(t),FHo=i(x),m0=n(x,"LI",{});var wwe=s(m0);vfe=n(wwe,"STRONG",{});var ftt=s(vfe);CHo=r(ftt,"pegasus"),ftt.forEach(t),MHo=r(wwe," \u2014 "),jN=n(wwe,"A",{href:!0});var mtt=s(jN);EHo=r(mtt,"TFPegasusModel"),mtt.forEach(t),yHo=r(wwe," (Pegasus model)"),wwe.forEach(t),wHo=i(x),g0=n(x,"LI",{});var Awe=s(g0);Tfe=n(Awe,"STRONG",{});var gtt=s(Tfe);AHo=r(gtt,"rembert"),gtt.forEach(t),LHo=r(Awe," \u2014 "),NN=n(Awe,"A",{href:!0});var htt=s(NN);BHo=r(htt,"TFRemBertModel"),htt.forEach(t),xHo=r(Awe," (RemBERT model)"),Awe.forEach(t),kHo=i(x),h0=n(x,"LI",{});var Lwe=s(h0);Ffe=n(Lwe,"STRONG",{});var ptt=s(Ffe);RHo=r(ptt,"roberta"),ptt.forEach(t),SHo=r(Lwe," \u2014 "),qN=n(Lwe,"A",{href:!0});var _tt=s(qN);PHo=r(_tt,"TFRobertaModel"),_tt.forEach(t),$Ho=r(Lwe," (RoBERTa model)"),Lwe.forEach(t),IHo=i(x),p0=n(x,"LI",{});var Bwe=s(p0);Cfe=n(Bwe,"STRONG",{});var utt=s(Cfe);DHo=r(utt,"roformer"),utt.forEach(t),jHo=r(Bwe," \u2014 "),GN=n(Bwe,"A",{href:!0});var btt=s(GN);NHo=r(btt,"TFRoFormerModel"),btt.forEach(t),qHo=r(Bwe," (RoFormer model)"),Bwe.forEach(t),GHo=i(x),_0=n(x,"LI",{});var xwe=s(_0);Mfe=n(xwe,"STRONG",{});var vtt=s(Mfe);OHo=r(vtt,"speech_to_text"),vtt.forEach(t),XHo=r(xwe," \u2014 "),ON=n(xwe,"A",{href:!0});var Ttt=s(ON);VHo=r(Ttt,"TFSpeech2TextModel"),Ttt.forEach(t),zHo=r(xwe," (Speech2Text model)"),xwe.forEach(t),WHo=i(x),u0=n(x,"LI",{});var kwe=s(u0);Efe=n(kwe,"STRONG",{});var Ftt=s(Efe);QHo=r(Ftt,"t5"),Ftt.forEach(t),HHo=r(kwe," \u2014 "),XN=n(kwe,"A",{href:!0});var Ctt=s(XN);UHo=r(Ctt,"TFT5Model"),Ctt.forEach(t),JHo=r(kwe," (T5 model)"),kwe.forEach(t),YHo=i(x),b0=n(x,"LI",{});var Rwe=s(b0);yfe=n(Rwe,"STRONG",{});var Mtt=s(yfe);KHo=r(Mtt,"tapas"),Mtt.forEach(t),ZHo=r(Rwe," \u2014 "),VN=n(Rwe,"A",{href:!0});var Ett=s(VN);eUo=r(Ett,"TFTapasModel"),Ett.forEach(t),oUo=r(Rwe," (TAPAS model)"),Rwe.forEach(t),rUo=i(x),v0=n(x,"LI",{});var Swe=s(v0);wfe=n(Swe,"STRONG",{});var ytt=s(wfe);tUo=r(ytt,"transfo-xl"),ytt.forEach(t),aUo=r(Swe," \u2014 "),zN=n(Swe,"A",{href:!0});var wtt=s(zN);nUo=r(wtt,"TFTransfoXLModel"),wtt.forEach(t),sUo=r(Swe," (Transformer-XL model)"),Swe.forEach(t),lUo=i(x),T0=n(x,"LI",{});var Pwe=s(T0);Afe=n(Pwe,"STRONG",{});var Att=s(Afe);iUo=r(Att,"vit"),Att.forEach(t),dUo=r(Pwe," \u2014 "),WN=n(Pwe,"A",{href:!0});var Ltt=s(WN);cUo=r(Ltt,"TFViTModel"),Ltt.forEach(t),fUo=r(Pwe," (ViT model)"),Pwe.forEach(t),mUo=i(x),F0=n(x,"LI",{});var $we=s(F0);Lfe=n($we,"STRONG",{});var Btt=s(Lfe);gUo=r(Btt,"wav2vec2"),Btt.forEach(t),hUo=r($we," \u2014 "),QN=n($we,"A",{href:!0});var xtt=s(QN);pUo=r(xtt,"TFWav2Vec2Model"),xtt.forEach(t),_Uo=r($we," (Wav2Vec2 model)"),$we.forEach(t),uUo=i(x),C0=n(x,"LI",{});var Iwe=s(C0);Bfe=n(Iwe,"STRONG",{});var ktt=s(Bfe);bUo=r(ktt,"xlm"),ktt.forEach(t),vUo=r(Iwe," \u2014 "),HN=n(Iwe,"A",{href:!0});var Rtt=s(HN);TUo=r(Rtt,"TFXLMModel"),Rtt.forEach(t),FUo=r(Iwe," (XLM model)"),Iwe.forEach(t),CUo=i(x),M0=n(x,"LI",{});var Dwe=s(M0);xfe=n(Dwe,"STRONG",{});var Stt=s(xfe);MUo=r(Stt,"xlm-roberta"),Stt.forEach(t),EUo=r(Dwe," \u2014 "),UN=n(Dwe,"A",{href:!0});var Ptt=s(UN);yUo=r(Ptt,"TFXLMRobertaModel"),Ptt.forEach(t),wUo=r(Dwe," (XLM-RoBERTa model)"),Dwe.forEach(t),AUo=i(x),E0=n(x,"LI",{});var jwe=s(E0);kfe=n(jwe,"STRONG",{});var $tt=s(kfe);LUo=r($tt,"xlnet"),$tt.forEach(t),BUo=r(jwe," \u2014 "),JN=n(jwe,"A",{href:!0});var Itt=s(JN);xUo=r(Itt,"TFXLNetModel"),Itt.forEach(t),kUo=r(jwe," (XLNet model)"),jwe.forEach(t),x.forEach(t),RUo=i(ca),Rfe=n(ca,"P",{});var Dtt=s(Rfe);SUo=r(Dtt,"Examples:"),Dtt.forEach(t),PUo=i(ca),m(Ky.$$.fragment,ca),ca.forEach(t),kl.forEach(t),hBe=i(d),ac=n(d,"H2",{class:!0});var Mke=s(ac);y0=n(Mke,"A",{id:!0,class:!0,href:!0});var jtt=s(y0);Sfe=n(jtt,"SPAN",{});var Ntt=s(Sfe);m(Zy.$$.fragment,Ntt),Ntt.forEach(t),jtt.forEach(t),$Uo=i(Mke),Pfe=n(Mke,"SPAN",{});var qtt=s(Pfe);IUo=r(qtt,"TFAutoModelForPreTraining"),qtt.forEach(t),Mke.forEach(t),pBe=i(d),_r=n(d,"DIV",{class:!0});var Sl=s(_r);m(ew.$$.fragment,Sl),DUo=i(Sl),nc=n(Sl,"P",{});var uz=s(nc);jUo=r(uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),$fe=n(uz,"CODE",{});var Gtt=s($fe);NUo=r(Gtt,"from_pretrained()"),Gtt.forEach(t),qUo=r(uz,"class method or the "),Ife=n(uz,"CODE",{});var Ott=s(Ife);GUo=r(Ott,"from_config()"),Ott.forEach(t),OUo=r(uz,`class
method.`),uz.forEach(t),XUo=i(Sl),ow=n(Sl,"P",{});var Eke=s(ow);VUo=r(Eke,"This class cannot be instantiated directly using "),Dfe=n(Eke,"CODE",{});var Xtt=s(Dfe);zUo=r(Xtt,"__init__()"),Xtt.forEach(t),WUo=r(Eke," (throws an error)."),Eke.forEach(t),QUo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Pl=s(dt);m(rw.$$.fragment,Pl),HUo=i(Pl),jfe=n(Pl,"P",{});var Vtt=s(jfe);UUo=r(Vtt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Vtt.forEach(t),JUo=i(Pl),sc=n(Pl,"P",{});var bz=s(sc);YUo=r(bz,`Note:
Loading a model from its configuration file does `),Nfe=n(bz,"STRONG",{});var ztt=s(Nfe);KUo=r(ztt,"not"),ztt.forEach(t),ZUo=r(bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),qfe=n(bz,"CODE",{});var Wtt=s(qfe);eJo=r(Wtt,"from_pretrained()"),Wtt.forEach(t),oJo=r(bz,"to load the model weights."),bz.forEach(t),rJo=i(Pl),Gfe=n(Pl,"P",{});var Qtt=s(Gfe);tJo=r(Qtt,"Examples:"),Qtt.forEach(t),aJo=i(Pl),m(tw.$$.fragment,Pl),Pl.forEach(t),nJo=i(Sl),ho=n(Sl,"DIV",{class:!0});var fa=s(ho);m(aw.$$.fragment,fa),sJo=i(fa),Ofe=n(fa,"P",{});var Htt=s(Ofe);lJo=r(Htt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Htt.forEach(t),iJo=i(fa),fn=n(fa,"P",{});var Q4=s(fn);dJo=r(Q4,"The model class to instantiate is selected based on the "),Xfe=n(Q4,"CODE",{});var Utt=s(Xfe);cJo=r(Utt,"model_type"),Utt.forEach(t),fJo=r(Q4,` property of the config object (either
passed as an argument or loaded from `),Vfe=n(Q4,"CODE",{});var Jtt=s(Vfe);mJo=r(Jtt,"pretrained_model_name_or_path"),Jtt.forEach(t),gJo=r(Q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=n(Q4,"CODE",{});var Ytt=s(zfe);hJo=r(Ytt,"pretrained_model_name_or_path"),Ytt.forEach(t),pJo=r(Q4,":"),Q4.forEach(t),_Jo=i(fa),H=n(fa,"UL",{});var U=s(H);w0=n(U,"LI",{});var Nwe=s(w0);Wfe=n(Nwe,"STRONG",{});var Ktt=s(Wfe);uJo=r(Ktt,"albert"),Ktt.forEach(t),bJo=r(Nwe," \u2014 "),YN=n(Nwe,"A",{href:!0});var Ztt=s(YN);vJo=r(Ztt,"TFAlbertForPreTraining"),Ztt.forEach(t),TJo=r(Nwe," (ALBERT model)"),Nwe.forEach(t),FJo=i(U),A0=n(U,"LI",{});var qwe=s(A0);Qfe=n(qwe,"STRONG",{});var eat=s(Qfe);CJo=r(eat,"bart"),eat.forEach(t),MJo=r(qwe," \u2014 "),KN=n(qwe,"A",{href:!0});var oat=s(KN);EJo=r(oat,"TFBartForConditionalGeneration"),oat.forEach(t),yJo=r(qwe," (BART model)"),qwe.forEach(t),wJo=i(U),L0=n(U,"LI",{});var Gwe=s(L0);Hfe=n(Gwe,"STRONG",{});var rat=s(Hfe);AJo=r(rat,"bert"),rat.forEach(t),LJo=r(Gwe," \u2014 "),ZN=n(Gwe,"A",{href:!0});var tat=s(ZN);BJo=r(tat,"TFBertForPreTraining"),tat.forEach(t),xJo=r(Gwe," (BERT model)"),Gwe.forEach(t),kJo=i(U),B0=n(U,"LI",{});var Owe=s(B0);Ufe=n(Owe,"STRONG",{});var aat=s(Ufe);RJo=r(aat,"camembert"),aat.forEach(t),SJo=r(Owe," \u2014 "),eq=n(Owe,"A",{href:!0});var nat=s(eq);PJo=r(nat,"TFCamembertForMaskedLM"),nat.forEach(t),$Jo=r(Owe," (CamemBERT model)"),Owe.forEach(t),IJo=i(U),x0=n(U,"LI",{});var Xwe=s(x0);Jfe=n(Xwe,"STRONG",{});var sat=s(Jfe);DJo=r(sat,"ctrl"),sat.forEach(t),jJo=r(Xwe," \u2014 "),oq=n(Xwe,"A",{href:!0});var lat=s(oq);NJo=r(lat,"TFCTRLLMHeadModel"),lat.forEach(t),qJo=r(Xwe," (CTRL model)"),Xwe.forEach(t),GJo=i(U),k0=n(U,"LI",{});var Vwe=s(k0);Yfe=n(Vwe,"STRONG",{});var iat=s(Yfe);OJo=r(iat,"distilbert"),iat.forEach(t),XJo=r(Vwe," \u2014 "),rq=n(Vwe,"A",{href:!0});var dat=s(rq);VJo=r(dat,"TFDistilBertForMaskedLM"),dat.forEach(t),zJo=r(Vwe," (DistilBERT model)"),Vwe.forEach(t),WJo=i(U),R0=n(U,"LI",{});var zwe=s(R0);Kfe=n(zwe,"STRONG",{});var cat=s(Kfe);QJo=r(cat,"electra"),cat.forEach(t),HJo=r(zwe," \u2014 "),tq=n(zwe,"A",{href:!0});var fat=s(tq);UJo=r(fat,"TFElectraForPreTraining"),fat.forEach(t),JJo=r(zwe," (ELECTRA model)"),zwe.forEach(t),YJo=i(U),S0=n(U,"LI",{});var Wwe=s(S0);Zfe=n(Wwe,"STRONG",{});var mat=s(Zfe);KJo=r(mat,"flaubert"),mat.forEach(t),ZJo=r(Wwe," \u2014 "),aq=n(Wwe,"A",{href:!0});var gat=s(aq);eYo=r(gat,"TFFlaubertWithLMHeadModel"),gat.forEach(t),oYo=r(Wwe," (FlauBERT model)"),Wwe.forEach(t),rYo=i(U),P0=n(U,"LI",{});var Qwe=s(P0);eme=n(Qwe,"STRONG",{});var hat=s(eme);tYo=r(hat,"funnel"),hat.forEach(t),aYo=r(Qwe," \u2014 "),nq=n(Qwe,"A",{href:!0});var pat=s(nq);nYo=r(pat,"TFFunnelForPreTraining"),pat.forEach(t),sYo=r(Qwe," (Funnel Transformer model)"),Qwe.forEach(t),lYo=i(U),$0=n(U,"LI",{});var Hwe=s($0);ome=n(Hwe,"STRONG",{});var _at=s(ome);iYo=r(_at,"gpt2"),_at.forEach(t),dYo=r(Hwe," \u2014 "),sq=n(Hwe,"A",{href:!0});var uat=s(sq);cYo=r(uat,"TFGPT2LMHeadModel"),uat.forEach(t),fYo=r(Hwe," (OpenAI GPT-2 model)"),Hwe.forEach(t),mYo=i(U),I0=n(U,"LI",{});var Uwe=s(I0);rme=n(Uwe,"STRONG",{});var bat=s(rme);gYo=r(bat,"layoutlm"),bat.forEach(t),hYo=r(Uwe," \u2014 "),lq=n(Uwe,"A",{href:!0});var vat=s(lq);pYo=r(vat,"TFLayoutLMForMaskedLM"),vat.forEach(t),_Yo=r(Uwe," (LayoutLM model)"),Uwe.forEach(t),uYo=i(U),D0=n(U,"LI",{});var Jwe=s(D0);tme=n(Jwe,"STRONG",{});var Tat=s(tme);bYo=r(Tat,"lxmert"),Tat.forEach(t),vYo=r(Jwe," \u2014 "),iq=n(Jwe,"A",{href:!0});var Fat=s(iq);TYo=r(Fat,"TFLxmertForPreTraining"),Fat.forEach(t),FYo=r(Jwe," (LXMERT model)"),Jwe.forEach(t),CYo=i(U),j0=n(U,"LI",{});var Ywe=s(j0);ame=n(Ywe,"STRONG",{});var Cat=s(ame);MYo=r(Cat,"mobilebert"),Cat.forEach(t),EYo=r(Ywe," \u2014 "),dq=n(Ywe,"A",{href:!0});var Mat=s(dq);yYo=r(Mat,"TFMobileBertForPreTraining"),Mat.forEach(t),wYo=r(Ywe," (MobileBERT model)"),Ywe.forEach(t),AYo=i(U),N0=n(U,"LI",{});var Kwe=s(N0);nme=n(Kwe,"STRONG",{});var Eat=s(nme);LYo=r(Eat,"mpnet"),Eat.forEach(t),BYo=r(Kwe," \u2014 "),cq=n(Kwe,"A",{href:!0});var yat=s(cq);xYo=r(yat,"TFMPNetForMaskedLM"),yat.forEach(t),kYo=r(Kwe," (MPNet model)"),Kwe.forEach(t),RYo=i(U),q0=n(U,"LI",{});var Zwe=s(q0);sme=n(Zwe,"STRONG",{});var wat=s(sme);SYo=r(wat,"openai-gpt"),wat.forEach(t),PYo=r(Zwe," \u2014 "),fq=n(Zwe,"A",{href:!0});var Aat=s(fq);$Yo=r(Aat,"TFOpenAIGPTLMHeadModel"),Aat.forEach(t),IYo=r(Zwe," (OpenAI GPT model)"),Zwe.forEach(t),DYo=i(U),G0=n(U,"LI",{});var e6e=s(G0);lme=n(e6e,"STRONG",{});var Lat=s(lme);jYo=r(Lat,"roberta"),Lat.forEach(t),NYo=r(e6e," \u2014 "),mq=n(e6e,"A",{href:!0});var Bat=s(mq);qYo=r(Bat,"TFRobertaForMaskedLM"),Bat.forEach(t),GYo=r(e6e," (RoBERTa model)"),e6e.forEach(t),OYo=i(U),O0=n(U,"LI",{});var o6e=s(O0);ime=n(o6e,"STRONG",{});var xat=s(ime);XYo=r(xat,"t5"),xat.forEach(t),VYo=r(o6e," \u2014 "),gq=n(o6e,"A",{href:!0});var kat=s(gq);zYo=r(kat,"TFT5ForConditionalGeneration"),kat.forEach(t),WYo=r(o6e," (T5 model)"),o6e.forEach(t),QYo=i(U),X0=n(U,"LI",{});var r6e=s(X0);dme=n(r6e,"STRONG",{});var Rat=s(dme);HYo=r(Rat,"tapas"),Rat.forEach(t),UYo=r(r6e," \u2014 "),hq=n(r6e,"A",{href:!0});var Sat=s(hq);JYo=r(Sat,"TFTapasForMaskedLM"),Sat.forEach(t),YYo=r(r6e," (TAPAS model)"),r6e.forEach(t),KYo=i(U),V0=n(U,"LI",{});var t6e=s(V0);cme=n(t6e,"STRONG",{});var Pat=s(cme);ZYo=r(Pat,"transfo-xl"),Pat.forEach(t),eKo=r(t6e," \u2014 "),pq=n(t6e,"A",{href:!0});var $at=s(pq);oKo=r($at,"TFTransfoXLLMHeadModel"),$at.forEach(t),rKo=r(t6e," (Transformer-XL model)"),t6e.forEach(t),tKo=i(U),z0=n(U,"LI",{});var a6e=s(z0);fme=n(a6e,"STRONG",{});var Iat=s(fme);aKo=r(Iat,"xlm"),Iat.forEach(t),nKo=r(a6e," \u2014 "),_q=n(a6e,"A",{href:!0});var Dat=s(_q);sKo=r(Dat,"TFXLMWithLMHeadModel"),Dat.forEach(t),lKo=r(a6e," (XLM model)"),a6e.forEach(t),iKo=i(U),W0=n(U,"LI",{});var n6e=s(W0);mme=n(n6e,"STRONG",{});var jat=s(mme);dKo=r(jat,"xlm-roberta"),jat.forEach(t),cKo=r(n6e," \u2014 "),uq=n(n6e,"A",{href:!0});var Nat=s(uq);fKo=r(Nat,"TFXLMRobertaForMaskedLM"),Nat.forEach(t),mKo=r(n6e," (XLM-RoBERTa model)"),n6e.forEach(t),gKo=i(U),Q0=n(U,"LI",{});var s6e=s(Q0);gme=n(s6e,"STRONG",{});var qat=s(gme);hKo=r(qat,"xlnet"),qat.forEach(t),pKo=r(s6e," \u2014 "),bq=n(s6e,"A",{href:!0});var Gat=s(bq);_Ko=r(Gat,"TFXLNetLMHeadModel"),Gat.forEach(t),uKo=r(s6e," (XLNet model)"),s6e.forEach(t),U.forEach(t),bKo=i(fa),hme=n(fa,"P",{});var Oat=s(hme);vKo=r(Oat,"Examples:"),Oat.forEach(t),TKo=i(fa),m(nw.$$.fragment,fa),fa.forEach(t),Sl.forEach(t),_Be=i(d),lc=n(d,"H2",{class:!0});var yke=s(lc);H0=n(yke,"A",{id:!0,class:!0,href:!0});var Xat=s(H0);pme=n(Xat,"SPAN",{});var Vat=s(pme);m(sw.$$.fragment,Vat),Vat.forEach(t),Xat.forEach(t),FKo=i(yke),_me=n(yke,"SPAN",{});var zat=s(_me);CKo=r(zat,"TFAutoModelForCausalLM"),zat.forEach(t),yke.forEach(t),uBe=i(d),ur=n(d,"DIV",{class:!0});var $l=s(ur);m(lw.$$.fragment,$l),MKo=i($l),ic=n($l,"P",{});var vz=s(ic);EKo=r(vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ume=n(vz,"CODE",{});var Wat=s(ume);yKo=r(Wat,"from_pretrained()"),Wat.forEach(t),wKo=r(vz,"class method or the "),bme=n(vz,"CODE",{});var Qat=s(bme);AKo=r(Qat,"from_config()"),Qat.forEach(t),LKo=r(vz,`class
method.`),vz.forEach(t),BKo=i($l),iw=n($l,"P",{});var wke=s(iw);xKo=r(wke,"This class cannot be instantiated directly using "),vme=n(wke,"CODE",{});var Hat=s(vme);kKo=r(Hat,"__init__()"),Hat.forEach(t),RKo=r(wke," (throws an error)."),wke.forEach(t),SKo=i($l),ct=n($l,"DIV",{class:!0});var Il=s(ct);m(dw.$$.fragment,Il),PKo=i(Il),Tme=n(Il,"P",{});var Uat=s(Tme);$Ko=r(Uat,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Uat.forEach(t),IKo=i(Il),dc=n(Il,"P",{});var Tz=s(dc);DKo=r(Tz,`Note:
Loading a model from its configuration file does `),Fme=n(Tz,"STRONG",{});var Jat=s(Fme);jKo=r(Jat,"not"),Jat.forEach(t),NKo=r(Tz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cme=n(Tz,"CODE",{});var Yat=s(Cme);qKo=r(Yat,"from_pretrained()"),Yat.forEach(t),GKo=r(Tz,"to load the model weights."),Tz.forEach(t),OKo=i(Il),Mme=n(Il,"P",{});var Kat=s(Mme);XKo=r(Kat,"Examples:"),Kat.forEach(t),VKo=i(Il),m(cw.$$.fragment,Il),Il.forEach(t),zKo=i($l),po=n($l,"DIV",{class:!0});var ma=s(po);m(fw.$$.fragment,ma),WKo=i(ma),Eme=n(ma,"P",{});var Zat=s(Eme);QKo=r(Zat,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Zat.forEach(t),HKo=i(ma),mn=n(ma,"P",{});var H4=s(mn);UKo=r(H4,"The model class to instantiate is selected based on the "),yme=n(H4,"CODE",{});var ent=s(yme);JKo=r(ent,"model_type"),ent.forEach(t),YKo=r(H4,` property of the config object (either
passed as an argument or loaded from `),wme=n(H4,"CODE",{});var ont=s(wme);KKo=r(ont,"pretrained_model_name_or_path"),ont.forEach(t),ZKo=r(H4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=n(H4,"CODE",{});var rnt=s(Ame);eZo=r(rnt,"pretrained_model_name_or_path"),rnt.forEach(t),oZo=r(H4,":"),H4.forEach(t),rZo=i(ma),he=n(ma,"UL",{});var Me=s(he);U0=n(Me,"LI",{});var l6e=s(U0);Lme=n(l6e,"STRONG",{});var tnt=s(Lme);tZo=r(tnt,"bert"),tnt.forEach(t),aZo=r(l6e," \u2014 "),vq=n(l6e,"A",{href:!0});var ant=s(vq);nZo=r(ant,"TFBertLMHeadModel"),ant.forEach(t),sZo=r(l6e," (BERT model)"),l6e.forEach(t),lZo=i(Me),J0=n(Me,"LI",{});var i6e=s(J0);Bme=n(i6e,"STRONG",{});var nnt=s(Bme);iZo=r(nnt,"ctrl"),nnt.forEach(t),dZo=r(i6e," \u2014 "),Tq=n(i6e,"A",{href:!0});var snt=s(Tq);cZo=r(snt,"TFCTRLLMHeadModel"),snt.forEach(t),fZo=r(i6e," (CTRL model)"),i6e.forEach(t),mZo=i(Me),Y0=n(Me,"LI",{});var d6e=s(Y0);xme=n(d6e,"STRONG",{});var lnt=s(xme);gZo=r(lnt,"gpt2"),lnt.forEach(t),hZo=r(d6e," \u2014 "),Fq=n(d6e,"A",{href:!0});var int=s(Fq);pZo=r(int,"TFGPT2LMHeadModel"),int.forEach(t),_Zo=r(d6e," (OpenAI GPT-2 model)"),d6e.forEach(t),uZo=i(Me),K0=n(Me,"LI",{});var c6e=s(K0);kme=n(c6e,"STRONG",{});var dnt=s(kme);bZo=r(dnt,"openai-gpt"),dnt.forEach(t),vZo=r(c6e," \u2014 "),Cq=n(c6e,"A",{href:!0});var cnt=s(Cq);TZo=r(cnt,"TFOpenAIGPTLMHeadModel"),cnt.forEach(t),FZo=r(c6e," (OpenAI GPT model)"),c6e.forEach(t),CZo=i(Me),Z0=n(Me,"LI",{});var f6e=s(Z0);Rme=n(f6e,"STRONG",{});var fnt=s(Rme);MZo=r(fnt,"rembert"),fnt.forEach(t),EZo=r(f6e," \u2014 "),Mq=n(f6e,"A",{href:!0});var mnt=s(Mq);yZo=r(mnt,"TFRemBertForCausalLM"),mnt.forEach(t),wZo=r(f6e," (RemBERT model)"),f6e.forEach(t),AZo=i(Me),eT=n(Me,"LI",{});var m6e=s(eT);Sme=n(m6e,"STRONG",{});var gnt=s(Sme);LZo=r(gnt,"roberta"),gnt.forEach(t),BZo=r(m6e," \u2014 "),Eq=n(m6e,"A",{href:!0});var hnt=s(Eq);xZo=r(hnt,"TFRobertaForCausalLM"),hnt.forEach(t),kZo=r(m6e," (RoBERTa model)"),m6e.forEach(t),RZo=i(Me),oT=n(Me,"LI",{});var g6e=s(oT);Pme=n(g6e,"STRONG",{});var pnt=s(Pme);SZo=r(pnt,"roformer"),pnt.forEach(t),PZo=r(g6e," \u2014 "),yq=n(g6e,"A",{href:!0});var _nt=s(yq);$Zo=r(_nt,"TFRoFormerForCausalLM"),_nt.forEach(t),IZo=r(g6e," (RoFormer model)"),g6e.forEach(t),DZo=i(Me),rT=n(Me,"LI",{});var h6e=s(rT);$me=n(h6e,"STRONG",{});var unt=s($me);jZo=r(unt,"transfo-xl"),unt.forEach(t),NZo=r(h6e," \u2014 "),wq=n(h6e,"A",{href:!0});var bnt=s(wq);qZo=r(bnt,"TFTransfoXLLMHeadModel"),bnt.forEach(t),GZo=r(h6e," (Transformer-XL model)"),h6e.forEach(t),OZo=i(Me),tT=n(Me,"LI",{});var p6e=s(tT);Ime=n(p6e,"STRONG",{});var vnt=s(Ime);XZo=r(vnt,"xlm"),vnt.forEach(t),VZo=r(p6e," \u2014 "),Aq=n(p6e,"A",{href:!0});var Tnt=s(Aq);zZo=r(Tnt,"TFXLMWithLMHeadModel"),Tnt.forEach(t),WZo=r(p6e," (XLM model)"),p6e.forEach(t),QZo=i(Me),aT=n(Me,"LI",{});var _6e=s(aT);Dme=n(_6e,"STRONG",{});var Fnt=s(Dme);HZo=r(Fnt,"xlnet"),Fnt.forEach(t),UZo=r(_6e," \u2014 "),Lq=n(_6e,"A",{href:!0});var Cnt=s(Lq);JZo=r(Cnt,"TFXLNetLMHeadModel"),Cnt.forEach(t),YZo=r(_6e," (XLNet model)"),_6e.forEach(t),Me.forEach(t),KZo=i(ma),jme=n(ma,"P",{});var Mnt=s(jme);ZZo=r(Mnt,"Examples:"),Mnt.forEach(t),eer=i(ma),m(mw.$$.fragment,ma),ma.forEach(t),$l.forEach(t),bBe=i(d),cc=n(d,"H2",{class:!0});var Ake=s(cc);nT=n(Ake,"A",{id:!0,class:!0,href:!0});var Ent=s(nT);Nme=n(Ent,"SPAN",{});var ynt=s(Nme);m(gw.$$.fragment,ynt),ynt.forEach(t),Ent.forEach(t),oer=i(Ake),qme=n(Ake,"SPAN",{});var wnt=s(qme);rer=r(wnt,"TFAutoModelForImageClassification"),wnt.forEach(t),Ake.forEach(t),vBe=i(d),br=n(d,"DIV",{class:!0});var Dl=s(br);m(hw.$$.fragment,Dl),ter=i(Dl),fc=n(Dl,"P",{});var Fz=s(fc);aer=r(Fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gme=n(Fz,"CODE",{});var Ant=s(Gme);ner=r(Ant,"from_pretrained()"),Ant.forEach(t),ser=r(Fz,"class method or the "),Ome=n(Fz,"CODE",{});var Lnt=s(Ome);ler=r(Lnt,"from_config()"),Lnt.forEach(t),ier=r(Fz,`class
method.`),Fz.forEach(t),der=i(Dl),pw=n(Dl,"P",{});var Lke=s(pw);cer=r(Lke,"This class cannot be instantiated directly using "),Xme=n(Lke,"CODE",{});var Bnt=s(Xme);fer=r(Bnt,"__init__()"),Bnt.forEach(t),mer=r(Lke," (throws an error)."),Lke.forEach(t),ger=i(Dl),ft=n(Dl,"DIV",{class:!0});var jl=s(ft);m(_w.$$.fragment,jl),her=i(jl),Vme=n(jl,"P",{});var xnt=s(Vme);per=r(xnt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xnt.forEach(t),_er=i(jl),mc=n(jl,"P",{});var Cz=s(mc);uer=r(Cz,`Note:
Loading a model from its configuration file does `),zme=n(Cz,"STRONG",{});var knt=s(zme);ber=r(knt,"not"),knt.forEach(t),ver=r(Cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wme=n(Cz,"CODE",{});var Rnt=s(Wme);Ter=r(Rnt,"from_pretrained()"),Rnt.forEach(t),Fer=r(Cz,"to load the model weights."),Cz.forEach(t),Cer=i(jl),Qme=n(jl,"P",{});var Snt=s(Qme);Mer=r(Snt,"Examples:"),Snt.forEach(t),Eer=i(jl),m(uw.$$.fragment,jl),jl.forEach(t),yer=i(Dl),_o=n(Dl,"DIV",{class:!0});var ga=s(_o);m(bw.$$.fragment,ga),wer=i(ga),Hme=n(ga,"P",{});var Pnt=s(Hme);Aer=r(Pnt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Pnt.forEach(t),Ler=i(ga),gn=n(ga,"P",{});var U4=s(gn);Ber=r(U4,"The model class to instantiate is selected based on the "),Ume=n(U4,"CODE",{});var $nt=s(Ume);xer=r($nt,"model_type"),$nt.forEach(t),ker=r(U4,` property of the config object (either
passed as an argument or loaded from `),Jme=n(U4,"CODE",{});var Int=s(Jme);Rer=r(Int,"pretrained_model_name_or_path"),Int.forEach(t),Ser=r(U4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=n(U4,"CODE",{});var Dnt=s(Yme);Per=r(Dnt,"pretrained_model_name_or_path"),Dnt.forEach(t),$er=r(U4,":"),U4.forEach(t),Ier=i(ga),Kme=n(ga,"UL",{});var jnt=s(Kme);sT=n(jnt,"LI",{});var u6e=s(sT);Zme=n(u6e,"STRONG",{});var Nnt=s(Zme);Der=r(Nnt,"vit"),Nnt.forEach(t),jer=r(u6e," \u2014 "),Bq=n(u6e,"A",{href:!0});var qnt=s(Bq);Ner=r(qnt,"TFViTForImageClassification"),qnt.forEach(t),qer=r(u6e," (ViT model)"),u6e.forEach(t),jnt.forEach(t),Ger=i(ga),ege=n(ga,"P",{});var Gnt=s(ege);Oer=r(Gnt,"Examples:"),Gnt.forEach(t),Xer=i(ga),m(vw.$$.fragment,ga),ga.forEach(t),Dl.forEach(t),TBe=i(d),gc=n(d,"H2",{class:!0});var Bke=s(gc);lT=n(Bke,"A",{id:!0,class:!0,href:!0});var Ont=s(lT);oge=n(Ont,"SPAN",{});var Xnt=s(oge);m(Tw.$$.fragment,Xnt),Xnt.forEach(t),Ont.forEach(t),Ver=i(Bke),rge=n(Bke,"SPAN",{});var Vnt=s(rge);zer=r(Vnt,"TFAutoModelForMaskedLM"),Vnt.forEach(t),Bke.forEach(t),FBe=i(d),vr=n(d,"DIV",{class:!0});var Nl=s(vr);m(Fw.$$.fragment,Nl),Wer=i(Nl),hc=n(Nl,"P",{});var Mz=s(hc);Qer=r(Mz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tge=n(Mz,"CODE",{});var znt=s(tge);Her=r(znt,"from_pretrained()"),znt.forEach(t),Uer=r(Mz,"class method or the "),age=n(Mz,"CODE",{});var Wnt=s(age);Jer=r(Wnt,"from_config()"),Wnt.forEach(t),Yer=r(Mz,`class
method.`),Mz.forEach(t),Ker=i(Nl),Cw=n(Nl,"P",{});var xke=s(Cw);Zer=r(xke,"This class cannot be instantiated directly using "),nge=n(xke,"CODE",{});var Qnt=s(nge);eor=r(Qnt,"__init__()"),Qnt.forEach(t),oor=r(xke," (throws an error)."),xke.forEach(t),ror=i(Nl),mt=n(Nl,"DIV",{class:!0});var ql=s(mt);m(Mw.$$.fragment,ql),tor=i(ql),sge=n(ql,"P",{});var Hnt=s(sge);aor=r(Hnt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Hnt.forEach(t),nor=i(ql),pc=n(ql,"P",{});var Ez=s(pc);sor=r(Ez,`Note:
Loading a model from its configuration file does `),lge=n(Ez,"STRONG",{});var Unt=s(lge);lor=r(Unt,"not"),Unt.forEach(t),ior=r(Ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),ige=n(Ez,"CODE",{});var Jnt=s(ige);dor=r(Jnt,"from_pretrained()"),Jnt.forEach(t),cor=r(Ez,"to load the model weights."),Ez.forEach(t),mor=i(ql),dge=n(ql,"P",{});var Ynt=s(dge);gor=r(Ynt,"Examples:"),Ynt.forEach(t),hor=i(ql),m(Ew.$$.fragment,ql),ql.forEach(t),por=i(Nl),uo=n(Nl,"DIV",{class:!0});var ha=s(uo);m(yw.$$.fragment,ha),_or=i(ha),cge=n(ha,"P",{});var Knt=s(cge);uor=r(Knt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Knt.forEach(t),bor=i(ha),hn=n(ha,"P",{});var J4=s(hn);vor=r(J4,"The model class to instantiate is selected based on the "),fge=n(J4,"CODE",{});var Znt=s(fge);Tor=r(Znt,"model_type"),Znt.forEach(t),For=r(J4,` property of the config object (either
passed as an argument or loaded from `),mge=n(J4,"CODE",{});var est=s(mge);Cor=r(est,"pretrained_model_name_or_path"),est.forEach(t),Mor=r(J4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gge=n(J4,"CODE",{});var ost=s(gge);Eor=r(ost,"pretrained_model_name_or_path"),ost.forEach(t),yor=r(J4,":"),J4.forEach(t),wor=i(ha),Y=n(ha,"UL",{});var ee=s(Y);iT=n(ee,"LI",{});var b6e=s(iT);hge=n(b6e,"STRONG",{});var rst=s(hge);Aor=r(rst,"albert"),rst.forEach(t),Lor=r(b6e," \u2014 "),xq=n(b6e,"A",{href:!0});var tst=s(xq);Bor=r(tst,"TFAlbertForMaskedLM"),tst.forEach(t),xor=r(b6e," (ALBERT model)"),b6e.forEach(t),kor=i(ee),dT=n(ee,"LI",{});var v6e=s(dT);pge=n(v6e,"STRONG",{});var ast=s(pge);Ror=r(ast,"bert"),ast.forEach(t),Sor=r(v6e," \u2014 "),kq=n(v6e,"A",{href:!0});var nst=s(kq);Por=r(nst,"TFBertForMaskedLM"),nst.forEach(t),$or=r(v6e," (BERT model)"),v6e.forEach(t),Ior=i(ee),cT=n(ee,"LI",{});var T6e=s(cT);_ge=n(T6e,"STRONG",{});var sst=s(_ge);Dor=r(sst,"camembert"),sst.forEach(t),jor=r(T6e," \u2014 "),Rq=n(T6e,"A",{href:!0});var lst=s(Rq);Nor=r(lst,"TFCamembertForMaskedLM"),lst.forEach(t),qor=r(T6e," (CamemBERT model)"),T6e.forEach(t),Gor=i(ee),fT=n(ee,"LI",{});var F6e=s(fT);uge=n(F6e,"STRONG",{});var ist=s(uge);Oor=r(ist,"convbert"),ist.forEach(t),Xor=r(F6e," \u2014 "),Sq=n(F6e,"A",{href:!0});var dst=s(Sq);Vor=r(dst,"TFConvBertForMaskedLM"),dst.forEach(t),zor=r(F6e," (ConvBERT model)"),F6e.forEach(t),Wor=i(ee),mT=n(ee,"LI",{});var C6e=s(mT);bge=n(C6e,"STRONG",{});var cst=s(bge);Qor=r(cst,"deberta"),cst.forEach(t),Hor=r(C6e," \u2014 "),Pq=n(C6e,"A",{href:!0});var fst=s(Pq);Uor=r(fst,"TFDebertaForMaskedLM"),fst.forEach(t),Jor=r(C6e," (DeBERTa model)"),C6e.forEach(t),Yor=i(ee),gT=n(ee,"LI",{});var M6e=s(gT);vge=n(M6e,"STRONG",{});var mst=s(vge);Kor=r(mst,"deberta-v2"),mst.forEach(t),Zor=r(M6e," \u2014 "),$q=n(M6e,"A",{href:!0});var gst=s($q);err=r(gst,"TFDebertaV2ForMaskedLM"),gst.forEach(t),orr=r(M6e," (DeBERTa-v2 model)"),M6e.forEach(t),rrr=i(ee),hT=n(ee,"LI",{});var E6e=s(hT);Tge=n(E6e,"STRONG",{});var hst=s(Tge);trr=r(hst,"distilbert"),hst.forEach(t),arr=r(E6e," \u2014 "),Iq=n(E6e,"A",{href:!0});var pst=s(Iq);nrr=r(pst,"TFDistilBertForMaskedLM"),pst.forEach(t),srr=r(E6e," (DistilBERT model)"),E6e.forEach(t),lrr=i(ee),pT=n(ee,"LI",{});var y6e=s(pT);Fge=n(y6e,"STRONG",{});var _st=s(Fge);irr=r(_st,"electra"),_st.forEach(t),drr=r(y6e," \u2014 "),Dq=n(y6e,"A",{href:!0});var ust=s(Dq);crr=r(ust,"TFElectraForMaskedLM"),ust.forEach(t),frr=r(y6e," (ELECTRA model)"),y6e.forEach(t),mrr=i(ee),_T=n(ee,"LI",{});var w6e=s(_T);Cge=n(w6e,"STRONG",{});var bst=s(Cge);grr=r(bst,"flaubert"),bst.forEach(t),hrr=r(w6e," \u2014 "),jq=n(w6e,"A",{href:!0});var vst=s(jq);prr=r(vst,"TFFlaubertWithLMHeadModel"),vst.forEach(t),_rr=r(w6e," (FlauBERT model)"),w6e.forEach(t),urr=i(ee),uT=n(ee,"LI",{});var A6e=s(uT);Mge=n(A6e,"STRONG",{});var Tst=s(Mge);brr=r(Tst,"funnel"),Tst.forEach(t),vrr=r(A6e," \u2014 "),Nq=n(A6e,"A",{href:!0});var Fst=s(Nq);Trr=r(Fst,"TFFunnelForMaskedLM"),Fst.forEach(t),Frr=r(A6e," (Funnel Transformer model)"),A6e.forEach(t),Crr=i(ee),bT=n(ee,"LI",{});var L6e=s(bT);Ege=n(L6e,"STRONG",{});var Cst=s(Ege);Mrr=r(Cst,"layoutlm"),Cst.forEach(t),Err=r(L6e," \u2014 "),qq=n(L6e,"A",{href:!0});var Mst=s(qq);yrr=r(Mst,"TFLayoutLMForMaskedLM"),Mst.forEach(t),wrr=r(L6e," (LayoutLM model)"),L6e.forEach(t),Arr=i(ee),vT=n(ee,"LI",{});var B6e=s(vT);yge=n(B6e,"STRONG",{});var Est=s(yge);Lrr=r(Est,"longformer"),Est.forEach(t),Brr=r(B6e," \u2014 "),Gq=n(B6e,"A",{href:!0});var yst=s(Gq);xrr=r(yst,"TFLongformerForMaskedLM"),yst.forEach(t),krr=r(B6e," (Longformer model)"),B6e.forEach(t),Rrr=i(ee),TT=n(ee,"LI",{});var x6e=s(TT);wge=n(x6e,"STRONG",{});var wst=s(wge);Srr=r(wst,"mobilebert"),wst.forEach(t),Prr=r(x6e," \u2014 "),Oq=n(x6e,"A",{href:!0});var Ast=s(Oq);$rr=r(Ast,"TFMobileBertForMaskedLM"),Ast.forEach(t),Irr=r(x6e," (MobileBERT model)"),x6e.forEach(t),Drr=i(ee),FT=n(ee,"LI",{});var k6e=s(FT);Age=n(k6e,"STRONG",{});var Lst=s(Age);jrr=r(Lst,"mpnet"),Lst.forEach(t),Nrr=r(k6e," \u2014 "),Xq=n(k6e,"A",{href:!0});var Bst=s(Xq);qrr=r(Bst,"TFMPNetForMaskedLM"),Bst.forEach(t),Grr=r(k6e," (MPNet model)"),k6e.forEach(t),Orr=i(ee),CT=n(ee,"LI",{});var R6e=s(CT);Lge=n(R6e,"STRONG",{});var xst=s(Lge);Xrr=r(xst,"rembert"),xst.forEach(t),Vrr=r(R6e," \u2014 "),Vq=n(R6e,"A",{href:!0});var kst=s(Vq);zrr=r(kst,"TFRemBertForMaskedLM"),kst.forEach(t),Wrr=r(R6e," (RemBERT model)"),R6e.forEach(t),Qrr=i(ee),MT=n(ee,"LI",{});var S6e=s(MT);Bge=n(S6e,"STRONG",{});var Rst=s(Bge);Hrr=r(Rst,"roberta"),Rst.forEach(t),Urr=r(S6e," \u2014 "),zq=n(S6e,"A",{href:!0});var Sst=s(zq);Jrr=r(Sst,"TFRobertaForMaskedLM"),Sst.forEach(t),Yrr=r(S6e," (RoBERTa model)"),S6e.forEach(t),Krr=i(ee),ET=n(ee,"LI",{});var P6e=s(ET);xge=n(P6e,"STRONG",{});var Pst=s(xge);Zrr=r(Pst,"roformer"),Pst.forEach(t),etr=r(P6e," \u2014 "),Wq=n(P6e,"A",{href:!0});var $st=s(Wq);otr=r($st,"TFRoFormerForMaskedLM"),$st.forEach(t),rtr=r(P6e," (RoFormer model)"),P6e.forEach(t),ttr=i(ee),yT=n(ee,"LI",{});var $6e=s(yT);kge=n($6e,"STRONG",{});var Ist=s(kge);atr=r(Ist,"tapas"),Ist.forEach(t),ntr=r($6e," \u2014 "),Qq=n($6e,"A",{href:!0});var Dst=s(Qq);str=r(Dst,"TFTapasForMaskedLM"),Dst.forEach(t),ltr=r($6e," (TAPAS model)"),$6e.forEach(t),itr=i(ee),wT=n(ee,"LI",{});var I6e=s(wT);Rge=n(I6e,"STRONG",{});var jst=s(Rge);dtr=r(jst,"xlm"),jst.forEach(t),ctr=r(I6e," \u2014 "),Hq=n(I6e,"A",{href:!0});var Nst=s(Hq);ftr=r(Nst,"TFXLMWithLMHeadModel"),Nst.forEach(t),mtr=r(I6e," (XLM model)"),I6e.forEach(t),gtr=i(ee),AT=n(ee,"LI",{});var D6e=s(AT);Sge=n(D6e,"STRONG",{});var qst=s(Sge);htr=r(qst,"xlm-roberta"),qst.forEach(t),ptr=r(D6e," \u2014 "),Uq=n(D6e,"A",{href:!0});var Gst=s(Uq);_tr=r(Gst,"TFXLMRobertaForMaskedLM"),Gst.forEach(t),utr=r(D6e," (XLM-RoBERTa model)"),D6e.forEach(t),ee.forEach(t),btr=i(ha),Pge=n(ha,"P",{});var Ost=s(Pge);vtr=r(Ost,"Examples:"),Ost.forEach(t),Ttr=i(ha),m(ww.$$.fragment,ha),ha.forEach(t),Nl.forEach(t),CBe=i(d),_c=n(d,"H2",{class:!0});var kke=s(_c);LT=n(kke,"A",{id:!0,class:!0,href:!0});var Xst=s(LT);$ge=n(Xst,"SPAN",{});var Vst=s($ge);m(Aw.$$.fragment,Vst),Vst.forEach(t),Xst.forEach(t),Ftr=i(kke),Ige=n(kke,"SPAN",{});var zst=s(Ige);Ctr=r(zst,"TFAutoModelForSeq2SeqLM"),zst.forEach(t),kke.forEach(t),MBe=i(d),Tr=n(d,"DIV",{class:!0});var Gl=s(Tr);m(Lw.$$.fragment,Gl),Mtr=i(Gl),uc=n(Gl,"P",{});var yz=s(uc);Etr=r(yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Dge=n(yz,"CODE",{});var Wst=s(Dge);ytr=r(Wst,"from_pretrained()"),Wst.forEach(t),wtr=r(yz,"class method or the "),jge=n(yz,"CODE",{});var Qst=s(jge);Atr=r(Qst,"from_config()"),Qst.forEach(t),Ltr=r(yz,`class
method.`),yz.forEach(t),Btr=i(Gl),Bw=n(Gl,"P",{});var Rke=s(Bw);xtr=r(Rke,"This class cannot be instantiated directly using "),Nge=n(Rke,"CODE",{});var Hst=s(Nge);ktr=r(Hst,"__init__()"),Hst.forEach(t),Rtr=r(Rke," (throws an error)."),Rke.forEach(t),Str=i(Gl),gt=n(Gl,"DIV",{class:!0});var Ol=s(gt);m(xw.$$.fragment,Ol),Ptr=i(Ol),qge=n(Ol,"P",{});var Ust=s(qge);$tr=r(Ust,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ust.forEach(t),Itr=i(Ol),bc=n(Ol,"P",{});var wz=s(bc);Dtr=r(wz,`Note:
Loading a model from its configuration file does `),Gge=n(wz,"STRONG",{});var Jst=s(Gge);jtr=r(Jst,"not"),Jst.forEach(t),Ntr=r(wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oge=n(wz,"CODE",{});var Yst=s(Oge);qtr=r(Yst,"from_pretrained()"),Yst.forEach(t),Gtr=r(wz,"to load the model weights."),wz.forEach(t),Otr=i(Ol),Xge=n(Ol,"P",{});var Kst=s(Xge);Xtr=r(Kst,"Examples:"),Kst.forEach(t),Vtr=i(Ol),m(kw.$$.fragment,Ol),Ol.forEach(t),ztr=i(Gl),bo=n(Gl,"DIV",{class:!0});var pa=s(bo);m(Rw.$$.fragment,pa),Wtr=i(pa),Vge=n(pa,"P",{});var Zst=s(Vge);Qtr=r(Zst,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zst.forEach(t),Htr=i(pa),pn=n(pa,"P",{});var Y4=s(pn);Utr=r(Y4,"The model class to instantiate is selected based on the "),zge=n(Y4,"CODE",{});var elt=s(zge);Jtr=r(elt,"model_type"),elt.forEach(t),Ytr=r(Y4,` property of the config object (either
passed as an argument or loaded from `),Wge=n(Y4,"CODE",{});var olt=s(Wge);Ktr=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),Ztr=r(Y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=n(Y4,"CODE",{});var rlt=s(Qge);ear=r(rlt,"pretrained_model_name_or_path"),rlt.forEach(t),oar=r(Y4,":"),Y4.forEach(t),rar=i(pa),pe=n(pa,"UL",{});var Ee=s(pe);BT=n(Ee,"LI",{});var j6e=s(BT);Hge=n(j6e,"STRONG",{});var tlt=s(Hge);tar=r(tlt,"bart"),tlt.forEach(t),aar=r(j6e," \u2014 "),Jq=n(j6e,"A",{href:!0});var alt=s(Jq);nar=r(alt,"TFBartForConditionalGeneration"),alt.forEach(t),sar=r(j6e," (BART model)"),j6e.forEach(t),lar=i(Ee),xT=n(Ee,"LI",{});var N6e=s(xT);Uge=n(N6e,"STRONG",{});var nlt=s(Uge);iar=r(nlt,"blenderbot"),nlt.forEach(t),dar=r(N6e," \u2014 "),Yq=n(N6e,"A",{href:!0});var slt=s(Yq);car=r(slt,"TFBlenderbotForConditionalGeneration"),slt.forEach(t),far=r(N6e," (Blenderbot model)"),N6e.forEach(t),mar=i(Ee),kT=n(Ee,"LI",{});var q6e=s(kT);Jge=n(q6e,"STRONG",{});var llt=s(Jge);gar=r(llt,"blenderbot-small"),llt.forEach(t),har=r(q6e," \u2014 "),Kq=n(q6e,"A",{href:!0});var ilt=s(Kq);par=r(ilt,"TFBlenderbotSmallForConditionalGeneration"),ilt.forEach(t),_ar=r(q6e," (BlenderbotSmall model)"),q6e.forEach(t),uar=i(Ee),RT=n(Ee,"LI",{});var G6e=s(RT);Yge=n(G6e,"STRONG",{});var dlt=s(Yge);bar=r(dlt,"encoder-decoder"),dlt.forEach(t),Tar=r(G6e," \u2014 "),Zq=n(G6e,"A",{href:!0});var clt=s(Zq);Far=r(clt,"TFEncoderDecoderModel"),clt.forEach(t),Car=r(G6e," (Encoder decoder model)"),G6e.forEach(t),Mar=i(Ee),ST=n(Ee,"LI",{});var O6e=s(ST);Kge=n(O6e,"STRONG",{});var flt=s(Kge);Ear=r(flt,"led"),flt.forEach(t),yar=r(O6e," \u2014 "),eG=n(O6e,"A",{href:!0});var mlt=s(eG);war=r(mlt,"TFLEDForConditionalGeneration"),mlt.forEach(t),Aar=r(O6e," (LED model)"),O6e.forEach(t),Lar=i(Ee),PT=n(Ee,"LI",{});var X6e=s(PT);Zge=n(X6e,"STRONG",{});var glt=s(Zge);Bar=r(glt,"marian"),glt.forEach(t),xar=r(X6e," \u2014 "),oG=n(X6e,"A",{href:!0});var hlt=s(oG);kar=r(hlt,"TFMarianMTModel"),hlt.forEach(t),Rar=r(X6e," (Marian model)"),X6e.forEach(t),Sar=i(Ee),$T=n(Ee,"LI",{});var V6e=s($T);ehe=n(V6e,"STRONG",{});var plt=s(ehe);Par=r(plt,"mbart"),plt.forEach(t),$ar=r(V6e," \u2014 "),rG=n(V6e,"A",{href:!0});var _lt=s(rG);Iar=r(_lt,"TFMBartForConditionalGeneration"),_lt.forEach(t),Dar=r(V6e," (mBART model)"),V6e.forEach(t),jar=i(Ee),IT=n(Ee,"LI",{});var z6e=s(IT);ohe=n(z6e,"STRONG",{});var ult=s(ohe);Nar=r(ult,"mt5"),ult.forEach(t),qar=r(z6e," \u2014 "),tG=n(z6e,"A",{href:!0});var blt=s(tG);Gar=r(blt,"TFMT5ForConditionalGeneration"),blt.forEach(t),Oar=r(z6e," (mT5 model)"),z6e.forEach(t),Xar=i(Ee),DT=n(Ee,"LI",{});var W6e=s(DT);rhe=n(W6e,"STRONG",{});var vlt=s(rhe);Var=r(vlt,"pegasus"),vlt.forEach(t),zar=r(W6e," \u2014 "),aG=n(W6e,"A",{href:!0});var Tlt=s(aG);War=r(Tlt,"TFPegasusForConditionalGeneration"),Tlt.forEach(t),Qar=r(W6e," (Pegasus model)"),W6e.forEach(t),Har=i(Ee),jT=n(Ee,"LI",{});var Q6e=s(jT);the=n(Q6e,"STRONG",{});var Flt=s(the);Uar=r(Flt,"t5"),Flt.forEach(t),Jar=r(Q6e," \u2014 "),nG=n(Q6e,"A",{href:!0});var Clt=s(nG);Yar=r(Clt,"TFT5ForConditionalGeneration"),Clt.forEach(t),Kar=r(Q6e," (T5 model)"),Q6e.forEach(t),Ee.forEach(t),Zar=i(pa),ahe=n(pa,"P",{});var Mlt=s(ahe);enr=r(Mlt,"Examples:"),Mlt.forEach(t),onr=i(pa),m(Sw.$$.fragment,pa),pa.forEach(t),Gl.forEach(t),EBe=i(d),vc=n(d,"H2",{class:!0});var Ske=s(vc);NT=n(Ske,"A",{id:!0,class:!0,href:!0});var Elt=s(NT);nhe=n(Elt,"SPAN",{});var ylt=s(nhe);m(Pw.$$.fragment,ylt),ylt.forEach(t),Elt.forEach(t),rnr=i(Ske),she=n(Ske,"SPAN",{});var wlt=s(she);tnr=r(wlt,"TFAutoModelForSequenceClassification"),wlt.forEach(t),Ske.forEach(t),yBe=i(d),Fr=n(d,"DIV",{class:!0});var Xl=s(Fr);m($w.$$.fragment,Xl),anr=i(Xl),Tc=n(Xl,"P",{});var Az=s(Tc);nnr=r(Az,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lhe=n(Az,"CODE",{});var Alt=s(lhe);snr=r(Alt,"from_pretrained()"),Alt.forEach(t),lnr=r(Az,"class method or the "),ihe=n(Az,"CODE",{});var Llt=s(ihe);inr=r(Llt,"from_config()"),Llt.forEach(t),dnr=r(Az,`class
method.`),Az.forEach(t),cnr=i(Xl),Iw=n(Xl,"P",{});var Pke=s(Iw);fnr=r(Pke,"This class cannot be instantiated directly using "),dhe=n(Pke,"CODE",{});var Blt=s(dhe);mnr=r(Blt,"__init__()"),Blt.forEach(t),gnr=r(Pke," (throws an error)."),Pke.forEach(t),hnr=i(Xl),ht=n(Xl,"DIV",{class:!0});var Vl=s(ht);m(Dw.$$.fragment,Vl),pnr=i(Vl),che=n(Vl,"P",{});var xlt=s(che);_nr=r(xlt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),xlt.forEach(t),unr=i(Vl),Fc=n(Vl,"P",{});var Lz=s(Fc);bnr=r(Lz,`Note:
Loading a model from its configuration file does `),fhe=n(Lz,"STRONG",{});var klt=s(fhe);vnr=r(klt,"not"),klt.forEach(t),Tnr=r(Lz,` load the model weights. It only affects the
model\u2019s configuration. Use `),mhe=n(Lz,"CODE",{});var Rlt=s(mhe);Fnr=r(Rlt,"from_pretrained()"),Rlt.forEach(t),Cnr=r(Lz,"to load the model weights."),Lz.forEach(t),Mnr=i(Vl),ghe=n(Vl,"P",{});var Slt=s(ghe);Enr=r(Slt,"Examples:"),Slt.forEach(t),ynr=i(Vl),m(jw.$$.fragment,Vl),Vl.forEach(t),wnr=i(Xl),vo=n(Xl,"DIV",{class:!0});var _a=s(vo);m(Nw.$$.fragment,_a),Anr=i(_a),hhe=n(_a,"P",{});var Plt=s(hhe);Lnr=r(Plt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Plt.forEach(t),Bnr=i(_a),_n=n(_a,"P",{});var K4=s(_n);xnr=r(K4,"The model class to instantiate is selected based on the "),phe=n(K4,"CODE",{});var $lt=s(phe);knr=r($lt,"model_type"),$lt.forEach(t),Rnr=r(K4,` property of the config object (either
passed as an argument or loaded from `),_he=n(K4,"CODE",{});var Ilt=s(_he);Snr=r(Ilt,"pretrained_model_name_or_path"),Ilt.forEach(t),Pnr=r(K4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=n(K4,"CODE",{});var Dlt=s(uhe);$nr=r(Dlt,"pretrained_model_name_or_path"),Dlt.forEach(t),Inr=r(K4,":"),K4.forEach(t),Dnr=i(_a),X=n(_a,"UL",{});var W=s(X);qT=n(W,"LI",{});var H6e=s(qT);bhe=n(H6e,"STRONG",{});var jlt=s(bhe);jnr=r(jlt,"albert"),jlt.forEach(t),Nnr=r(H6e," \u2014 "),sG=n(H6e,"A",{href:!0});var Nlt=s(sG);qnr=r(Nlt,"TFAlbertForSequenceClassification"),Nlt.forEach(t),Gnr=r(H6e," (ALBERT model)"),H6e.forEach(t),Onr=i(W),GT=n(W,"LI",{});var U6e=s(GT);vhe=n(U6e,"STRONG",{});var qlt=s(vhe);Xnr=r(qlt,"bert"),qlt.forEach(t),Vnr=r(U6e," \u2014 "),lG=n(U6e,"A",{href:!0});var Glt=s(lG);znr=r(Glt,"TFBertForSequenceClassification"),Glt.forEach(t),Wnr=r(U6e," (BERT model)"),U6e.forEach(t),Qnr=i(W),OT=n(W,"LI",{});var J6e=s(OT);The=n(J6e,"STRONG",{});var Olt=s(The);Hnr=r(Olt,"camembert"),Olt.forEach(t),Unr=r(J6e," \u2014 "),iG=n(J6e,"A",{href:!0});var Xlt=s(iG);Jnr=r(Xlt,"TFCamembertForSequenceClassification"),Xlt.forEach(t),Ynr=r(J6e," (CamemBERT model)"),J6e.forEach(t),Knr=i(W),XT=n(W,"LI",{});var Y6e=s(XT);Fhe=n(Y6e,"STRONG",{});var Vlt=s(Fhe);Znr=r(Vlt,"convbert"),Vlt.forEach(t),esr=r(Y6e," \u2014 "),dG=n(Y6e,"A",{href:!0});var zlt=s(dG);osr=r(zlt,"TFConvBertForSequenceClassification"),zlt.forEach(t),rsr=r(Y6e," (ConvBERT model)"),Y6e.forEach(t),tsr=i(W),VT=n(W,"LI",{});var K6e=s(VT);Che=n(K6e,"STRONG",{});var Wlt=s(Che);asr=r(Wlt,"ctrl"),Wlt.forEach(t),nsr=r(K6e," \u2014 "),cG=n(K6e,"A",{href:!0});var Qlt=s(cG);ssr=r(Qlt,"TFCTRLForSequenceClassification"),Qlt.forEach(t),lsr=r(K6e," (CTRL model)"),K6e.forEach(t),isr=i(W),zT=n(W,"LI",{});var Z6e=s(zT);Mhe=n(Z6e,"STRONG",{});var Hlt=s(Mhe);dsr=r(Hlt,"deberta"),Hlt.forEach(t),csr=r(Z6e," \u2014 "),fG=n(Z6e,"A",{href:!0});var Ult=s(fG);fsr=r(Ult,"TFDebertaForSequenceClassification"),Ult.forEach(t),msr=r(Z6e," (DeBERTa model)"),Z6e.forEach(t),gsr=i(W),WT=n(W,"LI",{});var eAe=s(WT);Ehe=n(eAe,"STRONG",{});var Jlt=s(Ehe);hsr=r(Jlt,"deberta-v2"),Jlt.forEach(t),psr=r(eAe," \u2014 "),mG=n(eAe,"A",{href:!0});var Ylt=s(mG);_sr=r(Ylt,"TFDebertaV2ForSequenceClassification"),Ylt.forEach(t),usr=r(eAe," (DeBERTa-v2 model)"),eAe.forEach(t),bsr=i(W),QT=n(W,"LI",{});var oAe=s(QT);yhe=n(oAe,"STRONG",{});var Klt=s(yhe);vsr=r(Klt,"distilbert"),Klt.forEach(t),Tsr=r(oAe," \u2014 "),gG=n(oAe,"A",{href:!0});var Zlt=s(gG);Fsr=r(Zlt,"TFDistilBertForSequenceClassification"),Zlt.forEach(t),Csr=r(oAe," (DistilBERT model)"),oAe.forEach(t),Msr=i(W),HT=n(W,"LI",{});var rAe=s(HT);whe=n(rAe,"STRONG",{});var eit=s(whe);Esr=r(eit,"electra"),eit.forEach(t),ysr=r(rAe," \u2014 "),hG=n(rAe,"A",{href:!0});var oit=s(hG);wsr=r(oit,"TFElectraForSequenceClassification"),oit.forEach(t),Asr=r(rAe," (ELECTRA model)"),rAe.forEach(t),Lsr=i(W),UT=n(W,"LI",{});var tAe=s(UT);Ahe=n(tAe,"STRONG",{});var rit=s(Ahe);Bsr=r(rit,"flaubert"),rit.forEach(t),xsr=r(tAe," \u2014 "),pG=n(tAe,"A",{href:!0});var tit=s(pG);ksr=r(tit,"TFFlaubertForSequenceClassification"),tit.forEach(t),Rsr=r(tAe," (FlauBERT model)"),tAe.forEach(t),Ssr=i(W),JT=n(W,"LI",{});var aAe=s(JT);Lhe=n(aAe,"STRONG",{});var ait=s(Lhe);Psr=r(ait,"funnel"),ait.forEach(t),$sr=r(aAe," \u2014 "),_G=n(aAe,"A",{href:!0});var nit=s(_G);Isr=r(nit,"TFFunnelForSequenceClassification"),nit.forEach(t),Dsr=r(aAe," (Funnel Transformer model)"),aAe.forEach(t),jsr=i(W),YT=n(W,"LI",{});var nAe=s(YT);Bhe=n(nAe,"STRONG",{});var sit=s(Bhe);Nsr=r(sit,"gpt2"),sit.forEach(t),qsr=r(nAe," \u2014 "),uG=n(nAe,"A",{href:!0});var lit=s(uG);Gsr=r(lit,"TFGPT2ForSequenceClassification"),lit.forEach(t),Osr=r(nAe," (OpenAI GPT-2 model)"),nAe.forEach(t),Xsr=i(W),KT=n(W,"LI",{});var sAe=s(KT);xhe=n(sAe,"STRONG",{});var iit=s(xhe);Vsr=r(iit,"layoutlm"),iit.forEach(t),zsr=r(sAe," \u2014 "),bG=n(sAe,"A",{href:!0});var dit=s(bG);Wsr=r(dit,"TFLayoutLMForSequenceClassification"),dit.forEach(t),Qsr=r(sAe," (LayoutLM model)"),sAe.forEach(t),Hsr=i(W),ZT=n(W,"LI",{});var lAe=s(ZT);khe=n(lAe,"STRONG",{});var cit=s(khe);Usr=r(cit,"longformer"),cit.forEach(t),Jsr=r(lAe," \u2014 "),vG=n(lAe,"A",{href:!0});var fit=s(vG);Ysr=r(fit,"TFLongformerForSequenceClassification"),fit.forEach(t),Ksr=r(lAe," (Longformer model)"),lAe.forEach(t),Zsr=i(W),e7=n(W,"LI",{});var iAe=s(e7);Rhe=n(iAe,"STRONG",{});var mit=s(Rhe);elr=r(mit,"mobilebert"),mit.forEach(t),olr=r(iAe," \u2014 "),TG=n(iAe,"A",{href:!0});var git=s(TG);rlr=r(git,"TFMobileBertForSequenceClassification"),git.forEach(t),tlr=r(iAe," (MobileBERT model)"),iAe.forEach(t),alr=i(W),o7=n(W,"LI",{});var dAe=s(o7);She=n(dAe,"STRONG",{});var hit=s(She);nlr=r(hit,"mpnet"),hit.forEach(t),slr=r(dAe," \u2014 "),FG=n(dAe,"A",{href:!0});var pit=s(FG);llr=r(pit,"TFMPNetForSequenceClassification"),pit.forEach(t),ilr=r(dAe," (MPNet model)"),dAe.forEach(t),dlr=i(W),r7=n(W,"LI",{});var cAe=s(r7);Phe=n(cAe,"STRONG",{});var _it=s(Phe);clr=r(_it,"openai-gpt"),_it.forEach(t),flr=r(cAe," \u2014 "),CG=n(cAe,"A",{href:!0});var uit=s(CG);mlr=r(uit,"TFOpenAIGPTForSequenceClassification"),uit.forEach(t),glr=r(cAe," (OpenAI GPT model)"),cAe.forEach(t),hlr=i(W),t7=n(W,"LI",{});var fAe=s(t7);$he=n(fAe,"STRONG",{});var bit=s($he);plr=r(bit,"rembert"),bit.forEach(t),_lr=r(fAe," \u2014 "),MG=n(fAe,"A",{href:!0});var vit=s(MG);ulr=r(vit,"TFRemBertForSequenceClassification"),vit.forEach(t),blr=r(fAe," (RemBERT model)"),fAe.forEach(t),vlr=i(W),a7=n(W,"LI",{});var mAe=s(a7);Ihe=n(mAe,"STRONG",{});var Tit=s(Ihe);Tlr=r(Tit,"roberta"),Tit.forEach(t),Flr=r(mAe," \u2014 "),EG=n(mAe,"A",{href:!0});var Fit=s(EG);Clr=r(Fit,"TFRobertaForSequenceClassification"),Fit.forEach(t),Mlr=r(mAe," (RoBERTa model)"),mAe.forEach(t),Elr=i(W),n7=n(W,"LI",{});var gAe=s(n7);Dhe=n(gAe,"STRONG",{});var Cit=s(Dhe);ylr=r(Cit,"roformer"),Cit.forEach(t),wlr=r(gAe," \u2014 "),yG=n(gAe,"A",{href:!0});var Mit=s(yG);Alr=r(Mit,"TFRoFormerForSequenceClassification"),Mit.forEach(t),Llr=r(gAe," (RoFormer model)"),gAe.forEach(t),Blr=i(W),s7=n(W,"LI",{});var hAe=s(s7);jhe=n(hAe,"STRONG",{});var Eit=s(jhe);xlr=r(Eit,"tapas"),Eit.forEach(t),klr=r(hAe," \u2014 "),wG=n(hAe,"A",{href:!0});var yit=s(wG);Rlr=r(yit,"TFTapasForSequenceClassification"),yit.forEach(t),Slr=r(hAe," (TAPAS model)"),hAe.forEach(t),Plr=i(W),l7=n(W,"LI",{});var pAe=s(l7);Nhe=n(pAe,"STRONG",{});var wit=s(Nhe);$lr=r(wit,"transfo-xl"),wit.forEach(t),Ilr=r(pAe," \u2014 "),AG=n(pAe,"A",{href:!0});var Ait=s(AG);Dlr=r(Ait,"TFTransfoXLForSequenceClassification"),Ait.forEach(t),jlr=r(pAe," (Transformer-XL model)"),pAe.forEach(t),Nlr=i(W),i7=n(W,"LI",{});var _Ae=s(i7);qhe=n(_Ae,"STRONG",{});var Lit=s(qhe);qlr=r(Lit,"xlm"),Lit.forEach(t),Glr=r(_Ae," \u2014 "),LG=n(_Ae,"A",{href:!0});var Bit=s(LG);Olr=r(Bit,"TFXLMForSequenceClassification"),Bit.forEach(t),Xlr=r(_Ae," (XLM model)"),_Ae.forEach(t),Vlr=i(W),d7=n(W,"LI",{});var uAe=s(d7);Ghe=n(uAe,"STRONG",{});var xit=s(Ghe);zlr=r(xit,"xlm-roberta"),xit.forEach(t),Wlr=r(uAe," \u2014 "),BG=n(uAe,"A",{href:!0});var kit=s(BG);Qlr=r(kit,"TFXLMRobertaForSequenceClassification"),kit.forEach(t),Hlr=r(uAe," (XLM-RoBERTa model)"),uAe.forEach(t),Ulr=i(W),c7=n(W,"LI",{});var bAe=s(c7);Ohe=n(bAe,"STRONG",{});var Rit=s(Ohe);Jlr=r(Rit,"xlnet"),Rit.forEach(t),Ylr=r(bAe," \u2014 "),xG=n(bAe,"A",{href:!0});var Sit=s(xG);Klr=r(Sit,"TFXLNetForSequenceClassification"),Sit.forEach(t),Zlr=r(bAe," (XLNet model)"),bAe.forEach(t),W.forEach(t),eir=i(_a),Xhe=n(_a,"P",{});var Pit=s(Xhe);oir=r(Pit,"Examples:"),Pit.forEach(t),rir=i(_a),m(qw.$$.fragment,_a),_a.forEach(t),Xl.forEach(t),wBe=i(d),Cc=n(d,"H2",{class:!0});var $ke=s(Cc);f7=n($ke,"A",{id:!0,class:!0,href:!0});var $it=s(f7);Vhe=n($it,"SPAN",{});var Iit=s(Vhe);m(Gw.$$.fragment,Iit),Iit.forEach(t),$it.forEach(t),tir=i($ke),zhe=n($ke,"SPAN",{});var Dit=s(zhe);air=r(Dit,"TFAutoModelForMultipleChoice"),Dit.forEach(t),$ke.forEach(t),ABe=i(d),Cr=n(d,"DIV",{class:!0});var zl=s(Cr);m(Ow.$$.fragment,zl),nir=i(zl),Mc=n(zl,"P",{});var Bz=s(Mc);sir=r(Bz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Whe=n(Bz,"CODE",{});var jit=s(Whe);lir=r(jit,"from_pretrained()"),jit.forEach(t),iir=r(Bz,"class method or the "),Qhe=n(Bz,"CODE",{});var Nit=s(Qhe);dir=r(Nit,"from_config()"),Nit.forEach(t),cir=r(Bz,`class
method.`),Bz.forEach(t),fir=i(zl),Xw=n(zl,"P",{});var Ike=s(Xw);mir=r(Ike,"This class cannot be instantiated directly using "),Hhe=n(Ike,"CODE",{});var qit=s(Hhe);gir=r(qit,"__init__()"),qit.forEach(t),hir=r(Ike," (throws an error)."),Ike.forEach(t),pir=i(zl),pt=n(zl,"DIV",{class:!0});var Wl=s(pt);m(Vw.$$.fragment,Wl),_ir=i(Wl),Uhe=n(Wl,"P",{});var Git=s(Uhe);uir=r(Git,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Git.forEach(t),bir=i(Wl),Ec=n(Wl,"P",{});var xz=s(Ec);vir=r(xz,`Note:
Loading a model from its configuration file does `),Jhe=n(xz,"STRONG",{});var Oit=s(Jhe);Tir=r(Oit,"not"),Oit.forEach(t),Fir=r(xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yhe=n(xz,"CODE",{});var Xit=s(Yhe);Cir=r(Xit,"from_pretrained()"),Xit.forEach(t),Mir=r(xz,"to load the model weights."),xz.forEach(t),Eir=i(Wl),Khe=n(Wl,"P",{});var Vit=s(Khe);yir=r(Vit,"Examples:"),Vit.forEach(t),wir=i(Wl),m(zw.$$.fragment,Wl),Wl.forEach(t),Air=i(zl),To=n(zl,"DIV",{class:!0});var ua=s(To);m(Ww.$$.fragment,ua),Lir=i(ua),Zhe=n(ua,"P",{});var zit=s(Zhe);Bir=r(zit,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zit.forEach(t),xir=i(ua),un=n(ua,"P",{});var Z4=s(un);kir=r(Z4,"The model class to instantiate is selected based on the "),epe=n(Z4,"CODE",{});var Wit=s(epe);Rir=r(Wit,"model_type"),Wit.forEach(t),Sir=r(Z4,` property of the config object (either
passed as an argument or loaded from `),ope=n(Z4,"CODE",{});var Qit=s(ope);Pir=r(Qit,"pretrained_model_name_or_path"),Qit.forEach(t),$ir=r(Z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=n(Z4,"CODE",{});var Hit=s(rpe);Iir=r(Hit,"pretrained_model_name_or_path"),Hit.forEach(t),Dir=r(Z4,":"),Z4.forEach(t),jir=i(ua),te=n(ua,"UL",{});var ne=s(te);m7=n(ne,"LI",{});var vAe=s(m7);tpe=n(vAe,"STRONG",{});var Uit=s(tpe);Nir=r(Uit,"albert"),Uit.forEach(t),qir=r(vAe," \u2014 "),kG=n(vAe,"A",{href:!0});var Jit=s(kG);Gir=r(Jit,"TFAlbertForMultipleChoice"),Jit.forEach(t),Oir=r(vAe," (ALBERT model)"),vAe.forEach(t),Xir=i(ne),g7=n(ne,"LI",{});var TAe=s(g7);ape=n(TAe,"STRONG",{});var Yit=s(ape);Vir=r(Yit,"bert"),Yit.forEach(t),zir=r(TAe," \u2014 "),RG=n(TAe,"A",{href:!0});var Kit=s(RG);Wir=r(Kit,"TFBertForMultipleChoice"),Kit.forEach(t),Qir=r(TAe," (BERT model)"),TAe.forEach(t),Hir=i(ne),h7=n(ne,"LI",{});var FAe=s(h7);npe=n(FAe,"STRONG",{});var Zit=s(npe);Uir=r(Zit,"camembert"),Zit.forEach(t),Jir=r(FAe," \u2014 "),SG=n(FAe,"A",{href:!0});var edt=s(SG);Yir=r(edt,"TFCamembertForMultipleChoice"),edt.forEach(t),Kir=r(FAe," (CamemBERT model)"),FAe.forEach(t),Zir=i(ne),p7=n(ne,"LI",{});var CAe=s(p7);spe=n(CAe,"STRONG",{});var odt=s(spe);edr=r(odt,"convbert"),odt.forEach(t),odr=r(CAe," \u2014 "),PG=n(CAe,"A",{href:!0});var rdt=s(PG);rdr=r(rdt,"TFConvBertForMultipleChoice"),rdt.forEach(t),tdr=r(CAe," (ConvBERT model)"),CAe.forEach(t),adr=i(ne),_7=n(ne,"LI",{});var MAe=s(_7);lpe=n(MAe,"STRONG",{});var tdt=s(lpe);ndr=r(tdt,"distilbert"),tdt.forEach(t),sdr=r(MAe," \u2014 "),$G=n(MAe,"A",{href:!0});var adt=s($G);ldr=r(adt,"TFDistilBertForMultipleChoice"),adt.forEach(t),idr=r(MAe," (DistilBERT model)"),MAe.forEach(t),ddr=i(ne),u7=n(ne,"LI",{});var EAe=s(u7);ipe=n(EAe,"STRONG",{});var ndt=s(ipe);cdr=r(ndt,"electra"),ndt.forEach(t),fdr=r(EAe," \u2014 "),IG=n(EAe,"A",{href:!0});var sdt=s(IG);mdr=r(sdt,"TFElectraForMultipleChoice"),sdt.forEach(t),gdr=r(EAe," (ELECTRA model)"),EAe.forEach(t),hdr=i(ne),b7=n(ne,"LI",{});var yAe=s(b7);dpe=n(yAe,"STRONG",{});var ldt=s(dpe);pdr=r(ldt,"flaubert"),ldt.forEach(t),_dr=r(yAe," \u2014 "),DG=n(yAe,"A",{href:!0});var idt=s(DG);udr=r(idt,"TFFlaubertForMultipleChoice"),idt.forEach(t),bdr=r(yAe," (FlauBERT model)"),yAe.forEach(t),vdr=i(ne),v7=n(ne,"LI",{});var wAe=s(v7);cpe=n(wAe,"STRONG",{});var ddt=s(cpe);Tdr=r(ddt,"funnel"),ddt.forEach(t),Fdr=r(wAe," \u2014 "),jG=n(wAe,"A",{href:!0});var cdt=s(jG);Cdr=r(cdt,"TFFunnelForMultipleChoice"),cdt.forEach(t),Mdr=r(wAe," (Funnel Transformer model)"),wAe.forEach(t),Edr=i(ne),T7=n(ne,"LI",{});var AAe=s(T7);fpe=n(AAe,"STRONG",{});var fdt=s(fpe);ydr=r(fdt,"longformer"),fdt.forEach(t),wdr=r(AAe," \u2014 "),NG=n(AAe,"A",{href:!0});var mdt=s(NG);Adr=r(mdt,"TFLongformerForMultipleChoice"),mdt.forEach(t),Ldr=r(AAe," (Longformer model)"),AAe.forEach(t),Bdr=i(ne),F7=n(ne,"LI",{});var LAe=s(F7);mpe=n(LAe,"STRONG",{});var gdt=s(mpe);xdr=r(gdt,"mobilebert"),gdt.forEach(t),kdr=r(LAe," \u2014 "),qG=n(LAe,"A",{href:!0});var hdt=s(qG);Rdr=r(hdt,"TFMobileBertForMultipleChoice"),hdt.forEach(t),Sdr=r(LAe," (MobileBERT model)"),LAe.forEach(t),Pdr=i(ne),C7=n(ne,"LI",{});var BAe=s(C7);gpe=n(BAe,"STRONG",{});var pdt=s(gpe);$dr=r(pdt,"mpnet"),pdt.forEach(t),Idr=r(BAe," \u2014 "),GG=n(BAe,"A",{href:!0});var _dt=s(GG);Ddr=r(_dt,"TFMPNetForMultipleChoice"),_dt.forEach(t),jdr=r(BAe," (MPNet model)"),BAe.forEach(t),Ndr=i(ne),M7=n(ne,"LI",{});var xAe=s(M7);hpe=n(xAe,"STRONG",{});var udt=s(hpe);qdr=r(udt,"rembert"),udt.forEach(t),Gdr=r(xAe," \u2014 "),OG=n(xAe,"A",{href:!0});var bdt=s(OG);Odr=r(bdt,"TFRemBertForMultipleChoice"),bdt.forEach(t),Xdr=r(xAe," (RemBERT model)"),xAe.forEach(t),Vdr=i(ne),E7=n(ne,"LI",{});var kAe=s(E7);ppe=n(kAe,"STRONG",{});var vdt=s(ppe);zdr=r(vdt,"roberta"),vdt.forEach(t),Wdr=r(kAe," \u2014 "),XG=n(kAe,"A",{href:!0});var Tdt=s(XG);Qdr=r(Tdt,"TFRobertaForMultipleChoice"),Tdt.forEach(t),Hdr=r(kAe," (RoBERTa model)"),kAe.forEach(t),Udr=i(ne),y7=n(ne,"LI",{});var RAe=s(y7);_pe=n(RAe,"STRONG",{});var Fdt=s(_pe);Jdr=r(Fdt,"roformer"),Fdt.forEach(t),Ydr=r(RAe," \u2014 "),VG=n(RAe,"A",{href:!0});var Cdt=s(VG);Kdr=r(Cdt,"TFRoFormerForMultipleChoice"),Cdt.forEach(t),Zdr=r(RAe," (RoFormer model)"),RAe.forEach(t),ecr=i(ne),w7=n(ne,"LI",{});var SAe=s(w7);upe=n(SAe,"STRONG",{});var Mdt=s(upe);ocr=r(Mdt,"xlm"),Mdt.forEach(t),rcr=r(SAe," \u2014 "),zG=n(SAe,"A",{href:!0});var Edt=s(zG);tcr=r(Edt,"TFXLMForMultipleChoice"),Edt.forEach(t),acr=r(SAe," (XLM model)"),SAe.forEach(t),ncr=i(ne),A7=n(ne,"LI",{});var PAe=s(A7);bpe=n(PAe,"STRONG",{});var ydt=s(bpe);scr=r(ydt,"xlm-roberta"),ydt.forEach(t),lcr=r(PAe," \u2014 "),WG=n(PAe,"A",{href:!0});var wdt=s(WG);icr=r(wdt,"TFXLMRobertaForMultipleChoice"),wdt.forEach(t),dcr=r(PAe," (XLM-RoBERTa model)"),PAe.forEach(t),ccr=i(ne),L7=n(ne,"LI",{});var $Ae=s(L7);vpe=n($Ae,"STRONG",{});var Adt=s(vpe);fcr=r(Adt,"xlnet"),Adt.forEach(t),mcr=r($Ae," \u2014 "),QG=n($Ae,"A",{href:!0});var Ldt=s(QG);gcr=r(Ldt,"TFXLNetForMultipleChoice"),Ldt.forEach(t),hcr=r($Ae," (XLNet model)"),$Ae.forEach(t),ne.forEach(t),pcr=i(ua),Tpe=n(ua,"P",{});var Bdt=s(Tpe);_cr=r(Bdt,"Examples:"),Bdt.forEach(t),ucr=i(ua),m(Qw.$$.fragment,ua),ua.forEach(t),zl.forEach(t),LBe=i(d),yc=n(d,"H2",{class:!0});var Dke=s(yc);B7=n(Dke,"A",{id:!0,class:!0,href:!0});var xdt=s(B7);Fpe=n(xdt,"SPAN",{});var kdt=s(Fpe);m(Hw.$$.fragment,kdt),kdt.forEach(t),xdt.forEach(t),bcr=i(Dke),Cpe=n(Dke,"SPAN",{});var Rdt=s(Cpe);vcr=r(Rdt,"TFAutoModelForTableQuestionAnswering"),Rdt.forEach(t),Dke.forEach(t),BBe=i(d),Mr=n(d,"DIV",{class:!0});var Ql=s(Mr);m(Uw.$$.fragment,Ql),Tcr=i(Ql),wc=n(Ql,"P",{});var kz=s(wc);Fcr=r(kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Mpe=n(kz,"CODE",{});var Sdt=s(Mpe);Ccr=r(Sdt,"from_pretrained()"),Sdt.forEach(t),Mcr=r(kz,"class method or the "),Epe=n(kz,"CODE",{});var Pdt=s(Epe);Ecr=r(Pdt,"from_config()"),Pdt.forEach(t),ycr=r(kz,`class
method.`),kz.forEach(t),wcr=i(Ql),Jw=n(Ql,"P",{});var jke=s(Jw);Acr=r(jke,"This class cannot be instantiated directly using "),ype=n(jke,"CODE",{});var $dt=s(ype);Lcr=r($dt,"__init__()"),$dt.forEach(t),Bcr=r(jke," (throws an error)."),jke.forEach(t),xcr=i(Ql),_t=n(Ql,"DIV",{class:!0});var Hl=s(_t);m(Yw.$$.fragment,Hl),kcr=i(Hl),wpe=n(Hl,"P",{});var Idt=s(wpe);Rcr=r(Idt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Idt.forEach(t),Scr=i(Hl),Ac=n(Hl,"P",{});var Rz=s(Ac);Pcr=r(Rz,`Note:
Loading a model from its configuration file does `),Ape=n(Rz,"STRONG",{});var Ddt=s(Ape);$cr=r(Ddt,"not"),Ddt.forEach(t),Icr=r(Rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lpe=n(Rz,"CODE",{});var jdt=s(Lpe);Dcr=r(jdt,"from_pretrained()"),jdt.forEach(t),jcr=r(Rz,"to load the model weights."),Rz.forEach(t),Ncr=i(Hl),Bpe=n(Hl,"P",{});var Ndt=s(Bpe);qcr=r(Ndt,"Examples:"),Ndt.forEach(t),Gcr=i(Hl),m(Kw.$$.fragment,Hl),Hl.forEach(t),Ocr=i(Ql),Fo=n(Ql,"DIV",{class:!0});var ba=s(Fo);m(Zw.$$.fragment,ba),Xcr=i(ba),xpe=n(ba,"P",{});var qdt=s(xpe);Vcr=r(qdt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qdt.forEach(t),zcr=i(ba),bn=n(ba,"P",{});var eM=s(bn);Wcr=r(eM,"The model class to instantiate is selected based on the "),kpe=n(eM,"CODE",{});var Gdt=s(kpe);Qcr=r(Gdt,"model_type"),Gdt.forEach(t),Hcr=r(eM,` property of the config object (either
passed as an argument or loaded from `),Rpe=n(eM,"CODE",{});var Odt=s(Rpe);Ucr=r(Odt,"pretrained_model_name_or_path"),Odt.forEach(t),Jcr=r(eM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Spe=n(eM,"CODE",{});var Xdt=s(Spe);Ycr=r(Xdt,"pretrained_model_name_or_path"),Xdt.forEach(t),Kcr=r(eM,":"),eM.forEach(t),Zcr=i(ba),Ppe=n(ba,"UL",{});var Vdt=s(Ppe);x7=n(Vdt,"LI",{});var IAe=s(x7);$pe=n(IAe,"STRONG",{});var zdt=s($pe);efr=r(zdt,"tapas"),zdt.forEach(t),ofr=r(IAe," \u2014 "),HG=n(IAe,"A",{href:!0});var Wdt=s(HG);rfr=r(Wdt,"TFTapasForQuestionAnswering"),Wdt.forEach(t),tfr=r(IAe," (TAPAS model)"),IAe.forEach(t),Vdt.forEach(t),afr=i(ba),Ipe=n(ba,"P",{});var Qdt=s(Ipe);nfr=r(Qdt,"Examples:"),Qdt.forEach(t),sfr=i(ba),m(e6.$$.fragment,ba),ba.forEach(t),Ql.forEach(t),xBe=i(d),Lc=n(d,"H2",{class:!0});var Nke=s(Lc);k7=n(Nke,"A",{id:!0,class:!0,href:!0});var Hdt=s(k7);Dpe=n(Hdt,"SPAN",{});var Udt=s(Dpe);m(o6.$$.fragment,Udt),Udt.forEach(t),Hdt.forEach(t),lfr=i(Nke),jpe=n(Nke,"SPAN",{});var Jdt=s(jpe);ifr=r(Jdt,"TFAutoModelForTokenClassification"),Jdt.forEach(t),Nke.forEach(t),kBe=i(d),Er=n(d,"DIV",{class:!0});var Ul=s(Er);m(r6.$$.fragment,Ul),dfr=i(Ul),Bc=n(Ul,"P",{});var Sz=s(Bc);cfr=r(Sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Npe=n(Sz,"CODE",{});var Ydt=s(Npe);ffr=r(Ydt,"from_pretrained()"),Ydt.forEach(t),mfr=r(Sz,"class method or the "),qpe=n(Sz,"CODE",{});var Kdt=s(qpe);gfr=r(Kdt,"from_config()"),Kdt.forEach(t),hfr=r(Sz,`class
method.`),Sz.forEach(t),pfr=i(Ul),t6=n(Ul,"P",{});var qke=s(t6);_fr=r(qke,"This class cannot be instantiated directly using "),Gpe=n(qke,"CODE",{});var Zdt=s(Gpe);ufr=r(Zdt,"__init__()"),Zdt.forEach(t),bfr=r(qke," (throws an error)."),qke.forEach(t),vfr=i(Ul),ut=n(Ul,"DIV",{class:!0});var Jl=s(ut);m(a6.$$.fragment,Jl),Tfr=i(Jl),Ope=n(Jl,"P",{});var ect=s(Ope);Ffr=r(ect,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ect.forEach(t),Cfr=i(Jl),xc=n(Jl,"P",{});var Pz=s(xc);Mfr=r(Pz,`Note:
Loading a model from its configuration file does `),Xpe=n(Pz,"STRONG",{});var oct=s(Xpe);Efr=r(oct,"not"),oct.forEach(t),yfr=r(Pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vpe=n(Pz,"CODE",{});var rct=s(Vpe);wfr=r(rct,"from_pretrained()"),rct.forEach(t),Afr=r(Pz,"to load the model weights."),Pz.forEach(t),Lfr=i(Jl),zpe=n(Jl,"P",{});var tct=s(zpe);Bfr=r(tct,"Examples:"),tct.forEach(t),xfr=i(Jl),m(n6.$$.fragment,Jl),Jl.forEach(t),kfr=i(Ul),Co=n(Ul,"DIV",{class:!0});var va=s(Co);m(s6.$$.fragment,va),Rfr=i(va),Wpe=n(va,"P",{});var act=s(Wpe);Sfr=r(act,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),act.forEach(t),Pfr=i(va),vn=n(va,"P",{});var oM=s(vn);$fr=r(oM,"The model class to instantiate is selected based on the "),Qpe=n(oM,"CODE",{});var nct=s(Qpe);Ifr=r(nct,"model_type"),nct.forEach(t),Dfr=r(oM,` property of the config object (either
passed as an argument or loaded from `),Hpe=n(oM,"CODE",{});var sct=s(Hpe);jfr=r(sct,"pretrained_model_name_or_path"),sct.forEach(t),Nfr=r(oM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=n(oM,"CODE",{});var lct=s(Upe);qfr=r(lct,"pretrained_model_name_or_path"),lct.forEach(t),Gfr=r(oM,":"),oM.forEach(t),Ofr=i(va),K=n(va,"UL",{});var oe=s(K);R7=n(oe,"LI",{});var DAe=s(R7);Jpe=n(DAe,"STRONG",{});var ict=s(Jpe);Xfr=r(ict,"albert"),ict.forEach(t),Vfr=r(DAe," \u2014 "),UG=n(DAe,"A",{href:!0});var dct=s(UG);zfr=r(dct,"TFAlbertForTokenClassification"),dct.forEach(t),Wfr=r(DAe," (ALBERT model)"),DAe.forEach(t),Qfr=i(oe),S7=n(oe,"LI",{});var jAe=s(S7);Ype=n(jAe,"STRONG",{});var cct=s(Ype);Hfr=r(cct,"bert"),cct.forEach(t),Ufr=r(jAe," \u2014 "),JG=n(jAe,"A",{href:!0});var fct=s(JG);Jfr=r(fct,"TFBertForTokenClassification"),fct.forEach(t),Yfr=r(jAe," (BERT model)"),jAe.forEach(t),Kfr=i(oe),P7=n(oe,"LI",{});var NAe=s(P7);Kpe=n(NAe,"STRONG",{});var mct=s(Kpe);Zfr=r(mct,"camembert"),mct.forEach(t),emr=r(NAe," \u2014 "),YG=n(NAe,"A",{href:!0});var gct=s(YG);omr=r(gct,"TFCamembertForTokenClassification"),gct.forEach(t),rmr=r(NAe," (CamemBERT model)"),NAe.forEach(t),tmr=i(oe),$7=n(oe,"LI",{});var qAe=s($7);Zpe=n(qAe,"STRONG",{});var hct=s(Zpe);amr=r(hct,"convbert"),hct.forEach(t),nmr=r(qAe," \u2014 "),KG=n(qAe,"A",{href:!0});var pct=s(KG);smr=r(pct,"TFConvBertForTokenClassification"),pct.forEach(t),lmr=r(qAe," (ConvBERT model)"),qAe.forEach(t),imr=i(oe),I7=n(oe,"LI",{});var GAe=s(I7);e_e=n(GAe,"STRONG",{});var _ct=s(e_e);dmr=r(_ct,"deberta"),_ct.forEach(t),cmr=r(GAe," \u2014 "),ZG=n(GAe,"A",{href:!0});var uct=s(ZG);fmr=r(uct,"TFDebertaForTokenClassification"),uct.forEach(t),mmr=r(GAe," (DeBERTa model)"),GAe.forEach(t),gmr=i(oe),D7=n(oe,"LI",{});var OAe=s(D7);o_e=n(OAe,"STRONG",{});var bct=s(o_e);hmr=r(bct,"deberta-v2"),bct.forEach(t),pmr=r(OAe," \u2014 "),eO=n(OAe,"A",{href:!0});var vct=s(eO);_mr=r(vct,"TFDebertaV2ForTokenClassification"),vct.forEach(t),umr=r(OAe," (DeBERTa-v2 model)"),OAe.forEach(t),bmr=i(oe),j7=n(oe,"LI",{});var XAe=s(j7);r_e=n(XAe,"STRONG",{});var Tct=s(r_e);vmr=r(Tct,"distilbert"),Tct.forEach(t),Tmr=r(XAe," \u2014 "),oO=n(XAe,"A",{href:!0});var Fct=s(oO);Fmr=r(Fct,"TFDistilBertForTokenClassification"),Fct.forEach(t),Cmr=r(XAe," (DistilBERT model)"),XAe.forEach(t),Mmr=i(oe),N7=n(oe,"LI",{});var VAe=s(N7);t_e=n(VAe,"STRONG",{});var Cct=s(t_e);Emr=r(Cct,"electra"),Cct.forEach(t),ymr=r(VAe," \u2014 "),rO=n(VAe,"A",{href:!0});var Mct=s(rO);wmr=r(Mct,"TFElectraForTokenClassification"),Mct.forEach(t),Amr=r(VAe," (ELECTRA model)"),VAe.forEach(t),Lmr=i(oe),q7=n(oe,"LI",{});var zAe=s(q7);a_e=n(zAe,"STRONG",{});var Ect=s(a_e);Bmr=r(Ect,"flaubert"),Ect.forEach(t),xmr=r(zAe," \u2014 "),tO=n(zAe,"A",{href:!0});var yct=s(tO);kmr=r(yct,"TFFlaubertForTokenClassification"),yct.forEach(t),Rmr=r(zAe," (FlauBERT model)"),zAe.forEach(t),Smr=i(oe),G7=n(oe,"LI",{});var WAe=s(G7);n_e=n(WAe,"STRONG",{});var wct=s(n_e);Pmr=r(wct,"funnel"),wct.forEach(t),$mr=r(WAe," \u2014 "),aO=n(WAe,"A",{href:!0});var Act=s(aO);Imr=r(Act,"TFFunnelForTokenClassification"),Act.forEach(t),Dmr=r(WAe," (Funnel Transformer model)"),WAe.forEach(t),jmr=i(oe),O7=n(oe,"LI",{});var QAe=s(O7);s_e=n(QAe,"STRONG",{});var Lct=s(s_e);Nmr=r(Lct,"layoutlm"),Lct.forEach(t),qmr=r(QAe," \u2014 "),nO=n(QAe,"A",{href:!0});var Bct=s(nO);Gmr=r(Bct,"TFLayoutLMForTokenClassification"),Bct.forEach(t),Omr=r(QAe," (LayoutLM model)"),QAe.forEach(t),Xmr=i(oe),X7=n(oe,"LI",{});var HAe=s(X7);l_e=n(HAe,"STRONG",{});var xct=s(l_e);Vmr=r(xct,"longformer"),xct.forEach(t),zmr=r(HAe," \u2014 "),sO=n(HAe,"A",{href:!0});var kct=s(sO);Wmr=r(kct,"TFLongformerForTokenClassification"),kct.forEach(t),Qmr=r(HAe," (Longformer model)"),HAe.forEach(t),Hmr=i(oe),V7=n(oe,"LI",{});var UAe=s(V7);i_e=n(UAe,"STRONG",{});var Rct=s(i_e);Umr=r(Rct,"mobilebert"),Rct.forEach(t),Jmr=r(UAe," \u2014 "),lO=n(UAe,"A",{href:!0});var Sct=s(lO);Ymr=r(Sct,"TFMobileBertForTokenClassification"),Sct.forEach(t),Kmr=r(UAe," (MobileBERT model)"),UAe.forEach(t),Zmr=i(oe),z7=n(oe,"LI",{});var JAe=s(z7);d_e=n(JAe,"STRONG",{});var Pct=s(d_e);egr=r(Pct,"mpnet"),Pct.forEach(t),ogr=r(JAe," \u2014 "),iO=n(JAe,"A",{href:!0});var $ct=s(iO);rgr=r($ct,"TFMPNetForTokenClassification"),$ct.forEach(t),tgr=r(JAe," (MPNet model)"),JAe.forEach(t),agr=i(oe),W7=n(oe,"LI",{});var YAe=s(W7);c_e=n(YAe,"STRONG",{});var Ict=s(c_e);ngr=r(Ict,"rembert"),Ict.forEach(t),sgr=r(YAe," \u2014 "),dO=n(YAe,"A",{href:!0});var Dct=s(dO);lgr=r(Dct,"TFRemBertForTokenClassification"),Dct.forEach(t),igr=r(YAe," (RemBERT model)"),YAe.forEach(t),dgr=i(oe),Q7=n(oe,"LI",{});var KAe=s(Q7);f_e=n(KAe,"STRONG",{});var jct=s(f_e);cgr=r(jct,"roberta"),jct.forEach(t),fgr=r(KAe," \u2014 "),cO=n(KAe,"A",{href:!0});var Nct=s(cO);mgr=r(Nct,"TFRobertaForTokenClassification"),Nct.forEach(t),ggr=r(KAe," (RoBERTa model)"),KAe.forEach(t),hgr=i(oe),H7=n(oe,"LI",{});var ZAe=s(H7);m_e=n(ZAe,"STRONG",{});var qct=s(m_e);pgr=r(qct,"roformer"),qct.forEach(t),_gr=r(ZAe," \u2014 "),fO=n(ZAe,"A",{href:!0});var Gct=s(fO);ugr=r(Gct,"TFRoFormerForTokenClassification"),Gct.forEach(t),bgr=r(ZAe," (RoFormer model)"),ZAe.forEach(t),vgr=i(oe),U7=n(oe,"LI",{});var eLe=s(U7);g_e=n(eLe,"STRONG",{});var Oct=s(g_e);Tgr=r(Oct,"xlm"),Oct.forEach(t),Fgr=r(eLe," \u2014 "),mO=n(eLe,"A",{href:!0});var Xct=s(mO);Cgr=r(Xct,"TFXLMForTokenClassification"),Xct.forEach(t),Mgr=r(eLe," (XLM model)"),eLe.forEach(t),Egr=i(oe),J7=n(oe,"LI",{});var oLe=s(J7);h_e=n(oLe,"STRONG",{});var Vct=s(h_e);ygr=r(Vct,"xlm-roberta"),Vct.forEach(t),wgr=r(oLe," \u2014 "),gO=n(oLe,"A",{href:!0});var zct=s(gO);Agr=r(zct,"TFXLMRobertaForTokenClassification"),zct.forEach(t),Lgr=r(oLe," (XLM-RoBERTa model)"),oLe.forEach(t),Bgr=i(oe),Y7=n(oe,"LI",{});var rLe=s(Y7);p_e=n(rLe,"STRONG",{});var Wct=s(p_e);xgr=r(Wct,"xlnet"),Wct.forEach(t),kgr=r(rLe," \u2014 "),hO=n(rLe,"A",{href:!0});var Qct=s(hO);Rgr=r(Qct,"TFXLNetForTokenClassification"),Qct.forEach(t),Sgr=r(rLe," (XLNet model)"),rLe.forEach(t),oe.forEach(t),Pgr=i(va),__e=n(va,"P",{});var Hct=s(__e);$gr=r(Hct,"Examples:"),Hct.forEach(t),Igr=i(va),m(l6.$$.fragment,va),va.forEach(t),Ul.forEach(t),RBe=i(d),kc=n(d,"H2",{class:!0});var Gke=s(kc);K7=n(Gke,"A",{id:!0,class:!0,href:!0});var Uct=s(K7);u_e=n(Uct,"SPAN",{});var Jct=s(u_e);m(i6.$$.fragment,Jct),Jct.forEach(t),Uct.forEach(t),Dgr=i(Gke),b_e=n(Gke,"SPAN",{});var Yct=s(b_e);jgr=r(Yct,"TFAutoModelForQuestionAnswering"),Yct.forEach(t),Gke.forEach(t),SBe=i(d),yr=n(d,"DIV",{class:!0});var Yl=s(yr);m(d6.$$.fragment,Yl),Ngr=i(Yl),Rc=n(Yl,"P",{});var $z=s(Rc);qgr=r($z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),v_e=n($z,"CODE",{});var Kct=s(v_e);Ggr=r(Kct,"from_pretrained()"),Kct.forEach(t),Ogr=r($z,"class method or the "),T_e=n($z,"CODE",{});var Zct=s(T_e);Xgr=r(Zct,"from_config()"),Zct.forEach(t),Vgr=r($z,`class
method.`),$z.forEach(t),zgr=i(Yl),c6=n(Yl,"P",{});var Oke=s(c6);Wgr=r(Oke,"This class cannot be instantiated directly using "),F_e=n(Oke,"CODE",{});var eft=s(F_e);Qgr=r(eft,"__init__()"),eft.forEach(t),Hgr=r(Oke," (throws an error)."),Oke.forEach(t),Ugr=i(Yl),bt=n(Yl,"DIV",{class:!0});var Kl=s(bt);m(f6.$$.fragment,Kl),Jgr=i(Kl),C_e=n(Kl,"P",{});var oft=s(C_e);Ygr=r(oft,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oft.forEach(t),Kgr=i(Kl),Sc=n(Kl,"P",{});var Iz=s(Sc);Zgr=r(Iz,`Note:
Loading a model from its configuration file does `),M_e=n(Iz,"STRONG",{});var rft=s(M_e);ehr=r(rft,"not"),rft.forEach(t),ohr=r(Iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),E_e=n(Iz,"CODE",{});var tft=s(E_e);rhr=r(tft,"from_pretrained()"),tft.forEach(t),thr=r(Iz,"to load the model weights."),Iz.forEach(t),ahr=i(Kl),y_e=n(Kl,"P",{});var aft=s(y_e);nhr=r(aft,"Examples:"),aft.forEach(t),shr=i(Kl),m(m6.$$.fragment,Kl),Kl.forEach(t),lhr=i(Yl),Mo=n(Yl,"DIV",{class:!0});var Ta=s(Mo);m(g6.$$.fragment,Ta),ihr=i(Ta),w_e=n(Ta,"P",{});var nft=s(w_e);dhr=r(nft,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nft.forEach(t),chr=i(Ta),Tn=n(Ta,"P",{});var rM=s(Tn);fhr=r(rM,"The model class to instantiate is selected based on the "),A_e=n(rM,"CODE",{});var sft=s(A_e);mhr=r(sft,"model_type"),sft.forEach(t),ghr=r(rM,` property of the config object (either
passed as an argument or loaded from `),L_e=n(rM,"CODE",{});var lft=s(L_e);hhr=r(lft,"pretrained_model_name_or_path"),lft.forEach(t),phr=r(rM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=n(rM,"CODE",{});var ift=s(B_e);_hr=r(ift,"pretrained_model_name_or_path"),ift.forEach(t),uhr=r(rM,":"),rM.forEach(t),bhr=i(Ta),Z=n(Ta,"UL",{});var re=s(Z);Z7=n(re,"LI",{});var tLe=s(Z7);x_e=n(tLe,"STRONG",{});var dft=s(x_e);vhr=r(dft,"albert"),dft.forEach(t),Thr=r(tLe," \u2014 "),pO=n(tLe,"A",{href:!0});var cft=s(pO);Fhr=r(cft,"TFAlbertForQuestionAnswering"),cft.forEach(t),Chr=r(tLe," (ALBERT model)"),tLe.forEach(t),Mhr=i(re),eF=n(re,"LI",{});var aLe=s(eF);k_e=n(aLe,"STRONG",{});var fft=s(k_e);Ehr=r(fft,"bert"),fft.forEach(t),yhr=r(aLe," \u2014 "),_O=n(aLe,"A",{href:!0});var mft=s(_O);whr=r(mft,"TFBertForQuestionAnswering"),mft.forEach(t),Ahr=r(aLe," (BERT model)"),aLe.forEach(t),Lhr=i(re),oF=n(re,"LI",{});var nLe=s(oF);R_e=n(nLe,"STRONG",{});var gft=s(R_e);Bhr=r(gft,"camembert"),gft.forEach(t),xhr=r(nLe," \u2014 "),uO=n(nLe,"A",{href:!0});var hft=s(uO);khr=r(hft,"TFCamembertForQuestionAnswering"),hft.forEach(t),Rhr=r(nLe," (CamemBERT model)"),nLe.forEach(t),Shr=i(re),rF=n(re,"LI",{});var sLe=s(rF);S_e=n(sLe,"STRONG",{});var pft=s(S_e);Phr=r(pft,"convbert"),pft.forEach(t),$hr=r(sLe," \u2014 "),bO=n(sLe,"A",{href:!0});var _ft=s(bO);Ihr=r(_ft,"TFConvBertForQuestionAnswering"),_ft.forEach(t),Dhr=r(sLe," (ConvBERT model)"),sLe.forEach(t),jhr=i(re),tF=n(re,"LI",{});var lLe=s(tF);P_e=n(lLe,"STRONG",{});var uft=s(P_e);Nhr=r(uft,"deberta"),uft.forEach(t),qhr=r(lLe," \u2014 "),vO=n(lLe,"A",{href:!0});var bft=s(vO);Ghr=r(bft,"TFDebertaForQuestionAnswering"),bft.forEach(t),Ohr=r(lLe," (DeBERTa model)"),lLe.forEach(t),Xhr=i(re),aF=n(re,"LI",{});var iLe=s(aF);$_e=n(iLe,"STRONG",{});var vft=s($_e);Vhr=r(vft,"deberta-v2"),vft.forEach(t),zhr=r(iLe," \u2014 "),TO=n(iLe,"A",{href:!0});var Tft=s(TO);Whr=r(Tft,"TFDebertaV2ForQuestionAnswering"),Tft.forEach(t),Qhr=r(iLe," (DeBERTa-v2 model)"),iLe.forEach(t),Hhr=i(re),nF=n(re,"LI",{});var dLe=s(nF);I_e=n(dLe,"STRONG",{});var Fft=s(I_e);Uhr=r(Fft,"distilbert"),Fft.forEach(t),Jhr=r(dLe," \u2014 "),FO=n(dLe,"A",{href:!0});var Cft=s(FO);Yhr=r(Cft,"TFDistilBertForQuestionAnswering"),Cft.forEach(t),Khr=r(dLe," (DistilBERT model)"),dLe.forEach(t),Zhr=i(re),sF=n(re,"LI",{});var cLe=s(sF);D_e=n(cLe,"STRONG",{});var Mft=s(D_e);epr=r(Mft,"electra"),Mft.forEach(t),opr=r(cLe," \u2014 "),CO=n(cLe,"A",{href:!0});var Eft=s(CO);rpr=r(Eft,"TFElectraForQuestionAnswering"),Eft.forEach(t),tpr=r(cLe," (ELECTRA model)"),cLe.forEach(t),apr=i(re),lF=n(re,"LI",{});var fLe=s(lF);j_e=n(fLe,"STRONG",{});var yft=s(j_e);npr=r(yft,"flaubert"),yft.forEach(t),spr=r(fLe," \u2014 "),MO=n(fLe,"A",{href:!0});var wft=s(MO);lpr=r(wft,"TFFlaubertForQuestionAnsweringSimple"),wft.forEach(t),ipr=r(fLe," (FlauBERT model)"),fLe.forEach(t),dpr=i(re),iF=n(re,"LI",{});var mLe=s(iF);N_e=n(mLe,"STRONG",{});var Aft=s(N_e);cpr=r(Aft,"funnel"),Aft.forEach(t),fpr=r(mLe," \u2014 "),EO=n(mLe,"A",{href:!0});var Lft=s(EO);mpr=r(Lft,"TFFunnelForQuestionAnswering"),Lft.forEach(t),gpr=r(mLe," (Funnel Transformer model)"),mLe.forEach(t),hpr=i(re),dF=n(re,"LI",{});var gLe=s(dF);q_e=n(gLe,"STRONG",{});var Bft=s(q_e);ppr=r(Bft,"longformer"),Bft.forEach(t),_pr=r(gLe," \u2014 "),yO=n(gLe,"A",{href:!0});var xft=s(yO);upr=r(xft,"TFLongformerForQuestionAnswering"),xft.forEach(t),bpr=r(gLe," (Longformer model)"),gLe.forEach(t),vpr=i(re),cF=n(re,"LI",{});var hLe=s(cF);G_e=n(hLe,"STRONG",{});var kft=s(G_e);Tpr=r(kft,"mobilebert"),kft.forEach(t),Fpr=r(hLe," \u2014 "),wO=n(hLe,"A",{href:!0});var Rft=s(wO);Cpr=r(Rft,"TFMobileBertForQuestionAnswering"),Rft.forEach(t),Mpr=r(hLe," (MobileBERT model)"),hLe.forEach(t),Epr=i(re),fF=n(re,"LI",{});var pLe=s(fF);O_e=n(pLe,"STRONG",{});var Sft=s(O_e);ypr=r(Sft,"mpnet"),Sft.forEach(t),wpr=r(pLe," \u2014 "),AO=n(pLe,"A",{href:!0});var Pft=s(AO);Apr=r(Pft,"TFMPNetForQuestionAnswering"),Pft.forEach(t),Lpr=r(pLe," (MPNet model)"),pLe.forEach(t),Bpr=i(re),mF=n(re,"LI",{});var _Le=s(mF);X_e=n(_Le,"STRONG",{});var $ft=s(X_e);xpr=r($ft,"rembert"),$ft.forEach(t),kpr=r(_Le," \u2014 "),LO=n(_Le,"A",{href:!0});var Ift=s(LO);Rpr=r(Ift,"TFRemBertForQuestionAnswering"),Ift.forEach(t),Spr=r(_Le," (RemBERT model)"),_Le.forEach(t),Ppr=i(re),gF=n(re,"LI",{});var uLe=s(gF);V_e=n(uLe,"STRONG",{});var Dft=s(V_e);$pr=r(Dft,"roberta"),Dft.forEach(t),Ipr=r(uLe," \u2014 "),BO=n(uLe,"A",{href:!0});var jft=s(BO);Dpr=r(jft,"TFRobertaForQuestionAnswering"),jft.forEach(t),jpr=r(uLe," (RoBERTa model)"),uLe.forEach(t),Npr=i(re),hF=n(re,"LI",{});var bLe=s(hF);z_e=n(bLe,"STRONG",{});var Nft=s(z_e);qpr=r(Nft,"roformer"),Nft.forEach(t),Gpr=r(bLe," \u2014 "),xO=n(bLe,"A",{href:!0});var qft=s(xO);Opr=r(qft,"TFRoFormerForQuestionAnswering"),qft.forEach(t),Xpr=r(bLe," (RoFormer model)"),bLe.forEach(t),Vpr=i(re),pF=n(re,"LI",{});var vLe=s(pF);W_e=n(vLe,"STRONG",{});var Gft=s(W_e);zpr=r(Gft,"xlm"),Gft.forEach(t),Wpr=r(vLe," \u2014 "),kO=n(vLe,"A",{href:!0});var Oft=s(kO);Qpr=r(Oft,"TFXLMForQuestionAnsweringSimple"),Oft.forEach(t),Hpr=r(vLe," (XLM model)"),vLe.forEach(t),Upr=i(re),_F=n(re,"LI",{});var TLe=s(_F);Q_e=n(TLe,"STRONG",{});var Xft=s(Q_e);Jpr=r(Xft,"xlm-roberta"),Xft.forEach(t),Ypr=r(TLe," \u2014 "),RO=n(TLe,"A",{href:!0});var Vft=s(RO);Kpr=r(Vft,"TFXLMRobertaForQuestionAnswering"),Vft.forEach(t),Zpr=r(TLe," (XLM-RoBERTa model)"),TLe.forEach(t),e_r=i(re),uF=n(re,"LI",{});var FLe=s(uF);H_e=n(FLe,"STRONG",{});var zft=s(H_e);o_r=r(zft,"xlnet"),zft.forEach(t),r_r=r(FLe," \u2014 "),SO=n(FLe,"A",{href:!0});var Wft=s(SO);t_r=r(Wft,"TFXLNetForQuestionAnsweringSimple"),Wft.forEach(t),a_r=r(FLe," (XLNet model)"),FLe.forEach(t),re.forEach(t),n_r=i(Ta),U_e=n(Ta,"P",{});var Qft=s(U_e);s_r=r(Qft,"Examples:"),Qft.forEach(t),l_r=i(Ta),m(h6.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),PBe=i(d),Pc=n(d,"H2",{class:!0});var Xke=s(Pc);bF=n(Xke,"A",{id:!0,class:!0,href:!0});var Hft=s(bF);J_e=n(Hft,"SPAN",{});var Uft=s(J_e);m(p6.$$.fragment,Uft),Uft.forEach(t),Hft.forEach(t),i_r=i(Xke),Y_e=n(Xke,"SPAN",{});var Jft=s(Y_e);d_r=r(Jft,"TFAutoModelForVision2Seq"),Jft.forEach(t),Xke.forEach(t),$Be=i(d),wr=n(d,"DIV",{class:!0});var Zl=s(wr);m(_6.$$.fragment,Zl),c_r=i(Zl),$c=n(Zl,"P",{});var Dz=s($c);f_r=r(Dz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),K_e=n(Dz,"CODE",{});var Yft=s(K_e);m_r=r(Yft,"from_pretrained()"),Yft.forEach(t),g_r=r(Dz,"class method or the "),Z_e=n(Dz,"CODE",{});var Kft=s(Z_e);h_r=r(Kft,"from_config()"),Kft.forEach(t),p_r=r(Dz,`class
method.`),Dz.forEach(t),__r=i(Zl),u6=n(Zl,"P",{});var Vke=s(u6);u_r=r(Vke,"This class cannot be instantiated directly using "),eue=n(Vke,"CODE",{});var Zft=s(eue);b_r=r(Zft,"__init__()"),Zft.forEach(t),v_r=r(Vke," (throws an error)."),Vke.forEach(t),T_r=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(b6.$$.fragment,ei),F_r=i(ei),oue=n(ei,"P",{});var emt=s(oue);C_r=r(emt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),emt.forEach(t),M_r=i(ei),Ic=n(ei,"P",{});var jz=s(Ic);E_r=r(jz,`Note:
Loading a model from its configuration file does `),rue=n(jz,"STRONG",{});var omt=s(rue);y_r=r(omt,"not"),omt.forEach(t),w_r=r(jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),tue=n(jz,"CODE",{});var rmt=s(tue);A_r=r(rmt,"from_pretrained()"),rmt.forEach(t),L_r=r(jz,"to load the model weights."),jz.forEach(t),B_r=i(ei),aue=n(ei,"P",{});var tmt=s(aue);x_r=r(tmt,"Examples:"),tmt.forEach(t),k_r=i(ei),m(v6.$$.fragment,ei),ei.forEach(t),R_r=i(Zl),Eo=n(Zl,"DIV",{class:!0});var Fa=s(Eo);m(T6.$$.fragment,Fa),S_r=i(Fa),nue=n(Fa,"P",{});var amt=s(nue);P_r=r(amt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),amt.forEach(t),$_r=i(Fa),Fn=n(Fa,"P",{});var tM=s(Fn);I_r=r(tM,"The model class to instantiate is selected based on the "),sue=n(tM,"CODE",{});var nmt=s(sue);D_r=r(nmt,"model_type"),nmt.forEach(t),j_r=r(tM,` property of the config object (either
passed as an argument or loaded from `),lue=n(tM,"CODE",{});var smt=s(lue);N_r=r(smt,"pretrained_model_name_or_path"),smt.forEach(t),q_r=r(tM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=n(tM,"CODE",{});var lmt=s(iue);G_r=r(lmt,"pretrained_model_name_or_path"),lmt.forEach(t),O_r=r(tM,":"),tM.forEach(t),X_r=i(Fa),due=n(Fa,"UL",{});var imt=s(due);vF=n(imt,"LI",{});var CLe=s(vF);cue=n(CLe,"STRONG",{});var dmt=s(cue);V_r=r(dmt,"vision-encoder-decoder"),dmt.forEach(t),z_r=r(CLe," \u2014 "),PO=n(CLe,"A",{href:!0});var cmt=s(PO);W_r=r(cmt,"TFVisionEncoderDecoderModel"),cmt.forEach(t),Q_r=r(CLe," (Vision Encoder decoder model)"),CLe.forEach(t),imt.forEach(t),H_r=i(Fa),fue=n(Fa,"P",{});var fmt=s(fue);U_r=r(fmt,"Examples:"),fmt.forEach(t),J_r=i(Fa),m(F6.$$.fragment,Fa),Fa.forEach(t),Zl.forEach(t),IBe=i(d),Dc=n(d,"H2",{class:!0});var zke=s(Dc);TF=n(zke,"A",{id:!0,class:!0,href:!0});var mmt=s(TF);mue=n(mmt,"SPAN",{});var gmt=s(mue);m(C6.$$.fragment,gmt),gmt.forEach(t),mmt.forEach(t),Y_r=i(zke),gue=n(zke,"SPAN",{});var hmt=s(gue);K_r=r(hmt,"TFAutoModelForSpeechSeq2Seq"),hmt.forEach(t),zke.forEach(t),DBe=i(d),Ar=n(d,"DIV",{class:!0});var oi=s(Ar);m(M6.$$.fragment,oi),Z_r=i(oi),jc=n(oi,"P",{});var Nz=s(jc);eur=r(Nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hue=n(Nz,"CODE",{});var pmt=s(hue);our=r(pmt,"from_pretrained()"),pmt.forEach(t),rur=r(Nz,"class method or the "),pue=n(Nz,"CODE",{});var _mt=s(pue);tur=r(_mt,"from_config()"),_mt.forEach(t),aur=r(Nz,`class
method.`),Nz.forEach(t),nur=i(oi),E6=n(oi,"P",{});var Wke=s(E6);sur=r(Wke,"This class cannot be instantiated directly using "),_ue=n(Wke,"CODE",{});var umt=s(_ue);lur=r(umt,"__init__()"),umt.forEach(t),iur=r(Wke," (throws an error)."),Wke.forEach(t),dur=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(y6.$$.fragment,ri),cur=i(ri),uue=n(ri,"P",{});var bmt=s(uue);fur=r(bmt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bmt.forEach(t),mur=i(ri),Nc=n(ri,"P",{});var qz=s(Nc);gur=r(qz,`Note:
Loading a model from its configuration file does `),bue=n(qz,"STRONG",{});var vmt=s(bue);hur=r(vmt,"not"),vmt.forEach(t),pur=r(qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),vue=n(qz,"CODE",{});var Tmt=s(vue);_ur=r(Tmt,"from_pretrained()"),Tmt.forEach(t),uur=r(qz,"to load the model weights."),qz.forEach(t),bur=i(ri),Tue=n(ri,"P",{});var Fmt=s(Tue);vur=r(Fmt,"Examples:"),Fmt.forEach(t),Tur=i(ri),m(w6.$$.fragment,ri),ri.forEach(t),Fur=i(oi),yo=n(oi,"DIV",{class:!0});var Ca=s(yo);m(A6.$$.fragment,Ca),Cur=i(Ca),Fue=n(Ca,"P",{});var Cmt=s(Fue);Mur=r(Cmt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Cmt.forEach(t),Eur=i(Ca),Cn=n(Ca,"P",{});var aM=s(Cn);yur=r(aM,"The model class to instantiate is selected based on the "),Cue=n(aM,"CODE",{});var Mmt=s(Cue);wur=r(Mmt,"model_type"),Mmt.forEach(t),Aur=r(aM,` property of the config object (either
passed as an argument or loaded from `),Mue=n(aM,"CODE",{});var Emt=s(Mue);Lur=r(Emt,"pretrained_model_name_or_path"),Emt.forEach(t),Bur=r(aM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=n(aM,"CODE",{});var ymt=s(Eue);xur=r(ymt,"pretrained_model_name_or_path"),ymt.forEach(t),kur=r(aM,":"),aM.forEach(t),Rur=i(Ca),yue=n(Ca,"UL",{});var wmt=s(yue);FF=n(wmt,"LI",{});var MLe=s(FF);wue=n(MLe,"STRONG",{});var Amt=s(wue);Sur=r(Amt,"speech_to_text"),Amt.forEach(t),Pur=r(MLe," \u2014 "),$O=n(MLe,"A",{href:!0});var Lmt=s($O);$ur=r(Lmt,"TFSpeech2TextForConditionalGeneration"),Lmt.forEach(t),Iur=r(MLe," (Speech2Text model)"),MLe.forEach(t),wmt.forEach(t),Dur=i(Ca),Aue=n(Ca,"P",{});var Bmt=s(Aue);jur=r(Bmt,"Examples:"),Bmt.forEach(t),Nur=i(Ca),m(L6.$$.fragment,Ca),Ca.forEach(t),oi.forEach(t),jBe=i(d),qc=n(d,"H2",{class:!0});var Qke=s(qc);CF=n(Qke,"A",{id:!0,class:!0,href:!0});var xmt=s(CF);Lue=n(xmt,"SPAN",{});var kmt=s(Lue);m(B6.$$.fragment,kmt),kmt.forEach(t),xmt.forEach(t),qur=i(Qke),Bue=n(Qke,"SPAN",{});var Rmt=s(Bue);Gur=r(Rmt,"FlaxAutoModel"),Rmt.forEach(t),Qke.forEach(t),NBe=i(d),Lr=n(d,"DIV",{class:!0});var ti=s(Lr);m(x6.$$.fragment,ti),Our=i(ti),Gc=n(ti,"P",{});var Gz=s(Gc);Xur=r(Gz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xue=n(Gz,"CODE",{});var Smt=s(xue);Vur=r(Smt,"from_pretrained()"),Smt.forEach(t),zur=r(Gz,"class method or the "),kue=n(Gz,"CODE",{});var Pmt=s(kue);Wur=r(Pmt,"from_config()"),Pmt.forEach(t),Qur=r(Gz,`class
method.`),Gz.forEach(t),Hur=i(ti),k6=n(ti,"P",{});var Hke=s(k6);Uur=r(Hke,"This class cannot be instantiated directly using "),Rue=n(Hke,"CODE",{});var $mt=s(Rue);Jur=r($mt,"__init__()"),$mt.forEach(t),Yur=r(Hke," (throws an error)."),Hke.forEach(t),Kur=i(ti),Ft=n(ti,"DIV",{class:!0});var ai=s(Ft);m(R6.$$.fragment,ai),Zur=i(ai),Sue=n(ai,"P",{});var Imt=s(Sue);e5r=r(Imt,"Instantiates one of the base model classes of the library from a configuration."),Imt.forEach(t),o5r=i(ai),Oc=n(ai,"P",{});var Oz=s(Oc);r5r=r(Oz,`Note:
Loading a model from its configuration file does `),Pue=n(Oz,"STRONG",{});var Dmt=s(Pue);t5r=r(Dmt,"not"),Dmt.forEach(t),a5r=r(Oz,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ue=n(Oz,"CODE",{});var jmt=s($ue);n5r=r(jmt,"from_pretrained()"),jmt.forEach(t),s5r=r(Oz,"to load the model weights."),Oz.forEach(t),l5r=i(ai),Iue=n(ai,"P",{});var Nmt=s(Iue);i5r=r(Nmt,"Examples:"),Nmt.forEach(t),d5r=i(ai),m(S6.$$.fragment,ai),ai.forEach(t),c5r=i(ti),wo=n(ti,"DIV",{class:!0});var Ma=s(wo);m(P6.$$.fragment,Ma),f5r=i(Ma),Due=n(Ma,"P",{});var qmt=s(Due);m5r=r(qmt,"Instantiate one of the base model classes of the library from a pretrained model."),qmt.forEach(t),g5r=i(Ma),Mn=n(Ma,"P",{});var nM=s(Mn);h5r=r(nM,"The model class to instantiate is selected based on the "),jue=n(nM,"CODE",{});var Gmt=s(jue);p5r=r(Gmt,"model_type"),Gmt.forEach(t),_5r=r(nM,` property of the config object (either
passed as an argument or loaded from `),Nue=n(nM,"CODE",{});var Omt=s(Nue);u5r=r(Omt,"pretrained_model_name_or_path"),Omt.forEach(t),b5r=r(nM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=n(nM,"CODE",{});var Xmt=s(que);v5r=r(Xmt,"pretrained_model_name_or_path"),Xmt.forEach(t),T5r=r(nM,":"),nM.forEach(t),F5r=i(Ma),z=n(Ma,"UL",{});var Q=s(z);MF=n(Q,"LI",{});var ELe=s(MF);Gue=n(ELe,"STRONG",{});var Vmt=s(Gue);C5r=r(Vmt,"albert"),Vmt.forEach(t),M5r=r(ELe," \u2014 "),IO=n(ELe,"A",{href:!0});var zmt=s(IO);E5r=r(zmt,"FlaxAlbertModel"),zmt.forEach(t),y5r=r(ELe," (ALBERT model)"),ELe.forEach(t),w5r=i(Q),EF=n(Q,"LI",{});var yLe=s(EF);Oue=n(yLe,"STRONG",{});var Wmt=s(Oue);A5r=r(Wmt,"bart"),Wmt.forEach(t),L5r=r(yLe," \u2014 "),DO=n(yLe,"A",{href:!0});var Qmt=s(DO);B5r=r(Qmt,"FlaxBartModel"),Qmt.forEach(t),x5r=r(yLe," (BART model)"),yLe.forEach(t),k5r=i(Q),yF=n(Q,"LI",{});var wLe=s(yF);Xue=n(wLe,"STRONG",{});var Hmt=s(Xue);R5r=r(Hmt,"beit"),Hmt.forEach(t),S5r=r(wLe," \u2014 "),jO=n(wLe,"A",{href:!0});var Umt=s(jO);P5r=r(Umt,"FlaxBeitModel"),Umt.forEach(t),$5r=r(wLe," (BEiT model)"),wLe.forEach(t),I5r=i(Q),wF=n(Q,"LI",{});var ALe=s(wF);Vue=n(ALe,"STRONG",{});var Jmt=s(Vue);D5r=r(Jmt,"bert"),Jmt.forEach(t),j5r=r(ALe," \u2014 "),NO=n(ALe,"A",{href:!0});var Ymt=s(NO);N5r=r(Ymt,"FlaxBertModel"),Ymt.forEach(t),q5r=r(ALe," (BERT model)"),ALe.forEach(t),G5r=i(Q),AF=n(Q,"LI",{});var LLe=s(AF);zue=n(LLe,"STRONG",{});var Kmt=s(zue);O5r=r(Kmt,"big_bird"),Kmt.forEach(t),X5r=r(LLe," \u2014 "),qO=n(LLe,"A",{href:!0});var Zmt=s(qO);V5r=r(Zmt,"FlaxBigBirdModel"),Zmt.forEach(t),z5r=r(LLe," (BigBird model)"),LLe.forEach(t),W5r=i(Q),LF=n(Q,"LI",{});var BLe=s(LF);Wue=n(BLe,"STRONG",{});var egt=s(Wue);Q5r=r(egt,"blenderbot"),egt.forEach(t),H5r=r(BLe," \u2014 "),GO=n(BLe,"A",{href:!0});var ogt=s(GO);U5r=r(ogt,"FlaxBlenderbotModel"),ogt.forEach(t),J5r=r(BLe," (Blenderbot model)"),BLe.forEach(t),Y5r=i(Q),BF=n(Q,"LI",{});var xLe=s(BF);Que=n(xLe,"STRONG",{});var rgt=s(Que);K5r=r(rgt,"blenderbot-small"),rgt.forEach(t),Z5r=r(xLe," \u2014 "),OO=n(xLe,"A",{href:!0});var tgt=s(OO);e1r=r(tgt,"FlaxBlenderbotSmallModel"),tgt.forEach(t),o1r=r(xLe," (BlenderbotSmall model)"),xLe.forEach(t),r1r=i(Q),xF=n(Q,"LI",{});var kLe=s(xF);Hue=n(kLe,"STRONG",{});var agt=s(Hue);t1r=r(agt,"clip"),agt.forEach(t),a1r=r(kLe," \u2014 "),XO=n(kLe,"A",{href:!0});var ngt=s(XO);n1r=r(ngt,"FlaxCLIPModel"),ngt.forEach(t),s1r=r(kLe," (CLIP model)"),kLe.forEach(t),l1r=i(Q),kF=n(Q,"LI",{});var RLe=s(kF);Uue=n(RLe,"STRONG",{});var sgt=s(Uue);i1r=r(sgt,"distilbert"),sgt.forEach(t),d1r=r(RLe," \u2014 "),VO=n(RLe,"A",{href:!0});var lgt=s(VO);c1r=r(lgt,"FlaxDistilBertModel"),lgt.forEach(t),f1r=r(RLe," (DistilBERT model)"),RLe.forEach(t),m1r=i(Q),RF=n(Q,"LI",{});var SLe=s(RF);Jue=n(SLe,"STRONG",{});var igt=s(Jue);g1r=r(igt,"electra"),igt.forEach(t),h1r=r(SLe," \u2014 "),zO=n(SLe,"A",{href:!0});var dgt=s(zO);p1r=r(dgt,"FlaxElectraModel"),dgt.forEach(t),_1r=r(SLe," (ELECTRA model)"),SLe.forEach(t),u1r=i(Q),SF=n(Q,"LI",{});var PLe=s(SF);Yue=n(PLe,"STRONG",{});var cgt=s(Yue);b1r=r(cgt,"gpt2"),cgt.forEach(t),v1r=r(PLe," \u2014 "),WO=n(PLe,"A",{href:!0});var fgt=s(WO);T1r=r(fgt,"FlaxGPT2Model"),fgt.forEach(t),F1r=r(PLe," (OpenAI GPT-2 model)"),PLe.forEach(t),C1r=i(Q),PF=n(Q,"LI",{});var $Le=s(PF);Kue=n($Le,"STRONG",{});var mgt=s(Kue);M1r=r(mgt,"gpt_neo"),mgt.forEach(t),E1r=r($Le," \u2014 "),QO=n($Le,"A",{href:!0});var ggt=s(QO);y1r=r(ggt,"FlaxGPTNeoModel"),ggt.forEach(t),w1r=r($Le," (GPT Neo model)"),$Le.forEach(t),A1r=i(Q),$F=n(Q,"LI",{});var ILe=s($F);Zue=n(ILe,"STRONG",{});var hgt=s(Zue);L1r=r(hgt,"gptj"),hgt.forEach(t),B1r=r(ILe," \u2014 "),HO=n(ILe,"A",{href:!0});var pgt=s(HO);x1r=r(pgt,"FlaxGPTJModel"),pgt.forEach(t),k1r=r(ILe," (GPT-J model)"),ILe.forEach(t),R1r=i(Q),IF=n(Q,"LI",{});var DLe=s(IF);e5e=n(DLe,"STRONG",{});var _gt=s(e5e);S1r=r(_gt,"marian"),_gt.forEach(t),P1r=r(DLe," \u2014 "),UO=n(DLe,"A",{href:!0});var ugt=s(UO);$1r=r(ugt,"FlaxMarianModel"),ugt.forEach(t),I1r=r(DLe," (Marian model)"),DLe.forEach(t),D1r=i(Q),DF=n(Q,"LI",{});var jLe=s(DF);o5e=n(jLe,"STRONG",{});var bgt=s(o5e);j1r=r(bgt,"mbart"),bgt.forEach(t),N1r=r(jLe," \u2014 "),JO=n(jLe,"A",{href:!0});var vgt=s(JO);q1r=r(vgt,"FlaxMBartModel"),vgt.forEach(t),G1r=r(jLe," (mBART model)"),jLe.forEach(t),O1r=i(Q),jF=n(Q,"LI",{});var NLe=s(jF);r5e=n(NLe,"STRONG",{});var Tgt=s(r5e);X1r=r(Tgt,"mt5"),Tgt.forEach(t),V1r=r(NLe," \u2014 "),YO=n(NLe,"A",{href:!0});var Fgt=s(YO);z1r=r(Fgt,"FlaxMT5Model"),Fgt.forEach(t),W1r=r(NLe," (mT5 model)"),NLe.forEach(t),Q1r=i(Q),NF=n(Q,"LI",{});var qLe=s(NF);t5e=n(qLe,"STRONG",{});var Cgt=s(t5e);H1r=r(Cgt,"pegasus"),Cgt.forEach(t),U1r=r(qLe," \u2014 "),KO=n(qLe,"A",{href:!0});var Mgt=s(KO);J1r=r(Mgt,"FlaxPegasusModel"),Mgt.forEach(t),Y1r=r(qLe," (Pegasus model)"),qLe.forEach(t),K1r=i(Q),qF=n(Q,"LI",{});var GLe=s(qF);a5e=n(GLe,"STRONG",{});var Egt=s(a5e);Z1r=r(Egt,"roberta"),Egt.forEach(t),ebr=r(GLe," \u2014 "),ZO=n(GLe,"A",{href:!0});var ygt=s(ZO);obr=r(ygt,"FlaxRobertaModel"),ygt.forEach(t),rbr=r(GLe," (RoBERTa model)"),GLe.forEach(t),tbr=i(Q),GF=n(Q,"LI",{});var OLe=s(GF);n5e=n(OLe,"STRONG",{});var wgt=s(n5e);abr=r(wgt,"roformer"),wgt.forEach(t),nbr=r(OLe," \u2014 "),eX=n(OLe,"A",{href:!0});var Agt=s(eX);sbr=r(Agt,"FlaxRoFormerModel"),Agt.forEach(t),lbr=r(OLe," (RoFormer model)"),OLe.forEach(t),ibr=i(Q),OF=n(Q,"LI",{});var XLe=s(OF);s5e=n(XLe,"STRONG",{});var Lgt=s(s5e);dbr=r(Lgt,"t5"),Lgt.forEach(t),cbr=r(XLe," \u2014 "),oX=n(XLe,"A",{href:!0});var Bgt=s(oX);fbr=r(Bgt,"FlaxT5Model"),Bgt.forEach(t),mbr=r(XLe," (T5 model)"),XLe.forEach(t),gbr=i(Q),XF=n(Q,"LI",{});var VLe=s(XF);l5e=n(VLe,"STRONG",{});var xgt=s(l5e);hbr=r(xgt,"vision-text-dual-encoder"),xgt.forEach(t),pbr=r(VLe," \u2014 "),rX=n(VLe,"A",{href:!0});var kgt=s(rX);_br=r(kgt,"FlaxVisionTextDualEncoderModel"),kgt.forEach(t),ubr=r(VLe," (VisionTextDualEncoder model)"),VLe.forEach(t),bbr=i(Q),VF=n(Q,"LI",{});var zLe=s(VF);i5e=n(zLe,"STRONG",{});var Rgt=s(i5e);vbr=r(Rgt,"vit"),Rgt.forEach(t),Tbr=r(zLe," \u2014 "),tX=n(zLe,"A",{href:!0});var Sgt=s(tX);Fbr=r(Sgt,"FlaxViTModel"),Sgt.forEach(t),Cbr=r(zLe," (ViT model)"),zLe.forEach(t),Mbr=i(Q),zF=n(Q,"LI",{});var WLe=s(zF);d5e=n(WLe,"STRONG",{});var Pgt=s(d5e);Ebr=r(Pgt,"wav2vec2"),Pgt.forEach(t),ybr=r(WLe," \u2014 "),aX=n(WLe,"A",{href:!0});var $gt=s(aX);wbr=r($gt,"FlaxWav2Vec2Model"),$gt.forEach(t),Abr=r(WLe," (Wav2Vec2 model)"),WLe.forEach(t),Lbr=i(Q),WF=n(Q,"LI",{});var QLe=s(WF);c5e=n(QLe,"STRONG",{});var Igt=s(c5e);Bbr=r(Igt,"xglm"),Igt.forEach(t),xbr=r(QLe," \u2014 "),nX=n(QLe,"A",{href:!0});var Dgt=s(nX);kbr=r(Dgt,"FlaxXGLMModel"),Dgt.forEach(t),Rbr=r(QLe," (XGLM model)"),QLe.forEach(t),Q.forEach(t),Sbr=i(Ma),f5e=n(Ma,"P",{});var jgt=s(f5e);Pbr=r(jgt,"Examples:"),jgt.forEach(t),$br=i(Ma),m($6.$$.fragment,Ma),Ma.forEach(t),ti.forEach(t),qBe=i(d),Xc=n(d,"H2",{class:!0});var Uke=s(Xc);QF=n(Uke,"A",{id:!0,class:!0,href:!0});var Ngt=s(QF);m5e=n(Ngt,"SPAN",{});var qgt=s(m5e);m(I6.$$.fragment,qgt),qgt.forEach(t),Ngt.forEach(t),Ibr=i(Uke),g5e=n(Uke,"SPAN",{});var Ggt=s(g5e);Dbr=r(Ggt,"FlaxAutoModelForCausalLM"),Ggt.forEach(t),Uke.forEach(t),GBe=i(d),Br=n(d,"DIV",{class:!0});var ni=s(Br);m(D6.$$.fragment,ni),jbr=i(ni),Vc=n(ni,"P",{});var Xz=s(Vc);Nbr=r(Xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),h5e=n(Xz,"CODE",{});var Ogt=s(h5e);qbr=r(Ogt,"from_pretrained()"),Ogt.forEach(t),Gbr=r(Xz,"class method or the "),p5e=n(Xz,"CODE",{});var Xgt=s(p5e);Obr=r(Xgt,"from_config()"),Xgt.forEach(t),Xbr=r(Xz,`class
method.`),Xz.forEach(t),Vbr=i(ni),j6=n(ni,"P",{});var Jke=s(j6);zbr=r(Jke,"This class cannot be instantiated directly using "),_5e=n(Jke,"CODE",{});var Vgt=s(_5e);Wbr=r(Vgt,"__init__()"),Vgt.forEach(t),Qbr=r(Jke," (throws an error)."),Jke.forEach(t),Hbr=i(ni),Ct=n(ni,"DIV",{class:!0});var si=s(Ct);m(N6.$$.fragment,si),Ubr=i(si),u5e=n(si,"P",{});var zgt=s(u5e);Jbr=r(zgt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zgt.forEach(t),Ybr=i(si),zc=n(si,"P",{});var Vz=s(zc);Kbr=r(Vz,`Note:
Loading a model from its configuration file does `),b5e=n(Vz,"STRONG",{});var Wgt=s(b5e);Zbr=r(Wgt,"not"),Wgt.forEach(t),e2r=r(Vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),v5e=n(Vz,"CODE",{});var Qgt=s(v5e);o2r=r(Qgt,"from_pretrained()"),Qgt.forEach(t),r2r=r(Vz,"to load the model weights."),Vz.forEach(t),t2r=i(si),T5e=n(si,"P",{});var Hgt=s(T5e);a2r=r(Hgt,"Examples:"),Hgt.forEach(t),n2r=i(si),m(q6.$$.fragment,si),si.forEach(t),s2r=i(ni),Ao=n(ni,"DIV",{class:!0});var Ea=s(Ao);m(G6.$$.fragment,Ea),l2r=i(Ea),F5e=n(Ea,"P",{});var Ugt=s(F5e);i2r=r(Ugt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ugt.forEach(t),d2r=i(Ea),En=n(Ea,"P",{});var sM=s(En);c2r=r(sM,"The model class to instantiate is selected based on the "),C5e=n(sM,"CODE",{});var Jgt=s(C5e);f2r=r(Jgt,"model_type"),Jgt.forEach(t),m2r=r(sM,` property of the config object (either
passed as an argument or loaded from `),M5e=n(sM,"CODE",{});var Ygt=s(M5e);g2r=r(Ygt,"pretrained_model_name_or_path"),Ygt.forEach(t),h2r=r(sM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=n(sM,"CODE",{});var Kgt=s(E5e);p2r=r(Kgt,"pretrained_model_name_or_path"),Kgt.forEach(t),_2r=r(sM,":"),sM.forEach(t),u2r=i(Ea),yn=n(Ea,"UL",{});var lM=s(yn);HF=n(lM,"LI",{});var HLe=s(HF);y5e=n(HLe,"STRONG",{});var Zgt=s(y5e);b2r=r(Zgt,"gpt2"),Zgt.forEach(t),v2r=r(HLe," \u2014 "),sX=n(HLe,"A",{href:!0});var eht=s(sX);T2r=r(eht,"FlaxGPT2LMHeadModel"),eht.forEach(t),F2r=r(HLe," (OpenAI GPT-2 model)"),HLe.forEach(t),C2r=i(lM),UF=n(lM,"LI",{});var ULe=s(UF);w5e=n(ULe,"STRONG",{});var oht=s(w5e);M2r=r(oht,"gpt_neo"),oht.forEach(t),E2r=r(ULe," \u2014 "),lX=n(ULe,"A",{href:!0});var rht=s(lX);y2r=r(rht,"FlaxGPTNeoForCausalLM"),rht.forEach(t),w2r=r(ULe," (GPT Neo model)"),ULe.forEach(t),A2r=i(lM),JF=n(lM,"LI",{});var JLe=s(JF);A5e=n(JLe,"STRONG",{});var tht=s(A5e);L2r=r(tht,"gptj"),tht.forEach(t),B2r=r(JLe," \u2014 "),iX=n(JLe,"A",{href:!0});var aht=s(iX);x2r=r(aht,"FlaxGPTJForCausalLM"),aht.forEach(t),k2r=r(JLe," (GPT-J model)"),JLe.forEach(t),R2r=i(lM),YF=n(lM,"LI",{});var YLe=s(YF);L5e=n(YLe,"STRONG",{});var nht=s(L5e);S2r=r(nht,"xglm"),nht.forEach(t),P2r=r(YLe," \u2014 "),dX=n(YLe,"A",{href:!0});var sht=s(dX);$2r=r(sht,"FlaxXGLMForCausalLM"),sht.forEach(t),I2r=r(YLe," (XGLM model)"),YLe.forEach(t),lM.forEach(t),D2r=i(Ea),B5e=n(Ea,"P",{});var lht=s(B5e);j2r=r(lht,"Examples:"),lht.forEach(t),N2r=i(Ea),m(O6.$$.fragment,Ea),Ea.forEach(t),ni.forEach(t),OBe=i(d),Wc=n(d,"H2",{class:!0});var Yke=s(Wc);KF=n(Yke,"A",{id:!0,class:!0,href:!0});var iht=s(KF);x5e=n(iht,"SPAN",{});var dht=s(x5e);m(X6.$$.fragment,dht),dht.forEach(t),iht.forEach(t),q2r=i(Yke),k5e=n(Yke,"SPAN",{});var cht=s(k5e);G2r=r(cht,"FlaxAutoModelForPreTraining"),cht.forEach(t),Yke.forEach(t),XBe=i(d),xr=n(d,"DIV",{class:!0});var li=s(xr);m(V6.$$.fragment,li),O2r=i(li),Qc=n(li,"P",{});var zz=s(Qc);X2r=r(zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),R5e=n(zz,"CODE",{});var fht=s(R5e);V2r=r(fht,"from_pretrained()"),fht.forEach(t),z2r=r(zz,"class method or the "),S5e=n(zz,"CODE",{});var mht=s(S5e);W2r=r(mht,"from_config()"),mht.forEach(t),Q2r=r(zz,`class
method.`),zz.forEach(t),H2r=i(li),z6=n(li,"P",{});var Kke=s(z6);U2r=r(Kke,"This class cannot be instantiated directly using "),P5e=n(Kke,"CODE",{});var ght=s(P5e);J2r=r(ght,"__init__()"),ght.forEach(t),Y2r=r(Kke," (throws an error)."),Kke.forEach(t),K2r=i(li),Mt=n(li,"DIV",{class:!0});var ii=s(Mt);m(W6.$$.fragment,ii),Z2r=i(ii),$5e=n(ii,"P",{});var hht=s($5e);evr=r(hht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hht.forEach(t),ovr=i(ii),Hc=n(ii,"P",{});var Wz=s(Hc);rvr=r(Wz,`Note:
Loading a model from its configuration file does `),I5e=n(Wz,"STRONG",{});var pht=s(I5e);tvr=r(pht,"not"),pht.forEach(t),avr=r(Wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),D5e=n(Wz,"CODE",{});var _ht=s(D5e);nvr=r(_ht,"from_pretrained()"),_ht.forEach(t),svr=r(Wz,"to load the model weights."),Wz.forEach(t),lvr=i(ii),j5e=n(ii,"P",{});var uht=s(j5e);ivr=r(uht,"Examples:"),uht.forEach(t),dvr=i(ii),m(Q6.$$.fragment,ii),ii.forEach(t),cvr=i(li),Lo=n(li,"DIV",{class:!0});var ya=s(Lo);m(H6.$$.fragment,ya),fvr=i(ya),N5e=n(ya,"P",{});var bht=s(N5e);mvr=r(bht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),bht.forEach(t),gvr=i(ya),wn=n(ya,"P",{});var iM=s(wn);hvr=r(iM,"The model class to instantiate is selected based on the "),q5e=n(iM,"CODE",{});var vht=s(q5e);pvr=r(vht,"model_type"),vht.forEach(t),_vr=r(iM,` property of the config object (either
passed as an argument or loaded from `),G5e=n(iM,"CODE",{});var Tht=s(G5e);uvr=r(Tht,"pretrained_model_name_or_path"),Tht.forEach(t),bvr=r(iM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O5e=n(iM,"CODE",{});var Fht=s(O5e);vvr=r(Fht,"pretrained_model_name_or_path"),Fht.forEach(t),Tvr=r(iM,":"),iM.forEach(t),Fvr=i(ya),fe=n(ya,"UL",{});var _e=s(fe);ZF=n(_e,"LI",{});var KLe=s(ZF);X5e=n(KLe,"STRONG",{});var Cht=s(X5e);Cvr=r(Cht,"albert"),Cht.forEach(t),Mvr=r(KLe," \u2014 "),cX=n(KLe,"A",{href:!0});var Mht=s(cX);Evr=r(Mht,"FlaxAlbertForPreTraining"),Mht.forEach(t),yvr=r(KLe," (ALBERT model)"),KLe.forEach(t),wvr=i(_e),eC=n(_e,"LI",{});var ZLe=s(eC);V5e=n(ZLe,"STRONG",{});var Eht=s(V5e);Avr=r(Eht,"bart"),Eht.forEach(t),Lvr=r(ZLe," \u2014 "),fX=n(ZLe,"A",{href:!0});var yht=s(fX);Bvr=r(yht,"FlaxBartForConditionalGeneration"),yht.forEach(t),xvr=r(ZLe," (BART model)"),ZLe.forEach(t),kvr=i(_e),oC=n(_e,"LI",{});var e8e=s(oC);z5e=n(e8e,"STRONG",{});var wht=s(z5e);Rvr=r(wht,"bert"),wht.forEach(t),Svr=r(e8e," \u2014 "),mX=n(e8e,"A",{href:!0});var Aht=s(mX);Pvr=r(Aht,"FlaxBertForPreTraining"),Aht.forEach(t),$vr=r(e8e," (BERT model)"),e8e.forEach(t),Ivr=i(_e),rC=n(_e,"LI",{});var o8e=s(rC);W5e=n(o8e,"STRONG",{});var Lht=s(W5e);Dvr=r(Lht,"big_bird"),Lht.forEach(t),jvr=r(o8e," \u2014 "),gX=n(o8e,"A",{href:!0});var Bht=s(gX);Nvr=r(Bht,"FlaxBigBirdForPreTraining"),Bht.forEach(t),qvr=r(o8e," (BigBird model)"),o8e.forEach(t),Gvr=i(_e),tC=n(_e,"LI",{});var r8e=s(tC);Q5e=n(r8e,"STRONG",{});var xht=s(Q5e);Ovr=r(xht,"electra"),xht.forEach(t),Xvr=r(r8e," \u2014 "),hX=n(r8e,"A",{href:!0});var kht=s(hX);Vvr=r(kht,"FlaxElectraForPreTraining"),kht.forEach(t),zvr=r(r8e," (ELECTRA model)"),r8e.forEach(t),Wvr=i(_e),aC=n(_e,"LI",{});var t8e=s(aC);H5e=n(t8e,"STRONG",{});var Rht=s(H5e);Qvr=r(Rht,"mbart"),Rht.forEach(t),Hvr=r(t8e," \u2014 "),pX=n(t8e,"A",{href:!0});var Sht=s(pX);Uvr=r(Sht,"FlaxMBartForConditionalGeneration"),Sht.forEach(t),Jvr=r(t8e," (mBART model)"),t8e.forEach(t),Yvr=i(_e),nC=n(_e,"LI",{});var a8e=s(nC);U5e=n(a8e,"STRONG",{});var Pht=s(U5e);Kvr=r(Pht,"mt5"),Pht.forEach(t),Zvr=r(a8e," \u2014 "),_X=n(a8e,"A",{href:!0});var $ht=s(_X);e0r=r($ht,"FlaxMT5ForConditionalGeneration"),$ht.forEach(t),o0r=r(a8e," (mT5 model)"),a8e.forEach(t),r0r=i(_e),sC=n(_e,"LI",{});var n8e=s(sC);J5e=n(n8e,"STRONG",{});var Iht=s(J5e);t0r=r(Iht,"roberta"),Iht.forEach(t),a0r=r(n8e," \u2014 "),uX=n(n8e,"A",{href:!0});var Dht=s(uX);n0r=r(Dht,"FlaxRobertaForMaskedLM"),Dht.forEach(t),s0r=r(n8e," (RoBERTa model)"),n8e.forEach(t),l0r=i(_e),lC=n(_e,"LI",{});var s8e=s(lC);Y5e=n(s8e,"STRONG",{});var jht=s(Y5e);i0r=r(jht,"roformer"),jht.forEach(t),d0r=r(s8e," \u2014 "),bX=n(s8e,"A",{href:!0});var Nht=s(bX);c0r=r(Nht,"FlaxRoFormerForMaskedLM"),Nht.forEach(t),f0r=r(s8e," (RoFormer model)"),s8e.forEach(t),m0r=i(_e),iC=n(_e,"LI",{});var l8e=s(iC);K5e=n(l8e,"STRONG",{});var qht=s(K5e);g0r=r(qht,"t5"),qht.forEach(t),h0r=r(l8e," \u2014 "),vX=n(l8e,"A",{href:!0});var Ght=s(vX);p0r=r(Ght,"FlaxT5ForConditionalGeneration"),Ght.forEach(t),_0r=r(l8e," (T5 model)"),l8e.forEach(t),u0r=i(_e),dC=n(_e,"LI",{});var i8e=s(dC);Z5e=n(i8e,"STRONG",{});var Oht=s(Z5e);b0r=r(Oht,"wav2vec2"),Oht.forEach(t),v0r=r(i8e," \u2014 "),TX=n(i8e,"A",{href:!0});var Xht=s(TX);T0r=r(Xht,"FlaxWav2Vec2ForPreTraining"),Xht.forEach(t),F0r=r(i8e," (Wav2Vec2 model)"),i8e.forEach(t),_e.forEach(t),C0r=i(ya),e1e=n(ya,"P",{});var Vht=s(e1e);M0r=r(Vht,"Examples:"),Vht.forEach(t),E0r=i(ya),m(U6.$$.fragment,ya),ya.forEach(t),li.forEach(t),VBe=i(d),Uc=n(d,"H2",{class:!0});var Zke=s(Uc);cC=n(Zke,"A",{id:!0,class:!0,href:!0});var zht=s(cC);o1e=n(zht,"SPAN",{});var Wht=s(o1e);m(J6.$$.fragment,Wht),Wht.forEach(t),zht.forEach(t),y0r=i(Zke),r1e=n(Zke,"SPAN",{});var Qht=s(r1e);w0r=r(Qht,"FlaxAutoModelForMaskedLM"),Qht.forEach(t),Zke.forEach(t),zBe=i(d),kr=n(d,"DIV",{class:!0});var di=s(kr);m(Y6.$$.fragment,di),A0r=i(di),Jc=n(di,"P",{});var Qz=s(Jc);L0r=r(Qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),t1e=n(Qz,"CODE",{});var Hht=s(t1e);B0r=r(Hht,"from_pretrained()"),Hht.forEach(t),x0r=r(Qz,"class method or the "),a1e=n(Qz,"CODE",{});var Uht=s(a1e);k0r=r(Uht,"from_config()"),Uht.forEach(t),R0r=r(Qz,`class
method.`),Qz.forEach(t),S0r=i(di),K6=n(di,"P",{});var eRe=s(K6);P0r=r(eRe,"This class cannot be instantiated directly using "),n1e=n(eRe,"CODE",{});var Jht=s(n1e);$0r=r(Jht,"__init__()"),Jht.forEach(t),I0r=r(eRe," (throws an error)."),eRe.forEach(t),D0r=i(di),Et=n(di,"DIV",{class:!0});var ci=s(Et);m(Z6.$$.fragment,ci),j0r=i(ci),s1e=n(ci,"P",{});var Yht=s(s1e);N0r=r(Yht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Yht.forEach(t),q0r=i(ci),Yc=n(ci,"P",{});var Hz=s(Yc);G0r=r(Hz,`Note:
Loading a model from its configuration file does `),l1e=n(Hz,"STRONG",{});var Kht=s(l1e);O0r=r(Kht,"not"),Kht.forEach(t),X0r=r(Hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),i1e=n(Hz,"CODE",{});var Zht=s(i1e);V0r=r(Zht,"from_pretrained()"),Zht.forEach(t),z0r=r(Hz,"to load the model weights."),Hz.forEach(t),W0r=i(ci),d1e=n(ci,"P",{});var ept=s(d1e);Q0r=r(ept,"Examples:"),ept.forEach(t),H0r=i(ci),m(eA.$$.fragment,ci),ci.forEach(t),U0r=i(di),Bo=n(di,"DIV",{class:!0});var wa=s(Bo);m(oA.$$.fragment,wa),J0r=i(wa),c1e=n(wa,"P",{});var opt=s(c1e);Y0r=r(opt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),opt.forEach(t),K0r=i(wa),An=n(wa,"P",{});var dM=s(An);Z0r=r(dM,"The model class to instantiate is selected based on the "),f1e=n(dM,"CODE",{});var rpt=s(f1e);eTr=r(rpt,"model_type"),rpt.forEach(t),oTr=r(dM,` property of the config object (either
passed as an argument or loaded from `),m1e=n(dM,"CODE",{});var tpt=s(m1e);rTr=r(tpt,"pretrained_model_name_or_path"),tpt.forEach(t),tTr=r(dM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=n(dM,"CODE",{});var apt=s(g1e);aTr=r(apt,"pretrained_model_name_or_path"),apt.forEach(t),nTr=r(dM,":"),dM.forEach(t),sTr=i(wa),ve=n(wa,"UL",{});var oo=s(ve);fC=n(oo,"LI",{});var d8e=s(fC);h1e=n(d8e,"STRONG",{});var npt=s(h1e);lTr=r(npt,"albert"),npt.forEach(t),iTr=r(d8e," \u2014 "),FX=n(d8e,"A",{href:!0});var spt=s(FX);dTr=r(spt,"FlaxAlbertForMaskedLM"),spt.forEach(t),cTr=r(d8e," (ALBERT model)"),d8e.forEach(t),fTr=i(oo),mC=n(oo,"LI",{});var c8e=s(mC);p1e=n(c8e,"STRONG",{});var lpt=s(p1e);mTr=r(lpt,"bart"),lpt.forEach(t),gTr=r(c8e," \u2014 "),CX=n(c8e,"A",{href:!0});var ipt=s(CX);hTr=r(ipt,"FlaxBartForConditionalGeneration"),ipt.forEach(t),pTr=r(c8e," (BART model)"),c8e.forEach(t),_Tr=i(oo),gC=n(oo,"LI",{});var f8e=s(gC);_1e=n(f8e,"STRONG",{});var dpt=s(_1e);uTr=r(dpt,"bert"),dpt.forEach(t),bTr=r(f8e," \u2014 "),MX=n(f8e,"A",{href:!0});var cpt=s(MX);vTr=r(cpt,"FlaxBertForMaskedLM"),cpt.forEach(t),TTr=r(f8e," (BERT model)"),f8e.forEach(t),FTr=i(oo),hC=n(oo,"LI",{});var m8e=s(hC);u1e=n(m8e,"STRONG",{});var fpt=s(u1e);CTr=r(fpt,"big_bird"),fpt.forEach(t),MTr=r(m8e," \u2014 "),EX=n(m8e,"A",{href:!0});var mpt=s(EX);ETr=r(mpt,"FlaxBigBirdForMaskedLM"),mpt.forEach(t),yTr=r(m8e," (BigBird model)"),m8e.forEach(t),wTr=i(oo),pC=n(oo,"LI",{});var g8e=s(pC);b1e=n(g8e,"STRONG",{});var gpt=s(b1e);ATr=r(gpt,"distilbert"),gpt.forEach(t),LTr=r(g8e," \u2014 "),yX=n(g8e,"A",{href:!0});var hpt=s(yX);BTr=r(hpt,"FlaxDistilBertForMaskedLM"),hpt.forEach(t),xTr=r(g8e," (DistilBERT model)"),g8e.forEach(t),kTr=i(oo),_C=n(oo,"LI",{});var h8e=s(_C);v1e=n(h8e,"STRONG",{});var ppt=s(v1e);RTr=r(ppt,"electra"),ppt.forEach(t),STr=r(h8e," \u2014 "),wX=n(h8e,"A",{href:!0});var _pt=s(wX);PTr=r(_pt,"FlaxElectraForMaskedLM"),_pt.forEach(t),$Tr=r(h8e," (ELECTRA model)"),h8e.forEach(t),ITr=i(oo),uC=n(oo,"LI",{});var p8e=s(uC);T1e=n(p8e,"STRONG",{});var upt=s(T1e);DTr=r(upt,"mbart"),upt.forEach(t),jTr=r(p8e," \u2014 "),AX=n(p8e,"A",{href:!0});var bpt=s(AX);NTr=r(bpt,"FlaxMBartForConditionalGeneration"),bpt.forEach(t),qTr=r(p8e," (mBART model)"),p8e.forEach(t),GTr=i(oo),bC=n(oo,"LI",{});var _8e=s(bC);F1e=n(_8e,"STRONG",{});var vpt=s(F1e);OTr=r(vpt,"roberta"),vpt.forEach(t),XTr=r(_8e," \u2014 "),LX=n(_8e,"A",{href:!0});var Tpt=s(LX);VTr=r(Tpt,"FlaxRobertaForMaskedLM"),Tpt.forEach(t),zTr=r(_8e," (RoBERTa model)"),_8e.forEach(t),WTr=i(oo),vC=n(oo,"LI",{});var u8e=s(vC);C1e=n(u8e,"STRONG",{});var Fpt=s(C1e);QTr=r(Fpt,"roformer"),Fpt.forEach(t),HTr=r(u8e," \u2014 "),BX=n(u8e,"A",{href:!0});var Cpt=s(BX);UTr=r(Cpt,"FlaxRoFormerForMaskedLM"),Cpt.forEach(t),JTr=r(u8e," (RoFormer model)"),u8e.forEach(t),oo.forEach(t),YTr=i(wa),M1e=n(wa,"P",{});var Mpt=s(M1e);KTr=r(Mpt,"Examples:"),Mpt.forEach(t),ZTr=i(wa),m(rA.$$.fragment,wa),wa.forEach(t),di.forEach(t),WBe=i(d),Kc=n(d,"H2",{class:!0});var oRe=s(Kc);TC=n(oRe,"A",{id:!0,class:!0,href:!0});var Ept=s(TC);E1e=n(Ept,"SPAN",{});var ypt=s(E1e);m(tA.$$.fragment,ypt),ypt.forEach(t),Ept.forEach(t),e7r=i(oRe),y1e=n(oRe,"SPAN",{});var wpt=s(y1e);o7r=r(wpt,"FlaxAutoModelForSeq2SeqLM"),wpt.forEach(t),oRe.forEach(t),QBe=i(d),Rr=n(d,"DIV",{class:!0});var fi=s(Rr);m(aA.$$.fragment,fi),r7r=i(fi),Zc=n(fi,"P",{});var Uz=s(Zc);t7r=r(Uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),w1e=n(Uz,"CODE",{});var Apt=s(w1e);a7r=r(Apt,"from_pretrained()"),Apt.forEach(t),n7r=r(Uz,"class method or the "),A1e=n(Uz,"CODE",{});var Lpt=s(A1e);s7r=r(Lpt,"from_config()"),Lpt.forEach(t),l7r=r(Uz,`class
method.`),Uz.forEach(t),i7r=i(fi),nA=n(fi,"P",{});var rRe=s(nA);d7r=r(rRe,"This class cannot be instantiated directly using "),L1e=n(rRe,"CODE",{});var Bpt=s(L1e);c7r=r(Bpt,"__init__()"),Bpt.forEach(t),f7r=r(rRe," (throws an error)."),rRe.forEach(t),m7r=i(fi),yt=n(fi,"DIV",{class:!0});var mi=s(yt);m(sA.$$.fragment,mi),g7r=i(mi),B1e=n(mi,"P",{});var xpt=s(B1e);h7r=r(xpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xpt.forEach(t),p7r=i(mi),ef=n(mi,"P",{});var Jz=s(ef);_7r=r(Jz,`Note:
Loading a model from its configuration file does `),x1e=n(Jz,"STRONG",{});var kpt=s(x1e);u7r=r(kpt,"not"),kpt.forEach(t),b7r=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),k1e=n(Jz,"CODE",{});var Rpt=s(k1e);v7r=r(Rpt,"from_pretrained()"),Rpt.forEach(t),T7r=r(Jz,"to load the model weights."),Jz.forEach(t),F7r=i(mi),R1e=n(mi,"P",{});var Spt=s(R1e);C7r=r(Spt,"Examples:"),Spt.forEach(t),M7r=i(mi),m(lA.$$.fragment,mi),mi.forEach(t),E7r=i(fi),xo=n(fi,"DIV",{class:!0});var Aa=s(xo);m(iA.$$.fragment,Aa),y7r=i(Aa),S1e=n(Aa,"P",{});var Ppt=s(S1e);w7r=r(Ppt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ppt.forEach(t),A7r=i(Aa),Ln=n(Aa,"P",{});var cM=s(Ln);L7r=r(cM,"The model class to instantiate is selected based on the "),P1e=n(cM,"CODE",{});var $pt=s(P1e);B7r=r($pt,"model_type"),$pt.forEach(t),x7r=r(cM,` property of the config object (either
passed as an argument or loaded from `),$1e=n(cM,"CODE",{});var Ipt=s($1e);k7r=r(Ipt,"pretrained_model_name_or_path"),Ipt.forEach(t),R7r=r(cM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=n(cM,"CODE",{});var Dpt=s(I1e);S7r=r(Dpt,"pretrained_model_name_or_path"),Dpt.forEach(t),P7r=r(cM,":"),cM.forEach(t),$7r=i(Aa),Te=n(Aa,"UL",{});var ro=s(Te);FC=n(ro,"LI",{});var b8e=s(FC);D1e=n(b8e,"STRONG",{});var jpt=s(D1e);I7r=r(jpt,"bart"),jpt.forEach(t),D7r=r(b8e," \u2014 "),xX=n(b8e,"A",{href:!0});var Npt=s(xX);j7r=r(Npt,"FlaxBartForConditionalGeneration"),Npt.forEach(t),N7r=r(b8e," (BART model)"),b8e.forEach(t),q7r=i(ro),CC=n(ro,"LI",{});var v8e=s(CC);j1e=n(v8e,"STRONG",{});var qpt=s(j1e);G7r=r(qpt,"blenderbot"),qpt.forEach(t),O7r=r(v8e," \u2014 "),kX=n(v8e,"A",{href:!0});var Gpt=s(kX);X7r=r(Gpt,"FlaxBlenderbotForConditionalGeneration"),Gpt.forEach(t),V7r=r(v8e," (Blenderbot model)"),v8e.forEach(t),z7r=i(ro),MC=n(ro,"LI",{});var T8e=s(MC);N1e=n(T8e,"STRONG",{});var Opt=s(N1e);W7r=r(Opt,"blenderbot-small"),Opt.forEach(t),Q7r=r(T8e," \u2014 "),RX=n(T8e,"A",{href:!0});var Xpt=s(RX);H7r=r(Xpt,"FlaxBlenderbotSmallForConditionalGeneration"),Xpt.forEach(t),U7r=r(T8e," (BlenderbotSmall model)"),T8e.forEach(t),J7r=i(ro),EC=n(ro,"LI",{});var F8e=s(EC);q1e=n(F8e,"STRONG",{});var Vpt=s(q1e);Y7r=r(Vpt,"encoder-decoder"),Vpt.forEach(t),K7r=r(F8e," \u2014 "),SX=n(F8e,"A",{href:!0});var zpt=s(SX);Z7r=r(zpt,"FlaxEncoderDecoderModel"),zpt.forEach(t),eFr=r(F8e," (Encoder decoder model)"),F8e.forEach(t),oFr=i(ro),yC=n(ro,"LI",{});var C8e=s(yC);G1e=n(C8e,"STRONG",{});var Wpt=s(G1e);rFr=r(Wpt,"marian"),Wpt.forEach(t),tFr=r(C8e," \u2014 "),PX=n(C8e,"A",{href:!0});var Qpt=s(PX);aFr=r(Qpt,"FlaxMarianMTModel"),Qpt.forEach(t),nFr=r(C8e," (Marian model)"),C8e.forEach(t),sFr=i(ro),wC=n(ro,"LI",{});var M8e=s(wC);O1e=n(M8e,"STRONG",{});var Hpt=s(O1e);lFr=r(Hpt,"mbart"),Hpt.forEach(t),iFr=r(M8e," \u2014 "),$X=n(M8e,"A",{href:!0});var Upt=s($X);dFr=r(Upt,"FlaxMBartForConditionalGeneration"),Upt.forEach(t),cFr=r(M8e," (mBART model)"),M8e.forEach(t),fFr=i(ro),AC=n(ro,"LI",{});var E8e=s(AC);X1e=n(E8e,"STRONG",{});var Jpt=s(X1e);mFr=r(Jpt,"mt5"),Jpt.forEach(t),gFr=r(E8e," \u2014 "),IX=n(E8e,"A",{href:!0});var Ypt=s(IX);hFr=r(Ypt,"FlaxMT5ForConditionalGeneration"),Ypt.forEach(t),pFr=r(E8e," (mT5 model)"),E8e.forEach(t),_Fr=i(ro),LC=n(ro,"LI",{});var y8e=s(LC);V1e=n(y8e,"STRONG",{});var Kpt=s(V1e);uFr=r(Kpt,"pegasus"),Kpt.forEach(t),bFr=r(y8e," \u2014 "),DX=n(y8e,"A",{href:!0});var Zpt=s(DX);vFr=r(Zpt,"FlaxPegasusForConditionalGeneration"),Zpt.forEach(t),TFr=r(y8e," (Pegasus model)"),y8e.forEach(t),FFr=i(ro),BC=n(ro,"LI",{});var w8e=s(BC);z1e=n(w8e,"STRONG",{});var e_t=s(z1e);CFr=r(e_t,"t5"),e_t.forEach(t),MFr=r(w8e," \u2014 "),jX=n(w8e,"A",{href:!0});var o_t=s(jX);EFr=r(o_t,"FlaxT5ForConditionalGeneration"),o_t.forEach(t),yFr=r(w8e," (T5 model)"),w8e.forEach(t),ro.forEach(t),wFr=i(Aa),W1e=n(Aa,"P",{});var r_t=s(W1e);AFr=r(r_t,"Examples:"),r_t.forEach(t),LFr=i(Aa),m(dA.$$.fragment,Aa),Aa.forEach(t),fi.forEach(t),HBe=i(d),of=n(d,"H2",{class:!0});var tRe=s(of);xC=n(tRe,"A",{id:!0,class:!0,href:!0});var t_t=s(xC);Q1e=n(t_t,"SPAN",{});var a_t=s(Q1e);m(cA.$$.fragment,a_t),a_t.forEach(t),t_t.forEach(t),BFr=i(tRe),H1e=n(tRe,"SPAN",{});var n_t=s(H1e);xFr=r(n_t,"FlaxAutoModelForSequenceClassification"),n_t.forEach(t),tRe.forEach(t),UBe=i(d),Sr=n(d,"DIV",{class:!0});var gi=s(Sr);m(fA.$$.fragment,gi),kFr=i(gi),rf=n(gi,"P",{});var Yz=s(rf);RFr=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),U1e=n(Yz,"CODE",{});var s_t=s(U1e);SFr=r(s_t,"from_pretrained()"),s_t.forEach(t),PFr=r(Yz,"class method or the "),J1e=n(Yz,"CODE",{});var l_t=s(J1e);$Fr=r(l_t,"from_config()"),l_t.forEach(t),IFr=r(Yz,`class
method.`),Yz.forEach(t),DFr=i(gi),mA=n(gi,"P",{});var aRe=s(mA);jFr=r(aRe,"This class cannot be instantiated directly using "),Y1e=n(aRe,"CODE",{});var i_t=s(Y1e);NFr=r(i_t,"__init__()"),i_t.forEach(t),qFr=r(aRe," (throws an error)."),aRe.forEach(t),GFr=i(gi),wt=n(gi,"DIV",{class:!0});var hi=s(wt);m(gA.$$.fragment,hi),OFr=i(hi),K1e=n(hi,"P",{});var d_t=s(K1e);XFr=r(d_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),d_t.forEach(t),VFr=i(hi),tf=n(hi,"P",{});var Kz=s(tf);zFr=r(Kz,`Note:
Loading a model from its configuration file does `),Z1e=n(Kz,"STRONG",{});var c_t=s(Z1e);WFr=r(c_t,"not"),c_t.forEach(t),QFr=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ebe=n(Kz,"CODE",{});var f_t=s(ebe);HFr=r(f_t,"from_pretrained()"),f_t.forEach(t),UFr=r(Kz,"to load the model weights."),Kz.forEach(t),JFr=i(hi),obe=n(hi,"P",{});var m_t=s(obe);YFr=r(m_t,"Examples:"),m_t.forEach(t),KFr=i(hi),m(hA.$$.fragment,hi),hi.forEach(t),ZFr=i(gi),ko=n(gi,"DIV",{class:!0});var La=s(ko);m(pA.$$.fragment,La),eCr=i(La),rbe=n(La,"P",{});var g_t=s(rbe);oCr=r(g_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),g_t.forEach(t),rCr=i(La),Bn=n(La,"P",{});var fM=s(Bn);tCr=r(fM,"The model class to instantiate is selected based on the "),tbe=n(fM,"CODE",{});var h_t=s(tbe);aCr=r(h_t,"model_type"),h_t.forEach(t),nCr=r(fM,` property of the config object (either
passed as an argument or loaded from `),abe=n(fM,"CODE",{});var p_t=s(abe);sCr=r(p_t,"pretrained_model_name_or_path"),p_t.forEach(t),lCr=r(fM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=n(fM,"CODE",{});var __t=s(nbe);iCr=r(__t,"pretrained_model_name_or_path"),__t.forEach(t),dCr=r(fM,":"),fM.forEach(t),cCr=i(La),Fe=n(La,"UL",{});var to=s(Fe);kC=n(to,"LI",{});var A8e=s(kC);sbe=n(A8e,"STRONG",{});var u_t=s(sbe);fCr=r(u_t,"albert"),u_t.forEach(t),mCr=r(A8e," \u2014 "),NX=n(A8e,"A",{href:!0});var b_t=s(NX);gCr=r(b_t,"FlaxAlbertForSequenceClassification"),b_t.forEach(t),hCr=r(A8e," (ALBERT model)"),A8e.forEach(t),pCr=i(to),RC=n(to,"LI",{});var L8e=s(RC);lbe=n(L8e,"STRONG",{});var v_t=s(lbe);_Cr=r(v_t,"bart"),v_t.forEach(t),uCr=r(L8e," \u2014 "),qX=n(L8e,"A",{href:!0});var T_t=s(qX);bCr=r(T_t,"FlaxBartForSequenceClassification"),T_t.forEach(t),vCr=r(L8e," (BART model)"),L8e.forEach(t),TCr=i(to),SC=n(to,"LI",{});var B8e=s(SC);ibe=n(B8e,"STRONG",{});var F_t=s(ibe);FCr=r(F_t,"bert"),F_t.forEach(t),CCr=r(B8e," \u2014 "),GX=n(B8e,"A",{href:!0});var C_t=s(GX);MCr=r(C_t,"FlaxBertForSequenceClassification"),C_t.forEach(t),ECr=r(B8e," (BERT model)"),B8e.forEach(t),yCr=i(to),PC=n(to,"LI",{});var x8e=s(PC);dbe=n(x8e,"STRONG",{});var M_t=s(dbe);wCr=r(M_t,"big_bird"),M_t.forEach(t),ACr=r(x8e," \u2014 "),OX=n(x8e,"A",{href:!0});var E_t=s(OX);LCr=r(E_t,"FlaxBigBirdForSequenceClassification"),E_t.forEach(t),BCr=r(x8e," (BigBird model)"),x8e.forEach(t),xCr=i(to),$C=n(to,"LI",{});var k8e=s($C);cbe=n(k8e,"STRONG",{});var y_t=s(cbe);kCr=r(y_t,"distilbert"),y_t.forEach(t),RCr=r(k8e," \u2014 "),XX=n(k8e,"A",{href:!0});var w_t=s(XX);SCr=r(w_t,"FlaxDistilBertForSequenceClassification"),w_t.forEach(t),PCr=r(k8e," (DistilBERT model)"),k8e.forEach(t),$Cr=i(to),IC=n(to,"LI",{});var R8e=s(IC);fbe=n(R8e,"STRONG",{});var A_t=s(fbe);ICr=r(A_t,"electra"),A_t.forEach(t),DCr=r(R8e," \u2014 "),VX=n(R8e,"A",{href:!0});var L_t=s(VX);jCr=r(L_t,"FlaxElectraForSequenceClassification"),L_t.forEach(t),NCr=r(R8e," (ELECTRA model)"),R8e.forEach(t),qCr=i(to),DC=n(to,"LI",{});var S8e=s(DC);mbe=n(S8e,"STRONG",{});var B_t=s(mbe);GCr=r(B_t,"mbart"),B_t.forEach(t),OCr=r(S8e," \u2014 "),zX=n(S8e,"A",{href:!0});var x_t=s(zX);XCr=r(x_t,"FlaxMBartForSequenceClassification"),x_t.forEach(t),VCr=r(S8e," (mBART model)"),S8e.forEach(t),zCr=i(to),jC=n(to,"LI",{});var P8e=s(jC);gbe=n(P8e,"STRONG",{});var k_t=s(gbe);WCr=r(k_t,"roberta"),k_t.forEach(t),QCr=r(P8e," \u2014 "),WX=n(P8e,"A",{href:!0});var R_t=s(WX);HCr=r(R_t,"FlaxRobertaForSequenceClassification"),R_t.forEach(t),UCr=r(P8e," (RoBERTa model)"),P8e.forEach(t),JCr=i(to),NC=n(to,"LI",{});var $8e=s(NC);hbe=n($8e,"STRONG",{});var S_t=s(hbe);YCr=r(S_t,"roformer"),S_t.forEach(t),KCr=r($8e," \u2014 "),QX=n($8e,"A",{href:!0});var P_t=s(QX);ZCr=r(P_t,"FlaxRoFormerForSequenceClassification"),P_t.forEach(t),e4r=r($8e," (RoFormer model)"),$8e.forEach(t),to.forEach(t),o4r=i(La),pbe=n(La,"P",{});var $_t=s(pbe);r4r=r($_t,"Examples:"),$_t.forEach(t),t4r=i(La),m(_A.$$.fragment,La),La.forEach(t),gi.forEach(t),JBe=i(d),af=n(d,"H2",{class:!0});var nRe=s(af);qC=n(nRe,"A",{id:!0,class:!0,href:!0});var I_t=s(qC);_be=n(I_t,"SPAN",{});var D_t=s(_be);m(uA.$$.fragment,D_t),D_t.forEach(t),I_t.forEach(t),a4r=i(nRe),ube=n(nRe,"SPAN",{});var j_t=s(ube);n4r=r(j_t,"FlaxAutoModelForQuestionAnswering"),j_t.forEach(t),nRe.forEach(t),YBe=i(d),Pr=n(d,"DIV",{class:!0});var pi=s(Pr);m(bA.$$.fragment,pi),s4r=i(pi),nf=n(pi,"P",{});var Zz=s(nf);l4r=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bbe=n(Zz,"CODE",{});var N_t=s(bbe);i4r=r(N_t,"from_pretrained()"),N_t.forEach(t),d4r=r(Zz,"class method or the "),vbe=n(Zz,"CODE",{});var q_t=s(vbe);c4r=r(q_t,"from_config()"),q_t.forEach(t),f4r=r(Zz,`class
method.`),Zz.forEach(t),m4r=i(pi),vA=n(pi,"P",{});var sRe=s(vA);g4r=r(sRe,"This class cannot be instantiated directly using "),Tbe=n(sRe,"CODE",{});var G_t=s(Tbe);h4r=r(G_t,"__init__()"),G_t.forEach(t),p4r=r(sRe," (throws an error)."),sRe.forEach(t),_4r=i(pi),At=n(pi,"DIV",{class:!0});var _i=s(At);m(TA.$$.fragment,_i),u4r=i(_i),Fbe=n(_i,"P",{});var O_t=s(Fbe);b4r=r(O_t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),O_t.forEach(t),v4r=i(_i),sf=n(_i,"P",{});var eW=s(sf);T4r=r(eW,`Note:
Loading a model from its configuration file does `),Cbe=n(eW,"STRONG",{});var X_t=s(Cbe);F4r=r(X_t,"not"),X_t.forEach(t),C4r=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mbe=n(eW,"CODE",{});var V_t=s(Mbe);M4r=r(V_t,"from_pretrained()"),V_t.forEach(t),E4r=r(eW,"to load the model weights."),eW.forEach(t),y4r=i(_i),Ebe=n(_i,"P",{});var z_t=s(Ebe);w4r=r(z_t,"Examples:"),z_t.forEach(t),A4r=i(_i),m(FA.$$.fragment,_i),_i.forEach(t),L4r=i(pi),Ro=n(pi,"DIV",{class:!0});var Ba=s(Ro);m(CA.$$.fragment,Ba),B4r=i(Ba),ybe=n(Ba,"P",{});var W_t=s(ybe);x4r=r(W_t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),W_t.forEach(t),k4r=i(Ba),xn=n(Ba,"P",{});var mM=s(xn);R4r=r(mM,"The model class to instantiate is selected based on the "),wbe=n(mM,"CODE",{});var Q_t=s(wbe);S4r=r(Q_t,"model_type"),Q_t.forEach(t),P4r=r(mM,` property of the config object (either
passed as an argument or loaded from `),Abe=n(mM,"CODE",{});var H_t=s(Abe);$4r=r(H_t,"pretrained_model_name_or_path"),H_t.forEach(t),I4r=r(mM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=n(mM,"CODE",{});var U_t=s(Lbe);D4r=r(U_t,"pretrained_model_name_or_path"),U_t.forEach(t),j4r=r(mM,":"),mM.forEach(t),N4r=i(Ba),Ce=n(Ba,"UL",{});var ao=s(Ce);GC=n(ao,"LI",{});var I8e=s(GC);Bbe=n(I8e,"STRONG",{});var J_t=s(Bbe);q4r=r(J_t,"albert"),J_t.forEach(t),G4r=r(I8e," \u2014 "),HX=n(I8e,"A",{href:!0});var Y_t=s(HX);O4r=r(Y_t,"FlaxAlbertForQuestionAnswering"),Y_t.forEach(t),X4r=r(I8e," (ALBERT model)"),I8e.forEach(t),V4r=i(ao),OC=n(ao,"LI",{});var D8e=s(OC);xbe=n(D8e,"STRONG",{});var K_t=s(xbe);z4r=r(K_t,"bart"),K_t.forEach(t),W4r=r(D8e," \u2014 "),UX=n(D8e,"A",{href:!0});var Z_t=s(UX);Q4r=r(Z_t,"FlaxBartForQuestionAnswering"),Z_t.forEach(t),H4r=r(D8e," (BART model)"),D8e.forEach(t),U4r=i(ao),XC=n(ao,"LI",{});var j8e=s(XC);kbe=n(j8e,"STRONG",{});var eut=s(kbe);J4r=r(eut,"bert"),eut.forEach(t),Y4r=r(j8e," \u2014 "),JX=n(j8e,"A",{href:!0});var out=s(JX);K4r=r(out,"FlaxBertForQuestionAnswering"),out.forEach(t),Z4r=r(j8e," (BERT model)"),j8e.forEach(t),eMr=i(ao),VC=n(ao,"LI",{});var N8e=s(VC);Rbe=n(N8e,"STRONG",{});var rut=s(Rbe);oMr=r(rut,"big_bird"),rut.forEach(t),rMr=r(N8e," \u2014 "),YX=n(N8e,"A",{href:!0});var tut=s(YX);tMr=r(tut,"FlaxBigBirdForQuestionAnswering"),tut.forEach(t),aMr=r(N8e," (BigBird model)"),N8e.forEach(t),nMr=i(ao),zC=n(ao,"LI",{});var q8e=s(zC);Sbe=n(q8e,"STRONG",{});var aut=s(Sbe);sMr=r(aut,"distilbert"),aut.forEach(t),lMr=r(q8e," \u2014 "),KX=n(q8e,"A",{href:!0});var nut=s(KX);iMr=r(nut,"FlaxDistilBertForQuestionAnswering"),nut.forEach(t),dMr=r(q8e," (DistilBERT model)"),q8e.forEach(t),cMr=i(ao),WC=n(ao,"LI",{});var G8e=s(WC);Pbe=n(G8e,"STRONG",{});var sut=s(Pbe);fMr=r(sut,"electra"),sut.forEach(t),mMr=r(G8e," \u2014 "),ZX=n(G8e,"A",{href:!0});var lut=s(ZX);gMr=r(lut,"FlaxElectraForQuestionAnswering"),lut.forEach(t),hMr=r(G8e," (ELECTRA model)"),G8e.forEach(t),pMr=i(ao),QC=n(ao,"LI",{});var O8e=s(QC);$be=n(O8e,"STRONG",{});var iut=s($be);_Mr=r(iut,"mbart"),iut.forEach(t),uMr=r(O8e," \u2014 "),eV=n(O8e,"A",{href:!0});var dut=s(eV);bMr=r(dut,"FlaxMBartForQuestionAnswering"),dut.forEach(t),vMr=r(O8e," (mBART model)"),O8e.forEach(t),TMr=i(ao),HC=n(ao,"LI",{});var X8e=s(HC);Ibe=n(X8e,"STRONG",{});var cut=s(Ibe);FMr=r(cut,"roberta"),cut.forEach(t),CMr=r(X8e," \u2014 "),oV=n(X8e,"A",{href:!0});var fut=s(oV);MMr=r(fut,"FlaxRobertaForQuestionAnswering"),fut.forEach(t),EMr=r(X8e," (RoBERTa model)"),X8e.forEach(t),yMr=i(ao),UC=n(ao,"LI",{});var V8e=s(UC);Dbe=n(V8e,"STRONG",{});var mut=s(Dbe);wMr=r(mut,"roformer"),mut.forEach(t),AMr=r(V8e," \u2014 "),rV=n(V8e,"A",{href:!0});var gut=s(rV);LMr=r(gut,"FlaxRoFormerForQuestionAnswering"),gut.forEach(t),BMr=r(V8e," (RoFormer model)"),V8e.forEach(t),ao.forEach(t),xMr=i(Ba),jbe=n(Ba,"P",{});var hut=s(jbe);kMr=r(hut,"Examples:"),hut.forEach(t),RMr=i(Ba),m(MA.$$.fragment,Ba),Ba.forEach(t),pi.forEach(t),KBe=i(d),lf=n(d,"H2",{class:!0});var lRe=s(lf);JC=n(lRe,"A",{id:!0,class:!0,href:!0});var put=s(JC);Nbe=n(put,"SPAN",{});var _ut=s(Nbe);m(EA.$$.fragment,_ut),_ut.forEach(t),put.forEach(t),SMr=i(lRe),qbe=n(lRe,"SPAN",{});var uut=s(qbe);PMr=r(uut,"FlaxAutoModelForTokenClassification"),uut.forEach(t),lRe.forEach(t),ZBe=i(d),$r=n(d,"DIV",{class:!0});var ui=s($r);m(yA.$$.fragment,ui),$Mr=i(ui),df=n(ui,"P",{});var oW=s(df);IMr=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Gbe=n(oW,"CODE",{});var but=s(Gbe);DMr=r(but,"from_pretrained()"),but.forEach(t),jMr=r(oW,"class method or the "),Obe=n(oW,"CODE",{});var vut=s(Obe);NMr=r(vut,"from_config()"),vut.forEach(t),qMr=r(oW,`class
method.`),oW.forEach(t),GMr=i(ui),wA=n(ui,"P",{});var iRe=s(wA);OMr=r(iRe,"This class cannot be instantiated directly using "),Xbe=n(iRe,"CODE",{});var Tut=s(Xbe);XMr=r(Tut,"__init__()"),Tut.forEach(t),VMr=r(iRe," (throws an error)."),iRe.forEach(t),zMr=i(ui),Lt=n(ui,"DIV",{class:!0});var bi=s(Lt);m(AA.$$.fragment,bi),WMr=i(bi),Vbe=n(bi,"P",{});var Fut=s(Vbe);QMr=r(Fut,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Fut.forEach(t),HMr=i(bi),cf=n(bi,"P",{});var rW=s(cf);UMr=r(rW,`Note:
Loading a model from its configuration file does `),zbe=n(rW,"STRONG",{});var Cut=s(zbe);JMr=r(Cut,"not"),Cut.forEach(t),YMr=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wbe=n(rW,"CODE",{});var Mut=s(Wbe);KMr=r(Mut,"from_pretrained()"),Mut.forEach(t),ZMr=r(rW,"to load the model weights."),rW.forEach(t),eEr=i(bi),Qbe=n(bi,"P",{});var Eut=s(Qbe);oEr=r(Eut,"Examples:"),Eut.forEach(t),rEr=i(bi),m(LA.$$.fragment,bi),bi.forEach(t),tEr=i(ui),So=n(ui,"DIV",{class:!0});var xa=s(So);m(BA.$$.fragment,xa),aEr=i(xa),Hbe=n(xa,"P",{});var yut=s(Hbe);nEr=r(yut,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),yut.forEach(t),sEr=i(xa),kn=n(xa,"P",{});var gM=s(kn);lEr=r(gM,"The model class to instantiate is selected based on the "),Ube=n(gM,"CODE",{});var wut=s(Ube);iEr=r(wut,"model_type"),wut.forEach(t),dEr=r(gM,` property of the config object (either
passed as an argument or loaded from `),Jbe=n(gM,"CODE",{});var Aut=s(Jbe);cEr=r(Aut,"pretrained_model_name_or_path"),Aut.forEach(t),fEr=r(gM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=n(gM,"CODE",{});var Lut=s(Ybe);mEr=r(Lut,"pretrained_model_name_or_path"),Lut.forEach(t),gEr=r(gM,":"),gM.forEach(t),hEr=i(xa),so=n(xa,"UL",{});var ta=s(so);YC=n(ta,"LI",{});var z8e=s(YC);Kbe=n(z8e,"STRONG",{});var But=s(Kbe);pEr=r(But,"albert"),But.forEach(t),_Er=r(z8e," \u2014 "),tV=n(z8e,"A",{href:!0});var xut=s(tV);uEr=r(xut,"FlaxAlbertForTokenClassification"),xut.forEach(t),bEr=r(z8e," (ALBERT model)"),z8e.forEach(t),vEr=i(ta),KC=n(ta,"LI",{});var W8e=s(KC);Zbe=n(W8e,"STRONG",{});var kut=s(Zbe);TEr=r(kut,"bert"),kut.forEach(t),FEr=r(W8e," \u2014 "),aV=n(W8e,"A",{href:!0});var Rut=s(aV);CEr=r(Rut,"FlaxBertForTokenClassification"),Rut.forEach(t),MEr=r(W8e," (BERT model)"),W8e.forEach(t),EEr=i(ta),ZC=n(ta,"LI",{});var Q8e=s(ZC);e2e=n(Q8e,"STRONG",{});var Sut=s(e2e);yEr=r(Sut,"big_bird"),Sut.forEach(t),wEr=r(Q8e," \u2014 "),nV=n(Q8e,"A",{href:!0});var Put=s(nV);AEr=r(Put,"FlaxBigBirdForTokenClassification"),Put.forEach(t),LEr=r(Q8e," (BigBird model)"),Q8e.forEach(t),BEr=i(ta),e4=n(ta,"LI",{});var H8e=s(e4);o2e=n(H8e,"STRONG",{});var $ut=s(o2e);xEr=r($ut,"distilbert"),$ut.forEach(t),kEr=r(H8e," \u2014 "),sV=n(H8e,"A",{href:!0});var Iut=s(sV);REr=r(Iut,"FlaxDistilBertForTokenClassification"),Iut.forEach(t),SEr=r(H8e," (DistilBERT model)"),H8e.forEach(t),PEr=i(ta),o4=n(ta,"LI",{});var U8e=s(o4);r2e=n(U8e,"STRONG",{});var Dut=s(r2e);$Er=r(Dut,"electra"),Dut.forEach(t),IEr=r(U8e," \u2014 "),lV=n(U8e,"A",{href:!0});var jut=s(lV);DEr=r(jut,"FlaxElectraForTokenClassification"),jut.forEach(t),jEr=r(U8e," (ELECTRA model)"),U8e.forEach(t),NEr=i(ta),r4=n(ta,"LI",{});var J8e=s(r4);t2e=n(J8e,"STRONG",{});var Nut=s(t2e);qEr=r(Nut,"roberta"),Nut.forEach(t),GEr=r(J8e," \u2014 "),iV=n(J8e,"A",{href:!0});var qut=s(iV);OEr=r(qut,"FlaxRobertaForTokenClassification"),qut.forEach(t),XEr=r(J8e," (RoBERTa model)"),J8e.forEach(t),VEr=i(ta),t4=n(ta,"LI",{});var Y8e=s(t4);a2e=n(Y8e,"STRONG",{});var Gut=s(a2e);zEr=r(Gut,"roformer"),Gut.forEach(t),WEr=r(Y8e," \u2014 "),dV=n(Y8e,"A",{href:!0});var Out=s(dV);QEr=r(Out,"FlaxRoFormerForTokenClassification"),Out.forEach(t),HEr=r(Y8e," (RoFormer model)"),Y8e.forEach(t),ta.forEach(t),UEr=i(xa),n2e=n(xa,"P",{});var Xut=s(n2e);JEr=r(Xut,"Examples:"),Xut.forEach(t),YEr=i(xa),m(xA.$$.fragment,xa),xa.forEach(t),ui.forEach(t),exe=i(d),ff=n(d,"H2",{class:!0});var dRe=s(ff);a4=n(dRe,"A",{id:!0,class:!0,href:!0});var Vut=s(a4);s2e=n(Vut,"SPAN",{});var zut=s(s2e);m(kA.$$.fragment,zut),zut.forEach(t),Vut.forEach(t),KEr=i(dRe),l2e=n(dRe,"SPAN",{});var Wut=s(l2e);ZEr=r(Wut,"FlaxAutoModelForMultipleChoice"),Wut.forEach(t),dRe.forEach(t),oxe=i(d),Ir=n(d,"DIV",{class:!0});var vi=s(Ir);m(RA.$$.fragment,vi),e3r=i(vi),mf=n(vi,"P",{});var tW=s(mf);o3r=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),i2e=n(tW,"CODE",{});var Qut=s(i2e);r3r=r(Qut,"from_pretrained()"),Qut.forEach(t),t3r=r(tW,"class method or the "),d2e=n(tW,"CODE",{});var Hut=s(d2e);a3r=r(Hut,"from_config()"),Hut.forEach(t),n3r=r(tW,`class
method.`),tW.forEach(t),s3r=i(vi),SA=n(vi,"P",{});var cRe=s(SA);l3r=r(cRe,"This class cannot be instantiated directly using "),c2e=n(cRe,"CODE",{});var Uut=s(c2e);i3r=r(Uut,"__init__()"),Uut.forEach(t),d3r=r(cRe," (throws an error)."),cRe.forEach(t),c3r=i(vi),Bt=n(vi,"DIV",{class:!0});var Ti=s(Bt);m(PA.$$.fragment,Ti),f3r=i(Ti),f2e=n(Ti,"P",{});var Jut=s(f2e);m3r=r(Jut,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Jut.forEach(t),g3r=i(Ti),gf=n(Ti,"P",{});var aW=s(gf);h3r=r(aW,`Note:
Loading a model from its configuration file does `),m2e=n(aW,"STRONG",{});var Yut=s(m2e);p3r=r(Yut,"not"),Yut.forEach(t),_3r=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),g2e=n(aW,"CODE",{});var Kut=s(g2e);u3r=r(Kut,"from_pretrained()"),Kut.forEach(t),b3r=r(aW,"to load the model weights."),aW.forEach(t),v3r=i(Ti),h2e=n(Ti,"P",{});var Zut=s(h2e);T3r=r(Zut,"Examples:"),Zut.forEach(t),F3r=i(Ti),m($A.$$.fragment,Ti),Ti.forEach(t),C3r=i(vi),Po=n(vi,"DIV",{class:!0});var ka=s(Po);m(IA.$$.fragment,ka),M3r=i(ka),p2e=n(ka,"P",{});var e5t=s(p2e);E3r=r(e5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),e5t.forEach(t),y3r=i(ka),Rn=n(ka,"P",{});var hM=s(Rn);w3r=r(hM,"The model class to instantiate is selected based on the "),_2e=n(hM,"CODE",{});var o5t=s(_2e);A3r=r(o5t,"model_type"),o5t.forEach(t),L3r=r(hM,` property of the config object (either
passed as an argument or loaded from `),u2e=n(hM,"CODE",{});var r5t=s(u2e);B3r=r(r5t,"pretrained_model_name_or_path"),r5t.forEach(t),x3r=r(hM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b2e=n(hM,"CODE",{});var t5t=s(b2e);k3r=r(t5t,"pretrained_model_name_or_path"),t5t.forEach(t),R3r=r(hM,":"),hM.forEach(t),S3r=i(ka),lo=n(ka,"UL",{});var aa=s(lo);n4=n(aa,"LI",{});var K8e=s(n4);v2e=n(K8e,"STRONG",{});var a5t=s(v2e);P3r=r(a5t,"albert"),a5t.forEach(t),$3r=r(K8e," \u2014 "),cV=n(K8e,"A",{href:!0});var n5t=s(cV);I3r=r(n5t,"FlaxAlbertForMultipleChoice"),n5t.forEach(t),D3r=r(K8e," (ALBERT model)"),K8e.forEach(t),j3r=i(aa),s4=n(aa,"LI",{});var Z8e=s(s4);T2e=n(Z8e,"STRONG",{});var s5t=s(T2e);N3r=r(s5t,"bert"),s5t.forEach(t),q3r=r(Z8e," \u2014 "),fV=n(Z8e,"A",{href:!0});var l5t=s(fV);G3r=r(l5t,"FlaxBertForMultipleChoice"),l5t.forEach(t),O3r=r(Z8e," (BERT model)"),Z8e.forEach(t),X3r=i(aa),l4=n(aa,"LI",{});var e9e=s(l4);F2e=n(e9e,"STRONG",{});var i5t=s(F2e);V3r=r(i5t,"big_bird"),i5t.forEach(t),z3r=r(e9e," \u2014 "),mV=n(e9e,"A",{href:!0});var d5t=s(mV);W3r=r(d5t,"FlaxBigBirdForMultipleChoice"),d5t.forEach(t),Q3r=r(e9e," (BigBird model)"),e9e.forEach(t),H3r=i(aa),i4=n(aa,"LI",{});var o9e=s(i4);C2e=n(o9e,"STRONG",{});var c5t=s(C2e);U3r=r(c5t,"distilbert"),c5t.forEach(t),J3r=r(o9e," \u2014 "),gV=n(o9e,"A",{href:!0});var f5t=s(gV);Y3r=r(f5t,"FlaxDistilBertForMultipleChoice"),f5t.forEach(t),K3r=r(o9e," (DistilBERT model)"),o9e.forEach(t),Z3r=i(aa),d4=n(aa,"LI",{});var r9e=s(d4);M2e=n(r9e,"STRONG",{});var m5t=s(M2e);eyr=r(m5t,"electra"),m5t.forEach(t),oyr=r(r9e," \u2014 "),hV=n(r9e,"A",{href:!0});var g5t=s(hV);ryr=r(g5t,"FlaxElectraForMultipleChoice"),g5t.forEach(t),tyr=r(r9e," (ELECTRA model)"),r9e.forEach(t),ayr=i(aa),c4=n(aa,"LI",{});var t9e=s(c4);E2e=n(t9e,"STRONG",{});var h5t=s(E2e);nyr=r(h5t,"roberta"),h5t.forEach(t),syr=r(t9e," \u2014 "),pV=n(t9e,"A",{href:!0});var p5t=s(pV);lyr=r(p5t,"FlaxRobertaForMultipleChoice"),p5t.forEach(t),iyr=r(t9e," (RoBERTa model)"),t9e.forEach(t),dyr=i(aa),f4=n(aa,"LI",{});var a9e=s(f4);y2e=n(a9e,"STRONG",{});var _5t=s(y2e);cyr=r(_5t,"roformer"),_5t.forEach(t),fyr=r(a9e," \u2014 "),_V=n(a9e,"A",{href:!0});var u5t=s(_V);myr=r(u5t,"FlaxRoFormerForMultipleChoice"),u5t.forEach(t),gyr=r(a9e," (RoFormer model)"),a9e.forEach(t),aa.forEach(t),hyr=i(ka),w2e=n(ka,"P",{});var b5t=s(w2e);pyr=r(b5t,"Examples:"),b5t.forEach(t),_yr=i(ka),m(DA.$$.fragment,ka),ka.forEach(t),vi.forEach(t),rxe=i(d),hf=n(d,"H2",{class:!0});var fRe=s(hf);m4=n(fRe,"A",{id:!0,class:!0,href:!0});var v5t=s(m4);A2e=n(v5t,"SPAN",{});var T5t=s(A2e);m(jA.$$.fragment,T5t),T5t.forEach(t),v5t.forEach(t),uyr=i(fRe),L2e=n(fRe,"SPAN",{});var F5t=s(L2e);byr=r(F5t,"FlaxAutoModelForNextSentencePrediction"),F5t.forEach(t),fRe.forEach(t),txe=i(d),Dr=n(d,"DIV",{class:!0});var Fi=s(Dr);m(NA.$$.fragment,Fi),vyr=i(Fi),pf=n(Fi,"P",{});var nW=s(pf);Tyr=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),B2e=n(nW,"CODE",{});var C5t=s(B2e);Fyr=r(C5t,"from_pretrained()"),C5t.forEach(t),Cyr=r(nW,"class method or the "),x2e=n(nW,"CODE",{});var M5t=s(x2e);Myr=r(M5t,"from_config()"),M5t.forEach(t),Eyr=r(nW,`class
method.`),nW.forEach(t),yyr=i(Fi),qA=n(Fi,"P",{});var mRe=s(qA);wyr=r(mRe,"This class cannot be instantiated directly using "),k2e=n(mRe,"CODE",{});var E5t=s(k2e);Ayr=r(E5t,"__init__()"),E5t.forEach(t),Lyr=r(mRe," (throws an error)."),mRe.forEach(t),Byr=i(Fi),xt=n(Fi,"DIV",{class:!0});var Ci=s(xt);m(GA.$$.fragment,Ci),xyr=i(Ci),R2e=n(Ci,"P",{});var y5t=s(R2e);kyr=r(y5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),y5t.forEach(t),Ryr=i(Ci),_f=n(Ci,"P",{});var sW=s(_f);Syr=r(sW,`Note:
Loading a model from its configuration file does `),S2e=n(sW,"STRONG",{});var w5t=s(S2e);Pyr=r(w5t,"not"),w5t.forEach(t),$yr=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),P2e=n(sW,"CODE",{});var A5t=s(P2e);Iyr=r(A5t,"from_pretrained()"),A5t.forEach(t),Dyr=r(sW,"to load the model weights."),sW.forEach(t),jyr=i(Ci),$2e=n(Ci,"P",{});var L5t=s($2e);Nyr=r(L5t,"Examples:"),L5t.forEach(t),qyr=i(Ci),m(OA.$$.fragment,Ci),Ci.forEach(t),Gyr=i(Fi),$o=n(Fi,"DIV",{class:!0});var Ra=s($o);m(XA.$$.fragment,Ra),Oyr=i(Ra),I2e=n(Ra,"P",{});var B5t=s(I2e);Xyr=r(B5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),B5t.forEach(t),Vyr=i(Ra),Sn=n(Ra,"P",{});var pM=s(Sn);zyr=r(pM,"The model class to instantiate is selected based on the "),D2e=n(pM,"CODE",{});var x5t=s(D2e);Wyr=r(x5t,"model_type"),x5t.forEach(t),Qyr=r(pM,` property of the config object (either
passed as an argument or loaded from `),j2e=n(pM,"CODE",{});var k5t=s(j2e);Hyr=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),Uyr=r(pM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=n(pM,"CODE",{});var R5t=s(N2e);Jyr=r(R5t,"pretrained_model_name_or_path"),R5t.forEach(t),Yyr=r(pM,":"),pM.forEach(t),Kyr=i(Ra),q2e=n(Ra,"UL",{});var S5t=s(q2e);g4=n(S5t,"LI",{});var n9e=s(g4);G2e=n(n9e,"STRONG",{});var P5t=s(G2e);Zyr=r(P5t,"bert"),P5t.forEach(t),ewr=r(n9e," \u2014 "),uV=n(n9e,"A",{href:!0});var $5t=s(uV);owr=r($5t,"FlaxBertForNextSentencePrediction"),$5t.forEach(t),rwr=r(n9e," (BERT model)"),n9e.forEach(t),S5t.forEach(t),twr=i(Ra),O2e=n(Ra,"P",{});var I5t=s(O2e);awr=r(I5t,"Examples:"),I5t.forEach(t),nwr=i(Ra),m(VA.$$.fragment,Ra),Ra.forEach(t),Fi.forEach(t),axe=i(d),uf=n(d,"H2",{class:!0});var gRe=s(uf);h4=n(gRe,"A",{id:!0,class:!0,href:!0});var D5t=s(h4);X2e=n(D5t,"SPAN",{});var j5t=s(X2e);m(zA.$$.fragment,j5t),j5t.forEach(t),D5t.forEach(t),swr=i(gRe),V2e=n(gRe,"SPAN",{});var N5t=s(V2e);lwr=r(N5t,"FlaxAutoModelForImageClassification"),N5t.forEach(t),gRe.forEach(t),nxe=i(d),jr=n(d,"DIV",{class:!0});var Mi=s(jr);m(WA.$$.fragment,Mi),iwr=i(Mi),bf=n(Mi,"P",{});var lW=s(bf);dwr=r(lW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),z2e=n(lW,"CODE",{});var q5t=s(z2e);cwr=r(q5t,"from_pretrained()"),q5t.forEach(t),fwr=r(lW,"class method or the "),W2e=n(lW,"CODE",{});var G5t=s(W2e);mwr=r(G5t,"from_config()"),G5t.forEach(t),gwr=r(lW,`class
method.`),lW.forEach(t),hwr=i(Mi),QA=n(Mi,"P",{});var hRe=s(QA);pwr=r(hRe,"This class cannot be instantiated directly using "),Q2e=n(hRe,"CODE",{});var O5t=s(Q2e);_wr=r(O5t,"__init__()"),O5t.forEach(t),uwr=r(hRe," (throws an error)."),hRe.forEach(t),bwr=i(Mi),kt=n(Mi,"DIV",{class:!0});var Ei=s(kt);m(HA.$$.fragment,Ei),vwr=i(Ei),H2e=n(Ei,"P",{});var X5t=s(H2e);Twr=r(X5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),X5t.forEach(t),Fwr=i(Ei),vf=n(Ei,"P",{});var iW=s(vf);Cwr=r(iW,`Note:
Loading a model from its configuration file does `),U2e=n(iW,"STRONG",{});var V5t=s(U2e);Mwr=r(V5t,"not"),V5t.forEach(t),Ewr=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),J2e=n(iW,"CODE",{});var z5t=s(J2e);ywr=r(z5t,"from_pretrained()"),z5t.forEach(t),wwr=r(iW,"to load the model weights."),iW.forEach(t),Awr=i(Ei),Y2e=n(Ei,"P",{});var W5t=s(Y2e);Lwr=r(W5t,"Examples:"),W5t.forEach(t),Bwr=i(Ei),m(UA.$$.fragment,Ei),Ei.forEach(t),xwr=i(Mi),Io=n(Mi,"DIV",{class:!0});var Sa=s(Io);m(JA.$$.fragment,Sa),kwr=i(Sa),K2e=n(Sa,"P",{});var Q5t=s(K2e);Rwr=r(Q5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Q5t.forEach(t),Swr=i(Sa),Pn=n(Sa,"P",{});var _M=s(Pn);Pwr=r(_M,"The model class to instantiate is selected based on the "),Z2e=n(_M,"CODE",{});var H5t=s(Z2e);$wr=r(H5t,"model_type"),H5t.forEach(t),Iwr=r(_M,` property of the config object (either
passed as an argument or loaded from `),eve=n(_M,"CODE",{});var U5t=s(eve);Dwr=r(U5t,"pretrained_model_name_or_path"),U5t.forEach(t),jwr=r(_M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=n(_M,"CODE",{});var J5t=s(ove);Nwr=r(J5t,"pretrained_model_name_or_path"),J5t.forEach(t),qwr=r(_M,":"),_M.forEach(t),Gwr=i(Sa),YA=n(Sa,"UL",{});var pRe=s(YA);p4=n(pRe,"LI",{});var s9e=s(p4);rve=n(s9e,"STRONG",{});var Y5t=s(rve);Owr=r(Y5t,"beit"),Y5t.forEach(t),Xwr=r(s9e," \u2014 "),bV=n(s9e,"A",{href:!0});var K5t=s(bV);Vwr=r(K5t,"FlaxBeitForImageClassification"),K5t.forEach(t),zwr=r(s9e," (BEiT model)"),s9e.forEach(t),Wwr=i(pRe),_4=n(pRe,"LI",{});var l9e=s(_4);tve=n(l9e,"STRONG",{});var Z5t=s(tve);Qwr=r(Z5t,"vit"),Z5t.forEach(t),Hwr=r(l9e," \u2014 "),vV=n(l9e,"A",{href:!0});var e1t=s(vV);Uwr=r(e1t,"FlaxViTForImageClassification"),e1t.forEach(t),Jwr=r(l9e," (ViT model)"),l9e.forEach(t),pRe.forEach(t),Ywr=i(Sa),ave=n(Sa,"P",{});var o1t=s(ave);Kwr=r(o1t,"Examples:"),o1t.forEach(t),Zwr=i(Sa),m(KA.$$.fragment,Sa),Sa.forEach(t),Mi.forEach(t),sxe=i(d),Tf=n(d,"H2",{class:!0});var _Re=s(Tf);u4=n(_Re,"A",{id:!0,class:!0,href:!0});var r1t=s(u4);nve=n(r1t,"SPAN",{});var t1t=s(nve);m(ZA.$$.fragment,t1t),t1t.forEach(t),r1t.forEach(t),e6r=i(_Re),sve=n(_Re,"SPAN",{});var a1t=s(sve);o6r=r(a1t,"FlaxAutoModelForVision2Seq"),a1t.forEach(t),_Re.forEach(t),lxe=i(d),Nr=n(d,"DIV",{class:!0});var yi=s(Nr);m(eL.$$.fragment,yi),r6r=i(yi),Ff=n(yi,"P",{});var dW=s(Ff);t6r=r(dW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),lve=n(dW,"CODE",{});var n1t=s(lve);a6r=r(n1t,"from_pretrained()"),n1t.forEach(t),n6r=r(dW,"class method or the "),ive=n(dW,"CODE",{});var s1t=s(ive);s6r=r(s1t,"from_config()"),s1t.forEach(t),l6r=r(dW,`class
method.`),dW.forEach(t),i6r=i(yi),oL=n(yi,"P",{});var uRe=s(oL);d6r=r(uRe,"This class cannot be instantiated directly using "),dve=n(uRe,"CODE",{});var l1t=s(dve);c6r=r(l1t,"__init__()"),l1t.forEach(t),f6r=r(uRe," (throws an error)."),uRe.forEach(t),m6r=i(yi),Rt=n(yi,"DIV",{class:!0});var wi=s(Rt);m(rL.$$.fragment,wi),g6r=i(wi),cve=n(wi,"P",{});var i1t=s(cve);h6r=r(i1t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),i1t.forEach(t),p6r=i(wi),Cf=n(wi,"P",{});var cW=s(Cf);_6r=r(cW,`Note:
Loading a model from its configuration file does `),fve=n(cW,"STRONG",{});var d1t=s(fve);u6r=r(d1t,"not"),d1t.forEach(t),b6r=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mve=n(cW,"CODE",{});var c1t=s(mve);v6r=r(c1t,"from_pretrained()"),c1t.forEach(t),T6r=r(cW,"to load the model weights."),cW.forEach(t),F6r=i(wi),gve=n(wi,"P",{});var f1t=s(gve);C6r=r(f1t,"Examples:"),f1t.forEach(t),M6r=i(wi),m(tL.$$.fragment,wi),wi.forEach(t),E6r=i(yi),Do=n(yi,"DIV",{class:!0});var Pa=s(Do);m(aL.$$.fragment,Pa),y6r=i(Pa),hve=n(Pa,"P",{});var m1t=s(hve);w6r=r(m1t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),m1t.forEach(t),A6r=i(Pa),$n=n(Pa,"P",{});var uM=s($n);L6r=r(uM,"The model class to instantiate is selected based on the "),pve=n(uM,"CODE",{});var g1t=s(pve);B6r=r(g1t,"model_type"),g1t.forEach(t),x6r=r(uM,` property of the config object (either
passed as an argument or loaded from `),_ve=n(uM,"CODE",{});var h1t=s(_ve);k6r=r(h1t,"pretrained_model_name_or_path"),h1t.forEach(t),R6r=r(uM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=n(uM,"CODE",{});var p1t=s(uve);S6r=r(p1t,"pretrained_model_name_or_path"),p1t.forEach(t),P6r=r(uM,":"),uM.forEach(t),$6r=i(Pa),bve=n(Pa,"UL",{});var _1t=s(bve);b4=n(_1t,"LI",{});var i9e=s(b4);vve=n(i9e,"STRONG",{});var u1t=s(vve);I6r=r(u1t,"vision-encoder-decoder"),u1t.forEach(t),D6r=r(i9e," \u2014 "),TV=n(i9e,"A",{href:!0});var b1t=s(TV);j6r=r(b1t,"FlaxVisionEncoderDecoderModel"),b1t.forEach(t),N6r=r(i9e," (Vision Encoder decoder model)"),i9e.forEach(t),_1t.forEach(t),q6r=i(Pa),Tve=n(Pa,"P",{});var v1t=s(Tve);G6r=r(v1t,"Examples:"),v1t.forEach(t),O6r=i(Pa),m(nL.$$.fragment,Pa),Pa.forEach(t),yi.forEach(t),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(L1t)),c(me,"id","auto-classes"),c(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(me,"href","#auto-classes"),c(ie,"class","relative group"),c(In,"href","/docs/transformers/pr_15507/en/model_doc/auto#transformers.AutoConfig"),c(jn,"href","/docs/transformers/pr_15507/en/model_doc/auto#transformers.AutoModel"),c(Nn,"href","/docs/transformers/pr_15507/en/model_doc/auto#transformers.AutoTokenizer"),c(Pi,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertModel"),c(Lf,"id","extending-the-auto-classes"),c(Lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lf,"href","#extending-the-auto-classes"),c($i,"class","relative group"),c(xf,"id","transformers.AutoConfig"),c(xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xf,"href","#transformers.AutoConfig"),c(Ii,"class","relative group"),c(i8,"href","/docs/transformers/pr_15507/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(d8,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertConfig"),c(c8,"href","/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartConfig"),c(f8,"href","/docs/transformers/pr_15507/en/model_doc/beit#transformers.BeitConfig"),c(m8,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertConfig"),c(g8,"href","/docs/transformers/pr_15507/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(h8,"href","/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdConfig"),c(p8,"href","/docs/transformers/pr_15507/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(_8,"href","/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(u8,"href","/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(b8,"href","/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertConfig"),c(v8,"href","/docs/transformers/pr_15507/en/model_doc/canine#transformers.CanineConfig"),c(T8,"href","/docs/transformers/pr_15507/en/model_doc/clip#transformers.CLIPConfig"),c(F8,"href","/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertConfig"),c(C8,"href","/docs/transformers/pr_15507/en/model_doc/convnext#transformers.ConvNextConfig"),c(M8,"href","/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.CTRLConfig"),c(E8,"href","/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(y8,"href","/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(w8,"href","/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaConfig"),c(A8,"href","/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(L8,"href","/docs/transformers/pr_15507/en/model_doc/deit#transformers.DeiTConfig"),c(B8,"href","/docs/transformers/pr_15507/en/model_doc/detr#transformers.DetrConfig"),c(x8,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertConfig"),c(k8,"href","/docs/transformers/pr_15507/en/model_doc/dpr#transformers.DPRConfig"),c(R8,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraConfig"),c(S8,"href","/docs/transformers/pr_15507/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(P8,"href","/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertConfig"),c($8,"href","/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetConfig"),c(I8,"href","/docs/transformers/pr_15507/en/model_doc/fsmt#transformers.FSMTConfig"),c(D8,"href","/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelConfig"),c(j8,"href","/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2Config"),c(N8,"href","/docs/transformers/pr_15507/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(q8,"href","/docs/transformers/pr_15507/en/model_doc/gptj#transformers.GPTJConfig"),c(G8,"href","/docs/transformers/pr_15507/en/model_doc/hubert#transformers.HubertConfig"),c(O8,"href","/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertConfig"),c(X8,"href","/docs/transformers/pr_15507/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(V8,"href","/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(z8,"href","/docs/transformers/pr_15507/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(W8,"href","/docs/transformers/pr_15507/en/model_doc/led#transformers.LEDConfig"),c(Q8,"href","/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerConfig"),c(H8,"href","/docs/transformers/pr_15507/en/model_doc/luke#transformers.LukeConfig"),c(U8,"href","/docs/transformers/pr_15507/en/model_doc/lxmert#transformers.LxmertConfig"),c(J8,"href","/docs/transformers/pr_15507/en/model_doc/m2m_100#transformers.M2M100Config"),c(Y8,"href","/docs/transformers/pr_15507/en/model_doc/marian#transformers.MarianConfig"),c(K8,"href","/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartConfig"),c(Z8,"href","/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(e9,"href","/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(o9,"href","/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetConfig"),c(r9,"href","/docs/transformers/pr_15507/en/model_doc/mt5#transformers.MT5Config"),c(t9,"href","/docs/transformers/pr_15507/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(a9,"href","/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(n9,"href","/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.PegasusConfig"),c(s9,"href","/docs/transformers/pr_15507/en/model_doc/perceiver#transformers.PerceiverConfig"),c(l9,"href","/docs/transformers/pr_15507/en/model_doc/plbart#transformers.PLBartConfig"),c(i9,"href","/docs/transformers/pr_15507/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(d9,"href","/docs/transformers/pr_15507/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(c9,"href","/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(f9,"href","/docs/transformers/pr_15507/en/model_doc/rag#transformers.RagConfig"),c(m9,"href","/docs/transformers/pr_15507/en/model_doc/realm#transformers.RealmConfig"),c(g9,"href","/docs/transformers/pr_15507/en/model_doc/reformer#transformers.ReformerConfig"),c(h9,"href","/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertConfig"),c(p9,"href","/docs/transformers/pr_15507/en/model_doc/retribert#transformers.RetriBertConfig"),c(_9,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaConfig"),c(u9,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerConfig"),c(b9,"href","/docs/transformers/pr_15507/en/model_doc/segformer#transformers.SegformerConfig"),c(v9,"href","/docs/transformers/pr_15507/en/model_doc/sew#transformers.SEWConfig"),c(T9,"href","/docs/transformers/pr_15507/en/model_doc/sew-d#transformers.SEWDConfig"),c(F9,"href","/docs/transformers/pr_15507/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(C9,"href","/docs/transformers/pr_15507/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(M9,"href","/docs/transformers/pr_15507/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(E9,"href","/docs/transformers/pr_15507/en/model_doc/splinter#transformers.SplinterConfig"),c(y9,"href","/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(w9,"href","/docs/transformers/pr_15507/en/model_doc/swin#transformers.SwinConfig"),c(A9,"href","/docs/transformers/pr_15507/en/model_doc/t5#transformers.T5Config"),c(L9,"href","/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasConfig"),c(B9,"href","/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(x9,"href","/docs/transformers/pr_15507/en/model_doc/trocr#transformers.TrOCRConfig"),c(k9,"href","/docs/transformers/pr_15507/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(R9,"href","/docs/transformers/pr_15507/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(S9,"href","/docs/transformers/pr_15507/en/model_doc/vilt#transformers.ViltConfig"),c(P9,"href","/docs/transformers/pr_15507/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c($9,"href","/docs/transformers/pr_15507/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(I9,"href","/docs/transformers/pr_15507/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(D9,"href","/docs/transformers/pr_15507/en/model_doc/vit#transformers.ViTConfig"),c(j9,"href","/docs/transformers/pr_15507/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(N9,"href","/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(q9,"href","/docs/transformers/pr_15507/en/model_doc/wavlm#transformers.WavLMConfig"),c(G9,"href","/docs/transformers/pr_15507/en/model_doc/xglm#transformers.XGLMConfig"),c(O9,"href","/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMConfig"),c(X9,"href","/docs/transformers/pr_15507/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(V9,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(z9,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(W9,"href","/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetConfig"),c(Q9,"href","/docs/transformers/pr_15507/en/model_doc/yoso#transformers.YosoConfig"),c(fo,"class","docstring"),c(_g,"class","docstring"),c(Xo,"class","docstring"),c(ug,"id","transformers.AutoTokenizer"),c(ug,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ug,"href","#transformers.AutoTokenizer"),c(ji,"class","relative group"),c(H9,"href","/docs/transformers/pr_15507/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(U9,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertTokenizer"),c(J9,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Y9,"href","/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartTokenizer"),c(K9,"href","/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartTokenizerFast"),c(Z9,"href","/docs/transformers/pr_15507/en/model_doc/barthez#transformers.BarthezTokenizer"),c(eB,"href","/docs/transformers/pr_15507/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(oB,"href","/docs/transformers/pr_15507/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(rB,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertTokenizer"),c(tB,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertTokenizerFast"),c(aB,"href","/docs/transformers/pr_15507/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(nB,"href","/docs/transformers/pr_15507/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(sB,"href","/docs/transformers/pr_15507/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(lB,"href","/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(iB,"href","/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(dB,"href","/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(cB,"href","/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(fB,"href","/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(mB,"href","/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(gB,"href","/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(hB,"href","/docs/transformers/pr_15507/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(pB,"href","/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertTokenizer"),c(_B,"href","/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(uB,"href","/docs/transformers/pr_15507/en/model_doc/canine#transformers.CanineTokenizer"),c(bB,"href","/docs/transformers/pr_15507/en/model_doc/clip#transformers.CLIPTokenizer"),c(vB,"href","/docs/transformers/pr_15507/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(TB,"href","/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(FB,"href","/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(CB,"href","/docs/transformers/pr_15507/en/model_doc/cpm#transformers.CpmTokenizer"),c(MB,"href","/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(EB,"href","/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaTokenizer"),c(yB,"href","/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(wB,"href","/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(AB,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(LB,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(BB,"href","/docs/transformers/pr_15507/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(xB,"href","/docs/transformers/pr_15507/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(kB,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraTokenizer"),c(RB,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(SB,"href","/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(PB,"href","/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetTokenizer"),c($B,"href","/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(IB,"href","/docs/transformers/pr_15507/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(DB,"href","/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelTokenizer"),c(jB,"href","/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(NB,"href","/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(qB,"href","/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(GB,"href","/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(OB,"href","/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(XB,"href","/docs/transformers/pr_15507/en/model_doc/herbert#transformers.HerbertTokenizer"),c(VB,"href","/docs/transformers/pr_15507/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(zB,"href","/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(WB,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaTokenizer"),c(QB,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(HB,"href","/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(UB,"href","/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(JB,"href","/docs/transformers/pr_15507/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(YB,"href","/docs/transformers/pr_15507/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(KB,"href","/docs/transformers/pr_15507/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(ZB,"href","/docs/transformers/pr_15507/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(ex,"href","/docs/transformers/pr_15507/en/model_doc/led#transformers.LEDTokenizer"),c(ox,"href","/docs/transformers/pr_15507/en/model_doc/led#transformers.LEDTokenizerFast"),c(rx,"href","/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerTokenizer"),c(tx,"href","/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(ax,"href","/docs/transformers/pr_15507/en/model_doc/luke#transformers.LukeTokenizer"),c(nx,"href","/docs/transformers/pr_15507/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(sx,"href","/docs/transformers/pr_15507/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(lx,"href","/docs/transformers/pr_15507/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(ix,"href","/docs/transformers/pr_15507/en/model_doc/marian#transformers.MarianTokenizer"),c(dx,"href","/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartTokenizer"),c(cx,"href","/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(fx,"href","/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(mx,"href","/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(gx,"href","/docs/transformers/pr_15507/en/model_doc/mluke#transformers.MLukeTokenizer"),c(hx,"href","/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(px,"href","/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(_x,"href","/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(ux,"href","/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(bx,"href","/docs/transformers/pr_15507/en/model_doc/mt5#transformers.T5Tokenizer"),c(vx,"href","/docs/transformers/pr_15507/en/model_doc/mt5#transformers.T5TokenizerFast"),c(Tx,"href","/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(Fx,"href","/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(Cx,"href","/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Mx,"href","/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Ex,"href","/docs/transformers/pr_15507/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(yx,"href","/docs/transformers/pr_15507/en/model_doc/phobert#transformers.PhobertTokenizer"),c(wx,"href","/docs/transformers/pr_15507/en/model_doc/plbart#transformers.PLBartTokenizer"),c(Ax,"href","/docs/transformers/pr_15507/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(Lx,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertTokenizer"),c(Bx,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertTokenizerFast"),c(xx,"href","/docs/transformers/pr_15507/en/model_doc/rag#transformers.RagTokenizer"),c(kx,"href","/docs/transformers/pr_15507/en/model_doc/reformer#transformers.ReformerTokenizer"),c(Rx,"href","/docs/transformers/pr_15507/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Sx,"href","/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Px,"href","/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c($x,"href","/docs/transformers/pr_15507/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Ix,"href","/docs/transformers/pr_15507/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Dx,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jx,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Nx,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(qx,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Gx,"href","/docs/transformers/pr_15507/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Ox,"href","/docs/transformers/pr_15507/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Xx,"href","/docs/transformers/pr_15507/en/model_doc/splinter#transformers.SplinterTokenizer"),c(Vx,"href","/docs/transformers/pr_15507/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(zx,"href","/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(Wx,"href","/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(Qx,"href","/docs/transformers/pr_15507/en/model_doc/mt5#transformers.T5Tokenizer"),c(Hx,"href","/docs/transformers/pr_15507/en/model_doc/mt5#transformers.T5TokenizerFast"),c(Ux,"href","/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasTokenizer"),c(Jx,"href","/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(Yx,"href","/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Kx,"href","/docs/transformers/pr_15507/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(Zx,"href","/docs/transformers/pr_15507/en/model_doc/xglm#transformers.XGLMTokenizer"),c(ek,"href","/docs/transformers/pr_15507/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(ok,"href","/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMTokenizer"),c(rk,"href","/docs/transformers/pr_15507/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(tk,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(ak,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(nk,"href","/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(sk,"href","/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(mo,"class","docstring"),c(Qg,"class","docstring"),c(Vo,"class","docstring"),c(Hg,"id","transformers.AutoFeatureExtractor"),c(Hg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hg,"href","#transformers.AutoFeatureExtractor"),c(Ni,"class","relative group"),c(lk,"href","/docs/transformers/pr_15507/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(ik,"href","/docs/transformers/pr_15507/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(dk,"href","/docs/transformers/pr_15507/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(ck,"href","/docs/transformers/pr_15507/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(fk,"href","/docs/transformers/pr_15507/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(mk,"href","/docs/transformers/pr_15507/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(gk,"href","/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hk,"href","/docs/transformers/pr_15507/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(pk,"href","/docs/transformers/pr_15507/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(_k,"href","/docs/transformers/pr_15507/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(uk,"href","/docs/transformers/pr_15507/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(bk,"href","/docs/transformers/pr_15507/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(vk,"href","/docs/transformers/pr_15507/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Tk,"href","/docs/transformers/pr_15507/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Fk,"href","/docs/transformers/pr_15507/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Ck,"href","/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xe,"class","docstring"),c(fh,"class","docstring"),c(zo,"class","docstring"),c(mh,"id","transformers.AutoProcessor"),c(mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mh,"href","#transformers.AutoProcessor"),c(qi,"class","relative group"),c(Mk,"href","/docs/transformers/pr_15507/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Ek,"href","/docs/transformers/pr_15507/en/model_doc/clip#transformers.CLIPProcessor"),c(yk,"href","/docs/transformers/pr_15507/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(wk,"href","/docs/transformers/pr_15507/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Ak,"href","/docs/transformers/pr_15507/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Lk,"href","/docs/transformers/pr_15507/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Bk,"href","/docs/transformers/pr_15507/en/model_doc/trocr#transformers.TrOCRProcessor"),c(xk,"href","/docs/transformers/pr_15507/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(kk,"href","/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ke,"class","docstring"),c(Ch,"class","docstring"),c(Wo,"class","docstring"),c(Mh,"id","transformers.AutoModel"),c(Mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mh,"href","#transformers.AutoModel"),c(Oi,"class","relative group"),c(qr,"class","docstring"),c(Rk,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertModel"),c(Sk,"href","/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartModel"),c(Pk,"href","/docs/transformers/pr_15507/en/model_doc/beit#transformers.BeitModel"),c($k,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertModel"),c(Ik,"href","/docs/transformers/pr_15507/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(Dk,"href","/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdModel"),c(jk,"href","/docs/transformers/pr_15507/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(Nk,"href","/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(qk,"href","/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Gk,"href","/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertModel"),c(Ok,"href","/docs/transformers/pr_15507/en/model_doc/canine#transformers.CanineModel"),c(Xk,"href","/docs/transformers/pr_15507/en/model_doc/clip#transformers.CLIPModel"),c(Vk,"href","/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertModel"),c(zk,"href","/docs/transformers/pr_15507/en/model_doc/convnext#transformers.ConvNextModel"),c(Wk,"href","/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.CTRLModel"),c(Qk,"href","/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Hk,"href","/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Uk,"href","/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaModel"),c(Jk,"href","/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Yk,"href","/docs/transformers/pr_15507/en/model_doc/deit#transformers.DeiTModel"),c(Kk,"href","/docs/transformers/pr_15507/en/model_doc/detr#transformers.DetrModel"),c(Zk,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertModel"),c(eR,"href","/docs/transformers/pr_15507/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(oR,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraModel"),c(rR,"href","/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertModel"),c(tR,"href","/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetModel"),c(aR,"href","/docs/transformers/pr_15507/en/model_doc/fsmt#transformers.FSMTModel"),c(nR,"href","/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelModel"),c(sR,"href","/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelBaseModel"),c(lR,"href","/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2Model"),c(iR,"href","/docs/transformers/pr_15507/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(dR,"href","/docs/transformers/pr_15507/en/model_doc/gptj#transformers.GPTJModel"),c(cR,"href","/docs/transformers/pr_15507/en/model_doc/hubert#transformers.HubertModel"),c(fR,"href","/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertModel"),c(mR,"href","/docs/transformers/pr_15507/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(gR,"href","/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(hR,"href","/docs/transformers/pr_15507/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(pR,"href","/docs/transformers/pr_15507/en/model_doc/led#transformers.LEDModel"),c(_R,"href","/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerModel"),c(uR,"href","/docs/transformers/pr_15507/en/model_doc/luke#transformers.LukeModel"),c(bR,"href","/docs/transformers/pr_15507/en/model_doc/lxmert#transformers.LxmertModel"),c(vR,"href","/docs/transformers/pr_15507/en/model_doc/m2m_100#transformers.M2M100Model"),c(TR,"href","/docs/transformers/pr_15507/en/model_doc/marian#transformers.MarianModel"),c(FR,"href","/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartModel"),c(CR,"href","/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(MR,"href","/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertModel"),c(ER,"href","/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetModel"),c(yR,"href","/docs/transformers/pr_15507/en/model_doc/mt5#transformers.MT5Model"),c(wR,"href","/docs/transformers/pr_15507/en/model_doc/nystromformer#transformers.NystromformerModel"),c(AR,"href","/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(LR,"href","/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.PegasusModel"),c(BR,"href","/docs/transformers/pr_15507/en/model_doc/perceiver#transformers.PerceiverModel"),c(xR,"href","/docs/transformers/pr_15507/en/model_doc/plbart#transformers.PLBartModel"),c(kR,"href","/docs/transformers/pr_15507/en/model_doc/poolformer#transformers.PoolFormerModel"),c(RR,"href","/docs/transformers/pr_15507/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(SR,"href","/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertModel"),c(PR,"href","/docs/transformers/pr_15507/en/model_doc/reformer#transformers.ReformerModel"),c($R,"href","/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertModel"),c(IR,"href","/docs/transformers/pr_15507/en/model_doc/retribert#transformers.RetriBertModel"),c(DR,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaModel"),c(jR,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerModel"),c(NR,"href","/docs/transformers/pr_15507/en/model_doc/segformer#transformers.SegformerModel"),c(qR,"href","/docs/transformers/pr_15507/en/model_doc/sew#transformers.SEWModel"),c(GR,"href","/docs/transformers/pr_15507/en/model_doc/sew-d#transformers.SEWDModel"),c(OR,"href","/docs/transformers/pr_15507/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(XR,"href","/docs/transformers/pr_15507/en/model_doc/splinter#transformers.SplinterModel"),c(VR,"href","/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(zR,"href","/docs/transformers/pr_15507/en/model_doc/swin#transformers.SwinModel"),c(WR,"href","/docs/transformers/pr_15507/en/model_doc/t5#transformers.T5Model"),c(QR,"href","/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasModel"),c(HR,"href","/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(UR,"href","/docs/transformers/pr_15507/en/model_doc/unispeech#transformers.UniSpeechModel"),c(JR,"href","/docs/transformers/pr_15507/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(YR,"href","/docs/transformers/pr_15507/en/model_doc/vilt#transformers.ViltModel"),c(KR,"href","/docs/transformers/pr_15507/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(ZR,"href","/docs/transformers/pr_15507/en/model_doc/visual_bert#transformers.VisualBertModel"),c(eS,"href","/docs/transformers/pr_15507/en/model_doc/vit#transformers.ViTModel"),c(oS,"href","/docs/transformers/pr_15507/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(rS,"href","/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(tS,"href","/docs/transformers/pr_15507/en/model_doc/wavlm#transformers.WavLMModel"),c(aS,"href","/docs/transformers/pr_15507/en/model_doc/xglm#transformers.XGLMModel"),c(nS,"href","/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMModel"),c(sS,"href","/docs/transformers/pr_15507/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(lS,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(iS,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(dS,"href","/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetModel"),c(cS,"href","/docs/transformers/pr_15507/en/model_doc/yoso#transformers.YosoModel"),c(Re,"class","docstring"),c(Qo,"class","docstring"),c(r_,"id","transformers.AutoModelForPreTraining"),c(r_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r_,"href","#transformers.AutoModelForPreTraining"),c(zi,"class","relative group"),c(Gr,"class","docstring"),c(fS,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertForPreTraining"),c(mS,"href","/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gS,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertForPreTraining"),c(hS,"href","/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(pS,"href","/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(_S,"href","/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(uS,"href","/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(bS,"href","/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(vS,"href","/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(TS,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(FS,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraForPreTraining"),c(CS,"href","/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(MS,"href","/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetForPreTraining"),c(ES,"href","/docs/transformers/pr_15507/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(yS,"href","/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(wS,"href","/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(AS,"href","/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(LS,"href","/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(BS,"href","/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(xS,"href","/docs/transformers/pr_15507/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(kS,"href","/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(RS,"href","/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(SS,"href","/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(PS,"href","/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c($S,"href","/docs/transformers/pr_15507/en/model_doc/retribert#transformers.RetriBertModel"),c(IS,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(DS,"href","/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(jS,"href","/docs/transformers/pr_15507/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(NS,"href","/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(qS,"href","/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(GS,"href","/docs/transformers/pr_15507/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(OS,"href","/docs/transformers/pr_15507/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(XS,"href","/docs/transformers/pr_15507/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(VS,"href","/docs/transformers/pr_15507/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(zS,"href","/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(WS,"href","/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(QS,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(HS,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(US,"href","/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Se,"class","docstring"),c(Ho,"class","docstring"),c(X_,"id","transformers.AutoModelForCausalLM"),c(X_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X_,"href","#transformers.AutoModelForCausalLM"),c(Hi,"class","relative group"),c(Or,"class","docstring"),c(JS,"href","/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartForCausalLM"),c(YS,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertLMHeadModel"),c(KS,"href","/docs/transformers/pr_15507/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(ZS,"href","/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(eP,"href","/docs/transformers/pr_15507/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(oP,"href","/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(rP,"href","/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(tP,"href","/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(aP,"href","/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(nP,"href","/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(sP,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraForCausalLM"),c(lP,"href","/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(iP,"href","/docs/transformers/pr_15507/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(dP,"href","/docs/transformers/pr_15507/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(cP,"href","/docs/transformers/pr_15507/en/model_doc/marian#transformers.MarianForCausalLM"),c(fP,"href","/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartForCausalLM"),c(mP,"href","/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(gP,"href","/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(hP,"href","/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(pP,"href","/docs/transformers/pr_15507/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(_P,"href","/docs/transformers/pr_15507/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(uP,"href","/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(bP,"href","/docs/transformers/pr_15507/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(vP,"href","/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(TP,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(FP,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(CP,"href","/docs/transformers/pr_15507/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(MP,"href","/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(EP,"href","/docs/transformers/pr_15507/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(yP,"href","/docs/transformers/pr_15507/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(wP,"href","/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(AP,"href","/docs/transformers/pr_15507/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(LP,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(BP,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(xP,"href","/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Pe,"class","docstring"),c(Uo,"class","docstring"),c(wu,"id","transformers.AutoModelForMaskedLM"),c(wu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wu,"href","#transformers.AutoModelForMaskedLM"),c(Yi,"class","relative group"),c(Xr,"class","docstring"),c(kP,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(RP,"href","/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(SP,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertForMaskedLM"),c(PP,"href","/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c($P,"href","/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(IP,"href","/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(DP,"href","/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(jP,"href","/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(NP,"href","/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(qP,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(GP,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(OP,"href","/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(XP,"href","/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(VP,"href","/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(zP,"href","/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(WP,"href","/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(QP,"href","/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(HP,"href","/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(UP,"href","/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(JP,"href","/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(YP,"href","/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(KP,"href","/docs/transformers/pr_15507/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(ZP,"href","/docs/transformers/pr_15507/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(e$,"href","/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(o$,"href","/docs/transformers/pr_15507/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(r$,"href","/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(t$,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(a$,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(n$,"href","/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(s$,"href","/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(l$,"href","/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(i$,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(d$,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(c$,"href","/docs/transformers/pr_15507/en/model_doc/yoso#transformers.YosoForMaskedLM"),c($e,"class","docstring"),c(Jo,"class","docstring"),c(d5,"id","transformers.AutoModelForSeq2SeqLM"),c(d5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d5,"href","#transformers.AutoModelForSeq2SeqLM"),c(ed,"class","relative group"),c(Vr,"class","docstring"),c(f$,"href","/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(m$,"href","/docs/transformers/pr_15507/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(g$,"href","/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(h$,"href","/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(p$,"href","/docs/transformers/pr_15507/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(_$,"href","/docs/transformers/pr_15507/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(u$,"href","/docs/transformers/pr_15507/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(b$,"href","/docs/transformers/pr_15507/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(v$,"href","/docs/transformers/pr_15507/en/model_doc/marian#transformers.MarianMTModel"),c(T$,"href","/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(F$,"href","/docs/transformers/pr_15507/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(C$,"href","/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(M$,"href","/docs/transformers/pr_15507/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(E$,"href","/docs/transformers/pr_15507/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(y$,"href","/docs/transformers/pr_15507/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(w$,"href","/docs/transformers/pr_15507/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ie,"class","docstring"),c(Yo,"class","docstring"),c(A5,"id","transformers.AutoModelForSequenceClassification"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.AutoModelForSequenceClassification"),c(td,"class","relative group"),c(zr,"class","docstring"),c(A$,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(L$,"href","/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartForSequenceClassification"),c(B$,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertForSequenceClassification"),c(x$,"href","/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(k$,"href","/docs/transformers/pr_15507/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(R$,"href","/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(S$,"href","/docs/transformers/pr_15507/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(P$,"href","/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c($$,"href","/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(I$,"href","/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(D$,"href","/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(j$,"href","/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(N$,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(q$,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(G$,"href","/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(O$,"href","/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(X$,"href","/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(V$,"href","/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(z$,"href","/docs/transformers/pr_15507/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(W$,"href","/docs/transformers/pr_15507/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(Q$,"href","/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(H$,"href","/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(U$,"href","/docs/transformers/pr_15507/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(J$,"href","/docs/transformers/pr_15507/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Y$,"href","/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(K$,"href","/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(Z$,"href","/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(eI,"href","/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(oI,"href","/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(rI,"href","/docs/transformers/pr_15507/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(tI,"href","/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(aI,"href","/docs/transformers/pr_15507/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(nI,"href","/docs/transformers/pr_15507/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(sI,"href","/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(lI,"href","/docs/transformers/pr_15507/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(iI,"href","/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(dI,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(cI,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(fI,"href","/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(mI,"href","/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(gI,"href","/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(hI,"href","/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(pI,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(_I,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(uI,"href","/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(bI,"href","/docs/transformers/pr_15507/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(De,"class","docstring"),c(Ko,"class","docstring"),c(F1,"id","transformers.AutoModelForMultipleChoice"),c(F1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F1,"href","#transformers.AutoModelForMultipleChoice"),c(sd,"class","relative group"),c(Wr,"class","docstring"),c(vI,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(TI,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertForMultipleChoice"),c(FI,"href","/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(CI,"href","/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(MI,"href","/docs/transformers/pr_15507/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(EI,"href","/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(yI,"href","/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(wI,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(AI,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(LI,"href","/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(BI,"href","/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(xI,"href","/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(kI,"href","/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(RI,"href","/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(SI,"href","/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(PI,"href","/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c($I,"href","/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(II,"href","/docs/transformers/pr_15507/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(DI,"href","/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(jI,"href","/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(NI,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(qI,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(GI,"href","/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(OI,"href","/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(XI,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(VI,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(zI,"href","/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(WI,"href","/docs/transformers/pr_15507/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(je,"class","docstring"),c(Zo,"class","docstring"),c(Y1,"id","transformers.AutoModelForNextSentencePrediction"),c(Y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y1,"href","#transformers.AutoModelForNextSentencePrediction"),c(dd,"class","relative group"),c(Qr,"class","docstring"),c(QI,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(HI,"href","/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(UI,"href","/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(JI,"href","/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(YI,"href","/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(Ne,"class","docstring"),c(er,"class","docstring"),c(ab,"id","transformers.AutoModelForTokenClassification"),c(ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ab,"href","#transformers.AutoModelForTokenClassification"),c(md,"class","relative group"),c(Hr,"class","docstring"),c(KI,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(ZI,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertForTokenClassification"),c(eD,"href","/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(oD,"href","/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(rD,"href","/docs/transformers/pr_15507/en/model_doc/canine#transformers.CanineForTokenClassification"),c(tD,"href","/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(aD,"href","/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(nD,"href","/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(sD,"href","/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(lD,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(iD,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(dD,"href","/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(cD,"href","/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(fD,"href","/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(mD,"href","/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(gD,"href","/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(hD,"href","/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(pD,"href","/docs/transformers/pr_15507/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(_D,"href","/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(uD,"href","/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(bD,"href","/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(vD,"href","/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(TD,"href","/docs/transformers/pr_15507/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(FD,"href","/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(CD,"href","/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(MD,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(ED,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(yD,"href","/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(wD,"href","/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(AD,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(LD,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(BD,"href","/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(xD,"href","/docs/transformers/pr_15507/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(qe,"class","docstring"),c(or,"class","docstring"),c(Nb,"id","transformers.AutoModelForQuestionAnswering"),c(Nb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nb,"href","#transformers.AutoModelForQuestionAnswering"),c(pd,"class","relative group"),c(Ur,"class","docstring"),c(kD,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(RD,"href","/docs/transformers/pr_15507/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(SD,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(PD,"href","/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c($D,"href","/docs/transformers/pr_15507/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(ID,"href","/docs/transformers/pr_15507/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(DD,"href","/docs/transformers/pr_15507/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(jD,"href","/docs/transformers/pr_15507/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(ND,"href","/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(qD,"href","/docs/transformers/pr_15507/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(GD,"href","/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(OD,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(XD,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(VD,"href","/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(zD,"href","/docs/transformers/pr_15507/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(WD,"href","/docs/transformers/pr_15507/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(QD,"href","/docs/transformers/pr_15507/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(HD,"href","/docs/transformers/pr_15507/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(UD,"href","/docs/transformers/pr_15507/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(JD,"href","/docs/transformers/pr_15507/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(YD,"href","/docs/transformers/pr_15507/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(KD,"href","/docs/transformers/pr_15507/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(ZD,"href","/docs/transformers/pr_15507/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(ej,"href","/docs/transformers/pr_15507/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(oj,"href","/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(rj,"href","/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(tj,"href","/docs/transformers/pr_15507/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(aj,"href","/docs/transformers/pr_15507/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(nj,"href","/docs/transformers/pr_15507/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(sj,"href","/docs/transformers/pr_15507/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(lj,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(ij,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(dj,"href","/docs/transformers/pr_15507/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(cj,"href","/docs/transformers/pr_15507/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(fj,"href","/docs/transformers/pr_15507/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(mj,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(gj,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(hj,"href","/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(pj,"href","/docs/transformers/pr_15507/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(Ge,"class","docstring"),c(rr,"class","docstring"),c(w2,"id","transformers.AutoModelForTableQuestionAnswering"),c(w2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w2,"href","#transformers.AutoModelForTableQuestionAnswering"),c(bd,"class","relative group"),c(Jr,"class","docstring"),c(_j,"href","/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(Oe,"class","docstring"),c(tr,"class","docstring"),c(B2,"id","transformers.AutoModelForImageClassification"),c(B2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B2,"href","#transformers.AutoModelForImageClassification"),c(Fd,"class","relative group"),c(Yr,"class","docstring"),c(uj,"href","/docs/transformers/pr_15507/en/model_doc/beit#transformers.BeitForImageClassification"),c(bj,"href","/docs/transformers/pr_15507/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(vj,"href","/docs/transformers/pr_15507/en/model_doc/deit#transformers.DeiTForImageClassification"),c(Tj,"href","/docs/transformers/pr_15507/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(Fj,"href","/docs/transformers/pr_15507/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(Cj,"href","/docs/transformers/pr_15507/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(Mj,"href","/docs/transformers/pr_15507/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(Ej,"href","/docs/transformers/pr_15507/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(yj,"href","/docs/transformers/pr_15507/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(wj,"href","/docs/transformers/pr_15507/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(Aj,"href","/docs/transformers/pr_15507/en/model_doc/swin#transformers.SwinForImageClassification"),c(Lj,"href","/docs/transformers/pr_15507/en/model_doc/vit#transformers.ViTForImageClassification"),c(Xe,"class","docstring"),c(ar,"class","docstring"),c(j2,"id","transformers.AutoModelForVision2Seq"),c(j2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j2,"href","#transformers.AutoModelForVision2Seq"),c(Ed,"class","relative group"),c(Kr,"class","docstring"),c(Bj,"href","/docs/transformers/pr_15507/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Ve,"class","docstring"),c(nr,"class","docstring"),c(G2,"id","transformers.AutoModelForAudioClassification"),c(G2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G2,"href","#transformers.AutoModelForAudioClassification"),c(Ad,"class","relative group"),c(Zr,"class","docstring"),c(xj,"href","/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(kj,"href","/docs/transformers/pr_15507/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_15507/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(Sj,"href","/docs/transformers/pr_15507/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_15507/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c($j,"href","/docs/transformers/pr_15507/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_15507/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(ze,"class","docstring"),c(sr,"class","docstring"),c(Y2,"id","transformers.AutoModelForAudioFrameClassification"),c(Y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y2,"href","#transformers.AutoModelForAudioFrameClassification"),c(xd,"class","relative group"),c(et,"class","docstring"),c(jj,"href","/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(Nj,"href","/docs/transformers/pr_15507/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(qj,"href","/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Gj,"href","/docs/transformers/pr_15507/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(We,"class","docstring"),c(lr,"class","docstring"),c(tv,"id","transformers.AutoModelForCTC"),c(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tv,"href","#transformers.AutoModelForCTC"),c(Sd,"class","relative group"),c(ot,"class","docstring"),c(Oj,"href","/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(Xj,"href","/docs/transformers/pr_15507/en/model_doc/hubert#transformers.HubertForCTC"),c(Vj,"href","/docs/transformers/pr_15507/en/model_doc/sew#transformers.SEWForCTC"),c(zj,"href","/docs/transformers/pr_15507/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Wj,"href","/docs/transformers/pr_15507/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Qj,"href","/docs/transformers/pr_15507/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Hj,"href","/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Uj,"href","/docs/transformers/pr_15507/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Qe,"class","docstring"),c(ir,"class","docstring"),c(gv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Id,"class","relative group"),c(rt,"class","docstring"),c(Jj,"href","/docs/transformers/pr_15507/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Yj,"href","/docs/transformers/pr_15507/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(He,"class","docstring"),c(dr,"class","docstring"),c(uv,"id","transformers.AutoModelForAudioXVector"),c(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uv,"href","#transformers.AutoModelForAudioXVector"),c(Nd,"class","relative group"),c(tt,"class","docstring"),c(Kj,"href","/docs/transformers/pr_15507/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Zj,"href","/docs/transformers/pr_15507/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(eN,"href","/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(oN,"href","/docs/transformers/pr_15507/en/model_doc/wavlm#transformers.WavLMForXVector"),c(Ue,"class","docstring"),c(cr,"class","docstring"),c(Mv,"id","transformers.AutoModelForMaskedImageModeling"),c(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mv,"href","#transformers.AutoModelForMaskedImageModeling"),c(Od,"class","relative group"),c(at,"class","docstring"),c(rN,"href","/docs/transformers/pr_15507/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(tN,"href","/docs/transformers/pr_15507/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(aN,"href","/docs/transformers/pr_15507/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(Je,"class","docstring"),c(fr,"class","docstring"),c(Lv,"id","transformers.AutoModelForObjectDetection"),c(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lv,"href","#transformers.AutoModelForObjectDetection"),c(Wd,"class","relative group"),c(nt,"class","docstring"),c(nN,"href","/docs/transformers/pr_15507/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Ye,"class","docstring"),c(mr,"class","docstring"),c(kv,"id","transformers.AutoModelForImageSegmentation"),c(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kv,"href","#transformers.AutoModelForImageSegmentation"),c(Ud,"class","relative group"),c(st,"class","docstring"),c(sN,"href","/docs/transformers/pr_15507/en/model_doc/detr#transformers.DetrForSegmentation"),c(Ke,"class","docstring"),c(gr,"class","docstring"),c(Pv,"id","transformers.AutoModelForSemanticSegmentation"),c(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pv,"href","#transformers.AutoModelForSemanticSegmentation"),c(Kd,"class","relative group"),c(lt,"class","docstring"),c(lN,"href","/docs/transformers/pr_15507/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(iN,"href","/docs/transformers/pr_15507/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Ze,"class","docstring"),c(hr,"class","docstring"),c(jv,"id","transformers.TFAutoModel"),c(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jv,"href","#transformers.TFAutoModel"),c(oc,"class","relative group"),c(it,"class","docstring"),c(dN,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.TFAlbertModel"),c(cN,"href","/docs/transformers/pr_15507/en/model_doc/bart#transformers.TFBartModel"),c(fN,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.TFBertModel"),c(mN,"href","/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(gN,"href","/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(hN,"href","/docs/transformers/pr_15507/en/model_doc/camembert#transformers.TFCamembertModel"),c(pN,"href","/docs/transformers/pr_15507/en/model_doc/clip#transformers.TFCLIPModel"),c(_N,"href","/docs/transformers/pr_15507/en/model_doc/convbert#transformers.TFConvBertModel"),c(uN,"href","/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.TFCTRLModel"),c(bN,"href","/docs/transformers/pr_15507/en/model_doc/deberta#transformers.TFDebertaModel"),c(vN,"href","/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(TN,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(FN,"href","/docs/transformers/pr_15507/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(CN,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.TFElectraModel"),c(MN,"href","/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(EN,"href","/docs/transformers/pr_15507/en/model_doc/funnel#transformers.TFFunnelModel"),c(yN,"href","/docs/transformers/pr_15507/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(wN,"href","/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.TFGPT2Model"),c(AN,"href","/docs/transformers/pr_15507/en/model_doc/hubert#transformers.TFHubertModel"),c(LN,"href","/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(BN,"href","/docs/transformers/pr_15507/en/model_doc/led#transformers.TFLEDModel"),c(xN,"href","/docs/transformers/pr_15507/en/model_doc/longformer#transformers.TFLongformerModel"),c(kN,"href","/docs/transformers/pr_15507/en/model_doc/lxmert#transformers.TFLxmertModel"),c(RN,"href","/docs/transformers/pr_15507/en/model_doc/marian#transformers.TFMarianModel"),c(SN,"href","/docs/transformers/pr_15507/en/model_doc/mbart#transformers.TFMBartModel"),c(PN,"href","/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c($N,"href","/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.TFMPNetModel"),c(IN,"href","/docs/transformers/pr_15507/en/model_doc/mt5#transformers.TFMT5Model"),c(DN,"href","/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(jN,"href","/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.TFPegasusModel"),c(NN,"href","/docs/transformers/pr_15507/en/model_doc/rembert#transformers.TFRemBertModel"),c(qN,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.TFRobertaModel"),c(GN,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.TFRoFormerModel"),c(ON,"href","/docs/transformers/pr_15507/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(XN,"href","/docs/transformers/pr_15507/en/model_doc/t5#transformers.TFT5Model"),c(VN,"href","/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TFTapasModel"),c(zN,"href","/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(WN,"href","/docs/transformers/pr_15507/en/model_doc/vit#transformers.TFViTModel"),c(QN,"href","/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(HN,"href","/docs/transformers/pr_15507/en/model_doc/xlm#transformers.TFXLMModel"),c(UN,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(JN,"href","/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.TFXLNetModel"),c(go,"class","docstring"),c(pr,"class","docstring"),c(y0,"id","transformers.TFAutoModelForPreTraining"),c(y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y0,"href","#transformers.TFAutoModelForPreTraining"),c(ac,"class","relative group"),c(dt,"class","docstring"),c(YN,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(KN,"href","/docs/transformers/pr_15507/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(ZN,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.TFBertForPreTraining"),c(eq,"href","/docs/transformers/pr_15507/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(oq,"href","/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(rq,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(tq,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(aq,"href","/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(nq,"href","/docs/transformers/pr_15507/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(sq,"href","/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(lq,"href","/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(iq,"href","/docs/transformers/pr_15507/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(dq,"href","/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(cq,"href","/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(fq,"href","/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(mq,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(gq,"href","/docs/transformers/pr_15507/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(hq,"href","/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(pq,"href","/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(_q,"href","/docs/transformers/pr_15507/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(uq,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bq,"href","/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(ho,"class","docstring"),c(_r,"class","docstring"),c(H0,"id","transformers.TFAutoModelForCausalLM"),c(H0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H0,"href","#transformers.TFAutoModelForCausalLM"),c(lc,"class","relative group"),c(ct,"class","docstring"),c(vq,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(Tq,"href","/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Fq,"href","/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Cq,"href","/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Mq,"href","/docs/transformers/pr_15507/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(Eq,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(yq,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(wq,"href","/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Aq,"href","/docs/transformers/pr_15507/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Lq,"href","/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(po,"class","docstring"),c(ur,"class","docstring"),c(nT,"id","transformers.TFAutoModelForImageClassification"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.TFAutoModelForImageClassification"),c(cc,"class","relative group"),c(ft,"class","docstring"),c(Bq,"href","/docs/transformers/pr_15507/en/model_doc/vit#transformers.TFViTForImageClassification"),c(_o,"class","docstring"),c(br,"class","docstring"),c(lT,"id","transformers.TFAutoModelForMaskedLM"),c(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lT,"href","#transformers.TFAutoModelForMaskedLM"),c(gc,"class","relative group"),c(mt,"class","docstring"),c(xq,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(kq,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(Rq,"href","/docs/transformers/pr_15507/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Sq,"href","/docs/transformers/pr_15507/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(Pq,"href","/docs/transformers/pr_15507/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c($q,"href","/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(Iq,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Dq,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(jq,"href","/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Nq,"href","/docs/transformers/pr_15507/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(qq,"href","/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Gq,"href","/docs/transformers/pr_15507/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(Oq,"href","/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(Xq,"href","/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Vq,"href","/docs/transformers/pr_15507/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(zq,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Wq,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(Qq,"href","/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Hq,"href","/docs/transformers/pr_15507/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Uq,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(uo,"class","docstring"),c(vr,"class","docstring"),c(LT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(_c,"class","relative group"),c(gt,"class","docstring"),c(Jq,"href","/docs/transformers/pr_15507/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Yq,"href","/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(Kq,"href","/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(Zq,"href","/docs/transformers/pr_15507/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(eG,"href","/docs/transformers/pr_15507/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(oG,"href","/docs/transformers/pr_15507/en/model_doc/marian#transformers.TFMarianMTModel"),c(rG,"href","/docs/transformers/pr_15507/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(tG,"href","/docs/transformers/pr_15507/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_15507/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(bo,"class","docstring"),c(Tr,"class","docstring"),c(NT,"id","transformers.TFAutoModelForSequenceClassification"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.TFAutoModelForSequenceClassification"),c(vc,"class","relative group"),c(ht,"class","docstring"),c(sG,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(iG,"href","/docs/transformers/pr_15507/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(dG,"href","/docs/transformers/pr_15507/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(cG,"href","/docs/transformers/pr_15507/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(fG,"href","/docs/transformers/pr_15507/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(mG,"href","/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(gG,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(hG,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(pG,"href","/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(_G,"href","/docs/transformers/pr_15507/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(uG,"href","/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(bG,"href","/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(vG,"href","/docs/transformers/pr_15507/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(TG,"href","/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(FG,"href","/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(CG,"href","/docs/transformers/pr_15507/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(MG,"href","/docs/transformers/pr_15507/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(EG,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(yG,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(wG,"href","/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(AG,"href","/docs/transformers/pr_15507/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(LG,"href","/docs/transformers/pr_15507/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(BG,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(xG,"href","/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(vo,"class","docstring"),c(Fr,"class","docstring"),c(f7,"id","transformers.TFAutoModelForMultipleChoice"),c(f7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f7,"href","#transformers.TFAutoModelForMultipleChoice"),c(Cc,"class","relative group"),c(pt,"class","docstring"),c(kG,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(RG,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(SG,"href","/docs/transformers/pr_15507/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(PG,"href","/docs/transformers/pr_15507/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c($G,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(IG,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(DG,"href","/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(jG,"href","/docs/transformers/pr_15507/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(NG,"href","/docs/transformers/pr_15507/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(qG,"href","/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(GG,"href","/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(OG,"href","/docs/transformers/pr_15507/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(XG,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(VG,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(zG,"href","/docs/transformers/pr_15507/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(WG,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(QG,"href","/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(To,"class","docstring"),c(Cr,"class","docstring"),c(B7,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(B7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B7,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(yc,"class","relative group"),c(_t,"class","docstring"),c(HG,"href","/docs/transformers/pr_15507/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Fo,"class","docstring"),c(Mr,"class","docstring"),c(k7,"id","transformers.TFAutoModelForTokenClassification"),c(k7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k7,"href","#transformers.TFAutoModelForTokenClassification"),c(Lc,"class","relative group"),c(ut,"class","docstring"),c(UG,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(JG,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(YG,"href","/docs/transformers/pr_15507/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(KG,"href","/docs/transformers/pr_15507/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(ZG,"href","/docs/transformers/pr_15507/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(eO,"href","/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(oO,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(rO,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(tO,"href","/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(aO,"href","/docs/transformers/pr_15507/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(nO,"href","/docs/transformers/pr_15507/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(sO,"href","/docs/transformers/pr_15507/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(lO,"href","/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(iO,"href","/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(dO,"href","/docs/transformers/pr_15507/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(cO,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(fO,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(mO,"href","/docs/transformers/pr_15507/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(gO,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(hO,"href","/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Co,"class","docstring"),c(Er,"class","docstring"),c(K7,"id","transformers.TFAutoModelForQuestionAnswering"),c(K7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K7,"href","#transformers.TFAutoModelForQuestionAnswering"),c(kc,"class","relative group"),c(bt,"class","docstring"),c(pO,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(_O,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(uO,"href","/docs/transformers/pr_15507/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(bO,"href","/docs/transformers/pr_15507/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(vO,"href","/docs/transformers/pr_15507/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_15507/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(FO,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_15507/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(EO,"href","/docs/transformers/pr_15507/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_15507/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_15507/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_15507/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_15507/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_15507/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(RO,"href","/docs/transformers/pr_15507/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_15507/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Mo,"class","docstring"),c(yr,"class","docstring"),c(bF,"id","transformers.TFAutoModelForVision2Seq"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.TFAutoModelForVision2Seq"),c(Pc,"class","relative group"),c(vt,"class","docstring"),c(PO,"href","/docs/transformers/pr_15507/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Eo,"class","docstring"),c(wr,"class","docstring"),c(TF,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TF,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Dc,"class","relative group"),c(Tt,"class","docstring"),c($O,"href","/docs/transformers/pr_15507/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(yo,"class","docstring"),c(Ar,"class","docstring"),c(CF,"id","transformers.FlaxAutoModel"),c(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CF,"href","#transformers.FlaxAutoModel"),c(qc,"class","relative group"),c(Ft,"class","docstring"),c(IO,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.FlaxAlbertModel"),c(DO,"href","/docs/transformers/pr_15507/en/model_doc/bart#transformers.FlaxBartModel"),c(jO,"href","/docs/transformers/pr_15507/en/model_doc/beit#transformers.FlaxBeitModel"),c(NO,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.FlaxBertModel"),c(qO,"href","/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(GO,"href","/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(OO,"href","/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(XO,"href","/docs/transformers/pr_15507/en/model_doc/clip#transformers.FlaxCLIPModel"),c(VO,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(zO,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.FlaxElectraModel"),c(WO,"href","/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(QO,"href","/docs/transformers/pr_15507/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(HO,"href","/docs/transformers/pr_15507/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(UO,"href","/docs/transformers/pr_15507/en/model_doc/marian#transformers.FlaxMarianModel"),c(JO,"href","/docs/transformers/pr_15507/en/model_doc/mbart#transformers.FlaxMBartModel"),c(YO,"href","/docs/transformers/pr_15507/en/model_doc/mt5#transformers.FlaxMT5Model"),c(KO,"href","/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(ZO,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(eX,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(oX,"href","/docs/transformers/pr_15507/en/model_doc/t5#transformers.FlaxT5Model"),c(rX,"href","/docs/transformers/pr_15507/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(tX,"href","/docs/transformers/pr_15507/en/model_doc/vit#transformers.FlaxViTModel"),c(aX,"href","/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(nX,"href","/docs/transformers/pr_15507/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(wo,"class","docstring"),c(Lr,"class","docstring"),c(QF,"id","transformers.FlaxAutoModelForCausalLM"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.FlaxAutoModelForCausalLM"),c(Xc,"class","relative group"),c(Ct,"class","docstring"),c(sX,"href","/docs/transformers/pr_15507/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(lX,"href","/docs/transformers/pr_15507/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(iX,"href","/docs/transformers/pr_15507/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(dX,"href","/docs/transformers/pr_15507/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Ao,"class","docstring"),c(Br,"class","docstring"),c(KF,"id","transformers.FlaxAutoModelForPreTraining"),c(KF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KF,"href","#transformers.FlaxAutoModelForPreTraining"),c(Wc,"class","relative group"),c(Mt,"class","docstring"),c(cX,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(fX,"href","/docs/transformers/pr_15507/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(mX,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(gX,"href","/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(hX,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(pX,"href","/docs/transformers/pr_15507/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(_X,"href","/docs/transformers/pr_15507/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(uX,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(bX,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(vX,"href","/docs/transformers/pr_15507/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(TX,"href","/docs/transformers/pr_15507/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Lo,"class","docstring"),c(xr,"class","docstring"),c(cC,"id","transformers.FlaxAutoModelForMaskedLM"),c(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Uc,"class","relative group"),c(Et,"class","docstring"),c(FX,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(CX,"href","/docs/transformers/pr_15507/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(MX,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(EX,"href","/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(yX,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(wX,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(AX,"href","/docs/transformers/pr_15507/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(LX,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(BX,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Bo,"class","docstring"),c(kr,"class","docstring"),c(TC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(TC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Kc,"class","relative group"),c(yt,"class","docstring"),c(xX,"href","/docs/transformers/pr_15507/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(kX,"href","/docs/transformers/pr_15507/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(RX,"href","/docs/transformers/pr_15507/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(SX,"href","/docs/transformers/pr_15507/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(PX,"href","/docs/transformers/pr_15507/en/model_doc/marian#transformers.FlaxMarianMTModel"),c($X,"href","/docs/transformers/pr_15507/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(IX,"href","/docs/transformers/pr_15507/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(DX,"href","/docs/transformers/pr_15507/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(jX,"href","/docs/transformers/pr_15507/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(xo,"class","docstring"),c(Rr,"class","docstring"),c(xC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(xC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(of,"class","relative group"),c(wt,"class","docstring"),c(NX,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(qX,"href","/docs/transformers/pr_15507/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(GX,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(OX,"href","/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(XX,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(VX,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(zX,"href","/docs/transformers/pr_15507/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(WX,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(QX,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(ko,"class","docstring"),c(Sr,"class","docstring"),c(qC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(af,"class","relative group"),c(At,"class","docstring"),c(HX,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(UX,"href","/docs/transformers/pr_15507/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(JX,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(YX,"href","/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(KX,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(ZX,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_15507/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Ro,"class","docstring"),c(Pr,"class","docstring"),c(JC,"id","transformers.FlaxAutoModelForTokenClassification"),c(JC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(lf,"class","relative group"),c(Lt,"class","docstring"),c(tV,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(aV,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(nV,"href","/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(sV,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(lV,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(iV,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(dV,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(So,"class","docstring"),c($r,"class","docstring"),c(a4,"id","transformers.FlaxAutoModelForMultipleChoice"),c(a4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a4,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ff,"class","relative group"),c(Bt,"class","docstring"),c(cV,"href","/docs/transformers/pr_15507/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(fV,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(mV,"href","/docs/transformers/pr_15507/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(gV,"href","/docs/transformers/pr_15507/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(hV,"href","/docs/transformers/pr_15507/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(pV,"href","/docs/transformers/pr_15507/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(_V,"href","/docs/transformers/pr_15507/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Po,"class","docstring"),c(Ir,"class","docstring"),c(m4,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(m4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m4,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(hf,"class","relative group"),c(xt,"class","docstring"),c(uV,"href","/docs/transformers/pr_15507/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c($o,"class","docstring"),c(Dr,"class","docstring"),c(h4,"id","transformers.FlaxAutoModelForImageClassification"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.FlaxAutoModelForImageClassification"),c(uf,"class","relative group"),c(kt,"class","docstring"),c(bV,"href","/docs/transformers/pr_15507/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(vV,"href","/docs/transformers/pr_15507/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Io,"class","docstring"),c(jr,"class","docstring"),c(u4,"id","transformers.FlaxAutoModelForVision2Seq"),c(u4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u4,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Tf,"class","relative group"),c(Rt,"class","docstring"),c(TV,"href","/docs/transformers/pr_15507/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Do,"class","docstring"),c(Nr,"class","docstring")},m(d,u){e(document.head,J),b(d,Be,u),b(d,ie,u),e(ie,me),e(me,no),g(ce,no,null),e(ie,ue),e(ie,Go),e(Go,Li),b(d,Ef,u),b(d,sa,u),e(sa,Bi),e(sa,xi),e(xi,bM),e(sa,yf),b(d,ye,u),b(d,io,u),e(io,ki),e(io,In),e(In,vM),e(io,Dn),e(io,jn),e(jn,TM),e(io,Ri),e(io,Nn),e(Nn,FM),e(io,Si),b(d,wf,u),g($a,d,u),b(d,co,u),b(d,ge,u),e(ge,r8),e(ge,Pi),e(Pi,t8),e(ge,a8),b(d,Oo,u),b(d,Ia,u),e(Ia,n8),e(Ia,Af),e(Af,s8),e(Ia,bRe),b(d,d9e,u),b(d,$i,u),e($i,Lf),e(Lf,fW),g(CM,fW,null),e($i,vRe),e($i,mW),e(mW,TRe),b(d,c9e,u),b(d,qn,u),e(qn,FRe),e(qn,gW),e(gW,CRe),e(qn,MRe),e(qn,hW),e(hW,ERe),e(qn,yRe),b(d,f9e,u),g(MM,d,u),b(d,m9e,u),b(d,l8,u),e(l8,wRe),b(d,g9e,u),g(Bf,d,u),b(d,h9e,u),b(d,Ii,u),e(Ii,xf),e(xf,pW),g(EM,pW,null),e(Ii,ARe),e(Ii,_W),e(_W,LRe),b(d,p9e,u),b(d,Xo,u),g(yM,Xo,null),e(Xo,BRe),e(Xo,wM),e(wM,xRe),e(wM,i8),e(i8,kRe),e(wM,RRe),e(Xo,SRe),e(Xo,AM),e(AM,PRe),e(AM,uW),e(uW,$Re),e(AM,IRe),e(Xo,DRe),e(Xo,fo),g(LM,fo,null),e(fo,jRe),e(fo,bW),e(bW,NRe),e(fo,qRe),e(fo,Di),e(Di,GRe),e(Di,vW),e(vW,ORe),e(Di,XRe),e(Di,TW),e(TW,VRe),e(Di,zRe),e(fo,WRe),e(fo,v),e(v,kf),e(kf,FW),e(FW,QRe),e(kf,HRe),e(kf,d8),e(d8,URe),e(kf,JRe),e(v,YRe),e(v,Rf),e(Rf,CW),e(CW,KRe),e(Rf,ZRe),e(Rf,c8),e(c8,eSe),e(Rf,oSe),e(v,rSe),e(v,Sf),e(Sf,MW),e(MW,tSe),e(Sf,aSe),e(Sf,f8),e(f8,nSe),e(Sf,sSe),e(v,lSe),e(v,Pf),e(Pf,EW),e(EW,iSe),e(Pf,dSe),e(Pf,m8),e(m8,cSe),e(Pf,fSe),e(v,mSe),e(v,$f),e($f,yW),e(yW,gSe),e($f,hSe),e($f,g8),e(g8,pSe),e($f,_Se),e(v,uSe),e(v,If),e(If,wW),e(wW,bSe),e(If,vSe),e(If,h8),e(h8,TSe),e(If,FSe),e(v,CSe),e(v,Df),e(Df,AW),e(AW,MSe),e(Df,ESe),e(Df,p8),e(p8,ySe),e(Df,wSe),e(v,ASe),e(v,jf),e(jf,LW),e(LW,LSe),e(jf,BSe),e(jf,_8),e(_8,xSe),e(jf,kSe),e(v,RSe),e(v,Nf),e(Nf,BW),e(BW,SSe),e(Nf,PSe),e(Nf,u8),e(u8,$Se),e(Nf,ISe),e(v,DSe),e(v,qf),e(qf,xW),e(xW,jSe),e(qf,NSe),e(qf,b8),e(b8,qSe),e(qf,GSe),e(v,OSe),e(v,Gf),e(Gf,kW),e(kW,XSe),e(Gf,VSe),e(Gf,v8),e(v8,zSe),e(Gf,WSe),e(v,QSe),e(v,Of),e(Of,RW),e(RW,HSe),e(Of,USe),e(Of,T8),e(T8,JSe),e(Of,YSe),e(v,KSe),e(v,Xf),e(Xf,SW),e(SW,ZSe),e(Xf,ePe),e(Xf,F8),e(F8,oPe),e(Xf,rPe),e(v,tPe),e(v,Vf),e(Vf,PW),e(PW,aPe),e(Vf,nPe),e(Vf,C8),e(C8,sPe),e(Vf,lPe),e(v,iPe),e(v,zf),e(zf,$W),e($W,dPe),e(zf,cPe),e(zf,M8),e(M8,fPe),e(zf,mPe),e(v,gPe),e(v,Wf),e(Wf,IW),e(IW,hPe),e(Wf,pPe),e(Wf,E8),e(E8,_Pe),e(Wf,uPe),e(v,bPe),e(v,Qf),e(Qf,DW),e(DW,vPe),e(Qf,TPe),e(Qf,y8),e(y8,FPe),e(Qf,CPe),e(v,MPe),e(v,Hf),e(Hf,jW),e(jW,EPe),e(Hf,yPe),e(Hf,w8),e(w8,wPe),e(Hf,APe),e(v,LPe),e(v,Uf),e(Uf,NW),e(NW,BPe),e(Uf,xPe),e(Uf,A8),e(A8,kPe),e(Uf,RPe),e(v,SPe),e(v,Jf),e(Jf,qW),e(qW,PPe),e(Jf,$Pe),e(Jf,L8),e(L8,IPe),e(Jf,DPe),e(v,jPe),e(v,Yf),e(Yf,GW),e(GW,NPe),e(Yf,qPe),e(Yf,B8),e(B8,GPe),e(Yf,OPe),e(v,XPe),e(v,Kf),e(Kf,OW),e(OW,VPe),e(Kf,zPe),e(Kf,x8),e(x8,WPe),e(Kf,QPe),e(v,HPe),e(v,Zf),e(Zf,XW),e(XW,UPe),e(Zf,JPe),e(Zf,k8),e(k8,YPe),e(Zf,KPe),e(v,ZPe),e(v,em),e(em,VW),e(VW,e$e),e(em,o$e),e(em,R8),e(R8,r$e),e(em,t$e),e(v,a$e),e(v,om),e(om,zW),e(zW,n$e),e(om,s$e),e(om,S8),e(S8,l$e),e(om,i$e),e(v,d$e),e(v,rm),e(rm,WW),e(WW,c$e),e(rm,f$e),e(rm,P8),e(P8,m$e),e(rm,g$e),e(v,h$e),e(v,tm),e(tm,QW),e(QW,p$e),e(tm,_$e),e(tm,$8),e($8,u$e),e(tm,b$e),e(v,v$e),e(v,am),e(am,HW),e(HW,T$e),e(am,F$e),e(am,I8),e(I8,C$e),e(am,M$e),e(v,E$e),e(v,nm),e(nm,UW),e(UW,y$e),e(nm,w$e),e(nm,D8),e(D8,A$e),e(nm,L$e),e(v,B$e),e(v,sm),e(sm,JW),e(JW,x$e),e(sm,k$e),e(sm,j8),e(j8,R$e),e(sm,S$e),e(v,P$e),e(v,lm),e(lm,YW),e(YW,$$e),e(lm,I$e),e(lm,N8),e(N8,D$e),e(lm,j$e),e(v,N$e),e(v,im),e(im,KW),e(KW,q$e),e(im,G$e),e(im,q8),e(q8,O$e),e(im,X$e),e(v,V$e),e(v,dm),e(dm,ZW),e(ZW,z$e),e(dm,W$e),e(dm,G8),e(G8,Q$e),e(dm,H$e),e(v,U$e),e(v,cm),e(cm,eQ),e(eQ,J$e),e(cm,Y$e),e(cm,O8),e(O8,K$e),e(cm,Z$e),e(v,eIe),e(v,fm),e(fm,oQ),e(oQ,oIe),e(fm,rIe),e(fm,X8),e(X8,tIe),e(fm,aIe),e(v,nIe),e(v,mm),e(mm,rQ),e(rQ,sIe),e(mm,lIe),e(mm,V8),e(V8,iIe),e(mm,dIe),e(v,cIe),e(v,gm),e(gm,tQ),e(tQ,fIe),e(gm,mIe),e(gm,z8),e(z8,gIe),e(gm,hIe),e(v,pIe),e(v,hm),e(hm,aQ),e(aQ,_Ie),e(hm,uIe),e(hm,W8),e(W8,bIe),e(hm,vIe),e(v,TIe),e(v,pm),e(pm,nQ),e(nQ,FIe),e(pm,CIe),e(pm,Q8),e(Q8,MIe),e(pm,EIe),e(v,yIe),e(v,_m),e(_m,sQ),e(sQ,wIe),e(_m,AIe),e(_m,H8),e(H8,LIe),e(_m,BIe),e(v,xIe),e(v,um),e(um,lQ),e(lQ,kIe),e(um,RIe),e(um,U8),e(U8,SIe),e(um,PIe),e(v,$Ie),e(v,bm),e(bm,iQ),e(iQ,IIe),e(bm,DIe),e(bm,J8),e(J8,jIe),e(bm,NIe),e(v,qIe),e(v,vm),e(vm,dQ),e(dQ,GIe),e(vm,OIe),e(vm,Y8),e(Y8,XIe),e(vm,VIe),e(v,zIe),e(v,Tm),e(Tm,cQ),e(cQ,WIe),e(Tm,QIe),e(Tm,K8),e(K8,HIe),e(Tm,UIe),e(v,JIe),e(v,Fm),e(Fm,fQ),e(fQ,YIe),e(Fm,KIe),e(Fm,Z8),e(Z8,ZIe),e(Fm,eDe),e(v,oDe),e(v,Cm),e(Cm,mQ),e(mQ,rDe),e(Cm,tDe),e(Cm,e9),e(e9,aDe),e(Cm,nDe),e(v,sDe),e(v,Mm),e(Mm,gQ),e(gQ,lDe),e(Mm,iDe),e(Mm,o9),e(o9,dDe),e(Mm,cDe),e(v,fDe),e(v,Em),e(Em,hQ),e(hQ,mDe),e(Em,gDe),e(Em,r9),e(r9,hDe),e(Em,pDe),e(v,_De),e(v,ym),e(ym,pQ),e(pQ,uDe),e(ym,bDe),e(ym,t9),e(t9,vDe),e(ym,TDe),e(v,FDe),e(v,wm),e(wm,_Q),e(_Q,CDe),e(wm,MDe),e(wm,a9),e(a9,EDe),e(wm,yDe),e(v,wDe),e(v,Am),e(Am,uQ),e(uQ,ADe),e(Am,LDe),e(Am,n9),e(n9,BDe),e(Am,xDe),e(v,kDe),e(v,Lm),e(Lm,bQ),e(bQ,RDe),e(Lm,SDe),e(Lm,s9),e(s9,PDe),e(Lm,$De),e(v,IDe),e(v,Bm),e(Bm,vQ),e(vQ,DDe),e(Bm,jDe),e(Bm,l9),e(l9,NDe),e(Bm,qDe),e(v,GDe),e(v,xm),e(xm,TQ),e(TQ,ODe),e(xm,XDe),e(xm,i9),e(i9,VDe),e(xm,zDe),e(v,WDe),e(v,km),e(km,FQ),e(FQ,QDe),e(km,HDe),e(km,d9),e(d9,UDe),e(km,JDe),e(v,YDe),e(v,Rm),e(Rm,CQ),e(CQ,KDe),e(Rm,ZDe),e(Rm,c9),e(c9,eje),e(Rm,oje),e(v,rje),e(v,Sm),e(Sm,MQ),e(MQ,tje),e(Sm,aje),e(Sm,f9),e(f9,nje),e(Sm,sje),e(v,lje),e(v,Pm),e(Pm,EQ),e(EQ,ije),e(Pm,dje),e(Pm,m9),e(m9,cje),e(Pm,fje),e(v,mje),e(v,$m),e($m,yQ),e(yQ,gje),e($m,hje),e($m,g9),e(g9,pje),e($m,_je),e(v,uje),e(v,Im),e(Im,wQ),e(wQ,bje),e(Im,vje),e(Im,h9),e(h9,Tje),e(Im,Fje),e(v,Cje),e(v,Dm),e(Dm,AQ),e(AQ,Mje),e(Dm,Eje),e(Dm,p9),e(p9,yje),e(Dm,wje),e(v,Aje),e(v,jm),e(jm,LQ),e(LQ,Lje),e(jm,Bje),e(jm,_9),e(_9,xje),e(jm,kje),e(v,Rje),e(v,Nm),e(Nm,BQ),e(BQ,Sje),e(Nm,Pje),e(Nm,u9),e(u9,$je),e(Nm,Ije),e(v,Dje),e(v,qm),e(qm,xQ),e(xQ,jje),e(qm,Nje),e(qm,b9),e(b9,qje),e(qm,Gje),e(v,Oje),e(v,Gm),e(Gm,kQ),e(kQ,Xje),e(Gm,Vje),e(Gm,v9),e(v9,zje),e(Gm,Wje),e(v,Qje),e(v,Om),e(Om,RQ),e(RQ,Hje),e(Om,Uje),e(Om,T9),e(T9,Jje),e(Om,Yje),e(v,Kje),e(v,Xm),e(Xm,SQ),e(SQ,Zje),e(Xm,eNe),e(Xm,F9),e(F9,oNe),e(Xm,rNe),e(v,tNe),e(v,Vm),e(Vm,PQ),e(PQ,aNe),e(Vm,nNe),e(Vm,C9),e(C9,sNe),e(Vm,lNe),e(v,iNe),e(v,zm),e(zm,$Q),e($Q,dNe),e(zm,cNe),e(zm,M9),e(M9,fNe),e(zm,mNe),e(v,gNe),e(v,Wm),e(Wm,IQ),e(IQ,hNe),e(Wm,pNe),e(Wm,E9),e(E9,_Ne),e(Wm,uNe),e(v,bNe),e(v,Qm),e(Qm,DQ),e(DQ,vNe),e(Qm,TNe),e(Qm,y9),e(y9,FNe),e(Qm,CNe),e(v,MNe),e(v,Hm),e(Hm,jQ),e(jQ,ENe),e(Hm,yNe),e(Hm,w9),e(w9,wNe),e(Hm,ANe),e(v,LNe),e(v,Um),e(Um,NQ),e(NQ,BNe),e(Um,xNe),e(Um,A9),e(A9,kNe),e(Um,RNe),e(v,SNe),e(v,Jm),e(Jm,qQ),e(qQ,PNe),e(Jm,$Ne),e(Jm,L9),e(L9,INe),e(Jm,DNe),e(v,jNe),e(v,Ym),e(Ym,GQ),e(GQ,NNe),e(Ym,qNe),e(Ym,B9),e(B9,GNe),e(Ym,ONe),e(v,XNe),e(v,Km),e(Km,OQ),e(OQ,VNe),e(Km,zNe),e(Km,x9),e(x9,WNe),e(Km,QNe),e(v,HNe),e(v,Zm),e(Zm,XQ),e(XQ,UNe),e(Zm,JNe),e(Zm,k9),e(k9,YNe),e(Zm,KNe),e(v,ZNe),e(v,eg),e(eg,VQ),e(VQ,eqe),e(eg,oqe),e(eg,R9),e(R9,rqe),e(eg,tqe),e(v,aqe),e(v,og),e(og,zQ),e(zQ,nqe),e(og,sqe),e(og,S9),e(S9,lqe),e(og,iqe),e(v,dqe),e(v,rg),e(rg,WQ),e(WQ,cqe),e(rg,fqe),e(rg,P9),e(P9,mqe),e(rg,gqe),e(v,hqe),e(v,tg),e(tg,QQ),e(QQ,pqe),e(tg,_qe),e(tg,$9),e($9,uqe),e(tg,bqe),e(v,vqe),e(v,ag),e(ag,HQ),e(HQ,Tqe),e(ag,Fqe),e(ag,I9),e(I9,Cqe),e(ag,Mqe),e(v,Eqe),e(v,ng),e(ng,UQ),e(UQ,yqe),e(ng,wqe),e(ng,D9),e(D9,Aqe),e(ng,Lqe),e(v,Bqe),e(v,sg),e(sg,JQ),e(JQ,xqe),e(sg,kqe),e(sg,j9),e(j9,Rqe),e(sg,Sqe),e(v,Pqe),e(v,lg),e(lg,YQ),e(YQ,$qe),e(lg,Iqe),e(lg,N9),e(N9,Dqe),e(lg,jqe),e(v,Nqe),e(v,ig),e(ig,KQ),e(KQ,qqe),e(ig,Gqe),e(ig,q9),e(q9,Oqe),e(ig,Xqe),e(v,Vqe),e(v,dg),e(dg,ZQ),e(ZQ,zqe),e(dg,Wqe),e(dg,G9),e(G9,Qqe),e(dg,Hqe),e(v,Uqe),e(v,cg),e(cg,eH),e(eH,Jqe),e(cg,Yqe),e(cg,O9),e(O9,Kqe),e(cg,Zqe),e(v,eGe),e(v,fg),e(fg,oH),e(oH,oGe),e(fg,rGe),e(fg,X9),e(X9,tGe),e(fg,aGe),e(v,nGe),e(v,mg),e(mg,rH),e(rH,sGe),e(mg,lGe),e(mg,V9),e(V9,iGe),e(mg,dGe),e(v,cGe),e(v,gg),e(gg,tH),e(tH,fGe),e(gg,mGe),e(gg,z9),e(z9,gGe),e(gg,hGe),e(v,pGe),e(v,hg),e(hg,aH),e(aH,_Ge),e(hg,uGe),e(hg,W9),e(W9,bGe),e(hg,vGe),e(v,TGe),e(v,pg),e(pg,nH),e(nH,FGe),e(pg,CGe),e(pg,Q9),e(Q9,MGe),e(pg,EGe),e(fo,yGe),e(fo,sH),e(sH,wGe),e(fo,AGe),g(BM,fo,null),e(Xo,LGe),e(Xo,_g),g(xM,_g,null),e(_g,BGe),e(_g,lH),e(lH,xGe),b(d,_9e,u),b(d,ji,u),e(ji,ug),e(ug,iH),g(kM,iH,null),e(ji,kGe),e(ji,dH),e(dH,RGe),b(d,u9e,u),b(d,Vo,u),g(RM,Vo,null),e(Vo,SGe),e(Vo,SM),e(SM,PGe),e(SM,H9),e(H9,$Ge),e(SM,IGe),e(Vo,DGe),e(Vo,PM),e(PM,jGe),e(PM,cH),e(cH,NGe),e(PM,qGe),e(Vo,GGe),e(Vo,mo),g($M,mo,null),e(mo,OGe),e(mo,fH),e(fH,XGe),e(mo,VGe),e(mo,Da),e(Da,zGe),e(Da,mH),e(mH,WGe),e(Da,QGe),e(Da,gH),e(gH,HGe),e(Da,UGe),e(Da,hH),e(hH,JGe),e(Da,YGe),e(mo,KGe),e(mo,M),e(M,Gn),e(Gn,pH),e(pH,ZGe),e(Gn,eOe),e(Gn,U9),e(U9,oOe),e(Gn,rOe),e(Gn,J9),e(J9,tOe),e(Gn,aOe),e(M,nOe),e(M,On),e(On,_H),e(_H,sOe),e(On,lOe),e(On,Y9),e(Y9,iOe),e(On,dOe),e(On,K9),e(K9,cOe),e(On,fOe),e(M,mOe),e(M,Xn),e(Xn,uH),e(uH,gOe),e(Xn,hOe),e(Xn,Z9),e(Z9,pOe),e(Xn,_Oe),e(Xn,eB),e(eB,uOe),e(Xn,bOe),e(M,vOe),e(M,bg),e(bg,bH),e(bH,TOe),e(bg,FOe),e(bg,oB),e(oB,COe),e(bg,MOe),e(M,EOe),e(M,Vn),e(Vn,vH),e(vH,yOe),e(Vn,wOe),e(Vn,rB),e(rB,AOe),e(Vn,LOe),e(Vn,tB),e(tB,BOe),e(Vn,xOe),e(M,kOe),e(M,vg),e(vg,TH),e(TH,ROe),e(vg,SOe),e(vg,aB),e(aB,POe),e(vg,$Oe),e(M,IOe),e(M,Tg),e(Tg,FH),e(FH,DOe),e(Tg,jOe),e(Tg,nB),e(nB,NOe),e(Tg,qOe),e(M,GOe),e(M,Fg),e(Fg,CH),e(CH,OOe),e(Fg,XOe),e(Fg,sB),e(sB,VOe),e(Fg,zOe),e(M,WOe),e(M,zn),e(zn,MH),e(MH,QOe),e(zn,HOe),e(zn,lB),e(lB,UOe),e(zn,JOe),e(zn,iB),e(iB,YOe),e(zn,KOe),e(M,ZOe),e(M,Wn),e(Wn,EH),e(EH,eXe),e(Wn,oXe),e(Wn,dB),e(dB,rXe),e(Wn,tXe),e(Wn,cB),e(cB,aXe),e(Wn,nXe),e(M,sXe),e(M,Qn),e(Qn,yH),e(yH,lXe),e(Qn,iXe),e(Qn,fB),e(fB,dXe),e(Qn,cXe),e(Qn,mB),e(mB,fXe),e(Qn,mXe),e(M,gXe),e(M,Cg),e(Cg,wH),e(wH,hXe),e(Cg,pXe),e(Cg,gB),e(gB,_Xe),e(Cg,uXe),e(M,bXe),e(M,Mg),e(Mg,AH),e(AH,vXe),e(Mg,TXe),e(Mg,hB),e(hB,FXe),e(Mg,CXe),e(M,MXe),e(M,Hn),e(Hn,LH),e(LH,EXe),e(Hn,yXe),e(Hn,pB),e(pB,wXe),e(Hn,AXe),e(Hn,_B),e(_B,LXe),e(Hn,BXe),e(M,xXe),e(M,Eg),e(Eg,BH),e(BH,kXe),e(Eg,RXe),e(Eg,uB),e(uB,SXe),e(Eg,PXe),e(M,$Xe),e(M,Un),e(Un,xH),e(xH,IXe),e(Un,DXe),e(Un,bB),e(bB,jXe),e(Un,NXe),e(Un,vB),e(vB,qXe),e(Un,GXe),e(M,OXe),e(M,Jn),e(Jn,kH),e(kH,XXe),e(Jn,VXe),e(Jn,TB),e(TB,zXe),e(Jn,WXe),e(Jn,FB),e(FB,QXe),e(Jn,HXe),e(M,UXe),e(M,Yn),e(Yn,RH),e(RH,JXe),e(Yn,YXe),e(Yn,CB),e(CB,KXe),e(Yn,ZXe),e(Yn,SH),e(SH,eVe),e(Yn,oVe),e(M,rVe),e(M,yg),e(yg,PH),e(PH,tVe),e(yg,aVe),e(yg,MB),e(MB,nVe),e(yg,sVe),e(M,lVe),e(M,Kn),e(Kn,$H),e($H,iVe),e(Kn,dVe),e(Kn,EB),e(EB,cVe),e(Kn,fVe),e(Kn,yB),e(yB,mVe),e(Kn,gVe),e(M,hVe),e(M,wg),e(wg,IH),e(IH,pVe),e(wg,_Ve),e(wg,wB),e(wB,uVe),e(wg,bVe),e(M,vVe),e(M,Zn),e(Zn,DH),e(DH,TVe),e(Zn,FVe),e(Zn,AB),e(AB,CVe),e(Zn,MVe),e(Zn,LB),e(LB,EVe),e(Zn,yVe),e(M,wVe),e(M,es),e(es,jH),e(jH,AVe),e(es,LVe),e(es,BB),e(BB,BVe),e(es,xVe),e(es,xB),e(xB,kVe),e(es,RVe),e(M,SVe),e(M,os),e(os,NH),e(NH,PVe),e(os,$Ve),e(os,kB),e(kB,IVe),e(os,DVe),e(os,RB),e(RB,jVe),e(os,NVe),e(M,qVe),e(M,Ag),e(Ag,qH),e(qH,GVe),e(Ag,OVe),e(Ag,SB),e(SB,XVe),e(Ag,VVe),e(M,zVe),e(M,rs),e(rs,GH),e(GH,WVe),e(rs,QVe),e(rs,PB),e(PB,HVe),e(rs,UVe),e(rs,$B),e($B,JVe),e(rs,YVe),e(M,KVe),e(M,Lg),e(Lg,OH),e(OH,ZVe),e(Lg,eze),e(Lg,IB),e(IB,oze),e(Lg,rze),e(M,tze),e(M,ts),e(ts,XH),e(XH,aze),e(ts,nze),e(ts,DB),e(DB,sze),e(ts,lze),e(ts,jB),e(jB,ize),e(ts,dze),e(M,cze),e(M,as),e(as,VH),e(VH,fze),e(as,mze),e(as,NB),e(NB,gze),e(as,hze),e(as,qB),e(qB,pze),e(as,_ze),e(M,uze),e(M,ns),e(ns,zH),e(zH,bze),e(ns,vze),e(ns,GB),e(GB,Tze),e(ns,Fze),e(ns,OB),e(OB,Cze),e(ns,Mze),e(M,Eze),e(M,ss),e(ss,WH),e(WH,yze),e(ss,wze),e(ss,XB),e(XB,Aze),e(ss,Lze),e(ss,VB),e(VB,Bze),e(ss,xze),e(M,kze),e(M,Bg),e(Bg,QH),e(QH,Rze),e(Bg,Sze),e(Bg,zB),e(zB,Pze),e(Bg,$ze),e(M,Ize),e(M,ls),e(ls,HH),e(HH,Dze),e(ls,jze),e(ls,WB),e(WB,Nze),e(ls,qze),e(ls,QB),e(QB,Gze),e(ls,Oze),e(M,Xze),e(M,is),e(is,UH),e(UH,Vze),e(is,zze),e(is,HB),e(HB,Wze),e(is,Qze),e(is,UB),e(UB,Hze),e(is,Uze),e(M,Jze),e(M,ds),e(ds,JH),e(JH,Yze),e(ds,Kze),e(ds,JB),e(JB,Zze),e(ds,eWe),e(ds,YB),e(YB,oWe),e(ds,rWe),e(M,tWe),e(M,cs),e(cs,YH),e(YH,aWe),e(cs,nWe),e(cs,KB),e(KB,sWe),e(cs,lWe),e(cs,ZB),e(ZB,iWe),e(cs,dWe),e(M,cWe),e(M,fs),e(fs,KH),e(KH,fWe),e(fs,mWe),e(fs,ex),e(ex,gWe),e(fs,hWe),e(fs,ox),e(ox,pWe),e(fs,_We),e(M,uWe),e(M,ms),e(ms,ZH),e(ZH,bWe),e(ms,vWe),e(ms,rx),e(rx,TWe),e(ms,FWe),e(ms,tx),e(tx,CWe),e(ms,MWe),e(M,EWe),e(M,xg),e(xg,eU),e(eU,yWe),e(xg,wWe),e(xg,ax),e(ax,AWe),e(xg,LWe),e(M,BWe),e(M,gs),e(gs,oU),e(oU,xWe),e(gs,kWe),e(gs,nx),e(nx,RWe),e(gs,SWe),e(gs,sx),e(sx,PWe),e(gs,$We),e(M,IWe),e(M,kg),e(kg,rU),e(rU,DWe),e(kg,jWe),e(kg,lx),e(lx,NWe),e(kg,qWe),e(M,GWe),e(M,Rg),e(Rg,tU),e(tU,OWe),e(Rg,XWe),e(Rg,ix),e(ix,VWe),e(Rg,zWe),e(M,WWe),e(M,hs),e(hs,aU),e(aU,QWe),e(hs,HWe),e(hs,dx),e(dx,UWe),e(hs,JWe),e(hs,cx),e(cx,YWe),e(hs,KWe),e(M,ZWe),e(M,ps),e(ps,nU),e(nU,eQe),e(ps,oQe),e(ps,fx),e(fx,rQe),e(ps,tQe),e(ps,mx),e(mx,aQe),e(ps,nQe),e(M,sQe),e(M,Sg),e(Sg,sU),e(sU,lQe),e(Sg,iQe),e(Sg,gx),e(gx,dQe),e(Sg,cQe),e(M,fQe),e(M,_s),e(_s,lU),e(lU,mQe),e(_s,gQe),e(_s,hx),e(hx,hQe),e(_s,pQe),e(_s,px),e(px,_Qe),e(_s,uQe),e(M,bQe),e(M,us),e(us,iU),e(iU,vQe),e(us,TQe),e(us,_x),e(_x,FQe),e(us,CQe),e(us,ux),e(ux,MQe),e(us,EQe),e(M,yQe),e(M,bs),e(bs,dU),e(dU,wQe),e(bs,AQe),e(bs,bx),e(bx,LQe),e(bs,BQe),e(bs,vx),e(vx,xQe),e(bs,kQe),e(M,RQe),e(M,vs),e(vs,cU),e(cU,SQe),e(vs,PQe),e(vs,Tx),e(Tx,$Qe),e(vs,IQe),e(vs,Fx),e(Fx,DQe),e(vs,jQe),e(M,NQe),e(M,Ts),e(Ts,fU),e(fU,qQe),e(Ts,GQe),e(Ts,Cx),e(Cx,OQe),e(Ts,XQe),e(Ts,Mx),e(Mx,VQe),e(Ts,zQe),e(M,WQe),e(M,Pg),e(Pg,mU),e(mU,QQe),e(Pg,HQe),e(Pg,Ex),e(Ex,UQe),e(Pg,JQe),e(M,YQe),e(M,$g),e($g,gU),e(gU,KQe),e($g,ZQe),e($g,yx),e(yx,eHe),e($g,oHe),e(M,rHe),e(M,Ig),e(Ig,hU),e(hU,tHe),e(Ig,aHe),e(Ig,wx),e(wx,nHe),e(Ig,sHe),e(M,lHe),e(M,Dg),e(Dg,pU),e(pU,iHe),e(Dg,dHe),e(Dg,Ax),e(Ax,cHe),e(Dg,fHe),e(M,mHe),e(M,Fs),e(Fs,_U),e(_U,gHe),e(Fs,hHe),e(Fs,Lx),e(Lx,pHe),e(Fs,_He),e(Fs,Bx),e(Bx,uHe),e(Fs,bHe),e(M,vHe),e(M,jg),e(jg,uU),e(uU,THe),e(jg,FHe),e(jg,xx),e(xx,CHe),e(jg,MHe),e(M,EHe),e(M,Cs),e(Cs,bU),e(bU,yHe),e(Cs,wHe),e(Cs,kx),e(kx,AHe),e(Cs,LHe),e(Cs,Rx),e(Rx,BHe),e(Cs,xHe),e(M,kHe),e(M,Ms),e(Ms,vU),e(vU,RHe),e(Ms,SHe),e(Ms,Sx),e(Sx,PHe),e(Ms,$He),e(Ms,Px),e(Px,IHe),e(Ms,DHe),e(M,jHe),e(M,Es),e(Es,TU),e(TU,NHe),e(Es,qHe),e(Es,$x),e($x,GHe),e(Es,OHe),e(Es,Ix),e(Ix,XHe),e(Es,VHe),e(M,zHe),e(M,ys),e(ys,FU),e(FU,WHe),e(ys,QHe),e(ys,Dx),e(Dx,HHe),e(ys,UHe),e(ys,jx),e(jx,JHe),e(ys,YHe),e(M,KHe),e(M,ws),e(ws,CU),e(CU,ZHe),e(ws,eUe),e(ws,Nx),e(Nx,oUe),e(ws,rUe),e(ws,qx),e(qx,tUe),e(ws,aUe),e(M,nUe),e(M,Ng),e(Ng,MU),e(MU,sUe),e(Ng,lUe),e(Ng,Gx),e(Gx,iUe),e(Ng,dUe),e(M,cUe),e(M,qg),e(qg,EU),e(EU,fUe),e(qg,mUe),e(qg,Ox),e(Ox,gUe),e(qg,hUe),e(M,pUe),e(M,As),e(As,yU),e(yU,_Ue),e(As,uUe),e(As,Xx),e(Xx,bUe),e(As,vUe),e(As,Vx),e(Vx,TUe),e(As,FUe),e(M,CUe),e(M,Ls),e(Ls,wU),e(wU,MUe),e(Ls,EUe),e(Ls,zx),e(zx,yUe),e(Ls,wUe),e(Ls,Wx),e(Wx,AUe),e(Ls,LUe),e(M,BUe),e(M,Bs),e(Bs,AU),e(AU,xUe),e(Bs,kUe),e(Bs,Qx),e(Qx,RUe),e(Bs,SUe),e(Bs,Hx),e(Hx,PUe),e(Bs,$Ue),e(M,IUe),e(M,Gg),e(Gg,LU),e(LU,DUe),e(Gg,jUe),e(Gg,Ux),e(Ux,NUe),e(Gg,qUe),e(M,GUe),e(M,Og),e(Og,BU),e(BU,OUe),e(Og,XUe),e(Og,Jx),e(Jx,VUe),e(Og,zUe),e(M,WUe),e(M,Xg),e(Xg,xU),e(xU,QUe),e(Xg,HUe),e(Xg,Yx),e(Yx,UUe),e(Xg,JUe),e(M,YUe),e(M,Vg),e(Vg,kU),e(kU,KUe),e(Vg,ZUe),e(Vg,Kx),e(Kx,eJe),e(Vg,oJe),e(M,rJe),e(M,xs),e(xs,RU),e(RU,tJe),e(xs,aJe),e(xs,Zx),e(Zx,nJe),e(xs,sJe),e(xs,ek),e(ek,lJe),e(xs,iJe),e(M,dJe),e(M,zg),e(zg,SU),e(SU,cJe),e(zg,fJe),e(zg,ok),e(ok,mJe),e(zg,gJe),e(M,hJe),e(M,Wg),e(Wg,PU),e(PU,pJe),e(Wg,_Je),e(Wg,rk),e(rk,uJe),e(Wg,bJe),e(M,vJe),e(M,ks),e(ks,$U),e($U,TJe),e(ks,FJe),e(ks,tk),e(tk,CJe),e(ks,MJe),e(ks,ak),e(ak,EJe),e(ks,yJe),e(M,wJe),e(M,Rs),e(Rs,IU),e(IU,AJe),e(Rs,LJe),e(Rs,nk),e(nk,BJe),e(Rs,xJe),e(Rs,sk),e(sk,kJe),e(Rs,RJe),e(mo,SJe),e(mo,DU),e(DU,PJe),e(mo,$Je),g(IM,mo,null),e(Vo,IJe),e(Vo,Qg),g(DM,Qg,null),e(Qg,DJe),e(Qg,jU),e(jU,jJe),b(d,b9e,u),b(d,Ni,u),e(Ni,Hg),e(Hg,NU),g(jM,NU,null),e(Ni,NJe),e(Ni,qU),e(qU,qJe),b(d,v9e,u),b(d,zo,u),g(NM,zo,null),e(zo,GJe),e(zo,qM),e(qM,OJe),e(qM,lk),e(lk,XJe),e(qM,VJe),e(zo,zJe),e(zo,GM),e(GM,WJe),e(GM,GU),e(GU,QJe),e(GM,HJe),e(zo,UJe),e(zo,xe),g(OM,xe,null),e(xe,JJe),e(xe,OU),e(OU,YJe),e(xe,KJe),e(xe,ja),e(ja,ZJe),e(ja,XU),e(XU,eYe),e(ja,oYe),e(ja,VU),e(VU,rYe),e(ja,tYe),e(ja,zU),e(zU,aYe),e(ja,nYe),e(xe,sYe),e(xe,se),e(se,Ug),e(Ug,WU),e(WU,lYe),e(Ug,iYe),e(Ug,ik),e(ik,dYe),e(Ug,cYe),e(se,fYe),e(se,Jg),e(Jg,QU),e(QU,mYe),e(Jg,gYe),e(Jg,dk),e(dk,hYe),e(Jg,pYe),e(se,_Ye),e(se,Yg),e(Yg,HU),e(HU,uYe),e(Yg,bYe),e(Yg,ck),e(ck,vYe),e(Yg,TYe),e(se,FYe),e(se,Kg),e(Kg,UU),e(UU,CYe),e(Kg,MYe),e(Kg,fk),e(fk,EYe),e(Kg,yYe),e(se,wYe),e(se,Zg),e(Zg,JU),e(JU,AYe),e(Zg,LYe),e(Zg,mk),e(mk,BYe),e(Zg,xYe),e(se,kYe),e(se,eh),e(eh,YU),e(YU,RYe),e(eh,SYe),e(eh,gk),e(gk,PYe),e(eh,$Ye),e(se,IYe),e(se,oh),e(oh,KU),e(KU,DYe),e(oh,jYe),e(oh,hk),e(hk,NYe),e(oh,qYe),e(se,GYe),e(se,rh),e(rh,ZU),e(ZU,OYe),e(rh,XYe),e(rh,pk),e(pk,VYe),e(rh,zYe),e(se,WYe),e(se,th),e(th,eJ),e(eJ,QYe),e(th,HYe),e(th,_k),e(_k,UYe),e(th,JYe),e(se,YYe),e(se,ah),e(ah,oJ),e(oJ,KYe),e(ah,ZYe),e(ah,uk),e(uk,eKe),e(ah,oKe),e(se,rKe),e(se,nh),e(nh,rJ),e(rJ,tKe),e(nh,aKe),e(nh,bk),e(bk,nKe),e(nh,sKe),e(se,lKe),e(se,sh),e(sh,tJ),e(tJ,iKe),e(sh,dKe),e(sh,vk),e(vk,cKe),e(sh,fKe),e(se,mKe),e(se,lh),e(lh,aJ),e(aJ,gKe),e(lh,hKe),e(lh,Tk),e(Tk,pKe),e(lh,_Ke),e(se,uKe),e(se,ih),e(ih,nJ),e(nJ,bKe),e(ih,vKe),e(ih,Fk),e(Fk,TKe),e(ih,FKe),e(se,CKe),e(se,dh),e(dh,sJ),e(sJ,MKe),e(dh,EKe),e(dh,Ck),e(Ck,yKe),e(dh,wKe),e(xe,AKe),g(ch,xe,null),e(xe,LKe),e(xe,lJ),e(lJ,BKe),e(xe,xKe),g(XM,xe,null),e(zo,kKe),e(zo,fh),g(VM,fh,null),e(fh,RKe),e(fh,iJ),e(iJ,SKe),b(d,T9e,u),b(d,qi,u),e(qi,mh),e(mh,dJ),g(zM,dJ,null),e(qi,PKe),e(qi,cJ),e(cJ,$Ke),b(d,F9e,u),b(d,Wo,u),g(WM,Wo,null),e(Wo,IKe),e(Wo,QM),e(QM,DKe),e(QM,Mk),e(Mk,jKe),e(QM,NKe),e(Wo,qKe),e(Wo,HM),e(HM,GKe),e(HM,fJ),e(fJ,OKe),e(HM,XKe),e(Wo,VKe),e(Wo,ke),g(UM,ke,null),e(ke,zKe),e(ke,mJ),e(mJ,WKe),e(ke,QKe),e(ke,Gi),e(Gi,HKe),e(Gi,gJ),e(gJ,UKe),e(Gi,JKe),e(Gi,hJ),e(hJ,YKe),e(Gi,KKe),e(ke,ZKe),e(ke,we),e(we,gh),e(gh,pJ),e(pJ,eZe),e(gh,oZe),e(gh,Ek),e(Ek,rZe),e(gh,tZe),e(we,aZe),e(we,hh),e(hh,_J),e(_J,nZe),e(hh,sZe),e(hh,yk),e(yk,lZe),e(hh,iZe),e(we,dZe),e(we,ph),e(ph,uJ),e(uJ,cZe),e(ph,fZe),e(ph,wk),e(wk,mZe),e(ph,gZe),e(we,hZe),e(we,_h),e(_h,bJ),e(bJ,pZe),e(_h,_Ze),e(_h,Ak),e(Ak,uZe),e(_h,bZe),e(we,vZe),e(we,uh),e(uh,vJ),e(vJ,TZe),e(uh,FZe),e(uh,Lk),e(Lk,CZe),e(uh,MZe),e(we,EZe),e(we,bh),e(bh,TJ),e(TJ,yZe),e(bh,wZe),e(bh,Bk),e(Bk,AZe),e(bh,LZe),e(we,BZe),e(we,vh),e(vh,FJ),e(FJ,xZe),e(vh,kZe),e(vh,xk),e(xk,RZe),e(vh,SZe),e(we,PZe),e(we,Th),e(Th,CJ),e(CJ,$Ze),e(Th,IZe),e(Th,kk),e(kk,DZe),e(Th,jZe),e(ke,NZe),g(Fh,ke,null),e(ke,qZe),e(ke,MJ),e(MJ,GZe),e(ke,OZe),g(JM,ke,null),e(Wo,XZe),e(Wo,Ch),g(YM,Ch,null),e(Ch,VZe),e(Ch,EJ),e(EJ,zZe),b(d,C9e,u),b(d,Oi,u),e(Oi,Mh),e(Mh,yJ),g(KM,yJ,null),e(Oi,WZe),e(Oi,wJ),e(wJ,QZe),b(d,M9e,u),b(d,Qo,u),g(ZM,Qo,null),e(Qo,HZe),e(Qo,Xi),e(Xi,UZe),e(Xi,AJ),e(AJ,JZe),e(Xi,YZe),e(Xi,LJ),e(LJ,KZe),e(Xi,ZZe),e(Qo,eeo),e(Qo,eE),e(eE,oeo),e(eE,BJ),e(BJ,reo),e(eE,teo),e(Qo,aeo),e(Qo,qr),g(oE,qr,null),e(qr,neo),e(qr,xJ),e(xJ,seo),e(qr,leo),e(qr,Vi),e(Vi,ieo),e(Vi,kJ),e(kJ,deo),e(Vi,ceo),e(Vi,RJ),e(RJ,feo),e(Vi,meo),e(qr,geo),e(qr,SJ),e(SJ,heo),e(qr,peo),g(rE,qr,null),e(Qo,_eo),e(Qo,Re),g(tE,Re,null),e(Re,ueo),e(Re,PJ),e(PJ,beo),e(Re,veo),e(Re,Na),e(Na,Teo),e(Na,$J),e($J,Feo),e(Na,Ceo),e(Na,IJ),e(IJ,Meo),e(Na,Eeo),e(Na,DJ),e(DJ,yeo),e(Na,weo),e(Re,Aeo),e(Re,F),e(F,Eh),e(Eh,jJ),e(jJ,Leo),e(Eh,Beo),e(Eh,Rk),e(Rk,xeo),e(Eh,keo),e(F,Reo),e(F,yh),e(yh,NJ),e(NJ,Seo),e(yh,Peo),e(yh,Sk),e(Sk,$eo),e(yh,Ieo),e(F,Deo),e(F,wh),e(wh,qJ),e(qJ,jeo),e(wh,Neo),e(wh,Pk),e(Pk,qeo),e(wh,Geo),e(F,Oeo),e(F,Ah),e(Ah,GJ),e(GJ,Xeo),e(Ah,Veo),e(Ah,$k),e($k,zeo),e(Ah,Weo),e(F,Qeo),e(F,Lh),e(Lh,OJ),e(OJ,Heo),e(Lh,Ueo),e(Lh,Ik),e(Ik,Jeo),e(Lh,Yeo),e(F,Keo),e(F,Bh),e(Bh,XJ),e(XJ,Zeo),e(Bh,eoo),e(Bh,Dk),e(Dk,ooo),e(Bh,roo),e(F,too),e(F,xh),e(xh,VJ),e(VJ,aoo),e(xh,noo),e(xh,jk),e(jk,soo),e(xh,loo),e(F,ioo),e(F,kh),e(kh,zJ),e(zJ,doo),e(kh,coo),e(kh,Nk),e(Nk,foo),e(kh,moo),e(F,goo),e(F,Rh),e(Rh,WJ),e(WJ,hoo),e(Rh,poo),e(Rh,qk),e(qk,_oo),e(Rh,uoo),e(F,boo),e(F,Sh),e(Sh,QJ),e(QJ,voo),e(Sh,Too),e(Sh,Gk),e(Gk,Foo),e(Sh,Coo),e(F,Moo),e(F,Ph),e(Ph,HJ),e(HJ,Eoo),e(Ph,yoo),e(Ph,Ok),e(Ok,woo),e(Ph,Aoo),e(F,Loo),e(F,$h),e($h,UJ),e(UJ,Boo),e($h,xoo),e($h,Xk),e(Xk,koo),e($h,Roo),e(F,Soo),e(F,Ih),e(Ih,JJ),e(JJ,Poo),e(Ih,$oo),e(Ih,Vk),e(Vk,Ioo),e(Ih,Doo),e(F,joo),e(F,Dh),e(Dh,YJ),e(YJ,Noo),e(Dh,qoo),e(Dh,zk),e(zk,Goo),e(Dh,Ooo),e(F,Xoo),e(F,jh),e(jh,KJ),e(KJ,Voo),e(jh,zoo),e(jh,Wk),e(Wk,Woo),e(jh,Qoo),e(F,Hoo),e(F,Nh),e(Nh,ZJ),e(ZJ,Uoo),e(Nh,Joo),e(Nh,Qk),e(Qk,Yoo),e(Nh,Koo),e(F,Zoo),e(F,qh),e(qh,eY),e(eY,ero),e(qh,oro),e(qh,Hk),e(Hk,rro),e(qh,tro),e(F,aro),e(F,Gh),e(Gh,oY),e(oY,nro),e(Gh,sro),e(Gh,Uk),e(Uk,lro),e(Gh,iro),e(F,dro),e(F,Oh),e(Oh,rY),e(rY,cro),e(Oh,fro),e(Oh,Jk),e(Jk,mro),e(Oh,gro),e(F,hro),e(F,Xh),e(Xh,tY),e(tY,pro),e(Xh,_ro),e(Xh,Yk),e(Yk,uro),e(Xh,bro),e(F,vro),e(F,Vh),e(Vh,aY),e(aY,Tro),e(Vh,Fro),e(Vh,Kk),e(Kk,Cro),e(Vh,Mro),e(F,Ero),e(F,zh),e(zh,nY),e(nY,yro),e(zh,wro),e(zh,Zk),e(Zk,Aro),e(zh,Lro),e(F,Bro),e(F,Wh),e(Wh,sY),e(sY,xro),e(Wh,kro),e(Wh,eR),e(eR,Rro),e(Wh,Sro),e(F,Pro),e(F,Qh),e(Qh,lY),e(lY,$ro),e(Qh,Iro),e(Qh,oR),e(oR,Dro),e(Qh,jro),e(F,Nro),e(F,Hh),e(Hh,iY),e(iY,qro),e(Hh,Gro),e(Hh,rR),e(rR,Oro),e(Hh,Xro),e(F,Vro),e(F,Uh),e(Uh,dY),e(dY,zro),e(Uh,Wro),e(Uh,tR),e(tR,Qro),e(Uh,Hro),e(F,Uro),e(F,Jh),e(Jh,cY),e(cY,Jro),e(Jh,Yro),e(Jh,aR),e(aR,Kro),e(Jh,Zro),e(F,eto),e(F,Ss),e(Ss,fY),e(fY,oto),e(Ss,rto),e(Ss,nR),e(nR,tto),e(Ss,ato),e(Ss,sR),e(sR,nto),e(Ss,sto),e(F,lto),e(F,Yh),e(Yh,mY),e(mY,ito),e(Yh,dto),e(Yh,lR),e(lR,cto),e(Yh,fto),e(F,mto),e(F,Kh),e(Kh,gY),e(gY,gto),e(Kh,hto),e(Kh,iR),e(iR,pto),e(Kh,_to),e(F,uto),e(F,Zh),e(Zh,hY),e(hY,bto),e(Zh,vto),e(Zh,dR),e(dR,Tto),e(Zh,Fto),e(F,Cto),e(F,ep),e(ep,pY),e(pY,Mto),e(ep,Eto),e(ep,cR),e(cR,yto),e(ep,wto),e(F,Ato),e(F,op),e(op,_Y),e(_Y,Lto),e(op,Bto),e(op,fR),e(fR,xto),e(op,kto),e(F,Rto),e(F,rp),e(rp,uY),e(uY,Sto),e(rp,Pto),e(rp,mR),e(mR,$to),e(rp,Ito),e(F,Dto),e(F,tp),e(tp,bY),e(bY,jto),e(tp,Nto),e(tp,gR),e(gR,qto),e(tp,Gto),e(F,Oto),e(F,ap),e(ap,vY),e(vY,Xto),e(ap,Vto),e(ap,hR),e(hR,zto),e(ap,Wto),e(F,Qto),e(F,np),e(np,TY),e(TY,Hto),e(np,Uto),e(np,pR),e(pR,Jto),e(np,Yto),e(F,Kto),e(F,sp),e(sp,FY),e(FY,Zto),e(sp,eao),e(sp,_R),e(_R,oao),e(sp,rao),e(F,tao),e(F,lp),e(lp,CY),e(CY,aao),e(lp,nao),e(lp,uR),e(uR,sao),e(lp,lao),e(F,iao),e(F,ip),e(ip,MY),e(MY,dao),e(ip,cao),e(ip,bR),e(bR,fao),e(ip,mao),e(F,gao),e(F,dp),e(dp,EY),e(EY,hao),e(dp,pao),e(dp,vR),e(vR,_ao),e(dp,uao),e(F,bao),e(F,cp),e(cp,yY),e(yY,vao),e(cp,Tao),e(cp,TR),e(TR,Fao),e(cp,Cao),e(F,Mao),e(F,fp),e(fp,wY),e(wY,Eao),e(fp,yao),e(fp,FR),e(FR,wao),e(fp,Aao),e(F,Lao),e(F,mp),e(mp,AY),e(AY,Bao),e(mp,xao),e(mp,CR),e(CR,kao),e(mp,Rao),e(F,Sao),e(F,gp),e(gp,LY),e(LY,Pao),e(gp,$ao),e(gp,MR),e(MR,Iao),e(gp,Dao),e(F,jao),e(F,hp),e(hp,BY),e(BY,Nao),e(hp,qao),e(hp,ER),e(ER,Gao),e(hp,Oao),e(F,Xao),e(F,pp),e(pp,xY),e(xY,Vao),e(pp,zao),e(pp,yR),e(yR,Wao),e(pp,Qao),e(F,Hao),e(F,_p),e(_p,kY),e(kY,Uao),e(_p,Jao),e(_p,wR),e(wR,Yao),e(_p,Kao),e(F,Zao),e(F,up),e(up,RY),e(RY,eno),e(up,ono),e(up,AR),e(AR,rno),e(up,tno),e(F,ano),e(F,bp),e(bp,SY),e(SY,nno),e(bp,sno),e(bp,LR),e(LR,lno),e(bp,ino),e(F,dno),e(F,vp),e(vp,PY),e(PY,cno),e(vp,fno),e(vp,BR),e(BR,mno),e(vp,gno),e(F,hno),e(F,Tp),e(Tp,$Y),e($Y,pno),e(Tp,_no),e(Tp,xR),e(xR,uno),e(Tp,bno),e(F,vno),e(F,Fp),e(Fp,IY),e(IY,Tno),e(Fp,Fno),e(Fp,kR),e(kR,Cno),e(Fp,Mno),e(F,Eno),e(F,Cp),e(Cp,DY),e(DY,yno),e(Cp,wno),e(Cp,RR),e(RR,Ano),e(Cp,Lno),e(F,Bno),e(F,Mp),e(Mp,jY),e(jY,xno),e(Mp,kno),e(Mp,SR),e(SR,Rno),e(Mp,Sno),e(F,Pno),e(F,Ep),e(Ep,NY),e(NY,$no),e(Ep,Ino),e(Ep,PR),e(PR,Dno),e(Ep,jno),e(F,Nno),e(F,yp),e(yp,qY),e(qY,qno),e(yp,Gno),e(yp,$R),e($R,Ono),e(yp,Xno),e(F,Vno),e(F,wp),e(wp,GY),e(GY,zno),e(wp,Wno),e(wp,IR),e(IR,Qno),e(wp,Hno),e(F,Uno),e(F,Ap),e(Ap,OY),e(OY,Jno),e(Ap,Yno),e(Ap,DR),e(DR,Kno),e(Ap,Zno),e(F,eso),e(F,Lp),e(Lp,XY),e(XY,oso),e(Lp,rso),e(Lp,jR),e(jR,tso),e(Lp,aso),e(F,nso),e(F,Bp),e(Bp,VY),e(VY,sso),e(Bp,lso),e(Bp,NR),e(NR,iso),e(Bp,dso),e(F,cso),e(F,xp),e(xp,zY),e(zY,fso),e(xp,mso),e(xp,qR),e(qR,gso),e(xp,hso),e(F,pso),e(F,kp),e(kp,WY),e(WY,_so),e(kp,uso),e(kp,GR),e(GR,bso),e(kp,vso),e(F,Tso),e(F,Rp),e(Rp,QY),e(QY,Fso),e(Rp,Cso),e(Rp,OR),e(OR,Mso),e(Rp,Eso),e(F,yso),e(F,Sp),e(Sp,HY),e(HY,wso),e(Sp,Aso),e(Sp,XR),e(XR,Lso),e(Sp,Bso),e(F,xso),e(F,Pp),e(Pp,UY),e(UY,kso),e(Pp,Rso),e(Pp,VR),e(VR,Sso),e(Pp,Pso),e(F,$so),e(F,$p),e($p,JY),e(JY,Iso),e($p,Dso),e($p,zR),e(zR,jso),e($p,Nso),e(F,qso),e(F,Ip),e(Ip,YY),e(YY,Gso),e(Ip,Oso),e(Ip,WR),e(WR,Xso),e(Ip,Vso),e(F,zso),e(F,Dp),e(Dp,KY),e(KY,Wso),e(Dp,Qso),e(Dp,QR),e(QR,Hso),e(Dp,Uso),e(F,Jso),e(F,jp),e(jp,ZY),e(ZY,Yso),e(jp,Kso),e(jp,HR),e(HR,Zso),e(jp,elo),e(F,olo),e(F,Np),e(Np,eK),e(eK,rlo),e(Np,tlo),e(Np,UR),e(UR,alo),e(Np,nlo),e(F,slo),e(F,qp),e(qp,oK),e(oK,llo),e(qp,ilo),e(qp,JR),e(JR,dlo),e(qp,clo),e(F,flo),e(F,Gp),e(Gp,rK),e(rK,mlo),e(Gp,glo),e(Gp,YR),e(YR,hlo),e(Gp,plo),e(F,_lo),e(F,Op),e(Op,tK),e(tK,ulo),e(Op,blo),e(Op,KR),e(KR,vlo),e(Op,Tlo),e(F,Flo),e(F,Xp),e(Xp,aK),e(aK,Clo),e(Xp,Mlo),e(Xp,ZR),e(ZR,Elo),e(Xp,ylo),e(F,wlo),e(F,Vp),e(Vp,nK),e(nK,Alo),e(Vp,Llo),e(Vp,eS),e(eS,Blo),e(Vp,xlo),e(F,klo),e(F,zp),e(zp,sK),e(sK,Rlo),e(zp,Slo),e(zp,oS),e(oS,Plo),e(zp,$lo),e(F,Ilo),e(F,Wp),e(Wp,lK),e(lK,Dlo),e(Wp,jlo),e(Wp,rS),e(rS,Nlo),e(Wp,qlo),e(F,Glo),e(F,Qp),e(Qp,iK),e(iK,Olo),e(Qp,Xlo),e(Qp,tS),e(tS,Vlo),e(Qp,zlo),e(F,Wlo),e(F,Hp),e(Hp,dK),e(dK,Qlo),e(Hp,Hlo),e(Hp,aS),e(aS,Ulo),e(Hp,Jlo),e(F,Ylo),e(F,Up),e(Up,cK),e(cK,Klo),e(Up,Zlo),e(Up,nS),e(nS,eio),e(Up,oio),e(F,rio),e(F,Jp),e(Jp,fK),e(fK,tio),e(Jp,aio),e(Jp,sS),e(sS,nio),e(Jp,sio),e(F,lio),e(F,Yp),e(Yp,mK),e(mK,iio),e(Yp,dio),e(Yp,lS),e(lS,cio),e(Yp,fio),e(F,mio),e(F,Kp),e(Kp,gK),e(gK,gio),e(Kp,hio),e(Kp,iS),e(iS,pio),e(Kp,_io),e(F,uio),e(F,Zp),e(Zp,hK),e(hK,bio),e(Zp,vio),e(Zp,dS),e(dS,Tio),e(Zp,Fio),e(F,Cio),e(F,e_),e(e_,pK),e(pK,Mio),e(e_,Eio),e(e_,cS),e(cS,yio),e(e_,wio),e(Re,Aio),e(Re,o_),e(o_,Lio),e(o_,_K),e(_K,Bio),e(o_,xio),e(o_,uK),e(uK,kio),e(Re,Rio),e(Re,bK),e(bK,Sio),e(Re,Pio),g(aE,Re,null),b(d,E9e,u),b(d,zi,u),e(zi,r_),e(r_,vK),g(nE,vK,null),e(zi,$io),e(zi,TK),e(TK,Iio),b(d,y9e,u),b(d,Ho,u),g(sE,Ho,null),e(Ho,Dio),e(Ho,Wi),e(Wi,jio),e(Wi,FK),e(FK,Nio),e(Wi,qio),e(Wi,CK),e(CK,Gio),e(Wi,Oio),e(Ho,Xio),e(Ho,lE),e(lE,Vio),e(lE,MK),e(MK,zio),e(lE,Wio),e(Ho,Qio),e(Ho,Gr),g(iE,Gr,null),e(Gr,Hio),e(Gr,EK),e(EK,Uio),e(Gr,Jio),e(Gr,Qi),e(Qi,Yio),e(Qi,yK),e(yK,Kio),e(Qi,Zio),e(Qi,wK),e(wK,edo),e(Qi,odo),e(Gr,rdo),e(Gr,AK),e(AK,tdo),e(Gr,ado),g(dE,Gr,null),e(Ho,ndo),e(Ho,Se),g(cE,Se,null),e(Se,sdo),e(Se,LK),e(LK,ldo),e(Se,ido),e(Se,qa),e(qa,ddo),e(qa,BK),e(BK,cdo),e(qa,fdo),e(qa,xK),e(xK,mdo),e(qa,gdo),e(qa,kK),e(kK,hdo),e(qa,pdo),e(Se,_do),e(Se,k),e(k,t_),e(t_,RK),e(RK,udo),e(t_,bdo),e(t_,fS),e(fS,vdo),e(t_,Tdo),e(k,Fdo),e(k,a_),e(a_,SK),e(SK,Cdo),e(a_,Mdo),e(a_,mS),e(mS,Edo),e(a_,ydo),e(k,wdo),e(k,n_),e(n_,PK),e(PK,Ado),e(n_,Ldo),e(n_,gS),e(gS,Bdo),e(n_,xdo),e(k,kdo),e(k,s_),e(s_,$K),e($K,Rdo),e(s_,Sdo),e(s_,hS),e(hS,Pdo),e(s_,$do),e(k,Ido),e(k,l_),e(l_,IK),e(IK,Ddo),e(l_,jdo),e(l_,pS),e(pS,Ndo),e(l_,qdo),e(k,Gdo),e(k,i_),e(i_,DK),e(DK,Odo),e(i_,Xdo),e(i_,_S),e(_S,Vdo),e(i_,zdo),e(k,Wdo),e(k,d_),e(d_,jK),e(jK,Qdo),e(d_,Hdo),e(d_,uS),e(uS,Udo),e(d_,Jdo),e(k,Ydo),e(k,c_),e(c_,NK),e(NK,Kdo),e(c_,Zdo),e(c_,bS),e(bS,eco),e(c_,oco),e(k,rco),e(k,f_),e(f_,qK),e(qK,tco),e(f_,aco),e(f_,vS),e(vS,nco),e(f_,sco),e(k,lco),e(k,m_),e(m_,GK),e(GK,ico),e(m_,dco),e(m_,TS),e(TS,cco),e(m_,fco),e(k,mco),e(k,g_),e(g_,OK),e(OK,gco),e(g_,hco),e(g_,FS),e(FS,pco),e(g_,_co),e(k,uco),e(k,h_),e(h_,XK),e(XK,bco),e(h_,vco),e(h_,CS),e(CS,Tco),e(h_,Fco),e(k,Cco),e(k,p_),e(p_,VK),e(VK,Mco),e(p_,Eco),e(p_,MS),e(MS,yco),e(p_,wco),e(k,Aco),e(k,__),e(__,zK),e(zK,Lco),e(__,Bco),e(__,ES),e(ES,xco),e(__,kco),e(k,Rco),e(k,u_),e(u_,WK),e(WK,Sco),e(u_,Pco),e(u_,yS),e(yS,$co),e(u_,Ico),e(k,Dco),e(k,b_),e(b_,QK),e(QK,jco),e(b_,Nco),e(b_,wS),e(wS,qco),e(b_,Gco),e(k,Oco),e(k,v_),e(v_,HK),e(HK,Xco),e(v_,Vco),e(v_,AS),e(AS,zco),e(v_,Wco),e(k,Qco),e(k,T_),e(T_,UK),e(UK,Hco),e(T_,Uco),e(T_,LS),e(LS,Jco),e(T_,Yco),e(k,Kco),e(k,F_),e(F_,JK),e(JK,Zco),e(F_,efo),e(F_,BS),e(BS,ofo),e(F_,rfo),e(k,tfo),e(k,C_),e(C_,YK),e(YK,afo),e(C_,nfo),e(C_,xS),e(xS,sfo),e(C_,lfo),e(k,ifo),e(k,M_),e(M_,KK),e(KK,dfo),e(M_,cfo),e(M_,kS),e(kS,ffo),e(M_,mfo),e(k,gfo),e(k,E_),e(E_,ZK),e(ZK,hfo),e(E_,pfo),e(E_,RS),e(RS,_fo),e(E_,ufo),e(k,bfo),e(k,y_),e(y_,eZ),e(eZ,vfo),e(y_,Tfo),e(y_,SS),e(SS,Ffo),e(y_,Cfo),e(k,Mfo),e(k,w_),e(w_,oZ),e(oZ,Efo),e(w_,yfo),e(w_,PS),e(PS,wfo),e(w_,Afo),e(k,Lfo),e(k,A_),e(A_,rZ),e(rZ,Bfo),e(A_,xfo),e(A_,$S),e($S,kfo),e(A_,Rfo),e(k,Sfo),e(k,L_),e(L_,tZ),e(tZ,Pfo),e(L_,$fo),e(L_,IS),e(IS,Ifo),e(L_,Dfo),e(k,jfo),e(k,B_),e(B_,aZ),e(aZ,Nfo),e(B_,qfo),e(B_,DS),e(DS,Gfo),e(B_,Ofo),e(k,Xfo),e(k,x_),e(x_,nZ),e(nZ,Vfo),e(x_,zfo),e(x_,jS),e(jS,Wfo),e(x_,Qfo),e(k,Hfo),e(k,k_),e(k_,sZ),e(sZ,Ufo),e(k_,Jfo),e(k_,NS),e(NS,Yfo),e(k_,Kfo),e(k,Zfo),e(k,R_),e(R_,lZ),e(lZ,emo),e(R_,omo),e(R_,qS),e(qS,rmo),e(R_,tmo),e(k,amo),e(k,S_),e(S_,iZ),e(iZ,nmo),e(S_,smo),e(S_,GS),e(GS,lmo),e(S_,imo),e(k,dmo),e(k,P_),e(P_,dZ),e(dZ,cmo),e(P_,fmo),e(P_,OS),e(OS,mmo),e(P_,gmo),e(k,hmo),e(k,$_),e($_,cZ),e(cZ,pmo),e($_,_mo),e($_,XS),e(XS,umo),e($_,bmo),e(k,vmo),e(k,I_),e(I_,fZ),e(fZ,Tmo),e(I_,Fmo),e(I_,VS),e(VS,Cmo),e(I_,Mmo),e(k,Emo),e(k,D_),e(D_,mZ),e(mZ,ymo),e(D_,wmo),e(D_,zS),e(zS,Amo),e(D_,Lmo),e(k,Bmo),e(k,j_),e(j_,gZ),e(gZ,xmo),e(j_,kmo),e(j_,WS),e(WS,Rmo),e(j_,Smo),e(k,Pmo),e(k,N_),e(N_,hZ),e(hZ,$mo),e(N_,Imo),e(N_,QS),e(QS,Dmo),e(N_,jmo),e(k,Nmo),e(k,q_),e(q_,pZ),e(pZ,qmo),e(q_,Gmo),e(q_,HS),e(HS,Omo),e(q_,Xmo),e(k,Vmo),e(k,G_),e(G_,_Z),e(_Z,zmo),e(G_,Wmo),e(G_,US),e(US,Qmo),e(G_,Hmo),e(Se,Umo),e(Se,O_),e(O_,Jmo),e(O_,uZ),e(uZ,Ymo),e(O_,Kmo),e(O_,bZ),e(bZ,Zmo),e(Se,ego),e(Se,vZ),e(vZ,ogo),e(Se,rgo),g(fE,Se,null),b(d,w9e,u),b(d,Hi,u),e(Hi,X_),e(X_,TZ),g(mE,TZ,null),e(Hi,tgo),e(Hi,FZ),e(FZ,ago),b(d,A9e,u),b(d,Uo,u),g(gE,Uo,null),e(Uo,ngo),e(Uo,Ui),e(Ui,sgo),e(Ui,CZ),e(CZ,lgo),e(Ui,igo),e(Ui,MZ),e(MZ,dgo),e(Ui,cgo),e(Uo,fgo),e(Uo,hE),e(hE,mgo),e(hE,EZ),e(EZ,ggo),e(hE,hgo),e(Uo,pgo),e(Uo,Or),g(pE,Or,null),e(Or,_go),e(Or,yZ),e(yZ,ugo),e(Or,bgo),e(Or,Ji),e(Ji,vgo),e(Ji,wZ),e(wZ,Tgo),e(Ji,Fgo),e(Ji,AZ),e(AZ,Cgo),e(Ji,Mgo),e(Or,Ego),e(Or,LZ),e(LZ,ygo),e(Or,wgo),g(_E,Or,null),e(Uo,Ago),e(Uo,Pe),g(uE,Pe,null),e(Pe,Lgo),e(Pe,BZ),e(BZ,Bgo),e(Pe,xgo),e(Pe,Ga),e(Ga,kgo),e(Ga,xZ),e(xZ,Rgo),e(Ga,Sgo),e(Ga,kZ),e(kZ,Pgo),e(Ga,$go),e(Ga,RZ),e(RZ,Igo),e(Ga,Dgo),e(Pe,jgo),e(Pe,$),e($,V_),e(V_,SZ),e(SZ,Ngo),e(V_,qgo),e(V_,JS),e(JS,Ggo),e(V_,Ogo),e($,Xgo),e($,z_),e(z_,PZ),e(PZ,Vgo),e(z_,zgo),e(z_,YS),e(YS,Wgo),e(z_,Qgo),e($,Hgo),e($,W_),e(W_,$Z),e($Z,Ugo),e(W_,Jgo),e(W_,KS),e(KS,Ygo),e(W_,Kgo),e($,Zgo),e($,Q_),e(Q_,IZ),e(IZ,eho),e(Q_,oho),e(Q_,ZS),e(ZS,rho),e(Q_,tho),e($,aho),e($,H_),e(H_,DZ),e(DZ,nho),e(H_,sho),e(H_,eP),e(eP,lho),e(H_,iho),e($,dho),e($,U_),e(U_,jZ),e(jZ,cho),e(U_,fho),e(U_,oP),e(oP,mho),e(U_,gho),e($,hho),e($,J_),e(J_,NZ),e(NZ,pho),e(J_,_ho),e(J_,rP),e(rP,uho),e(J_,bho),e($,vho),e($,Y_),e(Y_,qZ),e(qZ,Tho),e(Y_,Fho),e(Y_,tP),e(tP,Cho),e(Y_,Mho),e($,Eho),e($,K_),e(K_,GZ),e(GZ,yho),e(K_,who),e(K_,aP),e(aP,Aho),e(K_,Lho),e($,Bho),e($,Z_),e(Z_,OZ),e(OZ,xho),e(Z_,kho),e(Z_,nP),e(nP,Rho),e(Z_,Sho),e($,Pho),e($,eu),e(eu,XZ),e(XZ,$ho),e(eu,Iho),e(eu,sP),e(sP,Dho),e(eu,jho),e($,Nho),e($,ou),e(ou,VZ),e(VZ,qho),e(ou,Gho),e(ou,lP),e(lP,Oho),e(ou,Xho),e($,Vho),e($,ru),e(ru,zZ),e(zZ,zho),e(ru,Who),e(ru,iP),e(iP,Qho),e(ru,Hho),e($,Uho),e($,tu),e(tu,WZ),e(WZ,Jho),e(tu,Yho),e(tu,dP),e(dP,Kho),e(tu,Zho),e($,epo),e($,au),e(au,QZ),e(QZ,opo),e(au,rpo),e(au,cP),e(cP,tpo),e(au,apo),e($,npo),e($,nu),e(nu,HZ),e(HZ,spo),e(nu,lpo),e(nu,fP),e(fP,ipo),e(nu,dpo),e($,cpo),e($,su),e(su,UZ),e(UZ,fpo),e(su,mpo),e(su,mP),e(mP,gpo),e(su,hpo),e($,ppo),e($,lu),e(lu,JZ),e(JZ,_po),e(lu,upo),e(lu,gP),e(gP,bpo),e(lu,vpo),e($,Tpo),e($,iu),e(iu,YZ),e(YZ,Fpo),e(iu,Cpo),e(iu,hP),e(hP,Mpo),e(iu,Epo),e($,ypo),e($,du),e(du,KZ),e(KZ,wpo),e(du,Apo),e(du,pP),e(pP,Lpo),e(du,Bpo),e($,xpo),e($,cu),e(cu,ZZ),e(ZZ,kpo),e(cu,Rpo),e(cu,_P),e(_P,Spo),e(cu,Ppo),e($,$po),e($,fu),e(fu,eee),e(eee,Ipo),e(fu,Dpo),e(fu,uP),e(uP,jpo),e(fu,Npo),e($,qpo),e($,mu),e(mu,oee),e(oee,Gpo),e(mu,Opo),e(mu,bP),e(bP,Xpo),e(mu,Vpo),e($,zpo),e($,gu),e(gu,ree),e(ree,Wpo),e(gu,Qpo),e(gu,vP),e(vP,Hpo),e(gu,Upo),e($,Jpo),e($,hu),e(hu,tee),e(tee,Ypo),e(hu,Kpo),e(hu,TP),e(TP,Zpo),e(hu,e_o),e($,o_o),e($,pu),e(pu,aee),e(aee,r_o),e(pu,t_o),e(pu,FP),e(FP,a_o),e(pu,n_o),e($,s_o),e($,_u),e(_u,nee),e(nee,l_o),e(_u,i_o),e(_u,CP),e(CP,d_o),e(_u,c_o),e($,f_o),e($,uu),e(uu,see),e(see,m_o),e(uu,g_o),e(uu,MP),e(MP,h_o),e(uu,p_o),e($,__o),e($,bu),e(bu,lee),e(lee,u_o),e(bu,b_o),e(bu,EP),e(EP,v_o),e(bu,T_o),e($,F_o),e($,vu),e(vu,iee),e(iee,C_o),e(vu,M_o),e(vu,yP),e(yP,E_o),e(vu,y_o),e($,w_o),e($,Tu),e(Tu,dee),e(dee,A_o),e(Tu,L_o),e(Tu,wP),e(wP,B_o),e(Tu,x_o),e($,k_o),e($,Fu),e(Fu,cee),e(cee,R_o),e(Fu,S_o),e(Fu,AP),e(AP,P_o),e(Fu,$_o),e($,I_o),e($,Cu),e(Cu,fee),e(fee,D_o),e(Cu,j_o),e(Cu,LP),e(LP,N_o),e(Cu,q_o),e($,G_o),e($,Mu),e(Mu,mee),e(mee,O_o),e(Mu,X_o),e(Mu,BP),e(BP,V_o),e(Mu,z_o),e($,W_o),e($,Eu),e(Eu,gee),e(gee,Q_o),e(Eu,H_o),e(Eu,xP),e(xP,U_o),e(Eu,J_o),e(Pe,Y_o),e(Pe,yu),e(yu,K_o),e(yu,hee),e(hee,Z_o),e(yu,euo),e(yu,pee),e(pee,ouo),e(Pe,ruo),e(Pe,_ee),e(_ee,tuo),e(Pe,auo),g(bE,Pe,null),b(d,L9e,u),b(d,Yi,u),e(Yi,wu),e(wu,uee),g(vE,uee,null),e(Yi,nuo),e(Yi,bee),e(bee,suo),b(d,B9e,u),b(d,Jo,u),g(TE,Jo,null),e(Jo,luo),e(Jo,Ki),e(Ki,iuo),e(Ki,vee),e(vee,duo),e(Ki,cuo),e(Ki,Tee),e(Tee,fuo),e(Ki,muo),e(Jo,guo),e(Jo,FE),e(FE,huo),e(FE,Fee),e(Fee,puo),e(FE,_uo),e(Jo,uuo),e(Jo,Xr),g(CE,Xr,null),e(Xr,buo),e(Xr,Cee),e(Cee,vuo),e(Xr,Tuo),e(Xr,Zi),e(Zi,Fuo),e(Zi,Mee),e(Mee,Cuo),e(Zi,Muo),e(Zi,Eee),e(Eee,Euo),e(Zi,yuo),e(Xr,wuo),e(Xr,yee),e(yee,Auo),e(Xr,Luo),g(ME,Xr,null),e(Jo,Buo),e(Jo,$e),g(EE,$e,null),e($e,xuo),e($e,wee),e(wee,kuo),e($e,Ruo),e($e,Oa),e(Oa,Suo),e(Oa,Aee),e(Aee,Puo),e(Oa,$uo),e(Oa,Lee),e(Lee,Iuo),e(Oa,Duo),e(Oa,Bee),e(Bee,juo),e(Oa,Nuo),e($e,quo),e($e,I),e(I,Au),e(Au,xee),e(xee,Guo),e(Au,Ouo),e(Au,kP),e(kP,Xuo),e(Au,Vuo),e(I,zuo),e(I,Lu),e(Lu,kee),e(kee,Wuo),e(Lu,Quo),e(Lu,RP),e(RP,Huo),e(Lu,Uuo),e(I,Juo),e(I,Bu),e(Bu,Ree),e(Ree,Yuo),e(Bu,Kuo),e(Bu,SP),e(SP,Zuo),e(Bu,e5o),e(I,o5o),e(I,xu),e(xu,See),e(See,r5o),e(xu,t5o),e(xu,PP),e(PP,a5o),e(xu,n5o),e(I,s5o),e(I,ku),e(ku,Pee),e(Pee,l5o),e(ku,i5o),e(ku,$P),e($P,d5o),e(ku,c5o),e(I,f5o),e(I,Ru),e(Ru,$ee),e($ee,m5o),e(Ru,g5o),e(Ru,IP),e(IP,h5o),e(Ru,p5o),e(I,_5o),e(I,Su),e(Su,Iee),e(Iee,u5o),e(Su,b5o),e(Su,DP),e(DP,v5o),e(Su,T5o),e(I,F5o),e(I,Pu),e(Pu,Dee),e(Dee,C5o),e(Pu,M5o),e(Pu,jP),e(jP,E5o),e(Pu,y5o),e(I,w5o),e(I,$u),e($u,jee),e(jee,A5o),e($u,L5o),e($u,NP),e(NP,B5o),e($u,x5o),e(I,k5o),e(I,Iu),e(Iu,Nee),e(Nee,R5o),e(Iu,S5o),e(Iu,qP),e(qP,P5o),e(Iu,$5o),e(I,I5o),e(I,Du),e(Du,qee),e(qee,D5o),e(Du,j5o),e(Du,GP),e(GP,N5o),e(Du,q5o),e(I,G5o),e(I,ju),e(ju,Gee),e(Gee,O5o),e(ju,X5o),e(ju,OP),e(OP,V5o),e(ju,z5o),e(I,W5o),e(I,Nu),e(Nu,Oee),e(Oee,Q5o),e(Nu,H5o),e(Nu,XP),e(XP,U5o),e(Nu,J5o),e(I,Y5o),e(I,qu),e(qu,Xee),e(Xee,K5o),e(qu,Z5o),e(qu,VP),e(VP,e1o),e(qu,o1o),e(I,r1o),e(I,Gu),e(Gu,Vee),e(Vee,t1o),e(Gu,a1o),e(Gu,zP),e(zP,n1o),e(Gu,s1o),e(I,l1o),e(I,Ou),e(Ou,zee),e(zee,i1o),e(Ou,d1o),e(Ou,WP),e(WP,c1o),e(Ou,f1o),e(I,m1o),e(I,Xu),e(Xu,Wee),e(Wee,g1o),e(Xu,h1o),e(Xu,QP),e(QP,p1o),e(Xu,_1o),e(I,u1o),e(I,Vu),e(Vu,Qee),e(Qee,b1o),e(Vu,v1o),e(Vu,HP),e(HP,T1o),e(Vu,F1o),e(I,C1o),e(I,zu),e(zu,Hee),e(Hee,M1o),e(zu,E1o),e(zu,UP),e(UP,y1o),e(zu,w1o),e(I,A1o),e(I,Wu),e(Wu,Uee),e(Uee,L1o),e(Wu,B1o),e(Wu,JP),e(JP,x1o),e(Wu,k1o),e(I,R1o),e(I,Qu),e(Qu,Jee),e(Jee,S1o),e(Qu,P1o),e(Qu,YP),e(YP,$1o),e(Qu,I1o),e(I,D1o),e(I,Hu),e(Hu,Yee),e(Yee,j1o),e(Hu,N1o),e(Hu,KP),e(KP,q1o),e(Hu,G1o),e(I,O1o),e(I,Uu),e(Uu,Kee),e(Kee,X1o),e(Uu,V1o),e(Uu,ZP),e(ZP,z1o),e(Uu,W1o),e(I,Q1o),e(I,Ju),e(Ju,Zee),e(Zee,H1o),e(Ju,U1o),e(Ju,e$),e(e$,J1o),e(Ju,Y1o),e(I,K1o),e(I,Yu),e(Yu,eoe),e(eoe,Z1o),e(Yu,ebo),e(Yu,o$),e(o$,obo),e(Yu,rbo),e(I,tbo),e(I,Ku),e(Ku,ooe),e(ooe,abo),e(Ku,nbo),e(Ku,r$),e(r$,sbo),e(Ku,lbo),e(I,ibo),e(I,Zu),e(Zu,roe),e(roe,dbo),e(Zu,cbo),e(Zu,t$),e(t$,fbo),e(Zu,mbo),e(I,gbo),e(I,e5),e(e5,toe),e(toe,hbo),e(e5,pbo),e(e5,a$),e(a$,_bo),e(e5,ubo),e(I,bbo),e(I,o5),e(o5,aoe),e(aoe,vbo),e(o5,Tbo),e(o5,n$),e(n$,Fbo),e(o5,Cbo),e(I,Mbo),e(I,r5),e(r5,noe),e(noe,Ebo),e(r5,ybo),e(r5,s$),e(s$,wbo),e(r5,Abo),e(I,Lbo),e(I,t5),e(t5,soe),e(soe,Bbo),e(t5,xbo),e(t5,loe),e(loe,kbo),e(t5,Rbo),e(I,Sbo),e(I,a5),e(a5,ioe),e(ioe,Pbo),e(a5,$bo),e(a5,l$),e(l$,Ibo),e(a5,Dbo),e(I,jbo),e(I,n5),e(n5,doe),e(doe,Nbo),e(n5,qbo),e(n5,i$),e(i$,Gbo),e(n5,Obo),e(I,Xbo),e(I,s5),e(s5,coe),e(coe,Vbo),e(s5,zbo),e(s5,d$),e(d$,Wbo),e(s5,Qbo),e(I,Hbo),e(I,l5),e(l5,foe),e(foe,Ubo),e(l5,Jbo),e(l5,c$),e(c$,Ybo),e(l5,Kbo),e($e,Zbo),e($e,i5),e(i5,e2o),e(i5,moe),e(moe,o2o),e(i5,r2o),e(i5,goe),e(goe,t2o),e($e,a2o),e($e,hoe),e(hoe,n2o),e($e,s2o),g(yE,$e,null),b(d,x9e,u),b(d,ed,u),e(ed,d5),e(d5,poe),g(wE,poe,null),e(ed,l2o),e(ed,_oe),e(_oe,i2o),b(d,k9e,u),b(d,Yo,u),g(AE,Yo,null),e(Yo,d2o),e(Yo,od),e(od,c2o),e(od,uoe),e(uoe,f2o),e(od,m2o),e(od,boe),e(boe,g2o),e(od,h2o),e(Yo,p2o),e(Yo,LE),e(LE,_2o),e(LE,voe),e(voe,u2o),e(LE,b2o),e(Yo,v2o),e(Yo,Vr),g(BE,Vr,null),e(Vr,T2o),e(Vr,Toe),e(Toe,F2o),e(Vr,C2o),e(Vr,rd),e(rd,M2o),e(rd,Foe),e(Foe,E2o),e(rd,y2o),e(rd,Coe),e(Coe,w2o),e(rd,A2o),e(Vr,L2o),e(Vr,Moe),e(Moe,B2o),e(Vr,x2o),g(xE,Vr,null),e(Yo,k2o),e(Yo,Ie),g(kE,Ie,null),e(Ie,R2o),e(Ie,Eoe),e(Eoe,S2o),e(Ie,P2o),e(Ie,Xa),e(Xa,$2o),e(Xa,yoe),e(yoe,I2o),e(Xa,D2o),e(Xa,woe),e(woe,j2o),e(Xa,N2o),e(Xa,Aoe),e(Aoe,q2o),e(Xa,G2o),e(Ie,O2o),e(Ie,ae),e(ae,c5),e(c5,Loe),e(Loe,X2o),e(c5,V2o),e(c5,f$),e(f$,z2o),e(c5,W2o),e(ae,Q2o),e(ae,f5),e(f5,Boe),e(Boe,H2o),e(f5,U2o),e(f5,m$),e(m$,J2o),e(f5,Y2o),e(ae,K2o),e(ae,m5),e(m5,xoe),e(xoe,Z2o),e(m5,evo),e(m5,g$),e(g$,ovo),e(m5,rvo),e(ae,tvo),e(ae,g5),e(g5,koe),e(koe,avo),e(g5,nvo),e(g5,h$),e(h$,svo),e(g5,lvo),e(ae,ivo),e(ae,h5),e(h5,Roe),e(Roe,dvo),e(h5,cvo),e(h5,p$),e(p$,fvo),e(h5,mvo),e(ae,gvo),e(ae,p5),e(p5,Soe),e(Soe,hvo),e(p5,pvo),e(p5,_$),e(_$,_vo),e(p5,uvo),e(ae,bvo),e(ae,_5),e(_5,Poe),e(Poe,vvo),e(_5,Tvo),e(_5,u$),e(u$,Fvo),e(_5,Cvo),e(ae,Mvo),e(ae,u5),e(u5,$oe),e($oe,Evo),e(u5,yvo),e(u5,b$),e(b$,wvo),e(u5,Avo),e(ae,Lvo),e(ae,b5),e(b5,Ioe),e(Ioe,Bvo),e(b5,xvo),e(b5,v$),e(v$,kvo),e(b5,Rvo),e(ae,Svo),e(ae,v5),e(v5,Doe),e(Doe,Pvo),e(v5,$vo),e(v5,T$),e(T$,Ivo),e(v5,Dvo),e(ae,jvo),e(ae,T5),e(T5,joe),e(joe,Nvo),e(T5,qvo),e(T5,F$),e(F$,Gvo),e(T5,Ovo),e(ae,Xvo),e(ae,F5),e(F5,Noe),e(Noe,Vvo),e(F5,zvo),e(F5,C$),e(C$,Wvo),e(F5,Qvo),e(ae,Hvo),e(ae,C5),e(C5,qoe),e(qoe,Uvo),e(C5,Jvo),e(C5,M$),e(M$,Yvo),e(C5,Kvo),e(ae,Zvo),e(ae,M5),e(M5,Goe),e(Goe,e0o),e(M5,o0o),e(M5,E$),e(E$,r0o),e(M5,t0o),e(ae,a0o),e(ae,E5),e(E5,Ooe),e(Ooe,n0o),e(E5,s0o),e(E5,y$),e(y$,l0o),e(E5,i0o),e(ae,d0o),e(ae,y5),e(y5,Xoe),e(Xoe,c0o),e(y5,f0o),e(y5,w$),e(w$,m0o),e(y5,g0o),e(Ie,h0o),e(Ie,w5),e(w5,p0o),e(w5,Voe),e(Voe,_0o),e(w5,u0o),e(w5,zoe),e(zoe,b0o),e(Ie,v0o),e(Ie,Woe),e(Woe,T0o),e(Ie,F0o),g(RE,Ie,null),b(d,R9e,u),b(d,td,u),e(td,A5),e(A5,Qoe),g(SE,Qoe,null),e(td,C0o),e(td,Hoe),e(Hoe,M0o),b(d,S9e,u),b(d,Ko,u),g(PE,Ko,null),e(Ko,E0o),e(Ko,ad),e(ad,y0o),e(ad,Uoe),e(Uoe,w0o),e(ad,A0o),e(ad,Joe),e(Joe,L0o),e(ad,B0o),e(Ko,x0o),e(Ko,$E),e($E,k0o),e($E,Yoe),e(Yoe,R0o),e($E,S0o),e(Ko,P0o),e(Ko,zr),g(IE,zr,null),e(zr,$0o),e(zr,Koe),e(Koe,I0o),e(zr,D0o),e(zr,nd),e(nd,j0o),e(nd,Zoe),e(Zoe,N0o),e(nd,q0o),e(nd,ere),e(ere,G0o),e(nd,O0o),e(zr,X0o),e(zr,ore),e(ore,V0o),e(zr,z0o),g(DE,zr,null),e(Ko,W0o),e(Ko,De),g(jE,De,null),e(De,Q0o),e(De,rre),e(rre,H0o),e(De,U0o),e(De,Va),e(Va,J0o),e(Va,tre),e(tre,Y0o),e(Va,K0o),e(Va,are),e(are,Z0o),e(Va,eTo),e(Va,nre),e(nre,oTo),e(Va,rTo),e(De,tTo),e(De,A),e(A,L5),e(L5,sre),e(sre,aTo),e(L5,nTo),e(L5,A$),e(A$,sTo),e(L5,lTo),e(A,iTo),e(A,B5),e(B5,lre),e(lre,dTo),e(B5,cTo),e(B5,L$),e(L$,fTo),e(B5,mTo),e(A,gTo),e(A,x5),e(x5,ire),e(ire,hTo),e(x5,pTo),e(x5,B$),e(B$,_To),e(x5,uTo),e(A,bTo),e(A,k5),e(k5,dre),e(dre,vTo),e(k5,TTo),e(k5,x$),e(x$,FTo),e(k5,CTo),e(A,MTo),e(A,R5),e(R5,cre),e(cre,ETo),e(R5,yTo),e(R5,k$),e(k$,wTo),e(R5,ATo),e(A,LTo),e(A,S5),e(S5,fre),e(fre,BTo),e(S5,xTo),e(S5,R$),e(R$,kTo),e(S5,RTo),e(A,STo),e(A,P5),e(P5,mre),e(mre,PTo),e(P5,$To),e(P5,S$),e(S$,ITo),e(P5,DTo),e(A,jTo),e(A,$5),e($5,gre),e(gre,NTo),e($5,qTo),e($5,P$),e(P$,GTo),e($5,OTo),e(A,XTo),e(A,I5),e(I5,hre),e(hre,VTo),e(I5,zTo),e(I5,$$),e($$,WTo),e(I5,QTo),e(A,HTo),e(A,D5),e(D5,pre),e(pre,UTo),e(D5,JTo),e(D5,I$),e(I$,YTo),e(D5,KTo),e(A,ZTo),e(A,j5),e(j5,_re),e(_re,e7o),e(j5,o7o),e(j5,D$),e(D$,r7o),e(j5,t7o),e(A,a7o),e(A,N5),e(N5,ure),e(ure,n7o),e(N5,s7o),e(N5,j$),e(j$,l7o),e(N5,i7o),e(A,d7o),e(A,q5),e(q5,bre),e(bre,c7o),e(q5,f7o),e(q5,N$),e(N$,m7o),e(q5,g7o),e(A,h7o),e(A,G5),e(G5,vre),e(vre,p7o),e(G5,_7o),e(G5,q$),e(q$,u7o),e(G5,b7o),e(A,v7o),e(A,O5),e(O5,Tre),e(Tre,T7o),e(O5,F7o),e(O5,G$),e(G$,C7o),e(O5,M7o),e(A,E7o),e(A,X5),e(X5,Fre),e(Fre,y7o),e(X5,w7o),e(X5,O$),e(O$,A7o),e(X5,L7o),e(A,B7o),e(A,V5),e(V5,Cre),e(Cre,x7o),e(V5,k7o),e(V5,X$),e(X$,R7o),e(V5,S7o),e(A,P7o),e(A,z5),e(z5,Mre),e(Mre,$7o),e(z5,I7o),e(z5,V$),e(V$,D7o),e(z5,j7o),e(A,N7o),e(A,W5),e(W5,Ere),e(Ere,q7o),e(W5,G7o),e(W5,z$),e(z$,O7o),e(W5,X7o),e(A,V7o),e(A,Q5),e(Q5,yre),e(yre,z7o),e(Q5,W7o),e(Q5,W$),e(W$,Q7o),e(Q5,H7o),e(A,U7o),e(A,H5),e(H5,wre),e(wre,J7o),e(H5,Y7o),e(H5,Q$),e(Q$,K7o),e(H5,Z7o),e(A,eFo),e(A,U5),e(U5,Are),e(Are,oFo),e(U5,rFo),e(U5,H$),e(H$,tFo),e(U5,aFo),e(A,nFo),e(A,J5),e(J5,Lre),e(Lre,sFo),e(J5,lFo),e(J5,U$),e(U$,iFo),e(J5,dFo),e(A,cFo),e(A,Y5),e(Y5,Bre),e(Bre,fFo),e(Y5,mFo),e(Y5,J$),e(J$,gFo),e(Y5,hFo),e(A,pFo),e(A,K5),e(K5,xre),e(xre,_Fo),e(K5,uFo),e(K5,Y$),e(Y$,bFo),e(K5,vFo),e(A,TFo),e(A,Z5),e(Z5,kre),e(kre,FFo),e(Z5,CFo),e(Z5,K$),e(K$,MFo),e(Z5,EFo),e(A,yFo),e(A,e1),e(e1,Rre),e(Rre,wFo),e(e1,AFo),e(e1,Z$),e(Z$,LFo),e(e1,BFo),e(A,xFo),e(A,o1),e(o1,Sre),e(Sre,kFo),e(o1,RFo),e(o1,eI),e(eI,SFo),e(o1,PFo),e(A,$Fo),e(A,r1),e(r1,Pre),e(Pre,IFo),e(r1,DFo),e(r1,oI),e(oI,jFo),e(r1,NFo),e(A,qFo),e(A,t1),e(t1,$re),e($re,GFo),e(t1,OFo),e(t1,rI),e(rI,XFo),e(t1,VFo),e(A,zFo),e(A,a1),e(a1,Ire),e(Ire,WFo),e(a1,QFo),e(a1,tI),e(tI,HFo),e(a1,UFo),e(A,JFo),e(A,n1),e(n1,Dre),e(Dre,YFo),e(n1,KFo),e(n1,aI),e(aI,ZFo),e(n1,eCo),e(A,oCo),e(A,s1),e(s1,jre),e(jre,rCo),e(s1,tCo),e(s1,nI),e(nI,aCo),e(s1,nCo),e(A,sCo),e(A,l1),e(l1,Nre),e(Nre,lCo),e(l1,iCo),e(l1,sI),e(sI,dCo),e(l1,cCo),e(A,fCo),e(A,i1),e(i1,qre),e(qre,mCo),e(i1,gCo),e(i1,lI),e(lI,hCo),e(i1,pCo),e(A,_Co),e(A,d1),e(d1,Gre),e(Gre,uCo),e(d1,bCo),e(d1,iI),e(iI,vCo),e(d1,TCo),e(A,FCo),e(A,c1),e(c1,Ore),e(Ore,CCo),e(c1,MCo),e(c1,dI),e(dI,ECo),e(c1,yCo),e(A,wCo),e(A,f1),e(f1,Xre),e(Xre,ACo),e(f1,LCo),e(f1,cI),e(cI,BCo),e(f1,xCo),e(A,kCo),e(A,m1),e(m1,Vre),e(Vre,RCo),e(m1,SCo),e(m1,fI),e(fI,PCo),e(m1,$Co),e(A,ICo),e(A,g1),e(g1,zre),e(zre,DCo),e(g1,jCo),e(g1,mI),e(mI,NCo),e(g1,qCo),e(A,GCo),e(A,h1),e(h1,Wre),e(Wre,OCo),e(h1,XCo),e(h1,gI),e(gI,VCo),e(h1,zCo),e(A,WCo),e(A,p1),e(p1,Qre),e(Qre,QCo),e(p1,HCo),e(p1,hI),e(hI,UCo),e(p1,JCo),e(A,YCo),e(A,_1),e(_1,Hre),e(Hre,KCo),e(_1,ZCo),e(_1,pI),e(pI,e4o),e(_1,o4o),e(A,r4o),e(A,u1),e(u1,Ure),e(Ure,t4o),e(u1,a4o),e(u1,_I),e(_I,n4o),e(u1,s4o),e(A,l4o),e(A,b1),e(b1,Jre),e(Jre,i4o),e(b1,d4o),e(b1,uI),e(uI,c4o),e(b1,f4o),e(A,m4o),e(A,v1),e(v1,Yre),e(Yre,g4o),e(v1,h4o),e(v1,bI),e(bI,p4o),e(v1,_4o),e(De,u4o),e(De,T1),e(T1,b4o),e(T1,Kre),e(Kre,v4o),e(T1,T4o),e(T1,Zre),e(Zre,F4o),e(De,C4o),e(De,ete),e(ete,M4o),e(De,E4o),g(NE,De,null),b(d,P9e,u),b(d,sd,u),e(sd,F1),e(F1,ote),g(qE,ote,null),e(sd,y4o),e(sd,rte),e(rte,w4o),b(d,$9e,u),b(d,Zo,u),g(GE,Zo,null),e(Zo,A4o),e(Zo,ld),e(ld,L4o),e(ld,tte),e(tte,B4o),e(ld,x4o),e(ld,ate),e(ate,k4o),e(ld,R4o),e(Zo,S4o),e(Zo,OE),e(OE,P4o),e(OE,nte),e(nte,$4o),e(OE,I4o),e(Zo,D4o),e(Zo,Wr),g(XE,Wr,null),e(Wr,j4o),e(Wr,ste),e(ste,N4o),e(Wr,q4o),e(Wr,id),e(id,G4o),e(id,lte),e(lte,O4o),e(id,X4o),e(id,ite),e(ite,V4o),e(id,z4o),e(Wr,W4o),e(Wr,dte),e(dte,Q4o),e(Wr,H4o),g(VE,Wr,null),e(Zo,U4o),e(Zo,je),g(zE,je,null),e(je,J4o),e(je,cte),e(cte,Y4o),e(je,K4o),e(je,za),e(za,Z4o),e(za,fte),e(fte,eMo),e(za,oMo),e(za,mte),e(mte,rMo),e(za,tMo),e(za,gte),e(gte,aMo),e(za,nMo),e(je,sMo),e(je,G),e(G,C1),e(C1,hte),e(hte,lMo),e(C1,iMo),e(C1,vI),e(vI,dMo),e(C1,cMo),e(G,fMo),e(G,M1),e(M1,pte),e(pte,mMo),e(M1,gMo),e(M1,TI),e(TI,hMo),e(M1,pMo),e(G,_Mo),e(G,E1),e(E1,_te),e(_te,uMo),e(E1,bMo),e(E1,FI),e(FI,vMo),e(E1,TMo),e(G,FMo),e(G,y1),e(y1,ute),e(ute,CMo),e(y1,MMo),e(y1,CI),e(CI,EMo),e(y1,yMo),e(G,wMo),e(G,w1),e(w1,bte),e(bte,AMo),e(w1,LMo),e(w1,MI),e(MI,BMo),e(w1,xMo),e(G,kMo),e(G,A1),e(A1,vte),e(vte,RMo),e(A1,SMo),e(A1,EI),e(EI,PMo),e(A1,$Mo),e(G,IMo),e(G,L1),e(L1,Tte),e(Tte,DMo),e(L1,jMo),e(L1,yI),e(yI,NMo),e(L1,qMo),e(G,GMo),e(G,B1),e(B1,Fte),e(Fte,OMo),e(B1,XMo),e(B1,wI),e(wI,VMo),e(B1,zMo),e(G,WMo),e(G,x1),e(x1,Cte),e(Cte,QMo),e(x1,HMo),e(x1,AI),e(AI,UMo),e(x1,JMo),e(G,YMo),e(G,k1),e(k1,Mte),e(Mte,KMo),e(k1,ZMo),e(k1,LI),e(LI,eEo),e(k1,oEo),e(G,rEo),e(G,R1),e(R1,Ete),e(Ete,tEo),e(R1,aEo),e(R1,BI),e(BI,nEo),e(R1,sEo),e(G,lEo),e(G,S1),e(S1,yte),e(yte,iEo),e(S1,dEo),e(S1,xI),e(xI,cEo),e(S1,fEo),e(G,mEo),e(G,P1),e(P1,wte),e(wte,gEo),e(P1,hEo),e(P1,kI),e(kI,pEo),e(P1,_Eo),e(G,uEo),e(G,$1),e($1,Ate),e(Ate,bEo),e($1,vEo),e($1,RI),e(RI,TEo),e($1,FEo),e(G,CEo),e(G,I1),e(I1,Lte),e(Lte,MEo),e(I1,EEo),e(I1,SI),e(SI,yEo),e(I1,wEo),e(G,AEo),e(G,D1),e(D1,Bte),e(Bte,LEo),e(D1,BEo),e(D1,PI),e(PI,xEo),e(D1,kEo),e(G,REo),e(G,j1),e(j1,xte),e(xte,SEo),e(j1,PEo),e(j1,$I),e($I,$Eo),e(j1,IEo),e(G,DEo),e(G,N1),e(N1,kte),e(kte,jEo),e(N1,NEo),e(N1,II),e(II,qEo),e(N1,GEo),e(G,OEo),e(G,q1),e(q1,Rte),e(Rte,XEo),e(q1,VEo),e(q1,DI),e(DI,zEo),e(q1,WEo),e(G,QEo),e(G,G1),e(G1,Ste),e(Ste,HEo),e(G1,UEo),e(G1,jI),e(jI,JEo),e(G1,YEo),e(G,KEo),e(G,O1),e(O1,Pte),e(Pte,ZEo),e(O1,e3o),e(O1,NI),e(NI,o3o),e(O1,r3o),e(G,t3o),e(G,X1),e(X1,$te),e($te,a3o),e(X1,n3o),e(X1,qI),e(qI,s3o),e(X1,l3o),e(G,i3o),e(G,V1),e(V1,Ite),e(Ite,d3o),e(V1,c3o),e(V1,GI),e(GI,f3o),e(V1,m3o),e(G,g3o),e(G,z1),e(z1,Dte),e(Dte,h3o),e(z1,p3o),e(z1,OI),e(OI,_3o),e(z1,u3o),e(G,b3o),e(G,W1),e(W1,jte),e(jte,v3o),e(W1,T3o),e(W1,XI),e(XI,F3o),e(W1,C3o),e(G,M3o),e(G,Q1),e(Q1,Nte),e(Nte,E3o),e(Q1,y3o),e(Q1,VI),e(VI,w3o),e(Q1,A3o),e(G,L3o),e(G,H1),e(H1,qte),e(qte,B3o),e(H1,x3o),e(H1,zI),e(zI,k3o),e(H1,R3o),e(G,S3o),e(G,U1),e(U1,Gte),e(Gte,P3o),e(U1,$3o),e(U1,WI),e(WI,I3o),e(U1,D3o),e(je,j3o),e(je,J1),e(J1,N3o),e(J1,Ote),e(Ote,q3o),e(J1,G3o),e(J1,Xte),e(Xte,O3o),e(je,X3o),e(je,Vte),e(Vte,V3o),e(je,z3o),g(WE,je,null),b(d,I9e,u),b(d,dd,u),e(dd,Y1),e(Y1,zte),g(QE,zte,null),e(dd,W3o),e(dd,Wte),e(Wte,Q3o),b(d,D9e,u),b(d,er,u),g(HE,er,null),e(er,H3o),e(er,cd),e(cd,U3o),e(cd,Qte),e(Qte,J3o),e(cd,Y3o),e(cd,Hte),e(Hte,K3o),e(cd,Z3o),e(er,eyo),e(er,UE),e(UE,oyo),e(UE,Ute),e(Ute,ryo),e(UE,tyo),e(er,ayo),e(er,Qr),g(JE,Qr,null),e(Qr,nyo),e(Qr,Jte),e(Jte,syo),e(Qr,lyo),e(Qr,fd),e(fd,iyo),e(fd,Yte),e(Yte,dyo),e(fd,cyo),e(fd,Kte),e(Kte,fyo),e(fd,myo),e(Qr,gyo),e(Qr,Zte),e(Zte,hyo),e(Qr,pyo),g(YE,Qr,null),e(er,_yo),e(er,Ne),g(KE,Ne,null),e(Ne,uyo),e(Ne,eae),e(eae,byo),e(Ne,vyo),e(Ne,Wa),e(Wa,Tyo),e(Wa,oae),e(oae,Fyo),e(Wa,Cyo),e(Wa,rae),e(rae,Myo),e(Wa,Eyo),e(Wa,tae),e(tae,yyo),e(Wa,wyo),e(Ne,Ayo),e(Ne,na),e(na,K1),e(K1,aae),e(aae,Lyo),e(K1,Byo),e(K1,QI),e(QI,xyo),e(K1,kyo),e(na,Ryo),e(na,Z1),e(Z1,nae),e(nae,Syo),e(Z1,Pyo),e(Z1,HI),e(HI,$yo),e(Z1,Iyo),e(na,Dyo),e(na,eb),e(eb,sae),e(sae,jyo),e(eb,Nyo),e(eb,UI),e(UI,qyo),e(eb,Gyo),e(na,Oyo),e(na,ob),e(ob,lae),e(lae,Xyo),e(ob,Vyo),e(ob,JI),e(JI,zyo),e(ob,Wyo),e(na,Qyo),e(na,rb),e(rb,iae),e(iae,Hyo),e(rb,Uyo),e(rb,YI),e(YI,Jyo),e(rb,Yyo),e(Ne,Kyo),e(Ne,tb),e(tb,Zyo),e(tb,dae),e(dae,ewo),e(tb,owo),e(tb,cae),e(cae,rwo),e(Ne,two),e(Ne,fae),e(fae,awo),e(Ne,nwo),g(ZE,Ne,null),b(d,j9e,u),b(d,md,u),e(md,ab),e(ab,mae),g(e3,mae,null),e(md,swo),e(md,gae),e(gae,lwo),b(d,N9e,u),b(d,or,u),g(o3,or,null),e(or,iwo),e(or,gd),e(gd,dwo),e(gd,hae),e(hae,cwo),e(gd,fwo),e(gd,pae),e(pae,mwo),e(gd,gwo),e(or,hwo),e(or,r3),e(r3,pwo),e(r3,_ae),e(_ae,_wo),e(r3,uwo),e(or,bwo),e(or,Hr),g(t3,Hr,null),e(Hr,vwo),e(Hr,uae),e(uae,Two),e(Hr,Fwo),e(Hr,hd),e(hd,Cwo),e(hd,bae),e(bae,Mwo),e(hd,Ewo),e(hd,vae),e(vae,ywo),e(hd,wwo),e(Hr,Awo),e(Hr,Tae),e(Tae,Lwo),e(Hr,Bwo),g(a3,Hr,null),e(or,xwo),e(or,qe),g(n3,qe,null),e(qe,kwo),e(qe,Fae),e(Fae,Rwo),e(qe,Swo),e(qe,Qa),e(Qa,Pwo),e(Qa,Cae),e(Cae,$wo),e(Qa,Iwo),e(Qa,Mae),e(Mae,Dwo),e(Qa,jwo),e(Qa,Eae),e(Eae,Nwo),e(Qa,qwo),e(qe,Gwo),e(qe,N),e(N,nb),e(nb,yae),e(yae,Owo),e(nb,Xwo),e(nb,KI),e(KI,Vwo),e(nb,zwo),e(N,Wwo),e(N,sb),e(sb,wae),e(wae,Qwo),e(sb,Hwo),e(sb,ZI),e(ZI,Uwo),e(sb,Jwo),e(N,Ywo),e(N,lb),e(lb,Aae),e(Aae,Kwo),e(lb,Zwo),e(lb,eD),e(eD,e6o),e(lb,o6o),e(N,r6o),e(N,ib),e(ib,Lae),e(Lae,t6o),e(ib,a6o),e(ib,oD),e(oD,n6o),e(ib,s6o),e(N,l6o),e(N,db),e(db,Bae),e(Bae,i6o),e(db,d6o),e(db,rD),e(rD,c6o),e(db,f6o),e(N,m6o),e(N,cb),e(cb,xae),e(xae,g6o),e(cb,h6o),e(cb,tD),e(tD,p6o),e(cb,_6o),e(N,u6o),e(N,fb),e(fb,kae),e(kae,b6o),e(fb,v6o),e(fb,aD),e(aD,T6o),e(fb,F6o),e(N,C6o),e(N,mb),e(mb,Rae),e(Rae,M6o),e(mb,E6o),e(mb,nD),e(nD,y6o),e(mb,w6o),e(N,A6o),e(N,gb),e(gb,Sae),e(Sae,L6o),e(gb,B6o),e(gb,sD),e(sD,x6o),e(gb,k6o),e(N,R6o),e(N,hb),e(hb,Pae),e(Pae,S6o),e(hb,P6o),e(hb,lD),e(lD,$6o),e(hb,I6o),e(N,D6o),e(N,pb),e(pb,$ae),e($ae,j6o),e(pb,N6o),e(pb,iD),e(iD,q6o),e(pb,G6o),e(N,O6o),e(N,_b),e(_b,Iae),e(Iae,X6o),e(_b,V6o),e(_b,dD),e(dD,z6o),e(_b,W6o),e(N,Q6o),e(N,ub),e(ub,Dae),e(Dae,H6o),e(ub,U6o),e(ub,cD),e(cD,J6o),e(ub,Y6o),e(N,K6o),e(N,bb),e(bb,jae),e(jae,Z6o),e(bb,eAo),e(bb,fD),e(fD,oAo),e(bb,rAo),e(N,tAo),e(N,vb),e(vb,Nae),e(Nae,aAo),e(vb,nAo),e(vb,mD),e(mD,sAo),e(vb,lAo),e(N,iAo),e(N,Tb),e(Tb,qae),e(qae,dAo),e(Tb,cAo),e(Tb,gD),e(gD,fAo),e(Tb,mAo),e(N,gAo),e(N,Fb),e(Fb,Gae),e(Gae,hAo),e(Fb,pAo),e(Fb,hD),e(hD,_Ao),e(Fb,uAo),e(N,bAo),e(N,Cb),e(Cb,Oae),e(Oae,vAo),e(Cb,TAo),e(Cb,pD),e(pD,FAo),e(Cb,CAo),e(N,MAo),e(N,Mb),e(Mb,Xae),e(Xae,EAo),e(Mb,yAo),e(Mb,_D),e(_D,wAo),e(Mb,AAo),e(N,LAo),e(N,Eb),e(Eb,Vae),e(Vae,BAo),e(Eb,xAo),e(Eb,uD),e(uD,kAo),e(Eb,RAo),e(N,SAo),e(N,yb),e(yb,zae),e(zae,PAo),e(yb,$Ao),e(yb,bD),e(bD,IAo),e(yb,DAo),e(N,jAo),e(N,wb),e(wb,Wae),e(Wae,NAo),e(wb,qAo),e(wb,vD),e(vD,GAo),e(wb,OAo),e(N,XAo),e(N,Ab),e(Ab,Qae),e(Qae,VAo),e(Ab,zAo),e(Ab,TD),e(TD,WAo),e(Ab,QAo),e(N,HAo),e(N,Lb),e(Lb,Hae),e(Hae,UAo),e(Lb,JAo),e(Lb,FD),e(FD,YAo),e(Lb,KAo),e(N,ZAo),e(N,Bb),e(Bb,Uae),e(Uae,eLo),e(Bb,oLo),e(Bb,CD),e(CD,rLo),e(Bb,tLo),e(N,aLo),e(N,xb),e(xb,Jae),e(Jae,nLo),e(xb,sLo),e(xb,MD),e(MD,lLo),e(xb,iLo),e(N,dLo),e(N,kb),e(kb,Yae),e(Yae,cLo),e(kb,fLo),e(kb,ED),e(ED,mLo),e(kb,gLo),e(N,hLo),e(N,Rb),e(Rb,Kae),e(Kae,pLo),e(Rb,_Lo),e(Rb,yD),e(yD,uLo),e(Rb,bLo),e(N,vLo),e(N,Sb),e(Sb,Zae),e(Zae,TLo),e(Sb,FLo),e(Sb,wD),e(wD,CLo),e(Sb,MLo),e(N,ELo),e(N,Pb),e(Pb,ene),e(ene,yLo),e(Pb,wLo),e(Pb,AD),e(AD,ALo),e(Pb,LLo),e(N,BLo),e(N,$b),e($b,one),e(one,xLo),e($b,kLo),e($b,LD),e(LD,RLo),e($b,SLo),e(N,PLo),e(N,Ib),e(Ib,rne),e(rne,$Lo),e(Ib,ILo),e(Ib,BD),e(BD,DLo),e(Ib,jLo),e(N,NLo),e(N,Db),e(Db,tne),e(tne,qLo),e(Db,GLo),e(Db,xD),e(xD,OLo),e(Db,XLo),e(qe,VLo),e(qe,jb),e(jb,zLo),e(jb,ane),e(ane,WLo),e(jb,QLo),e(jb,nne),e(nne,HLo),e(qe,ULo),e(qe,sne),e(sne,JLo),e(qe,YLo),g(s3,qe,null),b(d,q9e,u),b(d,pd,u),e(pd,Nb),e(Nb,lne),g(l3,lne,null),e(pd,KLo),e(pd,ine),e(ine,ZLo),b(d,G9e,u),b(d,rr,u),g(i3,rr,null),e(rr,e8o),e(rr,_d),e(_d,o8o),e(_d,dne),e(dne,r8o),e(_d,t8o),e(_d,cne),e(cne,a8o),e(_d,n8o),e(rr,s8o),e(rr,d3),e(d3,l8o),e(d3,fne),e(fne,i8o),e(d3,d8o),e(rr,c8o),e(rr,Ur),g(c3,Ur,null),e(Ur,f8o),e(Ur,mne),e(mne,m8o),e(Ur,g8o),e(Ur,ud),e(ud,h8o),e(ud,gne),e(gne,p8o),e(ud,_8o),e(ud,hne),e(hne,u8o),e(ud,b8o),e(Ur,v8o),e(Ur,pne),e(pne,T8o),e(Ur,F8o),g(f3,Ur,null),e(rr,C8o),e(rr,Ge),g(m3,Ge,null),e(Ge,M8o),e(Ge,_ne),e(_ne,E8o),e(Ge,y8o),e(Ge,Ha),e(Ha,w8o),e(Ha,une),e(une,A8o),e(Ha,L8o),e(Ha,bne),e(bne,B8o),e(Ha,x8o),e(Ha,vne),e(vne,k8o),e(Ha,R8o),e(Ge,S8o),e(Ge,R),e(R,qb),e(qb,Tne),e(Tne,P8o),e(qb,$8o),e(qb,kD),e(kD,I8o),e(qb,D8o),e(R,j8o),e(R,Gb),e(Gb,Fne),e(Fne,N8o),e(Gb,q8o),e(Gb,RD),e(RD,G8o),e(Gb,O8o),e(R,X8o),e(R,Ob),e(Ob,Cne),e(Cne,V8o),e(Ob,z8o),e(Ob,SD),e(SD,W8o),e(Ob,Q8o),e(R,H8o),e(R,Xb),e(Xb,Mne),e(Mne,U8o),e(Xb,J8o),e(Xb,PD),e(PD,Y8o),e(Xb,K8o),e(R,Z8o),e(R,Vb),e(Vb,Ene),e(Ene,e9o),e(Vb,o9o),e(Vb,$D),e($D,r9o),e(Vb,t9o),e(R,a9o),e(R,zb),e(zb,yne),e(yne,n9o),e(zb,s9o),e(zb,ID),e(ID,l9o),e(zb,i9o),e(R,d9o),e(R,Wb),e(Wb,wne),e(wne,c9o),e(Wb,f9o),e(Wb,DD),e(DD,m9o),e(Wb,g9o),e(R,h9o),e(R,Qb),e(Qb,Ane),e(Ane,p9o),e(Qb,_9o),e(Qb,jD),e(jD,u9o),e(Qb,b9o),e(R,v9o),e(R,Hb),e(Hb,Lne),e(Lne,T9o),e(Hb,F9o),e(Hb,ND),e(ND,C9o),e(Hb,M9o),e(R,E9o),e(R,Ub),e(Ub,Bne),e(Bne,y9o),e(Ub,w9o),e(Ub,qD),e(qD,A9o),e(Ub,L9o),e(R,B9o),e(R,Jb),e(Jb,xne),e(xne,x9o),e(Jb,k9o),e(Jb,GD),e(GD,R9o),e(Jb,S9o),e(R,P9o),e(R,Yb),e(Yb,kne),e(kne,$9o),e(Yb,I9o),e(Yb,OD),e(OD,D9o),e(Yb,j9o),e(R,N9o),e(R,Kb),e(Kb,Rne),e(Rne,q9o),e(Kb,G9o),e(Kb,XD),e(XD,O9o),e(Kb,X9o),e(R,V9o),e(R,Zb),e(Zb,Sne),e(Sne,z9o),e(Zb,W9o),e(Zb,VD),e(VD,Q9o),e(Zb,H9o),e(R,U9o),e(R,e2),e(e2,Pne),e(Pne,J9o),e(e2,Y9o),e(e2,zD),e(zD,K9o),e(e2,Z9o),e(R,eBo),e(R,o2),e(o2,$ne),e($ne,oBo),e(o2,rBo),e(o2,WD),e(WD,tBo),e(o2,aBo),e(R,nBo),e(R,r2),e(r2,Ine),e(Ine,sBo),e(r2,lBo),e(r2,QD),e(QD,iBo),e(r2,dBo),e(R,cBo),e(R,t2),e(t2,Dne),e(Dne,fBo),e(t2,mBo),e(t2,HD),e(HD,gBo),e(t2,hBo),e(R,pBo),e(R,a2),e(a2,jne),e(jne,_Bo),e(a2,uBo),e(a2,UD),e(UD,bBo),e(a2,vBo),e(R,TBo),e(R,n2),e(n2,Nne),e(Nne,FBo),e(n2,CBo),e(n2,JD),e(JD,MBo),e(n2,EBo),e(R,yBo),e(R,s2),e(s2,qne),e(qne,wBo),e(s2,ABo),e(s2,YD),e(YD,LBo),e(s2,BBo),e(R,xBo),e(R,l2),e(l2,Gne),e(Gne,kBo),e(l2,RBo),e(l2,KD),e(KD,SBo),e(l2,PBo),e(R,$Bo),e(R,i2),e(i2,One),e(One,IBo),e(i2,DBo),e(i2,ZD),e(ZD,jBo),e(i2,NBo),e(R,qBo),e(R,d2),e(d2,Xne),e(Xne,GBo),e(d2,OBo),e(d2,ej),e(ej,XBo),e(d2,VBo),e(R,zBo),e(R,c2),e(c2,Vne),e(Vne,WBo),e(c2,QBo),e(c2,oj),e(oj,HBo),e(c2,UBo),e(R,JBo),e(R,f2),e(f2,zne),e(zne,YBo),e(f2,KBo),e(f2,rj),e(rj,ZBo),e(f2,exo),e(R,oxo),e(R,m2),e(m2,Wne),e(Wne,rxo),e(m2,txo),e(m2,tj),e(tj,axo),e(m2,nxo),e(R,sxo),e(R,g2),e(g2,Qne),e(Qne,lxo),e(g2,ixo),e(g2,aj),e(aj,dxo),e(g2,cxo),e(R,fxo),e(R,h2),e(h2,Hne),e(Hne,mxo),e(h2,gxo),e(h2,nj),e(nj,hxo),e(h2,pxo),e(R,_xo),e(R,p2),e(p2,Une),e(Une,uxo),e(p2,bxo),e(p2,sj),e(sj,vxo),e(p2,Txo),e(R,Fxo),e(R,_2),e(_2,Jne),e(Jne,Cxo),e(_2,Mxo),e(_2,lj),e(lj,Exo),e(_2,yxo),e(R,wxo),e(R,u2),e(u2,Yne),e(Yne,Axo),e(u2,Lxo),e(u2,ij),e(ij,Bxo),e(u2,xxo),e(R,kxo),e(R,b2),e(b2,Kne),e(Kne,Rxo),e(b2,Sxo),e(b2,dj),e(dj,Pxo),e(b2,$xo),e(R,Ixo),e(R,v2),e(v2,Zne),e(Zne,Dxo),e(v2,jxo),e(v2,cj),e(cj,Nxo),e(v2,qxo),e(R,Gxo),e(R,T2),e(T2,ese),e(ese,Oxo),e(T2,Xxo),e(T2,fj),e(fj,Vxo),e(T2,zxo),e(R,Wxo),e(R,F2),e(F2,ose),e(ose,Qxo),e(F2,Hxo),e(F2,mj),e(mj,Uxo),e(F2,Jxo),e(R,Yxo),e(R,C2),e(C2,rse),e(rse,Kxo),e(C2,Zxo),e(C2,gj),e(gj,eko),e(C2,oko),e(R,rko),e(R,M2),e(M2,tse),e(tse,tko),e(M2,ako),e(M2,hj),e(hj,nko),e(M2,sko),e(R,lko),e(R,E2),e(E2,ase),e(ase,iko),e(E2,dko),e(E2,pj),e(pj,cko),e(E2,fko),e(Ge,mko),e(Ge,y2),e(y2,gko),e(y2,nse),e(nse,hko),e(y2,pko),e(y2,sse),e(sse,_ko),e(Ge,uko),e(Ge,lse),e(lse,bko),e(Ge,vko),g(g3,Ge,null),b(d,O9e,u),b(d,bd,u),e(bd,w2),e(w2,ise),g(h3,ise,null),e(bd,Tko),e(bd,dse),e(dse,Fko),b(d,X9e,u),b(d,tr,u),g(p3,tr,null),e(tr,Cko),e(tr,vd),e(vd,Mko),e(vd,cse),e(cse,Eko),e(vd,yko),e(vd,fse),e(fse,wko),e(vd,Ako),e(tr,Lko),e(tr,_3),e(_3,Bko),e(_3,mse),e(mse,xko),e(_3,kko),e(tr,Rko),e(tr,Jr),g(u3,Jr,null),e(Jr,Sko),e(Jr,gse),e(gse,Pko),e(Jr,$ko),e(Jr,Td),e(Td,Iko),e(Td,hse),e(hse,Dko),e(Td,jko),e(Td,pse),e(pse,Nko),e(Td,qko),e(Jr,Gko),e(Jr,_se),e(_se,Oko),e(Jr,Xko),g(b3,Jr,null),e(tr,Vko),e(tr,Oe),g(v3,Oe,null),e(Oe,zko),e(Oe,use),e(use,Wko),e(Oe,Qko),e(Oe,Ua),e(Ua,Hko),e(Ua,bse),e(bse,Uko),e(Ua,Jko),e(Ua,vse),e(vse,Yko),e(Ua,Kko),e(Ua,Tse),e(Tse,Zko),e(Ua,eRo),e(Oe,oRo),e(Oe,Fse),e(Fse,A2),e(A2,Cse),e(Cse,rRo),e(A2,tRo),e(A2,_j),e(_j,aRo),e(A2,nRo),e(Oe,sRo),e(Oe,L2),e(L2,lRo),e(L2,Mse),e(Mse,iRo),e(L2,dRo),e(L2,Ese),e(Ese,cRo),e(Oe,fRo),e(Oe,yse),e(yse,mRo),e(Oe,gRo),g(T3,Oe,null),b(d,V9e,u),b(d,Fd,u),e(Fd,B2),e(B2,wse),g(F3,wse,null),e(Fd,hRo),e(Fd,Ase),e(Ase,pRo),b(d,z9e,u),b(d,ar,u),g(C3,ar,null),e(ar,_Ro),e(ar,Cd),e(Cd,uRo),e(Cd,Lse),e(Lse,bRo),e(Cd,vRo),e(Cd,Bse),e(Bse,TRo),e(Cd,FRo),e(ar,CRo),e(ar,M3),e(M3,MRo),e(M3,xse),e(xse,ERo),e(M3,yRo),e(ar,wRo),e(ar,Yr),g(E3,Yr,null),e(Yr,ARo),e(Yr,kse),e(kse,LRo),e(Yr,BRo),e(Yr,Md),e(Md,xRo),e(Md,Rse),e(Rse,kRo),e(Md,RRo),e(Md,Sse),e(Sse,SRo),e(Md,PRo),e(Yr,$Ro),e(Yr,Pse),e(Pse,IRo),e(Yr,DRo),g(y3,Yr,null),e(ar,jRo),e(ar,Xe),g(w3,Xe,null),e(Xe,NRo),e(Xe,$se),e($se,qRo),e(Xe,GRo),e(Xe,Ja),e(Ja,ORo),e(Ja,Ise),e(Ise,XRo),e(Ja,VRo),e(Ja,Dse),e(Dse,zRo),e(Ja,WRo),e(Ja,jse),e(jse,QRo),e(Ja,HRo),e(Xe,URo),e(Xe,be),e(be,x2),e(x2,Nse),e(Nse,JRo),e(x2,YRo),e(x2,uj),e(uj,KRo),e(x2,ZRo),e(be,eSo),e(be,k2),e(k2,qse),e(qse,oSo),e(k2,rSo),e(k2,bj),e(bj,tSo),e(k2,aSo),e(be,nSo),e(be,Ps),e(Ps,Gse),e(Gse,sSo),e(Ps,lSo),e(Ps,vj),e(vj,iSo),e(Ps,dSo),e(Ps,Tj),e(Tj,cSo),e(Ps,fSo),e(be,mSo),e(be,R2),e(R2,Ose),e(Ose,gSo),e(R2,hSo),e(R2,Fj),e(Fj,pSo),e(R2,_So),e(be,uSo),e(be,la),e(la,Xse),e(Xse,bSo),e(la,vSo),e(la,Cj),e(Cj,TSo),e(la,FSo),e(la,Mj),e(Mj,CSo),e(la,MSo),e(la,Ej),e(Ej,ESo),e(la,ySo),e(be,wSo),e(be,S2),e(S2,Vse),e(Vse,ASo),e(S2,LSo),e(S2,yj),e(yj,BSo),e(S2,xSo),e(be,kSo),e(be,P2),e(P2,zse),e(zse,RSo),e(P2,SSo),e(P2,wj),e(wj,PSo),e(P2,$So),e(be,ISo),e(be,$2),e($2,Wse),e(Wse,DSo),e($2,jSo),e($2,Aj),e(Aj,NSo),e($2,qSo),e(be,GSo),e(be,I2),e(I2,Qse),e(Qse,OSo),e(I2,XSo),e(I2,Lj),e(Lj,VSo),e(I2,zSo),e(Xe,WSo),e(Xe,D2),e(D2,QSo),e(D2,Hse),e(Hse,HSo),e(D2,USo),e(D2,Use),e(Use,JSo),e(Xe,YSo),e(Xe,Jse),e(Jse,KSo),e(Xe,ZSo),g(A3,Xe,null),b(d,W9e,u),b(d,Ed,u),e(Ed,j2),e(j2,Yse),g(L3,Yse,null),e(Ed,ePo),e(Ed,Kse),e(Kse,oPo),b(d,Q9e,u),b(d,nr,u),g(B3,nr,null),e(nr,rPo),e(nr,yd),e(yd,tPo),e(yd,Zse),e(Zse,aPo),e(yd,nPo),e(yd,ele),e(ele,sPo),e(yd,lPo),e(nr,iPo),e(nr,x3),e(x3,dPo),e(x3,ole),e(ole,cPo),e(x3,fPo),e(nr,mPo),e(nr,Kr),g(k3,Kr,null),e(Kr,gPo),e(Kr,rle),e(rle,hPo),e(Kr,pPo),e(Kr,wd),e(wd,_Po),e(wd,tle),e(tle,uPo),e(wd,bPo),e(wd,ale),e(ale,vPo),e(wd,TPo),e(Kr,FPo),e(Kr,nle),e(nle,CPo),e(Kr,MPo),g(R3,Kr,null),e(nr,EPo),e(nr,Ve),g(S3,Ve,null),e(Ve,yPo),e(Ve,sle),e(sle,wPo),e(Ve,APo),e(Ve,Ya),e(Ya,LPo),e(Ya,lle),e(lle,BPo),e(Ya,xPo),e(Ya,ile),e(ile,kPo),e(Ya,RPo),e(Ya,dle),e(dle,SPo),e(Ya,PPo),e(Ve,$Po),e(Ve,cle),e(cle,N2),e(N2,fle),e(fle,IPo),e(N2,DPo),e(N2,Bj),e(Bj,jPo),e(N2,NPo),e(Ve,qPo),e(Ve,q2),e(q2,GPo),e(q2,mle),e(mle,OPo),e(q2,XPo),e(q2,gle),e(gle,VPo),e(Ve,zPo),e(Ve,hle),e(hle,WPo),e(Ve,QPo),g(P3,Ve,null),b(d,H9e,u),b(d,Ad,u),e(Ad,G2),e(G2,ple),g($3,ple,null),e(Ad,HPo),e(Ad,_le),e(_le,UPo),b(d,U9e,u),b(d,sr,u),g(I3,sr,null),e(sr,JPo),e(sr,Ld),e(Ld,YPo),e(Ld,ule),e(ule,KPo),e(Ld,ZPo),e(Ld,ble),e(ble,e$o),e(Ld,o$o),e(sr,r$o),e(sr,D3),e(D3,t$o),e(D3,vle),e(vle,a$o),e(D3,n$o),e(sr,s$o),e(sr,Zr),g(j3,Zr,null),e(Zr,l$o),e(Zr,Tle),e(Tle,i$o),e(Zr,d$o),e(Zr,Bd),e(Bd,c$o),e(Bd,Fle),e(Fle,f$o),e(Bd,m$o),e(Bd,Cle),e(Cle,g$o),e(Bd,h$o),e(Zr,p$o),e(Zr,Mle),e(Mle,_$o),e(Zr,u$o),g(N3,Zr,null),e(sr,b$o),e(sr,ze),g(q3,ze,null),e(ze,v$o),e(ze,Ele),e(Ele,T$o),e(ze,F$o),e(ze,Ka),e(Ka,C$o),e(Ka,yle),e(yle,M$o),e(Ka,E$o),e(Ka,wle),e(wle,y$o),e(Ka,w$o),e(Ka,Ale),e(Ale,A$o),e(Ka,L$o),e(ze,B$o),e(ze,Ae),e(Ae,O2),e(O2,Lle),e(Lle,x$o),e(O2,k$o),e(O2,xj),e(xj,R$o),e(O2,S$o),e(Ae,P$o),e(Ae,X2),e(X2,Ble),e(Ble,$$o),e(X2,I$o),e(X2,kj),e(kj,D$o),e(X2,j$o),e(Ae,N$o),e(Ae,V2),e(V2,xle),e(xle,q$o),e(V2,G$o),e(V2,Rj),e(Rj,O$o),e(V2,X$o),e(Ae,V$o),e(Ae,z2),e(z2,kle),e(kle,z$o),e(z2,W$o),e(z2,Sj),e(Sj,Q$o),e(z2,H$o),e(Ae,U$o),e(Ae,W2),e(W2,Rle),e(Rle,J$o),e(W2,Y$o),e(W2,Pj),e(Pj,K$o),e(W2,Z$o),e(Ae,eIo),e(Ae,Q2),e(Q2,Sle),e(Sle,oIo),e(Q2,rIo),e(Q2,$j),e($j,tIo),e(Q2,aIo),e(Ae,nIo),e(Ae,H2),e(H2,Ple),e(Ple,sIo),e(H2,lIo),e(H2,Ij),e(Ij,iIo),e(H2,dIo),e(Ae,cIo),e(Ae,U2),e(U2,$le),e($le,fIo),e(U2,mIo),e(U2,Dj),e(Dj,gIo),e(U2,hIo),e(ze,pIo),e(ze,J2),e(J2,_Io),e(J2,Ile),e(Ile,uIo),e(J2,bIo),e(J2,Dle),e(Dle,vIo),e(ze,TIo),e(ze,jle),e(jle,FIo),e(ze,CIo),g(G3,ze,null),b(d,J9e,u),b(d,xd,u),e(xd,Y2),e(Y2,Nle),g(O3,Nle,null),e(xd,MIo),e(xd,qle),e(qle,EIo),b(d,Y9e,u),b(d,lr,u),g(X3,lr,null),e(lr,yIo),e(lr,kd),e(kd,wIo),e(kd,Gle),e(Gle,AIo),e(kd,LIo),e(kd,Ole),e(Ole,BIo),e(kd,xIo),e(lr,kIo),e(lr,V3),e(V3,RIo),e(V3,Xle),e(Xle,SIo),e(V3,PIo),e(lr,$Io),e(lr,et),g(z3,et,null),e(et,IIo),e(et,Vle),e(Vle,DIo),e(et,jIo),e(et,Rd),e(Rd,NIo),e(Rd,zle),e(zle,qIo),e(Rd,GIo),e(Rd,Wle),e(Wle,OIo),e(Rd,XIo),e(et,VIo),e(et,Qle),e(Qle,zIo),e(et,WIo),g(W3,et,null),e(lr,QIo),e(lr,We),g(Q3,We,null),e(We,HIo),e(We,Hle),e(Hle,UIo),e(We,JIo),e(We,Za),e(Za,YIo),e(Za,Ule),e(Ule,KIo),e(Za,ZIo),e(Za,Jle),e(Jle,eDo),e(Za,oDo),e(Za,Yle),e(Yle,rDo),e(Za,tDo),e(We,aDo),e(We,en),e(en,K2),e(K2,Kle),e(Kle,nDo),e(K2,sDo),e(K2,jj),e(jj,lDo),e(K2,iDo),e(en,dDo),e(en,Z2),e(Z2,Zle),e(Zle,cDo),e(Z2,fDo),e(Z2,Nj),e(Nj,mDo),e(Z2,gDo),e(en,hDo),e(en,ev),e(ev,eie),e(eie,pDo),e(ev,_Do),e(ev,qj),e(qj,uDo),e(ev,bDo),e(en,vDo),e(en,ov),e(ov,oie),e(oie,TDo),e(ov,FDo),e(ov,Gj),e(Gj,CDo),e(ov,MDo),e(We,EDo),e(We,rv),e(rv,yDo),e(rv,rie),e(rie,wDo),e(rv,ADo),e(rv,tie),e(tie,LDo),e(We,BDo),e(We,aie),e(aie,xDo),e(We,kDo),g(H3,We,null),b(d,K9e,u),b(d,Sd,u),e(Sd,tv),e(tv,nie),g(U3,nie,null),e(Sd,RDo),e(Sd,sie),e(sie,SDo),b(d,Z9e,u),b(d,ir,u),g(J3,ir,null),e(ir,PDo),e(ir,Pd),e(Pd,$Do),e(Pd,lie),e(lie,IDo),e(Pd,DDo),e(Pd,iie),e(iie,jDo),e(Pd,NDo),e(ir,qDo),e(ir,Y3),e(Y3,GDo),e(Y3,die),e(die,ODo),e(Y3,XDo),e(ir,VDo),e(ir,ot),g(K3,ot,null),e(ot,zDo),e(ot,cie),e(cie,WDo),e(ot,QDo),e(ot,$d),e($d,HDo),e($d,fie),e(fie,UDo),e($d,JDo),e($d,mie),e(mie,YDo),e($d,KDo),e(ot,ZDo),e(ot,gie),e(gie,ejo),e(ot,ojo),g(Z3,ot,null),e(ir,rjo),e(ir,Qe),g(ey,Qe,null),e(Qe,tjo),e(Qe,hie),e(hie,ajo),e(Qe,njo),e(Qe,on),e(on,sjo),e(on,pie),e(pie,ljo),e(on,ijo),e(on,_ie),e(_ie,djo),e(on,cjo),e(on,uie),e(uie,fjo),e(on,mjo),e(Qe,gjo),e(Qe,Le),e(Le,av),e(av,bie),e(bie,hjo),e(av,pjo),e(av,Oj),e(Oj,_jo),e(av,ujo),e(Le,bjo),e(Le,nv),e(nv,vie),e(vie,vjo),e(nv,Tjo),e(nv,Xj),e(Xj,Fjo),e(nv,Cjo),e(Le,Mjo),e(Le,sv),e(sv,Tie),e(Tie,Ejo),e(sv,yjo),e(sv,Vj),e(Vj,wjo),e(sv,Ajo),e(Le,Ljo),e(Le,lv),e(lv,Fie),e(Fie,Bjo),e(lv,xjo),e(lv,zj),e(zj,kjo),e(lv,Rjo),e(Le,Sjo),e(Le,iv),e(iv,Cie),e(Cie,Pjo),e(iv,$jo),e(iv,Wj),e(Wj,Ijo),e(iv,Djo),e(Le,jjo),e(Le,dv),e(dv,Mie),e(Mie,Njo),e(dv,qjo),e(dv,Qj),e(Qj,Gjo),e(dv,Ojo),e(Le,Xjo),e(Le,cv),e(cv,Eie),e(Eie,Vjo),e(cv,zjo),e(cv,Hj),e(Hj,Wjo),e(cv,Qjo),e(Le,Hjo),e(Le,fv),e(fv,yie),e(yie,Ujo),e(fv,Jjo),e(fv,Uj),e(Uj,Yjo),e(fv,Kjo),e(Qe,Zjo),e(Qe,mv),e(mv,eNo),e(mv,wie),e(wie,oNo),e(mv,rNo),e(mv,Aie),e(Aie,tNo),e(Qe,aNo),e(Qe,Lie),e(Lie,nNo),e(Qe,sNo),g(oy,Qe,null),b(d,eBe,u),b(d,Id,u),e(Id,gv),e(gv,Bie),g(ry,Bie,null),e(Id,lNo),e(Id,xie),e(xie,iNo),b(d,oBe,u),b(d,dr,u),g(ty,dr,null),e(dr,dNo),e(dr,Dd),e(Dd,cNo),e(Dd,kie),e(kie,fNo),e(Dd,mNo),e(Dd,Rie),e(Rie,gNo),e(Dd,hNo),e(dr,pNo),e(dr,ay),e(ay,_No),e(ay,Sie),e(Sie,uNo),e(ay,bNo),e(dr,vNo),e(dr,rt),g(ny,rt,null),e(rt,TNo),e(rt,Pie),e(Pie,FNo),e(rt,CNo),e(rt,jd),e(jd,MNo),e(jd,$ie),e($ie,ENo),e(jd,yNo),e(jd,Iie),e(Iie,wNo),e(jd,ANo),e(rt,LNo),e(rt,Die),e(Die,BNo),e(rt,xNo),g(sy,rt,null),e(dr,kNo),e(dr,He),g(ly,He,null),e(He,RNo),e(He,jie),e(jie,SNo),e(He,PNo),e(He,rn),e(rn,$No),e(rn,Nie),e(Nie,INo),e(rn,DNo),e(rn,qie),e(qie,jNo),e(rn,NNo),e(rn,Gie),e(Gie,qNo),e(rn,GNo),e(He,ONo),e(He,iy),e(iy,hv),e(hv,Oie),e(Oie,XNo),e(hv,VNo),e(hv,Jj),e(Jj,zNo),e(hv,WNo),e(iy,QNo),e(iy,pv),e(pv,Xie),e(Xie,HNo),e(pv,UNo),e(pv,Yj),e(Yj,JNo),e(pv,YNo),e(He,KNo),e(He,_v),e(_v,ZNo),e(_v,Vie),e(Vie,eqo),e(_v,oqo),e(_v,zie),e(zie,rqo),e(He,tqo),e(He,Wie),e(Wie,aqo),e(He,nqo),g(dy,He,null),b(d,rBe,u),b(d,Nd,u),e(Nd,uv),e(uv,Qie),g(cy,Qie,null),e(Nd,sqo),e(Nd,Hie),e(Hie,lqo),b(d,tBe,u),b(d,cr,u),g(fy,cr,null),e(cr,iqo),e(cr,qd),e(qd,dqo),e(qd,Uie),e(Uie,cqo),e(qd,fqo),e(qd,Jie),e(Jie,mqo),e(qd,gqo),e(cr,hqo),e(cr,my),e(my,pqo),e(my,Yie),e(Yie,_qo),e(my,uqo),e(cr,bqo),e(cr,tt),g(gy,tt,null),e(tt,vqo),e(tt,Kie),e(Kie,Tqo),e(tt,Fqo),e(tt,Gd),e(Gd,Cqo),e(Gd,Zie),e(Zie,Mqo),e(Gd,Eqo),e(Gd,ede),e(ede,yqo),e(Gd,wqo),e(tt,Aqo),e(tt,ode),e(ode,Lqo),e(tt,Bqo),g(hy,tt,null),e(cr,xqo),e(cr,Ue),g(py,Ue,null),e(Ue,kqo),e(Ue,rde),e(rde,Rqo),e(Ue,Sqo),e(Ue,tn),e(tn,Pqo),e(tn,tde),e(tde,$qo),e(tn,Iqo),e(tn,ade),e(ade,Dqo),e(tn,jqo),e(tn,nde),e(nde,Nqo),e(tn,qqo),e(Ue,Gqo),e(Ue,an),e(an,bv),e(bv,sde),e(sde,Oqo),e(bv,Xqo),e(bv,Kj),e(Kj,Vqo),e(bv,zqo),e(an,Wqo),e(an,vv),e(vv,lde),e(lde,Qqo),e(vv,Hqo),e(vv,Zj),e(Zj,Uqo),e(vv,Jqo),e(an,Yqo),e(an,Tv),e(Tv,ide),e(ide,Kqo),e(Tv,Zqo),e(Tv,eN),e(eN,eGo),e(Tv,oGo),e(an,rGo),e(an,Fv),e(Fv,dde),e(dde,tGo),e(Fv,aGo),e(Fv,oN),e(oN,nGo),e(Fv,sGo),e(Ue,lGo),e(Ue,Cv),e(Cv,iGo),e(Cv,cde),e(cde,dGo),e(Cv,cGo),e(Cv,fde),e(fde,fGo),e(Ue,mGo),e(Ue,mde),e(mde,gGo),e(Ue,hGo),g(_y,Ue,null),b(d,aBe,u),b(d,Od,u),e(Od,Mv),e(Mv,gde),g(uy,gde,null),e(Od,pGo),e(Od,hde),e(hde,_Go),b(d,nBe,u),b(d,fr,u),g(by,fr,null),e(fr,uGo),e(fr,Xd),e(Xd,bGo),e(Xd,pde),e(pde,vGo),e(Xd,TGo),e(Xd,_de),e(_de,FGo),e(Xd,CGo),e(fr,MGo),e(fr,vy),e(vy,EGo),e(vy,ude),e(ude,yGo),e(vy,wGo),e(fr,AGo),e(fr,at),g(Ty,at,null),e(at,LGo),e(at,bde),e(bde,BGo),e(at,xGo),e(at,Vd),e(Vd,kGo),e(Vd,vde),e(vde,RGo),e(Vd,SGo),e(Vd,Tde),e(Tde,PGo),e(Vd,$Go),e(at,IGo),e(at,Fde),e(Fde,DGo),e(at,jGo),g(Fy,at,null),e(fr,NGo),e(fr,Je),g(Cy,Je,null),e(Je,qGo),e(Je,Cde),e(Cde,GGo),e(Je,OGo),e(Je,nn),e(nn,XGo),e(nn,Mde),e(Mde,VGo),e(nn,zGo),e(nn,Ede),e(Ede,WGo),e(nn,QGo),e(nn,yde),e(yde,HGo),e(nn,UGo),e(Je,JGo),e(Je,zd),e(zd,Ev),e(Ev,wde),e(wde,YGo),e(Ev,KGo),e(Ev,rN),e(rN,ZGo),e(Ev,eOo),e(zd,oOo),e(zd,yv),e(yv,Ade),e(Ade,rOo),e(yv,tOo),e(yv,tN),e(tN,aOo),e(yv,nOo),e(zd,sOo),e(zd,wv),e(wv,Lde),e(Lde,lOo),e(wv,iOo),e(wv,aN),e(aN,dOo),e(wv,cOo),e(Je,fOo),e(Je,Av),e(Av,mOo),e(Av,Bde),e(Bde,gOo),e(Av,hOo),e(Av,xde),e(xde,pOo),e(Je,_Oo),e(Je,kde),e(kde,uOo),e(Je,bOo),g(My,Je,null),b(d,sBe,u),b(d,Wd,u),e(Wd,Lv),e(Lv,Rde),g(Ey,Rde,null),e(Wd,vOo),e(Wd,Sde),e(Sde,TOo),b(d,lBe,u),b(d,mr,u),g(yy,mr,null),e(mr,FOo),e(mr,Qd),e(Qd,COo),e(Qd,Pde),e(Pde,MOo),e(Qd,EOo),e(Qd,$de),e($de,yOo),e(Qd,wOo),e(mr,AOo),e(mr,wy),e(wy,LOo),e(wy,Ide),e(Ide,BOo),e(wy,xOo),e(mr,kOo),e(mr,nt),g(Ay,nt,null),e(nt,ROo),e(nt,Dde),e(Dde,SOo),e(nt,POo),e(nt,Hd),e(Hd,$Oo),e(Hd,jde),e(jde,IOo),e(Hd,DOo),e(Hd,Nde),e(Nde,jOo),e(Hd,NOo),e(nt,qOo),e(nt,qde),e(qde,GOo),e(nt,OOo),g(Ly,nt,null),e(mr,XOo),e(mr,Ye),g(By,Ye,null),e(Ye,VOo),e(Ye,Gde),e(Gde,zOo),e(Ye,WOo),e(Ye,sn),e(sn,QOo),e(sn,Ode),e(Ode,HOo),e(sn,UOo),e(sn,Xde),e(Xde,JOo),e(sn,YOo),e(sn,Vde),e(Vde,KOo),e(sn,ZOo),e(Ye,eXo),e(Ye,zde),e(zde,Bv),e(Bv,Wde),e(Wde,oXo),e(Bv,rXo),e(Bv,nN),e(nN,tXo),e(Bv,aXo),e(Ye,nXo),e(Ye,xv),e(xv,sXo),e(xv,Qde),e(Qde,lXo),e(xv,iXo),e(xv,Hde),e(Hde,dXo),e(Ye,cXo),e(Ye,Ude),e(Ude,fXo),e(Ye,mXo),g(xy,Ye,null),b(d,iBe,u),b(d,Ud,u),e(Ud,kv),e(kv,Jde),g(ky,Jde,null),e(Ud,gXo),e(Ud,Yde),e(Yde,hXo),b(d,dBe,u),b(d,gr,u),g(Ry,gr,null),e(gr,pXo),e(gr,Jd),e(Jd,_Xo),e(Jd,Kde),e(Kde,uXo),e(Jd,bXo),e(Jd,Zde),e(Zde,vXo),e(Jd,TXo),e(gr,FXo),e(gr,Sy),e(Sy,CXo),e(Sy,ece),e(ece,MXo),e(Sy,EXo),e(gr,yXo),e(gr,st),g(Py,st,null),e(st,wXo),e(st,oce),e(oce,AXo),e(st,LXo),e(st,Yd),e(Yd,BXo),e(Yd,rce),e(rce,xXo),e(Yd,kXo),e(Yd,tce),e(tce,RXo),e(Yd,SXo),e(st,PXo),e(st,ace),e(ace,$Xo),e(st,IXo),g($y,st,null),e(gr,DXo),e(gr,Ke),g(Iy,Ke,null),e(Ke,jXo),e(Ke,nce),e(nce,NXo),e(Ke,qXo),e(Ke,ln),e(ln,GXo),e(ln,sce),e(sce,OXo),e(ln,XXo),e(ln,lce),e(lce,VXo),e(ln,zXo),e(ln,ice),e(ice,WXo),e(ln,QXo),e(Ke,HXo),e(Ke,dce),e(dce,Rv),e(Rv,cce),e(cce,UXo),e(Rv,JXo),e(Rv,sN),e(sN,YXo),e(Rv,KXo),e(Ke,ZXo),e(Ke,Sv),e(Sv,eVo),e(Sv,fce),e(fce,oVo),e(Sv,rVo),e(Sv,mce),e(mce,tVo),e(Ke,aVo),e(Ke,gce),e(gce,nVo),e(Ke,sVo),g(Dy,Ke,null),b(d,cBe,u),b(d,Kd,u),e(Kd,Pv),e(Pv,hce),g(jy,hce,null),e(Kd,lVo),e(Kd,pce),e(pce,iVo),b(d,fBe,u),b(d,hr,u),g(Ny,hr,null),e(hr,dVo),e(hr,Zd),e(Zd,cVo),e(Zd,_ce),e(_ce,fVo),e(Zd,mVo),e(Zd,uce),e(uce,gVo),e(Zd,hVo),e(hr,pVo),e(hr,qy),e(qy,_Vo),e(qy,bce),e(bce,uVo),e(qy,bVo),e(hr,vVo),e(hr,lt),g(Gy,lt,null),e(lt,TVo),e(lt,vce),e(vce,FVo),e(lt,CVo),e(lt,ec),e(ec,MVo),e(ec,Tce),e(Tce,EVo),e(ec,yVo),e(ec,Fce),e(Fce,wVo),e(ec,AVo),e(lt,LVo),e(lt,Cce),e(Cce,BVo),e(lt,xVo),g(Oy,lt,null),e(hr,kVo),e(hr,Ze),g(Xy,Ze,null),e(Ze,RVo),e(Ze,Mce),e(Mce,SVo),e(Ze,PVo),e(Ze,dn),e(dn,$Vo),e(dn,Ece),e(Ece,IVo),e(dn,DVo),e(dn,yce),e(yce,jVo),e(dn,NVo),e(dn,wce),e(wce,qVo),e(dn,GVo),e(Ze,OVo),e(Ze,Vy),e(Vy,$v),e($v,Ace),e(Ace,XVo),e($v,VVo),e($v,lN),e(lN,zVo),e($v,WVo),e(Vy,QVo),e(Vy,Iv),e(Iv,Lce),e(Lce,HVo),e(Iv,UVo),e(Iv,iN),e(iN,JVo),e(Iv,YVo),e(Ze,KVo),e(Ze,Dv),e(Dv,ZVo),e(Dv,Bce),e(Bce,ezo),e(Dv,ozo),e(Dv,xce),e(xce,rzo),e(Ze,tzo),e(Ze,kce),e(kce,azo),e(Ze,nzo),g(zy,Ze,null),b(d,mBe,u),b(d,oc,u),e(oc,jv),e(jv,Rce),g(Wy,Rce,null),e(oc,szo),e(oc,Sce),e(Sce,lzo),b(d,gBe,u),b(d,pr,u),g(Qy,pr,null),e(pr,izo),e(pr,rc),e(rc,dzo),e(rc,Pce),e(Pce,czo),e(rc,fzo),e(rc,$ce),e($ce,mzo),e(rc,gzo),e(pr,hzo),e(pr,Hy),e(Hy,pzo),e(Hy,Ice),e(Ice,_zo),e(Hy,uzo),e(pr,bzo),e(pr,it),g(Uy,it,null),e(it,vzo),e(it,Dce),e(Dce,Tzo),e(it,Fzo),e(it,tc),e(tc,Czo),e(tc,jce),e(jce,Mzo),e(tc,Ezo),e(tc,Nce),e(Nce,yzo),e(tc,wzo),e(it,Azo),e(it,qce),e(qce,Lzo),e(it,Bzo),g(Jy,it,null),e(pr,xzo),e(pr,go),g(Yy,go,null),e(go,kzo),e(go,Gce),e(Gce,Rzo),e(go,Szo),e(go,cn),e(cn,Pzo),e(cn,Oce),e(Oce,$zo),e(cn,Izo),e(cn,Xce),e(Xce,Dzo),e(cn,jzo),e(cn,Vce),e(Vce,Nzo),e(cn,qzo),e(go,Gzo),e(go,B),e(B,Nv),e(Nv,zce),e(zce,Ozo),e(Nv,Xzo),e(Nv,dN),e(dN,Vzo),e(Nv,zzo),e(B,Wzo),e(B,qv),e(qv,Wce),e(Wce,Qzo),e(qv,Hzo),e(qv,cN),e(cN,Uzo),e(qv,Jzo),e(B,Yzo),e(B,Gv),e(Gv,Qce),e(Qce,Kzo),e(Gv,Zzo),e(Gv,fN),e(fN,eWo),e(Gv,oWo),e(B,rWo),e(B,Ov),e(Ov,Hce),e(Hce,tWo),e(Ov,aWo),e(Ov,mN),e(mN,nWo),e(Ov,sWo),e(B,lWo),e(B,Xv),e(Xv,Uce),e(Uce,iWo),e(Xv,dWo),e(Xv,gN),e(gN,cWo),e(Xv,fWo),e(B,mWo),e(B,Vv),e(Vv,Jce),e(Jce,gWo),e(Vv,hWo),e(Vv,hN),e(hN,pWo),e(Vv,_Wo),e(B,uWo),e(B,zv),e(zv,Yce),e(Yce,bWo),e(zv,vWo),e(zv,pN),e(pN,TWo),e(zv,FWo),e(B,CWo),e(B,Wv),e(Wv,Kce),e(Kce,MWo),e(Wv,EWo),e(Wv,_N),e(_N,yWo),e(Wv,wWo),e(B,AWo),e(B,Qv),e(Qv,Zce),e(Zce,LWo),e(Qv,BWo),e(Qv,uN),e(uN,xWo),e(Qv,kWo),e(B,RWo),e(B,Hv),e(Hv,efe),e(efe,SWo),e(Hv,PWo),e(Hv,bN),e(bN,$Wo),e(Hv,IWo),e(B,DWo),e(B,Uv),e(Uv,ofe),e(ofe,jWo),e(Uv,NWo),e(Uv,vN),e(vN,qWo),e(Uv,GWo),e(B,OWo),e(B,Jv),e(Jv,rfe),e(rfe,XWo),e(Jv,VWo),e(Jv,TN),e(TN,zWo),e(Jv,WWo),e(B,QWo),e(B,Yv),e(Yv,tfe),e(tfe,HWo),e(Yv,UWo),e(Yv,FN),e(FN,JWo),e(Yv,YWo),e(B,KWo),e(B,Kv),e(Kv,afe),e(afe,ZWo),e(Kv,eQo),e(Kv,CN),e(CN,oQo),e(Kv,rQo),e(B,tQo),e(B,Zv),e(Zv,nfe),e(nfe,aQo),e(Zv,nQo),e(Zv,MN),e(MN,sQo),e(Zv,lQo),e(B,iQo),e(B,$s),e($s,sfe),e(sfe,dQo),e($s,cQo),e($s,EN),e(EN,fQo),e($s,mQo),e($s,yN),e(yN,gQo),e($s,hQo),e(B,pQo),e(B,e0),e(e0,lfe),e(lfe,_Qo),e(e0,uQo),e(e0,wN),e(wN,bQo),e(e0,vQo),e(B,TQo),e(B,o0),e(o0,ife),e(ife,FQo),e(o0,CQo),e(o0,AN),e(AN,MQo),e(o0,EQo),e(B,yQo),e(B,r0),e(r0,dfe),e(dfe,wQo),e(r0,AQo),e(r0,LN),e(LN,LQo),e(r0,BQo),e(B,xQo),e(B,t0),e(t0,cfe),e(cfe,kQo),e(t0,RQo),e(t0,BN),e(BN,SQo),e(t0,PQo),e(B,$Qo),e(B,a0),e(a0,ffe),e(ffe,IQo),e(a0,DQo),e(a0,xN),e(xN,jQo),e(a0,NQo),e(B,qQo),e(B,n0),e(n0,mfe),e(mfe,GQo),e(n0,OQo),e(n0,kN),e(kN,XQo),e(n0,VQo),e(B,zQo),e(B,s0),e(s0,gfe),e(gfe,WQo),e(s0,QQo),e(s0,RN),e(RN,HQo),e(s0,UQo),e(B,JQo),e(B,l0),e(l0,hfe),e(hfe,YQo),e(l0,KQo),e(l0,SN),e(SN,ZQo),e(l0,eHo),e(B,oHo),e(B,i0),e(i0,pfe),e(pfe,rHo),e(i0,tHo),e(i0,PN),e(PN,aHo),e(i0,nHo),e(B,sHo),e(B,d0),e(d0,_fe),e(_fe,lHo),e(d0,iHo),e(d0,$N),e($N,dHo),e(d0,cHo),e(B,fHo),e(B,c0),e(c0,ufe),e(ufe,mHo),e(c0,gHo),e(c0,IN),e(IN,hHo),e(c0,pHo),e(B,_Ho),e(B,f0),e(f0,bfe),e(bfe,uHo),e(f0,bHo),e(f0,DN),e(DN,vHo),e(f0,THo),e(B,FHo),e(B,m0),e(m0,vfe),e(vfe,CHo),e(m0,MHo),e(m0,jN),e(jN,EHo),e(m0,yHo),e(B,wHo),e(B,g0),e(g0,Tfe),e(Tfe,AHo),e(g0,LHo),e(g0,NN),e(NN,BHo),e(g0,xHo),e(B,kHo),e(B,h0),e(h0,Ffe),e(Ffe,RHo),e(h0,SHo),e(h0,qN),e(qN,PHo),e(h0,$Ho),e(B,IHo),e(B,p0),e(p0,Cfe),e(Cfe,DHo),e(p0,jHo),e(p0,GN),e(GN,NHo),e(p0,qHo),e(B,GHo),e(B,_0),e(_0,Mfe),e(Mfe,OHo),e(_0,XHo),e(_0,ON),e(ON,VHo),e(_0,zHo),e(B,WHo),e(B,u0),e(u0,Efe),e(Efe,QHo),e(u0,HHo),e(u0,XN),e(XN,UHo),e(u0,JHo),e(B,YHo),e(B,b0),e(b0,yfe),e(yfe,KHo),e(b0,ZHo),e(b0,VN),e(VN,eUo),e(b0,oUo),e(B,rUo),e(B,v0),e(v0,wfe),e(wfe,tUo),e(v0,aUo),e(v0,zN),e(zN,nUo),e(v0,sUo),e(B,lUo),e(B,T0),e(T0,Afe),e(Afe,iUo),e(T0,dUo),e(T0,WN),e(WN,cUo),e(T0,fUo),e(B,mUo),e(B,F0),e(F0,Lfe),e(Lfe,gUo),e(F0,hUo),e(F0,QN),e(QN,pUo),e(F0,_Uo),e(B,uUo),e(B,C0),e(C0,Bfe),e(Bfe,bUo),e(C0,vUo),e(C0,HN),e(HN,TUo),e(C0,FUo),e(B,CUo),e(B,M0),e(M0,xfe),e(xfe,MUo),e(M0,EUo),e(M0,UN),e(UN,yUo),e(M0,wUo),e(B,AUo),e(B,E0),e(E0,kfe),e(kfe,LUo),e(E0,BUo),e(E0,JN),e(JN,xUo),e(E0,kUo),e(go,RUo),e(go,Rfe),e(Rfe,SUo),e(go,PUo),g(Ky,go,null),b(d,hBe,u),b(d,ac,u),e(ac,y0),e(y0,Sfe),g(Zy,Sfe,null),e(ac,$Uo),e(ac,Pfe),e(Pfe,IUo),b(d,pBe,u),b(d,_r,u),g(ew,_r,null),e(_r,DUo),e(_r,nc),e(nc,jUo),e(nc,$fe),e($fe,NUo),e(nc,qUo),e(nc,Ife),e(Ife,GUo),e(nc,OUo),e(_r,XUo),e(_r,ow),e(ow,VUo),e(ow,Dfe),e(Dfe,zUo),e(ow,WUo),e(_r,QUo),e(_r,dt),g(rw,dt,null),e(dt,HUo),e(dt,jfe),e(jfe,UUo),e(dt,JUo),e(dt,sc),e(sc,YUo),e(sc,Nfe),e(Nfe,KUo),e(sc,ZUo),e(sc,qfe),e(qfe,eJo),e(sc,oJo),e(dt,rJo),e(dt,Gfe),e(Gfe,tJo),e(dt,aJo),g(tw,dt,null),e(_r,nJo),e(_r,ho),g(aw,ho,null),e(ho,sJo),e(ho,Ofe),e(Ofe,lJo),e(ho,iJo),e(ho,fn),e(fn,dJo),e(fn,Xfe),e(Xfe,cJo),e(fn,fJo),e(fn,Vfe),e(Vfe,mJo),e(fn,gJo),e(fn,zfe),e(zfe,hJo),e(fn,pJo),e(ho,_Jo),e(ho,H),e(H,w0),e(w0,Wfe),e(Wfe,uJo),e(w0,bJo),e(w0,YN),e(YN,vJo),e(w0,TJo),e(H,FJo),e(H,A0),e(A0,Qfe),e(Qfe,CJo),e(A0,MJo),e(A0,KN),e(KN,EJo),e(A0,yJo),e(H,wJo),e(H,L0),e(L0,Hfe),e(Hfe,AJo),e(L0,LJo),e(L0,ZN),e(ZN,BJo),e(L0,xJo),e(H,kJo),e(H,B0),e(B0,Ufe),e(Ufe,RJo),e(B0,SJo),e(B0,eq),e(eq,PJo),e(B0,$Jo),e(H,IJo),e(H,x0),e(x0,Jfe),e(Jfe,DJo),e(x0,jJo),e(x0,oq),e(oq,NJo),e(x0,qJo),e(H,GJo),e(H,k0),e(k0,Yfe),e(Yfe,OJo),e(k0,XJo),e(k0,rq),e(rq,VJo),e(k0,zJo),e(H,WJo),e(H,R0),e(R0,Kfe),e(Kfe,QJo),e(R0,HJo),e(R0,tq),e(tq,UJo),e(R0,JJo),e(H,YJo),e(H,S0),e(S0,Zfe),e(Zfe,KJo),e(S0,ZJo),e(S0,aq),e(aq,eYo),e(S0,oYo),e(H,rYo),e(H,P0),e(P0,eme),e(eme,tYo),e(P0,aYo),e(P0,nq),e(nq,nYo),e(P0,sYo),e(H,lYo),e(H,$0),e($0,ome),e(ome,iYo),e($0,dYo),e($0,sq),e(sq,cYo),e($0,fYo),e(H,mYo),e(H,I0),e(I0,rme),e(rme,gYo),e(I0,hYo),e(I0,lq),e(lq,pYo),e(I0,_Yo),e(H,uYo),e(H,D0),e(D0,tme),e(tme,bYo),e(D0,vYo),e(D0,iq),e(iq,TYo),e(D0,FYo),e(H,CYo),e(H,j0),e(j0,ame),e(ame,MYo),e(j0,EYo),e(j0,dq),e(dq,yYo),e(j0,wYo),e(H,AYo),e(H,N0),e(N0,nme),e(nme,LYo),e(N0,BYo),e(N0,cq),e(cq,xYo),e(N0,kYo),e(H,RYo),e(H,q0),e(q0,sme),e(sme,SYo),e(q0,PYo),e(q0,fq),e(fq,$Yo),e(q0,IYo),e(H,DYo),e(H,G0),e(G0,lme),e(lme,jYo),e(G0,NYo),e(G0,mq),e(mq,qYo),e(G0,GYo),e(H,OYo),e(H,O0),e(O0,ime),e(ime,XYo),e(O0,VYo),e(O0,gq),e(gq,zYo),e(O0,WYo),e(H,QYo),e(H,X0),e(X0,dme),e(dme,HYo),e(X0,UYo),e(X0,hq),e(hq,JYo),e(X0,YYo),e(H,KYo),e(H,V0),e(V0,cme),e(cme,ZYo),e(V0,eKo),e(V0,pq),e(pq,oKo),e(V0,rKo),e(H,tKo),e(H,z0),e(z0,fme),e(fme,aKo),e(z0,nKo),e(z0,_q),e(_q,sKo),e(z0,lKo),e(H,iKo),e(H,W0),e(W0,mme),e(mme,dKo),e(W0,cKo),e(W0,uq),e(uq,fKo),e(W0,mKo),e(H,gKo),e(H,Q0),e(Q0,gme),e(gme,hKo),e(Q0,pKo),e(Q0,bq),e(bq,_Ko),e(Q0,uKo),e(ho,bKo),e(ho,hme),e(hme,vKo),e(ho,TKo),g(nw,ho,null),b(d,_Be,u),b(d,lc,u),e(lc,H0),e(H0,pme),g(sw,pme,null),e(lc,FKo),e(lc,_me),e(_me,CKo),b(d,uBe,u),b(d,ur,u),g(lw,ur,null),e(ur,MKo),e(ur,ic),e(ic,EKo),e(ic,ume),e(ume,yKo),e(ic,wKo),e(ic,bme),e(bme,AKo),e(ic,LKo),e(ur,BKo),e(ur,iw),e(iw,xKo),e(iw,vme),e(vme,kKo),e(iw,RKo),e(ur,SKo),e(ur,ct),g(dw,ct,null),e(ct,PKo),e(ct,Tme),e(Tme,$Ko),e(ct,IKo),e(ct,dc),e(dc,DKo),e(dc,Fme),e(Fme,jKo),e(dc,NKo),e(dc,Cme),e(Cme,qKo),e(dc,GKo),e(ct,OKo),e(ct,Mme),e(Mme,XKo),e(ct,VKo),g(cw,ct,null),e(ur,zKo),e(ur,po),g(fw,po,null),e(po,WKo),e(po,Eme),e(Eme,QKo),e(po,HKo),e(po,mn),e(mn,UKo),e(mn,yme),e(yme,JKo),e(mn,YKo),e(mn,wme),e(wme,KKo),e(mn,ZKo),e(mn,Ame),e(Ame,eZo),e(mn,oZo),e(po,rZo),e(po,he),e(he,U0),e(U0,Lme),e(Lme,tZo),e(U0,aZo),e(U0,vq),e(vq,nZo),e(U0,sZo),e(he,lZo),e(he,J0),e(J0,Bme),e(Bme,iZo),e(J0,dZo),e(J0,Tq),e(Tq,cZo),e(J0,fZo),e(he,mZo),e(he,Y0),e(Y0,xme),e(xme,gZo),e(Y0,hZo),e(Y0,Fq),e(Fq,pZo),e(Y0,_Zo),e(he,uZo),e(he,K0),e(K0,kme),e(kme,bZo),e(K0,vZo),e(K0,Cq),e(Cq,TZo),e(K0,FZo),e(he,CZo),e(he,Z0),e(Z0,Rme),e(Rme,MZo),e(Z0,EZo),e(Z0,Mq),e(Mq,yZo),e(Z0,wZo),e(he,AZo),e(he,eT),e(eT,Sme),e(Sme,LZo),e(eT,BZo),e(eT,Eq),e(Eq,xZo),e(eT,kZo),e(he,RZo),e(he,oT),e(oT,Pme),e(Pme,SZo),e(oT,PZo),e(oT,yq),e(yq,$Zo),e(oT,IZo),e(he,DZo),e(he,rT),e(rT,$me),e($me,jZo),e(rT,NZo),e(rT,wq),e(wq,qZo),e(rT,GZo),e(he,OZo),e(he,tT),e(tT,Ime),e(Ime,XZo),e(tT,VZo),e(tT,Aq),e(Aq,zZo),e(tT,WZo),e(he,QZo),e(he,aT),e(aT,Dme),e(Dme,HZo),e(aT,UZo),e(aT,Lq),e(Lq,JZo),e(aT,YZo),e(po,KZo),e(po,jme),e(jme,ZZo),e(po,eer),g(mw,po,null),b(d,bBe,u),b(d,cc,u),e(cc,nT),e(nT,Nme),g(gw,Nme,null),e(cc,oer),e(cc,qme),e(qme,rer),b(d,vBe,u),b(d,br,u),g(hw,br,null),e(br,ter),e(br,fc),e(fc,aer),e(fc,Gme),e(Gme,ner),e(fc,ser),e(fc,Ome),e(Ome,ler),e(fc,ier),e(br,der),e(br,pw),e(pw,cer),e(pw,Xme),e(Xme,fer),e(pw,mer),e(br,ger),e(br,ft),g(_w,ft,null),e(ft,her),e(ft,Vme),e(Vme,per),e(ft,_er),e(ft,mc),e(mc,uer),e(mc,zme),e(zme,ber),e(mc,ver),e(mc,Wme),e(Wme,Ter),e(mc,Fer),e(ft,Cer),e(ft,Qme),e(Qme,Mer),e(ft,Eer),g(uw,ft,null),e(br,yer),e(br,_o),g(bw,_o,null),e(_o,wer),e(_o,Hme),e(Hme,Aer),e(_o,Ler),e(_o,gn),e(gn,Ber),e(gn,Ume),e(Ume,xer),e(gn,ker),e(gn,Jme),e(Jme,Rer),e(gn,Ser),e(gn,Yme),e(Yme,Per),e(gn,$er),e(_o,Ier),e(_o,Kme),e(Kme,sT),e(sT,Zme),e(Zme,Der),e(sT,jer),e(sT,Bq),e(Bq,Ner),e(sT,qer),e(_o,Ger),e(_o,ege),e(ege,Oer),e(_o,Xer),g(vw,_o,null),b(d,TBe,u),b(d,gc,u),e(gc,lT),e(lT,oge),g(Tw,oge,null),e(gc,Ver),e(gc,rge),e(rge,zer),b(d,FBe,u),b(d,vr,u),g(Fw,vr,null),e(vr,Wer),e(vr,hc),e(hc,Qer),e(hc,tge),e(tge,Her),e(hc,Uer),e(hc,age),e(age,Jer),e(hc,Yer),e(vr,Ker),e(vr,Cw),e(Cw,Zer),e(Cw,nge),e(nge,eor),e(Cw,oor),e(vr,ror),e(vr,mt),g(Mw,mt,null),e(mt,tor),e(mt,sge),e(sge,aor),e(mt,nor),e(mt,pc),e(pc,sor),e(pc,lge),e(lge,lor),e(pc,ior),e(pc,ige),e(ige,dor),e(pc,cor),e(mt,mor),e(mt,dge),e(dge,gor),e(mt,hor),g(Ew,mt,null),e(vr,por),e(vr,uo),g(yw,uo,null),e(uo,_or),e(uo,cge),e(cge,uor),e(uo,bor),e(uo,hn),e(hn,vor),e(hn,fge),e(fge,Tor),e(hn,For),e(hn,mge),e(mge,Cor),e(hn,Mor),e(hn,gge),e(gge,Eor),e(hn,yor),e(uo,wor),e(uo,Y),e(Y,iT),e(iT,hge),e(hge,Aor),e(iT,Lor),e(iT,xq),e(xq,Bor),e(iT,xor),e(Y,kor),e(Y,dT),e(dT,pge),e(pge,Ror),e(dT,Sor),e(dT,kq),e(kq,Por),e(dT,$or),e(Y,Ior),e(Y,cT),e(cT,_ge),e(_ge,Dor),e(cT,jor),e(cT,Rq),e(Rq,Nor),e(cT,qor),e(Y,Gor),e(Y,fT),e(fT,uge),e(uge,Oor),e(fT,Xor),e(fT,Sq),e(Sq,Vor),e(fT,zor),e(Y,Wor),e(Y,mT),e(mT,bge),e(bge,Qor),e(mT,Hor),e(mT,Pq),e(Pq,Uor),e(mT,Jor),e(Y,Yor),e(Y,gT),e(gT,vge),e(vge,Kor),e(gT,Zor),e(gT,$q),e($q,err),e(gT,orr),e(Y,rrr),e(Y,hT),e(hT,Tge),e(Tge,trr),e(hT,arr),e(hT,Iq),e(Iq,nrr),e(hT,srr),e(Y,lrr),e(Y,pT),e(pT,Fge),e(Fge,irr),e(pT,drr),e(pT,Dq),e(Dq,crr),e(pT,frr),e(Y,mrr),e(Y,_T),e(_T,Cge),e(Cge,grr),e(_T,hrr),e(_T,jq),e(jq,prr),e(_T,_rr),e(Y,urr),e(Y,uT),e(uT,Mge),e(Mge,brr),e(uT,vrr),e(uT,Nq),e(Nq,Trr),e(uT,Frr),e(Y,Crr),e(Y,bT),e(bT,Ege),e(Ege,Mrr),e(bT,Err),e(bT,qq),e(qq,yrr),e(bT,wrr),e(Y,Arr),e(Y,vT),e(vT,yge),e(yge,Lrr),e(vT,Brr),e(vT,Gq),e(Gq,xrr),e(vT,krr),e(Y,Rrr),e(Y,TT),e(TT,wge),e(wge,Srr),e(TT,Prr),e(TT,Oq),e(Oq,$rr),e(TT,Irr),e(Y,Drr),e(Y,FT),e(FT,Age),e(Age,jrr),e(FT,Nrr),e(FT,Xq),e(Xq,qrr),e(FT,Grr),e(Y,Orr),e(Y,CT),e(CT,Lge),e(Lge,Xrr),e(CT,Vrr),e(CT,Vq),e(Vq,zrr),e(CT,Wrr),e(Y,Qrr),e(Y,MT),e(MT,Bge),e(Bge,Hrr),e(MT,Urr),e(MT,zq),e(zq,Jrr),e(MT,Yrr),e(Y,Krr),e(Y,ET),e(ET,xge),e(xge,Zrr),e(ET,etr),e(ET,Wq),e(Wq,otr),e(ET,rtr),e(Y,ttr),e(Y,yT),e(yT,kge),e(kge,atr),e(yT,ntr),e(yT,Qq),e(Qq,str),e(yT,ltr),e(Y,itr),e(Y,wT),e(wT,Rge),e(Rge,dtr),e(wT,ctr),e(wT,Hq),e(Hq,ftr),e(wT,mtr),e(Y,gtr),e(Y,AT),e(AT,Sge),e(Sge,htr),e(AT,ptr),e(AT,Uq),e(Uq,_tr),e(AT,utr),e(uo,btr),e(uo,Pge),e(Pge,vtr),e(uo,Ttr),g(ww,uo,null),b(d,CBe,u),b(d,_c,u),e(_c,LT),e(LT,$ge),g(Aw,$ge,null),e(_c,Ftr),e(_c,Ige),e(Ige,Ctr),b(d,MBe,u),b(d,Tr,u),g(Lw,Tr,null),e(Tr,Mtr),e(Tr,uc),e(uc,Etr),e(uc,Dge),e(Dge,ytr),e(uc,wtr),e(uc,jge),e(jge,Atr),e(uc,Ltr),e(Tr,Btr),e(Tr,Bw),e(Bw,xtr),e(Bw,Nge),e(Nge,ktr),e(Bw,Rtr),e(Tr,Str),e(Tr,gt),g(xw,gt,null),e(gt,Ptr),e(gt,qge),e(qge,$tr),e(gt,Itr),e(gt,bc),e(bc,Dtr),e(bc,Gge),e(Gge,jtr),e(bc,Ntr),e(bc,Oge),e(Oge,qtr),e(bc,Gtr),e(gt,Otr),e(gt,Xge),e(Xge,Xtr),e(gt,Vtr),g(kw,gt,null),e(Tr,ztr),e(Tr,bo),g(Rw,bo,null),e(bo,Wtr),e(bo,Vge),e(Vge,Qtr),e(bo,Htr),e(bo,pn),e(pn,Utr),e(pn,zge),e(zge,Jtr),e(pn,Ytr),e(pn,Wge),e(Wge,Ktr),e(pn,Ztr),e(pn,Qge),e(Qge,ear),e(pn,oar),e(bo,rar),e(bo,pe),e(pe,BT),e(BT,Hge),e(Hge,tar),e(BT,aar),e(BT,Jq),e(Jq,nar),e(BT,sar),e(pe,lar),e(pe,xT),e(xT,Uge),e(Uge,iar),e(xT,dar),e(xT,Yq),e(Yq,car),e(xT,far),e(pe,mar),e(pe,kT),e(kT,Jge),e(Jge,gar),e(kT,har),e(kT,Kq),e(Kq,par),e(kT,_ar),e(pe,uar),e(pe,RT),e(RT,Yge),e(Yge,bar),e(RT,Tar),e(RT,Zq),e(Zq,Far),e(RT,Car),e(pe,Mar),e(pe,ST),e(ST,Kge),e(Kge,Ear),e(ST,yar),e(ST,eG),e(eG,war),e(ST,Aar),e(pe,Lar),e(pe,PT),e(PT,Zge),e(Zge,Bar),e(PT,xar),e(PT,oG),e(oG,kar),e(PT,Rar),e(pe,Sar),e(pe,$T),e($T,ehe),e(ehe,Par),e($T,$ar),e($T,rG),e(rG,Iar),e($T,Dar),e(pe,jar),e(pe,IT),e(IT,ohe),e(ohe,Nar),e(IT,qar),e(IT,tG),e(tG,Gar),e(IT,Oar),e(pe,Xar),e(pe,DT),e(DT,rhe),e(rhe,Var),e(DT,zar),e(DT,aG),e(aG,War),e(DT,Qar),e(pe,Har),e(pe,jT),e(jT,the),e(the,Uar),e(jT,Jar),e(jT,nG),e(nG,Yar),e(jT,Kar),e(bo,Zar),e(bo,ahe),e(ahe,enr),e(bo,onr),g(Sw,bo,null),b(d,EBe,u),b(d,vc,u),e(vc,NT),e(NT,nhe),g(Pw,nhe,null),e(vc,rnr),e(vc,she),e(she,tnr),b(d,yBe,u),b(d,Fr,u),g($w,Fr,null),e(Fr,anr),e(Fr,Tc),e(Tc,nnr),e(Tc,lhe),e(lhe,snr),e(Tc,lnr),e(Tc,ihe),e(ihe,inr),e(Tc,dnr),e(Fr,cnr),e(Fr,Iw),e(Iw,fnr),e(Iw,dhe),e(dhe,mnr),e(Iw,gnr),e(Fr,hnr),e(Fr,ht),g(Dw,ht,null),e(ht,pnr),e(ht,che),e(che,_nr),e(ht,unr),e(ht,Fc),e(Fc,bnr),e(Fc,fhe),e(fhe,vnr),e(Fc,Tnr),e(Fc,mhe),e(mhe,Fnr),e(Fc,Cnr),e(ht,Mnr),e(ht,ghe),e(ghe,Enr),e(ht,ynr),g(jw,ht,null),e(Fr,wnr),e(Fr,vo),g(Nw,vo,null),e(vo,Anr),e(vo,hhe),e(hhe,Lnr),e(vo,Bnr),e(vo,_n),e(_n,xnr),e(_n,phe),e(phe,knr),e(_n,Rnr),e(_n,_he),e(_he,Snr),e(_n,Pnr),e(_n,uhe),e(uhe,$nr),e(_n,Inr),e(vo,Dnr),e(vo,X),e(X,qT),e(qT,bhe),e(bhe,jnr),e(qT,Nnr),e(qT,sG),e(sG,qnr),e(qT,Gnr),e(X,Onr),e(X,GT),e(GT,vhe),e(vhe,Xnr),e(GT,Vnr),e(GT,lG),e(lG,znr),e(GT,Wnr),e(X,Qnr),e(X,OT),e(OT,The),e(The,Hnr),e(OT,Unr),e(OT,iG),e(iG,Jnr),e(OT,Ynr),e(X,Knr),e(X,XT),e(XT,Fhe),e(Fhe,Znr),e(XT,esr),e(XT,dG),e(dG,osr),e(XT,rsr),e(X,tsr),e(X,VT),e(VT,Che),e(Che,asr),e(VT,nsr),e(VT,cG),e(cG,ssr),e(VT,lsr),e(X,isr),e(X,zT),e(zT,Mhe),e(Mhe,dsr),e(zT,csr),e(zT,fG),e(fG,fsr),e(zT,msr),e(X,gsr),e(X,WT),e(WT,Ehe),e(Ehe,hsr),e(WT,psr),e(WT,mG),e(mG,_sr),e(WT,usr),e(X,bsr),e(X,QT),e(QT,yhe),e(yhe,vsr),e(QT,Tsr),e(QT,gG),e(gG,Fsr),e(QT,Csr),e(X,Msr),e(X,HT),e(HT,whe),e(whe,Esr),e(HT,ysr),e(HT,hG),e(hG,wsr),e(HT,Asr),e(X,Lsr),e(X,UT),e(UT,Ahe),e(Ahe,Bsr),e(UT,xsr),e(UT,pG),e(pG,ksr),e(UT,Rsr),e(X,Ssr),e(X,JT),e(JT,Lhe),e(Lhe,Psr),e(JT,$sr),e(JT,_G),e(_G,Isr),e(JT,Dsr),e(X,jsr),e(X,YT),e(YT,Bhe),e(Bhe,Nsr),e(YT,qsr),e(YT,uG),e(uG,Gsr),e(YT,Osr),e(X,Xsr),e(X,KT),e(KT,xhe),e(xhe,Vsr),e(KT,zsr),e(KT,bG),e(bG,Wsr),e(KT,Qsr),e(X,Hsr),e(X,ZT),e(ZT,khe),e(khe,Usr),e(ZT,Jsr),e(ZT,vG),e(vG,Ysr),e(ZT,Ksr),e(X,Zsr),e(X,e7),e(e7,Rhe),e(Rhe,elr),e(e7,olr),e(e7,TG),e(TG,rlr),e(e7,tlr),e(X,alr),e(X,o7),e(o7,She),e(She,nlr),e(o7,slr),e(o7,FG),e(FG,llr),e(o7,ilr),e(X,dlr),e(X,r7),e(r7,Phe),e(Phe,clr),e(r7,flr),e(r7,CG),e(CG,mlr),e(r7,glr),e(X,hlr),e(X,t7),e(t7,$he),e($he,plr),e(t7,_lr),e(t7,MG),e(MG,ulr),e(t7,blr),e(X,vlr),e(X,a7),e(a7,Ihe),e(Ihe,Tlr),e(a7,Flr),e(a7,EG),e(EG,Clr),e(a7,Mlr),e(X,Elr),e(X,n7),e(n7,Dhe),e(Dhe,ylr),e(n7,wlr),e(n7,yG),e(yG,Alr),e(n7,Llr),e(X,Blr),e(X,s7),e(s7,jhe),e(jhe,xlr),e(s7,klr),e(s7,wG),e(wG,Rlr),e(s7,Slr),e(X,Plr),e(X,l7),e(l7,Nhe),e(Nhe,$lr),e(l7,Ilr),e(l7,AG),e(AG,Dlr),e(l7,jlr),e(X,Nlr),e(X,i7),e(i7,qhe),e(qhe,qlr),e(i7,Glr),e(i7,LG),e(LG,Olr),e(i7,Xlr),e(X,Vlr),e(X,d7),e(d7,Ghe),e(Ghe,zlr),e(d7,Wlr),e(d7,BG),e(BG,Qlr),e(d7,Hlr),e(X,Ulr),e(X,c7),e(c7,Ohe),e(Ohe,Jlr),e(c7,Ylr),e(c7,xG),e(xG,Klr),e(c7,Zlr),e(vo,eir),e(vo,Xhe),e(Xhe,oir),e(vo,rir),g(qw,vo,null),b(d,wBe,u),b(d,Cc,u),e(Cc,f7),e(f7,Vhe),g(Gw,Vhe,null),e(Cc,tir),e(Cc,zhe),e(zhe,air),b(d,ABe,u),b(d,Cr,u),g(Ow,Cr,null),e(Cr,nir),e(Cr,Mc),e(Mc,sir),e(Mc,Whe),e(Whe,lir),e(Mc,iir),e(Mc,Qhe),e(Qhe,dir),e(Mc,cir),e(Cr,fir),e(Cr,Xw),e(Xw,mir),e(Xw,Hhe),e(Hhe,gir),e(Xw,hir),e(Cr,pir),e(Cr,pt),g(Vw,pt,null),e(pt,_ir),e(pt,Uhe),e(Uhe,uir),e(pt,bir),e(pt,Ec),e(Ec,vir),e(Ec,Jhe),e(Jhe,Tir),e(Ec,Fir),e(Ec,Yhe),e(Yhe,Cir),e(Ec,Mir),e(pt,Eir),e(pt,Khe),e(Khe,yir),e(pt,wir),g(zw,pt,null),e(Cr,Air),e(Cr,To),g(Ww,To,null),e(To,Lir),e(To,Zhe),e(Zhe,Bir),e(To,xir),e(To,un),e(un,kir),e(un,epe),e(epe,Rir),e(un,Sir),e(un,ope),e(ope,Pir),e(un,$ir),e(un,rpe),e(rpe,Iir),e(un,Dir),e(To,jir),e(To,te),e(te,m7),e(m7,tpe),e(tpe,Nir),e(m7,qir),e(m7,kG),e(kG,Gir),e(m7,Oir),e(te,Xir),e(te,g7),e(g7,ape),e(ape,Vir),e(g7,zir),e(g7,RG),e(RG,Wir),e(g7,Qir),e(te,Hir),e(te,h7),e(h7,npe),e(npe,Uir),e(h7,Jir),e(h7,SG),e(SG,Yir),e(h7,Kir),e(te,Zir),e(te,p7),e(p7,spe),e(spe,edr),e(p7,odr),e(p7,PG),e(PG,rdr),e(p7,tdr),e(te,adr),e(te,_7),e(_7,lpe),e(lpe,ndr),e(_7,sdr),e(_7,$G),e($G,ldr),e(_7,idr),e(te,ddr),e(te,u7),e(u7,ipe),e(ipe,cdr),e(u7,fdr),e(u7,IG),e(IG,mdr),e(u7,gdr),e(te,hdr),e(te,b7),e(b7,dpe),e(dpe,pdr),e(b7,_dr),e(b7,DG),e(DG,udr),e(b7,bdr),e(te,vdr),e(te,v7),e(v7,cpe),e(cpe,Tdr),e(v7,Fdr),e(v7,jG),e(jG,Cdr),e(v7,Mdr),e(te,Edr),e(te,T7),e(T7,fpe),e(fpe,ydr),e(T7,wdr),e(T7,NG),e(NG,Adr),e(T7,Ldr),e(te,Bdr),e(te,F7),e(F7,mpe),e(mpe,xdr),e(F7,kdr),e(F7,qG),e(qG,Rdr),e(F7,Sdr),e(te,Pdr),e(te,C7),e(C7,gpe),e(gpe,$dr),e(C7,Idr),e(C7,GG),e(GG,Ddr),e(C7,jdr),e(te,Ndr),e(te,M7),e(M7,hpe),e(hpe,qdr),e(M7,Gdr),e(M7,OG),e(OG,Odr),e(M7,Xdr),e(te,Vdr),e(te,E7),e(E7,ppe),e(ppe,zdr),e(E7,Wdr),e(E7,XG),e(XG,Qdr),e(E7,Hdr),e(te,Udr),e(te,y7),e(y7,_pe),e(_pe,Jdr),e(y7,Ydr),e(y7,VG),e(VG,Kdr),e(y7,Zdr),e(te,ecr),e(te,w7),e(w7,upe),e(upe,ocr),e(w7,rcr),e(w7,zG),e(zG,tcr),e(w7,acr),e(te,ncr),e(te,A7),e(A7,bpe),e(bpe,scr),e(A7,lcr),e(A7,WG),e(WG,icr),e(A7,dcr),e(te,ccr),e(te,L7),e(L7,vpe),e(vpe,fcr),e(L7,mcr),e(L7,QG),e(QG,gcr),e(L7,hcr),e(To,pcr),e(To,Tpe),e(Tpe,_cr),e(To,ucr),g(Qw,To,null),b(d,LBe,u),b(d,yc,u),e(yc,B7),e(B7,Fpe),g(Hw,Fpe,null),e(yc,bcr),e(yc,Cpe),e(Cpe,vcr),b(d,BBe,u),b(d,Mr,u),g(Uw,Mr,null),e(Mr,Tcr),e(Mr,wc),e(wc,Fcr),e(wc,Mpe),e(Mpe,Ccr),e(wc,Mcr),e(wc,Epe),e(Epe,Ecr),e(wc,ycr),e(Mr,wcr),e(Mr,Jw),e(Jw,Acr),e(Jw,ype),e(ype,Lcr),e(Jw,Bcr),e(Mr,xcr),e(Mr,_t),g(Yw,_t,null),e(_t,kcr),e(_t,wpe),e(wpe,Rcr),e(_t,Scr),e(_t,Ac),e(Ac,Pcr),e(Ac,Ape),e(Ape,$cr),e(Ac,Icr),e(Ac,Lpe),e(Lpe,Dcr),e(Ac,jcr),e(_t,Ncr),e(_t,Bpe),e(Bpe,qcr),e(_t,Gcr),g(Kw,_t,null),e(Mr,Ocr),e(Mr,Fo),g(Zw,Fo,null),e(Fo,Xcr),e(Fo,xpe),e(xpe,Vcr),e(Fo,zcr),e(Fo,bn),e(bn,Wcr),e(bn,kpe),e(kpe,Qcr),e(bn,Hcr),e(bn,Rpe),e(Rpe,Ucr),e(bn,Jcr),e(bn,Spe),e(Spe,Ycr),e(bn,Kcr),e(Fo,Zcr),e(Fo,Ppe),e(Ppe,x7),e(x7,$pe),e($pe,efr),e(x7,ofr),e(x7,HG),e(HG,rfr),e(x7,tfr),e(Fo,afr),e(Fo,Ipe),e(Ipe,nfr),e(Fo,sfr),g(e6,Fo,null),b(d,xBe,u),b(d,Lc,u),e(Lc,k7),e(k7,Dpe),g(o6,Dpe,null),e(Lc,lfr),e(Lc,jpe),e(jpe,ifr),b(d,kBe,u),b(d,Er,u),g(r6,Er,null),e(Er,dfr),e(Er,Bc),e(Bc,cfr),e(Bc,Npe),e(Npe,ffr),e(Bc,mfr),e(Bc,qpe),e(qpe,gfr),e(Bc,hfr),e(Er,pfr),e(Er,t6),e(t6,_fr),e(t6,Gpe),e(Gpe,ufr),e(t6,bfr),e(Er,vfr),e(Er,ut),g(a6,ut,null),e(ut,Tfr),e(ut,Ope),e(Ope,Ffr),e(ut,Cfr),e(ut,xc),e(xc,Mfr),e(xc,Xpe),e(Xpe,Efr),e(xc,yfr),e(xc,Vpe),e(Vpe,wfr),e(xc,Afr),e(ut,Lfr),e(ut,zpe),e(zpe,Bfr),e(ut,xfr),g(n6,ut,null),e(Er,kfr),e(Er,Co),g(s6,Co,null),e(Co,Rfr),e(Co,Wpe),e(Wpe,Sfr),e(Co,Pfr),e(Co,vn),e(vn,$fr),e(vn,Qpe),e(Qpe,Ifr),e(vn,Dfr),e(vn,Hpe),e(Hpe,jfr),e(vn,Nfr),e(vn,Upe),e(Upe,qfr),e(vn,Gfr),e(Co,Ofr),e(Co,K),e(K,R7),e(R7,Jpe),e(Jpe,Xfr),e(R7,Vfr),e(R7,UG),e(UG,zfr),e(R7,Wfr),e(K,Qfr),e(K,S7),e(S7,Ype),e(Ype,Hfr),e(S7,Ufr),e(S7,JG),e(JG,Jfr),e(S7,Yfr),e(K,Kfr),e(K,P7),e(P7,Kpe),e(Kpe,Zfr),e(P7,emr),e(P7,YG),e(YG,omr),e(P7,rmr),e(K,tmr),e(K,$7),e($7,Zpe),e(Zpe,amr),e($7,nmr),e($7,KG),e(KG,smr),e($7,lmr),e(K,imr),e(K,I7),e(I7,e_e),e(e_e,dmr),e(I7,cmr),e(I7,ZG),e(ZG,fmr),e(I7,mmr),e(K,gmr),e(K,D7),e(D7,o_e),e(o_e,hmr),e(D7,pmr),e(D7,eO),e(eO,_mr),e(D7,umr),e(K,bmr),e(K,j7),e(j7,r_e),e(r_e,vmr),e(j7,Tmr),e(j7,oO),e(oO,Fmr),e(j7,Cmr),e(K,Mmr),e(K,N7),e(N7,t_e),e(t_e,Emr),e(N7,ymr),e(N7,rO),e(rO,wmr),e(N7,Amr),e(K,Lmr),e(K,q7),e(q7,a_e),e(a_e,Bmr),e(q7,xmr),e(q7,tO),e(tO,kmr),e(q7,Rmr),e(K,Smr),e(K,G7),e(G7,n_e),e(n_e,Pmr),e(G7,$mr),e(G7,aO),e(aO,Imr),e(G7,Dmr),e(K,jmr),e(K,O7),e(O7,s_e),e(s_e,Nmr),e(O7,qmr),e(O7,nO),e(nO,Gmr),e(O7,Omr),e(K,Xmr),e(K,X7),e(X7,l_e),e(l_e,Vmr),e(X7,zmr),e(X7,sO),e(sO,Wmr),e(X7,Qmr),e(K,Hmr),e(K,V7),e(V7,i_e),e(i_e,Umr),e(V7,Jmr),e(V7,lO),e(lO,Ymr),e(V7,Kmr),e(K,Zmr),e(K,z7),e(z7,d_e),e(d_e,egr),e(z7,ogr),e(z7,iO),e(iO,rgr),e(z7,tgr),e(K,agr),e(K,W7),e(W7,c_e),e(c_e,ngr),e(W7,sgr),e(W7,dO),e(dO,lgr),e(W7,igr),e(K,dgr),e(K,Q7),e(Q7,f_e),e(f_e,cgr),e(Q7,fgr),e(Q7,cO),e(cO,mgr),e(Q7,ggr),e(K,hgr),e(K,H7),e(H7,m_e),e(m_e,pgr),e(H7,_gr),e(H7,fO),e(fO,ugr),e(H7,bgr),e(K,vgr),e(K,U7),e(U7,g_e),e(g_e,Tgr),e(U7,Fgr),e(U7,mO),e(mO,Cgr),e(U7,Mgr),e(K,Egr),e(K,J7),e(J7,h_e),e(h_e,ygr),e(J7,wgr),e(J7,gO),e(gO,Agr),e(J7,Lgr),e(K,Bgr),e(K,Y7),e(Y7,p_e),e(p_e,xgr),e(Y7,kgr),e(Y7,hO),e(hO,Rgr),e(Y7,Sgr),e(Co,Pgr),e(Co,__e),e(__e,$gr),e(Co,Igr),g(l6,Co,null),b(d,RBe,u),b(d,kc,u),e(kc,K7),e(K7,u_e),g(i6,u_e,null),e(kc,Dgr),e(kc,b_e),e(b_e,jgr),b(d,SBe,u),b(d,yr,u),g(d6,yr,null),e(yr,Ngr),e(yr,Rc),e(Rc,qgr),e(Rc,v_e),e(v_e,Ggr),e(Rc,Ogr),e(Rc,T_e),e(T_e,Xgr),e(Rc,Vgr),e(yr,zgr),e(yr,c6),e(c6,Wgr),e(c6,F_e),e(F_e,Qgr),e(c6,Hgr),e(yr,Ugr),e(yr,bt),g(f6,bt,null),e(bt,Jgr),e(bt,C_e),e(C_e,Ygr),e(bt,Kgr),e(bt,Sc),e(Sc,Zgr),e(Sc,M_e),e(M_e,ehr),e(Sc,ohr),e(Sc,E_e),e(E_e,rhr),e(Sc,thr),e(bt,ahr),e(bt,y_e),e(y_e,nhr),e(bt,shr),g(m6,bt,null),e(yr,lhr),e(yr,Mo),g(g6,Mo,null),e(Mo,ihr),e(Mo,w_e),e(w_e,dhr),e(Mo,chr),e(Mo,Tn),e(Tn,fhr),e(Tn,A_e),e(A_e,mhr),e(Tn,ghr),e(Tn,L_e),e(L_e,hhr),e(Tn,phr),e(Tn,B_e),e(B_e,_hr),e(Tn,uhr),e(Mo,bhr),e(Mo,Z),e(Z,Z7),e(Z7,x_e),e(x_e,vhr),e(Z7,Thr),e(Z7,pO),e(pO,Fhr),e(Z7,Chr),e(Z,Mhr),e(Z,eF),e(eF,k_e),e(k_e,Ehr),e(eF,yhr),e(eF,_O),e(_O,whr),e(eF,Ahr),e(Z,Lhr),e(Z,oF),e(oF,R_e),e(R_e,Bhr),e(oF,xhr),e(oF,uO),e(uO,khr),e(oF,Rhr),e(Z,Shr),e(Z,rF),e(rF,S_e),e(S_e,Phr),e(rF,$hr),e(rF,bO),e(bO,Ihr),e(rF,Dhr),e(Z,jhr),e(Z,tF),e(tF,P_e),e(P_e,Nhr),e(tF,qhr),e(tF,vO),e(vO,Ghr),e(tF,Ohr),e(Z,Xhr),e(Z,aF),e(aF,$_e),e($_e,Vhr),e(aF,zhr),e(aF,TO),e(TO,Whr),e(aF,Qhr),e(Z,Hhr),e(Z,nF),e(nF,I_e),e(I_e,Uhr),e(nF,Jhr),e(nF,FO),e(FO,Yhr),e(nF,Khr),e(Z,Zhr),e(Z,sF),e(sF,D_e),e(D_e,epr),e(sF,opr),e(sF,CO),e(CO,rpr),e(sF,tpr),e(Z,apr),e(Z,lF),e(lF,j_e),e(j_e,npr),e(lF,spr),e(lF,MO),e(MO,lpr),e(lF,ipr),e(Z,dpr),e(Z,iF),e(iF,N_e),e(N_e,cpr),e(iF,fpr),e(iF,EO),e(EO,mpr),e(iF,gpr),e(Z,hpr),e(Z,dF),e(dF,q_e),e(q_e,ppr),e(dF,_pr),e(dF,yO),e(yO,upr),e(dF,bpr),e(Z,vpr),e(Z,cF),e(cF,G_e),e(G_e,Tpr),e(cF,Fpr),e(cF,wO),e(wO,Cpr),e(cF,Mpr),e(Z,Epr),e(Z,fF),e(fF,O_e),e(O_e,ypr),e(fF,wpr),e(fF,AO),e(AO,Apr),e(fF,Lpr),e(Z,Bpr),e(Z,mF),e(mF,X_e),e(X_e,xpr),e(mF,kpr),e(mF,LO),e(LO,Rpr),e(mF,Spr),e(Z,Ppr),e(Z,gF),e(gF,V_e),e(V_e,$pr),e(gF,Ipr),e(gF,BO),e(BO,Dpr),e(gF,jpr),e(Z,Npr),e(Z,hF),e(hF,z_e),e(z_e,qpr),e(hF,Gpr),e(hF,xO),e(xO,Opr),e(hF,Xpr),e(Z,Vpr),e(Z,pF),e(pF,W_e),e(W_e,zpr),e(pF,Wpr),e(pF,kO),e(kO,Qpr),e(pF,Hpr),e(Z,Upr),e(Z,_F),e(_F,Q_e),e(Q_e,Jpr),e(_F,Ypr),e(_F,RO),e(RO,Kpr),e(_F,Zpr),e(Z,e_r),e(Z,uF),e(uF,H_e),e(H_e,o_r),e(uF,r_r),e(uF,SO),e(SO,t_r),e(uF,a_r),e(Mo,n_r),e(Mo,U_e),e(U_e,s_r),e(Mo,l_r),g(h6,Mo,null),b(d,PBe,u),b(d,Pc,u),e(Pc,bF),e(bF,J_e),g(p6,J_e,null),e(Pc,i_r),e(Pc,Y_e),e(Y_e,d_r),b(d,$Be,u),b(d,wr,u),g(_6,wr,null),e(wr,c_r),e(wr,$c),e($c,f_r),e($c,K_e),e(K_e,m_r),e($c,g_r),e($c,Z_e),e(Z_e,h_r),e($c,p_r),e(wr,__r),e(wr,u6),e(u6,u_r),e(u6,eue),e(eue,b_r),e(u6,v_r),e(wr,T_r),e(wr,vt),g(b6,vt,null),e(vt,F_r),e(vt,oue),e(oue,C_r),e(vt,M_r),e(vt,Ic),e(Ic,E_r),e(Ic,rue),e(rue,y_r),e(Ic,w_r),e(Ic,tue),e(tue,A_r),e(Ic,L_r),e(vt,B_r),e(vt,aue),e(aue,x_r),e(vt,k_r),g(v6,vt,null),e(wr,R_r),e(wr,Eo),g(T6,Eo,null),e(Eo,S_r),e(Eo,nue),e(nue,P_r),e(Eo,$_r),e(Eo,Fn),e(Fn,I_r),e(Fn,sue),e(sue,D_r),e(Fn,j_r),e(Fn,lue),e(lue,N_r),e(Fn,q_r),e(Fn,iue),e(iue,G_r),e(Fn,O_r),e(Eo,X_r),e(Eo,due),e(due,vF),e(vF,cue),e(cue,V_r),e(vF,z_r),e(vF,PO),e(PO,W_r),e(vF,Q_r),e(Eo,H_r),e(Eo,fue),e(fue,U_r),e(Eo,J_r),g(F6,Eo,null),b(d,IBe,u),b(d,Dc,u),e(Dc,TF),e(TF,mue),g(C6,mue,null),e(Dc,Y_r),e(Dc,gue),e(gue,K_r),b(d,DBe,u),b(d,Ar,u),g(M6,Ar,null),e(Ar,Z_r),e(Ar,jc),e(jc,eur),e(jc,hue),e(hue,our),e(jc,rur),e(jc,pue),e(pue,tur),e(jc,aur),e(Ar,nur),e(Ar,E6),e(E6,sur),e(E6,_ue),e(_ue,lur),e(E6,iur),e(Ar,dur),e(Ar,Tt),g(y6,Tt,null),e(Tt,cur),e(Tt,uue),e(uue,fur),e(Tt,mur),e(Tt,Nc),e(Nc,gur),e(Nc,bue),e(bue,hur),e(Nc,pur),e(Nc,vue),e(vue,_ur),e(Nc,uur),e(Tt,bur),e(Tt,Tue),e(Tue,vur),e(Tt,Tur),g(w6,Tt,null),e(Ar,Fur),e(Ar,yo),g(A6,yo,null),e(yo,Cur),e(yo,Fue),e(Fue,Mur),e(yo,Eur),e(yo,Cn),e(Cn,yur),e(Cn,Cue),e(Cue,wur),e(Cn,Aur),e(Cn,Mue),e(Mue,Lur),e(Cn,Bur),e(Cn,Eue),e(Eue,xur),e(Cn,kur),e(yo,Rur),e(yo,yue),e(yue,FF),e(FF,wue),e(wue,Sur),e(FF,Pur),e(FF,$O),e($O,$ur),e(FF,Iur),e(yo,Dur),e(yo,Aue),e(Aue,jur),e(yo,Nur),g(L6,yo,null),b(d,jBe,u),b(d,qc,u),e(qc,CF),e(CF,Lue),g(B6,Lue,null),e(qc,qur),e(qc,Bue),e(Bue,Gur),b(d,NBe,u),b(d,Lr,u),g(x6,Lr,null),e(Lr,Our),e(Lr,Gc),e(Gc,Xur),e(Gc,xue),e(xue,Vur),e(Gc,zur),e(Gc,kue),e(kue,Wur),e(Gc,Qur),e(Lr,Hur),e(Lr,k6),e(k6,Uur),e(k6,Rue),e(Rue,Jur),e(k6,Yur),e(Lr,Kur),e(Lr,Ft),g(R6,Ft,null),e(Ft,Zur),e(Ft,Sue),e(Sue,e5r),e(Ft,o5r),e(Ft,Oc),e(Oc,r5r),e(Oc,Pue),e(Pue,t5r),e(Oc,a5r),e(Oc,$ue),e($ue,n5r),e(Oc,s5r),e(Ft,l5r),e(Ft,Iue),e(Iue,i5r),e(Ft,d5r),g(S6,Ft,null),e(Lr,c5r),e(Lr,wo),g(P6,wo,null),e(wo,f5r),e(wo,Due),e(Due,m5r),e(wo,g5r),e(wo,Mn),e(Mn,h5r),e(Mn,jue),e(jue,p5r),e(Mn,_5r),e(Mn,Nue),e(Nue,u5r),e(Mn,b5r),e(Mn,que),e(que,v5r),e(Mn,T5r),e(wo,F5r),e(wo,z),e(z,MF),e(MF,Gue),e(Gue,C5r),e(MF,M5r),e(MF,IO),e(IO,E5r),e(MF,y5r),e(z,w5r),e(z,EF),e(EF,Oue),e(Oue,A5r),e(EF,L5r),e(EF,DO),e(DO,B5r),e(EF,x5r),e(z,k5r),e(z,yF),e(yF,Xue),e(Xue,R5r),e(yF,S5r),e(yF,jO),e(jO,P5r),e(yF,$5r),e(z,I5r),e(z,wF),e(wF,Vue),e(Vue,D5r),e(wF,j5r),e(wF,NO),e(NO,N5r),e(wF,q5r),e(z,G5r),e(z,AF),e(AF,zue),e(zue,O5r),e(AF,X5r),e(AF,qO),e(qO,V5r),e(AF,z5r),e(z,W5r),e(z,LF),e(LF,Wue),e(Wue,Q5r),e(LF,H5r),e(LF,GO),e(GO,U5r),e(LF,J5r),e(z,Y5r),e(z,BF),e(BF,Que),e(Que,K5r),e(BF,Z5r),e(BF,OO),e(OO,e1r),e(BF,o1r),e(z,r1r),e(z,xF),e(xF,Hue),e(Hue,t1r),e(xF,a1r),e(xF,XO),e(XO,n1r),e(xF,s1r),e(z,l1r),e(z,kF),e(kF,Uue),e(Uue,i1r),e(kF,d1r),e(kF,VO),e(VO,c1r),e(kF,f1r),e(z,m1r),e(z,RF),e(RF,Jue),e(Jue,g1r),e(RF,h1r),e(RF,zO),e(zO,p1r),e(RF,_1r),e(z,u1r),e(z,SF),e(SF,Yue),e(Yue,b1r),e(SF,v1r),e(SF,WO),e(WO,T1r),e(SF,F1r),e(z,C1r),e(z,PF),e(PF,Kue),e(Kue,M1r),e(PF,E1r),e(PF,QO),e(QO,y1r),e(PF,w1r),e(z,A1r),e(z,$F),e($F,Zue),e(Zue,L1r),e($F,B1r),e($F,HO),e(HO,x1r),e($F,k1r),e(z,R1r),e(z,IF),e(IF,e5e),e(e5e,S1r),e(IF,P1r),e(IF,UO),e(UO,$1r),e(IF,I1r),e(z,D1r),e(z,DF),e(DF,o5e),e(o5e,j1r),e(DF,N1r),e(DF,JO),e(JO,q1r),e(DF,G1r),e(z,O1r),e(z,jF),e(jF,r5e),e(r5e,X1r),e(jF,V1r),e(jF,YO),e(YO,z1r),e(jF,W1r),e(z,Q1r),e(z,NF),e(NF,t5e),e(t5e,H1r),e(NF,U1r),e(NF,KO),e(KO,J1r),e(NF,Y1r),e(z,K1r),e(z,qF),e(qF,a5e),e(a5e,Z1r),e(qF,ebr),e(qF,ZO),e(ZO,obr),e(qF,rbr),e(z,tbr),e(z,GF),e(GF,n5e),e(n5e,abr),e(GF,nbr),e(GF,eX),e(eX,sbr),e(GF,lbr),e(z,ibr),e(z,OF),e(OF,s5e),e(s5e,dbr),e(OF,cbr),e(OF,oX),e(oX,fbr),e(OF,mbr),e(z,gbr),e(z,XF),e(XF,l5e),e(l5e,hbr),e(XF,pbr),e(XF,rX),e(rX,_br),e(XF,ubr),e(z,bbr),e(z,VF),e(VF,i5e),e(i5e,vbr),e(VF,Tbr),e(VF,tX),e(tX,Fbr),e(VF,Cbr),e(z,Mbr),e(z,zF),e(zF,d5e),e(d5e,Ebr),e(zF,ybr),e(zF,aX),e(aX,wbr),e(zF,Abr),e(z,Lbr),e(z,WF),e(WF,c5e),e(c5e,Bbr),e(WF,xbr),e(WF,nX),e(nX,kbr),e(WF,Rbr),e(wo,Sbr),e(wo,f5e),e(f5e,Pbr),e(wo,$br),g($6,wo,null),b(d,qBe,u),b(d,Xc,u),e(Xc,QF),e(QF,m5e),g(I6,m5e,null),e(Xc,Ibr),e(Xc,g5e),e(g5e,Dbr),b(d,GBe,u),b(d,Br,u),g(D6,Br,null),e(Br,jbr),e(Br,Vc),e(Vc,Nbr),e(Vc,h5e),e(h5e,qbr),e(Vc,Gbr),e(Vc,p5e),e(p5e,Obr),e(Vc,Xbr),e(Br,Vbr),e(Br,j6),e(j6,zbr),e(j6,_5e),e(_5e,Wbr),e(j6,Qbr),e(Br,Hbr),e(Br,Ct),g(N6,Ct,null),e(Ct,Ubr),e(Ct,u5e),e(u5e,Jbr),e(Ct,Ybr),e(Ct,zc),e(zc,Kbr),e(zc,b5e),e(b5e,Zbr),e(zc,e2r),e(zc,v5e),e(v5e,o2r),e(zc,r2r),e(Ct,t2r),e(Ct,T5e),e(T5e,a2r),e(Ct,n2r),g(q6,Ct,null),e(Br,s2r),e(Br,Ao),g(G6,Ao,null),e(Ao,l2r),e(Ao,F5e),e(F5e,i2r),e(Ao,d2r),e(Ao,En),e(En,c2r),e(En,C5e),e(C5e,f2r),e(En,m2r),e(En,M5e),e(M5e,g2r),e(En,h2r),e(En,E5e),e(E5e,p2r),e(En,_2r),e(Ao,u2r),e(Ao,yn),e(yn,HF),e(HF,y5e),e(y5e,b2r),e(HF,v2r),e(HF,sX),e(sX,T2r),e(HF,F2r),e(yn,C2r),e(yn,UF),e(UF,w5e),e(w5e,M2r),e(UF,E2r),e(UF,lX),e(lX,y2r),e(UF,w2r),e(yn,A2r),e(yn,JF),e(JF,A5e),e(A5e,L2r),e(JF,B2r),e(JF,iX),e(iX,x2r),e(JF,k2r),e(yn,R2r),e(yn,YF),e(YF,L5e),e(L5e,S2r),e(YF,P2r),e(YF,dX),e(dX,$2r),e(YF,I2r),e(Ao,D2r),e(Ao,B5e),e(B5e,j2r),e(Ao,N2r),g(O6,Ao,null),b(d,OBe,u),b(d,Wc,u),e(Wc,KF),e(KF,x5e),g(X6,x5e,null),e(Wc,q2r),e(Wc,k5e),e(k5e,G2r),b(d,XBe,u),b(d,xr,u),g(V6,xr,null),e(xr,O2r),e(xr,Qc),e(Qc,X2r),e(Qc,R5e),e(R5e,V2r),e(Qc,z2r),e(Qc,S5e),e(S5e,W2r),e(Qc,Q2r),e(xr,H2r),e(xr,z6),e(z6,U2r),e(z6,P5e),e(P5e,J2r),e(z6,Y2r),e(xr,K2r),e(xr,Mt),g(W6,Mt,null),e(Mt,Z2r),e(Mt,$5e),e($5e,evr),e(Mt,ovr),e(Mt,Hc),e(Hc,rvr),e(Hc,I5e),e(I5e,tvr),e(Hc,avr),e(Hc,D5e),e(D5e,nvr),e(Hc,svr),e(Mt,lvr),e(Mt,j5e),e(j5e,ivr),e(Mt,dvr),g(Q6,Mt,null),e(xr,cvr),e(xr,Lo),g(H6,Lo,null),e(Lo,fvr),e(Lo,N5e),e(N5e,mvr),e(Lo,gvr),e(Lo,wn),e(wn,hvr),e(wn,q5e),e(q5e,pvr),e(wn,_vr),e(wn,G5e),e(G5e,uvr),e(wn,bvr),e(wn,O5e),e(O5e,vvr),e(wn,Tvr),e(Lo,Fvr),e(Lo,fe),e(fe,ZF),e(ZF,X5e),e(X5e,Cvr),e(ZF,Mvr),e(ZF,cX),e(cX,Evr),e(ZF,yvr),e(fe,wvr),e(fe,eC),e(eC,V5e),e(V5e,Avr),e(eC,Lvr),e(eC,fX),e(fX,Bvr),e(eC,xvr),e(fe,kvr),e(fe,oC),e(oC,z5e),e(z5e,Rvr),e(oC,Svr),e(oC,mX),e(mX,Pvr),e(oC,$vr),e(fe,Ivr),e(fe,rC),e(rC,W5e),e(W5e,Dvr),e(rC,jvr),e(rC,gX),e(gX,Nvr),e(rC,qvr),e(fe,Gvr),e(fe,tC),e(tC,Q5e),e(Q5e,Ovr),e(tC,Xvr),e(tC,hX),e(hX,Vvr),e(tC,zvr),e(fe,Wvr),e(fe,aC),e(aC,H5e),e(H5e,Qvr),e(aC,Hvr),e(aC,pX),e(pX,Uvr),e(aC,Jvr),e(fe,Yvr),e(fe,nC),e(nC,U5e),e(U5e,Kvr),e(nC,Zvr),e(nC,_X),e(_X,e0r),e(nC,o0r),e(fe,r0r),e(fe,sC),e(sC,J5e),e(J5e,t0r),e(sC,a0r),e(sC,uX),e(uX,n0r),e(sC,s0r),e(fe,l0r),e(fe,lC),e(lC,Y5e),e(Y5e,i0r),e(lC,d0r),e(lC,bX),e(bX,c0r),e(lC,f0r),e(fe,m0r),e(fe,iC),e(iC,K5e),e(K5e,g0r),e(iC,h0r),e(iC,vX),e(vX,p0r),e(iC,_0r),e(fe,u0r),e(fe,dC),e(dC,Z5e),e(Z5e,b0r),e(dC,v0r),e(dC,TX),e(TX,T0r),e(dC,F0r),e(Lo,C0r),e(Lo,e1e),e(e1e,M0r),e(Lo,E0r),g(U6,Lo,null),b(d,VBe,u),b(d,Uc,u),e(Uc,cC),e(cC,o1e),g(J6,o1e,null),e(Uc,y0r),e(Uc,r1e),e(r1e,w0r),b(d,zBe,u),b(d,kr,u),g(Y6,kr,null),e(kr,A0r),e(kr,Jc),e(Jc,L0r),e(Jc,t1e),e(t1e,B0r),e(Jc,x0r),e(Jc,a1e),e(a1e,k0r),e(Jc,R0r),e(kr,S0r),e(kr,K6),e(K6,P0r),e(K6,n1e),e(n1e,$0r),e(K6,I0r),e(kr,D0r),e(kr,Et),g(Z6,Et,null),e(Et,j0r),e(Et,s1e),e(s1e,N0r),e(Et,q0r),e(Et,Yc),e(Yc,G0r),e(Yc,l1e),e(l1e,O0r),e(Yc,X0r),e(Yc,i1e),e(i1e,V0r),e(Yc,z0r),e(Et,W0r),e(Et,d1e),e(d1e,Q0r),e(Et,H0r),g(eA,Et,null),e(kr,U0r),e(kr,Bo),g(oA,Bo,null),e(Bo,J0r),e(Bo,c1e),e(c1e,Y0r),e(Bo,K0r),e(Bo,An),e(An,Z0r),e(An,f1e),e(f1e,eTr),e(An,oTr),e(An,m1e),e(m1e,rTr),e(An,tTr),e(An,g1e),e(g1e,aTr),e(An,nTr),e(Bo,sTr),e(Bo,ve),e(ve,fC),e(fC,h1e),e(h1e,lTr),e(fC,iTr),e(fC,FX),e(FX,dTr),e(fC,cTr),e(ve,fTr),e(ve,mC),e(mC,p1e),e(p1e,mTr),e(mC,gTr),e(mC,CX),e(CX,hTr),e(mC,pTr),e(ve,_Tr),e(ve,gC),e(gC,_1e),e(_1e,uTr),e(gC,bTr),e(gC,MX),e(MX,vTr),e(gC,TTr),e(ve,FTr),e(ve,hC),e(hC,u1e),e(u1e,CTr),e(hC,MTr),e(hC,EX),e(EX,ETr),e(hC,yTr),e(ve,wTr),e(ve,pC),e(pC,b1e),e(b1e,ATr),e(pC,LTr),e(pC,yX),e(yX,BTr),e(pC,xTr),e(ve,kTr),e(ve,_C),e(_C,v1e),e(v1e,RTr),e(_C,STr),e(_C,wX),e(wX,PTr),e(_C,$Tr),e(ve,ITr),e(ve,uC),e(uC,T1e),e(T1e,DTr),e(uC,jTr),e(uC,AX),e(AX,NTr),e(uC,qTr),e(ve,GTr),e(ve,bC),e(bC,F1e),e(F1e,OTr),e(bC,XTr),e(bC,LX),e(LX,VTr),e(bC,zTr),e(ve,WTr),e(ve,vC),e(vC,C1e),e(C1e,QTr),e(vC,HTr),e(vC,BX),e(BX,UTr),e(vC,JTr),e(Bo,YTr),e(Bo,M1e),e(M1e,KTr),e(Bo,ZTr),g(rA,Bo,null),b(d,WBe,u),b(d,Kc,u),e(Kc,TC),e(TC,E1e),g(tA,E1e,null),e(Kc,e7r),e(Kc,y1e),e(y1e,o7r),b(d,QBe,u),b(d,Rr,u),g(aA,Rr,null),e(Rr,r7r),e(Rr,Zc),e(Zc,t7r),e(Zc,w1e),e(w1e,a7r),e(Zc,n7r),e(Zc,A1e),e(A1e,s7r),e(Zc,l7r),e(Rr,i7r),e(Rr,nA),e(nA,d7r),e(nA,L1e),e(L1e,c7r),e(nA,f7r),e(Rr,m7r),e(Rr,yt),g(sA,yt,null),e(yt,g7r),e(yt,B1e),e(B1e,h7r),e(yt,p7r),e(yt,ef),e(ef,_7r),e(ef,x1e),e(x1e,u7r),e(ef,b7r),e(ef,k1e),e(k1e,v7r),e(ef,T7r),e(yt,F7r),e(yt,R1e),e(R1e,C7r),e(yt,M7r),g(lA,yt,null),e(Rr,E7r),e(Rr,xo),g(iA,xo,null),e(xo,y7r),e(xo,S1e),e(S1e,w7r),e(xo,A7r),e(xo,Ln),e(Ln,L7r),e(Ln,P1e),e(P1e,B7r),e(Ln,x7r),e(Ln,$1e),e($1e,k7r),e(Ln,R7r),e(Ln,I1e),e(I1e,S7r),e(Ln,P7r),e(xo,$7r),e(xo,Te),e(Te,FC),e(FC,D1e),e(D1e,I7r),e(FC,D7r),e(FC,xX),e(xX,j7r),e(FC,N7r),e(Te,q7r),e(Te,CC),e(CC,j1e),e(j1e,G7r),e(CC,O7r),e(CC,kX),e(kX,X7r),e(CC,V7r),e(Te,z7r),e(Te,MC),e(MC,N1e),e(N1e,W7r),e(MC,Q7r),e(MC,RX),e(RX,H7r),e(MC,U7r),e(Te,J7r),e(Te,EC),e(EC,q1e),e(q1e,Y7r),e(EC,K7r),e(EC,SX),e(SX,Z7r),e(EC,eFr),e(Te,oFr),e(Te,yC),e(yC,G1e),e(G1e,rFr),e(yC,tFr),e(yC,PX),e(PX,aFr),e(yC,nFr),e(Te,sFr),e(Te,wC),e(wC,O1e),e(O1e,lFr),e(wC,iFr),e(wC,$X),e($X,dFr),e(wC,cFr),e(Te,fFr),e(Te,AC),e(AC,X1e),e(X1e,mFr),e(AC,gFr),e(AC,IX),e(IX,hFr),e(AC,pFr),e(Te,_Fr),e(Te,LC),e(LC,V1e),e(V1e,uFr),e(LC,bFr),e(LC,DX),e(DX,vFr),e(LC,TFr),e(Te,FFr),e(Te,BC),e(BC,z1e),e(z1e,CFr),e(BC,MFr),e(BC,jX),e(jX,EFr),e(BC,yFr),e(xo,wFr),e(xo,W1e),e(W1e,AFr),e(xo,LFr),g(dA,xo,null),b(d,HBe,u),b(d,of,u),e(of,xC),e(xC,Q1e),g(cA,Q1e,null),e(of,BFr),e(of,H1e),e(H1e,xFr),b(d,UBe,u),b(d,Sr,u),g(fA,Sr,null),e(Sr,kFr),e(Sr,rf),e(rf,RFr),e(rf,U1e),e(U1e,SFr),e(rf,PFr),e(rf,J1e),e(J1e,$Fr),e(rf,IFr),e(Sr,DFr),e(Sr,mA),e(mA,jFr),e(mA,Y1e),e(Y1e,NFr),e(mA,qFr),e(Sr,GFr),e(Sr,wt),g(gA,wt,null),e(wt,OFr),e(wt,K1e),e(K1e,XFr),e(wt,VFr),e(wt,tf),e(tf,zFr),e(tf,Z1e),e(Z1e,WFr),e(tf,QFr),e(tf,ebe),e(ebe,HFr),e(tf,UFr),e(wt,JFr),e(wt,obe),e(obe,YFr),e(wt,KFr),g(hA,wt,null),e(Sr,ZFr),e(Sr,ko),g(pA,ko,null),e(ko,eCr),e(ko,rbe),e(rbe,oCr),e(ko,rCr),e(ko,Bn),e(Bn,tCr),e(Bn,tbe),e(tbe,aCr),e(Bn,nCr),e(Bn,abe),e(abe,sCr),e(Bn,lCr),e(Bn,nbe),e(nbe,iCr),e(Bn,dCr),e(ko,cCr),e(ko,Fe),e(Fe,kC),e(kC,sbe),e(sbe,fCr),e(kC,mCr),e(kC,NX),e(NX,gCr),e(kC,hCr),e(Fe,pCr),e(Fe,RC),e(RC,lbe),e(lbe,_Cr),e(RC,uCr),e(RC,qX),e(qX,bCr),e(RC,vCr),e(Fe,TCr),e(Fe,SC),e(SC,ibe),e(ibe,FCr),e(SC,CCr),e(SC,GX),e(GX,MCr),e(SC,ECr),e(Fe,yCr),e(Fe,PC),e(PC,dbe),e(dbe,wCr),e(PC,ACr),e(PC,OX),e(OX,LCr),e(PC,BCr),e(Fe,xCr),e(Fe,$C),e($C,cbe),e(cbe,kCr),e($C,RCr),e($C,XX),e(XX,SCr),e($C,PCr),e(Fe,$Cr),e(Fe,IC),e(IC,fbe),e(fbe,ICr),e(IC,DCr),e(IC,VX),e(VX,jCr),e(IC,NCr),e(Fe,qCr),e(Fe,DC),e(DC,mbe),e(mbe,GCr),e(DC,OCr),e(DC,zX),e(zX,XCr),e(DC,VCr),e(Fe,zCr),e(Fe,jC),e(jC,gbe),e(gbe,WCr),e(jC,QCr),e(jC,WX),e(WX,HCr),e(jC,UCr),e(Fe,JCr),e(Fe,NC),e(NC,hbe),e(hbe,YCr),e(NC,KCr),e(NC,QX),e(QX,ZCr),e(NC,e4r),e(ko,o4r),e(ko,pbe),e(pbe,r4r),e(ko,t4r),g(_A,ko,null),b(d,JBe,u),b(d,af,u),e(af,qC),e(qC,_be),g(uA,_be,null),e(af,a4r),e(af,ube),e(ube,n4r),b(d,YBe,u),b(d,Pr,u),g(bA,Pr,null),e(Pr,s4r),e(Pr,nf),e(nf,l4r),e(nf,bbe),e(bbe,i4r),e(nf,d4r),e(nf,vbe),e(vbe,c4r),e(nf,f4r),e(Pr,m4r),e(Pr,vA),e(vA,g4r),e(vA,Tbe),e(Tbe,h4r),e(vA,p4r),e(Pr,_4r),e(Pr,At),g(TA,At,null),e(At,u4r),e(At,Fbe),e(Fbe,b4r),e(At,v4r),e(At,sf),e(sf,T4r),e(sf,Cbe),e(Cbe,F4r),e(sf,C4r),e(sf,Mbe),e(Mbe,M4r),e(sf,E4r),e(At,y4r),e(At,Ebe),e(Ebe,w4r),e(At,A4r),g(FA,At,null),e(Pr,L4r),e(Pr,Ro),g(CA,Ro,null),e(Ro,B4r),e(Ro,ybe),e(ybe,x4r),e(Ro,k4r),e(Ro,xn),e(xn,R4r),e(xn,wbe),e(wbe,S4r),e(xn,P4r),e(xn,Abe),e(Abe,$4r),e(xn,I4r),e(xn,Lbe),e(Lbe,D4r),e(xn,j4r),e(Ro,N4r),e(Ro,Ce),e(Ce,GC),e(GC,Bbe),e(Bbe,q4r),e(GC,G4r),e(GC,HX),e(HX,O4r),e(GC,X4r),e(Ce,V4r),e(Ce,OC),e(OC,xbe),e(xbe,z4r),e(OC,W4r),e(OC,UX),e(UX,Q4r),e(OC,H4r),e(Ce,U4r),e(Ce,XC),e(XC,kbe),e(kbe,J4r),e(XC,Y4r),e(XC,JX),e(JX,K4r),e(XC,Z4r),e(Ce,eMr),e(Ce,VC),e(VC,Rbe),e(Rbe,oMr),e(VC,rMr),e(VC,YX),e(YX,tMr),e(VC,aMr),e(Ce,nMr),e(Ce,zC),e(zC,Sbe),e(Sbe,sMr),e(zC,lMr),e(zC,KX),e(KX,iMr),e(zC,dMr),e(Ce,cMr),e(Ce,WC),e(WC,Pbe),e(Pbe,fMr),e(WC,mMr),e(WC,ZX),e(ZX,gMr),e(WC,hMr),e(Ce,pMr),e(Ce,QC),e(QC,$be),e($be,_Mr),e(QC,uMr),e(QC,eV),e(eV,bMr),e(QC,vMr),e(Ce,TMr),e(Ce,HC),e(HC,Ibe),e(Ibe,FMr),e(HC,CMr),e(HC,oV),e(oV,MMr),e(HC,EMr),e(Ce,yMr),e(Ce,UC),e(UC,Dbe),e(Dbe,wMr),e(UC,AMr),e(UC,rV),e(rV,LMr),e(UC,BMr),e(Ro,xMr),e(Ro,jbe),e(jbe,kMr),e(Ro,RMr),g(MA,Ro,null),b(d,KBe,u),b(d,lf,u),e(lf,JC),e(JC,Nbe),g(EA,Nbe,null),e(lf,SMr),e(lf,qbe),e(qbe,PMr),b(d,ZBe,u),b(d,$r,u),g(yA,$r,null),e($r,$Mr),e($r,df),e(df,IMr),e(df,Gbe),e(Gbe,DMr),e(df,jMr),e(df,Obe),e(Obe,NMr),e(df,qMr),e($r,GMr),e($r,wA),e(wA,OMr),e(wA,Xbe),e(Xbe,XMr),e(wA,VMr),e($r,zMr),e($r,Lt),g(AA,Lt,null),e(Lt,WMr),e(Lt,Vbe),e(Vbe,QMr),e(Lt,HMr),e(Lt,cf),e(cf,UMr),e(cf,zbe),e(zbe,JMr),e(cf,YMr),e(cf,Wbe),e(Wbe,KMr),e(cf,ZMr),e(Lt,eEr),e(Lt,Qbe),e(Qbe,oEr),e(Lt,rEr),g(LA,Lt,null),e($r,tEr),e($r,So),g(BA,So,null),e(So,aEr),e(So,Hbe),e(Hbe,nEr),e(So,sEr),e(So,kn),e(kn,lEr),e(kn,Ube),e(Ube,iEr),e(kn,dEr),e(kn,Jbe),e(Jbe,cEr),e(kn,fEr),e(kn,Ybe),e(Ybe,mEr),e(kn,gEr),e(So,hEr),e(So,so),e(so,YC),e(YC,Kbe),e(Kbe,pEr),e(YC,_Er),e(YC,tV),e(tV,uEr),e(YC,bEr),e(so,vEr),e(so,KC),e(KC,Zbe),e(Zbe,TEr),e(KC,FEr),e(KC,aV),e(aV,CEr),e(KC,MEr),e(so,EEr),e(so,ZC),e(ZC,e2e),e(e2e,yEr),e(ZC,wEr),e(ZC,nV),e(nV,AEr),e(ZC,LEr),e(so,BEr),e(so,e4),e(e4,o2e),e(o2e,xEr),e(e4,kEr),e(e4,sV),e(sV,REr),e(e4,SEr),e(so,PEr),e(so,o4),e(o4,r2e),e(r2e,$Er),e(o4,IEr),e(o4,lV),e(lV,DEr),e(o4,jEr),e(so,NEr),e(so,r4),e(r4,t2e),e(t2e,qEr),e(r4,GEr),e(r4,iV),e(iV,OEr),e(r4,XEr),e(so,VEr),e(so,t4),e(t4,a2e),e(a2e,zEr),e(t4,WEr),e(t4,dV),e(dV,QEr),e(t4,HEr),e(So,UEr),e(So,n2e),e(n2e,JEr),e(So,YEr),g(xA,So,null),b(d,exe,u),b(d,ff,u),e(ff,a4),e(a4,s2e),g(kA,s2e,null),e(ff,KEr),e(ff,l2e),e(l2e,ZEr),b(d,oxe,u),b(d,Ir,u),g(RA,Ir,null),e(Ir,e3r),e(Ir,mf),e(mf,o3r),e(mf,i2e),e(i2e,r3r),e(mf,t3r),e(mf,d2e),e(d2e,a3r),e(mf,n3r),e(Ir,s3r),e(Ir,SA),e(SA,l3r),e(SA,c2e),e(c2e,i3r),e(SA,d3r),e(Ir,c3r),e(Ir,Bt),g(PA,Bt,null),e(Bt,f3r),e(Bt,f2e),e(f2e,m3r),e(Bt,g3r),e(Bt,gf),e(gf,h3r),e(gf,m2e),e(m2e,p3r),e(gf,_3r),e(gf,g2e),e(g2e,u3r),e(gf,b3r),e(Bt,v3r),e(Bt,h2e),e(h2e,T3r),e(Bt,F3r),g($A,Bt,null),e(Ir,C3r),e(Ir,Po),g(IA,Po,null),e(Po,M3r),e(Po,p2e),e(p2e,E3r),e(Po,y3r),e(Po,Rn),e(Rn,w3r),e(Rn,_2e),e(_2e,A3r),e(Rn,L3r),e(Rn,u2e),e(u2e,B3r),e(Rn,x3r),e(Rn,b2e),e(b2e,k3r),e(Rn,R3r),e(Po,S3r),e(Po,lo),e(lo,n4),e(n4,v2e),e(v2e,P3r),e(n4,$3r),e(n4,cV),e(cV,I3r),e(n4,D3r),e(lo,j3r),e(lo,s4),e(s4,T2e),e(T2e,N3r),e(s4,q3r),e(s4,fV),e(fV,G3r),e(s4,O3r),e(lo,X3r),e(lo,l4),e(l4,F2e),e(F2e,V3r),e(l4,z3r),e(l4,mV),e(mV,W3r),e(l4,Q3r),e(lo,H3r),e(lo,i4),e(i4,C2e),e(C2e,U3r),e(i4,J3r),e(i4,gV),e(gV,Y3r),e(i4,K3r),e(lo,Z3r),e(lo,d4),e(d4,M2e),e(M2e,eyr),e(d4,oyr),e(d4,hV),e(hV,ryr),e(d4,tyr),e(lo,ayr),e(lo,c4),e(c4,E2e),e(E2e,nyr),e(c4,syr),e(c4,pV),e(pV,lyr),e(c4,iyr),e(lo,dyr),e(lo,f4),e(f4,y2e),e(y2e,cyr),e(f4,fyr),e(f4,_V),e(_V,myr),e(f4,gyr),e(Po,hyr),e(Po,w2e),e(w2e,pyr),e(Po,_yr),g(DA,Po,null),b(d,rxe,u),b(d,hf,u),e(hf,m4),e(m4,A2e),g(jA,A2e,null),e(hf,uyr),e(hf,L2e),e(L2e,byr),b(d,txe,u),b(d,Dr,u),g(NA,Dr,null),e(Dr,vyr),e(Dr,pf),e(pf,Tyr),e(pf,B2e),e(B2e,Fyr),e(pf,Cyr),e(pf,x2e),e(x2e,Myr),e(pf,Eyr),e(Dr,yyr),e(Dr,qA),e(qA,wyr),e(qA,k2e),e(k2e,Ayr),e(qA,Lyr),e(Dr,Byr),e(Dr,xt),g(GA,xt,null),e(xt,xyr),e(xt,R2e),e(R2e,kyr),e(xt,Ryr),e(xt,_f),e(_f,Syr),e(_f,S2e),e(S2e,Pyr),e(_f,$yr),e(_f,P2e),e(P2e,Iyr),e(_f,Dyr),e(xt,jyr),e(xt,$2e),e($2e,Nyr),e(xt,qyr),g(OA,xt,null),e(Dr,Gyr),e(Dr,$o),g(XA,$o,null),e($o,Oyr),e($o,I2e),e(I2e,Xyr),e($o,Vyr),e($o,Sn),e(Sn,zyr),e(Sn,D2e),e(D2e,Wyr),e(Sn,Qyr),e(Sn,j2e),e(j2e,Hyr),e(Sn,Uyr),e(Sn,N2e),e(N2e,Jyr),e(Sn,Yyr),e($o,Kyr),e($o,q2e),e(q2e,g4),e(g4,G2e),e(G2e,Zyr),e(g4,ewr),e(g4,uV),e(uV,owr),e(g4,rwr),e($o,twr),e($o,O2e),e(O2e,awr),e($o,nwr),g(VA,$o,null),b(d,axe,u),b(d,uf,u),e(uf,h4),e(h4,X2e),g(zA,X2e,null),e(uf,swr),e(uf,V2e),e(V2e,lwr),b(d,nxe,u),b(d,jr,u),g(WA,jr,null),e(jr,iwr),e(jr,bf),e(bf,dwr),e(bf,z2e),e(z2e,cwr),e(bf,fwr),e(bf,W2e),e(W2e,mwr),e(bf,gwr),e(jr,hwr),e(jr,QA),e(QA,pwr),e(QA,Q2e),e(Q2e,_wr),e(QA,uwr),e(jr,bwr),e(jr,kt),g(HA,kt,null),e(kt,vwr),e(kt,H2e),e(H2e,Twr),e(kt,Fwr),e(kt,vf),e(vf,Cwr),e(vf,U2e),e(U2e,Mwr),e(vf,Ewr),e(vf,J2e),e(J2e,ywr),e(vf,wwr),e(kt,Awr),e(kt,Y2e),e(Y2e,Lwr),e(kt,Bwr),g(UA,kt,null),e(jr,xwr),e(jr,Io),g(JA,Io,null),e(Io,kwr),e(Io,K2e),e(K2e,Rwr),e(Io,Swr),e(Io,Pn),e(Pn,Pwr),e(Pn,Z2e),e(Z2e,$wr),e(Pn,Iwr),e(Pn,eve),e(eve,Dwr),e(Pn,jwr),e(Pn,ove),e(ove,Nwr),e(Pn,qwr),e(Io,Gwr),e(Io,YA),e(YA,p4),e(p4,rve),e(rve,Owr),e(p4,Xwr),e(p4,bV),e(bV,Vwr),e(p4,zwr),e(YA,Wwr),e(YA,_4),e(_4,tve),e(tve,Qwr),e(_4,Hwr),e(_4,vV),e(vV,Uwr),e(_4,Jwr),e(Io,Ywr),e(Io,ave),e(ave,Kwr),e(Io,Zwr),g(KA,Io,null),b(d,sxe,u),b(d,Tf,u),e(Tf,u4),e(u4,nve),g(ZA,nve,null),e(Tf,e6r),e(Tf,sve),e(sve,o6r),b(d,lxe,u),b(d,Nr,u),g(eL,Nr,null),e(Nr,r6r),e(Nr,Ff),e(Ff,t6r),e(Ff,lve),e(lve,a6r),e(Ff,n6r),e(Ff,ive),e(ive,s6r),e(Ff,l6r),e(Nr,i6r),e(Nr,oL),e(oL,d6r),e(oL,dve),e(dve,c6r),e(oL,f6r),e(Nr,m6r),e(Nr,Rt),g(rL,Rt,null),e(Rt,g6r),e(Rt,cve),e(cve,h6r),e(Rt,p6r),e(Rt,Cf),e(Cf,_6r),e(Cf,fve),e(fve,u6r),e(Cf,b6r),e(Cf,mve),e(mve,v6r),e(Cf,T6r),e(Rt,F6r),e(Rt,gve),e(gve,C6r),e(Rt,M6r),g(tL,Rt,null),e(Nr,E6r),e(Nr,Do),g(aL,Do,null),e(Do,y6r),e(Do,hve),e(hve,w6r),e(Do,A6r),e(Do,$n),e($n,L6r),e($n,pve),e(pve,B6r),e($n,x6r),e($n,_ve),e(_ve,k6r),e($n,R6r),e($n,uve),e(uve,S6r),e($n,P6r),e(Do,$6r),e(Do,bve),e(bve,b4),e(b4,vve),e(vve,I6r),e(b4,D6r),e(b4,TV),e(TV,j6r),e(b4,N6r),e(Do,q6r),e(Do,Tve),e(Tve,G6r),e(Do,O6r),g(nL,Do,null),ixe=!0},p(d,[u]){const sL={};u&2&&(sL.$$scope={dirty:u,ctx:d}),Bf.$set(sL);const Fve={};u&2&&(Fve.$$scope={dirty:u,ctx:d}),ch.$set(Fve);const Cve={};u&2&&(Cve.$$scope={dirty:u,ctx:d}),Fh.$set(Cve)},i(d){ixe||(h(ce.$$.fragment,d),h($a.$$.fragment,d),h(CM.$$.fragment,d),h(MM.$$.fragment,d),h(Bf.$$.fragment,d),h(EM.$$.fragment,d),h(yM.$$.fragment,d),h(LM.$$.fragment,d),h(BM.$$.fragment,d),h(xM.$$.fragment,d),h(kM.$$.fragment,d),h(RM.$$.fragment,d),h($M.$$.fragment,d),h(IM.$$.fragment,d),h(DM.$$.fragment,d),h(jM.$$.fragment,d),h(NM.$$.fragment,d),h(OM.$$.fragment,d),h(ch.$$.fragment,d),h(XM.$$.fragment,d),h(VM.$$.fragment,d),h(zM.$$.fragment,d),h(WM.$$.fragment,d),h(UM.$$.fragment,d),h(Fh.$$.fragment,d),h(JM.$$.fragment,d),h(YM.$$.fragment,d),h(KM.$$.fragment,d),h(ZM.$$.fragment,d),h(oE.$$.fragment,d),h(rE.$$.fragment,d),h(tE.$$.fragment,d),h(aE.$$.fragment,d),h(nE.$$.fragment,d),h(sE.$$.fragment,d),h(iE.$$.fragment,d),h(dE.$$.fragment,d),h(cE.$$.fragment,d),h(fE.$$.fragment,d),h(mE.$$.fragment,d),h(gE.$$.fragment,d),h(pE.$$.fragment,d),h(_E.$$.fragment,d),h(uE.$$.fragment,d),h(bE.$$.fragment,d),h(vE.$$.fragment,d),h(TE.$$.fragment,d),h(CE.$$.fragment,d),h(ME.$$.fragment,d),h(EE.$$.fragment,d),h(yE.$$.fragment,d),h(wE.$$.fragment,d),h(AE.$$.fragment,d),h(BE.$$.fragment,d),h(xE.$$.fragment,d),h(kE.$$.fragment,d),h(RE.$$.fragment,d),h(SE.$$.fragment,d),h(PE.$$.fragment,d),h(IE.$$.fragment,d),h(DE.$$.fragment,d),h(jE.$$.fragment,d),h(NE.$$.fragment,d),h(qE.$$.fragment,d),h(GE.$$.fragment,d),h(XE.$$.fragment,d),h(VE.$$.fragment,d),h(zE.$$.fragment,d),h(WE.$$.fragment,d),h(QE.$$.fragment,d),h(HE.$$.fragment,d),h(JE.$$.fragment,d),h(YE.$$.fragment,d),h(KE.$$.fragment,d),h(ZE.$$.fragment,d),h(e3.$$.fragment,d),h(o3.$$.fragment,d),h(t3.$$.fragment,d),h(a3.$$.fragment,d),h(n3.$$.fragment,d),h(s3.$$.fragment,d),h(l3.$$.fragment,d),h(i3.$$.fragment,d),h(c3.$$.fragment,d),h(f3.$$.fragment,d),h(m3.$$.fragment,d),h(g3.$$.fragment,d),h(h3.$$.fragment,d),h(p3.$$.fragment,d),h(u3.$$.fragment,d),h(b3.$$.fragment,d),h(v3.$$.fragment,d),h(T3.$$.fragment,d),h(F3.$$.fragment,d),h(C3.$$.fragment,d),h(E3.$$.fragment,d),h(y3.$$.fragment,d),h(w3.$$.fragment,d),h(A3.$$.fragment,d),h(L3.$$.fragment,d),h(B3.$$.fragment,d),h(k3.$$.fragment,d),h(R3.$$.fragment,d),h(S3.$$.fragment,d),h(P3.$$.fragment,d),h($3.$$.fragment,d),h(I3.$$.fragment,d),h(j3.$$.fragment,d),h(N3.$$.fragment,d),h(q3.$$.fragment,d),h(G3.$$.fragment,d),h(O3.$$.fragment,d),h(X3.$$.fragment,d),h(z3.$$.fragment,d),h(W3.$$.fragment,d),h(Q3.$$.fragment,d),h(H3.$$.fragment,d),h(U3.$$.fragment,d),h(J3.$$.fragment,d),h(K3.$$.fragment,d),h(Z3.$$.fragment,d),h(ey.$$.fragment,d),h(oy.$$.fragment,d),h(ry.$$.fragment,d),h(ty.$$.fragment,d),h(ny.$$.fragment,d),h(sy.$$.fragment,d),h(ly.$$.fragment,d),h(dy.$$.fragment,d),h(cy.$$.fragment,d),h(fy.$$.fragment,d),h(gy.$$.fragment,d),h(hy.$$.fragment,d),h(py.$$.fragment,d),h(_y.$$.fragment,d),h(uy.$$.fragment,d),h(by.$$.fragment,d),h(Ty.$$.fragment,d),h(Fy.$$.fragment,d),h(Cy.$$.fragment,d),h(My.$$.fragment,d),h(Ey.$$.fragment,d),h(yy.$$.fragment,d),h(Ay.$$.fragment,d),h(Ly.$$.fragment,d),h(By.$$.fragment,d),h(xy.$$.fragment,d),h(ky.$$.fragment,d),h(Ry.$$.fragment,d),h(Py.$$.fragment,d),h($y.$$.fragment,d),h(Iy.$$.fragment,d),h(Dy.$$.fragment,d),h(jy.$$.fragment,d),h(Ny.$$.fragment,d),h(Gy.$$.fragment,d),h(Oy.$$.fragment,d),h(Xy.$$.fragment,d),h(zy.$$.fragment,d),h(Wy.$$.fragment,d),h(Qy.$$.fragment,d),h(Uy.$$.fragment,d),h(Jy.$$.fragment,d),h(Yy.$$.fragment,d),h(Ky.$$.fragment,d),h(Zy.$$.fragment,d),h(ew.$$.fragment,d),h(rw.$$.fragment,d),h(tw.$$.fragment,d),h(aw.$$.fragment,d),h(nw.$$.fragment,d),h(sw.$$.fragment,d),h(lw.$$.fragment,d),h(dw.$$.fragment,d),h(cw.$$.fragment,d),h(fw.$$.fragment,d),h(mw.$$.fragment,d),h(gw.$$.fragment,d),h(hw.$$.fragment,d),h(_w.$$.fragment,d),h(uw.$$.fragment,d),h(bw.$$.fragment,d),h(vw.$$.fragment,d),h(Tw.$$.fragment,d),h(Fw.$$.fragment,d),h(Mw.$$.fragment,d),h(Ew.$$.fragment,d),h(yw.$$.fragment,d),h(ww.$$.fragment,d),h(Aw.$$.fragment,d),h(Lw.$$.fragment,d),h(xw.$$.fragment,d),h(kw.$$.fragment,d),h(Rw.$$.fragment,d),h(Sw.$$.fragment,d),h(Pw.$$.fragment,d),h($w.$$.fragment,d),h(Dw.$$.fragment,d),h(jw.$$.fragment,d),h(Nw.$$.fragment,d),h(qw.$$.fragment,d),h(Gw.$$.fragment,d),h(Ow.$$.fragment,d),h(Vw.$$.fragment,d),h(zw.$$.fragment,d),h(Ww.$$.fragment,d),h(Qw.$$.fragment,d),h(Hw.$$.fragment,d),h(Uw.$$.fragment,d),h(Yw.$$.fragment,d),h(Kw.$$.fragment,d),h(Zw.$$.fragment,d),h(e6.$$.fragment,d),h(o6.$$.fragment,d),h(r6.$$.fragment,d),h(a6.$$.fragment,d),h(n6.$$.fragment,d),h(s6.$$.fragment,d),h(l6.$$.fragment,d),h(i6.$$.fragment,d),h(d6.$$.fragment,d),h(f6.$$.fragment,d),h(m6.$$.fragment,d),h(g6.$$.fragment,d),h(h6.$$.fragment,d),h(p6.$$.fragment,d),h(_6.$$.fragment,d),h(b6.$$.fragment,d),h(v6.$$.fragment,d),h(T6.$$.fragment,d),h(F6.$$.fragment,d),h(C6.$$.fragment,d),h(M6.$$.fragment,d),h(y6.$$.fragment,d),h(w6.$$.fragment,d),h(A6.$$.fragment,d),h(L6.$$.fragment,d),h(B6.$$.fragment,d),h(x6.$$.fragment,d),h(R6.$$.fragment,d),h(S6.$$.fragment,d),h(P6.$$.fragment,d),h($6.$$.fragment,d),h(I6.$$.fragment,d),h(D6.$$.fragment,d),h(N6.$$.fragment,d),h(q6.$$.fragment,d),h(G6.$$.fragment,d),h(O6.$$.fragment,d),h(X6.$$.fragment,d),h(V6.$$.fragment,d),h(W6.$$.fragment,d),h(Q6.$$.fragment,d),h(H6.$$.fragment,d),h(U6.$$.fragment,d),h(J6.$$.fragment,d),h(Y6.$$.fragment,d),h(Z6.$$.fragment,d),h(eA.$$.fragment,d),h(oA.$$.fragment,d),h(rA.$$.fragment,d),h(tA.$$.fragment,d),h(aA.$$.fragment,d),h(sA.$$.fragment,d),h(lA.$$.fragment,d),h(iA.$$.fragment,d),h(dA.$$.fragment,d),h(cA.$$.fragment,d),h(fA.$$.fragment,d),h(gA.$$.fragment,d),h(hA.$$.fragment,d),h(pA.$$.fragment,d),h(_A.$$.fragment,d),h(uA.$$.fragment,d),h(bA.$$.fragment,d),h(TA.$$.fragment,d),h(FA.$$.fragment,d),h(CA.$$.fragment,d),h(MA.$$.fragment,d),h(EA.$$.fragment,d),h(yA.$$.fragment,d),h(AA.$$.fragment,d),h(LA.$$.fragment,d),h(BA.$$.fragment,d),h(xA.$$.fragment,d),h(kA.$$.fragment,d),h(RA.$$.fragment,d),h(PA.$$.fragment,d),h($A.$$.fragment,d),h(IA.$$.fragment,d),h(DA.$$.fragment,d),h(jA.$$.fragment,d),h(NA.$$.fragment,d),h(GA.$$.fragment,d),h(OA.$$.fragment,d),h(XA.$$.fragment,d),h(VA.$$.fragment,d),h(zA.$$.fragment,d),h(WA.$$.fragment,d),h(HA.$$.fragment,d),h(UA.$$.fragment,d),h(JA.$$.fragment,d),h(KA.$$.fragment,d),h(ZA.$$.fragment,d),h(eL.$$.fragment,d),h(rL.$$.fragment,d),h(tL.$$.fragment,d),h(aL.$$.fragment,d),h(nL.$$.fragment,d),ixe=!0)},o(d){p(ce.$$.fragment,d),p($a.$$.fragment,d),p(CM.$$.fragment,d),p(MM.$$.fragment,d),p(Bf.$$.fragment,d),p(EM.$$.fragment,d),p(yM.$$.fragment,d),p(LM.$$.fragment,d),p(BM.$$.fragment,d),p(xM.$$.fragment,d),p(kM.$$.fragment,d),p(RM.$$.fragment,d),p($M.$$.fragment,d),p(IM.$$.fragment,d),p(DM.$$.fragment,d),p(jM.$$.fragment,d),p(NM.$$.fragment,d),p(OM.$$.fragment,d),p(ch.$$.fragment,d),p(XM.$$.fragment,d),p(VM.$$.fragment,d),p(zM.$$.fragment,d),p(WM.$$.fragment,d),p(UM.$$.fragment,d),p(Fh.$$.fragment,d),p(JM.$$.fragment,d),p(YM.$$.fragment,d),p(KM.$$.fragment,d),p(ZM.$$.fragment,d),p(oE.$$.fragment,d),p(rE.$$.fragment,d),p(tE.$$.fragment,d),p(aE.$$.fragment,d),p(nE.$$.fragment,d),p(sE.$$.fragment,d),p(iE.$$.fragment,d),p(dE.$$.fragment,d),p(cE.$$.fragment,d),p(fE.$$.fragment,d),p(mE.$$.fragment,d),p(gE.$$.fragment,d),p(pE.$$.fragment,d),p(_E.$$.fragment,d),p(uE.$$.fragment,d),p(bE.$$.fragment,d),p(vE.$$.fragment,d),p(TE.$$.fragment,d),p(CE.$$.fragment,d),p(ME.$$.fragment,d),p(EE.$$.fragment,d),p(yE.$$.fragment,d),p(wE.$$.fragment,d),p(AE.$$.fragment,d),p(BE.$$.fragment,d),p(xE.$$.fragment,d),p(kE.$$.fragment,d),p(RE.$$.fragment,d),p(SE.$$.fragment,d),p(PE.$$.fragment,d),p(IE.$$.fragment,d),p(DE.$$.fragment,d),p(jE.$$.fragment,d),p(NE.$$.fragment,d),p(qE.$$.fragment,d),p(GE.$$.fragment,d),p(XE.$$.fragment,d),p(VE.$$.fragment,d),p(zE.$$.fragment,d),p(WE.$$.fragment,d),p(QE.$$.fragment,d),p(HE.$$.fragment,d),p(JE.$$.fragment,d),p(YE.$$.fragment,d),p(KE.$$.fragment,d),p(ZE.$$.fragment,d),p(e3.$$.fragment,d),p(o3.$$.fragment,d),p(t3.$$.fragment,d),p(a3.$$.fragment,d),p(n3.$$.fragment,d),p(s3.$$.fragment,d),p(l3.$$.fragment,d),p(i3.$$.fragment,d),p(c3.$$.fragment,d),p(f3.$$.fragment,d),p(m3.$$.fragment,d),p(g3.$$.fragment,d),p(h3.$$.fragment,d),p(p3.$$.fragment,d),p(u3.$$.fragment,d),p(b3.$$.fragment,d),p(v3.$$.fragment,d),p(T3.$$.fragment,d),p(F3.$$.fragment,d),p(C3.$$.fragment,d),p(E3.$$.fragment,d),p(y3.$$.fragment,d),p(w3.$$.fragment,d),p(A3.$$.fragment,d),p(L3.$$.fragment,d),p(B3.$$.fragment,d),p(k3.$$.fragment,d),p(R3.$$.fragment,d),p(S3.$$.fragment,d),p(P3.$$.fragment,d),p($3.$$.fragment,d),p(I3.$$.fragment,d),p(j3.$$.fragment,d),p(N3.$$.fragment,d),p(q3.$$.fragment,d),p(G3.$$.fragment,d),p(O3.$$.fragment,d),p(X3.$$.fragment,d),p(z3.$$.fragment,d),p(W3.$$.fragment,d),p(Q3.$$.fragment,d),p(H3.$$.fragment,d),p(U3.$$.fragment,d),p(J3.$$.fragment,d),p(K3.$$.fragment,d),p(Z3.$$.fragment,d),p(ey.$$.fragment,d),p(oy.$$.fragment,d),p(ry.$$.fragment,d),p(ty.$$.fragment,d),p(ny.$$.fragment,d),p(sy.$$.fragment,d),p(ly.$$.fragment,d),p(dy.$$.fragment,d),p(cy.$$.fragment,d),p(fy.$$.fragment,d),p(gy.$$.fragment,d),p(hy.$$.fragment,d),p(py.$$.fragment,d),p(_y.$$.fragment,d),p(uy.$$.fragment,d),p(by.$$.fragment,d),p(Ty.$$.fragment,d),p(Fy.$$.fragment,d),p(Cy.$$.fragment,d),p(My.$$.fragment,d),p(Ey.$$.fragment,d),p(yy.$$.fragment,d),p(Ay.$$.fragment,d),p(Ly.$$.fragment,d),p(By.$$.fragment,d),p(xy.$$.fragment,d),p(ky.$$.fragment,d),p(Ry.$$.fragment,d),p(Py.$$.fragment,d),p($y.$$.fragment,d),p(Iy.$$.fragment,d),p(Dy.$$.fragment,d),p(jy.$$.fragment,d),p(Ny.$$.fragment,d),p(Gy.$$.fragment,d),p(Oy.$$.fragment,d),p(Xy.$$.fragment,d),p(zy.$$.fragment,d),p(Wy.$$.fragment,d),p(Qy.$$.fragment,d),p(Uy.$$.fragment,d),p(Jy.$$.fragment,d),p(Yy.$$.fragment,d),p(Ky.$$.fragment,d),p(Zy.$$.fragment,d),p(ew.$$.fragment,d),p(rw.$$.fragment,d),p(tw.$$.fragment,d),p(aw.$$.fragment,d),p(nw.$$.fragment,d),p(sw.$$.fragment,d),p(lw.$$.fragment,d),p(dw.$$.fragment,d),p(cw.$$.fragment,d),p(fw.$$.fragment,d),p(mw.$$.fragment,d),p(gw.$$.fragment,d),p(hw.$$.fragment,d),p(_w.$$.fragment,d),p(uw.$$.fragment,d),p(bw.$$.fragment,d),p(vw.$$.fragment,d),p(Tw.$$.fragment,d),p(Fw.$$.fragment,d),p(Mw.$$.fragment,d),p(Ew.$$.fragment,d),p(yw.$$.fragment,d),p(ww.$$.fragment,d),p(Aw.$$.fragment,d),p(Lw.$$.fragment,d),p(xw.$$.fragment,d),p(kw.$$.fragment,d),p(Rw.$$.fragment,d),p(Sw.$$.fragment,d),p(Pw.$$.fragment,d),p($w.$$.fragment,d),p(Dw.$$.fragment,d),p(jw.$$.fragment,d),p(Nw.$$.fragment,d),p(qw.$$.fragment,d),p(Gw.$$.fragment,d),p(Ow.$$.fragment,d),p(Vw.$$.fragment,d),p(zw.$$.fragment,d),p(Ww.$$.fragment,d),p(Qw.$$.fragment,d),p(Hw.$$.fragment,d),p(Uw.$$.fragment,d),p(Yw.$$.fragment,d),p(Kw.$$.fragment,d),p(Zw.$$.fragment,d),p(e6.$$.fragment,d),p(o6.$$.fragment,d),p(r6.$$.fragment,d),p(a6.$$.fragment,d),p(n6.$$.fragment,d),p(s6.$$.fragment,d),p(l6.$$.fragment,d),p(i6.$$.fragment,d),p(d6.$$.fragment,d),p(f6.$$.fragment,d),p(m6.$$.fragment,d),p(g6.$$.fragment,d),p(h6.$$.fragment,d),p(p6.$$.fragment,d),p(_6.$$.fragment,d),p(b6.$$.fragment,d),p(v6.$$.fragment,d),p(T6.$$.fragment,d),p(F6.$$.fragment,d),p(C6.$$.fragment,d),p(M6.$$.fragment,d),p(y6.$$.fragment,d),p(w6.$$.fragment,d),p(A6.$$.fragment,d),p(L6.$$.fragment,d),p(B6.$$.fragment,d),p(x6.$$.fragment,d),p(R6.$$.fragment,d),p(S6.$$.fragment,d),p(P6.$$.fragment,d),p($6.$$.fragment,d),p(I6.$$.fragment,d),p(D6.$$.fragment,d),p(N6.$$.fragment,d),p(q6.$$.fragment,d),p(G6.$$.fragment,d),p(O6.$$.fragment,d),p(X6.$$.fragment,d),p(V6.$$.fragment,d),p(W6.$$.fragment,d),p(Q6.$$.fragment,d),p(H6.$$.fragment,d),p(U6.$$.fragment,d),p(J6.$$.fragment,d),p(Y6.$$.fragment,d),p(Z6.$$.fragment,d),p(eA.$$.fragment,d),p(oA.$$.fragment,d),p(rA.$$.fragment,d),p(tA.$$.fragment,d),p(aA.$$.fragment,d),p(sA.$$.fragment,d),p(lA.$$.fragment,d),p(iA.$$.fragment,d),p(dA.$$.fragment,d),p(cA.$$.fragment,d),p(fA.$$.fragment,d),p(gA.$$.fragment,d),p(hA.$$.fragment,d),p(pA.$$.fragment,d),p(_A.$$.fragment,d),p(uA.$$.fragment,d),p(bA.$$.fragment,d),p(TA.$$.fragment,d),p(FA.$$.fragment,d),p(CA.$$.fragment,d),p(MA.$$.fragment,d),p(EA.$$.fragment,d),p(yA.$$.fragment,d),p(AA.$$.fragment,d),p(LA.$$.fragment,d),p(BA.$$.fragment,d),p(xA.$$.fragment,d),p(kA.$$.fragment,d),p(RA.$$.fragment,d),p(PA.$$.fragment,d),p($A.$$.fragment,d),p(IA.$$.fragment,d),p(DA.$$.fragment,d),p(jA.$$.fragment,d),p(NA.$$.fragment,d),p(GA.$$.fragment,d),p(OA.$$.fragment,d),p(XA.$$.fragment,d),p(VA.$$.fragment,d),p(zA.$$.fragment,d),p(WA.$$.fragment,d),p(HA.$$.fragment,d),p(UA.$$.fragment,d),p(JA.$$.fragment,d),p(KA.$$.fragment,d),p(ZA.$$.fragment,d),p(eL.$$.fragment,d),p(rL.$$.fragment,d),p(tL.$$.fragment,d),p(aL.$$.fragment,d),p(nL.$$.fragment,d),ixe=!1},d(d){t(J),d&&t(Be),d&&t(ie),_(ce),d&&t(Ef),d&&t(sa),d&&t(ye),d&&t(io),d&&t(wf),_($a,d),d&&t(co),d&&t(ge),d&&t(Oo),d&&t(Ia),d&&t(d9e),d&&t($i),_(CM),d&&t(c9e),d&&t(qn),d&&t(f9e),_(MM,d),d&&t(m9e),d&&t(l8),d&&t(g9e),_(Bf,d),d&&t(h9e),d&&t(Ii),_(EM),d&&t(p9e),d&&t(Xo),_(yM),_(LM),_(BM),_(xM),d&&t(_9e),d&&t(ji),_(kM),d&&t(u9e),d&&t(Vo),_(RM),_($M),_(IM),_(DM),d&&t(b9e),d&&t(Ni),_(jM),d&&t(v9e),d&&t(zo),_(NM),_(OM),_(ch),_(XM),_(VM),d&&t(T9e),d&&t(qi),_(zM),d&&t(F9e),d&&t(Wo),_(WM),_(UM),_(Fh),_(JM),_(YM),d&&t(C9e),d&&t(Oi),_(KM),d&&t(M9e),d&&t(Qo),_(ZM),_(oE),_(rE),_(tE),_(aE),d&&t(E9e),d&&t(zi),_(nE),d&&t(y9e),d&&t(Ho),_(sE),_(iE),_(dE),_(cE),_(fE),d&&t(w9e),d&&t(Hi),_(mE),d&&t(A9e),d&&t(Uo),_(gE),_(pE),_(_E),_(uE),_(bE),d&&t(L9e),d&&t(Yi),_(vE),d&&t(B9e),d&&t(Jo),_(TE),_(CE),_(ME),_(EE),_(yE),d&&t(x9e),d&&t(ed),_(wE),d&&t(k9e),d&&t(Yo),_(AE),_(BE),_(xE),_(kE),_(RE),d&&t(R9e),d&&t(td),_(SE),d&&t(S9e),d&&t(Ko),_(PE),_(IE),_(DE),_(jE),_(NE),d&&t(P9e),d&&t(sd),_(qE),d&&t($9e),d&&t(Zo),_(GE),_(XE),_(VE),_(zE),_(WE),d&&t(I9e),d&&t(dd),_(QE),d&&t(D9e),d&&t(er),_(HE),_(JE),_(YE),_(KE),_(ZE),d&&t(j9e),d&&t(md),_(e3),d&&t(N9e),d&&t(or),_(o3),_(t3),_(a3),_(n3),_(s3),d&&t(q9e),d&&t(pd),_(l3),d&&t(G9e),d&&t(rr),_(i3),_(c3),_(f3),_(m3),_(g3),d&&t(O9e),d&&t(bd),_(h3),d&&t(X9e),d&&t(tr),_(p3),_(u3),_(b3),_(v3),_(T3),d&&t(V9e),d&&t(Fd),_(F3),d&&t(z9e),d&&t(ar),_(C3),_(E3),_(y3),_(w3),_(A3),d&&t(W9e),d&&t(Ed),_(L3),d&&t(Q9e),d&&t(nr),_(B3),_(k3),_(R3),_(S3),_(P3),d&&t(H9e),d&&t(Ad),_($3),d&&t(U9e),d&&t(sr),_(I3),_(j3),_(N3),_(q3),_(G3),d&&t(J9e),d&&t(xd),_(O3),d&&t(Y9e),d&&t(lr),_(X3),_(z3),_(W3),_(Q3),_(H3),d&&t(K9e),d&&t(Sd),_(U3),d&&t(Z9e),d&&t(ir),_(J3),_(K3),_(Z3),_(ey),_(oy),d&&t(eBe),d&&t(Id),_(ry),d&&t(oBe),d&&t(dr),_(ty),_(ny),_(sy),_(ly),_(dy),d&&t(rBe),d&&t(Nd),_(cy),d&&t(tBe),d&&t(cr),_(fy),_(gy),_(hy),_(py),_(_y),d&&t(aBe),d&&t(Od),_(uy),d&&t(nBe),d&&t(fr),_(by),_(Ty),_(Fy),_(Cy),_(My),d&&t(sBe),d&&t(Wd),_(Ey),d&&t(lBe),d&&t(mr),_(yy),_(Ay),_(Ly),_(By),_(xy),d&&t(iBe),d&&t(Ud),_(ky),d&&t(dBe),d&&t(gr),_(Ry),_(Py),_($y),_(Iy),_(Dy),d&&t(cBe),d&&t(Kd),_(jy),d&&t(fBe),d&&t(hr),_(Ny),_(Gy),_(Oy),_(Xy),_(zy),d&&t(mBe),d&&t(oc),_(Wy),d&&t(gBe),d&&t(pr),_(Qy),_(Uy),_(Jy),_(Yy),_(Ky),d&&t(hBe),d&&t(ac),_(Zy),d&&t(pBe),d&&t(_r),_(ew),_(rw),_(tw),_(aw),_(nw),d&&t(_Be),d&&t(lc),_(sw),d&&t(uBe),d&&t(ur),_(lw),_(dw),_(cw),_(fw),_(mw),d&&t(bBe),d&&t(cc),_(gw),d&&t(vBe),d&&t(br),_(hw),_(_w),_(uw),_(bw),_(vw),d&&t(TBe),d&&t(gc),_(Tw),d&&t(FBe),d&&t(vr),_(Fw),_(Mw),_(Ew),_(yw),_(ww),d&&t(CBe),d&&t(_c),_(Aw),d&&t(MBe),d&&t(Tr),_(Lw),_(xw),_(kw),_(Rw),_(Sw),d&&t(EBe),d&&t(vc),_(Pw),d&&t(yBe),d&&t(Fr),_($w),_(Dw),_(jw),_(Nw),_(qw),d&&t(wBe),d&&t(Cc),_(Gw),d&&t(ABe),d&&t(Cr),_(Ow),_(Vw),_(zw),_(Ww),_(Qw),d&&t(LBe),d&&t(yc),_(Hw),d&&t(BBe),d&&t(Mr),_(Uw),_(Yw),_(Kw),_(Zw),_(e6),d&&t(xBe),d&&t(Lc),_(o6),d&&t(kBe),d&&t(Er),_(r6),_(a6),_(n6),_(s6),_(l6),d&&t(RBe),d&&t(kc),_(i6),d&&t(SBe),d&&t(yr),_(d6),_(f6),_(m6),_(g6),_(h6),d&&t(PBe),d&&t(Pc),_(p6),d&&t($Be),d&&t(wr),_(_6),_(b6),_(v6),_(T6),_(F6),d&&t(IBe),d&&t(Dc),_(C6),d&&t(DBe),d&&t(Ar),_(M6),_(y6),_(w6),_(A6),_(L6),d&&t(jBe),d&&t(qc),_(B6),d&&t(NBe),d&&t(Lr),_(x6),_(R6),_(S6),_(P6),_($6),d&&t(qBe),d&&t(Xc),_(I6),d&&t(GBe),d&&t(Br),_(D6),_(N6),_(q6),_(G6),_(O6),d&&t(OBe),d&&t(Wc),_(X6),d&&t(XBe),d&&t(xr),_(V6),_(W6),_(Q6),_(H6),_(U6),d&&t(VBe),d&&t(Uc),_(J6),d&&t(zBe),d&&t(kr),_(Y6),_(Z6),_(eA),_(oA),_(rA),d&&t(WBe),d&&t(Kc),_(tA),d&&t(QBe),d&&t(Rr),_(aA),_(sA),_(lA),_(iA),_(dA),d&&t(HBe),d&&t(of),_(cA),d&&t(UBe),d&&t(Sr),_(fA),_(gA),_(hA),_(pA),_(_A),d&&t(JBe),d&&t(af),_(uA),d&&t(YBe),d&&t(Pr),_(bA),_(TA),_(FA),_(CA),_(MA),d&&t(KBe),d&&t(lf),_(EA),d&&t(ZBe),d&&t($r),_(yA),_(AA),_(LA),_(BA),_(xA),d&&t(exe),d&&t(ff),_(kA),d&&t(oxe),d&&t(Ir),_(RA),_(PA),_($A),_(IA),_(DA),d&&t(rxe),d&&t(hf),_(jA),d&&t(txe),d&&t(Dr),_(NA),_(GA),_(OA),_(XA),_(VA),d&&t(axe),d&&t(uf),_(zA),d&&t(nxe),d&&t(jr),_(WA),_(HA),_(UA),_(JA),_(KA),d&&t(sxe),d&&t(Tf),_(ZA),d&&t(lxe),d&&t(Nr),_(eL),_(rL),_(tL),_(aL),_(nL)}}}const L1t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function B1t(Ai,J,Be){let{fw:ie}=J;return Ai.$$set=me=>{"fw"in me&&Be(0,ie=me.fw)},[ie]}class I1t extends T1t{constructor(J){super();F1t(this,J,B1t,A1t,C1t,{fw:0})}}export{I1t as default,L1t as metadata};
