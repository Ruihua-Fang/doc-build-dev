import{S as Rbt,i as Sbt,s as Pbt,e as a,k as l,w as f,t as o,M as $bt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-4833417e.js";import{T as VAr}from"../../chunks/Tip-fffd6df1.js";import{D as E}from"../../chunks/Docstring-44c5af16.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as V}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function Ibt(Ai){let J,xe,de,me,no,ce,be,Go,Li,Ef,sa,Bi,xi,EM,yf,we,io,ki,In,yM,Dn,jn,wM,Ri,Nn,AM,Si,wf,$a;return{c(){J=a("p"),xe=o("If your "),de=a("code"),me=o("NewModelConfig"),no=o(" is a subclass of "),ce=a("code"),be=o("PretrainedConfig"),Go=o(`, make sure its
`),Li=a("code"),Ef=o("model_type"),sa=o(" attribute is set to the same key you use when registering the config (here "),Bi=a("code"),xi=o('"new-model"'),EM=o(")."),yf=l(),we=a("p"),io=o("Likewise, if your "),ki=a("code"),In=o("NewModel"),yM=o(" is a subclass of "),Dn=a("a"),jn=o("PreTrainedModel"),wM=o(`, make sure its
`),Ri=a("code"),Nn=o("config_class"),AM=o(` attribute is set to the same class you use when registering the model (here
`),Si=a("code"),wf=o("NewModelConfig"),$a=o(")."),this.h()},l(co){J=n(co,"P",{});var ge=s(J);xe=r(ge,"If your "),de=n(ge,"CODE",{});var d8=s(de);me=r(d8,"NewModelConfig"),d8.forEach(t),no=r(ge," is a subclass of "),ce=n(ge,"CODE",{});var Pi=s(ce);be=r(Pi,"PretrainedConfig"),Pi.forEach(t),Go=r(ge,`, make sure its
`),Li=n(ge,"CODE",{});var c8=s(Li);Ef=r(c8,"model_type"),c8.forEach(t),sa=r(ge," attribute is set to the same key you use when registering the config (here "),Bi=n(ge,"CODE",{});var f8=s(Bi);xi=r(f8,'"new-model"'),f8.forEach(t),EM=r(ge,")."),ge.forEach(t),yf=i(co),we=n(co,"P",{});var Oo=s(we);io=r(Oo,"Likewise, if your "),ki=n(Oo,"CODE",{});var Ia=s(ki);In=r(Ia,"NewModel"),Ia.forEach(t),yM=r(Oo," is a subclass of "),Dn=n(Oo,"A",{href:!0});var m8=s(Dn);jn=r(m8,"PreTrainedModel"),m8.forEach(t),wM=r(Oo,`, make sure its
`),Ri=n(Oo,"CODE",{});var Af=s(Ri);Nn=r(Af,"config_class"),Af.forEach(t),AM=r(Oo,` attribute is set to the same class you use when registering the model (here
`),Si=n(Oo,"CODE",{});var g8=s(Si);wf=r(g8,"NewModelConfig"),g8.forEach(t),$a=r(Oo,")."),Oo.forEach(t),this.h()},h(){d(Dn,"href","/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel")},m(co,ge){b(co,J,ge),e(J,xe),e(J,de),e(de,me),e(J,no),e(J,ce),e(ce,be),e(J,Go),e(J,Li),e(Li,Ef),e(J,sa),e(J,Bi),e(Bi,xi),e(J,EM),b(co,yf,ge),b(co,we,ge),e(we,io),e(we,ki),e(ki,In),e(we,yM),e(we,Dn),e(Dn,jn),e(we,wM),e(we,Ri),e(Ri,Nn),e(we,AM),e(we,Si),e(Si,wf),e(we,$a)},d(co){co&&t(J),co&&t(yf),co&&t(we)}}}function Dbt(Ai){let J,xe,de,me,no;return{c(){J=a("p"),xe=o("Passing "),de=a("code"),me=o("use_auth_token=True"),no=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var be=s(J);xe=r(be,"Passing "),de=n(be,"CODE",{});var Go=s(de);me=r(Go,"use_auth_token=True"),Go.forEach(t),no=r(be," is required when you want to use a private model."),be.forEach(t)},m(ce,be){b(ce,J,be),e(J,xe),e(J,de),e(de,me),e(J,no)},d(ce){ce&&t(J)}}}function jbt(Ai){let J,xe,de,me,no;return{c(){J=a("p"),xe=o("Passing "),de=a("code"),me=o("use_auth_token=True"),no=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var be=s(J);xe=r(be,"Passing "),de=n(be,"CODE",{});var Go=s(de);me=r(Go,"use_auth_token=True"),Go.forEach(t),no=r(be," is required when you want to use a private model."),be.forEach(t)},m(ce,be){b(ce,J,be),e(J,xe),e(J,de),e(de,me),e(J,no)},d(ce){ce&&t(J)}}}function Nbt(Ai){let J,xe,de,me,no,ce,be,Go,Li,Ef,sa,Bi,xi,EM,yf,we,io,ki,In,yM,Dn,jn,wM,Ri,Nn,AM,Si,wf,$a,co,ge,d8,Pi,c8,f8,Oo,Ia,m8,Af,g8,XRe,S9e,$i,Lf,EW,LM,VRe,yW,zRe,P9e,qn,WRe,wW,QRe,HRe,AW,URe,JRe,$9e,BM,I9e,h8,YRe,D9e,Bf,j9e,Ii,xf,LW,xM,KRe,BW,ZRe,N9e,Xo,kM,eSe,RM,oSe,p8,rSe,tSe,aSe,SM,nSe,xW,sSe,lSe,iSe,fo,PM,dSe,kW,cSe,fSe,Di,mSe,RW,gSe,hSe,SW,pSe,_Se,uSe,v,kf,PW,bSe,vSe,_8,TSe,FSe,CSe,Rf,$W,MSe,ESe,u8,ySe,wSe,ASe,Sf,IW,LSe,BSe,b8,xSe,kSe,RSe,Pf,DW,SSe,PSe,v8,$Se,ISe,DSe,$f,jW,jSe,NSe,T8,qSe,GSe,OSe,If,NW,XSe,VSe,F8,zSe,WSe,QSe,Df,qW,HSe,USe,C8,JSe,YSe,KSe,jf,GW,ZSe,ePe,M8,oPe,rPe,tPe,Nf,OW,aPe,nPe,E8,sPe,lPe,iPe,qf,XW,dPe,cPe,y8,fPe,mPe,gPe,Gf,VW,hPe,pPe,w8,_Pe,uPe,bPe,Of,zW,vPe,TPe,A8,FPe,CPe,MPe,Xf,WW,EPe,yPe,L8,wPe,APe,LPe,Vf,QW,BPe,xPe,B8,kPe,RPe,SPe,zf,HW,PPe,$Pe,x8,IPe,DPe,jPe,Wf,UW,NPe,qPe,k8,GPe,OPe,XPe,Qf,JW,VPe,zPe,R8,WPe,QPe,HPe,Hf,YW,UPe,JPe,S8,YPe,KPe,ZPe,Uf,KW,e$e,o$e,P8,r$e,t$e,a$e,Jf,ZW,n$e,s$e,$8,l$e,i$e,d$e,Yf,eQ,c$e,f$e,I8,m$e,g$e,h$e,Kf,oQ,p$e,_$e,D8,u$e,b$e,v$e,Zf,rQ,T$e,F$e,j8,C$e,M$e,E$e,em,tQ,y$e,w$e,N8,A$e,L$e,B$e,om,aQ,x$e,k$e,q8,R$e,S$e,P$e,rm,nQ,$$e,I$e,G8,D$e,j$e,N$e,tm,sQ,q$e,G$e,O8,O$e,X$e,V$e,am,lQ,z$e,W$e,X8,Q$e,H$e,U$e,nm,iQ,J$e,Y$e,V8,K$e,Z$e,eIe,sm,dQ,oIe,rIe,z8,tIe,aIe,nIe,lm,cQ,sIe,lIe,W8,iIe,dIe,cIe,im,fQ,fIe,mIe,Q8,gIe,hIe,pIe,dm,mQ,_Ie,uIe,H8,bIe,vIe,TIe,cm,gQ,FIe,CIe,U8,MIe,EIe,yIe,fm,hQ,wIe,AIe,J8,LIe,BIe,xIe,mm,pQ,kIe,RIe,Y8,SIe,PIe,$Ie,gm,_Q,IIe,DIe,K8,jIe,NIe,qIe,hm,uQ,GIe,OIe,Z8,XIe,VIe,zIe,pm,bQ,WIe,QIe,e9,HIe,UIe,JIe,_m,vQ,YIe,KIe,o9,ZIe,eDe,oDe,um,TQ,rDe,tDe,r9,aDe,nDe,sDe,bm,FQ,lDe,iDe,t9,dDe,cDe,fDe,vm,CQ,mDe,gDe,a9,hDe,pDe,_De,Tm,MQ,uDe,bDe,n9,vDe,TDe,FDe,Fm,EQ,CDe,MDe,s9,EDe,yDe,wDe,Cm,yQ,ADe,LDe,l9,BDe,xDe,kDe,Mm,wQ,RDe,SDe,i9,PDe,$De,IDe,Em,AQ,DDe,jDe,d9,NDe,qDe,GDe,ym,LQ,ODe,XDe,c9,VDe,zDe,WDe,wm,BQ,QDe,HDe,f9,UDe,JDe,YDe,Am,xQ,KDe,ZDe,m9,eje,oje,rje,Lm,kQ,tje,aje,g9,nje,sje,lje,Bm,RQ,ije,dje,h9,cje,fje,mje,xm,SQ,gje,hje,p9,pje,_je,uje,km,PQ,bje,vje,_9,Tje,Fje,Cje,Rm,$Q,Mje,Eje,u9,yje,wje,Aje,Sm,IQ,Lje,Bje,b9,xje,kje,Rje,Pm,DQ,Sje,Pje,v9,$je,Ije,Dje,$m,jQ,jje,Nje,T9,qje,Gje,Oje,Im,NQ,Xje,Vje,F9,zje,Wje,Qje,Dm,qQ,Hje,Uje,C9,Jje,Yje,Kje,jm,GQ,Zje,eNe,M9,oNe,rNe,tNe,Nm,OQ,aNe,nNe,E9,sNe,lNe,iNe,qm,XQ,dNe,cNe,y9,fNe,mNe,gNe,Gm,VQ,hNe,pNe,w9,_Ne,uNe,bNe,Om,zQ,vNe,TNe,A9,FNe,CNe,MNe,Xm,WQ,ENe,yNe,L9,wNe,ANe,LNe,Vm,QQ,BNe,xNe,B9,kNe,RNe,SNe,zm,HQ,PNe,$Ne,x9,INe,DNe,jNe,Wm,UQ,NNe,qNe,k9,GNe,ONe,XNe,Qm,JQ,VNe,zNe,R9,WNe,QNe,HNe,Hm,YQ,UNe,JNe,S9,YNe,KNe,ZNe,Um,KQ,eqe,oqe,P9,rqe,tqe,aqe,Jm,ZQ,nqe,sqe,$9,lqe,iqe,dqe,Ym,eH,cqe,fqe,I9,mqe,gqe,hqe,Km,oH,pqe,_qe,D9,uqe,bqe,vqe,Zm,rH,Tqe,Fqe,j9,Cqe,Mqe,Eqe,eg,tH,yqe,wqe,N9,Aqe,Lqe,Bqe,og,aH,xqe,kqe,q9,Rqe,Sqe,Pqe,rg,nH,$qe,Iqe,G9,Dqe,jqe,Nqe,tg,sH,qqe,Gqe,O9,Oqe,Xqe,Vqe,ag,lH,zqe,Wqe,X9,Qqe,Hqe,Uqe,ng,iH,Jqe,Yqe,V9,Kqe,Zqe,eGe,sg,dH,oGe,rGe,z9,tGe,aGe,nGe,lg,cH,sGe,lGe,W9,iGe,dGe,cGe,ig,fH,fGe,mGe,Q9,gGe,hGe,pGe,dg,mH,_Ge,uGe,H9,bGe,vGe,TGe,cg,gH,FGe,CGe,U9,MGe,EGe,yGe,fg,hH,wGe,AGe,J9,LGe,BGe,xGe,mg,pH,kGe,RGe,Y9,SGe,PGe,$Ge,gg,_H,IGe,DGe,K9,jGe,NGe,qGe,hg,uH,GGe,OGe,Z9,XGe,VGe,zGe,pg,bH,WGe,QGe,eB,HGe,UGe,JGe,_g,vH,YGe,KGe,oB,ZGe,eOe,oOe,TH,rOe,tOe,$M,aOe,ug,IM,nOe,FH,sOe,q9e,ji,bg,CH,DM,lOe,MH,iOe,G9e,Vo,jM,dOe,NM,cOe,rB,fOe,mOe,gOe,qM,hOe,EH,pOe,_Oe,uOe,mo,GM,bOe,yH,vOe,TOe,Da,FOe,wH,COe,MOe,AH,EOe,yOe,LH,wOe,AOe,LOe,M,Gn,BH,BOe,xOe,tB,kOe,ROe,aB,SOe,POe,$Oe,On,xH,IOe,DOe,nB,jOe,NOe,sB,qOe,GOe,OOe,Xn,kH,XOe,VOe,lB,zOe,WOe,iB,QOe,HOe,UOe,vg,RH,JOe,YOe,dB,KOe,ZOe,eXe,Vn,SH,oXe,rXe,cB,tXe,aXe,fB,nXe,sXe,lXe,Tg,PH,iXe,dXe,mB,cXe,fXe,mXe,Fg,$H,gXe,hXe,gB,pXe,_Xe,uXe,Cg,IH,bXe,vXe,hB,TXe,FXe,CXe,zn,DH,MXe,EXe,pB,yXe,wXe,_B,AXe,LXe,BXe,Wn,jH,xXe,kXe,uB,RXe,SXe,bB,PXe,$Xe,IXe,Qn,NH,DXe,jXe,vB,NXe,qXe,TB,GXe,OXe,XXe,Mg,qH,VXe,zXe,FB,WXe,QXe,HXe,Eg,GH,UXe,JXe,CB,YXe,KXe,ZXe,Hn,OH,eVe,oVe,MB,rVe,tVe,EB,aVe,nVe,sVe,yg,XH,lVe,iVe,yB,dVe,cVe,fVe,Un,VH,mVe,gVe,wB,hVe,pVe,AB,_Ve,uVe,bVe,Jn,zH,vVe,TVe,LB,FVe,CVe,BB,MVe,EVe,yVe,Yn,WH,wVe,AVe,xB,LVe,BVe,QH,xVe,kVe,RVe,wg,HH,SVe,PVe,kB,$Ve,IVe,DVe,Kn,UH,jVe,NVe,RB,qVe,GVe,SB,OVe,XVe,VVe,Ag,JH,zVe,WVe,PB,QVe,HVe,UVe,Zn,YH,JVe,YVe,$B,KVe,ZVe,IB,eze,oze,rze,es,KH,tze,aze,DB,nze,sze,jB,lze,ize,dze,os,ZH,cze,fze,NB,mze,gze,qB,hze,pze,_ze,Lg,eU,uze,bze,GB,vze,Tze,Fze,rs,oU,Cze,Mze,OB,Eze,yze,XB,wze,Aze,Lze,Bg,rU,Bze,xze,VB,kze,Rze,Sze,ts,tU,Pze,$ze,zB,Ize,Dze,WB,jze,Nze,qze,as,aU,Gze,Oze,QB,Xze,Vze,HB,zze,Wze,Qze,ns,nU,Hze,Uze,UB,Jze,Yze,JB,Kze,Zze,eWe,ss,sU,oWe,rWe,YB,tWe,aWe,KB,nWe,sWe,lWe,xg,lU,iWe,dWe,ZB,cWe,fWe,mWe,ls,iU,gWe,hWe,ex,pWe,_We,ox,uWe,bWe,vWe,is,dU,TWe,FWe,rx,CWe,MWe,tx,EWe,yWe,wWe,ds,cU,AWe,LWe,ax,BWe,xWe,nx,kWe,RWe,SWe,cs,fU,PWe,$We,sx,IWe,DWe,lx,jWe,NWe,qWe,fs,mU,GWe,OWe,ix,XWe,VWe,dx,zWe,WWe,QWe,ms,gU,HWe,UWe,cx,JWe,YWe,fx,KWe,ZWe,eQe,kg,hU,oQe,rQe,mx,tQe,aQe,nQe,gs,pU,sQe,lQe,gx,iQe,dQe,hx,cQe,fQe,mQe,Rg,_U,gQe,hQe,px,pQe,_Qe,uQe,Sg,uU,bQe,vQe,_x,TQe,FQe,CQe,hs,bU,MQe,EQe,ux,yQe,wQe,bx,AQe,LQe,BQe,ps,vU,xQe,kQe,vx,RQe,SQe,Tx,PQe,$Qe,IQe,Pg,TU,DQe,jQe,Fx,NQe,qQe,GQe,_s,FU,OQe,XQe,Cx,VQe,zQe,Mx,WQe,QQe,HQe,us,CU,UQe,JQe,Ex,YQe,KQe,yx,ZQe,eHe,oHe,bs,MU,rHe,tHe,wx,aHe,nHe,Ax,sHe,lHe,iHe,vs,EU,dHe,cHe,Lx,fHe,mHe,Bx,gHe,hHe,pHe,Ts,yU,_He,uHe,xx,bHe,vHe,kx,THe,FHe,CHe,$g,wU,MHe,EHe,Rx,yHe,wHe,AHe,Ig,AU,LHe,BHe,Sx,xHe,kHe,RHe,Dg,LU,SHe,PHe,Px,$He,IHe,DHe,jg,BU,jHe,NHe,$x,qHe,GHe,OHe,Fs,xU,XHe,VHe,Ix,zHe,WHe,Dx,QHe,HHe,UHe,Ng,kU,JHe,YHe,jx,KHe,ZHe,eUe,Cs,RU,oUe,rUe,Nx,tUe,aUe,qx,nUe,sUe,lUe,Ms,SU,iUe,dUe,Gx,cUe,fUe,Ox,mUe,gUe,hUe,Es,PU,pUe,_Ue,Xx,uUe,bUe,Vx,vUe,TUe,FUe,ys,$U,CUe,MUe,zx,EUe,yUe,Wx,wUe,AUe,LUe,ws,IU,BUe,xUe,Qx,kUe,RUe,Hx,SUe,PUe,$Ue,qg,DU,IUe,DUe,Ux,jUe,NUe,qUe,Gg,jU,GUe,OUe,Jx,XUe,VUe,zUe,As,NU,WUe,QUe,Yx,HUe,UUe,Kx,JUe,YUe,KUe,Ls,qU,ZUe,eJe,Zx,oJe,rJe,ek,tJe,aJe,nJe,Bs,GU,sJe,lJe,ok,iJe,dJe,rk,cJe,fJe,mJe,Og,OU,gJe,hJe,tk,pJe,_Je,uJe,Xg,XU,bJe,vJe,ak,TJe,FJe,CJe,Vg,VU,MJe,EJe,nk,yJe,wJe,AJe,zg,zU,LJe,BJe,sk,xJe,kJe,RJe,xs,WU,SJe,PJe,lk,$Je,IJe,ik,DJe,jJe,NJe,Wg,QU,qJe,GJe,dk,OJe,XJe,VJe,Qg,HU,zJe,WJe,ck,QJe,HJe,UJe,ks,UU,JJe,YJe,fk,KJe,ZJe,mk,eYe,oYe,rYe,Rs,JU,tYe,aYe,gk,nYe,sYe,hk,lYe,iYe,dYe,YU,cYe,fYe,OM,mYe,Hg,XM,gYe,KU,hYe,O9e,Ni,Ug,ZU,VM,pYe,eJ,_Ye,X9e,zo,zM,uYe,WM,bYe,pk,vYe,TYe,FYe,QM,CYe,oJ,MYe,EYe,yYe,ke,HM,wYe,rJ,AYe,LYe,ja,BYe,tJ,xYe,kYe,aJ,RYe,SYe,nJ,PYe,$Ye,IYe,ae,Jg,sJ,DYe,jYe,_k,NYe,qYe,GYe,Yg,lJ,OYe,XYe,uk,VYe,zYe,WYe,Kg,iJ,QYe,HYe,bk,UYe,JYe,YYe,Zg,dJ,KYe,ZYe,vk,eKe,oKe,rKe,eh,cJ,tKe,aKe,Tk,nKe,sKe,lKe,oh,fJ,iKe,dKe,Fk,cKe,fKe,mKe,rh,mJ,gKe,hKe,Ck,pKe,_Ke,uKe,th,gJ,bKe,vKe,Mk,TKe,FKe,CKe,ah,hJ,MKe,EKe,Ek,yKe,wKe,AKe,nh,pJ,LKe,BKe,yk,xKe,kKe,RKe,sh,_J,SKe,PKe,wk,$Ke,IKe,DKe,lh,uJ,jKe,NKe,Ak,qKe,GKe,OKe,ih,bJ,XKe,VKe,Lk,zKe,WKe,QKe,dh,vJ,HKe,UKe,Bk,JKe,YKe,KKe,ch,TJ,ZKe,eZe,xk,oZe,rZe,tZe,fh,FJ,aZe,nZe,kk,sZe,lZe,iZe,mh,dZe,CJ,cZe,fZe,UM,mZe,gh,JM,gZe,MJ,hZe,V9e,qi,hh,EJ,YM,pZe,yJ,_Ze,z9e,Wo,KM,uZe,ZM,bZe,Rk,vZe,TZe,FZe,eE,CZe,wJ,MZe,EZe,yZe,Re,oE,wZe,AJ,AZe,LZe,Gi,BZe,LJ,xZe,kZe,BJ,RZe,SZe,PZe,Ae,ph,xJ,$Ze,IZe,Sk,DZe,jZe,NZe,_h,kJ,qZe,GZe,Pk,OZe,XZe,VZe,uh,RJ,zZe,WZe,$k,QZe,HZe,UZe,bh,SJ,JZe,YZe,Ik,KZe,ZZe,eeo,vh,PJ,oeo,reo,Dk,teo,aeo,neo,Th,$J,seo,leo,jk,ieo,deo,ceo,Fh,IJ,feo,meo,Nk,geo,heo,peo,Ch,DJ,_eo,ueo,qk,beo,veo,Teo,Mh,Feo,jJ,Ceo,Meo,rE,Eeo,Eh,tE,yeo,NJ,weo,W9e,Oi,yh,qJ,aE,Aeo,GJ,Leo,Q9e,Qo,nE,Beo,Xi,xeo,OJ,keo,Reo,XJ,Seo,Peo,$eo,sE,Ieo,VJ,Deo,jeo,Neo,qr,lE,qeo,zJ,Geo,Oeo,Vi,Xeo,WJ,Veo,zeo,QJ,Weo,Qeo,Heo,HJ,Ueo,Jeo,iE,Yeo,Se,dE,Keo,UJ,Zeo,eoo,Na,ooo,JJ,roo,too,YJ,aoo,noo,KJ,soo,loo,ioo,F,wh,ZJ,doo,coo,Gk,foo,moo,goo,Ah,eY,hoo,poo,Ok,_oo,uoo,boo,Lh,oY,voo,Too,Xk,Foo,Coo,Moo,Bh,rY,Eoo,yoo,Vk,woo,Aoo,Loo,xh,tY,Boo,xoo,zk,koo,Roo,Soo,kh,aY,Poo,$oo,Wk,Ioo,Doo,joo,Rh,nY,Noo,qoo,Qk,Goo,Ooo,Xoo,Sh,sY,Voo,zoo,Hk,Woo,Qoo,Hoo,Ph,lY,Uoo,Joo,Uk,Yoo,Koo,Zoo,$h,iY,ero,oro,Jk,rro,tro,aro,Ih,dY,nro,sro,Yk,lro,iro,dro,Dh,cY,cro,fro,Kk,mro,gro,hro,jh,fY,pro,_ro,Zk,uro,bro,vro,Nh,mY,Tro,Fro,eR,Cro,Mro,Ero,qh,gY,yro,wro,oR,Aro,Lro,Bro,Gh,hY,xro,kro,rR,Rro,Sro,Pro,Oh,pY,$ro,Iro,tR,Dro,jro,Nro,Xh,_Y,qro,Gro,aR,Oro,Xro,Vro,Vh,uY,zro,Wro,nR,Qro,Hro,Uro,zh,bY,Jro,Yro,sR,Kro,Zro,eto,Wh,vY,oto,rto,lR,tto,ato,nto,Qh,TY,sto,lto,iR,ito,dto,cto,Hh,FY,fto,mto,dR,gto,hto,pto,Uh,CY,_to,uto,cR,bto,vto,Tto,Jh,MY,Fto,Cto,fR,Mto,Eto,yto,Yh,EY,wto,Ato,mR,Lto,Bto,xto,Kh,yY,kto,Rto,gR,Sto,Pto,$to,Ss,wY,Ito,Dto,hR,jto,Nto,pR,qto,Gto,Oto,Zh,AY,Xto,Vto,_R,zto,Wto,Qto,ep,LY,Hto,Uto,uR,Jto,Yto,Kto,op,BY,Zto,eao,bR,oao,rao,tao,rp,xY,aao,nao,vR,sao,lao,iao,tp,kY,dao,cao,TR,fao,mao,gao,ap,RY,hao,pao,FR,_ao,uao,bao,np,SY,vao,Tao,CR,Fao,Cao,Mao,sp,PY,Eao,yao,MR,wao,Aao,Lao,lp,$Y,Bao,xao,ER,kao,Rao,Sao,ip,IY,Pao,$ao,yR,Iao,Dao,jao,dp,DY,Nao,qao,wR,Gao,Oao,Xao,cp,jY,Vao,zao,AR,Wao,Qao,Hao,fp,NY,Uao,Jao,LR,Yao,Kao,Zao,mp,qY,eno,ono,BR,rno,tno,ano,gp,GY,nno,sno,xR,lno,ino,dno,hp,OY,cno,fno,kR,mno,gno,hno,pp,XY,pno,_no,RR,uno,bno,vno,_p,VY,Tno,Fno,SR,Cno,Mno,Eno,up,zY,yno,wno,PR,Ano,Lno,Bno,bp,WY,xno,kno,$R,Rno,Sno,Pno,vp,QY,$no,Ino,IR,Dno,jno,Nno,Tp,HY,qno,Gno,DR,Ono,Xno,Vno,Fp,UY,zno,Wno,jR,Qno,Hno,Uno,Cp,JY,Jno,Yno,NR,Kno,Zno,eso,Mp,YY,oso,rso,qR,tso,aso,nso,Ep,KY,sso,lso,GR,iso,dso,cso,yp,ZY,fso,mso,OR,gso,hso,pso,wp,eK,_so,uso,XR,bso,vso,Tso,Ap,oK,Fso,Cso,VR,Mso,Eso,yso,Lp,rK,wso,Aso,zR,Lso,Bso,xso,Bp,tK,kso,Rso,WR,Sso,Pso,$so,xp,aK,Iso,Dso,QR,jso,Nso,qso,kp,nK,Gso,Oso,HR,Xso,Vso,zso,Rp,sK,Wso,Qso,UR,Hso,Uso,Jso,Sp,lK,Yso,Kso,JR,Zso,elo,olo,Pp,iK,rlo,tlo,YR,alo,nlo,slo,$p,dK,llo,ilo,KR,dlo,clo,flo,Ip,cK,mlo,glo,ZR,hlo,plo,_lo,Dp,fK,ulo,blo,eS,vlo,Tlo,Flo,jp,mK,Clo,Mlo,oS,Elo,ylo,wlo,Np,gK,Alo,Llo,rS,Blo,xlo,klo,qp,hK,Rlo,Slo,tS,Plo,$lo,Ilo,Gp,pK,Dlo,jlo,aS,Nlo,qlo,Glo,Op,_K,Olo,Xlo,nS,Vlo,zlo,Wlo,Xp,uK,Qlo,Hlo,sS,Ulo,Jlo,Ylo,Vp,bK,Klo,Zlo,lS,eio,oio,rio,zp,vK,tio,aio,iS,nio,sio,lio,Wp,TK,iio,dio,dS,cio,fio,mio,Qp,FK,gio,hio,cS,pio,_io,uio,Hp,CK,bio,vio,fS,Tio,Fio,Cio,Up,MK,Mio,Eio,mS,yio,wio,Aio,Jp,EK,Lio,Bio,gS,xio,kio,Rio,Yp,yK,Sio,Pio,hS,$io,Iio,Dio,Kp,wK,jio,Nio,pS,qio,Gio,Oio,Zp,AK,Xio,Vio,_S,zio,Wio,Qio,e_,LK,Hio,Uio,uS,Jio,Yio,Kio,o_,BK,Zio,edo,bS,odo,rdo,tdo,r_,xK,ado,ndo,vS,sdo,ldo,ido,t_,kK,ddo,cdo,TS,fdo,mdo,gdo,a_,hdo,RK,pdo,_do,SK,udo,bdo,PK,vdo,Tdo,cE,H9e,zi,n_,$K,fE,Fdo,IK,Cdo,U9e,Ho,mE,Mdo,Wi,Edo,DK,ydo,wdo,jK,Ado,Ldo,Bdo,gE,xdo,NK,kdo,Rdo,Sdo,Gr,hE,Pdo,qK,$do,Ido,Qi,Ddo,GK,jdo,Ndo,OK,qdo,Gdo,Odo,XK,Xdo,Vdo,pE,zdo,Pe,_E,Wdo,VK,Qdo,Hdo,qa,Udo,zK,Jdo,Ydo,WK,Kdo,Zdo,QK,eco,oco,rco,k,s_,HK,tco,aco,FS,nco,sco,lco,l_,UK,ico,dco,CS,cco,fco,mco,i_,JK,gco,hco,MS,pco,_co,uco,d_,YK,bco,vco,ES,Tco,Fco,Cco,c_,KK,Mco,Eco,yS,yco,wco,Aco,f_,ZK,Lco,Bco,wS,xco,kco,Rco,m_,eZ,Sco,Pco,AS,$co,Ico,Dco,g_,oZ,jco,Nco,LS,qco,Gco,Oco,h_,rZ,Xco,Vco,BS,zco,Wco,Qco,p_,tZ,Hco,Uco,xS,Jco,Yco,Kco,__,aZ,Zco,efo,kS,ofo,rfo,tfo,u_,nZ,afo,nfo,RS,sfo,lfo,ifo,b_,sZ,dfo,cfo,SS,ffo,mfo,gfo,v_,lZ,hfo,pfo,PS,_fo,ufo,bfo,T_,iZ,vfo,Tfo,$S,Ffo,Cfo,Mfo,F_,dZ,Efo,yfo,IS,wfo,Afo,Lfo,C_,cZ,Bfo,xfo,DS,kfo,Rfo,Sfo,M_,fZ,Pfo,$fo,jS,Ifo,Dfo,jfo,E_,mZ,Nfo,qfo,NS,Gfo,Ofo,Xfo,y_,gZ,Vfo,zfo,qS,Wfo,Qfo,Hfo,w_,hZ,Ufo,Jfo,GS,Yfo,Kfo,Zfo,A_,pZ,emo,omo,OS,rmo,tmo,amo,L_,_Z,nmo,smo,XS,lmo,imo,dmo,B_,uZ,cmo,fmo,VS,mmo,gmo,hmo,x_,bZ,pmo,_mo,zS,umo,bmo,vmo,k_,vZ,Tmo,Fmo,WS,Cmo,Mmo,Emo,R_,TZ,ymo,wmo,QS,Amo,Lmo,Bmo,S_,FZ,xmo,kmo,HS,Rmo,Smo,Pmo,P_,CZ,$mo,Imo,US,Dmo,jmo,Nmo,$_,MZ,qmo,Gmo,JS,Omo,Xmo,Vmo,I_,EZ,zmo,Wmo,YS,Qmo,Hmo,Umo,D_,yZ,Jmo,Ymo,KS,Kmo,Zmo,ego,j_,wZ,ogo,rgo,ZS,tgo,ago,ngo,N_,AZ,sgo,lgo,eP,igo,dgo,cgo,q_,LZ,fgo,mgo,oP,ggo,hgo,pgo,G_,BZ,_go,ugo,rP,bgo,vgo,Tgo,O_,xZ,Fgo,Cgo,tP,Mgo,Ego,ygo,X_,kZ,wgo,Ago,aP,Lgo,Bgo,xgo,V_,RZ,kgo,Rgo,nP,Sgo,Pgo,$go,z_,Igo,SZ,Dgo,jgo,PZ,Ngo,qgo,$Z,Ggo,Ogo,uE,J9e,Hi,W_,IZ,bE,Xgo,DZ,Vgo,Y9e,Uo,vE,zgo,Ui,Wgo,jZ,Qgo,Hgo,NZ,Ugo,Jgo,Ygo,TE,Kgo,qZ,Zgo,eho,oho,Or,FE,rho,GZ,tho,aho,Ji,nho,OZ,sho,lho,XZ,iho,dho,cho,VZ,fho,mho,CE,gho,$e,ME,hho,zZ,pho,_ho,Ga,uho,WZ,bho,vho,QZ,Tho,Fho,HZ,Cho,Mho,Eho,$,Q_,UZ,yho,who,sP,Aho,Lho,Bho,H_,JZ,xho,kho,lP,Rho,Sho,Pho,U_,YZ,$ho,Iho,iP,Dho,jho,Nho,J_,KZ,qho,Gho,dP,Oho,Xho,Vho,Y_,ZZ,zho,Who,cP,Qho,Hho,Uho,K_,eee,Jho,Yho,fP,Kho,Zho,epo,Z_,oee,opo,rpo,mP,tpo,apo,npo,eu,ree,spo,lpo,gP,ipo,dpo,cpo,ou,tee,fpo,mpo,hP,gpo,hpo,ppo,ru,aee,_po,upo,pP,bpo,vpo,Tpo,tu,nee,Fpo,Cpo,_P,Mpo,Epo,ypo,au,see,wpo,Apo,uP,Lpo,Bpo,xpo,nu,lee,kpo,Rpo,bP,Spo,Ppo,$po,su,iee,Ipo,Dpo,vP,jpo,Npo,qpo,lu,dee,Gpo,Opo,TP,Xpo,Vpo,zpo,iu,cee,Wpo,Qpo,FP,Hpo,Upo,Jpo,du,fee,Ypo,Kpo,CP,Zpo,e_o,o_o,cu,mee,r_o,t_o,MP,a_o,n_o,s_o,fu,gee,l_o,i_o,EP,d_o,c_o,f_o,mu,hee,m_o,g_o,yP,h_o,p_o,__o,gu,pee,u_o,b_o,wP,v_o,T_o,F_o,hu,_ee,C_o,M_o,AP,E_o,y_o,w_o,pu,uee,A_o,L_o,LP,B_o,x_o,k_o,_u,bee,R_o,S_o,BP,P_o,$_o,I_o,uu,vee,D_o,j_o,xP,N_o,q_o,G_o,bu,Tee,O_o,X_o,kP,V_o,z_o,W_o,vu,Fee,Q_o,H_o,RP,U_o,J_o,Y_o,Tu,Cee,K_o,Z_o,SP,euo,ouo,ruo,Fu,Mee,tuo,auo,PP,nuo,suo,luo,Cu,Eee,iuo,duo,$P,cuo,fuo,muo,Mu,yee,guo,huo,IP,puo,_uo,uuo,Eu,wee,buo,vuo,DP,Tuo,Fuo,Cuo,yu,Aee,Muo,Euo,jP,yuo,wuo,Auo,wu,Lee,Luo,Buo,NP,xuo,kuo,Ruo,Au,Bee,Suo,Puo,qP,$uo,Iuo,Duo,Lu,juo,xee,Nuo,quo,kee,Guo,Ouo,Ree,Xuo,Vuo,EE,K9e,Yi,Bu,See,yE,zuo,Pee,Wuo,Z9e,Jo,wE,Quo,Ki,Huo,$ee,Uuo,Juo,Iee,Yuo,Kuo,Zuo,AE,e1o,Dee,o1o,r1o,t1o,Xr,LE,a1o,jee,n1o,s1o,Zi,l1o,Nee,i1o,d1o,qee,c1o,f1o,m1o,Gee,g1o,h1o,BE,p1o,Ie,xE,_1o,Oee,u1o,b1o,Oa,v1o,Xee,T1o,F1o,Vee,C1o,M1o,zee,E1o,y1o,w1o,I,xu,Wee,A1o,L1o,GP,B1o,x1o,k1o,ku,Qee,R1o,S1o,OP,P1o,$1o,I1o,Ru,Hee,D1o,j1o,XP,N1o,q1o,G1o,Su,Uee,O1o,X1o,VP,V1o,z1o,W1o,Pu,Jee,Q1o,H1o,zP,U1o,J1o,Y1o,$u,Yee,K1o,Z1o,WP,e7o,o7o,r7o,Iu,Kee,t7o,a7o,QP,n7o,s7o,l7o,Du,Zee,i7o,d7o,HP,c7o,f7o,m7o,ju,eoe,g7o,h7o,UP,p7o,_7o,u7o,Nu,ooe,b7o,v7o,JP,T7o,F7o,C7o,qu,roe,M7o,E7o,YP,y7o,w7o,A7o,Gu,toe,L7o,B7o,KP,x7o,k7o,R7o,Ou,aoe,S7o,P7o,ZP,$7o,I7o,D7o,Xu,noe,j7o,N7o,e$,q7o,G7o,O7o,Vu,soe,X7o,V7o,o$,z7o,W7o,Q7o,zu,loe,H7o,U7o,r$,J7o,Y7o,K7o,Wu,ioe,Z7o,ebo,t$,obo,rbo,tbo,Qu,doe,abo,nbo,a$,sbo,lbo,ibo,Hu,coe,dbo,cbo,n$,fbo,mbo,gbo,Uu,foe,hbo,pbo,s$,_bo,ubo,bbo,Ju,moe,vbo,Tbo,l$,Fbo,Cbo,Mbo,Yu,goe,Ebo,ybo,i$,wbo,Abo,Lbo,Ku,hoe,Bbo,xbo,d$,kbo,Rbo,Sbo,Zu,poe,Pbo,$bo,c$,Ibo,Dbo,jbo,e1,_oe,Nbo,qbo,f$,Gbo,Obo,Xbo,o1,uoe,Vbo,zbo,m$,Wbo,Qbo,Hbo,r1,boe,Ubo,Jbo,g$,Ybo,Kbo,Zbo,t1,voe,e5o,o5o,h$,r5o,t5o,a5o,a1,Toe,n5o,s5o,p$,l5o,i5o,d5o,n1,Foe,c5o,f5o,_$,m5o,g5o,h5o,s1,Coe,p5o,_5o,Moe,u5o,b5o,v5o,l1,Eoe,T5o,F5o,u$,C5o,M5o,E5o,i1,yoe,y5o,w5o,b$,A5o,L5o,B5o,d1,woe,x5o,k5o,v$,R5o,S5o,P5o,c1,Aoe,$5o,I5o,T$,D5o,j5o,N5o,f1,q5o,Loe,G5o,O5o,Boe,X5o,V5o,xoe,z5o,W5o,kE,eBe,ed,m1,koe,RE,Q5o,Roe,H5o,oBe,Yo,SE,U5o,od,J5o,Soe,Y5o,K5o,Poe,Z5o,e2o,o2o,PE,r2o,$oe,t2o,a2o,n2o,Vr,$E,s2o,Ioe,l2o,i2o,rd,d2o,Doe,c2o,f2o,joe,m2o,g2o,h2o,Noe,p2o,_2o,IE,u2o,De,DE,b2o,qoe,v2o,T2o,Xa,F2o,Goe,C2o,M2o,Ooe,E2o,y2o,Xoe,w2o,A2o,L2o,ne,g1,Voe,B2o,x2o,F$,k2o,R2o,S2o,h1,zoe,P2o,$2o,C$,I2o,D2o,j2o,p1,Woe,N2o,q2o,M$,G2o,O2o,X2o,_1,Qoe,V2o,z2o,E$,W2o,Q2o,H2o,u1,Hoe,U2o,J2o,y$,Y2o,K2o,Z2o,b1,Uoe,evo,ovo,w$,rvo,tvo,avo,v1,Joe,nvo,svo,A$,lvo,ivo,dvo,T1,Yoe,cvo,fvo,L$,mvo,gvo,hvo,F1,Koe,pvo,_vo,B$,uvo,bvo,vvo,C1,Zoe,Tvo,Fvo,x$,Cvo,Mvo,Evo,M1,ere,yvo,wvo,k$,Avo,Lvo,Bvo,E1,ore,xvo,kvo,R$,Rvo,Svo,Pvo,y1,rre,$vo,Ivo,S$,Dvo,jvo,Nvo,w1,tre,qvo,Gvo,P$,Ovo,Xvo,Vvo,A1,are,zvo,Wvo,$$,Qvo,Hvo,Uvo,L1,nre,Jvo,Yvo,I$,Kvo,Zvo,e0o,B1,o0o,sre,r0o,t0o,lre,a0o,n0o,ire,s0o,l0o,jE,rBe,td,x1,dre,NE,i0o,cre,d0o,tBe,Ko,qE,c0o,ad,f0o,fre,m0o,g0o,mre,h0o,p0o,_0o,GE,u0o,gre,b0o,v0o,T0o,zr,OE,F0o,hre,C0o,M0o,nd,E0o,pre,y0o,w0o,_re,A0o,L0o,B0o,ure,x0o,k0o,XE,R0o,je,VE,S0o,bre,P0o,$0o,Va,I0o,vre,D0o,j0o,Tre,N0o,q0o,Fre,G0o,O0o,X0o,A,k1,Cre,V0o,z0o,D$,W0o,Q0o,H0o,R1,Mre,U0o,J0o,j$,Y0o,K0o,Z0o,S1,Ere,eTo,oTo,N$,rTo,tTo,aTo,P1,yre,nTo,sTo,q$,lTo,iTo,dTo,$1,wre,cTo,fTo,G$,mTo,gTo,hTo,I1,Are,pTo,_To,O$,uTo,bTo,vTo,D1,Lre,TTo,FTo,X$,CTo,MTo,ETo,j1,Bre,yTo,wTo,V$,ATo,LTo,BTo,N1,xre,xTo,kTo,z$,RTo,STo,PTo,q1,kre,$To,ITo,W$,DTo,jTo,NTo,G1,Rre,qTo,GTo,Q$,OTo,XTo,VTo,O1,Sre,zTo,WTo,H$,QTo,HTo,UTo,X1,Pre,JTo,YTo,U$,KTo,ZTo,eFo,V1,$re,oFo,rFo,J$,tFo,aFo,nFo,z1,Ire,sFo,lFo,Y$,iFo,dFo,cFo,W1,Dre,fFo,mFo,K$,gFo,hFo,pFo,Q1,jre,_Fo,uFo,Z$,bFo,vFo,TFo,H1,Nre,FFo,CFo,eI,MFo,EFo,yFo,U1,qre,wFo,AFo,oI,LFo,BFo,xFo,J1,Gre,kFo,RFo,rI,SFo,PFo,$Fo,Y1,Ore,IFo,DFo,tI,jFo,NFo,qFo,K1,Xre,GFo,OFo,aI,XFo,VFo,zFo,Z1,Vre,WFo,QFo,nI,HFo,UFo,JFo,e7,zre,YFo,KFo,sI,ZFo,eCo,oCo,o7,Wre,rCo,tCo,lI,aCo,nCo,sCo,r7,Qre,lCo,iCo,iI,dCo,cCo,fCo,t7,Hre,mCo,gCo,dI,hCo,pCo,_Co,a7,Ure,uCo,bCo,cI,vCo,TCo,FCo,n7,Jre,CCo,MCo,fI,ECo,yCo,wCo,s7,Yre,ACo,LCo,mI,BCo,xCo,kCo,l7,Kre,RCo,SCo,gI,PCo,$Co,ICo,i7,Zre,DCo,jCo,hI,NCo,qCo,GCo,d7,ete,OCo,XCo,pI,VCo,zCo,WCo,c7,ote,QCo,HCo,_I,UCo,JCo,YCo,f7,rte,KCo,ZCo,uI,e4o,o4o,r4o,m7,tte,t4o,a4o,bI,n4o,s4o,l4o,g7,ate,i4o,d4o,vI,c4o,f4o,m4o,h7,nte,g4o,h4o,TI,p4o,_4o,u4o,p7,ste,b4o,v4o,FI,T4o,F4o,C4o,_7,lte,M4o,E4o,CI,y4o,w4o,A4o,u7,ite,L4o,B4o,MI,x4o,k4o,R4o,b7,dte,S4o,P4o,EI,$4o,I4o,D4o,v7,cte,j4o,N4o,yI,q4o,G4o,O4o,T7,fte,X4o,V4o,wI,z4o,W4o,Q4o,F7,mte,H4o,U4o,AI,J4o,Y4o,K4o,C7,gte,Z4o,eMo,LI,oMo,rMo,tMo,M7,aMo,hte,nMo,sMo,pte,lMo,iMo,_te,dMo,cMo,zE,aBe,sd,E7,ute,WE,fMo,bte,mMo,nBe,Zo,QE,gMo,ld,hMo,vte,pMo,_Mo,Tte,uMo,bMo,vMo,HE,TMo,Fte,FMo,CMo,MMo,Wr,UE,EMo,Cte,yMo,wMo,id,AMo,Mte,LMo,BMo,Ete,xMo,kMo,RMo,yte,SMo,PMo,JE,$Mo,Ne,YE,IMo,wte,DMo,jMo,za,NMo,Ate,qMo,GMo,Lte,OMo,XMo,Bte,VMo,zMo,WMo,G,y7,xte,QMo,HMo,BI,UMo,JMo,YMo,w7,kte,KMo,ZMo,xI,eEo,oEo,rEo,A7,Rte,tEo,aEo,kI,nEo,sEo,lEo,L7,Ste,iEo,dEo,RI,cEo,fEo,mEo,B7,Pte,gEo,hEo,SI,pEo,_Eo,uEo,x7,$te,bEo,vEo,PI,TEo,FEo,CEo,k7,Ite,MEo,EEo,$I,yEo,wEo,AEo,R7,Dte,LEo,BEo,II,xEo,kEo,REo,S7,jte,SEo,PEo,DI,$Eo,IEo,DEo,P7,Nte,jEo,NEo,jI,qEo,GEo,OEo,$7,qte,XEo,VEo,NI,zEo,WEo,QEo,I7,Gte,HEo,UEo,qI,JEo,YEo,KEo,D7,Ote,ZEo,e3o,GI,o3o,r3o,t3o,j7,Xte,a3o,n3o,OI,s3o,l3o,i3o,N7,Vte,d3o,c3o,XI,f3o,m3o,g3o,q7,zte,h3o,p3o,VI,_3o,u3o,b3o,G7,Wte,v3o,T3o,zI,F3o,C3o,M3o,O7,Qte,E3o,y3o,WI,w3o,A3o,L3o,X7,Hte,B3o,x3o,QI,k3o,R3o,S3o,V7,Ute,P3o,$3o,HI,I3o,D3o,j3o,z7,Jte,N3o,q3o,UI,G3o,O3o,X3o,W7,Yte,V3o,z3o,JI,W3o,Q3o,H3o,Q7,Kte,U3o,J3o,YI,Y3o,K3o,Z3o,H7,Zte,eyo,oyo,KI,ryo,tyo,ayo,U7,eae,nyo,syo,ZI,lyo,iyo,dyo,J7,oae,cyo,fyo,eD,myo,gyo,hyo,Y7,rae,pyo,_yo,oD,uyo,byo,vyo,K7,tae,Tyo,Fyo,rD,Cyo,Myo,Eyo,Z7,yyo,aae,wyo,Ayo,nae,Lyo,Byo,sae,xyo,kyo,KE,sBe,dd,eb,lae,ZE,Ryo,iae,Syo,lBe,er,e3,Pyo,cd,$yo,dae,Iyo,Dyo,cae,jyo,Nyo,qyo,o3,Gyo,fae,Oyo,Xyo,Vyo,Qr,r3,zyo,mae,Wyo,Qyo,fd,Hyo,gae,Uyo,Jyo,hae,Yyo,Kyo,Zyo,pae,ewo,owo,t3,rwo,qe,a3,two,_ae,awo,nwo,Wa,swo,uae,lwo,iwo,bae,dwo,cwo,vae,fwo,mwo,gwo,na,ob,Tae,hwo,pwo,tD,_wo,uwo,bwo,rb,Fae,vwo,Two,aD,Fwo,Cwo,Mwo,tb,Cae,Ewo,ywo,nD,wwo,Awo,Lwo,ab,Mae,Bwo,xwo,sD,kwo,Rwo,Swo,nb,Eae,Pwo,$wo,lD,Iwo,Dwo,jwo,sb,Nwo,yae,qwo,Gwo,wae,Owo,Xwo,Aae,Vwo,zwo,n3,iBe,md,lb,Lae,s3,Wwo,Bae,Qwo,dBe,or,l3,Hwo,gd,Uwo,xae,Jwo,Ywo,kae,Kwo,Zwo,e6o,i3,o6o,Rae,r6o,t6o,a6o,Hr,d3,n6o,Sae,s6o,l6o,hd,i6o,Pae,d6o,c6o,$ae,f6o,m6o,g6o,Iae,h6o,p6o,c3,_6o,Ge,f3,u6o,Dae,b6o,v6o,Qa,T6o,jae,F6o,C6o,Nae,M6o,E6o,qae,y6o,w6o,A6o,N,ib,Gae,L6o,B6o,iD,x6o,k6o,R6o,db,Oae,S6o,P6o,dD,$6o,I6o,D6o,cb,Xae,j6o,N6o,cD,q6o,G6o,O6o,fb,Vae,X6o,V6o,fD,z6o,W6o,Q6o,mb,zae,H6o,U6o,mD,J6o,Y6o,K6o,gb,Wae,Z6o,eAo,gD,oAo,rAo,tAo,hb,Qae,aAo,nAo,hD,sAo,lAo,iAo,pb,Hae,dAo,cAo,pD,fAo,mAo,gAo,_b,Uae,hAo,pAo,_D,_Ao,uAo,bAo,ub,Jae,vAo,TAo,uD,FAo,CAo,MAo,bb,Yae,EAo,yAo,bD,wAo,AAo,LAo,vb,Kae,BAo,xAo,vD,kAo,RAo,SAo,Tb,Zae,PAo,$Ao,TD,IAo,DAo,jAo,Fb,ene,NAo,qAo,FD,GAo,OAo,XAo,Cb,one,VAo,zAo,CD,WAo,QAo,HAo,Mb,rne,UAo,JAo,MD,YAo,KAo,ZAo,Eb,tne,eLo,oLo,ED,rLo,tLo,aLo,yb,ane,nLo,sLo,yD,lLo,iLo,dLo,wb,nne,cLo,fLo,wD,mLo,gLo,hLo,Ab,sne,pLo,_Lo,AD,uLo,bLo,vLo,Lb,lne,TLo,FLo,LD,CLo,MLo,ELo,Bb,ine,yLo,wLo,BD,ALo,LLo,BLo,xb,dne,xLo,kLo,xD,RLo,SLo,PLo,kb,cne,$Lo,ILo,kD,DLo,jLo,NLo,Rb,fne,qLo,GLo,RD,OLo,XLo,VLo,Sb,mne,zLo,WLo,SD,QLo,HLo,ULo,Pb,gne,JLo,YLo,PD,KLo,ZLo,e8o,$b,hne,o8o,r8o,$D,t8o,a8o,n8o,Ib,pne,s8o,l8o,ID,i8o,d8o,c8o,Db,_ne,f8o,m8o,DD,g8o,h8o,p8o,jb,une,_8o,u8o,jD,b8o,v8o,T8o,Nb,bne,F8o,C8o,ND,M8o,E8o,y8o,qb,vne,w8o,A8o,qD,L8o,B8o,x8o,Gb,k8o,Tne,R8o,S8o,Fne,P8o,$8o,Cne,I8o,D8o,m3,cBe,pd,Ob,Mne,g3,j8o,Ene,N8o,fBe,rr,h3,q8o,_d,G8o,yne,O8o,X8o,wne,V8o,z8o,W8o,p3,Q8o,Ane,H8o,U8o,J8o,Ur,_3,Y8o,Lne,K8o,Z8o,ud,e9o,Bne,o9o,r9o,xne,t9o,a9o,n9o,kne,s9o,l9o,u3,i9o,Oe,b3,d9o,Rne,c9o,f9o,Ha,m9o,Sne,g9o,h9o,Pne,p9o,_9o,$ne,u9o,b9o,v9o,R,Xb,Ine,T9o,F9o,GD,C9o,M9o,E9o,Vb,Dne,y9o,w9o,OD,A9o,L9o,B9o,zb,jne,x9o,k9o,XD,R9o,S9o,P9o,Wb,Nne,$9o,I9o,VD,D9o,j9o,N9o,Qb,qne,q9o,G9o,zD,O9o,X9o,V9o,Hb,Gne,z9o,W9o,WD,Q9o,H9o,U9o,Ub,One,J9o,Y9o,QD,K9o,Z9o,eBo,Jb,Xne,oBo,rBo,HD,tBo,aBo,nBo,Yb,Vne,sBo,lBo,UD,iBo,dBo,cBo,Kb,zne,fBo,mBo,JD,gBo,hBo,pBo,Zb,Wne,_Bo,uBo,YD,bBo,vBo,TBo,e5,Qne,FBo,CBo,KD,MBo,EBo,yBo,o5,Hne,wBo,ABo,ZD,LBo,BBo,xBo,r5,Une,kBo,RBo,ej,SBo,PBo,$Bo,t5,Jne,IBo,DBo,oj,jBo,NBo,qBo,a5,Yne,GBo,OBo,rj,XBo,VBo,zBo,n5,Kne,WBo,QBo,tj,HBo,UBo,JBo,s5,Zne,YBo,KBo,aj,ZBo,exo,oxo,l5,ese,rxo,txo,nj,axo,nxo,sxo,i5,ose,lxo,ixo,sj,dxo,cxo,fxo,d5,rse,mxo,gxo,lj,hxo,pxo,_xo,c5,tse,uxo,bxo,ij,vxo,Txo,Fxo,f5,ase,Cxo,Mxo,dj,Exo,yxo,wxo,m5,nse,Axo,Lxo,cj,Bxo,xxo,kxo,g5,sse,Rxo,Sxo,fj,Pxo,$xo,Ixo,h5,lse,Dxo,jxo,mj,Nxo,qxo,Gxo,p5,ise,Oxo,Xxo,gj,Vxo,zxo,Wxo,_5,dse,Qxo,Hxo,hj,Uxo,Jxo,Yxo,u5,cse,Kxo,Zxo,pj,eko,oko,rko,b5,fse,tko,ako,_j,nko,sko,lko,v5,mse,iko,dko,uj,cko,fko,mko,T5,gse,gko,hko,bj,pko,_ko,uko,F5,hse,bko,vko,vj,Tko,Fko,Cko,C5,pse,Mko,Eko,Tj,yko,wko,Ako,M5,_se,Lko,Bko,Fj,xko,kko,Rko,E5,use,Sko,Pko,Cj,$ko,Iko,Dko,y5,bse,jko,Nko,Mj,qko,Gko,Oko,w5,vse,Xko,Vko,Ej,zko,Wko,Qko,A5,Tse,Hko,Uko,yj,Jko,Yko,Kko,L5,Zko,Fse,eRo,oRo,Cse,rRo,tRo,Mse,aRo,nRo,v3,mBe,bd,B5,Ese,T3,sRo,yse,lRo,gBe,tr,F3,iRo,vd,dRo,wse,cRo,fRo,Ase,mRo,gRo,hRo,C3,pRo,Lse,_Ro,uRo,bRo,Jr,M3,vRo,Bse,TRo,FRo,Td,CRo,xse,MRo,ERo,kse,yRo,wRo,ARo,Rse,LRo,BRo,E3,xRo,Xe,y3,kRo,Sse,RRo,SRo,Ua,PRo,Pse,$Ro,IRo,$se,DRo,jRo,Ise,NRo,qRo,GRo,Dse,x5,jse,ORo,XRo,wj,VRo,zRo,WRo,k5,QRo,Nse,HRo,URo,qse,JRo,YRo,Gse,KRo,ZRo,w3,hBe,Fd,R5,Ose,A3,eSo,Xse,oSo,pBe,ar,L3,rSo,Cd,tSo,Vse,aSo,nSo,zse,sSo,lSo,iSo,B3,dSo,Wse,cSo,fSo,mSo,Yr,x3,gSo,Qse,hSo,pSo,Md,_So,Hse,uSo,bSo,Use,vSo,TSo,FSo,Jse,CSo,MSo,k3,ESo,Ve,R3,ySo,Yse,wSo,ASo,Ja,LSo,Kse,BSo,xSo,Zse,kSo,RSo,ele,SSo,PSo,$So,he,S5,ole,ISo,DSo,Aj,jSo,NSo,qSo,P5,rle,GSo,OSo,Lj,XSo,VSo,zSo,Ps,tle,WSo,QSo,Bj,HSo,USo,xj,JSo,YSo,KSo,$5,ale,ZSo,ePo,kj,oPo,rPo,tPo,la,nle,aPo,nPo,Rj,sPo,lPo,Sj,iPo,dPo,Pj,cPo,fPo,mPo,I5,sle,gPo,hPo,$j,pPo,_Po,uPo,D5,lle,bPo,vPo,Ij,TPo,FPo,CPo,j5,ile,MPo,EPo,Dj,yPo,wPo,APo,N5,dle,LPo,BPo,jj,xPo,kPo,RPo,q5,cle,SPo,PPo,Nj,$Po,IPo,DPo,G5,jPo,fle,NPo,qPo,mle,GPo,OPo,gle,XPo,VPo,S3,_Be,Ed,O5,hle,P3,zPo,ple,WPo,uBe,nr,$3,QPo,yd,HPo,_le,UPo,JPo,ule,YPo,KPo,ZPo,I3,e$o,ble,o$o,r$o,t$o,Kr,D3,a$o,vle,n$o,s$o,wd,l$o,Tle,i$o,d$o,Fle,c$o,f$o,m$o,Cle,g$o,h$o,j3,p$o,ze,N3,_$o,Mle,u$o,b$o,Ya,v$o,Ele,T$o,F$o,yle,C$o,M$o,wle,E$o,y$o,w$o,Ale,X5,Lle,A$o,L$o,qj,B$o,x$o,k$o,V5,R$o,Ble,S$o,P$o,xle,$$o,I$o,kle,D$o,j$o,q3,bBe,Ad,z5,Rle,G3,N$o,Sle,q$o,vBe,sr,O3,G$o,Ld,O$o,Ple,X$o,V$o,$le,z$o,W$o,Q$o,X3,H$o,Ile,U$o,J$o,Y$o,Zr,V3,K$o,Dle,Z$o,eIo,Bd,oIo,jle,rIo,tIo,Nle,aIo,nIo,sIo,qle,lIo,iIo,z3,dIo,We,W3,cIo,Gle,fIo,mIo,Ka,gIo,Ole,hIo,pIo,Xle,_Io,uIo,Vle,bIo,vIo,TIo,Le,W5,zle,FIo,CIo,Gj,MIo,EIo,yIo,Q5,Wle,wIo,AIo,Oj,LIo,BIo,xIo,H5,Qle,kIo,RIo,Xj,SIo,PIo,$Io,U5,Hle,IIo,DIo,Vj,jIo,NIo,qIo,J5,Ule,GIo,OIo,zj,XIo,VIo,zIo,Y5,Jle,WIo,QIo,Wj,HIo,UIo,JIo,K5,Yle,YIo,KIo,Qj,ZIo,eDo,oDo,Z5,Kle,rDo,tDo,Hj,aDo,nDo,sDo,e2,lDo,Zle,iDo,dDo,eie,cDo,fDo,oie,mDo,gDo,Q3,TBe,xd,o2,rie,H3,hDo,tie,pDo,FBe,lr,U3,_Do,kd,uDo,aie,bDo,vDo,nie,TDo,FDo,CDo,J3,MDo,sie,EDo,yDo,wDo,et,Y3,ADo,lie,LDo,BDo,Rd,xDo,iie,kDo,RDo,die,SDo,PDo,$Do,cie,IDo,DDo,K3,jDo,Qe,Z3,NDo,fie,qDo,GDo,Za,ODo,mie,XDo,VDo,gie,zDo,WDo,hie,QDo,HDo,UDo,en,r2,pie,JDo,YDo,Uj,KDo,ZDo,ejo,t2,_ie,ojo,rjo,Jj,tjo,ajo,njo,a2,uie,sjo,ljo,Yj,ijo,djo,cjo,n2,bie,fjo,mjo,Kj,gjo,hjo,pjo,s2,_jo,vie,ujo,bjo,Tie,vjo,Tjo,Fie,Fjo,Cjo,ey,CBe,Sd,l2,Cie,oy,Mjo,Mie,Ejo,MBe,ir,ry,yjo,Pd,wjo,Eie,Ajo,Ljo,yie,Bjo,xjo,kjo,ty,Rjo,wie,Sjo,Pjo,$jo,ot,ay,Ijo,Aie,Djo,jjo,$d,Njo,Lie,qjo,Gjo,Bie,Ojo,Xjo,Vjo,xie,zjo,Wjo,ny,Qjo,He,sy,Hjo,kie,Ujo,Jjo,on,Yjo,Rie,Kjo,Zjo,Sie,eNo,oNo,Pie,rNo,tNo,aNo,Be,i2,$ie,nNo,sNo,Zj,lNo,iNo,dNo,d2,Iie,cNo,fNo,eN,mNo,gNo,hNo,c2,Die,pNo,_No,oN,uNo,bNo,vNo,f2,jie,TNo,FNo,rN,CNo,MNo,ENo,m2,Nie,yNo,wNo,tN,ANo,LNo,BNo,g2,qie,xNo,kNo,aN,RNo,SNo,PNo,h2,Gie,$No,INo,nN,DNo,jNo,NNo,p2,Oie,qNo,GNo,sN,ONo,XNo,VNo,_2,zNo,Xie,WNo,QNo,Vie,HNo,UNo,zie,JNo,YNo,ly,EBe,Id,u2,Wie,iy,KNo,Qie,ZNo,yBe,dr,dy,eqo,Dd,oqo,Hie,rqo,tqo,Uie,aqo,nqo,sqo,cy,lqo,Jie,iqo,dqo,cqo,rt,fy,fqo,Yie,mqo,gqo,jd,hqo,Kie,pqo,_qo,Zie,uqo,bqo,vqo,ede,Tqo,Fqo,my,Cqo,Ue,gy,Mqo,ode,Eqo,yqo,rn,wqo,rde,Aqo,Lqo,tde,Bqo,xqo,ade,kqo,Rqo,Sqo,hy,b2,nde,Pqo,$qo,lN,Iqo,Dqo,jqo,v2,sde,Nqo,qqo,iN,Gqo,Oqo,Xqo,T2,Vqo,lde,zqo,Wqo,ide,Qqo,Hqo,dde,Uqo,Jqo,py,wBe,Nd,F2,cde,_y,Yqo,fde,Kqo,ABe,cr,uy,Zqo,qd,eGo,mde,oGo,rGo,gde,tGo,aGo,nGo,by,sGo,hde,lGo,iGo,dGo,tt,vy,cGo,pde,fGo,mGo,Gd,gGo,_de,hGo,pGo,ude,_Go,uGo,bGo,bde,vGo,TGo,Ty,FGo,Je,Fy,CGo,vde,MGo,EGo,tn,yGo,Tde,wGo,AGo,Fde,LGo,BGo,Cde,xGo,kGo,RGo,an,C2,Mde,SGo,PGo,dN,$Go,IGo,DGo,M2,Ede,jGo,NGo,cN,qGo,GGo,OGo,E2,yde,XGo,VGo,fN,zGo,WGo,QGo,y2,wde,HGo,UGo,mN,JGo,YGo,KGo,w2,ZGo,Ade,eOo,oOo,Lde,rOo,tOo,Bde,aOo,nOo,Cy,LBe,Od,A2,xde,My,sOo,kde,lOo,BBe,fr,Ey,iOo,Xd,dOo,Rde,cOo,fOo,Sde,mOo,gOo,hOo,yy,pOo,Pde,_Oo,uOo,bOo,at,wy,vOo,$de,TOo,FOo,Vd,COo,Ide,MOo,EOo,Dde,yOo,wOo,AOo,jde,LOo,BOo,Ay,xOo,Ye,Ly,kOo,Nde,ROo,SOo,nn,POo,qde,$Oo,IOo,Gde,DOo,jOo,Ode,NOo,qOo,GOo,zd,L2,Xde,OOo,XOo,gN,VOo,zOo,WOo,B2,Vde,QOo,HOo,hN,UOo,JOo,YOo,x2,zde,KOo,ZOo,pN,eXo,oXo,rXo,k2,tXo,Wde,aXo,nXo,Qde,sXo,lXo,Hde,iXo,dXo,By,xBe,Wd,R2,Ude,xy,cXo,Jde,fXo,kBe,mr,ky,mXo,Qd,gXo,Yde,hXo,pXo,Kde,_Xo,uXo,bXo,Ry,vXo,Zde,TXo,FXo,CXo,nt,Sy,MXo,ece,EXo,yXo,Hd,wXo,oce,AXo,LXo,rce,BXo,xXo,kXo,tce,RXo,SXo,Py,PXo,Ke,$y,$Xo,ace,IXo,DXo,sn,jXo,nce,NXo,qXo,sce,GXo,OXo,lce,XXo,VXo,zXo,ice,S2,dce,WXo,QXo,_N,HXo,UXo,JXo,P2,YXo,cce,KXo,ZXo,fce,eVo,oVo,mce,rVo,tVo,Iy,RBe,Ud,$2,gce,Dy,aVo,hce,nVo,SBe,gr,jy,sVo,Jd,lVo,pce,iVo,dVo,_ce,cVo,fVo,mVo,Ny,gVo,uce,hVo,pVo,_Vo,st,qy,uVo,bce,bVo,vVo,Yd,TVo,vce,FVo,CVo,Tce,MVo,EVo,yVo,Fce,wVo,AVo,Gy,LVo,Ze,Oy,BVo,Cce,xVo,kVo,ln,RVo,Mce,SVo,PVo,Ece,$Vo,IVo,yce,DVo,jVo,NVo,wce,I2,Ace,qVo,GVo,uN,OVo,XVo,VVo,D2,zVo,Lce,WVo,QVo,Bce,HVo,UVo,xce,JVo,YVo,Xy,PBe,Kd,j2,kce,Vy,KVo,Rce,ZVo,$Be,hr,zy,ezo,Zd,ozo,Sce,rzo,tzo,Pce,azo,nzo,szo,Wy,lzo,$ce,izo,dzo,czo,lt,Qy,fzo,Ice,mzo,gzo,ec,hzo,Dce,pzo,_zo,jce,uzo,bzo,vzo,Nce,Tzo,Fzo,Hy,Czo,eo,Uy,Mzo,qce,Ezo,yzo,dn,wzo,Gce,Azo,Lzo,Oce,Bzo,xzo,Xce,kzo,Rzo,Szo,Jy,N2,Vce,Pzo,$zo,bN,Izo,Dzo,jzo,q2,zce,Nzo,qzo,vN,Gzo,Ozo,Xzo,G2,Vzo,Wce,zzo,Wzo,Qce,Qzo,Hzo,Hce,Uzo,Jzo,Yy,IBe,oc,O2,Uce,Ky,Yzo,Jce,Kzo,DBe,pr,Zy,Zzo,rc,eWo,Yce,oWo,rWo,Kce,tWo,aWo,nWo,ew,sWo,Zce,lWo,iWo,dWo,it,ow,cWo,efe,fWo,mWo,tc,gWo,ofe,hWo,pWo,rfe,_Wo,uWo,bWo,tfe,vWo,TWo,rw,FWo,go,tw,CWo,afe,MWo,EWo,cn,yWo,nfe,wWo,AWo,sfe,LWo,BWo,lfe,xWo,kWo,RWo,B,X2,ife,SWo,PWo,TN,$Wo,IWo,DWo,V2,dfe,jWo,NWo,FN,qWo,GWo,OWo,z2,cfe,XWo,VWo,CN,zWo,WWo,QWo,W2,ffe,HWo,UWo,MN,JWo,YWo,KWo,Q2,mfe,ZWo,eQo,EN,oQo,rQo,tQo,H2,gfe,aQo,nQo,yN,sQo,lQo,iQo,U2,hfe,dQo,cQo,wN,fQo,mQo,gQo,J2,pfe,hQo,pQo,AN,_Qo,uQo,bQo,Y2,_fe,vQo,TQo,LN,FQo,CQo,MQo,K2,ufe,EQo,yQo,BN,wQo,AQo,LQo,Z2,bfe,BQo,xQo,xN,kQo,RQo,SQo,ev,vfe,PQo,$Qo,kN,IQo,DQo,jQo,ov,Tfe,NQo,qQo,RN,GQo,OQo,XQo,rv,Ffe,VQo,zQo,SN,WQo,QQo,HQo,tv,Cfe,UQo,JQo,PN,YQo,KQo,ZQo,av,Mfe,eHo,oHo,$N,rHo,tHo,aHo,$s,Efe,nHo,sHo,IN,lHo,iHo,DN,dHo,cHo,fHo,nv,yfe,mHo,gHo,jN,hHo,pHo,_Ho,sv,wfe,uHo,bHo,NN,vHo,THo,FHo,lv,Afe,CHo,MHo,qN,EHo,yHo,wHo,iv,Lfe,AHo,LHo,GN,BHo,xHo,kHo,dv,Bfe,RHo,SHo,ON,PHo,$Ho,IHo,cv,xfe,DHo,jHo,XN,NHo,qHo,GHo,fv,kfe,OHo,XHo,VN,VHo,zHo,WHo,mv,Rfe,QHo,HHo,zN,UHo,JHo,YHo,gv,Sfe,KHo,ZHo,WN,eUo,oUo,rUo,hv,Pfe,tUo,aUo,QN,nUo,sUo,lUo,pv,$fe,iUo,dUo,HN,cUo,fUo,mUo,_v,Ife,gUo,hUo,UN,pUo,_Uo,uUo,uv,Dfe,bUo,vUo,JN,TUo,FUo,CUo,bv,jfe,MUo,EUo,YN,yUo,wUo,AUo,vv,Nfe,LUo,BUo,KN,xUo,kUo,RUo,Tv,qfe,SUo,PUo,ZN,$Uo,IUo,DUo,Fv,Gfe,jUo,NUo,eq,qUo,GUo,OUo,Cv,Ofe,XUo,VUo,oq,zUo,WUo,QUo,Mv,Xfe,HUo,UUo,rq,JUo,YUo,KUo,Ev,Vfe,ZUo,eJo,tq,oJo,rJo,tJo,yv,zfe,aJo,nJo,aq,sJo,lJo,iJo,wv,Wfe,dJo,cJo,nq,fJo,mJo,gJo,Av,Qfe,hJo,pJo,sq,_Jo,uJo,bJo,Lv,Hfe,vJo,TJo,lq,FJo,CJo,MJo,Bv,Ufe,EJo,yJo,iq,wJo,AJo,LJo,Jfe,BJo,xJo,aw,jBe,ac,xv,Yfe,nw,kJo,Kfe,RJo,NBe,_r,sw,SJo,nc,PJo,Zfe,$Jo,IJo,eme,DJo,jJo,NJo,lw,qJo,ome,GJo,OJo,XJo,dt,iw,VJo,rme,zJo,WJo,sc,QJo,tme,HJo,UJo,ame,JJo,YJo,KJo,nme,ZJo,eYo,dw,oYo,ho,cw,rYo,sme,tYo,aYo,fn,nYo,lme,sYo,lYo,ime,iYo,dYo,dme,cYo,fYo,mYo,H,kv,cme,gYo,hYo,dq,pYo,_Yo,uYo,Rv,fme,bYo,vYo,cq,TYo,FYo,CYo,Sv,mme,MYo,EYo,fq,yYo,wYo,AYo,Pv,gme,LYo,BYo,mq,xYo,kYo,RYo,$v,hme,SYo,PYo,gq,$Yo,IYo,DYo,Iv,pme,jYo,NYo,hq,qYo,GYo,OYo,Dv,_me,XYo,VYo,pq,zYo,WYo,QYo,jv,ume,HYo,UYo,_q,JYo,YYo,KYo,Nv,bme,ZYo,eKo,uq,oKo,rKo,tKo,qv,vme,aKo,nKo,bq,sKo,lKo,iKo,Gv,Tme,dKo,cKo,vq,fKo,mKo,gKo,Ov,Fme,hKo,pKo,Tq,_Ko,uKo,bKo,Xv,Cme,vKo,TKo,Fq,FKo,CKo,MKo,Vv,Mme,EKo,yKo,Cq,wKo,AKo,LKo,zv,Eme,BKo,xKo,Mq,kKo,RKo,SKo,Wv,yme,PKo,$Ko,Eq,IKo,DKo,jKo,Qv,wme,NKo,qKo,yq,GKo,OKo,XKo,Hv,Ame,VKo,zKo,wq,WKo,QKo,HKo,Uv,Lme,UKo,JKo,Aq,YKo,KKo,ZKo,Jv,Bme,eZo,oZo,Lq,rZo,tZo,aZo,Yv,xme,nZo,sZo,Bq,lZo,iZo,dZo,Kv,kme,cZo,fZo,xq,mZo,gZo,hZo,Rme,pZo,_Zo,fw,qBe,lc,Zv,Sme,mw,uZo,Pme,bZo,GBe,ur,gw,vZo,ic,TZo,$me,FZo,CZo,Ime,MZo,EZo,yZo,hw,wZo,Dme,AZo,LZo,BZo,ct,pw,xZo,jme,kZo,RZo,dc,SZo,Nme,PZo,$Zo,qme,IZo,DZo,jZo,Gme,NZo,qZo,_w,GZo,po,uw,OZo,Ome,XZo,VZo,mn,zZo,Xme,WZo,QZo,Vme,HZo,UZo,zme,JZo,YZo,KZo,pe,e0,Wme,ZZo,eer,kq,oer,rer,ter,o0,Qme,aer,ner,Rq,ser,ler,ier,r0,Hme,der,cer,Sq,fer,mer,ger,t0,Ume,her,per,Pq,_er,uer,ber,a0,Jme,ver,Ter,$q,Fer,Cer,Mer,n0,Yme,Eer,yer,Iq,wer,Aer,Ler,s0,Kme,Ber,xer,Dq,ker,Rer,Ser,l0,Zme,Per,$er,jq,Ier,Der,jer,i0,ege,Ner,qer,Nq,Ger,Oer,Xer,d0,oge,Ver,zer,qq,Wer,Qer,Her,rge,Uer,Jer,bw,OBe,cc,c0,tge,vw,Yer,age,Ker,XBe,br,Tw,Zer,fc,eor,nge,oor,ror,sge,tor,aor,nor,Fw,sor,lge,lor,ior,dor,ft,Cw,cor,ige,mor,gor,mc,hor,dge,por,_or,cge,uor,bor,vor,fge,Tor,For,Mw,Cor,_o,Ew,Mor,mge,Eor,yor,gn,wor,gge,Aor,Lor,hge,Bor,xor,pge,kor,Ror,Sor,yw,f0,_ge,Por,$or,Gq,Ior,Dor,jor,m0,uge,Nor,qor,Oq,Gor,Oor,Xor,bge,Vor,zor,ww,VBe,gc,g0,vge,Aw,Wor,Tge,Qor,zBe,vr,Lw,Hor,hc,Uor,Fge,Jor,Yor,Cge,Kor,Zor,err,Bw,orr,Mge,rrr,trr,arr,mt,xw,nrr,Ege,srr,lrr,pc,irr,yge,drr,crr,wge,frr,mrr,grr,Age,hrr,prr,kw,_rr,uo,Rw,urr,Lge,brr,vrr,hn,Trr,Bge,Frr,Crr,xge,Mrr,Err,kge,yrr,wrr,Arr,Y,h0,Rge,Lrr,Brr,Xq,xrr,krr,Rrr,p0,Sge,Srr,Prr,Vq,$rr,Irr,Drr,_0,Pge,jrr,Nrr,zq,qrr,Grr,Orr,u0,$ge,Xrr,Vrr,Wq,zrr,Wrr,Qrr,b0,Ige,Hrr,Urr,Qq,Jrr,Yrr,Krr,v0,Dge,Zrr,etr,Hq,otr,rtr,ttr,T0,jge,atr,ntr,Uq,str,ltr,itr,F0,Nge,dtr,ctr,Jq,ftr,mtr,gtr,C0,qge,htr,ptr,Yq,_tr,utr,btr,M0,Gge,vtr,Ttr,Kq,Ftr,Ctr,Mtr,E0,Oge,Etr,ytr,Zq,wtr,Atr,Ltr,y0,Xge,Btr,xtr,eG,ktr,Rtr,Str,w0,Vge,Ptr,$tr,oG,Itr,Dtr,jtr,A0,zge,Ntr,qtr,rG,Gtr,Otr,Xtr,L0,Wge,Vtr,ztr,tG,Wtr,Qtr,Htr,B0,Qge,Utr,Jtr,aG,Ytr,Ktr,Ztr,x0,Hge,ear,oar,nG,rar,tar,aar,k0,Uge,nar,sar,sG,lar,iar,dar,R0,Jge,car,far,lG,mar,gar,har,S0,Yge,par,_ar,iG,uar,bar,Tar,Kge,Far,Car,Sw,WBe,_c,P0,Zge,Pw,Mar,ehe,Ear,QBe,Tr,$w,yar,uc,war,ohe,Aar,Lar,rhe,Bar,xar,kar,Iw,Rar,the,Sar,Par,$ar,gt,Dw,Iar,ahe,Dar,jar,bc,Nar,nhe,qar,Gar,she,Oar,Xar,Var,lhe,zar,War,jw,Qar,bo,Nw,Har,ihe,Uar,Jar,pn,Yar,dhe,Kar,Zar,che,enr,onr,fhe,rnr,tnr,anr,_e,$0,mhe,nnr,snr,dG,lnr,inr,dnr,I0,ghe,cnr,fnr,cG,mnr,gnr,hnr,D0,hhe,pnr,_nr,fG,unr,bnr,vnr,j0,phe,Tnr,Fnr,mG,Cnr,Mnr,Enr,N0,_he,ynr,wnr,gG,Anr,Lnr,Bnr,q0,uhe,xnr,knr,hG,Rnr,Snr,Pnr,G0,bhe,$nr,Inr,pG,Dnr,jnr,Nnr,O0,vhe,qnr,Gnr,_G,Onr,Xnr,Vnr,X0,The,znr,Wnr,uG,Qnr,Hnr,Unr,V0,Fhe,Jnr,Ynr,bG,Knr,Znr,esr,Che,osr,rsr,qw,HBe,vc,z0,Mhe,Gw,tsr,Ehe,asr,UBe,Fr,Ow,nsr,Tc,ssr,yhe,lsr,isr,whe,dsr,csr,fsr,Xw,msr,Ahe,gsr,hsr,psr,ht,Vw,_sr,Lhe,usr,bsr,Fc,vsr,Bhe,Tsr,Fsr,xhe,Csr,Msr,Esr,khe,ysr,wsr,zw,Asr,vo,Ww,Lsr,Rhe,Bsr,xsr,_n,ksr,She,Rsr,Ssr,Phe,Psr,$sr,$he,Isr,Dsr,jsr,X,W0,Ihe,Nsr,qsr,vG,Gsr,Osr,Xsr,Q0,Dhe,Vsr,zsr,TG,Wsr,Qsr,Hsr,H0,jhe,Usr,Jsr,FG,Ysr,Ksr,Zsr,U0,Nhe,elr,olr,CG,rlr,tlr,alr,J0,qhe,nlr,slr,MG,llr,ilr,dlr,Y0,Ghe,clr,flr,EG,mlr,glr,hlr,K0,Ohe,plr,_lr,yG,ulr,blr,vlr,Z0,Xhe,Tlr,Flr,wG,Clr,Mlr,Elr,eT,Vhe,ylr,wlr,AG,Alr,Llr,Blr,oT,zhe,xlr,klr,LG,Rlr,Slr,Plr,rT,Whe,$lr,Ilr,BG,Dlr,jlr,Nlr,tT,Qhe,qlr,Glr,xG,Olr,Xlr,Vlr,aT,Hhe,zlr,Wlr,kG,Qlr,Hlr,Ulr,nT,Uhe,Jlr,Ylr,RG,Klr,Zlr,eir,sT,Jhe,oir,rir,SG,tir,air,nir,lT,Yhe,sir,lir,PG,iir,dir,cir,iT,Khe,fir,mir,$G,gir,hir,pir,dT,Zhe,_ir,uir,IG,bir,vir,Tir,cT,epe,Fir,Cir,DG,Mir,Eir,yir,fT,ope,wir,Air,jG,Lir,Bir,xir,mT,rpe,kir,Rir,NG,Sir,Pir,$ir,gT,tpe,Iir,Dir,qG,jir,Nir,qir,hT,ape,Gir,Oir,GG,Xir,Vir,zir,pT,npe,Wir,Qir,OG,Hir,Uir,Jir,_T,spe,Yir,Kir,XG,Zir,edr,odr,lpe,rdr,tdr,Qw,JBe,Cc,uT,ipe,Hw,adr,dpe,ndr,YBe,Cr,Uw,sdr,Mc,ldr,cpe,idr,ddr,fpe,cdr,fdr,mdr,Jw,gdr,mpe,hdr,pdr,_dr,pt,Yw,udr,gpe,bdr,vdr,Ec,Tdr,hpe,Fdr,Cdr,ppe,Mdr,Edr,ydr,_pe,wdr,Adr,Kw,Ldr,To,Zw,Bdr,upe,xdr,kdr,un,Rdr,bpe,Sdr,Pdr,vpe,$dr,Idr,Tpe,Ddr,jdr,Ndr,te,bT,Fpe,qdr,Gdr,VG,Odr,Xdr,Vdr,vT,Cpe,zdr,Wdr,zG,Qdr,Hdr,Udr,TT,Mpe,Jdr,Ydr,WG,Kdr,Zdr,ecr,FT,Epe,ocr,rcr,QG,tcr,acr,ncr,CT,ype,scr,lcr,HG,icr,dcr,ccr,MT,wpe,fcr,mcr,UG,gcr,hcr,pcr,ET,Ape,_cr,ucr,JG,bcr,vcr,Tcr,yT,Lpe,Fcr,Ccr,YG,Mcr,Ecr,ycr,wT,Bpe,wcr,Acr,KG,Lcr,Bcr,xcr,AT,xpe,kcr,Rcr,ZG,Scr,Pcr,$cr,LT,kpe,Icr,Dcr,eO,jcr,Ncr,qcr,BT,Rpe,Gcr,Ocr,oO,Xcr,Vcr,zcr,xT,Spe,Wcr,Qcr,rO,Hcr,Ucr,Jcr,kT,Ppe,Ycr,Kcr,tO,Zcr,efr,ofr,RT,$pe,rfr,tfr,aO,afr,nfr,sfr,ST,Ipe,lfr,ifr,nO,dfr,cfr,ffr,PT,Dpe,mfr,gfr,sO,hfr,pfr,_fr,jpe,ufr,bfr,e6,KBe,yc,$T,Npe,o6,vfr,qpe,Tfr,ZBe,Mr,r6,Ffr,wc,Cfr,Gpe,Mfr,Efr,Ope,yfr,wfr,Afr,t6,Lfr,Xpe,Bfr,xfr,kfr,_t,a6,Rfr,Vpe,Sfr,Pfr,Ac,$fr,zpe,Ifr,Dfr,Wpe,jfr,Nfr,qfr,Qpe,Gfr,Ofr,n6,Xfr,Fo,s6,Vfr,Hpe,zfr,Wfr,bn,Qfr,Upe,Hfr,Ufr,Jpe,Jfr,Yfr,Ype,Kfr,Zfr,emr,Kpe,IT,Zpe,omr,rmr,lO,tmr,amr,nmr,e_e,smr,lmr,l6,exe,Lc,DT,o_e,i6,imr,r_e,dmr,oxe,Er,d6,cmr,Bc,fmr,t_e,mmr,gmr,a_e,hmr,pmr,_mr,c6,umr,n_e,bmr,vmr,Tmr,ut,f6,Fmr,s_e,Cmr,Mmr,xc,Emr,l_e,ymr,wmr,i_e,Amr,Lmr,Bmr,d_e,xmr,kmr,m6,Rmr,Co,g6,Smr,c_e,Pmr,$mr,vn,Imr,f_e,Dmr,jmr,m_e,Nmr,qmr,g_e,Gmr,Omr,Xmr,K,jT,h_e,Vmr,zmr,iO,Wmr,Qmr,Hmr,NT,p_e,Umr,Jmr,dO,Ymr,Kmr,Zmr,qT,__e,egr,ogr,cO,rgr,tgr,agr,GT,u_e,ngr,sgr,fO,lgr,igr,dgr,OT,b_e,cgr,fgr,mO,mgr,ggr,hgr,XT,v_e,pgr,_gr,gO,ugr,bgr,vgr,VT,T_e,Tgr,Fgr,hO,Cgr,Mgr,Egr,zT,F_e,ygr,wgr,pO,Agr,Lgr,Bgr,WT,C_e,xgr,kgr,_O,Rgr,Sgr,Pgr,QT,M_e,$gr,Igr,uO,Dgr,jgr,Ngr,HT,E_e,qgr,Ggr,bO,Ogr,Xgr,Vgr,UT,y_e,zgr,Wgr,vO,Qgr,Hgr,Ugr,JT,w_e,Jgr,Ygr,TO,Kgr,Zgr,ehr,YT,A_e,ohr,rhr,FO,thr,ahr,nhr,KT,L_e,shr,lhr,CO,ihr,dhr,chr,ZT,B_e,fhr,mhr,MO,ghr,hhr,phr,eF,x_e,_hr,uhr,EO,bhr,vhr,Thr,oF,k_e,Fhr,Chr,yO,Mhr,Ehr,yhr,rF,R_e,whr,Ahr,wO,Lhr,Bhr,xhr,tF,S_e,khr,Rhr,AO,Shr,Phr,$hr,P_e,Ihr,Dhr,h6,rxe,kc,aF,$_e,p6,jhr,I_e,Nhr,txe,yr,_6,qhr,Rc,Ghr,D_e,Ohr,Xhr,j_e,Vhr,zhr,Whr,u6,Qhr,N_e,Hhr,Uhr,Jhr,bt,b6,Yhr,q_e,Khr,Zhr,Sc,epr,G_e,opr,rpr,O_e,tpr,apr,npr,X_e,spr,lpr,v6,ipr,Mo,T6,dpr,V_e,cpr,fpr,Tn,mpr,z_e,gpr,hpr,W_e,ppr,_pr,Q_e,upr,bpr,vpr,Z,nF,H_e,Tpr,Fpr,LO,Cpr,Mpr,Epr,sF,U_e,ypr,wpr,BO,Apr,Lpr,Bpr,lF,J_e,xpr,kpr,xO,Rpr,Spr,Ppr,iF,Y_e,$pr,Ipr,kO,Dpr,jpr,Npr,dF,K_e,qpr,Gpr,RO,Opr,Xpr,Vpr,cF,Z_e,zpr,Wpr,SO,Qpr,Hpr,Upr,fF,eue,Jpr,Ypr,PO,Kpr,Zpr,e_r,mF,oue,o_r,r_r,$O,t_r,a_r,n_r,gF,rue,s_r,l_r,IO,i_r,d_r,c_r,hF,tue,f_r,m_r,DO,g_r,h_r,p_r,pF,aue,__r,u_r,jO,b_r,v_r,T_r,_F,nue,F_r,C_r,NO,M_r,E_r,y_r,uF,sue,w_r,A_r,qO,L_r,B_r,x_r,bF,lue,k_r,R_r,GO,S_r,P_r,$_r,vF,iue,I_r,D_r,OO,j_r,N_r,q_r,TF,due,G_r,O_r,XO,X_r,V_r,z_r,FF,cue,W_r,Q_r,VO,H_r,U_r,J_r,CF,fue,Y_r,K_r,zO,Z_r,eur,our,MF,mue,rur,tur,WO,aur,nur,sur,gue,lur,iur,F6,axe,Pc,EF,hue,C6,dur,pue,cur,nxe,wr,M6,fur,$c,mur,_ue,gur,hur,uue,pur,_ur,uur,E6,bur,bue,vur,Tur,Fur,vt,y6,Cur,vue,Mur,Eur,Ic,yur,Tue,wur,Aur,Fue,Lur,Bur,xur,Cue,kur,Rur,w6,Sur,Eo,A6,Pur,Mue,$ur,Iur,Fn,Dur,Eue,jur,Nur,yue,qur,Gur,wue,Our,Xur,Vur,Aue,yF,Lue,zur,Wur,QO,Qur,Hur,Uur,Bue,Jur,Yur,L6,sxe,Dc,wF,xue,B6,Kur,kue,Zur,lxe,Ar,x6,e1r,jc,o1r,Rue,r1r,t1r,Sue,a1r,n1r,s1r,k6,l1r,Pue,i1r,d1r,c1r,Tt,R6,f1r,$ue,m1r,g1r,Nc,h1r,Iue,p1r,_1r,Due,u1r,b1r,v1r,jue,T1r,F1r,S6,C1r,yo,P6,M1r,Nue,E1r,y1r,Cn,w1r,que,A1r,L1r,Gue,B1r,x1r,Oue,k1r,R1r,S1r,Xue,AF,Vue,P1r,$1r,HO,I1r,D1r,j1r,zue,N1r,q1r,$6,ixe,qc,LF,Wue,I6,G1r,Que,O1r,dxe,Lr,D6,X1r,Gc,V1r,Hue,z1r,W1r,Uue,Q1r,H1r,U1r,j6,J1r,Jue,Y1r,K1r,Z1r,Ft,N6,e7r,Yue,o7r,r7r,Oc,t7r,Kue,a7r,n7r,Zue,s7r,l7r,i7r,e1e,d7r,c7r,q6,f7r,wo,G6,m7r,o1e,g7r,h7r,Mn,p7r,r1e,_7r,u7r,t1e,b7r,v7r,a1e,T7r,F7r,C7r,z,BF,n1e,M7r,E7r,UO,y7r,w7r,A7r,xF,s1e,L7r,B7r,JO,x7r,k7r,R7r,kF,l1e,S7r,P7r,YO,$7r,I7r,D7r,RF,i1e,j7r,N7r,KO,q7r,G7r,O7r,SF,d1e,X7r,V7r,ZO,z7r,W7r,Q7r,PF,c1e,H7r,U7r,eX,J7r,Y7r,K7r,$F,f1e,Z7r,ebr,oX,obr,rbr,tbr,IF,m1e,abr,nbr,rX,sbr,lbr,ibr,DF,g1e,dbr,cbr,tX,fbr,mbr,gbr,jF,h1e,hbr,pbr,aX,_br,ubr,bbr,NF,p1e,vbr,Tbr,nX,Fbr,Cbr,Mbr,qF,_1e,Ebr,ybr,sX,wbr,Abr,Lbr,GF,u1e,Bbr,xbr,lX,kbr,Rbr,Sbr,OF,b1e,Pbr,$br,iX,Ibr,Dbr,jbr,XF,v1e,Nbr,qbr,dX,Gbr,Obr,Xbr,VF,T1e,Vbr,zbr,cX,Wbr,Qbr,Hbr,zF,F1e,Ubr,Jbr,fX,Ybr,Kbr,Zbr,WF,C1e,e5r,o5r,mX,r5r,t5r,a5r,QF,M1e,n5r,s5r,gX,l5r,i5r,d5r,HF,E1e,c5r,f5r,hX,m5r,g5r,h5r,UF,y1e,p5r,_5r,pX,u5r,b5r,v5r,JF,w1e,T5r,F5r,_X,C5r,M5r,E5r,YF,A1e,y5r,w5r,uX,A5r,L5r,B5r,KF,L1e,x5r,k5r,bX,R5r,S5r,P5r,B1e,$5r,I5r,O6,cxe,Xc,ZF,x1e,X6,D5r,k1e,j5r,fxe,Br,V6,N5r,Vc,q5r,R1e,G5r,O5r,S1e,X5r,V5r,z5r,z6,W5r,P1e,Q5r,H5r,U5r,Ct,W6,J5r,$1e,Y5r,K5r,zc,Z5r,I1e,e2r,o2r,D1e,r2r,t2r,a2r,j1e,n2r,s2r,Q6,l2r,Ao,H6,i2r,N1e,d2r,c2r,En,f2r,q1e,m2r,g2r,G1e,h2r,p2r,O1e,_2r,u2r,b2r,yn,eC,X1e,v2r,T2r,vX,F2r,C2r,M2r,oC,V1e,E2r,y2r,TX,w2r,A2r,L2r,rC,z1e,B2r,x2r,FX,k2r,R2r,S2r,tC,W1e,P2r,$2r,CX,I2r,D2r,j2r,Q1e,N2r,q2r,U6,mxe,Wc,aC,H1e,J6,G2r,U1e,O2r,gxe,xr,Y6,X2r,Qc,V2r,J1e,z2r,W2r,Y1e,Q2r,H2r,U2r,K6,J2r,K1e,Y2r,K2r,Z2r,Mt,Z6,evr,Z1e,ovr,rvr,Hc,tvr,e7e,avr,nvr,o7e,svr,lvr,ivr,r7e,dvr,cvr,eA,fvr,Lo,oA,mvr,t7e,gvr,hvr,wn,pvr,a7e,_vr,uvr,n7e,bvr,vvr,s7e,Tvr,Fvr,Cvr,fe,nC,l7e,Mvr,Evr,MX,yvr,wvr,Avr,sC,i7e,Lvr,Bvr,EX,xvr,kvr,Rvr,lC,d7e,Svr,Pvr,yX,$vr,Ivr,Dvr,iC,c7e,jvr,Nvr,wX,qvr,Gvr,Ovr,dC,f7e,Xvr,Vvr,AX,zvr,Wvr,Qvr,cC,m7e,Hvr,Uvr,LX,Jvr,Yvr,Kvr,fC,g7e,Zvr,e0r,BX,o0r,r0r,t0r,mC,h7e,a0r,n0r,xX,s0r,l0r,i0r,gC,p7e,d0r,c0r,kX,f0r,m0r,g0r,hC,_7e,h0r,p0r,RX,_0r,u0r,b0r,pC,u7e,v0r,T0r,SX,F0r,C0r,M0r,b7e,E0r,y0r,rA,hxe,Uc,_C,v7e,tA,w0r,T7e,A0r,pxe,kr,aA,L0r,Jc,B0r,F7e,x0r,k0r,C7e,R0r,S0r,P0r,nA,$0r,M7e,I0r,D0r,j0r,Et,sA,N0r,E7e,q0r,G0r,Yc,O0r,y7e,X0r,V0r,w7e,z0r,W0r,Q0r,A7e,H0r,U0r,lA,J0r,Bo,iA,Y0r,L7e,K0r,Z0r,An,eTr,B7e,oTr,rTr,x7e,tTr,aTr,k7e,nTr,sTr,lTr,ve,uC,R7e,iTr,dTr,PX,cTr,fTr,mTr,bC,S7e,gTr,hTr,$X,pTr,_Tr,uTr,vC,P7e,bTr,vTr,IX,TTr,FTr,CTr,TC,$7e,MTr,ETr,DX,yTr,wTr,ATr,FC,I7e,LTr,BTr,jX,xTr,kTr,RTr,CC,D7e,STr,PTr,NX,$Tr,ITr,DTr,MC,j7e,jTr,NTr,qX,qTr,GTr,OTr,EC,N7e,XTr,VTr,GX,zTr,WTr,QTr,yC,q7e,HTr,UTr,OX,JTr,YTr,KTr,G7e,ZTr,eFr,dA,_xe,Kc,wC,O7e,cA,oFr,X7e,rFr,uxe,Rr,fA,tFr,Zc,aFr,V7e,nFr,sFr,z7e,lFr,iFr,dFr,mA,cFr,W7e,fFr,mFr,gFr,yt,gA,hFr,Q7e,pFr,_Fr,ef,uFr,H7e,bFr,vFr,U7e,TFr,FFr,CFr,J7e,MFr,EFr,hA,yFr,xo,pA,wFr,Y7e,AFr,LFr,Ln,BFr,K7e,xFr,kFr,Z7e,RFr,SFr,ebe,PFr,$Fr,IFr,Te,AC,obe,DFr,jFr,XX,NFr,qFr,GFr,LC,rbe,OFr,XFr,VX,VFr,zFr,WFr,BC,tbe,QFr,HFr,zX,UFr,JFr,YFr,xC,abe,KFr,ZFr,WX,eCr,oCr,rCr,kC,nbe,tCr,aCr,QX,nCr,sCr,lCr,RC,sbe,iCr,dCr,HX,cCr,fCr,mCr,SC,lbe,gCr,hCr,UX,pCr,_Cr,uCr,PC,ibe,bCr,vCr,JX,TCr,FCr,CCr,$C,dbe,MCr,ECr,YX,yCr,wCr,ACr,cbe,LCr,BCr,_A,bxe,of,IC,fbe,uA,xCr,mbe,kCr,vxe,Sr,bA,RCr,rf,SCr,gbe,PCr,$Cr,hbe,ICr,DCr,jCr,vA,NCr,pbe,qCr,GCr,OCr,wt,TA,XCr,_be,VCr,zCr,tf,WCr,ube,QCr,HCr,bbe,UCr,JCr,YCr,vbe,KCr,ZCr,FA,e4r,ko,CA,o4r,Tbe,r4r,t4r,Bn,a4r,Fbe,n4r,s4r,Cbe,l4r,i4r,Mbe,d4r,c4r,f4r,Fe,DC,Ebe,m4r,g4r,KX,h4r,p4r,_4r,jC,ybe,u4r,b4r,ZX,v4r,T4r,F4r,NC,wbe,C4r,M4r,eV,E4r,y4r,w4r,qC,Abe,A4r,L4r,oV,B4r,x4r,k4r,GC,Lbe,R4r,S4r,rV,P4r,$4r,I4r,OC,Bbe,D4r,j4r,tV,N4r,q4r,G4r,XC,xbe,O4r,X4r,aV,V4r,z4r,W4r,VC,kbe,Q4r,H4r,nV,U4r,J4r,Y4r,zC,Rbe,K4r,Z4r,sV,eMr,oMr,rMr,Sbe,tMr,aMr,MA,Txe,af,WC,Pbe,EA,nMr,$be,sMr,Fxe,Pr,yA,lMr,nf,iMr,Ibe,dMr,cMr,Dbe,fMr,mMr,gMr,wA,hMr,jbe,pMr,_Mr,uMr,At,AA,bMr,Nbe,vMr,TMr,sf,FMr,qbe,CMr,MMr,Gbe,EMr,yMr,wMr,Obe,AMr,LMr,LA,BMr,Ro,BA,xMr,Xbe,kMr,RMr,xn,SMr,Vbe,PMr,$Mr,zbe,IMr,DMr,Wbe,jMr,NMr,qMr,Ce,QC,Qbe,GMr,OMr,lV,XMr,VMr,zMr,HC,Hbe,WMr,QMr,iV,HMr,UMr,JMr,UC,Ube,YMr,KMr,dV,ZMr,eEr,oEr,JC,Jbe,rEr,tEr,cV,aEr,nEr,sEr,YC,Ybe,lEr,iEr,fV,dEr,cEr,fEr,KC,Kbe,mEr,gEr,mV,hEr,pEr,_Er,ZC,Zbe,uEr,bEr,gV,vEr,TEr,FEr,e4,e5e,CEr,MEr,hV,EEr,yEr,wEr,o4,o5e,AEr,LEr,pV,BEr,xEr,kEr,r5e,REr,SEr,xA,Cxe,lf,r4,t5e,kA,PEr,a5e,$Er,Mxe,$r,RA,IEr,df,DEr,n5e,jEr,NEr,s5e,qEr,GEr,OEr,SA,XEr,l5e,VEr,zEr,WEr,Lt,PA,QEr,i5e,HEr,UEr,cf,JEr,d5e,YEr,KEr,c5e,ZEr,e3r,o3r,f5e,r3r,t3r,$A,a3r,So,IA,n3r,m5e,s3r,l3r,kn,i3r,g5e,d3r,c3r,h5e,f3r,m3r,p5e,g3r,h3r,p3r,so,t4,_5e,_3r,u3r,_V,b3r,v3r,T3r,a4,u5e,F3r,C3r,uV,M3r,E3r,y3r,n4,b5e,w3r,A3r,bV,L3r,B3r,x3r,s4,v5e,k3r,R3r,vV,S3r,P3r,$3r,l4,T5e,I3r,D3r,TV,j3r,N3r,q3r,i4,F5e,G3r,O3r,FV,X3r,V3r,z3r,d4,C5e,W3r,Q3r,CV,H3r,U3r,J3r,M5e,Y3r,K3r,DA,Exe,ff,c4,E5e,jA,Z3r,y5e,eyr,yxe,Ir,NA,oyr,mf,ryr,w5e,tyr,ayr,A5e,nyr,syr,lyr,qA,iyr,L5e,dyr,cyr,fyr,Bt,GA,myr,B5e,gyr,hyr,gf,pyr,x5e,_yr,uyr,k5e,byr,vyr,Tyr,R5e,Fyr,Cyr,OA,Myr,Po,XA,Eyr,S5e,yyr,wyr,Rn,Ayr,P5e,Lyr,Byr,$5e,xyr,kyr,I5e,Ryr,Syr,Pyr,lo,f4,D5e,$yr,Iyr,MV,Dyr,jyr,Nyr,m4,j5e,qyr,Gyr,EV,Oyr,Xyr,Vyr,g4,N5e,zyr,Wyr,yV,Qyr,Hyr,Uyr,h4,q5e,Jyr,Yyr,wV,Kyr,Zyr,ewr,p4,G5e,owr,rwr,AV,twr,awr,nwr,_4,O5e,swr,lwr,LV,iwr,dwr,cwr,u4,X5e,fwr,mwr,BV,gwr,hwr,pwr,V5e,_wr,uwr,VA,wxe,hf,b4,z5e,zA,bwr,W5e,vwr,Axe,Dr,WA,Twr,pf,Fwr,Q5e,Cwr,Mwr,H5e,Ewr,ywr,wwr,QA,Awr,U5e,Lwr,Bwr,xwr,xt,HA,kwr,J5e,Rwr,Swr,_f,Pwr,Y5e,$wr,Iwr,K5e,Dwr,jwr,Nwr,Z5e,qwr,Gwr,UA,Owr,$o,JA,Xwr,e2e,Vwr,zwr,Sn,Wwr,o2e,Qwr,Hwr,r2e,Uwr,Jwr,t2e,Ywr,Kwr,Zwr,a2e,v4,n2e,e6r,o6r,xV,r6r,t6r,a6r,s2e,n6r,s6r,YA,Lxe,uf,T4,l2e,KA,l6r,i2e,i6r,Bxe,jr,ZA,d6r,bf,c6r,d2e,f6r,m6r,c2e,g6r,h6r,p6r,eL,_6r,f2e,u6r,b6r,v6r,kt,oL,T6r,m2e,F6r,C6r,vf,M6r,g2e,E6r,y6r,h2e,w6r,A6r,L6r,p2e,B6r,x6r,rL,k6r,Io,tL,R6r,_2e,S6r,P6r,Pn,$6r,u2e,I6r,D6r,b2e,j6r,N6r,v2e,q6r,G6r,O6r,aL,F4,T2e,X6r,V6r,kV,z6r,W6r,Q6r,C4,F2e,H6r,U6r,RV,J6r,Y6r,K6r,C2e,Z6r,eAr,nL,xxe,Tf,M4,M2e,sL,oAr,E2e,rAr,kxe,Nr,lL,tAr,Ff,aAr,y2e,nAr,sAr,w2e,lAr,iAr,dAr,iL,cAr,A2e,fAr,mAr,gAr,Rt,dL,hAr,L2e,pAr,_Ar,Cf,uAr,B2e,bAr,vAr,x2e,TAr,FAr,CAr,k2e,MAr,EAr,cL,yAr,Do,fL,wAr,R2e,AAr,LAr,$n,BAr,S2e,xAr,kAr,P2e,RAr,SAr,$2e,PAr,$Ar,IAr,I2e,E4,D2e,DAr,jAr,SV,NAr,qAr,GAr,j2e,OAr,XAr,mL,Rxe;return ce=new V({}),$a=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased"),',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),LM=new V({}),BM=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Bf=new VAr({props:{warning:"&lcub;true}",$$slots:{default:[Ibt]},$$scope:{ctx:Ai}}}),xM=new V({}),kM=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/configuration_auto.py#L526"}}),PM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/configuration_auto.py#L549",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),$M=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),IM=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/configuration_auto.py#L671",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),DM=new V({}),jM=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/tokenization_auto.py#L351"}}),GM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15770/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),OM=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),XM=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),VM=new V({}),zM=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/feature_extraction_auto.py#L170"}}),HM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/feature_extraction_auto.py#L184",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15770/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),mh=new VAr({props:{$$slots:{default:[Dbt]},$$scope:{ctx:Ai}}}),UM=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),JM=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/feature_extraction_auto.py#L311",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),YM=new V({}),KM=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/processing_auto.py#L71"}}),oE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Mh=new VAr({props:{$$slots:{default:[jbt]},$$scope:{ctx:Ai}}}),rE=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),tE=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),aE=new V({}),nE=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L688"}}),lE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),iE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),dE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fE=new V({}),mE=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L695"}}),hE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),pE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),_E=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bE=new V({}),vE=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L710"}}),FE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),CE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),ME=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yE=new V({}),wE=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L717"}}),LE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),BE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),xE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RE=new V({}),SE=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L724"}}),$E=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),IE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),DE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NE=new V({}),qE=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L733"}}),OE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),XE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),VE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WE=new V({}),QE=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L767"}}),UE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),JE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),YE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),KE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZE=new V({}),e3=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L774"}}),r3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),t3=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),a3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n3=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s3=new V({}),l3=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L760"}}),d3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),c3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),f3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g3=new V({}),h3=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L742"}}),_3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),u3=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),b3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v3=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T3=new V({}),F3=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L749"}}),M3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),E3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),y3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A3=new V({}),L3=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L783"}}),x3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15770/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15770/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15770/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),k3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),R3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P3=new V({}),$3=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L813"}}),D3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),j3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),N3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G3=new V({}),O3=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L820"}}),V3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),z3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),W3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H3=new V({}),U3=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L843"}}),Y3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),K3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Z3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oy=new V({}),ry=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L827"}}),ay=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),sy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iy=new V({}),dy=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L834"}}),fy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),my=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),gy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),py=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_y=new V({}),uy=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L852"}}),vy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),Fy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),My=new V({}),Ey=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L859"}}),wy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Ay=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),Ly=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),By=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xy=new V({}),ky=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L806"}}),Sy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Py=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),$y=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Iy=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dy=new V({}),jy=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L790"}}),qy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Gy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Oy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vy=new V({}),zy=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_auto.py#L797"}}),Qy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Hy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Uy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Yy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ky=new V({}),Zy=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_tf_auto.py#L373"}}),ow=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),rw=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),tw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aw=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nw=new V({}),sw=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_tf_auto.py#L380"}}),iw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),dw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),cw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mw=new V({}),gw=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_tf_auto.py#L395"}}),pw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),_w=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),uw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vw=new V({}),Tw=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_tf_auto.py#L402"}}),Cw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Mw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),Ew=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Aw=new V({}),Lw=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),xw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),kw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),Rw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Pw=new V({}),$w=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),Dw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),jw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),Nw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gw=new V({}),Ow=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),Vw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),zw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),Ww=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hw=new V({}),Uw=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),Yw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Kw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Zw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o6=new V({}),r6=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),a6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),n6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),s6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i6=new V({}),d6=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),f6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),m6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),g6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p6=new V({}),_6=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),b6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),v6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),T6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),F6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C6=new V({}),M6=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),y6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),w6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),A6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),L6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B6=new V({}),x6=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),R6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),S6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),P6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I6=new V({}),D6=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_flax_auto.py#L229"}}),N6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),q6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),G6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X6=new V({}),V6=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),W6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),Q6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),H6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J6=new V({}),Y6=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_flax_auto.py#L236"}}),Z6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
</ul>`,name:"config"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),oA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tA=new V({}),aA=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),sA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),iA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cA=new V({}),fA=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),gA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),pA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_A=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uA=new V({}),bA=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_flax_auto.py#L266"}}),TA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),CA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),MA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EA=new V({}),yA=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_flax_auto.py#L275"}}),AA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),LA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),BA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kA=new V({}),RA=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),PA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),IA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),DA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jA=new V({}),NA=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_flax_auto.py#L291"}}),GA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),OA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),XA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zA=new V({}),WA=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),HA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),UA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),JA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),YA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KA=new V({}),ZA=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_flax_auto.py#L307"}}),oL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15770/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),rL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),tL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sL=new V({}),lL=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/modeling_flax_auto.py#L316"}}),dL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15770/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15770/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),cL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),fL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),xe=l(),de=a("h1"),me=a("a"),no=a("span"),f(ce.$$.fragment),be=l(),Go=a("span"),Li=o("Auto Classes"),Ef=l(),sa=a("p"),Bi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=a("code"),EM=o("from_pretrained()"),yf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),we=l(),io=a("p"),ki=o("Instantiating one of "),In=a("a"),yM=o("AutoConfig"),Dn=o(", "),jn=a("a"),wM=o("AutoModel"),Ri=o(`, and
`),Nn=a("a"),AM=o("AutoTokenizer"),Si=o(" will directly create a class of the relevant architecture. For instance"),wf=l(),f($a.$$.fragment),co=l(),ge=a("p"),d8=o("will create a model that is an instance of "),Pi=a("a"),c8=o("BertModel"),f8=o("."),Oo=l(),Ia=a("p"),m8=o("There is one class of "),Af=a("code"),g8=o("AutoModel"),XRe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),S9e=l(),$i=a("h2"),Lf=a("a"),EW=a("span"),f(LM.$$.fragment),VRe=l(),yW=a("span"),zRe=o("Extending the Auto Classes"),P9e=l(),qn=a("p"),WRe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),wW=a("code"),QRe=o("NewModel"),HRe=o(", make sure you have a "),AW=a("code"),URe=o("NewModelConfig"),JRe=o(` then you can add those to the auto
classes like this:`),$9e=l(),f(BM.$$.fragment),I9e=l(),h8=a("p"),YRe=o("You will then be able to use the auto classes like you would usually do!"),D9e=l(),f(Bf.$$.fragment),j9e=l(),Ii=a("h2"),xf=a("a"),LW=a("span"),f(xM.$$.fragment),KRe=l(),BW=a("span"),ZRe=o("AutoConfig"),N9e=l(),Xo=a("div"),f(kM.$$.fragment),eSe=l(),RM=a("p"),oSe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),p8=a("a"),rSe=o("from_pretrained()"),tSe=o(" class method."),aSe=l(),SM=a("p"),nSe=o("This class cannot be instantiated directly using "),xW=a("code"),sSe=o("__init__()"),lSe=o(" (throws an error)."),iSe=l(),fo=a("div"),f(PM.$$.fragment),dSe=l(),kW=a("p"),cSe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),fSe=l(),Di=a("p"),mSe=o("The configuration class to instantiate is selected based on the "),RW=a("code"),gSe=o("model_type"),hSe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),SW=a("code"),pSe=o("pretrained_model_name_or_path"),_Se=o(":"),uSe=l(),v=a("ul"),kf=a("li"),PW=a("strong"),bSe=o("albert"),vSe=o(" \u2014 "),_8=a("a"),TSe=o("AlbertConfig"),FSe=o(" (ALBERT model)"),CSe=l(),Rf=a("li"),$W=a("strong"),MSe=o("bart"),ESe=o(" \u2014 "),u8=a("a"),ySe=o("BartConfig"),wSe=o(" (BART model)"),ASe=l(),Sf=a("li"),IW=a("strong"),LSe=o("beit"),BSe=o(" \u2014 "),b8=a("a"),xSe=o("BeitConfig"),kSe=o(" (BEiT model)"),RSe=l(),Pf=a("li"),DW=a("strong"),SSe=o("bert"),PSe=o(" \u2014 "),v8=a("a"),$Se=o("BertConfig"),ISe=o(" (BERT model)"),DSe=l(),$f=a("li"),jW=a("strong"),jSe=o("bert-generation"),NSe=o(" \u2014 "),T8=a("a"),qSe=o("BertGenerationConfig"),GSe=o(" (Bert Generation model)"),OSe=l(),If=a("li"),NW=a("strong"),XSe=o("big_bird"),VSe=o(" \u2014 "),F8=a("a"),zSe=o("BigBirdConfig"),WSe=o(" (BigBird model)"),QSe=l(),Df=a("li"),qW=a("strong"),HSe=o("bigbird_pegasus"),USe=o(" \u2014 "),C8=a("a"),JSe=o("BigBirdPegasusConfig"),YSe=o(" (BigBirdPegasus model)"),KSe=l(),jf=a("li"),GW=a("strong"),ZSe=o("blenderbot"),ePe=o(" \u2014 "),M8=a("a"),oPe=o("BlenderbotConfig"),rPe=o(" (Blenderbot model)"),tPe=l(),Nf=a("li"),OW=a("strong"),aPe=o("blenderbot-small"),nPe=o(" \u2014 "),E8=a("a"),sPe=o("BlenderbotSmallConfig"),lPe=o(" (BlenderbotSmall model)"),iPe=l(),qf=a("li"),XW=a("strong"),dPe=o("camembert"),cPe=o(" \u2014 "),y8=a("a"),fPe=o("CamembertConfig"),mPe=o(" (CamemBERT model)"),gPe=l(),Gf=a("li"),VW=a("strong"),hPe=o("canine"),pPe=o(" \u2014 "),w8=a("a"),_Pe=o("CanineConfig"),uPe=o(" (Canine model)"),bPe=l(),Of=a("li"),zW=a("strong"),vPe=o("clip"),TPe=o(" \u2014 "),A8=a("a"),FPe=o("CLIPConfig"),CPe=o(" (CLIP model)"),MPe=l(),Xf=a("li"),WW=a("strong"),EPe=o("convbert"),yPe=o(" \u2014 "),L8=a("a"),wPe=o("ConvBertConfig"),APe=o(" (ConvBERT model)"),LPe=l(),Vf=a("li"),QW=a("strong"),BPe=o("convnext"),xPe=o(" \u2014 "),B8=a("a"),kPe=o("ConvNextConfig"),RPe=o(" (ConvNext model)"),SPe=l(),zf=a("li"),HW=a("strong"),PPe=o("ctrl"),$Pe=o(" \u2014 "),x8=a("a"),IPe=o("CTRLConfig"),DPe=o(" (CTRL model)"),jPe=l(),Wf=a("li"),UW=a("strong"),NPe=o("data2vec-audio"),qPe=o(" \u2014 "),k8=a("a"),GPe=o("Data2VecAudioConfig"),OPe=o(" (Data2VecAudio model)"),XPe=l(),Qf=a("li"),JW=a("strong"),VPe=o("data2vec-text"),zPe=o(" \u2014 "),R8=a("a"),WPe=o("Data2VecTextConfig"),QPe=o(" (Data2VecText model)"),HPe=l(),Hf=a("li"),YW=a("strong"),UPe=o("deberta"),JPe=o(" \u2014 "),S8=a("a"),YPe=o("DebertaConfig"),KPe=o(" (DeBERTa model)"),ZPe=l(),Uf=a("li"),KW=a("strong"),e$e=o("deberta-v2"),o$e=o(" \u2014 "),P8=a("a"),r$e=o("DebertaV2Config"),t$e=o(" (DeBERTa-v2 model)"),a$e=l(),Jf=a("li"),ZW=a("strong"),n$e=o("deit"),s$e=o(" \u2014 "),$8=a("a"),l$e=o("DeiTConfig"),i$e=o(" (DeiT model)"),d$e=l(),Yf=a("li"),eQ=a("strong"),c$e=o("detr"),f$e=o(" \u2014 "),I8=a("a"),m$e=o("DetrConfig"),g$e=o(" (DETR model)"),h$e=l(),Kf=a("li"),oQ=a("strong"),p$e=o("distilbert"),_$e=o(" \u2014 "),D8=a("a"),u$e=o("DistilBertConfig"),b$e=o(" (DistilBERT model)"),v$e=l(),Zf=a("li"),rQ=a("strong"),T$e=o("dpr"),F$e=o(" \u2014 "),j8=a("a"),C$e=o("DPRConfig"),M$e=o(" (DPR model)"),E$e=l(),em=a("li"),tQ=a("strong"),y$e=o("electra"),w$e=o(" \u2014 "),N8=a("a"),A$e=o("ElectraConfig"),L$e=o(" (ELECTRA model)"),B$e=l(),om=a("li"),aQ=a("strong"),x$e=o("encoder-decoder"),k$e=o(" \u2014 "),q8=a("a"),R$e=o("EncoderDecoderConfig"),S$e=o(" (Encoder decoder model)"),P$e=l(),rm=a("li"),nQ=a("strong"),$$e=o("flaubert"),I$e=o(" \u2014 "),G8=a("a"),D$e=o("FlaubertConfig"),j$e=o(" (FlauBERT model)"),N$e=l(),tm=a("li"),sQ=a("strong"),q$e=o("fnet"),G$e=o(" \u2014 "),O8=a("a"),O$e=o("FNetConfig"),X$e=o(" (FNet model)"),V$e=l(),am=a("li"),lQ=a("strong"),z$e=o("fsmt"),W$e=o(" \u2014 "),X8=a("a"),Q$e=o("FSMTConfig"),H$e=o(" (FairSeq Machine-Translation model)"),U$e=l(),nm=a("li"),iQ=a("strong"),J$e=o("funnel"),Y$e=o(" \u2014 "),V8=a("a"),K$e=o("FunnelConfig"),Z$e=o(" (Funnel Transformer model)"),eIe=l(),sm=a("li"),dQ=a("strong"),oIe=o("gpt2"),rIe=o(" \u2014 "),z8=a("a"),tIe=o("GPT2Config"),aIe=o(" (OpenAI GPT-2 model)"),nIe=l(),lm=a("li"),cQ=a("strong"),sIe=o("gpt_neo"),lIe=o(" \u2014 "),W8=a("a"),iIe=o("GPTNeoConfig"),dIe=o(" (GPT Neo model)"),cIe=l(),im=a("li"),fQ=a("strong"),fIe=o("gptj"),mIe=o(" \u2014 "),Q8=a("a"),gIe=o("GPTJConfig"),hIe=o(" (GPT-J model)"),pIe=l(),dm=a("li"),mQ=a("strong"),_Ie=o("hubert"),uIe=o(" \u2014 "),H8=a("a"),bIe=o("HubertConfig"),vIe=o(" (Hubert model)"),TIe=l(),cm=a("li"),gQ=a("strong"),FIe=o("ibert"),CIe=o(" \u2014 "),U8=a("a"),MIe=o("IBertConfig"),EIe=o(" (I-BERT model)"),yIe=l(),fm=a("li"),hQ=a("strong"),wIe=o("imagegpt"),AIe=o(" \u2014 "),J8=a("a"),LIe=o("ImageGPTConfig"),BIe=o(" (ImageGPT model)"),xIe=l(),mm=a("li"),pQ=a("strong"),kIe=o("layoutlm"),RIe=o(" \u2014 "),Y8=a("a"),SIe=o("LayoutLMConfig"),PIe=o(" (LayoutLM model)"),$Ie=l(),gm=a("li"),_Q=a("strong"),IIe=o("layoutlmv2"),DIe=o(" \u2014 "),K8=a("a"),jIe=o("LayoutLMv2Config"),NIe=o(" (LayoutLMv2 model)"),qIe=l(),hm=a("li"),uQ=a("strong"),GIe=o("led"),OIe=o(" \u2014 "),Z8=a("a"),XIe=o("LEDConfig"),VIe=o(" (LED model)"),zIe=l(),pm=a("li"),bQ=a("strong"),WIe=o("longformer"),QIe=o(" \u2014 "),e9=a("a"),HIe=o("LongformerConfig"),UIe=o(" (Longformer model)"),JIe=l(),_m=a("li"),vQ=a("strong"),YIe=o("luke"),KIe=o(" \u2014 "),o9=a("a"),ZIe=o("LukeConfig"),eDe=o(" (LUKE model)"),oDe=l(),um=a("li"),TQ=a("strong"),rDe=o("lxmert"),tDe=o(" \u2014 "),r9=a("a"),aDe=o("LxmertConfig"),nDe=o(" (LXMERT model)"),sDe=l(),bm=a("li"),FQ=a("strong"),lDe=o("m2m_100"),iDe=o(" \u2014 "),t9=a("a"),dDe=o("M2M100Config"),cDe=o(" (M2M100 model)"),fDe=l(),vm=a("li"),CQ=a("strong"),mDe=o("marian"),gDe=o(" \u2014 "),a9=a("a"),hDe=o("MarianConfig"),pDe=o(" (Marian model)"),_De=l(),Tm=a("li"),MQ=a("strong"),uDe=o("mbart"),bDe=o(" \u2014 "),n9=a("a"),vDe=o("MBartConfig"),TDe=o(" (mBART model)"),FDe=l(),Fm=a("li"),EQ=a("strong"),CDe=o("megatron-bert"),MDe=o(" \u2014 "),s9=a("a"),EDe=o("MegatronBertConfig"),yDe=o(" (MegatronBert model)"),wDe=l(),Cm=a("li"),yQ=a("strong"),ADe=o("mobilebert"),LDe=o(" \u2014 "),l9=a("a"),BDe=o("MobileBertConfig"),xDe=o(" (MobileBERT model)"),kDe=l(),Mm=a("li"),wQ=a("strong"),RDe=o("mpnet"),SDe=o(" \u2014 "),i9=a("a"),PDe=o("MPNetConfig"),$De=o(" (MPNet model)"),IDe=l(),Em=a("li"),AQ=a("strong"),DDe=o("mt5"),jDe=o(" \u2014 "),d9=a("a"),NDe=o("MT5Config"),qDe=o(" (mT5 model)"),GDe=l(),ym=a("li"),LQ=a("strong"),ODe=o("nystromformer"),XDe=o(" \u2014 "),c9=a("a"),VDe=o("NystromformerConfig"),zDe=o(" (Nystromformer model)"),WDe=l(),wm=a("li"),BQ=a("strong"),QDe=o("openai-gpt"),HDe=o(" \u2014 "),f9=a("a"),UDe=o("OpenAIGPTConfig"),JDe=o(" (OpenAI GPT model)"),YDe=l(),Am=a("li"),xQ=a("strong"),KDe=o("pegasus"),ZDe=o(" \u2014 "),m9=a("a"),eje=o("PegasusConfig"),oje=o(" (Pegasus model)"),rje=l(),Lm=a("li"),kQ=a("strong"),tje=o("perceiver"),aje=o(" \u2014 "),g9=a("a"),nje=o("PerceiverConfig"),sje=o(" (Perceiver model)"),lje=l(),Bm=a("li"),RQ=a("strong"),ije=o("plbart"),dje=o(" \u2014 "),h9=a("a"),cje=o("PLBartConfig"),fje=o(" (PLBart model)"),mje=l(),xm=a("li"),SQ=a("strong"),gje=o("poolformer"),hje=o(" \u2014 "),p9=a("a"),pje=o("PoolFormerConfig"),_je=o(" (PoolFormer model)"),uje=l(),km=a("li"),PQ=a("strong"),bje=o("prophetnet"),vje=o(" \u2014 "),_9=a("a"),Tje=o("ProphetNetConfig"),Fje=o(" (ProphetNet model)"),Cje=l(),Rm=a("li"),$Q=a("strong"),Mje=o("qdqbert"),Eje=o(" \u2014 "),u9=a("a"),yje=o("QDQBertConfig"),wje=o(" (QDQBert model)"),Aje=l(),Sm=a("li"),IQ=a("strong"),Lje=o("rag"),Bje=o(" \u2014 "),b9=a("a"),xje=o("RagConfig"),kje=o(" (RAG model)"),Rje=l(),Pm=a("li"),DQ=a("strong"),Sje=o("realm"),Pje=o(" \u2014 "),v9=a("a"),$je=o("RealmConfig"),Ije=o(" (Realm model)"),Dje=l(),$m=a("li"),jQ=a("strong"),jje=o("reformer"),Nje=o(" \u2014 "),T9=a("a"),qje=o("ReformerConfig"),Gje=o(" (Reformer model)"),Oje=l(),Im=a("li"),NQ=a("strong"),Xje=o("rembert"),Vje=o(" \u2014 "),F9=a("a"),zje=o("RemBertConfig"),Wje=o(" (RemBERT model)"),Qje=l(),Dm=a("li"),qQ=a("strong"),Hje=o("resnet"),Uje=o(" \u2014 "),C9=a("a"),Jje=o("ResNetConfig"),Yje=o(" (ResNet model)"),Kje=l(),jm=a("li"),GQ=a("strong"),Zje=o("retribert"),eNe=o(" \u2014 "),M9=a("a"),oNe=o("RetriBertConfig"),rNe=o(" (RetriBERT model)"),tNe=l(),Nm=a("li"),OQ=a("strong"),aNe=o("roberta"),nNe=o(" \u2014 "),E9=a("a"),sNe=o("RobertaConfig"),lNe=o(" (RoBERTa model)"),iNe=l(),qm=a("li"),XQ=a("strong"),dNe=o("roformer"),cNe=o(" \u2014 "),y9=a("a"),fNe=o("RoFormerConfig"),mNe=o(" (RoFormer model)"),gNe=l(),Gm=a("li"),VQ=a("strong"),hNe=o("segformer"),pNe=o(" \u2014 "),w9=a("a"),_Ne=o("SegformerConfig"),uNe=o(" (SegFormer model)"),bNe=l(),Om=a("li"),zQ=a("strong"),vNe=o("sew"),TNe=o(" \u2014 "),A9=a("a"),FNe=o("SEWConfig"),CNe=o(" (SEW model)"),MNe=l(),Xm=a("li"),WQ=a("strong"),ENe=o("sew-d"),yNe=o(" \u2014 "),L9=a("a"),wNe=o("SEWDConfig"),ANe=o(" (SEW-D model)"),LNe=l(),Vm=a("li"),QQ=a("strong"),BNe=o("speech-encoder-decoder"),xNe=o(" \u2014 "),B9=a("a"),kNe=o("SpeechEncoderDecoderConfig"),RNe=o(" (Speech Encoder decoder model)"),SNe=l(),zm=a("li"),HQ=a("strong"),PNe=o("speech_to_text"),$Ne=o(" \u2014 "),x9=a("a"),INe=o("Speech2TextConfig"),DNe=o(" (Speech2Text model)"),jNe=l(),Wm=a("li"),UQ=a("strong"),NNe=o("speech_to_text_2"),qNe=o(" \u2014 "),k9=a("a"),GNe=o("Speech2Text2Config"),ONe=o(" (Speech2Text2 model)"),XNe=l(),Qm=a("li"),JQ=a("strong"),VNe=o("splinter"),zNe=o(" \u2014 "),R9=a("a"),WNe=o("SplinterConfig"),QNe=o(" (Splinter model)"),HNe=l(),Hm=a("li"),YQ=a("strong"),UNe=o("squeezebert"),JNe=o(" \u2014 "),S9=a("a"),YNe=o("SqueezeBertConfig"),KNe=o(" (SqueezeBERT model)"),ZNe=l(),Um=a("li"),KQ=a("strong"),eqe=o("swin"),oqe=o(" \u2014 "),P9=a("a"),rqe=o("SwinConfig"),tqe=o(" (Swin model)"),aqe=l(),Jm=a("li"),ZQ=a("strong"),nqe=o("t5"),sqe=o(" \u2014 "),$9=a("a"),lqe=o("T5Config"),iqe=o(" (T5 model)"),dqe=l(),Ym=a("li"),eH=a("strong"),cqe=o("tapas"),fqe=o(" \u2014 "),I9=a("a"),mqe=o("TapasConfig"),gqe=o(" (TAPAS model)"),hqe=l(),Km=a("li"),oH=a("strong"),pqe=o("transfo-xl"),_qe=o(" \u2014 "),D9=a("a"),uqe=o("TransfoXLConfig"),bqe=o(" (Transformer-XL model)"),vqe=l(),Zm=a("li"),rH=a("strong"),Tqe=o("trocr"),Fqe=o(" \u2014 "),j9=a("a"),Cqe=o("TrOCRConfig"),Mqe=o(" (TrOCR model)"),Eqe=l(),eg=a("li"),tH=a("strong"),yqe=o("unispeech"),wqe=o(" \u2014 "),N9=a("a"),Aqe=o("UniSpeechConfig"),Lqe=o(" (UniSpeech model)"),Bqe=l(),og=a("li"),aH=a("strong"),xqe=o("unispeech-sat"),kqe=o(" \u2014 "),q9=a("a"),Rqe=o("UniSpeechSatConfig"),Sqe=o(" (UniSpeechSat model)"),Pqe=l(),rg=a("li"),nH=a("strong"),$qe=o("vilt"),Iqe=o(" \u2014 "),G9=a("a"),Dqe=o("ViltConfig"),jqe=o(" (ViLT model)"),Nqe=l(),tg=a("li"),sH=a("strong"),qqe=o("vision-encoder-decoder"),Gqe=o(" \u2014 "),O9=a("a"),Oqe=o("VisionEncoderDecoderConfig"),Xqe=o(" (Vision Encoder decoder model)"),Vqe=l(),ag=a("li"),lH=a("strong"),zqe=o("vision-text-dual-encoder"),Wqe=o(" \u2014 "),X9=a("a"),Qqe=o("VisionTextDualEncoderConfig"),Hqe=o(" (VisionTextDualEncoder model)"),Uqe=l(),ng=a("li"),iH=a("strong"),Jqe=o("visual_bert"),Yqe=o(" \u2014 "),V9=a("a"),Kqe=o("VisualBertConfig"),Zqe=o(" (VisualBert model)"),eGe=l(),sg=a("li"),dH=a("strong"),oGe=o("vit"),rGe=o(" \u2014 "),z9=a("a"),tGe=o("ViTConfig"),aGe=o(" (ViT model)"),nGe=l(),lg=a("li"),cH=a("strong"),sGe=o("vit_mae"),lGe=o(" \u2014 "),W9=a("a"),iGe=o("ViTMAEConfig"),dGe=o(" (ViTMAE model)"),cGe=l(),ig=a("li"),fH=a("strong"),fGe=o("wav2vec2"),mGe=o(" \u2014 "),Q9=a("a"),gGe=o("Wav2Vec2Config"),hGe=o(" (Wav2Vec2 model)"),pGe=l(),dg=a("li"),mH=a("strong"),_Ge=o("wavlm"),uGe=o(" \u2014 "),H9=a("a"),bGe=o("WavLMConfig"),vGe=o(" (WavLM model)"),TGe=l(),cg=a("li"),gH=a("strong"),FGe=o("xglm"),CGe=o(" \u2014 "),U9=a("a"),MGe=o("XGLMConfig"),EGe=o(" (XGLM model)"),yGe=l(),fg=a("li"),hH=a("strong"),wGe=o("xlm"),AGe=o(" \u2014 "),J9=a("a"),LGe=o("XLMConfig"),BGe=o(" (XLM model)"),xGe=l(),mg=a("li"),pH=a("strong"),kGe=o("xlm-prophetnet"),RGe=o(" \u2014 "),Y9=a("a"),SGe=o("XLMProphetNetConfig"),PGe=o(" (XLMProphetNet model)"),$Ge=l(),gg=a("li"),_H=a("strong"),IGe=o("xlm-roberta"),DGe=o(" \u2014 "),K9=a("a"),jGe=o("XLMRobertaConfig"),NGe=o(" (XLM-RoBERTa model)"),qGe=l(),hg=a("li"),uH=a("strong"),GGe=o("xlm-roberta-xl"),OGe=o(" \u2014 "),Z9=a("a"),XGe=o("XLMRobertaXLConfig"),VGe=o(" (XLM-RoBERTa-XL model)"),zGe=l(),pg=a("li"),bH=a("strong"),WGe=o("xlnet"),QGe=o(" \u2014 "),eB=a("a"),HGe=o("XLNetConfig"),UGe=o(" (XLNet model)"),JGe=l(),_g=a("li"),vH=a("strong"),YGe=o("yoso"),KGe=o(" \u2014 "),oB=a("a"),ZGe=o("YosoConfig"),eOe=o(" (YOSO model)"),oOe=l(),TH=a("p"),rOe=o("Examples:"),tOe=l(),f($M.$$.fragment),aOe=l(),ug=a("div"),f(IM.$$.fragment),nOe=l(),FH=a("p"),sOe=o("Register a new configuration for this class."),q9e=l(),ji=a("h2"),bg=a("a"),CH=a("span"),f(DM.$$.fragment),lOe=l(),MH=a("span"),iOe=o("AutoTokenizer"),G9e=l(),Vo=a("div"),f(jM.$$.fragment),dOe=l(),NM=a("p"),cOe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),rB=a("a"),fOe=o("AutoTokenizer.from_pretrained()"),mOe=o(" class method."),gOe=l(),qM=a("p"),hOe=o("This class cannot be instantiated directly using "),EH=a("code"),pOe=o("__init__()"),_Oe=o(" (throws an error)."),uOe=l(),mo=a("div"),f(GM.$$.fragment),bOe=l(),yH=a("p"),vOe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),TOe=l(),Da=a("p"),FOe=o("The tokenizer class to instantiate is selected based on the "),wH=a("code"),COe=o("model_type"),MOe=o(` property of the config object (either
passed as an argument or loaded from `),AH=a("code"),EOe=o("pretrained_model_name_or_path"),yOe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LH=a("code"),wOe=o("pretrained_model_name_or_path"),AOe=o(":"),LOe=l(),M=a("ul"),Gn=a("li"),BH=a("strong"),BOe=o("albert"),xOe=o(" \u2014 "),tB=a("a"),kOe=o("AlbertTokenizer"),ROe=o(" or "),aB=a("a"),SOe=o("AlbertTokenizerFast"),POe=o(" (ALBERT model)"),$Oe=l(),On=a("li"),xH=a("strong"),IOe=o("bart"),DOe=o(" \u2014 "),nB=a("a"),jOe=o("BartTokenizer"),NOe=o(" or "),sB=a("a"),qOe=o("BartTokenizerFast"),GOe=o(" (BART model)"),OOe=l(),Xn=a("li"),kH=a("strong"),XOe=o("barthez"),VOe=o(" \u2014 "),lB=a("a"),zOe=o("BarthezTokenizer"),WOe=o(" or "),iB=a("a"),QOe=o("BarthezTokenizerFast"),HOe=o(" (BARThez model)"),UOe=l(),vg=a("li"),RH=a("strong"),JOe=o("bartpho"),YOe=o(" \u2014 "),dB=a("a"),KOe=o("BartphoTokenizer"),ZOe=o(" (BARTpho model)"),eXe=l(),Vn=a("li"),SH=a("strong"),oXe=o("bert"),rXe=o(" \u2014 "),cB=a("a"),tXe=o("BertTokenizer"),aXe=o(" or "),fB=a("a"),nXe=o("BertTokenizerFast"),sXe=o(" (BERT model)"),lXe=l(),Tg=a("li"),PH=a("strong"),iXe=o("bert-generation"),dXe=o(" \u2014 "),mB=a("a"),cXe=o("BertGenerationTokenizer"),fXe=o(" (Bert Generation model)"),mXe=l(),Fg=a("li"),$H=a("strong"),gXe=o("bert-japanese"),hXe=o(" \u2014 "),gB=a("a"),pXe=o("BertJapaneseTokenizer"),_Xe=o(" (BertJapanese model)"),uXe=l(),Cg=a("li"),IH=a("strong"),bXe=o("bertweet"),vXe=o(" \u2014 "),hB=a("a"),TXe=o("BertweetTokenizer"),FXe=o(" (Bertweet model)"),CXe=l(),zn=a("li"),DH=a("strong"),MXe=o("big_bird"),EXe=o(" \u2014 "),pB=a("a"),yXe=o("BigBirdTokenizer"),wXe=o(" or "),_B=a("a"),AXe=o("BigBirdTokenizerFast"),LXe=o(" (BigBird model)"),BXe=l(),Wn=a("li"),jH=a("strong"),xXe=o("bigbird_pegasus"),kXe=o(" \u2014 "),uB=a("a"),RXe=o("PegasusTokenizer"),SXe=o(" or "),bB=a("a"),PXe=o("PegasusTokenizerFast"),$Xe=o(" (BigBirdPegasus model)"),IXe=l(),Qn=a("li"),NH=a("strong"),DXe=o("blenderbot"),jXe=o(" \u2014 "),vB=a("a"),NXe=o("BlenderbotTokenizer"),qXe=o(" or "),TB=a("a"),GXe=o("BlenderbotTokenizerFast"),OXe=o(" (Blenderbot model)"),XXe=l(),Mg=a("li"),qH=a("strong"),VXe=o("blenderbot-small"),zXe=o(" \u2014 "),FB=a("a"),WXe=o("BlenderbotSmallTokenizer"),QXe=o(" (BlenderbotSmall model)"),HXe=l(),Eg=a("li"),GH=a("strong"),UXe=o("byt5"),JXe=o(" \u2014 "),CB=a("a"),YXe=o("ByT5Tokenizer"),KXe=o(" (ByT5 model)"),ZXe=l(),Hn=a("li"),OH=a("strong"),eVe=o("camembert"),oVe=o(" \u2014 "),MB=a("a"),rVe=o("CamembertTokenizer"),tVe=o(" or "),EB=a("a"),aVe=o("CamembertTokenizerFast"),nVe=o(" (CamemBERT model)"),sVe=l(),yg=a("li"),XH=a("strong"),lVe=o("canine"),iVe=o(" \u2014 "),yB=a("a"),dVe=o("CanineTokenizer"),cVe=o(" (Canine model)"),fVe=l(),Un=a("li"),VH=a("strong"),mVe=o("clip"),gVe=o(" \u2014 "),wB=a("a"),hVe=o("CLIPTokenizer"),pVe=o(" or "),AB=a("a"),_Ve=o("CLIPTokenizerFast"),uVe=o(" (CLIP model)"),bVe=l(),Jn=a("li"),zH=a("strong"),vVe=o("convbert"),TVe=o(" \u2014 "),LB=a("a"),FVe=o("ConvBertTokenizer"),CVe=o(" or "),BB=a("a"),MVe=o("ConvBertTokenizerFast"),EVe=o(" (ConvBERT model)"),yVe=l(),Yn=a("li"),WH=a("strong"),wVe=o("cpm"),AVe=o(" \u2014 "),xB=a("a"),LVe=o("CpmTokenizer"),BVe=o(" or "),QH=a("code"),xVe=o("CpmTokenizerFast"),kVe=o(" (CPM model)"),RVe=l(),wg=a("li"),HH=a("strong"),SVe=o("ctrl"),PVe=o(" \u2014 "),kB=a("a"),$Ve=o("CTRLTokenizer"),IVe=o(" (CTRL model)"),DVe=l(),Kn=a("li"),UH=a("strong"),jVe=o("deberta"),NVe=o(" \u2014 "),RB=a("a"),qVe=o("DebertaTokenizer"),GVe=o(" or "),SB=a("a"),OVe=o("DebertaTokenizerFast"),XVe=o(" (DeBERTa model)"),VVe=l(),Ag=a("li"),JH=a("strong"),zVe=o("deberta-v2"),WVe=o(" \u2014 "),PB=a("a"),QVe=o("DebertaV2Tokenizer"),HVe=o(" (DeBERTa-v2 model)"),UVe=l(),Zn=a("li"),YH=a("strong"),JVe=o("distilbert"),YVe=o(" \u2014 "),$B=a("a"),KVe=o("DistilBertTokenizer"),ZVe=o(" or "),IB=a("a"),eze=o("DistilBertTokenizerFast"),oze=o(" (DistilBERT model)"),rze=l(),es=a("li"),KH=a("strong"),tze=o("dpr"),aze=o(" \u2014 "),DB=a("a"),nze=o("DPRQuestionEncoderTokenizer"),sze=o(" or "),jB=a("a"),lze=o("DPRQuestionEncoderTokenizerFast"),ize=o(" (DPR model)"),dze=l(),os=a("li"),ZH=a("strong"),cze=o("electra"),fze=o(" \u2014 "),NB=a("a"),mze=o("ElectraTokenizer"),gze=o(" or "),qB=a("a"),hze=o("ElectraTokenizerFast"),pze=o(" (ELECTRA model)"),_ze=l(),Lg=a("li"),eU=a("strong"),uze=o("flaubert"),bze=o(" \u2014 "),GB=a("a"),vze=o("FlaubertTokenizer"),Tze=o(" (FlauBERT model)"),Fze=l(),rs=a("li"),oU=a("strong"),Cze=o("fnet"),Mze=o(" \u2014 "),OB=a("a"),Eze=o("FNetTokenizer"),yze=o(" or "),XB=a("a"),wze=o("FNetTokenizerFast"),Aze=o(" (FNet model)"),Lze=l(),Bg=a("li"),rU=a("strong"),Bze=o("fsmt"),xze=o(" \u2014 "),VB=a("a"),kze=o("FSMTTokenizer"),Rze=o(" (FairSeq Machine-Translation model)"),Sze=l(),ts=a("li"),tU=a("strong"),Pze=o("funnel"),$ze=o(" \u2014 "),zB=a("a"),Ize=o("FunnelTokenizer"),Dze=o(" or "),WB=a("a"),jze=o("FunnelTokenizerFast"),Nze=o(" (Funnel Transformer model)"),qze=l(),as=a("li"),aU=a("strong"),Gze=o("gpt2"),Oze=o(" \u2014 "),QB=a("a"),Xze=o("GPT2Tokenizer"),Vze=o(" or "),HB=a("a"),zze=o("GPT2TokenizerFast"),Wze=o(" (OpenAI GPT-2 model)"),Qze=l(),ns=a("li"),nU=a("strong"),Hze=o("gpt_neo"),Uze=o(" \u2014 "),UB=a("a"),Jze=o("GPT2Tokenizer"),Yze=o(" or "),JB=a("a"),Kze=o("GPT2TokenizerFast"),Zze=o(" (GPT Neo model)"),eWe=l(),ss=a("li"),sU=a("strong"),oWe=o("herbert"),rWe=o(" \u2014 "),YB=a("a"),tWe=o("HerbertTokenizer"),aWe=o(" or "),KB=a("a"),nWe=o("HerbertTokenizerFast"),sWe=o(" (HerBERT model)"),lWe=l(),xg=a("li"),lU=a("strong"),iWe=o("hubert"),dWe=o(" \u2014 "),ZB=a("a"),cWe=o("Wav2Vec2CTCTokenizer"),fWe=o(" (Hubert model)"),mWe=l(),ls=a("li"),iU=a("strong"),gWe=o("ibert"),hWe=o(" \u2014 "),ex=a("a"),pWe=o("RobertaTokenizer"),_We=o(" or "),ox=a("a"),uWe=o("RobertaTokenizerFast"),bWe=o(" (I-BERT model)"),vWe=l(),is=a("li"),dU=a("strong"),TWe=o("layoutlm"),FWe=o(" \u2014 "),rx=a("a"),CWe=o("LayoutLMTokenizer"),MWe=o(" or "),tx=a("a"),EWe=o("LayoutLMTokenizerFast"),yWe=o(" (LayoutLM model)"),wWe=l(),ds=a("li"),cU=a("strong"),AWe=o("layoutlmv2"),LWe=o(" \u2014 "),ax=a("a"),BWe=o("LayoutLMv2Tokenizer"),xWe=o(" or "),nx=a("a"),kWe=o("LayoutLMv2TokenizerFast"),RWe=o(" (LayoutLMv2 model)"),SWe=l(),cs=a("li"),fU=a("strong"),PWe=o("layoutxlm"),$We=o(" \u2014 "),sx=a("a"),IWe=o("LayoutXLMTokenizer"),DWe=o(" or "),lx=a("a"),jWe=o("LayoutXLMTokenizerFast"),NWe=o(" (LayoutXLM model)"),qWe=l(),fs=a("li"),mU=a("strong"),GWe=o("led"),OWe=o(" \u2014 "),ix=a("a"),XWe=o("LEDTokenizer"),VWe=o(" or "),dx=a("a"),zWe=o("LEDTokenizerFast"),WWe=o(" (LED model)"),QWe=l(),ms=a("li"),gU=a("strong"),HWe=o("longformer"),UWe=o(" \u2014 "),cx=a("a"),JWe=o("LongformerTokenizer"),YWe=o(" or "),fx=a("a"),KWe=o("LongformerTokenizerFast"),ZWe=o(" (Longformer model)"),eQe=l(),kg=a("li"),hU=a("strong"),oQe=o("luke"),rQe=o(" \u2014 "),mx=a("a"),tQe=o("LukeTokenizer"),aQe=o(" (LUKE model)"),nQe=l(),gs=a("li"),pU=a("strong"),sQe=o("lxmert"),lQe=o(" \u2014 "),gx=a("a"),iQe=o("LxmertTokenizer"),dQe=o(" or "),hx=a("a"),cQe=o("LxmertTokenizerFast"),fQe=o(" (LXMERT model)"),mQe=l(),Rg=a("li"),_U=a("strong"),gQe=o("m2m_100"),hQe=o(" \u2014 "),px=a("a"),pQe=o("M2M100Tokenizer"),_Qe=o(" (M2M100 model)"),uQe=l(),Sg=a("li"),uU=a("strong"),bQe=o("marian"),vQe=o(" \u2014 "),_x=a("a"),TQe=o("MarianTokenizer"),FQe=o(" (Marian model)"),CQe=l(),hs=a("li"),bU=a("strong"),MQe=o("mbart"),EQe=o(" \u2014 "),ux=a("a"),yQe=o("MBartTokenizer"),wQe=o(" or "),bx=a("a"),AQe=o("MBartTokenizerFast"),LQe=o(" (mBART model)"),BQe=l(),ps=a("li"),vU=a("strong"),xQe=o("mbart50"),kQe=o(" \u2014 "),vx=a("a"),RQe=o("MBart50Tokenizer"),SQe=o(" or "),Tx=a("a"),PQe=o("MBart50TokenizerFast"),$Qe=o(" (mBART-50 model)"),IQe=l(),Pg=a("li"),TU=a("strong"),DQe=o("mluke"),jQe=o(" \u2014 "),Fx=a("a"),NQe=o("MLukeTokenizer"),qQe=o(" (mLUKE model)"),GQe=l(),_s=a("li"),FU=a("strong"),OQe=o("mobilebert"),XQe=o(" \u2014 "),Cx=a("a"),VQe=o("MobileBertTokenizer"),zQe=o(" or "),Mx=a("a"),WQe=o("MobileBertTokenizerFast"),QQe=o(" (MobileBERT model)"),HQe=l(),us=a("li"),CU=a("strong"),UQe=o("mpnet"),JQe=o(" \u2014 "),Ex=a("a"),YQe=o("MPNetTokenizer"),KQe=o(" or "),yx=a("a"),ZQe=o("MPNetTokenizerFast"),eHe=o(" (MPNet model)"),oHe=l(),bs=a("li"),MU=a("strong"),rHe=o("mt5"),tHe=o(" \u2014 "),wx=a("a"),aHe=o("MT5Tokenizer"),nHe=o(" or "),Ax=a("a"),sHe=o("MT5TokenizerFast"),lHe=o(" (mT5 model)"),iHe=l(),vs=a("li"),EU=a("strong"),dHe=o("openai-gpt"),cHe=o(" \u2014 "),Lx=a("a"),fHe=o("OpenAIGPTTokenizer"),mHe=o(" or "),Bx=a("a"),gHe=o("OpenAIGPTTokenizerFast"),hHe=o(" (OpenAI GPT model)"),pHe=l(),Ts=a("li"),yU=a("strong"),_He=o("pegasus"),uHe=o(" \u2014 "),xx=a("a"),bHe=o("PegasusTokenizer"),vHe=o(" or "),kx=a("a"),THe=o("PegasusTokenizerFast"),FHe=o(" (Pegasus model)"),CHe=l(),$g=a("li"),wU=a("strong"),MHe=o("perceiver"),EHe=o(" \u2014 "),Rx=a("a"),yHe=o("PerceiverTokenizer"),wHe=o(" (Perceiver model)"),AHe=l(),Ig=a("li"),AU=a("strong"),LHe=o("phobert"),BHe=o(" \u2014 "),Sx=a("a"),xHe=o("PhobertTokenizer"),kHe=o(" (PhoBERT model)"),RHe=l(),Dg=a("li"),LU=a("strong"),SHe=o("plbart"),PHe=o(" \u2014 "),Px=a("a"),$He=o("PLBartTokenizer"),IHe=o(" (PLBart model)"),DHe=l(),jg=a("li"),BU=a("strong"),jHe=o("prophetnet"),NHe=o(" \u2014 "),$x=a("a"),qHe=o("ProphetNetTokenizer"),GHe=o(" (ProphetNet model)"),OHe=l(),Fs=a("li"),xU=a("strong"),XHe=o("qdqbert"),VHe=o(" \u2014 "),Ix=a("a"),zHe=o("BertTokenizer"),WHe=o(" or "),Dx=a("a"),QHe=o("BertTokenizerFast"),HHe=o(" (QDQBert model)"),UHe=l(),Ng=a("li"),kU=a("strong"),JHe=o("rag"),YHe=o(" \u2014 "),jx=a("a"),KHe=o("RagTokenizer"),ZHe=o(" (RAG model)"),eUe=l(),Cs=a("li"),RU=a("strong"),oUe=o("reformer"),rUe=o(" \u2014 "),Nx=a("a"),tUe=o("ReformerTokenizer"),aUe=o(" or "),qx=a("a"),nUe=o("ReformerTokenizerFast"),sUe=o(" (Reformer model)"),lUe=l(),Ms=a("li"),SU=a("strong"),iUe=o("rembert"),dUe=o(" \u2014 "),Gx=a("a"),cUe=o("RemBertTokenizer"),fUe=o(" or "),Ox=a("a"),mUe=o("RemBertTokenizerFast"),gUe=o(" (RemBERT model)"),hUe=l(),Es=a("li"),PU=a("strong"),pUe=o("retribert"),_Ue=o(" \u2014 "),Xx=a("a"),uUe=o("RetriBertTokenizer"),bUe=o(" or "),Vx=a("a"),vUe=o("RetriBertTokenizerFast"),TUe=o(" (RetriBERT model)"),FUe=l(),ys=a("li"),$U=a("strong"),CUe=o("roberta"),MUe=o(" \u2014 "),zx=a("a"),EUe=o("RobertaTokenizer"),yUe=o(" or "),Wx=a("a"),wUe=o("RobertaTokenizerFast"),AUe=o(" (RoBERTa model)"),LUe=l(),ws=a("li"),IU=a("strong"),BUe=o("roformer"),xUe=o(" \u2014 "),Qx=a("a"),kUe=o("RoFormerTokenizer"),RUe=o(" or "),Hx=a("a"),SUe=o("RoFormerTokenizerFast"),PUe=o(" (RoFormer model)"),$Ue=l(),qg=a("li"),DU=a("strong"),IUe=o("speech_to_text"),DUe=o(" \u2014 "),Ux=a("a"),jUe=o("Speech2TextTokenizer"),NUe=o(" (Speech2Text model)"),qUe=l(),Gg=a("li"),jU=a("strong"),GUe=o("speech_to_text_2"),OUe=o(" \u2014 "),Jx=a("a"),XUe=o("Speech2Text2Tokenizer"),VUe=o(" (Speech2Text2 model)"),zUe=l(),As=a("li"),NU=a("strong"),WUe=o("splinter"),QUe=o(" \u2014 "),Yx=a("a"),HUe=o("SplinterTokenizer"),UUe=o(" or "),Kx=a("a"),JUe=o("SplinterTokenizerFast"),YUe=o(" (Splinter model)"),KUe=l(),Ls=a("li"),qU=a("strong"),ZUe=o("squeezebert"),eJe=o(" \u2014 "),Zx=a("a"),oJe=o("SqueezeBertTokenizer"),rJe=o(" or "),ek=a("a"),tJe=o("SqueezeBertTokenizerFast"),aJe=o(" (SqueezeBERT model)"),nJe=l(),Bs=a("li"),GU=a("strong"),sJe=o("t5"),lJe=o(" \u2014 "),ok=a("a"),iJe=o("T5Tokenizer"),dJe=o(" or "),rk=a("a"),cJe=o("T5TokenizerFast"),fJe=o(" (T5 model)"),mJe=l(),Og=a("li"),OU=a("strong"),gJe=o("tapas"),hJe=o(" \u2014 "),tk=a("a"),pJe=o("TapasTokenizer"),_Je=o(" (TAPAS model)"),uJe=l(),Xg=a("li"),XU=a("strong"),bJe=o("transfo-xl"),vJe=o(" \u2014 "),ak=a("a"),TJe=o("TransfoXLTokenizer"),FJe=o(" (Transformer-XL model)"),CJe=l(),Vg=a("li"),VU=a("strong"),MJe=o("wav2vec2"),EJe=o(" \u2014 "),nk=a("a"),yJe=o("Wav2Vec2CTCTokenizer"),wJe=o(" (Wav2Vec2 model)"),AJe=l(),zg=a("li"),zU=a("strong"),LJe=o("wav2vec2_phoneme"),BJe=o(" \u2014 "),sk=a("a"),xJe=o("Wav2Vec2PhonemeCTCTokenizer"),kJe=o(" (Wav2Vec2Phoneme model)"),RJe=l(),xs=a("li"),WU=a("strong"),SJe=o("xglm"),PJe=o(" \u2014 "),lk=a("a"),$Je=o("XGLMTokenizer"),IJe=o(" or "),ik=a("a"),DJe=o("XGLMTokenizerFast"),jJe=o(" (XGLM model)"),NJe=l(),Wg=a("li"),QU=a("strong"),qJe=o("xlm"),GJe=o(" \u2014 "),dk=a("a"),OJe=o("XLMTokenizer"),XJe=o(" (XLM model)"),VJe=l(),Qg=a("li"),HU=a("strong"),zJe=o("xlm-prophetnet"),WJe=o(" \u2014 "),ck=a("a"),QJe=o("XLMProphetNetTokenizer"),HJe=o(" (XLMProphetNet model)"),UJe=l(),ks=a("li"),UU=a("strong"),JJe=o("xlm-roberta"),YJe=o(" \u2014 "),fk=a("a"),KJe=o("XLMRobertaTokenizer"),ZJe=o(" or "),mk=a("a"),eYe=o("XLMRobertaTokenizerFast"),oYe=o(" (XLM-RoBERTa model)"),rYe=l(),Rs=a("li"),JU=a("strong"),tYe=o("xlnet"),aYe=o(" \u2014 "),gk=a("a"),nYe=o("XLNetTokenizer"),sYe=o(" or "),hk=a("a"),lYe=o("XLNetTokenizerFast"),iYe=o(" (XLNet model)"),dYe=l(),YU=a("p"),cYe=o("Examples:"),fYe=l(),f(OM.$$.fragment),mYe=l(),Hg=a("div"),f(XM.$$.fragment),gYe=l(),KU=a("p"),hYe=o("Register a new tokenizer in this mapping."),O9e=l(),Ni=a("h2"),Ug=a("a"),ZU=a("span"),f(VM.$$.fragment),pYe=l(),eJ=a("span"),_Ye=o("AutoFeatureExtractor"),X9e=l(),zo=a("div"),f(zM.$$.fragment),uYe=l(),WM=a("p"),bYe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),pk=a("a"),vYe=o("AutoFeatureExtractor.from_pretrained()"),TYe=o(" class method."),FYe=l(),QM=a("p"),CYe=o("This class cannot be instantiated directly using "),oJ=a("code"),MYe=o("__init__()"),EYe=o(" (throws an error)."),yYe=l(),ke=a("div"),f(HM.$$.fragment),wYe=l(),rJ=a("p"),AYe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),LYe=l(),ja=a("p"),BYe=o("The feature extractor class to instantiate is selected based on the "),tJ=a("code"),xYe=o("model_type"),kYe=o(` property of the config object
(either passed as an argument or loaded from `),aJ=a("code"),RYe=o("pretrained_model_name_or_path"),SYe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),nJ=a("code"),PYe=o("pretrained_model_name_or_path"),$Ye=o(":"),IYe=l(),ae=a("ul"),Jg=a("li"),sJ=a("strong"),DYe=o("beit"),jYe=o(" \u2014 "),_k=a("a"),NYe=o("BeitFeatureExtractor"),qYe=o(" (BEiT model)"),GYe=l(),Yg=a("li"),lJ=a("strong"),OYe=o("clip"),XYe=o(" \u2014 "),uk=a("a"),VYe=o("CLIPFeatureExtractor"),zYe=o(" (CLIP model)"),WYe=l(),Kg=a("li"),iJ=a("strong"),QYe=o("convnext"),HYe=o(" \u2014 "),bk=a("a"),UYe=o("ConvNextFeatureExtractor"),JYe=o(" (ConvNext model)"),YYe=l(),Zg=a("li"),dJ=a("strong"),KYe=o("deit"),ZYe=o(" \u2014 "),vk=a("a"),eKe=o("DeiTFeatureExtractor"),oKe=o(" (DeiT model)"),rKe=l(),eh=a("li"),cJ=a("strong"),tKe=o("detr"),aKe=o(" \u2014 "),Tk=a("a"),nKe=o("DetrFeatureExtractor"),sKe=o(" (DETR model)"),lKe=l(),oh=a("li"),fJ=a("strong"),iKe=o("hubert"),dKe=o(" \u2014 "),Fk=a("a"),cKe=o("Wav2Vec2FeatureExtractor"),fKe=o(" (Hubert model)"),mKe=l(),rh=a("li"),mJ=a("strong"),gKe=o("layoutlmv2"),hKe=o(" \u2014 "),Ck=a("a"),pKe=o("LayoutLMv2FeatureExtractor"),_Ke=o(" (LayoutLMv2 model)"),uKe=l(),th=a("li"),gJ=a("strong"),bKe=o("perceiver"),vKe=o(" \u2014 "),Mk=a("a"),TKe=o("PerceiverFeatureExtractor"),FKe=o(" (Perceiver model)"),CKe=l(),ah=a("li"),hJ=a("strong"),MKe=o("poolformer"),EKe=o(" \u2014 "),Ek=a("a"),yKe=o("PoolFormerFeatureExtractor"),wKe=o(" (PoolFormer model)"),AKe=l(),nh=a("li"),pJ=a("strong"),LKe=o("resnet"),BKe=o(" \u2014 "),yk=a("a"),xKe=o("ConvNextFeatureExtractor"),kKe=o(" (ResNet model)"),RKe=l(),sh=a("li"),_J=a("strong"),SKe=o("segformer"),PKe=o(" \u2014 "),wk=a("a"),$Ke=o("SegformerFeatureExtractor"),IKe=o(" (SegFormer model)"),DKe=l(),lh=a("li"),uJ=a("strong"),jKe=o("speech_to_text"),NKe=o(" \u2014 "),Ak=a("a"),qKe=o("Speech2TextFeatureExtractor"),GKe=o(" (Speech2Text model)"),OKe=l(),ih=a("li"),bJ=a("strong"),XKe=o("swin"),VKe=o(" \u2014 "),Lk=a("a"),zKe=o("ViTFeatureExtractor"),WKe=o(" (Swin model)"),QKe=l(),dh=a("li"),vJ=a("strong"),HKe=o("vit"),UKe=o(" \u2014 "),Bk=a("a"),JKe=o("ViTFeatureExtractor"),YKe=o(" (ViT model)"),KKe=l(),ch=a("li"),TJ=a("strong"),ZKe=o("vit_mae"),eZe=o(" \u2014 "),xk=a("a"),oZe=o("ViTFeatureExtractor"),rZe=o(" (ViTMAE model)"),tZe=l(),fh=a("li"),FJ=a("strong"),aZe=o("wav2vec2"),nZe=o(" \u2014 "),kk=a("a"),sZe=o("Wav2Vec2FeatureExtractor"),lZe=o(" (Wav2Vec2 model)"),iZe=l(),f(mh.$$.fragment),dZe=l(),CJ=a("p"),cZe=o("Examples:"),fZe=l(),f(UM.$$.fragment),mZe=l(),gh=a("div"),f(JM.$$.fragment),gZe=l(),MJ=a("p"),hZe=o("Register a new feature extractor for this class."),V9e=l(),qi=a("h2"),hh=a("a"),EJ=a("span"),f(YM.$$.fragment),pZe=l(),yJ=a("span"),_Ze=o("AutoProcessor"),z9e=l(),Wo=a("div"),f(KM.$$.fragment),uZe=l(),ZM=a("p"),bZe=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Rk=a("a"),vZe=o("AutoProcessor.from_pretrained()"),TZe=o(" class method."),FZe=l(),eE=a("p"),CZe=o("This class cannot be instantiated directly using "),wJ=a("code"),MZe=o("__init__()"),EZe=o(" (throws an error)."),yZe=l(),Re=a("div"),f(oE.$$.fragment),wZe=l(),AJ=a("p"),AZe=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),LZe=l(),Gi=a("p"),BZe=o("The processor class to instantiate is selected based on the "),LJ=a("code"),xZe=o("model_type"),kZe=o(` property of the config object (either
passed as an argument or loaded from `),BJ=a("code"),RZe=o("pretrained_model_name_or_path"),SZe=o(" if possible):"),PZe=l(),Ae=a("ul"),ph=a("li"),xJ=a("strong"),$Ze=o("clip"),IZe=o(" \u2014 "),Sk=a("a"),DZe=o("CLIPProcessor"),jZe=o(" (CLIP model)"),NZe=l(),_h=a("li"),kJ=a("strong"),qZe=o("layoutlmv2"),GZe=o(" \u2014 "),Pk=a("a"),OZe=o("LayoutLMv2Processor"),XZe=o(" (LayoutLMv2 model)"),VZe=l(),uh=a("li"),RJ=a("strong"),zZe=o("layoutxlm"),WZe=o(" \u2014 "),$k=a("a"),QZe=o("LayoutXLMProcessor"),HZe=o(" (LayoutXLM model)"),UZe=l(),bh=a("li"),SJ=a("strong"),JZe=o("speech_to_text"),YZe=o(" \u2014 "),Ik=a("a"),KZe=o("Speech2TextProcessor"),ZZe=o(" (Speech2Text model)"),eeo=l(),vh=a("li"),PJ=a("strong"),oeo=o("speech_to_text_2"),reo=o(" \u2014 "),Dk=a("a"),teo=o("Speech2Text2Processor"),aeo=o(" (Speech2Text2 model)"),neo=l(),Th=a("li"),$J=a("strong"),seo=o("trocr"),leo=o(" \u2014 "),jk=a("a"),ieo=o("TrOCRProcessor"),deo=o(" (TrOCR model)"),ceo=l(),Fh=a("li"),IJ=a("strong"),feo=o("vision-text-dual-encoder"),meo=o(" \u2014 "),Nk=a("a"),geo=o("VisionTextDualEncoderProcessor"),heo=o(" (VisionTextDualEncoder model)"),peo=l(),Ch=a("li"),DJ=a("strong"),_eo=o("wav2vec2"),ueo=o(" \u2014 "),qk=a("a"),beo=o("Wav2Vec2Processor"),veo=o(" (Wav2Vec2 model)"),Teo=l(),f(Mh.$$.fragment),Feo=l(),jJ=a("p"),Ceo=o("Examples:"),Meo=l(),f(rE.$$.fragment),Eeo=l(),Eh=a("div"),f(tE.$$.fragment),yeo=l(),NJ=a("p"),weo=o("Register a new processor for this class."),W9e=l(),Oi=a("h2"),yh=a("a"),qJ=a("span"),f(aE.$$.fragment),Aeo=l(),GJ=a("span"),Leo=o("AutoModel"),Q9e=l(),Qo=a("div"),f(nE.$$.fragment),Beo=l(),Xi=a("p"),xeo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OJ=a("code"),keo=o("from_pretrained()"),Reo=o("class method or the "),XJ=a("code"),Seo=o("from_config()"),Peo=o(`class
method.`),$eo=l(),sE=a("p"),Ieo=o("This class cannot be instantiated directly using "),VJ=a("code"),Deo=o("__init__()"),jeo=o(" (throws an error)."),Neo=l(),qr=a("div"),f(lE.$$.fragment),qeo=l(),zJ=a("p"),Geo=o("Instantiates one of the base model classes of the library from a configuration."),Oeo=l(),Vi=a("p"),Xeo=o(`Note:
Loading a model from its configuration file does `),WJ=a("strong"),Veo=o("not"),zeo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("code"),Weo=o("from_pretrained()"),Qeo=o("to load the model weights."),Heo=l(),HJ=a("p"),Ueo=o("Examples:"),Jeo=l(),f(iE.$$.fragment),Yeo=l(),Se=a("div"),f(dE.$$.fragment),Keo=l(),UJ=a("p"),Zeo=o("Instantiate one of the base model classes of the library from a pretrained model."),eoo=l(),Na=a("p"),ooo=o("The model class to instantiate is selected based on the "),JJ=a("code"),roo=o("model_type"),too=o(` property of the config object (either
passed as an argument or loaded from `),YJ=a("code"),aoo=o("pretrained_model_name_or_path"),noo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KJ=a("code"),soo=o("pretrained_model_name_or_path"),loo=o(":"),ioo=l(),F=a("ul"),wh=a("li"),ZJ=a("strong"),doo=o("albert"),coo=o(" \u2014 "),Gk=a("a"),foo=o("AlbertModel"),moo=o(" (ALBERT model)"),goo=l(),Ah=a("li"),eY=a("strong"),hoo=o("bart"),poo=o(" \u2014 "),Ok=a("a"),_oo=o("BartModel"),uoo=o(" (BART model)"),boo=l(),Lh=a("li"),oY=a("strong"),voo=o("beit"),Too=o(" \u2014 "),Xk=a("a"),Foo=o("BeitModel"),Coo=o(" (BEiT model)"),Moo=l(),Bh=a("li"),rY=a("strong"),Eoo=o("bert"),yoo=o(" \u2014 "),Vk=a("a"),woo=o("BertModel"),Aoo=o(" (BERT model)"),Loo=l(),xh=a("li"),tY=a("strong"),Boo=o("bert-generation"),xoo=o(" \u2014 "),zk=a("a"),koo=o("BertGenerationEncoder"),Roo=o(" (Bert Generation model)"),Soo=l(),kh=a("li"),aY=a("strong"),Poo=o("big_bird"),$oo=o(" \u2014 "),Wk=a("a"),Ioo=o("BigBirdModel"),Doo=o(" (BigBird model)"),joo=l(),Rh=a("li"),nY=a("strong"),Noo=o("bigbird_pegasus"),qoo=o(" \u2014 "),Qk=a("a"),Goo=o("BigBirdPegasusModel"),Ooo=o(" (BigBirdPegasus model)"),Xoo=l(),Sh=a("li"),sY=a("strong"),Voo=o("blenderbot"),zoo=o(" \u2014 "),Hk=a("a"),Woo=o("BlenderbotModel"),Qoo=o(" (Blenderbot model)"),Hoo=l(),Ph=a("li"),lY=a("strong"),Uoo=o("blenderbot-small"),Joo=o(" \u2014 "),Uk=a("a"),Yoo=o("BlenderbotSmallModel"),Koo=o(" (BlenderbotSmall model)"),Zoo=l(),$h=a("li"),iY=a("strong"),ero=o("camembert"),oro=o(" \u2014 "),Jk=a("a"),rro=o("CamembertModel"),tro=o(" (CamemBERT model)"),aro=l(),Ih=a("li"),dY=a("strong"),nro=o("canine"),sro=o(" \u2014 "),Yk=a("a"),lro=o("CanineModel"),iro=o(" (Canine model)"),dro=l(),Dh=a("li"),cY=a("strong"),cro=o("clip"),fro=o(" \u2014 "),Kk=a("a"),mro=o("CLIPModel"),gro=o(" (CLIP model)"),hro=l(),jh=a("li"),fY=a("strong"),pro=o("convbert"),_ro=o(" \u2014 "),Zk=a("a"),uro=o("ConvBertModel"),bro=o(" (ConvBERT model)"),vro=l(),Nh=a("li"),mY=a("strong"),Tro=o("convnext"),Fro=o(" \u2014 "),eR=a("a"),Cro=o("ConvNextModel"),Mro=o(" (ConvNext model)"),Ero=l(),qh=a("li"),gY=a("strong"),yro=o("ctrl"),wro=o(" \u2014 "),oR=a("a"),Aro=o("CTRLModel"),Lro=o(" (CTRL model)"),Bro=l(),Gh=a("li"),hY=a("strong"),xro=o("data2vec-audio"),kro=o(" \u2014 "),rR=a("a"),Rro=o("Data2VecAudioModel"),Sro=o(" (Data2VecAudio model)"),Pro=l(),Oh=a("li"),pY=a("strong"),$ro=o("data2vec-text"),Iro=o(" \u2014 "),tR=a("a"),Dro=o("Data2VecTextModel"),jro=o(" (Data2VecText model)"),Nro=l(),Xh=a("li"),_Y=a("strong"),qro=o("deberta"),Gro=o(" \u2014 "),aR=a("a"),Oro=o("DebertaModel"),Xro=o(" (DeBERTa model)"),Vro=l(),Vh=a("li"),uY=a("strong"),zro=o("deberta-v2"),Wro=o(" \u2014 "),nR=a("a"),Qro=o("DebertaV2Model"),Hro=o(" (DeBERTa-v2 model)"),Uro=l(),zh=a("li"),bY=a("strong"),Jro=o("deit"),Yro=o(" \u2014 "),sR=a("a"),Kro=o("DeiTModel"),Zro=o(" (DeiT model)"),eto=l(),Wh=a("li"),vY=a("strong"),oto=o("detr"),rto=o(" \u2014 "),lR=a("a"),tto=o("DetrModel"),ato=o(" (DETR model)"),nto=l(),Qh=a("li"),TY=a("strong"),sto=o("distilbert"),lto=o(" \u2014 "),iR=a("a"),ito=o("DistilBertModel"),dto=o(" (DistilBERT model)"),cto=l(),Hh=a("li"),FY=a("strong"),fto=o("dpr"),mto=o(" \u2014 "),dR=a("a"),gto=o("DPRQuestionEncoder"),hto=o(" (DPR model)"),pto=l(),Uh=a("li"),CY=a("strong"),_to=o("electra"),uto=o(" \u2014 "),cR=a("a"),bto=o("ElectraModel"),vto=o(" (ELECTRA model)"),Tto=l(),Jh=a("li"),MY=a("strong"),Fto=o("flaubert"),Cto=o(" \u2014 "),fR=a("a"),Mto=o("FlaubertModel"),Eto=o(" (FlauBERT model)"),yto=l(),Yh=a("li"),EY=a("strong"),wto=o("fnet"),Ato=o(" \u2014 "),mR=a("a"),Lto=o("FNetModel"),Bto=o(" (FNet model)"),xto=l(),Kh=a("li"),yY=a("strong"),kto=o("fsmt"),Rto=o(" \u2014 "),gR=a("a"),Sto=o("FSMTModel"),Pto=o(" (FairSeq Machine-Translation model)"),$to=l(),Ss=a("li"),wY=a("strong"),Ito=o("funnel"),Dto=o(" \u2014 "),hR=a("a"),jto=o("FunnelModel"),Nto=o(" or "),pR=a("a"),qto=o("FunnelBaseModel"),Gto=o(" (Funnel Transformer model)"),Oto=l(),Zh=a("li"),AY=a("strong"),Xto=o("gpt2"),Vto=o(" \u2014 "),_R=a("a"),zto=o("GPT2Model"),Wto=o(" (OpenAI GPT-2 model)"),Qto=l(),ep=a("li"),LY=a("strong"),Hto=o("gpt_neo"),Uto=o(" \u2014 "),uR=a("a"),Jto=o("GPTNeoModel"),Yto=o(" (GPT Neo model)"),Kto=l(),op=a("li"),BY=a("strong"),Zto=o("gptj"),eao=o(" \u2014 "),bR=a("a"),oao=o("GPTJModel"),rao=o(" (GPT-J model)"),tao=l(),rp=a("li"),xY=a("strong"),aao=o("hubert"),nao=o(" \u2014 "),vR=a("a"),sao=o("HubertModel"),lao=o(" (Hubert model)"),iao=l(),tp=a("li"),kY=a("strong"),dao=o("ibert"),cao=o(" \u2014 "),TR=a("a"),fao=o("IBertModel"),mao=o(" (I-BERT model)"),gao=l(),ap=a("li"),RY=a("strong"),hao=o("imagegpt"),pao=o(" \u2014 "),FR=a("a"),_ao=o("ImageGPTModel"),uao=o(" (ImageGPT model)"),bao=l(),np=a("li"),SY=a("strong"),vao=o("layoutlm"),Tao=o(" \u2014 "),CR=a("a"),Fao=o("LayoutLMModel"),Cao=o(" (LayoutLM model)"),Mao=l(),sp=a("li"),PY=a("strong"),Eao=o("layoutlmv2"),yao=o(" \u2014 "),MR=a("a"),wao=o("LayoutLMv2Model"),Aao=o(" (LayoutLMv2 model)"),Lao=l(),lp=a("li"),$Y=a("strong"),Bao=o("led"),xao=o(" \u2014 "),ER=a("a"),kao=o("LEDModel"),Rao=o(" (LED model)"),Sao=l(),ip=a("li"),IY=a("strong"),Pao=o("longformer"),$ao=o(" \u2014 "),yR=a("a"),Iao=o("LongformerModel"),Dao=o(" (Longformer model)"),jao=l(),dp=a("li"),DY=a("strong"),Nao=o("luke"),qao=o(" \u2014 "),wR=a("a"),Gao=o("LukeModel"),Oao=o(" (LUKE model)"),Xao=l(),cp=a("li"),jY=a("strong"),Vao=o("lxmert"),zao=o(" \u2014 "),AR=a("a"),Wao=o("LxmertModel"),Qao=o(" (LXMERT model)"),Hao=l(),fp=a("li"),NY=a("strong"),Uao=o("m2m_100"),Jao=o(" \u2014 "),LR=a("a"),Yao=o("M2M100Model"),Kao=o(" (M2M100 model)"),Zao=l(),mp=a("li"),qY=a("strong"),eno=o("marian"),ono=o(" \u2014 "),BR=a("a"),rno=o("MarianModel"),tno=o(" (Marian model)"),ano=l(),gp=a("li"),GY=a("strong"),nno=o("mbart"),sno=o(" \u2014 "),xR=a("a"),lno=o("MBartModel"),ino=o(" (mBART model)"),dno=l(),hp=a("li"),OY=a("strong"),cno=o("megatron-bert"),fno=o(" \u2014 "),kR=a("a"),mno=o("MegatronBertModel"),gno=o(" (MegatronBert model)"),hno=l(),pp=a("li"),XY=a("strong"),pno=o("mobilebert"),_no=o(" \u2014 "),RR=a("a"),uno=o("MobileBertModel"),bno=o(" (MobileBERT model)"),vno=l(),_p=a("li"),VY=a("strong"),Tno=o("mpnet"),Fno=o(" \u2014 "),SR=a("a"),Cno=o("MPNetModel"),Mno=o(" (MPNet model)"),Eno=l(),up=a("li"),zY=a("strong"),yno=o("mt5"),wno=o(" \u2014 "),PR=a("a"),Ano=o("MT5Model"),Lno=o(" (mT5 model)"),Bno=l(),bp=a("li"),WY=a("strong"),xno=o("nystromformer"),kno=o(" \u2014 "),$R=a("a"),Rno=o("NystromformerModel"),Sno=o(" (Nystromformer model)"),Pno=l(),vp=a("li"),QY=a("strong"),$no=o("openai-gpt"),Ino=o(" \u2014 "),IR=a("a"),Dno=o("OpenAIGPTModel"),jno=o(" (OpenAI GPT model)"),Nno=l(),Tp=a("li"),HY=a("strong"),qno=o("pegasus"),Gno=o(" \u2014 "),DR=a("a"),Ono=o("PegasusModel"),Xno=o(" (Pegasus model)"),Vno=l(),Fp=a("li"),UY=a("strong"),zno=o("perceiver"),Wno=o(" \u2014 "),jR=a("a"),Qno=o("PerceiverModel"),Hno=o(" (Perceiver model)"),Uno=l(),Cp=a("li"),JY=a("strong"),Jno=o("plbart"),Yno=o(" \u2014 "),NR=a("a"),Kno=o("PLBartModel"),Zno=o(" (PLBart model)"),eso=l(),Mp=a("li"),YY=a("strong"),oso=o("poolformer"),rso=o(" \u2014 "),qR=a("a"),tso=o("PoolFormerModel"),aso=o(" (PoolFormer model)"),nso=l(),Ep=a("li"),KY=a("strong"),sso=o("prophetnet"),lso=o(" \u2014 "),GR=a("a"),iso=o("ProphetNetModel"),dso=o(" (ProphetNet model)"),cso=l(),yp=a("li"),ZY=a("strong"),fso=o("qdqbert"),mso=o(" \u2014 "),OR=a("a"),gso=o("QDQBertModel"),hso=o(" (QDQBert model)"),pso=l(),wp=a("li"),eK=a("strong"),_so=o("reformer"),uso=o(" \u2014 "),XR=a("a"),bso=o("ReformerModel"),vso=o(" (Reformer model)"),Tso=l(),Ap=a("li"),oK=a("strong"),Fso=o("rembert"),Cso=o(" \u2014 "),VR=a("a"),Mso=o("RemBertModel"),Eso=o(" (RemBERT model)"),yso=l(),Lp=a("li"),rK=a("strong"),wso=o("resnet"),Aso=o(" \u2014 "),zR=a("a"),Lso=o("ResNetModel"),Bso=o(" (ResNet model)"),xso=l(),Bp=a("li"),tK=a("strong"),kso=o("retribert"),Rso=o(" \u2014 "),WR=a("a"),Sso=o("RetriBertModel"),Pso=o(" (RetriBERT model)"),$so=l(),xp=a("li"),aK=a("strong"),Iso=o("roberta"),Dso=o(" \u2014 "),QR=a("a"),jso=o("RobertaModel"),Nso=o(" (RoBERTa model)"),qso=l(),kp=a("li"),nK=a("strong"),Gso=o("roformer"),Oso=o(" \u2014 "),HR=a("a"),Xso=o("RoFormerModel"),Vso=o(" (RoFormer model)"),zso=l(),Rp=a("li"),sK=a("strong"),Wso=o("segformer"),Qso=o(" \u2014 "),UR=a("a"),Hso=o("SegformerModel"),Uso=o(" (SegFormer model)"),Jso=l(),Sp=a("li"),lK=a("strong"),Yso=o("sew"),Kso=o(" \u2014 "),JR=a("a"),Zso=o("SEWModel"),elo=o(" (SEW model)"),olo=l(),Pp=a("li"),iK=a("strong"),rlo=o("sew-d"),tlo=o(" \u2014 "),YR=a("a"),alo=o("SEWDModel"),nlo=o(" (SEW-D model)"),slo=l(),$p=a("li"),dK=a("strong"),llo=o("speech_to_text"),ilo=o(" \u2014 "),KR=a("a"),dlo=o("Speech2TextModel"),clo=o(" (Speech2Text model)"),flo=l(),Ip=a("li"),cK=a("strong"),mlo=o("splinter"),glo=o(" \u2014 "),ZR=a("a"),hlo=o("SplinterModel"),plo=o(" (Splinter model)"),_lo=l(),Dp=a("li"),fK=a("strong"),ulo=o("squeezebert"),blo=o(" \u2014 "),eS=a("a"),vlo=o("SqueezeBertModel"),Tlo=o(" (SqueezeBERT model)"),Flo=l(),jp=a("li"),mK=a("strong"),Clo=o("swin"),Mlo=o(" \u2014 "),oS=a("a"),Elo=o("SwinModel"),ylo=o(" (Swin model)"),wlo=l(),Np=a("li"),gK=a("strong"),Alo=o("t5"),Llo=o(" \u2014 "),rS=a("a"),Blo=o("T5Model"),xlo=o(" (T5 model)"),klo=l(),qp=a("li"),hK=a("strong"),Rlo=o("tapas"),Slo=o(" \u2014 "),tS=a("a"),Plo=o("TapasModel"),$lo=o(" (TAPAS model)"),Ilo=l(),Gp=a("li"),pK=a("strong"),Dlo=o("transfo-xl"),jlo=o(" \u2014 "),aS=a("a"),Nlo=o("TransfoXLModel"),qlo=o(" (Transformer-XL model)"),Glo=l(),Op=a("li"),_K=a("strong"),Olo=o("unispeech"),Xlo=o(" \u2014 "),nS=a("a"),Vlo=o("UniSpeechModel"),zlo=o(" (UniSpeech model)"),Wlo=l(),Xp=a("li"),uK=a("strong"),Qlo=o("unispeech-sat"),Hlo=o(" \u2014 "),sS=a("a"),Ulo=o("UniSpeechSatModel"),Jlo=o(" (UniSpeechSat model)"),Ylo=l(),Vp=a("li"),bK=a("strong"),Klo=o("vilt"),Zlo=o(" \u2014 "),lS=a("a"),eio=o("ViltModel"),oio=o(" (ViLT model)"),rio=l(),zp=a("li"),vK=a("strong"),tio=o("vision-text-dual-encoder"),aio=o(" \u2014 "),iS=a("a"),nio=o("VisionTextDualEncoderModel"),sio=o(" (VisionTextDualEncoder model)"),lio=l(),Wp=a("li"),TK=a("strong"),iio=o("visual_bert"),dio=o(" \u2014 "),dS=a("a"),cio=o("VisualBertModel"),fio=o(" (VisualBert model)"),mio=l(),Qp=a("li"),FK=a("strong"),gio=o("vit"),hio=o(" \u2014 "),cS=a("a"),pio=o("ViTModel"),_io=o(" (ViT model)"),uio=l(),Hp=a("li"),CK=a("strong"),bio=o("vit_mae"),vio=o(" \u2014 "),fS=a("a"),Tio=o("ViTMAEModel"),Fio=o(" (ViTMAE model)"),Cio=l(),Up=a("li"),MK=a("strong"),Mio=o("wav2vec2"),Eio=o(" \u2014 "),mS=a("a"),yio=o("Wav2Vec2Model"),wio=o(" (Wav2Vec2 model)"),Aio=l(),Jp=a("li"),EK=a("strong"),Lio=o("wavlm"),Bio=o(" \u2014 "),gS=a("a"),xio=o("WavLMModel"),kio=o(" (WavLM model)"),Rio=l(),Yp=a("li"),yK=a("strong"),Sio=o("xglm"),Pio=o(" \u2014 "),hS=a("a"),$io=o("XGLMModel"),Iio=o(" (XGLM model)"),Dio=l(),Kp=a("li"),wK=a("strong"),jio=o("xlm"),Nio=o(" \u2014 "),pS=a("a"),qio=o("XLMModel"),Gio=o(" (XLM model)"),Oio=l(),Zp=a("li"),AK=a("strong"),Xio=o("xlm-prophetnet"),Vio=o(" \u2014 "),_S=a("a"),zio=o("XLMProphetNetModel"),Wio=o(" (XLMProphetNet model)"),Qio=l(),e_=a("li"),LK=a("strong"),Hio=o("xlm-roberta"),Uio=o(" \u2014 "),uS=a("a"),Jio=o("XLMRobertaModel"),Yio=o(" (XLM-RoBERTa model)"),Kio=l(),o_=a("li"),BK=a("strong"),Zio=o("xlm-roberta-xl"),edo=o(" \u2014 "),bS=a("a"),odo=o("XLMRobertaXLModel"),rdo=o(" (XLM-RoBERTa-XL model)"),tdo=l(),r_=a("li"),xK=a("strong"),ado=o("xlnet"),ndo=o(" \u2014 "),vS=a("a"),sdo=o("XLNetModel"),ldo=o(" (XLNet model)"),ido=l(),t_=a("li"),kK=a("strong"),ddo=o("yoso"),cdo=o(" \u2014 "),TS=a("a"),fdo=o("YosoModel"),mdo=o(" (YOSO model)"),gdo=l(),a_=a("p"),hdo=o("The model is set in evaluation mode by default using "),RK=a("code"),pdo=o("model.eval()"),_do=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SK=a("code"),udo=o("model.train()"),bdo=l(),PK=a("p"),vdo=o("Examples:"),Tdo=l(),f(cE.$$.fragment),H9e=l(),zi=a("h2"),n_=a("a"),$K=a("span"),f(fE.$$.fragment),Fdo=l(),IK=a("span"),Cdo=o("AutoModelForPreTraining"),U9e=l(),Ho=a("div"),f(mE.$$.fragment),Mdo=l(),Wi=a("p"),Edo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),DK=a("code"),ydo=o("from_pretrained()"),wdo=o("class method or the "),jK=a("code"),Ado=o("from_config()"),Ldo=o(`class
method.`),Bdo=l(),gE=a("p"),xdo=o("This class cannot be instantiated directly using "),NK=a("code"),kdo=o("__init__()"),Rdo=o(" (throws an error)."),Sdo=l(),Gr=a("div"),f(hE.$$.fragment),Pdo=l(),qK=a("p"),$do=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ido=l(),Qi=a("p"),Ddo=o(`Note:
Loading a model from its configuration file does `),GK=a("strong"),jdo=o("not"),Ndo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("code"),qdo=o("from_pretrained()"),Gdo=o("to load the model weights."),Odo=l(),XK=a("p"),Xdo=o("Examples:"),Vdo=l(),f(pE.$$.fragment),zdo=l(),Pe=a("div"),f(_E.$$.fragment),Wdo=l(),VK=a("p"),Qdo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Hdo=l(),qa=a("p"),Udo=o("The model class to instantiate is selected based on the "),zK=a("code"),Jdo=o("model_type"),Ydo=o(` property of the config object (either
passed as an argument or loaded from `),WK=a("code"),Kdo=o("pretrained_model_name_or_path"),Zdo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QK=a("code"),eco=o("pretrained_model_name_or_path"),oco=o(":"),rco=l(),k=a("ul"),s_=a("li"),HK=a("strong"),tco=o("albert"),aco=o(" \u2014 "),FS=a("a"),nco=o("AlbertForPreTraining"),sco=o(" (ALBERT model)"),lco=l(),l_=a("li"),UK=a("strong"),ico=o("bart"),dco=o(" \u2014 "),CS=a("a"),cco=o("BartForConditionalGeneration"),fco=o(" (BART model)"),mco=l(),i_=a("li"),JK=a("strong"),gco=o("bert"),hco=o(" \u2014 "),MS=a("a"),pco=o("BertForPreTraining"),_co=o(" (BERT model)"),uco=l(),d_=a("li"),YK=a("strong"),bco=o("big_bird"),vco=o(" \u2014 "),ES=a("a"),Tco=o("BigBirdForPreTraining"),Fco=o(" (BigBird model)"),Cco=l(),c_=a("li"),KK=a("strong"),Mco=o("camembert"),Eco=o(" \u2014 "),yS=a("a"),yco=o("CamembertForMaskedLM"),wco=o(" (CamemBERT model)"),Aco=l(),f_=a("li"),ZK=a("strong"),Lco=o("ctrl"),Bco=o(" \u2014 "),wS=a("a"),xco=o("CTRLLMHeadModel"),kco=o(" (CTRL model)"),Rco=l(),m_=a("li"),eZ=a("strong"),Sco=o("data2vec-text"),Pco=o(" \u2014 "),AS=a("a"),$co=o("Data2VecTextForMaskedLM"),Ico=o(" (Data2VecText model)"),Dco=l(),g_=a("li"),oZ=a("strong"),jco=o("deberta"),Nco=o(" \u2014 "),LS=a("a"),qco=o("DebertaForMaskedLM"),Gco=o(" (DeBERTa model)"),Oco=l(),h_=a("li"),rZ=a("strong"),Xco=o("deberta-v2"),Vco=o(" \u2014 "),BS=a("a"),zco=o("DebertaV2ForMaskedLM"),Wco=o(" (DeBERTa-v2 model)"),Qco=l(),p_=a("li"),tZ=a("strong"),Hco=o("distilbert"),Uco=o(" \u2014 "),xS=a("a"),Jco=o("DistilBertForMaskedLM"),Yco=o(" (DistilBERT model)"),Kco=l(),__=a("li"),aZ=a("strong"),Zco=o("electra"),efo=o(" \u2014 "),kS=a("a"),ofo=o("ElectraForPreTraining"),rfo=o(" (ELECTRA model)"),tfo=l(),u_=a("li"),nZ=a("strong"),afo=o("flaubert"),nfo=o(" \u2014 "),RS=a("a"),sfo=o("FlaubertWithLMHeadModel"),lfo=o(" (FlauBERT model)"),ifo=l(),b_=a("li"),sZ=a("strong"),dfo=o("fnet"),cfo=o(" \u2014 "),SS=a("a"),ffo=o("FNetForPreTraining"),mfo=o(" (FNet model)"),gfo=l(),v_=a("li"),lZ=a("strong"),hfo=o("fsmt"),pfo=o(" \u2014 "),PS=a("a"),_fo=o("FSMTForConditionalGeneration"),ufo=o(" (FairSeq Machine-Translation model)"),bfo=l(),T_=a("li"),iZ=a("strong"),vfo=o("funnel"),Tfo=o(" \u2014 "),$S=a("a"),Ffo=o("FunnelForPreTraining"),Cfo=o(" (Funnel Transformer model)"),Mfo=l(),F_=a("li"),dZ=a("strong"),Efo=o("gpt2"),yfo=o(" \u2014 "),IS=a("a"),wfo=o("GPT2LMHeadModel"),Afo=o(" (OpenAI GPT-2 model)"),Lfo=l(),C_=a("li"),cZ=a("strong"),Bfo=o("ibert"),xfo=o(" \u2014 "),DS=a("a"),kfo=o("IBertForMaskedLM"),Rfo=o(" (I-BERT model)"),Sfo=l(),M_=a("li"),fZ=a("strong"),Pfo=o("layoutlm"),$fo=o(" \u2014 "),jS=a("a"),Ifo=o("LayoutLMForMaskedLM"),Dfo=o(" (LayoutLM model)"),jfo=l(),E_=a("li"),mZ=a("strong"),Nfo=o("longformer"),qfo=o(" \u2014 "),NS=a("a"),Gfo=o("LongformerForMaskedLM"),Ofo=o(" (Longformer model)"),Xfo=l(),y_=a("li"),gZ=a("strong"),Vfo=o("lxmert"),zfo=o(" \u2014 "),qS=a("a"),Wfo=o("LxmertForPreTraining"),Qfo=o(" (LXMERT model)"),Hfo=l(),w_=a("li"),hZ=a("strong"),Ufo=o("megatron-bert"),Jfo=o(" \u2014 "),GS=a("a"),Yfo=o("MegatronBertForPreTraining"),Kfo=o(" (MegatronBert model)"),Zfo=l(),A_=a("li"),pZ=a("strong"),emo=o("mobilebert"),omo=o(" \u2014 "),OS=a("a"),rmo=o("MobileBertForPreTraining"),tmo=o(" (MobileBERT model)"),amo=l(),L_=a("li"),_Z=a("strong"),nmo=o("mpnet"),smo=o(" \u2014 "),XS=a("a"),lmo=o("MPNetForMaskedLM"),imo=o(" (MPNet model)"),dmo=l(),B_=a("li"),uZ=a("strong"),cmo=o("openai-gpt"),fmo=o(" \u2014 "),VS=a("a"),mmo=o("OpenAIGPTLMHeadModel"),gmo=o(" (OpenAI GPT model)"),hmo=l(),x_=a("li"),bZ=a("strong"),pmo=o("retribert"),_mo=o(" \u2014 "),zS=a("a"),umo=o("RetriBertModel"),bmo=o(" (RetriBERT model)"),vmo=l(),k_=a("li"),vZ=a("strong"),Tmo=o("roberta"),Fmo=o(" \u2014 "),WS=a("a"),Cmo=o("RobertaForMaskedLM"),Mmo=o(" (RoBERTa model)"),Emo=l(),R_=a("li"),TZ=a("strong"),ymo=o("squeezebert"),wmo=o(" \u2014 "),QS=a("a"),Amo=o("SqueezeBertForMaskedLM"),Lmo=o(" (SqueezeBERT model)"),Bmo=l(),S_=a("li"),FZ=a("strong"),xmo=o("t5"),kmo=o(" \u2014 "),HS=a("a"),Rmo=o("T5ForConditionalGeneration"),Smo=o(" (T5 model)"),Pmo=l(),P_=a("li"),CZ=a("strong"),$mo=o("tapas"),Imo=o(" \u2014 "),US=a("a"),Dmo=o("TapasForMaskedLM"),jmo=o(" (TAPAS model)"),Nmo=l(),$_=a("li"),MZ=a("strong"),qmo=o("transfo-xl"),Gmo=o(" \u2014 "),JS=a("a"),Omo=o("TransfoXLLMHeadModel"),Xmo=o(" (Transformer-XL model)"),Vmo=l(),I_=a("li"),EZ=a("strong"),zmo=o("unispeech"),Wmo=o(" \u2014 "),YS=a("a"),Qmo=o("UniSpeechForPreTraining"),Hmo=o(" (UniSpeech model)"),Umo=l(),D_=a("li"),yZ=a("strong"),Jmo=o("unispeech-sat"),Ymo=o(" \u2014 "),KS=a("a"),Kmo=o("UniSpeechSatForPreTraining"),Zmo=o(" (UniSpeechSat model)"),ego=l(),j_=a("li"),wZ=a("strong"),ogo=o("visual_bert"),rgo=o(" \u2014 "),ZS=a("a"),tgo=o("VisualBertForPreTraining"),ago=o(" (VisualBert model)"),ngo=l(),N_=a("li"),AZ=a("strong"),sgo=o("vit_mae"),lgo=o(" \u2014 "),eP=a("a"),igo=o("ViTMAEForPreTraining"),dgo=o(" (ViTMAE model)"),cgo=l(),q_=a("li"),LZ=a("strong"),fgo=o("wav2vec2"),mgo=o(" \u2014 "),oP=a("a"),ggo=o("Wav2Vec2ForPreTraining"),hgo=o(" (Wav2Vec2 model)"),pgo=l(),G_=a("li"),BZ=a("strong"),_go=o("xlm"),ugo=o(" \u2014 "),rP=a("a"),bgo=o("XLMWithLMHeadModel"),vgo=o(" (XLM model)"),Tgo=l(),O_=a("li"),xZ=a("strong"),Fgo=o("xlm-roberta"),Cgo=o(" \u2014 "),tP=a("a"),Mgo=o("XLMRobertaForMaskedLM"),Ego=o(" (XLM-RoBERTa model)"),ygo=l(),X_=a("li"),kZ=a("strong"),wgo=o("xlm-roberta-xl"),Ago=o(" \u2014 "),aP=a("a"),Lgo=o("XLMRobertaXLForMaskedLM"),Bgo=o(" (XLM-RoBERTa-XL model)"),xgo=l(),V_=a("li"),RZ=a("strong"),kgo=o("xlnet"),Rgo=o(" \u2014 "),nP=a("a"),Sgo=o("XLNetLMHeadModel"),Pgo=o(" (XLNet model)"),$go=l(),z_=a("p"),Igo=o("The model is set in evaluation mode by default using "),SZ=a("code"),Dgo=o("model.eval()"),jgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PZ=a("code"),Ngo=o("model.train()"),qgo=l(),$Z=a("p"),Ggo=o("Examples:"),Ogo=l(),f(uE.$$.fragment),J9e=l(),Hi=a("h2"),W_=a("a"),IZ=a("span"),f(bE.$$.fragment),Xgo=l(),DZ=a("span"),Vgo=o("AutoModelForCausalLM"),Y9e=l(),Uo=a("div"),f(vE.$$.fragment),zgo=l(),Ui=a("p"),Wgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jZ=a("code"),Qgo=o("from_pretrained()"),Hgo=o("class method or the "),NZ=a("code"),Ugo=o("from_config()"),Jgo=o(`class
method.`),Ygo=l(),TE=a("p"),Kgo=o("This class cannot be instantiated directly using "),qZ=a("code"),Zgo=o("__init__()"),eho=o(" (throws an error)."),oho=l(),Or=a("div"),f(FE.$$.fragment),rho=l(),GZ=a("p"),tho=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aho=l(),Ji=a("p"),nho=o(`Note:
Loading a model from its configuration file does `),OZ=a("strong"),sho=o("not"),lho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=a("code"),iho=o("from_pretrained()"),dho=o("to load the model weights."),cho=l(),VZ=a("p"),fho=o("Examples:"),mho=l(),f(CE.$$.fragment),gho=l(),$e=a("div"),f(ME.$$.fragment),hho=l(),zZ=a("p"),pho=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_ho=l(),Ga=a("p"),uho=o("The model class to instantiate is selected based on the "),WZ=a("code"),bho=o("model_type"),vho=o(` property of the config object (either
passed as an argument or loaded from `),QZ=a("code"),Tho=o("pretrained_model_name_or_path"),Fho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HZ=a("code"),Cho=o("pretrained_model_name_or_path"),Mho=o(":"),Eho=l(),$=a("ul"),Q_=a("li"),UZ=a("strong"),yho=o("bart"),who=o(" \u2014 "),sP=a("a"),Aho=o("BartForCausalLM"),Lho=o(" (BART model)"),Bho=l(),H_=a("li"),JZ=a("strong"),xho=o("bert"),kho=o(" \u2014 "),lP=a("a"),Rho=o("BertLMHeadModel"),Sho=o(" (BERT model)"),Pho=l(),U_=a("li"),YZ=a("strong"),$ho=o("bert-generation"),Iho=o(" \u2014 "),iP=a("a"),Dho=o("BertGenerationDecoder"),jho=o(" (Bert Generation model)"),Nho=l(),J_=a("li"),KZ=a("strong"),qho=o("big_bird"),Gho=o(" \u2014 "),dP=a("a"),Oho=o("BigBirdForCausalLM"),Xho=o(" (BigBird model)"),Vho=l(),Y_=a("li"),ZZ=a("strong"),zho=o("bigbird_pegasus"),Who=o(" \u2014 "),cP=a("a"),Qho=o("BigBirdPegasusForCausalLM"),Hho=o(" (BigBirdPegasus model)"),Uho=l(),K_=a("li"),eee=a("strong"),Jho=o("blenderbot"),Yho=o(" \u2014 "),fP=a("a"),Kho=o("BlenderbotForCausalLM"),Zho=o(" (Blenderbot model)"),epo=l(),Z_=a("li"),oee=a("strong"),opo=o("blenderbot-small"),rpo=o(" \u2014 "),mP=a("a"),tpo=o("BlenderbotSmallForCausalLM"),apo=o(" (BlenderbotSmall model)"),npo=l(),eu=a("li"),ree=a("strong"),spo=o("camembert"),lpo=o(" \u2014 "),gP=a("a"),ipo=o("CamembertForCausalLM"),dpo=o(" (CamemBERT model)"),cpo=l(),ou=a("li"),tee=a("strong"),fpo=o("ctrl"),mpo=o(" \u2014 "),hP=a("a"),gpo=o("CTRLLMHeadModel"),hpo=o(" (CTRL model)"),ppo=l(),ru=a("li"),aee=a("strong"),_po=o("data2vec-text"),upo=o(" \u2014 "),pP=a("a"),bpo=o("Data2VecTextForCausalLM"),vpo=o(" (Data2VecText model)"),Tpo=l(),tu=a("li"),nee=a("strong"),Fpo=o("electra"),Cpo=o(" \u2014 "),_P=a("a"),Mpo=o("ElectraForCausalLM"),Epo=o(" (ELECTRA model)"),ypo=l(),au=a("li"),see=a("strong"),wpo=o("gpt2"),Apo=o(" \u2014 "),uP=a("a"),Lpo=o("GPT2LMHeadModel"),Bpo=o(" (OpenAI GPT-2 model)"),xpo=l(),nu=a("li"),lee=a("strong"),kpo=o("gpt_neo"),Rpo=o(" \u2014 "),bP=a("a"),Spo=o("GPTNeoForCausalLM"),Ppo=o(" (GPT Neo model)"),$po=l(),su=a("li"),iee=a("strong"),Ipo=o("gptj"),Dpo=o(" \u2014 "),vP=a("a"),jpo=o("GPTJForCausalLM"),Npo=o(" (GPT-J model)"),qpo=l(),lu=a("li"),dee=a("strong"),Gpo=o("marian"),Opo=o(" \u2014 "),TP=a("a"),Xpo=o("MarianForCausalLM"),Vpo=o(" (Marian model)"),zpo=l(),iu=a("li"),cee=a("strong"),Wpo=o("mbart"),Qpo=o(" \u2014 "),FP=a("a"),Hpo=o("MBartForCausalLM"),Upo=o(" (mBART model)"),Jpo=l(),du=a("li"),fee=a("strong"),Ypo=o("megatron-bert"),Kpo=o(" \u2014 "),CP=a("a"),Zpo=o("MegatronBertForCausalLM"),e_o=o(" (MegatronBert model)"),o_o=l(),cu=a("li"),mee=a("strong"),r_o=o("openai-gpt"),t_o=o(" \u2014 "),MP=a("a"),a_o=o("OpenAIGPTLMHeadModel"),n_o=o(" (OpenAI GPT model)"),s_o=l(),fu=a("li"),gee=a("strong"),l_o=o("pegasus"),i_o=o(" \u2014 "),EP=a("a"),d_o=o("PegasusForCausalLM"),c_o=o(" (Pegasus model)"),f_o=l(),mu=a("li"),hee=a("strong"),m_o=o("plbart"),g_o=o(" \u2014 "),yP=a("a"),h_o=o("PLBartForCausalLM"),p_o=o(" (PLBart model)"),__o=l(),gu=a("li"),pee=a("strong"),u_o=o("prophetnet"),b_o=o(" \u2014 "),wP=a("a"),v_o=o("ProphetNetForCausalLM"),T_o=o(" (ProphetNet model)"),F_o=l(),hu=a("li"),_ee=a("strong"),C_o=o("qdqbert"),M_o=o(" \u2014 "),AP=a("a"),E_o=o("QDQBertLMHeadModel"),y_o=o(" (QDQBert model)"),w_o=l(),pu=a("li"),uee=a("strong"),A_o=o("reformer"),L_o=o(" \u2014 "),LP=a("a"),B_o=o("ReformerModelWithLMHead"),x_o=o(" (Reformer model)"),k_o=l(),_u=a("li"),bee=a("strong"),R_o=o("rembert"),S_o=o(" \u2014 "),BP=a("a"),P_o=o("RemBertForCausalLM"),$_o=o(" (RemBERT model)"),I_o=l(),uu=a("li"),vee=a("strong"),D_o=o("roberta"),j_o=o(" \u2014 "),xP=a("a"),N_o=o("RobertaForCausalLM"),q_o=o(" (RoBERTa model)"),G_o=l(),bu=a("li"),Tee=a("strong"),O_o=o("roformer"),X_o=o(" \u2014 "),kP=a("a"),V_o=o("RoFormerForCausalLM"),z_o=o(" (RoFormer model)"),W_o=l(),vu=a("li"),Fee=a("strong"),Q_o=o("speech_to_text_2"),H_o=o(" \u2014 "),RP=a("a"),U_o=o("Speech2Text2ForCausalLM"),J_o=o(" (Speech2Text2 model)"),Y_o=l(),Tu=a("li"),Cee=a("strong"),K_o=o("transfo-xl"),Z_o=o(" \u2014 "),SP=a("a"),euo=o("TransfoXLLMHeadModel"),ouo=o(" (Transformer-XL model)"),ruo=l(),Fu=a("li"),Mee=a("strong"),tuo=o("trocr"),auo=o(" \u2014 "),PP=a("a"),nuo=o("TrOCRForCausalLM"),suo=o(" (TrOCR model)"),luo=l(),Cu=a("li"),Eee=a("strong"),iuo=o("xglm"),duo=o(" \u2014 "),$P=a("a"),cuo=o("XGLMForCausalLM"),fuo=o(" (XGLM model)"),muo=l(),Mu=a("li"),yee=a("strong"),guo=o("xlm"),huo=o(" \u2014 "),IP=a("a"),puo=o("XLMWithLMHeadModel"),_uo=o(" (XLM model)"),uuo=l(),Eu=a("li"),wee=a("strong"),buo=o("xlm-prophetnet"),vuo=o(" \u2014 "),DP=a("a"),Tuo=o("XLMProphetNetForCausalLM"),Fuo=o(" (XLMProphetNet model)"),Cuo=l(),yu=a("li"),Aee=a("strong"),Muo=o("xlm-roberta"),Euo=o(" \u2014 "),jP=a("a"),yuo=o("XLMRobertaForCausalLM"),wuo=o(" (XLM-RoBERTa model)"),Auo=l(),wu=a("li"),Lee=a("strong"),Luo=o("xlm-roberta-xl"),Buo=o(" \u2014 "),NP=a("a"),xuo=o("XLMRobertaXLForCausalLM"),kuo=o(" (XLM-RoBERTa-XL model)"),Ruo=l(),Au=a("li"),Bee=a("strong"),Suo=o("xlnet"),Puo=o(" \u2014 "),qP=a("a"),$uo=o("XLNetLMHeadModel"),Iuo=o(" (XLNet model)"),Duo=l(),Lu=a("p"),juo=o("The model is set in evaluation mode by default using "),xee=a("code"),Nuo=o("model.eval()"),quo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kee=a("code"),Guo=o("model.train()"),Ouo=l(),Ree=a("p"),Xuo=o("Examples:"),Vuo=l(),f(EE.$$.fragment),K9e=l(),Yi=a("h2"),Bu=a("a"),See=a("span"),f(yE.$$.fragment),zuo=l(),Pee=a("span"),Wuo=o("AutoModelForMaskedLM"),Z9e=l(),Jo=a("div"),f(wE.$$.fragment),Quo=l(),Ki=a("p"),Huo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$ee=a("code"),Uuo=o("from_pretrained()"),Juo=o("class method or the "),Iee=a("code"),Yuo=o("from_config()"),Kuo=o(`class
method.`),Zuo=l(),AE=a("p"),e1o=o("This class cannot be instantiated directly using "),Dee=a("code"),o1o=o("__init__()"),r1o=o(" (throws an error)."),t1o=l(),Xr=a("div"),f(LE.$$.fragment),a1o=l(),jee=a("p"),n1o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),s1o=l(),Zi=a("p"),l1o=o(`Note:
Loading a model from its configuration file does `),Nee=a("strong"),i1o=o("not"),d1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=a("code"),c1o=o("from_pretrained()"),f1o=o("to load the model weights."),m1o=l(),Gee=a("p"),g1o=o("Examples:"),h1o=l(),f(BE.$$.fragment),p1o=l(),Ie=a("div"),f(xE.$$.fragment),_1o=l(),Oee=a("p"),u1o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),b1o=l(),Oa=a("p"),v1o=o("The model class to instantiate is selected based on the "),Xee=a("code"),T1o=o("model_type"),F1o=o(` property of the config object (either
passed as an argument or loaded from `),Vee=a("code"),C1o=o("pretrained_model_name_or_path"),M1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zee=a("code"),E1o=o("pretrained_model_name_or_path"),y1o=o(":"),w1o=l(),I=a("ul"),xu=a("li"),Wee=a("strong"),A1o=o("albert"),L1o=o(" \u2014 "),GP=a("a"),B1o=o("AlbertForMaskedLM"),x1o=o(" (ALBERT model)"),k1o=l(),ku=a("li"),Qee=a("strong"),R1o=o("bart"),S1o=o(" \u2014 "),OP=a("a"),P1o=o("BartForConditionalGeneration"),$1o=o(" (BART model)"),I1o=l(),Ru=a("li"),Hee=a("strong"),D1o=o("bert"),j1o=o(" \u2014 "),XP=a("a"),N1o=o("BertForMaskedLM"),q1o=o(" (BERT model)"),G1o=l(),Su=a("li"),Uee=a("strong"),O1o=o("big_bird"),X1o=o(" \u2014 "),VP=a("a"),V1o=o("BigBirdForMaskedLM"),z1o=o(" (BigBird model)"),W1o=l(),Pu=a("li"),Jee=a("strong"),Q1o=o("camembert"),H1o=o(" \u2014 "),zP=a("a"),U1o=o("CamembertForMaskedLM"),J1o=o(" (CamemBERT model)"),Y1o=l(),$u=a("li"),Yee=a("strong"),K1o=o("convbert"),Z1o=o(" \u2014 "),WP=a("a"),e7o=o("ConvBertForMaskedLM"),o7o=o(" (ConvBERT model)"),r7o=l(),Iu=a("li"),Kee=a("strong"),t7o=o("data2vec-text"),a7o=o(" \u2014 "),QP=a("a"),n7o=o("Data2VecTextForMaskedLM"),s7o=o(" (Data2VecText model)"),l7o=l(),Du=a("li"),Zee=a("strong"),i7o=o("deberta"),d7o=o(" \u2014 "),HP=a("a"),c7o=o("DebertaForMaskedLM"),f7o=o(" (DeBERTa model)"),m7o=l(),ju=a("li"),eoe=a("strong"),g7o=o("deberta-v2"),h7o=o(" \u2014 "),UP=a("a"),p7o=o("DebertaV2ForMaskedLM"),_7o=o(" (DeBERTa-v2 model)"),u7o=l(),Nu=a("li"),ooe=a("strong"),b7o=o("distilbert"),v7o=o(" \u2014 "),JP=a("a"),T7o=o("DistilBertForMaskedLM"),F7o=o(" (DistilBERT model)"),C7o=l(),qu=a("li"),roe=a("strong"),M7o=o("electra"),E7o=o(" \u2014 "),YP=a("a"),y7o=o("ElectraForMaskedLM"),w7o=o(" (ELECTRA model)"),A7o=l(),Gu=a("li"),toe=a("strong"),L7o=o("flaubert"),B7o=o(" \u2014 "),KP=a("a"),x7o=o("FlaubertWithLMHeadModel"),k7o=o(" (FlauBERT model)"),R7o=l(),Ou=a("li"),aoe=a("strong"),S7o=o("fnet"),P7o=o(" \u2014 "),ZP=a("a"),$7o=o("FNetForMaskedLM"),I7o=o(" (FNet model)"),D7o=l(),Xu=a("li"),noe=a("strong"),j7o=o("funnel"),N7o=o(" \u2014 "),e$=a("a"),q7o=o("FunnelForMaskedLM"),G7o=o(" (Funnel Transformer model)"),O7o=l(),Vu=a("li"),soe=a("strong"),X7o=o("ibert"),V7o=o(" \u2014 "),o$=a("a"),z7o=o("IBertForMaskedLM"),W7o=o(" (I-BERT model)"),Q7o=l(),zu=a("li"),loe=a("strong"),H7o=o("layoutlm"),U7o=o(" \u2014 "),r$=a("a"),J7o=o("LayoutLMForMaskedLM"),Y7o=o(" (LayoutLM model)"),K7o=l(),Wu=a("li"),ioe=a("strong"),Z7o=o("longformer"),ebo=o(" \u2014 "),t$=a("a"),obo=o("LongformerForMaskedLM"),rbo=o(" (Longformer model)"),tbo=l(),Qu=a("li"),doe=a("strong"),abo=o("mbart"),nbo=o(" \u2014 "),a$=a("a"),sbo=o("MBartForConditionalGeneration"),lbo=o(" (mBART model)"),ibo=l(),Hu=a("li"),coe=a("strong"),dbo=o("megatron-bert"),cbo=o(" \u2014 "),n$=a("a"),fbo=o("MegatronBertForMaskedLM"),mbo=o(" (MegatronBert model)"),gbo=l(),Uu=a("li"),foe=a("strong"),hbo=o("mobilebert"),pbo=o(" \u2014 "),s$=a("a"),_bo=o("MobileBertForMaskedLM"),ubo=o(" (MobileBERT model)"),bbo=l(),Ju=a("li"),moe=a("strong"),vbo=o("mpnet"),Tbo=o(" \u2014 "),l$=a("a"),Fbo=o("MPNetForMaskedLM"),Cbo=o(" (MPNet model)"),Mbo=l(),Yu=a("li"),goe=a("strong"),Ebo=o("nystromformer"),ybo=o(" \u2014 "),i$=a("a"),wbo=o("NystromformerForMaskedLM"),Abo=o(" (Nystromformer model)"),Lbo=l(),Ku=a("li"),hoe=a("strong"),Bbo=o("perceiver"),xbo=o(" \u2014 "),d$=a("a"),kbo=o("PerceiverForMaskedLM"),Rbo=o(" (Perceiver model)"),Sbo=l(),Zu=a("li"),poe=a("strong"),Pbo=o("qdqbert"),$bo=o(" \u2014 "),c$=a("a"),Ibo=o("QDQBertForMaskedLM"),Dbo=o(" (QDQBert model)"),jbo=l(),e1=a("li"),_oe=a("strong"),Nbo=o("reformer"),qbo=o(" \u2014 "),f$=a("a"),Gbo=o("ReformerForMaskedLM"),Obo=o(" (Reformer model)"),Xbo=l(),o1=a("li"),uoe=a("strong"),Vbo=o("rembert"),zbo=o(" \u2014 "),m$=a("a"),Wbo=o("RemBertForMaskedLM"),Qbo=o(" (RemBERT model)"),Hbo=l(),r1=a("li"),boe=a("strong"),Ubo=o("roberta"),Jbo=o(" \u2014 "),g$=a("a"),Ybo=o("RobertaForMaskedLM"),Kbo=o(" (RoBERTa model)"),Zbo=l(),t1=a("li"),voe=a("strong"),e5o=o("roformer"),o5o=o(" \u2014 "),h$=a("a"),r5o=o("RoFormerForMaskedLM"),t5o=o(" (RoFormer model)"),a5o=l(),a1=a("li"),Toe=a("strong"),n5o=o("squeezebert"),s5o=o(" \u2014 "),p$=a("a"),l5o=o("SqueezeBertForMaskedLM"),i5o=o(" (SqueezeBERT model)"),d5o=l(),n1=a("li"),Foe=a("strong"),c5o=o("tapas"),f5o=o(" \u2014 "),_$=a("a"),m5o=o("TapasForMaskedLM"),g5o=o(" (TAPAS model)"),h5o=l(),s1=a("li"),Coe=a("strong"),p5o=o("wav2vec2"),_5o=o(" \u2014 "),Moe=a("code"),u5o=o("Wav2Vec2ForMaskedLM"),b5o=o("(Wav2Vec2 model)"),v5o=l(),l1=a("li"),Eoe=a("strong"),T5o=o("xlm"),F5o=o(" \u2014 "),u$=a("a"),C5o=o("XLMWithLMHeadModel"),M5o=o(" (XLM model)"),E5o=l(),i1=a("li"),yoe=a("strong"),y5o=o("xlm-roberta"),w5o=o(" \u2014 "),b$=a("a"),A5o=o("XLMRobertaForMaskedLM"),L5o=o(" (XLM-RoBERTa model)"),B5o=l(),d1=a("li"),woe=a("strong"),x5o=o("xlm-roberta-xl"),k5o=o(" \u2014 "),v$=a("a"),R5o=o("XLMRobertaXLForMaskedLM"),S5o=o(" (XLM-RoBERTa-XL model)"),P5o=l(),c1=a("li"),Aoe=a("strong"),$5o=o("yoso"),I5o=o(" \u2014 "),T$=a("a"),D5o=o("YosoForMaskedLM"),j5o=o(" (YOSO model)"),N5o=l(),f1=a("p"),q5o=o("The model is set in evaluation mode by default using "),Loe=a("code"),G5o=o("model.eval()"),O5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Boe=a("code"),X5o=o("model.train()"),V5o=l(),xoe=a("p"),z5o=o("Examples:"),W5o=l(),f(kE.$$.fragment),eBe=l(),ed=a("h2"),m1=a("a"),koe=a("span"),f(RE.$$.fragment),Q5o=l(),Roe=a("span"),H5o=o("AutoModelForSeq2SeqLM"),oBe=l(),Yo=a("div"),f(SE.$$.fragment),U5o=l(),od=a("p"),J5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Soe=a("code"),Y5o=o("from_pretrained()"),K5o=o("class method or the "),Poe=a("code"),Z5o=o("from_config()"),e2o=o(`class
method.`),o2o=l(),PE=a("p"),r2o=o("This class cannot be instantiated directly using "),$oe=a("code"),t2o=o("__init__()"),a2o=o(" (throws an error)."),n2o=l(),Vr=a("div"),f($E.$$.fragment),s2o=l(),Ioe=a("p"),l2o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),i2o=l(),rd=a("p"),d2o=o(`Note:
Loading a model from its configuration file does `),Doe=a("strong"),c2o=o("not"),f2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),joe=a("code"),m2o=o("from_pretrained()"),g2o=o("to load the model weights."),h2o=l(),Noe=a("p"),p2o=o("Examples:"),_2o=l(),f(IE.$$.fragment),u2o=l(),De=a("div"),f(DE.$$.fragment),b2o=l(),qoe=a("p"),v2o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),T2o=l(),Xa=a("p"),F2o=o("The model class to instantiate is selected based on the "),Goe=a("code"),C2o=o("model_type"),M2o=o(` property of the config object (either
passed as an argument or loaded from `),Ooe=a("code"),E2o=o("pretrained_model_name_or_path"),y2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xoe=a("code"),w2o=o("pretrained_model_name_or_path"),A2o=o(":"),L2o=l(),ne=a("ul"),g1=a("li"),Voe=a("strong"),B2o=o("bart"),x2o=o(" \u2014 "),F$=a("a"),k2o=o("BartForConditionalGeneration"),R2o=o(" (BART model)"),S2o=l(),h1=a("li"),zoe=a("strong"),P2o=o("bigbird_pegasus"),$2o=o(" \u2014 "),C$=a("a"),I2o=o("BigBirdPegasusForConditionalGeneration"),D2o=o(" (BigBirdPegasus model)"),j2o=l(),p1=a("li"),Woe=a("strong"),N2o=o("blenderbot"),q2o=o(" \u2014 "),M$=a("a"),G2o=o("BlenderbotForConditionalGeneration"),O2o=o(" (Blenderbot model)"),X2o=l(),_1=a("li"),Qoe=a("strong"),V2o=o("blenderbot-small"),z2o=o(" \u2014 "),E$=a("a"),W2o=o("BlenderbotSmallForConditionalGeneration"),Q2o=o(" (BlenderbotSmall model)"),H2o=l(),u1=a("li"),Hoe=a("strong"),U2o=o("encoder-decoder"),J2o=o(" \u2014 "),y$=a("a"),Y2o=o("EncoderDecoderModel"),K2o=o(" (Encoder decoder model)"),Z2o=l(),b1=a("li"),Uoe=a("strong"),evo=o("fsmt"),ovo=o(" \u2014 "),w$=a("a"),rvo=o("FSMTForConditionalGeneration"),tvo=o(" (FairSeq Machine-Translation model)"),avo=l(),v1=a("li"),Joe=a("strong"),nvo=o("led"),svo=o(" \u2014 "),A$=a("a"),lvo=o("LEDForConditionalGeneration"),ivo=o(" (LED model)"),dvo=l(),T1=a("li"),Yoe=a("strong"),cvo=o("m2m_100"),fvo=o(" \u2014 "),L$=a("a"),mvo=o("M2M100ForConditionalGeneration"),gvo=o(" (M2M100 model)"),hvo=l(),F1=a("li"),Koe=a("strong"),pvo=o("marian"),_vo=o(" \u2014 "),B$=a("a"),uvo=o("MarianMTModel"),bvo=o(" (Marian model)"),vvo=l(),C1=a("li"),Zoe=a("strong"),Tvo=o("mbart"),Fvo=o(" \u2014 "),x$=a("a"),Cvo=o("MBartForConditionalGeneration"),Mvo=o(" (mBART model)"),Evo=l(),M1=a("li"),ere=a("strong"),yvo=o("mt5"),wvo=o(" \u2014 "),k$=a("a"),Avo=o("MT5ForConditionalGeneration"),Lvo=o(" (mT5 model)"),Bvo=l(),E1=a("li"),ore=a("strong"),xvo=o("pegasus"),kvo=o(" \u2014 "),R$=a("a"),Rvo=o("PegasusForConditionalGeneration"),Svo=o(" (Pegasus model)"),Pvo=l(),y1=a("li"),rre=a("strong"),$vo=o("plbart"),Ivo=o(" \u2014 "),S$=a("a"),Dvo=o("PLBartForConditionalGeneration"),jvo=o(" (PLBart model)"),Nvo=l(),w1=a("li"),tre=a("strong"),qvo=o("prophetnet"),Gvo=o(" \u2014 "),P$=a("a"),Ovo=o("ProphetNetForConditionalGeneration"),Xvo=o(" (ProphetNet model)"),Vvo=l(),A1=a("li"),are=a("strong"),zvo=o("t5"),Wvo=o(" \u2014 "),$$=a("a"),Qvo=o("T5ForConditionalGeneration"),Hvo=o(" (T5 model)"),Uvo=l(),L1=a("li"),nre=a("strong"),Jvo=o("xlm-prophetnet"),Yvo=o(" \u2014 "),I$=a("a"),Kvo=o("XLMProphetNetForConditionalGeneration"),Zvo=o(" (XLMProphetNet model)"),e0o=l(),B1=a("p"),o0o=o("The model is set in evaluation mode by default using "),sre=a("code"),r0o=o("model.eval()"),t0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lre=a("code"),a0o=o("model.train()"),n0o=l(),ire=a("p"),s0o=o("Examples:"),l0o=l(),f(jE.$$.fragment),rBe=l(),td=a("h2"),x1=a("a"),dre=a("span"),f(NE.$$.fragment),i0o=l(),cre=a("span"),d0o=o("AutoModelForSequenceClassification"),tBe=l(),Ko=a("div"),f(qE.$$.fragment),c0o=l(),ad=a("p"),f0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fre=a("code"),m0o=o("from_pretrained()"),g0o=o("class method or the "),mre=a("code"),h0o=o("from_config()"),p0o=o(`class
method.`),_0o=l(),GE=a("p"),u0o=o("This class cannot be instantiated directly using "),gre=a("code"),b0o=o("__init__()"),v0o=o(" (throws an error)."),T0o=l(),zr=a("div"),f(OE.$$.fragment),F0o=l(),hre=a("p"),C0o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),M0o=l(),nd=a("p"),E0o=o(`Note:
Loading a model from its configuration file does `),pre=a("strong"),y0o=o("not"),w0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_re=a("code"),A0o=o("from_pretrained()"),L0o=o("to load the model weights."),B0o=l(),ure=a("p"),x0o=o("Examples:"),k0o=l(),f(XE.$$.fragment),R0o=l(),je=a("div"),f(VE.$$.fragment),S0o=l(),bre=a("p"),P0o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$0o=l(),Va=a("p"),I0o=o("The model class to instantiate is selected based on the "),vre=a("code"),D0o=o("model_type"),j0o=o(` property of the config object (either
passed as an argument or loaded from `),Tre=a("code"),N0o=o("pretrained_model_name_or_path"),q0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fre=a("code"),G0o=o("pretrained_model_name_or_path"),O0o=o(":"),X0o=l(),A=a("ul"),k1=a("li"),Cre=a("strong"),V0o=o("albert"),z0o=o(" \u2014 "),D$=a("a"),W0o=o("AlbertForSequenceClassification"),Q0o=o(" (ALBERT model)"),H0o=l(),R1=a("li"),Mre=a("strong"),U0o=o("bart"),J0o=o(" \u2014 "),j$=a("a"),Y0o=o("BartForSequenceClassification"),K0o=o(" (BART model)"),Z0o=l(),S1=a("li"),Ere=a("strong"),eTo=o("bert"),oTo=o(" \u2014 "),N$=a("a"),rTo=o("BertForSequenceClassification"),tTo=o(" (BERT model)"),aTo=l(),P1=a("li"),yre=a("strong"),nTo=o("big_bird"),sTo=o(" \u2014 "),q$=a("a"),lTo=o("BigBirdForSequenceClassification"),iTo=o(" (BigBird model)"),dTo=l(),$1=a("li"),wre=a("strong"),cTo=o("bigbird_pegasus"),fTo=o(" \u2014 "),G$=a("a"),mTo=o("BigBirdPegasusForSequenceClassification"),gTo=o(" (BigBirdPegasus model)"),hTo=l(),I1=a("li"),Are=a("strong"),pTo=o("camembert"),_To=o(" \u2014 "),O$=a("a"),uTo=o("CamembertForSequenceClassification"),bTo=o(" (CamemBERT model)"),vTo=l(),D1=a("li"),Lre=a("strong"),TTo=o("canine"),FTo=o(" \u2014 "),X$=a("a"),CTo=o("CanineForSequenceClassification"),MTo=o(" (Canine model)"),ETo=l(),j1=a("li"),Bre=a("strong"),yTo=o("convbert"),wTo=o(" \u2014 "),V$=a("a"),ATo=o("ConvBertForSequenceClassification"),LTo=o(" (ConvBERT model)"),BTo=l(),N1=a("li"),xre=a("strong"),xTo=o("ctrl"),kTo=o(" \u2014 "),z$=a("a"),RTo=o("CTRLForSequenceClassification"),STo=o(" (CTRL model)"),PTo=l(),q1=a("li"),kre=a("strong"),$To=o("data2vec-text"),ITo=o(" \u2014 "),W$=a("a"),DTo=o("Data2VecTextForSequenceClassification"),jTo=o(" (Data2VecText model)"),NTo=l(),G1=a("li"),Rre=a("strong"),qTo=o("deberta"),GTo=o(" \u2014 "),Q$=a("a"),OTo=o("DebertaForSequenceClassification"),XTo=o(" (DeBERTa model)"),VTo=l(),O1=a("li"),Sre=a("strong"),zTo=o("deberta-v2"),WTo=o(" \u2014 "),H$=a("a"),QTo=o("DebertaV2ForSequenceClassification"),HTo=o(" (DeBERTa-v2 model)"),UTo=l(),X1=a("li"),Pre=a("strong"),JTo=o("distilbert"),YTo=o(" \u2014 "),U$=a("a"),KTo=o("DistilBertForSequenceClassification"),ZTo=o(" (DistilBERT model)"),eFo=l(),V1=a("li"),$re=a("strong"),oFo=o("electra"),rFo=o(" \u2014 "),J$=a("a"),tFo=o("ElectraForSequenceClassification"),aFo=o(" (ELECTRA model)"),nFo=l(),z1=a("li"),Ire=a("strong"),sFo=o("flaubert"),lFo=o(" \u2014 "),Y$=a("a"),iFo=o("FlaubertForSequenceClassification"),dFo=o(" (FlauBERT model)"),cFo=l(),W1=a("li"),Dre=a("strong"),fFo=o("fnet"),mFo=o(" \u2014 "),K$=a("a"),gFo=o("FNetForSequenceClassification"),hFo=o(" (FNet model)"),pFo=l(),Q1=a("li"),jre=a("strong"),_Fo=o("funnel"),uFo=o(" \u2014 "),Z$=a("a"),bFo=o("FunnelForSequenceClassification"),vFo=o(" (Funnel Transformer model)"),TFo=l(),H1=a("li"),Nre=a("strong"),FFo=o("gpt2"),CFo=o(" \u2014 "),eI=a("a"),MFo=o("GPT2ForSequenceClassification"),EFo=o(" (OpenAI GPT-2 model)"),yFo=l(),U1=a("li"),qre=a("strong"),wFo=o("gpt_neo"),AFo=o(" \u2014 "),oI=a("a"),LFo=o("GPTNeoForSequenceClassification"),BFo=o(" (GPT Neo model)"),xFo=l(),J1=a("li"),Gre=a("strong"),kFo=o("gptj"),RFo=o(" \u2014 "),rI=a("a"),SFo=o("GPTJForSequenceClassification"),PFo=o(" (GPT-J model)"),$Fo=l(),Y1=a("li"),Ore=a("strong"),IFo=o("ibert"),DFo=o(" \u2014 "),tI=a("a"),jFo=o("IBertForSequenceClassification"),NFo=o(" (I-BERT model)"),qFo=l(),K1=a("li"),Xre=a("strong"),GFo=o("layoutlm"),OFo=o(" \u2014 "),aI=a("a"),XFo=o("LayoutLMForSequenceClassification"),VFo=o(" (LayoutLM model)"),zFo=l(),Z1=a("li"),Vre=a("strong"),WFo=o("layoutlmv2"),QFo=o(" \u2014 "),nI=a("a"),HFo=o("LayoutLMv2ForSequenceClassification"),UFo=o(" (LayoutLMv2 model)"),JFo=l(),e7=a("li"),zre=a("strong"),YFo=o("led"),KFo=o(" \u2014 "),sI=a("a"),ZFo=o("LEDForSequenceClassification"),eCo=o(" (LED model)"),oCo=l(),o7=a("li"),Wre=a("strong"),rCo=o("longformer"),tCo=o(" \u2014 "),lI=a("a"),aCo=o("LongformerForSequenceClassification"),nCo=o(" (Longformer model)"),sCo=l(),r7=a("li"),Qre=a("strong"),lCo=o("mbart"),iCo=o(" \u2014 "),iI=a("a"),dCo=o("MBartForSequenceClassification"),cCo=o(" (mBART model)"),fCo=l(),t7=a("li"),Hre=a("strong"),mCo=o("megatron-bert"),gCo=o(" \u2014 "),dI=a("a"),hCo=o("MegatronBertForSequenceClassification"),pCo=o(" (MegatronBert model)"),_Co=l(),a7=a("li"),Ure=a("strong"),uCo=o("mobilebert"),bCo=o(" \u2014 "),cI=a("a"),vCo=o("MobileBertForSequenceClassification"),TCo=o(" (MobileBERT model)"),FCo=l(),n7=a("li"),Jre=a("strong"),CCo=o("mpnet"),MCo=o(" \u2014 "),fI=a("a"),ECo=o("MPNetForSequenceClassification"),yCo=o(" (MPNet model)"),wCo=l(),s7=a("li"),Yre=a("strong"),ACo=o("nystromformer"),LCo=o(" \u2014 "),mI=a("a"),BCo=o("NystromformerForSequenceClassification"),xCo=o(" (Nystromformer model)"),kCo=l(),l7=a("li"),Kre=a("strong"),RCo=o("openai-gpt"),SCo=o(" \u2014 "),gI=a("a"),PCo=o("OpenAIGPTForSequenceClassification"),$Co=o(" (OpenAI GPT model)"),ICo=l(),i7=a("li"),Zre=a("strong"),DCo=o("perceiver"),jCo=o(" \u2014 "),hI=a("a"),NCo=o("PerceiverForSequenceClassification"),qCo=o(" (Perceiver model)"),GCo=l(),d7=a("li"),ete=a("strong"),OCo=o("plbart"),XCo=o(" \u2014 "),pI=a("a"),VCo=o("PLBartForSequenceClassification"),zCo=o(" (PLBart model)"),WCo=l(),c7=a("li"),ote=a("strong"),QCo=o("qdqbert"),HCo=o(" \u2014 "),_I=a("a"),UCo=o("QDQBertForSequenceClassification"),JCo=o(" (QDQBert model)"),YCo=l(),f7=a("li"),rte=a("strong"),KCo=o("reformer"),ZCo=o(" \u2014 "),uI=a("a"),e4o=o("ReformerForSequenceClassification"),o4o=o(" (Reformer model)"),r4o=l(),m7=a("li"),tte=a("strong"),t4o=o("rembert"),a4o=o(" \u2014 "),bI=a("a"),n4o=o("RemBertForSequenceClassification"),s4o=o(" (RemBERT model)"),l4o=l(),g7=a("li"),ate=a("strong"),i4o=o("roberta"),d4o=o(" \u2014 "),vI=a("a"),c4o=o("RobertaForSequenceClassification"),f4o=o(" (RoBERTa model)"),m4o=l(),h7=a("li"),nte=a("strong"),g4o=o("roformer"),h4o=o(" \u2014 "),TI=a("a"),p4o=o("RoFormerForSequenceClassification"),_4o=o(" (RoFormer model)"),u4o=l(),p7=a("li"),ste=a("strong"),b4o=o("squeezebert"),v4o=o(" \u2014 "),FI=a("a"),T4o=o("SqueezeBertForSequenceClassification"),F4o=o(" (SqueezeBERT model)"),C4o=l(),_7=a("li"),lte=a("strong"),M4o=o("tapas"),E4o=o(" \u2014 "),CI=a("a"),y4o=o("TapasForSequenceClassification"),w4o=o(" (TAPAS model)"),A4o=l(),u7=a("li"),ite=a("strong"),L4o=o("transfo-xl"),B4o=o(" \u2014 "),MI=a("a"),x4o=o("TransfoXLForSequenceClassification"),k4o=o(" (Transformer-XL model)"),R4o=l(),b7=a("li"),dte=a("strong"),S4o=o("xlm"),P4o=o(" \u2014 "),EI=a("a"),$4o=o("XLMForSequenceClassification"),I4o=o(" (XLM model)"),D4o=l(),v7=a("li"),cte=a("strong"),j4o=o("xlm-roberta"),N4o=o(" \u2014 "),yI=a("a"),q4o=o("XLMRobertaForSequenceClassification"),G4o=o(" (XLM-RoBERTa model)"),O4o=l(),T7=a("li"),fte=a("strong"),X4o=o("xlm-roberta-xl"),V4o=o(" \u2014 "),wI=a("a"),z4o=o("XLMRobertaXLForSequenceClassification"),W4o=o(" (XLM-RoBERTa-XL model)"),Q4o=l(),F7=a("li"),mte=a("strong"),H4o=o("xlnet"),U4o=o(" \u2014 "),AI=a("a"),J4o=o("XLNetForSequenceClassification"),Y4o=o(" (XLNet model)"),K4o=l(),C7=a("li"),gte=a("strong"),Z4o=o("yoso"),eMo=o(" \u2014 "),LI=a("a"),oMo=o("YosoForSequenceClassification"),rMo=o(" (YOSO model)"),tMo=l(),M7=a("p"),aMo=o("The model is set in evaluation mode by default using "),hte=a("code"),nMo=o("model.eval()"),sMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pte=a("code"),lMo=o("model.train()"),iMo=l(),_te=a("p"),dMo=o("Examples:"),cMo=l(),f(zE.$$.fragment),aBe=l(),sd=a("h2"),E7=a("a"),ute=a("span"),f(WE.$$.fragment),fMo=l(),bte=a("span"),mMo=o("AutoModelForMultipleChoice"),nBe=l(),Zo=a("div"),f(QE.$$.fragment),gMo=l(),ld=a("p"),hMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vte=a("code"),pMo=o("from_pretrained()"),_Mo=o("class method or the "),Tte=a("code"),uMo=o("from_config()"),bMo=o(`class
method.`),vMo=l(),HE=a("p"),TMo=o("This class cannot be instantiated directly using "),Fte=a("code"),FMo=o("__init__()"),CMo=o(" (throws an error)."),MMo=l(),Wr=a("div"),f(UE.$$.fragment),EMo=l(),Cte=a("p"),yMo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wMo=l(),id=a("p"),AMo=o(`Note:
Loading a model from its configuration file does `),Mte=a("strong"),LMo=o("not"),BMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ete=a("code"),xMo=o("from_pretrained()"),kMo=o("to load the model weights."),RMo=l(),yte=a("p"),SMo=o("Examples:"),PMo=l(),f(JE.$$.fragment),$Mo=l(),Ne=a("div"),f(YE.$$.fragment),IMo=l(),wte=a("p"),DMo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jMo=l(),za=a("p"),NMo=o("The model class to instantiate is selected based on the "),Ate=a("code"),qMo=o("model_type"),GMo=o(` property of the config object (either
passed as an argument or loaded from `),Lte=a("code"),OMo=o("pretrained_model_name_or_path"),XMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bte=a("code"),VMo=o("pretrained_model_name_or_path"),zMo=o(":"),WMo=l(),G=a("ul"),y7=a("li"),xte=a("strong"),QMo=o("albert"),HMo=o(" \u2014 "),BI=a("a"),UMo=o("AlbertForMultipleChoice"),JMo=o(" (ALBERT model)"),YMo=l(),w7=a("li"),kte=a("strong"),KMo=o("bert"),ZMo=o(" \u2014 "),xI=a("a"),eEo=o("BertForMultipleChoice"),oEo=o(" (BERT model)"),rEo=l(),A7=a("li"),Rte=a("strong"),tEo=o("big_bird"),aEo=o(" \u2014 "),kI=a("a"),nEo=o("BigBirdForMultipleChoice"),sEo=o(" (BigBird model)"),lEo=l(),L7=a("li"),Ste=a("strong"),iEo=o("camembert"),dEo=o(" \u2014 "),RI=a("a"),cEo=o("CamembertForMultipleChoice"),fEo=o(" (CamemBERT model)"),mEo=l(),B7=a("li"),Pte=a("strong"),gEo=o("canine"),hEo=o(" \u2014 "),SI=a("a"),pEo=o("CanineForMultipleChoice"),_Eo=o(" (Canine model)"),uEo=l(),x7=a("li"),$te=a("strong"),bEo=o("convbert"),vEo=o(" \u2014 "),PI=a("a"),TEo=o("ConvBertForMultipleChoice"),FEo=o(" (ConvBERT model)"),CEo=l(),k7=a("li"),Ite=a("strong"),MEo=o("data2vec-text"),EEo=o(" \u2014 "),$I=a("a"),yEo=o("Data2VecTextForMultipleChoice"),wEo=o(" (Data2VecText model)"),AEo=l(),R7=a("li"),Dte=a("strong"),LEo=o("distilbert"),BEo=o(" \u2014 "),II=a("a"),xEo=o("DistilBertForMultipleChoice"),kEo=o(" (DistilBERT model)"),REo=l(),S7=a("li"),jte=a("strong"),SEo=o("electra"),PEo=o(" \u2014 "),DI=a("a"),$Eo=o("ElectraForMultipleChoice"),IEo=o(" (ELECTRA model)"),DEo=l(),P7=a("li"),Nte=a("strong"),jEo=o("flaubert"),NEo=o(" \u2014 "),jI=a("a"),qEo=o("FlaubertForMultipleChoice"),GEo=o(" (FlauBERT model)"),OEo=l(),$7=a("li"),qte=a("strong"),XEo=o("fnet"),VEo=o(" \u2014 "),NI=a("a"),zEo=o("FNetForMultipleChoice"),WEo=o(" (FNet model)"),QEo=l(),I7=a("li"),Gte=a("strong"),HEo=o("funnel"),UEo=o(" \u2014 "),qI=a("a"),JEo=o("FunnelForMultipleChoice"),YEo=o(" (Funnel Transformer model)"),KEo=l(),D7=a("li"),Ote=a("strong"),ZEo=o("ibert"),e3o=o(" \u2014 "),GI=a("a"),o3o=o("IBertForMultipleChoice"),r3o=o(" (I-BERT model)"),t3o=l(),j7=a("li"),Xte=a("strong"),a3o=o("longformer"),n3o=o(" \u2014 "),OI=a("a"),s3o=o("LongformerForMultipleChoice"),l3o=o(" (Longformer model)"),i3o=l(),N7=a("li"),Vte=a("strong"),d3o=o("megatron-bert"),c3o=o(" \u2014 "),XI=a("a"),f3o=o("MegatronBertForMultipleChoice"),m3o=o(" (MegatronBert model)"),g3o=l(),q7=a("li"),zte=a("strong"),h3o=o("mobilebert"),p3o=o(" \u2014 "),VI=a("a"),_3o=o("MobileBertForMultipleChoice"),u3o=o(" (MobileBERT model)"),b3o=l(),G7=a("li"),Wte=a("strong"),v3o=o("mpnet"),T3o=o(" \u2014 "),zI=a("a"),F3o=o("MPNetForMultipleChoice"),C3o=o(" (MPNet model)"),M3o=l(),O7=a("li"),Qte=a("strong"),E3o=o("nystromformer"),y3o=o(" \u2014 "),WI=a("a"),w3o=o("NystromformerForMultipleChoice"),A3o=o(" (Nystromformer model)"),L3o=l(),X7=a("li"),Hte=a("strong"),B3o=o("qdqbert"),x3o=o(" \u2014 "),QI=a("a"),k3o=o("QDQBertForMultipleChoice"),R3o=o(" (QDQBert model)"),S3o=l(),V7=a("li"),Ute=a("strong"),P3o=o("rembert"),$3o=o(" \u2014 "),HI=a("a"),I3o=o("RemBertForMultipleChoice"),D3o=o(" (RemBERT model)"),j3o=l(),z7=a("li"),Jte=a("strong"),N3o=o("roberta"),q3o=o(" \u2014 "),UI=a("a"),G3o=o("RobertaForMultipleChoice"),O3o=o(" (RoBERTa model)"),X3o=l(),W7=a("li"),Yte=a("strong"),V3o=o("roformer"),z3o=o(" \u2014 "),JI=a("a"),W3o=o("RoFormerForMultipleChoice"),Q3o=o(" (RoFormer model)"),H3o=l(),Q7=a("li"),Kte=a("strong"),U3o=o("squeezebert"),J3o=o(" \u2014 "),YI=a("a"),Y3o=o("SqueezeBertForMultipleChoice"),K3o=o(" (SqueezeBERT model)"),Z3o=l(),H7=a("li"),Zte=a("strong"),eyo=o("xlm"),oyo=o(" \u2014 "),KI=a("a"),ryo=o("XLMForMultipleChoice"),tyo=o(" (XLM model)"),ayo=l(),U7=a("li"),eae=a("strong"),nyo=o("xlm-roberta"),syo=o(" \u2014 "),ZI=a("a"),lyo=o("XLMRobertaForMultipleChoice"),iyo=o(" (XLM-RoBERTa model)"),dyo=l(),J7=a("li"),oae=a("strong"),cyo=o("xlm-roberta-xl"),fyo=o(" \u2014 "),eD=a("a"),myo=o("XLMRobertaXLForMultipleChoice"),gyo=o(" (XLM-RoBERTa-XL model)"),hyo=l(),Y7=a("li"),rae=a("strong"),pyo=o("xlnet"),_yo=o(" \u2014 "),oD=a("a"),uyo=o("XLNetForMultipleChoice"),byo=o(" (XLNet model)"),vyo=l(),K7=a("li"),tae=a("strong"),Tyo=o("yoso"),Fyo=o(" \u2014 "),rD=a("a"),Cyo=o("YosoForMultipleChoice"),Myo=o(" (YOSO model)"),Eyo=l(),Z7=a("p"),yyo=o("The model is set in evaluation mode by default using "),aae=a("code"),wyo=o("model.eval()"),Ayo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nae=a("code"),Lyo=o("model.train()"),Byo=l(),sae=a("p"),xyo=o("Examples:"),kyo=l(),f(KE.$$.fragment),sBe=l(),dd=a("h2"),eb=a("a"),lae=a("span"),f(ZE.$$.fragment),Ryo=l(),iae=a("span"),Syo=o("AutoModelForNextSentencePrediction"),lBe=l(),er=a("div"),f(e3.$$.fragment),Pyo=l(),cd=a("p"),$yo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dae=a("code"),Iyo=o("from_pretrained()"),Dyo=o("class method or the "),cae=a("code"),jyo=o("from_config()"),Nyo=o(`class
method.`),qyo=l(),o3=a("p"),Gyo=o("This class cannot be instantiated directly using "),fae=a("code"),Oyo=o("__init__()"),Xyo=o(" (throws an error)."),Vyo=l(),Qr=a("div"),f(r3.$$.fragment),zyo=l(),mae=a("p"),Wyo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Qyo=l(),fd=a("p"),Hyo=o(`Note:
Loading a model from its configuration file does `),gae=a("strong"),Uyo=o("not"),Jyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hae=a("code"),Yyo=o("from_pretrained()"),Kyo=o("to load the model weights."),Zyo=l(),pae=a("p"),ewo=o("Examples:"),owo=l(),f(t3.$$.fragment),rwo=l(),qe=a("div"),f(a3.$$.fragment),two=l(),_ae=a("p"),awo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nwo=l(),Wa=a("p"),swo=o("The model class to instantiate is selected based on the "),uae=a("code"),lwo=o("model_type"),iwo=o(` property of the config object (either
passed as an argument or loaded from `),bae=a("code"),dwo=o("pretrained_model_name_or_path"),cwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vae=a("code"),fwo=o("pretrained_model_name_or_path"),mwo=o(":"),gwo=l(),na=a("ul"),ob=a("li"),Tae=a("strong"),hwo=o("bert"),pwo=o(" \u2014 "),tD=a("a"),_wo=o("BertForNextSentencePrediction"),uwo=o(" (BERT model)"),bwo=l(),rb=a("li"),Fae=a("strong"),vwo=o("fnet"),Two=o(" \u2014 "),aD=a("a"),Fwo=o("FNetForNextSentencePrediction"),Cwo=o(" (FNet model)"),Mwo=l(),tb=a("li"),Cae=a("strong"),Ewo=o("megatron-bert"),ywo=o(" \u2014 "),nD=a("a"),wwo=o("MegatronBertForNextSentencePrediction"),Awo=o(" (MegatronBert model)"),Lwo=l(),ab=a("li"),Mae=a("strong"),Bwo=o("mobilebert"),xwo=o(" \u2014 "),sD=a("a"),kwo=o("MobileBertForNextSentencePrediction"),Rwo=o(" (MobileBERT model)"),Swo=l(),nb=a("li"),Eae=a("strong"),Pwo=o("qdqbert"),$wo=o(" \u2014 "),lD=a("a"),Iwo=o("QDQBertForNextSentencePrediction"),Dwo=o(" (QDQBert model)"),jwo=l(),sb=a("p"),Nwo=o("The model is set in evaluation mode by default using "),yae=a("code"),qwo=o("model.eval()"),Gwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wae=a("code"),Owo=o("model.train()"),Xwo=l(),Aae=a("p"),Vwo=o("Examples:"),zwo=l(),f(n3.$$.fragment),iBe=l(),md=a("h2"),lb=a("a"),Lae=a("span"),f(s3.$$.fragment),Wwo=l(),Bae=a("span"),Qwo=o("AutoModelForTokenClassification"),dBe=l(),or=a("div"),f(l3.$$.fragment),Hwo=l(),gd=a("p"),Uwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xae=a("code"),Jwo=o("from_pretrained()"),Ywo=o("class method or the "),kae=a("code"),Kwo=o("from_config()"),Zwo=o(`class
method.`),e6o=l(),i3=a("p"),o6o=o("This class cannot be instantiated directly using "),Rae=a("code"),r6o=o("__init__()"),t6o=o(" (throws an error)."),a6o=l(),Hr=a("div"),f(d3.$$.fragment),n6o=l(),Sae=a("p"),s6o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),l6o=l(),hd=a("p"),i6o=o(`Note:
Loading a model from its configuration file does `),Pae=a("strong"),d6o=o("not"),c6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ae=a("code"),f6o=o("from_pretrained()"),m6o=o("to load the model weights."),g6o=l(),Iae=a("p"),h6o=o("Examples:"),p6o=l(),f(c3.$$.fragment),_6o=l(),Ge=a("div"),f(f3.$$.fragment),u6o=l(),Dae=a("p"),b6o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),v6o=l(),Qa=a("p"),T6o=o("The model class to instantiate is selected based on the "),jae=a("code"),F6o=o("model_type"),C6o=o(` property of the config object (either
passed as an argument or loaded from `),Nae=a("code"),M6o=o("pretrained_model_name_or_path"),E6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qae=a("code"),y6o=o("pretrained_model_name_or_path"),w6o=o(":"),A6o=l(),N=a("ul"),ib=a("li"),Gae=a("strong"),L6o=o("albert"),B6o=o(" \u2014 "),iD=a("a"),x6o=o("AlbertForTokenClassification"),k6o=o(" (ALBERT model)"),R6o=l(),db=a("li"),Oae=a("strong"),S6o=o("bert"),P6o=o(" \u2014 "),dD=a("a"),$6o=o("BertForTokenClassification"),I6o=o(" (BERT model)"),D6o=l(),cb=a("li"),Xae=a("strong"),j6o=o("big_bird"),N6o=o(" \u2014 "),cD=a("a"),q6o=o("BigBirdForTokenClassification"),G6o=o(" (BigBird model)"),O6o=l(),fb=a("li"),Vae=a("strong"),X6o=o("camembert"),V6o=o(" \u2014 "),fD=a("a"),z6o=o("CamembertForTokenClassification"),W6o=o(" (CamemBERT model)"),Q6o=l(),mb=a("li"),zae=a("strong"),H6o=o("canine"),U6o=o(" \u2014 "),mD=a("a"),J6o=o("CanineForTokenClassification"),Y6o=o(" (Canine model)"),K6o=l(),gb=a("li"),Wae=a("strong"),Z6o=o("convbert"),eAo=o(" \u2014 "),gD=a("a"),oAo=o("ConvBertForTokenClassification"),rAo=o(" (ConvBERT model)"),tAo=l(),hb=a("li"),Qae=a("strong"),aAo=o("data2vec-text"),nAo=o(" \u2014 "),hD=a("a"),sAo=o("Data2VecTextForTokenClassification"),lAo=o(" (Data2VecText model)"),iAo=l(),pb=a("li"),Hae=a("strong"),dAo=o("deberta"),cAo=o(" \u2014 "),pD=a("a"),fAo=o("DebertaForTokenClassification"),mAo=o(" (DeBERTa model)"),gAo=l(),_b=a("li"),Uae=a("strong"),hAo=o("deberta-v2"),pAo=o(" \u2014 "),_D=a("a"),_Ao=o("DebertaV2ForTokenClassification"),uAo=o(" (DeBERTa-v2 model)"),bAo=l(),ub=a("li"),Jae=a("strong"),vAo=o("distilbert"),TAo=o(" \u2014 "),uD=a("a"),FAo=o("DistilBertForTokenClassification"),CAo=o(" (DistilBERT model)"),MAo=l(),bb=a("li"),Yae=a("strong"),EAo=o("electra"),yAo=o(" \u2014 "),bD=a("a"),wAo=o("ElectraForTokenClassification"),AAo=o(" (ELECTRA model)"),LAo=l(),vb=a("li"),Kae=a("strong"),BAo=o("flaubert"),xAo=o(" \u2014 "),vD=a("a"),kAo=o("FlaubertForTokenClassification"),RAo=o(" (FlauBERT model)"),SAo=l(),Tb=a("li"),Zae=a("strong"),PAo=o("fnet"),$Ao=o(" \u2014 "),TD=a("a"),IAo=o("FNetForTokenClassification"),DAo=o(" (FNet model)"),jAo=l(),Fb=a("li"),ene=a("strong"),NAo=o("funnel"),qAo=o(" \u2014 "),FD=a("a"),GAo=o("FunnelForTokenClassification"),OAo=o(" (Funnel Transformer model)"),XAo=l(),Cb=a("li"),one=a("strong"),VAo=o("gpt2"),zAo=o(" \u2014 "),CD=a("a"),WAo=o("GPT2ForTokenClassification"),QAo=o(" (OpenAI GPT-2 model)"),HAo=l(),Mb=a("li"),rne=a("strong"),UAo=o("ibert"),JAo=o(" \u2014 "),MD=a("a"),YAo=o("IBertForTokenClassification"),KAo=o(" (I-BERT model)"),ZAo=l(),Eb=a("li"),tne=a("strong"),eLo=o("layoutlm"),oLo=o(" \u2014 "),ED=a("a"),rLo=o("LayoutLMForTokenClassification"),tLo=o(" (LayoutLM model)"),aLo=l(),yb=a("li"),ane=a("strong"),nLo=o("layoutlmv2"),sLo=o(" \u2014 "),yD=a("a"),lLo=o("LayoutLMv2ForTokenClassification"),iLo=o(" (LayoutLMv2 model)"),dLo=l(),wb=a("li"),nne=a("strong"),cLo=o("longformer"),fLo=o(" \u2014 "),wD=a("a"),mLo=o("LongformerForTokenClassification"),gLo=o(" (Longformer model)"),hLo=l(),Ab=a("li"),sne=a("strong"),pLo=o("megatron-bert"),_Lo=o(" \u2014 "),AD=a("a"),uLo=o("MegatronBertForTokenClassification"),bLo=o(" (MegatronBert model)"),vLo=l(),Lb=a("li"),lne=a("strong"),TLo=o("mobilebert"),FLo=o(" \u2014 "),LD=a("a"),CLo=o("MobileBertForTokenClassification"),MLo=o(" (MobileBERT model)"),ELo=l(),Bb=a("li"),ine=a("strong"),yLo=o("mpnet"),wLo=o(" \u2014 "),BD=a("a"),ALo=o("MPNetForTokenClassification"),LLo=o(" (MPNet model)"),BLo=l(),xb=a("li"),dne=a("strong"),xLo=o("nystromformer"),kLo=o(" \u2014 "),xD=a("a"),RLo=o("NystromformerForTokenClassification"),SLo=o(" (Nystromformer model)"),PLo=l(),kb=a("li"),cne=a("strong"),$Lo=o("qdqbert"),ILo=o(" \u2014 "),kD=a("a"),DLo=o("QDQBertForTokenClassification"),jLo=o(" (QDQBert model)"),NLo=l(),Rb=a("li"),fne=a("strong"),qLo=o("rembert"),GLo=o(" \u2014 "),RD=a("a"),OLo=o("RemBertForTokenClassification"),XLo=o(" (RemBERT model)"),VLo=l(),Sb=a("li"),mne=a("strong"),zLo=o("roberta"),WLo=o(" \u2014 "),SD=a("a"),QLo=o("RobertaForTokenClassification"),HLo=o(" (RoBERTa model)"),ULo=l(),Pb=a("li"),gne=a("strong"),JLo=o("roformer"),YLo=o(" \u2014 "),PD=a("a"),KLo=o("RoFormerForTokenClassification"),ZLo=o(" (RoFormer model)"),e8o=l(),$b=a("li"),hne=a("strong"),o8o=o("squeezebert"),r8o=o(" \u2014 "),$D=a("a"),t8o=o("SqueezeBertForTokenClassification"),a8o=o(" (SqueezeBERT model)"),n8o=l(),Ib=a("li"),pne=a("strong"),s8o=o("xlm"),l8o=o(" \u2014 "),ID=a("a"),i8o=o("XLMForTokenClassification"),d8o=o(" (XLM model)"),c8o=l(),Db=a("li"),_ne=a("strong"),f8o=o("xlm-roberta"),m8o=o(" \u2014 "),DD=a("a"),g8o=o("XLMRobertaForTokenClassification"),h8o=o(" (XLM-RoBERTa model)"),p8o=l(),jb=a("li"),une=a("strong"),_8o=o("xlm-roberta-xl"),u8o=o(" \u2014 "),jD=a("a"),b8o=o("XLMRobertaXLForTokenClassification"),v8o=o(" (XLM-RoBERTa-XL model)"),T8o=l(),Nb=a("li"),bne=a("strong"),F8o=o("xlnet"),C8o=o(" \u2014 "),ND=a("a"),M8o=o("XLNetForTokenClassification"),E8o=o(" (XLNet model)"),y8o=l(),qb=a("li"),vne=a("strong"),w8o=o("yoso"),A8o=o(" \u2014 "),qD=a("a"),L8o=o("YosoForTokenClassification"),B8o=o(" (YOSO model)"),x8o=l(),Gb=a("p"),k8o=o("The model is set in evaluation mode by default using "),Tne=a("code"),R8o=o("model.eval()"),S8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fne=a("code"),P8o=o("model.train()"),$8o=l(),Cne=a("p"),I8o=o("Examples:"),D8o=l(),f(m3.$$.fragment),cBe=l(),pd=a("h2"),Ob=a("a"),Mne=a("span"),f(g3.$$.fragment),j8o=l(),Ene=a("span"),N8o=o("AutoModelForQuestionAnswering"),fBe=l(),rr=a("div"),f(h3.$$.fragment),q8o=l(),_d=a("p"),G8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yne=a("code"),O8o=o("from_pretrained()"),X8o=o("class method or the "),wne=a("code"),V8o=o("from_config()"),z8o=o(`class
method.`),W8o=l(),p3=a("p"),Q8o=o("This class cannot be instantiated directly using "),Ane=a("code"),H8o=o("__init__()"),U8o=o(" (throws an error)."),J8o=l(),Ur=a("div"),f(_3.$$.fragment),Y8o=l(),Lne=a("p"),K8o=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Z8o=l(),ud=a("p"),e9o=o(`Note:
Loading a model from its configuration file does `),Bne=a("strong"),o9o=o("not"),r9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xne=a("code"),t9o=o("from_pretrained()"),a9o=o("to load the model weights."),n9o=l(),kne=a("p"),s9o=o("Examples:"),l9o=l(),f(u3.$$.fragment),i9o=l(),Oe=a("div"),f(b3.$$.fragment),d9o=l(),Rne=a("p"),c9o=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),f9o=l(),Ha=a("p"),m9o=o("The model class to instantiate is selected based on the "),Sne=a("code"),g9o=o("model_type"),h9o=o(` property of the config object (either
passed as an argument or loaded from `),Pne=a("code"),p9o=o("pretrained_model_name_or_path"),_9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ne=a("code"),u9o=o("pretrained_model_name_or_path"),b9o=o(":"),v9o=l(),R=a("ul"),Xb=a("li"),Ine=a("strong"),T9o=o("albert"),F9o=o(" \u2014 "),GD=a("a"),C9o=o("AlbertForQuestionAnswering"),M9o=o(" (ALBERT model)"),E9o=l(),Vb=a("li"),Dne=a("strong"),y9o=o("bart"),w9o=o(" \u2014 "),OD=a("a"),A9o=o("BartForQuestionAnswering"),L9o=o(" (BART model)"),B9o=l(),zb=a("li"),jne=a("strong"),x9o=o("bert"),k9o=o(" \u2014 "),XD=a("a"),R9o=o("BertForQuestionAnswering"),S9o=o(" (BERT model)"),P9o=l(),Wb=a("li"),Nne=a("strong"),$9o=o("big_bird"),I9o=o(" \u2014 "),VD=a("a"),D9o=o("BigBirdForQuestionAnswering"),j9o=o(" (BigBird model)"),N9o=l(),Qb=a("li"),qne=a("strong"),q9o=o("bigbird_pegasus"),G9o=o(" \u2014 "),zD=a("a"),O9o=o("BigBirdPegasusForQuestionAnswering"),X9o=o(" (BigBirdPegasus model)"),V9o=l(),Hb=a("li"),Gne=a("strong"),z9o=o("camembert"),W9o=o(" \u2014 "),WD=a("a"),Q9o=o("CamembertForQuestionAnswering"),H9o=o(" (CamemBERT model)"),U9o=l(),Ub=a("li"),One=a("strong"),J9o=o("canine"),Y9o=o(" \u2014 "),QD=a("a"),K9o=o("CanineForQuestionAnswering"),Z9o=o(" (Canine model)"),eBo=l(),Jb=a("li"),Xne=a("strong"),oBo=o("convbert"),rBo=o(" \u2014 "),HD=a("a"),tBo=o("ConvBertForQuestionAnswering"),aBo=o(" (ConvBERT model)"),nBo=l(),Yb=a("li"),Vne=a("strong"),sBo=o("data2vec-text"),lBo=o(" \u2014 "),UD=a("a"),iBo=o("Data2VecTextForQuestionAnswering"),dBo=o(" (Data2VecText model)"),cBo=l(),Kb=a("li"),zne=a("strong"),fBo=o("deberta"),mBo=o(" \u2014 "),JD=a("a"),gBo=o("DebertaForQuestionAnswering"),hBo=o(" (DeBERTa model)"),pBo=l(),Zb=a("li"),Wne=a("strong"),_Bo=o("deberta-v2"),uBo=o(" \u2014 "),YD=a("a"),bBo=o("DebertaV2ForQuestionAnswering"),vBo=o(" (DeBERTa-v2 model)"),TBo=l(),e5=a("li"),Qne=a("strong"),FBo=o("distilbert"),CBo=o(" \u2014 "),KD=a("a"),MBo=o("DistilBertForQuestionAnswering"),EBo=o(" (DistilBERT model)"),yBo=l(),o5=a("li"),Hne=a("strong"),wBo=o("electra"),ABo=o(" \u2014 "),ZD=a("a"),LBo=o("ElectraForQuestionAnswering"),BBo=o(" (ELECTRA model)"),xBo=l(),r5=a("li"),Une=a("strong"),kBo=o("flaubert"),RBo=o(" \u2014 "),ej=a("a"),SBo=o("FlaubertForQuestionAnsweringSimple"),PBo=o(" (FlauBERT model)"),$Bo=l(),t5=a("li"),Jne=a("strong"),IBo=o("fnet"),DBo=o(" \u2014 "),oj=a("a"),jBo=o("FNetForQuestionAnswering"),NBo=o(" (FNet model)"),qBo=l(),a5=a("li"),Yne=a("strong"),GBo=o("funnel"),OBo=o(" \u2014 "),rj=a("a"),XBo=o("FunnelForQuestionAnswering"),VBo=o(" (Funnel Transformer model)"),zBo=l(),n5=a("li"),Kne=a("strong"),WBo=o("gptj"),QBo=o(" \u2014 "),tj=a("a"),HBo=o("GPTJForQuestionAnswering"),UBo=o(" (GPT-J model)"),JBo=l(),s5=a("li"),Zne=a("strong"),YBo=o("ibert"),KBo=o(" \u2014 "),aj=a("a"),ZBo=o("IBertForQuestionAnswering"),exo=o(" (I-BERT model)"),oxo=l(),l5=a("li"),ese=a("strong"),rxo=o("layoutlmv2"),txo=o(" \u2014 "),nj=a("a"),axo=o("LayoutLMv2ForQuestionAnswering"),nxo=o(" (LayoutLMv2 model)"),sxo=l(),i5=a("li"),ose=a("strong"),lxo=o("led"),ixo=o(" \u2014 "),sj=a("a"),dxo=o("LEDForQuestionAnswering"),cxo=o(" (LED model)"),fxo=l(),d5=a("li"),rse=a("strong"),mxo=o("longformer"),gxo=o(" \u2014 "),lj=a("a"),hxo=o("LongformerForQuestionAnswering"),pxo=o(" (Longformer model)"),_xo=l(),c5=a("li"),tse=a("strong"),uxo=o("lxmert"),bxo=o(" \u2014 "),ij=a("a"),vxo=o("LxmertForQuestionAnswering"),Txo=o(" (LXMERT model)"),Fxo=l(),f5=a("li"),ase=a("strong"),Cxo=o("mbart"),Mxo=o(" \u2014 "),dj=a("a"),Exo=o("MBartForQuestionAnswering"),yxo=o(" (mBART model)"),wxo=l(),m5=a("li"),nse=a("strong"),Axo=o("megatron-bert"),Lxo=o(" \u2014 "),cj=a("a"),Bxo=o("MegatronBertForQuestionAnswering"),xxo=o(" (MegatronBert model)"),kxo=l(),g5=a("li"),sse=a("strong"),Rxo=o("mobilebert"),Sxo=o(" \u2014 "),fj=a("a"),Pxo=o("MobileBertForQuestionAnswering"),$xo=o(" (MobileBERT model)"),Ixo=l(),h5=a("li"),lse=a("strong"),Dxo=o("mpnet"),jxo=o(" \u2014 "),mj=a("a"),Nxo=o("MPNetForQuestionAnswering"),qxo=o(" (MPNet model)"),Gxo=l(),p5=a("li"),ise=a("strong"),Oxo=o("nystromformer"),Xxo=o(" \u2014 "),gj=a("a"),Vxo=o("NystromformerForQuestionAnswering"),zxo=o(" (Nystromformer model)"),Wxo=l(),_5=a("li"),dse=a("strong"),Qxo=o("qdqbert"),Hxo=o(" \u2014 "),hj=a("a"),Uxo=o("QDQBertForQuestionAnswering"),Jxo=o(" (QDQBert model)"),Yxo=l(),u5=a("li"),cse=a("strong"),Kxo=o("reformer"),Zxo=o(" \u2014 "),pj=a("a"),eko=o("ReformerForQuestionAnswering"),oko=o(" (Reformer model)"),rko=l(),b5=a("li"),fse=a("strong"),tko=o("rembert"),ako=o(" \u2014 "),_j=a("a"),nko=o("RemBertForQuestionAnswering"),sko=o(" (RemBERT model)"),lko=l(),v5=a("li"),mse=a("strong"),iko=o("roberta"),dko=o(" \u2014 "),uj=a("a"),cko=o("RobertaForQuestionAnswering"),fko=o(" (RoBERTa model)"),mko=l(),T5=a("li"),gse=a("strong"),gko=o("roformer"),hko=o(" \u2014 "),bj=a("a"),pko=o("RoFormerForQuestionAnswering"),_ko=o(" (RoFormer model)"),uko=l(),F5=a("li"),hse=a("strong"),bko=o("splinter"),vko=o(" \u2014 "),vj=a("a"),Tko=o("SplinterForQuestionAnswering"),Fko=o(" (Splinter model)"),Cko=l(),C5=a("li"),pse=a("strong"),Mko=o("squeezebert"),Eko=o(" \u2014 "),Tj=a("a"),yko=o("SqueezeBertForQuestionAnswering"),wko=o(" (SqueezeBERT model)"),Ako=l(),M5=a("li"),_se=a("strong"),Lko=o("xlm"),Bko=o(" \u2014 "),Fj=a("a"),xko=o("XLMForQuestionAnsweringSimple"),kko=o(" (XLM model)"),Rko=l(),E5=a("li"),use=a("strong"),Sko=o("xlm-roberta"),Pko=o(" \u2014 "),Cj=a("a"),$ko=o("XLMRobertaForQuestionAnswering"),Iko=o(" (XLM-RoBERTa model)"),Dko=l(),y5=a("li"),bse=a("strong"),jko=o("xlm-roberta-xl"),Nko=o(" \u2014 "),Mj=a("a"),qko=o("XLMRobertaXLForQuestionAnswering"),Gko=o(" (XLM-RoBERTa-XL model)"),Oko=l(),w5=a("li"),vse=a("strong"),Xko=o("xlnet"),Vko=o(" \u2014 "),Ej=a("a"),zko=o("XLNetForQuestionAnsweringSimple"),Wko=o(" (XLNet model)"),Qko=l(),A5=a("li"),Tse=a("strong"),Hko=o("yoso"),Uko=o(" \u2014 "),yj=a("a"),Jko=o("YosoForQuestionAnswering"),Yko=o(" (YOSO model)"),Kko=l(),L5=a("p"),Zko=o("The model is set in evaluation mode by default using "),Fse=a("code"),eRo=o("model.eval()"),oRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cse=a("code"),rRo=o("model.train()"),tRo=l(),Mse=a("p"),aRo=o("Examples:"),nRo=l(),f(v3.$$.fragment),mBe=l(),bd=a("h2"),B5=a("a"),Ese=a("span"),f(T3.$$.fragment),sRo=l(),yse=a("span"),lRo=o("AutoModelForTableQuestionAnswering"),gBe=l(),tr=a("div"),f(F3.$$.fragment),iRo=l(),vd=a("p"),dRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),wse=a("code"),cRo=o("from_pretrained()"),fRo=o("class method or the "),Ase=a("code"),mRo=o("from_config()"),gRo=o(`class
method.`),hRo=l(),C3=a("p"),pRo=o("This class cannot be instantiated directly using "),Lse=a("code"),_Ro=o("__init__()"),uRo=o(" (throws an error)."),bRo=l(),Jr=a("div"),f(M3.$$.fragment),vRo=l(),Bse=a("p"),TRo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),FRo=l(),Td=a("p"),CRo=o(`Note:
Loading a model from its configuration file does `),xse=a("strong"),MRo=o("not"),ERo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kse=a("code"),yRo=o("from_pretrained()"),wRo=o("to load the model weights."),ARo=l(),Rse=a("p"),LRo=o("Examples:"),BRo=l(),f(E3.$$.fragment),xRo=l(),Xe=a("div"),f(y3.$$.fragment),kRo=l(),Sse=a("p"),RRo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),SRo=l(),Ua=a("p"),PRo=o("The model class to instantiate is selected based on the "),Pse=a("code"),$Ro=o("model_type"),IRo=o(` property of the config object (either
passed as an argument or loaded from `),$se=a("code"),DRo=o("pretrained_model_name_or_path"),jRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ise=a("code"),NRo=o("pretrained_model_name_or_path"),qRo=o(":"),GRo=l(),Dse=a("ul"),x5=a("li"),jse=a("strong"),ORo=o("tapas"),XRo=o(" \u2014 "),wj=a("a"),VRo=o("TapasForQuestionAnswering"),zRo=o(" (TAPAS model)"),WRo=l(),k5=a("p"),QRo=o("The model is set in evaluation mode by default using "),Nse=a("code"),HRo=o("model.eval()"),URo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qse=a("code"),JRo=o("model.train()"),YRo=l(),Gse=a("p"),KRo=o("Examples:"),ZRo=l(),f(w3.$$.fragment),hBe=l(),Fd=a("h2"),R5=a("a"),Ose=a("span"),f(A3.$$.fragment),eSo=l(),Xse=a("span"),oSo=o("AutoModelForImageClassification"),pBe=l(),ar=a("div"),f(L3.$$.fragment),rSo=l(),Cd=a("p"),tSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Vse=a("code"),aSo=o("from_pretrained()"),nSo=o("class method or the "),zse=a("code"),sSo=o("from_config()"),lSo=o(`class
method.`),iSo=l(),B3=a("p"),dSo=o("This class cannot be instantiated directly using "),Wse=a("code"),cSo=o("__init__()"),fSo=o(" (throws an error)."),mSo=l(),Yr=a("div"),f(x3.$$.fragment),gSo=l(),Qse=a("p"),hSo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pSo=l(),Md=a("p"),_So=o(`Note:
Loading a model from its configuration file does `),Hse=a("strong"),uSo=o("not"),bSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Use=a("code"),vSo=o("from_pretrained()"),TSo=o("to load the model weights."),FSo=l(),Jse=a("p"),CSo=o("Examples:"),MSo=l(),f(k3.$$.fragment),ESo=l(),Ve=a("div"),f(R3.$$.fragment),ySo=l(),Yse=a("p"),wSo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ASo=l(),Ja=a("p"),LSo=o("The model class to instantiate is selected based on the "),Kse=a("code"),BSo=o("model_type"),xSo=o(` property of the config object (either
passed as an argument or loaded from `),Zse=a("code"),kSo=o("pretrained_model_name_or_path"),RSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=a("code"),SSo=o("pretrained_model_name_or_path"),PSo=o(":"),$So=l(),he=a("ul"),S5=a("li"),ole=a("strong"),ISo=o("beit"),DSo=o(" \u2014 "),Aj=a("a"),jSo=o("BeitForImageClassification"),NSo=o(" (BEiT model)"),qSo=l(),P5=a("li"),rle=a("strong"),GSo=o("convnext"),OSo=o(" \u2014 "),Lj=a("a"),XSo=o("ConvNextForImageClassification"),VSo=o(" (ConvNext model)"),zSo=l(),Ps=a("li"),tle=a("strong"),WSo=o("deit"),QSo=o(" \u2014 "),Bj=a("a"),HSo=o("DeiTForImageClassification"),USo=o(" or "),xj=a("a"),JSo=o("DeiTForImageClassificationWithTeacher"),YSo=o(" (DeiT model)"),KSo=l(),$5=a("li"),ale=a("strong"),ZSo=o("imagegpt"),ePo=o(" \u2014 "),kj=a("a"),oPo=o("ImageGPTForImageClassification"),rPo=o(" (ImageGPT model)"),tPo=l(),la=a("li"),nle=a("strong"),aPo=o("perceiver"),nPo=o(" \u2014 "),Rj=a("a"),sPo=o("PerceiverForImageClassificationLearned"),lPo=o(" or "),Sj=a("a"),iPo=o("PerceiverForImageClassificationFourier"),dPo=o(" or "),Pj=a("a"),cPo=o("PerceiverForImageClassificationConvProcessing"),fPo=o(" (Perceiver model)"),mPo=l(),I5=a("li"),sle=a("strong"),gPo=o("poolformer"),hPo=o(" \u2014 "),$j=a("a"),pPo=o("PoolFormerForImageClassification"),_Po=o(" (PoolFormer model)"),uPo=l(),D5=a("li"),lle=a("strong"),bPo=o("resnet"),vPo=o(" \u2014 "),Ij=a("a"),TPo=o("ResNetForImageClassification"),FPo=o(" (ResNet model)"),CPo=l(),j5=a("li"),ile=a("strong"),MPo=o("segformer"),EPo=o(" \u2014 "),Dj=a("a"),yPo=o("SegformerForImageClassification"),wPo=o(" (SegFormer model)"),APo=l(),N5=a("li"),dle=a("strong"),LPo=o("swin"),BPo=o(" \u2014 "),jj=a("a"),xPo=o("SwinForImageClassification"),kPo=o(" (Swin model)"),RPo=l(),q5=a("li"),cle=a("strong"),SPo=o("vit"),PPo=o(" \u2014 "),Nj=a("a"),$Po=o("ViTForImageClassification"),IPo=o(" (ViT model)"),DPo=l(),G5=a("p"),jPo=o("The model is set in evaluation mode by default using "),fle=a("code"),NPo=o("model.eval()"),qPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mle=a("code"),GPo=o("model.train()"),OPo=l(),gle=a("p"),XPo=o("Examples:"),VPo=l(),f(S3.$$.fragment),_Be=l(),Ed=a("h2"),O5=a("a"),hle=a("span"),f(P3.$$.fragment),zPo=l(),ple=a("span"),WPo=o("AutoModelForVision2Seq"),uBe=l(),nr=a("div"),f($3.$$.fragment),QPo=l(),yd=a("p"),HPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_le=a("code"),UPo=o("from_pretrained()"),JPo=o("class method or the "),ule=a("code"),YPo=o("from_config()"),KPo=o(`class
method.`),ZPo=l(),I3=a("p"),e$o=o("This class cannot be instantiated directly using "),ble=a("code"),o$o=o("__init__()"),r$o=o(" (throws an error)."),t$o=l(),Kr=a("div"),f(D3.$$.fragment),a$o=l(),vle=a("p"),n$o=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),s$o=l(),wd=a("p"),l$o=o(`Note:
Loading a model from its configuration file does `),Tle=a("strong"),i$o=o("not"),d$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fle=a("code"),c$o=o("from_pretrained()"),f$o=o("to load the model weights."),m$o=l(),Cle=a("p"),g$o=o("Examples:"),h$o=l(),f(j3.$$.fragment),p$o=l(),ze=a("div"),f(N3.$$.fragment),_$o=l(),Mle=a("p"),u$o=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),b$o=l(),Ya=a("p"),v$o=o("The model class to instantiate is selected based on the "),Ele=a("code"),T$o=o("model_type"),F$o=o(` property of the config object (either
passed as an argument or loaded from `),yle=a("code"),C$o=o("pretrained_model_name_or_path"),M$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wle=a("code"),E$o=o("pretrained_model_name_or_path"),y$o=o(":"),w$o=l(),Ale=a("ul"),X5=a("li"),Lle=a("strong"),A$o=o("vision-encoder-decoder"),L$o=o(" \u2014 "),qj=a("a"),B$o=o("VisionEncoderDecoderModel"),x$o=o(" (Vision Encoder decoder model)"),k$o=l(),V5=a("p"),R$o=o("The model is set in evaluation mode by default using "),Ble=a("code"),S$o=o("model.eval()"),P$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xle=a("code"),$$o=o("model.train()"),I$o=l(),kle=a("p"),D$o=o("Examples:"),j$o=l(),f(q3.$$.fragment),bBe=l(),Ad=a("h2"),z5=a("a"),Rle=a("span"),f(G3.$$.fragment),N$o=l(),Sle=a("span"),q$o=o("AutoModelForAudioClassification"),vBe=l(),sr=a("div"),f(O3.$$.fragment),G$o=l(),Ld=a("p"),O$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Ple=a("code"),X$o=o("from_pretrained()"),V$o=o("class method or the "),$le=a("code"),z$o=o("from_config()"),W$o=o(`class
method.`),Q$o=l(),X3=a("p"),H$o=o("This class cannot be instantiated directly using "),Ile=a("code"),U$o=o("__init__()"),J$o=o(" (throws an error)."),Y$o=l(),Zr=a("div"),f(V3.$$.fragment),K$o=l(),Dle=a("p"),Z$o=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),eIo=l(),Bd=a("p"),oIo=o(`Note:
Loading a model from its configuration file does `),jle=a("strong"),rIo=o("not"),tIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nle=a("code"),aIo=o("from_pretrained()"),nIo=o("to load the model weights."),sIo=l(),qle=a("p"),lIo=o("Examples:"),iIo=l(),f(z3.$$.fragment),dIo=l(),We=a("div"),f(W3.$$.fragment),cIo=l(),Gle=a("p"),fIo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),mIo=l(),Ka=a("p"),gIo=o("The model class to instantiate is selected based on the "),Ole=a("code"),hIo=o("model_type"),pIo=o(` property of the config object (either
passed as an argument or loaded from `),Xle=a("code"),_Io=o("pretrained_model_name_or_path"),uIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vle=a("code"),bIo=o("pretrained_model_name_or_path"),vIo=o(":"),TIo=l(),Le=a("ul"),W5=a("li"),zle=a("strong"),FIo=o("data2vec-audio"),CIo=o(" \u2014 "),Gj=a("a"),MIo=o("Data2VecAudioForSequenceClassification"),EIo=o(" (Data2VecAudio model)"),yIo=l(),Q5=a("li"),Wle=a("strong"),wIo=o("hubert"),AIo=o(" \u2014 "),Oj=a("a"),LIo=o("HubertForSequenceClassification"),BIo=o(" (Hubert model)"),xIo=l(),H5=a("li"),Qle=a("strong"),kIo=o("sew"),RIo=o(" \u2014 "),Xj=a("a"),SIo=o("SEWForSequenceClassification"),PIo=o(" (SEW model)"),$Io=l(),U5=a("li"),Hle=a("strong"),IIo=o("sew-d"),DIo=o(" \u2014 "),Vj=a("a"),jIo=o("SEWDForSequenceClassification"),NIo=o(" (SEW-D model)"),qIo=l(),J5=a("li"),Ule=a("strong"),GIo=o("unispeech"),OIo=o(" \u2014 "),zj=a("a"),XIo=o("UniSpeechForSequenceClassification"),VIo=o(" (UniSpeech model)"),zIo=l(),Y5=a("li"),Jle=a("strong"),WIo=o("unispeech-sat"),QIo=o(" \u2014 "),Wj=a("a"),HIo=o("UniSpeechSatForSequenceClassification"),UIo=o(" (UniSpeechSat model)"),JIo=l(),K5=a("li"),Yle=a("strong"),YIo=o("wav2vec2"),KIo=o(" \u2014 "),Qj=a("a"),ZIo=o("Wav2Vec2ForSequenceClassification"),eDo=o(" (Wav2Vec2 model)"),oDo=l(),Z5=a("li"),Kle=a("strong"),rDo=o("wavlm"),tDo=o(" \u2014 "),Hj=a("a"),aDo=o("WavLMForSequenceClassification"),nDo=o(" (WavLM model)"),sDo=l(),e2=a("p"),lDo=o("The model is set in evaluation mode by default using "),Zle=a("code"),iDo=o("model.eval()"),dDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eie=a("code"),cDo=o("model.train()"),fDo=l(),oie=a("p"),mDo=o("Examples:"),gDo=l(),f(Q3.$$.fragment),TBe=l(),xd=a("h2"),o2=a("a"),rie=a("span"),f(H3.$$.fragment),hDo=l(),tie=a("span"),pDo=o("AutoModelForAudioFrameClassification"),FBe=l(),lr=a("div"),f(U3.$$.fragment),_Do=l(),kd=a("p"),uDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aie=a("code"),bDo=o("from_pretrained()"),vDo=o("class method or the "),nie=a("code"),TDo=o("from_config()"),FDo=o(`class
method.`),CDo=l(),J3=a("p"),MDo=o("This class cannot be instantiated directly using "),sie=a("code"),EDo=o("__init__()"),yDo=o(" (throws an error)."),wDo=l(),et=a("div"),f(Y3.$$.fragment),ADo=l(),lie=a("p"),LDo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),BDo=l(),Rd=a("p"),xDo=o(`Note:
Loading a model from its configuration file does `),iie=a("strong"),kDo=o("not"),RDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),die=a("code"),SDo=o("from_pretrained()"),PDo=o("to load the model weights."),$Do=l(),cie=a("p"),IDo=o("Examples:"),DDo=l(),f(K3.$$.fragment),jDo=l(),Qe=a("div"),f(Z3.$$.fragment),NDo=l(),fie=a("p"),qDo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),GDo=l(),Za=a("p"),ODo=o("The model class to instantiate is selected based on the "),mie=a("code"),XDo=o("model_type"),VDo=o(` property of the config object (either
passed as an argument or loaded from `),gie=a("code"),zDo=o("pretrained_model_name_or_path"),WDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hie=a("code"),QDo=o("pretrained_model_name_or_path"),HDo=o(":"),UDo=l(),en=a("ul"),r2=a("li"),pie=a("strong"),JDo=o("data2vec-audio"),YDo=o(" \u2014 "),Uj=a("a"),KDo=o("Data2VecAudioForAudioFrameClassification"),ZDo=o(" (Data2VecAudio model)"),ejo=l(),t2=a("li"),_ie=a("strong"),ojo=o("unispeech-sat"),rjo=o(" \u2014 "),Jj=a("a"),tjo=o("UniSpeechSatForAudioFrameClassification"),ajo=o(" (UniSpeechSat model)"),njo=l(),a2=a("li"),uie=a("strong"),sjo=o("wav2vec2"),ljo=o(" \u2014 "),Yj=a("a"),ijo=o("Wav2Vec2ForAudioFrameClassification"),djo=o(" (Wav2Vec2 model)"),cjo=l(),n2=a("li"),bie=a("strong"),fjo=o("wavlm"),mjo=o(" \u2014 "),Kj=a("a"),gjo=o("WavLMForAudioFrameClassification"),hjo=o(" (WavLM model)"),pjo=l(),s2=a("p"),_jo=o("The model is set in evaluation mode by default using "),vie=a("code"),ujo=o("model.eval()"),bjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tie=a("code"),vjo=o("model.train()"),Tjo=l(),Fie=a("p"),Fjo=o("Examples:"),Cjo=l(),f(ey.$$.fragment),CBe=l(),Sd=a("h2"),l2=a("a"),Cie=a("span"),f(oy.$$.fragment),Mjo=l(),Mie=a("span"),Ejo=o("AutoModelForCTC"),MBe=l(),ir=a("div"),f(ry.$$.fragment),yjo=l(),Pd=a("p"),wjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Eie=a("code"),Ajo=o("from_pretrained()"),Ljo=o("class method or the "),yie=a("code"),Bjo=o("from_config()"),xjo=o(`class
method.`),kjo=l(),ty=a("p"),Rjo=o("This class cannot be instantiated directly using "),wie=a("code"),Sjo=o("__init__()"),Pjo=o(" (throws an error)."),$jo=l(),ot=a("div"),f(ay.$$.fragment),Ijo=l(),Aie=a("p"),Djo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),jjo=l(),$d=a("p"),Njo=o(`Note:
Loading a model from its configuration file does `),Lie=a("strong"),qjo=o("not"),Gjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bie=a("code"),Ojo=o("from_pretrained()"),Xjo=o("to load the model weights."),Vjo=l(),xie=a("p"),zjo=o("Examples:"),Wjo=l(),f(ny.$$.fragment),Qjo=l(),He=a("div"),f(sy.$$.fragment),Hjo=l(),kie=a("p"),Ujo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Jjo=l(),on=a("p"),Yjo=o("The model class to instantiate is selected based on the "),Rie=a("code"),Kjo=o("model_type"),Zjo=o(` property of the config object (either
passed as an argument or loaded from `),Sie=a("code"),eNo=o("pretrained_model_name_or_path"),oNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=a("code"),rNo=o("pretrained_model_name_or_path"),tNo=o(":"),aNo=l(),Be=a("ul"),i2=a("li"),$ie=a("strong"),nNo=o("data2vec-audio"),sNo=o(" \u2014 "),Zj=a("a"),lNo=o("Data2VecAudioForCTC"),iNo=o(" (Data2VecAudio model)"),dNo=l(),d2=a("li"),Iie=a("strong"),cNo=o("hubert"),fNo=o(" \u2014 "),eN=a("a"),mNo=o("HubertForCTC"),gNo=o(" (Hubert model)"),hNo=l(),c2=a("li"),Die=a("strong"),pNo=o("sew"),_No=o(" \u2014 "),oN=a("a"),uNo=o("SEWForCTC"),bNo=o(" (SEW model)"),vNo=l(),f2=a("li"),jie=a("strong"),TNo=o("sew-d"),FNo=o(" \u2014 "),rN=a("a"),CNo=o("SEWDForCTC"),MNo=o(" (SEW-D model)"),ENo=l(),m2=a("li"),Nie=a("strong"),yNo=o("unispeech"),wNo=o(" \u2014 "),tN=a("a"),ANo=o("UniSpeechForCTC"),LNo=o(" (UniSpeech model)"),BNo=l(),g2=a("li"),qie=a("strong"),xNo=o("unispeech-sat"),kNo=o(" \u2014 "),aN=a("a"),RNo=o("UniSpeechSatForCTC"),SNo=o(" (UniSpeechSat model)"),PNo=l(),h2=a("li"),Gie=a("strong"),$No=o("wav2vec2"),INo=o(" \u2014 "),nN=a("a"),DNo=o("Wav2Vec2ForCTC"),jNo=o(" (Wav2Vec2 model)"),NNo=l(),p2=a("li"),Oie=a("strong"),qNo=o("wavlm"),GNo=o(" \u2014 "),sN=a("a"),ONo=o("WavLMForCTC"),XNo=o(" (WavLM model)"),VNo=l(),_2=a("p"),zNo=o("The model is set in evaluation mode by default using "),Xie=a("code"),WNo=o("model.eval()"),QNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vie=a("code"),HNo=o("model.train()"),UNo=l(),zie=a("p"),JNo=o("Examples:"),YNo=l(),f(ly.$$.fragment),EBe=l(),Id=a("h2"),u2=a("a"),Wie=a("span"),f(iy.$$.fragment),KNo=l(),Qie=a("span"),ZNo=o("AutoModelForSpeechSeq2Seq"),yBe=l(),dr=a("div"),f(dy.$$.fragment),eqo=l(),Dd=a("p"),oqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Hie=a("code"),rqo=o("from_pretrained()"),tqo=o("class method or the "),Uie=a("code"),aqo=o("from_config()"),nqo=o(`class
method.`),sqo=l(),cy=a("p"),lqo=o("This class cannot be instantiated directly using "),Jie=a("code"),iqo=o("__init__()"),dqo=o(" (throws an error)."),cqo=l(),rt=a("div"),f(fy.$$.fragment),fqo=l(),Yie=a("p"),mqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),gqo=l(),jd=a("p"),hqo=o(`Note:
Loading a model from its configuration file does `),Kie=a("strong"),pqo=o("not"),_qo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zie=a("code"),uqo=o("from_pretrained()"),bqo=o("to load the model weights."),vqo=l(),ede=a("p"),Tqo=o("Examples:"),Fqo=l(),f(my.$$.fragment),Cqo=l(),Ue=a("div"),f(gy.$$.fragment),Mqo=l(),ode=a("p"),Eqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),yqo=l(),rn=a("p"),wqo=o("The model class to instantiate is selected based on the "),rde=a("code"),Aqo=o("model_type"),Lqo=o(` property of the config object (either
passed as an argument or loaded from `),tde=a("code"),Bqo=o("pretrained_model_name_or_path"),xqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=a("code"),kqo=o("pretrained_model_name_or_path"),Rqo=o(":"),Sqo=l(),hy=a("ul"),b2=a("li"),nde=a("strong"),Pqo=o("speech-encoder-decoder"),$qo=o(" \u2014 "),lN=a("a"),Iqo=o("SpeechEncoderDecoderModel"),Dqo=o(" (Speech Encoder decoder model)"),jqo=l(),v2=a("li"),sde=a("strong"),Nqo=o("speech_to_text"),qqo=o(" \u2014 "),iN=a("a"),Gqo=o("Speech2TextForConditionalGeneration"),Oqo=o(" (Speech2Text model)"),Xqo=l(),T2=a("p"),Vqo=o("The model is set in evaluation mode by default using "),lde=a("code"),zqo=o("model.eval()"),Wqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ide=a("code"),Qqo=o("model.train()"),Hqo=l(),dde=a("p"),Uqo=o("Examples:"),Jqo=l(),f(py.$$.fragment),wBe=l(),Nd=a("h2"),F2=a("a"),cde=a("span"),f(_y.$$.fragment),Yqo=l(),fde=a("span"),Kqo=o("AutoModelForAudioXVector"),ABe=l(),cr=a("div"),f(uy.$$.fragment),Zqo=l(),qd=a("p"),eGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),mde=a("code"),oGo=o("from_pretrained()"),rGo=o("class method or the "),gde=a("code"),tGo=o("from_config()"),aGo=o(`class
method.`),nGo=l(),by=a("p"),sGo=o("This class cannot be instantiated directly using "),hde=a("code"),lGo=o("__init__()"),iGo=o(" (throws an error)."),dGo=l(),tt=a("div"),f(vy.$$.fragment),cGo=l(),pde=a("p"),fGo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),mGo=l(),Gd=a("p"),gGo=o(`Note:
Loading a model from its configuration file does `),_de=a("strong"),hGo=o("not"),pGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ude=a("code"),_Go=o("from_pretrained()"),uGo=o("to load the model weights."),bGo=l(),bde=a("p"),vGo=o("Examples:"),TGo=l(),f(Ty.$$.fragment),FGo=l(),Je=a("div"),f(Fy.$$.fragment),CGo=l(),vde=a("p"),MGo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),EGo=l(),tn=a("p"),yGo=o("The model class to instantiate is selected based on the "),Tde=a("code"),wGo=o("model_type"),AGo=o(` property of the config object (either
passed as an argument or loaded from `),Fde=a("code"),LGo=o("pretrained_model_name_or_path"),BGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=a("code"),xGo=o("pretrained_model_name_or_path"),kGo=o(":"),RGo=l(),an=a("ul"),C2=a("li"),Mde=a("strong"),SGo=o("data2vec-audio"),PGo=o(" \u2014 "),dN=a("a"),$Go=o("Data2VecAudioForXVector"),IGo=o(" (Data2VecAudio model)"),DGo=l(),M2=a("li"),Ede=a("strong"),jGo=o("unispeech-sat"),NGo=o(" \u2014 "),cN=a("a"),qGo=o("UniSpeechSatForXVector"),GGo=o(" (UniSpeechSat model)"),OGo=l(),E2=a("li"),yde=a("strong"),XGo=o("wav2vec2"),VGo=o(" \u2014 "),fN=a("a"),zGo=o("Wav2Vec2ForXVector"),WGo=o(" (Wav2Vec2 model)"),QGo=l(),y2=a("li"),wde=a("strong"),HGo=o("wavlm"),UGo=o(" \u2014 "),mN=a("a"),JGo=o("WavLMForXVector"),YGo=o(" (WavLM model)"),KGo=l(),w2=a("p"),ZGo=o("The model is set in evaluation mode by default using "),Ade=a("code"),eOo=o("model.eval()"),oOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lde=a("code"),rOo=o("model.train()"),tOo=l(),Bde=a("p"),aOo=o("Examples:"),nOo=l(),f(Cy.$$.fragment),LBe=l(),Od=a("h2"),A2=a("a"),xde=a("span"),f(My.$$.fragment),sOo=l(),kde=a("span"),lOo=o("AutoModelForMaskedImageModeling"),BBe=l(),fr=a("div"),f(Ey.$$.fragment),iOo=l(),Xd=a("p"),dOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Rde=a("code"),cOo=o("from_pretrained()"),fOo=o("class method or the "),Sde=a("code"),mOo=o("from_config()"),gOo=o(`class
method.`),hOo=l(),yy=a("p"),pOo=o("This class cannot be instantiated directly using "),Pde=a("code"),_Oo=o("__init__()"),uOo=o(" (throws an error)."),bOo=l(),at=a("div"),f(wy.$$.fragment),vOo=l(),$de=a("p"),TOo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),FOo=l(),Vd=a("p"),COo=o(`Note:
Loading a model from its configuration file does `),Ide=a("strong"),MOo=o("not"),EOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dde=a("code"),yOo=o("from_pretrained()"),wOo=o("to load the model weights."),AOo=l(),jde=a("p"),LOo=o("Examples:"),BOo=l(),f(Ay.$$.fragment),xOo=l(),Ye=a("div"),f(Ly.$$.fragment),kOo=l(),Nde=a("p"),ROo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),SOo=l(),nn=a("p"),POo=o("The model class to instantiate is selected based on the "),qde=a("code"),$Oo=o("model_type"),IOo=o(` property of the config object (either
passed as an argument or loaded from `),Gde=a("code"),DOo=o("pretrained_model_name_or_path"),jOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ode=a("code"),NOo=o("pretrained_model_name_or_path"),qOo=o(":"),GOo=l(),zd=a("ul"),L2=a("li"),Xde=a("strong"),OOo=o("deit"),XOo=o(" \u2014 "),gN=a("a"),VOo=o("DeiTForMaskedImageModeling"),zOo=o(" (DeiT model)"),WOo=l(),B2=a("li"),Vde=a("strong"),QOo=o("swin"),HOo=o(" \u2014 "),hN=a("a"),UOo=o("SwinForMaskedImageModeling"),JOo=o(" (Swin model)"),YOo=l(),x2=a("li"),zde=a("strong"),KOo=o("vit"),ZOo=o(" \u2014 "),pN=a("a"),eXo=o("ViTForMaskedImageModeling"),oXo=o(" (ViT model)"),rXo=l(),k2=a("p"),tXo=o("The model is set in evaluation mode by default using "),Wde=a("code"),aXo=o("model.eval()"),nXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qde=a("code"),sXo=o("model.train()"),lXo=l(),Hde=a("p"),iXo=o("Examples:"),dXo=l(),f(By.$$.fragment),xBe=l(),Wd=a("h2"),R2=a("a"),Ude=a("span"),f(xy.$$.fragment),cXo=l(),Jde=a("span"),fXo=o("AutoModelForObjectDetection"),kBe=l(),mr=a("div"),f(ky.$$.fragment),mXo=l(),Qd=a("p"),gXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Yde=a("code"),hXo=o("from_pretrained()"),pXo=o("class method or the "),Kde=a("code"),_Xo=o("from_config()"),uXo=o(`class
method.`),bXo=l(),Ry=a("p"),vXo=o("This class cannot be instantiated directly using "),Zde=a("code"),TXo=o("__init__()"),FXo=o(" (throws an error)."),CXo=l(),nt=a("div"),f(Sy.$$.fragment),MXo=l(),ece=a("p"),EXo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),yXo=l(),Hd=a("p"),wXo=o(`Note:
Loading a model from its configuration file does `),oce=a("strong"),AXo=o("not"),LXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rce=a("code"),BXo=o("from_pretrained()"),xXo=o("to load the model weights."),kXo=l(),tce=a("p"),RXo=o("Examples:"),SXo=l(),f(Py.$$.fragment),PXo=l(),Ke=a("div"),f($y.$$.fragment),$Xo=l(),ace=a("p"),IXo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),DXo=l(),sn=a("p"),jXo=o("The model class to instantiate is selected based on the "),nce=a("code"),NXo=o("model_type"),qXo=o(` property of the config object (either
passed as an argument or loaded from `),sce=a("code"),GXo=o("pretrained_model_name_or_path"),OXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lce=a("code"),XXo=o("pretrained_model_name_or_path"),VXo=o(":"),zXo=l(),ice=a("ul"),S2=a("li"),dce=a("strong"),WXo=o("detr"),QXo=o(" \u2014 "),_N=a("a"),HXo=o("DetrForObjectDetection"),UXo=o(" (DETR model)"),JXo=l(),P2=a("p"),YXo=o("The model is set in evaluation mode by default using "),cce=a("code"),KXo=o("model.eval()"),ZXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fce=a("code"),eVo=o("model.train()"),oVo=l(),mce=a("p"),rVo=o("Examples:"),tVo=l(),f(Iy.$$.fragment),RBe=l(),Ud=a("h2"),$2=a("a"),gce=a("span"),f(Dy.$$.fragment),aVo=l(),hce=a("span"),nVo=o("AutoModelForImageSegmentation"),SBe=l(),gr=a("div"),f(jy.$$.fragment),sVo=l(),Jd=a("p"),lVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),pce=a("code"),iVo=o("from_pretrained()"),dVo=o("class method or the "),_ce=a("code"),cVo=o("from_config()"),fVo=o(`class
method.`),mVo=l(),Ny=a("p"),gVo=o("This class cannot be instantiated directly using "),uce=a("code"),hVo=o("__init__()"),pVo=o(" (throws an error)."),_Vo=l(),st=a("div"),f(qy.$$.fragment),uVo=l(),bce=a("p"),bVo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),vVo=l(),Yd=a("p"),TVo=o(`Note:
Loading a model from its configuration file does `),vce=a("strong"),FVo=o("not"),CVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tce=a("code"),MVo=o("from_pretrained()"),EVo=o("to load the model weights."),yVo=l(),Fce=a("p"),wVo=o("Examples:"),AVo=l(),f(Gy.$$.fragment),LVo=l(),Ze=a("div"),f(Oy.$$.fragment),BVo=l(),Cce=a("p"),xVo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),kVo=l(),ln=a("p"),RVo=o("The model class to instantiate is selected based on the "),Mce=a("code"),SVo=o("model_type"),PVo=o(` property of the config object (either
passed as an argument or loaded from `),Ece=a("code"),$Vo=o("pretrained_model_name_or_path"),IVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yce=a("code"),DVo=o("pretrained_model_name_or_path"),jVo=o(":"),NVo=l(),wce=a("ul"),I2=a("li"),Ace=a("strong"),qVo=o("detr"),GVo=o(" \u2014 "),uN=a("a"),OVo=o("DetrForSegmentation"),XVo=o(" (DETR model)"),VVo=l(),D2=a("p"),zVo=o("The model is set in evaluation mode by default using "),Lce=a("code"),WVo=o("model.eval()"),QVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bce=a("code"),HVo=o("model.train()"),UVo=l(),xce=a("p"),JVo=o("Examples:"),YVo=l(),f(Xy.$$.fragment),PBe=l(),Kd=a("h2"),j2=a("a"),kce=a("span"),f(Vy.$$.fragment),KVo=l(),Rce=a("span"),ZVo=o("AutoModelForSemanticSegmentation"),$Be=l(),hr=a("div"),f(zy.$$.fragment),ezo=l(),Zd=a("p"),ozo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Sce=a("code"),rzo=o("from_pretrained()"),tzo=o("class method or the "),Pce=a("code"),azo=o("from_config()"),nzo=o(`class
method.`),szo=l(),Wy=a("p"),lzo=o("This class cannot be instantiated directly using "),$ce=a("code"),izo=o("__init__()"),dzo=o(" (throws an error)."),czo=l(),lt=a("div"),f(Qy.$$.fragment),fzo=l(),Ice=a("p"),mzo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),gzo=l(),ec=a("p"),hzo=o(`Note:
Loading a model from its configuration file does `),Dce=a("strong"),pzo=o("not"),_zo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jce=a("code"),uzo=o("from_pretrained()"),bzo=o("to load the model weights."),vzo=l(),Nce=a("p"),Tzo=o("Examples:"),Fzo=l(),f(Hy.$$.fragment),Czo=l(),eo=a("div"),f(Uy.$$.fragment),Mzo=l(),qce=a("p"),Ezo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),yzo=l(),dn=a("p"),wzo=o("The model class to instantiate is selected based on the "),Gce=a("code"),Azo=o("model_type"),Lzo=o(` property of the config object (either
passed as an argument or loaded from `),Oce=a("code"),Bzo=o("pretrained_model_name_or_path"),xzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xce=a("code"),kzo=o("pretrained_model_name_or_path"),Rzo=o(":"),Szo=l(),Jy=a("ul"),N2=a("li"),Vce=a("strong"),Pzo=o("beit"),$zo=o(" \u2014 "),bN=a("a"),Izo=o("BeitForSemanticSegmentation"),Dzo=o(" (BEiT model)"),jzo=l(),q2=a("li"),zce=a("strong"),Nzo=o("segformer"),qzo=o(" \u2014 "),vN=a("a"),Gzo=o("SegformerForSemanticSegmentation"),Ozo=o(" (SegFormer model)"),Xzo=l(),G2=a("p"),Vzo=o("The model is set in evaluation mode by default using "),Wce=a("code"),zzo=o("model.eval()"),Wzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=a("code"),Qzo=o("model.train()"),Hzo=l(),Hce=a("p"),Uzo=o("Examples:"),Jzo=l(),f(Yy.$$.fragment),IBe=l(),oc=a("h2"),O2=a("a"),Uce=a("span"),f(Ky.$$.fragment),Yzo=l(),Jce=a("span"),Kzo=o("TFAutoModel"),DBe=l(),pr=a("div"),f(Zy.$$.fragment),Zzo=l(),rc=a("p"),eWo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Yce=a("code"),oWo=o("from_pretrained()"),rWo=o("class method or the "),Kce=a("code"),tWo=o("from_config()"),aWo=o(`class
method.`),nWo=l(),ew=a("p"),sWo=o("This class cannot be instantiated directly using "),Zce=a("code"),lWo=o("__init__()"),iWo=o(" (throws an error)."),dWo=l(),it=a("div"),f(ow.$$.fragment),cWo=l(),efe=a("p"),fWo=o("Instantiates one of the base model classes of the library from a configuration."),mWo=l(),tc=a("p"),gWo=o(`Note:
Loading a model from its configuration file does `),ofe=a("strong"),hWo=o("not"),pWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rfe=a("code"),_Wo=o("from_pretrained()"),uWo=o("to load the model weights."),bWo=l(),tfe=a("p"),vWo=o("Examples:"),TWo=l(),f(rw.$$.fragment),FWo=l(),go=a("div"),f(tw.$$.fragment),CWo=l(),afe=a("p"),MWo=o("Instantiate one of the base model classes of the library from a pretrained model."),EWo=l(),cn=a("p"),yWo=o("The model class to instantiate is selected based on the "),nfe=a("code"),wWo=o("model_type"),AWo=o(` property of the config object (either
passed as an argument or loaded from `),sfe=a("code"),LWo=o("pretrained_model_name_or_path"),BWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lfe=a("code"),xWo=o("pretrained_model_name_or_path"),kWo=o(":"),RWo=l(),B=a("ul"),X2=a("li"),ife=a("strong"),SWo=o("albert"),PWo=o(" \u2014 "),TN=a("a"),$Wo=o("TFAlbertModel"),IWo=o(" (ALBERT model)"),DWo=l(),V2=a("li"),dfe=a("strong"),jWo=o("bart"),NWo=o(" \u2014 "),FN=a("a"),qWo=o("TFBartModel"),GWo=o(" (BART model)"),OWo=l(),z2=a("li"),cfe=a("strong"),XWo=o("bert"),VWo=o(" \u2014 "),CN=a("a"),zWo=o("TFBertModel"),WWo=o(" (BERT model)"),QWo=l(),W2=a("li"),ffe=a("strong"),HWo=o("blenderbot"),UWo=o(" \u2014 "),MN=a("a"),JWo=o("TFBlenderbotModel"),YWo=o(" (Blenderbot model)"),KWo=l(),Q2=a("li"),mfe=a("strong"),ZWo=o("blenderbot-small"),eQo=o(" \u2014 "),EN=a("a"),oQo=o("TFBlenderbotSmallModel"),rQo=o(" (BlenderbotSmall model)"),tQo=l(),H2=a("li"),gfe=a("strong"),aQo=o("camembert"),nQo=o(" \u2014 "),yN=a("a"),sQo=o("TFCamembertModel"),lQo=o(" (CamemBERT model)"),iQo=l(),U2=a("li"),hfe=a("strong"),dQo=o("clip"),cQo=o(" \u2014 "),wN=a("a"),fQo=o("TFCLIPModel"),mQo=o(" (CLIP model)"),gQo=l(),J2=a("li"),pfe=a("strong"),hQo=o("convbert"),pQo=o(" \u2014 "),AN=a("a"),_Qo=o("TFConvBertModel"),uQo=o(" (ConvBERT model)"),bQo=l(),Y2=a("li"),_fe=a("strong"),vQo=o("convnext"),TQo=o(" \u2014 "),LN=a("a"),FQo=o("TFConvNextModel"),CQo=o(" (ConvNext model)"),MQo=l(),K2=a("li"),ufe=a("strong"),EQo=o("ctrl"),yQo=o(" \u2014 "),BN=a("a"),wQo=o("TFCTRLModel"),AQo=o(" (CTRL model)"),LQo=l(),Z2=a("li"),bfe=a("strong"),BQo=o("deberta"),xQo=o(" \u2014 "),xN=a("a"),kQo=o("TFDebertaModel"),RQo=o(" (DeBERTa model)"),SQo=l(),ev=a("li"),vfe=a("strong"),PQo=o("deberta-v2"),$Qo=o(" \u2014 "),kN=a("a"),IQo=o("TFDebertaV2Model"),DQo=o(" (DeBERTa-v2 model)"),jQo=l(),ov=a("li"),Tfe=a("strong"),NQo=o("distilbert"),qQo=o(" \u2014 "),RN=a("a"),GQo=o("TFDistilBertModel"),OQo=o(" (DistilBERT model)"),XQo=l(),rv=a("li"),Ffe=a("strong"),VQo=o("dpr"),zQo=o(" \u2014 "),SN=a("a"),WQo=o("TFDPRQuestionEncoder"),QQo=o(" (DPR model)"),HQo=l(),tv=a("li"),Cfe=a("strong"),UQo=o("electra"),JQo=o(" \u2014 "),PN=a("a"),YQo=o("TFElectraModel"),KQo=o(" (ELECTRA model)"),ZQo=l(),av=a("li"),Mfe=a("strong"),eHo=o("flaubert"),oHo=o(" \u2014 "),$N=a("a"),rHo=o("TFFlaubertModel"),tHo=o(" (FlauBERT model)"),aHo=l(),$s=a("li"),Efe=a("strong"),nHo=o("funnel"),sHo=o(" \u2014 "),IN=a("a"),lHo=o("TFFunnelModel"),iHo=o(" or "),DN=a("a"),dHo=o("TFFunnelBaseModel"),cHo=o(" (Funnel Transformer model)"),fHo=l(),nv=a("li"),yfe=a("strong"),mHo=o("gpt2"),gHo=o(" \u2014 "),jN=a("a"),hHo=o("TFGPT2Model"),pHo=o(" (OpenAI GPT-2 model)"),_Ho=l(),sv=a("li"),wfe=a("strong"),uHo=o("hubert"),bHo=o(" \u2014 "),NN=a("a"),vHo=o("TFHubertModel"),THo=o(" (Hubert model)"),FHo=l(),lv=a("li"),Afe=a("strong"),CHo=o("layoutlm"),MHo=o(" \u2014 "),qN=a("a"),EHo=o("TFLayoutLMModel"),yHo=o(" (LayoutLM model)"),wHo=l(),iv=a("li"),Lfe=a("strong"),AHo=o("led"),LHo=o(" \u2014 "),GN=a("a"),BHo=o("TFLEDModel"),xHo=o(" (LED model)"),kHo=l(),dv=a("li"),Bfe=a("strong"),RHo=o("longformer"),SHo=o(" \u2014 "),ON=a("a"),PHo=o("TFLongformerModel"),$Ho=o(" (Longformer model)"),IHo=l(),cv=a("li"),xfe=a("strong"),DHo=o("lxmert"),jHo=o(" \u2014 "),XN=a("a"),NHo=o("TFLxmertModel"),qHo=o(" (LXMERT model)"),GHo=l(),fv=a("li"),kfe=a("strong"),OHo=o("marian"),XHo=o(" \u2014 "),VN=a("a"),VHo=o("TFMarianModel"),zHo=o(" (Marian model)"),WHo=l(),mv=a("li"),Rfe=a("strong"),QHo=o("mbart"),HHo=o(" \u2014 "),zN=a("a"),UHo=o("TFMBartModel"),JHo=o(" (mBART model)"),YHo=l(),gv=a("li"),Sfe=a("strong"),KHo=o("mobilebert"),ZHo=o(" \u2014 "),WN=a("a"),eUo=o("TFMobileBertModel"),oUo=o(" (MobileBERT model)"),rUo=l(),hv=a("li"),Pfe=a("strong"),tUo=o("mpnet"),aUo=o(" \u2014 "),QN=a("a"),nUo=o("TFMPNetModel"),sUo=o(" (MPNet model)"),lUo=l(),pv=a("li"),$fe=a("strong"),iUo=o("mt5"),dUo=o(" \u2014 "),HN=a("a"),cUo=o("TFMT5Model"),fUo=o(" (mT5 model)"),mUo=l(),_v=a("li"),Ife=a("strong"),gUo=o("openai-gpt"),hUo=o(" \u2014 "),UN=a("a"),pUo=o("TFOpenAIGPTModel"),_Uo=o(" (OpenAI GPT model)"),uUo=l(),uv=a("li"),Dfe=a("strong"),bUo=o("pegasus"),vUo=o(" \u2014 "),JN=a("a"),TUo=o("TFPegasusModel"),FUo=o(" (Pegasus model)"),CUo=l(),bv=a("li"),jfe=a("strong"),MUo=o("rembert"),EUo=o(" \u2014 "),YN=a("a"),yUo=o("TFRemBertModel"),wUo=o(" (RemBERT model)"),AUo=l(),vv=a("li"),Nfe=a("strong"),LUo=o("roberta"),BUo=o(" \u2014 "),KN=a("a"),xUo=o("TFRobertaModel"),kUo=o(" (RoBERTa model)"),RUo=l(),Tv=a("li"),qfe=a("strong"),SUo=o("roformer"),PUo=o(" \u2014 "),ZN=a("a"),$Uo=o("TFRoFormerModel"),IUo=o(" (RoFormer model)"),DUo=l(),Fv=a("li"),Gfe=a("strong"),jUo=o("speech_to_text"),NUo=o(" \u2014 "),eq=a("a"),qUo=o("TFSpeech2TextModel"),GUo=o(" (Speech2Text model)"),OUo=l(),Cv=a("li"),Ofe=a("strong"),XUo=o("t5"),VUo=o(" \u2014 "),oq=a("a"),zUo=o("TFT5Model"),WUo=o(" (T5 model)"),QUo=l(),Mv=a("li"),Xfe=a("strong"),HUo=o("tapas"),UUo=o(" \u2014 "),rq=a("a"),JUo=o("TFTapasModel"),YUo=o(" (TAPAS model)"),KUo=l(),Ev=a("li"),Vfe=a("strong"),ZUo=o("transfo-xl"),eJo=o(" \u2014 "),tq=a("a"),oJo=o("TFTransfoXLModel"),rJo=o(" (Transformer-XL model)"),tJo=l(),yv=a("li"),zfe=a("strong"),aJo=o("vit"),nJo=o(" \u2014 "),aq=a("a"),sJo=o("TFViTModel"),lJo=o(" (ViT model)"),iJo=l(),wv=a("li"),Wfe=a("strong"),dJo=o("wav2vec2"),cJo=o(" \u2014 "),nq=a("a"),fJo=o("TFWav2Vec2Model"),mJo=o(" (Wav2Vec2 model)"),gJo=l(),Av=a("li"),Qfe=a("strong"),hJo=o("xlm"),pJo=o(" \u2014 "),sq=a("a"),_Jo=o("TFXLMModel"),uJo=o(" (XLM model)"),bJo=l(),Lv=a("li"),Hfe=a("strong"),vJo=o("xlm-roberta"),TJo=o(" \u2014 "),lq=a("a"),FJo=o("TFXLMRobertaModel"),CJo=o(" (XLM-RoBERTa model)"),MJo=l(),Bv=a("li"),Ufe=a("strong"),EJo=o("xlnet"),yJo=o(" \u2014 "),iq=a("a"),wJo=o("TFXLNetModel"),AJo=o(" (XLNet model)"),LJo=l(),Jfe=a("p"),BJo=o("Examples:"),xJo=l(),f(aw.$$.fragment),jBe=l(),ac=a("h2"),xv=a("a"),Yfe=a("span"),f(nw.$$.fragment),kJo=l(),Kfe=a("span"),RJo=o("TFAutoModelForPreTraining"),NBe=l(),_r=a("div"),f(sw.$$.fragment),SJo=l(),nc=a("p"),PJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Zfe=a("code"),$Jo=o("from_pretrained()"),IJo=o("class method or the "),eme=a("code"),DJo=o("from_config()"),jJo=o(`class
method.`),NJo=l(),lw=a("p"),qJo=o("This class cannot be instantiated directly using "),ome=a("code"),GJo=o("__init__()"),OJo=o(" (throws an error)."),XJo=l(),dt=a("div"),f(iw.$$.fragment),VJo=l(),rme=a("p"),zJo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),WJo=l(),sc=a("p"),QJo=o(`Note:
Loading a model from its configuration file does `),tme=a("strong"),HJo=o("not"),UJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ame=a("code"),JJo=o("from_pretrained()"),YJo=o("to load the model weights."),KJo=l(),nme=a("p"),ZJo=o("Examples:"),eYo=l(),f(dw.$$.fragment),oYo=l(),ho=a("div"),f(cw.$$.fragment),rYo=l(),sme=a("p"),tYo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),aYo=l(),fn=a("p"),nYo=o("The model class to instantiate is selected based on the "),lme=a("code"),sYo=o("model_type"),lYo=o(` property of the config object (either
passed as an argument or loaded from `),ime=a("code"),iYo=o("pretrained_model_name_or_path"),dYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=a("code"),cYo=o("pretrained_model_name_or_path"),fYo=o(":"),mYo=l(),H=a("ul"),kv=a("li"),cme=a("strong"),gYo=o("albert"),hYo=o(" \u2014 "),dq=a("a"),pYo=o("TFAlbertForPreTraining"),_Yo=o(" (ALBERT model)"),uYo=l(),Rv=a("li"),fme=a("strong"),bYo=o("bart"),vYo=o(" \u2014 "),cq=a("a"),TYo=o("TFBartForConditionalGeneration"),FYo=o(" (BART model)"),CYo=l(),Sv=a("li"),mme=a("strong"),MYo=o("bert"),EYo=o(" \u2014 "),fq=a("a"),yYo=o("TFBertForPreTraining"),wYo=o(" (BERT model)"),AYo=l(),Pv=a("li"),gme=a("strong"),LYo=o("camembert"),BYo=o(" \u2014 "),mq=a("a"),xYo=o("TFCamembertForMaskedLM"),kYo=o(" (CamemBERT model)"),RYo=l(),$v=a("li"),hme=a("strong"),SYo=o("ctrl"),PYo=o(" \u2014 "),gq=a("a"),$Yo=o("TFCTRLLMHeadModel"),IYo=o(" (CTRL model)"),DYo=l(),Iv=a("li"),pme=a("strong"),jYo=o("distilbert"),NYo=o(" \u2014 "),hq=a("a"),qYo=o("TFDistilBertForMaskedLM"),GYo=o(" (DistilBERT model)"),OYo=l(),Dv=a("li"),_me=a("strong"),XYo=o("electra"),VYo=o(" \u2014 "),pq=a("a"),zYo=o("TFElectraForPreTraining"),WYo=o(" (ELECTRA model)"),QYo=l(),jv=a("li"),ume=a("strong"),HYo=o("flaubert"),UYo=o(" \u2014 "),_q=a("a"),JYo=o("TFFlaubertWithLMHeadModel"),YYo=o(" (FlauBERT model)"),KYo=l(),Nv=a("li"),bme=a("strong"),ZYo=o("funnel"),eKo=o(" \u2014 "),uq=a("a"),oKo=o("TFFunnelForPreTraining"),rKo=o(" (Funnel Transformer model)"),tKo=l(),qv=a("li"),vme=a("strong"),aKo=o("gpt2"),nKo=o(" \u2014 "),bq=a("a"),sKo=o("TFGPT2LMHeadModel"),lKo=o(" (OpenAI GPT-2 model)"),iKo=l(),Gv=a("li"),Tme=a("strong"),dKo=o("layoutlm"),cKo=o(" \u2014 "),vq=a("a"),fKo=o("TFLayoutLMForMaskedLM"),mKo=o(" (LayoutLM model)"),gKo=l(),Ov=a("li"),Fme=a("strong"),hKo=o("lxmert"),pKo=o(" \u2014 "),Tq=a("a"),_Ko=o("TFLxmertForPreTraining"),uKo=o(" (LXMERT model)"),bKo=l(),Xv=a("li"),Cme=a("strong"),vKo=o("mobilebert"),TKo=o(" \u2014 "),Fq=a("a"),FKo=o("TFMobileBertForPreTraining"),CKo=o(" (MobileBERT model)"),MKo=l(),Vv=a("li"),Mme=a("strong"),EKo=o("mpnet"),yKo=o(" \u2014 "),Cq=a("a"),wKo=o("TFMPNetForMaskedLM"),AKo=o(" (MPNet model)"),LKo=l(),zv=a("li"),Eme=a("strong"),BKo=o("openai-gpt"),xKo=o(" \u2014 "),Mq=a("a"),kKo=o("TFOpenAIGPTLMHeadModel"),RKo=o(" (OpenAI GPT model)"),SKo=l(),Wv=a("li"),yme=a("strong"),PKo=o("roberta"),$Ko=o(" \u2014 "),Eq=a("a"),IKo=o("TFRobertaForMaskedLM"),DKo=o(" (RoBERTa model)"),jKo=l(),Qv=a("li"),wme=a("strong"),NKo=o("t5"),qKo=o(" \u2014 "),yq=a("a"),GKo=o("TFT5ForConditionalGeneration"),OKo=o(" (T5 model)"),XKo=l(),Hv=a("li"),Ame=a("strong"),VKo=o("tapas"),zKo=o(" \u2014 "),wq=a("a"),WKo=o("TFTapasForMaskedLM"),QKo=o(" (TAPAS model)"),HKo=l(),Uv=a("li"),Lme=a("strong"),UKo=o("transfo-xl"),JKo=o(" \u2014 "),Aq=a("a"),YKo=o("TFTransfoXLLMHeadModel"),KKo=o(" (Transformer-XL model)"),ZKo=l(),Jv=a("li"),Bme=a("strong"),eZo=o("xlm"),oZo=o(" \u2014 "),Lq=a("a"),rZo=o("TFXLMWithLMHeadModel"),tZo=o(" (XLM model)"),aZo=l(),Yv=a("li"),xme=a("strong"),nZo=o("xlm-roberta"),sZo=o(" \u2014 "),Bq=a("a"),lZo=o("TFXLMRobertaForMaskedLM"),iZo=o(" (XLM-RoBERTa model)"),dZo=l(),Kv=a("li"),kme=a("strong"),cZo=o("xlnet"),fZo=o(" \u2014 "),xq=a("a"),mZo=o("TFXLNetLMHeadModel"),gZo=o(" (XLNet model)"),hZo=l(),Rme=a("p"),pZo=o("Examples:"),_Zo=l(),f(fw.$$.fragment),qBe=l(),lc=a("h2"),Zv=a("a"),Sme=a("span"),f(mw.$$.fragment),uZo=l(),Pme=a("span"),bZo=o("TFAutoModelForCausalLM"),GBe=l(),ur=a("div"),f(gw.$$.fragment),vZo=l(),ic=a("p"),TZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$me=a("code"),FZo=o("from_pretrained()"),CZo=o("class method or the "),Ime=a("code"),MZo=o("from_config()"),EZo=o(`class
method.`),yZo=l(),hw=a("p"),wZo=o("This class cannot be instantiated directly using "),Dme=a("code"),AZo=o("__init__()"),LZo=o(" (throws an error)."),BZo=l(),ct=a("div"),f(pw.$$.fragment),xZo=l(),jme=a("p"),kZo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),RZo=l(),dc=a("p"),SZo=o(`Note:
Loading a model from its configuration file does `),Nme=a("strong"),PZo=o("not"),$Zo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qme=a("code"),IZo=o("from_pretrained()"),DZo=o("to load the model weights."),jZo=l(),Gme=a("p"),NZo=o("Examples:"),qZo=l(),f(_w.$$.fragment),GZo=l(),po=a("div"),f(uw.$$.fragment),OZo=l(),Ome=a("p"),XZo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),VZo=l(),mn=a("p"),zZo=o("The model class to instantiate is selected based on the "),Xme=a("code"),WZo=o("model_type"),QZo=o(` property of the config object (either
passed as an argument or loaded from `),Vme=a("code"),HZo=o("pretrained_model_name_or_path"),UZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=a("code"),JZo=o("pretrained_model_name_or_path"),YZo=o(":"),KZo=l(),pe=a("ul"),e0=a("li"),Wme=a("strong"),ZZo=o("bert"),eer=o(" \u2014 "),kq=a("a"),oer=o("TFBertLMHeadModel"),rer=o(" (BERT model)"),ter=l(),o0=a("li"),Qme=a("strong"),aer=o("ctrl"),ner=o(" \u2014 "),Rq=a("a"),ser=o("TFCTRLLMHeadModel"),ler=o(" (CTRL model)"),ier=l(),r0=a("li"),Hme=a("strong"),der=o("gpt2"),cer=o(" \u2014 "),Sq=a("a"),fer=o("TFGPT2LMHeadModel"),mer=o(" (OpenAI GPT-2 model)"),ger=l(),t0=a("li"),Ume=a("strong"),her=o("openai-gpt"),per=o(" \u2014 "),Pq=a("a"),_er=o("TFOpenAIGPTLMHeadModel"),uer=o(" (OpenAI GPT model)"),ber=l(),a0=a("li"),Jme=a("strong"),ver=o("rembert"),Ter=o(" \u2014 "),$q=a("a"),Fer=o("TFRemBertForCausalLM"),Cer=o(" (RemBERT model)"),Mer=l(),n0=a("li"),Yme=a("strong"),Eer=o("roberta"),yer=o(" \u2014 "),Iq=a("a"),wer=o("TFRobertaForCausalLM"),Aer=o(" (RoBERTa model)"),Ler=l(),s0=a("li"),Kme=a("strong"),Ber=o("roformer"),xer=o(" \u2014 "),Dq=a("a"),ker=o("TFRoFormerForCausalLM"),Rer=o(" (RoFormer model)"),Ser=l(),l0=a("li"),Zme=a("strong"),Per=o("transfo-xl"),$er=o(" \u2014 "),jq=a("a"),Ier=o("TFTransfoXLLMHeadModel"),Der=o(" (Transformer-XL model)"),jer=l(),i0=a("li"),ege=a("strong"),Ner=o("xlm"),qer=o(" \u2014 "),Nq=a("a"),Ger=o("TFXLMWithLMHeadModel"),Oer=o(" (XLM model)"),Xer=l(),d0=a("li"),oge=a("strong"),Ver=o("xlnet"),zer=o(" \u2014 "),qq=a("a"),Wer=o("TFXLNetLMHeadModel"),Qer=o(" (XLNet model)"),Her=l(),rge=a("p"),Uer=o("Examples:"),Jer=l(),f(bw.$$.fragment),OBe=l(),cc=a("h2"),c0=a("a"),tge=a("span"),f(vw.$$.fragment),Yer=l(),age=a("span"),Ker=o("TFAutoModelForImageClassification"),XBe=l(),br=a("div"),f(Tw.$$.fragment),Zer=l(),fc=a("p"),eor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nge=a("code"),oor=o("from_pretrained()"),ror=o("class method or the "),sge=a("code"),tor=o("from_config()"),aor=o(`class
method.`),nor=l(),Fw=a("p"),sor=o("This class cannot be instantiated directly using "),lge=a("code"),lor=o("__init__()"),ior=o(" (throws an error)."),dor=l(),ft=a("div"),f(Cw.$$.fragment),cor=l(),ige=a("p"),mor=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gor=l(),mc=a("p"),hor=o(`Note:
Loading a model from its configuration file does `),dge=a("strong"),por=o("not"),_or=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cge=a("code"),uor=o("from_pretrained()"),bor=o("to load the model weights."),vor=l(),fge=a("p"),Tor=o("Examples:"),For=l(),f(Mw.$$.fragment),Cor=l(),_o=a("div"),f(Ew.$$.fragment),Mor=l(),mge=a("p"),Eor=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),yor=l(),gn=a("p"),wor=o("The model class to instantiate is selected based on the "),gge=a("code"),Aor=o("model_type"),Lor=o(` property of the config object (either
passed as an argument or loaded from `),hge=a("code"),Bor=o("pretrained_model_name_or_path"),xor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pge=a("code"),kor=o("pretrained_model_name_or_path"),Ror=o(":"),Sor=l(),yw=a("ul"),f0=a("li"),_ge=a("strong"),Por=o("convnext"),$or=o(" \u2014 "),Gq=a("a"),Ior=o("TFConvNextForImageClassification"),Dor=o(" (ConvNext model)"),jor=l(),m0=a("li"),uge=a("strong"),Nor=o("vit"),qor=o(" \u2014 "),Oq=a("a"),Gor=o("TFViTForImageClassification"),Oor=o(" (ViT model)"),Xor=l(),bge=a("p"),Vor=o("Examples:"),zor=l(),f(ww.$$.fragment),VBe=l(),gc=a("h2"),g0=a("a"),vge=a("span"),f(Aw.$$.fragment),Wor=l(),Tge=a("span"),Qor=o("TFAutoModelForMaskedLM"),zBe=l(),vr=a("div"),f(Lw.$$.fragment),Hor=l(),hc=a("p"),Uor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Fge=a("code"),Jor=o("from_pretrained()"),Yor=o("class method or the "),Cge=a("code"),Kor=o("from_config()"),Zor=o(`class
method.`),err=l(),Bw=a("p"),orr=o("This class cannot be instantiated directly using "),Mge=a("code"),rrr=o("__init__()"),trr=o(" (throws an error)."),arr=l(),mt=a("div"),f(xw.$$.fragment),nrr=l(),Ege=a("p"),srr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lrr=l(),pc=a("p"),irr=o(`Note:
Loading a model from its configuration file does `),yge=a("strong"),drr=o("not"),crr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wge=a("code"),frr=o("from_pretrained()"),mrr=o("to load the model weights."),grr=l(),Age=a("p"),hrr=o("Examples:"),prr=l(),f(kw.$$.fragment),_rr=l(),uo=a("div"),f(Rw.$$.fragment),urr=l(),Lge=a("p"),brr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vrr=l(),hn=a("p"),Trr=o("The model class to instantiate is selected based on the "),Bge=a("code"),Frr=o("model_type"),Crr=o(` property of the config object (either
passed as an argument or loaded from `),xge=a("code"),Mrr=o("pretrained_model_name_or_path"),Err=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=a("code"),yrr=o("pretrained_model_name_or_path"),wrr=o(":"),Arr=l(),Y=a("ul"),h0=a("li"),Rge=a("strong"),Lrr=o("albert"),Brr=o(" \u2014 "),Xq=a("a"),xrr=o("TFAlbertForMaskedLM"),krr=o(" (ALBERT model)"),Rrr=l(),p0=a("li"),Sge=a("strong"),Srr=o("bert"),Prr=o(" \u2014 "),Vq=a("a"),$rr=o("TFBertForMaskedLM"),Irr=o(" (BERT model)"),Drr=l(),_0=a("li"),Pge=a("strong"),jrr=o("camembert"),Nrr=o(" \u2014 "),zq=a("a"),qrr=o("TFCamembertForMaskedLM"),Grr=o(" (CamemBERT model)"),Orr=l(),u0=a("li"),$ge=a("strong"),Xrr=o("convbert"),Vrr=o(" \u2014 "),Wq=a("a"),zrr=o("TFConvBertForMaskedLM"),Wrr=o(" (ConvBERT model)"),Qrr=l(),b0=a("li"),Ige=a("strong"),Hrr=o("deberta"),Urr=o(" \u2014 "),Qq=a("a"),Jrr=o("TFDebertaForMaskedLM"),Yrr=o(" (DeBERTa model)"),Krr=l(),v0=a("li"),Dge=a("strong"),Zrr=o("deberta-v2"),etr=o(" \u2014 "),Hq=a("a"),otr=o("TFDebertaV2ForMaskedLM"),rtr=o(" (DeBERTa-v2 model)"),ttr=l(),T0=a("li"),jge=a("strong"),atr=o("distilbert"),ntr=o(" \u2014 "),Uq=a("a"),str=o("TFDistilBertForMaskedLM"),ltr=o(" (DistilBERT model)"),itr=l(),F0=a("li"),Nge=a("strong"),dtr=o("electra"),ctr=o(" \u2014 "),Jq=a("a"),ftr=o("TFElectraForMaskedLM"),mtr=o(" (ELECTRA model)"),gtr=l(),C0=a("li"),qge=a("strong"),htr=o("flaubert"),ptr=o(" \u2014 "),Yq=a("a"),_tr=o("TFFlaubertWithLMHeadModel"),utr=o(" (FlauBERT model)"),btr=l(),M0=a("li"),Gge=a("strong"),vtr=o("funnel"),Ttr=o(" \u2014 "),Kq=a("a"),Ftr=o("TFFunnelForMaskedLM"),Ctr=o(" (Funnel Transformer model)"),Mtr=l(),E0=a("li"),Oge=a("strong"),Etr=o("layoutlm"),ytr=o(" \u2014 "),Zq=a("a"),wtr=o("TFLayoutLMForMaskedLM"),Atr=o(" (LayoutLM model)"),Ltr=l(),y0=a("li"),Xge=a("strong"),Btr=o("longformer"),xtr=o(" \u2014 "),eG=a("a"),ktr=o("TFLongformerForMaskedLM"),Rtr=o(" (Longformer model)"),Str=l(),w0=a("li"),Vge=a("strong"),Ptr=o("mobilebert"),$tr=o(" \u2014 "),oG=a("a"),Itr=o("TFMobileBertForMaskedLM"),Dtr=o(" (MobileBERT model)"),jtr=l(),A0=a("li"),zge=a("strong"),Ntr=o("mpnet"),qtr=o(" \u2014 "),rG=a("a"),Gtr=o("TFMPNetForMaskedLM"),Otr=o(" (MPNet model)"),Xtr=l(),L0=a("li"),Wge=a("strong"),Vtr=o("rembert"),ztr=o(" \u2014 "),tG=a("a"),Wtr=o("TFRemBertForMaskedLM"),Qtr=o(" (RemBERT model)"),Htr=l(),B0=a("li"),Qge=a("strong"),Utr=o("roberta"),Jtr=o(" \u2014 "),aG=a("a"),Ytr=o("TFRobertaForMaskedLM"),Ktr=o(" (RoBERTa model)"),Ztr=l(),x0=a("li"),Hge=a("strong"),ear=o("roformer"),oar=o(" \u2014 "),nG=a("a"),rar=o("TFRoFormerForMaskedLM"),tar=o(" (RoFormer model)"),aar=l(),k0=a("li"),Uge=a("strong"),nar=o("tapas"),sar=o(" \u2014 "),sG=a("a"),lar=o("TFTapasForMaskedLM"),iar=o(" (TAPAS model)"),dar=l(),R0=a("li"),Jge=a("strong"),car=o("xlm"),far=o(" \u2014 "),lG=a("a"),mar=o("TFXLMWithLMHeadModel"),gar=o(" (XLM model)"),har=l(),S0=a("li"),Yge=a("strong"),par=o("xlm-roberta"),_ar=o(" \u2014 "),iG=a("a"),uar=o("TFXLMRobertaForMaskedLM"),bar=o(" (XLM-RoBERTa model)"),Tar=l(),Kge=a("p"),Far=o("Examples:"),Car=l(),f(Sw.$$.fragment),WBe=l(),_c=a("h2"),P0=a("a"),Zge=a("span"),f(Pw.$$.fragment),Mar=l(),ehe=a("span"),Ear=o("TFAutoModelForSeq2SeqLM"),QBe=l(),Tr=a("div"),f($w.$$.fragment),yar=l(),uc=a("p"),war=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ohe=a("code"),Aar=o("from_pretrained()"),Lar=o("class method or the "),rhe=a("code"),Bar=o("from_config()"),xar=o(`class
method.`),kar=l(),Iw=a("p"),Rar=o("This class cannot be instantiated directly using "),the=a("code"),Sar=o("__init__()"),Par=o(" (throws an error)."),$ar=l(),gt=a("div"),f(Dw.$$.fragment),Iar=l(),ahe=a("p"),Dar=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jar=l(),bc=a("p"),Nar=o(`Note:
Loading a model from its configuration file does `),nhe=a("strong"),qar=o("not"),Gar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),she=a("code"),Oar=o("from_pretrained()"),Xar=o("to load the model weights."),Var=l(),lhe=a("p"),zar=o("Examples:"),War=l(),f(jw.$$.fragment),Qar=l(),bo=a("div"),f(Nw.$$.fragment),Har=l(),ihe=a("p"),Uar=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Jar=l(),pn=a("p"),Yar=o("The model class to instantiate is selected based on the "),dhe=a("code"),Kar=o("model_type"),Zar=o(` property of the config object (either
passed as an argument or loaded from `),che=a("code"),enr=o("pretrained_model_name_or_path"),onr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fhe=a("code"),rnr=o("pretrained_model_name_or_path"),tnr=o(":"),anr=l(),_e=a("ul"),$0=a("li"),mhe=a("strong"),nnr=o("bart"),snr=o(" \u2014 "),dG=a("a"),lnr=o("TFBartForConditionalGeneration"),inr=o(" (BART model)"),dnr=l(),I0=a("li"),ghe=a("strong"),cnr=o("blenderbot"),fnr=o(" \u2014 "),cG=a("a"),mnr=o("TFBlenderbotForConditionalGeneration"),gnr=o(" (Blenderbot model)"),hnr=l(),D0=a("li"),hhe=a("strong"),pnr=o("blenderbot-small"),_nr=o(" \u2014 "),fG=a("a"),unr=o("TFBlenderbotSmallForConditionalGeneration"),bnr=o(" (BlenderbotSmall model)"),vnr=l(),j0=a("li"),phe=a("strong"),Tnr=o("encoder-decoder"),Fnr=o(" \u2014 "),mG=a("a"),Cnr=o("TFEncoderDecoderModel"),Mnr=o(" (Encoder decoder model)"),Enr=l(),N0=a("li"),_he=a("strong"),ynr=o("led"),wnr=o(" \u2014 "),gG=a("a"),Anr=o("TFLEDForConditionalGeneration"),Lnr=o(" (LED model)"),Bnr=l(),q0=a("li"),uhe=a("strong"),xnr=o("marian"),knr=o(" \u2014 "),hG=a("a"),Rnr=o("TFMarianMTModel"),Snr=o(" (Marian model)"),Pnr=l(),G0=a("li"),bhe=a("strong"),$nr=o("mbart"),Inr=o(" \u2014 "),pG=a("a"),Dnr=o("TFMBartForConditionalGeneration"),jnr=o(" (mBART model)"),Nnr=l(),O0=a("li"),vhe=a("strong"),qnr=o("mt5"),Gnr=o(" \u2014 "),_G=a("a"),Onr=o("TFMT5ForConditionalGeneration"),Xnr=o(" (mT5 model)"),Vnr=l(),X0=a("li"),The=a("strong"),znr=o("pegasus"),Wnr=o(" \u2014 "),uG=a("a"),Qnr=o("TFPegasusForConditionalGeneration"),Hnr=o(" (Pegasus model)"),Unr=l(),V0=a("li"),Fhe=a("strong"),Jnr=o("t5"),Ynr=o(" \u2014 "),bG=a("a"),Knr=o("TFT5ForConditionalGeneration"),Znr=o(" (T5 model)"),esr=l(),Che=a("p"),osr=o("Examples:"),rsr=l(),f(qw.$$.fragment),HBe=l(),vc=a("h2"),z0=a("a"),Mhe=a("span"),f(Gw.$$.fragment),tsr=l(),Ehe=a("span"),asr=o("TFAutoModelForSequenceClassification"),UBe=l(),Fr=a("div"),f(Ow.$$.fragment),nsr=l(),Tc=a("p"),ssr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yhe=a("code"),lsr=o("from_pretrained()"),isr=o("class method or the "),whe=a("code"),dsr=o("from_config()"),csr=o(`class
method.`),fsr=l(),Xw=a("p"),msr=o("This class cannot be instantiated directly using "),Ahe=a("code"),gsr=o("__init__()"),hsr=o(" (throws an error)."),psr=l(),ht=a("div"),f(Vw.$$.fragment),_sr=l(),Lhe=a("p"),usr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bsr=l(),Fc=a("p"),vsr=o(`Note:
Loading a model from its configuration file does `),Bhe=a("strong"),Tsr=o("not"),Fsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xhe=a("code"),Csr=o("from_pretrained()"),Msr=o("to load the model weights."),Esr=l(),khe=a("p"),ysr=o("Examples:"),wsr=l(),f(zw.$$.fragment),Asr=l(),vo=a("div"),f(Ww.$$.fragment),Lsr=l(),Rhe=a("p"),Bsr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xsr=l(),_n=a("p"),ksr=o("The model class to instantiate is selected based on the "),She=a("code"),Rsr=o("model_type"),Ssr=o(` property of the config object (either
passed as an argument or loaded from `),Phe=a("code"),Psr=o("pretrained_model_name_or_path"),$sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=a("code"),Isr=o("pretrained_model_name_or_path"),Dsr=o(":"),jsr=l(),X=a("ul"),W0=a("li"),Ihe=a("strong"),Nsr=o("albert"),qsr=o(" \u2014 "),vG=a("a"),Gsr=o("TFAlbertForSequenceClassification"),Osr=o(" (ALBERT model)"),Xsr=l(),Q0=a("li"),Dhe=a("strong"),Vsr=o("bert"),zsr=o(" \u2014 "),TG=a("a"),Wsr=o("TFBertForSequenceClassification"),Qsr=o(" (BERT model)"),Hsr=l(),H0=a("li"),jhe=a("strong"),Usr=o("camembert"),Jsr=o(" \u2014 "),FG=a("a"),Ysr=o("TFCamembertForSequenceClassification"),Ksr=o(" (CamemBERT model)"),Zsr=l(),U0=a("li"),Nhe=a("strong"),elr=o("convbert"),olr=o(" \u2014 "),CG=a("a"),rlr=o("TFConvBertForSequenceClassification"),tlr=o(" (ConvBERT model)"),alr=l(),J0=a("li"),qhe=a("strong"),nlr=o("ctrl"),slr=o(" \u2014 "),MG=a("a"),llr=o("TFCTRLForSequenceClassification"),ilr=o(" (CTRL model)"),dlr=l(),Y0=a("li"),Ghe=a("strong"),clr=o("deberta"),flr=o(" \u2014 "),EG=a("a"),mlr=o("TFDebertaForSequenceClassification"),glr=o(" (DeBERTa model)"),hlr=l(),K0=a("li"),Ohe=a("strong"),plr=o("deberta-v2"),_lr=o(" \u2014 "),yG=a("a"),ulr=o("TFDebertaV2ForSequenceClassification"),blr=o(" (DeBERTa-v2 model)"),vlr=l(),Z0=a("li"),Xhe=a("strong"),Tlr=o("distilbert"),Flr=o(" \u2014 "),wG=a("a"),Clr=o("TFDistilBertForSequenceClassification"),Mlr=o(" (DistilBERT model)"),Elr=l(),eT=a("li"),Vhe=a("strong"),ylr=o("electra"),wlr=o(" \u2014 "),AG=a("a"),Alr=o("TFElectraForSequenceClassification"),Llr=o(" (ELECTRA model)"),Blr=l(),oT=a("li"),zhe=a("strong"),xlr=o("flaubert"),klr=o(" \u2014 "),LG=a("a"),Rlr=o("TFFlaubertForSequenceClassification"),Slr=o(" (FlauBERT model)"),Plr=l(),rT=a("li"),Whe=a("strong"),$lr=o("funnel"),Ilr=o(" \u2014 "),BG=a("a"),Dlr=o("TFFunnelForSequenceClassification"),jlr=o(" (Funnel Transformer model)"),Nlr=l(),tT=a("li"),Qhe=a("strong"),qlr=o("gpt2"),Glr=o(" \u2014 "),xG=a("a"),Olr=o("TFGPT2ForSequenceClassification"),Xlr=o(" (OpenAI GPT-2 model)"),Vlr=l(),aT=a("li"),Hhe=a("strong"),zlr=o("layoutlm"),Wlr=o(" \u2014 "),kG=a("a"),Qlr=o("TFLayoutLMForSequenceClassification"),Hlr=o(" (LayoutLM model)"),Ulr=l(),nT=a("li"),Uhe=a("strong"),Jlr=o("longformer"),Ylr=o(" \u2014 "),RG=a("a"),Klr=o("TFLongformerForSequenceClassification"),Zlr=o(" (Longformer model)"),eir=l(),sT=a("li"),Jhe=a("strong"),oir=o("mobilebert"),rir=o(" \u2014 "),SG=a("a"),tir=o("TFMobileBertForSequenceClassification"),air=o(" (MobileBERT model)"),nir=l(),lT=a("li"),Yhe=a("strong"),sir=o("mpnet"),lir=o(" \u2014 "),PG=a("a"),iir=o("TFMPNetForSequenceClassification"),dir=o(" (MPNet model)"),cir=l(),iT=a("li"),Khe=a("strong"),fir=o("openai-gpt"),mir=o(" \u2014 "),$G=a("a"),gir=o("TFOpenAIGPTForSequenceClassification"),hir=o(" (OpenAI GPT model)"),pir=l(),dT=a("li"),Zhe=a("strong"),_ir=o("rembert"),uir=o(" \u2014 "),IG=a("a"),bir=o("TFRemBertForSequenceClassification"),vir=o(" (RemBERT model)"),Tir=l(),cT=a("li"),epe=a("strong"),Fir=o("roberta"),Cir=o(" \u2014 "),DG=a("a"),Mir=o("TFRobertaForSequenceClassification"),Eir=o(" (RoBERTa model)"),yir=l(),fT=a("li"),ope=a("strong"),wir=o("roformer"),Air=o(" \u2014 "),jG=a("a"),Lir=o("TFRoFormerForSequenceClassification"),Bir=o(" (RoFormer model)"),xir=l(),mT=a("li"),rpe=a("strong"),kir=o("tapas"),Rir=o(" \u2014 "),NG=a("a"),Sir=o("TFTapasForSequenceClassification"),Pir=o(" (TAPAS model)"),$ir=l(),gT=a("li"),tpe=a("strong"),Iir=o("transfo-xl"),Dir=o(" \u2014 "),qG=a("a"),jir=o("TFTransfoXLForSequenceClassification"),Nir=o(" (Transformer-XL model)"),qir=l(),hT=a("li"),ape=a("strong"),Gir=o("xlm"),Oir=o(" \u2014 "),GG=a("a"),Xir=o("TFXLMForSequenceClassification"),Vir=o(" (XLM model)"),zir=l(),pT=a("li"),npe=a("strong"),Wir=o("xlm-roberta"),Qir=o(" \u2014 "),OG=a("a"),Hir=o("TFXLMRobertaForSequenceClassification"),Uir=o(" (XLM-RoBERTa model)"),Jir=l(),_T=a("li"),spe=a("strong"),Yir=o("xlnet"),Kir=o(" \u2014 "),XG=a("a"),Zir=o("TFXLNetForSequenceClassification"),edr=o(" (XLNet model)"),odr=l(),lpe=a("p"),rdr=o("Examples:"),tdr=l(),f(Qw.$$.fragment),JBe=l(),Cc=a("h2"),uT=a("a"),ipe=a("span"),f(Hw.$$.fragment),adr=l(),dpe=a("span"),ndr=o("TFAutoModelForMultipleChoice"),YBe=l(),Cr=a("div"),f(Uw.$$.fragment),sdr=l(),Mc=a("p"),ldr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cpe=a("code"),idr=o("from_pretrained()"),ddr=o("class method or the "),fpe=a("code"),cdr=o("from_config()"),fdr=o(`class
method.`),mdr=l(),Jw=a("p"),gdr=o("This class cannot be instantiated directly using "),mpe=a("code"),hdr=o("__init__()"),pdr=o(" (throws an error)."),_dr=l(),pt=a("div"),f(Yw.$$.fragment),udr=l(),gpe=a("p"),bdr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vdr=l(),Ec=a("p"),Tdr=o(`Note:
Loading a model from its configuration file does `),hpe=a("strong"),Fdr=o("not"),Cdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ppe=a("code"),Mdr=o("from_pretrained()"),Edr=o("to load the model weights."),ydr=l(),_pe=a("p"),wdr=o("Examples:"),Adr=l(),f(Kw.$$.fragment),Ldr=l(),To=a("div"),f(Zw.$$.fragment),Bdr=l(),upe=a("p"),xdr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kdr=l(),un=a("p"),Rdr=o("The model class to instantiate is selected based on the "),bpe=a("code"),Sdr=o("model_type"),Pdr=o(` property of the config object (either
passed as an argument or loaded from `),vpe=a("code"),$dr=o("pretrained_model_name_or_path"),Idr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=a("code"),Ddr=o("pretrained_model_name_or_path"),jdr=o(":"),Ndr=l(),te=a("ul"),bT=a("li"),Fpe=a("strong"),qdr=o("albert"),Gdr=o(" \u2014 "),VG=a("a"),Odr=o("TFAlbertForMultipleChoice"),Xdr=o(" (ALBERT model)"),Vdr=l(),vT=a("li"),Cpe=a("strong"),zdr=o("bert"),Wdr=o(" \u2014 "),zG=a("a"),Qdr=o("TFBertForMultipleChoice"),Hdr=o(" (BERT model)"),Udr=l(),TT=a("li"),Mpe=a("strong"),Jdr=o("camembert"),Ydr=o(" \u2014 "),WG=a("a"),Kdr=o("TFCamembertForMultipleChoice"),Zdr=o(" (CamemBERT model)"),ecr=l(),FT=a("li"),Epe=a("strong"),ocr=o("convbert"),rcr=o(" \u2014 "),QG=a("a"),tcr=o("TFConvBertForMultipleChoice"),acr=o(" (ConvBERT model)"),ncr=l(),CT=a("li"),ype=a("strong"),scr=o("distilbert"),lcr=o(" \u2014 "),HG=a("a"),icr=o("TFDistilBertForMultipleChoice"),dcr=o(" (DistilBERT model)"),ccr=l(),MT=a("li"),wpe=a("strong"),fcr=o("electra"),mcr=o(" \u2014 "),UG=a("a"),gcr=o("TFElectraForMultipleChoice"),hcr=o(" (ELECTRA model)"),pcr=l(),ET=a("li"),Ape=a("strong"),_cr=o("flaubert"),ucr=o(" \u2014 "),JG=a("a"),bcr=o("TFFlaubertForMultipleChoice"),vcr=o(" (FlauBERT model)"),Tcr=l(),yT=a("li"),Lpe=a("strong"),Fcr=o("funnel"),Ccr=o(" \u2014 "),YG=a("a"),Mcr=o("TFFunnelForMultipleChoice"),Ecr=o(" (Funnel Transformer model)"),ycr=l(),wT=a("li"),Bpe=a("strong"),wcr=o("longformer"),Acr=o(" \u2014 "),KG=a("a"),Lcr=o("TFLongformerForMultipleChoice"),Bcr=o(" (Longformer model)"),xcr=l(),AT=a("li"),xpe=a("strong"),kcr=o("mobilebert"),Rcr=o(" \u2014 "),ZG=a("a"),Scr=o("TFMobileBertForMultipleChoice"),Pcr=o(" (MobileBERT model)"),$cr=l(),LT=a("li"),kpe=a("strong"),Icr=o("mpnet"),Dcr=o(" \u2014 "),eO=a("a"),jcr=o("TFMPNetForMultipleChoice"),Ncr=o(" (MPNet model)"),qcr=l(),BT=a("li"),Rpe=a("strong"),Gcr=o("rembert"),Ocr=o(" \u2014 "),oO=a("a"),Xcr=o("TFRemBertForMultipleChoice"),Vcr=o(" (RemBERT model)"),zcr=l(),xT=a("li"),Spe=a("strong"),Wcr=o("roberta"),Qcr=o(" \u2014 "),rO=a("a"),Hcr=o("TFRobertaForMultipleChoice"),Ucr=o(" (RoBERTa model)"),Jcr=l(),kT=a("li"),Ppe=a("strong"),Ycr=o("roformer"),Kcr=o(" \u2014 "),tO=a("a"),Zcr=o("TFRoFormerForMultipleChoice"),efr=o(" (RoFormer model)"),ofr=l(),RT=a("li"),$pe=a("strong"),rfr=o("xlm"),tfr=o(" \u2014 "),aO=a("a"),afr=o("TFXLMForMultipleChoice"),nfr=o(" (XLM model)"),sfr=l(),ST=a("li"),Ipe=a("strong"),lfr=o("xlm-roberta"),ifr=o(" \u2014 "),nO=a("a"),dfr=o("TFXLMRobertaForMultipleChoice"),cfr=o(" (XLM-RoBERTa model)"),ffr=l(),PT=a("li"),Dpe=a("strong"),mfr=o("xlnet"),gfr=o(" \u2014 "),sO=a("a"),hfr=o("TFXLNetForMultipleChoice"),pfr=o(" (XLNet model)"),_fr=l(),jpe=a("p"),ufr=o("Examples:"),bfr=l(),f(e6.$$.fragment),KBe=l(),yc=a("h2"),$T=a("a"),Npe=a("span"),f(o6.$$.fragment),vfr=l(),qpe=a("span"),Tfr=o("TFAutoModelForTableQuestionAnswering"),ZBe=l(),Mr=a("div"),f(r6.$$.fragment),Ffr=l(),wc=a("p"),Cfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Gpe=a("code"),Mfr=o("from_pretrained()"),Efr=o("class method or the "),Ope=a("code"),yfr=o("from_config()"),wfr=o(`class
method.`),Afr=l(),t6=a("p"),Lfr=o("This class cannot be instantiated directly using "),Xpe=a("code"),Bfr=o("__init__()"),xfr=o(" (throws an error)."),kfr=l(),_t=a("div"),f(a6.$$.fragment),Rfr=l(),Vpe=a("p"),Sfr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Pfr=l(),Ac=a("p"),$fr=o(`Note:
Loading a model from its configuration file does `),zpe=a("strong"),Ifr=o("not"),Dfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wpe=a("code"),jfr=o("from_pretrained()"),Nfr=o("to load the model weights."),qfr=l(),Qpe=a("p"),Gfr=o("Examples:"),Ofr=l(),f(n6.$$.fragment),Xfr=l(),Fo=a("div"),f(s6.$$.fragment),Vfr=l(),Hpe=a("p"),zfr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Wfr=l(),bn=a("p"),Qfr=o("The model class to instantiate is selected based on the "),Upe=a("code"),Hfr=o("model_type"),Ufr=o(` property of the config object (either
passed as an argument or loaded from `),Jpe=a("code"),Jfr=o("pretrained_model_name_or_path"),Yfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ype=a("code"),Kfr=o("pretrained_model_name_or_path"),Zfr=o(":"),emr=l(),Kpe=a("ul"),IT=a("li"),Zpe=a("strong"),omr=o("tapas"),rmr=o(" \u2014 "),lO=a("a"),tmr=o("TFTapasForQuestionAnswering"),amr=o(" (TAPAS model)"),nmr=l(),e_e=a("p"),smr=o("Examples:"),lmr=l(),f(l6.$$.fragment),exe=l(),Lc=a("h2"),DT=a("a"),o_e=a("span"),f(i6.$$.fragment),imr=l(),r_e=a("span"),dmr=o("TFAutoModelForTokenClassification"),oxe=l(),Er=a("div"),f(d6.$$.fragment),cmr=l(),Bc=a("p"),fmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),t_e=a("code"),mmr=o("from_pretrained()"),gmr=o("class method or the "),a_e=a("code"),hmr=o("from_config()"),pmr=o(`class
method.`),_mr=l(),c6=a("p"),umr=o("This class cannot be instantiated directly using "),n_e=a("code"),bmr=o("__init__()"),vmr=o(" (throws an error)."),Tmr=l(),ut=a("div"),f(f6.$$.fragment),Fmr=l(),s_e=a("p"),Cmr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Mmr=l(),xc=a("p"),Emr=o(`Note:
Loading a model from its configuration file does `),l_e=a("strong"),ymr=o("not"),wmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),i_e=a("code"),Amr=o("from_pretrained()"),Lmr=o("to load the model weights."),Bmr=l(),d_e=a("p"),xmr=o("Examples:"),kmr=l(),f(m6.$$.fragment),Rmr=l(),Co=a("div"),f(g6.$$.fragment),Smr=l(),c_e=a("p"),Pmr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$mr=l(),vn=a("p"),Imr=o("The model class to instantiate is selected based on the "),f_e=a("code"),Dmr=o("model_type"),jmr=o(` property of the config object (either
passed as an argument or loaded from `),m_e=a("code"),Nmr=o("pretrained_model_name_or_path"),qmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=a("code"),Gmr=o("pretrained_model_name_or_path"),Omr=o(":"),Xmr=l(),K=a("ul"),jT=a("li"),h_e=a("strong"),Vmr=o("albert"),zmr=o(" \u2014 "),iO=a("a"),Wmr=o("TFAlbertForTokenClassification"),Qmr=o(" (ALBERT model)"),Hmr=l(),NT=a("li"),p_e=a("strong"),Umr=o("bert"),Jmr=o(" \u2014 "),dO=a("a"),Ymr=o("TFBertForTokenClassification"),Kmr=o(" (BERT model)"),Zmr=l(),qT=a("li"),__e=a("strong"),egr=o("camembert"),ogr=o(" \u2014 "),cO=a("a"),rgr=o("TFCamembertForTokenClassification"),tgr=o(" (CamemBERT model)"),agr=l(),GT=a("li"),u_e=a("strong"),ngr=o("convbert"),sgr=o(" \u2014 "),fO=a("a"),lgr=o("TFConvBertForTokenClassification"),igr=o(" (ConvBERT model)"),dgr=l(),OT=a("li"),b_e=a("strong"),cgr=o("deberta"),fgr=o(" \u2014 "),mO=a("a"),mgr=o("TFDebertaForTokenClassification"),ggr=o(" (DeBERTa model)"),hgr=l(),XT=a("li"),v_e=a("strong"),pgr=o("deberta-v2"),_gr=o(" \u2014 "),gO=a("a"),ugr=o("TFDebertaV2ForTokenClassification"),bgr=o(" (DeBERTa-v2 model)"),vgr=l(),VT=a("li"),T_e=a("strong"),Tgr=o("distilbert"),Fgr=o(" \u2014 "),hO=a("a"),Cgr=o("TFDistilBertForTokenClassification"),Mgr=o(" (DistilBERT model)"),Egr=l(),zT=a("li"),F_e=a("strong"),ygr=o("electra"),wgr=o(" \u2014 "),pO=a("a"),Agr=o("TFElectraForTokenClassification"),Lgr=o(" (ELECTRA model)"),Bgr=l(),WT=a("li"),C_e=a("strong"),xgr=o("flaubert"),kgr=o(" \u2014 "),_O=a("a"),Rgr=o("TFFlaubertForTokenClassification"),Sgr=o(" (FlauBERT model)"),Pgr=l(),QT=a("li"),M_e=a("strong"),$gr=o("funnel"),Igr=o(" \u2014 "),uO=a("a"),Dgr=o("TFFunnelForTokenClassification"),jgr=o(" (Funnel Transformer model)"),Ngr=l(),HT=a("li"),E_e=a("strong"),qgr=o("layoutlm"),Ggr=o(" \u2014 "),bO=a("a"),Ogr=o("TFLayoutLMForTokenClassification"),Xgr=o(" (LayoutLM model)"),Vgr=l(),UT=a("li"),y_e=a("strong"),zgr=o("longformer"),Wgr=o(" \u2014 "),vO=a("a"),Qgr=o("TFLongformerForTokenClassification"),Hgr=o(" (Longformer model)"),Ugr=l(),JT=a("li"),w_e=a("strong"),Jgr=o("mobilebert"),Ygr=o(" \u2014 "),TO=a("a"),Kgr=o("TFMobileBertForTokenClassification"),Zgr=o(" (MobileBERT model)"),ehr=l(),YT=a("li"),A_e=a("strong"),ohr=o("mpnet"),rhr=o(" \u2014 "),FO=a("a"),thr=o("TFMPNetForTokenClassification"),ahr=o(" (MPNet model)"),nhr=l(),KT=a("li"),L_e=a("strong"),shr=o("rembert"),lhr=o(" \u2014 "),CO=a("a"),ihr=o("TFRemBertForTokenClassification"),dhr=o(" (RemBERT model)"),chr=l(),ZT=a("li"),B_e=a("strong"),fhr=o("roberta"),mhr=o(" \u2014 "),MO=a("a"),ghr=o("TFRobertaForTokenClassification"),hhr=o(" (RoBERTa model)"),phr=l(),eF=a("li"),x_e=a("strong"),_hr=o("roformer"),uhr=o(" \u2014 "),EO=a("a"),bhr=o("TFRoFormerForTokenClassification"),vhr=o(" (RoFormer model)"),Thr=l(),oF=a("li"),k_e=a("strong"),Fhr=o("xlm"),Chr=o(" \u2014 "),yO=a("a"),Mhr=o("TFXLMForTokenClassification"),Ehr=o(" (XLM model)"),yhr=l(),rF=a("li"),R_e=a("strong"),whr=o("xlm-roberta"),Ahr=o(" \u2014 "),wO=a("a"),Lhr=o("TFXLMRobertaForTokenClassification"),Bhr=o(" (XLM-RoBERTa model)"),xhr=l(),tF=a("li"),S_e=a("strong"),khr=o("xlnet"),Rhr=o(" \u2014 "),AO=a("a"),Shr=o("TFXLNetForTokenClassification"),Phr=o(" (XLNet model)"),$hr=l(),P_e=a("p"),Ihr=o("Examples:"),Dhr=l(),f(h6.$$.fragment),rxe=l(),kc=a("h2"),aF=a("a"),$_e=a("span"),f(p6.$$.fragment),jhr=l(),I_e=a("span"),Nhr=o("TFAutoModelForQuestionAnswering"),txe=l(),yr=a("div"),f(_6.$$.fragment),qhr=l(),Rc=a("p"),Ghr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),D_e=a("code"),Ohr=o("from_pretrained()"),Xhr=o("class method or the "),j_e=a("code"),Vhr=o("from_config()"),zhr=o(`class
method.`),Whr=l(),u6=a("p"),Qhr=o("This class cannot be instantiated directly using "),N_e=a("code"),Hhr=o("__init__()"),Uhr=o(" (throws an error)."),Jhr=l(),bt=a("div"),f(b6.$$.fragment),Yhr=l(),q_e=a("p"),Khr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Zhr=l(),Sc=a("p"),epr=o(`Note:
Loading a model from its configuration file does `),G_e=a("strong"),opr=o("not"),rpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),O_e=a("code"),tpr=o("from_pretrained()"),apr=o("to load the model weights."),npr=l(),X_e=a("p"),spr=o("Examples:"),lpr=l(),f(v6.$$.fragment),ipr=l(),Mo=a("div"),f(T6.$$.fragment),dpr=l(),V_e=a("p"),cpr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fpr=l(),Tn=a("p"),mpr=o("The model class to instantiate is selected based on the "),z_e=a("code"),gpr=o("model_type"),hpr=o(` property of the config object (either
passed as an argument or loaded from `),W_e=a("code"),ppr=o("pretrained_model_name_or_path"),_pr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q_e=a("code"),upr=o("pretrained_model_name_or_path"),bpr=o(":"),vpr=l(),Z=a("ul"),nF=a("li"),H_e=a("strong"),Tpr=o("albert"),Fpr=o(" \u2014 "),LO=a("a"),Cpr=o("TFAlbertForQuestionAnswering"),Mpr=o(" (ALBERT model)"),Epr=l(),sF=a("li"),U_e=a("strong"),ypr=o("bert"),wpr=o(" \u2014 "),BO=a("a"),Apr=o("TFBertForQuestionAnswering"),Lpr=o(" (BERT model)"),Bpr=l(),lF=a("li"),J_e=a("strong"),xpr=o("camembert"),kpr=o(" \u2014 "),xO=a("a"),Rpr=o("TFCamembertForQuestionAnswering"),Spr=o(" (CamemBERT model)"),Ppr=l(),iF=a("li"),Y_e=a("strong"),$pr=o("convbert"),Ipr=o(" \u2014 "),kO=a("a"),Dpr=o("TFConvBertForQuestionAnswering"),jpr=o(" (ConvBERT model)"),Npr=l(),dF=a("li"),K_e=a("strong"),qpr=o("deberta"),Gpr=o(" \u2014 "),RO=a("a"),Opr=o("TFDebertaForQuestionAnswering"),Xpr=o(" (DeBERTa model)"),Vpr=l(),cF=a("li"),Z_e=a("strong"),zpr=o("deberta-v2"),Wpr=o(" \u2014 "),SO=a("a"),Qpr=o("TFDebertaV2ForQuestionAnswering"),Hpr=o(" (DeBERTa-v2 model)"),Upr=l(),fF=a("li"),eue=a("strong"),Jpr=o("distilbert"),Ypr=o(" \u2014 "),PO=a("a"),Kpr=o("TFDistilBertForQuestionAnswering"),Zpr=o(" (DistilBERT model)"),e_r=l(),mF=a("li"),oue=a("strong"),o_r=o("electra"),r_r=o(" \u2014 "),$O=a("a"),t_r=o("TFElectraForQuestionAnswering"),a_r=o(" (ELECTRA model)"),n_r=l(),gF=a("li"),rue=a("strong"),s_r=o("flaubert"),l_r=o(" \u2014 "),IO=a("a"),i_r=o("TFFlaubertForQuestionAnsweringSimple"),d_r=o(" (FlauBERT model)"),c_r=l(),hF=a("li"),tue=a("strong"),f_r=o("funnel"),m_r=o(" \u2014 "),DO=a("a"),g_r=o("TFFunnelForQuestionAnswering"),h_r=o(" (Funnel Transformer model)"),p_r=l(),pF=a("li"),aue=a("strong"),__r=o("longformer"),u_r=o(" \u2014 "),jO=a("a"),b_r=o("TFLongformerForQuestionAnswering"),v_r=o(" (Longformer model)"),T_r=l(),_F=a("li"),nue=a("strong"),F_r=o("mobilebert"),C_r=o(" \u2014 "),NO=a("a"),M_r=o("TFMobileBertForQuestionAnswering"),E_r=o(" (MobileBERT model)"),y_r=l(),uF=a("li"),sue=a("strong"),w_r=o("mpnet"),A_r=o(" \u2014 "),qO=a("a"),L_r=o("TFMPNetForQuestionAnswering"),B_r=o(" (MPNet model)"),x_r=l(),bF=a("li"),lue=a("strong"),k_r=o("rembert"),R_r=o(" \u2014 "),GO=a("a"),S_r=o("TFRemBertForQuestionAnswering"),P_r=o(" (RemBERT model)"),$_r=l(),vF=a("li"),iue=a("strong"),I_r=o("roberta"),D_r=o(" \u2014 "),OO=a("a"),j_r=o("TFRobertaForQuestionAnswering"),N_r=o(" (RoBERTa model)"),q_r=l(),TF=a("li"),due=a("strong"),G_r=o("roformer"),O_r=o(" \u2014 "),XO=a("a"),X_r=o("TFRoFormerForQuestionAnswering"),V_r=o(" (RoFormer model)"),z_r=l(),FF=a("li"),cue=a("strong"),W_r=o("xlm"),Q_r=o(" \u2014 "),VO=a("a"),H_r=o("TFXLMForQuestionAnsweringSimple"),U_r=o(" (XLM model)"),J_r=l(),CF=a("li"),fue=a("strong"),Y_r=o("xlm-roberta"),K_r=o(" \u2014 "),zO=a("a"),Z_r=o("TFXLMRobertaForQuestionAnswering"),eur=o(" (XLM-RoBERTa model)"),our=l(),MF=a("li"),mue=a("strong"),rur=o("xlnet"),tur=o(" \u2014 "),WO=a("a"),aur=o("TFXLNetForQuestionAnsweringSimple"),nur=o(" (XLNet model)"),sur=l(),gue=a("p"),lur=o("Examples:"),iur=l(),f(F6.$$.fragment),axe=l(),Pc=a("h2"),EF=a("a"),hue=a("span"),f(C6.$$.fragment),dur=l(),pue=a("span"),cur=o("TFAutoModelForVision2Seq"),nxe=l(),wr=a("div"),f(M6.$$.fragment),fur=l(),$c=a("p"),mur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_ue=a("code"),gur=o("from_pretrained()"),hur=o("class method or the "),uue=a("code"),pur=o("from_config()"),_ur=o(`class
method.`),uur=l(),E6=a("p"),bur=o("This class cannot be instantiated directly using "),bue=a("code"),vur=o("__init__()"),Tur=o(" (throws an error)."),Fur=l(),vt=a("div"),f(y6.$$.fragment),Cur=l(),vue=a("p"),Mur=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Eur=l(),Ic=a("p"),yur=o(`Note:
Loading a model from its configuration file does `),Tue=a("strong"),wur=o("not"),Aur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fue=a("code"),Lur=o("from_pretrained()"),Bur=o("to load the model weights."),xur=l(),Cue=a("p"),kur=o("Examples:"),Rur=l(),f(w6.$$.fragment),Sur=l(),Eo=a("div"),f(A6.$$.fragment),Pur=l(),Mue=a("p"),$ur=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Iur=l(),Fn=a("p"),Dur=o("The model class to instantiate is selected based on the "),Eue=a("code"),jur=o("model_type"),Nur=o(` property of the config object (either
passed as an argument or loaded from `),yue=a("code"),qur=o("pretrained_model_name_or_path"),Gur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wue=a("code"),Our=o("pretrained_model_name_or_path"),Xur=o(":"),Vur=l(),Aue=a("ul"),yF=a("li"),Lue=a("strong"),zur=o("vision-encoder-decoder"),Wur=o(" \u2014 "),QO=a("a"),Qur=o("TFVisionEncoderDecoderModel"),Hur=o(" (Vision Encoder decoder model)"),Uur=l(),Bue=a("p"),Jur=o("Examples:"),Yur=l(),f(L6.$$.fragment),sxe=l(),Dc=a("h2"),wF=a("a"),xue=a("span"),f(B6.$$.fragment),Kur=l(),kue=a("span"),Zur=o("TFAutoModelForSpeechSeq2Seq"),lxe=l(),Ar=a("div"),f(x6.$$.fragment),e1r=l(),jc=a("p"),o1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Rue=a("code"),r1r=o("from_pretrained()"),t1r=o("class method or the "),Sue=a("code"),a1r=o("from_config()"),n1r=o(`class
method.`),s1r=l(),k6=a("p"),l1r=o("This class cannot be instantiated directly using "),Pue=a("code"),i1r=o("__init__()"),d1r=o(" (throws an error)."),c1r=l(),Tt=a("div"),f(R6.$$.fragment),f1r=l(),$ue=a("p"),m1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),g1r=l(),Nc=a("p"),h1r=o(`Note:
Loading a model from its configuration file does `),Iue=a("strong"),p1r=o("not"),_1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Due=a("code"),u1r=o("from_pretrained()"),b1r=o("to load the model weights."),v1r=l(),jue=a("p"),T1r=o("Examples:"),F1r=l(),f(S6.$$.fragment),C1r=l(),yo=a("div"),f(P6.$$.fragment),M1r=l(),Nue=a("p"),E1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),y1r=l(),Cn=a("p"),w1r=o("The model class to instantiate is selected based on the "),que=a("code"),A1r=o("model_type"),L1r=o(` property of the config object (either
passed as an argument or loaded from `),Gue=a("code"),B1r=o("pretrained_model_name_or_path"),x1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=a("code"),k1r=o("pretrained_model_name_or_path"),R1r=o(":"),S1r=l(),Xue=a("ul"),AF=a("li"),Vue=a("strong"),P1r=o("speech_to_text"),$1r=o(" \u2014 "),HO=a("a"),I1r=o("TFSpeech2TextForConditionalGeneration"),D1r=o(" (Speech2Text model)"),j1r=l(),zue=a("p"),N1r=o("Examples:"),q1r=l(),f($6.$$.fragment),ixe=l(),qc=a("h2"),LF=a("a"),Wue=a("span"),f(I6.$$.fragment),G1r=l(),Que=a("span"),O1r=o("FlaxAutoModel"),dxe=l(),Lr=a("div"),f(D6.$$.fragment),X1r=l(),Gc=a("p"),V1r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Hue=a("code"),z1r=o("from_pretrained()"),W1r=o("class method or the "),Uue=a("code"),Q1r=o("from_config()"),H1r=o(`class
method.`),U1r=l(),j6=a("p"),J1r=o("This class cannot be instantiated directly using "),Jue=a("code"),Y1r=o("__init__()"),K1r=o(" (throws an error)."),Z1r=l(),Ft=a("div"),f(N6.$$.fragment),e7r=l(),Yue=a("p"),o7r=o("Instantiates one of the base model classes of the library from a configuration."),r7r=l(),Oc=a("p"),t7r=o(`Note:
Loading a model from its configuration file does `),Kue=a("strong"),a7r=o("not"),n7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zue=a("code"),s7r=o("from_pretrained()"),l7r=o("to load the model weights."),i7r=l(),e1e=a("p"),d7r=o("Examples:"),c7r=l(),f(q6.$$.fragment),f7r=l(),wo=a("div"),f(G6.$$.fragment),m7r=l(),o1e=a("p"),g7r=o("Instantiate one of the base model classes of the library from a pretrained model."),h7r=l(),Mn=a("p"),p7r=o("The model class to instantiate is selected based on the "),r1e=a("code"),_7r=o("model_type"),u7r=o(` property of the config object (either
passed as an argument or loaded from `),t1e=a("code"),b7r=o("pretrained_model_name_or_path"),v7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=a("code"),T7r=o("pretrained_model_name_or_path"),F7r=o(":"),C7r=l(),z=a("ul"),BF=a("li"),n1e=a("strong"),M7r=o("albert"),E7r=o(" \u2014 "),UO=a("a"),y7r=o("FlaxAlbertModel"),w7r=o(" (ALBERT model)"),A7r=l(),xF=a("li"),s1e=a("strong"),L7r=o("bart"),B7r=o(" \u2014 "),JO=a("a"),x7r=o("FlaxBartModel"),k7r=o(" (BART model)"),R7r=l(),kF=a("li"),l1e=a("strong"),S7r=o("beit"),P7r=o(" \u2014 "),YO=a("a"),$7r=o("FlaxBeitModel"),I7r=o(" (BEiT model)"),D7r=l(),RF=a("li"),i1e=a("strong"),j7r=o("bert"),N7r=o(" \u2014 "),KO=a("a"),q7r=o("FlaxBertModel"),G7r=o(" (BERT model)"),O7r=l(),SF=a("li"),d1e=a("strong"),X7r=o("big_bird"),V7r=o(" \u2014 "),ZO=a("a"),z7r=o("FlaxBigBirdModel"),W7r=o(" (BigBird model)"),Q7r=l(),PF=a("li"),c1e=a("strong"),H7r=o("blenderbot"),U7r=o(" \u2014 "),eX=a("a"),J7r=o("FlaxBlenderbotModel"),Y7r=o(" (Blenderbot model)"),K7r=l(),$F=a("li"),f1e=a("strong"),Z7r=o("blenderbot-small"),ebr=o(" \u2014 "),oX=a("a"),obr=o("FlaxBlenderbotSmallModel"),rbr=o(" (BlenderbotSmall model)"),tbr=l(),IF=a("li"),m1e=a("strong"),abr=o("clip"),nbr=o(" \u2014 "),rX=a("a"),sbr=o("FlaxCLIPModel"),lbr=o(" (CLIP model)"),ibr=l(),DF=a("li"),g1e=a("strong"),dbr=o("distilbert"),cbr=o(" \u2014 "),tX=a("a"),fbr=o("FlaxDistilBertModel"),mbr=o(" (DistilBERT model)"),gbr=l(),jF=a("li"),h1e=a("strong"),hbr=o("electra"),pbr=o(" \u2014 "),aX=a("a"),_br=o("FlaxElectraModel"),ubr=o(" (ELECTRA model)"),bbr=l(),NF=a("li"),p1e=a("strong"),vbr=o("gpt2"),Tbr=o(" \u2014 "),nX=a("a"),Fbr=o("FlaxGPT2Model"),Cbr=o(" (OpenAI GPT-2 model)"),Mbr=l(),qF=a("li"),_1e=a("strong"),Ebr=o("gpt_neo"),ybr=o(" \u2014 "),sX=a("a"),wbr=o("FlaxGPTNeoModel"),Abr=o(" (GPT Neo model)"),Lbr=l(),GF=a("li"),u1e=a("strong"),Bbr=o("gptj"),xbr=o(" \u2014 "),lX=a("a"),kbr=o("FlaxGPTJModel"),Rbr=o(" (GPT-J model)"),Sbr=l(),OF=a("li"),b1e=a("strong"),Pbr=o("marian"),$br=o(" \u2014 "),iX=a("a"),Ibr=o("FlaxMarianModel"),Dbr=o(" (Marian model)"),jbr=l(),XF=a("li"),v1e=a("strong"),Nbr=o("mbart"),qbr=o(" \u2014 "),dX=a("a"),Gbr=o("FlaxMBartModel"),Obr=o(" (mBART model)"),Xbr=l(),VF=a("li"),T1e=a("strong"),Vbr=o("mt5"),zbr=o(" \u2014 "),cX=a("a"),Wbr=o("FlaxMT5Model"),Qbr=o(" (mT5 model)"),Hbr=l(),zF=a("li"),F1e=a("strong"),Ubr=o("pegasus"),Jbr=o(" \u2014 "),fX=a("a"),Ybr=o("FlaxPegasusModel"),Kbr=o(" (Pegasus model)"),Zbr=l(),WF=a("li"),C1e=a("strong"),e5r=o("roberta"),o5r=o(" \u2014 "),mX=a("a"),r5r=o("FlaxRobertaModel"),t5r=o(" (RoBERTa model)"),a5r=l(),QF=a("li"),M1e=a("strong"),n5r=o("roformer"),s5r=o(" \u2014 "),gX=a("a"),l5r=o("FlaxRoFormerModel"),i5r=o(" (RoFormer model)"),d5r=l(),HF=a("li"),E1e=a("strong"),c5r=o("t5"),f5r=o(" \u2014 "),hX=a("a"),m5r=o("FlaxT5Model"),g5r=o(" (T5 model)"),h5r=l(),UF=a("li"),y1e=a("strong"),p5r=o("vision-text-dual-encoder"),_5r=o(" \u2014 "),pX=a("a"),u5r=o("FlaxVisionTextDualEncoderModel"),b5r=o(" (VisionTextDualEncoder model)"),v5r=l(),JF=a("li"),w1e=a("strong"),T5r=o("vit"),F5r=o(" \u2014 "),_X=a("a"),C5r=o("FlaxViTModel"),M5r=o(" (ViT model)"),E5r=l(),YF=a("li"),A1e=a("strong"),y5r=o("wav2vec2"),w5r=o(" \u2014 "),uX=a("a"),A5r=o("FlaxWav2Vec2Model"),L5r=o(" (Wav2Vec2 model)"),B5r=l(),KF=a("li"),L1e=a("strong"),x5r=o("xglm"),k5r=o(" \u2014 "),bX=a("a"),R5r=o("FlaxXGLMModel"),S5r=o(" (XGLM model)"),P5r=l(),B1e=a("p"),$5r=o("Examples:"),I5r=l(),f(O6.$$.fragment),cxe=l(),Xc=a("h2"),ZF=a("a"),x1e=a("span"),f(X6.$$.fragment),D5r=l(),k1e=a("span"),j5r=o("FlaxAutoModelForCausalLM"),fxe=l(),Br=a("div"),f(V6.$$.fragment),N5r=l(),Vc=a("p"),q5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),R1e=a("code"),G5r=o("from_pretrained()"),O5r=o("class method or the "),S1e=a("code"),X5r=o("from_config()"),V5r=o(`class
method.`),z5r=l(),z6=a("p"),W5r=o("This class cannot be instantiated directly using "),P1e=a("code"),Q5r=o("__init__()"),H5r=o(" (throws an error)."),U5r=l(),Ct=a("div"),f(W6.$$.fragment),J5r=l(),$1e=a("p"),Y5r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),K5r=l(),zc=a("p"),Z5r=o(`Note:
Loading a model from its configuration file does `),I1e=a("strong"),e2r=o("not"),o2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),D1e=a("code"),r2r=o("from_pretrained()"),t2r=o("to load the model weights."),a2r=l(),j1e=a("p"),n2r=o("Examples:"),s2r=l(),f(Q6.$$.fragment),l2r=l(),Ao=a("div"),f(H6.$$.fragment),i2r=l(),N1e=a("p"),d2r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),c2r=l(),En=a("p"),f2r=o("The model class to instantiate is selected based on the "),q1e=a("code"),m2r=o("model_type"),g2r=o(` property of the config object (either
passed as an argument or loaded from `),G1e=a("code"),h2r=o("pretrained_model_name_or_path"),p2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=a("code"),_2r=o("pretrained_model_name_or_path"),u2r=o(":"),b2r=l(),yn=a("ul"),eC=a("li"),X1e=a("strong"),v2r=o("gpt2"),T2r=o(" \u2014 "),vX=a("a"),F2r=o("FlaxGPT2LMHeadModel"),C2r=o(" (OpenAI GPT-2 model)"),M2r=l(),oC=a("li"),V1e=a("strong"),E2r=o("gpt_neo"),y2r=o(" \u2014 "),TX=a("a"),w2r=o("FlaxGPTNeoForCausalLM"),A2r=o(" (GPT Neo model)"),L2r=l(),rC=a("li"),z1e=a("strong"),B2r=o("gptj"),x2r=o(" \u2014 "),FX=a("a"),k2r=o("FlaxGPTJForCausalLM"),R2r=o(" (GPT-J model)"),S2r=l(),tC=a("li"),W1e=a("strong"),P2r=o("xglm"),$2r=o(" \u2014 "),CX=a("a"),I2r=o("FlaxXGLMForCausalLM"),D2r=o(" (XGLM model)"),j2r=l(),Q1e=a("p"),N2r=o("Examples:"),q2r=l(),f(U6.$$.fragment),mxe=l(),Wc=a("h2"),aC=a("a"),H1e=a("span"),f(J6.$$.fragment),G2r=l(),U1e=a("span"),O2r=o("FlaxAutoModelForPreTraining"),gxe=l(),xr=a("div"),f(Y6.$$.fragment),X2r=l(),Qc=a("p"),V2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),J1e=a("code"),z2r=o("from_pretrained()"),W2r=o("class method or the "),Y1e=a("code"),Q2r=o("from_config()"),H2r=o(`class
method.`),U2r=l(),K6=a("p"),J2r=o("This class cannot be instantiated directly using "),K1e=a("code"),Y2r=o("__init__()"),K2r=o(" (throws an error)."),Z2r=l(),Mt=a("div"),f(Z6.$$.fragment),evr=l(),Z1e=a("p"),ovr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rvr=l(),Hc=a("p"),tvr=o(`Note:
Loading a model from its configuration file does `),e7e=a("strong"),avr=o("not"),nvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),o7e=a("code"),svr=o("from_pretrained()"),lvr=o("to load the model weights."),ivr=l(),r7e=a("p"),dvr=o("Examples:"),cvr=l(),f(eA.$$.fragment),fvr=l(),Lo=a("div"),f(oA.$$.fragment),mvr=l(),t7e=a("p"),gvr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hvr=l(),wn=a("p"),pvr=o("The model class to instantiate is selected based on the "),a7e=a("code"),_vr=o("model_type"),uvr=o(` property of the config object (either
passed as an argument or loaded from `),n7e=a("code"),bvr=o("pretrained_model_name_or_path"),vvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=a("code"),Tvr=o("pretrained_model_name_or_path"),Fvr=o(":"),Cvr=l(),fe=a("ul"),nC=a("li"),l7e=a("strong"),Mvr=o("albert"),Evr=o(" \u2014 "),MX=a("a"),yvr=o("FlaxAlbertForPreTraining"),wvr=o(" (ALBERT model)"),Avr=l(),sC=a("li"),i7e=a("strong"),Lvr=o("bart"),Bvr=o(" \u2014 "),EX=a("a"),xvr=o("FlaxBartForConditionalGeneration"),kvr=o(" (BART model)"),Rvr=l(),lC=a("li"),d7e=a("strong"),Svr=o("bert"),Pvr=o(" \u2014 "),yX=a("a"),$vr=o("FlaxBertForPreTraining"),Ivr=o(" (BERT model)"),Dvr=l(),iC=a("li"),c7e=a("strong"),jvr=o("big_bird"),Nvr=o(" \u2014 "),wX=a("a"),qvr=o("FlaxBigBirdForPreTraining"),Gvr=o(" (BigBird model)"),Ovr=l(),dC=a("li"),f7e=a("strong"),Xvr=o("electra"),Vvr=o(" \u2014 "),AX=a("a"),zvr=o("FlaxElectraForPreTraining"),Wvr=o(" (ELECTRA model)"),Qvr=l(),cC=a("li"),m7e=a("strong"),Hvr=o("mbart"),Uvr=o(" \u2014 "),LX=a("a"),Jvr=o("FlaxMBartForConditionalGeneration"),Yvr=o(" (mBART model)"),Kvr=l(),fC=a("li"),g7e=a("strong"),Zvr=o("mt5"),e0r=o(" \u2014 "),BX=a("a"),o0r=o("FlaxMT5ForConditionalGeneration"),r0r=o(" (mT5 model)"),t0r=l(),mC=a("li"),h7e=a("strong"),a0r=o("roberta"),n0r=o(" \u2014 "),xX=a("a"),s0r=o("FlaxRobertaForMaskedLM"),l0r=o(" (RoBERTa model)"),i0r=l(),gC=a("li"),p7e=a("strong"),d0r=o("roformer"),c0r=o(" \u2014 "),kX=a("a"),f0r=o("FlaxRoFormerForMaskedLM"),m0r=o(" (RoFormer model)"),g0r=l(),hC=a("li"),_7e=a("strong"),h0r=o("t5"),p0r=o(" \u2014 "),RX=a("a"),_0r=o("FlaxT5ForConditionalGeneration"),u0r=o(" (T5 model)"),b0r=l(),pC=a("li"),u7e=a("strong"),v0r=o("wav2vec2"),T0r=o(" \u2014 "),SX=a("a"),F0r=o("FlaxWav2Vec2ForPreTraining"),C0r=o(" (Wav2Vec2 model)"),M0r=l(),b7e=a("p"),E0r=o("Examples:"),y0r=l(),f(rA.$$.fragment),hxe=l(),Uc=a("h2"),_C=a("a"),v7e=a("span"),f(tA.$$.fragment),w0r=l(),T7e=a("span"),A0r=o("FlaxAutoModelForMaskedLM"),pxe=l(),kr=a("div"),f(aA.$$.fragment),L0r=l(),Jc=a("p"),B0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),F7e=a("code"),x0r=o("from_pretrained()"),k0r=o("class method or the "),C7e=a("code"),R0r=o("from_config()"),S0r=o(`class
method.`),P0r=l(),nA=a("p"),$0r=o("This class cannot be instantiated directly using "),M7e=a("code"),I0r=o("__init__()"),D0r=o(" (throws an error)."),j0r=l(),Et=a("div"),f(sA.$$.fragment),N0r=l(),E7e=a("p"),q0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),G0r=l(),Yc=a("p"),O0r=o(`Note:
Loading a model from its configuration file does `),y7e=a("strong"),X0r=o("not"),V0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),w7e=a("code"),z0r=o("from_pretrained()"),W0r=o("to load the model weights."),Q0r=l(),A7e=a("p"),H0r=o("Examples:"),U0r=l(),f(lA.$$.fragment),J0r=l(),Bo=a("div"),f(iA.$$.fragment),Y0r=l(),L7e=a("p"),K0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Z0r=l(),An=a("p"),eTr=o("The model class to instantiate is selected based on the "),B7e=a("code"),oTr=o("model_type"),rTr=o(` property of the config object (either
passed as an argument or loaded from `),x7e=a("code"),tTr=o("pretrained_model_name_or_path"),aTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k7e=a("code"),nTr=o("pretrained_model_name_or_path"),sTr=o(":"),lTr=l(),ve=a("ul"),uC=a("li"),R7e=a("strong"),iTr=o("albert"),dTr=o(" \u2014 "),PX=a("a"),cTr=o("FlaxAlbertForMaskedLM"),fTr=o(" (ALBERT model)"),mTr=l(),bC=a("li"),S7e=a("strong"),gTr=o("bart"),hTr=o(" \u2014 "),$X=a("a"),pTr=o("FlaxBartForConditionalGeneration"),_Tr=o(" (BART model)"),uTr=l(),vC=a("li"),P7e=a("strong"),bTr=o("bert"),vTr=o(" \u2014 "),IX=a("a"),TTr=o("FlaxBertForMaskedLM"),FTr=o(" (BERT model)"),CTr=l(),TC=a("li"),$7e=a("strong"),MTr=o("big_bird"),ETr=o(" \u2014 "),DX=a("a"),yTr=o("FlaxBigBirdForMaskedLM"),wTr=o(" (BigBird model)"),ATr=l(),FC=a("li"),I7e=a("strong"),LTr=o("distilbert"),BTr=o(" \u2014 "),jX=a("a"),xTr=o("FlaxDistilBertForMaskedLM"),kTr=o(" (DistilBERT model)"),RTr=l(),CC=a("li"),D7e=a("strong"),STr=o("electra"),PTr=o(" \u2014 "),NX=a("a"),$Tr=o("FlaxElectraForMaskedLM"),ITr=o(" (ELECTRA model)"),DTr=l(),MC=a("li"),j7e=a("strong"),jTr=o("mbart"),NTr=o(" \u2014 "),qX=a("a"),qTr=o("FlaxMBartForConditionalGeneration"),GTr=o(" (mBART model)"),OTr=l(),EC=a("li"),N7e=a("strong"),XTr=o("roberta"),VTr=o(" \u2014 "),GX=a("a"),zTr=o("FlaxRobertaForMaskedLM"),WTr=o(" (RoBERTa model)"),QTr=l(),yC=a("li"),q7e=a("strong"),HTr=o("roformer"),UTr=o(" \u2014 "),OX=a("a"),JTr=o("FlaxRoFormerForMaskedLM"),YTr=o(" (RoFormer model)"),KTr=l(),G7e=a("p"),ZTr=o("Examples:"),eFr=l(),f(dA.$$.fragment),_xe=l(),Kc=a("h2"),wC=a("a"),O7e=a("span"),f(cA.$$.fragment),oFr=l(),X7e=a("span"),rFr=o("FlaxAutoModelForSeq2SeqLM"),uxe=l(),Rr=a("div"),f(fA.$$.fragment),tFr=l(),Zc=a("p"),aFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),V7e=a("code"),nFr=o("from_pretrained()"),sFr=o("class method or the "),z7e=a("code"),lFr=o("from_config()"),iFr=o(`class
method.`),dFr=l(),mA=a("p"),cFr=o("This class cannot be instantiated directly using "),W7e=a("code"),fFr=o("__init__()"),mFr=o(" (throws an error)."),gFr=l(),yt=a("div"),f(gA.$$.fragment),hFr=l(),Q7e=a("p"),pFr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_Fr=l(),ef=a("p"),uFr=o(`Note:
Loading a model from its configuration file does `),H7e=a("strong"),bFr=o("not"),vFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),U7e=a("code"),TFr=o("from_pretrained()"),FFr=o("to load the model weights."),CFr=l(),J7e=a("p"),MFr=o("Examples:"),EFr=l(),f(hA.$$.fragment),yFr=l(),xo=a("div"),f(pA.$$.fragment),wFr=l(),Y7e=a("p"),AFr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),LFr=l(),Ln=a("p"),BFr=o("The model class to instantiate is selected based on the "),K7e=a("code"),xFr=o("model_type"),kFr=o(` property of the config object (either
passed as an argument or loaded from `),Z7e=a("code"),RFr=o("pretrained_model_name_or_path"),SFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=a("code"),PFr=o("pretrained_model_name_or_path"),$Fr=o(":"),IFr=l(),Te=a("ul"),AC=a("li"),obe=a("strong"),DFr=o("bart"),jFr=o(" \u2014 "),XX=a("a"),NFr=o("FlaxBartForConditionalGeneration"),qFr=o(" (BART model)"),GFr=l(),LC=a("li"),rbe=a("strong"),OFr=o("blenderbot"),XFr=o(" \u2014 "),VX=a("a"),VFr=o("FlaxBlenderbotForConditionalGeneration"),zFr=o(" (Blenderbot model)"),WFr=l(),BC=a("li"),tbe=a("strong"),QFr=o("blenderbot-small"),HFr=o(" \u2014 "),zX=a("a"),UFr=o("FlaxBlenderbotSmallForConditionalGeneration"),JFr=o(" (BlenderbotSmall model)"),YFr=l(),xC=a("li"),abe=a("strong"),KFr=o("encoder-decoder"),ZFr=o(" \u2014 "),WX=a("a"),eCr=o("FlaxEncoderDecoderModel"),oCr=o(" (Encoder decoder model)"),rCr=l(),kC=a("li"),nbe=a("strong"),tCr=o("marian"),aCr=o(" \u2014 "),QX=a("a"),nCr=o("FlaxMarianMTModel"),sCr=o(" (Marian model)"),lCr=l(),RC=a("li"),sbe=a("strong"),iCr=o("mbart"),dCr=o(" \u2014 "),HX=a("a"),cCr=o("FlaxMBartForConditionalGeneration"),fCr=o(" (mBART model)"),mCr=l(),SC=a("li"),lbe=a("strong"),gCr=o("mt5"),hCr=o(" \u2014 "),UX=a("a"),pCr=o("FlaxMT5ForConditionalGeneration"),_Cr=o(" (mT5 model)"),uCr=l(),PC=a("li"),ibe=a("strong"),bCr=o("pegasus"),vCr=o(" \u2014 "),JX=a("a"),TCr=o("FlaxPegasusForConditionalGeneration"),FCr=o(" (Pegasus model)"),CCr=l(),$C=a("li"),dbe=a("strong"),MCr=o("t5"),ECr=o(" \u2014 "),YX=a("a"),yCr=o("FlaxT5ForConditionalGeneration"),wCr=o(" (T5 model)"),ACr=l(),cbe=a("p"),LCr=o("Examples:"),BCr=l(),f(_A.$$.fragment),bxe=l(),of=a("h2"),IC=a("a"),fbe=a("span"),f(uA.$$.fragment),xCr=l(),mbe=a("span"),kCr=o("FlaxAutoModelForSequenceClassification"),vxe=l(),Sr=a("div"),f(bA.$$.fragment),RCr=l(),rf=a("p"),SCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gbe=a("code"),PCr=o("from_pretrained()"),$Cr=o("class method or the "),hbe=a("code"),ICr=o("from_config()"),DCr=o(`class
method.`),jCr=l(),vA=a("p"),NCr=o("This class cannot be instantiated directly using "),pbe=a("code"),qCr=o("__init__()"),GCr=o(" (throws an error)."),OCr=l(),wt=a("div"),f(TA.$$.fragment),XCr=l(),_be=a("p"),VCr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zCr=l(),tf=a("p"),WCr=o(`Note:
Loading a model from its configuration file does `),ube=a("strong"),QCr=o("not"),HCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bbe=a("code"),UCr=o("from_pretrained()"),JCr=o("to load the model weights."),YCr=l(),vbe=a("p"),KCr=o("Examples:"),ZCr=l(),f(FA.$$.fragment),e4r=l(),ko=a("div"),f(CA.$$.fragment),o4r=l(),Tbe=a("p"),r4r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),t4r=l(),Bn=a("p"),a4r=o("The model class to instantiate is selected based on the "),Fbe=a("code"),n4r=o("model_type"),s4r=o(` property of the config object (either
passed as an argument or loaded from `),Cbe=a("code"),l4r=o("pretrained_model_name_or_path"),i4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=a("code"),d4r=o("pretrained_model_name_or_path"),c4r=o(":"),f4r=l(),Fe=a("ul"),DC=a("li"),Ebe=a("strong"),m4r=o("albert"),g4r=o(" \u2014 "),KX=a("a"),h4r=o("FlaxAlbertForSequenceClassification"),p4r=o(" (ALBERT model)"),_4r=l(),jC=a("li"),ybe=a("strong"),u4r=o("bart"),b4r=o(" \u2014 "),ZX=a("a"),v4r=o("FlaxBartForSequenceClassification"),T4r=o(" (BART model)"),F4r=l(),NC=a("li"),wbe=a("strong"),C4r=o("bert"),M4r=o(" \u2014 "),eV=a("a"),E4r=o("FlaxBertForSequenceClassification"),y4r=o(" (BERT model)"),w4r=l(),qC=a("li"),Abe=a("strong"),A4r=o("big_bird"),L4r=o(" \u2014 "),oV=a("a"),B4r=o("FlaxBigBirdForSequenceClassification"),x4r=o(" (BigBird model)"),k4r=l(),GC=a("li"),Lbe=a("strong"),R4r=o("distilbert"),S4r=o(" \u2014 "),rV=a("a"),P4r=o("FlaxDistilBertForSequenceClassification"),$4r=o(" (DistilBERT model)"),I4r=l(),OC=a("li"),Bbe=a("strong"),D4r=o("electra"),j4r=o(" \u2014 "),tV=a("a"),N4r=o("FlaxElectraForSequenceClassification"),q4r=o(" (ELECTRA model)"),G4r=l(),XC=a("li"),xbe=a("strong"),O4r=o("mbart"),X4r=o(" \u2014 "),aV=a("a"),V4r=o("FlaxMBartForSequenceClassification"),z4r=o(" (mBART model)"),W4r=l(),VC=a("li"),kbe=a("strong"),Q4r=o("roberta"),H4r=o(" \u2014 "),nV=a("a"),U4r=o("FlaxRobertaForSequenceClassification"),J4r=o(" (RoBERTa model)"),Y4r=l(),zC=a("li"),Rbe=a("strong"),K4r=o("roformer"),Z4r=o(" \u2014 "),sV=a("a"),eMr=o("FlaxRoFormerForSequenceClassification"),oMr=o(" (RoFormer model)"),rMr=l(),Sbe=a("p"),tMr=o("Examples:"),aMr=l(),f(MA.$$.fragment),Txe=l(),af=a("h2"),WC=a("a"),Pbe=a("span"),f(EA.$$.fragment),nMr=l(),$be=a("span"),sMr=o("FlaxAutoModelForQuestionAnswering"),Fxe=l(),Pr=a("div"),f(yA.$$.fragment),lMr=l(),nf=a("p"),iMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ibe=a("code"),dMr=o("from_pretrained()"),cMr=o("class method or the "),Dbe=a("code"),fMr=o("from_config()"),mMr=o(`class
method.`),gMr=l(),wA=a("p"),hMr=o("This class cannot be instantiated directly using "),jbe=a("code"),pMr=o("__init__()"),_Mr=o(" (throws an error)."),uMr=l(),At=a("div"),f(AA.$$.fragment),bMr=l(),Nbe=a("p"),vMr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TMr=l(),sf=a("p"),FMr=o(`Note:
Loading a model from its configuration file does `),qbe=a("strong"),CMr=o("not"),MMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gbe=a("code"),EMr=o("from_pretrained()"),yMr=o("to load the model weights."),wMr=l(),Obe=a("p"),AMr=o("Examples:"),LMr=l(),f(LA.$$.fragment),BMr=l(),Ro=a("div"),f(BA.$$.fragment),xMr=l(),Xbe=a("p"),kMr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),RMr=l(),xn=a("p"),SMr=o("The model class to instantiate is selected based on the "),Vbe=a("code"),PMr=o("model_type"),$Mr=o(` property of the config object (either
passed as an argument or loaded from `),zbe=a("code"),IMr=o("pretrained_model_name_or_path"),DMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=a("code"),jMr=o("pretrained_model_name_or_path"),NMr=o(":"),qMr=l(),Ce=a("ul"),QC=a("li"),Qbe=a("strong"),GMr=o("albert"),OMr=o(" \u2014 "),lV=a("a"),XMr=o("FlaxAlbertForQuestionAnswering"),VMr=o(" (ALBERT model)"),zMr=l(),HC=a("li"),Hbe=a("strong"),WMr=o("bart"),QMr=o(" \u2014 "),iV=a("a"),HMr=o("FlaxBartForQuestionAnswering"),UMr=o(" (BART model)"),JMr=l(),UC=a("li"),Ube=a("strong"),YMr=o("bert"),KMr=o(" \u2014 "),dV=a("a"),ZMr=o("FlaxBertForQuestionAnswering"),eEr=o(" (BERT model)"),oEr=l(),JC=a("li"),Jbe=a("strong"),rEr=o("big_bird"),tEr=o(" \u2014 "),cV=a("a"),aEr=o("FlaxBigBirdForQuestionAnswering"),nEr=o(" (BigBird model)"),sEr=l(),YC=a("li"),Ybe=a("strong"),lEr=o("distilbert"),iEr=o(" \u2014 "),fV=a("a"),dEr=o("FlaxDistilBertForQuestionAnswering"),cEr=o(" (DistilBERT model)"),fEr=l(),KC=a("li"),Kbe=a("strong"),mEr=o("electra"),gEr=o(" \u2014 "),mV=a("a"),hEr=o("FlaxElectraForQuestionAnswering"),pEr=o(" (ELECTRA model)"),_Er=l(),ZC=a("li"),Zbe=a("strong"),uEr=o("mbart"),bEr=o(" \u2014 "),gV=a("a"),vEr=o("FlaxMBartForQuestionAnswering"),TEr=o(" (mBART model)"),FEr=l(),e4=a("li"),e5e=a("strong"),CEr=o("roberta"),MEr=o(" \u2014 "),hV=a("a"),EEr=o("FlaxRobertaForQuestionAnswering"),yEr=o(" (RoBERTa model)"),wEr=l(),o4=a("li"),o5e=a("strong"),AEr=o("roformer"),LEr=o(" \u2014 "),pV=a("a"),BEr=o("FlaxRoFormerForQuestionAnswering"),xEr=o(" (RoFormer model)"),kEr=l(),r5e=a("p"),REr=o("Examples:"),SEr=l(),f(xA.$$.fragment),Cxe=l(),lf=a("h2"),r4=a("a"),t5e=a("span"),f(kA.$$.fragment),PEr=l(),a5e=a("span"),$Er=o("FlaxAutoModelForTokenClassification"),Mxe=l(),$r=a("div"),f(RA.$$.fragment),IEr=l(),df=a("p"),DEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),n5e=a("code"),jEr=o("from_pretrained()"),NEr=o("class method or the "),s5e=a("code"),qEr=o("from_config()"),GEr=o(`class
method.`),OEr=l(),SA=a("p"),XEr=o("This class cannot be instantiated directly using "),l5e=a("code"),VEr=o("__init__()"),zEr=o(" (throws an error)."),WEr=l(),Lt=a("div"),f(PA.$$.fragment),QEr=l(),i5e=a("p"),HEr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UEr=l(),cf=a("p"),JEr=o(`Note:
Loading a model from its configuration file does `),d5e=a("strong"),YEr=o("not"),KEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),c5e=a("code"),ZEr=o("from_pretrained()"),e3r=o("to load the model weights."),o3r=l(),f5e=a("p"),r3r=o("Examples:"),t3r=l(),f($A.$$.fragment),a3r=l(),So=a("div"),f(IA.$$.fragment),n3r=l(),m5e=a("p"),s3r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),l3r=l(),kn=a("p"),i3r=o("The model class to instantiate is selected based on the "),g5e=a("code"),d3r=o("model_type"),c3r=o(` property of the config object (either
passed as an argument or loaded from `),h5e=a("code"),f3r=o("pretrained_model_name_or_path"),m3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=a("code"),g3r=o("pretrained_model_name_or_path"),h3r=o(":"),p3r=l(),so=a("ul"),t4=a("li"),_5e=a("strong"),_3r=o("albert"),u3r=o(" \u2014 "),_V=a("a"),b3r=o("FlaxAlbertForTokenClassification"),v3r=o(" (ALBERT model)"),T3r=l(),a4=a("li"),u5e=a("strong"),F3r=o("bert"),C3r=o(" \u2014 "),uV=a("a"),M3r=o("FlaxBertForTokenClassification"),E3r=o(" (BERT model)"),y3r=l(),n4=a("li"),b5e=a("strong"),w3r=o("big_bird"),A3r=o(" \u2014 "),bV=a("a"),L3r=o("FlaxBigBirdForTokenClassification"),B3r=o(" (BigBird model)"),x3r=l(),s4=a("li"),v5e=a("strong"),k3r=o("distilbert"),R3r=o(" \u2014 "),vV=a("a"),S3r=o("FlaxDistilBertForTokenClassification"),P3r=o(" (DistilBERT model)"),$3r=l(),l4=a("li"),T5e=a("strong"),I3r=o("electra"),D3r=o(" \u2014 "),TV=a("a"),j3r=o("FlaxElectraForTokenClassification"),N3r=o(" (ELECTRA model)"),q3r=l(),i4=a("li"),F5e=a("strong"),G3r=o("roberta"),O3r=o(" \u2014 "),FV=a("a"),X3r=o("FlaxRobertaForTokenClassification"),V3r=o(" (RoBERTa model)"),z3r=l(),d4=a("li"),C5e=a("strong"),W3r=o("roformer"),Q3r=o(" \u2014 "),CV=a("a"),H3r=o("FlaxRoFormerForTokenClassification"),U3r=o(" (RoFormer model)"),J3r=l(),M5e=a("p"),Y3r=o("Examples:"),K3r=l(),f(DA.$$.fragment),Exe=l(),ff=a("h2"),c4=a("a"),E5e=a("span"),f(jA.$$.fragment),Z3r=l(),y5e=a("span"),eyr=o("FlaxAutoModelForMultipleChoice"),yxe=l(),Ir=a("div"),f(NA.$$.fragment),oyr=l(),mf=a("p"),ryr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),w5e=a("code"),tyr=o("from_pretrained()"),ayr=o("class method or the "),A5e=a("code"),nyr=o("from_config()"),syr=o(`class
method.`),lyr=l(),qA=a("p"),iyr=o("This class cannot be instantiated directly using "),L5e=a("code"),dyr=o("__init__()"),cyr=o(" (throws an error)."),fyr=l(),Bt=a("div"),f(GA.$$.fragment),myr=l(),B5e=a("p"),gyr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hyr=l(),gf=a("p"),pyr=o(`Note:
Loading a model from its configuration file does `),x5e=a("strong"),_yr=o("not"),uyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),k5e=a("code"),byr=o("from_pretrained()"),vyr=o("to load the model weights."),Tyr=l(),R5e=a("p"),Fyr=o("Examples:"),Cyr=l(),f(OA.$$.fragment),Myr=l(),Po=a("div"),f(XA.$$.fragment),Eyr=l(),S5e=a("p"),yyr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wyr=l(),Rn=a("p"),Ayr=o("The model class to instantiate is selected based on the "),P5e=a("code"),Lyr=o("model_type"),Byr=o(` property of the config object (either
passed as an argument or loaded from `),$5e=a("code"),xyr=o("pretrained_model_name_or_path"),kyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I5e=a("code"),Ryr=o("pretrained_model_name_or_path"),Syr=o(":"),Pyr=l(),lo=a("ul"),f4=a("li"),D5e=a("strong"),$yr=o("albert"),Iyr=o(" \u2014 "),MV=a("a"),Dyr=o("FlaxAlbertForMultipleChoice"),jyr=o(" (ALBERT model)"),Nyr=l(),m4=a("li"),j5e=a("strong"),qyr=o("bert"),Gyr=o(" \u2014 "),EV=a("a"),Oyr=o("FlaxBertForMultipleChoice"),Xyr=o(" (BERT model)"),Vyr=l(),g4=a("li"),N5e=a("strong"),zyr=o("big_bird"),Wyr=o(" \u2014 "),yV=a("a"),Qyr=o("FlaxBigBirdForMultipleChoice"),Hyr=o(" (BigBird model)"),Uyr=l(),h4=a("li"),q5e=a("strong"),Jyr=o("distilbert"),Yyr=o(" \u2014 "),wV=a("a"),Kyr=o("FlaxDistilBertForMultipleChoice"),Zyr=o(" (DistilBERT model)"),ewr=l(),p4=a("li"),G5e=a("strong"),owr=o("electra"),rwr=o(" \u2014 "),AV=a("a"),twr=o("FlaxElectraForMultipleChoice"),awr=o(" (ELECTRA model)"),nwr=l(),_4=a("li"),O5e=a("strong"),swr=o("roberta"),lwr=o(" \u2014 "),LV=a("a"),iwr=o("FlaxRobertaForMultipleChoice"),dwr=o(" (RoBERTa model)"),cwr=l(),u4=a("li"),X5e=a("strong"),fwr=o("roformer"),mwr=o(" \u2014 "),BV=a("a"),gwr=o("FlaxRoFormerForMultipleChoice"),hwr=o(" (RoFormer model)"),pwr=l(),V5e=a("p"),_wr=o("Examples:"),uwr=l(),f(VA.$$.fragment),wxe=l(),hf=a("h2"),b4=a("a"),z5e=a("span"),f(zA.$$.fragment),bwr=l(),W5e=a("span"),vwr=o("FlaxAutoModelForNextSentencePrediction"),Axe=l(),Dr=a("div"),f(WA.$$.fragment),Twr=l(),pf=a("p"),Fwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Q5e=a("code"),Cwr=o("from_pretrained()"),Mwr=o("class method or the "),H5e=a("code"),Ewr=o("from_config()"),ywr=o(`class
method.`),wwr=l(),QA=a("p"),Awr=o("This class cannot be instantiated directly using "),U5e=a("code"),Lwr=o("__init__()"),Bwr=o(" (throws an error)."),xwr=l(),xt=a("div"),f(HA.$$.fragment),kwr=l(),J5e=a("p"),Rwr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Swr=l(),_f=a("p"),Pwr=o(`Note:
Loading a model from its configuration file does `),Y5e=a("strong"),$wr=o("not"),Iwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),K5e=a("code"),Dwr=o("from_pretrained()"),jwr=o("to load the model weights."),Nwr=l(),Z5e=a("p"),qwr=o("Examples:"),Gwr=l(),f(UA.$$.fragment),Owr=l(),$o=a("div"),f(JA.$$.fragment),Xwr=l(),e2e=a("p"),Vwr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zwr=l(),Sn=a("p"),Wwr=o("The model class to instantiate is selected based on the "),o2e=a("code"),Qwr=o("model_type"),Hwr=o(` property of the config object (either
passed as an argument or loaded from `),r2e=a("code"),Uwr=o("pretrained_model_name_or_path"),Jwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=a("code"),Ywr=o("pretrained_model_name_or_path"),Kwr=o(":"),Zwr=l(),a2e=a("ul"),v4=a("li"),n2e=a("strong"),e6r=o("bert"),o6r=o(" \u2014 "),xV=a("a"),r6r=o("FlaxBertForNextSentencePrediction"),t6r=o(" (BERT model)"),a6r=l(),s2e=a("p"),n6r=o("Examples:"),s6r=l(),f(YA.$$.fragment),Lxe=l(),uf=a("h2"),T4=a("a"),l2e=a("span"),f(KA.$$.fragment),l6r=l(),i2e=a("span"),i6r=o("FlaxAutoModelForImageClassification"),Bxe=l(),jr=a("div"),f(ZA.$$.fragment),d6r=l(),bf=a("p"),c6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),d2e=a("code"),f6r=o("from_pretrained()"),m6r=o("class method or the "),c2e=a("code"),g6r=o("from_config()"),h6r=o(`class
method.`),p6r=l(),eL=a("p"),_6r=o("This class cannot be instantiated directly using "),f2e=a("code"),u6r=o("__init__()"),b6r=o(" (throws an error)."),v6r=l(),kt=a("div"),f(oL.$$.fragment),T6r=l(),m2e=a("p"),F6r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),C6r=l(),vf=a("p"),M6r=o(`Note:
Loading a model from its configuration file does `),g2e=a("strong"),E6r=o("not"),y6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),h2e=a("code"),w6r=o("from_pretrained()"),A6r=o("to load the model weights."),L6r=l(),p2e=a("p"),B6r=o("Examples:"),x6r=l(),f(rL.$$.fragment),k6r=l(),Io=a("div"),f(tL.$$.fragment),R6r=l(),_2e=a("p"),S6r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),P6r=l(),Pn=a("p"),$6r=o("The model class to instantiate is selected based on the "),u2e=a("code"),I6r=o("model_type"),D6r=o(` property of the config object (either
passed as an argument or loaded from `),b2e=a("code"),j6r=o("pretrained_model_name_or_path"),N6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v2e=a("code"),q6r=o("pretrained_model_name_or_path"),G6r=o(":"),O6r=l(),aL=a("ul"),F4=a("li"),T2e=a("strong"),X6r=o("beit"),V6r=o(" \u2014 "),kV=a("a"),z6r=o("FlaxBeitForImageClassification"),W6r=o(" (BEiT model)"),Q6r=l(),C4=a("li"),F2e=a("strong"),H6r=o("vit"),U6r=o(" \u2014 "),RV=a("a"),J6r=o("FlaxViTForImageClassification"),Y6r=o(" (ViT model)"),K6r=l(),C2e=a("p"),Z6r=o("Examples:"),eAr=l(),f(nL.$$.fragment),xxe=l(),Tf=a("h2"),M4=a("a"),M2e=a("span"),f(sL.$$.fragment),oAr=l(),E2e=a("span"),rAr=o("FlaxAutoModelForVision2Seq"),kxe=l(),Nr=a("div"),f(lL.$$.fragment),tAr=l(),Ff=a("p"),aAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),y2e=a("code"),nAr=o("from_pretrained()"),sAr=o("class method or the "),w2e=a("code"),lAr=o("from_config()"),iAr=o(`class
method.`),dAr=l(),iL=a("p"),cAr=o("This class cannot be instantiated directly using "),A2e=a("code"),fAr=o("__init__()"),mAr=o(" (throws an error)."),gAr=l(),Rt=a("div"),f(dL.$$.fragment),hAr=l(),L2e=a("p"),pAr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_Ar=l(),Cf=a("p"),uAr=o(`Note:
Loading a model from its configuration file does `),B2e=a("strong"),bAr=o("not"),vAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),x2e=a("code"),TAr=o("from_pretrained()"),FAr=o("to load the model weights."),CAr=l(),k2e=a("p"),MAr=o("Examples:"),EAr=l(),f(cL.$$.fragment),yAr=l(),Do=a("div"),f(fL.$$.fragment),wAr=l(),R2e=a("p"),AAr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),LAr=l(),$n=a("p"),BAr=o("The model class to instantiate is selected based on the "),S2e=a("code"),xAr=o("model_type"),kAr=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),RAr=o("pretrained_model_name_or_path"),SAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=a("code"),PAr=o("pretrained_model_name_or_path"),$Ar=o(":"),IAr=l(),I2e=a("ul"),E4=a("li"),D2e=a("strong"),DAr=o("vision-encoder-decoder"),jAr=o(" \u2014 "),SV=a("a"),NAr=o("FlaxVisionEncoderDecoderModel"),qAr=o(" (Vision Encoder decoder model)"),GAr=l(),j2e=a("p"),OAr=o("Examples:"),XAr=l(),f(mL.$$.fragment),this.h()},l(c){const u=$bt('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),xe=i(c),de=n(c,"H1",{class:!0});var gL=s(de);me=n(gL,"A",{id:!0,class:!0,href:!0});var N2e=s(me);no=n(N2e,"SPAN",{});var q2e=s(no);m(ce.$$.fragment,q2e),q2e.forEach(t),N2e.forEach(t),be=i(gL),Go=n(gL,"SPAN",{});var zAr=s(Go);Li=r(zAr,"Auto Classes"),zAr.forEach(t),gL.forEach(t),Ef=i(c),sa=n(c,"P",{});var Sxe=s(sa);Bi=r(Sxe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=n(Sxe,"CODE",{});var WAr=s(xi);EM=r(WAr,"from_pretrained()"),WAr.forEach(t),yf=r(Sxe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Sxe.forEach(t),we=i(c),io=n(c,"P",{});var y4=s(io);ki=r(y4,"Instantiating one of "),In=n(y4,"A",{href:!0});var QAr=s(In);yM=r(QAr,"AutoConfig"),QAr.forEach(t),Dn=r(y4,", "),jn=n(y4,"A",{href:!0});var HAr=s(jn);wM=r(HAr,"AutoModel"),HAr.forEach(t),Ri=r(y4,`, and
`),Nn=n(y4,"A",{href:!0});var UAr=s(Nn);AM=r(UAr,"AutoTokenizer"),UAr.forEach(t),Si=r(y4," will directly create a class of the relevant architecture. For instance"),y4.forEach(t),wf=i(c),m($a.$$.fragment,c),co=i(c),ge=n(c,"P",{});var Pxe=s(ge);d8=r(Pxe,"will create a model that is an instance of "),Pi=n(Pxe,"A",{href:!0});var JAr=s(Pi);c8=r(JAr,"BertModel"),JAr.forEach(t),f8=r(Pxe,"."),Pxe.forEach(t),Oo=i(c),Ia=n(c,"P",{});var $xe=s(Ia);m8=r($xe,"There is one class of "),Af=n($xe,"CODE",{});var YAr=s(Af);g8=r(YAr,"AutoModel"),YAr.forEach(t),XRe=r($xe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),$xe.forEach(t),S9e=i(c),$i=n(c,"H2",{class:!0});var Ixe=s($i);Lf=n(Ixe,"A",{id:!0,class:!0,href:!0});var KAr=s(Lf);EW=n(KAr,"SPAN",{});var ZAr=s(EW);m(LM.$$.fragment,ZAr),ZAr.forEach(t),KAr.forEach(t),VRe=i(Ixe),yW=n(Ixe,"SPAN",{});var eLr=s(yW);zRe=r(eLr,"Extending the Auto Classes"),eLr.forEach(t),Ixe.forEach(t),P9e=i(c),qn=n(c,"P",{});var PV=s(qn);WRe=r(PV,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),wW=n(PV,"CODE",{});var oLr=s(wW);QRe=r(oLr,"NewModel"),oLr.forEach(t),HRe=r(PV,", make sure you have a "),AW=n(PV,"CODE",{});var rLr=s(AW);URe=r(rLr,"NewModelConfig"),rLr.forEach(t),JRe=r(PV,` then you can add those to the auto
classes like this:`),PV.forEach(t),$9e=i(c),m(BM.$$.fragment,c),I9e=i(c),h8=n(c,"P",{});var tLr=s(h8);YRe=r(tLr,"You will then be able to use the auto classes like you would usually do!"),tLr.forEach(t),D9e=i(c),m(Bf.$$.fragment,c),j9e=i(c),Ii=n(c,"H2",{class:!0});var Dxe=s(Ii);xf=n(Dxe,"A",{id:!0,class:!0,href:!0});var aLr=s(xf);LW=n(aLr,"SPAN",{});var nLr=s(LW);m(xM.$$.fragment,nLr),nLr.forEach(t),aLr.forEach(t),KRe=i(Dxe),BW=n(Dxe,"SPAN",{});var sLr=s(BW);ZRe=r(sLr,"AutoConfig"),sLr.forEach(t),Dxe.forEach(t),N9e=i(c),Xo=n(c,"DIV",{class:!0});var Is=s(Xo);m(kM.$$.fragment,Is),eSe=i(Is),RM=n(Is,"P",{});var jxe=s(RM);oSe=r(jxe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),p8=n(jxe,"A",{href:!0});var lLr=s(p8);rSe=r(lLr,"from_pretrained()"),lLr.forEach(t),tSe=r(jxe," class method."),jxe.forEach(t),aSe=i(Is),SM=n(Is,"P",{});var Nxe=s(SM);nSe=r(Nxe,"This class cannot be instantiated directly using "),xW=n(Nxe,"CODE",{});var iLr=s(xW);sSe=r(iLr,"__init__()"),iLr.forEach(t),lSe=r(Nxe," (throws an error)."),Nxe.forEach(t),iSe=i(Is),fo=n(Is,"DIV",{class:!0});var ia=s(fo);m(PM.$$.fragment,ia),dSe=i(ia),kW=n(ia,"P",{});var dLr=s(kW);cSe=r(dLr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),dLr.forEach(t),fSe=i(ia),Di=n(ia,"P",{});var $V=s(Di);mSe=r($V,"The configuration class to instantiate is selected based on the "),RW=n($V,"CODE",{});var cLr=s(RW);gSe=r(cLr,"model_type"),cLr.forEach(t),hSe=r($V,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),SW=n($V,"CODE",{});var fLr=s(SW);pSe=r(fLr,"pretrained_model_name_or_path"),fLr.forEach(t),_Se=r($V,":"),$V.forEach(t),uSe=i(ia),v=n(ia,"UL",{});var T=s(v);kf=n(T,"LI",{});var G2e=s(kf);PW=n(G2e,"STRONG",{});var mLr=s(PW);bSe=r(mLr,"albert"),mLr.forEach(t),vSe=r(G2e," \u2014 "),_8=n(G2e,"A",{href:!0});var gLr=s(_8);TSe=r(gLr,"AlbertConfig"),gLr.forEach(t),FSe=r(G2e," (ALBERT model)"),G2e.forEach(t),CSe=i(T),Rf=n(T,"LI",{});var O2e=s(Rf);$W=n(O2e,"STRONG",{});var hLr=s($W);MSe=r(hLr,"bart"),hLr.forEach(t),ESe=r(O2e," \u2014 "),u8=n(O2e,"A",{href:!0});var pLr=s(u8);ySe=r(pLr,"BartConfig"),pLr.forEach(t),wSe=r(O2e," (BART model)"),O2e.forEach(t),ASe=i(T),Sf=n(T,"LI",{});var X2e=s(Sf);IW=n(X2e,"STRONG",{});var _Lr=s(IW);LSe=r(_Lr,"beit"),_Lr.forEach(t),BSe=r(X2e," \u2014 "),b8=n(X2e,"A",{href:!0});var uLr=s(b8);xSe=r(uLr,"BeitConfig"),uLr.forEach(t),kSe=r(X2e," (BEiT model)"),X2e.forEach(t),RSe=i(T),Pf=n(T,"LI",{});var V2e=s(Pf);DW=n(V2e,"STRONG",{});var bLr=s(DW);SSe=r(bLr,"bert"),bLr.forEach(t),PSe=r(V2e," \u2014 "),v8=n(V2e,"A",{href:!0});var vLr=s(v8);$Se=r(vLr,"BertConfig"),vLr.forEach(t),ISe=r(V2e," (BERT model)"),V2e.forEach(t),DSe=i(T),$f=n(T,"LI",{});var z2e=s($f);jW=n(z2e,"STRONG",{});var TLr=s(jW);jSe=r(TLr,"bert-generation"),TLr.forEach(t),NSe=r(z2e," \u2014 "),T8=n(z2e,"A",{href:!0});var FLr=s(T8);qSe=r(FLr,"BertGenerationConfig"),FLr.forEach(t),GSe=r(z2e," (Bert Generation model)"),z2e.forEach(t),OSe=i(T),If=n(T,"LI",{});var W2e=s(If);NW=n(W2e,"STRONG",{});var CLr=s(NW);XSe=r(CLr,"big_bird"),CLr.forEach(t),VSe=r(W2e," \u2014 "),F8=n(W2e,"A",{href:!0});var MLr=s(F8);zSe=r(MLr,"BigBirdConfig"),MLr.forEach(t),WSe=r(W2e," (BigBird model)"),W2e.forEach(t),QSe=i(T),Df=n(T,"LI",{});var Q2e=s(Df);qW=n(Q2e,"STRONG",{});var ELr=s(qW);HSe=r(ELr,"bigbird_pegasus"),ELr.forEach(t),USe=r(Q2e," \u2014 "),C8=n(Q2e,"A",{href:!0});var yLr=s(C8);JSe=r(yLr,"BigBirdPegasusConfig"),yLr.forEach(t),YSe=r(Q2e," (BigBirdPegasus model)"),Q2e.forEach(t),KSe=i(T),jf=n(T,"LI",{});var H2e=s(jf);GW=n(H2e,"STRONG",{});var wLr=s(GW);ZSe=r(wLr,"blenderbot"),wLr.forEach(t),ePe=r(H2e," \u2014 "),M8=n(H2e,"A",{href:!0});var ALr=s(M8);oPe=r(ALr,"BlenderbotConfig"),ALr.forEach(t),rPe=r(H2e," (Blenderbot model)"),H2e.forEach(t),tPe=i(T),Nf=n(T,"LI",{});var U2e=s(Nf);OW=n(U2e,"STRONG",{});var LLr=s(OW);aPe=r(LLr,"blenderbot-small"),LLr.forEach(t),nPe=r(U2e," \u2014 "),E8=n(U2e,"A",{href:!0});var BLr=s(E8);sPe=r(BLr,"BlenderbotSmallConfig"),BLr.forEach(t),lPe=r(U2e," (BlenderbotSmall model)"),U2e.forEach(t),iPe=i(T),qf=n(T,"LI",{});var J2e=s(qf);XW=n(J2e,"STRONG",{});var xLr=s(XW);dPe=r(xLr,"camembert"),xLr.forEach(t),cPe=r(J2e," \u2014 "),y8=n(J2e,"A",{href:!0});var kLr=s(y8);fPe=r(kLr,"CamembertConfig"),kLr.forEach(t),mPe=r(J2e," (CamemBERT model)"),J2e.forEach(t),gPe=i(T),Gf=n(T,"LI",{});var Y2e=s(Gf);VW=n(Y2e,"STRONG",{});var RLr=s(VW);hPe=r(RLr,"canine"),RLr.forEach(t),pPe=r(Y2e," \u2014 "),w8=n(Y2e,"A",{href:!0});var SLr=s(w8);_Pe=r(SLr,"CanineConfig"),SLr.forEach(t),uPe=r(Y2e," (Canine model)"),Y2e.forEach(t),bPe=i(T),Of=n(T,"LI",{});var K2e=s(Of);zW=n(K2e,"STRONG",{});var PLr=s(zW);vPe=r(PLr,"clip"),PLr.forEach(t),TPe=r(K2e," \u2014 "),A8=n(K2e,"A",{href:!0});var $Lr=s(A8);FPe=r($Lr,"CLIPConfig"),$Lr.forEach(t),CPe=r(K2e," (CLIP model)"),K2e.forEach(t),MPe=i(T),Xf=n(T,"LI",{});var Z2e=s(Xf);WW=n(Z2e,"STRONG",{});var ILr=s(WW);EPe=r(ILr,"convbert"),ILr.forEach(t),yPe=r(Z2e," \u2014 "),L8=n(Z2e,"A",{href:!0});var DLr=s(L8);wPe=r(DLr,"ConvBertConfig"),DLr.forEach(t),APe=r(Z2e," (ConvBERT model)"),Z2e.forEach(t),LPe=i(T),Vf=n(T,"LI",{});var eve=s(Vf);QW=n(eve,"STRONG",{});var jLr=s(QW);BPe=r(jLr,"convnext"),jLr.forEach(t),xPe=r(eve," \u2014 "),B8=n(eve,"A",{href:!0});var NLr=s(B8);kPe=r(NLr,"ConvNextConfig"),NLr.forEach(t),RPe=r(eve," (ConvNext model)"),eve.forEach(t),SPe=i(T),zf=n(T,"LI",{});var ove=s(zf);HW=n(ove,"STRONG",{});var qLr=s(HW);PPe=r(qLr,"ctrl"),qLr.forEach(t),$Pe=r(ove," \u2014 "),x8=n(ove,"A",{href:!0});var GLr=s(x8);IPe=r(GLr,"CTRLConfig"),GLr.forEach(t),DPe=r(ove," (CTRL model)"),ove.forEach(t),jPe=i(T),Wf=n(T,"LI",{});var rve=s(Wf);UW=n(rve,"STRONG",{});var OLr=s(UW);NPe=r(OLr,"data2vec-audio"),OLr.forEach(t),qPe=r(rve," \u2014 "),k8=n(rve,"A",{href:!0});var XLr=s(k8);GPe=r(XLr,"Data2VecAudioConfig"),XLr.forEach(t),OPe=r(rve," (Data2VecAudio model)"),rve.forEach(t),XPe=i(T),Qf=n(T,"LI",{});var tve=s(Qf);JW=n(tve,"STRONG",{});var VLr=s(JW);VPe=r(VLr,"data2vec-text"),VLr.forEach(t),zPe=r(tve," \u2014 "),R8=n(tve,"A",{href:!0});var zLr=s(R8);WPe=r(zLr,"Data2VecTextConfig"),zLr.forEach(t),QPe=r(tve," (Data2VecText model)"),tve.forEach(t),HPe=i(T),Hf=n(T,"LI",{});var ave=s(Hf);YW=n(ave,"STRONG",{});var WLr=s(YW);UPe=r(WLr,"deberta"),WLr.forEach(t),JPe=r(ave," \u2014 "),S8=n(ave,"A",{href:!0});var QLr=s(S8);YPe=r(QLr,"DebertaConfig"),QLr.forEach(t),KPe=r(ave," (DeBERTa model)"),ave.forEach(t),ZPe=i(T),Uf=n(T,"LI",{});var nve=s(Uf);KW=n(nve,"STRONG",{});var HLr=s(KW);e$e=r(HLr,"deberta-v2"),HLr.forEach(t),o$e=r(nve," \u2014 "),P8=n(nve,"A",{href:!0});var ULr=s(P8);r$e=r(ULr,"DebertaV2Config"),ULr.forEach(t),t$e=r(nve," (DeBERTa-v2 model)"),nve.forEach(t),a$e=i(T),Jf=n(T,"LI",{});var sve=s(Jf);ZW=n(sve,"STRONG",{});var JLr=s(ZW);n$e=r(JLr,"deit"),JLr.forEach(t),s$e=r(sve," \u2014 "),$8=n(sve,"A",{href:!0});var YLr=s($8);l$e=r(YLr,"DeiTConfig"),YLr.forEach(t),i$e=r(sve," (DeiT model)"),sve.forEach(t),d$e=i(T),Yf=n(T,"LI",{});var lve=s(Yf);eQ=n(lve,"STRONG",{});var KLr=s(eQ);c$e=r(KLr,"detr"),KLr.forEach(t),f$e=r(lve," \u2014 "),I8=n(lve,"A",{href:!0});var ZLr=s(I8);m$e=r(ZLr,"DetrConfig"),ZLr.forEach(t),g$e=r(lve," (DETR model)"),lve.forEach(t),h$e=i(T),Kf=n(T,"LI",{});var ive=s(Kf);oQ=n(ive,"STRONG",{});var e8r=s(oQ);p$e=r(e8r,"distilbert"),e8r.forEach(t),_$e=r(ive," \u2014 "),D8=n(ive,"A",{href:!0});var o8r=s(D8);u$e=r(o8r,"DistilBertConfig"),o8r.forEach(t),b$e=r(ive," (DistilBERT model)"),ive.forEach(t),v$e=i(T),Zf=n(T,"LI",{});var dve=s(Zf);rQ=n(dve,"STRONG",{});var r8r=s(rQ);T$e=r(r8r,"dpr"),r8r.forEach(t),F$e=r(dve," \u2014 "),j8=n(dve,"A",{href:!0});var t8r=s(j8);C$e=r(t8r,"DPRConfig"),t8r.forEach(t),M$e=r(dve," (DPR model)"),dve.forEach(t),E$e=i(T),em=n(T,"LI",{});var cve=s(em);tQ=n(cve,"STRONG",{});var a8r=s(tQ);y$e=r(a8r,"electra"),a8r.forEach(t),w$e=r(cve," \u2014 "),N8=n(cve,"A",{href:!0});var n8r=s(N8);A$e=r(n8r,"ElectraConfig"),n8r.forEach(t),L$e=r(cve," (ELECTRA model)"),cve.forEach(t),B$e=i(T),om=n(T,"LI",{});var fve=s(om);aQ=n(fve,"STRONG",{});var s8r=s(aQ);x$e=r(s8r,"encoder-decoder"),s8r.forEach(t),k$e=r(fve," \u2014 "),q8=n(fve,"A",{href:!0});var l8r=s(q8);R$e=r(l8r,"EncoderDecoderConfig"),l8r.forEach(t),S$e=r(fve," (Encoder decoder model)"),fve.forEach(t),P$e=i(T),rm=n(T,"LI",{});var mve=s(rm);nQ=n(mve,"STRONG",{});var i8r=s(nQ);$$e=r(i8r,"flaubert"),i8r.forEach(t),I$e=r(mve," \u2014 "),G8=n(mve,"A",{href:!0});var d8r=s(G8);D$e=r(d8r,"FlaubertConfig"),d8r.forEach(t),j$e=r(mve," (FlauBERT model)"),mve.forEach(t),N$e=i(T),tm=n(T,"LI",{});var gve=s(tm);sQ=n(gve,"STRONG",{});var c8r=s(sQ);q$e=r(c8r,"fnet"),c8r.forEach(t),G$e=r(gve," \u2014 "),O8=n(gve,"A",{href:!0});var f8r=s(O8);O$e=r(f8r,"FNetConfig"),f8r.forEach(t),X$e=r(gve," (FNet model)"),gve.forEach(t),V$e=i(T),am=n(T,"LI",{});var hve=s(am);lQ=n(hve,"STRONG",{});var m8r=s(lQ);z$e=r(m8r,"fsmt"),m8r.forEach(t),W$e=r(hve," \u2014 "),X8=n(hve,"A",{href:!0});var g8r=s(X8);Q$e=r(g8r,"FSMTConfig"),g8r.forEach(t),H$e=r(hve," (FairSeq Machine-Translation model)"),hve.forEach(t),U$e=i(T),nm=n(T,"LI",{});var pve=s(nm);iQ=n(pve,"STRONG",{});var h8r=s(iQ);J$e=r(h8r,"funnel"),h8r.forEach(t),Y$e=r(pve," \u2014 "),V8=n(pve,"A",{href:!0});var p8r=s(V8);K$e=r(p8r,"FunnelConfig"),p8r.forEach(t),Z$e=r(pve," (Funnel Transformer model)"),pve.forEach(t),eIe=i(T),sm=n(T,"LI",{});var _ve=s(sm);dQ=n(_ve,"STRONG",{});var _8r=s(dQ);oIe=r(_8r,"gpt2"),_8r.forEach(t),rIe=r(_ve," \u2014 "),z8=n(_ve,"A",{href:!0});var u8r=s(z8);tIe=r(u8r,"GPT2Config"),u8r.forEach(t),aIe=r(_ve," (OpenAI GPT-2 model)"),_ve.forEach(t),nIe=i(T),lm=n(T,"LI",{});var uve=s(lm);cQ=n(uve,"STRONG",{});var b8r=s(cQ);sIe=r(b8r,"gpt_neo"),b8r.forEach(t),lIe=r(uve," \u2014 "),W8=n(uve,"A",{href:!0});var v8r=s(W8);iIe=r(v8r,"GPTNeoConfig"),v8r.forEach(t),dIe=r(uve," (GPT Neo model)"),uve.forEach(t),cIe=i(T),im=n(T,"LI",{});var bve=s(im);fQ=n(bve,"STRONG",{});var T8r=s(fQ);fIe=r(T8r,"gptj"),T8r.forEach(t),mIe=r(bve," \u2014 "),Q8=n(bve,"A",{href:!0});var F8r=s(Q8);gIe=r(F8r,"GPTJConfig"),F8r.forEach(t),hIe=r(bve," (GPT-J model)"),bve.forEach(t),pIe=i(T),dm=n(T,"LI",{});var vve=s(dm);mQ=n(vve,"STRONG",{});var C8r=s(mQ);_Ie=r(C8r,"hubert"),C8r.forEach(t),uIe=r(vve," \u2014 "),H8=n(vve,"A",{href:!0});var M8r=s(H8);bIe=r(M8r,"HubertConfig"),M8r.forEach(t),vIe=r(vve," (Hubert model)"),vve.forEach(t),TIe=i(T),cm=n(T,"LI",{});var Tve=s(cm);gQ=n(Tve,"STRONG",{});var E8r=s(gQ);FIe=r(E8r,"ibert"),E8r.forEach(t),CIe=r(Tve," \u2014 "),U8=n(Tve,"A",{href:!0});var y8r=s(U8);MIe=r(y8r,"IBertConfig"),y8r.forEach(t),EIe=r(Tve," (I-BERT model)"),Tve.forEach(t),yIe=i(T),fm=n(T,"LI",{});var Fve=s(fm);hQ=n(Fve,"STRONG",{});var w8r=s(hQ);wIe=r(w8r,"imagegpt"),w8r.forEach(t),AIe=r(Fve," \u2014 "),J8=n(Fve,"A",{href:!0});var A8r=s(J8);LIe=r(A8r,"ImageGPTConfig"),A8r.forEach(t),BIe=r(Fve," (ImageGPT model)"),Fve.forEach(t),xIe=i(T),mm=n(T,"LI",{});var Cve=s(mm);pQ=n(Cve,"STRONG",{});var L8r=s(pQ);kIe=r(L8r,"layoutlm"),L8r.forEach(t),RIe=r(Cve," \u2014 "),Y8=n(Cve,"A",{href:!0});var B8r=s(Y8);SIe=r(B8r,"LayoutLMConfig"),B8r.forEach(t),PIe=r(Cve," (LayoutLM model)"),Cve.forEach(t),$Ie=i(T),gm=n(T,"LI",{});var Mve=s(gm);_Q=n(Mve,"STRONG",{});var x8r=s(_Q);IIe=r(x8r,"layoutlmv2"),x8r.forEach(t),DIe=r(Mve," \u2014 "),K8=n(Mve,"A",{href:!0});var k8r=s(K8);jIe=r(k8r,"LayoutLMv2Config"),k8r.forEach(t),NIe=r(Mve," (LayoutLMv2 model)"),Mve.forEach(t),qIe=i(T),hm=n(T,"LI",{});var Eve=s(hm);uQ=n(Eve,"STRONG",{});var R8r=s(uQ);GIe=r(R8r,"led"),R8r.forEach(t),OIe=r(Eve," \u2014 "),Z8=n(Eve,"A",{href:!0});var S8r=s(Z8);XIe=r(S8r,"LEDConfig"),S8r.forEach(t),VIe=r(Eve," (LED model)"),Eve.forEach(t),zIe=i(T),pm=n(T,"LI",{});var yve=s(pm);bQ=n(yve,"STRONG",{});var P8r=s(bQ);WIe=r(P8r,"longformer"),P8r.forEach(t),QIe=r(yve," \u2014 "),e9=n(yve,"A",{href:!0});var $8r=s(e9);HIe=r($8r,"LongformerConfig"),$8r.forEach(t),UIe=r(yve," (Longformer model)"),yve.forEach(t),JIe=i(T),_m=n(T,"LI",{});var wve=s(_m);vQ=n(wve,"STRONG",{});var I8r=s(vQ);YIe=r(I8r,"luke"),I8r.forEach(t),KIe=r(wve," \u2014 "),o9=n(wve,"A",{href:!0});var D8r=s(o9);ZIe=r(D8r,"LukeConfig"),D8r.forEach(t),eDe=r(wve," (LUKE model)"),wve.forEach(t),oDe=i(T),um=n(T,"LI",{});var Ave=s(um);TQ=n(Ave,"STRONG",{});var j8r=s(TQ);rDe=r(j8r,"lxmert"),j8r.forEach(t),tDe=r(Ave," \u2014 "),r9=n(Ave,"A",{href:!0});var N8r=s(r9);aDe=r(N8r,"LxmertConfig"),N8r.forEach(t),nDe=r(Ave," (LXMERT model)"),Ave.forEach(t),sDe=i(T),bm=n(T,"LI",{});var Lve=s(bm);FQ=n(Lve,"STRONG",{});var q8r=s(FQ);lDe=r(q8r,"m2m_100"),q8r.forEach(t),iDe=r(Lve," \u2014 "),t9=n(Lve,"A",{href:!0});var G8r=s(t9);dDe=r(G8r,"M2M100Config"),G8r.forEach(t),cDe=r(Lve," (M2M100 model)"),Lve.forEach(t),fDe=i(T),vm=n(T,"LI",{});var Bve=s(vm);CQ=n(Bve,"STRONG",{});var O8r=s(CQ);mDe=r(O8r,"marian"),O8r.forEach(t),gDe=r(Bve," \u2014 "),a9=n(Bve,"A",{href:!0});var X8r=s(a9);hDe=r(X8r,"MarianConfig"),X8r.forEach(t),pDe=r(Bve," (Marian model)"),Bve.forEach(t),_De=i(T),Tm=n(T,"LI",{});var xve=s(Tm);MQ=n(xve,"STRONG",{});var V8r=s(MQ);uDe=r(V8r,"mbart"),V8r.forEach(t),bDe=r(xve," \u2014 "),n9=n(xve,"A",{href:!0});var z8r=s(n9);vDe=r(z8r,"MBartConfig"),z8r.forEach(t),TDe=r(xve," (mBART model)"),xve.forEach(t),FDe=i(T),Fm=n(T,"LI",{});var kve=s(Fm);EQ=n(kve,"STRONG",{});var W8r=s(EQ);CDe=r(W8r,"megatron-bert"),W8r.forEach(t),MDe=r(kve," \u2014 "),s9=n(kve,"A",{href:!0});var Q8r=s(s9);EDe=r(Q8r,"MegatronBertConfig"),Q8r.forEach(t),yDe=r(kve," (MegatronBert model)"),kve.forEach(t),wDe=i(T),Cm=n(T,"LI",{});var Rve=s(Cm);yQ=n(Rve,"STRONG",{});var H8r=s(yQ);ADe=r(H8r,"mobilebert"),H8r.forEach(t),LDe=r(Rve," \u2014 "),l9=n(Rve,"A",{href:!0});var U8r=s(l9);BDe=r(U8r,"MobileBertConfig"),U8r.forEach(t),xDe=r(Rve," (MobileBERT model)"),Rve.forEach(t),kDe=i(T),Mm=n(T,"LI",{});var Sve=s(Mm);wQ=n(Sve,"STRONG",{});var J8r=s(wQ);RDe=r(J8r,"mpnet"),J8r.forEach(t),SDe=r(Sve," \u2014 "),i9=n(Sve,"A",{href:!0});var Y8r=s(i9);PDe=r(Y8r,"MPNetConfig"),Y8r.forEach(t),$De=r(Sve," (MPNet model)"),Sve.forEach(t),IDe=i(T),Em=n(T,"LI",{});var Pve=s(Em);AQ=n(Pve,"STRONG",{});var K8r=s(AQ);DDe=r(K8r,"mt5"),K8r.forEach(t),jDe=r(Pve," \u2014 "),d9=n(Pve,"A",{href:!0});var Z8r=s(d9);NDe=r(Z8r,"MT5Config"),Z8r.forEach(t),qDe=r(Pve," (mT5 model)"),Pve.forEach(t),GDe=i(T),ym=n(T,"LI",{});var $ve=s(ym);LQ=n($ve,"STRONG",{});var e9r=s(LQ);ODe=r(e9r,"nystromformer"),e9r.forEach(t),XDe=r($ve," \u2014 "),c9=n($ve,"A",{href:!0});var o9r=s(c9);VDe=r(o9r,"NystromformerConfig"),o9r.forEach(t),zDe=r($ve," (Nystromformer model)"),$ve.forEach(t),WDe=i(T),wm=n(T,"LI",{});var Ive=s(wm);BQ=n(Ive,"STRONG",{});var r9r=s(BQ);QDe=r(r9r,"openai-gpt"),r9r.forEach(t),HDe=r(Ive," \u2014 "),f9=n(Ive,"A",{href:!0});var t9r=s(f9);UDe=r(t9r,"OpenAIGPTConfig"),t9r.forEach(t),JDe=r(Ive," (OpenAI GPT model)"),Ive.forEach(t),YDe=i(T),Am=n(T,"LI",{});var Dve=s(Am);xQ=n(Dve,"STRONG",{});var a9r=s(xQ);KDe=r(a9r,"pegasus"),a9r.forEach(t),ZDe=r(Dve," \u2014 "),m9=n(Dve,"A",{href:!0});var n9r=s(m9);eje=r(n9r,"PegasusConfig"),n9r.forEach(t),oje=r(Dve," (Pegasus model)"),Dve.forEach(t),rje=i(T),Lm=n(T,"LI",{});var jve=s(Lm);kQ=n(jve,"STRONG",{});var s9r=s(kQ);tje=r(s9r,"perceiver"),s9r.forEach(t),aje=r(jve," \u2014 "),g9=n(jve,"A",{href:!0});var l9r=s(g9);nje=r(l9r,"PerceiverConfig"),l9r.forEach(t),sje=r(jve," (Perceiver model)"),jve.forEach(t),lje=i(T),Bm=n(T,"LI",{});var Nve=s(Bm);RQ=n(Nve,"STRONG",{});var i9r=s(RQ);ije=r(i9r,"plbart"),i9r.forEach(t),dje=r(Nve," \u2014 "),h9=n(Nve,"A",{href:!0});var d9r=s(h9);cje=r(d9r,"PLBartConfig"),d9r.forEach(t),fje=r(Nve," (PLBart model)"),Nve.forEach(t),mje=i(T),xm=n(T,"LI",{});var qve=s(xm);SQ=n(qve,"STRONG",{});var c9r=s(SQ);gje=r(c9r,"poolformer"),c9r.forEach(t),hje=r(qve," \u2014 "),p9=n(qve,"A",{href:!0});var f9r=s(p9);pje=r(f9r,"PoolFormerConfig"),f9r.forEach(t),_je=r(qve," (PoolFormer model)"),qve.forEach(t),uje=i(T),km=n(T,"LI",{});var Gve=s(km);PQ=n(Gve,"STRONG",{});var m9r=s(PQ);bje=r(m9r,"prophetnet"),m9r.forEach(t),vje=r(Gve," \u2014 "),_9=n(Gve,"A",{href:!0});var g9r=s(_9);Tje=r(g9r,"ProphetNetConfig"),g9r.forEach(t),Fje=r(Gve," (ProphetNet model)"),Gve.forEach(t),Cje=i(T),Rm=n(T,"LI",{});var Ove=s(Rm);$Q=n(Ove,"STRONG",{});var h9r=s($Q);Mje=r(h9r,"qdqbert"),h9r.forEach(t),Eje=r(Ove," \u2014 "),u9=n(Ove,"A",{href:!0});var p9r=s(u9);yje=r(p9r,"QDQBertConfig"),p9r.forEach(t),wje=r(Ove," (QDQBert model)"),Ove.forEach(t),Aje=i(T),Sm=n(T,"LI",{});var Xve=s(Sm);IQ=n(Xve,"STRONG",{});var _9r=s(IQ);Lje=r(_9r,"rag"),_9r.forEach(t),Bje=r(Xve," \u2014 "),b9=n(Xve,"A",{href:!0});var u9r=s(b9);xje=r(u9r,"RagConfig"),u9r.forEach(t),kje=r(Xve," (RAG model)"),Xve.forEach(t),Rje=i(T),Pm=n(T,"LI",{});var Vve=s(Pm);DQ=n(Vve,"STRONG",{});var b9r=s(DQ);Sje=r(b9r,"realm"),b9r.forEach(t),Pje=r(Vve," \u2014 "),v9=n(Vve,"A",{href:!0});var v9r=s(v9);$je=r(v9r,"RealmConfig"),v9r.forEach(t),Ije=r(Vve," (Realm model)"),Vve.forEach(t),Dje=i(T),$m=n(T,"LI",{});var zve=s($m);jQ=n(zve,"STRONG",{});var T9r=s(jQ);jje=r(T9r,"reformer"),T9r.forEach(t),Nje=r(zve," \u2014 "),T9=n(zve,"A",{href:!0});var F9r=s(T9);qje=r(F9r,"ReformerConfig"),F9r.forEach(t),Gje=r(zve," (Reformer model)"),zve.forEach(t),Oje=i(T),Im=n(T,"LI",{});var Wve=s(Im);NQ=n(Wve,"STRONG",{});var C9r=s(NQ);Xje=r(C9r,"rembert"),C9r.forEach(t),Vje=r(Wve," \u2014 "),F9=n(Wve,"A",{href:!0});var M9r=s(F9);zje=r(M9r,"RemBertConfig"),M9r.forEach(t),Wje=r(Wve," (RemBERT model)"),Wve.forEach(t),Qje=i(T),Dm=n(T,"LI",{});var Qve=s(Dm);qQ=n(Qve,"STRONG",{});var E9r=s(qQ);Hje=r(E9r,"resnet"),E9r.forEach(t),Uje=r(Qve," \u2014 "),C9=n(Qve,"A",{href:!0});var y9r=s(C9);Jje=r(y9r,"ResNetConfig"),y9r.forEach(t),Yje=r(Qve," (ResNet model)"),Qve.forEach(t),Kje=i(T),jm=n(T,"LI",{});var Hve=s(jm);GQ=n(Hve,"STRONG",{});var w9r=s(GQ);Zje=r(w9r,"retribert"),w9r.forEach(t),eNe=r(Hve," \u2014 "),M9=n(Hve,"A",{href:!0});var A9r=s(M9);oNe=r(A9r,"RetriBertConfig"),A9r.forEach(t),rNe=r(Hve," (RetriBERT model)"),Hve.forEach(t),tNe=i(T),Nm=n(T,"LI",{});var Uve=s(Nm);OQ=n(Uve,"STRONG",{});var L9r=s(OQ);aNe=r(L9r,"roberta"),L9r.forEach(t),nNe=r(Uve," \u2014 "),E9=n(Uve,"A",{href:!0});var B9r=s(E9);sNe=r(B9r,"RobertaConfig"),B9r.forEach(t),lNe=r(Uve," (RoBERTa model)"),Uve.forEach(t),iNe=i(T),qm=n(T,"LI",{});var Jve=s(qm);XQ=n(Jve,"STRONG",{});var x9r=s(XQ);dNe=r(x9r,"roformer"),x9r.forEach(t),cNe=r(Jve," \u2014 "),y9=n(Jve,"A",{href:!0});var k9r=s(y9);fNe=r(k9r,"RoFormerConfig"),k9r.forEach(t),mNe=r(Jve," (RoFormer model)"),Jve.forEach(t),gNe=i(T),Gm=n(T,"LI",{});var Yve=s(Gm);VQ=n(Yve,"STRONG",{});var R9r=s(VQ);hNe=r(R9r,"segformer"),R9r.forEach(t),pNe=r(Yve," \u2014 "),w9=n(Yve,"A",{href:!0});var S9r=s(w9);_Ne=r(S9r,"SegformerConfig"),S9r.forEach(t),uNe=r(Yve," (SegFormer model)"),Yve.forEach(t),bNe=i(T),Om=n(T,"LI",{});var Kve=s(Om);zQ=n(Kve,"STRONG",{});var P9r=s(zQ);vNe=r(P9r,"sew"),P9r.forEach(t),TNe=r(Kve," \u2014 "),A9=n(Kve,"A",{href:!0});var $9r=s(A9);FNe=r($9r,"SEWConfig"),$9r.forEach(t),CNe=r(Kve," (SEW model)"),Kve.forEach(t),MNe=i(T),Xm=n(T,"LI",{});var Zve=s(Xm);WQ=n(Zve,"STRONG",{});var I9r=s(WQ);ENe=r(I9r,"sew-d"),I9r.forEach(t),yNe=r(Zve," \u2014 "),L9=n(Zve,"A",{href:!0});var D9r=s(L9);wNe=r(D9r,"SEWDConfig"),D9r.forEach(t),ANe=r(Zve," (SEW-D model)"),Zve.forEach(t),LNe=i(T),Vm=n(T,"LI",{});var e0e=s(Vm);QQ=n(e0e,"STRONG",{});var j9r=s(QQ);BNe=r(j9r,"speech-encoder-decoder"),j9r.forEach(t),xNe=r(e0e," \u2014 "),B9=n(e0e,"A",{href:!0});var N9r=s(B9);kNe=r(N9r,"SpeechEncoderDecoderConfig"),N9r.forEach(t),RNe=r(e0e," (Speech Encoder decoder model)"),e0e.forEach(t),SNe=i(T),zm=n(T,"LI",{});var o0e=s(zm);HQ=n(o0e,"STRONG",{});var q9r=s(HQ);PNe=r(q9r,"speech_to_text"),q9r.forEach(t),$Ne=r(o0e," \u2014 "),x9=n(o0e,"A",{href:!0});var G9r=s(x9);INe=r(G9r,"Speech2TextConfig"),G9r.forEach(t),DNe=r(o0e," (Speech2Text model)"),o0e.forEach(t),jNe=i(T),Wm=n(T,"LI",{});var r0e=s(Wm);UQ=n(r0e,"STRONG",{});var O9r=s(UQ);NNe=r(O9r,"speech_to_text_2"),O9r.forEach(t),qNe=r(r0e," \u2014 "),k9=n(r0e,"A",{href:!0});var X9r=s(k9);GNe=r(X9r,"Speech2Text2Config"),X9r.forEach(t),ONe=r(r0e," (Speech2Text2 model)"),r0e.forEach(t),XNe=i(T),Qm=n(T,"LI",{});var t0e=s(Qm);JQ=n(t0e,"STRONG",{});var V9r=s(JQ);VNe=r(V9r,"splinter"),V9r.forEach(t),zNe=r(t0e," \u2014 "),R9=n(t0e,"A",{href:!0});var z9r=s(R9);WNe=r(z9r,"SplinterConfig"),z9r.forEach(t),QNe=r(t0e," (Splinter model)"),t0e.forEach(t),HNe=i(T),Hm=n(T,"LI",{});var a0e=s(Hm);YQ=n(a0e,"STRONG",{});var W9r=s(YQ);UNe=r(W9r,"squeezebert"),W9r.forEach(t),JNe=r(a0e," \u2014 "),S9=n(a0e,"A",{href:!0});var Q9r=s(S9);YNe=r(Q9r,"SqueezeBertConfig"),Q9r.forEach(t),KNe=r(a0e," (SqueezeBERT model)"),a0e.forEach(t),ZNe=i(T),Um=n(T,"LI",{});var n0e=s(Um);KQ=n(n0e,"STRONG",{});var H9r=s(KQ);eqe=r(H9r,"swin"),H9r.forEach(t),oqe=r(n0e," \u2014 "),P9=n(n0e,"A",{href:!0});var U9r=s(P9);rqe=r(U9r,"SwinConfig"),U9r.forEach(t),tqe=r(n0e," (Swin model)"),n0e.forEach(t),aqe=i(T),Jm=n(T,"LI",{});var s0e=s(Jm);ZQ=n(s0e,"STRONG",{});var J9r=s(ZQ);nqe=r(J9r,"t5"),J9r.forEach(t),sqe=r(s0e," \u2014 "),$9=n(s0e,"A",{href:!0});var Y9r=s($9);lqe=r(Y9r,"T5Config"),Y9r.forEach(t),iqe=r(s0e," (T5 model)"),s0e.forEach(t),dqe=i(T),Ym=n(T,"LI",{});var l0e=s(Ym);eH=n(l0e,"STRONG",{});var K9r=s(eH);cqe=r(K9r,"tapas"),K9r.forEach(t),fqe=r(l0e," \u2014 "),I9=n(l0e,"A",{href:!0});var Z9r=s(I9);mqe=r(Z9r,"TapasConfig"),Z9r.forEach(t),gqe=r(l0e," (TAPAS model)"),l0e.forEach(t),hqe=i(T),Km=n(T,"LI",{});var i0e=s(Km);oH=n(i0e,"STRONG",{});var eBr=s(oH);pqe=r(eBr,"transfo-xl"),eBr.forEach(t),_qe=r(i0e," \u2014 "),D9=n(i0e,"A",{href:!0});var oBr=s(D9);uqe=r(oBr,"TransfoXLConfig"),oBr.forEach(t),bqe=r(i0e," (Transformer-XL model)"),i0e.forEach(t),vqe=i(T),Zm=n(T,"LI",{});var d0e=s(Zm);rH=n(d0e,"STRONG",{});var rBr=s(rH);Tqe=r(rBr,"trocr"),rBr.forEach(t),Fqe=r(d0e," \u2014 "),j9=n(d0e,"A",{href:!0});var tBr=s(j9);Cqe=r(tBr,"TrOCRConfig"),tBr.forEach(t),Mqe=r(d0e," (TrOCR model)"),d0e.forEach(t),Eqe=i(T),eg=n(T,"LI",{});var c0e=s(eg);tH=n(c0e,"STRONG",{});var aBr=s(tH);yqe=r(aBr,"unispeech"),aBr.forEach(t),wqe=r(c0e," \u2014 "),N9=n(c0e,"A",{href:!0});var nBr=s(N9);Aqe=r(nBr,"UniSpeechConfig"),nBr.forEach(t),Lqe=r(c0e," (UniSpeech model)"),c0e.forEach(t),Bqe=i(T),og=n(T,"LI",{});var f0e=s(og);aH=n(f0e,"STRONG",{});var sBr=s(aH);xqe=r(sBr,"unispeech-sat"),sBr.forEach(t),kqe=r(f0e," \u2014 "),q9=n(f0e,"A",{href:!0});var lBr=s(q9);Rqe=r(lBr,"UniSpeechSatConfig"),lBr.forEach(t),Sqe=r(f0e," (UniSpeechSat model)"),f0e.forEach(t),Pqe=i(T),rg=n(T,"LI",{});var m0e=s(rg);nH=n(m0e,"STRONG",{});var iBr=s(nH);$qe=r(iBr,"vilt"),iBr.forEach(t),Iqe=r(m0e," \u2014 "),G9=n(m0e,"A",{href:!0});var dBr=s(G9);Dqe=r(dBr,"ViltConfig"),dBr.forEach(t),jqe=r(m0e," (ViLT model)"),m0e.forEach(t),Nqe=i(T),tg=n(T,"LI",{});var g0e=s(tg);sH=n(g0e,"STRONG",{});var cBr=s(sH);qqe=r(cBr,"vision-encoder-decoder"),cBr.forEach(t),Gqe=r(g0e," \u2014 "),O9=n(g0e,"A",{href:!0});var fBr=s(O9);Oqe=r(fBr,"VisionEncoderDecoderConfig"),fBr.forEach(t),Xqe=r(g0e," (Vision Encoder decoder model)"),g0e.forEach(t),Vqe=i(T),ag=n(T,"LI",{});var h0e=s(ag);lH=n(h0e,"STRONG",{});var mBr=s(lH);zqe=r(mBr,"vision-text-dual-encoder"),mBr.forEach(t),Wqe=r(h0e," \u2014 "),X9=n(h0e,"A",{href:!0});var gBr=s(X9);Qqe=r(gBr,"VisionTextDualEncoderConfig"),gBr.forEach(t),Hqe=r(h0e," (VisionTextDualEncoder model)"),h0e.forEach(t),Uqe=i(T),ng=n(T,"LI",{});var p0e=s(ng);iH=n(p0e,"STRONG",{});var hBr=s(iH);Jqe=r(hBr,"visual_bert"),hBr.forEach(t),Yqe=r(p0e," \u2014 "),V9=n(p0e,"A",{href:!0});var pBr=s(V9);Kqe=r(pBr,"VisualBertConfig"),pBr.forEach(t),Zqe=r(p0e," (VisualBert model)"),p0e.forEach(t),eGe=i(T),sg=n(T,"LI",{});var _0e=s(sg);dH=n(_0e,"STRONG",{});var _Br=s(dH);oGe=r(_Br,"vit"),_Br.forEach(t),rGe=r(_0e," \u2014 "),z9=n(_0e,"A",{href:!0});var uBr=s(z9);tGe=r(uBr,"ViTConfig"),uBr.forEach(t),aGe=r(_0e," (ViT model)"),_0e.forEach(t),nGe=i(T),lg=n(T,"LI",{});var u0e=s(lg);cH=n(u0e,"STRONG",{});var bBr=s(cH);sGe=r(bBr,"vit_mae"),bBr.forEach(t),lGe=r(u0e," \u2014 "),W9=n(u0e,"A",{href:!0});var vBr=s(W9);iGe=r(vBr,"ViTMAEConfig"),vBr.forEach(t),dGe=r(u0e," (ViTMAE model)"),u0e.forEach(t),cGe=i(T),ig=n(T,"LI",{});var b0e=s(ig);fH=n(b0e,"STRONG",{});var TBr=s(fH);fGe=r(TBr,"wav2vec2"),TBr.forEach(t),mGe=r(b0e," \u2014 "),Q9=n(b0e,"A",{href:!0});var FBr=s(Q9);gGe=r(FBr,"Wav2Vec2Config"),FBr.forEach(t),hGe=r(b0e," (Wav2Vec2 model)"),b0e.forEach(t),pGe=i(T),dg=n(T,"LI",{});var v0e=s(dg);mH=n(v0e,"STRONG",{});var CBr=s(mH);_Ge=r(CBr,"wavlm"),CBr.forEach(t),uGe=r(v0e," \u2014 "),H9=n(v0e,"A",{href:!0});var MBr=s(H9);bGe=r(MBr,"WavLMConfig"),MBr.forEach(t),vGe=r(v0e," (WavLM model)"),v0e.forEach(t),TGe=i(T),cg=n(T,"LI",{});var T0e=s(cg);gH=n(T0e,"STRONG",{});var EBr=s(gH);FGe=r(EBr,"xglm"),EBr.forEach(t),CGe=r(T0e," \u2014 "),U9=n(T0e,"A",{href:!0});var yBr=s(U9);MGe=r(yBr,"XGLMConfig"),yBr.forEach(t),EGe=r(T0e," (XGLM model)"),T0e.forEach(t),yGe=i(T),fg=n(T,"LI",{});var F0e=s(fg);hH=n(F0e,"STRONG",{});var wBr=s(hH);wGe=r(wBr,"xlm"),wBr.forEach(t),AGe=r(F0e," \u2014 "),J9=n(F0e,"A",{href:!0});var ABr=s(J9);LGe=r(ABr,"XLMConfig"),ABr.forEach(t),BGe=r(F0e," (XLM model)"),F0e.forEach(t),xGe=i(T),mg=n(T,"LI",{});var C0e=s(mg);pH=n(C0e,"STRONG",{});var LBr=s(pH);kGe=r(LBr,"xlm-prophetnet"),LBr.forEach(t),RGe=r(C0e," \u2014 "),Y9=n(C0e,"A",{href:!0});var BBr=s(Y9);SGe=r(BBr,"XLMProphetNetConfig"),BBr.forEach(t),PGe=r(C0e," (XLMProphetNet model)"),C0e.forEach(t),$Ge=i(T),gg=n(T,"LI",{});var M0e=s(gg);_H=n(M0e,"STRONG",{});var xBr=s(_H);IGe=r(xBr,"xlm-roberta"),xBr.forEach(t),DGe=r(M0e," \u2014 "),K9=n(M0e,"A",{href:!0});var kBr=s(K9);jGe=r(kBr,"XLMRobertaConfig"),kBr.forEach(t),NGe=r(M0e," (XLM-RoBERTa model)"),M0e.forEach(t),qGe=i(T),hg=n(T,"LI",{});var E0e=s(hg);uH=n(E0e,"STRONG",{});var RBr=s(uH);GGe=r(RBr,"xlm-roberta-xl"),RBr.forEach(t),OGe=r(E0e," \u2014 "),Z9=n(E0e,"A",{href:!0});var SBr=s(Z9);XGe=r(SBr,"XLMRobertaXLConfig"),SBr.forEach(t),VGe=r(E0e," (XLM-RoBERTa-XL model)"),E0e.forEach(t),zGe=i(T),pg=n(T,"LI",{});var y0e=s(pg);bH=n(y0e,"STRONG",{});var PBr=s(bH);WGe=r(PBr,"xlnet"),PBr.forEach(t),QGe=r(y0e," \u2014 "),eB=n(y0e,"A",{href:!0});var $Br=s(eB);HGe=r($Br,"XLNetConfig"),$Br.forEach(t),UGe=r(y0e," (XLNet model)"),y0e.forEach(t),JGe=i(T),_g=n(T,"LI",{});var w0e=s(_g);vH=n(w0e,"STRONG",{});var IBr=s(vH);YGe=r(IBr,"yoso"),IBr.forEach(t),KGe=r(w0e," \u2014 "),oB=n(w0e,"A",{href:!0});var DBr=s(oB);ZGe=r(DBr,"YosoConfig"),DBr.forEach(t),eOe=r(w0e," (YOSO model)"),w0e.forEach(t),T.forEach(t),oOe=i(ia),TH=n(ia,"P",{});var jBr=s(TH);rOe=r(jBr,"Examples:"),jBr.forEach(t),tOe=i(ia),m($M.$$.fragment,ia),ia.forEach(t),aOe=i(Is),ug=n(Is,"DIV",{class:!0});var qxe=s(ug);m(IM.$$.fragment,qxe),nOe=i(qxe),FH=n(qxe,"P",{});var NBr=s(FH);sOe=r(NBr,"Register a new configuration for this class."),NBr.forEach(t),qxe.forEach(t),Is.forEach(t),q9e=i(c),ji=n(c,"H2",{class:!0});var Gxe=s(ji);bg=n(Gxe,"A",{id:!0,class:!0,href:!0});var qBr=s(bg);CH=n(qBr,"SPAN",{});var GBr=s(CH);m(DM.$$.fragment,GBr),GBr.forEach(t),qBr.forEach(t),lOe=i(Gxe),MH=n(Gxe,"SPAN",{});var OBr=s(MH);iOe=r(OBr,"AutoTokenizer"),OBr.forEach(t),Gxe.forEach(t),G9e=i(c),Vo=n(c,"DIV",{class:!0});var Ds=s(Vo);m(jM.$$.fragment,Ds),dOe=i(Ds),NM=n(Ds,"P",{});var Oxe=s(NM);cOe=r(Oxe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),rB=n(Oxe,"A",{href:!0});var XBr=s(rB);fOe=r(XBr,"AutoTokenizer.from_pretrained()"),XBr.forEach(t),mOe=r(Oxe," class method."),Oxe.forEach(t),gOe=i(Ds),qM=n(Ds,"P",{});var Xxe=s(qM);hOe=r(Xxe,"This class cannot be instantiated directly using "),EH=n(Xxe,"CODE",{});var VBr=s(EH);pOe=r(VBr,"__init__()"),VBr.forEach(t),_Oe=r(Xxe," (throws an error)."),Xxe.forEach(t),uOe=i(Ds),mo=n(Ds,"DIV",{class:!0});var da=s(mo);m(GM.$$.fragment,da),bOe=i(da),yH=n(da,"P",{});var zBr=s(yH);vOe=r(zBr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),zBr.forEach(t),TOe=i(da),Da=n(da,"P",{});var w4=s(Da);FOe=r(w4,"The tokenizer class to instantiate is selected based on the "),wH=n(w4,"CODE",{});var WBr=s(wH);COe=r(WBr,"model_type"),WBr.forEach(t),MOe=r(w4,` property of the config object (either
passed as an argument or loaded from `),AH=n(w4,"CODE",{});var QBr=s(AH);EOe=r(QBr,"pretrained_model_name_or_path"),QBr.forEach(t),yOe=r(w4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LH=n(w4,"CODE",{});var HBr=s(LH);wOe=r(HBr,"pretrained_model_name_or_path"),HBr.forEach(t),AOe=r(w4,":"),w4.forEach(t),LOe=i(da),M=n(da,"UL",{});var y=s(M);Gn=n(y,"LI",{});var hL=s(Gn);BH=n(hL,"STRONG",{});var UBr=s(BH);BOe=r(UBr,"albert"),UBr.forEach(t),xOe=r(hL," \u2014 "),tB=n(hL,"A",{href:!0});var JBr=s(tB);kOe=r(JBr,"AlbertTokenizer"),JBr.forEach(t),ROe=r(hL," or "),aB=n(hL,"A",{href:!0});var YBr=s(aB);SOe=r(YBr,"AlbertTokenizerFast"),YBr.forEach(t),POe=r(hL," (ALBERT model)"),hL.forEach(t),$Oe=i(y),On=n(y,"LI",{});var pL=s(On);xH=n(pL,"STRONG",{});var KBr=s(xH);IOe=r(KBr,"bart"),KBr.forEach(t),DOe=r(pL," \u2014 "),nB=n(pL,"A",{href:!0});var ZBr=s(nB);jOe=r(ZBr,"BartTokenizer"),ZBr.forEach(t),NOe=r(pL," or "),sB=n(pL,"A",{href:!0});var exr=s(sB);qOe=r(exr,"BartTokenizerFast"),exr.forEach(t),GOe=r(pL," (BART model)"),pL.forEach(t),OOe=i(y),Xn=n(y,"LI",{});var _L=s(Xn);kH=n(_L,"STRONG",{});var oxr=s(kH);XOe=r(oxr,"barthez"),oxr.forEach(t),VOe=r(_L," \u2014 "),lB=n(_L,"A",{href:!0});var rxr=s(lB);zOe=r(rxr,"BarthezTokenizer"),rxr.forEach(t),WOe=r(_L," or "),iB=n(_L,"A",{href:!0});var txr=s(iB);QOe=r(txr,"BarthezTokenizerFast"),txr.forEach(t),HOe=r(_L," (BARThez model)"),_L.forEach(t),UOe=i(y),vg=n(y,"LI",{});var A0e=s(vg);RH=n(A0e,"STRONG",{});var axr=s(RH);JOe=r(axr,"bartpho"),axr.forEach(t),YOe=r(A0e," \u2014 "),dB=n(A0e,"A",{href:!0});var nxr=s(dB);KOe=r(nxr,"BartphoTokenizer"),nxr.forEach(t),ZOe=r(A0e," (BARTpho model)"),A0e.forEach(t),eXe=i(y),Vn=n(y,"LI",{});var uL=s(Vn);SH=n(uL,"STRONG",{});var sxr=s(SH);oXe=r(sxr,"bert"),sxr.forEach(t),rXe=r(uL," \u2014 "),cB=n(uL,"A",{href:!0});var lxr=s(cB);tXe=r(lxr,"BertTokenizer"),lxr.forEach(t),aXe=r(uL," or "),fB=n(uL,"A",{href:!0});var ixr=s(fB);nXe=r(ixr,"BertTokenizerFast"),ixr.forEach(t),sXe=r(uL," (BERT model)"),uL.forEach(t),lXe=i(y),Tg=n(y,"LI",{});var L0e=s(Tg);PH=n(L0e,"STRONG",{});var dxr=s(PH);iXe=r(dxr,"bert-generation"),dxr.forEach(t),dXe=r(L0e," \u2014 "),mB=n(L0e,"A",{href:!0});var cxr=s(mB);cXe=r(cxr,"BertGenerationTokenizer"),cxr.forEach(t),fXe=r(L0e," (Bert Generation model)"),L0e.forEach(t),mXe=i(y),Fg=n(y,"LI",{});var B0e=s(Fg);$H=n(B0e,"STRONG",{});var fxr=s($H);gXe=r(fxr,"bert-japanese"),fxr.forEach(t),hXe=r(B0e," \u2014 "),gB=n(B0e,"A",{href:!0});var mxr=s(gB);pXe=r(mxr,"BertJapaneseTokenizer"),mxr.forEach(t),_Xe=r(B0e," (BertJapanese model)"),B0e.forEach(t),uXe=i(y),Cg=n(y,"LI",{});var x0e=s(Cg);IH=n(x0e,"STRONG",{});var gxr=s(IH);bXe=r(gxr,"bertweet"),gxr.forEach(t),vXe=r(x0e," \u2014 "),hB=n(x0e,"A",{href:!0});var hxr=s(hB);TXe=r(hxr,"BertweetTokenizer"),hxr.forEach(t),FXe=r(x0e," (Bertweet model)"),x0e.forEach(t),CXe=i(y),zn=n(y,"LI",{});var bL=s(zn);DH=n(bL,"STRONG",{});var pxr=s(DH);MXe=r(pxr,"big_bird"),pxr.forEach(t),EXe=r(bL," \u2014 "),pB=n(bL,"A",{href:!0});var _xr=s(pB);yXe=r(_xr,"BigBirdTokenizer"),_xr.forEach(t),wXe=r(bL," or "),_B=n(bL,"A",{href:!0});var uxr=s(_B);AXe=r(uxr,"BigBirdTokenizerFast"),uxr.forEach(t),LXe=r(bL," (BigBird model)"),bL.forEach(t),BXe=i(y),Wn=n(y,"LI",{});var vL=s(Wn);jH=n(vL,"STRONG",{});var bxr=s(jH);xXe=r(bxr,"bigbird_pegasus"),bxr.forEach(t),kXe=r(vL," \u2014 "),uB=n(vL,"A",{href:!0});var vxr=s(uB);RXe=r(vxr,"PegasusTokenizer"),vxr.forEach(t),SXe=r(vL," or "),bB=n(vL,"A",{href:!0});var Txr=s(bB);PXe=r(Txr,"PegasusTokenizerFast"),Txr.forEach(t),$Xe=r(vL," (BigBirdPegasus model)"),vL.forEach(t),IXe=i(y),Qn=n(y,"LI",{});var TL=s(Qn);NH=n(TL,"STRONG",{});var Fxr=s(NH);DXe=r(Fxr,"blenderbot"),Fxr.forEach(t),jXe=r(TL," \u2014 "),vB=n(TL,"A",{href:!0});var Cxr=s(vB);NXe=r(Cxr,"BlenderbotTokenizer"),Cxr.forEach(t),qXe=r(TL," or "),TB=n(TL,"A",{href:!0});var Mxr=s(TB);GXe=r(Mxr,"BlenderbotTokenizerFast"),Mxr.forEach(t),OXe=r(TL," (Blenderbot model)"),TL.forEach(t),XXe=i(y),Mg=n(y,"LI",{});var k0e=s(Mg);qH=n(k0e,"STRONG",{});var Exr=s(qH);VXe=r(Exr,"blenderbot-small"),Exr.forEach(t),zXe=r(k0e," \u2014 "),FB=n(k0e,"A",{href:!0});var yxr=s(FB);WXe=r(yxr,"BlenderbotSmallTokenizer"),yxr.forEach(t),QXe=r(k0e," (BlenderbotSmall model)"),k0e.forEach(t),HXe=i(y),Eg=n(y,"LI",{});var R0e=s(Eg);GH=n(R0e,"STRONG",{});var wxr=s(GH);UXe=r(wxr,"byt5"),wxr.forEach(t),JXe=r(R0e," \u2014 "),CB=n(R0e,"A",{href:!0});var Axr=s(CB);YXe=r(Axr,"ByT5Tokenizer"),Axr.forEach(t),KXe=r(R0e," (ByT5 model)"),R0e.forEach(t),ZXe=i(y),Hn=n(y,"LI",{});var FL=s(Hn);OH=n(FL,"STRONG",{});var Lxr=s(OH);eVe=r(Lxr,"camembert"),Lxr.forEach(t),oVe=r(FL," \u2014 "),MB=n(FL,"A",{href:!0});var Bxr=s(MB);rVe=r(Bxr,"CamembertTokenizer"),Bxr.forEach(t),tVe=r(FL," or "),EB=n(FL,"A",{href:!0});var xxr=s(EB);aVe=r(xxr,"CamembertTokenizerFast"),xxr.forEach(t),nVe=r(FL," (CamemBERT model)"),FL.forEach(t),sVe=i(y),yg=n(y,"LI",{});var S0e=s(yg);XH=n(S0e,"STRONG",{});var kxr=s(XH);lVe=r(kxr,"canine"),kxr.forEach(t),iVe=r(S0e," \u2014 "),yB=n(S0e,"A",{href:!0});var Rxr=s(yB);dVe=r(Rxr,"CanineTokenizer"),Rxr.forEach(t),cVe=r(S0e," (Canine model)"),S0e.forEach(t),fVe=i(y),Un=n(y,"LI",{});var CL=s(Un);VH=n(CL,"STRONG",{});var Sxr=s(VH);mVe=r(Sxr,"clip"),Sxr.forEach(t),gVe=r(CL," \u2014 "),wB=n(CL,"A",{href:!0});var Pxr=s(wB);hVe=r(Pxr,"CLIPTokenizer"),Pxr.forEach(t),pVe=r(CL," or "),AB=n(CL,"A",{href:!0});var $xr=s(AB);_Ve=r($xr,"CLIPTokenizerFast"),$xr.forEach(t),uVe=r(CL," (CLIP model)"),CL.forEach(t),bVe=i(y),Jn=n(y,"LI",{});var ML=s(Jn);zH=n(ML,"STRONG",{});var Ixr=s(zH);vVe=r(Ixr,"convbert"),Ixr.forEach(t),TVe=r(ML," \u2014 "),LB=n(ML,"A",{href:!0});var Dxr=s(LB);FVe=r(Dxr,"ConvBertTokenizer"),Dxr.forEach(t),CVe=r(ML," or "),BB=n(ML,"A",{href:!0});var jxr=s(BB);MVe=r(jxr,"ConvBertTokenizerFast"),jxr.forEach(t),EVe=r(ML," (ConvBERT model)"),ML.forEach(t),yVe=i(y),Yn=n(y,"LI",{});var EL=s(Yn);WH=n(EL,"STRONG",{});var Nxr=s(WH);wVe=r(Nxr,"cpm"),Nxr.forEach(t),AVe=r(EL," \u2014 "),xB=n(EL,"A",{href:!0});var qxr=s(xB);LVe=r(qxr,"CpmTokenizer"),qxr.forEach(t),BVe=r(EL," or "),QH=n(EL,"CODE",{});var Gxr=s(QH);xVe=r(Gxr,"CpmTokenizerFast"),Gxr.forEach(t),kVe=r(EL," (CPM model)"),EL.forEach(t),RVe=i(y),wg=n(y,"LI",{});var P0e=s(wg);HH=n(P0e,"STRONG",{});var Oxr=s(HH);SVe=r(Oxr,"ctrl"),Oxr.forEach(t),PVe=r(P0e," \u2014 "),kB=n(P0e,"A",{href:!0});var Xxr=s(kB);$Ve=r(Xxr,"CTRLTokenizer"),Xxr.forEach(t),IVe=r(P0e," (CTRL model)"),P0e.forEach(t),DVe=i(y),Kn=n(y,"LI",{});var yL=s(Kn);UH=n(yL,"STRONG",{});var Vxr=s(UH);jVe=r(Vxr,"deberta"),Vxr.forEach(t),NVe=r(yL," \u2014 "),RB=n(yL,"A",{href:!0});var zxr=s(RB);qVe=r(zxr,"DebertaTokenizer"),zxr.forEach(t),GVe=r(yL," or "),SB=n(yL,"A",{href:!0});var Wxr=s(SB);OVe=r(Wxr,"DebertaTokenizerFast"),Wxr.forEach(t),XVe=r(yL," (DeBERTa model)"),yL.forEach(t),VVe=i(y),Ag=n(y,"LI",{});var $0e=s(Ag);JH=n($0e,"STRONG",{});var Qxr=s(JH);zVe=r(Qxr,"deberta-v2"),Qxr.forEach(t),WVe=r($0e," \u2014 "),PB=n($0e,"A",{href:!0});var Hxr=s(PB);QVe=r(Hxr,"DebertaV2Tokenizer"),Hxr.forEach(t),HVe=r($0e," (DeBERTa-v2 model)"),$0e.forEach(t),UVe=i(y),Zn=n(y,"LI",{});var wL=s(Zn);YH=n(wL,"STRONG",{});var Uxr=s(YH);JVe=r(Uxr,"distilbert"),Uxr.forEach(t),YVe=r(wL," \u2014 "),$B=n(wL,"A",{href:!0});var Jxr=s($B);KVe=r(Jxr,"DistilBertTokenizer"),Jxr.forEach(t),ZVe=r(wL," or "),IB=n(wL,"A",{href:!0});var Yxr=s(IB);eze=r(Yxr,"DistilBertTokenizerFast"),Yxr.forEach(t),oze=r(wL," (DistilBERT model)"),wL.forEach(t),rze=i(y),es=n(y,"LI",{});var AL=s(es);KH=n(AL,"STRONG",{});var Kxr=s(KH);tze=r(Kxr,"dpr"),Kxr.forEach(t),aze=r(AL," \u2014 "),DB=n(AL,"A",{href:!0});var Zxr=s(DB);nze=r(Zxr,"DPRQuestionEncoderTokenizer"),Zxr.forEach(t),sze=r(AL," or "),jB=n(AL,"A",{href:!0});var ekr=s(jB);lze=r(ekr,"DPRQuestionEncoderTokenizerFast"),ekr.forEach(t),ize=r(AL," (DPR model)"),AL.forEach(t),dze=i(y),os=n(y,"LI",{});var LL=s(os);ZH=n(LL,"STRONG",{});var okr=s(ZH);cze=r(okr,"electra"),okr.forEach(t),fze=r(LL," \u2014 "),NB=n(LL,"A",{href:!0});var rkr=s(NB);mze=r(rkr,"ElectraTokenizer"),rkr.forEach(t),gze=r(LL," or "),qB=n(LL,"A",{href:!0});var tkr=s(qB);hze=r(tkr,"ElectraTokenizerFast"),tkr.forEach(t),pze=r(LL," (ELECTRA model)"),LL.forEach(t),_ze=i(y),Lg=n(y,"LI",{});var I0e=s(Lg);eU=n(I0e,"STRONG",{});var akr=s(eU);uze=r(akr,"flaubert"),akr.forEach(t),bze=r(I0e," \u2014 "),GB=n(I0e,"A",{href:!0});var nkr=s(GB);vze=r(nkr,"FlaubertTokenizer"),nkr.forEach(t),Tze=r(I0e," (FlauBERT model)"),I0e.forEach(t),Fze=i(y),rs=n(y,"LI",{});var BL=s(rs);oU=n(BL,"STRONG",{});var skr=s(oU);Cze=r(skr,"fnet"),skr.forEach(t),Mze=r(BL," \u2014 "),OB=n(BL,"A",{href:!0});var lkr=s(OB);Eze=r(lkr,"FNetTokenizer"),lkr.forEach(t),yze=r(BL," or "),XB=n(BL,"A",{href:!0});var ikr=s(XB);wze=r(ikr,"FNetTokenizerFast"),ikr.forEach(t),Aze=r(BL," (FNet model)"),BL.forEach(t),Lze=i(y),Bg=n(y,"LI",{});var D0e=s(Bg);rU=n(D0e,"STRONG",{});var dkr=s(rU);Bze=r(dkr,"fsmt"),dkr.forEach(t),xze=r(D0e," \u2014 "),VB=n(D0e,"A",{href:!0});var ckr=s(VB);kze=r(ckr,"FSMTTokenizer"),ckr.forEach(t),Rze=r(D0e," (FairSeq Machine-Translation model)"),D0e.forEach(t),Sze=i(y),ts=n(y,"LI",{});var xL=s(ts);tU=n(xL,"STRONG",{});var fkr=s(tU);Pze=r(fkr,"funnel"),fkr.forEach(t),$ze=r(xL," \u2014 "),zB=n(xL,"A",{href:!0});var mkr=s(zB);Ize=r(mkr,"FunnelTokenizer"),mkr.forEach(t),Dze=r(xL," or "),WB=n(xL,"A",{href:!0});var gkr=s(WB);jze=r(gkr,"FunnelTokenizerFast"),gkr.forEach(t),Nze=r(xL," (Funnel Transformer model)"),xL.forEach(t),qze=i(y),as=n(y,"LI",{});var kL=s(as);aU=n(kL,"STRONG",{});var hkr=s(aU);Gze=r(hkr,"gpt2"),hkr.forEach(t),Oze=r(kL," \u2014 "),QB=n(kL,"A",{href:!0});var pkr=s(QB);Xze=r(pkr,"GPT2Tokenizer"),pkr.forEach(t),Vze=r(kL," or "),HB=n(kL,"A",{href:!0});var _kr=s(HB);zze=r(_kr,"GPT2TokenizerFast"),_kr.forEach(t),Wze=r(kL," (OpenAI GPT-2 model)"),kL.forEach(t),Qze=i(y),ns=n(y,"LI",{});var RL=s(ns);nU=n(RL,"STRONG",{});var ukr=s(nU);Hze=r(ukr,"gpt_neo"),ukr.forEach(t),Uze=r(RL," \u2014 "),UB=n(RL,"A",{href:!0});var bkr=s(UB);Jze=r(bkr,"GPT2Tokenizer"),bkr.forEach(t),Yze=r(RL," or "),JB=n(RL,"A",{href:!0});var vkr=s(JB);Kze=r(vkr,"GPT2TokenizerFast"),vkr.forEach(t),Zze=r(RL," (GPT Neo model)"),RL.forEach(t),eWe=i(y),ss=n(y,"LI",{});var SL=s(ss);sU=n(SL,"STRONG",{});var Tkr=s(sU);oWe=r(Tkr,"herbert"),Tkr.forEach(t),rWe=r(SL," \u2014 "),YB=n(SL,"A",{href:!0});var Fkr=s(YB);tWe=r(Fkr,"HerbertTokenizer"),Fkr.forEach(t),aWe=r(SL," or "),KB=n(SL,"A",{href:!0});var Ckr=s(KB);nWe=r(Ckr,"HerbertTokenizerFast"),Ckr.forEach(t),sWe=r(SL," (HerBERT model)"),SL.forEach(t),lWe=i(y),xg=n(y,"LI",{});var j0e=s(xg);lU=n(j0e,"STRONG",{});var Mkr=s(lU);iWe=r(Mkr,"hubert"),Mkr.forEach(t),dWe=r(j0e," \u2014 "),ZB=n(j0e,"A",{href:!0});var Ekr=s(ZB);cWe=r(Ekr,"Wav2Vec2CTCTokenizer"),Ekr.forEach(t),fWe=r(j0e," (Hubert model)"),j0e.forEach(t),mWe=i(y),ls=n(y,"LI",{});var PL=s(ls);iU=n(PL,"STRONG",{});var ykr=s(iU);gWe=r(ykr,"ibert"),ykr.forEach(t),hWe=r(PL," \u2014 "),ex=n(PL,"A",{href:!0});var wkr=s(ex);pWe=r(wkr,"RobertaTokenizer"),wkr.forEach(t),_We=r(PL," or "),ox=n(PL,"A",{href:!0});var Akr=s(ox);uWe=r(Akr,"RobertaTokenizerFast"),Akr.forEach(t),bWe=r(PL," (I-BERT model)"),PL.forEach(t),vWe=i(y),is=n(y,"LI",{});var $L=s(is);dU=n($L,"STRONG",{});var Lkr=s(dU);TWe=r(Lkr,"layoutlm"),Lkr.forEach(t),FWe=r($L," \u2014 "),rx=n($L,"A",{href:!0});var Bkr=s(rx);CWe=r(Bkr,"LayoutLMTokenizer"),Bkr.forEach(t),MWe=r($L," or "),tx=n($L,"A",{href:!0});var xkr=s(tx);EWe=r(xkr,"LayoutLMTokenizerFast"),xkr.forEach(t),yWe=r($L," (LayoutLM model)"),$L.forEach(t),wWe=i(y),ds=n(y,"LI",{});var IL=s(ds);cU=n(IL,"STRONG",{});var kkr=s(cU);AWe=r(kkr,"layoutlmv2"),kkr.forEach(t),LWe=r(IL," \u2014 "),ax=n(IL,"A",{href:!0});var Rkr=s(ax);BWe=r(Rkr,"LayoutLMv2Tokenizer"),Rkr.forEach(t),xWe=r(IL," or "),nx=n(IL,"A",{href:!0});var Skr=s(nx);kWe=r(Skr,"LayoutLMv2TokenizerFast"),Skr.forEach(t),RWe=r(IL," (LayoutLMv2 model)"),IL.forEach(t),SWe=i(y),cs=n(y,"LI",{});var DL=s(cs);fU=n(DL,"STRONG",{});var Pkr=s(fU);PWe=r(Pkr,"layoutxlm"),Pkr.forEach(t),$We=r(DL," \u2014 "),sx=n(DL,"A",{href:!0});var $kr=s(sx);IWe=r($kr,"LayoutXLMTokenizer"),$kr.forEach(t),DWe=r(DL," or "),lx=n(DL,"A",{href:!0});var Ikr=s(lx);jWe=r(Ikr,"LayoutXLMTokenizerFast"),Ikr.forEach(t),NWe=r(DL," (LayoutXLM model)"),DL.forEach(t),qWe=i(y),fs=n(y,"LI",{});var jL=s(fs);mU=n(jL,"STRONG",{});var Dkr=s(mU);GWe=r(Dkr,"led"),Dkr.forEach(t),OWe=r(jL," \u2014 "),ix=n(jL,"A",{href:!0});var jkr=s(ix);XWe=r(jkr,"LEDTokenizer"),jkr.forEach(t),VWe=r(jL," or "),dx=n(jL,"A",{href:!0});var Nkr=s(dx);zWe=r(Nkr,"LEDTokenizerFast"),Nkr.forEach(t),WWe=r(jL," (LED model)"),jL.forEach(t),QWe=i(y),ms=n(y,"LI",{});var NL=s(ms);gU=n(NL,"STRONG",{});var qkr=s(gU);HWe=r(qkr,"longformer"),qkr.forEach(t),UWe=r(NL," \u2014 "),cx=n(NL,"A",{href:!0});var Gkr=s(cx);JWe=r(Gkr,"LongformerTokenizer"),Gkr.forEach(t),YWe=r(NL," or "),fx=n(NL,"A",{href:!0});var Okr=s(fx);KWe=r(Okr,"LongformerTokenizerFast"),Okr.forEach(t),ZWe=r(NL," (Longformer model)"),NL.forEach(t),eQe=i(y),kg=n(y,"LI",{});var N0e=s(kg);hU=n(N0e,"STRONG",{});var Xkr=s(hU);oQe=r(Xkr,"luke"),Xkr.forEach(t),rQe=r(N0e," \u2014 "),mx=n(N0e,"A",{href:!0});var Vkr=s(mx);tQe=r(Vkr,"LukeTokenizer"),Vkr.forEach(t),aQe=r(N0e," (LUKE model)"),N0e.forEach(t),nQe=i(y),gs=n(y,"LI",{});var qL=s(gs);pU=n(qL,"STRONG",{});var zkr=s(pU);sQe=r(zkr,"lxmert"),zkr.forEach(t),lQe=r(qL," \u2014 "),gx=n(qL,"A",{href:!0});var Wkr=s(gx);iQe=r(Wkr,"LxmertTokenizer"),Wkr.forEach(t),dQe=r(qL," or "),hx=n(qL,"A",{href:!0});var Qkr=s(hx);cQe=r(Qkr,"LxmertTokenizerFast"),Qkr.forEach(t),fQe=r(qL," (LXMERT model)"),qL.forEach(t),mQe=i(y),Rg=n(y,"LI",{});var q0e=s(Rg);_U=n(q0e,"STRONG",{});var Hkr=s(_U);gQe=r(Hkr,"m2m_100"),Hkr.forEach(t),hQe=r(q0e," \u2014 "),px=n(q0e,"A",{href:!0});var Ukr=s(px);pQe=r(Ukr,"M2M100Tokenizer"),Ukr.forEach(t),_Qe=r(q0e," (M2M100 model)"),q0e.forEach(t),uQe=i(y),Sg=n(y,"LI",{});var G0e=s(Sg);uU=n(G0e,"STRONG",{});var Jkr=s(uU);bQe=r(Jkr,"marian"),Jkr.forEach(t),vQe=r(G0e," \u2014 "),_x=n(G0e,"A",{href:!0});var Ykr=s(_x);TQe=r(Ykr,"MarianTokenizer"),Ykr.forEach(t),FQe=r(G0e," (Marian model)"),G0e.forEach(t),CQe=i(y),hs=n(y,"LI",{});var GL=s(hs);bU=n(GL,"STRONG",{});var Kkr=s(bU);MQe=r(Kkr,"mbart"),Kkr.forEach(t),EQe=r(GL," \u2014 "),ux=n(GL,"A",{href:!0});var Zkr=s(ux);yQe=r(Zkr,"MBartTokenizer"),Zkr.forEach(t),wQe=r(GL," or "),bx=n(GL,"A",{href:!0});var eRr=s(bx);AQe=r(eRr,"MBartTokenizerFast"),eRr.forEach(t),LQe=r(GL," (mBART model)"),GL.forEach(t),BQe=i(y),ps=n(y,"LI",{});var OL=s(ps);vU=n(OL,"STRONG",{});var oRr=s(vU);xQe=r(oRr,"mbart50"),oRr.forEach(t),kQe=r(OL," \u2014 "),vx=n(OL,"A",{href:!0});var rRr=s(vx);RQe=r(rRr,"MBart50Tokenizer"),rRr.forEach(t),SQe=r(OL," or "),Tx=n(OL,"A",{href:!0});var tRr=s(Tx);PQe=r(tRr,"MBart50TokenizerFast"),tRr.forEach(t),$Qe=r(OL," (mBART-50 model)"),OL.forEach(t),IQe=i(y),Pg=n(y,"LI",{});var O0e=s(Pg);TU=n(O0e,"STRONG",{});var aRr=s(TU);DQe=r(aRr,"mluke"),aRr.forEach(t),jQe=r(O0e," \u2014 "),Fx=n(O0e,"A",{href:!0});var nRr=s(Fx);NQe=r(nRr,"MLukeTokenizer"),nRr.forEach(t),qQe=r(O0e," (mLUKE model)"),O0e.forEach(t),GQe=i(y),_s=n(y,"LI",{});var XL=s(_s);FU=n(XL,"STRONG",{});var sRr=s(FU);OQe=r(sRr,"mobilebert"),sRr.forEach(t),XQe=r(XL," \u2014 "),Cx=n(XL,"A",{href:!0});var lRr=s(Cx);VQe=r(lRr,"MobileBertTokenizer"),lRr.forEach(t),zQe=r(XL," or "),Mx=n(XL,"A",{href:!0});var iRr=s(Mx);WQe=r(iRr,"MobileBertTokenizerFast"),iRr.forEach(t),QQe=r(XL," (MobileBERT model)"),XL.forEach(t),HQe=i(y),us=n(y,"LI",{});var VL=s(us);CU=n(VL,"STRONG",{});var dRr=s(CU);UQe=r(dRr,"mpnet"),dRr.forEach(t),JQe=r(VL," \u2014 "),Ex=n(VL,"A",{href:!0});var cRr=s(Ex);YQe=r(cRr,"MPNetTokenizer"),cRr.forEach(t),KQe=r(VL," or "),yx=n(VL,"A",{href:!0});var fRr=s(yx);ZQe=r(fRr,"MPNetTokenizerFast"),fRr.forEach(t),eHe=r(VL," (MPNet model)"),VL.forEach(t),oHe=i(y),bs=n(y,"LI",{});var zL=s(bs);MU=n(zL,"STRONG",{});var mRr=s(MU);rHe=r(mRr,"mt5"),mRr.forEach(t),tHe=r(zL," \u2014 "),wx=n(zL,"A",{href:!0});var gRr=s(wx);aHe=r(gRr,"MT5Tokenizer"),gRr.forEach(t),nHe=r(zL," or "),Ax=n(zL,"A",{href:!0});var hRr=s(Ax);sHe=r(hRr,"MT5TokenizerFast"),hRr.forEach(t),lHe=r(zL," (mT5 model)"),zL.forEach(t),iHe=i(y),vs=n(y,"LI",{});var WL=s(vs);EU=n(WL,"STRONG",{});var pRr=s(EU);dHe=r(pRr,"openai-gpt"),pRr.forEach(t),cHe=r(WL," \u2014 "),Lx=n(WL,"A",{href:!0});var _Rr=s(Lx);fHe=r(_Rr,"OpenAIGPTTokenizer"),_Rr.forEach(t),mHe=r(WL," or "),Bx=n(WL,"A",{href:!0});var uRr=s(Bx);gHe=r(uRr,"OpenAIGPTTokenizerFast"),uRr.forEach(t),hHe=r(WL," (OpenAI GPT model)"),WL.forEach(t),pHe=i(y),Ts=n(y,"LI",{});var QL=s(Ts);yU=n(QL,"STRONG",{});var bRr=s(yU);_He=r(bRr,"pegasus"),bRr.forEach(t),uHe=r(QL," \u2014 "),xx=n(QL,"A",{href:!0});var vRr=s(xx);bHe=r(vRr,"PegasusTokenizer"),vRr.forEach(t),vHe=r(QL," or "),kx=n(QL,"A",{href:!0});var TRr=s(kx);THe=r(TRr,"PegasusTokenizerFast"),TRr.forEach(t),FHe=r(QL," (Pegasus model)"),QL.forEach(t),CHe=i(y),$g=n(y,"LI",{});var X0e=s($g);wU=n(X0e,"STRONG",{});var FRr=s(wU);MHe=r(FRr,"perceiver"),FRr.forEach(t),EHe=r(X0e," \u2014 "),Rx=n(X0e,"A",{href:!0});var CRr=s(Rx);yHe=r(CRr,"PerceiverTokenizer"),CRr.forEach(t),wHe=r(X0e," (Perceiver model)"),X0e.forEach(t),AHe=i(y),Ig=n(y,"LI",{});var V0e=s(Ig);AU=n(V0e,"STRONG",{});var MRr=s(AU);LHe=r(MRr,"phobert"),MRr.forEach(t),BHe=r(V0e," \u2014 "),Sx=n(V0e,"A",{href:!0});var ERr=s(Sx);xHe=r(ERr,"PhobertTokenizer"),ERr.forEach(t),kHe=r(V0e," (PhoBERT model)"),V0e.forEach(t),RHe=i(y),Dg=n(y,"LI",{});var z0e=s(Dg);LU=n(z0e,"STRONG",{});var yRr=s(LU);SHe=r(yRr,"plbart"),yRr.forEach(t),PHe=r(z0e," \u2014 "),Px=n(z0e,"A",{href:!0});var wRr=s(Px);$He=r(wRr,"PLBartTokenizer"),wRr.forEach(t),IHe=r(z0e," (PLBart model)"),z0e.forEach(t),DHe=i(y),jg=n(y,"LI",{});var W0e=s(jg);BU=n(W0e,"STRONG",{});var ARr=s(BU);jHe=r(ARr,"prophetnet"),ARr.forEach(t),NHe=r(W0e," \u2014 "),$x=n(W0e,"A",{href:!0});var LRr=s($x);qHe=r(LRr,"ProphetNetTokenizer"),LRr.forEach(t),GHe=r(W0e," (ProphetNet model)"),W0e.forEach(t),OHe=i(y),Fs=n(y,"LI",{});var HL=s(Fs);xU=n(HL,"STRONG",{});var BRr=s(xU);XHe=r(BRr,"qdqbert"),BRr.forEach(t),VHe=r(HL," \u2014 "),Ix=n(HL,"A",{href:!0});var xRr=s(Ix);zHe=r(xRr,"BertTokenizer"),xRr.forEach(t),WHe=r(HL," or "),Dx=n(HL,"A",{href:!0});var kRr=s(Dx);QHe=r(kRr,"BertTokenizerFast"),kRr.forEach(t),HHe=r(HL," (QDQBert model)"),HL.forEach(t),UHe=i(y),Ng=n(y,"LI",{});var Q0e=s(Ng);kU=n(Q0e,"STRONG",{});var RRr=s(kU);JHe=r(RRr,"rag"),RRr.forEach(t),YHe=r(Q0e," \u2014 "),jx=n(Q0e,"A",{href:!0});var SRr=s(jx);KHe=r(SRr,"RagTokenizer"),SRr.forEach(t),ZHe=r(Q0e," (RAG model)"),Q0e.forEach(t),eUe=i(y),Cs=n(y,"LI",{});var UL=s(Cs);RU=n(UL,"STRONG",{});var PRr=s(RU);oUe=r(PRr,"reformer"),PRr.forEach(t),rUe=r(UL," \u2014 "),Nx=n(UL,"A",{href:!0});var $Rr=s(Nx);tUe=r($Rr,"ReformerTokenizer"),$Rr.forEach(t),aUe=r(UL," or "),qx=n(UL,"A",{href:!0});var IRr=s(qx);nUe=r(IRr,"ReformerTokenizerFast"),IRr.forEach(t),sUe=r(UL," (Reformer model)"),UL.forEach(t),lUe=i(y),Ms=n(y,"LI",{});var JL=s(Ms);SU=n(JL,"STRONG",{});var DRr=s(SU);iUe=r(DRr,"rembert"),DRr.forEach(t),dUe=r(JL," \u2014 "),Gx=n(JL,"A",{href:!0});var jRr=s(Gx);cUe=r(jRr,"RemBertTokenizer"),jRr.forEach(t),fUe=r(JL," or "),Ox=n(JL,"A",{href:!0});var NRr=s(Ox);mUe=r(NRr,"RemBertTokenizerFast"),NRr.forEach(t),gUe=r(JL," (RemBERT model)"),JL.forEach(t),hUe=i(y),Es=n(y,"LI",{});var YL=s(Es);PU=n(YL,"STRONG",{});var qRr=s(PU);pUe=r(qRr,"retribert"),qRr.forEach(t),_Ue=r(YL," \u2014 "),Xx=n(YL,"A",{href:!0});var GRr=s(Xx);uUe=r(GRr,"RetriBertTokenizer"),GRr.forEach(t),bUe=r(YL," or "),Vx=n(YL,"A",{href:!0});var ORr=s(Vx);vUe=r(ORr,"RetriBertTokenizerFast"),ORr.forEach(t),TUe=r(YL," (RetriBERT model)"),YL.forEach(t),FUe=i(y),ys=n(y,"LI",{});var KL=s(ys);$U=n(KL,"STRONG",{});var XRr=s($U);CUe=r(XRr,"roberta"),XRr.forEach(t),MUe=r(KL," \u2014 "),zx=n(KL,"A",{href:!0});var VRr=s(zx);EUe=r(VRr,"RobertaTokenizer"),VRr.forEach(t),yUe=r(KL," or "),Wx=n(KL,"A",{href:!0});var zRr=s(Wx);wUe=r(zRr,"RobertaTokenizerFast"),zRr.forEach(t),AUe=r(KL," (RoBERTa model)"),KL.forEach(t),LUe=i(y),ws=n(y,"LI",{});var ZL=s(ws);IU=n(ZL,"STRONG",{});var WRr=s(IU);BUe=r(WRr,"roformer"),WRr.forEach(t),xUe=r(ZL," \u2014 "),Qx=n(ZL,"A",{href:!0});var QRr=s(Qx);kUe=r(QRr,"RoFormerTokenizer"),QRr.forEach(t),RUe=r(ZL," or "),Hx=n(ZL,"A",{href:!0});var HRr=s(Hx);SUe=r(HRr,"RoFormerTokenizerFast"),HRr.forEach(t),PUe=r(ZL," (RoFormer model)"),ZL.forEach(t),$Ue=i(y),qg=n(y,"LI",{});var H0e=s(qg);DU=n(H0e,"STRONG",{});var URr=s(DU);IUe=r(URr,"speech_to_text"),URr.forEach(t),DUe=r(H0e," \u2014 "),Ux=n(H0e,"A",{href:!0});var JRr=s(Ux);jUe=r(JRr,"Speech2TextTokenizer"),JRr.forEach(t),NUe=r(H0e," (Speech2Text model)"),H0e.forEach(t),qUe=i(y),Gg=n(y,"LI",{});var U0e=s(Gg);jU=n(U0e,"STRONG",{});var YRr=s(jU);GUe=r(YRr,"speech_to_text_2"),YRr.forEach(t),OUe=r(U0e," \u2014 "),Jx=n(U0e,"A",{href:!0});var KRr=s(Jx);XUe=r(KRr,"Speech2Text2Tokenizer"),KRr.forEach(t),VUe=r(U0e," (Speech2Text2 model)"),U0e.forEach(t),zUe=i(y),As=n(y,"LI",{});var e8=s(As);NU=n(e8,"STRONG",{});var ZRr=s(NU);WUe=r(ZRr,"splinter"),ZRr.forEach(t),QUe=r(e8," \u2014 "),Yx=n(e8,"A",{href:!0});var eSr=s(Yx);HUe=r(eSr,"SplinterTokenizer"),eSr.forEach(t),UUe=r(e8," or "),Kx=n(e8,"A",{href:!0});var oSr=s(Kx);JUe=r(oSr,"SplinterTokenizerFast"),oSr.forEach(t),YUe=r(e8," (Splinter model)"),e8.forEach(t),KUe=i(y),Ls=n(y,"LI",{});var o8=s(Ls);qU=n(o8,"STRONG",{});var rSr=s(qU);ZUe=r(rSr,"squeezebert"),rSr.forEach(t),eJe=r(o8," \u2014 "),Zx=n(o8,"A",{href:!0});var tSr=s(Zx);oJe=r(tSr,"SqueezeBertTokenizer"),tSr.forEach(t),rJe=r(o8," or "),ek=n(o8,"A",{href:!0});var aSr=s(ek);tJe=r(aSr,"SqueezeBertTokenizerFast"),aSr.forEach(t),aJe=r(o8," (SqueezeBERT model)"),o8.forEach(t),nJe=i(y),Bs=n(y,"LI",{});var r8=s(Bs);GU=n(r8,"STRONG",{});var nSr=s(GU);sJe=r(nSr,"t5"),nSr.forEach(t),lJe=r(r8," \u2014 "),ok=n(r8,"A",{href:!0});var sSr=s(ok);iJe=r(sSr,"T5Tokenizer"),sSr.forEach(t),dJe=r(r8," or "),rk=n(r8,"A",{href:!0});var lSr=s(rk);cJe=r(lSr,"T5TokenizerFast"),lSr.forEach(t),fJe=r(r8," (T5 model)"),r8.forEach(t),mJe=i(y),Og=n(y,"LI",{});var J0e=s(Og);OU=n(J0e,"STRONG",{});var iSr=s(OU);gJe=r(iSr,"tapas"),iSr.forEach(t),hJe=r(J0e," \u2014 "),tk=n(J0e,"A",{href:!0});var dSr=s(tk);pJe=r(dSr,"TapasTokenizer"),dSr.forEach(t),_Je=r(J0e," (TAPAS model)"),J0e.forEach(t),uJe=i(y),Xg=n(y,"LI",{});var Y0e=s(Xg);XU=n(Y0e,"STRONG",{});var cSr=s(XU);bJe=r(cSr,"transfo-xl"),cSr.forEach(t),vJe=r(Y0e," \u2014 "),ak=n(Y0e,"A",{href:!0});var fSr=s(ak);TJe=r(fSr,"TransfoXLTokenizer"),fSr.forEach(t),FJe=r(Y0e," (Transformer-XL model)"),Y0e.forEach(t),CJe=i(y),Vg=n(y,"LI",{});var K0e=s(Vg);VU=n(K0e,"STRONG",{});var mSr=s(VU);MJe=r(mSr,"wav2vec2"),mSr.forEach(t),EJe=r(K0e," \u2014 "),nk=n(K0e,"A",{href:!0});var gSr=s(nk);yJe=r(gSr,"Wav2Vec2CTCTokenizer"),gSr.forEach(t),wJe=r(K0e," (Wav2Vec2 model)"),K0e.forEach(t),AJe=i(y),zg=n(y,"LI",{});var Z0e=s(zg);zU=n(Z0e,"STRONG",{});var hSr=s(zU);LJe=r(hSr,"wav2vec2_phoneme"),hSr.forEach(t),BJe=r(Z0e," \u2014 "),sk=n(Z0e,"A",{href:!0});var pSr=s(sk);xJe=r(pSr,"Wav2Vec2PhonemeCTCTokenizer"),pSr.forEach(t),kJe=r(Z0e," (Wav2Vec2Phoneme model)"),Z0e.forEach(t),RJe=i(y),xs=n(y,"LI",{});var t8=s(xs);WU=n(t8,"STRONG",{});var _Sr=s(WU);SJe=r(_Sr,"xglm"),_Sr.forEach(t),PJe=r(t8," \u2014 "),lk=n(t8,"A",{href:!0});var uSr=s(lk);$Je=r(uSr,"XGLMTokenizer"),uSr.forEach(t),IJe=r(t8," or "),ik=n(t8,"A",{href:!0});var bSr=s(ik);DJe=r(bSr,"XGLMTokenizerFast"),bSr.forEach(t),jJe=r(t8," (XGLM model)"),t8.forEach(t),NJe=i(y),Wg=n(y,"LI",{});var eTe=s(Wg);QU=n(eTe,"STRONG",{});var vSr=s(QU);qJe=r(vSr,"xlm"),vSr.forEach(t),GJe=r(eTe," \u2014 "),dk=n(eTe,"A",{href:!0});var TSr=s(dk);OJe=r(TSr,"XLMTokenizer"),TSr.forEach(t),XJe=r(eTe," (XLM model)"),eTe.forEach(t),VJe=i(y),Qg=n(y,"LI",{});var oTe=s(Qg);HU=n(oTe,"STRONG",{});var FSr=s(HU);zJe=r(FSr,"xlm-prophetnet"),FSr.forEach(t),WJe=r(oTe," \u2014 "),ck=n(oTe,"A",{href:!0});var CSr=s(ck);QJe=r(CSr,"XLMProphetNetTokenizer"),CSr.forEach(t),HJe=r(oTe," (XLMProphetNet model)"),oTe.forEach(t),UJe=i(y),ks=n(y,"LI",{});var a8=s(ks);UU=n(a8,"STRONG",{});var MSr=s(UU);JJe=r(MSr,"xlm-roberta"),MSr.forEach(t),YJe=r(a8," \u2014 "),fk=n(a8,"A",{href:!0});var ESr=s(fk);KJe=r(ESr,"XLMRobertaTokenizer"),ESr.forEach(t),ZJe=r(a8," or "),mk=n(a8,"A",{href:!0});var ySr=s(mk);eYe=r(ySr,"XLMRobertaTokenizerFast"),ySr.forEach(t),oYe=r(a8," (XLM-RoBERTa model)"),a8.forEach(t),rYe=i(y),Rs=n(y,"LI",{});var n8=s(Rs);JU=n(n8,"STRONG",{});var wSr=s(JU);tYe=r(wSr,"xlnet"),wSr.forEach(t),aYe=r(n8," \u2014 "),gk=n(n8,"A",{href:!0});var ASr=s(gk);nYe=r(ASr,"XLNetTokenizer"),ASr.forEach(t),sYe=r(n8," or "),hk=n(n8,"A",{href:!0});var LSr=s(hk);lYe=r(LSr,"XLNetTokenizerFast"),LSr.forEach(t),iYe=r(n8," (XLNet model)"),n8.forEach(t),y.forEach(t),dYe=i(da),YU=n(da,"P",{});var BSr=s(YU);cYe=r(BSr,"Examples:"),BSr.forEach(t),fYe=i(da),m(OM.$$.fragment,da),da.forEach(t),mYe=i(Ds),Hg=n(Ds,"DIV",{class:!0});var Vxe=s(Hg);m(XM.$$.fragment,Vxe),gYe=i(Vxe),KU=n(Vxe,"P",{});var xSr=s(KU);hYe=r(xSr,"Register a new tokenizer in this mapping."),xSr.forEach(t),Vxe.forEach(t),Ds.forEach(t),O9e=i(c),Ni=n(c,"H2",{class:!0});var zxe=s(Ni);Ug=n(zxe,"A",{id:!0,class:!0,href:!0});var kSr=s(Ug);ZU=n(kSr,"SPAN",{});var RSr=s(ZU);m(VM.$$.fragment,RSr),RSr.forEach(t),kSr.forEach(t),pYe=i(zxe),eJ=n(zxe,"SPAN",{});var SSr=s(eJ);_Ye=r(SSr,"AutoFeatureExtractor"),SSr.forEach(t),zxe.forEach(t),X9e=i(c),zo=n(c,"DIV",{class:!0});var js=s(zo);m(zM.$$.fragment,js),uYe=i(js),WM=n(js,"P",{});var Wxe=s(WM);bYe=r(Wxe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),pk=n(Wxe,"A",{href:!0});var PSr=s(pk);vYe=r(PSr,"AutoFeatureExtractor.from_pretrained()"),PSr.forEach(t),TYe=r(Wxe," class method."),Wxe.forEach(t),FYe=i(js),QM=n(js,"P",{});var Qxe=s(QM);CYe=r(Qxe,"This class cannot be instantiated directly using "),oJ=n(Qxe,"CODE",{});var $Sr=s(oJ);MYe=r($Sr,"__init__()"),$Sr.forEach(t),EYe=r(Qxe," (throws an error)."),Qxe.forEach(t),yYe=i(js),ke=n(js,"DIV",{class:!0});var St=s(ke);m(HM.$$.fragment,St),wYe=i(St),rJ=n(St,"P",{});var ISr=s(rJ);AYe=r(ISr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),ISr.forEach(t),LYe=i(St),ja=n(St,"P",{});var A4=s(ja);BYe=r(A4,"The feature extractor class to instantiate is selected based on the "),tJ=n(A4,"CODE",{});var DSr=s(tJ);xYe=r(DSr,"model_type"),DSr.forEach(t),kYe=r(A4,` property of the config object
(either passed as an argument or loaded from `),aJ=n(A4,"CODE",{});var jSr=s(aJ);RYe=r(jSr,"pretrained_model_name_or_path"),jSr.forEach(t),SYe=r(A4,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),nJ=n(A4,"CODE",{});var NSr=s(nJ);PYe=r(NSr,"pretrained_model_name_or_path"),NSr.forEach(t),$Ye=r(A4,":"),A4.forEach(t),IYe=i(St),ae=n(St,"UL",{});var le=s(ae);Jg=n(le,"LI",{});var rTe=s(Jg);sJ=n(rTe,"STRONG",{});var qSr=s(sJ);DYe=r(qSr,"beit"),qSr.forEach(t),jYe=r(rTe," \u2014 "),_k=n(rTe,"A",{href:!0});var GSr=s(_k);NYe=r(GSr,"BeitFeatureExtractor"),GSr.forEach(t),qYe=r(rTe," (BEiT model)"),rTe.forEach(t),GYe=i(le),Yg=n(le,"LI",{});var tTe=s(Yg);lJ=n(tTe,"STRONG",{});var OSr=s(lJ);OYe=r(OSr,"clip"),OSr.forEach(t),XYe=r(tTe," \u2014 "),uk=n(tTe,"A",{href:!0});var XSr=s(uk);VYe=r(XSr,"CLIPFeatureExtractor"),XSr.forEach(t),zYe=r(tTe," (CLIP model)"),tTe.forEach(t),WYe=i(le),Kg=n(le,"LI",{});var aTe=s(Kg);iJ=n(aTe,"STRONG",{});var VSr=s(iJ);QYe=r(VSr,"convnext"),VSr.forEach(t),HYe=r(aTe," \u2014 "),bk=n(aTe,"A",{href:!0});var zSr=s(bk);UYe=r(zSr,"ConvNextFeatureExtractor"),zSr.forEach(t),JYe=r(aTe," (ConvNext model)"),aTe.forEach(t),YYe=i(le),Zg=n(le,"LI",{});var nTe=s(Zg);dJ=n(nTe,"STRONG",{});var WSr=s(dJ);KYe=r(WSr,"deit"),WSr.forEach(t),ZYe=r(nTe," \u2014 "),vk=n(nTe,"A",{href:!0});var QSr=s(vk);eKe=r(QSr,"DeiTFeatureExtractor"),QSr.forEach(t),oKe=r(nTe," (DeiT model)"),nTe.forEach(t),rKe=i(le),eh=n(le,"LI",{});var sTe=s(eh);cJ=n(sTe,"STRONG",{});var HSr=s(cJ);tKe=r(HSr,"detr"),HSr.forEach(t),aKe=r(sTe," \u2014 "),Tk=n(sTe,"A",{href:!0});var USr=s(Tk);nKe=r(USr,"DetrFeatureExtractor"),USr.forEach(t),sKe=r(sTe," (DETR model)"),sTe.forEach(t),lKe=i(le),oh=n(le,"LI",{});var lTe=s(oh);fJ=n(lTe,"STRONG",{});var JSr=s(fJ);iKe=r(JSr,"hubert"),JSr.forEach(t),dKe=r(lTe," \u2014 "),Fk=n(lTe,"A",{href:!0});var YSr=s(Fk);cKe=r(YSr,"Wav2Vec2FeatureExtractor"),YSr.forEach(t),fKe=r(lTe," (Hubert model)"),lTe.forEach(t),mKe=i(le),rh=n(le,"LI",{});var iTe=s(rh);mJ=n(iTe,"STRONG",{});var KSr=s(mJ);gKe=r(KSr,"layoutlmv2"),KSr.forEach(t),hKe=r(iTe," \u2014 "),Ck=n(iTe,"A",{href:!0});var ZSr=s(Ck);pKe=r(ZSr,"LayoutLMv2FeatureExtractor"),ZSr.forEach(t),_Ke=r(iTe," (LayoutLMv2 model)"),iTe.forEach(t),uKe=i(le),th=n(le,"LI",{});var dTe=s(th);gJ=n(dTe,"STRONG",{});var ePr=s(gJ);bKe=r(ePr,"perceiver"),ePr.forEach(t),vKe=r(dTe," \u2014 "),Mk=n(dTe,"A",{href:!0});var oPr=s(Mk);TKe=r(oPr,"PerceiverFeatureExtractor"),oPr.forEach(t),FKe=r(dTe," (Perceiver model)"),dTe.forEach(t),CKe=i(le),ah=n(le,"LI",{});var cTe=s(ah);hJ=n(cTe,"STRONG",{});var rPr=s(hJ);MKe=r(rPr,"poolformer"),rPr.forEach(t),EKe=r(cTe," \u2014 "),Ek=n(cTe,"A",{href:!0});var tPr=s(Ek);yKe=r(tPr,"PoolFormerFeatureExtractor"),tPr.forEach(t),wKe=r(cTe," (PoolFormer model)"),cTe.forEach(t),AKe=i(le),nh=n(le,"LI",{});var fTe=s(nh);pJ=n(fTe,"STRONG",{});var aPr=s(pJ);LKe=r(aPr,"resnet"),aPr.forEach(t),BKe=r(fTe," \u2014 "),yk=n(fTe,"A",{href:!0});var nPr=s(yk);xKe=r(nPr,"ConvNextFeatureExtractor"),nPr.forEach(t),kKe=r(fTe," (ResNet model)"),fTe.forEach(t),RKe=i(le),sh=n(le,"LI",{});var mTe=s(sh);_J=n(mTe,"STRONG",{});var sPr=s(_J);SKe=r(sPr,"segformer"),sPr.forEach(t),PKe=r(mTe," \u2014 "),wk=n(mTe,"A",{href:!0});var lPr=s(wk);$Ke=r(lPr,"SegformerFeatureExtractor"),lPr.forEach(t),IKe=r(mTe," (SegFormer model)"),mTe.forEach(t),DKe=i(le),lh=n(le,"LI",{});var gTe=s(lh);uJ=n(gTe,"STRONG",{});var iPr=s(uJ);jKe=r(iPr,"speech_to_text"),iPr.forEach(t),NKe=r(gTe," \u2014 "),Ak=n(gTe,"A",{href:!0});var dPr=s(Ak);qKe=r(dPr,"Speech2TextFeatureExtractor"),dPr.forEach(t),GKe=r(gTe," (Speech2Text model)"),gTe.forEach(t),OKe=i(le),ih=n(le,"LI",{});var hTe=s(ih);bJ=n(hTe,"STRONG",{});var cPr=s(bJ);XKe=r(cPr,"swin"),cPr.forEach(t),VKe=r(hTe," \u2014 "),Lk=n(hTe,"A",{href:!0});var fPr=s(Lk);zKe=r(fPr,"ViTFeatureExtractor"),fPr.forEach(t),WKe=r(hTe," (Swin model)"),hTe.forEach(t),QKe=i(le),dh=n(le,"LI",{});var pTe=s(dh);vJ=n(pTe,"STRONG",{});var mPr=s(vJ);HKe=r(mPr,"vit"),mPr.forEach(t),UKe=r(pTe," \u2014 "),Bk=n(pTe,"A",{href:!0});var gPr=s(Bk);JKe=r(gPr,"ViTFeatureExtractor"),gPr.forEach(t),YKe=r(pTe," (ViT model)"),pTe.forEach(t),KKe=i(le),ch=n(le,"LI",{});var _Te=s(ch);TJ=n(_Te,"STRONG",{});var hPr=s(TJ);ZKe=r(hPr,"vit_mae"),hPr.forEach(t),eZe=r(_Te," \u2014 "),xk=n(_Te,"A",{href:!0});var pPr=s(xk);oZe=r(pPr,"ViTFeatureExtractor"),pPr.forEach(t),rZe=r(_Te," (ViTMAE model)"),_Te.forEach(t),tZe=i(le),fh=n(le,"LI",{});var uTe=s(fh);FJ=n(uTe,"STRONG",{});var _Pr=s(FJ);aZe=r(_Pr,"wav2vec2"),_Pr.forEach(t),nZe=r(uTe," \u2014 "),kk=n(uTe,"A",{href:!0});var uPr=s(kk);sZe=r(uPr,"Wav2Vec2FeatureExtractor"),uPr.forEach(t),lZe=r(uTe," (Wav2Vec2 model)"),uTe.forEach(t),le.forEach(t),iZe=i(St),m(mh.$$.fragment,St),dZe=i(St),CJ=n(St,"P",{});var bPr=s(CJ);cZe=r(bPr,"Examples:"),bPr.forEach(t),fZe=i(St),m(UM.$$.fragment,St),St.forEach(t),mZe=i(js),gh=n(js,"DIV",{class:!0});var Hxe=s(gh);m(JM.$$.fragment,Hxe),gZe=i(Hxe),MJ=n(Hxe,"P",{});var vPr=s(MJ);hZe=r(vPr,"Register a new feature extractor for this class."),vPr.forEach(t),Hxe.forEach(t),js.forEach(t),V9e=i(c),qi=n(c,"H2",{class:!0});var Uxe=s(qi);hh=n(Uxe,"A",{id:!0,class:!0,href:!0});var TPr=s(hh);EJ=n(TPr,"SPAN",{});var FPr=s(EJ);m(YM.$$.fragment,FPr),FPr.forEach(t),TPr.forEach(t),pZe=i(Uxe),yJ=n(Uxe,"SPAN",{});var CPr=s(yJ);_Ze=r(CPr,"AutoProcessor"),CPr.forEach(t),Uxe.forEach(t),z9e=i(c),Wo=n(c,"DIV",{class:!0});var Ns=s(Wo);m(KM.$$.fragment,Ns),uZe=i(Ns),ZM=n(Ns,"P",{});var Jxe=s(ZM);bZe=r(Jxe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Rk=n(Jxe,"A",{href:!0});var MPr=s(Rk);vZe=r(MPr,"AutoProcessor.from_pretrained()"),MPr.forEach(t),TZe=r(Jxe," class method."),Jxe.forEach(t),FZe=i(Ns),eE=n(Ns,"P",{});var Yxe=s(eE);CZe=r(Yxe,"This class cannot be instantiated directly using "),wJ=n(Yxe,"CODE",{});var EPr=s(wJ);MZe=r(EPr,"__init__()"),EPr.forEach(t),EZe=r(Yxe," (throws an error)."),Yxe.forEach(t),yZe=i(Ns),Re=n(Ns,"DIV",{class:!0});var Pt=s(Re);m(oE.$$.fragment,Pt),wZe=i(Pt),AJ=n(Pt,"P",{});var yPr=s(AJ);AZe=r(yPr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),yPr.forEach(t),LZe=i(Pt),Gi=n(Pt,"P",{});var IV=s(Gi);BZe=r(IV,"The processor class to instantiate is selected based on the "),LJ=n(IV,"CODE",{});var wPr=s(LJ);xZe=r(wPr,"model_type"),wPr.forEach(t),kZe=r(IV,` property of the config object (either
passed as an argument or loaded from `),BJ=n(IV,"CODE",{});var APr=s(BJ);RZe=r(APr,"pretrained_model_name_or_path"),APr.forEach(t),SZe=r(IV," if possible):"),IV.forEach(t),PZe=i(Pt),Ae=n(Pt,"UL",{});var jo=s(Ae);ph=n(jo,"LI",{});var bTe=s(ph);xJ=n(bTe,"STRONG",{});var LPr=s(xJ);$Ze=r(LPr,"clip"),LPr.forEach(t),IZe=r(bTe," \u2014 "),Sk=n(bTe,"A",{href:!0});var BPr=s(Sk);DZe=r(BPr,"CLIPProcessor"),BPr.forEach(t),jZe=r(bTe," (CLIP model)"),bTe.forEach(t),NZe=i(jo),_h=n(jo,"LI",{});var vTe=s(_h);kJ=n(vTe,"STRONG",{});var xPr=s(kJ);qZe=r(xPr,"layoutlmv2"),xPr.forEach(t),GZe=r(vTe," \u2014 "),Pk=n(vTe,"A",{href:!0});var kPr=s(Pk);OZe=r(kPr,"LayoutLMv2Processor"),kPr.forEach(t),XZe=r(vTe," (LayoutLMv2 model)"),vTe.forEach(t),VZe=i(jo),uh=n(jo,"LI",{});var TTe=s(uh);RJ=n(TTe,"STRONG",{});var RPr=s(RJ);zZe=r(RPr,"layoutxlm"),RPr.forEach(t),WZe=r(TTe," \u2014 "),$k=n(TTe,"A",{href:!0});var SPr=s($k);QZe=r(SPr,"LayoutXLMProcessor"),SPr.forEach(t),HZe=r(TTe," (LayoutXLM model)"),TTe.forEach(t),UZe=i(jo),bh=n(jo,"LI",{});var FTe=s(bh);SJ=n(FTe,"STRONG",{});var PPr=s(SJ);JZe=r(PPr,"speech_to_text"),PPr.forEach(t),YZe=r(FTe," \u2014 "),Ik=n(FTe,"A",{href:!0});var $Pr=s(Ik);KZe=r($Pr,"Speech2TextProcessor"),$Pr.forEach(t),ZZe=r(FTe," (Speech2Text model)"),FTe.forEach(t),eeo=i(jo),vh=n(jo,"LI",{});var CTe=s(vh);PJ=n(CTe,"STRONG",{});var IPr=s(PJ);oeo=r(IPr,"speech_to_text_2"),IPr.forEach(t),reo=r(CTe," \u2014 "),Dk=n(CTe,"A",{href:!0});var DPr=s(Dk);teo=r(DPr,"Speech2Text2Processor"),DPr.forEach(t),aeo=r(CTe," (Speech2Text2 model)"),CTe.forEach(t),neo=i(jo),Th=n(jo,"LI",{});var MTe=s(Th);$J=n(MTe,"STRONG",{});var jPr=s($J);seo=r(jPr,"trocr"),jPr.forEach(t),leo=r(MTe," \u2014 "),jk=n(MTe,"A",{href:!0});var NPr=s(jk);ieo=r(NPr,"TrOCRProcessor"),NPr.forEach(t),deo=r(MTe," (TrOCR model)"),MTe.forEach(t),ceo=i(jo),Fh=n(jo,"LI",{});var ETe=s(Fh);IJ=n(ETe,"STRONG",{});var qPr=s(IJ);feo=r(qPr,"vision-text-dual-encoder"),qPr.forEach(t),meo=r(ETe," \u2014 "),Nk=n(ETe,"A",{href:!0});var GPr=s(Nk);geo=r(GPr,"VisionTextDualEncoderProcessor"),GPr.forEach(t),heo=r(ETe," (VisionTextDualEncoder model)"),ETe.forEach(t),peo=i(jo),Ch=n(jo,"LI",{});var yTe=s(Ch);DJ=n(yTe,"STRONG",{});var OPr=s(DJ);_eo=r(OPr,"wav2vec2"),OPr.forEach(t),ueo=r(yTe," \u2014 "),qk=n(yTe,"A",{href:!0});var XPr=s(qk);beo=r(XPr,"Wav2Vec2Processor"),XPr.forEach(t),veo=r(yTe," (Wav2Vec2 model)"),yTe.forEach(t),jo.forEach(t),Teo=i(Pt),m(Mh.$$.fragment,Pt),Feo=i(Pt),jJ=n(Pt,"P",{});var VPr=s(jJ);Ceo=r(VPr,"Examples:"),VPr.forEach(t),Meo=i(Pt),m(rE.$$.fragment,Pt),Pt.forEach(t),Eeo=i(Ns),Eh=n(Ns,"DIV",{class:!0});var Kxe=s(Eh);m(tE.$$.fragment,Kxe),yeo=i(Kxe),NJ=n(Kxe,"P",{});var zPr=s(NJ);weo=r(zPr,"Register a new processor for this class."),zPr.forEach(t),Kxe.forEach(t),Ns.forEach(t),W9e=i(c),Oi=n(c,"H2",{class:!0});var Zxe=s(Oi);yh=n(Zxe,"A",{id:!0,class:!0,href:!0});var WPr=s(yh);qJ=n(WPr,"SPAN",{});var QPr=s(qJ);m(aE.$$.fragment,QPr),QPr.forEach(t),WPr.forEach(t),Aeo=i(Zxe),GJ=n(Zxe,"SPAN",{});var HPr=s(GJ);Leo=r(HPr,"AutoModel"),HPr.forEach(t),Zxe.forEach(t),Q9e=i(c),Qo=n(c,"DIV",{class:!0});var qs=s(Qo);m(nE.$$.fragment,qs),Beo=i(qs),Xi=n(qs,"P",{});var DV=s(Xi);xeo=r(DV,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OJ=n(DV,"CODE",{});var UPr=s(OJ);keo=r(UPr,"from_pretrained()"),UPr.forEach(t),Reo=r(DV,"class method or the "),XJ=n(DV,"CODE",{});var JPr=s(XJ);Seo=r(JPr,"from_config()"),JPr.forEach(t),Peo=r(DV,`class
method.`),DV.forEach(t),$eo=i(qs),sE=n(qs,"P",{});var eke=s(sE);Ieo=r(eke,"This class cannot be instantiated directly using "),VJ=n(eke,"CODE",{});var YPr=s(VJ);Deo=r(YPr,"__init__()"),YPr.forEach(t),jeo=r(eke," (throws an error)."),eke.forEach(t),Neo=i(qs),qr=n(qs,"DIV",{class:!0});var Gs=s(qr);m(lE.$$.fragment,Gs),qeo=i(Gs),zJ=n(Gs,"P",{});var KPr=s(zJ);Geo=r(KPr,"Instantiates one of the base model classes of the library from a configuration."),KPr.forEach(t),Oeo=i(Gs),Vi=n(Gs,"P",{});var jV=s(Vi);Xeo=r(jV,`Note:
Loading a model from its configuration file does `),WJ=n(jV,"STRONG",{});var ZPr=s(WJ);Veo=r(ZPr,"not"),ZPr.forEach(t),zeo=r(jV,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(jV,"CODE",{});var e$r=s(QJ);Weo=r(e$r,"from_pretrained()"),e$r.forEach(t),Qeo=r(jV,"to load the model weights."),jV.forEach(t),Heo=i(Gs),HJ=n(Gs,"P",{});var o$r=s(HJ);Ueo=r(o$r,"Examples:"),o$r.forEach(t),Jeo=i(Gs),m(iE.$$.fragment,Gs),Gs.forEach(t),Yeo=i(qs),Se=n(qs,"DIV",{class:!0});var $t=s(Se);m(dE.$$.fragment,$t),Keo=i($t),UJ=n($t,"P",{});var r$r=s(UJ);Zeo=r(r$r,"Instantiate one of the base model classes of the library from a pretrained model."),r$r.forEach(t),eoo=i($t),Na=n($t,"P",{});var L4=s(Na);ooo=r(L4,"The model class to instantiate is selected based on the "),JJ=n(L4,"CODE",{});var t$r=s(JJ);roo=r(t$r,"model_type"),t$r.forEach(t),too=r(L4,` property of the config object (either
passed as an argument or loaded from `),YJ=n(L4,"CODE",{});var a$r=s(YJ);aoo=r(a$r,"pretrained_model_name_or_path"),a$r.forEach(t),noo=r(L4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KJ=n(L4,"CODE",{});var n$r=s(KJ);soo=r(n$r,"pretrained_model_name_or_path"),n$r.forEach(t),loo=r(L4,":"),L4.forEach(t),ioo=i($t),F=n($t,"UL",{});var C=s(F);wh=n(C,"LI",{});var wTe=s(wh);ZJ=n(wTe,"STRONG",{});var s$r=s(ZJ);doo=r(s$r,"albert"),s$r.forEach(t),coo=r(wTe," \u2014 "),Gk=n(wTe,"A",{href:!0});var l$r=s(Gk);foo=r(l$r,"AlbertModel"),l$r.forEach(t),moo=r(wTe," (ALBERT model)"),wTe.forEach(t),goo=i(C),Ah=n(C,"LI",{});var ATe=s(Ah);eY=n(ATe,"STRONG",{});var i$r=s(eY);hoo=r(i$r,"bart"),i$r.forEach(t),poo=r(ATe," \u2014 "),Ok=n(ATe,"A",{href:!0});var d$r=s(Ok);_oo=r(d$r,"BartModel"),d$r.forEach(t),uoo=r(ATe," (BART model)"),ATe.forEach(t),boo=i(C),Lh=n(C,"LI",{});var LTe=s(Lh);oY=n(LTe,"STRONG",{});var c$r=s(oY);voo=r(c$r,"beit"),c$r.forEach(t),Too=r(LTe," \u2014 "),Xk=n(LTe,"A",{href:!0});var f$r=s(Xk);Foo=r(f$r,"BeitModel"),f$r.forEach(t),Coo=r(LTe," (BEiT model)"),LTe.forEach(t),Moo=i(C),Bh=n(C,"LI",{});var BTe=s(Bh);rY=n(BTe,"STRONG",{});var m$r=s(rY);Eoo=r(m$r,"bert"),m$r.forEach(t),yoo=r(BTe," \u2014 "),Vk=n(BTe,"A",{href:!0});var g$r=s(Vk);woo=r(g$r,"BertModel"),g$r.forEach(t),Aoo=r(BTe," (BERT model)"),BTe.forEach(t),Loo=i(C),xh=n(C,"LI",{});var xTe=s(xh);tY=n(xTe,"STRONG",{});var h$r=s(tY);Boo=r(h$r,"bert-generation"),h$r.forEach(t),xoo=r(xTe," \u2014 "),zk=n(xTe,"A",{href:!0});var p$r=s(zk);koo=r(p$r,"BertGenerationEncoder"),p$r.forEach(t),Roo=r(xTe," (Bert Generation model)"),xTe.forEach(t),Soo=i(C),kh=n(C,"LI",{});var kTe=s(kh);aY=n(kTe,"STRONG",{});var _$r=s(aY);Poo=r(_$r,"big_bird"),_$r.forEach(t),$oo=r(kTe," \u2014 "),Wk=n(kTe,"A",{href:!0});var u$r=s(Wk);Ioo=r(u$r,"BigBirdModel"),u$r.forEach(t),Doo=r(kTe," (BigBird model)"),kTe.forEach(t),joo=i(C),Rh=n(C,"LI",{});var RTe=s(Rh);nY=n(RTe,"STRONG",{});var b$r=s(nY);Noo=r(b$r,"bigbird_pegasus"),b$r.forEach(t),qoo=r(RTe," \u2014 "),Qk=n(RTe,"A",{href:!0});var v$r=s(Qk);Goo=r(v$r,"BigBirdPegasusModel"),v$r.forEach(t),Ooo=r(RTe," (BigBirdPegasus model)"),RTe.forEach(t),Xoo=i(C),Sh=n(C,"LI",{});var STe=s(Sh);sY=n(STe,"STRONG",{});var T$r=s(sY);Voo=r(T$r,"blenderbot"),T$r.forEach(t),zoo=r(STe," \u2014 "),Hk=n(STe,"A",{href:!0});var F$r=s(Hk);Woo=r(F$r,"BlenderbotModel"),F$r.forEach(t),Qoo=r(STe," (Blenderbot model)"),STe.forEach(t),Hoo=i(C),Ph=n(C,"LI",{});var PTe=s(Ph);lY=n(PTe,"STRONG",{});var C$r=s(lY);Uoo=r(C$r,"blenderbot-small"),C$r.forEach(t),Joo=r(PTe," \u2014 "),Uk=n(PTe,"A",{href:!0});var M$r=s(Uk);Yoo=r(M$r,"BlenderbotSmallModel"),M$r.forEach(t),Koo=r(PTe," (BlenderbotSmall model)"),PTe.forEach(t),Zoo=i(C),$h=n(C,"LI",{});var $Te=s($h);iY=n($Te,"STRONG",{});var E$r=s(iY);ero=r(E$r,"camembert"),E$r.forEach(t),oro=r($Te," \u2014 "),Jk=n($Te,"A",{href:!0});var y$r=s(Jk);rro=r(y$r,"CamembertModel"),y$r.forEach(t),tro=r($Te," (CamemBERT model)"),$Te.forEach(t),aro=i(C),Ih=n(C,"LI",{});var ITe=s(Ih);dY=n(ITe,"STRONG",{});var w$r=s(dY);nro=r(w$r,"canine"),w$r.forEach(t),sro=r(ITe," \u2014 "),Yk=n(ITe,"A",{href:!0});var A$r=s(Yk);lro=r(A$r,"CanineModel"),A$r.forEach(t),iro=r(ITe," (Canine model)"),ITe.forEach(t),dro=i(C),Dh=n(C,"LI",{});var DTe=s(Dh);cY=n(DTe,"STRONG",{});var L$r=s(cY);cro=r(L$r,"clip"),L$r.forEach(t),fro=r(DTe," \u2014 "),Kk=n(DTe,"A",{href:!0});var B$r=s(Kk);mro=r(B$r,"CLIPModel"),B$r.forEach(t),gro=r(DTe," (CLIP model)"),DTe.forEach(t),hro=i(C),jh=n(C,"LI",{});var jTe=s(jh);fY=n(jTe,"STRONG",{});var x$r=s(fY);pro=r(x$r,"convbert"),x$r.forEach(t),_ro=r(jTe," \u2014 "),Zk=n(jTe,"A",{href:!0});var k$r=s(Zk);uro=r(k$r,"ConvBertModel"),k$r.forEach(t),bro=r(jTe," (ConvBERT model)"),jTe.forEach(t),vro=i(C),Nh=n(C,"LI",{});var NTe=s(Nh);mY=n(NTe,"STRONG",{});var R$r=s(mY);Tro=r(R$r,"convnext"),R$r.forEach(t),Fro=r(NTe," \u2014 "),eR=n(NTe,"A",{href:!0});var S$r=s(eR);Cro=r(S$r,"ConvNextModel"),S$r.forEach(t),Mro=r(NTe," (ConvNext model)"),NTe.forEach(t),Ero=i(C),qh=n(C,"LI",{});var qTe=s(qh);gY=n(qTe,"STRONG",{});var P$r=s(gY);yro=r(P$r,"ctrl"),P$r.forEach(t),wro=r(qTe," \u2014 "),oR=n(qTe,"A",{href:!0});var $$r=s(oR);Aro=r($$r,"CTRLModel"),$$r.forEach(t),Lro=r(qTe," (CTRL model)"),qTe.forEach(t),Bro=i(C),Gh=n(C,"LI",{});var GTe=s(Gh);hY=n(GTe,"STRONG",{});var I$r=s(hY);xro=r(I$r,"data2vec-audio"),I$r.forEach(t),kro=r(GTe," \u2014 "),rR=n(GTe,"A",{href:!0});var D$r=s(rR);Rro=r(D$r,"Data2VecAudioModel"),D$r.forEach(t),Sro=r(GTe," (Data2VecAudio model)"),GTe.forEach(t),Pro=i(C),Oh=n(C,"LI",{});var OTe=s(Oh);pY=n(OTe,"STRONG",{});var j$r=s(pY);$ro=r(j$r,"data2vec-text"),j$r.forEach(t),Iro=r(OTe," \u2014 "),tR=n(OTe,"A",{href:!0});var N$r=s(tR);Dro=r(N$r,"Data2VecTextModel"),N$r.forEach(t),jro=r(OTe," (Data2VecText model)"),OTe.forEach(t),Nro=i(C),Xh=n(C,"LI",{});var XTe=s(Xh);_Y=n(XTe,"STRONG",{});var q$r=s(_Y);qro=r(q$r,"deberta"),q$r.forEach(t),Gro=r(XTe," \u2014 "),aR=n(XTe,"A",{href:!0});var G$r=s(aR);Oro=r(G$r,"DebertaModel"),G$r.forEach(t),Xro=r(XTe," (DeBERTa model)"),XTe.forEach(t),Vro=i(C),Vh=n(C,"LI",{});var VTe=s(Vh);uY=n(VTe,"STRONG",{});var O$r=s(uY);zro=r(O$r,"deberta-v2"),O$r.forEach(t),Wro=r(VTe," \u2014 "),nR=n(VTe,"A",{href:!0});var X$r=s(nR);Qro=r(X$r,"DebertaV2Model"),X$r.forEach(t),Hro=r(VTe," (DeBERTa-v2 model)"),VTe.forEach(t),Uro=i(C),zh=n(C,"LI",{});var zTe=s(zh);bY=n(zTe,"STRONG",{});var V$r=s(bY);Jro=r(V$r,"deit"),V$r.forEach(t),Yro=r(zTe," \u2014 "),sR=n(zTe,"A",{href:!0});var z$r=s(sR);Kro=r(z$r,"DeiTModel"),z$r.forEach(t),Zro=r(zTe," (DeiT model)"),zTe.forEach(t),eto=i(C),Wh=n(C,"LI",{});var WTe=s(Wh);vY=n(WTe,"STRONG",{});var W$r=s(vY);oto=r(W$r,"detr"),W$r.forEach(t),rto=r(WTe," \u2014 "),lR=n(WTe,"A",{href:!0});var Q$r=s(lR);tto=r(Q$r,"DetrModel"),Q$r.forEach(t),ato=r(WTe," (DETR model)"),WTe.forEach(t),nto=i(C),Qh=n(C,"LI",{});var QTe=s(Qh);TY=n(QTe,"STRONG",{});var H$r=s(TY);sto=r(H$r,"distilbert"),H$r.forEach(t),lto=r(QTe," \u2014 "),iR=n(QTe,"A",{href:!0});var U$r=s(iR);ito=r(U$r,"DistilBertModel"),U$r.forEach(t),dto=r(QTe," (DistilBERT model)"),QTe.forEach(t),cto=i(C),Hh=n(C,"LI",{});var HTe=s(Hh);FY=n(HTe,"STRONG",{});var J$r=s(FY);fto=r(J$r,"dpr"),J$r.forEach(t),mto=r(HTe," \u2014 "),dR=n(HTe,"A",{href:!0});var Y$r=s(dR);gto=r(Y$r,"DPRQuestionEncoder"),Y$r.forEach(t),hto=r(HTe," (DPR model)"),HTe.forEach(t),pto=i(C),Uh=n(C,"LI",{});var UTe=s(Uh);CY=n(UTe,"STRONG",{});var K$r=s(CY);_to=r(K$r,"electra"),K$r.forEach(t),uto=r(UTe," \u2014 "),cR=n(UTe,"A",{href:!0});var Z$r=s(cR);bto=r(Z$r,"ElectraModel"),Z$r.forEach(t),vto=r(UTe," (ELECTRA model)"),UTe.forEach(t),Tto=i(C),Jh=n(C,"LI",{});var JTe=s(Jh);MY=n(JTe,"STRONG",{});var eIr=s(MY);Fto=r(eIr,"flaubert"),eIr.forEach(t),Cto=r(JTe," \u2014 "),fR=n(JTe,"A",{href:!0});var oIr=s(fR);Mto=r(oIr,"FlaubertModel"),oIr.forEach(t),Eto=r(JTe," (FlauBERT model)"),JTe.forEach(t),yto=i(C),Yh=n(C,"LI",{});var YTe=s(Yh);EY=n(YTe,"STRONG",{});var rIr=s(EY);wto=r(rIr,"fnet"),rIr.forEach(t),Ato=r(YTe," \u2014 "),mR=n(YTe,"A",{href:!0});var tIr=s(mR);Lto=r(tIr,"FNetModel"),tIr.forEach(t),Bto=r(YTe," (FNet model)"),YTe.forEach(t),xto=i(C),Kh=n(C,"LI",{});var KTe=s(Kh);yY=n(KTe,"STRONG",{});var aIr=s(yY);kto=r(aIr,"fsmt"),aIr.forEach(t),Rto=r(KTe," \u2014 "),gR=n(KTe,"A",{href:!0});var nIr=s(gR);Sto=r(nIr,"FSMTModel"),nIr.forEach(t),Pto=r(KTe," (FairSeq Machine-Translation model)"),KTe.forEach(t),$to=i(C),Ss=n(C,"LI",{});var s8=s(Ss);wY=n(s8,"STRONG",{});var sIr=s(wY);Ito=r(sIr,"funnel"),sIr.forEach(t),Dto=r(s8," \u2014 "),hR=n(s8,"A",{href:!0});var lIr=s(hR);jto=r(lIr,"FunnelModel"),lIr.forEach(t),Nto=r(s8," or "),pR=n(s8,"A",{href:!0});var iIr=s(pR);qto=r(iIr,"FunnelBaseModel"),iIr.forEach(t),Gto=r(s8," (Funnel Transformer model)"),s8.forEach(t),Oto=i(C),Zh=n(C,"LI",{});var ZTe=s(Zh);AY=n(ZTe,"STRONG",{});var dIr=s(AY);Xto=r(dIr,"gpt2"),dIr.forEach(t),Vto=r(ZTe," \u2014 "),_R=n(ZTe,"A",{href:!0});var cIr=s(_R);zto=r(cIr,"GPT2Model"),cIr.forEach(t),Wto=r(ZTe," (OpenAI GPT-2 model)"),ZTe.forEach(t),Qto=i(C),ep=n(C,"LI",{});var eFe=s(ep);LY=n(eFe,"STRONG",{});var fIr=s(LY);Hto=r(fIr,"gpt_neo"),fIr.forEach(t),Uto=r(eFe," \u2014 "),uR=n(eFe,"A",{href:!0});var mIr=s(uR);Jto=r(mIr,"GPTNeoModel"),mIr.forEach(t),Yto=r(eFe," (GPT Neo model)"),eFe.forEach(t),Kto=i(C),op=n(C,"LI",{});var oFe=s(op);BY=n(oFe,"STRONG",{});var gIr=s(BY);Zto=r(gIr,"gptj"),gIr.forEach(t),eao=r(oFe," \u2014 "),bR=n(oFe,"A",{href:!0});var hIr=s(bR);oao=r(hIr,"GPTJModel"),hIr.forEach(t),rao=r(oFe," (GPT-J model)"),oFe.forEach(t),tao=i(C),rp=n(C,"LI",{});var rFe=s(rp);xY=n(rFe,"STRONG",{});var pIr=s(xY);aao=r(pIr,"hubert"),pIr.forEach(t),nao=r(rFe," \u2014 "),vR=n(rFe,"A",{href:!0});var _Ir=s(vR);sao=r(_Ir,"HubertModel"),_Ir.forEach(t),lao=r(rFe," (Hubert model)"),rFe.forEach(t),iao=i(C),tp=n(C,"LI",{});var tFe=s(tp);kY=n(tFe,"STRONG",{});var uIr=s(kY);dao=r(uIr,"ibert"),uIr.forEach(t),cao=r(tFe," \u2014 "),TR=n(tFe,"A",{href:!0});var bIr=s(TR);fao=r(bIr,"IBertModel"),bIr.forEach(t),mao=r(tFe," (I-BERT model)"),tFe.forEach(t),gao=i(C),ap=n(C,"LI",{});var aFe=s(ap);RY=n(aFe,"STRONG",{});var vIr=s(RY);hao=r(vIr,"imagegpt"),vIr.forEach(t),pao=r(aFe," \u2014 "),FR=n(aFe,"A",{href:!0});var TIr=s(FR);_ao=r(TIr,"ImageGPTModel"),TIr.forEach(t),uao=r(aFe," (ImageGPT model)"),aFe.forEach(t),bao=i(C),np=n(C,"LI",{});var nFe=s(np);SY=n(nFe,"STRONG",{});var FIr=s(SY);vao=r(FIr,"layoutlm"),FIr.forEach(t),Tao=r(nFe," \u2014 "),CR=n(nFe,"A",{href:!0});var CIr=s(CR);Fao=r(CIr,"LayoutLMModel"),CIr.forEach(t),Cao=r(nFe," (LayoutLM model)"),nFe.forEach(t),Mao=i(C),sp=n(C,"LI",{});var sFe=s(sp);PY=n(sFe,"STRONG",{});var MIr=s(PY);Eao=r(MIr,"layoutlmv2"),MIr.forEach(t),yao=r(sFe," \u2014 "),MR=n(sFe,"A",{href:!0});var EIr=s(MR);wao=r(EIr,"LayoutLMv2Model"),EIr.forEach(t),Aao=r(sFe," (LayoutLMv2 model)"),sFe.forEach(t),Lao=i(C),lp=n(C,"LI",{});var lFe=s(lp);$Y=n(lFe,"STRONG",{});var yIr=s($Y);Bao=r(yIr,"led"),yIr.forEach(t),xao=r(lFe," \u2014 "),ER=n(lFe,"A",{href:!0});var wIr=s(ER);kao=r(wIr,"LEDModel"),wIr.forEach(t),Rao=r(lFe," (LED model)"),lFe.forEach(t),Sao=i(C),ip=n(C,"LI",{});var iFe=s(ip);IY=n(iFe,"STRONG",{});var AIr=s(IY);Pao=r(AIr,"longformer"),AIr.forEach(t),$ao=r(iFe," \u2014 "),yR=n(iFe,"A",{href:!0});var LIr=s(yR);Iao=r(LIr,"LongformerModel"),LIr.forEach(t),Dao=r(iFe," (Longformer model)"),iFe.forEach(t),jao=i(C),dp=n(C,"LI",{});var dFe=s(dp);DY=n(dFe,"STRONG",{});var BIr=s(DY);Nao=r(BIr,"luke"),BIr.forEach(t),qao=r(dFe," \u2014 "),wR=n(dFe,"A",{href:!0});var xIr=s(wR);Gao=r(xIr,"LukeModel"),xIr.forEach(t),Oao=r(dFe," (LUKE model)"),dFe.forEach(t),Xao=i(C),cp=n(C,"LI",{});var cFe=s(cp);jY=n(cFe,"STRONG",{});var kIr=s(jY);Vao=r(kIr,"lxmert"),kIr.forEach(t),zao=r(cFe," \u2014 "),AR=n(cFe,"A",{href:!0});var RIr=s(AR);Wao=r(RIr,"LxmertModel"),RIr.forEach(t),Qao=r(cFe," (LXMERT model)"),cFe.forEach(t),Hao=i(C),fp=n(C,"LI",{});var fFe=s(fp);NY=n(fFe,"STRONG",{});var SIr=s(NY);Uao=r(SIr,"m2m_100"),SIr.forEach(t),Jao=r(fFe," \u2014 "),LR=n(fFe,"A",{href:!0});var PIr=s(LR);Yao=r(PIr,"M2M100Model"),PIr.forEach(t),Kao=r(fFe," (M2M100 model)"),fFe.forEach(t),Zao=i(C),mp=n(C,"LI",{});var mFe=s(mp);qY=n(mFe,"STRONG",{});var $Ir=s(qY);eno=r($Ir,"marian"),$Ir.forEach(t),ono=r(mFe," \u2014 "),BR=n(mFe,"A",{href:!0});var IIr=s(BR);rno=r(IIr,"MarianModel"),IIr.forEach(t),tno=r(mFe," (Marian model)"),mFe.forEach(t),ano=i(C),gp=n(C,"LI",{});var gFe=s(gp);GY=n(gFe,"STRONG",{});var DIr=s(GY);nno=r(DIr,"mbart"),DIr.forEach(t),sno=r(gFe," \u2014 "),xR=n(gFe,"A",{href:!0});var jIr=s(xR);lno=r(jIr,"MBartModel"),jIr.forEach(t),ino=r(gFe," (mBART model)"),gFe.forEach(t),dno=i(C),hp=n(C,"LI",{});var hFe=s(hp);OY=n(hFe,"STRONG",{});var NIr=s(OY);cno=r(NIr,"megatron-bert"),NIr.forEach(t),fno=r(hFe," \u2014 "),kR=n(hFe,"A",{href:!0});var qIr=s(kR);mno=r(qIr,"MegatronBertModel"),qIr.forEach(t),gno=r(hFe," (MegatronBert model)"),hFe.forEach(t),hno=i(C),pp=n(C,"LI",{});var pFe=s(pp);XY=n(pFe,"STRONG",{});var GIr=s(XY);pno=r(GIr,"mobilebert"),GIr.forEach(t),_no=r(pFe," \u2014 "),RR=n(pFe,"A",{href:!0});var OIr=s(RR);uno=r(OIr,"MobileBertModel"),OIr.forEach(t),bno=r(pFe," (MobileBERT model)"),pFe.forEach(t),vno=i(C),_p=n(C,"LI",{});var _Fe=s(_p);VY=n(_Fe,"STRONG",{});var XIr=s(VY);Tno=r(XIr,"mpnet"),XIr.forEach(t),Fno=r(_Fe," \u2014 "),SR=n(_Fe,"A",{href:!0});var VIr=s(SR);Cno=r(VIr,"MPNetModel"),VIr.forEach(t),Mno=r(_Fe," (MPNet model)"),_Fe.forEach(t),Eno=i(C),up=n(C,"LI",{});var uFe=s(up);zY=n(uFe,"STRONG",{});var zIr=s(zY);yno=r(zIr,"mt5"),zIr.forEach(t),wno=r(uFe," \u2014 "),PR=n(uFe,"A",{href:!0});var WIr=s(PR);Ano=r(WIr,"MT5Model"),WIr.forEach(t),Lno=r(uFe," (mT5 model)"),uFe.forEach(t),Bno=i(C),bp=n(C,"LI",{});var bFe=s(bp);WY=n(bFe,"STRONG",{});var QIr=s(WY);xno=r(QIr,"nystromformer"),QIr.forEach(t),kno=r(bFe," \u2014 "),$R=n(bFe,"A",{href:!0});var HIr=s($R);Rno=r(HIr,"NystromformerModel"),HIr.forEach(t),Sno=r(bFe," (Nystromformer model)"),bFe.forEach(t),Pno=i(C),vp=n(C,"LI",{});var vFe=s(vp);QY=n(vFe,"STRONG",{});var UIr=s(QY);$no=r(UIr,"openai-gpt"),UIr.forEach(t),Ino=r(vFe," \u2014 "),IR=n(vFe,"A",{href:!0});var JIr=s(IR);Dno=r(JIr,"OpenAIGPTModel"),JIr.forEach(t),jno=r(vFe," (OpenAI GPT model)"),vFe.forEach(t),Nno=i(C),Tp=n(C,"LI",{});var TFe=s(Tp);HY=n(TFe,"STRONG",{});var YIr=s(HY);qno=r(YIr,"pegasus"),YIr.forEach(t),Gno=r(TFe," \u2014 "),DR=n(TFe,"A",{href:!0});var KIr=s(DR);Ono=r(KIr,"PegasusModel"),KIr.forEach(t),Xno=r(TFe," (Pegasus model)"),TFe.forEach(t),Vno=i(C),Fp=n(C,"LI",{});var FFe=s(Fp);UY=n(FFe,"STRONG",{});var ZIr=s(UY);zno=r(ZIr,"perceiver"),ZIr.forEach(t),Wno=r(FFe," \u2014 "),jR=n(FFe,"A",{href:!0});var eDr=s(jR);Qno=r(eDr,"PerceiverModel"),eDr.forEach(t),Hno=r(FFe," (Perceiver model)"),FFe.forEach(t),Uno=i(C),Cp=n(C,"LI",{});var CFe=s(Cp);JY=n(CFe,"STRONG",{});var oDr=s(JY);Jno=r(oDr,"plbart"),oDr.forEach(t),Yno=r(CFe," \u2014 "),NR=n(CFe,"A",{href:!0});var rDr=s(NR);Kno=r(rDr,"PLBartModel"),rDr.forEach(t),Zno=r(CFe," (PLBart model)"),CFe.forEach(t),eso=i(C),Mp=n(C,"LI",{});var MFe=s(Mp);YY=n(MFe,"STRONG",{});var tDr=s(YY);oso=r(tDr,"poolformer"),tDr.forEach(t),rso=r(MFe," \u2014 "),qR=n(MFe,"A",{href:!0});var aDr=s(qR);tso=r(aDr,"PoolFormerModel"),aDr.forEach(t),aso=r(MFe," (PoolFormer model)"),MFe.forEach(t),nso=i(C),Ep=n(C,"LI",{});var EFe=s(Ep);KY=n(EFe,"STRONG",{});var nDr=s(KY);sso=r(nDr,"prophetnet"),nDr.forEach(t),lso=r(EFe," \u2014 "),GR=n(EFe,"A",{href:!0});var sDr=s(GR);iso=r(sDr,"ProphetNetModel"),sDr.forEach(t),dso=r(EFe," (ProphetNet model)"),EFe.forEach(t),cso=i(C),yp=n(C,"LI",{});var yFe=s(yp);ZY=n(yFe,"STRONG",{});var lDr=s(ZY);fso=r(lDr,"qdqbert"),lDr.forEach(t),mso=r(yFe," \u2014 "),OR=n(yFe,"A",{href:!0});var iDr=s(OR);gso=r(iDr,"QDQBertModel"),iDr.forEach(t),hso=r(yFe," (QDQBert model)"),yFe.forEach(t),pso=i(C),wp=n(C,"LI",{});var wFe=s(wp);eK=n(wFe,"STRONG",{});var dDr=s(eK);_so=r(dDr,"reformer"),dDr.forEach(t),uso=r(wFe," \u2014 "),XR=n(wFe,"A",{href:!0});var cDr=s(XR);bso=r(cDr,"ReformerModel"),cDr.forEach(t),vso=r(wFe," (Reformer model)"),wFe.forEach(t),Tso=i(C),Ap=n(C,"LI",{});var AFe=s(Ap);oK=n(AFe,"STRONG",{});var fDr=s(oK);Fso=r(fDr,"rembert"),fDr.forEach(t),Cso=r(AFe," \u2014 "),VR=n(AFe,"A",{href:!0});var mDr=s(VR);Mso=r(mDr,"RemBertModel"),mDr.forEach(t),Eso=r(AFe," (RemBERT model)"),AFe.forEach(t),yso=i(C),Lp=n(C,"LI",{});var LFe=s(Lp);rK=n(LFe,"STRONG",{});var gDr=s(rK);wso=r(gDr,"resnet"),gDr.forEach(t),Aso=r(LFe," \u2014 "),zR=n(LFe,"A",{href:!0});var hDr=s(zR);Lso=r(hDr,"ResNetModel"),hDr.forEach(t),Bso=r(LFe," (ResNet model)"),LFe.forEach(t),xso=i(C),Bp=n(C,"LI",{});var BFe=s(Bp);tK=n(BFe,"STRONG",{});var pDr=s(tK);kso=r(pDr,"retribert"),pDr.forEach(t),Rso=r(BFe," \u2014 "),WR=n(BFe,"A",{href:!0});var _Dr=s(WR);Sso=r(_Dr,"RetriBertModel"),_Dr.forEach(t),Pso=r(BFe," (RetriBERT model)"),BFe.forEach(t),$so=i(C),xp=n(C,"LI",{});var xFe=s(xp);aK=n(xFe,"STRONG",{});var uDr=s(aK);Iso=r(uDr,"roberta"),uDr.forEach(t),Dso=r(xFe," \u2014 "),QR=n(xFe,"A",{href:!0});var bDr=s(QR);jso=r(bDr,"RobertaModel"),bDr.forEach(t),Nso=r(xFe," (RoBERTa model)"),xFe.forEach(t),qso=i(C),kp=n(C,"LI",{});var kFe=s(kp);nK=n(kFe,"STRONG",{});var vDr=s(nK);Gso=r(vDr,"roformer"),vDr.forEach(t),Oso=r(kFe," \u2014 "),HR=n(kFe,"A",{href:!0});var TDr=s(HR);Xso=r(TDr,"RoFormerModel"),TDr.forEach(t),Vso=r(kFe," (RoFormer model)"),kFe.forEach(t),zso=i(C),Rp=n(C,"LI",{});var RFe=s(Rp);sK=n(RFe,"STRONG",{});var FDr=s(sK);Wso=r(FDr,"segformer"),FDr.forEach(t),Qso=r(RFe," \u2014 "),UR=n(RFe,"A",{href:!0});var CDr=s(UR);Hso=r(CDr,"SegformerModel"),CDr.forEach(t),Uso=r(RFe," (SegFormer model)"),RFe.forEach(t),Jso=i(C),Sp=n(C,"LI",{});var SFe=s(Sp);lK=n(SFe,"STRONG",{});var MDr=s(lK);Yso=r(MDr,"sew"),MDr.forEach(t),Kso=r(SFe," \u2014 "),JR=n(SFe,"A",{href:!0});var EDr=s(JR);Zso=r(EDr,"SEWModel"),EDr.forEach(t),elo=r(SFe," (SEW model)"),SFe.forEach(t),olo=i(C),Pp=n(C,"LI",{});var PFe=s(Pp);iK=n(PFe,"STRONG",{});var yDr=s(iK);rlo=r(yDr,"sew-d"),yDr.forEach(t),tlo=r(PFe," \u2014 "),YR=n(PFe,"A",{href:!0});var wDr=s(YR);alo=r(wDr,"SEWDModel"),wDr.forEach(t),nlo=r(PFe," (SEW-D model)"),PFe.forEach(t),slo=i(C),$p=n(C,"LI",{});var $Fe=s($p);dK=n($Fe,"STRONG",{});var ADr=s(dK);llo=r(ADr,"speech_to_text"),ADr.forEach(t),ilo=r($Fe," \u2014 "),KR=n($Fe,"A",{href:!0});var LDr=s(KR);dlo=r(LDr,"Speech2TextModel"),LDr.forEach(t),clo=r($Fe," (Speech2Text model)"),$Fe.forEach(t),flo=i(C),Ip=n(C,"LI",{});var IFe=s(Ip);cK=n(IFe,"STRONG",{});var BDr=s(cK);mlo=r(BDr,"splinter"),BDr.forEach(t),glo=r(IFe," \u2014 "),ZR=n(IFe,"A",{href:!0});var xDr=s(ZR);hlo=r(xDr,"SplinterModel"),xDr.forEach(t),plo=r(IFe," (Splinter model)"),IFe.forEach(t),_lo=i(C),Dp=n(C,"LI",{});var DFe=s(Dp);fK=n(DFe,"STRONG",{});var kDr=s(fK);ulo=r(kDr,"squeezebert"),kDr.forEach(t),blo=r(DFe," \u2014 "),eS=n(DFe,"A",{href:!0});var RDr=s(eS);vlo=r(RDr,"SqueezeBertModel"),RDr.forEach(t),Tlo=r(DFe," (SqueezeBERT model)"),DFe.forEach(t),Flo=i(C),jp=n(C,"LI",{});var jFe=s(jp);mK=n(jFe,"STRONG",{});var SDr=s(mK);Clo=r(SDr,"swin"),SDr.forEach(t),Mlo=r(jFe," \u2014 "),oS=n(jFe,"A",{href:!0});var PDr=s(oS);Elo=r(PDr,"SwinModel"),PDr.forEach(t),ylo=r(jFe," (Swin model)"),jFe.forEach(t),wlo=i(C),Np=n(C,"LI",{});var NFe=s(Np);gK=n(NFe,"STRONG",{});var $Dr=s(gK);Alo=r($Dr,"t5"),$Dr.forEach(t),Llo=r(NFe," \u2014 "),rS=n(NFe,"A",{href:!0});var IDr=s(rS);Blo=r(IDr,"T5Model"),IDr.forEach(t),xlo=r(NFe," (T5 model)"),NFe.forEach(t),klo=i(C),qp=n(C,"LI",{});var qFe=s(qp);hK=n(qFe,"STRONG",{});var DDr=s(hK);Rlo=r(DDr,"tapas"),DDr.forEach(t),Slo=r(qFe," \u2014 "),tS=n(qFe,"A",{href:!0});var jDr=s(tS);Plo=r(jDr,"TapasModel"),jDr.forEach(t),$lo=r(qFe," (TAPAS model)"),qFe.forEach(t),Ilo=i(C),Gp=n(C,"LI",{});var GFe=s(Gp);pK=n(GFe,"STRONG",{});var NDr=s(pK);Dlo=r(NDr,"transfo-xl"),NDr.forEach(t),jlo=r(GFe," \u2014 "),aS=n(GFe,"A",{href:!0});var qDr=s(aS);Nlo=r(qDr,"TransfoXLModel"),qDr.forEach(t),qlo=r(GFe," (Transformer-XL model)"),GFe.forEach(t),Glo=i(C),Op=n(C,"LI",{});var OFe=s(Op);_K=n(OFe,"STRONG",{});var GDr=s(_K);Olo=r(GDr,"unispeech"),GDr.forEach(t),Xlo=r(OFe," \u2014 "),nS=n(OFe,"A",{href:!0});var ODr=s(nS);Vlo=r(ODr,"UniSpeechModel"),ODr.forEach(t),zlo=r(OFe," (UniSpeech model)"),OFe.forEach(t),Wlo=i(C),Xp=n(C,"LI",{});var XFe=s(Xp);uK=n(XFe,"STRONG",{});var XDr=s(uK);Qlo=r(XDr,"unispeech-sat"),XDr.forEach(t),Hlo=r(XFe," \u2014 "),sS=n(XFe,"A",{href:!0});var VDr=s(sS);Ulo=r(VDr,"UniSpeechSatModel"),VDr.forEach(t),Jlo=r(XFe," (UniSpeechSat model)"),XFe.forEach(t),Ylo=i(C),Vp=n(C,"LI",{});var VFe=s(Vp);bK=n(VFe,"STRONG",{});var zDr=s(bK);Klo=r(zDr,"vilt"),zDr.forEach(t),Zlo=r(VFe," \u2014 "),lS=n(VFe,"A",{href:!0});var WDr=s(lS);eio=r(WDr,"ViltModel"),WDr.forEach(t),oio=r(VFe," (ViLT model)"),VFe.forEach(t),rio=i(C),zp=n(C,"LI",{});var zFe=s(zp);vK=n(zFe,"STRONG",{});var QDr=s(vK);tio=r(QDr,"vision-text-dual-encoder"),QDr.forEach(t),aio=r(zFe," \u2014 "),iS=n(zFe,"A",{href:!0});var HDr=s(iS);nio=r(HDr,"VisionTextDualEncoderModel"),HDr.forEach(t),sio=r(zFe," (VisionTextDualEncoder model)"),zFe.forEach(t),lio=i(C),Wp=n(C,"LI",{});var WFe=s(Wp);TK=n(WFe,"STRONG",{});var UDr=s(TK);iio=r(UDr,"visual_bert"),UDr.forEach(t),dio=r(WFe," \u2014 "),dS=n(WFe,"A",{href:!0});var JDr=s(dS);cio=r(JDr,"VisualBertModel"),JDr.forEach(t),fio=r(WFe," (VisualBert model)"),WFe.forEach(t),mio=i(C),Qp=n(C,"LI",{});var QFe=s(Qp);FK=n(QFe,"STRONG",{});var YDr=s(FK);gio=r(YDr,"vit"),YDr.forEach(t),hio=r(QFe," \u2014 "),cS=n(QFe,"A",{href:!0});var KDr=s(cS);pio=r(KDr,"ViTModel"),KDr.forEach(t),_io=r(QFe," (ViT model)"),QFe.forEach(t),uio=i(C),Hp=n(C,"LI",{});var HFe=s(Hp);CK=n(HFe,"STRONG",{});var ZDr=s(CK);bio=r(ZDr,"vit_mae"),ZDr.forEach(t),vio=r(HFe," \u2014 "),fS=n(HFe,"A",{href:!0});var ejr=s(fS);Tio=r(ejr,"ViTMAEModel"),ejr.forEach(t),Fio=r(HFe," (ViTMAE model)"),HFe.forEach(t),Cio=i(C),Up=n(C,"LI",{});var UFe=s(Up);MK=n(UFe,"STRONG",{});var ojr=s(MK);Mio=r(ojr,"wav2vec2"),ojr.forEach(t),Eio=r(UFe," \u2014 "),mS=n(UFe,"A",{href:!0});var rjr=s(mS);yio=r(rjr,"Wav2Vec2Model"),rjr.forEach(t),wio=r(UFe," (Wav2Vec2 model)"),UFe.forEach(t),Aio=i(C),Jp=n(C,"LI",{});var JFe=s(Jp);EK=n(JFe,"STRONG",{});var tjr=s(EK);Lio=r(tjr,"wavlm"),tjr.forEach(t),Bio=r(JFe," \u2014 "),gS=n(JFe,"A",{href:!0});var ajr=s(gS);xio=r(ajr,"WavLMModel"),ajr.forEach(t),kio=r(JFe," (WavLM model)"),JFe.forEach(t),Rio=i(C),Yp=n(C,"LI",{});var YFe=s(Yp);yK=n(YFe,"STRONG",{});var njr=s(yK);Sio=r(njr,"xglm"),njr.forEach(t),Pio=r(YFe," \u2014 "),hS=n(YFe,"A",{href:!0});var sjr=s(hS);$io=r(sjr,"XGLMModel"),sjr.forEach(t),Iio=r(YFe," (XGLM model)"),YFe.forEach(t),Dio=i(C),Kp=n(C,"LI",{});var KFe=s(Kp);wK=n(KFe,"STRONG",{});var ljr=s(wK);jio=r(ljr,"xlm"),ljr.forEach(t),Nio=r(KFe," \u2014 "),pS=n(KFe,"A",{href:!0});var ijr=s(pS);qio=r(ijr,"XLMModel"),ijr.forEach(t),Gio=r(KFe," (XLM model)"),KFe.forEach(t),Oio=i(C),Zp=n(C,"LI",{});var ZFe=s(Zp);AK=n(ZFe,"STRONG",{});var djr=s(AK);Xio=r(djr,"xlm-prophetnet"),djr.forEach(t),Vio=r(ZFe," \u2014 "),_S=n(ZFe,"A",{href:!0});var cjr=s(_S);zio=r(cjr,"XLMProphetNetModel"),cjr.forEach(t),Wio=r(ZFe," (XLMProphetNet model)"),ZFe.forEach(t),Qio=i(C),e_=n(C,"LI",{});var eCe=s(e_);LK=n(eCe,"STRONG",{});var fjr=s(LK);Hio=r(fjr,"xlm-roberta"),fjr.forEach(t),Uio=r(eCe," \u2014 "),uS=n(eCe,"A",{href:!0});var mjr=s(uS);Jio=r(mjr,"XLMRobertaModel"),mjr.forEach(t),Yio=r(eCe," (XLM-RoBERTa model)"),eCe.forEach(t),Kio=i(C),o_=n(C,"LI",{});var oCe=s(o_);BK=n(oCe,"STRONG",{});var gjr=s(BK);Zio=r(gjr,"xlm-roberta-xl"),gjr.forEach(t),edo=r(oCe," \u2014 "),bS=n(oCe,"A",{href:!0});var hjr=s(bS);odo=r(hjr,"XLMRobertaXLModel"),hjr.forEach(t),rdo=r(oCe," (XLM-RoBERTa-XL model)"),oCe.forEach(t),tdo=i(C),r_=n(C,"LI",{});var rCe=s(r_);xK=n(rCe,"STRONG",{});var pjr=s(xK);ado=r(pjr,"xlnet"),pjr.forEach(t),ndo=r(rCe," \u2014 "),vS=n(rCe,"A",{href:!0});var _jr=s(vS);sdo=r(_jr,"XLNetModel"),_jr.forEach(t),ldo=r(rCe," (XLNet model)"),rCe.forEach(t),ido=i(C),t_=n(C,"LI",{});var tCe=s(t_);kK=n(tCe,"STRONG",{});var ujr=s(kK);ddo=r(ujr,"yoso"),ujr.forEach(t),cdo=r(tCe," \u2014 "),TS=n(tCe,"A",{href:!0});var bjr=s(TS);fdo=r(bjr,"YosoModel"),bjr.forEach(t),mdo=r(tCe," (YOSO model)"),tCe.forEach(t),C.forEach(t),gdo=i($t),a_=n($t,"P",{});var aCe=s(a_);hdo=r(aCe,"The model is set in evaluation mode by default using "),RK=n(aCe,"CODE",{});var vjr=s(RK);pdo=r(vjr,"model.eval()"),vjr.forEach(t),_do=r(aCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SK=n(aCe,"CODE",{});var Tjr=s(SK);udo=r(Tjr,"model.train()"),Tjr.forEach(t),aCe.forEach(t),bdo=i($t),PK=n($t,"P",{});var Fjr=s(PK);vdo=r(Fjr,"Examples:"),Fjr.forEach(t),Tdo=i($t),m(cE.$$.fragment,$t),$t.forEach(t),qs.forEach(t),H9e=i(c),zi=n(c,"H2",{class:!0});var oke=s(zi);n_=n(oke,"A",{id:!0,class:!0,href:!0});var Cjr=s(n_);$K=n(Cjr,"SPAN",{});var Mjr=s($K);m(fE.$$.fragment,Mjr),Mjr.forEach(t),Cjr.forEach(t),Fdo=i(oke),IK=n(oke,"SPAN",{});var Ejr=s(IK);Cdo=r(Ejr,"AutoModelForPreTraining"),Ejr.forEach(t),oke.forEach(t),U9e=i(c),Ho=n(c,"DIV",{class:!0});var Os=s(Ho);m(mE.$$.fragment,Os),Mdo=i(Os),Wi=n(Os,"P",{});var NV=s(Wi);Edo=r(NV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),DK=n(NV,"CODE",{});var yjr=s(DK);ydo=r(yjr,"from_pretrained()"),yjr.forEach(t),wdo=r(NV,"class method or the "),jK=n(NV,"CODE",{});var wjr=s(jK);Ado=r(wjr,"from_config()"),wjr.forEach(t),Ldo=r(NV,`class
method.`),NV.forEach(t),Bdo=i(Os),gE=n(Os,"P",{});var rke=s(gE);xdo=r(rke,"This class cannot be instantiated directly using "),NK=n(rke,"CODE",{});var Ajr=s(NK);kdo=r(Ajr,"__init__()"),Ajr.forEach(t),Rdo=r(rke," (throws an error)."),rke.forEach(t),Sdo=i(Os),Gr=n(Os,"DIV",{class:!0});var Xs=s(Gr);m(hE.$$.fragment,Xs),Pdo=i(Xs),qK=n(Xs,"P",{});var Ljr=s(qK);$do=r(Ljr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ljr.forEach(t),Ido=i(Xs),Qi=n(Xs,"P",{});var qV=s(Qi);Ddo=r(qV,`Note:
Loading a model from its configuration file does `),GK=n(qV,"STRONG",{});var Bjr=s(GK);jdo=r(Bjr,"not"),Bjr.forEach(t),Ndo=r(qV,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(qV,"CODE",{});var xjr=s(OK);qdo=r(xjr,"from_pretrained()"),xjr.forEach(t),Gdo=r(qV,"to load the model weights."),qV.forEach(t),Odo=i(Xs),XK=n(Xs,"P",{});var kjr=s(XK);Xdo=r(kjr,"Examples:"),kjr.forEach(t),Vdo=i(Xs),m(pE.$$.fragment,Xs),Xs.forEach(t),zdo=i(Os),Pe=n(Os,"DIV",{class:!0});var It=s(Pe);m(_E.$$.fragment,It),Wdo=i(It),VK=n(It,"P",{});var Rjr=s(VK);Qdo=r(Rjr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Rjr.forEach(t),Hdo=i(It),qa=n(It,"P",{});var B4=s(qa);Udo=r(B4,"The model class to instantiate is selected based on the "),zK=n(B4,"CODE",{});var Sjr=s(zK);Jdo=r(Sjr,"model_type"),Sjr.forEach(t),Ydo=r(B4,` property of the config object (either
passed as an argument or loaded from `),WK=n(B4,"CODE",{});var Pjr=s(WK);Kdo=r(Pjr,"pretrained_model_name_or_path"),Pjr.forEach(t),Zdo=r(B4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QK=n(B4,"CODE",{});var $jr=s(QK);eco=r($jr,"pretrained_model_name_or_path"),$jr.forEach(t),oco=r(B4,":"),B4.forEach(t),rco=i(It),k=n(It,"UL",{});var S=s(k);s_=n(S,"LI",{});var nCe=s(s_);HK=n(nCe,"STRONG",{});var Ijr=s(HK);tco=r(Ijr,"albert"),Ijr.forEach(t),aco=r(nCe," \u2014 "),FS=n(nCe,"A",{href:!0});var Djr=s(FS);nco=r(Djr,"AlbertForPreTraining"),Djr.forEach(t),sco=r(nCe," (ALBERT model)"),nCe.forEach(t),lco=i(S),l_=n(S,"LI",{});var sCe=s(l_);UK=n(sCe,"STRONG",{});var jjr=s(UK);ico=r(jjr,"bart"),jjr.forEach(t),dco=r(sCe," \u2014 "),CS=n(sCe,"A",{href:!0});var Njr=s(CS);cco=r(Njr,"BartForConditionalGeneration"),Njr.forEach(t),fco=r(sCe," (BART model)"),sCe.forEach(t),mco=i(S),i_=n(S,"LI",{});var lCe=s(i_);JK=n(lCe,"STRONG",{});var qjr=s(JK);gco=r(qjr,"bert"),qjr.forEach(t),hco=r(lCe," \u2014 "),MS=n(lCe,"A",{href:!0});var Gjr=s(MS);pco=r(Gjr,"BertForPreTraining"),Gjr.forEach(t),_co=r(lCe," (BERT model)"),lCe.forEach(t),uco=i(S),d_=n(S,"LI",{});var iCe=s(d_);YK=n(iCe,"STRONG",{});var Ojr=s(YK);bco=r(Ojr,"big_bird"),Ojr.forEach(t),vco=r(iCe," \u2014 "),ES=n(iCe,"A",{href:!0});var Xjr=s(ES);Tco=r(Xjr,"BigBirdForPreTraining"),Xjr.forEach(t),Fco=r(iCe," (BigBird model)"),iCe.forEach(t),Cco=i(S),c_=n(S,"LI",{});var dCe=s(c_);KK=n(dCe,"STRONG",{});var Vjr=s(KK);Mco=r(Vjr,"camembert"),Vjr.forEach(t),Eco=r(dCe," \u2014 "),yS=n(dCe,"A",{href:!0});var zjr=s(yS);yco=r(zjr,"CamembertForMaskedLM"),zjr.forEach(t),wco=r(dCe," (CamemBERT model)"),dCe.forEach(t),Aco=i(S),f_=n(S,"LI",{});var cCe=s(f_);ZK=n(cCe,"STRONG",{});var Wjr=s(ZK);Lco=r(Wjr,"ctrl"),Wjr.forEach(t),Bco=r(cCe," \u2014 "),wS=n(cCe,"A",{href:!0});var Qjr=s(wS);xco=r(Qjr,"CTRLLMHeadModel"),Qjr.forEach(t),kco=r(cCe," (CTRL model)"),cCe.forEach(t),Rco=i(S),m_=n(S,"LI",{});var fCe=s(m_);eZ=n(fCe,"STRONG",{});var Hjr=s(eZ);Sco=r(Hjr,"data2vec-text"),Hjr.forEach(t),Pco=r(fCe," \u2014 "),AS=n(fCe,"A",{href:!0});var Ujr=s(AS);$co=r(Ujr,"Data2VecTextForMaskedLM"),Ujr.forEach(t),Ico=r(fCe," (Data2VecText model)"),fCe.forEach(t),Dco=i(S),g_=n(S,"LI",{});var mCe=s(g_);oZ=n(mCe,"STRONG",{});var Jjr=s(oZ);jco=r(Jjr,"deberta"),Jjr.forEach(t),Nco=r(mCe," \u2014 "),LS=n(mCe,"A",{href:!0});var Yjr=s(LS);qco=r(Yjr,"DebertaForMaskedLM"),Yjr.forEach(t),Gco=r(mCe," (DeBERTa model)"),mCe.forEach(t),Oco=i(S),h_=n(S,"LI",{});var gCe=s(h_);rZ=n(gCe,"STRONG",{});var Kjr=s(rZ);Xco=r(Kjr,"deberta-v2"),Kjr.forEach(t),Vco=r(gCe," \u2014 "),BS=n(gCe,"A",{href:!0});var Zjr=s(BS);zco=r(Zjr,"DebertaV2ForMaskedLM"),Zjr.forEach(t),Wco=r(gCe," (DeBERTa-v2 model)"),gCe.forEach(t),Qco=i(S),p_=n(S,"LI",{});var hCe=s(p_);tZ=n(hCe,"STRONG",{});var eNr=s(tZ);Hco=r(eNr,"distilbert"),eNr.forEach(t),Uco=r(hCe," \u2014 "),xS=n(hCe,"A",{href:!0});var oNr=s(xS);Jco=r(oNr,"DistilBertForMaskedLM"),oNr.forEach(t),Yco=r(hCe," (DistilBERT model)"),hCe.forEach(t),Kco=i(S),__=n(S,"LI",{});var pCe=s(__);aZ=n(pCe,"STRONG",{});var rNr=s(aZ);Zco=r(rNr,"electra"),rNr.forEach(t),efo=r(pCe," \u2014 "),kS=n(pCe,"A",{href:!0});var tNr=s(kS);ofo=r(tNr,"ElectraForPreTraining"),tNr.forEach(t),rfo=r(pCe," (ELECTRA model)"),pCe.forEach(t),tfo=i(S),u_=n(S,"LI",{});var _Ce=s(u_);nZ=n(_Ce,"STRONG",{});var aNr=s(nZ);afo=r(aNr,"flaubert"),aNr.forEach(t),nfo=r(_Ce," \u2014 "),RS=n(_Ce,"A",{href:!0});var nNr=s(RS);sfo=r(nNr,"FlaubertWithLMHeadModel"),nNr.forEach(t),lfo=r(_Ce," (FlauBERT model)"),_Ce.forEach(t),ifo=i(S),b_=n(S,"LI",{});var uCe=s(b_);sZ=n(uCe,"STRONG",{});var sNr=s(sZ);dfo=r(sNr,"fnet"),sNr.forEach(t),cfo=r(uCe," \u2014 "),SS=n(uCe,"A",{href:!0});var lNr=s(SS);ffo=r(lNr,"FNetForPreTraining"),lNr.forEach(t),mfo=r(uCe," (FNet model)"),uCe.forEach(t),gfo=i(S),v_=n(S,"LI",{});var bCe=s(v_);lZ=n(bCe,"STRONG",{});var iNr=s(lZ);hfo=r(iNr,"fsmt"),iNr.forEach(t),pfo=r(bCe," \u2014 "),PS=n(bCe,"A",{href:!0});var dNr=s(PS);_fo=r(dNr,"FSMTForConditionalGeneration"),dNr.forEach(t),ufo=r(bCe," (FairSeq Machine-Translation model)"),bCe.forEach(t),bfo=i(S),T_=n(S,"LI",{});var vCe=s(T_);iZ=n(vCe,"STRONG",{});var cNr=s(iZ);vfo=r(cNr,"funnel"),cNr.forEach(t),Tfo=r(vCe," \u2014 "),$S=n(vCe,"A",{href:!0});var fNr=s($S);Ffo=r(fNr,"FunnelForPreTraining"),fNr.forEach(t),Cfo=r(vCe," (Funnel Transformer model)"),vCe.forEach(t),Mfo=i(S),F_=n(S,"LI",{});var TCe=s(F_);dZ=n(TCe,"STRONG",{});var mNr=s(dZ);Efo=r(mNr,"gpt2"),mNr.forEach(t),yfo=r(TCe," \u2014 "),IS=n(TCe,"A",{href:!0});var gNr=s(IS);wfo=r(gNr,"GPT2LMHeadModel"),gNr.forEach(t),Afo=r(TCe," (OpenAI GPT-2 model)"),TCe.forEach(t),Lfo=i(S),C_=n(S,"LI",{});var FCe=s(C_);cZ=n(FCe,"STRONG",{});var hNr=s(cZ);Bfo=r(hNr,"ibert"),hNr.forEach(t),xfo=r(FCe," \u2014 "),DS=n(FCe,"A",{href:!0});var pNr=s(DS);kfo=r(pNr,"IBertForMaskedLM"),pNr.forEach(t),Rfo=r(FCe," (I-BERT model)"),FCe.forEach(t),Sfo=i(S),M_=n(S,"LI",{});var CCe=s(M_);fZ=n(CCe,"STRONG",{});var _Nr=s(fZ);Pfo=r(_Nr,"layoutlm"),_Nr.forEach(t),$fo=r(CCe," \u2014 "),jS=n(CCe,"A",{href:!0});var uNr=s(jS);Ifo=r(uNr,"LayoutLMForMaskedLM"),uNr.forEach(t),Dfo=r(CCe," (LayoutLM model)"),CCe.forEach(t),jfo=i(S),E_=n(S,"LI",{});var MCe=s(E_);mZ=n(MCe,"STRONG",{});var bNr=s(mZ);Nfo=r(bNr,"longformer"),bNr.forEach(t),qfo=r(MCe," \u2014 "),NS=n(MCe,"A",{href:!0});var vNr=s(NS);Gfo=r(vNr,"LongformerForMaskedLM"),vNr.forEach(t),Ofo=r(MCe," (Longformer model)"),MCe.forEach(t),Xfo=i(S),y_=n(S,"LI",{});var ECe=s(y_);gZ=n(ECe,"STRONG",{});var TNr=s(gZ);Vfo=r(TNr,"lxmert"),TNr.forEach(t),zfo=r(ECe," \u2014 "),qS=n(ECe,"A",{href:!0});var FNr=s(qS);Wfo=r(FNr,"LxmertForPreTraining"),FNr.forEach(t),Qfo=r(ECe," (LXMERT model)"),ECe.forEach(t),Hfo=i(S),w_=n(S,"LI",{});var yCe=s(w_);hZ=n(yCe,"STRONG",{});var CNr=s(hZ);Ufo=r(CNr,"megatron-bert"),CNr.forEach(t),Jfo=r(yCe," \u2014 "),GS=n(yCe,"A",{href:!0});var MNr=s(GS);Yfo=r(MNr,"MegatronBertForPreTraining"),MNr.forEach(t),Kfo=r(yCe," (MegatronBert model)"),yCe.forEach(t),Zfo=i(S),A_=n(S,"LI",{});var wCe=s(A_);pZ=n(wCe,"STRONG",{});var ENr=s(pZ);emo=r(ENr,"mobilebert"),ENr.forEach(t),omo=r(wCe," \u2014 "),OS=n(wCe,"A",{href:!0});var yNr=s(OS);rmo=r(yNr,"MobileBertForPreTraining"),yNr.forEach(t),tmo=r(wCe," (MobileBERT model)"),wCe.forEach(t),amo=i(S),L_=n(S,"LI",{});var ACe=s(L_);_Z=n(ACe,"STRONG",{});var wNr=s(_Z);nmo=r(wNr,"mpnet"),wNr.forEach(t),smo=r(ACe," \u2014 "),XS=n(ACe,"A",{href:!0});var ANr=s(XS);lmo=r(ANr,"MPNetForMaskedLM"),ANr.forEach(t),imo=r(ACe," (MPNet model)"),ACe.forEach(t),dmo=i(S),B_=n(S,"LI",{});var LCe=s(B_);uZ=n(LCe,"STRONG",{});var LNr=s(uZ);cmo=r(LNr,"openai-gpt"),LNr.forEach(t),fmo=r(LCe," \u2014 "),VS=n(LCe,"A",{href:!0});var BNr=s(VS);mmo=r(BNr,"OpenAIGPTLMHeadModel"),BNr.forEach(t),gmo=r(LCe," (OpenAI GPT model)"),LCe.forEach(t),hmo=i(S),x_=n(S,"LI",{});var BCe=s(x_);bZ=n(BCe,"STRONG",{});var xNr=s(bZ);pmo=r(xNr,"retribert"),xNr.forEach(t),_mo=r(BCe," \u2014 "),zS=n(BCe,"A",{href:!0});var kNr=s(zS);umo=r(kNr,"RetriBertModel"),kNr.forEach(t),bmo=r(BCe," (RetriBERT model)"),BCe.forEach(t),vmo=i(S),k_=n(S,"LI",{});var xCe=s(k_);vZ=n(xCe,"STRONG",{});var RNr=s(vZ);Tmo=r(RNr,"roberta"),RNr.forEach(t),Fmo=r(xCe," \u2014 "),WS=n(xCe,"A",{href:!0});var SNr=s(WS);Cmo=r(SNr,"RobertaForMaskedLM"),SNr.forEach(t),Mmo=r(xCe," (RoBERTa model)"),xCe.forEach(t),Emo=i(S),R_=n(S,"LI",{});var kCe=s(R_);TZ=n(kCe,"STRONG",{});var PNr=s(TZ);ymo=r(PNr,"squeezebert"),PNr.forEach(t),wmo=r(kCe," \u2014 "),QS=n(kCe,"A",{href:!0});var $Nr=s(QS);Amo=r($Nr,"SqueezeBertForMaskedLM"),$Nr.forEach(t),Lmo=r(kCe," (SqueezeBERT model)"),kCe.forEach(t),Bmo=i(S),S_=n(S,"LI",{});var RCe=s(S_);FZ=n(RCe,"STRONG",{});var INr=s(FZ);xmo=r(INr,"t5"),INr.forEach(t),kmo=r(RCe," \u2014 "),HS=n(RCe,"A",{href:!0});var DNr=s(HS);Rmo=r(DNr,"T5ForConditionalGeneration"),DNr.forEach(t),Smo=r(RCe," (T5 model)"),RCe.forEach(t),Pmo=i(S),P_=n(S,"LI",{});var SCe=s(P_);CZ=n(SCe,"STRONG",{});var jNr=s(CZ);$mo=r(jNr,"tapas"),jNr.forEach(t),Imo=r(SCe," \u2014 "),US=n(SCe,"A",{href:!0});var NNr=s(US);Dmo=r(NNr,"TapasForMaskedLM"),NNr.forEach(t),jmo=r(SCe," (TAPAS model)"),SCe.forEach(t),Nmo=i(S),$_=n(S,"LI",{});var PCe=s($_);MZ=n(PCe,"STRONG",{});var qNr=s(MZ);qmo=r(qNr,"transfo-xl"),qNr.forEach(t),Gmo=r(PCe," \u2014 "),JS=n(PCe,"A",{href:!0});var GNr=s(JS);Omo=r(GNr,"TransfoXLLMHeadModel"),GNr.forEach(t),Xmo=r(PCe," (Transformer-XL model)"),PCe.forEach(t),Vmo=i(S),I_=n(S,"LI",{});var $Ce=s(I_);EZ=n($Ce,"STRONG",{});var ONr=s(EZ);zmo=r(ONr,"unispeech"),ONr.forEach(t),Wmo=r($Ce," \u2014 "),YS=n($Ce,"A",{href:!0});var XNr=s(YS);Qmo=r(XNr,"UniSpeechForPreTraining"),XNr.forEach(t),Hmo=r($Ce," (UniSpeech model)"),$Ce.forEach(t),Umo=i(S),D_=n(S,"LI",{});var ICe=s(D_);yZ=n(ICe,"STRONG",{});var VNr=s(yZ);Jmo=r(VNr,"unispeech-sat"),VNr.forEach(t),Ymo=r(ICe," \u2014 "),KS=n(ICe,"A",{href:!0});var zNr=s(KS);Kmo=r(zNr,"UniSpeechSatForPreTraining"),zNr.forEach(t),Zmo=r(ICe," (UniSpeechSat model)"),ICe.forEach(t),ego=i(S),j_=n(S,"LI",{});var DCe=s(j_);wZ=n(DCe,"STRONG",{});var WNr=s(wZ);ogo=r(WNr,"visual_bert"),WNr.forEach(t),rgo=r(DCe," \u2014 "),ZS=n(DCe,"A",{href:!0});var QNr=s(ZS);tgo=r(QNr,"VisualBertForPreTraining"),QNr.forEach(t),ago=r(DCe," (VisualBert model)"),DCe.forEach(t),ngo=i(S),N_=n(S,"LI",{});var jCe=s(N_);AZ=n(jCe,"STRONG",{});var HNr=s(AZ);sgo=r(HNr,"vit_mae"),HNr.forEach(t),lgo=r(jCe," \u2014 "),eP=n(jCe,"A",{href:!0});var UNr=s(eP);igo=r(UNr,"ViTMAEForPreTraining"),UNr.forEach(t),dgo=r(jCe," (ViTMAE model)"),jCe.forEach(t),cgo=i(S),q_=n(S,"LI",{});var NCe=s(q_);LZ=n(NCe,"STRONG",{});var JNr=s(LZ);fgo=r(JNr,"wav2vec2"),JNr.forEach(t),mgo=r(NCe," \u2014 "),oP=n(NCe,"A",{href:!0});var YNr=s(oP);ggo=r(YNr,"Wav2Vec2ForPreTraining"),YNr.forEach(t),hgo=r(NCe," (Wav2Vec2 model)"),NCe.forEach(t),pgo=i(S),G_=n(S,"LI",{});var qCe=s(G_);BZ=n(qCe,"STRONG",{});var KNr=s(BZ);_go=r(KNr,"xlm"),KNr.forEach(t),ugo=r(qCe," \u2014 "),rP=n(qCe,"A",{href:!0});var ZNr=s(rP);bgo=r(ZNr,"XLMWithLMHeadModel"),ZNr.forEach(t),vgo=r(qCe," (XLM model)"),qCe.forEach(t),Tgo=i(S),O_=n(S,"LI",{});var GCe=s(O_);xZ=n(GCe,"STRONG",{});var eqr=s(xZ);Fgo=r(eqr,"xlm-roberta"),eqr.forEach(t),Cgo=r(GCe," \u2014 "),tP=n(GCe,"A",{href:!0});var oqr=s(tP);Mgo=r(oqr,"XLMRobertaForMaskedLM"),oqr.forEach(t),Ego=r(GCe," (XLM-RoBERTa model)"),GCe.forEach(t),ygo=i(S),X_=n(S,"LI",{});var OCe=s(X_);kZ=n(OCe,"STRONG",{});var rqr=s(kZ);wgo=r(rqr,"xlm-roberta-xl"),rqr.forEach(t),Ago=r(OCe," \u2014 "),aP=n(OCe,"A",{href:!0});var tqr=s(aP);Lgo=r(tqr,"XLMRobertaXLForMaskedLM"),tqr.forEach(t),Bgo=r(OCe," (XLM-RoBERTa-XL model)"),OCe.forEach(t),xgo=i(S),V_=n(S,"LI",{});var XCe=s(V_);RZ=n(XCe,"STRONG",{});var aqr=s(RZ);kgo=r(aqr,"xlnet"),aqr.forEach(t),Rgo=r(XCe," \u2014 "),nP=n(XCe,"A",{href:!0});var nqr=s(nP);Sgo=r(nqr,"XLNetLMHeadModel"),nqr.forEach(t),Pgo=r(XCe," (XLNet model)"),XCe.forEach(t),S.forEach(t),$go=i(It),z_=n(It,"P",{});var VCe=s(z_);Igo=r(VCe,"The model is set in evaluation mode by default using "),SZ=n(VCe,"CODE",{});var sqr=s(SZ);Dgo=r(sqr,"model.eval()"),sqr.forEach(t),jgo=r(VCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PZ=n(VCe,"CODE",{});var lqr=s(PZ);Ngo=r(lqr,"model.train()"),lqr.forEach(t),VCe.forEach(t),qgo=i(It),$Z=n(It,"P",{});var iqr=s($Z);Ggo=r(iqr,"Examples:"),iqr.forEach(t),Ogo=i(It),m(uE.$$.fragment,It),It.forEach(t),Os.forEach(t),J9e=i(c),Hi=n(c,"H2",{class:!0});var tke=s(Hi);W_=n(tke,"A",{id:!0,class:!0,href:!0});var dqr=s(W_);IZ=n(dqr,"SPAN",{});var cqr=s(IZ);m(bE.$$.fragment,cqr),cqr.forEach(t),dqr.forEach(t),Xgo=i(tke),DZ=n(tke,"SPAN",{});var fqr=s(DZ);Vgo=r(fqr,"AutoModelForCausalLM"),fqr.forEach(t),tke.forEach(t),Y9e=i(c),Uo=n(c,"DIV",{class:!0});var Vs=s(Uo);m(vE.$$.fragment,Vs),zgo=i(Vs),Ui=n(Vs,"P",{});var GV=s(Ui);Wgo=r(GV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jZ=n(GV,"CODE",{});var mqr=s(jZ);Qgo=r(mqr,"from_pretrained()"),mqr.forEach(t),Hgo=r(GV,"class method or the "),NZ=n(GV,"CODE",{});var gqr=s(NZ);Ugo=r(gqr,"from_config()"),gqr.forEach(t),Jgo=r(GV,`class
method.`),GV.forEach(t),Ygo=i(Vs),TE=n(Vs,"P",{});var ake=s(TE);Kgo=r(ake,"This class cannot be instantiated directly using "),qZ=n(ake,"CODE",{});var hqr=s(qZ);Zgo=r(hqr,"__init__()"),hqr.forEach(t),eho=r(ake," (throws an error)."),ake.forEach(t),oho=i(Vs),Or=n(Vs,"DIV",{class:!0});var zs=s(Or);m(FE.$$.fragment,zs),rho=i(zs),GZ=n(zs,"P",{});var pqr=s(GZ);tho=r(pqr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pqr.forEach(t),aho=i(zs),Ji=n(zs,"P",{});var OV=s(Ji);nho=r(OV,`Note:
Loading a model from its configuration file does `),OZ=n(OV,"STRONG",{});var _qr=s(OZ);sho=r(_qr,"not"),_qr.forEach(t),lho=r(OV,` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=n(OV,"CODE",{});var uqr=s(XZ);iho=r(uqr,"from_pretrained()"),uqr.forEach(t),dho=r(OV,"to load the model weights."),OV.forEach(t),cho=i(zs),VZ=n(zs,"P",{});var bqr=s(VZ);fho=r(bqr,"Examples:"),bqr.forEach(t),mho=i(zs),m(CE.$$.fragment,zs),zs.forEach(t),gho=i(Vs),$e=n(Vs,"DIV",{class:!0});var Dt=s($e);m(ME.$$.fragment,Dt),hho=i(Dt),zZ=n(Dt,"P",{});var vqr=s(zZ);pho=r(vqr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vqr.forEach(t),_ho=i(Dt),Ga=n(Dt,"P",{});var x4=s(Ga);uho=r(x4,"The model class to instantiate is selected based on the "),WZ=n(x4,"CODE",{});var Tqr=s(WZ);bho=r(Tqr,"model_type"),Tqr.forEach(t),vho=r(x4,` property of the config object (either
passed as an argument or loaded from `),QZ=n(x4,"CODE",{});var Fqr=s(QZ);Tho=r(Fqr,"pretrained_model_name_or_path"),Fqr.forEach(t),Fho=r(x4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HZ=n(x4,"CODE",{});var Cqr=s(HZ);Cho=r(Cqr,"pretrained_model_name_or_path"),Cqr.forEach(t),Mho=r(x4,":"),x4.forEach(t),Eho=i(Dt),$=n(Dt,"UL",{});var D=s($);Q_=n(D,"LI",{});var zCe=s(Q_);UZ=n(zCe,"STRONG",{});var Mqr=s(UZ);yho=r(Mqr,"bart"),Mqr.forEach(t),who=r(zCe," \u2014 "),sP=n(zCe,"A",{href:!0});var Eqr=s(sP);Aho=r(Eqr,"BartForCausalLM"),Eqr.forEach(t),Lho=r(zCe," (BART model)"),zCe.forEach(t),Bho=i(D),H_=n(D,"LI",{});var WCe=s(H_);JZ=n(WCe,"STRONG",{});var yqr=s(JZ);xho=r(yqr,"bert"),yqr.forEach(t),kho=r(WCe," \u2014 "),lP=n(WCe,"A",{href:!0});var wqr=s(lP);Rho=r(wqr,"BertLMHeadModel"),wqr.forEach(t),Sho=r(WCe," (BERT model)"),WCe.forEach(t),Pho=i(D),U_=n(D,"LI",{});var QCe=s(U_);YZ=n(QCe,"STRONG",{});var Aqr=s(YZ);$ho=r(Aqr,"bert-generation"),Aqr.forEach(t),Iho=r(QCe," \u2014 "),iP=n(QCe,"A",{href:!0});var Lqr=s(iP);Dho=r(Lqr,"BertGenerationDecoder"),Lqr.forEach(t),jho=r(QCe," (Bert Generation model)"),QCe.forEach(t),Nho=i(D),J_=n(D,"LI",{});var HCe=s(J_);KZ=n(HCe,"STRONG",{});var Bqr=s(KZ);qho=r(Bqr,"big_bird"),Bqr.forEach(t),Gho=r(HCe," \u2014 "),dP=n(HCe,"A",{href:!0});var xqr=s(dP);Oho=r(xqr,"BigBirdForCausalLM"),xqr.forEach(t),Xho=r(HCe," (BigBird model)"),HCe.forEach(t),Vho=i(D),Y_=n(D,"LI",{});var UCe=s(Y_);ZZ=n(UCe,"STRONG",{});var kqr=s(ZZ);zho=r(kqr,"bigbird_pegasus"),kqr.forEach(t),Who=r(UCe," \u2014 "),cP=n(UCe,"A",{href:!0});var Rqr=s(cP);Qho=r(Rqr,"BigBirdPegasusForCausalLM"),Rqr.forEach(t),Hho=r(UCe," (BigBirdPegasus model)"),UCe.forEach(t),Uho=i(D),K_=n(D,"LI",{});var JCe=s(K_);eee=n(JCe,"STRONG",{});var Sqr=s(eee);Jho=r(Sqr,"blenderbot"),Sqr.forEach(t),Yho=r(JCe," \u2014 "),fP=n(JCe,"A",{href:!0});var Pqr=s(fP);Kho=r(Pqr,"BlenderbotForCausalLM"),Pqr.forEach(t),Zho=r(JCe," (Blenderbot model)"),JCe.forEach(t),epo=i(D),Z_=n(D,"LI",{});var YCe=s(Z_);oee=n(YCe,"STRONG",{});var $qr=s(oee);opo=r($qr,"blenderbot-small"),$qr.forEach(t),rpo=r(YCe," \u2014 "),mP=n(YCe,"A",{href:!0});var Iqr=s(mP);tpo=r(Iqr,"BlenderbotSmallForCausalLM"),Iqr.forEach(t),apo=r(YCe," (BlenderbotSmall model)"),YCe.forEach(t),npo=i(D),eu=n(D,"LI",{});var KCe=s(eu);ree=n(KCe,"STRONG",{});var Dqr=s(ree);spo=r(Dqr,"camembert"),Dqr.forEach(t),lpo=r(KCe," \u2014 "),gP=n(KCe,"A",{href:!0});var jqr=s(gP);ipo=r(jqr,"CamembertForCausalLM"),jqr.forEach(t),dpo=r(KCe," (CamemBERT model)"),KCe.forEach(t),cpo=i(D),ou=n(D,"LI",{});var ZCe=s(ou);tee=n(ZCe,"STRONG",{});var Nqr=s(tee);fpo=r(Nqr,"ctrl"),Nqr.forEach(t),mpo=r(ZCe," \u2014 "),hP=n(ZCe,"A",{href:!0});var qqr=s(hP);gpo=r(qqr,"CTRLLMHeadModel"),qqr.forEach(t),hpo=r(ZCe," (CTRL model)"),ZCe.forEach(t),ppo=i(D),ru=n(D,"LI",{});var e4e=s(ru);aee=n(e4e,"STRONG",{});var Gqr=s(aee);_po=r(Gqr,"data2vec-text"),Gqr.forEach(t),upo=r(e4e," \u2014 "),pP=n(e4e,"A",{href:!0});var Oqr=s(pP);bpo=r(Oqr,"Data2VecTextForCausalLM"),Oqr.forEach(t),vpo=r(e4e," (Data2VecText model)"),e4e.forEach(t),Tpo=i(D),tu=n(D,"LI",{});var o4e=s(tu);nee=n(o4e,"STRONG",{});var Xqr=s(nee);Fpo=r(Xqr,"electra"),Xqr.forEach(t),Cpo=r(o4e," \u2014 "),_P=n(o4e,"A",{href:!0});var Vqr=s(_P);Mpo=r(Vqr,"ElectraForCausalLM"),Vqr.forEach(t),Epo=r(o4e," (ELECTRA model)"),o4e.forEach(t),ypo=i(D),au=n(D,"LI",{});var r4e=s(au);see=n(r4e,"STRONG",{});var zqr=s(see);wpo=r(zqr,"gpt2"),zqr.forEach(t),Apo=r(r4e," \u2014 "),uP=n(r4e,"A",{href:!0});var Wqr=s(uP);Lpo=r(Wqr,"GPT2LMHeadModel"),Wqr.forEach(t),Bpo=r(r4e," (OpenAI GPT-2 model)"),r4e.forEach(t),xpo=i(D),nu=n(D,"LI",{});var t4e=s(nu);lee=n(t4e,"STRONG",{});var Qqr=s(lee);kpo=r(Qqr,"gpt_neo"),Qqr.forEach(t),Rpo=r(t4e," \u2014 "),bP=n(t4e,"A",{href:!0});var Hqr=s(bP);Spo=r(Hqr,"GPTNeoForCausalLM"),Hqr.forEach(t),Ppo=r(t4e," (GPT Neo model)"),t4e.forEach(t),$po=i(D),su=n(D,"LI",{});var a4e=s(su);iee=n(a4e,"STRONG",{});var Uqr=s(iee);Ipo=r(Uqr,"gptj"),Uqr.forEach(t),Dpo=r(a4e," \u2014 "),vP=n(a4e,"A",{href:!0});var Jqr=s(vP);jpo=r(Jqr,"GPTJForCausalLM"),Jqr.forEach(t),Npo=r(a4e," (GPT-J model)"),a4e.forEach(t),qpo=i(D),lu=n(D,"LI",{});var n4e=s(lu);dee=n(n4e,"STRONG",{});var Yqr=s(dee);Gpo=r(Yqr,"marian"),Yqr.forEach(t),Opo=r(n4e," \u2014 "),TP=n(n4e,"A",{href:!0});var Kqr=s(TP);Xpo=r(Kqr,"MarianForCausalLM"),Kqr.forEach(t),Vpo=r(n4e," (Marian model)"),n4e.forEach(t),zpo=i(D),iu=n(D,"LI",{});var s4e=s(iu);cee=n(s4e,"STRONG",{});var Zqr=s(cee);Wpo=r(Zqr,"mbart"),Zqr.forEach(t),Qpo=r(s4e," \u2014 "),FP=n(s4e,"A",{href:!0});var eGr=s(FP);Hpo=r(eGr,"MBartForCausalLM"),eGr.forEach(t),Upo=r(s4e," (mBART model)"),s4e.forEach(t),Jpo=i(D),du=n(D,"LI",{});var l4e=s(du);fee=n(l4e,"STRONG",{});var oGr=s(fee);Ypo=r(oGr,"megatron-bert"),oGr.forEach(t),Kpo=r(l4e," \u2014 "),CP=n(l4e,"A",{href:!0});var rGr=s(CP);Zpo=r(rGr,"MegatronBertForCausalLM"),rGr.forEach(t),e_o=r(l4e," (MegatronBert model)"),l4e.forEach(t),o_o=i(D),cu=n(D,"LI",{});var i4e=s(cu);mee=n(i4e,"STRONG",{});var tGr=s(mee);r_o=r(tGr,"openai-gpt"),tGr.forEach(t),t_o=r(i4e," \u2014 "),MP=n(i4e,"A",{href:!0});var aGr=s(MP);a_o=r(aGr,"OpenAIGPTLMHeadModel"),aGr.forEach(t),n_o=r(i4e," (OpenAI GPT model)"),i4e.forEach(t),s_o=i(D),fu=n(D,"LI",{});var d4e=s(fu);gee=n(d4e,"STRONG",{});var nGr=s(gee);l_o=r(nGr,"pegasus"),nGr.forEach(t),i_o=r(d4e," \u2014 "),EP=n(d4e,"A",{href:!0});var sGr=s(EP);d_o=r(sGr,"PegasusForCausalLM"),sGr.forEach(t),c_o=r(d4e," (Pegasus model)"),d4e.forEach(t),f_o=i(D),mu=n(D,"LI",{});var c4e=s(mu);hee=n(c4e,"STRONG",{});var lGr=s(hee);m_o=r(lGr,"plbart"),lGr.forEach(t),g_o=r(c4e," \u2014 "),yP=n(c4e,"A",{href:!0});var iGr=s(yP);h_o=r(iGr,"PLBartForCausalLM"),iGr.forEach(t),p_o=r(c4e," (PLBart model)"),c4e.forEach(t),__o=i(D),gu=n(D,"LI",{});var f4e=s(gu);pee=n(f4e,"STRONG",{});var dGr=s(pee);u_o=r(dGr,"prophetnet"),dGr.forEach(t),b_o=r(f4e," \u2014 "),wP=n(f4e,"A",{href:!0});var cGr=s(wP);v_o=r(cGr,"ProphetNetForCausalLM"),cGr.forEach(t),T_o=r(f4e," (ProphetNet model)"),f4e.forEach(t),F_o=i(D),hu=n(D,"LI",{});var m4e=s(hu);_ee=n(m4e,"STRONG",{});var fGr=s(_ee);C_o=r(fGr,"qdqbert"),fGr.forEach(t),M_o=r(m4e," \u2014 "),AP=n(m4e,"A",{href:!0});var mGr=s(AP);E_o=r(mGr,"QDQBertLMHeadModel"),mGr.forEach(t),y_o=r(m4e," (QDQBert model)"),m4e.forEach(t),w_o=i(D),pu=n(D,"LI",{});var g4e=s(pu);uee=n(g4e,"STRONG",{});var gGr=s(uee);A_o=r(gGr,"reformer"),gGr.forEach(t),L_o=r(g4e," \u2014 "),LP=n(g4e,"A",{href:!0});var hGr=s(LP);B_o=r(hGr,"ReformerModelWithLMHead"),hGr.forEach(t),x_o=r(g4e," (Reformer model)"),g4e.forEach(t),k_o=i(D),_u=n(D,"LI",{});var h4e=s(_u);bee=n(h4e,"STRONG",{});var pGr=s(bee);R_o=r(pGr,"rembert"),pGr.forEach(t),S_o=r(h4e," \u2014 "),BP=n(h4e,"A",{href:!0});var _Gr=s(BP);P_o=r(_Gr,"RemBertForCausalLM"),_Gr.forEach(t),$_o=r(h4e," (RemBERT model)"),h4e.forEach(t),I_o=i(D),uu=n(D,"LI",{});var p4e=s(uu);vee=n(p4e,"STRONG",{});var uGr=s(vee);D_o=r(uGr,"roberta"),uGr.forEach(t),j_o=r(p4e," \u2014 "),xP=n(p4e,"A",{href:!0});var bGr=s(xP);N_o=r(bGr,"RobertaForCausalLM"),bGr.forEach(t),q_o=r(p4e," (RoBERTa model)"),p4e.forEach(t),G_o=i(D),bu=n(D,"LI",{});var _4e=s(bu);Tee=n(_4e,"STRONG",{});var vGr=s(Tee);O_o=r(vGr,"roformer"),vGr.forEach(t),X_o=r(_4e," \u2014 "),kP=n(_4e,"A",{href:!0});var TGr=s(kP);V_o=r(TGr,"RoFormerForCausalLM"),TGr.forEach(t),z_o=r(_4e," (RoFormer model)"),_4e.forEach(t),W_o=i(D),vu=n(D,"LI",{});var u4e=s(vu);Fee=n(u4e,"STRONG",{});var FGr=s(Fee);Q_o=r(FGr,"speech_to_text_2"),FGr.forEach(t),H_o=r(u4e," \u2014 "),RP=n(u4e,"A",{href:!0});var CGr=s(RP);U_o=r(CGr,"Speech2Text2ForCausalLM"),CGr.forEach(t),J_o=r(u4e," (Speech2Text2 model)"),u4e.forEach(t),Y_o=i(D),Tu=n(D,"LI",{});var b4e=s(Tu);Cee=n(b4e,"STRONG",{});var MGr=s(Cee);K_o=r(MGr,"transfo-xl"),MGr.forEach(t),Z_o=r(b4e," \u2014 "),SP=n(b4e,"A",{href:!0});var EGr=s(SP);euo=r(EGr,"TransfoXLLMHeadModel"),EGr.forEach(t),ouo=r(b4e," (Transformer-XL model)"),b4e.forEach(t),ruo=i(D),Fu=n(D,"LI",{});var v4e=s(Fu);Mee=n(v4e,"STRONG",{});var yGr=s(Mee);tuo=r(yGr,"trocr"),yGr.forEach(t),auo=r(v4e," \u2014 "),PP=n(v4e,"A",{href:!0});var wGr=s(PP);nuo=r(wGr,"TrOCRForCausalLM"),wGr.forEach(t),suo=r(v4e," (TrOCR model)"),v4e.forEach(t),luo=i(D),Cu=n(D,"LI",{});var T4e=s(Cu);Eee=n(T4e,"STRONG",{});var AGr=s(Eee);iuo=r(AGr,"xglm"),AGr.forEach(t),duo=r(T4e," \u2014 "),$P=n(T4e,"A",{href:!0});var LGr=s($P);cuo=r(LGr,"XGLMForCausalLM"),LGr.forEach(t),fuo=r(T4e," (XGLM model)"),T4e.forEach(t),muo=i(D),Mu=n(D,"LI",{});var F4e=s(Mu);yee=n(F4e,"STRONG",{});var BGr=s(yee);guo=r(BGr,"xlm"),BGr.forEach(t),huo=r(F4e," \u2014 "),IP=n(F4e,"A",{href:!0});var xGr=s(IP);puo=r(xGr,"XLMWithLMHeadModel"),xGr.forEach(t),_uo=r(F4e," (XLM model)"),F4e.forEach(t),uuo=i(D),Eu=n(D,"LI",{});var C4e=s(Eu);wee=n(C4e,"STRONG",{});var kGr=s(wee);buo=r(kGr,"xlm-prophetnet"),kGr.forEach(t),vuo=r(C4e," \u2014 "),DP=n(C4e,"A",{href:!0});var RGr=s(DP);Tuo=r(RGr,"XLMProphetNetForCausalLM"),RGr.forEach(t),Fuo=r(C4e," (XLMProphetNet model)"),C4e.forEach(t),Cuo=i(D),yu=n(D,"LI",{});var M4e=s(yu);Aee=n(M4e,"STRONG",{});var SGr=s(Aee);Muo=r(SGr,"xlm-roberta"),SGr.forEach(t),Euo=r(M4e," \u2014 "),jP=n(M4e,"A",{href:!0});var PGr=s(jP);yuo=r(PGr,"XLMRobertaForCausalLM"),PGr.forEach(t),wuo=r(M4e," (XLM-RoBERTa model)"),M4e.forEach(t),Auo=i(D),wu=n(D,"LI",{});var E4e=s(wu);Lee=n(E4e,"STRONG",{});var $Gr=s(Lee);Luo=r($Gr,"xlm-roberta-xl"),$Gr.forEach(t),Buo=r(E4e," \u2014 "),NP=n(E4e,"A",{href:!0});var IGr=s(NP);xuo=r(IGr,"XLMRobertaXLForCausalLM"),IGr.forEach(t),kuo=r(E4e," (XLM-RoBERTa-XL model)"),E4e.forEach(t),Ruo=i(D),Au=n(D,"LI",{});var y4e=s(Au);Bee=n(y4e,"STRONG",{});var DGr=s(Bee);Suo=r(DGr,"xlnet"),DGr.forEach(t),Puo=r(y4e," \u2014 "),qP=n(y4e,"A",{href:!0});var jGr=s(qP);$uo=r(jGr,"XLNetLMHeadModel"),jGr.forEach(t),Iuo=r(y4e," (XLNet model)"),y4e.forEach(t),D.forEach(t),Duo=i(Dt),Lu=n(Dt,"P",{});var w4e=s(Lu);juo=r(w4e,"The model is set in evaluation mode by default using "),xee=n(w4e,"CODE",{});var NGr=s(xee);Nuo=r(NGr,"model.eval()"),NGr.forEach(t),quo=r(w4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kee=n(w4e,"CODE",{});var qGr=s(kee);Guo=r(qGr,"model.train()"),qGr.forEach(t),w4e.forEach(t),Ouo=i(Dt),Ree=n(Dt,"P",{});var GGr=s(Ree);Xuo=r(GGr,"Examples:"),GGr.forEach(t),Vuo=i(Dt),m(EE.$$.fragment,Dt),Dt.forEach(t),Vs.forEach(t),K9e=i(c),Yi=n(c,"H2",{class:!0});var nke=s(Yi);Bu=n(nke,"A",{id:!0,class:!0,href:!0});var OGr=s(Bu);See=n(OGr,"SPAN",{});var XGr=s(See);m(yE.$$.fragment,XGr),XGr.forEach(t),OGr.forEach(t),zuo=i(nke),Pee=n(nke,"SPAN",{});var VGr=s(Pee);Wuo=r(VGr,"AutoModelForMaskedLM"),VGr.forEach(t),nke.forEach(t),Z9e=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(wE.$$.fragment,Ws),Quo=i(Ws),Ki=n(Ws,"P",{});var XV=s(Ki);Huo=r(XV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$ee=n(XV,"CODE",{});var zGr=s($ee);Uuo=r(zGr,"from_pretrained()"),zGr.forEach(t),Juo=r(XV,"class method or the "),Iee=n(XV,"CODE",{});var WGr=s(Iee);Yuo=r(WGr,"from_config()"),WGr.forEach(t),Kuo=r(XV,`class
method.`),XV.forEach(t),Zuo=i(Ws),AE=n(Ws,"P",{});var ske=s(AE);e1o=r(ske,"This class cannot be instantiated directly using "),Dee=n(ske,"CODE",{});var QGr=s(Dee);o1o=r(QGr,"__init__()"),QGr.forEach(t),r1o=r(ske," (throws an error)."),ske.forEach(t),t1o=i(Ws),Xr=n(Ws,"DIV",{class:!0});var Qs=s(Xr);m(LE.$$.fragment,Qs),a1o=i(Qs),jee=n(Qs,"P",{});var HGr=s(jee);n1o=r(HGr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),HGr.forEach(t),s1o=i(Qs),Zi=n(Qs,"P",{});var VV=s(Zi);l1o=r(VV,`Note:
Loading a model from its configuration file does `),Nee=n(VV,"STRONG",{});var UGr=s(Nee);i1o=r(UGr,"not"),UGr.forEach(t),d1o=r(VV,` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=n(VV,"CODE",{});var JGr=s(qee);c1o=r(JGr,"from_pretrained()"),JGr.forEach(t),f1o=r(VV,"to load the model weights."),VV.forEach(t),m1o=i(Qs),Gee=n(Qs,"P",{});var YGr=s(Gee);g1o=r(YGr,"Examples:"),YGr.forEach(t),h1o=i(Qs),m(BE.$$.fragment,Qs),Qs.forEach(t),p1o=i(Ws),Ie=n(Ws,"DIV",{class:!0});var jt=s(Ie);m(xE.$$.fragment,jt),_1o=i(jt),Oee=n(jt,"P",{});var KGr=s(Oee);u1o=r(KGr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),KGr.forEach(t),b1o=i(jt),Oa=n(jt,"P",{});var k4=s(Oa);v1o=r(k4,"The model class to instantiate is selected based on the "),Xee=n(k4,"CODE",{});var ZGr=s(Xee);T1o=r(ZGr,"model_type"),ZGr.forEach(t),F1o=r(k4,` property of the config object (either
passed as an argument or loaded from `),Vee=n(k4,"CODE",{});var eOr=s(Vee);C1o=r(eOr,"pretrained_model_name_or_path"),eOr.forEach(t),M1o=r(k4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zee=n(k4,"CODE",{});var oOr=s(zee);E1o=r(oOr,"pretrained_model_name_or_path"),oOr.forEach(t),y1o=r(k4,":"),k4.forEach(t),w1o=i(jt),I=n(jt,"UL",{});var j=s(I);xu=n(j,"LI",{});var A4e=s(xu);Wee=n(A4e,"STRONG",{});var rOr=s(Wee);A1o=r(rOr,"albert"),rOr.forEach(t),L1o=r(A4e," \u2014 "),GP=n(A4e,"A",{href:!0});var tOr=s(GP);B1o=r(tOr,"AlbertForMaskedLM"),tOr.forEach(t),x1o=r(A4e," (ALBERT model)"),A4e.forEach(t),k1o=i(j),ku=n(j,"LI",{});var L4e=s(ku);Qee=n(L4e,"STRONG",{});var aOr=s(Qee);R1o=r(aOr,"bart"),aOr.forEach(t),S1o=r(L4e," \u2014 "),OP=n(L4e,"A",{href:!0});var nOr=s(OP);P1o=r(nOr,"BartForConditionalGeneration"),nOr.forEach(t),$1o=r(L4e," (BART model)"),L4e.forEach(t),I1o=i(j),Ru=n(j,"LI",{});var B4e=s(Ru);Hee=n(B4e,"STRONG",{});var sOr=s(Hee);D1o=r(sOr,"bert"),sOr.forEach(t),j1o=r(B4e," \u2014 "),XP=n(B4e,"A",{href:!0});var lOr=s(XP);N1o=r(lOr,"BertForMaskedLM"),lOr.forEach(t),q1o=r(B4e," (BERT model)"),B4e.forEach(t),G1o=i(j),Su=n(j,"LI",{});var x4e=s(Su);Uee=n(x4e,"STRONG",{});var iOr=s(Uee);O1o=r(iOr,"big_bird"),iOr.forEach(t),X1o=r(x4e," \u2014 "),VP=n(x4e,"A",{href:!0});var dOr=s(VP);V1o=r(dOr,"BigBirdForMaskedLM"),dOr.forEach(t),z1o=r(x4e," (BigBird model)"),x4e.forEach(t),W1o=i(j),Pu=n(j,"LI",{});var k4e=s(Pu);Jee=n(k4e,"STRONG",{});var cOr=s(Jee);Q1o=r(cOr,"camembert"),cOr.forEach(t),H1o=r(k4e," \u2014 "),zP=n(k4e,"A",{href:!0});var fOr=s(zP);U1o=r(fOr,"CamembertForMaskedLM"),fOr.forEach(t),J1o=r(k4e," (CamemBERT model)"),k4e.forEach(t),Y1o=i(j),$u=n(j,"LI",{});var R4e=s($u);Yee=n(R4e,"STRONG",{});var mOr=s(Yee);K1o=r(mOr,"convbert"),mOr.forEach(t),Z1o=r(R4e," \u2014 "),WP=n(R4e,"A",{href:!0});var gOr=s(WP);e7o=r(gOr,"ConvBertForMaskedLM"),gOr.forEach(t),o7o=r(R4e," (ConvBERT model)"),R4e.forEach(t),r7o=i(j),Iu=n(j,"LI",{});var S4e=s(Iu);Kee=n(S4e,"STRONG",{});var hOr=s(Kee);t7o=r(hOr,"data2vec-text"),hOr.forEach(t),a7o=r(S4e," \u2014 "),QP=n(S4e,"A",{href:!0});var pOr=s(QP);n7o=r(pOr,"Data2VecTextForMaskedLM"),pOr.forEach(t),s7o=r(S4e," (Data2VecText model)"),S4e.forEach(t),l7o=i(j),Du=n(j,"LI",{});var P4e=s(Du);Zee=n(P4e,"STRONG",{});var _Or=s(Zee);i7o=r(_Or,"deberta"),_Or.forEach(t),d7o=r(P4e," \u2014 "),HP=n(P4e,"A",{href:!0});var uOr=s(HP);c7o=r(uOr,"DebertaForMaskedLM"),uOr.forEach(t),f7o=r(P4e," (DeBERTa model)"),P4e.forEach(t),m7o=i(j),ju=n(j,"LI",{});var $4e=s(ju);eoe=n($4e,"STRONG",{});var bOr=s(eoe);g7o=r(bOr,"deberta-v2"),bOr.forEach(t),h7o=r($4e," \u2014 "),UP=n($4e,"A",{href:!0});var vOr=s(UP);p7o=r(vOr,"DebertaV2ForMaskedLM"),vOr.forEach(t),_7o=r($4e," (DeBERTa-v2 model)"),$4e.forEach(t),u7o=i(j),Nu=n(j,"LI",{});var I4e=s(Nu);ooe=n(I4e,"STRONG",{});var TOr=s(ooe);b7o=r(TOr,"distilbert"),TOr.forEach(t),v7o=r(I4e," \u2014 "),JP=n(I4e,"A",{href:!0});var FOr=s(JP);T7o=r(FOr,"DistilBertForMaskedLM"),FOr.forEach(t),F7o=r(I4e," (DistilBERT model)"),I4e.forEach(t),C7o=i(j),qu=n(j,"LI",{});var D4e=s(qu);roe=n(D4e,"STRONG",{});var COr=s(roe);M7o=r(COr,"electra"),COr.forEach(t),E7o=r(D4e," \u2014 "),YP=n(D4e,"A",{href:!0});var MOr=s(YP);y7o=r(MOr,"ElectraForMaskedLM"),MOr.forEach(t),w7o=r(D4e," (ELECTRA model)"),D4e.forEach(t),A7o=i(j),Gu=n(j,"LI",{});var j4e=s(Gu);toe=n(j4e,"STRONG",{});var EOr=s(toe);L7o=r(EOr,"flaubert"),EOr.forEach(t),B7o=r(j4e," \u2014 "),KP=n(j4e,"A",{href:!0});var yOr=s(KP);x7o=r(yOr,"FlaubertWithLMHeadModel"),yOr.forEach(t),k7o=r(j4e," (FlauBERT model)"),j4e.forEach(t),R7o=i(j),Ou=n(j,"LI",{});var N4e=s(Ou);aoe=n(N4e,"STRONG",{});var wOr=s(aoe);S7o=r(wOr,"fnet"),wOr.forEach(t),P7o=r(N4e," \u2014 "),ZP=n(N4e,"A",{href:!0});var AOr=s(ZP);$7o=r(AOr,"FNetForMaskedLM"),AOr.forEach(t),I7o=r(N4e," (FNet model)"),N4e.forEach(t),D7o=i(j),Xu=n(j,"LI",{});var q4e=s(Xu);noe=n(q4e,"STRONG",{});var LOr=s(noe);j7o=r(LOr,"funnel"),LOr.forEach(t),N7o=r(q4e," \u2014 "),e$=n(q4e,"A",{href:!0});var BOr=s(e$);q7o=r(BOr,"FunnelForMaskedLM"),BOr.forEach(t),G7o=r(q4e," (Funnel Transformer model)"),q4e.forEach(t),O7o=i(j),Vu=n(j,"LI",{});var G4e=s(Vu);soe=n(G4e,"STRONG",{});var xOr=s(soe);X7o=r(xOr,"ibert"),xOr.forEach(t),V7o=r(G4e," \u2014 "),o$=n(G4e,"A",{href:!0});var kOr=s(o$);z7o=r(kOr,"IBertForMaskedLM"),kOr.forEach(t),W7o=r(G4e," (I-BERT model)"),G4e.forEach(t),Q7o=i(j),zu=n(j,"LI",{});var O4e=s(zu);loe=n(O4e,"STRONG",{});var ROr=s(loe);H7o=r(ROr,"layoutlm"),ROr.forEach(t),U7o=r(O4e," \u2014 "),r$=n(O4e,"A",{href:!0});var SOr=s(r$);J7o=r(SOr,"LayoutLMForMaskedLM"),SOr.forEach(t),Y7o=r(O4e," (LayoutLM model)"),O4e.forEach(t),K7o=i(j),Wu=n(j,"LI",{});var X4e=s(Wu);ioe=n(X4e,"STRONG",{});var POr=s(ioe);Z7o=r(POr,"longformer"),POr.forEach(t),ebo=r(X4e," \u2014 "),t$=n(X4e,"A",{href:!0});var $Or=s(t$);obo=r($Or,"LongformerForMaskedLM"),$Or.forEach(t),rbo=r(X4e," (Longformer model)"),X4e.forEach(t),tbo=i(j),Qu=n(j,"LI",{});var V4e=s(Qu);doe=n(V4e,"STRONG",{});var IOr=s(doe);abo=r(IOr,"mbart"),IOr.forEach(t),nbo=r(V4e," \u2014 "),a$=n(V4e,"A",{href:!0});var DOr=s(a$);sbo=r(DOr,"MBartForConditionalGeneration"),DOr.forEach(t),lbo=r(V4e," (mBART model)"),V4e.forEach(t),ibo=i(j),Hu=n(j,"LI",{});var z4e=s(Hu);coe=n(z4e,"STRONG",{});var jOr=s(coe);dbo=r(jOr,"megatron-bert"),jOr.forEach(t),cbo=r(z4e," \u2014 "),n$=n(z4e,"A",{href:!0});var NOr=s(n$);fbo=r(NOr,"MegatronBertForMaskedLM"),NOr.forEach(t),mbo=r(z4e," (MegatronBert model)"),z4e.forEach(t),gbo=i(j),Uu=n(j,"LI",{});var W4e=s(Uu);foe=n(W4e,"STRONG",{});var qOr=s(foe);hbo=r(qOr,"mobilebert"),qOr.forEach(t),pbo=r(W4e," \u2014 "),s$=n(W4e,"A",{href:!0});var GOr=s(s$);_bo=r(GOr,"MobileBertForMaskedLM"),GOr.forEach(t),ubo=r(W4e," (MobileBERT model)"),W4e.forEach(t),bbo=i(j),Ju=n(j,"LI",{});var Q4e=s(Ju);moe=n(Q4e,"STRONG",{});var OOr=s(moe);vbo=r(OOr,"mpnet"),OOr.forEach(t),Tbo=r(Q4e," \u2014 "),l$=n(Q4e,"A",{href:!0});var XOr=s(l$);Fbo=r(XOr,"MPNetForMaskedLM"),XOr.forEach(t),Cbo=r(Q4e," (MPNet model)"),Q4e.forEach(t),Mbo=i(j),Yu=n(j,"LI",{});var H4e=s(Yu);goe=n(H4e,"STRONG",{});var VOr=s(goe);Ebo=r(VOr,"nystromformer"),VOr.forEach(t),ybo=r(H4e," \u2014 "),i$=n(H4e,"A",{href:!0});var zOr=s(i$);wbo=r(zOr,"NystromformerForMaskedLM"),zOr.forEach(t),Abo=r(H4e," (Nystromformer model)"),H4e.forEach(t),Lbo=i(j),Ku=n(j,"LI",{});var U4e=s(Ku);hoe=n(U4e,"STRONG",{});var WOr=s(hoe);Bbo=r(WOr,"perceiver"),WOr.forEach(t),xbo=r(U4e," \u2014 "),d$=n(U4e,"A",{href:!0});var QOr=s(d$);kbo=r(QOr,"PerceiverForMaskedLM"),QOr.forEach(t),Rbo=r(U4e," (Perceiver model)"),U4e.forEach(t),Sbo=i(j),Zu=n(j,"LI",{});var J4e=s(Zu);poe=n(J4e,"STRONG",{});var HOr=s(poe);Pbo=r(HOr,"qdqbert"),HOr.forEach(t),$bo=r(J4e," \u2014 "),c$=n(J4e,"A",{href:!0});var UOr=s(c$);Ibo=r(UOr,"QDQBertForMaskedLM"),UOr.forEach(t),Dbo=r(J4e," (QDQBert model)"),J4e.forEach(t),jbo=i(j),e1=n(j,"LI",{});var Y4e=s(e1);_oe=n(Y4e,"STRONG",{});var JOr=s(_oe);Nbo=r(JOr,"reformer"),JOr.forEach(t),qbo=r(Y4e," \u2014 "),f$=n(Y4e,"A",{href:!0});var YOr=s(f$);Gbo=r(YOr,"ReformerForMaskedLM"),YOr.forEach(t),Obo=r(Y4e," (Reformer model)"),Y4e.forEach(t),Xbo=i(j),o1=n(j,"LI",{});var K4e=s(o1);uoe=n(K4e,"STRONG",{});var KOr=s(uoe);Vbo=r(KOr,"rembert"),KOr.forEach(t),zbo=r(K4e," \u2014 "),m$=n(K4e,"A",{href:!0});var ZOr=s(m$);Wbo=r(ZOr,"RemBertForMaskedLM"),ZOr.forEach(t),Qbo=r(K4e," (RemBERT model)"),K4e.forEach(t),Hbo=i(j),r1=n(j,"LI",{});var Z4e=s(r1);boe=n(Z4e,"STRONG",{});var eXr=s(boe);Ubo=r(eXr,"roberta"),eXr.forEach(t),Jbo=r(Z4e," \u2014 "),g$=n(Z4e,"A",{href:!0});var oXr=s(g$);Ybo=r(oXr,"RobertaForMaskedLM"),oXr.forEach(t),Kbo=r(Z4e," (RoBERTa model)"),Z4e.forEach(t),Zbo=i(j),t1=n(j,"LI",{});var eMe=s(t1);voe=n(eMe,"STRONG",{});var rXr=s(voe);e5o=r(rXr,"roformer"),rXr.forEach(t),o5o=r(eMe," \u2014 "),h$=n(eMe,"A",{href:!0});var tXr=s(h$);r5o=r(tXr,"RoFormerForMaskedLM"),tXr.forEach(t),t5o=r(eMe," (RoFormer model)"),eMe.forEach(t),a5o=i(j),a1=n(j,"LI",{});var oMe=s(a1);Toe=n(oMe,"STRONG",{});var aXr=s(Toe);n5o=r(aXr,"squeezebert"),aXr.forEach(t),s5o=r(oMe," \u2014 "),p$=n(oMe,"A",{href:!0});var nXr=s(p$);l5o=r(nXr,"SqueezeBertForMaskedLM"),nXr.forEach(t),i5o=r(oMe," (SqueezeBERT model)"),oMe.forEach(t),d5o=i(j),n1=n(j,"LI",{});var rMe=s(n1);Foe=n(rMe,"STRONG",{});var sXr=s(Foe);c5o=r(sXr,"tapas"),sXr.forEach(t),f5o=r(rMe," \u2014 "),_$=n(rMe,"A",{href:!0});var lXr=s(_$);m5o=r(lXr,"TapasForMaskedLM"),lXr.forEach(t),g5o=r(rMe," (TAPAS model)"),rMe.forEach(t),h5o=i(j),s1=n(j,"LI",{});var tMe=s(s1);Coe=n(tMe,"STRONG",{});var iXr=s(Coe);p5o=r(iXr,"wav2vec2"),iXr.forEach(t),_5o=r(tMe," \u2014 "),Moe=n(tMe,"CODE",{});var dXr=s(Moe);u5o=r(dXr,"Wav2Vec2ForMaskedLM"),dXr.forEach(t),b5o=r(tMe,"(Wav2Vec2 model)"),tMe.forEach(t),v5o=i(j),l1=n(j,"LI",{});var aMe=s(l1);Eoe=n(aMe,"STRONG",{});var cXr=s(Eoe);T5o=r(cXr,"xlm"),cXr.forEach(t),F5o=r(aMe," \u2014 "),u$=n(aMe,"A",{href:!0});var fXr=s(u$);C5o=r(fXr,"XLMWithLMHeadModel"),fXr.forEach(t),M5o=r(aMe," (XLM model)"),aMe.forEach(t),E5o=i(j),i1=n(j,"LI",{});var nMe=s(i1);yoe=n(nMe,"STRONG",{});var mXr=s(yoe);y5o=r(mXr,"xlm-roberta"),mXr.forEach(t),w5o=r(nMe," \u2014 "),b$=n(nMe,"A",{href:!0});var gXr=s(b$);A5o=r(gXr,"XLMRobertaForMaskedLM"),gXr.forEach(t),L5o=r(nMe," (XLM-RoBERTa model)"),nMe.forEach(t),B5o=i(j),d1=n(j,"LI",{});var sMe=s(d1);woe=n(sMe,"STRONG",{});var hXr=s(woe);x5o=r(hXr,"xlm-roberta-xl"),hXr.forEach(t),k5o=r(sMe," \u2014 "),v$=n(sMe,"A",{href:!0});var pXr=s(v$);R5o=r(pXr,"XLMRobertaXLForMaskedLM"),pXr.forEach(t),S5o=r(sMe," (XLM-RoBERTa-XL model)"),sMe.forEach(t),P5o=i(j),c1=n(j,"LI",{});var lMe=s(c1);Aoe=n(lMe,"STRONG",{});var _Xr=s(Aoe);$5o=r(_Xr,"yoso"),_Xr.forEach(t),I5o=r(lMe," \u2014 "),T$=n(lMe,"A",{href:!0});var uXr=s(T$);D5o=r(uXr,"YosoForMaskedLM"),uXr.forEach(t),j5o=r(lMe," (YOSO model)"),lMe.forEach(t),j.forEach(t),N5o=i(jt),f1=n(jt,"P",{});var iMe=s(f1);q5o=r(iMe,"The model is set in evaluation mode by default using "),Loe=n(iMe,"CODE",{});var bXr=s(Loe);G5o=r(bXr,"model.eval()"),bXr.forEach(t),O5o=r(iMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Boe=n(iMe,"CODE",{});var vXr=s(Boe);X5o=r(vXr,"model.train()"),vXr.forEach(t),iMe.forEach(t),V5o=i(jt),xoe=n(jt,"P",{});var TXr=s(xoe);z5o=r(TXr,"Examples:"),TXr.forEach(t),W5o=i(jt),m(kE.$$.fragment,jt),jt.forEach(t),Ws.forEach(t),eBe=i(c),ed=n(c,"H2",{class:!0});var lke=s(ed);m1=n(lke,"A",{id:!0,class:!0,href:!0});var FXr=s(m1);koe=n(FXr,"SPAN",{});var CXr=s(koe);m(RE.$$.fragment,CXr),CXr.forEach(t),FXr.forEach(t),Q5o=i(lke),Roe=n(lke,"SPAN",{});var MXr=s(Roe);H5o=r(MXr,"AutoModelForSeq2SeqLM"),MXr.forEach(t),lke.forEach(t),oBe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(SE.$$.fragment,Hs),U5o=i(Hs),od=n(Hs,"P",{});var zV=s(od);J5o=r(zV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Soe=n(zV,"CODE",{});var EXr=s(Soe);Y5o=r(EXr,"from_pretrained()"),EXr.forEach(t),K5o=r(zV,"class method or the "),Poe=n(zV,"CODE",{});var yXr=s(Poe);Z5o=r(yXr,"from_config()"),yXr.forEach(t),e2o=r(zV,`class
method.`),zV.forEach(t),o2o=i(Hs),PE=n(Hs,"P",{});var ike=s(PE);r2o=r(ike,"This class cannot be instantiated directly using "),$oe=n(ike,"CODE",{});var wXr=s($oe);t2o=r(wXr,"__init__()"),wXr.forEach(t),a2o=r(ike," (throws an error)."),ike.forEach(t),n2o=i(Hs),Vr=n(Hs,"DIV",{class:!0});var Us=s(Vr);m($E.$$.fragment,Us),s2o=i(Us),Ioe=n(Us,"P",{});var AXr=s(Ioe);l2o=r(AXr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),AXr.forEach(t),i2o=i(Us),rd=n(Us,"P",{});var WV=s(rd);d2o=r(WV,`Note:
Loading a model from its configuration file does `),Doe=n(WV,"STRONG",{});var LXr=s(Doe);c2o=r(LXr,"not"),LXr.forEach(t),f2o=r(WV,` load the model weights. It only affects the
model\u2019s configuration. Use `),joe=n(WV,"CODE",{});var BXr=s(joe);m2o=r(BXr,"from_pretrained()"),BXr.forEach(t),g2o=r(WV,"to load the model weights."),WV.forEach(t),h2o=i(Us),Noe=n(Us,"P",{});var xXr=s(Noe);p2o=r(xXr,"Examples:"),xXr.forEach(t),_2o=i(Us),m(IE.$$.fragment,Us),Us.forEach(t),u2o=i(Hs),De=n(Hs,"DIV",{class:!0});var Nt=s(De);m(DE.$$.fragment,Nt),b2o=i(Nt),qoe=n(Nt,"P",{});var kXr=s(qoe);v2o=r(kXr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kXr.forEach(t),T2o=i(Nt),Xa=n(Nt,"P",{});var R4=s(Xa);F2o=r(R4,"The model class to instantiate is selected based on the "),Goe=n(R4,"CODE",{});var RXr=s(Goe);C2o=r(RXr,"model_type"),RXr.forEach(t),M2o=r(R4,` property of the config object (either
passed as an argument or loaded from `),Ooe=n(R4,"CODE",{});var SXr=s(Ooe);E2o=r(SXr,"pretrained_model_name_or_path"),SXr.forEach(t),y2o=r(R4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xoe=n(R4,"CODE",{});var PXr=s(Xoe);w2o=r(PXr,"pretrained_model_name_or_path"),PXr.forEach(t),A2o=r(R4,":"),R4.forEach(t),L2o=i(Nt),ne=n(Nt,"UL",{});var ie=s(ne);g1=n(ie,"LI",{});var dMe=s(g1);Voe=n(dMe,"STRONG",{});var $Xr=s(Voe);B2o=r($Xr,"bart"),$Xr.forEach(t),x2o=r(dMe," \u2014 "),F$=n(dMe,"A",{href:!0});var IXr=s(F$);k2o=r(IXr,"BartForConditionalGeneration"),IXr.forEach(t),R2o=r(dMe," (BART model)"),dMe.forEach(t),S2o=i(ie),h1=n(ie,"LI",{});var cMe=s(h1);zoe=n(cMe,"STRONG",{});var DXr=s(zoe);P2o=r(DXr,"bigbird_pegasus"),DXr.forEach(t),$2o=r(cMe," \u2014 "),C$=n(cMe,"A",{href:!0});var jXr=s(C$);I2o=r(jXr,"BigBirdPegasusForConditionalGeneration"),jXr.forEach(t),D2o=r(cMe," (BigBirdPegasus model)"),cMe.forEach(t),j2o=i(ie),p1=n(ie,"LI",{});var fMe=s(p1);Woe=n(fMe,"STRONG",{});var NXr=s(Woe);N2o=r(NXr,"blenderbot"),NXr.forEach(t),q2o=r(fMe," \u2014 "),M$=n(fMe,"A",{href:!0});var qXr=s(M$);G2o=r(qXr,"BlenderbotForConditionalGeneration"),qXr.forEach(t),O2o=r(fMe," (Blenderbot model)"),fMe.forEach(t),X2o=i(ie),_1=n(ie,"LI",{});var mMe=s(_1);Qoe=n(mMe,"STRONG",{});var GXr=s(Qoe);V2o=r(GXr,"blenderbot-small"),GXr.forEach(t),z2o=r(mMe," \u2014 "),E$=n(mMe,"A",{href:!0});var OXr=s(E$);W2o=r(OXr,"BlenderbotSmallForConditionalGeneration"),OXr.forEach(t),Q2o=r(mMe," (BlenderbotSmall model)"),mMe.forEach(t),H2o=i(ie),u1=n(ie,"LI",{});var gMe=s(u1);Hoe=n(gMe,"STRONG",{});var XXr=s(Hoe);U2o=r(XXr,"encoder-decoder"),XXr.forEach(t),J2o=r(gMe," \u2014 "),y$=n(gMe,"A",{href:!0});var VXr=s(y$);Y2o=r(VXr,"EncoderDecoderModel"),VXr.forEach(t),K2o=r(gMe," (Encoder decoder model)"),gMe.forEach(t),Z2o=i(ie),b1=n(ie,"LI",{});var hMe=s(b1);Uoe=n(hMe,"STRONG",{});var zXr=s(Uoe);evo=r(zXr,"fsmt"),zXr.forEach(t),ovo=r(hMe," \u2014 "),w$=n(hMe,"A",{href:!0});var WXr=s(w$);rvo=r(WXr,"FSMTForConditionalGeneration"),WXr.forEach(t),tvo=r(hMe," (FairSeq Machine-Translation model)"),hMe.forEach(t),avo=i(ie),v1=n(ie,"LI",{});var pMe=s(v1);Joe=n(pMe,"STRONG",{});var QXr=s(Joe);nvo=r(QXr,"led"),QXr.forEach(t),svo=r(pMe," \u2014 "),A$=n(pMe,"A",{href:!0});var HXr=s(A$);lvo=r(HXr,"LEDForConditionalGeneration"),HXr.forEach(t),ivo=r(pMe," (LED model)"),pMe.forEach(t),dvo=i(ie),T1=n(ie,"LI",{});var _Me=s(T1);Yoe=n(_Me,"STRONG",{});var UXr=s(Yoe);cvo=r(UXr,"m2m_100"),UXr.forEach(t),fvo=r(_Me," \u2014 "),L$=n(_Me,"A",{href:!0});var JXr=s(L$);mvo=r(JXr,"M2M100ForConditionalGeneration"),JXr.forEach(t),gvo=r(_Me," (M2M100 model)"),_Me.forEach(t),hvo=i(ie),F1=n(ie,"LI",{});var uMe=s(F1);Koe=n(uMe,"STRONG",{});var YXr=s(Koe);pvo=r(YXr,"marian"),YXr.forEach(t),_vo=r(uMe," \u2014 "),B$=n(uMe,"A",{href:!0});var KXr=s(B$);uvo=r(KXr,"MarianMTModel"),KXr.forEach(t),bvo=r(uMe," (Marian model)"),uMe.forEach(t),vvo=i(ie),C1=n(ie,"LI",{});var bMe=s(C1);Zoe=n(bMe,"STRONG",{});var ZXr=s(Zoe);Tvo=r(ZXr,"mbart"),ZXr.forEach(t),Fvo=r(bMe," \u2014 "),x$=n(bMe,"A",{href:!0});var eVr=s(x$);Cvo=r(eVr,"MBartForConditionalGeneration"),eVr.forEach(t),Mvo=r(bMe," (mBART model)"),bMe.forEach(t),Evo=i(ie),M1=n(ie,"LI",{});var vMe=s(M1);ere=n(vMe,"STRONG",{});var oVr=s(ere);yvo=r(oVr,"mt5"),oVr.forEach(t),wvo=r(vMe," \u2014 "),k$=n(vMe,"A",{href:!0});var rVr=s(k$);Avo=r(rVr,"MT5ForConditionalGeneration"),rVr.forEach(t),Lvo=r(vMe," (mT5 model)"),vMe.forEach(t),Bvo=i(ie),E1=n(ie,"LI",{});var TMe=s(E1);ore=n(TMe,"STRONG",{});var tVr=s(ore);xvo=r(tVr,"pegasus"),tVr.forEach(t),kvo=r(TMe," \u2014 "),R$=n(TMe,"A",{href:!0});var aVr=s(R$);Rvo=r(aVr,"PegasusForConditionalGeneration"),aVr.forEach(t),Svo=r(TMe," (Pegasus model)"),TMe.forEach(t),Pvo=i(ie),y1=n(ie,"LI",{});var FMe=s(y1);rre=n(FMe,"STRONG",{});var nVr=s(rre);$vo=r(nVr,"plbart"),nVr.forEach(t),Ivo=r(FMe," \u2014 "),S$=n(FMe,"A",{href:!0});var sVr=s(S$);Dvo=r(sVr,"PLBartForConditionalGeneration"),sVr.forEach(t),jvo=r(FMe," (PLBart model)"),FMe.forEach(t),Nvo=i(ie),w1=n(ie,"LI",{});var CMe=s(w1);tre=n(CMe,"STRONG",{});var lVr=s(tre);qvo=r(lVr,"prophetnet"),lVr.forEach(t),Gvo=r(CMe," \u2014 "),P$=n(CMe,"A",{href:!0});var iVr=s(P$);Ovo=r(iVr,"ProphetNetForConditionalGeneration"),iVr.forEach(t),Xvo=r(CMe," (ProphetNet model)"),CMe.forEach(t),Vvo=i(ie),A1=n(ie,"LI",{});var MMe=s(A1);are=n(MMe,"STRONG",{});var dVr=s(are);zvo=r(dVr,"t5"),dVr.forEach(t),Wvo=r(MMe," \u2014 "),$$=n(MMe,"A",{href:!0});var cVr=s($$);Qvo=r(cVr,"T5ForConditionalGeneration"),cVr.forEach(t),Hvo=r(MMe," (T5 model)"),MMe.forEach(t),Uvo=i(ie),L1=n(ie,"LI",{});var EMe=s(L1);nre=n(EMe,"STRONG",{});var fVr=s(nre);Jvo=r(fVr,"xlm-prophetnet"),fVr.forEach(t),Yvo=r(EMe," \u2014 "),I$=n(EMe,"A",{href:!0});var mVr=s(I$);Kvo=r(mVr,"XLMProphetNetForConditionalGeneration"),mVr.forEach(t),Zvo=r(EMe," (XLMProphetNet model)"),EMe.forEach(t),ie.forEach(t),e0o=i(Nt),B1=n(Nt,"P",{});var yMe=s(B1);o0o=r(yMe,"The model is set in evaluation mode by default using "),sre=n(yMe,"CODE",{});var gVr=s(sre);r0o=r(gVr,"model.eval()"),gVr.forEach(t),t0o=r(yMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lre=n(yMe,"CODE",{});var hVr=s(lre);a0o=r(hVr,"model.train()"),hVr.forEach(t),yMe.forEach(t),n0o=i(Nt),ire=n(Nt,"P",{});var pVr=s(ire);s0o=r(pVr,"Examples:"),pVr.forEach(t),l0o=i(Nt),m(jE.$$.fragment,Nt),Nt.forEach(t),Hs.forEach(t),rBe=i(c),td=n(c,"H2",{class:!0});var dke=s(td);x1=n(dke,"A",{id:!0,class:!0,href:!0});var _Vr=s(x1);dre=n(_Vr,"SPAN",{});var uVr=s(dre);m(NE.$$.fragment,uVr),uVr.forEach(t),_Vr.forEach(t),i0o=i(dke),cre=n(dke,"SPAN",{});var bVr=s(cre);d0o=r(bVr,"AutoModelForSequenceClassification"),bVr.forEach(t),dke.forEach(t),tBe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(qE.$$.fragment,Js),c0o=i(Js),ad=n(Js,"P",{});var QV=s(ad);f0o=r(QV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fre=n(QV,"CODE",{});var vVr=s(fre);m0o=r(vVr,"from_pretrained()"),vVr.forEach(t),g0o=r(QV,"class method or the "),mre=n(QV,"CODE",{});var TVr=s(mre);h0o=r(TVr,"from_config()"),TVr.forEach(t),p0o=r(QV,`class
method.`),QV.forEach(t),_0o=i(Js),GE=n(Js,"P",{});var cke=s(GE);u0o=r(cke,"This class cannot be instantiated directly using "),gre=n(cke,"CODE",{});var FVr=s(gre);b0o=r(FVr,"__init__()"),FVr.forEach(t),v0o=r(cke," (throws an error)."),cke.forEach(t),T0o=i(Js),zr=n(Js,"DIV",{class:!0});var Ys=s(zr);m(OE.$$.fragment,Ys),F0o=i(Ys),hre=n(Ys,"P",{});var CVr=s(hre);C0o=r(CVr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),CVr.forEach(t),M0o=i(Ys),nd=n(Ys,"P",{});var HV=s(nd);E0o=r(HV,`Note:
Loading a model from its configuration file does `),pre=n(HV,"STRONG",{});var MVr=s(pre);y0o=r(MVr,"not"),MVr.forEach(t),w0o=r(HV,` load the model weights. It only affects the
model\u2019s configuration. Use `),_re=n(HV,"CODE",{});var EVr=s(_re);A0o=r(EVr,"from_pretrained()"),EVr.forEach(t),L0o=r(HV,"to load the model weights."),HV.forEach(t),B0o=i(Ys),ure=n(Ys,"P",{});var yVr=s(ure);x0o=r(yVr,"Examples:"),yVr.forEach(t),k0o=i(Ys),m(XE.$$.fragment,Ys),Ys.forEach(t),R0o=i(Js),je=n(Js,"DIV",{class:!0});var qt=s(je);m(VE.$$.fragment,qt),S0o=i(qt),bre=n(qt,"P",{});var wVr=s(bre);P0o=r(wVr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wVr.forEach(t),$0o=i(qt),Va=n(qt,"P",{});var S4=s(Va);I0o=r(S4,"The model class to instantiate is selected based on the "),vre=n(S4,"CODE",{});var AVr=s(vre);D0o=r(AVr,"model_type"),AVr.forEach(t),j0o=r(S4,` property of the config object (either
passed as an argument or loaded from `),Tre=n(S4,"CODE",{});var LVr=s(Tre);N0o=r(LVr,"pretrained_model_name_or_path"),LVr.forEach(t),q0o=r(S4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fre=n(S4,"CODE",{});var BVr=s(Fre);G0o=r(BVr,"pretrained_model_name_or_path"),BVr.forEach(t),O0o=r(S4,":"),S4.forEach(t),X0o=i(qt),A=n(qt,"UL",{});var L=s(A);k1=n(L,"LI",{});var wMe=s(k1);Cre=n(wMe,"STRONG",{});var xVr=s(Cre);V0o=r(xVr,"albert"),xVr.forEach(t),z0o=r(wMe," \u2014 "),D$=n(wMe,"A",{href:!0});var kVr=s(D$);W0o=r(kVr,"AlbertForSequenceClassification"),kVr.forEach(t),Q0o=r(wMe," (ALBERT model)"),wMe.forEach(t),H0o=i(L),R1=n(L,"LI",{});var AMe=s(R1);Mre=n(AMe,"STRONG",{});var RVr=s(Mre);U0o=r(RVr,"bart"),RVr.forEach(t),J0o=r(AMe," \u2014 "),j$=n(AMe,"A",{href:!0});var SVr=s(j$);Y0o=r(SVr,"BartForSequenceClassification"),SVr.forEach(t),K0o=r(AMe," (BART model)"),AMe.forEach(t),Z0o=i(L),S1=n(L,"LI",{});var LMe=s(S1);Ere=n(LMe,"STRONG",{});var PVr=s(Ere);eTo=r(PVr,"bert"),PVr.forEach(t),oTo=r(LMe," \u2014 "),N$=n(LMe,"A",{href:!0});var $Vr=s(N$);rTo=r($Vr,"BertForSequenceClassification"),$Vr.forEach(t),tTo=r(LMe," (BERT model)"),LMe.forEach(t),aTo=i(L),P1=n(L,"LI",{});var BMe=s(P1);yre=n(BMe,"STRONG",{});var IVr=s(yre);nTo=r(IVr,"big_bird"),IVr.forEach(t),sTo=r(BMe," \u2014 "),q$=n(BMe,"A",{href:!0});var DVr=s(q$);lTo=r(DVr,"BigBirdForSequenceClassification"),DVr.forEach(t),iTo=r(BMe," (BigBird model)"),BMe.forEach(t),dTo=i(L),$1=n(L,"LI",{});var xMe=s($1);wre=n(xMe,"STRONG",{});var jVr=s(wre);cTo=r(jVr,"bigbird_pegasus"),jVr.forEach(t),fTo=r(xMe," \u2014 "),G$=n(xMe,"A",{href:!0});var NVr=s(G$);mTo=r(NVr,"BigBirdPegasusForSequenceClassification"),NVr.forEach(t),gTo=r(xMe," (BigBirdPegasus model)"),xMe.forEach(t),hTo=i(L),I1=n(L,"LI",{});var kMe=s(I1);Are=n(kMe,"STRONG",{});var qVr=s(Are);pTo=r(qVr,"camembert"),qVr.forEach(t),_To=r(kMe," \u2014 "),O$=n(kMe,"A",{href:!0});var GVr=s(O$);uTo=r(GVr,"CamembertForSequenceClassification"),GVr.forEach(t),bTo=r(kMe," (CamemBERT model)"),kMe.forEach(t),vTo=i(L),D1=n(L,"LI",{});var RMe=s(D1);Lre=n(RMe,"STRONG",{});var OVr=s(Lre);TTo=r(OVr,"canine"),OVr.forEach(t),FTo=r(RMe," \u2014 "),X$=n(RMe,"A",{href:!0});var XVr=s(X$);CTo=r(XVr,"CanineForSequenceClassification"),XVr.forEach(t),MTo=r(RMe," (Canine model)"),RMe.forEach(t),ETo=i(L),j1=n(L,"LI",{});var SMe=s(j1);Bre=n(SMe,"STRONG",{});var VVr=s(Bre);yTo=r(VVr,"convbert"),VVr.forEach(t),wTo=r(SMe," \u2014 "),V$=n(SMe,"A",{href:!0});var zVr=s(V$);ATo=r(zVr,"ConvBertForSequenceClassification"),zVr.forEach(t),LTo=r(SMe," (ConvBERT model)"),SMe.forEach(t),BTo=i(L),N1=n(L,"LI",{});var PMe=s(N1);xre=n(PMe,"STRONG",{});var WVr=s(xre);xTo=r(WVr,"ctrl"),WVr.forEach(t),kTo=r(PMe," \u2014 "),z$=n(PMe,"A",{href:!0});var QVr=s(z$);RTo=r(QVr,"CTRLForSequenceClassification"),QVr.forEach(t),STo=r(PMe," (CTRL model)"),PMe.forEach(t),PTo=i(L),q1=n(L,"LI",{});var $Me=s(q1);kre=n($Me,"STRONG",{});var HVr=s(kre);$To=r(HVr,"data2vec-text"),HVr.forEach(t),ITo=r($Me," \u2014 "),W$=n($Me,"A",{href:!0});var UVr=s(W$);DTo=r(UVr,"Data2VecTextForSequenceClassification"),UVr.forEach(t),jTo=r($Me," (Data2VecText model)"),$Me.forEach(t),NTo=i(L),G1=n(L,"LI",{});var IMe=s(G1);Rre=n(IMe,"STRONG",{});var JVr=s(Rre);qTo=r(JVr,"deberta"),JVr.forEach(t),GTo=r(IMe," \u2014 "),Q$=n(IMe,"A",{href:!0});var YVr=s(Q$);OTo=r(YVr,"DebertaForSequenceClassification"),YVr.forEach(t),XTo=r(IMe," (DeBERTa model)"),IMe.forEach(t),VTo=i(L),O1=n(L,"LI",{});var DMe=s(O1);Sre=n(DMe,"STRONG",{});var KVr=s(Sre);zTo=r(KVr,"deberta-v2"),KVr.forEach(t),WTo=r(DMe," \u2014 "),H$=n(DMe,"A",{href:!0});var ZVr=s(H$);QTo=r(ZVr,"DebertaV2ForSequenceClassification"),ZVr.forEach(t),HTo=r(DMe," (DeBERTa-v2 model)"),DMe.forEach(t),UTo=i(L),X1=n(L,"LI",{});var jMe=s(X1);Pre=n(jMe,"STRONG",{});var ezr=s(Pre);JTo=r(ezr,"distilbert"),ezr.forEach(t),YTo=r(jMe," \u2014 "),U$=n(jMe,"A",{href:!0});var ozr=s(U$);KTo=r(ozr,"DistilBertForSequenceClassification"),ozr.forEach(t),ZTo=r(jMe," (DistilBERT model)"),jMe.forEach(t),eFo=i(L),V1=n(L,"LI",{});var NMe=s(V1);$re=n(NMe,"STRONG",{});var rzr=s($re);oFo=r(rzr,"electra"),rzr.forEach(t),rFo=r(NMe," \u2014 "),J$=n(NMe,"A",{href:!0});var tzr=s(J$);tFo=r(tzr,"ElectraForSequenceClassification"),tzr.forEach(t),aFo=r(NMe," (ELECTRA model)"),NMe.forEach(t),nFo=i(L),z1=n(L,"LI",{});var qMe=s(z1);Ire=n(qMe,"STRONG",{});var azr=s(Ire);sFo=r(azr,"flaubert"),azr.forEach(t),lFo=r(qMe," \u2014 "),Y$=n(qMe,"A",{href:!0});var nzr=s(Y$);iFo=r(nzr,"FlaubertForSequenceClassification"),nzr.forEach(t),dFo=r(qMe," (FlauBERT model)"),qMe.forEach(t),cFo=i(L),W1=n(L,"LI",{});var GMe=s(W1);Dre=n(GMe,"STRONG",{});var szr=s(Dre);fFo=r(szr,"fnet"),szr.forEach(t),mFo=r(GMe," \u2014 "),K$=n(GMe,"A",{href:!0});var lzr=s(K$);gFo=r(lzr,"FNetForSequenceClassification"),lzr.forEach(t),hFo=r(GMe," (FNet model)"),GMe.forEach(t),pFo=i(L),Q1=n(L,"LI",{});var OMe=s(Q1);jre=n(OMe,"STRONG",{});var izr=s(jre);_Fo=r(izr,"funnel"),izr.forEach(t),uFo=r(OMe," \u2014 "),Z$=n(OMe,"A",{href:!0});var dzr=s(Z$);bFo=r(dzr,"FunnelForSequenceClassification"),dzr.forEach(t),vFo=r(OMe," (Funnel Transformer model)"),OMe.forEach(t),TFo=i(L),H1=n(L,"LI",{});var XMe=s(H1);Nre=n(XMe,"STRONG",{});var czr=s(Nre);FFo=r(czr,"gpt2"),czr.forEach(t),CFo=r(XMe," \u2014 "),eI=n(XMe,"A",{href:!0});var fzr=s(eI);MFo=r(fzr,"GPT2ForSequenceClassification"),fzr.forEach(t),EFo=r(XMe," (OpenAI GPT-2 model)"),XMe.forEach(t),yFo=i(L),U1=n(L,"LI",{});var VMe=s(U1);qre=n(VMe,"STRONG",{});var mzr=s(qre);wFo=r(mzr,"gpt_neo"),mzr.forEach(t),AFo=r(VMe," \u2014 "),oI=n(VMe,"A",{href:!0});var gzr=s(oI);LFo=r(gzr,"GPTNeoForSequenceClassification"),gzr.forEach(t),BFo=r(VMe," (GPT Neo model)"),VMe.forEach(t),xFo=i(L),J1=n(L,"LI",{});var zMe=s(J1);Gre=n(zMe,"STRONG",{});var hzr=s(Gre);kFo=r(hzr,"gptj"),hzr.forEach(t),RFo=r(zMe," \u2014 "),rI=n(zMe,"A",{href:!0});var pzr=s(rI);SFo=r(pzr,"GPTJForSequenceClassification"),pzr.forEach(t),PFo=r(zMe," (GPT-J model)"),zMe.forEach(t),$Fo=i(L),Y1=n(L,"LI",{});var WMe=s(Y1);Ore=n(WMe,"STRONG",{});var _zr=s(Ore);IFo=r(_zr,"ibert"),_zr.forEach(t),DFo=r(WMe," \u2014 "),tI=n(WMe,"A",{href:!0});var uzr=s(tI);jFo=r(uzr,"IBertForSequenceClassification"),uzr.forEach(t),NFo=r(WMe," (I-BERT model)"),WMe.forEach(t),qFo=i(L),K1=n(L,"LI",{});var QMe=s(K1);Xre=n(QMe,"STRONG",{});var bzr=s(Xre);GFo=r(bzr,"layoutlm"),bzr.forEach(t),OFo=r(QMe," \u2014 "),aI=n(QMe,"A",{href:!0});var vzr=s(aI);XFo=r(vzr,"LayoutLMForSequenceClassification"),vzr.forEach(t),VFo=r(QMe," (LayoutLM model)"),QMe.forEach(t),zFo=i(L),Z1=n(L,"LI",{});var HMe=s(Z1);Vre=n(HMe,"STRONG",{});var Tzr=s(Vre);WFo=r(Tzr,"layoutlmv2"),Tzr.forEach(t),QFo=r(HMe," \u2014 "),nI=n(HMe,"A",{href:!0});var Fzr=s(nI);HFo=r(Fzr,"LayoutLMv2ForSequenceClassification"),Fzr.forEach(t),UFo=r(HMe," (LayoutLMv2 model)"),HMe.forEach(t),JFo=i(L),e7=n(L,"LI",{});var UMe=s(e7);zre=n(UMe,"STRONG",{});var Czr=s(zre);YFo=r(Czr,"led"),Czr.forEach(t),KFo=r(UMe," \u2014 "),sI=n(UMe,"A",{href:!0});var Mzr=s(sI);ZFo=r(Mzr,"LEDForSequenceClassification"),Mzr.forEach(t),eCo=r(UMe," (LED model)"),UMe.forEach(t),oCo=i(L),o7=n(L,"LI",{});var JMe=s(o7);Wre=n(JMe,"STRONG",{});var Ezr=s(Wre);rCo=r(Ezr,"longformer"),Ezr.forEach(t),tCo=r(JMe," \u2014 "),lI=n(JMe,"A",{href:!0});var yzr=s(lI);aCo=r(yzr,"LongformerForSequenceClassification"),yzr.forEach(t),nCo=r(JMe," (Longformer model)"),JMe.forEach(t),sCo=i(L),r7=n(L,"LI",{});var YMe=s(r7);Qre=n(YMe,"STRONG",{});var wzr=s(Qre);lCo=r(wzr,"mbart"),wzr.forEach(t),iCo=r(YMe," \u2014 "),iI=n(YMe,"A",{href:!0});var Azr=s(iI);dCo=r(Azr,"MBartForSequenceClassification"),Azr.forEach(t),cCo=r(YMe," (mBART model)"),YMe.forEach(t),fCo=i(L),t7=n(L,"LI",{});var KMe=s(t7);Hre=n(KMe,"STRONG",{});var Lzr=s(Hre);mCo=r(Lzr,"megatron-bert"),Lzr.forEach(t),gCo=r(KMe," \u2014 "),dI=n(KMe,"A",{href:!0});var Bzr=s(dI);hCo=r(Bzr,"MegatronBertForSequenceClassification"),Bzr.forEach(t),pCo=r(KMe," (MegatronBert model)"),KMe.forEach(t),_Co=i(L),a7=n(L,"LI",{});var ZMe=s(a7);Ure=n(ZMe,"STRONG",{});var xzr=s(Ure);uCo=r(xzr,"mobilebert"),xzr.forEach(t),bCo=r(ZMe," \u2014 "),cI=n(ZMe,"A",{href:!0});var kzr=s(cI);vCo=r(kzr,"MobileBertForSequenceClassification"),kzr.forEach(t),TCo=r(ZMe," (MobileBERT model)"),ZMe.forEach(t),FCo=i(L),n7=n(L,"LI",{});var eEe=s(n7);Jre=n(eEe,"STRONG",{});var Rzr=s(Jre);CCo=r(Rzr,"mpnet"),Rzr.forEach(t),MCo=r(eEe," \u2014 "),fI=n(eEe,"A",{href:!0});var Szr=s(fI);ECo=r(Szr,"MPNetForSequenceClassification"),Szr.forEach(t),yCo=r(eEe," (MPNet model)"),eEe.forEach(t),wCo=i(L),s7=n(L,"LI",{});var oEe=s(s7);Yre=n(oEe,"STRONG",{});var Pzr=s(Yre);ACo=r(Pzr,"nystromformer"),Pzr.forEach(t),LCo=r(oEe," \u2014 "),mI=n(oEe,"A",{href:!0});var $zr=s(mI);BCo=r($zr,"NystromformerForSequenceClassification"),$zr.forEach(t),xCo=r(oEe," (Nystromformer model)"),oEe.forEach(t),kCo=i(L),l7=n(L,"LI",{});var rEe=s(l7);Kre=n(rEe,"STRONG",{});var Izr=s(Kre);RCo=r(Izr,"openai-gpt"),Izr.forEach(t),SCo=r(rEe," \u2014 "),gI=n(rEe,"A",{href:!0});var Dzr=s(gI);PCo=r(Dzr,"OpenAIGPTForSequenceClassification"),Dzr.forEach(t),$Co=r(rEe," (OpenAI GPT model)"),rEe.forEach(t),ICo=i(L),i7=n(L,"LI",{});var tEe=s(i7);Zre=n(tEe,"STRONG",{});var jzr=s(Zre);DCo=r(jzr,"perceiver"),jzr.forEach(t),jCo=r(tEe," \u2014 "),hI=n(tEe,"A",{href:!0});var Nzr=s(hI);NCo=r(Nzr,"PerceiverForSequenceClassification"),Nzr.forEach(t),qCo=r(tEe," (Perceiver model)"),tEe.forEach(t),GCo=i(L),d7=n(L,"LI",{});var aEe=s(d7);ete=n(aEe,"STRONG",{});var qzr=s(ete);OCo=r(qzr,"plbart"),qzr.forEach(t),XCo=r(aEe," \u2014 "),pI=n(aEe,"A",{href:!0});var Gzr=s(pI);VCo=r(Gzr,"PLBartForSequenceClassification"),Gzr.forEach(t),zCo=r(aEe," (PLBart model)"),aEe.forEach(t),WCo=i(L),c7=n(L,"LI",{});var nEe=s(c7);ote=n(nEe,"STRONG",{});var Ozr=s(ote);QCo=r(Ozr,"qdqbert"),Ozr.forEach(t),HCo=r(nEe," \u2014 "),_I=n(nEe,"A",{href:!0});var Xzr=s(_I);UCo=r(Xzr,"QDQBertForSequenceClassification"),Xzr.forEach(t),JCo=r(nEe," (QDQBert model)"),nEe.forEach(t),YCo=i(L),f7=n(L,"LI",{});var sEe=s(f7);rte=n(sEe,"STRONG",{});var Vzr=s(rte);KCo=r(Vzr,"reformer"),Vzr.forEach(t),ZCo=r(sEe," \u2014 "),uI=n(sEe,"A",{href:!0});var zzr=s(uI);e4o=r(zzr,"ReformerForSequenceClassification"),zzr.forEach(t),o4o=r(sEe," (Reformer model)"),sEe.forEach(t),r4o=i(L),m7=n(L,"LI",{});var lEe=s(m7);tte=n(lEe,"STRONG",{});var Wzr=s(tte);t4o=r(Wzr,"rembert"),Wzr.forEach(t),a4o=r(lEe," \u2014 "),bI=n(lEe,"A",{href:!0});var Qzr=s(bI);n4o=r(Qzr,"RemBertForSequenceClassification"),Qzr.forEach(t),s4o=r(lEe," (RemBERT model)"),lEe.forEach(t),l4o=i(L),g7=n(L,"LI",{});var iEe=s(g7);ate=n(iEe,"STRONG",{});var Hzr=s(ate);i4o=r(Hzr,"roberta"),Hzr.forEach(t),d4o=r(iEe," \u2014 "),vI=n(iEe,"A",{href:!0});var Uzr=s(vI);c4o=r(Uzr,"RobertaForSequenceClassification"),Uzr.forEach(t),f4o=r(iEe," (RoBERTa model)"),iEe.forEach(t),m4o=i(L),h7=n(L,"LI",{});var dEe=s(h7);nte=n(dEe,"STRONG",{});var Jzr=s(nte);g4o=r(Jzr,"roformer"),Jzr.forEach(t),h4o=r(dEe," \u2014 "),TI=n(dEe,"A",{href:!0});var Yzr=s(TI);p4o=r(Yzr,"RoFormerForSequenceClassification"),Yzr.forEach(t),_4o=r(dEe," (RoFormer model)"),dEe.forEach(t),u4o=i(L),p7=n(L,"LI",{});var cEe=s(p7);ste=n(cEe,"STRONG",{});var Kzr=s(ste);b4o=r(Kzr,"squeezebert"),Kzr.forEach(t),v4o=r(cEe," \u2014 "),FI=n(cEe,"A",{href:!0});var Zzr=s(FI);T4o=r(Zzr,"SqueezeBertForSequenceClassification"),Zzr.forEach(t),F4o=r(cEe," (SqueezeBERT model)"),cEe.forEach(t),C4o=i(L),_7=n(L,"LI",{});var fEe=s(_7);lte=n(fEe,"STRONG",{});var eWr=s(lte);M4o=r(eWr,"tapas"),eWr.forEach(t),E4o=r(fEe," \u2014 "),CI=n(fEe,"A",{href:!0});var oWr=s(CI);y4o=r(oWr,"TapasForSequenceClassification"),oWr.forEach(t),w4o=r(fEe," (TAPAS model)"),fEe.forEach(t),A4o=i(L),u7=n(L,"LI",{});var mEe=s(u7);ite=n(mEe,"STRONG",{});var rWr=s(ite);L4o=r(rWr,"transfo-xl"),rWr.forEach(t),B4o=r(mEe," \u2014 "),MI=n(mEe,"A",{href:!0});var tWr=s(MI);x4o=r(tWr,"TransfoXLForSequenceClassification"),tWr.forEach(t),k4o=r(mEe," (Transformer-XL model)"),mEe.forEach(t),R4o=i(L),b7=n(L,"LI",{});var gEe=s(b7);dte=n(gEe,"STRONG",{});var aWr=s(dte);S4o=r(aWr,"xlm"),aWr.forEach(t),P4o=r(gEe," \u2014 "),EI=n(gEe,"A",{href:!0});var nWr=s(EI);$4o=r(nWr,"XLMForSequenceClassification"),nWr.forEach(t),I4o=r(gEe," (XLM model)"),gEe.forEach(t),D4o=i(L),v7=n(L,"LI",{});var hEe=s(v7);cte=n(hEe,"STRONG",{});var sWr=s(cte);j4o=r(sWr,"xlm-roberta"),sWr.forEach(t),N4o=r(hEe," \u2014 "),yI=n(hEe,"A",{href:!0});var lWr=s(yI);q4o=r(lWr,"XLMRobertaForSequenceClassification"),lWr.forEach(t),G4o=r(hEe," (XLM-RoBERTa model)"),hEe.forEach(t),O4o=i(L),T7=n(L,"LI",{});var pEe=s(T7);fte=n(pEe,"STRONG",{});var iWr=s(fte);X4o=r(iWr,"xlm-roberta-xl"),iWr.forEach(t),V4o=r(pEe," \u2014 "),wI=n(pEe,"A",{href:!0});var dWr=s(wI);z4o=r(dWr,"XLMRobertaXLForSequenceClassification"),dWr.forEach(t),W4o=r(pEe," (XLM-RoBERTa-XL model)"),pEe.forEach(t),Q4o=i(L),F7=n(L,"LI",{});var _Ee=s(F7);mte=n(_Ee,"STRONG",{});var cWr=s(mte);H4o=r(cWr,"xlnet"),cWr.forEach(t),U4o=r(_Ee," \u2014 "),AI=n(_Ee,"A",{href:!0});var fWr=s(AI);J4o=r(fWr,"XLNetForSequenceClassification"),fWr.forEach(t),Y4o=r(_Ee," (XLNet model)"),_Ee.forEach(t),K4o=i(L),C7=n(L,"LI",{});var uEe=s(C7);gte=n(uEe,"STRONG",{});var mWr=s(gte);Z4o=r(mWr,"yoso"),mWr.forEach(t),eMo=r(uEe," \u2014 "),LI=n(uEe,"A",{href:!0});var gWr=s(LI);oMo=r(gWr,"YosoForSequenceClassification"),gWr.forEach(t),rMo=r(uEe," (YOSO model)"),uEe.forEach(t),L.forEach(t),tMo=i(qt),M7=n(qt,"P",{});var bEe=s(M7);aMo=r(bEe,"The model is set in evaluation mode by default using "),hte=n(bEe,"CODE",{});var hWr=s(hte);nMo=r(hWr,"model.eval()"),hWr.forEach(t),sMo=r(bEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pte=n(bEe,"CODE",{});var pWr=s(pte);lMo=r(pWr,"model.train()"),pWr.forEach(t),bEe.forEach(t),iMo=i(qt),_te=n(qt,"P",{});var _Wr=s(_te);dMo=r(_Wr,"Examples:"),_Wr.forEach(t),cMo=i(qt),m(zE.$$.fragment,qt),qt.forEach(t),Js.forEach(t),aBe=i(c),sd=n(c,"H2",{class:!0});var fke=s(sd);E7=n(fke,"A",{id:!0,class:!0,href:!0});var uWr=s(E7);ute=n(uWr,"SPAN",{});var bWr=s(ute);m(WE.$$.fragment,bWr),bWr.forEach(t),uWr.forEach(t),fMo=i(fke),bte=n(fke,"SPAN",{});var vWr=s(bte);mMo=r(vWr,"AutoModelForMultipleChoice"),vWr.forEach(t),fke.forEach(t),nBe=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(QE.$$.fragment,Ks),gMo=i(Ks),ld=n(Ks,"P",{});var UV=s(ld);hMo=r(UV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vte=n(UV,"CODE",{});var TWr=s(vte);pMo=r(TWr,"from_pretrained()"),TWr.forEach(t),_Mo=r(UV,"class method or the "),Tte=n(UV,"CODE",{});var FWr=s(Tte);uMo=r(FWr,"from_config()"),FWr.forEach(t),bMo=r(UV,`class
method.`),UV.forEach(t),vMo=i(Ks),HE=n(Ks,"P",{});var mke=s(HE);TMo=r(mke,"This class cannot be instantiated directly using "),Fte=n(mke,"CODE",{});var CWr=s(Fte);FMo=r(CWr,"__init__()"),CWr.forEach(t),CMo=r(mke," (throws an error)."),mke.forEach(t),MMo=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(UE.$$.fragment,Zs),EMo=i(Zs),Cte=n(Zs,"P",{});var MWr=s(Cte);yMo=r(MWr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MWr.forEach(t),wMo=i(Zs),id=n(Zs,"P",{});var JV=s(id);AMo=r(JV,`Note:
Loading a model from its configuration file does `),Mte=n(JV,"STRONG",{});var EWr=s(Mte);LMo=r(EWr,"not"),EWr.forEach(t),BMo=r(JV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ete=n(JV,"CODE",{});var yWr=s(Ete);xMo=r(yWr,"from_pretrained()"),yWr.forEach(t),kMo=r(JV,"to load the model weights."),JV.forEach(t),RMo=i(Zs),yte=n(Zs,"P",{});var wWr=s(yte);SMo=r(wWr,"Examples:"),wWr.forEach(t),PMo=i(Zs),m(JE.$$.fragment,Zs),Zs.forEach(t),$Mo=i(Ks),Ne=n(Ks,"DIV",{class:!0});var Gt=s(Ne);m(YE.$$.fragment,Gt),IMo=i(Gt),wte=n(Gt,"P",{});var AWr=s(wte);DMo=r(AWr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),AWr.forEach(t),jMo=i(Gt),za=n(Gt,"P",{});var P4=s(za);NMo=r(P4,"The model class to instantiate is selected based on the "),Ate=n(P4,"CODE",{});var LWr=s(Ate);qMo=r(LWr,"model_type"),LWr.forEach(t),GMo=r(P4,` property of the config object (either
passed as an argument or loaded from `),Lte=n(P4,"CODE",{});var BWr=s(Lte);OMo=r(BWr,"pretrained_model_name_or_path"),BWr.forEach(t),XMo=r(P4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bte=n(P4,"CODE",{});var xWr=s(Bte);VMo=r(xWr,"pretrained_model_name_or_path"),xWr.forEach(t),zMo=r(P4,":"),P4.forEach(t),WMo=i(Gt),G=n(Gt,"UL",{});var O=s(G);y7=n(O,"LI",{});var vEe=s(y7);xte=n(vEe,"STRONG",{});var kWr=s(xte);QMo=r(kWr,"albert"),kWr.forEach(t),HMo=r(vEe," \u2014 "),BI=n(vEe,"A",{href:!0});var RWr=s(BI);UMo=r(RWr,"AlbertForMultipleChoice"),RWr.forEach(t),JMo=r(vEe," (ALBERT model)"),vEe.forEach(t),YMo=i(O),w7=n(O,"LI",{});var TEe=s(w7);kte=n(TEe,"STRONG",{});var SWr=s(kte);KMo=r(SWr,"bert"),SWr.forEach(t),ZMo=r(TEe," \u2014 "),xI=n(TEe,"A",{href:!0});var PWr=s(xI);eEo=r(PWr,"BertForMultipleChoice"),PWr.forEach(t),oEo=r(TEe," (BERT model)"),TEe.forEach(t),rEo=i(O),A7=n(O,"LI",{});var FEe=s(A7);Rte=n(FEe,"STRONG",{});var $Wr=s(Rte);tEo=r($Wr,"big_bird"),$Wr.forEach(t),aEo=r(FEe," \u2014 "),kI=n(FEe,"A",{href:!0});var IWr=s(kI);nEo=r(IWr,"BigBirdForMultipleChoice"),IWr.forEach(t),sEo=r(FEe," (BigBird model)"),FEe.forEach(t),lEo=i(O),L7=n(O,"LI",{});var CEe=s(L7);Ste=n(CEe,"STRONG",{});var DWr=s(Ste);iEo=r(DWr,"camembert"),DWr.forEach(t),dEo=r(CEe," \u2014 "),RI=n(CEe,"A",{href:!0});var jWr=s(RI);cEo=r(jWr,"CamembertForMultipleChoice"),jWr.forEach(t),fEo=r(CEe," (CamemBERT model)"),CEe.forEach(t),mEo=i(O),B7=n(O,"LI",{});var MEe=s(B7);Pte=n(MEe,"STRONG",{});var NWr=s(Pte);gEo=r(NWr,"canine"),NWr.forEach(t),hEo=r(MEe," \u2014 "),SI=n(MEe,"A",{href:!0});var qWr=s(SI);pEo=r(qWr,"CanineForMultipleChoice"),qWr.forEach(t),_Eo=r(MEe," (Canine model)"),MEe.forEach(t),uEo=i(O),x7=n(O,"LI",{});var EEe=s(x7);$te=n(EEe,"STRONG",{});var GWr=s($te);bEo=r(GWr,"convbert"),GWr.forEach(t),vEo=r(EEe," \u2014 "),PI=n(EEe,"A",{href:!0});var OWr=s(PI);TEo=r(OWr,"ConvBertForMultipleChoice"),OWr.forEach(t),FEo=r(EEe," (ConvBERT model)"),EEe.forEach(t),CEo=i(O),k7=n(O,"LI",{});var yEe=s(k7);Ite=n(yEe,"STRONG",{});var XWr=s(Ite);MEo=r(XWr,"data2vec-text"),XWr.forEach(t),EEo=r(yEe," \u2014 "),$I=n(yEe,"A",{href:!0});var VWr=s($I);yEo=r(VWr,"Data2VecTextForMultipleChoice"),VWr.forEach(t),wEo=r(yEe," (Data2VecText model)"),yEe.forEach(t),AEo=i(O),R7=n(O,"LI",{});var wEe=s(R7);Dte=n(wEe,"STRONG",{});var zWr=s(Dte);LEo=r(zWr,"distilbert"),zWr.forEach(t),BEo=r(wEe," \u2014 "),II=n(wEe,"A",{href:!0});var WWr=s(II);xEo=r(WWr,"DistilBertForMultipleChoice"),WWr.forEach(t),kEo=r(wEe," (DistilBERT model)"),wEe.forEach(t),REo=i(O),S7=n(O,"LI",{});var AEe=s(S7);jte=n(AEe,"STRONG",{});var QWr=s(jte);SEo=r(QWr,"electra"),QWr.forEach(t),PEo=r(AEe," \u2014 "),DI=n(AEe,"A",{href:!0});var HWr=s(DI);$Eo=r(HWr,"ElectraForMultipleChoice"),HWr.forEach(t),IEo=r(AEe," (ELECTRA model)"),AEe.forEach(t),DEo=i(O),P7=n(O,"LI",{});var LEe=s(P7);Nte=n(LEe,"STRONG",{});var UWr=s(Nte);jEo=r(UWr,"flaubert"),UWr.forEach(t),NEo=r(LEe," \u2014 "),jI=n(LEe,"A",{href:!0});var JWr=s(jI);qEo=r(JWr,"FlaubertForMultipleChoice"),JWr.forEach(t),GEo=r(LEe," (FlauBERT model)"),LEe.forEach(t),OEo=i(O),$7=n(O,"LI",{});var BEe=s($7);qte=n(BEe,"STRONG",{});var YWr=s(qte);XEo=r(YWr,"fnet"),YWr.forEach(t),VEo=r(BEe," \u2014 "),NI=n(BEe,"A",{href:!0});var KWr=s(NI);zEo=r(KWr,"FNetForMultipleChoice"),KWr.forEach(t),WEo=r(BEe," (FNet model)"),BEe.forEach(t),QEo=i(O),I7=n(O,"LI",{});var xEe=s(I7);Gte=n(xEe,"STRONG",{});var ZWr=s(Gte);HEo=r(ZWr,"funnel"),ZWr.forEach(t),UEo=r(xEe," \u2014 "),qI=n(xEe,"A",{href:!0});var eQr=s(qI);JEo=r(eQr,"FunnelForMultipleChoice"),eQr.forEach(t),YEo=r(xEe," (Funnel Transformer model)"),xEe.forEach(t),KEo=i(O),D7=n(O,"LI",{});var kEe=s(D7);Ote=n(kEe,"STRONG",{});var oQr=s(Ote);ZEo=r(oQr,"ibert"),oQr.forEach(t),e3o=r(kEe," \u2014 "),GI=n(kEe,"A",{href:!0});var rQr=s(GI);o3o=r(rQr,"IBertForMultipleChoice"),rQr.forEach(t),r3o=r(kEe," (I-BERT model)"),kEe.forEach(t),t3o=i(O),j7=n(O,"LI",{});var REe=s(j7);Xte=n(REe,"STRONG",{});var tQr=s(Xte);a3o=r(tQr,"longformer"),tQr.forEach(t),n3o=r(REe," \u2014 "),OI=n(REe,"A",{href:!0});var aQr=s(OI);s3o=r(aQr,"LongformerForMultipleChoice"),aQr.forEach(t),l3o=r(REe," (Longformer model)"),REe.forEach(t),i3o=i(O),N7=n(O,"LI",{});var SEe=s(N7);Vte=n(SEe,"STRONG",{});var nQr=s(Vte);d3o=r(nQr,"megatron-bert"),nQr.forEach(t),c3o=r(SEe," \u2014 "),XI=n(SEe,"A",{href:!0});var sQr=s(XI);f3o=r(sQr,"MegatronBertForMultipleChoice"),sQr.forEach(t),m3o=r(SEe," (MegatronBert model)"),SEe.forEach(t),g3o=i(O),q7=n(O,"LI",{});var PEe=s(q7);zte=n(PEe,"STRONG",{});var lQr=s(zte);h3o=r(lQr,"mobilebert"),lQr.forEach(t),p3o=r(PEe," \u2014 "),VI=n(PEe,"A",{href:!0});var iQr=s(VI);_3o=r(iQr,"MobileBertForMultipleChoice"),iQr.forEach(t),u3o=r(PEe," (MobileBERT model)"),PEe.forEach(t),b3o=i(O),G7=n(O,"LI",{});var $Ee=s(G7);Wte=n($Ee,"STRONG",{});var dQr=s(Wte);v3o=r(dQr,"mpnet"),dQr.forEach(t),T3o=r($Ee," \u2014 "),zI=n($Ee,"A",{href:!0});var cQr=s(zI);F3o=r(cQr,"MPNetForMultipleChoice"),cQr.forEach(t),C3o=r($Ee," (MPNet model)"),$Ee.forEach(t),M3o=i(O),O7=n(O,"LI",{});var IEe=s(O7);Qte=n(IEe,"STRONG",{});var fQr=s(Qte);E3o=r(fQr,"nystromformer"),fQr.forEach(t),y3o=r(IEe," \u2014 "),WI=n(IEe,"A",{href:!0});var mQr=s(WI);w3o=r(mQr,"NystromformerForMultipleChoice"),mQr.forEach(t),A3o=r(IEe," (Nystromformer model)"),IEe.forEach(t),L3o=i(O),X7=n(O,"LI",{});var DEe=s(X7);Hte=n(DEe,"STRONG",{});var gQr=s(Hte);B3o=r(gQr,"qdqbert"),gQr.forEach(t),x3o=r(DEe," \u2014 "),QI=n(DEe,"A",{href:!0});var hQr=s(QI);k3o=r(hQr,"QDQBertForMultipleChoice"),hQr.forEach(t),R3o=r(DEe," (QDQBert model)"),DEe.forEach(t),S3o=i(O),V7=n(O,"LI",{});var jEe=s(V7);Ute=n(jEe,"STRONG",{});var pQr=s(Ute);P3o=r(pQr,"rembert"),pQr.forEach(t),$3o=r(jEe," \u2014 "),HI=n(jEe,"A",{href:!0});var _Qr=s(HI);I3o=r(_Qr,"RemBertForMultipleChoice"),_Qr.forEach(t),D3o=r(jEe," (RemBERT model)"),jEe.forEach(t),j3o=i(O),z7=n(O,"LI",{});var NEe=s(z7);Jte=n(NEe,"STRONG",{});var uQr=s(Jte);N3o=r(uQr,"roberta"),uQr.forEach(t),q3o=r(NEe," \u2014 "),UI=n(NEe,"A",{href:!0});var bQr=s(UI);G3o=r(bQr,"RobertaForMultipleChoice"),bQr.forEach(t),O3o=r(NEe," (RoBERTa model)"),NEe.forEach(t),X3o=i(O),W7=n(O,"LI",{});var qEe=s(W7);Yte=n(qEe,"STRONG",{});var vQr=s(Yte);V3o=r(vQr,"roformer"),vQr.forEach(t),z3o=r(qEe," \u2014 "),JI=n(qEe,"A",{href:!0});var TQr=s(JI);W3o=r(TQr,"RoFormerForMultipleChoice"),TQr.forEach(t),Q3o=r(qEe," (RoFormer model)"),qEe.forEach(t),H3o=i(O),Q7=n(O,"LI",{});var GEe=s(Q7);Kte=n(GEe,"STRONG",{});var FQr=s(Kte);U3o=r(FQr,"squeezebert"),FQr.forEach(t),J3o=r(GEe," \u2014 "),YI=n(GEe,"A",{href:!0});var CQr=s(YI);Y3o=r(CQr,"SqueezeBertForMultipleChoice"),CQr.forEach(t),K3o=r(GEe," (SqueezeBERT model)"),GEe.forEach(t),Z3o=i(O),H7=n(O,"LI",{});var OEe=s(H7);Zte=n(OEe,"STRONG",{});var MQr=s(Zte);eyo=r(MQr,"xlm"),MQr.forEach(t),oyo=r(OEe," \u2014 "),KI=n(OEe,"A",{href:!0});var EQr=s(KI);ryo=r(EQr,"XLMForMultipleChoice"),EQr.forEach(t),tyo=r(OEe," (XLM model)"),OEe.forEach(t),ayo=i(O),U7=n(O,"LI",{});var XEe=s(U7);eae=n(XEe,"STRONG",{});var yQr=s(eae);nyo=r(yQr,"xlm-roberta"),yQr.forEach(t),syo=r(XEe," \u2014 "),ZI=n(XEe,"A",{href:!0});var wQr=s(ZI);lyo=r(wQr,"XLMRobertaForMultipleChoice"),wQr.forEach(t),iyo=r(XEe," (XLM-RoBERTa model)"),XEe.forEach(t),dyo=i(O),J7=n(O,"LI",{});var VEe=s(J7);oae=n(VEe,"STRONG",{});var AQr=s(oae);cyo=r(AQr,"xlm-roberta-xl"),AQr.forEach(t),fyo=r(VEe," \u2014 "),eD=n(VEe,"A",{href:!0});var LQr=s(eD);myo=r(LQr,"XLMRobertaXLForMultipleChoice"),LQr.forEach(t),gyo=r(VEe," (XLM-RoBERTa-XL model)"),VEe.forEach(t),hyo=i(O),Y7=n(O,"LI",{});var zEe=s(Y7);rae=n(zEe,"STRONG",{});var BQr=s(rae);pyo=r(BQr,"xlnet"),BQr.forEach(t),_yo=r(zEe," \u2014 "),oD=n(zEe,"A",{href:!0});var xQr=s(oD);uyo=r(xQr,"XLNetForMultipleChoice"),xQr.forEach(t),byo=r(zEe," (XLNet model)"),zEe.forEach(t),vyo=i(O),K7=n(O,"LI",{});var WEe=s(K7);tae=n(WEe,"STRONG",{});var kQr=s(tae);Tyo=r(kQr,"yoso"),kQr.forEach(t),Fyo=r(WEe," \u2014 "),rD=n(WEe,"A",{href:!0});var RQr=s(rD);Cyo=r(RQr,"YosoForMultipleChoice"),RQr.forEach(t),Myo=r(WEe," (YOSO model)"),WEe.forEach(t),O.forEach(t),Eyo=i(Gt),Z7=n(Gt,"P",{});var QEe=s(Z7);yyo=r(QEe,"The model is set in evaluation mode by default using "),aae=n(QEe,"CODE",{});var SQr=s(aae);wyo=r(SQr,"model.eval()"),SQr.forEach(t),Ayo=r(QEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nae=n(QEe,"CODE",{});var PQr=s(nae);Lyo=r(PQr,"model.train()"),PQr.forEach(t),QEe.forEach(t),Byo=i(Gt),sae=n(Gt,"P",{});var $Qr=s(sae);xyo=r($Qr,"Examples:"),$Qr.forEach(t),kyo=i(Gt),m(KE.$$.fragment,Gt),Gt.forEach(t),Ks.forEach(t),sBe=i(c),dd=n(c,"H2",{class:!0});var gke=s(dd);eb=n(gke,"A",{id:!0,class:!0,href:!0});var IQr=s(eb);lae=n(IQr,"SPAN",{});var DQr=s(lae);m(ZE.$$.fragment,DQr),DQr.forEach(t),IQr.forEach(t),Ryo=i(gke),iae=n(gke,"SPAN",{});var jQr=s(iae);Syo=r(jQr,"AutoModelForNextSentencePrediction"),jQr.forEach(t),gke.forEach(t),lBe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(e3.$$.fragment,el),Pyo=i(el),cd=n(el,"P",{});var YV=s(cd);$yo=r(YV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dae=n(YV,"CODE",{});var NQr=s(dae);Iyo=r(NQr,"from_pretrained()"),NQr.forEach(t),Dyo=r(YV,"class method or the "),cae=n(YV,"CODE",{});var qQr=s(cae);jyo=r(qQr,"from_config()"),qQr.forEach(t),Nyo=r(YV,`class
method.`),YV.forEach(t),qyo=i(el),o3=n(el,"P",{});var hke=s(o3);Gyo=r(hke,"This class cannot be instantiated directly using "),fae=n(hke,"CODE",{});var GQr=s(fae);Oyo=r(GQr,"__init__()"),GQr.forEach(t),Xyo=r(hke," (throws an error)."),hke.forEach(t),Vyo=i(el),Qr=n(el,"DIV",{class:!0});var ol=s(Qr);m(r3.$$.fragment,ol),zyo=i(ol),mae=n(ol,"P",{});var OQr=s(mae);Wyo=r(OQr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),OQr.forEach(t),Qyo=i(ol),fd=n(ol,"P",{});var KV=s(fd);Hyo=r(KV,`Note:
Loading a model from its configuration file does `),gae=n(KV,"STRONG",{});var XQr=s(gae);Uyo=r(XQr,"not"),XQr.forEach(t),Jyo=r(KV,` load the model weights. It only affects the
model\u2019s configuration. Use `),hae=n(KV,"CODE",{});var VQr=s(hae);Yyo=r(VQr,"from_pretrained()"),VQr.forEach(t),Kyo=r(KV,"to load the model weights."),KV.forEach(t),Zyo=i(ol),pae=n(ol,"P",{});var zQr=s(pae);ewo=r(zQr,"Examples:"),zQr.forEach(t),owo=i(ol),m(t3.$$.fragment,ol),ol.forEach(t),rwo=i(el),qe=n(el,"DIV",{class:!0});var Ot=s(qe);m(a3.$$.fragment,Ot),two=i(Ot),_ae=n(Ot,"P",{});var WQr=s(_ae);awo=r(WQr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),WQr.forEach(t),nwo=i(Ot),Wa=n(Ot,"P",{});var $4=s(Wa);swo=r($4,"The model class to instantiate is selected based on the "),uae=n($4,"CODE",{});var QQr=s(uae);lwo=r(QQr,"model_type"),QQr.forEach(t),iwo=r($4,` property of the config object (either
passed as an argument or loaded from `),bae=n($4,"CODE",{});var HQr=s(bae);dwo=r(HQr,"pretrained_model_name_or_path"),HQr.forEach(t),cwo=r($4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vae=n($4,"CODE",{});var UQr=s(vae);fwo=r(UQr,"pretrained_model_name_or_path"),UQr.forEach(t),mwo=r($4,":"),$4.forEach(t),gwo=i(Ot),na=n(Ot,"UL",{});var rl=s(na);ob=n(rl,"LI",{});var HEe=s(ob);Tae=n(HEe,"STRONG",{});var JQr=s(Tae);hwo=r(JQr,"bert"),JQr.forEach(t),pwo=r(HEe," \u2014 "),tD=n(HEe,"A",{href:!0});var YQr=s(tD);_wo=r(YQr,"BertForNextSentencePrediction"),YQr.forEach(t),uwo=r(HEe," (BERT model)"),HEe.forEach(t),bwo=i(rl),rb=n(rl,"LI",{});var UEe=s(rb);Fae=n(UEe,"STRONG",{});var KQr=s(Fae);vwo=r(KQr,"fnet"),KQr.forEach(t),Two=r(UEe," \u2014 "),aD=n(UEe,"A",{href:!0});var ZQr=s(aD);Fwo=r(ZQr,"FNetForNextSentencePrediction"),ZQr.forEach(t),Cwo=r(UEe," (FNet model)"),UEe.forEach(t),Mwo=i(rl),tb=n(rl,"LI",{});var JEe=s(tb);Cae=n(JEe,"STRONG",{});var eHr=s(Cae);Ewo=r(eHr,"megatron-bert"),eHr.forEach(t),ywo=r(JEe," \u2014 "),nD=n(JEe,"A",{href:!0});var oHr=s(nD);wwo=r(oHr,"MegatronBertForNextSentencePrediction"),oHr.forEach(t),Awo=r(JEe," (MegatronBert model)"),JEe.forEach(t),Lwo=i(rl),ab=n(rl,"LI",{});var YEe=s(ab);Mae=n(YEe,"STRONG",{});var rHr=s(Mae);Bwo=r(rHr,"mobilebert"),rHr.forEach(t),xwo=r(YEe," \u2014 "),sD=n(YEe,"A",{href:!0});var tHr=s(sD);kwo=r(tHr,"MobileBertForNextSentencePrediction"),tHr.forEach(t),Rwo=r(YEe," (MobileBERT model)"),YEe.forEach(t),Swo=i(rl),nb=n(rl,"LI",{});var KEe=s(nb);Eae=n(KEe,"STRONG",{});var aHr=s(Eae);Pwo=r(aHr,"qdqbert"),aHr.forEach(t),$wo=r(KEe," \u2014 "),lD=n(KEe,"A",{href:!0});var nHr=s(lD);Iwo=r(nHr,"QDQBertForNextSentencePrediction"),nHr.forEach(t),Dwo=r(KEe," (QDQBert model)"),KEe.forEach(t),rl.forEach(t),jwo=i(Ot),sb=n(Ot,"P",{});var ZEe=s(sb);Nwo=r(ZEe,"The model is set in evaluation mode by default using "),yae=n(ZEe,"CODE",{});var sHr=s(yae);qwo=r(sHr,"model.eval()"),sHr.forEach(t),Gwo=r(ZEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wae=n(ZEe,"CODE",{});var lHr=s(wae);Owo=r(lHr,"model.train()"),lHr.forEach(t),ZEe.forEach(t),Xwo=i(Ot),Aae=n(Ot,"P",{});var iHr=s(Aae);Vwo=r(iHr,"Examples:"),iHr.forEach(t),zwo=i(Ot),m(n3.$$.fragment,Ot),Ot.forEach(t),el.forEach(t),iBe=i(c),md=n(c,"H2",{class:!0});var pke=s(md);lb=n(pke,"A",{id:!0,class:!0,href:!0});var dHr=s(lb);Lae=n(dHr,"SPAN",{});var cHr=s(Lae);m(s3.$$.fragment,cHr),cHr.forEach(t),dHr.forEach(t),Wwo=i(pke),Bae=n(pke,"SPAN",{});var fHr=s(Bae);Qwo=r(fHr,"AutoModelForTokenClassification"),fHr.forEach(t),pke.forEach(t),dBe=i(c),or=n(c,"DIV",{class:!0});var tl=s(or);m(l3.$$.fragment,tl),Hwo=i(tl),gd=n(tl,"P",{});var ZV=s(gd);Uwo=r(ZV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xae=n(ZV,"CODE",{});var mHr=s(xae);Jwo=r(mHr,"from_pretrained()"),mHr.forEach(t),Ywo=r(ZV,"class method or the "),kae=n(ZV,"CODE",{});var gHr=s(kae);Kwo=r(gHr,"from_config()"),gHr.forEach(t),Zwo=r(ZV,`class
method.`),ZV.forEach(t),e6o=i(tl),i3=n(tl,"P",{});var _ke=s(i3);o6o=r(_ke,"This class cannot be instantiated directly using "),Rae=n(_ke,"CODE",{});var hHr=s(Rae);r6o=r(hHr,"__init__()"),hHr.forEach(t),t6o=r(_ke," (throws an error)."),_ke.forEach(t),a6o=i(tl),Hr=n(tl,"DIV",{class:!0});var al=s(Hr);m(d3.$$.fragment,al),n6o=i(al),Sae=n(al,"P",{});var pHr=s(Sae);s6o=r(pHr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pHr.forEach(t),l6o=i(al),hd=n(al,"P",{});var ez=s(hd);i6o=r(ez,`Note:
Loading a model from its configuration file does `),Pae=n(ez,"STRONG",{});var _Hr=s(Pae);d6o=r(_Hr,"not"),_Hr.forEach(t),c6o=r(ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ae=n(ez,"CODE",{});var uHr=s($ae);f6o=r(uHr,"from_pretrained()"),uHr.forEach(t),m6o=r(ez,"to load the model weights."),ez.forEach(t),g6o=i(al),Iae=n(al,"P",{});var bHr=s(Iae);h6o=r(bHr,"Examples:"),bHr.forEach(t),p6o=i(al),m(c3.$$.fragment,al),al.forEach(t),_6o=i(tl),Ge=n(tl,"DIV",{class:!0});var Xt=s(Ge);m(f3.$$.fragment,Xt),u6o=i(Xt),Dae=n(Xt,"P",{});var vHr=s(Dae);b6o=r(vHr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vHr.forEach(t),v6o=i(Xt),Qa=n(Xt,"P",{});var I4=s(Qa);T6o=r(I4,"The model class to instantiate is selected based on the "),jae=n(I4,"CODE",{});var THr=s(jae);F6o=r(THr,"model_type"),THr.forEach(t),C6o=r(I4,` property of the config object (either
passed as an argument or loaded from `),Nae=n(I4,"CODE",{});var FHr=s(Nae);M6o=r(FHr,"pretrained_model_name_or_path"),FHr.forEach(t),E6o=r(I4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qae=n(I4,"CODE",{});var CHr=s(qae);y6o=r(CHr,"pretrained_model_name_or_path"),CHr.forEach(t),w6o=r(I4,":"),I4.forEach(t),A6o=i(Xt),N=n(Xt,"UL",{});var q=s(N);ib=n(q,"LI",{});var e3e=s(ib);Gae=n(e3e,"STRONG",{});var MHr=s(Gae);L6o=r(MHr,"albert"),MHr.forEach(t),B6o=r(e3e," \u2014 "),iD=n(e3e,"A",{href:!0});var EHr=s(iD);x6o=r(EHr,"AlbertForTokenClassification"),EHr.forEach(t),k6o=r(e3e," (ALBERT model)"),e3e.forEach(t),R6o=i(q),db=n(q,"LI",{});var o3e=s(db);Oae=n(o3e,"STRONG",{});var yHr=s(Oae);S6o=r(yHr,"bert"),yHr.forEach(t),P6o=r(o3e," \u2014 "),dD=n(o3e,"A",{href:!0});var wHr=s(dD);$6o=r(wHr,"BertForTokenClassification"),wHr.forEach(t),I6o=r(o3e," (BERT model)"),o3e.forEach(t),D6o=i(q),cb=n(q,"LI",{});var r3e=s(cb);Xae=n(r3e,"STRONG",{});var AHr=s(Xae);j6o=r(AHr,"big_bird"),AHr.forEach(t),N6o=r(r3e," \u2014 "),cD=n(r3e,"A",{href:!0});var LHr=s(cD);q6o=r(LHr,"BigBirdForTokenClassification"),LHr.forEach(t),G6o=r(r3e," (BigBird model)"),r3e.forEach(t),O6o=i(q),fb=n(q,"LI",{});var t3e=s(fb);Vae=n(t3e,"STRONG",{});var BHr=s(Vae);X6o=r(BHr,"camembert"),BHr.forEach(t),V6o=r(t3e," \u2014 "),fD=n(t3e,"A",{href:!0});var xHr=s(fD);z6o=r(xHr,"CamembertForTokenClassification"),xHr.forEach(t),W6o=r(t3e," (CamemBERT model)"),t3e.forEach(t),Q6o=i(q),mb=n(q,"LI",{});var a3e=s(mb);zae=n(a3e,"STRONG",{});var kHr=s(zae);H6o=r(kHr,"canine"),kHr.forEach(t),U6o=r(a3e," \u2014 "),mD=n(a3e,"A",{href:!0});var RHr=s(mD);J6o=r(RHr,"CanineForTokenClassification"),RHr.forEach(t),Y6o=r(a3e," (Canine model)"),a3e.forEach(t),K6o=i(q),gb=n(q,"LI",{});var n3e=s(gb);Wae=n(n3e,"STRONG",{});var SHr=s(Wae);Z6o=r(SHr,"convbert"),SHr.forEach(t),eAo=r(n3e," \u2014 "),gD=n(n3e,"A",{href:!0});var PHr=s(gD);oAo=r(PHr,"ConvBertForTokenClassification"),PHr.forEach(t),rAo=r(n3e," (ConvBERT model)"),n3e.forEach(t),tAo=i(q),hb=n(q,"LI",{});var s3e=s(hb);Qae=n(s3e,"STRONG",{});var $Hr=s(Qae);aAo=r($Hr,"data2vec-text"),$Hr.forEach(t),nAo=r(s3e," \u2014 "),hD=n(s3e,"A",{href:!0});var IHr=s(hD);sAo=r(IHr,"Data2VecTextForTokenClassification"),IHr.forEach(t),lAo=r(s3e," (Data2VecText model)"),s3e.forEach(t),iAo=i(q),pb=n(q,"LI",{});var l3e=s(pb);Hae=n(l3e,"STRONG",{});var DHr=s(Hae);dAo=r(DHr,"deberta"),DHr.forEach(t),cAo=r(l3e," \u2014 "),pD=n(l3e,"A",{href:!0});var jHr=s(pD);fAo=r(jHr,"DebertaForTokenClassification"),jHr.forEach(t),mAo=r(l3e," (DeBERTa model)"),l3e.forEach(t),gAo=i(q),_b=n(q,"LI",{});var i3e=s(_b);Uae=n(i3e,"STRONG",{});var NHr=s(Uae);hAo=r(NHr,"deberta-v2"),NHr.forEach(t),pAo=r(i3e," \u2014 "),_D=n(i3e,"A",{href:!0});var qHr=s(_D);_Ao=r(qHr,"DebertaV2ForTokenClassification"),qHr.forEach(t),uAo=r(i3e," (DeBERTa-v2 model)"),i3e.forEach(t),bAo=i(q),ub=n(q,"LI",{});var d3e=s(ub);Jae=n(d3e,"STRONG",{});var GHr=s(Jae);vAo=r(GHr,"distilbert"),GHr.forEach(t),TAo=r(d3e," \u2014 "),uD=n(d3e,"A",{href:!0});var OHr=s(uD);FAo=r(OHr,"DistilBertForTokenClassification"),OHr.forEach(t),CAo=r(d3e," (DistilBERT model)"),d3e.forEach(t),MAo=i(q),bb=n(q,"LI",{});var c3e=s(bb);Yae=n(c3e,"STRONG",{});var XHr=s(Yae);EAo=r(XHr,"electra"),XHr.forEach(t),yAo=r(c3e," \u2014 "),bD=n(c3e,"A",{href:!0});var VHr=s(bD);wAo=r(VHr,"ElectraForTokenClassification"),VHr.forEach(t),AAo=r(c3e," (ELECTRA model)"),c3e.forEach(t),LAo=i(q),vb=n(q,"LI",{});var f3e=s(vb);Kae=n(f3e,"STRONG",{});var zHr=s(Kae);BAo=r(zHr,"flaubert"),zHr.forEach(t),xAo=r(f3e," \u2014 "),vD=n(f3e,"A",{href:!0});var WHr=s(vD);kAo=r(WHr,"FlaubertForTokenClassification"),WHr.forEach(t),RAo=r(f3e," (FlauBERT model)"),f3e.forEach(t),SAo=i(q),Tb=n(q,"LI",{});var m3e=s(Tb);Zae=n(m3e,"STRONG",{});var QHr=s(Zae);PAo=r(QHr,"fnet"),QHr.forEach(t),$Ao=r(m3e," \u2014 "),TD=n(m3e,"A",{href:!0});var HHr=s(TD);IAo=r(HHr,"FNetForTokenClassification"),HHr.forEach(t),DAo=r(m3e," (FNet model)"),m3e.forEach(t),jAo=i(q),Fb=n(q,"LI",{});var g3e=s(Fb);ene=n(g3e,"STRONG",{});var UHr=s(ene);NAo=r(UHr,"funnel"),UHr.forEach(t),qAo=r(g3e," \u2014 "),FD=n(g3e,"A",{href:!0});var JHr=s(FD);GAo=r(JHr,"FunnelForTokenClassification"),JHr.forEach(t),OAo=r(g3e," (Funnel Transformer model)"),g3e.forEach(t),XAo=i(q),Cb=n(q,"LI",{});var h3e=s(Cb);one=n(h3e,"STRONG",{});var YHr=s(one);VAo=r(YHr,"gpt2"),YHr.forEach(t),zAo=r(h3e," \u2014 "),CD=n(h3e,"A",{href:!0});var KHr=s(CD);WAo=r(KHr,"GPT2ForTokenClassification"),KHr.forEach(t),QAo=r(h3e," (OpenAI GPT-2 model)"),h3e.forEach(t),HAo=i(q),Mb=n(q,"LI",{});var p3e=s(Mb);rne=n(p3e,"STRONG",{});var ZHr=s(rne);UAo=r(ZHr,"ibert"),ZHr.forEach(t),JAo=r(p3e," \u2014 "),MD=n(p3e,"A",{href:!0});var eUr=s(MD);YAo=r(eUr,"IBertForTokenClassification"),eUr.forEach(t),KAo=r(p3e," (I-BERT model)"),p3e.forEach(t),ZAo=i(q),Eb=n(q,"LI",{});var _3e=s(Eb);tne=n(_3e,"STRONG",{});var oUr=s(tne);eLo=r(oUr,"layoutlm"),oUr.forEach(t),oLo=r(_3e," \u2014 "),ED=n(_3e,"A",{href:!0});var rUr=s(ED);rLo=r(rUr,"LayoutLMForTokenClassification"),rUr.forEach(t),tLo=r(_3e," (LayoutLM model)"),_3e.forEach(t),aLo=i(q),yb=n(q,"LI",{});var u3e=s(yb);ane=n(u3e,"STRONG",{});var tUr=s(ane);nLo=r(tUr,"layoutlmv2"),tUr.forEach(t),sLo=r(u3e," \u2014 "),yD=n(u3e,"A",{href:!0});var aUr=s(yD);lLo=r(aUr,"LayoutLMv2ForTokenClassification"),aUr.forEach(t),iLo=r(u3e," (LayoutLMv2 model)"),u3e.forEach(t),dLo=i(q),wb=n(q,"LI",{});var b3e=s(wb);nne=n(b3e,"STRONG",{});var nUr=s(nne);cLo=r(nUr,"longformer"),nUr.forEach(t),fLo=r(b3e," \u2014 "),wD=n(b3e,"A",{href:!0});var sUr=s(wD);mLo=r(sUr,"LongformerForTokenClassification"),sUr.forEach(t),gLo=r(b3e," (Longformer model)"),b3e.forEach(t),hLo=i(q),Ab=n(q,"LI",{});var v3e=s(Ab);sne=n(v3e,"STRONG",{});var lUr=s(sne);pLo=r(lUr,"megatron-bert"),lUr.forEach(t),_Lo=r(v3e," \u2014 "),AD=n(v3e,"A",{href:!0});var iUr=s(AD);uLo=r(iUr,"MegatronBertForTokenClassification"),iUr.forEach(t),bLo=r(v3e," (MegatronBert model)"),v3e.forEach(t),vLo=i(q),Lb=n(q,"LI",{});var T3e=s(Lb);lne=n(T3e,"STRONG",{});var dUr=s(lne);TLo=r(dUr,"mobilebert"),dUr.forEach(t),FLo=r(T3e," \u2014 "),LD=n(T3e,"A",{href:!0});var cUr=s(LD);CLo=r(cUr,"MobileBertForTokenClassification"),cUr.forEach(t),MLo=r(T3e," (MobileBERT model)"),T3e.forEach(t),ELo=i(q),Bb=n(q,"LI",{});var F3e=s(Bb);ine=n(F3e,"STRONG",{});var fUr=s(ine);yLo=r(fUr,"mpnet"),fUr.forEach(t),wLo=r(F3e," \u2014 "),BD=n(F3e,"A",{href:!0});var mUr=s(BD);ALo=r(mUr,"MPNetForTokenClassification"),mUr.forEach(t),LLo=r(F3e," (MPNet model)"),F3e.forEach(t),BLo=i(q),xb=n(q,"LI",{});var C3e=s(xb);dne=n(C3e,"STRONG",{});var gUr=s(dne);xLo=r(gUr,"nystromformer"),gUr.forEach(t),kLo=r(C3e," \u2014 "),xD=n(C3e,"A",{href:!0});var hUr=s(xD);RLo=r(hUr,"NystromformerForTokenClassification"),hUr.forEach(t),SLo=r(C3e," (Nystromformer model)"),C3e.forEach(t),PLo=i(q),kb=n(q,"LI",{});var M3e=s(kb);cne=n(M3e,"STRONG",{});var pUr=s(cne);$Lo=r(pUr,"qdqbert"),pUr.forEach(t),ILo=r(M3e," \u2014 "),kD=n(M3e,"A",{href:!0});var _Ur=s(kD);DLo=r(_Ur,"QDQBertForTokenClassification"),_Ur.forEach(t),jLo=r(M3e," (QDQBert model)"),M3e.forEach(t),NLo=i(q),Rb=n(q,"LI",{});var E3e=s(Rb);fne=n(E3e,"STRONG",{});var uUr=s(fne);qLo=r(uUr,"rembert"),uUr.forEach(t),GLo=r(E3e," \u2014 "),RD=n(E3e,"A",{href:!0});var bUr=s(RD);OLo=r(bUr,"RemBertForTokenClassification"),bUr.forEach(t),XLo=r(E3e," (RemBERT model)"),E3e.forEach(t),VLo=i(q),Sb=n(q,"LI",{});var y3e=s(Sb);mne=n(y3e,"STRONG",{});var vUr=s(mne);zLo=r(vUr,"roberta"),vUr.forEach(t),WLo=r(y3e," \u2014 "),SD=n(y3e,"A",{href:!0});var TUr=s(SD);QLo=r(TUr,"RobertaForTokenClassification"),TUr.forEach(t),HLo=r(y3e," (RoBERTa model)"),y3e.forEach(t),ULo=i(q),Pb=n(q,"LI",{});var w3e=s(Pb);gne=n(w3e,"STRONG",{});var FUr=s(gne);JLo=r(FUr,"roformer"),FUr.forEach(t),YLo=r(w3e," \u2014 "),PD=n(w3e,"A",{href:!0});var CUr=s(PD);KLo=r(CUr,"RoFormerForTokenClassification"),CUr.forEach(t),ZLo=r(w3e," (RoFormer model)"),w3e.forEach(t),e8o=i(q),$b=n(q,"LI",{});var A3e=s($b);hne=n(A3e,"STRONG",{});var MUr=s(hne);o8o=r(MUr,"squeezebert"),MUr.forEach(t),r8o=r(A3e," \u2014 "),$D=n(A3e,"A",{href:!0});var EUr=s($D);t8o=r(EUr,"SqueezeBertForTokenClassification"),EUr.forEach(t),a8o=r(A3e," (SqueezeBERT model)"),A3e.forEach(t),n8o=i(q),Ib=n(q,"LI",{});var L3e=s(Ib);pne=n(L3e,"STRONG",{});var yUr=s(pne);s8o=r(yUr,"xlm"),yUr.forEach(t),l8o=r(L3e," \u2014 "),ID=n(L3e,"A",{href:!0});var wUr=s(ID);i8o=r(wUr,"XLMForTokenClassification"),wUr.forEach(t),d8o=r(L3e," (XLM model)"),L3e.forEach(t),c8o=i(q),Db=n(q,"LI",{});var B3e=s(Db);_ne=n(B3e,"STRONG",{});var AUr=s(_ne);f8o=r(AUr,"xlm-roberta"),AUr.forEach(t),m8o=r(B3e," \u2014 "),DD=n(B3e,"A",{href:!0});var LUr=s(DD);g8o=r(LUr,"XLMRobertaForTokenClassification"),LUr.forEach(t),h8o=r(B3e," (XLM-RoBERTa model)"),B3e.forEach(t),p8o=i(q),jb=n(q,"LI",{});var x3e=s(jb);une=n(x3e,"STRONG",{});var BUr=s(une);_8o=r(BUr,"xlm-roberta-xl"),BUr.forEach(t),u8o=r(x3e," \u2014 "),jD=n(x3e,"A",{href:!0});var xUr=s(jD);b8o=r(xUr,"XLMRobertaXLForTokenClassification"),xUr.forEach(t),v8o=r(x3e," (XLM-RoBERTa-XL model)"),x3e.forEach(t),T8o=i(q),Nb=n(q,"LI",{});var k3e=s(Nb);bne=n(k3e,"STRONG",{});var kUr=s(bne);F8o=r(kUr,"xlnet"),kUr.forEach(t),C8o=r(k3e," \u2014 "),ND=n(k3e,"A",{href:!0});var RUr=s(ND);M8o=r(RUr,"XLNetForTokenClassification"),RUr.forEach(t),E8o=r(k3e," (XLNet model)"),k3e.forEach(t),y8o=i(q),qb=n(q,"LI",{});var R3e=s(qb);vne=n(R3e,"STRONG",{});var SUr=s(vne);w8o=r(SUr,"yoso"),SUr.forEach(t),A8o=r(R3e," \u2014 "),qD=n(R3e,"A",{href:!0});var PUr=s(qD);L8o=r(PUr,"YosoForTokenClassification"),PUr.forEach(t),B8o=r(R3e," (YOSO model)"),R3e.forEach(t),q.forEach(t),x8o=i(Xt),Gb=n(Xt,"P",{});var S3e=s(Gb);k8o=r(S3e,"The model is set in evaluation mode by default using "),Tne=n(S3e,"CODE",{});var $Ur=s(Tne);R8o=r($Ur,"model.eval()"),$Ur.forEach(t),S8o=r(S3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fne=n(S3e,"CODE",{});var IUr=s(Fne);P8o=r(IUr,"model.train()"),IUr.forEach(t),S3e.forEach(t),$8o=i(Xt),Cne=n(Xt,"P",{});var DUr=s(Cne);I8o=r(DUr,"Examples:"),DUr.forEach(t),D8o=i(Xt),m(m3.$$.fragment,Xt),Xt.forEach(t),tl.forEach(t),cBe=i(c),pd=n(c,"H2",{class:!0});var uke=s(pd);Ob=n(uke,"A",{id:!0,class:!0,href:!0});var jUr=s(Ob);Mne=n(jUr,"SPAN",{});var NUr=s(Mne);m(g3.$$.fragment,NUr),NUr.forEach(t),jUr.forEach(t),j8o=i(uke),Ene=n(uke,"SPAN",{});var qUr=s(Ene);N8o=r(qUr,"AutoModelForQuestionAnswering"),qUr.forEach(t),uke.forEach(t),fBe=i(c),rr=n(c,"DIV",{class:!0});var nl=s(rr);m(h3.$$.fragment,nl),q8o=i(nl),_d=n(nl,"P",{});var oz=s(_d);G8o=r(oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yne=n(oz,"CODE",{});var GUr=s(yne);O8o=r(GUr,"from_pretrained()"),GUr.forEach(t),X8o=r(oz,"class method or the "),wne=n(oz,"CODE",{});var OUr=s(wne);V8o=r(OUr,"from_config()"),OUr.forEach(t),z8o=r(oz,`class
method.`),oz.forEach(t),W8o=i(nl),p3=n(nl,"P",{});var bke=s(p3);Q8o=r(bke,"This class cannot be instantiated directly using "),Ane=n(bke,"CODE",{});var XUr=s(Ane);H8o=r(XUr,"__init__()"),XUr.forEach(t),U8o=r(bke," (throws an error)."),bke.forEach(t),J8o=i(nl),Ur=n(nl,"DIV",{class:!0});var sl=s(Ur);m(_3.$$.fragment,sl),Y8o=i(sl),Lne=n(sl,"P",{});var VUr=s(Lne);K8o=r(VUr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),VUr.forEach(t),Z8o=i(sl),ud=n(sl,"P",{});var rz=s(ud);e9o=r(rz,`Note:
Loading a model from its configuration file does `),Bne=n(rz,"STRONG",{});var zUr=s(Bne);o9o=r(zUr,"not"),zUr.forEach(t),r9o=r(rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),xne=n(rz,"CODE",{});var WUr=s(xne);t9o=r(WUr,"from_pretrained()"),WUr.forEach(t),a9o=r(rz,"to load the model weights."),rz.forEach(t),n9o=i(sl),kne=n(sl,"P",{});var QUr=s(kne);s9o=r(QUr,"Examples:"),QUr.forEach(t),l9o=i(sl),m(u3.$$.fragment,sl),sl.forEach(t),i9o=i(nl),Oe=n(nl,"DIV",{class:!0});var Vt=s(Oe);m(b3.$$.fragment,Vt),d9o=i(Vt),Rne=n(Vt,"P",{});var HUr=s(Rne);c9o=r(HUr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),HUr.forEach(t),f9o=i(Vt),Ha=n(Vt,"P",{});var D4=s(Ha);m9o=r(D4,"The model class to instantiate is selected based on the "),Sne=n(D4,"CODE",{});var UUr=s(Sne);g9o=r(UUr,"model_type"),UUr.forEach(t),h9o=r(D4,` property of the config object (either
passed as an argument or loaded from `),Pne=n(D4,"CODE",{});var JUr=s(Pne);p9o=r(JUr,"pretrained_model_name_or_path"),JUr.forEach(t),_9o=r(D4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ne=n(D4,"CODE",{});var YUr=s($ne);u9o=r(YUr,"pretrained_model_name_or_path"),YUr.forEach(t),b9o=r(D4,":"),D4.forEach(t),v9o=i(Vt),R=n(Vt,"UL",{});var P=s(R);Xb=n(P,"LI",{});var P3e=s(Xb);Ine=n(P3e,"STRONG",{});var KUr=s(Ine);T9o=r(KUr,"albert"),KUr.forEach(t),F9o=r(P3e," \u2014 "),GD=n(P3e,"A",{href:!0});var ZUr=s(GD);C9o=r(ZUr,"AlbertForQuestionAnswering"),ZUr.forEach(t),M9o=r(P3e," (ALBERT model)"),P3e.forEach(t),E9o=i(P),Vb=n(P,"LI",{});var $3e=s(Vb);Dne=n($3e,"STRONG",{});var eJr=s(Dne);y9o=r(eJr,"bart"),eJr.forEach(t),w9o=r($3e," \u2014 "),OD=n($3e,"A",{href:!0});var oJr=s(OD);A9o=r(oJr,"BartForQuestionAnswering"),oJr.forEach(t),L9o=r($3e," (BART model)"),$3e.forEach(t),B9o=i(P),zb=n(P,"LI",{});var I3e=s(zb);jne=n(I3e,"STRONG",{});var rJr=s(jne);x9o=r(rJr,"bert"),rJr.forEach(t),k9o=r(I3e," \u2014 "),XD=n(I3e,"A",{href:!0});var tJr=s(XD);R9o=r(tJr,"BertForQuestionAnswering"),tJr.forEach(t),S9o=r(I3e," (BERT model)"),I3e.forEach(t),P9o=i(P),Wb=n(P,"LI",{});var D3e=s(Wb);Nne=n(D3e,"STRONG",{});var aJr=s(Nne);$9o=r(aJr,"big_bird"),aJr.forEach(t),I9o=r(D3e," \u2014 "),VD=n(D3e,"A",{href:!0});var nJr=s(VD);D9o=r(nJr,"BigBirdForQuestionAnswering"),nJr.forEach(t),j9o=r(D3e," (BigBird model)"),D3e.forEach(t),N9o=i(P),Qb=n(P,"LI",{});var j3e=s(Qb);qne=n(j3e,"STRONG",{});var sJr=s(qne);q9o=r(sJr,"bigbird_pegasus"),sJr.forEach(t),G9o=r(j3e," \u2014 "),zD=n(j3e,"A",{href:!0});var lJr=s(zD);O9o=r(lJr,"BigBirdPegasusForQuestionAnswering"),lJr.forEach(t),X9o=r(j3e," (BigBirdPegasus model)"),j3e.forEach(t),V9o=i(P),Hb=n(P,"LI",{});var N3e=s(Hb);Gne=n(N3e,"STRONG",{});var iJr=s(Gne);z9o=r(iJr,"camembert"),iJr.forEach(t),W9o=r(N3e," \u2014 "),WD=n(N3e,"A",{href:!0});var dJr=s(WD);Q9o=r(dJr,"CamembertForQuestionAnswering"),dJr.forEach(t),H9o=r(N3e," (CamemBERT model)"),N3e.forEach(t),U9o=i(P),Ub=n(P,"LI",{});var q3e=s(Ub);One=n(q3e,"STRONG",{});var cJr=s(One);J9o=r(cJr,"canine"),cJr.forEach(t),Y9o=r(q3e," \u2014 "),QD=n(q3e,"A",{href:!0});var fJr=s(QD);K9o=r(fJr,"CanineForQuestionAnswering"),fJr.forEach(t),Z9o=r(q3e," (Canine model)"),q3e.forEach(t),eBo=i(P),Jb=n(P,"LI",{});var G3e=s(Jb);Xne=n(G3e,"STRONG",{});var mJr=s(Xne);oBo=r(mJr,"convbert"),mJr.forEach(t),rBo=r(G3e," \u2014 "),HD=n(G3e,"A",{href:!0});var gJr=s(HD);tBo=r(gJr,"ConvBertForQuestionAnswering"),gJr.forEach(t),aBo=r(G3e," (ConvBERT model)"),G3e.forEach(t),nBo=i(P),Yb=n(P,"LI",{});var O3e=s(Yb);Vne=n(O3e,"STRONG",{});var hJr=s(Vne);sBo=r(hJr,"data2vec-text"),hJr.forEach(t),lBo=r(O3e," \u2014 "),UD=n(O3e,"A",{href:!0});var pJr=s(UD);iBo=r(pJr,"Data2VecTextForQuestionAnswering"),pJr.forEach(t),dBo=r(O3e," (Data2VecText model)"),O3e.forEach(t),cBo=i(P),Kb=n(P,"LI",{});var X3e=s(Kb);zne=n(X3e,"STRONG",{});var _Jr=s(zne);fBo=r(_Jr,"deberta"),_Jr.forEach(t),mBo=r(X3e," \u2014 "),JD=n(X3e,"A",{href:!0});var uJr=s(JD);gBo=r(uJr,"DebertaForQuestionAnswering"),uJr.forEach(t),hBo=r(X3e," (DeBERTa model)"),X3e.forEach(t),pBo=i(P),Zb=n(P,"LI",{});var V3e=s(Zb);Wne=n(V3e,"STRONG",{});var bJr=s(Wne);_Bo=r(bJr,"deberta-v2"),bJr.forEach(t),uBo=r(V3e," \u2014 "),YD=n(V3e,"A",{href:!0});var vJr=s(YD);bBo=r(vJr,"DebertaV2ForQuestionAnswering"),vJr.forEach(t),vBo=r(V3e," (DeBERTa-v2 model)"),V3e.forEach(t),TBo=i(P),e5=n(P,"LI",{});var z3e=s(e5);Qne=n(z3e,"STRONG",{});var TJr=s(Qne);FBo=r(TJr,"distilbert"),TJr.forEach(t),CBo=r(z3e," \u2014 "),KD=n(z3e,"A",{href:!0});var FJr=s(KD);MBo=r(FJr,"DistilBertForQuestionAnswering"),FJr.forEach(t),EBo=r(z3e," (DistilBERT model)"),z3e.forEach(t),yBo=i(P),o5=n(P,"LI",{});var W3e=s(o5);Hne=n(W3e,"STRONG",{});var CJr=s(Hne);wBo=r(CJr,"electra"),CJr.forEach(t),ABo=r(W3e," \u2014 "),ZD=n(W3e,"A",{href:!0});var MJr=s(ZD);LBo=r(MJr,"ElectraForQuestionAnswering"),MJr.forEach(t),BBo=r(W3e," (ELECTRA model)"),W3e.forEach(t),xBo=i(P),r5=n(P,"LI",{});var Q3e=s(r5);Une=n(Q3e,"STRONG",{});var EJr=s(Une);kBo=r(EJr,"flaubert"),EJr.forEach(t),RBo=r(Q3e," \u2014 "),ej=n(Q3e,"A",{href:!0});var yJr=s(ej);SBo=r(yJr,"FlaubertForQuestionAnsweringSimple"),yJr.forEach(t),PBo=r(Q3e," (FlauBERT model)"),Q3e.forEach(t),$Bo=i(P),t5=n(P,"LI",{});var H3e=s(t5);Jne=n(H3e,"STRONG",{});var wJr=s(Jne);IBo=r(wJr,"fnet"),wJr.forEach(t),DBo=r(H3e," \u2014 "),oj=n(H3e,"A",{href:!0});var AJr=s(oj);jBo=r(AJr,"FNetForQuestionAnswering"),AJr.forEach(t),NBo=r(H3e," (FNet model)"),H3e.forEach(t),qBo=i(P),a5=n(P,"LI",{});var U3e=s(a5);Yne=n(U3e,"STRONG",{});var LJr=s(Yne);GBo=r(LJr,"funnel"),LJr.forEach(t),OBo=r(U3e," \u2014 "),rj=n(U3e,"A",{href:!0});var BJr=s(rj);XBo=r(BJr,"FunnelForQuestionAnswering"),BJr.forEach(t),VBo=r(U3e," (Funnel Transformer model)"),U3e.forEach(t),zBo=i(P),n5=n(P,"LI",{});var J3e=s(n5);Kne=n(J3e,"STRONG",{});var xJr=s(Kne);WBo=r(xJr,"gptj"),xJr.forEach(t),QBo=r(J3e," \u2014 "),tj=n(J3e,"A",{href:!0});var kJr=s(tj);HBo=r(kJr,"GPTJForQuestionAnswering"),kJr.forEach(t),UBo=r(J3e," (GPT-J model)"),J3e.forEach(t),JBo=i(P),s5=n(P,"LI",{});var Y3e=s(s5);Zne=n(Y3e,"STRONG",{});var RJr=s(Zne);YBo=r(RJr,"ibert"),RJr.forEach(t),KBo=r(Y3e," \u2014 "),aj=n(Y3e,"A",{href:!0});var SJr=s(aj);ZBo=r(SJr,"IBertForQuestionAnswering"),SJr.forEach(t),exo=r(Y3e," (I-BERT model)"),Y3e.forEach(t),oxo=i(P),l5=n(P,"LI",{});var K3e=s(l5);ese=n(K3e,"STRONG",{});var PJr=s(ese);rxo=r(PJr,"layoutlmv2"),PJr.forEach(t),txo=r(K3e," \u2014 "),nj=n(K3e,"A",{href:!0});var $Jr=s(nj);axo=r($Jr,"LayoutLMv2ForQuestionAnswering"),$Jr.forEach(t),nxo=r(K3e," (LayoutLMv2 model)"),K3e.forEach(t),sxo=i(P),i5=n(P,"LI",{});var Z3e=s(i5);ose=n(Z3e,"STRONG",{});var IJr=s(ose);lxo=r(IJr,"led"),IJr.forEach(t),ixo=r(Z3e," \u2014 "),sj=n(Z3e,"A",{href:!0});var DJr=s(sj);dxo=r(DJr,"LEDForQuestionAnswering"),DJr.forEach(t),cxo=r(Z3e," (LED model)"),Z3e.forEach(t),fxo=i(P),d5=n(P,"LI",{});var eye=s(d5);rse=n(eye,"STRONG",{});var jJr=s(rse);mxo=r(jJr,"longformer"),jJr.forEach(t),gxo=r(eye," \u2014 "),lj=n(eye,"A",{href:!0});var NJr=s(lj);hxo=r(NJr,"LongformerForQuestionAnswering"),NJr.forEach(t),pxo=r(eye," (Longformer model)"),eye.forEach(t),_xo=i(P),c5=n(P,"LI",{});var oye=s(c5);tse=n(oye,"STRONG",{});var qJr=s(tse);uxo=r(qJr,"lxmert"),qJr.forEach(t),bxo=r(oye," \u2014 "),ij=n(oye,"A",{href:!0});var GJr=s(ij);vxo=r(GJr,"LxmertForQuestionAnswering"),GJr.forEach(t),Txo=r(oye," (LXMERT model)"),oye.forEach(t),Fxo=i(P),f5=n(P,"LI",{});var rye=s(f5);ase=n(rye,"STRONG",{});var OJr=s(ase);Cxo=r(OJr,"mbart"),OJr.forEach(t),Mxo=r(rye," \u2014 "),dj=n(rye,"A",{href:!0});var XJr=s(dj);Exo=r(XJr,"MBartForQuestionAnswering"),XJr.forEach(t),yxo=r(rye," (mBART model)"),rye.forEach(t),wxo=i(P),m5=n(P,"LI",{});var tye=s(m5);nse=n(tye,"STRONG",{});var VJr=s(nse);Axo=r(VJr,"megatron-bert"),VJr.forEach(t),Lxo=r(tye," \u2014 "),cj=n(tye,"A",{href:!0});var zJr=s(cj);Bxo=r(zJr,"MegatronBertForQuestionAnswering"),zJr.forEach(t),xxo=r(tye," (MegatronBert model)"),tye.forEach(t),kxo=i(P),g5=n(P,"LI",{});var aye=s(g5);sse=n(aye,"STRONG",{});var WJr=s(sse);Rxo=r(WJr,"mobilebert"),WJr.forEach(t),Sxo=r(aye," \u2014 "),fj=n(aye,"A",{href:!0});var QJr=s(fj);Pxo=r(QJr,"MobileBertForQuestionAnswering"),QJr.forEach(t),$xo=r(aye," (MobileBERT model)"),aye.forEach(t),Ixo=i(P),h5=n(P,"LI",{});var nye=s(h5);lse=n(nye,"STRONG",{});var HJr=s(lse);Dxo=r(HJr,"mpnet"),HJr.forEach(t),jxo=r(nye," \u2014 "),mj=n(nye,"A",{href:!0});var UJr=s(mj);Nxo=r(UJr,"MPNetForQuestionAnswering"),UJr.forEach(t),qxo=r(nye," (MPNet model)"),nye.forEach(t),Gxo=i(P),p5=n(P,"LI",{});var sye=s(p5);ise=n(sye,"STRONG",{});var JJr=s(ise);Oxo=r(JJr,"nystromformer"),JJr.forEach(t),Xxo=r(sye," \u2014 "),gj=n(sye,"A",{href:!0});var YJr=s(gj);Vxo=r(YJr,"NystromformerForQuestionAnswering"),YJr.forEach(t),zxo=r(sye," (Nystromformer model)"),sye.forEach(t),Wxo=i(P),_5=n(P,"LI",{});var lye=s(_5);dse=n(lye,"STRONG",{});var KJr=s(dse);Qxo=r(KJr,"qdqbert"),KJr.forEach(t),Hxo=r(lye," \u2014 "),hj=n(lye,"A",{href:!0});var ZJr=s(hj);Uxo=r(ZJr,"QDQBertForQuestionAnswering"),ZJr.forEach(t),Jxo=r(lye," (QDQBert model)"),lye.forEach(t),Yxo=i(P),u5=n(P,"LI",{});var iye=s(u5);cse=n(iye,"STRONG",{});var eYr=s(cse);Kxo=r(eYr,"reformer"),eYr.forEach(t),Zxo=r(iye," \u2014 "),pj=n(iye,"A",{href:!0});var oYr=s(pj);eko=r(oYr,"ReformerForQuestionAnswering"),oYr.forEach(t),oko=r(iye," (Reformer model)"),iye.forEach(t),rko=i(P),b5=n(P,"LI",{});var dye=s(b5);fse=n(dye,"STRONG",{});var rYr=s(fse);tko=r(rYr,"rembert"),rYr.forEach(t),ako=r(dye," \u2014 "),_j=n(dye,"A",{href:!0});var tYr=s(_j);nko=r(tYr,"RemBertForQuestionAnswering"),tYr.forEach(t),sko=r(dye," (RemBERT model)"),dye.forEach(t),lko=i(P),v5=n(P,"LI",{});var cye=s(v5);mse=n(cye,"STRONG",{});var aYr=s(mse);iko=r(aYr,"roberta"),aYr.forEach(t),dko=r(cye," \u2014 "),uj=n(cye,"A",{href:!0});var nYr=s(uj);cko=r(nYr,"RobertaForQuestionAnswering"),nYr.forEach(t),fko=r(cye," (RoBERTa model)"),cye.forEach(t),mko=i(P),T5=n(P,"LI",{});var fye=s(T5);gse=n(fye,"STRONG",{});var sYr=s(gse);gko=r(sYr,"roformer"),sYr.forEach(t),hko=r(fye," \u2014 "),bj=n(fye,"A",{href:!0});var lYr=s(bj);pko=r(lYr,"RoFormerForQuestionAnswering"),lYr.forEach(t),_ko=r(fye," (RoFormer model)"),fye.forEach(t),uko=i(P),F5=n(P,"LI",{});var mye=s(F5);hse=n(mye,"STRONG",{});var iYr=s(hse);bko=r(iYr,"splinter"),iYr.forEach(t),vko=r(mye," \u2014 "),vj=n(mye,"A",{href:!0});var dYr=s(vj);Tko=r(dYr,"SplinterForQuestionAnswering"),dYr.forEach(t),Fko=r(mye," (Splinter model)"),mye.forEach(t),Cko=i(P),C5=n(P,"LI",{});var gye=s(C5);pse=n(gye,"STRONG",{});var cYr=s(pse);Mko=r(cYr,"squeezebert"),cYr.forEach(t),Eko=r(gye," \u2014 "),Tj=n(gye,"A",{href:!0});var fYr=s(Tj);yko=r(fYr,"SqueezeBertForQuestionAnswering"),fYr.forEach(t),wko=r(gye," (SqueezeBERT model)"),gye.forEach(t),Ako=i(P),M5=n(P,"LI",{});var hye=s(M5);_se=n(hye,"STRONG",{});var mYr=s(_se);Lko=r(mYr,"xlm"),mYr.forEach(t),Bko=r(hye," \u2014 "),Fj=n(hye,"A",{href:!0});var gYr=s(Fj);xko=r(gYr,"XLMForQuestionAnsweringSimple"),gYr.forEach(t),kko=r(hye," (XLM model)"),hye.forEach(t),Rko=i(P),E5=n(P,"LI",{});var pye=s(E5);use=n(pye,"STRONG",{});var hYr=s(use);Sko=r(hYr,"xlm-roberta"),hYr.forEach(t),Pko=r(pye," \u2014 "),Cj=n(pye,"A",{href:!0});var pYr=s(Cj);$ko=r(pYr,"XLMRobertaForQuestionAnswering"),pYr.forEach(t),Iko=r(pye," (XLM-RoBERTa model)"),pye.forEach(t),Dko=i(P),y5=n(P,"LI",{});var _ye=s(y5);bse=n(_ye,"STRONG",{});var _Yr=s(bse);jko=r(_Yr,"xlm-roberta-xl"),_Yr.forEach(t),Nko=r(_ye," \u2014 "),Mj=n(_ye,"A",{href:!0});var uYr=s(Mj);qko=r(uYr,"XLMRobertaXLForQuestionAnswering"),uYr.forEach(t),Gko=r(_ye," (XLM-RoBERTa-XL model)"),_ye.forEach(t),Oko=i(P),w5=n(P,"LI",{});var uye=s(w5);vse=n(uye,"STRONG",{});var bYr=s(vse);Xko=r(bYr,"xlnet"),bYr.forEach(t),Vko=r(uye," \u2014 "),Ej=n(uye,"A",{href:!0});var vYr=s(Ej);zko=r(vYr,"XLNetForQuestionAnsweringSimple"),vYr.forEach(t),Wko=r(uye," (XLNet model)"),uye.forEach(t),Qko=i(P),A5=n(P,"LI",{});var bye=s(A5);Tse=n(bye,"STRONG",{});var TYr=s(Tse);Hko=r(TYr,"yoso"),TYr.forEach(t),Uko=r(bye," \u2014 "),yj=n(bye,"A",{href:!0});var FYr=s(yj);Jko=r(FYr,"YosoForQuestionAnswering"),FYr.forEach(t),Yko=r(bye," (YOSO model)"),bye.forEach(t),P.forEach(t),Kko=i(Vt),L5=n(Vt,"P",{});var vye=s(L5);Zko=r(vye,"The model is set in evaluation mode by default using "),Fse=n(vye,"CODE",{});var CYr=s(Fse);eRo=r(CYr,"model.eval()"),CYr.forEach(t),oRo=r(vye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cse=n(vye,"CODE",{});var MYr=s(Cse);rRo=r(MYr,"model.train()"),MYr.forEach(t),vye.forEach(t),tRo=i(Vt),Mse=n(Vt,"P",{});var EYr=s(Mse);aRo=r(EYr,"Examples:"),EYr.forEach(t),nRo=i(Vt),m(v3.$$.fragment,Vt),Vt.forEach(t),nl.forEach(t),mBe=i(c),bd=n(c,"H2",{class:!0});var vke=s(bd);B5=n(vke,"A",{id:!0,class:!0,href:!0});var yYr=s(B5);Ese=n(yYr,"SPAN",{});var wYr=s(Ese);m(T3.$$.fragment,wYr),wYr.forEach(t),yYr.forEach(t),sRo=i(vke),yse=n(vke,"SPAN",{});var AYr=s(yse);lRo=r(AYr,"AutoModelForTableQuestionAnswering"),AYr.forEach(t),vke.forEach(t),gBe=i(c),tr=n(c,"DIV",{class:!0});var ll=s(tr);m(F3.$$.fragment,ll),iRo=i(ll),vd=n(ll,"P",{});var tz=s(vd);dRo=r(tz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),wse=n(tz,"CODE",{});var LYr=s(wse);cRo=r(LYr,"from_pretrained()"),LYr.forEach(t),fRo=r(tz,"class method or the "),Ase=n(tz,"CODE",{});var BYr=s(Ase);mRo=r(BYr,"from_config()"),BYr.forEach(t),gRo=r(tz,`class
method.`),tz.forEach(t),hRo=i(ll),C3=n(ll,"P",{});var Tke=s(C3);pRo=r(Tke,"This class cannot be instantiated directly using "),Lse=n(Tke,"CODE",{});var xYr=s(Lse);_Ro=r(xYr,"__init__()"),xYr.forEach(t),uRo=r(Tke," (throws an error)."),Tke.forEach(t),bRo=i(ll),Jr=n(ll,"DIV",{class:!0});var il=s(Jr);m(M3.$$.fragment,il),vRo=i(il),Bse=n(il,"P",{});var kYr=s(Bse);TRo=r(kYr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),kYr.forEach(t),FRo=i(il),Td=n(il,"P",{});var az=s(Td);CRo=r(az,`Note:
Loading a model from its configuration file does `),xse=n(az,"STRONG",{});var RYr=s(xse);MRo=r(RYr,"not"),RYr.forEach(t),ERo=r(az,` load the model weights. It only affects the
model\u2019s configuration. Use `),kse=n(az,"CODE",{});var SYr=s(kse);yRo=r(SYr,"from_pretrained()"),SYr.forEach(t),wRo=r(az,"to load the model weights."),az.forEach(t),ARo=i(il),Rse=n(il,"P",{});var PYr=s(Rse);LRo=r(PYr,"Examples:"),PYr.forEach(t),BRo=i(il),m(E3.$$.fragment,il),il.forEach(t),xRo=i(ll),Xe=n(ll,"DIV",{class:!0});var zt=s(Xe);m(y3.$$.fragment,zt),kRo=i(zt),Sse=n(zt,"P",{});var $Yr=s(Sse);RRo=r($Yr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$Yr.forEach(t),SRo=i(zt),Ua=n(zt,"P",{});var j4=s(Ua);PRo=r(j4,"The model class to instantiate is selected based on the "),Pse=n(j4,"CODE",{});var IYr=s(Pse);$Ro=r(IYr,"model_type"),IYr.forEach(t),IRo=r(j4,` property of the config object (either
passed as an argument or loaded from `),$se=n(j4,"CODE",{});var DYr=s($se);DRo=r(DYr,"pretrained_model_name_or_path"),DYr.forEach(t),jRo=r(j4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ise=n(j4,"CODE",{});var jYr=s(Ise);NRo=r(jYr,"pretrained_model_name_or_path"),jYr.forEach(t),qRo=r(j4,":"),j4.forEach(t),GRo=i(zt),Dse=n(zt,"UL",{});var NYr=s(Dse);x5=n(NYr,"LI",{});var Tye=s(x5);jse=n(Tye,"STRONG",{});var qYr=s(jse);ORo=r(qYr,"tapas"),qYr.forEach(t),XRo=r(Tye," \u2014 "),wj=n(Tye,"A",{href:!0});var GYr=s(wj);VRo=r(GYr,"TapasForQuestionAnswering"),GYr.forEach(t),zRo=r(Tye," (TAPAS model)"),Tye.forEach(t),NYr.forEach(t),WRo=i(zt),k5=n(zt,"P",{});var Fye=s(k5);QRo=r(Fye,"The model is set in evaluation mode by default using "),Nse=n(Fye,"CODE",{});var OYr=s(Nse);HRo=r(OYr,"model.eval()"),OYr.forEach(t),URo=r(Fye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qse=n(Fye,"CODE",{});var XYr=s(qse);JRo=r(XYr,"model.train()"),XYr.forEach(t),Fye.forEach(t),YRo=i(zt),Gse=n(zt,"P",{});var VYr=s(Gse);KRo=r(VYr,"Examples:"),VYr.forEach(t),ZRo=i(zt),m(w3.$$.fragment,zt),zt.forEach(t),ll.forEach(t),hBe=i(c),Fd=n(c,"H2",{class:!0});var Fke=s(Fd);R5=n(Fke,"A",{id:!0,class:!0,href:!0});var zYr=s(R5);Ose=n(zYr,"SPAN",{});var WYr=s(Ose);m(A3.$$.fragment,WYr),WYr.forEach(t),zYr.forEach(t),eSo=i(Fke),Xse=n(Fke,"SPAN",{});var QYr=s(Xse);oSo=r(QYr,"AutoModelForImageClassification"),QYr.forEach(t),Fke.forEach(t),pBe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(L3.$$.fragment,dl),rSo=i(dl),Cd=n(dl,"P",{});var nz=s(Cd);tSo=r(nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Vse=n(nz,"CODE",{});var HYr=s(Vse);aSo=r(HYr,"from_pretrained()"),HYr.forEach(t),nSo=r(nz,"class method or the "),zse=n(nz,"CODE",{});var UYr=s(zse);sSo=r(UYr,"from_config()"),UYr.forEach(t),lSo=r(nz,`class
method.`),nz.forEach(t),iSo=i(dl),B3=n(dl,"P",{});var Cke=s(B3);dSo=r(Cke,"This class cannot be instantiated directly using "),Wse=n(Cke,"CODE",{});var JYr=s(Wse);cSo=r(JYr,"__init__()"),JYr.forEach(t),fSo=r(Cke," (throws an error)."),Cke.forEach(t),mSo=i(dl),Yr=n(dl,"DIV",{class:!0});var cl=s(Yr);m(x3.$$.fragment,cl),gSo=i(cl),Qse=n(cl,"P",{});var YYr=s(Qse);hSo=r(YYr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),YYr.forEach(t),pSo=i(cl),Md=n(cl,"P",{});var sz=s(Md);_So=r(sz,`Note:
Loading a model from its configuration file does `),Hse=n(sz,"STRONG",{});var KYr=s(Hse);uSo=r(KYr,"not"),KYr.forEach(t),bSo=r(sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Use=n(sz,"CODE",{});var ZYr=s(Use);vSo=r(ZYr,"from_pretrained()"),ZYr.forEach(t),TSo=r(sz,"to load the model weights."),sz.forEach(t),FSo=i(cl),Jse=n(cl,"P",{});var eKr=s(Jse);CSo=r(eKr,"Examples:"),eKr.forEach(t),MSo=i(cl),m(k3.$$.fragment,cl),cl.forEach(t),ESo=i(dl),Ve=n(dl,"DIV",{class:!0});var Wt=s(Ve);m(R3.$$.fragment,Wt),ySo=i(Wt),Yse=n(Wt,"P",{});var oKr=s(Yse);wSo=r(oKr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),oKr.forEach(t),ASo=i(Wt),Ja=n(Wt,"P",{});var N4=s(Ja);LSo=r(N4,"The model class to instantiate is selected based on the "),Kse=n(N4,"CODE",{});var rKr=s(Kse);BSo=r(rKr,"model_type"),rKr.forEach(t),xSo=r(N4,` property of the config object (either
passed as an argument or loaded from `),Zse=n(N4,"CODE",{});var tKr=s(Zse);kSo=r(tKr,"pretrained_model_name_or_path"),tKr.forEach(t),RSo=r(N4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=n(N4,"CODE",{});var aKr=s(ele);SSo=r(aKr,"pretrained_model_name_or_path"),aKr.forEach(t),PSo=r(N4,":"),N4.forEach(t),$So=i(Wt),he=n(Wt,"UL",{});var Me=s(he);S5=n(Me,"LI",{});var Cye=s(S5);ole=n(Cye,"STRONG",{});var nKr=s(ole);ISo=r(nKr,"beit"),nKr.forEach(t),DSo=r(Cye," \u2014 "),Aj=n(Cye,"A",{href:!0});var sKr=s(Aj);jSo=r(sKr,"BeitForImageClassification"),sKr.forEach(t),NSo=r(Cye," (BEiT model)"),Cye.forEach(t),qSo=i(Me),P5=n(Me,"LI",{});var Mye=s(P5);rle=n(Mye,"STRONG",{});var lKr=s(rle);GSo=r(lKr,"convnext"),lKr.forEach(t),OSo=r(Mye," \u2014 "),Lj=n(Mye,"A",{href:!0});var iKr=s(Lj);XSo=r(iKr,"ConvNextForImageClassification"),iKr.forEach(t),VSo=r(Mye," (ConvNext model)"),Mye.forEach(t),zSo=i(Me),Ps=n(Me,"LI",{});var l8=s(Ps);tle=n(l8,"STRONG",{});var dKr=s(tle);WSo=r(dKr,"deit"),dKr.forEach(t),QSo=r(l8," \u2014 "),Bj=n(l8,"A",{href:!0});var cKr=s(Bj);HSo=r(cKr,"DeiTForImageClassification"),cKr.forEach(t),USo=r(l8," or "),xj=n(l8,"A",{href:!0});var fKr=s(xj);JSo=r(fKr,"DeiTForImageClassificationWithTeacher"),fKr.forEach(t),YSo=r(l8," (DeiT model)"),l8.forEach(t),KSo=i(Me),$5=n(Me,"LI",{});var Eye=s($5);ale=n(Eye,"STRONG",{});var mKr=s(ale);ZSo=r(mKr,"imagegpt"),mKr.forEach(t),ePo=r(Eye," \u2014 "),kj=n(Eye,"A",{href:!0});var gKr=s(kj);oPo=r(gKr,"ImageGPTForImageClassification"),gKr.forEach(t),rPo=r(Eye," (ImageGPT model)"),Eye.forEach(t),tPo=i(Me),la=n(Me,"LI",{});var Mf=s(la);nle=n(Mf,"STRONG",{});var hKr=s(nle);aPo=r(hKr,"perceiver"),hKr.forEach(t),nPo=r(Mf," \u2014 "),Rj=n(Mf,"A",{href:!0});var pKr=s(Rj);sPo=r(pKr,"PerceiverForImageClassificationLearned"),pKr.forEach(t),lPo=r(Mf," or "),Sj=n(Mf,"A",{href:!0});var _Kr=s(Sj);iPo=r(_Kr,"PerceiverForImageClassificationFourier"),_Kr.forEach(t),dPo=r(Mf," or "),Pj=n(Mf,"A",{href:!0});var uKr=s(Pj);cPo=r(uKr,"PerceiverForImageClassificationConvProcessing"),uKr.forEach(t),fPo=r(Mf," (Perceiver model)"),Mf.forEach(t),mPo=i(Me),I5=n(Me,"LI",{});var yye=s(I5);sle=n(yye,"STRONG",{});var bKr=s(sle);gPo=r(bKr,"poolformer"),bKr.forEach(t),hPo=r(yye," \u2014 "),$j=n(yye,"A",{href:!0});var vKr=s($j);pPo=r(vKr,"PoolFormerForImageClassification"),vKr.forEach(t),_Po=r(yye," (PoolFormer model)"),yye.forEach(t),uPo=i(Me),D5=n(Me,"LI",{});var wye=s(D5);lle=n(wye,"STRONG",{});var TKr=s(lle);bPo=r(TKr,"resnet"),TKr.forEach(t),vPo=r(wye," \u2014 "),Ij=n(wye,"A",{href:!0});var FKr=s(Ij);TPo=r(FKr,"ResNetForImageClassification"),FKr.forEach(t),FPo=r(wye," (ResNet model)"),wye.forEach(t),CPo=i(Me),j5=n(Me,"LI",{});var Aye=s(j5);ile=n(Aye,"STRONG",{});var CKr=s(ile);MPo=r(CKr,"segformer"),CKr.forEach(t),EPo=r(Aye," \u2014 "),Dj=n(Aye,"A",{href:!0});var MKr=s(Dj);yPo=r(MKr,"SegformerForImageClassification"),MKr.forEach(t),wPo=r(Aye," (SegFormer model)"),Aye.forEach(t),APo=i(Me),N5=n(Me,"LI",{});var Lye=s(N5);dle=n(Lye,"STRONG",{});var EKr=s(dle);LPo=r(EKr,"swin"),EKr.forEach(t),BPo=r(Lye," \u2014 "),jj=n(Lye,"A",{href:!0});var yKr=s(jj);xPo=r(yKr,"SwinForImageClassification"),yKr.forEach(t),kPo=r(Lye," (Swin model)"),Lye.forEach(t),RPo=i(Me),q5=n(Me,"LI",{});var Bye=s(q5);cle=n(Bye,"STRONG",{});var wKr=s(cle);SPo=r(wKr,"vit"),wKr.forEach(t),PPo=r(Bye," \u2014 "),Nj=n(Bye,"A",{href:!0});var AKr=s(Nj);$Po=r(AKr,"ViTForImageClassification"),AKr.forEach(t),IPo=r(Bye," (ViT model)"),Bye.forEach(t),Me.forEach(t),DPo=i(Wt),G5=n(Wt,"P",{});var xye=s(G5);jPo=r(xye,"The model is set in evaluation mode by default using "),fle=n(xye,"CODE",{});var LKr=s(fle);NPo=r(LKr,"model.eval()"),LKr.forEach(t),qPo=r(xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mle=n(xye,"CODE",{});var BKr=s(mle);GPo=r(BKr,"model.train()"),BKr.forEach(t),xye.forEach(t),OPo=i(Wt),gle=n(Wt,"P",{});var xKr=s(gle);XPo=r(xKr,"Examples:"),xKr.forEach(t),VPo=i(Wt),m(S3.$$.fragment,Wt),Wt.forEach(t),dl.forEach(t),_Be=i(c),Ed=n(c,"H2",{class:!0});var Mke=s(Ed);O5=n(Mke,"A",{id:!0,class:!0,href:!0});var kKr=s(O5);hle=n(kKr,"SPAN",{});var RKr=s(hle);m(P3.$$.fragment,RKr),RKr.forEach(t),kKr.forEach(t),zPo=i(Mke),ple=n(Mke,"SPAN",{});var SKr=s(ple);WPo=r(SKr,"AutoModelForVision2Seq"),SKr.forEach(t),Mke.forEach(t),uBe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m($3.$$.fragment,fl),QPo=i(fl),yd=n(fl,"P",{});var lz=s(yd);HPo=r(lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_le=n(lz,"CODE",{});var PKr=s(_le);UPo=r(PKr,"from_pretrained()"),PKr.forEach(t),JPo=r(lz,"class method or the "),ule=n(lz,"CODE",{});var $Kr=s(ule);YPo=r($Kr,"from_config()"),$Kr.forEach(t),KPo=r(lz,`class
method.`),lz.forEach(t),ZPo=i(fl),I3=n(fl,"P",{});var Eke=s(I3);e$o=r(Eke,"This class cannot be instantiated directly using "),ble=n(Eke,"CODE",{});var IKr=s(ble);o$o=r(IKr,"__init__()"),IKr.forEach(t),r$o=r(Eke," (throws an error)."),Eke.forEach(t),t$o=i(fl),Kr=n(fl,"DIV",{class:!0});var ml=s(Kr);m(D3.$$.fragment,ml),a$o=i(ml),vle=n(ml,"P",{});var DKr=s(vle);n$o=r(DKr,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),DKr.forEach(t),s$o=i(ml),wd=n(ml,"P",{});var iz=s(wd);l$o=r(iz,`Note:
Loading a model from its configuration file does `),Tle=n(iz,"STRONG",{});var jKr=s(Tle);i$o=r(jKr,"not"),jKr.forEach(t),d$o=r(iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fle=n(iz,"CODE",{});var NKr=s(Fle);c$o=r(NKr,"from_pretrained()"),NKr.forEach(t),f$o=r(iz,"to load the model weights."),iz.forEach(t),m$o=i(ml),Cle=n(ml,"P",{});var qKr=s(Cle);g$o=r(qKr,"Examples:"),qKr.forEach(t),h$o=i(ml),m(j3.$$.fragment,ml),ml.forEach(t),p$o=i(fl),ze=n(fl,"DIV",{class:!0});var Qt=s(ze);m(N3.$$.fragment,Qt),_$o=i(Qt),Mle=n(Qt,"P",{});var GKr=s(Mle);u$o=r(GKr,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),GKr.forEach(t),b$o=i(Qt),Ya=n(Qt,"P",{});var q4=s(Ya);v$o=r(q4,"The model class to instantiate is selected based on the "),Ele=n(q4,"CODE",{});var OKr=s(Ele);T$o=r(OKr,"model_type"),OKr.forEach(t),F$o=r(q4,` property of the config object (either
passed as an argument or loaded from `),yle=n(q4,"CODE",{});var XKr=s(yle);C$o=r(XKr,"pretrained_model_name_or_path"),XKr.forEach(t),M$o=r(q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wle=n(q4,"CODE",{});var VKr=s(wle);E$o=r(VKr,"pretrained_model_name_or_path"),VKr.forEach(t),y$o=r(q4,":"),q4.forEach(t),w$o=i(Qt),Ale=n(Qt,"UL",{});var zKr=s(Ale);X5=n(zKr,"LI",{});var kye=s(X5);Lle=n(kye,"STRONG",{});var WKr=s(Lle);A$o=r(WKr,"vision-encoder-decoder"),WKr.forEach(t),L$o=r(kye," \u2014 "),qj=n(kye,"A",{href:!0});var QKr=s(qj);B$o=r(QKr,"VisionEncoderDecoderModel"),QKr.forEach(t),x$o=r(kye," (Vision Encoder decoder model)"),kye.forEach(t),zKr.forEach(t),k$o=i(Qt),V5=n(Qt,"P",{});var Rye=s(V5);R$o=r(Rye,"The model is set in evaluation mode by default using "),Ble=n(Rye,"CODE",{});var HKr=s(Ble);S$o=r(HKr,"model.eval()"),HKr.forEach(t),P$o=r(Rye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xle=n(Rye,"CODE",{});var UKr=s(xle);$$o=r(UKr,"model.train()"),UKr.forEach(t),Rye.forEach(t),I$o=i(Qt),kle=n(Qt,"P",{});var JKr=s(kle);D$o=r(JKr,"Examples:"),JKr.forEach(t),j$o=i(Qt),m(q3.$$.fragment,Qt),Qt.forEach(t),fl.forEach(t),bBe=i(c),Ad=n(c,"H2",{class:!0});var yke=s(Ad);z5=n(yke,"A",{id:!0,class:!0,href:!0});var YKr=s(z5);Rle=n(YKr,"SPAN",{});var KKr=s(Rle);m(G3.$$.fragment,KKr),KKr.forEach(t),YKr.forEach(t),N$o=i(yke),Sle=n(yke,"SPAN",{});var ZKr=s(Sle);q$o=r(ZKr,"AutoModelForAudioClassification"),ZKr.forEach(t),yke.forEach(t),vBe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(O3.$$.fragment,gl),G$o=i(gl),Ld=n(gl,"P",{});var dz=s(Ld);O$o=r(dz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Ple=n(dz,"CODE",{});var eZr=s(Ple);X$o=r(eZr,"from_pretrained()"),eZr.forEach(t),V$o=r(dz,"class method or the "),$le=n(dz,"CODE",{});var oZr=s($le);z$o=r(oZr,"from_config()"),oZr.forEach(t),W$o=r(dz,`class
method.`),dz.forEach(t),Q$o=i(gl),X3=n(gl,"P",{});var wke=s(X3);H$o=r(wke,"This class cannot be instantiated directly using "),Ile=n(wke,"CODE",{});var rZr=s(Ile);U$o=r(rZr,"__init__()"),rZr.forEach(t),J$o=r(wke," (throws an error)."),wke.forEach(t),Y$o=i(gl),Zr=n(gl,"DIV",{class:!0});var hl=s(Zr);m(V3.$$.fragment,hl),K$o=i(hl),Dle=n(hl,"P",{});var tZr=s(Dle);Z$o=r(tZr,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),tZr.forEach(t),eIo=i(hl),Bd=n(hl,"P",{});var cz=s(Bd);oIo=r(cz,`Note:
Loading a model from its configuration file does `),jle=n(cz,"STRONG",{});var aZr=s(jle);rIo=r(aZr,"not"),aZr.forEach(t),tIo=r(cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nle=n(cz,"CODE",{});var nZr=s(Nle);aIo=r(nZr,"from_pretrained()"),nZr.forEach(t),nIo=r(cz,"to load the model weights."),cz.forEach(t),sIo=i(hl),qle=n(hl,"P",{});var sZr=s(qle);lIo=r(sZr,"Examples:"),sZr.forEach(t),iIo=i(hl),m(z3.$$.fragment,hl),hl.forEach(t),dIo=i(gl),We=n(gl,"DIV",{class:!0});var Ht=s(We);m(W3.$$.fragment,Ht),cIo=i(Ht),Gle=n(Ht,"P",{});var lZr=s(Gle);fIo=r(lZr,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),lZr.forEach(t),mIo=i(Ht),Ka=n(Ht,"P",{});var G4=s(Ka);gIo=r(G4,"The model class to instantiate is selected based on the "),Ole=n(G4,"CODE",{});var iZr=s(Ole);hIo=r(iZr,"model_type"),iZr.forEach(t),pIo=r(G4,` property of the config object (either
passed as an argument or loaded from `),Xle=n(G4,"CODE",{});var dZr=s(Xle);_Io=r(dZr,"pretrained_model_name_or_path"),dZr.forEach(t),uIo=r(G4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vle=n(G4,"CODE",{});var cZr=s(Vle);bIo=r(cZr,"pretrained_model_name_or_path"),cZr.forEach(t),vIo=r(G4,":"),G4.forEach(t),TIo=i(Ht),Le=n(Ht,"UL",{});var No=s(Le);W5=n(No,"LI",{});var Sye=s(W5);zle=n(Sye,"STRONG",{});var fZr=s(zle);FIo=r(fZr,"data2vec-audio"),fZr.forEach(t),CIo=r(Sye," \u2014 "),Gj=n(Sye,"A",{href:!0});var mZr=s(Gj);MIo=r(mZr,"Data2VecAudioForSequenceClassification"),mZr.forEach(t),EIo=r(Sye," (Data2VecAudio model)"),Sye.forEach(t),yIo=i(No),Q5=n(No,"LI",{});var Pye=s(Q5);Wle=n(Pye,"STRONG",{});var gZr=s(Wle);wIo=r(gZr,"hubert"),gZr.forEach(t),AIo=r(Pye," \u2014 "),Oj=n(Pye,"A",{href:!0});var hZr=s(Oj);LIo=r(hZr,"HubertForSequenceClassification"),hZr.forEach(t),BIo=r(Pye," (Hubert model)"),Pye.forEach(t),xIo=i(No),H5=n(No,"LI",{});var $ye=s(H5);Qle=n($ye,"STRONG",{});var pZr=s(Qle);kIo=r(pZr,"sew"),pZr.forEach(t),RIo=r($ye," \u2014 "),Xj=n($ye,"A",{href:!0});var _Zr=s(Xj);SIo=r(_Zr,"SEWForSequenceClassification"),_Zr.forEach(t),PIo=r($ye," (SEW model)"),$ye.forEach(t),$Io=i(No),U5=n(No,"LI",{});var Iye=s(U5);Hle=n(Iye,"STRONG",{});var uZr=s(Hle);IIo=r(uZr,"sew-d"),uZr.forEach(t),DIo=r(Iye," \u2014 "),Vj=n(Iye,"A",{href:!0});var bZr=s(Vj);jIo=r(bZr,"SEWDForSequenceClassification"),bZr.forEach(t),NIo=r(Iye," (SEW-D model)"),Iye.forEach(t),qIo=i(No),J5=n(No,"LI",{});var Dye=s(J5);Ule=n(Dye,"STRONG",{});var vZr=s(Ule);GIo=r(vZr,"unispeech"),vZr.forEach(t),OIo=r(Dye," \u2014 "),zj=n(Dye,"A",{href:!0});var TZr=s(zj);XIo=r(TZr,"UniSpeechForSequenceClassification"),TZr.forEach(t),VIo=r(Dye," (UniSpeech model)"),Dye.forEach(t),zIo=i(No),Y5=n(No,"LI",{});var jye=s(Y5);Jle=n(jye,"STRONG",{});var FZr=s(Jle);WIo=r(FZr,"unispeech-sat"),FZr.forEach(t),QIo=r(jye," \u2014 "),Wj=n(jye,"A",{href:!0});var CZr=s(Wj);HIo=r(CZr,"UniSpeechSatForSequenceClassification"),CZr.forEach(t),UIo=r(jye," (UniSpeechSat model)"),jye.forEach(t),JIo=i(No),K5=n(No,"LI",{});var Nye=s(K5);Yle=n(Nye,"STRONG",{});var MZr=s(Yle);YIo=r(MZr,"wav2vec2"),MZr.forEach(t),KIo=r(Nye," \u2014 "),Qj=n(Nye,"A",{href:!0});var EZr=s(Qj);ZIo=r(EZr,"Wav2Vec2ForSequenceClassification"),EZr.forEach(t),eDo=r(Nye," (Wav2Vec2 model)"),Nye.forEach(t),oDo=i(No),Z5=n(No,"LI",{});var qye=s(Z5);Kle=n(qye,"STRONG",{});var yZr=s(Kle);rDo=r(yZr,"wavlm"),yZr.forEach(t),tDo=r(qye," \u2014 "),Hj=n(qye,"A",{href:!0});var wZr=s(Hj);aDo=r(wZr,"WavLMForSequenceClassification"),wZr.forEach(t),nDo=r(qye," (WavLM model)"),qye.forEach(t),No.forEach(t),sDo=i(Ht),e2=n(Ht,"P",{});var Gye=s(e2);lDo=r(Gye,"The model is set in evaluation mode by default using "),Zle=n(Gye,"CODE",{});var AZr=s(Zle);iDo=r(AZr,"model.eval()"),AZr.forEach(t),dDo=r(Gye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eie=n(Gye,"CODE",{});var LZr=s(eie);cDo=r(LZr,"model.train()"),LZr.forEach(t),Gye.forEach(t),fDo=i(Ht),oie=n(Ht,"P",{});var BZr=s(oie);mDo=r(BZr,"Examples:"),BZr.forEach(t),gDo=i(Ht),m(Q3.$$.fragment,Ht),Ht.forEach(t),gl.forEach(t),TBe=i(c),xd=n(c,"H2",{class:!0});var Ake=s(xd);o2=n(Ake,"A",{id:!0,class:!0,href:!0});var xZr=s(o2);rie=n(xZr,"SPAN",{});var kZr=s(rie);m(H3.$$.fragment,kZr),kZr.forEach(t),xZr.forEach(t),hDo=i(Ake),tie=n(Ake,"SPAN",{});var RZr=s(tie);pDo=r(RZr,"AutoModelForAudioFrameClassification"),RZr.forEach(t),Ake.forEach(t),FBe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(U3.$$.fragment,pl),_Do=i(pl),kd=n(pl,"P",{});var fz=s(kd);uDo=r(fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aie=n(fz,"CODE",{});var SZr=s(aie);bDo=r(SZr,"from_pretrained()"),SZr.forEach(t),vDo=r(fz,"class method or the "),nie=n(fz,"CODE",{});var PZr=s(nie);TDo=r(PZr,"from_config()"),PZr.forEach(t),FDo=r(fz,`class
method.`),fz.forEach(t),CDo=i(pl),J3=n(pl,"P",{});var Lke=s(J3);MDo=r(Lke,"This class cannot be instantiated directly using "),sie=n(Lke,"CODE",{});var $Zr=s(sie);EDo=r($Zr,"__init__()"),$Zr.forEach(t),yDo=r(Lke," (throws an error)."),Lke.forEach(t),wDo=i(pl),et=n(pl,"DIV",{class:!0});var _l=s(et);m(Y3.$$.fragment,_l),ADo=i(_l),lie=n(_l,"P",{});var IZr=s(lie);LDo=r(IZr,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),IZr.forEach(t),BDo=i(_l),Rd=n(_l,"P",{});var mz=s(Rd);xDo=r(mz,`Note:
Loading a model from its configuration file does `),iie=n(mz,"STRONG",{});var DZr=s(iie);kDo=r(DZr,"not"),DZr.forEach(t),RDo=r(mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),die=n(mz,"CODE",{});var jZr=s(die);SDo=r(jZr,"from_pretrained()"),jZr.forEach(t),PDo=r(mz,"to load the model weights."),mz.forEach(t),$Do=i(_l),cie=n(_l,"P",{});var NZr=s(cie);IDo=r(NZr,"Examples:"),NZr.forEach(t),DDo=i(_l),m(K3.$$.fragment,_l),_l.forEach(t),jDo=i(pl),Qe=n(pl,"DIV",{class:!0});var Ut=s(Qe);m(Z3.$$.fragment,Ut),NDo=i(Ut),fie=n(Ut,"P",{});var qZr=s(fie);qDo=r(qZr,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),qZr.forEach(t),GDo=i(Ut),Za=n(Ut,"P",{});var O4=s(Za);ODo=r(O4,"The model class to instantiate is selected based on the "),mie=n(O4,"CODE",{});var GZr=s(mie);XDo=r(GZr,"model_type"),GZr.forEach(t),VDo=r(O4,` property of the config object (either
passed as an argument or loaded from `),gie=n(O4,"CODE",{});var OZr=s(gie);zDo=r(OZr,"pretrained_model_name_or_path"),OZr.forEach(t),WDo=r(O4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hie=n(O4,"CODE",{});var XZr=s(hie);QDo=r(XZr,"pretrained_model_name_or_path"),XZr.forEach(t),HDo=r(O4,":"),O4.forEach(t),UDo=i(Ut),en=n(Ut,"UL",{});var X4=s(en);r2=n(X4,"LI",{});var Oye=s(r2);pie=n(Oye,"STRONG",{});var VZr=s(pie);JDo=r(VZr,"data2vec-audio"),VZr.forEach(t),YDo=r(Oye," \u2014 "),Uj=n(Oye,"A",{href:!0});var zZr=s(Uj);KDo=r(zZr,"Data2VecAudioForAudioFrameClassification"),zZr.forEach(t),ZDo=r(Oye," (Data2VecAudio model)"),Oye.forEach(t),ejo=i(X4),t2=n(X4,"LI",{});var Xye=s(t2);_ie=n(Xye,"STRONG",{});var WZr=s(_ie);ojo=r(WZr,"unispeech-sat"),WZr.forEach(t),rjo=r(Xye," \u2014 "),Jj=n(Xye,"A",{href:!0});var QZr=s(Jj);tjo=r(QZr,"UniSpeechSatForAudioFrameClassification"),QZr.forEach(t),ajo=r(Xye," (UniSpeechSat model)"),Xye.forEach(t),njo=i(X4),a2=n(X4,"LI",{});var Vye=s(a2);uie=n(Vye,"STRONG",{});var HZr=s(uie);sjo=r(HZr,"wav2vec2"),HZr.forEach(t),ljo=r(Vye," \u2014 "),Yj=n(Vye,"A",{href:!0});var UZr=s(Yj);ijo=r(UZr,"Wav2Vec2ForAudioFrameClassification"),UZr.forEach(t),djo=r(Vye," (Wav2Vec2 model)"),Vye.forEach(t),cjo=i(X4),n2=n(X4,"LI",{});var zye=s(n2);bie=n(zye,"STRONG",{});var JZr=s(bie);fjo=r(JZr,"wavlm"),JZr.forEach(t),mjo=r(zye," \u2014 "),Kj=n(zye,"A",{href:!0});var YZr=s(Kj);gjo=r(YZr,"WavLMForAudioFrameClassification"),YZr.forEach(t),hjo=r(zye," (WavLM model)"),zye.forEach(t),X4.forEach(t),pjo=i(Ut),s2=n(Ut,"P",{});var Wye=s(s2);_jo=r(Wye,"The model is set in evaluation mode by default using "),vie=n(Wye,"CODE",{});var KZr=s(vie);ujo=r(KZr,"model.eval()"),KZr.forEach(t),bjo=r(Wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tie=n(Wye,"CODE",{});var ZZr=s(Tie);vjo=r(ZZr,"model.train()"),ZZr.forEach(t),Wye.forEach(t),Tjo=i(Ut),Fie=n(Ut,"P",{});var eet=s(Fie);Fjo=r(eet,"Examples:"),eet.forEach(t),Cjo=i(Ut),m(ey.$$.fragment,Ut),Ut.forEach(t),pl.forEach(t),CBe=i(c),Sd=n(c,"H2",{class:!0});var Bke=s(Sd);l2=n(Bke,"A",{id:!0,class:!0,href:!0});var oet=s(l2);Cie=n(oet,"SPAN",{});var ret=s(Cie);m(oy.$$.fragment,ret),ret.forEach(t),oet.forEach(t),Mjo=i(Bke),Mie=n(Bke,"SPAN",{});var tet=s(Mie);Ejo=r(tet,"AutoModelForCTC"),tet.forEach(t),Bke.forEach(t),MBe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(ry.$$.fragment,ul),yjo=i(ul),Pd=n(ul,"P",{});var gz=s(Pd);wjo=r(gz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Eie=n(gz,"CODE",{});var aet=s(Eie);Ajo=r(aet,"from_pretrained()"),aet.forEach(t),Ljo=r(gz,"class method or the "),yie=n(gz,"CODE",{});var net=s(yie);Bjo=r(net,"from_config()"),net.forEach(t),xjo=r(gz,`class
method.`),gz.forEach(t),kjo=i(ul),ty=n(ul,"P",{});var xke=s(ty);Rjo=r(xke,"This class cannot be instantiated directly using "),wie=n(xke,"CODE",{});var set=s(wie);Sjo=r(set,"__init__()"),set.forEach(t),Pjo=r(xke," (throws an error)."),xke.forEach(t),$jo=i(ul),ot=n(ul,"DIV",{class:!0});var bl=s(ot);m(ay.$$.fragment,bl),Ijo=i(bl),Aie=n(bl,"P",{});var iet=s(Aie);Djo=r(iet,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),iet.forEach(t),jjo=i(bl),$d=n(bl,"P",{});var hz=s($d);Njo=r(hz,`Note:
Loading a model from its configuration file does `),Lie=n(hz,"STRONG",{});var det=s(Lie);qjo=r(det,"not"),det.forEach(t),Gjo=r(hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bie=n(hz,"CODE",{});var cet=s(Bie);Ojo=r(cet,"from_pretrained()"),cet.forEach(t),Xjo=r(hz,"to load the model weights."),hz.forEach(t),Vjo=i(bl),xie=n(bl,"P",{});var fet=s(xie);zjo=r(fet,"Examples:"),fet.forEach(t),Wjo=i(bl),m(ny.$$.fragment,bl),bl.forEach(t),Qjo=i(ul),He=n(ul,"DIV",{class:!0});var Jt=s(He);m(sy.$$.fragment,Jt),Hjo=i(Jt),kie=n(Jt,"P",{});var met=s(kie);Ujo=r(met,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),met.forEach(t),Jjo=i(Jt),on=n(Jt,"P",{});var V4=s(on);Yjo=r(V4,"The model class to instantiate is selected based on the "),Rie=n(V4,"CODE",{});var get=s(Rie);Kjo=r(get,"model_type"),get.forEach(t),Zjo=r(V4,` property of the config object (either
passed as an argument or loaded from `),Sie=n(V4,"CODE",{});var het=s(Sie);eNo=r(het,"pretrained_model_name_or_path"),het.forEach(t),oNo=r(V4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=n(V4,"CODE",{});var pet=s(Pie);rNo=r(pet,"pretrained_model_name_or_path"),pet.forEach(t),tNo=r(V4,":"),V4.forEach(t),aNo=i(Jt),Be=n(Jt,"UL",{});var qo=s(Be);i2=n(qo,"LI",{});var Qye=s(i2);$ie=n(Qye,"STRONG",{});var _et=s($ie);nNo=r(_et,"data2vec-audio"),_et.forEach(t),sNo=r(Qye," \u2014 "),Zj=n(Qye,"A",{href:!0});var uet=s(Zj);lNo=r(uet,"Data2VecAudioForCTC"),uet.forEach(t),iNo=r(Qye," (Data2VecAudio model)"),Qye.forEach(t),dNo=i(qo),d2=n(qo,"LI",{});var Hye=s(d2);Iie=n(Hye,"STRONG",{});var bet=s(Iie);cNo=r(bet,"hubert"),bet.forEach(t),fNo=r(Hye," \u2014 "),eN=n(Hye,"A",{href:!0});var vet=s(eN);mNo=r(vet,"HubertForCTC"),vet.forEach(t),gNo=r(Hye," (Hubert model)"),Hye.forEach(t),hNo=i(qo),c2=n(qo,"LI",{});var Uye=s(c2);Die=n(Uye,"STRONG",{});var Tet=s(Die);pNo=r(Tet,"sew"),Tet.forEach(t),_No=r(Uye," \u2014 "),oN=n(Uye,"A",{href:!0});var Fet=s(oN);uNo=r(Fet,"SEWForCTC"),Fet.forEach(t),bNo=r(Uye," (SEW model)"),Uye.forEach(t),vNo=i(qo),f2=n(qo,"LI",{});var Jye=s(f2);jie=n(Jye,"STRONG",{});var Cet=s(jie);TNo=r(Cet,"sew-d"),Cet.forEach(t),FNo=r(Jye," \u2014 "),rN=n(Jye,"A",{href:!0});var Met=s(rN);CNo=r(Met,"SEWDForCTC"),Met.forEach(t),MNo=r(Jye," (SEW-D model)"),Jye.forEach(t),ENo=i(qo),m2=n(qo,"LI",{});var Yye=s(m2);Nie=n(Yye,"STRONG",{});var Eet=s(Nie);yNo=r(Eet,"unispeech"),Eet.forEach(t),wNo=r(Yye," \u2014 "),tN=n(Yye,"A",{href:!0});var yet=s(tN);ANo=r(yet,"UniSpeechForCTC"),yet.forEach(t),LNo=r(Yye," (UniSpeech model)"),Yye.forEach(t),BNo=i(qo),g2=n(qo,"LI",{});var Kye=s(g2);qie=n(Kye,"STRONG",{});var wet=s(qie);xNo=r(wet,"unispeech-sat"),wet.forEach(t),kNo=r(Kye," \u2014 "),aN=n(Kye,"A",{href:!0});var Aet=s(aN);RNo=r(Aet,"UniSpeechSatForCTC"),Aet.forEach(t),SNo=r(Kye," (UniSpeechSat model)"),Kye.forEach(t),PNo=i(qo),h2=n(qo,"LI",{});var Zye=s(h2);Gie=n(Zye,"STRONG",{});var Let=s(Gie);$No=r(Let,"wav2vec2"),Let.forEach(t),INo=r(Zye," \u2014 "),nN=n(Zye,"A",{href:!0});var Bet=s(nN);DNo=r(Bet,"Wav2Vec2ForCTC"),Bet.forEach(t),jNo=r(Zye," (Wav2Vec2 model)"),Zye.forEach(t),NNo=i(qo),p2=n(qo,"LI",{});var ewe=s(p2);Oie=n(ewe,"STRONG",{});var xet=s(Oie);qNo=r(xet,"wavlm"),xet.forEach(t),GNo=r(ewe," \u2014 "),sN=n(ewe,"A",{href:!0});var ket=s(sN);ONo=r(ket,"WavLMForCTC"),ket.forEach(t),XNo=r(ewe," (WavLM model)"),ewe.forEach(t),qo.forEach(t),VNo=i(Jt),_2=n(Jt,"P",{});var owe=s(_2);zNo=r(owe,"The model is set in evaluation mode by default using "),Xie=n(owe,"CODE",{});var Ret=s(Xie);WNo=r(Ret,"model.eval()"),Ret.forEach(t),QNo=r(owe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vie=n(owe,"CODE",{});var Set=s(Vie);HNo=r(Set,"model.train()"),Set.forEach(t),owe.forEach(t),UNo=i(Jt),zie=n(Jt,"P",{});var Pet=s(zie);JNo=r(Pet,"Examples:"),Pet.forEach(t),YNo=i(Jt),m(ly.$$.fragment,Jt),Jt.forEach(t),ul.forEach(t),EBe=i(c),Id=n(c,"H2",{class:!0});var kke=s(Id);u2=n(kke,"A",{id:!0,class:!0,href:!0});var $et=s(u2);Wie=n($et,"SPAN",{});var Iet=s(Wie);m(iy.$$.fragment,Iet),Iet.forEach(t),$et.forEach(t),KNo=i(kke),Qie=n(kke,"SPAN",{});var Det=s(Qie);ZNo=r(Det,"AutoModelForSpeechSeq2Seq"),Det.forEach(t),kke.forEach(t),yBe=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(dy.$$.fragment,vl),eqo=i(vl),Dd=n(vl,"P",{});var pz=s(Dd);oqo=r(pz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Hie=n(pz,"CODE",{});var jet=s(Hie);rqo=r(jet,"from_pretrained()"),jet.forEach(t),tqo=r(pz,"class method or the "),Uie=n(pz,"CODE",{});var Net=s(Uie);aqo=r(Net,"from_config()"),Net.forEach(t),nqo=r(pz,`class
method.`),pz.forEach(t),sqo=i(vl),cy=n(vl,"P",{});var Rke=s(cy);lqo=r(Rke,"This class cannot be instantiated directly using "),Jie=n(Rke,"CODE",{});var qet=s(Jie);iqo=r(qet,"__init__()"),qet.forEach(t),dqo=r(Rke," (throws an error)."),Rke.forEach(t),cqo=i(vl),rt=n(vl,"DIV",{class:!0});var Tl=s(rt);m(fy.$$.fragment,Tl),fqo=i(Tl),Yie=n(Tl,"P",{});var Get=s(Yie);mqo=r(Get,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Get.forEach(t),gqo=i(Tl),jd=n(Tl,"P",{});var _z=s(jd);hqo=r(_z,`Note:
Loading a model from its configuration file does `),Kie=n(_z,"STRONG",{});var Oet=s(Kie);pqo=r(Oet,"not"),Oet.forEach(t),_qo=r(_z,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zie=n(_z,"CODE",{});var Xet=s(Zie);uqo=r(Xet,"from_pretrained()"),Xet.forEach(t),bqo=r(_z,"to load the model weights."),_z.forEach(t),vqo=i(Tl),ede=n(Tl,"P",{});var Vet=s(ede);Tqo=r(Vet,"Examples:"),Vet.forEach(t),Fqo=i(Tl),m(my.$$.fragment,Tl),Tl.forEach(t),Cqo=i(vl),Ue=n(vl,"DIV",{class:!0});var Yt=s(Ue);m(gy.$$.fragment,Yt),Mqo=i(Yt),ode=n(Yt,"P",{});var zet=s(ode);Eqo=r(zet,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zet.forEach(t),yqo=i(Yt),rn=n(Yt,"P",{});var z4=s(rn);wqo=r(z4,"The model class to instantiate is selected based on the "),rde=n(z4,"CODE",{});var Wet=s(rde);Aqo=r(Wet,"model_type"),Wet.forEach(t),Lqo=r(z4,` property of the config object (either
passed as an argument or loaded from `),tde=n(z4,"CODE",{});var Qet=s(tde);Bqo=r(Qet,"pretrained_model_name_or_path"),Qet.forEach(t),xqo=r(z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=n(z4,"CODE",{});var Het=s(ade);kqo=r(Het,"pretrained_model_name_or_path"),Het.forEach(t),Rqo=r(z4,":"),z4.forEach(t),Sqo=i(Yt),hy=n(Yt,"UL",{});var Ske=s(hy);b2=n(Ske,"LI",{});var rwe=s(b2);nde=n(rwe,"STRONG",{});var Uet=s(nde);Pqo=r(Uet,"speech-encoder-decoder"),Uet.forEach(t),$qo=r(rwe," \u2014 "),lN=n(rwe,"A",{href:!0});var Jet=s(lN);Iqo=r(Jet,"SpeechEncoderDecoderModel"),Jet.forEach(t),Dqo=r(rwe," (Speech Encoder decoder model)"),rwe.forEach(t),jqo=i(Ske),v2=n(Ske,"LI",{});var twe=s(v2);sde=n(twe,"STRONG",{});var Yet=s(sde);Nqo=r(Yet,"speech_to_text"),Yet.forEach(t),qqo=r(twe," \u2014 "),iN=n(twe,"A",{href:!0});var Ket=s(iN);Gqo=r(Ket,"Speech2TextForConditionalGeneration"),Ket.forEach(t),Oqo=r(twe," (Speech2Text model)"),twe.forEach(t),Ske.forEach(t),Xqo=i(Yt),T2=n(Yt,"P",{});var awe=s(T2);Vqo=r(awe,"The model is set in evaluation mode by default using "),lde=n(awe,"CODE",{});var Zet=s(lde);zqo=r(Zet,"model.eval()"),Zet.forEach(t),Wqo=r(awe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ide=n(awe,"CODE",{});var eot=s(ide);Qqo=r(eot,"model.train()"),eot.forEach(t),awe.forEach(t),Hqo=i(Yt),dde=n(Yt,"P",{});var oot=s(dde);Uqo=r(oot,"Examples:"),oot.forEach(t),Jqo=i(Yt),m(py.$$.fragment,Yt),Yt.forEach(t),vl.forEach(t),wBe=i(c),Nd=n(c,"H2",{class:!0});var Pke=s(Nd);F2=n(Pke,"A",{id:!0,class:!0,href:!0});var rot=s(F2);cde=n(rot,"SPAN",{});var tot=s(cde);m(_y.$$.fragment,tot),tot.forEach(t),rot.forEach(t),Yqo=i(Pke),fde=n(Pke,"SPAN",{});var aot=s(fde);Kqo=r(aot,"AutoModelForAudioXVector"),aot.forEach(t),Pke.forEach(t),ABe=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(uy.$$.fragment,Fl),Zqo=i(Fl),qd=n(Fl,"P",{});var uz=s(qd);eGo=r(uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),mde=n(uz,"CODE",{});var not=s(mde);oGo=r(not,"from_pretrained()"),not.forEach(t),rGo=r(uz,"class method or the "),gde=n(uz,"CODE",{});var sot=s(gde);tGo=r(sot,"from_config()"),sot.forEach(t),aGo=r(uz,`class
method.`),uz.forEach(t),nGo=i(Fl),by=n(Fl,"P",{});var $ke=s(by);sGo=r($ke,"This class cannot be instantiated directly using "),hde=n($ke,"CODE",{});var lot=s(hde);lGo=r(lot,"__init__()"),lot.forEach(t),iGo=r($ke," (throws an error)."),$ke.forEach(t),dGo=i(Fl),tt=n(Fl,"DIV",{class:!0});var Cl=s(tt);m(vy.$$.fragment,Cl),cGo=i(Cl),pde=n(Cl,"P",{});var iot=s(pde);fGo=r(iot,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),iot.forEach(t),mGo=i(Cl),Gd=n(Cl,"P",{});var bz=s(Gd);gGo=r(bz,`Note:
Loading a model from its configuration file does `),_de=n(bz,"STRONG",{});var dot=s(_de);hGo=r(dot,"not"),dot.forEach(t),pGo=r(bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ude=n(bz,"CODE",{});var cot=s(ude);_Go=r(cot,"from_pretrained()"),cot.forEach(t),uGo=r(bz,"to load the model weights."),bz.forEach(t),bGo=i(Cl),bde=n(Cl,"P",{});var fot=s(bde);vGo=r(fot,"Examples:"),fot.forEach(t),TGo=i(Cl),m(Ty.$$.fragment,Cl),Cl.forEach(t),FGo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Kt=s(Je);m(Fy.$$.fragment,Kt),CGo=i(Kt),vde=n(Kt,"P",{});var mot=s(vde);MGo=r(mot,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),mot.forEach(t),EGo=i(Kt),tn=n(Kt,"P",{});var W4=s(tn);yGo=r(W4,"The model class to instantiate is selected based on the "),Tde=n(W4,"CODE",{});var got=s(Tde);wGo=r(got,"model_type"),got.forEach(t),AGo=r(W4,` property of the config object (either
passed as an argument or loaded from `),Fde=n(W4,"CODE",{});var hot=s(Fde);LGo=r(hot,"pretrained_model_name_or_path"),hot.forEach(t),BGo=r(W4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=n(W4,"CODE",{});var pot=s(Cde);xGo=r(pot,"pretrained_model_name_or_path"),pot.forEach(t),kGo=r(W4,":"),W4.forEach(t),RGo=i(Kt),an=n(Kt,"UL",{});var Q4=s(an);C2=n(Q4,"LI",{});var nwe=s(C2);Mde=n(nwe,"STRONG",{});var _ot=s(Mde);SGo=r(_ot,"data2vec-audio"),_ot.forEach(t),PGo=r(nwe," \u2014 "),dN=n(nwe,"A",{href:!0});var uot=s(dN);$Go=r(uot,"Data2VecAudioForXVector"),uot.forEach(t),IGo=r(nwe," (Data2VecAudio model)"),nwe.forEach(t),DGo=i(Q4),M2=n(Q4,"LI",{});var swe=s(M2);Ede=n(swe,"STRONG",{});var bot=s(Ede);jGo=r(bot,"unispeech-sat"),bot.forEach(t),NGo=r(swe," \u2014 "),cN=n(swe,"A",{href:!0});var vot=s(cN);qGo=r(vot,"UniSpeechSatForXVector"),vot.forEach(t),GGo=r(swe," (UniSpeechSat model)"),swe.forEach(t),OGo=i(Q4),E2=n(Q4,"LI",{});var lwe=s(E2);yde=n(lwe,"STRONG",{});var Tot=s(yde);XGo=r(Tot,"wav2vec2"),Tot.forEach(t),VGo=r(lwe," \u2014 "),fN=n(lwe,"A",{href:!0});var Fot=s(fN);zGo=r(Fot,"Wav2Vec2ForXVector"),Fot.forEach(t),WGo=r(lwe," (Wav2Vec2 model)"),lwe.forEach(t),QGo=i(Q4),y2=n(Q4,"LI",{});var iwe=s(y2);wde=n(iwe,"STRONG",{});var Cot=s(wde);HGo=r(Cot,"wavlm"),Cot.forEach(t),UGo=r(iwe," \u2014 "),mN=n(iwe,"A",{href:!0});var Mot=s(mN);JGo=r(Mot,"WavLMForXVector"),Mot.forEach(t),YGo=r(iwe," (WavLM model)"),iwe.forEach(t),Q4.forEach(t),KGo=i(Kt),w2=n(Kt,"P",{});var dwe=s(w2);ZGo=r(dwe,"The model is set in evaluation mode by default using "),Ade=n(dwe,"CODE",{});var Eot=s(Ade);eOo=r(Eot,"model.eval()"),Eot.forEach(t),oOo=r(dwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lde=n(dwe,"CODE",{});var yot=s(Lde);rOo=r(yot,"model.train()"),yot.forEach(t),dwe.forEach(t),tOo=i(Kt),Bde=n(Kt,"P",{});var wot=s(Bde);aOo=r(wot,"Examples:"),wot.forEach(t),nOo=i(Kt),m(Cy.$$.fragment,Kt),Kt.forEach(t),Fl.forEach(t),LBe=i(c),Od=n(c,"H2",{class:!0});var Ike=s(Od);A2=n(Ike,"A",{id:!0,class:!0,href:!0});var Aot=s(A2);xde=n(Aot,"SPAN",{});var Lot=s(xde);m(My.$$.fragment,Lot),Lot.forEach(t),Aot.forEach(t),sOo=i(Ike),kde=n(Ike,"SPAN",{});var Bot=s(kde);lOo=r(Bot,"AutoModelForMaskedImageModeling"),Bot.forEach(t),Ike.forEach(t),BBe=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(Ey.$$.fragment,Ml),iOo=i(Ml),Xd=n(Ml,"P",{});var vz=s(Xd);dOo=r(vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Rde=n(vz,"CODE",{});var xot=s(Rde);cOo=r(xot,"from_pretrained()"),xot.forEach(t),fOo=r(vz,"class method or the "),Sde=n(vz,"CODE",{});var kot=s(Sde);mOo=r(kot,"from_config()"),kot.forEach(t),gOo=r(vz,`class
method.`),vz.forEach(t),hOo=i(Ml),yy=n(Ml,"P",{});var Dke=s(yy);pOo=r(Dke,"This class cannot be instantiated directly using "),Pde=n(Dke,"CODE",{});var Rot=s(Pde);_Oo=r(Rot,"__init__()"),Rot.forEach(t),uOo=r(Dke," (throws an error)."),Dke.forEach(t),bOo=i(Ml),at=n(Ml,"DIV",{class:!0});var El=s(at);m(wy.$$.fragment,El),vOo=i(El),$de=n(El,"P",{});var Sot=s($de);TOo=r(Sot,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Sot.forEach(t),FOo=i(El),Vd=n(El,"P",{});var Tz=s(Vd);COo=r(Tz,`Note:
Loading a model from its configuration file does `),Ide=n(Tz,"STRONG",{});var Pot=s(Ide);MOo=r(Pot,"not"),Pot.forEach(t),EOo=r(Tz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dde=n(Tz,"CODE",{});var $ot=s(Dde);yOo=r($ot,"from_pretrained()"),$ot.forEach(t),wOo=r(Tz,"to load the model weights."),Tz.forEach(t),AOo=i(El),jde=n(El,"P",{});var Iot=s(jde);LOo=r(Iot,"Examples:"),Iot.forEach(t),BOo=i(El),m(Ay.$$.fragment,El),El.forEach(t),xOo=i(Ml),Ye=n(Ml,"DIV",{class:!0});var Zt=s(Ye);m(Ly.$$.fragment,Zt),kOo=i(Zt),Nde=n(Zt,"P",{});var Dot=s(Nde);ROo=r(Dot,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Dot.forEach(t),SOo=i(Zt),nn=n(Zt,"P",{});var H4=s(nn);POo=r(H4,"The model class to instantiate is selected based on the "),qde=n(H4,"CODE",{});var jot=s(qde);$Oo=r(jot,"model_type"),jot.forEach(t),IOo=r(H4,` property of the config object (either
passed as an argument or loaded from `),Gde=n(H4,"CODE",{});var Not=s(Gde);DOo=r(Not,"pretrained_model_name_or_path"),Not.forEach(t),jOo=r(H4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ode=n(H4,"CODE",{});var qot=s(Ode);NOo=r(qot,"pretrained_model_name_or_path"),qot.forEach(t),qOo=r(H4,":"),H4.forEach(t),GOo=i(Zt),zd=n(Zt,"UL",{});var Fz=s(zd);L2=n(Fz,"LI",{});var cwe=s(L2);Xde=n(cwe,"STRONG",{});var Got=s(Xde);OOo=r(Got,"deit"),Got.forEach(t),XOo=r(cwe," \u2014 "),gN=n(cwe,"A",{href:!0});var Oot=s(gN);VOo=r(Oot,"DeiTForMaskedImageModeling"),Oot.forEach(t),zOo=r(cwe," (DeiT model)"),cwe.forEach(t),WOo=i(Fz),B2=n(Fz,"LI",{});var fwe=s(B2);Vde=n(fwe,"STRONG",{});var Xot=s(Vde);QOo=r(Xot,"swin"),Xot.forEach(t),HOo=r(fwe," \u2014 "),hN=n(fwe,"A",{href:!0});var Vot=s(hN);UOo=r(Vot,"SwinForMaskedImageModeling"),Vot.forEach(t),JOo=r(fwe," (Swin model)"),fwe.forEach(t),YOo=i(Fz),x2=n(Fz,"LI",{});var mwe=s(x2);zde=n(mwe,"STRONG",{});var zot=s(zde);KOo=r(zot,"vit"),zot.forEach(t),ZOo=r(mwe," \u2014 "),pN=n(mwe,"A",{href:!0});var Wot=s(pN);eXo=r(Wot,"ViTForMaskedImageModeling"),Wot.forEach(t),oXo=r(mwe," (ViT model)"),mwe.forEach(t),Fz.forEach(t),rXo=i(Zt),k2=n(Zt,"P",{});var gwe=s(k2);tXo=r(gwe,"The model is set in evaluation mode by default using "),Wde=n(gwe,"CODE",{});var Qot=s(Wde);aXo=r(Qot,"model.eval()"),Qot.forEach(t),nXo=r(gwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qde=n(gwe,"CODE",{});var Hot=s(Qde);sXo=r(Hot,"model.train()"),Hot.forEach(t),gwe.forEach(t),lXo=i(Zt),Hde=n(Zt,"P",{});var Uot=s(Hde);iXo=r(Uot,"Examples:"),Uot.forEach(t),dXo=i(Zt),m(By.$$.fragment,Zt),Zt.forEach(t),Ml.forEach(t),xBe=i(c),Wd=n(c,"H2",{class:!0});var jke=s(Wd);R2=n(jke,"A",{id:!0,class:!0,href:!0});var Jot=s(R2);Ude=n(Jot,"SPAN",{});var Yot=s(Ude);m(xy.$$.fragment,Yot),Yot.forEach(t),Jot.forEach(t),cXo=i(jke),Jde=n(jke,"SPAN",{});var Kot=s(Jde);fXo=r(Kot,"AutoModelForObjectDetection"),Kot.forEach(t),jke.forEach(t),kBe=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(ky.$$.fragment,yl),mXo=i(yl),Qd=n(yl,"P",{});var Cz=s(Qd);gXo=r(Cz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Yde=n(Cz,"CODE",{});var Zot=s(Yde);hXo=r(Zot,"from_pretrained()"),Zot.forEach(t),pXo=r(Cz,"class method or the "),Kde=n(Cz,"CODE",{});var ert=s(Kde);_Xo=r(ert,"from_config()"),ert.forEach(t),uXo=r(Cz,`class
method.`),Cz.forEach(t),bXo=i(yl),Ry=n(yl,"P",{});var Nke=s(Ry);vXo=r(Nke,"This class cannot be instantiated directly using "),Zde=n(Nke,"CODE",{});var ort=s(Zde);TXo=r(ort,"__init__()"),ort.forEach(t),FXo=r(Nke," (throws an error)."),Nke.forEach(t),CXo=i(yl),nt=n(yl,"DIV",{class:!0});var wl=s(nt);m(Sy.$$.fragment,wl),MXo=i(wl),ece=n(wl,"P",{});var rrt=s(ece);EXo=r(rrt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),rrt.forEach(t),yXo=i(wl),Hd=n(wl,"P",{});var Mz=s(Hd);wXo=r(Mz,`Note:
Loading a model from its configuration file does `),oce=n(Mz,"STRONG",{});var trt=s(oce);AXo=r(trt,"not"),trt.forEach(t),LXo=r(Mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),rce=n(Mz,"CODE",{});var art=s(rce);BXo=r(art,"from_pretrained()"),art.forEach(t),xXo=r(Mz,"to load the model weights."),Mz.forEach(t),kXo=i(wl),tce=n(wl,"P",{});var nrt=s(tce);RXo=r(nrt,"Examples:"),nrt.forEach(t),SXo=i(wl),m(Py.$$.fragment,wl),wl.forEach(t),PXo=i(yl),Ke=n(yl,"DIV",{class:!0});var ea=s(Ke);m($y.$$.fragment,ea),$Xo=i(ea),ace=n(ea,"P",{});var srt=s(ace);IXo=r(srt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),srt.forEach(t),DXo=i(ea),sn=n(ea,"P",{});var U4=s(sn);jXo=r(U4,"The model class to instantiate is selected based on the "),nce=n(U4,"CODE",{});var lrt=s(nce);NXo=r(lrt,"model_type"),lrt.forEach(t),qXo=r(U4,` property of the config object (either
passed as an argument or loaded from `),sce=n(U4,"CODE",{});var irt=s(sce);GXo=r(irt,"pretrained_model_name_or_path"),irt.forEach(t),OXo=r(U4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lce=n(U4,"CODE",{});var drt=s(lce);XXo=r(drt,"pretrained_model_name_or_path"),drt.forEach(t),VXo=r(U4,":"),U4.forEach(t),zXo=i(ea),ice=n(ea,"UL",{});var crt=s(ice);S2=n(crt,"LI",{});var hwe=s(S2);dce=n(hwe,"STRONG",{});var frt=s(dce);WXo=r(frt,"detr"),frt.forEach(t),QXo=r(hwe," \u2014 "),_N=n(hwe,"A",{href:!0});var mrt=s(_N);HXo=r(mrt,"DetrForObjectDetection"),mrt.forEach(t),UXo=r(hwe," (DETR model)"),hwe.forEach(t),crt.forEach(t),JXo=i(ea),P2=n(ea,"P",{});var pwe=s(P2);YXo=r(pwe,"The model is set in evaluation mode by default using "),cce=n(pwe,"CODE",{});var grt=s(cce);KXo=r(grt,"model.eval()"),grt.forEach(t),ZXo=r(pwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fce=n(pwe,"CODE",{});var hrt=s(fce);eVo=r(hrt,"model.train()"),hrt.forEach(t),pwe.forEach(t),oVo=i(ea),mce=n(ea,"P",{});var prt=s(mce);rVo=r(prt,"Examples:"),prt.forEach(t),tVo=i(ea),m(Iy.$$.fragment,ea),ea.forEach(t),yl.forEach(t),RBe=i(c),Ud=n(c,"H2",{class:!0});var qke=s(Ud);$2=n(qke,"A",{id:!0,class:!0,href:!0});var _rt=s($2);gce=n(_rt,"SPAN",{});var urt=s(gce);m(Dy.$$.fragment,urt),urt.forEach(t),_rt.forEach(t),aVo=i(qke),hce=n(qke,"SPAN",{});var brt=s(hce);nVo=r(brt,"AutoModelForImageSegmentation"),brt.forEach(t),qke.forEach(t),SBe=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(jy.$$.fragment,Al),sVo=i(Al),Jd=n(Al,"P",{});var Ez=s(Jd);lVo=r(Ez,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),pce=n(Ez,"CODE",{});var vrt=s(pce);iVo=r(vrt,"from_pretrained()"),vrt.forEach(t),dVo=r(Ez,"class method or the "),_ce=n(Ez,"CODE",{});var Trt=s(_ce);cVo=r(Trt,"from_config()"),Trt.forEach(t),fVo=r(Ez,`class
method.`),Ez.forEach(t),mVo=i(Al),Ny=n(Al,"P",{});var Gke=s(Ny);gVo=r(Gke,"This class cannot be instantiated directly using "),uce=n(Gke,"CODE",{});var Frt=s(uce);hVo=r(Frt,"__init__()"),Frt.forEach(t),pVo=r(Gke," (throws an error)."),Gke.forEach(t),_Vo=i(Al),st=n(Al,"DIV",{class:!0});var Ll=s(st);m(qy.$$.fragment,Ll),uVo=i(Ll),bce=n(Ll,"P",{});var Crt=s(bce);bVo=r(Crt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Crt.forEach(t),vVo=i(Ll),Yd=n(Ll,"P",{});var yz=s(Yd);TVo=r(yz,`Note:
Loading a model from its configuration file does `),vce=n(yz,"STRONG",{});var Mrt=s(vce);FVo=r(Mrt,"not"),Mrt.forEach(t),CVo=r(yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tce=n(yz,"CODE",{});var Ert=s(Tce);MVo=r(Ert,"from_pretrained()"),Ert.forEach(t),EVo=r(yz,"to load the model weights."),yz.forEach(t),yVo=i(Ll),Fce=n(Ll,"P",{});var yrt=s(Fce);wVo=r(yrt,"Examples:"),yrt.forEach(t),AVo=i(Ll),m(Gy.$$.fragment,Ll),Ll.forEach(t),LVo=i(Al),Ze=n(Al,"DIV",{class:!0});var oa=s(Ze);m(Oy.$$.fragment,oa),BVo=i(oa),Cce=n(oa,"P",{});var wrt=s(Cce);xVo=r(wrt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),wrt.forEach(t),kVo=i(oa),ln=n(oa,"P",{});var J4=s(ln);RVo=r(J4,"The model class to instantiate is selected based on the "),Mce=n(J4,"CODE",{});var Art=s(Mce);SVo=r(Art,"model_type"),Art.forEach(t),PVo=r(J4,` property of the config object (either
passed as an argument or loaded from `),Ece=n(J4,"CODE",{});var Lrt=s(Ece);$Vo=r(Lrt,"pretrained_model_name_or_path"),Lrt.forEach(t),IVo=r(J4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yce=n(J4,"CODE",{});var Brt=s(yce);DVo=r(Brt,"pretrained_model_name_or_path"),Brt.forEach(t),jVo=r(J4,":"),J4.forEach(t),NVo=i(oa),wce=n(oa,"UL",{});var xrt=s(wce);I2=n(xrt,"LI",{});var _we=s(I2);Ace=n(_we,"STRONG",{});var krt=s(Ace);qVo=r(krt,"detr"),krt.forEach(t),GVo=r(_we," \u2014 "),uN=n(_we,"A",{href:!0});var Rrt=s(uN);OVo=r(Rrt,"DetrForSegmentation"),Rrt.forEach(t),XVo=r(_we," (DETR model)"),_we.forEach(t),xrt.forEach(t),VVo=i(oa),D2=n(oa,"P",{});var uwe=s(D2);zVo=r(uwe,"The model is set in evaluation mode by default using "),Lce=n(uwe,"CODE",{});var Srt=s(Lce);WVo=r(Srt,"model.eval()"),Srt.forEach(t),QVo=r(uwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bce=n(uwe,"CODE",{});var Prt=s(Bce);HVo=r(Prt,"model.train()"),Prt.forEach(t),uwe.forEach(t),UVo=i(oa),xce=n(oa,"P",{});var $rt=s(xce);JVo=r($rt,"Examples:"),$rt.forEach(t),YVo=i(oa),m(Xy.$$.fragment,oa),oa.forEach(t),Al.forEach(t),PBe=i(c),Kd=n(c,"H2",{class:!0});var Oke=s(Kd);j2=n(Oke,"A",{id:!0,class:!0,href:!0});var Irt=s(j2);kce=n(Irt,"SPAN",{});var Drt=s(kce);m(Vy.$$.fragment,Drt),Drt.forEach(t),Irt.forEach(t),KVo=i(Oke),Rce=n(Oke,"SPAN",{});var jrt=s(Rce);ZVo=r(jrt,"AutoModelForSemanticSegmentation"),jrt.forEach(t),Oke.forEach(t),$Be=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(zy.$$.fragment,Bl),ezo=i(Bl),Zd=n(Bl,"P",{});var wz=s(Zd);ozo=r(wz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Sce=n(wz,"CODE",{});var Nrt=s(Sce);rzo=r(Nrt,"from_pretrained()"),Nrt.forEach(t),tzo=r(wz,"class method or the "),Pce=n(wz,"CODE",{});var qrt=s(Pce);azo=r(qrt,"from_config()"),qrt.forEach(t),nzo=r(wz,`class
method.`),wz.forEach(t),szo=i(Bl),Wy=n(Bl,"P",{});var Xke=s(Wy);lzo=r(Xke,"This class cannot be instantiated directly using "),$ce=n(Xke,"CODE",{});var Grt=s($ce);izo=r(Grt,"__init__()"),Grt.forEach(t),dzo=r(Xke," (throws an error)."),Xke.forEach(t),czo=i(Bl),lt=n(Bl,"DIV",{class:!0});var xl=s(lt);m(Qy.$$.fragment,xl),fzo=i(xl),Ice=n(xl,"P",{});var Ort=s(Ice);mzo=r(Ort,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ort.forEach(t),gzo=i(xl),ec=n(xl,"P",{});var Az=s(ec);hzo=r(Az,`Note:
Loading a model from its configuration file does `),Dce=n(Az,"STRONG",{});var Xrt=s(Dce);pzo=r(Xrt,"not"),Xrt.forEach(t),_zo=r(Az,` load the model weights. It only affects the
model\u2019s configuration. Use `),jce=n(Az,"CODE",{});var Vrt=s(jce);uzo=r(Vrt,"from_pretrained()"),Vrt.forEach(t),bzo=r(Az,"to load the model weights."),Az.forEach(t),vzo=i(xl),Nce=n(xl,"P",{});var zrt=s(Nce);Tzo=r(zrt,"Examples:"),zrt.forEach(t),Fzo=i(xl),m(Hy.$$.fragment,xl),xl.forEach(t),Czo=i(Bl),eo=n(Bl,"DIV",{class:!0});var ra=s(eo);m(Uy.$$.fragment,ra),Mzo=i(ra),qce=n(ra,"P",{});var Wrt=s(qce);Ezo=r(Wrt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Wrt.forEach(t),yzo=i(ra),dn=n(ra,"P",{});var Y4=s(dn);wzo=r(Y4,"The model class to instantiate is selected based on the "),Gce=n(Y4,"CODE",{});var Qrt=s(Gce);Azo=r(Qrt,"model_type"),Qrt.forEach(t),Lzo=r(Y4,` property of the config object (either
passed as an argument or loaded from `),Oce=n(Y4,"CODE",{});var Hrt=s(Oce);Bzo=r(Hrt,"pretrained_model_name_or_path"),Hrt.forEach(t),xzo=r(Y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xce=n(Y4,"CODE",{});var Urt=s(Xce);kzo=r(Urt,"pretrained_model_name_or_path"),Urt.forEach(t),Rzo=r(Y4,":"),Y4.forEach(t),Szo=i(ra),Jy=n(ra,"UL",{});var Vke=s(Jy);N2=n(Vke,"LI",{});var bwe=s(N2);Vce=n(bwe,"STRONG",{});var Jrt=s(Vce);Pzo=r(Jrt,"beit"),Jrt.forEach(t),$zo=r(bwe," \u2014 "),bN=n(bwe,"A",{href:!0});var Yrt=s(bN);Izo=r(Yrt,"BeitForSemanticSegmentation"),Yrt.forEach(t),Dzo=r(bwe," (BEiT model)"),bwe.forEach(t),jzo=i(Vke),q2=n(Vke,"LI",{});var vwe=s(q2);zce=n(vwe,"STRONG",{});var Krt=s(zce);Nzo=r(Krt,"segformer"),Krt.forEach(t),qzo=r(vwe," \u2014 "),vN=n(vwe,"A",{href:!0});var Zrt=s(vN);Gzo=r(Zrt,"SegformerForSemanticSegmentation"),Zrt.forEach(t),Ozo=r(vwe," (SegFormer model)"),vwe.forEach(t),Vke.forEach(t),Xzo=i(ra),G2=n(ra,"P",{});var Twe=s(G2);Vzo=r(Twe,"The model is set in evaluation mode by default using "),Wce=n(Twe,"CODE",{});var ett=s(Wce);zzo=r(ett,"model.eval()"),ett.forEach(t),Wzo=r(Twe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=n(Twe,"CODE",{});var ott=s(Qce);Qzo=r(ott,"model.train()"),ott.forEach(t),Twe.forEach(t),Hzo=i(ra),Hce=n(ra,"P",{});var rtt=s(Hce);Uzo=r(rtt,"Examples:"),rtt.forEach(t),Jzo=i(ra),m(Yy.$$.fragment,ra),ra.forEach(t),Bl.forEach(t),IBe=i(c),oc=n(c,"H2",{class:!0});var zke=s(oc);O2=n(zke,"A",{id:!0,class:!0,href:!0});var ttt=s(O2);Uce=n(ttt,"SPAN",{});var att=s(Uce);m(Ky.$$.fragment,att),att.forEach(t),ttt.forEach(t),Yzo=i(zke),Jce=n(zke,"SPAN",{});var ntt=s(Jce);Kzo=r(ntt,"TFAutoModel"),ntt.forEach(t),zke.forEach(t),DBe=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(Zy.$$.fragment,kl),Zzo=i(kl),rc=n(kl,"P",{});var Lz=s(rc);eWo=r(Lz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Yce=n(Lz,"CODE",{});var stt=s(Yce);oWo=r(stt,"from_pretrained()"),stt.forEach(t),rWo=r(Lz,"class method or the "),Kce=n(Lz,"CODE",{});var ltt=s(Kce);tWo=r(ltt,"from_config()"),ltt.forEach(t),aWo=r(Lz,`class
method.`),Lz.forEach(t),nWo=i(kl),ew=n(kl,"P",{});var Wke=s(ew);sWo=r(Wke,"This class cannot be instantiated directly using "),Zce=n(Wke,"CODE",{});var itt=s(Zce);lWo=r(itt,"__init__()"),itt.forEach(t),iWo=r(Wke," (throws an error)."),Wke.forEach(t),dWo=i(kl),it=n(kl,"DIV",{class:!0});var Rl=s(it);m(ow.$$.fragment,Rl),cWo=i(Rl),efe=n(Rl,"P",{});var dtt=s(efe);fWo=r(dtt,"Instantiates one of the base model classes of the library from a configuration."),dtt.forEach(t),mWo=i(Rl),tc=n(Rl,"P",{});var Bz=s(tc);gWo=r(Bz,`Note:
Loading a model from its configuration file does `),ofe=n(Bz,"STRONG",{});var ctt=s(ofe);hWo=r(ctt,"not"),ctt.forEach(t),pWo=r(Bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),rfe=n(Bz,"CODE",{});var ftt=s(rfe);_Wo=r(ftt,"from_pretrained()"),ftt.forEach(t),uWo=r(Bz,"to load the model weights."),Bz.forEach(t),bWo=i(Rl),tfe=n(Rl,"P",{});var mtt=s(tfe);vWo=r(mtt,"Examples:"),mtt.forEach(t),TWo=i(Rl),m(rw.$$.fragment,Rl),Rl.forEach(t),FWo=i(kl),go=n(kl,"DIV",{class:!0});var ca=s(go);m(tw.$$.fragment,ca),CWo=i(ca),afe=n(ca,"P",{});var gtt=s(afe);MWo=r(gtt,"Instantiate one of the base model classes of the library from a pretrained model."),gtt.forEach(t),EWo=i(ca),cn=n(ca,"P",{});var K4=s(cn);yWo=r(K4,"The model class to instantiate is selected based on the "),nfe=n(K4,"CODE",{});var htt=s(nfe);wWo=r(htt,"model_type"),htt.forEach(t),AWo=r(K4,` property of the config object (either
passed as an argument or loaded from `),sfe=n(K4,"CODE",{});var ptt=s(sfe);LWo=r(ptt,"pretrained_model_name_or_path"),ptt.forEach(t),BWo=r(K4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lfe=n(K4,"CODE",{});var _tt=s(lfe);xWo=r(_tt,"pretrained_model_name_or_path"),_tt.forEach(t),kWo=r(K4,":"),K4.forEach(t),RWo=i(ca),B=n(ca,"UL",{});var x=s(B);X2=n(x,"LI",{});var Fwe=s(X2);ife=n(Fwe,"STRONG",{});var utt=s(ife);SWo=r(utt,"albert"),utt.forEach(t),PWo=r(Fwe," \u2014 "),TN=n(Fwe,"A",{href:!0});var btt=s(TN);$Wo=r(btt,"TFAlbertModel"),btt.forEach(t),IWo=r(Fwe," (ALBERT model)"),Fwe.forEach(t),DWo=i(x),V2=n(x,"LI",{});var Cwe=s(V2);dfe=n(Cwe,"STRONG",{});var vtt=s(dfe);jWo=r(vtt,"bart"),vtt.forEach(t),NWo=r(Cwe," \u2014 "),FN=n(Cwe,"A",{href:!0});var Ttt=s(FN);qWo=r(Ttt,"TFBartModel"),Ttt.forEach(t),GWo=r(Cwe," (BART model)"),Cwe.forEach(t),OWo=i(x),z2=n(x,"LI",{});var Mwe=s(z2);cfe=n(Mwe,"STRONG",{});var Ftt=s(cfe);XWo=r(Ftt,"bert"),Ftt.forEach(t),VWo=r(Mwe," \u2014 "),CN=n(Mwe,"A",{href:!0});var Ctt=s(CN);zWo=r(Ctt,"TFBertModel"),Ctt.forEach(t),WWo=r(Mwe," (BERT model)"),Mwe.forEach(t),QWo=i(x),W2=n(x,"LI",{});var Ewe=s(W2);ffe=n(Ewe,"STRONG",{});var Mtt=s(ffe);HWo=r(Mtt,"blenderbot"),Mtt.forEach(t),UWo=r(Ewe," \u2014 "),MN=n(Ewe,"A",{href:!0});var Ett=s(MN);JWo=r(Ett,"TFBlenderbotModel"),Ett.forEach(t),YWo=r(Ewe," (Blenderbot model)"),Ewe.forEach(t),KWo=i(x),Q2=n(x,"LI",{});var ywe=s(Q2);mfe=n(ywe,"STRONG",{});var ytt=s(mfe);ZWo=r(ytt,"blenderbot-small"),ytt.forEach(t),eQo=r(ywe," \u2014 "),EN=n(ywe,"A",{href:!0});var wtt=s(EN);oQo=r(wtt,"TFBlenderbotSmallModel"),wtt.forEach(t),rQo=r(ywe," (BlenderbotSmall model)"),ywe.forEach(t),tQo=i(x),H2=n(x,"LI",{});var wwe=s(H2);gfe=n(wwe,"STRONG",{});var Att=s(gfe);aQo=r(Att,"camembert"),Att.forEach(t),nQo=r(wwe," \u2014 "),yN=n(wwe,"A",{href:!0});var Ltt=s(yN);sQo=r(Ltt,"TFCamembertModel"),Ltt.forEach(t),lQo=r(wwe," (CamemBERT model)"),wwe.forEach(t),iQo=i(x),U2=n(x,"LI",{});var Awe=s(U2);hfe=n(Awe,"STRONG",{});var Btt=s(hfe);dQo=r(Btt,"clip"),Btt.forEach(t),cQo=r(Awe," \u2014 "),wN=n(Awe,"A",{href:!0});var xtt=s(wN);fQo=r(xtt,"TFCLIPModel"),xtt.forEach(t),mQo=r(Awe," (CLIP model)"),Awe.forEach(t),gQo=i(x),J2=n(x,"LI",{});var Lwe=s(J2);pfe=n(Lwe,"STRONG",{});var ktt=s(pfe);hQo=r(ktt,"convbert"),ktt.forEach(t),pQo=r(Lwe," \u2014 "),AN=n(Lwe,"A",{href:!0});var Rtt=s(AN);_Qo=r(Rtt,"TFConvBertModel"),Rtt.forEach(t),uQo=r(Lwe," (ConvBERT model)"),Lwe.forEach(t),bQo=i(x),Y2=n(x,"LI",{});var Bwe=s(Y2);_fe=n(Bwe,"STRONG",{});var Stt=s(_fe);vQo=r(Stt,"convnext"),Stt.forEach(t),TQo=r(Bwe," \u2014 "),LN=n(Bwe,"A",{href:!0});var Ptt=s(LN);FQo=r(Ptt,"TFConvNextModel"),Ptt.forEach(t),CQo=r(Bwe," (ConvNext model)"),Bwe.forEach(t),MQo=i(x),K2=n(x,"LI",{});var xwe=s(K2);ufe=n(xwe,"STRONG",{});var $tt=s(ufe);EQo=r($tt,"ctrl"),$tt.forEach(t),yQo=r(xwe," \u2014 "),BN=n(xwe,"A",{href:!0});var Itt=s(BN);wQo=r(Itt,"TFCTRLModel"),Itt.forEach(t),AQo=r(xwe," (CTRL model)"),xwe.forEach(t),LQo=i(x),Z2=n(x,"LI",{});var kwe=s(Z2);bfe=n(kwe,"STRONG",{});var Dtt=s(bfe);BQo=r(Dtt,"deberta"),Dtt.forEach(t),xQo=r(kwe," \u2014 "),xN=n(kwe,"A",{href:!0});var jtt=s(xN);kQo=r(jtt,"TFDebertaModel"),jtt.forEach(t),RQo=r(kwe," (DeBERTa model)"),kwe.forEach(t),SQo=i(x),ev=n(x,"LI",{});var Rwe=s(ev);vfe=n(Rwe,"STRONG",{});var Ntt=s(vfe);PQo=r(Ntt,"deberta-v2"),Ntt.forEach(t),$Qo=r(Rwe," \u2014 "),kN=n(Rwe,"A",{href:!0});var qtt=s(kN);IQo=r(qtt,"TFDebertaV2Model"),qtt.forEach(t),DQo=r(Rwe," (DeBERTa-v2 model)"),Rwe.forEach(t),jQo=i(x),ov=n(x,"LI",{});var Swe=s(ov);Tfe=n(Swe,"STRONG",{});var Gtt=s(Tfe);NQo=r(Gtt,"distilbert"),Gtt.forEach(t),qQo=r(Swe," \u2014 "),RN=n(Swe,"A",{href:!0});var Ott=s(RN);GQo=r(Ott,"TFDistilBertModel"),Ott.forEach(t),OQo=r(Swe," (DistilBERT model)"),Swe.forEach(t),XQo=i(x),rv=n(x,"LI",{});var Pwe=s(rv);Ffe=n(Pwe,"STRONG",{});var Xtt=s(Ffe);VQo=r(Xtt,"dpr"),Xtt.forEach(t),zQo=r(Pwe," \u2014 "),SN=n(Pwe,"A",{href:!0});var Vtt=s(SN);WQo=r(Vtt,"TFDPRQuestionEncoder"),Vtt.forEach(t),QQo=r(Pwe," (DPR model)"),Pwe.forEach(t),HQo=i(x),tv=n(x,"LI",{});var $we=s(tv);Cfe=n($we,"STRONG",{});var ztt=s(Cfe);UQo=r(ztt,"electra"),ztt.forEach(t),JQo=r($we," \u2014 "),PN=n($we,"A",{href:!0});var Wtt=s(PN);YQo=r(Wtt,"TFElectraModel"),Wtt.forEach(t),KQo=r($we," (ELECTRA model)"),$we.forEach(t),ZQo=i(x),av=n(x,"LI",{});var Iwe=s(av);Mfe=n(Iwe,"STRONG",{});var Qtt=s(Mfe);eHo=r(Qtt,"flaubert"),Qtt.forEach(t),oHo=r(Iwe," \u2014 "),$N=n(Iwe,"A",{href:!0});var Htt=s($N);rHo=r(Htt,"TFFlaubertModel"),Htt.forEach(t),tHo=r(Iwe," (FlauBERT model)"),Iwe.forEach(t),aHo=i(x),$s=n(x,"LI",{});var i8=s($s);Efe=n(i8,"STRONG",{});var Utt=s(Efe);nHo=r(Utt,"funnel"),Utt.forEach(t),sHo=r(i8," \u2014 "),IN=n(i8,"A",{href:!0});var Jtt=s(IN);lHo=r(Jtt,"TFFunnelModel"),Jtt.forEach(t),iHo=r(i8," or "),DN=n(i8,"A",{href:!0});var Ytt=s(DN);dHo=r(Ytt,"TFFunnelBaseModel"),Ytt.forEach(t),cHo=r(i8," (Funnel Transformer model)"),i8.forEach(t),fHo=i(x),nv=n(x,"LI",{});var Dwe=s(nv);yfe=n(Dwe,"STRONG",{});var Ktt=s(yfe);mHo=r(Ktt,"gpt2"),Ktt.forEach(t),gHo=r(Dwe," \u2014 "),jN=n(Dwe,"A",{href:!0});var Ztt=s(jN);hHo=r(Ztt,"TFGPT2Model"),Ztt.forEach(t),pHo=r(Dwe," (OpenAI GPT-2 model)"),Dwe.forEach(t),_Ho=i(x),sv=n(x,"LI",{});var jwe=s(sv);wfe=n(jwe,"STRONG",{});var eat=s(wfe);uHo=r(eat,"hubert"),eat.forEach(t),bHo=r(jwe," \u2014 "),NN=n(jwe,"A",{href:!0});var oat=s(NN);vHo=r(oat,"TFHubertModel"),oat.forEach(t),THo=r(jwe," (Hubert model)"),jwe.forEach(t),FHo=i(x),lv=n(x,"LI",{});var Nwe=s(lv);Afe=n(Nwe,"STRONG",{});var rat=s(Afe);CHo=r(rat,"layoutlm"),rat.forEach(t),MHo=r(Nwe," \u2014 "),qN=n(Nwe,"A",{href:!0});var tat=s(qN);EHo=r(tat,"TFLayoutLMModel"),tat.forEach(t),yHo=r(Nwe," (LayoutLM model)"),Nwe.forEach(t),wHo=i(x),iv=n(x,"LI",{});var qwe=s(iv);Lfe=n(qwe,"STRONG",{});var aat=s(Lfe);AHo=r(aat,"led"),aat.forEach(t),LHo=r(qwe," \u2014 "),GN=n(qwe,"A",{href:!0});var nat=s(GN);BHo=r(nat,"TFLEDModel"),nat.forEach(t),xHo=r(qwe," (LED model)"),qwe.forEach(t),kHo=i(x),dv=n(x,"LI",{});var Gwe=s(dv);Bfe=n(Gwe,"STRONG",{});var sat=s(Bfe);RHo=r(sat,"longformer"),sat.forEach(t),SHo=r(Gwe," \u2014 "),ON=n(Gwe,"A",{href:!0});var lat=s(ON);PHo=r(lat,"TFLongformerModel"),lat.forEach(t),$Ho=r(Gwe," (Longformer model)"),Gwe.forEach(t),IHo=i(x),cv=n(x,"LI",{});var Owe=s(cv);xfe=n(Owe,"STRONG",{});var iat=s(xfe);DHo=r(iat,"lxmert"),iat.forEach(t),jHo=r(Owe," \u2014 "),XN=n(Owe,"A",{href:!0});var dat=s(XN);NHo=r(dat,"TFLxmertModel"),dat.forEach(t),qHo=r(Owe," (LXMERT model)"),Owe.forEach(t),GHo=i(x),fv=n(x,"LI",{});var Xwe=s(fv);kfe=n(Xwe,"STRONG",{});var cat=s(kfe);OHo=r(cat,"marian"),cat.forEach(t),XHo=r(Xwe," \u2014 "),VN=n(Xwe,"A",{href:!0});var fat=s(VN);VHo=r(fat,"TFMarianModel"),fat.forEach(t),zHo=r(Xwe," (Marian model)"),Xwe.forEach(t),WHo=i(x),mv=n(x,"LI",{});var Vwe=s(mv);Rfe=n(Vwe,"STRONG",{});var mat=s(Rfe);QHo=r(mat,"mbart"),mat.forEach(t),HHo=r(Vwe," \u2014 "),zN=n(Vwe,"A",{href:!0});var gat=s(zN);UHo=r(gat,"TFMBartModel"),gat.forEach(t),JHo=r(Vwe," (mBART model)"),Vwe.forEach(t),YHo=i(x),gv=n(x,"LI",{});var zwe=s(gv);Sfe=n(zwe,"STRONG",{});var hat=s(Sfe);KHo=r(hat,"mobilebert"),hat.forEach(t),ZHo=r(zwe," \u2014 "),WN=n(zwe,"A",{href:!0});var pat=s(WN);eUo=r(pat,"TFMobileBertModel"),pat.forEach(t),oUo=r(zwe," (MobileBERT model)"),zwe.forEach(t),rUo=i(x),hv=n(x,"LI",{});var Wwe=s(hv);Pfe=n(Wwe,"STRONG",{});var _at=s(Pfe);tUo=r(_at,"mpnet"),_at.forEach(t),aUo=r(Wwe," \u2014 "),QN=n(Wwe,"A",{href:!0});var uat=s(QN);nUo=r(uat,"TFMPNetModel"),uat.forEach(t),sUo=r(Wwe," (MPNet model)"),Wwe.forEach(t),lUo=i(x),pv=n(x,"LI",{});var Qwe=s(pv);$fe=n(Qwe,"STRONG",{});var bat=s($fe);iUo=r(bat,"mt5"),bat.forEach(t),dUo=r(Qwe," \u2014 "),HN=n(Qwe,"A",{href:!0});var vat=s(HN);cUo=r(vat,"TFMT5Model"),vat.forEach(t),fUo=r(Qwe," (mT5 model)"),Qwe.forEach(t),mUo=i(x),_v=n(x,"LI",{});var Hwe=s(_v);Ife=n(Hwe,"STRONG",{});var Tat=s(Ife);gUo=r(Tat,"openai-gpt"),Tat.forEach(t),hUo=r(Hwe," \u2014 "),UN=n(Hwe,"A",{href:!0});var Fat=s(UN);pUo=r(Fat,"TFOpenAIGPTModel"),Fat.forEach(t),_Uo=r(Hwe," (OpenAI GPT model)"),Hwe.forEach(t),uUo=i(x),uv=n(x,"LI",{});var Uwe=s(uv);Dfe=n(Uwe,"STRONG",{});var Cat=s(Dfe);bUo=r(Cat,"pegasus"),Cat.forEach(t),vUo=r(Uwe," \u2014 "),JN=n(Uwe,"A",{href:!0});var Mat=s(JN);TUo=r(Mat,"TFPegasusModel"),Mat.forEach(t),FUo=r(Uwe," (Pegasus model)"),Uwe.forEach(t),CUo=i(x),bv=n(x,"LI",{});var Jwe=s(bv);jfe=n(Jwe,"STRONG",{});var Eat=s(jfe);MUo=r(Eat,"rembert"),Eat.forEach(t),EUo=r(Jwe," \u2014 "),YN=n(Jwe,"A",{href:!0});var yat=s(YN);yUo=r(yat,"TFRemBertModel"),yat.forEach(t),wUo=r(Jwe," (RemBERT model)"),Jwe.forEach(t),AUo=i(x),vv=n(x,"LI",{});var Ywe=s(vv);Nfe=n(Ywe,"STRONG",{});var wat=s(Nfe);LUo=r(wat,"roberta"),wat.forEach(t),BUo=r(Ywe," \u2014 "),KN=n(Ywe,"A",{href:!0});var Aat=s(KN);xUo=r(Aat,"TFRobertaModel"),Aat.forEach(t),kUo=r(Ywe," (RoBERTa model)"),Ywe.forEach(t),RUo=i(x),Tv=n(x,"LI",{});var Kwe=s(Tv);qfe=n(Kwe,"STRONG",{});var Lat=s(qfe);SUo=r(Lat,"roformer"),Lat.forEach(t),PUo=r(Kwe," \u2014 "),ZN=n(Kwe,"A",{href:!0});var Bat=s(ZN);$Uo=r(Bat,"TFRoFormerModel"),Bat.forEach(t),IUo=r(Kwe," (RoFormer model)"),Kwe.forEach(t),DUo=i(x),Fv=n(x,"LI",{});var Zwe=s(Fv);Gfe=n(Zwe,"STRONG",{});var xat=s(Gfe);jUo=r(xat,"speech_to_text"),xat.forEach(t),NUo=r(Zwe," \u2014 "),eq=n(Zwe,"A",{href:!0});var kat=s(eq);qUo=r(kat,"TFSpeech2TextModel"),kat.forEach(t),GUo=r(Zwe," (Speech2Text model)"),Zwe.forEach(t),OUo=i(x),Cv=n(x,"LI",{});var e6e=s(Cv);Ofe=n(e6e,"STRONG",{});var Rat=s(Ofe);XUo=r(Rat,"t5"),Rat.forEach(t),VUo=r(e6e," \u2014 "),oq=n(e6e,"A",{href:!0});var Sat=s(oq);zUo=r(Sat,"TFT5Model"),Sat.forEach(t),WUo=r(e6e," (T5 model)"),e6e.forEach(t),QUo=i(x),Mv=n(x,"LI",{});var o6e=s(Mv);Xfe=n(o6e,"STRONG",{});var Pat=s(Xfe);HUo=r(Pat,"tapas"),Pat.forEach(t),UUo=r(o6e," \u2014 "),rq=n(o6e,"A",{href:!0});var $at=s(rq);JUo=r($at,"TFTapasModel"),$at.forEach(t),YUo=r(o6e," (TAPAS model)"),o6e.forEach(t),KUo=i(x),Ev=n(x,"LI",{});var r6e=s(Ev);Vfe=n(r6e,"STRONG",{});var Iat=s(Vfe);ZUo=r(Iat,"transfo-xl"),Iat.forEach(t),eJo=r(r6e," \u2014 "),tq=n(r6e,"A",{href:!0});var Dat=s(tq);oJo=r(Dat,"TFTransfoXLModel"),Dat.forEach(t),rJo=r(r6e," (Transformer-XL model)"),r6e.forEach(t),tJo=i(x),yv=n(x,"LI",{});var t6e=s(yv);zfe=n(t6e,"STRONG",{});var jat=s(zfe);aJo=r(jat,"vit"),jat.forEach(t),nJo=r(t6e," \u2014 "),aq=n(t6e,"A",{href:!0});var Nat=s(aq);sJo=r(Nat,"TFViTModel"),Nat.forEach(t),lJo=r(t6e," (ViT model)"),t6e.forEach(t),iJo=i(x),wv=n(x,"LI",{});var a6e=s(wv);Wfe=n(a6e,"STRONG",{});var qat=s(Wfe);dJo=r(qat,"wav2vec2"),qat.forEach(t),cJo=r(a6e," \u2014 "),nq=n(a6e,"A",{href:!0});var Gat=s(nq);fJo=r(Gat,"TFWav2Vec2Model"),Gat.forEach(t),mJo=r(a6e," (Wav2Vec2 model)"),a6e.forEach(t),gJo=i(x),Av=n(x,"LI",{});var n6e=s(Av);Qfe=n(n6e,"STRONG",{});var Oat=s(Qfe);hJo=r(Oat,"xlm"),Oat.forEach(t),pJo=r(n6e," \u2014 "),sq=n(n6e,"A",{href:!0});var Xat=s(sq);_Jo=r(Xat,"TFXLMModel"),Xat.forEach(t),uJo=r(n6e," (XLM model)"),n6e.forEach(t),bJo=i(x),Lv=n(x,"LI",{});var s6e=s(Lv);Hfe=n(s6e,"STRONG",{});var Vat=s(Hfe);vJo=r(Vat,"xlm-roberta"),Vat.forEach(t),TJo=r(s6e," \u2014 "),lq=n(s6e,"A",{href:!0});var zat=s(lq);FJo=r(zat,"TFXLMRobertaModel"),zat.forEach(t),CJo=r(s6e," (XLM-RoBERTa model)"),s6e.forEach(t),MJo=i(x),Bv=n(x,"LI",{});var l6e=s(Bv);Ufe=n(l6e,"STRONG",{});var Wat=s(Ufe);EJo=r(Wat,"xlnet"),Wat.forEach(t),yJo=r(l6e," \u2014 "),iq=n(l6e,"A",{href:!0});var Qat=s(iq);wJo=r(Qat,"TFXLNetModel"),Qat.forEach(t),AJo=r(l6e," (XLNet model)"),l6e.forEach(t),x.forEach(t),LJo=i(ca),Jfe=n(ca,"P",{});var Hat=s(Jfe);BJo=r(Hat,"Examples:"),Hat.forEach(t),xJo=i(ca),m(aw.$$.fragment,ca),ca.forEach(t),kl.forEach(t),jBe=i(c),ac=n(c,"H2",{class:!0});var Qke=s(ac);xv=n(Qke,"A",{id:!0,class:!0,href:!0});var Uat=s(xv);Yfe=n(Uat,"SPAN",{});var Jat=s(Yfe);m(nw.$$.fragment,Jat),Jat.forEach(t),Uat.forEach(t),kJo=i(Qke),Kfe=n(Qke,"SPAN",{});var Yat=s(Kfe);RJo=r(Yat,"TFAutoModelForPreTraining"),Yat.forEach(t),Qke.forEach(t),NBe=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(sw.$$.fragment,Sl),SJo=i(Sl),nc=n(Sl,"P",{});var xz=s(nc);PJo=r(xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Zfe=n(xz,"CODE",{});var Kat=s(Zfe);$Jo=r(Kat,"from_pretrained()"),Kat.forEach(t),IJo=r(xz,"class method or the "),eme=n(xz,"CODE",{});var Zat=s(eme);DJo=r(Zat,"from_config()"),Zat.forEach(t),jJo=r(xz,`class
method.`),xz.forEach(t),NJo=i(Sl),lw=n(Sl,"P",{});var Hke=s(lw);qJo=r(Hke,"This class cannot be instantiated directly using "),ome=n(Hke,"CODE",{});var ent=s(ome);GJo=r(ent,"__init__()"),ent.forEach(t),OJo=r(Hke," (throws an error)."),Hke.forEach(t),XJo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Pl=s(dt);m(iw.$$.fragment,Pl),VJo=i(Pl),rme=n(Pl,"P",{});var ont=s(rme);zJo=r(ont,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ont.forEach(t),WJo=i(Pl),sc=n(Pl,"P",{});var kz=s(sc);QJo=r(kz,`Note:
Loading a model from its configuration file does `),tme=n(kz,"STRONG",{});var rnt=s(tme);HJo=r(rnt,"not"),rnt.forEach(t),UJo=r(kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ame=n(kz,"CODE",{});var tnt=s(ame);JJo=r(tnt,"from_pretrained()"),tnt.forEach(t),YJo=r(kz,"to load the model weights."),kz.forEach(t),KJo=i(Pl),nme=n(Pl,"P",{});var ant=s(nme);ZJo=r(ant,"Examples:"),ant.forEach(t),eYo=i(Pl),m(dw.$$.fragment,Pl),Pl.forEach(t),oYo=i(Sl),ho=n(Sl,"DIV",{class:!0});var fa=s(ho);m(cw.$$.fragment,fa),rYo=i(fa),sme=n(fa,"P",{});var nnt=s(sme);tYo=r(nnt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nnt.forEach(t),aYo=i(fa),fn=n(fa,"P",{});var Z4=s(fn);nYo=r(Z4,"The model class to instantiate is selected based on the "),lme=n(Z4,"CODE",{});var snt=s(lme);sYo=r(snt,"model_type"),snt.forEach(t),lYo=r(Z4,` property of the config object (either
passed as an argument or loaded from `),ime=n(Z4,"CODE",{});var lnt=s(ime);iYo=r(lnt,"pretrained_model_name_or_path"),lnt.forEach(t),dYo=r(Z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=n(Z4,"CODE",{});var int=s(dme);cYo=r(int,"pretrained_model_name_or_path"),int.forEach(t),fYo=r(Z4,":"),Z4.forEach(t),mYo=i(fa),H=n(fa,"UL",{});var U=s(H);kv=n(U,"LI",{});var i6e=s(kv);cme=n(i6e,"STRONG",{});var dnt=s(cme);gYo=r(dnt,"albert"),dnt.forEach(t),hYo=r(i6e," \u2014 "),dq=n(i6e,"A",{href:!0});var cnt=s(dq);pYo=r(cnt,"TFAlbertForPreTraining"),cnt.forEach(t),_Yo=r(i6e," (ALBERT model)"),i6e.forEach(t),uYo=i(U),Rv=n(U,"LI",{});var d6e=s(Rv);fme=n(d6e,"STRONG",{});var fnt=s(fme);bYo=r(fnt,"bart"),fnt.forEach(t),vYo=r(d6e," \u2014 "),cq=n(d6e,"A",{href:!0});var mnt=s(cq);TYo=r(mnt,"TFBartForConditionalGeneration"),mnt.forEach(t),FYo=r(d6e," (BART model)"),d6e.forEach(t),CYo=i(U),Sv=n(U,"LI",{});var c6e=s(Sv);mme=n(c6e,"STRONG",{});var gnt=s(mme);MYo=r(gnt,"bert"),gnt.forEach(t),EYo=r(c6e," \u2014 "),fq=n(c6e,"A",{href:!0});var hnt=s(fq);yYo=r(hnt,"TFBertForPreTraining"),hnt.forEach(t),wYo=r(c6e," (BERT model)"),c6e.forEach(t),AYo=i(U),Pv=n(U,"LI",{});var f6e=s(Pv);gme=n(f6e,"STRONG",{});var pnt=s(gme);LYo=r(pnt,"camembert"),pnt.forEach(t),BYo=r(f6e," \u2014 "),mq=n(f6e,"A",{href:!0});var _nt=s(mq);xYo=r(_nt,"TFCamembertForMaskedLM"),_nt.forEach(t),kYo=r(f6e," (CamemBERT model)"),f6e.forEach(t),RYo=i(U),$v=n(U,"LI",{});var m6e=s($v);hme=n(m6e,"STRONG",{});var unt=s(hme);SYo=r(unt,"ctrl"),unt.forEach(t),PYo=r(m6e," \u2014 "),gq=n(m6e,"A",{href:!0});var bnt=s(gq);$Yo=r(bnt,"TFCTRLLMHeadModel"),bnt.forEach(t),IYo=r(m6e," (CTRL model)"),m6e.forEach(t),DYo=i(U),Iv=n(U,"LI",{});var g6e=s(Iv);pme=n(g6e,"STRONG",{});var vnt=s(pme);jYo=r(vnt,"distilbert"),vnt.forEach(t),NYo=r(g6e," \u2014 "),hq=n(g6e,"A",{href:!0});var Tnt=s(hq);qYo=r(Tnt,"TFDistilBertForMaskedLM"),Tnt.forEach(t),GYo=r(g6e," (DistilBERT model)"),g6e.forEach(t),OYo=i(U),Dv=n(U,"LI",{});var h6e=s(Dv);_me=n(h6e,"STRONG",{});var Fnt=s(_me);XYo=r(Fnt,"electra"),Fnt.forEach(t),VYo=r(h6e," \u2014 "),pq=n(h6e,"A",{href:!0});var Cnt=s(pq);zYo=r(Cnt,"TFElectraForPreTraining"),Cnt.forEach(t),WYo=r(h6e," (ELECTRA model)"),h6e.forEach(t),QYo=i(U),jv=n(U,"LI",{});var p6e=s(jv);ume=n(p6e,"STRONG",{});var Mnt=s(ume);HYo=r(Mnt,"flaubert"),Mnt.forEach(t),UYo=r(p6e," \u2014 "),_q=n(p6e,"A",{href:!0});var Ent=s(_q);JYo=r(Ent,"TFFlaubertWithLMHeadModel"),Ent.forEach(t),YYo=r(p6e," (FlauBERT model)"),p6e.forEach(t),KYo=i(U),Nv=n(U,"LI",{});var _6e=s(Nv);bme=n(_6e,"STRONG",{});var ynt=s(bme);ZYo=r(ynt,"funnel"),ynt.forEach(t),eKo=r(_6e," \u2014 "),uq=n(_6e,"A",{href:!0});var wnt=s(uq);oKo=r(wnt,"TFFunnelForPreTraining"),wnt.forEach(t),rKo=r(_6e," (Funnel Transformer model)"),_6e.forEach(t),tKo=i(U),qv=n(U,"LI",{});var u6e=s(qv);vme=n(u6e,"STRONG",{});var Ant=s(vme);aKo=r(Ant,"gpt2"),Ant.forEach(t),nKo=r(u6e," \u2014 "),bq=n(u6e,"A",{href:!0});var Lnt=s(bq);sKo=r(Lnt,"TFGPT2LMHeadModel"),Lnt.forEach(t),lKo=r(u6e," (OpenAI GPT-2 model)"),u6e.forEach(t),iKo=i(U),Gv=n(U,"LI",{});var b6e=s(Gv);Tme=n(b6e,"STRONG",{});var Bnt=s(Tme);dKo=r(Bnt,"layoutlm"),Bnt.forEach(t),cKo=r(b6e," \u2014 "),vq=n(b6e,"A",{href:!0});var xnt=s(vq);fKo=r(xnt,"TFLayoutLMForMaskedLM"),xnt.forEach(t),mKo=r(b6e," (LayoutLM model)"),b6e.forEach(t),gKo=i(U),Ov=n(U,"LI",{});var v6e=s(Ov);Fme=n(v6e,"STRONG",{});var knt=s(Fme);hKo=r(knt,"lxmert"),knt.forEach(t),pKo=r(v6e," \u2014 "),Tq=n(v6e,"A",{href:!0});var Rnt=s(Tq);_Ko=r(Rnt,"TFLxmertForPreTraining"),Rnt.forEach(t),uKo=r(v6e," (LXMERT model)"),v6e.forEach(t),bKo=i(U),Xv=n(U,"LI",{});var T6e=s(Xv);Cme=n(T6e,"STRONG",{});var Snt=s(Cme);vKo=r(Snt,"mobilebert"),Snt.forEach(t),TKo=r(T6e," \u2014 "),Fq=n(T6e,"A",{href:!0});var Pnt=s(Fq);FKo=r(Pnt,"TFMobileBertForPreTraining"),Pnt.forEach(t),CKo=r(T6e," (MobileBERT model)"),T6e.forEach(t),MKo=i(U),Vv=n(U,"LI",{});var F6e=s(Vv);Mme=n(F6e,"STRONG",{});var $nt=s(Mme);EKo=r($nt,"mpnet"),$nt.forEach(t),yKo=r(F6e," \u2014 "),Cq=n(F6e,"A",{href:!0});var Int=s(Cq);wKo=r(Int,"TFMPNetForMaskedLM"),Int.forEach(t),AKo=r(F6e," (MPNet model)"),F6e.forEach(t),LKo=i(U),zv=n(U,"LI",{});var C6e=s(zv);Eme=n(C6e,"STRONG",{});var Dnt=s(Eme);BKo=r(Dnt,"openai-gpt"),Dnt.forEach(t),xKo=r(C6e," \u2014 "),Mq=n(C6e,"A",{href:!0});var jnt=s(Mq);kKo=r(jnt,"TFOpenAIGPTLMHeadModel"),jnt.forEach(t),RKo=r(C6e," (OpenAI GPT model)"),C6e.forEach(t),SKo=i(U),Wv=n(U,"LI",{});var M6e=s(Wv);yme=n(M6e,"STRONG",{});var Nnt=s(yme);PKo=r(Nnt,"roberta"),Nnt.forEach(t),$Ko=r(M6e," \u2014 "),Eq=n(M6e,"A",{href:!0});var qnt=s(Eq);IKo=r(qnt,"TFRobertaForMaskedLM"),qnt.forEach(t),DKo=r(M6e," (RoBERTa model)"),M6e.forEach(t),jKo=i(U),Qv=n(U,"LI",{});var E6e=s(Qv);wme=n(E6e,"STRONG",{});var Gnt=s(wme);NKo=r(Gnt,"t5"),Gnt.forEach(t),qKo=r(E6e," \u2014 "),yq=n(E6e,"A",{href:!0});var Ont=s(yq);GKo=r(Ont,"TFT5ForConditionalGeneration"),Ont.forEach(t),OKo=r(E6e," (T5 model)"),E6e.forEach(t),XKo=i(U),Hv=n(U,"LI",{});var y6e=s(Hv);Ame=n(y6e,"STRONG",{});var Xnt=s(Ame);VKo=r(Xnt,"tapas"),Xnt.forEach(t),zKo=r(y6e," \u2014 "),wq=n(y6e,"A",{href:!0});var Vnt=s(wq);WKo=r(Vnt,"TFTapasForMaskedLM"),Vnt.forEach(t),QKo=r(y6e," (TAPAS model)"),y6e.forEach(t),HKo=i(U),Uv=n(U,"LI",{});var w6e=s(Uv);Lme=n(w6e,"STRONG",{});var znt=s(Lme);UKo=r(znt,"transfo-xl"),znt.forEach(t),JKo=r(w6e," \u2014 "),Aq=n(w6e,"A",{href:!0});var Wnt=s(Aq);YKo=r(Wnt,"TFTransfoXLLMHeadModel"),Wnt.forEach(t),KKo=r(w6e," (Transformer-XL model)"),w6e.forEach(t),ZKo=i(U),Jv=n(U,"LI",{});var A6e=s(Jv);Bme=n(A6e,"STRONG",{});var Qnt=s(Bme);eZo=r(Qnt,"xlm"),Qnt.forEach(t),oZo=r(A6e," \u2014 "),Lq=n(A6e,"A",{href:!0});var Hnt=s(Lq);rZo=r(Hnt,"TFXLMWithLMHeadModel"),Hnt.forEach(t),tZo=r(A6e," (XLM model)"),A6e.forEach(t),aZo=i(U),Yv=n(U,"LI",{});var L6e=s(Yv);xme=n(L6e,"STRONG",{});var Unt=s(xme);nZo=r(Unt,"xlm-roberta"),Unt.forEach(t),sZo=r(L6e," \u2014 "),Bq=n(L6e,"A",{href:!0});var Jnt=s(Bq);lZo=r(Jnt,"TFXLMRobertaForMaskedLM"),Jnt.forEach(t),iZo=r(L6e," (XLM-RoBERTa model)"),L6e.forEach(t),dZo=i(U),Kv=n(U,"LI",{});var B6e=s(Kv);kme=n(B6e,"STRONG",{});var Ynt=s(kme);cZo=r(Ynt,"xlnet"),Ynt.forEach(t),fZo=r(B6e," \u2014 "),xq=n(B6e,"A",{href:!0});var Knt=s(xq);mZo=r(Knt,"TFXLNetLMHeadModel"),Knt.forEach(t),gZo=r(B6e," (XLNet model)"),B6e.forEach(t),U.forEach(t),hZo=i(fa),Rme=n(fa,"P",{});var Znt=s(Rme);pZo=r(Znt,"Examples:"),Znt.forEach(t),_Zo=i(fa),m(fw.$$.fragment,fa),fa.forEach(t),Sl.forEach(t),qBe=i(c),lc=n(c,"H2",{class:!0});var Uke=s(lc);Zv=n(Uke,"A",{id:!0,class:!0,href:!0});var est=s(Zv);Sme=n(est,"SPAN",{});var ost=s(Sme);m(mw.$$.fragment,ost),ost.forEach(t),est.forEach(t),uZo=i(Uke),Pme=n(Uke,"SPAN",{});var rst=s(Pme);bZo=r(rst,"TFAutoModelForCausalLM"),rst.forEach(t),Uke.forEach(t),GBe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(gw.$$.fragment,$l),vZo=i($l),ic=n($l,"P",{});var Rz=s(ic);TZo=r(Rz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$me=n(Rz,"CODE",{});var tst=s($me);FZo=r(tst,"from_pretrained()"),tst.forEach(t),CZo=r(Rz,"class method or the "),Ime=n(Rz,"CODE",{});var ast=s(Ime);MZo=r(ast,"from_config()"),ast.forEach(t),EZo=r(Rz,`class
method.`),Rz.forEach(t),yZo=i($l),hw=n($l,"P",{});var Jke=s(hw);wZo=r(Jke,"This class cannot be instantiated directly using "),Dme=n(Jke,"CODE",{});var nst=s(Dme);AZo=r(nst,"__init__()"),nst.forEach(t),LZo=r(Jke," (throws an error)."),Jke.forEach(t),BZo=i($l),ct=n($l,"DIV",{class:!0});var Il=s(ct);m(pw.$$.fragment,Il),xZo=i(Il),jme=n(Il,"P",{});var sst=s(jme);kZo=r(sst,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),sst.forEach(t),RZo=i(Il),dc=n(Il,"P",{});var Sz=s(dc);SZo=r(Sz,`Note:
Loading a model from its configuration file does `),Nme=n(Sz,"STRONG",{});var lst=s(Nme);PZo=r(lst,"not"),lst.forEach(t),$Zo=r(Sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),qme=n(Sz,"CODE",{});var ist=s(qme);IZo=r(ist,"from_pretrained()"),ist.forEach(t),DZo=r(Sz,"to load the model weights."),Sz.forEach(t),jZo=i(Il),Gme=n(Il,"P",{});var dst=s(Gme);NZo=r(dst,"Examples:"),dst.forEach(t),qZo=i(Il),m(_w.$$.fragment,Il),Il.forEach(t),GZo=i($l),po=n($l,"DIV",{class:!0});var ma=s(po);m(uw.$$.fragment,ma),OZo=i(ma),Ome=n(ma,"P",{});var cst=s(Ome);XZo=r(cst,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),cst.forEach(t),VZo=i(ma),mn=n(ma,"P",{});var eM=s(mn);zZo=r(eM,"The model class to instantiate is selected based on the "),Xme=n(eM,"CODE",{});var fst=s(Xme);WZo=r(fst,"model_type"),fst.forEach(t),QZo=r(eM,` property of the config object (either
passed as an argument or loaded from `),Vme=n(eM,"CODE",{});var mst=s(Vme);HZo=r(mst,"pretrained_model_name_or_path"),mst.forEach(t),UZo=r(eM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=n(eM,"CODE",{});var gst=s(zme);JZo=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),YZo=r(eM,":"),eM.forEach(t),KZo=i(ma),pe=n(ma,"UL",{});var Ee=s(pe);e0=n(Ee,"LI",{});var x6e=s(e0);Wme=n(x6e,"STRONG",{});var hst=s(Wme);ZZo=r(hst,"bert"),hst.forEach(t),eer=r(x6e," \u2014 "),kq=n(x6e,"A",{href:!0});var pst=s(kq);oer=r(pst,"TFBertLMHeadModel"),pst.forEach(t),rer=r(x6e," (BERT model)"),x6e.forEach(t),ter=i(Ee),o0=n(Ee,"LI",{});var k6e=s(o0);Qme=n(k6e,"STRONG",{});var _st=s(Qme);aer=r(_st,"ctrl"),_st.forEach(t),ner=r(k6e," \u2014 "),Rq=n(k6e,"A",{href:!0});var ust=s(Rq);ser=r(ust,"TFCTRLLMHeadModel"),ust.forEach(t),ler=r(k6e," (CTRL model)"),k6e.forEach(t),ier=i(Ee),r0=n(Ee,"LI",{});var R6e=s(r0);Hme=n(R6e,"STRONG",{});var bst=s(Hme);der=r(bst,"gpt2"),bst.forEach(t),cer=r(R6e," \u2014 "),Sq=n(R6e,"A",{href:!0});var vst=s(Sq);fer=r(vst,"TFGPT2LMHeadModel"),vst.forEach(t),mer=r(R6e," (OpenAI GPT-2 model)"),R6e.forEach(t),ger=i(Ee),t0=n(Ee,"LI",{});var S6e=s(t0);Ume=n(S6e,"STRONG",{});var Tst=s(Ume);her=r(Tst,"openai-gpt"),Tst.forEach(t),per=r(S6e," \u2014 "),Pq=n(S6e,"A",{href:!0});var Fst=s(Pq);_er=r(Fst,"TFOpenAIGPTLMHeadModel"),Fst.forEach(t),uer=r(S6e," (OpenAI GPT model)"),S6e.forEach(t),ber=i(Ee),a0=n(Ee,"LI",{});var P6e=s(a0);Jme=n(P6e,"STRONG",{});var Cst=s(Jme);ver=r(Cst,"rembert"),Cst.forEach(t),Ter=r(P6e," \u2014 "),$q=n(P6e,"A",{href:!0});var Mst=s($q);Fer=r(Mst,"TFRemBertForCausalLM"),Mst.forEach(t),Cer=r(P6e," (RemBERT model)"),P6e.forEach(t),Mer=i(Ee),n0=n(Ee,"LI",{});var $6e=s(n0);Yme=n($6e,"STRONG",{});var Est=s(Yme);Eer=r(Est,"roberta"),Est.forEach(t),yer=r($6e," \u2014 "),Iq=n($6e,"A",{href:!0});var yst=s(Iq);wer=r(yst,"TFRobertaForCausalLM"),yst.forEach(t),Aer=r($6e," (RoBERTa model)"),$6e.forEach(t),Ler=i(Ee),s0=n(Ee,"LI",{});var I6e=s(s0);Kme=n(I6e,"STRONG",{});var wst=s(Kme);Ber=r(wst,"roformer"),wst.forEach(t),xer=r(I6e," \u2014 "),Dq=n(I6e,"A",{href:!0});var Ast=s(Dq);ker=r(Ast,"TFRoFormerForCausalLM"),Ast.forEach(t),Rer=r(I6e," (RoFormer model)"),I6e.forEach(t),Ser=i(Ee),l0=n(Ee,"LI",{});var D6e=s(l0);Zme=n(D6e,"STRONG",{});var Lst=s(Zme);Per=r(Lst,"transfo-xl"),Lst.forEach(t),$er=r(D6e," \u2014 "),jq=n(D6e,"A",{href:!0});var Bst=s(jq);Ier=r(Bst,"TFTransfoXLLMHeadModel"),Bst.forEach(t),Der=r(D6e," (Transformer-XL model)"),D6e.forEach(t),jer=i(Ee),i0=n(Ee,"LI",{});var j6e=s(i0);ege=n(j6e,"STRONG",{});var xst=s(ege);Ner=r(xst,"xlm"),xst.forEach(t),qer=r(j6e," \u2014 "),Nq=n(j6e,"A",{href:!0});var kst=s(Nq);Ger=r(kst,"TFXLMWithLMHeadModel"),kst.forEach(t),Oer=r(j6e," (XLM model)"),j6e.forEach(t),Xer=i(Ee),d0=n(Ee,"LI",{});var N6e=s(d0);oge=n(N6e,"STRONG",{});var Rst=s(oge);Ver=r(Rst,"xlnet"),Rst.forEach(t),zer=r(N6e," \u2014 "),qq=n(N6e,"A",{href:!0});var Sst=s(qq);Wer=r(Sst,"TFXLNetLMHeadModel"),Sst.forEach(t),Qer=r(N6e," (XLNet model)"),N6e.forEach(t),Ee.forEach(t),Her=i(ma),rge=n(ma,"P",{});var Pst=s(rge);Uer=r(Pst,"Examples:"),Pst.forEach(t),Jer=i(ma),m(bw.$$.fragment,ma),ma.forEach(t),$l.forEach(t),OBe=i(c),cc=n(c,"H2",{class:!0});var Yke=s(cc);c0=n(Yke,"A",{id:!0,class:!0,href:!0});var $st=s(c0);tge=n($st,"SPAN",{});var Ist=s(tge);m(vw.$$.fragment,Ist),Ist.forEach(t),$st.forEach(t),Yer=i(Yke),age=n(Yke,"SPAN",{});var Dst=s(age);Ker=r(Dst,"TFAutoModelForImageClassification"),Dst.forEach(t),Yke.forEach(t),XBe=i(c),br=n(c,"DIV",{class:!0});var Dl=s(br);m(Tw.$$.fragment,Dl),Zer=i(Dl),fc=n(Dl,"P",{});var Pz=s(fc);eor=r(Pz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nge=n(Pz,"CODE",{});var jst=s(nge);oor=r(jst,"from_pretrained()"),jst.forEach(t),ror=r(Pz,"class method or the "),sge=n(Pz,"CODE",{});var Nst=s(sge);tor=r(Nst,"from_config()"),Nst.forEach(t),aor=r(Pz,`class
method.`),Pz.forEach(t),nor=i(Dl),Fw=n(Dl,"P",{});var Kke=s(Fw);sor=r(Kke,"This class cannot be instantiated directly using "),lge=n(Kke,"CODE",{});var qst=s(lge);lor=r(qst,"__init__()"),qst.forEach(t),ior=r(Kke," (throws an error)."),Kke.forEach(t),dor=i(Dl),ft=n(Dl,"DIV",{class:!0});var jl=s(ft);m(Cw.$$.fragment,jl),cor=i(jl),ige=n(jl,"P",{});var Gst=s(ige);mor=r(Gst,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Gst.forEach(t),gor=i(jl),mc=n(jl,"P",{});var $z=s(mc);hor=r($z,`Note:
Loading a model from its configuration file does `),dge=n($z,"STRONG",{});var Ost=s(dge);por=r(Ost,"not"),Ost.forEach(t),_or=r($z,` load the model weights. It only affects the
model\u2019s configuration. Use `),cge=n($z,"CODE",{});var Xst=s(cge);uor=r(Xst,"from_pretrained()"),Xst.forEach(t),bor=r($z,"to load the model weights."),$z.forEach(t),vor=i(jl),fge=n(jl,"P",{});var Vst=s(fge);Tor=r(Vst,"Examples:"),Vst.forEach(t),For=i(jl),m(Mw.$$.fragment,jl),jl.forEach(t),Cor=i(Dl),_o=n(Dl,"DIV",{class:!0});var ga=s(_o);m(Ew.$$.fragment,ga),Mor=i(ga),mge=n(ga,"P",{});var zst=s(mge);Eor=r(zst,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zst.forEach(t),yor=i(ga),gn=n(ga,"P",{});var oM=s(gn);wor=r(oM,"The model class to instantiate is selected based on the "),gge=n(oM,"CODE",{});var Wst=s(gge);Aor=r(Wst,"model_type"),Wst.forEach(t),Lor=r(oM,` property of the config object (either
passed as an argument or loaded from `),hge=n(oM,"CODE",{});var Qst=s(hge);Bor=r(Qst,"pretrained_model_name_or_path"),Qst.forEach(t),xor=r(oM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pge=n(oM,"CODE",{});var Hst=s(pge);kor=r(Hst,"pretrained_model_name_or_path"),Hst.forEach(t),Ror=r(oM,":"),oM.forEach(t),Sor=i(ga),yw=n(ga,"UL",{});var Zke=s(yw);f0=n(Zke,"LI",{});var q6e=s(f0);_ge=n(q6e,"STRONG",{});var Ust=s(_ge);Por=r(Ust,"convnext"),Ust.forEach(t),$or=r(q6e," \u2014 "),Gq=n(q6e,"A",{href:!0});var Jst=s(Gq);Ior=r(Jst,"TFConvNextForImageClassification"),Jst.forEach(t),Dor=r(q6e," (ConvNext model)"),q6e.forEach(t),jor=i(Zke),m0=n(Zke,"LI",{});var G6e=s(m0);uge=n(G6e,"STRONG",{});var Yst=s(uge);Nor=r(Yst,"vit"),Yst.forEach(t),qor=r(G6e," \u2014 "),Oq=n(G6e,"A",{href:!0});var Kst=s(Oq);Gor=r(Kst,"TFViTForImageClassification"),Kst.forEach(t),Oor=r(G6e," (ViT model)"),G6e.forEach(t),Zke.forEach(t),Xor=i(ga),bge=n(ga,"P",{});var Zst=s(bge);Vor=r(Zst,"Examples:"),Zst.forEach(t),zor=i(ga),m(ww.$$.fragment,ga),ga.forEach(t),Dl.forEach(t),VBe=i(c),gc=n(c,"H2",{class:!0});var eRe=s(gc);g0=n(eRe,"A",{id:!0,class:!0,href:!0});var elt=s(g0);vge=n(elt,"SPAN",{});var olt=s(vge);m(Aw.$$.fragment,olt),olt.forEach(t),elt.forEach(t),Wor=i(eRe),Tge=n(eRe,"SPAN",{});var rlt=s(Tge);Qor=r(rlt,"TFAutoModelForMaskedLM"),rlt.forEach(t),eRe.forEach(t),zBe=i(c),vr=n(c,"DIV",{class:!0});var Nl=s(vr);m(Lw.$$.fragment,Nl),Hor=i(Nl),hc=n(Nl,"P",{});var Iz=s(hc);Uor=r(Iz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Fge=n(Iz,"CODE",{});var tlt=s(Fge);Jor=r(tlt,"from_pretrained()"),tlt.forEach(t),Yor=r(Iz,"class method or the "),Cge=n(Iz,"CODE",{});var alt=s(Cge);Kor=r(alt,"from_config()"),alt.forEach(t),Zor=r(Iz,`class
method.`),Iz.forEach(t),err=i(Nl),Bw=n(Nl,"P",{});var oRe=s(Bw);orr=r(oRe,"This class cannot be instantiated directly using "),Mge=n(oRe,"CODE",{});var nlt=s(Mge);rrr=r(nlt,"__init__()"),nlt.forEach(t),trr=r(oRe," (throws an error)."),oRe.forEach(t),arr=i(Nl),mt=n(Nl,"DIV",{class:!0});var ql=s(mt);m(xw.$$.fragment,ql),nrr=i(ql),Ege=n(ql,"P",{});var slt=s(Ege);srr=r(slt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),slt.forEach(t),lrr=i(ql),pc=n(ql,"P",{});var Dz=s(pc);irr=r(Dz,`Note:
Loading a model from its configuration file does `),yge=n(Dz,"STRONG",{});var llt=s(yge);drr=r(llt,"not"),llt.forEach(t),crr=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),wge=n(Dz,"CODE",{});var ilt=s(wge);frr=r(ilt,"from_pretrained()"),ilt.forEach(t),mrr=r(Dz,"to load the model weights."),Dz.forEach(t),grr=i(ql),Age=n(ql,"P",{});var dlt=s(Age);hrr=r(dlt,"Examples:"),dlt.forEach(t),prr=i(ql),m(kw.$$.fragment,ql),ql.forEach(t),_rr=i(Nl),uo=n(Nl,"DIV",{class:!0});var ha=s(uo);m(Rw.$$.fragment,ha),urr=i(ha),Lge=n(ha,"P",{});var clt=s(Lge);brr=r(clt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),clt.forEach(t),vrr=i(ha),hn=n(ha,"P",{});var rM=s(hn);Trr=r(rM,"The model class to instantiate is selected based on the "),Bge=n(rM,"CODE",{});var flt=s(Bge);Frr=r(flt,"model_type"),flt.forEach(t),Crr=r(rM,` property of the config object (either
passed as an argument or loaded from `),xge=n(rM,"CODE",{});var mlt=s(xge);Mrr=r(mlt,"pretrained_model_name_or_path"),mlt.forEach(t),Err=r(rM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=n(rM,"CODE",{});var glt=s(kge);yrr=r(glt,"pretrained_model_name_or_path"),glt.forEach(t),wrr=r(rM,":"),rM.forEach(t),Arr=i(ha),Y=n(ha,"UL",{});var ee=s(Y);h0=n(ee,"LI",{});var O6e=s(h0);Rge=n(O6e,"STRONG",{});var hlt=s(Rge);Lrr=r(hlt,"albert"),hlt.forEach(t),Brr=r(O6e," \u2014 "),Xq=n(O6e,"A",{href:!0});var plt=s(Xq);xrr=r(plt,"TFAlbertForMaskedLM"),plt.forEach(t),krr=r(O6e," (ALBERT model)"),O6e.forEach(t),Rrr=i(ee),p0=n(ee,"LI",{});var X6e=s(p0);Sge=n(X6e,"STRONG",{});var _lt=s(Sge);Srr=r(_lt,"bert"),_lt.forEach(t),Prr=r(X6e," \u2014 "),Vq=n(X6e,"A",{href:!0});var ult=s(Vq);$rr=r(ult,"TFBertForMaskedLM"),ult.forEach(t),Irr=r(X6e," (BERT model)"),X6e.forEach(t),Drr=i(ee),_0=n(ee,"LI",{});var V6e=s(_0);Pge=n(V6e,"STRONG",{});var blt=s(Pge);jrr=r(blt,"camembert"),blt.forEach(t),Nrr=r(V6e," \u2014 "),zq=n(V6e,"A",{href:!0});var vlt=s(zq);qrr=r(vlt,"TFCamembertForMaskedLM"),vlt.forEach(t),Grr=r(V6e," (CamemBERT model)"),V6e.forEach(t),Orr=i(ee),u0=n(ee,"LI",{});var z6e=s(u0);$ge=n(z6e,"STRONG",{});var Tlt=s($ge);Xrr=r(Tlt,"convbert"),Tlt.forEach(t),Vrr=r(z6e," \u2014 "),Wq=n(z6e,"A",{href:!0});var Flt=s(Wq);zrr=r(Flt,"TFConvBertForMaskedLM"),Flt.forEach(t),Wrr=r(z6e," (ConvBERT model)"),z6e.forEach(t),Qrr=i(ee),b0=n(ee,"LI",{});var W6e=s(b0);Ige=n(W6e,"STRONG",{});var Clt=s(Ige);Hrr=r(Clt,"deberta"),Clt.forEach(t),Urr=r(W6e," \u2014 "),Qq=n(W6e,"A",{href:!0});var Mlt=s(Qq);Jrr=r(Mlt,"TFDebertaForMaskedLM"),Mlt.forEach(t),Yrr=r(W6e," (DeBERTa model)"),W6e.forEach(t),Krr=i(ee),v0=n(ee,"LI",{});var Q6e=s(v0);Dge=n(Q6e,"STRONG",{});var Elt=s(Dge);Zrr=r(Elt,"deberta-v2"),Elt.forEach(t),etr=r(Q6e," \u2014 "),Hq=n(Q6e,"A",{href:!0});var ylt=s(Hq);otr=r(ylt,"TFDebertaV2ForMaskedLM"),ylt.forEach(t),rtr=r(Q6e," (DeBERTa-v2 model)"),Q6e.forEach(t),ttr=i(ee),T0=n(ee,"LI",{});var H6e=s(T0);jge=n(H6e,"STRONG",{});var wlt=s(jge);atr=r(wlt,"distilbert"),wlt.forEach(t),ntr=r(H6e," \u2014 "),Uq=n(H6e,"A",{href:!0});var Alt=s(Uq);str=r(Alt,"TFDistilBertForMaskedLM"),Alt.forEach(t),ltr=r(H6e," (DistilBERT model)"),H6e.forEach(t),itr=i(ee),F0=n(ee,"LI",{});var U6e=s(F0);Nge=n(U6e,"STRONG",{});var Llt=s(Nge);dtr=r(Llt,"electra"),Llt.forEach(t),ctr=r(U6e," \u2014 "),Jq=n(U6e,"A",{href:!0});var Blt=s(Jq);ftr=r(Blt,"TFElectraForMaskedLM"),Blt.forEach(t),mtr=r(U6e," (ELECTRA model)"),U6e.forEach(t),gtr=i(ee),C0=n(ee,"LI",{});var J6e=s(C0);qge=n(J6e,"STRONG",{});var xlt=s(qge);htr=r(xlt,"flaubert"),xlt.forEach(t),ptr=r(J6e," \u2014 "),Yq=n(J6e,"A",{href:!0});var klt=s(Yq);_tr=r(klt,"TFFlaubertWithLMHeadModel"),klt.forEach(t),utr=r(J6e," (FlauBERT model)"),J6e.forEach(t),btr=i(ee),M0=n(ee,"LI",{});var Y6e=s(M0);Gge=n(Y6e,"STRONG",{});var Rlt=s(Gge);vtr=r(Rlt,"funnel"),Rlt.forEach(t),Ttr=r(Y6e," \u2014 "),Kq=n(Y6e,"A",{href:!0});var Slt=s(Kq);Ftr=r(Slt,"TFFunnelForMaskedLM"),Slt.forEach(t),Ctr=r(Y6e," (Funnel Transformer model)"),Y6e.forEach(t),Mtr=i(ee),E0=n(ee,"LI",{});var K6e=s(E0);Oge=n(K6e,"STRONG",{});var Plt=s(Oge);Etr=r(Plt,"layoutlm"),Plt.forEach(t),ytr=r(K6e," \u2014 "),Zq=n(K6e,"A",{href:!0});var $lt=s(Zq);wtr=r($lt,"TFLayoutLMForMaskedLM"),$lt.forEach(t),Atr=r(K6e," (LayoutLM model)"),K6e.forEach(t),Ltr=i(ee),y0=n(ee,"LI",{});var Z6e=s(y0);Xge=n(Z6e,"STRONG",{});var Ilt=s(Xge);Btr=r(Ilt,"longformer"),Ilt.forEach(t),xtr=r(Z6e," \u2014 "),eG=n(Z6e,"A",{href:!0});var Dlt=s(eG);ktr=r(Dlt,"TFLongformerForMaskedLM"),Dlt.forEach(t),Rtr=r(Z6e," (Longformer model)"),Z6e.forEach(t),Str=i(ee),w0=n(ee,"LI",{});var eAe=s(w0);Vge=n(eAe,"STRONG",{});var jlt=s(Vge);Ptr=r(jlt,"mobilebert"),jlt.forEach(t),$tr=r(eAe," \u2014 "),oG=n(eAe,"A",{href:!0});var Nlt=s(oG);Itr=r(Nlt,"TFMobileBertForMaskedLM"),Nlt.forEach(t),Dtr=r(eAe," (MobileBERT model)"),eAe.forEach(t),jtr=i(ee),A0=n(ee,"LI",{});var oAe=s(A0);zge=n(oAe,"STRONG",{});var qlt=s(zge);Ntr=r(qlt,"mpnet"),qlt.forEach(t),qtr=r(oAe," \u2014 "),rG=n(oAe,"A",{href:!0});var Glt=s(rG);Gtr=r(Glt,"TFMPNetForMaskedLM"),Glt.forEach(t),Otr=r(oAe," (MPNet model)"),oAe.forEach(t),Xtr=i(ee),L0=n(ee,"LI",{});var rAe=s(L0);Wge=n(rAe,"STRONG",{});var Olt=s(Wge);Vtr=r(Olt,"rembert"),Olt.forEach(t),ztr=r(rAe," \u2014 "),tG=n(rAe,"A",{href:!0});var Xlt=s(tG);Wtr=r(Xlt,"TFRemBertForMaskedLM"),Xlt.forEach(t),Qtr=r(rAe," (RemBERT model)"),rAe.forEach(t),Htr=i(ee),B0=n(ee,"LI",{});var tAe=s(B0);Qge=n(tAe,"STRONG",{});var Vlt=s(Qge);Utr=r(Vlt,"roberta"),Vlt.forEach(t),Jtr=r(tAe," \u2014 "),aG=n(tAe,"A",{href:!0});var zlt=s(aG);Ytr=r(zlt,"TFRobertaForMaskedLM"),zlt.forEach(t),Ktr=r(tAe," (RoBERTa model)"),tAe.forEach(t),Ztr=i(ee),x0=n(ee,"LI",{});var aAe=s(x0);Hge=n(aAe,"STRONG",{});var Wlt=s(Hge);ear=r(Wlt,"roformer"),Wlt.forEach(t),oar=r(aAe," \u2014 "),nG=n(aAe,"A",{href:!0});var Qlt=s(nG);rar=r(Qlt,"TFRoFormerForMaskedLM"),Qlt.forEach(t),tar=r(aAe," (RoFormer model)"),aAe.forEach(t),aar=i(ee),k0=n(ee,"LI",{});var nAe=s(k0);Uge=n(nAe,"STRONG",{});var Hlt=s(Uge);nar=r(Hlt,"tapas"),Hlt.forEach(t),sar=r(nAe," \u2014 "),sG=n(nAe,"A",{href:!0});var Ult=s(sG);lar=r(Ult,"TFTapasForMaskedLM"),Ult.forEach(t),iar=r(nAe," (TAPAS model)"),nAe.forEach(t),dar=i(ee),R0=n(ee,"LI",{});var sAe=s(R0);Jge=n(sAe,"STRONG",{});var Jlt=s(Jge);car=r(Jlt,"xlm"),Jlt.forEach(t),far=r(sAe," \u2014 "),lG=n(sAe,"A",{href:!0});var Ylt=s(lG);mar=r(Ylt,"TFXLMWithLMHeadModel"),Ylt.forEach(t),gar=r(sAe," (XLM model)"),sAe.forEach(t),har=i(ee),S0=n(ee,"LI",{});var lAe=s(S0);Yge=n(lAe,"STRONG",{});var Klt=s(Yge);par=r(Klt,"xlm-roberta"),Klt.forEach(t),_ar=r(lAe," \u2014 "),iG=n(lAe,"A",{href:!0});var Zlt=s(iG);uar=r(Zlt,"TFXLMRobertaForMaskedLM"),Zlt.forEach(t),bar=r(lAe," (XLM-RoBERTa model)"),lAe.forEach(t),ee.forEach(t),Tar=i(ha),Kge=n(ha,"P",{});var eit=s(Kge);Far=r(eit,"Examples:"),eit.forEach(t),Car=i(ha),m(Sw.$$.fragment,ha),ha.forEach(t),Nl.forEach(t),WBe=i(c),_c=n(c,"H2",{class:!0});var rRe=s(_c);P0=n(rRe,"A",{id:!0,class:!0,href:!0});var oit=s(P0);Zge=n(oit,"SPAN",{});var rit=s(Zge);m(Pw.$$.fragment,rit),rit.forEach(t),oit.forEach(t),Mar=i(rRe),ehe=n(rRe,"SPAN",{});var tit=s(ehe);Ear=r(tit,"TFAutoModelForSeq2SeqLM"),tit.forEach(t),rRe.forEach(t),QBe=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);m($w.$$.fragment,Gl),yar=i(Gl),uc=n(Gl,"P",{});var jz=s(uc);war=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ohe=n(jz,"CODE",{});var ait=s(ohe);Aar=r(ait,"from_pretrained()"),ait.forEach(t),Lar=r(jz,"class method or the "),rhe=n(jz,"CODE",{});var nit=s(rhe);Bar=r(nit,"from_config()"),nit.forEach(t),xar=r(jz,`class
method.`),jz.forEach(t),kar=i(Gl),Iw=n(Gl,"P",{});var tRe=s(Iw);Rar=r(tRe,"This class cannot be instantiated directly using "),the=n(tRe,"CODE",{});var sit=s(the);Sar=r(sit,"__init__()"),sit.forEach(t),Par=r(tRe," (throws an error)."),tRe.forEach(t),$ar=i(Gl),gt=n(Gl,"DIV",{class:!0});var Ol=s(gt);m(Dw.$$.fragment,Ol),Iar=i(Ol),ahe=n(Ol,"P",{});var lit=s(ahe);Dar=r(lit,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lit.forEach(t),jar=i(Ol),bc=n(Ol,"P",{});var Nz=s(bc);Nar=r(Nz,`Note:
Loading a model from its configuration file does `),nhe=n(Nz,"STRONG",{});var iit=s(nhe);qar=r(iit,"not"),iit.forEach(t),Gar=r(Nz,` load the model weights. It only affects the
model\u2019s configuration. Use `),she=n(Nz,"CODE",{});var dit=s(she);Oar=r(dit,"from_pretrained()"),dit.forEach(t),Xar=r(Nz,"to load the model weights."),Nz.forEach(t),Var=i(Ol),lhe=n(Ol,"P",{});var cit=s(lhe);zar=r(cit,"Examples:"),cit.forEach(t),War=i(Ol),m(jw.$$.fragment,Ol),Ol.forEach(t),Qar=i(Gl),bo=n(Gl,"DIV",{class:!0});var pa=s(bo);m(Nw.$$.fragment,pa),Har=i(pa),ihe=n(pa,"P",{});var fit=s(ihe);Uar=r(fit,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fit.forEach(t),Jar=i(pa),pn=n(pa,"P",{});var tM=s(pn);Yar=r(tM,"The model class to instantiate is selected based on the "),dhe=n(tM,"CODE",{});var mit=s(dhe);Kar=r(mit,"model_type"),mit.forEach(t),Zar=r(tM,` property of the config object (either
passed as an argument or loaded from `),che=n(tM,"CODE",{});var git=s(che);enr=r(git,"pretrained_model_name_or_path"),git.forEach(t),onr=r(tM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fhe=n(tM,"CODE",{});var hit=s(fhe);rnr=r(hit,"pretrained_model_name_or_path"),hit.forEach(t),tnr=r(tM,":"),tM.forEach(t),anr=i(pa),_e=n(pa,"UL",{});var ye=s(_e);$0=n(ye,"LI",{});var iAe=s($0);mhe=n(iAe,"STRONG",{});var pit=s(mhe);nnr=r(pit,"bart"),pit.forEach(t),snr=r(iAe," \u2014 "),dG=n(iAe,"A",{href:!0});var _it=s(dG);lnr=r(_it,"TFBartForConditionalGeneration"),_it.forEach(t),inr=r(iAe," (BART model)"),iAe.forEach(t),dnr=i(ye),I0=n(ye,"LI",{});var dAe=s(I0);ghe=n(dAe,"STRONG",{});var uit=s(ghe);cnr=r(uit,"blenderbot"),uit.forEach(t),fnr=r(dAe," \u2014 "),cG=n(dAe,"A",{href:!0});var bit=s(cG);mnr=r(bit,"TFBlenderbotForConditionalGeneration"),bit.forEach(t),gnr=r(dAe," (Blenderbot model)"),dAe.forEach(t),hnr=i(ye),D0=n(ye,"LI",{});var cAe=s(D0);hhe=n(cAe,"STRONG",{});var vit=s(hhe);pnr=r(vit,"blenderbot-small"),vit.forEach(t),_nr=r(cAe," \u2014 "),fG=n(cAe,"A",{href:!0});var Tit=s(fG);unr=r(Tit,"TFBlenderbotSmallForConditionalGeneration"),Tit.forEach(t),bnr=r(cAe," (BlenderbotSmall model)"),cAe.forEach(t),vnr=i(ye),j0=n(ye,"LI",{});var fAe=s(j0);phe=n(fAe,"STRONG",{});var Fit=s(phe);Tnr=r(Fit,"encoder-decoder"),Fit.forEach(t),Fnr=r(fAe," \u2014 "),mG=n(fAe,"A",{href:!0});var Cit=s(mG);Cnr=r(Cit,"TFEncoderDecoderModel"),Cit.forEach(t),Mnr=r(fAe," (Encoder decoder model)"),fAe.forEach(t),Enr=i(ye),N0=n(ye,"LI",{});var mAe=s(N0);_he=n(mAe,"STRONG",{});var Mit=s(_he);ynr=r(Mit,"led"),Mit.forEach(t),wnr=r(mAe," \u2014 "),gG=n(mAe,"A",{href:!0});var Eit=s(gG);Anr=r(Eit,"TFLEDForConditionalGeneration"),Eit.forEach(t),Lnr=r(mAe," (LED model)"),mAe.forEach(t),Bnr=i(ye),q0=n(ye,"LI",{});var gAe=s(q0);uhe=n(gAe,"STRONG",{});var yit=s(uhe);xnr=r(yit,"marian"),yit.forEach(t),knr=r(gAe," \u2014 "),hG=n(gAe,"A",{href:!0});var wit=s(hG);Rnr=r(wit,"TFMarianMTModel"),wit.forEach(t),Snr=r(gAe," (Marian model)"),gAe.forEach(t),Pnr=i(ye),G0=n(ye,"LI",{});var hAe=s(G0);bhe=n(hAe,"STRONG",{});var Ait=s(bhe);$nr=r(Ait,"mbart"),Ait.forEach(t),Inr=r(hAe," \u2014 "),pG=n(hAe,"A",{href:!0});var Lit=s(pG);Dnr=r(Lit,"TFMBartForConditionalGeneration"),Lit.forEach(t),jnr=r(hAe," (mBART model)"),hAe.forEach(t),Nnr=i(ye),O0=n(ye,"LI",{});var pAe=s(O0);vhe=n(pAe,"STRONG",{});var Bit=s(vhe);qnr=r(Bit,"mt5"),Bit.forEach(t),Gnr=r(pAe," \u2014 "),_G=n(pAe,"A",{href:!0});var xit=s(_G);Onr=r(xit,"TFMT5ForConditionalGeneration"),xit.forEach(t),Xnr=r(pAe," (mT5 model)"),pAe.forEach(t),Vnr=i(ye),X0=n(ye,"LI",{});var _Ae=s(X0);The=n(_Ae,"STRONG",{});var kit=s(The);znr=r(kit,"pegasus"),kit.forEach(t),Wnr=r(_Ae," \u2014 "),uG=n(_Ae,"A",{href:!0});var Rit=s(uG);Qnr=r(Rit,"TFPegasusForConditionalGeneration"),Rit.forEach(t),Hnr=r(_Ae," (Pegasus model)"),_Ae.forEach(t),Unr=i(ye),V0=n(ye,"LI",{});var uAe=s(V0);Fhe=n(uAe,"STRONG",{});var Sit=s(Fhe);Jnr=r(Sit,"t5"),Sit.forEach(t),Ynr=r(uAe," \u2014 "),bG=n(uAe,"A",{href:!0});var Pit=s(bG);Knr=r(Pit,"TFT5ForConditionalGeneration"),Pit.forEach(t),Znr=r(uAe," (T5 model)"),uAe.forEach(t),ye.forEach(t),esr=i(pa),Che=n(pa,"P",{});var $it=s(Che);osr=r($it,"Examples:"),$it.forEach(t),rsr=i(pa),m(qw.$$.fragment,pa),pa.forEach(t),Gl.forEach(t),HBe=i(c),vc=n(c,"H2",{class:!0});var aRe=s(vc);z0=n(aRe,"A",{id:!0,class:!0,href:!0});var Iit=s(z0);Mhe=n(Iit,"SPAN",{});var Dit=s(Mhe);m(Gw.$$.fragment,Dit),Dit.forEach(t),Iit.forEach(t),tsr=i(aRe),Ehe=n(aRe,"SPAN",{});var jit=s(Ehe);asr=r(jit,"TFAutoModelForSequenceClassification"),jit.forEach(t),aRe.forEach(t),UBe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(Ow.$$.fragment,Xl),nsr=i(Xl),Tc=n(Xl,"P",{});var qz=s(Tc);ssr=r(qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yhe=n(qz,"CODE",{});var Nit=s(yhe);lsr=r(Nit,"from_pretrained()"),Nit.forEach(t),isr=r(qz,"class method or the "),whe=n(qz,"CODE",{});var qit=s(whe);dsr=r(qit,"from_config()"),qit.forEach(t),csr=r(qz,`class
method.`),qz.forEach(t),fsr=i(Xl),Xw=n(Xl,"P",{});var nRe=s(Xw);msr=r(nRe,"This class cannot be instantiated directly using "),Ahe=n(nRe,"CODE",{});var Git=s(Ahe);gsr=r(Git,"__init__()"),Git.forEach(t),hsr=r(nRe," (throws an error)."),nRe.forEach(t),psr=i(Xl),ht=n(Xl,"DIV",{class:!0});var Vl=s(ht);m(Vw.$$.fragment,Vl),_sr=i(Vl),Lhe=n(Vl,"P",{});var Oit=s(Lhe);usr=r(Oit,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Oit.forEach(t),bsr=i(Vl),Fc=n(Vl,"P",{});var Gz=s(Fc);vsr=r(Gz,`Note:
Loading a model from its configuration file does `),Bhe=n(Gz,"STRONG",{});var Xit=s(Bhe);Tsr=r(Xit,"not"),Xit.forEach(t),Fsr=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),xhe=n(Gz,"CODE",{});var Vit=s(xhe);Csr=r(Vit,"from_pretrained()"),Vit.forEach(t),Msr=r(Gz,"to load the model weights."),Gz.forEach(t),Esr=i(Vl),khe=n(Vl,"P",{});var zit=s(khe);ysr=r(zit,"Examples:"),zit.forEach(t),wsr=i(Vl),m(zw.$$.fragment,Vl),Vl.forEach(t),Asr=i(Xl),vo=n(Xl,"DIV",{class:!0});var _a=s(vo);m(Ww.$$.fragment,_a),Lsr=i(_a),Rhe=n(_a,"P",{});var Wit=s(Rhe);Bsr=r(Wit,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Wit.forEach(t),xsr=i(_a),_n=n(_a,"P",{});var aM=s(_n);ksr=r(aM,"The model class to instantiate is selected based on the "),She=n(aM,"CODE",{});var Qit=s(She);Rsr=r(Qit,"model_type"),Qit.forEach(t),Ssr=r(aM,` property of the config object (either
passed as an argument or loaded from `),Phe=n(aM,"CODE",{});var Hit=s(Phe);Psr=r(Hit,"pretrained_model_name_or_path"),Hit.forEach(t),$sr=r(aM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=n(aM,"CODE",{});var Uit=s($he);Isr=r(Uit,"pretrained_model_name_or_path"),Uit.forEach(t),Dsr=r(aM,":"),aM.forEach(t),jsr=i(_a),X=n(_a,"UL",{});var W=s(X);W0=n(W,"LI",{});var bAe=s(W0);Ihe=n(bAe,"STRONG",{});var Jit=s(Ihe);Nsr=r(Jit,"albert"),Jit.forEach(t),qsr=r(bAe," \u2014 "),vG=n(bAe,"A",{href:!0});var Yit=s(vG);Gsr=r(Yit,"TFAlbertForSequenceClassification"),Yit.forEach(t),Osr=r(bAe," (ALBERT model)"),bAe.forEach(t),Xsr=i(W),Q0=n(W,"LI",{});var vAe=s(Q0);Dhe=n(vAe,"STRONG",{});var Kit=s(Dhe);Vsr=r(Kit,"bert"),Kit.forEach(t),zsr=r(vAe," \u2014 "),TG=n(vAe,"A",{href:!0});var Zit=s(TG);Wsr=r(Zit,"TFBertForSequenceClassification"),Zit.forEach(t),Qsr=r(vAe," (BERT model)"),vAe.forEach(t),Hsr=i(W),H0=n(W,"LI",{});var TAe=s(H0);jhe=n(TAe,"STRONG",{});var edt=s(jhe);Usr=r(edt,"camembert"),edt.forEach(t),Jsr=r(TAe," \u2014 "),FG=n(TAe,"A",{href:!0});var odt=s(FG);Ysr=r(odt,"TFCamembertForSequenceClassification"),odt.forEach(t),Ksr=r(TAe," (CamemBERT model)"),TAe.forEach(t),Zsr=i(W),U0=n(W,"LI",{});var FAe=s(U0);Nhe=n(FAe,"STRONG",{});var rdt=s(Nhe);elr=r(rdt,"convbert"),rdt.forEach(t),olr=r(FAe," \u2014 "),CG=n(FAe,"A",{href:!0});var tdt=s(CG);rlr=r(tdt,"TFConvBertForSequenceClassification"),tdt.forEach(t),tlr=r(FAe," (ConvBERT model)"),FAe.forEach(t),alr=i(W),J0=n(W,"LI",{});var CAe=s(J0);qhe=n(CAe,"STRONG",{});var adt=s(qhe);nlr=r(adt,"ctrl"),adt.forEach(t),slr=r(CAe," \u2014 "),MG=n(CAe,"A",{href:!0});var ndt=s(MG);llr=r(ndt,"TFCTRLForSequenceClassification"),ndt.forEach(t),ilr=r(CAe," (CTRL model)"),CAe.forEach(t),dlr=i(W),Y0=n(W,"LI",{});var MAe=s(Y0);Ghe=n(MAe,"STRONG",{});var sdt=s(Ghe);clr=r(sdt,"deberta"),sdt.forEach(t),flr=r(MAe," \u2014 "),EG=n(MAe,"A",{href:!0});var ldt=s(EG);mlr=r(ldt,"TFDebertaForSequenceClassification"),ldt.forEach(t),glr=r(MAe," (DeBERTa model)"),MAe.forEach(t),hlr=i(W),K0=n(W,"LI",{});var EAe=s(K0);Ohe=n(EAe,"STRONG",{});var idt=s(Ohe);plr=r(idt,"deberta-v2"),idt.forEach(t),_lr=r(EAe," \u2014 "),yG=n(EAe,"A",{href:!0});var ddt=s(yG);ulr=r(ddt,"TFDebertaV2ForSequenceClassification"),ddt.forEach(t),blr=r(EAe," (DeBERTa-v2 model)"),EAe.forEach(t),vlr=i(W),Z0=n(W,"LI",{});var yAe=s(Z0);Xhe=n(yAe,"STRONG",{});var cdt=s(Xhe);Tlr=r(cdt,"distilbert"),cdt.forEach(t),Flr=r(yAe," \u2014 "),wG=n(yAe,"A",{href:!0});var fdt=s(wG);Clr=r(fdt,"TFDistilBertForSequenceClassification"),fdt.forEach(t),Mlr=r(yAe," (DistilBERT model)"),yAe.forEach(t),Elr=i(W),eT=n(W,"LI",{});var wAe=s(eT);Vhe=n(wAe,"STRONG",{});var mdt=s(Vhe);ylr=r(mdt,"electra"),mdt.forEach(t),wlr=r(wAe," \u2014 "),AG=n(wAe,"A",{href:!0});var gdt=s(AG);Alr=r(gdt,"TFElectraForSequenceClassification"),gdt.forEach(t),Llr=r(wAe," (ELECTRA model)"),wAe.forEach(t),Blr=i(W),oT=n(W,"LI",{});var AAe=s(oT);zhe=n(AAe,"STRONG",{});var hdt=s(zhe);xlr=r(hdt,"flaubert"),hdt.forEach(t),klr=r(AAe," \u2014 "),LG=n(AAe,"A",{href:!0});var pdt=s(LG);Rlr=r(pdt,"TFFlaubertForSequenceClassification"),pdt.forEach(t),Slr=r(AAe," (FlauBERT model)"),AAe.forEach(t),Plr=i(W),rT=n(W,"LI",{});var LAe=s(rT);Whe=n(LAe,"STRONG",{});var _dt=s(Whe);$lr=r(_dt,"funnel"),_dt.forEach(t),Ilr=r(LAe," \u2014 "),BG=n(LAe,"A",{href:!0});var udt=s(BG);Dlr=r(udt,"TFFunnelForSequenceClassification"),udt.forEach(t),jlr=r(LAe," (Funnel Transformer model)"),LAe.forEach(t),Nlr=i(W),tT=n(W,"LI",{});var BAe=s(tT);Qhe=n(BAe,"STRONG",{});var bdt=s(Qhe);qlr=r(bdt,"gpt2"),bdt.forEach(t),Glr=r(BAe," \u2014 "),xG=n(BAe,"A",{href:!0});var vdt=s(xG);Olr=r(vdt,"TFGPT2ForSequenceClassification"),vdt.forEach(t),Xlr=r(BAe," (OpenAI GPT-2 model)"),BAe.forEach(t),Vlr=i(W),aT=n(W,"LI",{});var xAe=s(aT);Hhe=n(xAe,"STRONG",{});var Tdt=s(Hhe);zlr=r(Tdt,"layoutlm"),Tdt.forEach(t),Wlr=r(xAe," \u2014 "),kG=n(xAe,"A",{href:!0});var Fdt=s(kG);Qlr=r(Fdt,"TFLayoutLMForSequenceClassification"),Fdt.forEach(t),Hlr=r(xAe," (LayoutLM model)"),xAe.forEach(t),Ulr=i(W),nT=n(W,"LI",{});var kAe=s(nT);Uhe=n(kAe,"STRONG",{});var Cdt=s(Uhe);Jlr=r(Cdt,"longformer"),Cdt.forEach(t),Ylr=r(kAe," \u2014 "),RG=n(kAe,"A",{href:!0});var Mdt=s(RG);Klr=r(Mdt,"TFLongformerForSequenceClassification"),Mdt.forEach(t),Zlr=r(kAe," (Longformer model)"),kAe.forEach(t),eir=i(W),sT=n(W,"LI",{});var RAe=s(sT);Jhe=n(RAe,"STRONG",{});var Edt=s(Jhe);oir=r(Edt,"mobilebert"),Edt.forEach(t),rir=r(RAe," \u2014 "),SG=n(RAe,"A",{href:!0});var ydt=s(SG);tir=r(ydt,"TFMobileBertForSequenceClassification"),ydt.forEach(t),air=r(RAe," (MobileBERT model)"),RAe.forEach(t),nir=i(W),lT=n(W,"LI",{});var SAe=s(lT);Yhe=n(SAe,"STRONG",{});var wdt=s(Yhe);sir=r(wdt,"mpnet"),wdt.forEach(t),lir=r(SAe," \u2014 "),PG=n(SAe,"A",{href:!0});var Adt=s(PG);iir=r(Adt,"TFMPNetForSequenceClassification"),Adt.forEach(t),dir=r(SAe," (MPNet model)"),SAe.forEach(t),cir=i(W),iT=n(W,"LI",{});var PAe=s(iT);Khe=n(PAe,"STRONG",{});var Ldt=s(Khe);fir=r(Ldt,"openai-gpt"),Ldt.forEach(t),mir=r(PAe," \u2014 "),$G=n(PAe,"A",{href:!0});var Bdt=s($G);gir=r(Bdt,"TFOpenAIGPTForSequenceClassification"),Bdt.forEach(t),hir=r(PAe," (OpenAI GPT model)"),PAe.forEach(t),pir=i(W),dT=n(W,"LI",{});var $Ae=s(dT);Zhe=n($Ae,"STRONG",{});var xdt=s(Zhe);_ir=r(xdt,"rembert"),xdt.forEach(t),uir=r($Ae," \u2014 "),IG=n($Ae,"A",{href:!0});var kdt=s(IG);bir=r(kdt,"TFRemBertForSequenceClassification"),kdt.forEach(t),vir=r($Ae," (RemBERT model)"),$Ae.forEach(t),Tir=i(W),cT=n(W,"LI",{});var IAe=s(cT);epe=n(IAe,"STRONG",{});var Rdt=s(epe);Fir=r(Rdt,"roberta"),Rdt.forEach(t),Cir=r(IAe," \u2014 "),DG=n(IAe,"A",{href:!0});var Sdt=s(DG);Mir=r(Sdt,"TFRobertaForSequenceClassification"),Sdt.forEach(t),Eir=r(IAe," (RoBERTa model)"),IAe.forEach(t),yir=i(W),fT=n(W,"LI",{});var DAe=s(fT);ope=n(DAe,"STRONG",{});var Pdt=s(ope);wir=r(Pdt,"roformer"),Pdt.forEach(t),Air=r(DAe," \u2014 "),jG=n(DAe,"A",{href:!0});var $dt=s(jG);Lir=r($dt,"TFRoFormerForSequenceClassification"),$dt.forEach(t),Bir=r(DAe," (RoFormer model)"),DAe.forEach(t),xir=i(W),mT=n(W,"LI",{});var jAe=s(mT);rpe=n(jAe,"STRONG",{});var Idt=s(rpe);kir=r(Idt,"tapas"),Idt.forEach(t),Rir=r(jAe," \u2014 "),NG=n(jAe,"A",{href:!0});var Ddt=s(NG);Sir=r(Ddt,"TFTapasForSequenceClassification"),Ddt.forEach(t),Pir=r(jAe," (TAPAS model)"),jAe.forEach(t),$ir=i(W),gT=n(W,"LI",{});var NAe=s(gT);tpe=n(NAe,"STRONG",{});var jdt=s(tpe);Iir=r(jdt,"transfo-xl"),jdt.forEach(t),Dir=r(NAe," \u2014 "),qG=n(NAe,"A",{href:!0});var Ndt=s(qG);jir=r(Ndt,"TFTransfoXLForSequenceClassification"),Ndt.forEach(t),Nir=r(NAe," (Transformer-XL model)"),NAe.forEach(t),qir=i(W),hT=n(W,"LI",{});var qAe=s(hT);ape=n(qAe,"STRONG",{});var qdt=s(ape);Gir=r(qdt,"xlm"),qdt.forEach(t),Oir=r(qAe," \u2014 "),GG=n(qAe,"A",{href:!0});var Gdt=s(GG);Xir=r(Gdt,"TFXLMForSequenceClassification"),Gdt.forEach(t),Vir=r(qAe," (XLM model)"),qAe.forEach(t),zir=i(W),pT=n(W,"LI",{});var GAe=s(pT);npe=n(GAe,"STRONG",{});var Odt=s(npe);Wir=r(Odt,"xlm-roberta"),Odt.forEach(t),Qir=r(GAe," \u2014 "),OG=n(GAe,"A",{href:!0});var Xdt=s(OG);Hir=r(Xdt,"TFXLMRobertaForSequenceClassification"),Xdt.forEach(t),Uir=r(GAe," (XLM-RoBERTa model)"),GAe.forEach(t),Jir=i(W),_T=n(W,"LI",{});var OAe=s(_T);spe=n(OAe,"STRONG",{});var Vdt=s(spe);Yir=r(Vdt,"xlnet"),Vdt.forEach(t),Kir=r(OAe," \u2014 "),XG=n(OAe,"A",{href:!0});var zdt=s(XG);Zir=r(zdt,"TFXLNetForSequenceClassification"),zdt.forEach(t),edr=r(OAe," (XLNet model)"),OAe.forEach(t),W.forEach(t),odr=i(_a),lpe=n(_a,"P",{});var Wdt=s(lpe);rdr=r(Wdt,"Examples:"),Wdt.forEach(t),tdr=i(_a),m(Qw.$$.fragment,_a),_a.forEach(t),Xl.forEach(t),JBe=i(c),Cc=n(c,"H2",{class:!0});var sRe=s(Cc);uT=n(sRe,"A",{id:!0,class:!0,href:!0});var Qdt=s(uT);ipe=n(Qdt,"SPAN",{});var Hdt=s(ipe);m(Hw.$$.fragment,Hdt),Hdt.forEach(t),Qdt.forEach(t),adr=i(sRe),dpe=n(sRe,"SPAN",{});var Udt=s(dpe);ndr=r(Udt,"TFAutoModelForMultipleChoice"),Udt.forEach(t),sRe.forEach(t),YBe=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(Uw.$$.fragment,zl),sdr=i(zl),Mc=n(zl,"P",{});var Oz=s(Mc);ldr=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cpe=n(Oz,"CODE",{});var Jdt=s(cpe);idr=r(Jdt,"from_pretrained()"),Jdt.forEach(t),ddr=r(Oz,"class method or the "),fpe=n(Oz,"CODE",{});var Ydt=s(fpe);cdr=r(Ydt,"from_config()"),Ydt.forEach(t),fdr=r(Oz,`class
method.`),Oz.forEach(t),mdr=i(zl),Jw=n(zl,"P",{});var lRe=s(Jw);gdr=r(lRe,"This class cannot be instantiated directly using "),mpe=n(lRe,"CODE",{});var Kdt=s(mpe);hdr=r(Kdt,"__init__()"),Kdt.forEach(t),pdr=r(lRe," (throws an error)."),lRe.forEach(t),_dr=i(zl),pt=n(zl,"DIV",{class:!0});var Wl=s(pt);m(Yw.$$.fragment,Wl),udr=i(Wl),gpe=n(Wl,"P",{});var Zdt=s(gpe);bdr=r(Zdt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Zdt.forEach(t),vdr=i(Wl),Ec=n(Wl,"P",{});var Xz=s(Ec);Tdr=r(Xz,`Note:
Loading a model from its configuration file does `),hpe=n(Xz,"STRONG",{});var ect=s(hpe);Fdr=r(ect,"not"),ect.forEach(t),Cdr=r(Xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ppe=n(Xz,"CODE",{});var oct=s(ppe);Mdr=r(oct,"from_pretrained()"),oct.forEach(t),Edr=r(Xz,"to load the model weights."),Xz.forEach(t),ydr=i(Wl),_pe=n(Wl,"P",{});var rct=s(_pe);wdr=r(rct,"Examples:"),rct.forEach(t),Adr=i(Wl),m(Kw.$$.fragment,Wl),Wl.forEach(t),Ldr=i(zl),To=n(zl,"DIV",{class:!0});var ua=s(To);m(Zw.$$.fragment,ua),Bdr=i(ua),upe=n(ua,"P",{});var tct=s(upe);xdr=r(tct,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tct.forEach(t),kdr=i(ua),un=n(ua,"P",{});var nM=s(un);Rdr=r(nM,"The model class to instantiate is selected based on the "),bpe=n(nM,"CODE",{});var act=s(bpe);Sdr=r(act,"model_type"),act.forEach(t),Pdr=r(nM,` property of the config object (either
passed as an argument or loaded from `),vpe=n(nM,"CODE",{});var nct=s(vpe);$dr=r(nct,"pretrained_model_name_or_path"),nct.forEach(t),Idr=r(nM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=n(nM,"CODE",{});var sct=s(Tpe);Ddr=r(sct,"pretrained_model_name_or_path"),sct.forEach(t),jdr=r(nM,":"),nM.forEach(t),Ndr=i(ua),te=n(ua,"UL",{});var se=s(te);bT=n(se,"LI",{});var XAe=s(bT);Fpe=n(XAe,"STRONG",{});var lct=s(Fpe);qdr=r(lct,"albert"),lct.forEach(t),Gdr=r(XAe," \u2014 "),VG=n(XAe,"A",{href:!0});var ict=s(VG);Odr=r(ict,"TFAlbertForMultipleChoice"),ict.forEach(t),Xdr=r(XAe," (ALBERT model)"),XAe.forEach(t),Vdr=i(se),vT=n(se,"LI",{});var VAe=s(vT);Cpe=n(VAe,"STRONG",{});var dct=s(Cpe);zdr=r(dct,"bert"),dct.forEach(t),Wdr=r(VAe," \u2014 "),zG=n(VAe,"A",{href:!0});var cct=s(zG);Qdr=r(cct,"TFBertForMultipleChoice"),cct.forEach(t),Hdr=r(VAe," (BERT model)"),VAe.forEach(t),Udr=i(se),TT=n(se,"LI",{});var zAe=s(TT);Mpe=n(zAe,"STRONG",{});var fct=s(Mpe);Jdr=r(fct,"camembert"),fct.forEach(t),Ydr=r(zAe," \u2014 "),WG=n(zAe,"A",{href:!0});var mct=s(WG);Kdr=r(mct,"TFCamembertForMultipleChoice"),mct.forEach(t),Zdr=r(zAe," (CamemBERT model)"),zAe.forEach(t),ecr=i(se),FT=n(se,"LI",{});var WAe=s(FT);Epe=n(WAe,"STRONG",{});var gct=s(Epe);ocr=r(gct,"convbert"),gct.forEach(t),rcr=r(WAe," \u2014 "),QG=n(WAe,"A",{href:!0});var hct=s(QG);tcr=r(hct,"TFConvBertForMultipleChoice"),hct.forEach(t),acr=r(WAe," (ConvBERT model)"),WAe.forEach(t),ncr=i(se),CT=n(se,"LI",{});var QAe=s(CT);ype=n(QAe,"STRONG",{});var pct=s(ype);scr=r(pct,"distilbert"),pct.forEach(t),lcr=r(QAe," \u2014 "),HG=n(QAe,"A",{href:!0});var _ct=s(HG);icr=r(_ct,"TFDistilBertForMultipleChoice"),_ct.forEach(t),dcr=r(QAe," (DistilBERT model)"),QAe.forEach(t),ccr=i(se),MT=n(se,"LI",{});var HAe=s(MT);wpe=n(HAe,"STRONG",{});var uct=s(wpe);fcr=r(uct,"electra"),uct.forEach(t),mcr=r(HAe," \u2014 "),UG=n(HAe,"A",{href:!0});var bct=s(UG);gcr=r(bct,"TFElectraForMultipleChoice"),bct.forEach(t),hcr=r(HAe," (ELECTRA model)"),HAe.forEach(t),pcr=i(se),ET=n(se,"LI",{});var UAe=s(ET);Ape=n(UAe,"STRONG",{});var vct=s(Ape);_cr=r(vct,"flaubert"),vct.forEach(t),ucr=r(UAe," \u2014 "),JG=n(UAe,"A",{href:!0});var Tct=s(JG);bcr=r(Tct,"TFFlaubertForMultipleChoice"),Tct.forEach(t),vcr=r(UAe," (FlauBERT model)"),UAe.forEach(t),Tcr=i(se),yT=n(se,"LI",{});var JAe=s(yT);Lpe=n(JAe,"STRONG",{});var Fct=s(Lpe);Fcr=r(Fct,"funnel"),Fct.forEach(t),Ccr=r(JAe," \u2014 "),YG=n(JAe,"A",{href:!0});var Cct=s(YG);Mcr=r(Cct,"TFFunnelForMultipleChoice"),Cct.forEach(t),Ecr=r(JAe," (Funnel Transformer model)"),JAe.forEach(t),ycr=i(se),wT=n(se,"LI",{});var YAe=s(wT);Bpe=n(YAe,"STRONG",{});var Mct=s(Bpe);wcr=r(Mct,"longformer"),Mct.forEach(t),Acr=r(YAe," \u2014 "),KG=n(YAe,"A",{href:!0});var Ect=s(KG);Lcr=r(Ect,"TFLongformerForMultipleChoice"),Ect.forEach(t),Bcr=r(YAe," (Longformer model)"),YAe.forEach(t),xcr=i(se),AT=n(se,"LI",{});var KAe=s(AT);xpe=n(KAe,"STRONG",{});var yct=s(xpe);kcr=r(yct,"mobilebert"),yct.forEach(t),Rcr=r(KAe," \u2014 "),ZG=n(KAe,"A",{href:!0});var wct=s(ZG);Scr=r(wct,"TFMobileBertForMultipleChoice"),wct.forEach(t),Pcr=r(KAe," (MobileBERT model)"),KAe.forEach(t),$cr=i(se),LT=n(se,"LI",{});var ZAe=s(LT);kpe=n(ZAe,"STRONG",{});var Act=s(kpe);Icr=r(Act,"mpnet"),Act.forEach(t),Dcr=r(ZAe," \u2014 "),eO=n(ZAe,"A",{href:!0});var Lct=s(eO);jcr=r(Lct,"TFMPNetForMultipleChoice"),Lct.forEach(t),Ncr=r(ZAe," (MPNet model)"),ZAe.forEach(t),qcr=i(se),BT=n(se,"LI",{});var eLe=s(BT);Rpe=n(eLe,"STRONG",{});var Bct=s(Rpe);Gcr=r(Bct,"rembert"),Bct.forEach(t),Ocr=r(eLe," \u2014 "),oO=n(eLe,"A",{href:!0});var xct=s(oO);Xcr=r(xct,"TFRemBertForMultipleChoice"),xct.forEach(t),Vcr=r(eLe," (RemBERT model)"),eLe.forEach(t),zcr=i(se),xT=n(se,"LI",{});var oLe=s(xT);Spe=n(oLe,"STRONG",{});var kct=s(Spe);Wcr=r(kct,"roberta"),kct.forEach(t),Qcr=r(oLe," \u2014 "),rO=n(oLe,"A",{href:!0});var Rct=s(rO);Hcr=r(Rct,"TFRobertaForMultipleChoice"),Rct.forEach(t),Ucr=r(oLe," (RoBERTa model)"),oLe.forEach(t),Jcr=i(se),kT=n(se,"LI",{});var rLe=s(kT);Ppe=n(rLe,"STRONG",{});var Sct=s(Ppe);Ycr=r(Sct,"roformer"),Sct.forEach(t),Kcr=r(rLe," \u2014 "),tO=n(rLe,"A",{href:!0});var Pct=s(tO);Zcr=r(Pct,"TFRoFormerForMultipleChoice"),Pct.forEach(t),efr=r(rLe," (RoFormer model)"),rLe.forEach(t),ofr=i(se),RT=n(se,"LI",{});var tLe=s(RT);$pe=n(tLe,"STRONG",{});var $ct=s($pe);rfr=r($ct,"xlm"),$ct.forEach(t),tfr=r(tLe," \u2014 "),aO=n(tLe,"A",{href:!0});var Ict=s(aO);afr=r(Ict,"TFXLMForMultipleChoice"),Ict.forEach(t),nfr=r(tLe," (XLM model)"),tLe.forEach(t),sfr=i(se),ST=n(se,"LI",{});var aLe=s(ST);Ipe=n(aLe,"STRONG",{});var Dct=s(Ipe);lfr=r(Dct,"xlm-roberta"),Dct.forEach(t),ifr=r(aLe," \u2014 "),nO=n(aLe,"A",{href:!0});var jct=s(nO);dfr=r(jct,"TFXLMRobertaForMultipleChoice"),jct.forEach(t),cfr=r(aLe," (XLM-RoBERTa model)"),aLe.forEach(t),ffr=i(se),PT=n(se,"LI",{});var nLe=s(PT);Dpe=n(nLe,"STRONG",{});var Nct=s(Dpe);mfr=r(Nct,"xlnet"),Nct.forEach(t),gfr=r(nLe," \u2014 "),sO=n(nLe,"A",{href:!0});var qct=s(sO);hfr=r(qct,"TFXLNetForMultipleChoice"),qct.forEach(t),pfr=r(nLe," (XLNet model)"),nLe.forEach(t),se.forEach(t),_fr=i(ua),jpe=n(ua,"P",{});var Gct=s(jpe);ufr=r(Gct,"Examples:"),Gct.forEach(t),bfr=i(ua),m(e6.$$.fragment,ua),ua.forEach(t),zl.forEach(t),KBe=i(c),yc=n(c,"H2",{class:!0});var iRe=s(yc);$T=n(iRe,"A",{id:!0,class:!0,href:!0});var Oct=s($T);Npe=n(Oct,"SPAN",{});var Xct=s(Npe);m(o6.$$.fragment,Xct),Xct.forEach(t),Oct.forEach(t),vfr=i(iRe),qpe=n(iRe,"SPAN",{});var Vct=s(qpe);Tfr=r(Vct,"TFAutoModelForTableQuestionAnswering"),Vct.forEach(t),iRe.forEach(t),ZBe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(r6.$$.fragment,Ql),Ffr=i(Ql),wc=n(Ql,"P",{});var Vz=s(wc);Cfr=r(Vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Gpe=n(Vz,"CODE",{});var zct=s(Gpe);Mfr=r(zct,"from_pretrained()"),zct.forEach(t),Efr=r(Vz,"class method or the "),Ope=n(Vz,"CODE",{});var Wct=s(Ope);yfr=r(Wct,"from_config()"),Wct.forEach(t),wfr=r(Vz,`class
method.`),Vz.forEach(t),Afr=i(Ql),t6=n(Ql,"P",{});var dRe=s(t6);Lfr=r(dRe,"This class cannot be instantiated directly using "),Xpe=n(dRe,"CODE",{});var Qct=s(Xpe);Bfr=r(Qct,"__init__()"),Qct.forEach(t),xfr=r(dRe," (throws an error)."),dRe.forEach(t),kfr=i(Ql),_t=n(Ql,"DIV",{class:!0});var Hl=s(_t);m(a6.$$.fragment,Hl),Rfr=i(Hl),Vpe=n(Hl,"P",{});var Hct=s(Vpe);Sfr=r(Hct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Hct.forEach(t),Pfr=i(Hl),Ac=n(Hl,"P",{});var zz=s(Ac);$fr=r(zz,`Note:
Loading a model from its configuration file does `),zpe=n(zz,"STRONG",{});var Uct=s(zpe);Ifr=r(Uct,"not"),Uct.forEach(t),Dfr=r(zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wpe=n(zz,"CODE",{});var Jct=s(Wpe);jfr=r(Jct,"from_pretrained()"),Jct.forEach(t),Nfr=r(zz,"to load the model weights."),zz.forEach(t),qfr=i(Hl),Qpe=n(Hl,"P",{});var Yct=s(Qpe);Gfr=r(Yct,"Examples:"),Yct.forEach(t),Ofr=i(Hl),m(n6.$$.fragment,Hl),Hl.forEach(t),Xfr=i(Ql),Fo=n(Ql,"DIV",{class:!0});var ba=s(Fo);m(s6.$$.fragment,ba),Vfr=i(ba),Hpe=n(ba,"P",{});var Kct=s(Hpe);zfr=r(Kct,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Kct.forEach(t),Wfr=i(ba),bn=n(ba,"P",{});var sM=s(bn);Qfr=r(sM,"The model class to instantiate is selected based on the "),Upe=n(sM,"CODE",{});var Zct=s(Upe);Hfr=r(Zct,"model_type"),Zct.forEach(t),Ufr=r(sM,` property of the config object (either
passed as an argument or loaded from `),Jpe=n(sM,"CODE",{});var eft=s(Jpe);Jfr=r(eft,"pretrained_model_name_or_path"),eft.forEach(t),Yfr=r(sM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ype=n(sM,"CODE",{});var oft=s(Ype);Kfr=r(oft,"pretrained_model_name_or_path"),oft.forEach(t),Zfr=r(sM,":"),sM.forEach(t),emr=i(ba),Kpe=n(ba,"UL",{});var rft=s(Kpe);IT=n(rft,"LI",{});var sLe=s(IT);Zpe=n(sLe,"STRONG",{});var tft=s(Zpe);omr=r(tft,"tapas"),tft.forEach(t),rmr=r(sLe," \u2014 "),lO=n(sLe,"A",{href:!0});var aft=s(lO);tmr=r(aft,"TFTapasForQuestionAnswering"),aft.forEach(t),amr=r(sLe," (TAPAS model)"),sLe.forEach(t),rft.forEach(t),nmr=i(ba),e_e=n(ba,"P",{});var nft=s(e_e);smr=r(nft,"Examples:"),nft.forEach(t),lmr=i(ba),m(l6.$$.fragment,ba),ba.forEach(t),Ql.forEach(t),exe=i(c),Lc=n(c,"H2",{class:!0});var cRe=s(Lc);DT=n(cRe,"A",{id:!0,class:!0,href:!0});var sft=s(DT);o_e=n(sft,"SPAN",{});var lft=s(o_e);m(i6.$$.fragment,lft),lft.forEach(t),sft.forEach(t),imr=i(cRe),r_e=n(cRe,"SPAN",{});var ift=s(r_e);dmr=r(ift,"TFAutoModelForTokenClassification"),ift.forEach(t),cRe.forEach(t),oxe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(d6.$$.fragment,Ul),cmr=i(Ul),Bc=n(Ul,"P",{});var Wz=s(Bc);fmr=r(Wz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),t_e=n(Wz,"CODE",{});var dft=s(t_e);mmr=r(dft,"from_pretrained()"),dft.forEach(t),gmr=r(Wz,"class method or the "),a_e=n(Wz,"CODE",{});var cft=s(a_e);hmr=r(cft,"from_config()"),cft.forEach(t),pmr=r(Wz,`class
method.`),Wz.forEach(t),_mr=i(Ul),c6=n(Ul,"P",{});var fRe=s(c6);umr=r(fRe,"This class cannot be instantiated directly using "),n_e=n(fRe,"CODE",{});var fft=s(n_e);bmr=r(fft,"__init__()"),fft.forEach(t),vmr=r(fRe," (throws an error)."),fRe.forEach(t),Tmr=i(Ul),ut=n(Ul,"DIV",{class:!0});var Jl=s(ut);m(f6.$$.fragment,Jl),Fmr=i(Jl),s_e=n(Jl,"P",{});var mft=s(s_e);Cmr=r(mft,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mft.forEach(t),Mmr=i(Jl),xc=n(Jl,"P",{});var Qz=s(xc);Emr=r(Qz,`Note:
Loading a model from its configuration file does `),l_e=n(Qz,"STRONG",{});var gft=s(l_e);ymr=r(gft,"not"),gft.forEach(t),wmr=r(Qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),i_e=n(Qz,"CODE",{});var hft=s(i_e);Amr=r(hft,"from_pretrained()"),hft.forEach(t),Lmr=r(Qz,"to load the model weights."),Qz.forEach(t),Bmr=i(Jl),d_e=n(Jl,"P",{});var pft=s(d_e);xmr=r(pft,"Examples:"),pft.forEach(t),kmr=i(Jl),m(m6.$$.fragment,Jl),Jl.forEach(t),Rmr=i(Ul),Co=n(Ul,"DIV",{class:!0});var va=s(Co);m(g6.$$.fragment,va),Smr=i(va),c_e=n(va,"P",{});var _ft=s(c_e);Pmr=r(_ft,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_ft.forEach(t),$mr=i(va),vn=n(va,"P",{});var lM=s(vn);Imr=r(lM,"The model class to instantiate is selected based on the "),f_e=n(lM,"CODE",{});var uft=s(f_e);Dmr=r(uft,"model_type"),uft.forEach(t),jmr=r(lM,` property of the config object (either
passed as an argument or loaded from `),m_e=n(lM,"CODE",{});var bft=s(m_e);Nmr=r(bft,"pretrained_model_name_or_path"),bft.forEach(t),qmr=r(lM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=n(lM,"CODE",{});var vft=s(g_e);Gmr=r(vft,"pretrained_model_name_or_path"),vft.forEach(t),Omr=r(lM,":"),lM.forEach(t),Xmr=i(va),K=n(va,"UL",{});var oe=s(K);jT=n(oe,"LI",{});var lLe=s(jT);h_e=n(lLe,"STRONG",{});var Tft=s(h_e);Vmr=r(Tft,"albert"),Tft.forEach(t),zmr=r(lLe," \u2014 "),iO=n(lLe,"A",{href:!0});var Fft=s(iO);Wmr=r(Fft,"TFAlbertForTokenClassification"),Fft.forEach(t),Qmr=r(lLe," (ALBERT model)"),lLe.forEach(t),Hmr=i(oe),NT=n(oe,"LI",{});var iLe=s(NT);p_e=n(iLe,"STRONG",{});var Cft=s(p_e);Umr=r(Cft,"bert"),Cft.forEach(t),Jmr=r(iLe," \u2014 "),dO=n(iLe,"A",{href:!0});var Mft=s(dO);Ymr=r(Mft,"TFBertForTokenClassification"),Mft.forEach(t),Kmr=r(iLe," (BERT model)"),iLe.forEach(t),Zmr=i(oe),qT=n(oe,"LI",{});var dLe=s(qT);__e=n(dLe,"STRONG",{});var Eft=s(__e);egr=r(Eft,"camembert"),Eft.forEach(t),ogr=r(dLe," \u2014 "),cO=n(dLe,"A",{href:!0});var yft=s(cO);rgr=r(yft,"TFCamembertForTokenClassification"),yft.forEach(t),tgr=r(dLe," (CamemBERT model)"),dLe.forEach(t),agr=i(oe),GT=n(oe,"LI",{});var cLe=s(GT);u_e=n(cLe,"STRONG",{});var wft=s(u_e);ngr=r(wft,"convbert"),wft.forEach(t),sgr=r(cLe," \u2014 "),fO=n(cLe,"A",{href:!0});var Aft=s(fO);lgr=r(Aft,"TFConvBertForTokenClassification"),Aft.forEach(t),igr=r(cLe," (ConvBERT model)"),cLe.forEach(t),dgr=i(oe),OT=n(oe,"LI",{});var fLe=s(OT);b_e=n(fLe,"STRONG",{});var Lft=s(b_e);cgr=r(Lft,"deberta"),Lft.forEach(t),fgr=r(fLe," \u2014 "),mO=n(fLe,"A",{href:!0});var Bft=s(mO);mgr=r(Bft,"TFDebertaForTokenClassification"),Bft.forEach(t),ggr=r(fLe," (DeBERTa model)"),fLe.forEach(t),hgr=i(oe),XT=n(oe,"LI",{});var mLe=s(XT);v_e=n(mLe,"STRONG",{});var xft=s(v_e);pgr=r(xft,"deberta-v2"),xft.forEach(t),_gr=r(mLe," \u2014 "),gO=n(mLe,"A",{href:!0});var kft=s(gO);ugr=r(kft,"TFDebertaV2ForTokenClassification"),kft.forEach(t),bgr=r(mLe," (DeBERTa-v2 model)"),mLe.forEach(t),vgr=i(oe),VT=n(oe,"LI",{});var gLe=s(VT);T_e=n(gLe,"STRONG",{});var Rft=s(T_e);Tgr=r(Rft,"distilbert"),Rft.forEach(t),Fgr=r(gLe," \u2014 "),hO=n(gLe,"A",{href:!0});var Sft=s(hO);Cgr=r(Sft,"TFDistilBertForTokenClassification"),Sft.forEach(t),Mgr=r(gLe," (DistilBERT model)"),gLe.forEach(t),Egr=i(oe),zT=n(oe,"LI",{});var hLe=s(zT);F_e=n(hLe,"STRONG",{});var Pft=s(F_e);ygr=r(Pft,"electra"),Pft.forEach(t),wgr=r(hLe," \u2014 "),pO=n(hLe,"A",{href:!0});var $ft=s(pO);Agr=r($ft,"TFElectraForTokenClassification"),$ft.forEach(t),Lgr=r(hLe," (ELECTRA model)"),hLe.forEach(t),Bgr=i(oe),WT=n(oe,"LI",{});var pLe=s(WT);C_e=n(pLe,"STRONG",{});var Ift=s(C_e);xgr=r(Ift,"flaubert"),Ift.forEach(t),kgr=r(pLe," \u2014 "),_O=n(pLe,"A",{href:!0});var Dft=s(_O);Rgr=r(Dft,"TFFlaubertForTokenClassification"),Dft.forEach(t),Sgr=r(pLe," (FlauBERT model)"),pLe.forEach(t),Pgr=i(oe),QT=n(oe,"LI",{});var _Le=s(QT);M_e=n(_Le,"STRONG",{});var jft=s(M_e);$gr=r(jft,"funnel"),jft.forEach(t),Igr=r(_Le," \u2014 "),uO=n(_Le,"A",{href:!0});var Nft=s(uO);Dgr=r(Nft,"TFFunnelForTokenClassification"),Nft.forEach(t),jgr=r(_Le," (Funnel Transformer model)"),_Le.forEach(t),Ngr=i(oe),HT=n(oe,"LI",{});var uLe=s(HT);E_e=n(uLe,"STRONG",{});var qft=s(E_e);qgr=r(qft,"layoutlm"),qft.forEach(t),Ggr=r(uLe," \u2014 "),bO=n(uLe,"A",{href:!0});var Gft=s(bO);Ogr=r(Gft,"TFLayoutLMForTokenClassification"),Gft.forEach(t),Xgr=r(uLe," (LayoutLM model)"),uLe.forEach(t),Vgr=i(oe),UT=n(oe,"LI",{});var bLe=s(UT);y_e=n(bLe,"STRONG",{});var Oft=s(y_e);zgr=r(Oft,"longformer"),Oft.forEach(t),Wgr=r(bLe," \u2014 "),vO=n(bLe,"A",{href:!0});var Xft=s(vO);Qgr=r(Xft,"TFLongformerForTokenClassification"),Xft.forEach(t),Hgr=r(bLe," (Longformer model)"),bLe.forEach(t),Ugr=i(oe),JT=n(oe,"LI",{});var vLe=s(JT);w_e=n(vLe,"STRONG",{});var Vft=s(w_e);Jgr=r(Vft,"mobilebert"),Vft.forEach(t),Ygr=r(vLe," \u2014 "),TO=n(vLe,"A",{href:!0});var zft=s(TO);Kgr=r(zft,"TFMobileBertForTokenClassification"),zft.forEach(t),Zgr=r(vLe," (MobileBERT model)"),vLe.forEach(t),ehr=i(oe),YT=n(oe,"LI",{});var TLe=s(YT);A_e=n(TLe,"STRONG",{});var Wft=s(A_e);ohr=r(Wft,"mpnet"),Wft.forEach(t),rhr=r(TLe," \u2014 "),FO=n(TLe,"A",{href:!0});var Qft=s(FO);thr=r(Qft,"TFMPNetForTokenClassification"),Qft.forEach(t),ahr=r(TLe," (MPNet model)"),TLe.forEach(t),nhr=i(oe),KT=n(oe,"LI",{});var FLe=s(KT);L_e=n(FLe,"STRONG",{});var Hft=s(L_e);shr=r(Hft,"rembert"),Hft.forEach(t),lhr=r(FLe," \u2014 "),CO=n(FLe,"A",{href:!0});var Uft=s(CO);ihr=r(Uft,"TFRemBertForTokenClassification"),Uft.forEach(t),dhr=r(FLe," (RemBERT model)"),FLe.forEach(t),chr=i(oe),ZT=n(oe,"LI",{});var CLe=s(ZT);B_e=n(CLe,"STRONG",{});var Jft=s(B_e);fhr=r(Jft,"roberta"),Jft.forEach(t),mhr=r(CLe," \u2014 "),MO=n(CLe,"A",{href:!0});var Yft=s(MO);ghr=r(Yft,"TFRobertaForTokenClassification"),Yft.forEach(t),hhr=r(CLe," (RoBERTa model)"),CLe.forEach(t),phr=i(oe),eF=n(oe,"LI",{});var MLe=s(eF);x_e=n(MLe,"STRONG",{});var Kft=s(x_e);_hr=r(Kft,"roformer"),Kft.forEach(t),uhr=r(MLe," \u2014 "),EO=n(MLe,"A",{href:!0});var Zft=s(EO);bhr=r(Zft,"TFRoFormerForTokenClassification"),Zft.forEach(t),vhr=r(MLe," (RoFormer model)"),MLe.forEach(t),Thr=i(oe),oF=n(oe,"LI",{});var ELe=s(oF);k_e=n(ELe,"STRONG",{});var emt=s(k_e);Fhr=r(emt,"xlm"),emt.forEach(t),Chr=r(ELe," \u2014 "),yO=n(ELe,"A",{href:!0});var omt=s(yO);Mhr=r(omt,"TFXLMForTokenClassification"),omt.forEach(t),Ehr=r(ELe," (XLM model)"),ELe.forEach(t),yhr=i(oe),rF=n(oe,"LI",{});var yLe=s(rF);R_e=n(yLe,"STRONG",{});var rmt=s(R_e);whr=r(rmt,"xlm-roberta"),rmt.forEach(t),Ahr=r(yLe," \u2014 "),wO=n(yLe,"A",{href:!0});var tmt=s(wO);Lhr=r(tmt,"TFXLMRobertaForTokenClassification"),tmt.forEach(t),Bhr=r(yLe," (XLM-RoBERTa model)"),yLe.forEach(t),xhr=i(oe),tF=n(oe,"LI",{});var wLe=s(tF);S_e=n(wLe,"STRONG",{});var amt=s(S_e);khr=r(amt,"xlnet"),amt.forEach(t),Rhr=r(wLe," \u2014 "),AO=n(wLe,"A",{href:!0});var nmt=s(AO);Shr=r(nmt,"TFXLNetForTokenClassification"),nmt.forEach(t),Phr=r(wLe," (XLNet model)"),wLe.forEach(t),oe.forEach(t),$hr=i(va),P_e=n(va,"P",{});var smt=s(P_e);Ihr=r(smt,"Examples:"),smt.forEach(t),Dhr=i(va),m(h6.$$.fragment,va),va.forEach(t),Ul.forEach(t),rxe=i(c),kc=n(c,"H2",{class:!0});var mRe=s(kc);aF=n(mRe,"A",{id:!0,class:!0,href:!0});var lmt=s(aF);$_e=n(lmt,"SPAN",{});var imt=s($_e);m(p6.$$.fragment,imt),imt.forEach(t),lmt.forEach(t),jhr=i(mRe),I_e=n(mRe,"SPAN",{});var dmt=s(I_e);Nhr=r(dmt,"TFAutoModelForQuestionAnswering"),dmt.forEach(t),mRe.forEach(t),txe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(_6.$$.fragment,Yl),qhr=i(Yl),Rc=n(Yl,"P",{});var Hz=s(Rc);Ghr=r(Hz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),D_e=n(Hz,"CODE",{});var cmt=s(D_e);Ohr=r(cmt,"from_pretrained()"),cmt.forEach(t),Xhr=r(Hz,"class method or the "),j_e=n(Hz,"CODE",{});var fmt=s(j_e);Vhr=r(fmt,"from_config()"),fmt.forEach(t),zhr=r(Hz,`class
method.`),Hz.forEach(t),Whr=i(Yl),u6=n(Yl,"P",{});var gRe=s(u6);Qhr=r(gRe,"This class cannot be instantiated directly using "),N_e=n(gRe,"CODE",{});var mmt=s(N_e);Hhr=r(mmt,"__init__()"),mmt.forEach(t),Uhr=r(gRe," (throws an error)."),gRe.forEach(t),Jhr=i(Yl),bt=n(Yl,"DIV",{class:!0});var Kl=s(bt);m(b6.$$.fragment,Kl),Yhr=i(Kl),q_e=n(Kl,"P",{});var gmt=s(q_e);Khr=r(gmt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gmt.forEach(t),Zhr=i(Kl),Sc=n(Kl,"P",{});var Uz=s(Sc);epr=r(Uz,`Note:
Loading a model from its configuration file does `),G_e=n(Uz,"STRONG",{});var hmt=s(G_e);opr=r(hmt,"not"),hmt.forEach(t),rpr=r(Uz,` load the model weights. It only affects the
model\u2019s configuration. Use `),O_e=n(Uz,"CODE",{});var pmt=s(O_e);tpr=r(pmt,"from_pretrained()"),pmt.forEach(t),apr=r(Uz,"to load the model weights."),Uz.forEach(t),npr=i(Kl),X_e=n(Kl,"P",{});var _mt=s(X_e);spr=r(_mt,"Examples:"),_mt.forEach(t),lpr=i(Kl),m(v6.$$.fragment,Kl),Kl.forEach(t),ipr=i(Yl),Mo=n(Yl,"DIV",{class:!0});var Ta=s(Mo);m(T6.$$.fragment,Ta),dpr=i(Ta),V_e=n(Ta,"P",{});var umt=s(V_e);cpr=r(umt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),umt.forEach(t),fpr=i(Ta),Tn=n(Ta,"P",{});var iM=s(Tn);mpr=r(iM,"The model class to instantiate is selected based on the "),z_e=n(iM,"CODE",{});var bmt=s(z_e);gpr=r(bmt,"model_type"),bmt.forEach(t),hpr=r(iM,` property of the config object (either
passed as an argument or loaded from `),W_e=n(iM,"CODE",{});var vmt=s(W_e);ppr=r(vmt,"pretrained_model_name_or_path"),vmt.forEach(t),_pr=r(iM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q_e=n(iM,"CODE",{});var Tmt=s(Q_e);upr=r(Tmt,"pretrained_model_name_or_path"),Tmt.forEach(t),bpr=r(iM,":"),iM.forEach(t),vpr=i(Ta),Z=n(Ta,"UL",{});var re=s(Z);nF=n(re,"LI",{});var ALe=s(nF);H_e=n(ALe,"STRONG",{});var Fmt=s(H_e);Tpr=r(Fmt,"albert"),Fmt.forEach(t),Fpr=r(ALe," \u2014 "),LO=n(ALe,"A",{href:!0});var Cmt=s(LO);Cpr=r(Cmt,"TFAlbertForQuestionAnswering"),Cmt.forEach(t),Mpr=r(ALe," (ALBERT model)"),ALe.forEach(t),Epr=i(re),sF=n(re,"LI",{});var LLe=s(sF);U_e=n(LLe,"STRONG",{});var Mmt=s(U_e);ypr=r(Mmt,"bert"),Mmt.forEach(t),wpr=r(LLe," \u2014 "),BO=n(LLe,"A",{href:!0});var Emt=s(BO);Apr=r(Emt,"TFBertForQuestionAnswering"),Emt.forEach(t),Lpr=r(LLe," (BERT model)"),LLe.forEach(t),Bpr=i(re),lF=n(re,"LI",{});var BLe=s(lF);J_e=n(BLe,"STRONG",{});var ymt=s(J_e);xpr=r(ymt,"camembert"),ymt.forEach(t),kpr=r(BLe," \u2014 "),xO=n(BLe,"A",{href:!0});var wmt=s(xO);Rpr=r(wmt,"TFCamembertForQuestionAnswering"),wmt.forEach(t),Spr=r(BLe," (CamemBERT model)"),BLe.forEach(t),Ppr=i(re),iF=n(re,"LI",{});var xLe=s(iF);Y_e=n(xLe,"STRONG",{});var Amt=s(Y_e);$pr=r(Amt,"convbert"),Amt.forEach(t),Ipr=r(xLe," \u2014 "),kO=n(xLe,"A",{href:!0});var Lmt=s(kO);Dpr=r(Lmt,"TFConvBertForQuestionAnswering"),Lmt.forEach(t),jpr=r(xLe," (ConvBERT model)"),xLe.forEach(t),Npr=i(re),dF=n(re,"LI",{});var kLe=s(dF);K_e=n(kLe,"STRONG",{});var Bmt=s(K_e);qpr=r(Bmt,"deberta"),Bmt.forEach(t),Gpr=r(kLe," \u2014 "),RO=n(kLe,"A",{href:!0});var xmt=s(RO);Opr=r(xmt,"TFDebertaForQuestionAnswering"),xmt.forEach(t),Xpr=r(kLe," (DeBERTa model)"),kLe.forEach(t),Vpr=i(re),cF=n(re,"LI",{});var RLe=s(cF);Z_e=n(RLe,"STRONG",{});var kmt=s(Z_e);zpr=r(kmt,"deberta-v2"),kmt.forEach(t),Wpr=r(RLe," \u2014 "),SO=n(RLe,"A",{href:!0});var Rmt=s(SO);Qpr=r(Rmt,"TFDebertaV2ForQuestionAnswering"),Rmt.forEach(t),Hpr=r(RLe," (DeBERTa-v2 model)"),RLe.forEach(t),Upr=i(re),fF=n(re,"LI",{});var SLe=s(fF);eue=n(SLe,"STRONG",{});var Smt=s(eue);Jpr=r(Smt,"distilbert"),Smt.forEach(t),Ypr=r(SLe," \u2014 "),PO=n(SLe,"A",{href:!0});var Pmt=s(PO);Kpr=r(Pmt,"TFDistilBertForQuestionAnswering"),Pmt.forEach(t),Zpr=r(SLe," (DistilBERT model)"),SLe.forEach(t),e_r=i(re),mF=n(re,"LI",{});var PLe=s(mF);oue=n(PLe,"STRONG",{});var $mt=s(oue);o_r=r($mt,"electra"),$mt.forEach(t),r_r=r(PLe," \u2014 "),$O=n(PLe,"A",{href:!0});var Imt=s($O);t_r=r(Imt,"TFElectraForQuestionAnswering"),Imt.forEach(t),a_r=r(PLe," (ELECTRA model)"),PLe.forEach(t),n_r=i(re),gF=n(re,"LI",{});var $Le=s(gF);rue=n($Le,"STRONG",{});var Dmt=s(rue);s_r=r(Dmt,"flaubert"),Dmt.forEach(t),l_r=r($Le," \u2014 "),IO=n($Le,"A",{href:!0});var jmt=s(IO);i_r=r(jmt,"TFFlaubertForQuestionAnsweringSimple"),jmt.forEach(t),d_r=r($Le," (FlauBERT model)"),$Le.forEach(t),c_r=i(re),hF=n(re,"LI",{});var ILe=s(hF);tue=n(ILe,"STRONG",{});var Nmt=s(tue);f_r=r(Nmt,"funnel"),Nmt.forEach(t),m_r=r(ILe," \u2014 "),DO=n(ILe,"A",{href:!0});var qmt=s(DO);g_r=r(qmt,"TFFunnelForQuestionAnswering"),qmt.forEach(t),h_r=r(ILe," (Funnel Transformer model)"),ILe.forEach(t),p_r=i(re),pF=n(re,"LI",{});var DLe=s(pF);aue=n(DLe,"STRONG",{});var Gmt=s(aue);__r=r(Gmt,"longformer"),Gmt.forEach(t),u_r=r(DLe," \u2014 "),jO=n(DLe,"A",{href:!0});var Omt=s(jO);b_r=r(Omt,"TFLongformerForQuestionAnswering"),Omt.forEach(t),v_r=r(DLe," (Longformer model)"),DLe.forEach(t),T_r=i(re),_F=n(re,"LI",{});var jLe=s(_F);nue=n(jLe,"STRONG",{});var Xmt=s(nue);F_r=r(Xmt,"mobilebert"),Xmt.forEach(t),C_r=r(jLe," \u2014 "),NO=n(jLe,"A",{href:!0});var Vmt=s(NO);M_r=r(Vmt,"TFMobileBertForQuestionAnswering"),Vmt.forEach(t),E_r=r(jLe," (MobileBERT model)"),jLe.forEach(t),y_r=i(re),uF=n(re,"LI",{});var NLe=s(uF);sue=n(NLe,"STRONG",{});var zmt=s(sue);w_r=r(zmt,"mpnet"),zmt.forEach(t),A_r=r(NLe," \u2014 "),qO=n(NLe,"A",{href:!0});var Wmt=s(qO);L_r=r(Wmt,"TFMPNetForQuestionAnswering"),Wmt.forEach(t),B_r=r(NLe," (MPNet model)"),NLe.forEach(t),x_r=i(re),bF=n(re,"LI",{});var qLe=s(bF);lue=n(qLe,"STRONG",{});var Qmt=s(lue);k_r=r(Qmt,"rembert"),Qmt.forEach(t),R_r=r(qLe," \u2014 "),GO=n(qLe,"A",{href:!0});var Hmt=s(GO);S_r=r(Hmt,"TFRemBertForQuestionAnswering"),Hmt.forEach(t),P_r=r(qLe," (RemBERT model)"),qLe.forEach(t),$_r=i(re),vF=n(re,"LI",{});var GLe=s(vF);iue=n(GLe,"STRONG",{});var Umt=s(iue);I_r=r(Umt,"roberta"),Umt.forEach(t),D_r=r(GLe," \u2014 "),OO=n(GLe,"A",{href:!0});var Jmt=s(OO);j_r=r(Jmt,"TFRobertaForQuestionAnswering"),Jmt.forEach(t),N_r=r(GLe," (RoBERTa model)"),GLe.forEach(t),q_r=i(re),TF=n(re,"LI",{});var OLe=s(TF);due=n(OLe,"STRONG",{});var Ymt=s(due);G_r=r(Ymt,"roformer"),Ymt.forEach(t),O_r=r(OLe," \u2014 "),XO=n(OLe,"A",{href:!0});var Kmt=s(XO);X_r=r(Kmt,"TFRoFormerForQuestionAnswering"),Kmt.forEach(t),V_r=r(OLe," (RoFormer model)"),OLe.forEach(t),z_r=i(re),FF=n(re,"LI",{});var XLe=s(FF);cue=n(XLe,"STRONG",{});var Zmt=s(cue);W_r=r(Zmt,"xlm"),Zmt.forEach(t),Q_r=r(XLe," \u2014 "),VO=n(XLe,"A",{href:!0});var egt=s(VO);H_r=r(egt,"TFXLMForQuestionAnsweringSimple"),egt.forEach(t),U_r=r(XLe," (XLM model)"),XLe.forEach(t),J_r=i(re),CF=n(re,"LI",{});var VLe=s(CF);fue=n(VLe,"STRONG",{});var ogt=s(fue);Y_r=r(ogt,"xlm-roberta"),ogt.forEach(t),K_r=r(VLe," \u2014 "),zO=n(VLe,"A",{href:!0});var rgt=s(zO);Z_r=r(rgt,"TFXLMRobertaForQuestionAnswering"),rgt.forEach(t),eur=r(VLe," (XLM-RoBERTa model)"),VLe.forEach(t),our=i(re),MF=n(re,"LI",{});var zLe=s(MF);mue=n(zLe,"STRONG",{});var tgt=s(mue);rur=r(tgt,"xlnet"),tgt.forEach(t),tur=r(zLe," \u2014 "),WO=n(zLe,"A",{href:!0});var agt=s(WO);aur=r(agt,"TFXLNetForQuestionAnsweringSimple"),agt.forEach(t),nur=r(zLe," (XLNet model)"),zLe.forEach(t),re.forEach(t),sur=i(Ta),gue=n(Ta,"P",{});var ngt=s(gue);lur=r(ngt,"Examples:"),ngt.forEach(t),iur=i(Ta),m(F6.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),axe=i(c),Pc=n(c,"H2",{class:!0});var hRe=s(Pc);EF=n(hRe,"A",{id:!0,class:!0,href:!0});var sgt=s(EF);hue=n(sgt,"SPAN",{});var lgt=s(hue);m(C6.$$.fragment,lgt),lgt.forEach(t),sgt.forEach(t),dur=i(hRe),pue=n(hRe,"SPAN",{});var igt=s(pue);cur=r(igt,"TFAutoModelForVision2Seq"),igt.forEach(t),hRe.forEach(t),nxe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(M6.$$.fragment,Zl),fur=i(Zl),$c=n(Zl,"P",{});var Jz=s($c);mur=r(Jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_ue=n(Jz,"CODE",{});var dgt=s(_ue);gur=r(dgt,"from_pretrained()"),dgt.forEach(t),hur=r(Jz,"class method or the "),uue=n(Jz,"CODE",{});var cgt=s(uue);pur=r(cgt,"from_config()"),cgt.forEach(t),_ur=r(Jz,`class
method.`),Jz.forEach(t),uur=i(Zl),E6=n(Zl,"P",{});var pRe=s(E6);bur=r(pRe,"This class cannot be instantiated directly using "),bue=n(pRe,"CODE",{});var fgt=s(bue);vur=r(fgt,"__init__()"),fgt.forEach(t),Tur=r(pRe," (throws an error)."),pRe.forEach(t),Fur=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(y6.$$.fragment,ei),Cur=i(ei),vue=n(ei,"P",{});var mgt=s(vue);Mur=r(mgt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mgt.forEach(t),Eur=i(ei),Ic=n(ei,"P",{});var Yz=s(Ic);yur=r(Yz,`Note:
Loading a model from its configuration file does `),Tue=n(Yz,"STRONG",{});var ggt=s(Tue);wur=r(ggt,"not"),ggt.forEach(t),Aur=r(Yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fue=n(Yz,"CODE",{});var hgt=s(Fue);Lur=r(hgt,"from_pretrained()"),hgt.forEach(t),Bur=r(Yz,"to load the model weights."),Yz.forEach(t),xur=i(ei),Cue=n(ei,"P",{});var pgt=s(Cue);kur=r(pgt,"Examples:"),pgt.forEach(t),Rur=i(ei),m(w6.$$.fragment,ei),ei.forEach(t),Sur=i(Zl),Eo=n(Zl,"DIV",{class:!0});var Fa=s(Eo);m(A6.$$.fragment,Fa),Pur=i(Fa),Mue=n(Fa,"P",{});var _gt=s(Mue);$ur=r(_gt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_gt.forEach(t),Iur=i(Fa),Fn=n(Fa,"P",{});var dM=s(Fn);Dur=r(dM,"The model class to instantiate is selected based on the "),Eue=n(dM,"CODE",{});var ugt=s(Eue);jur=r(ugt,"model_type"),ugt.forEach(t),Nur=r(dM,` property of the config object (either
passed as an argument or loaded from `),yue=n(dM,"CODE",{});var bgt=s(yue);qur=r(bgt,"pretrained_model_name_or_path"),bgt.forEach(t),Gur=r(dM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wue=n(dM,"CODE",{});var vgt=s(wue);Our=r(vgt,"pretrained_model_name_or_path"),vgt.forEach(t),Xur=r(dM,":"),dM.forEach(t),Vur=i(Fa),Aue=n(Fa,"UL",{});var Tgt=s(Aue);yF=n(Tgt,"LI",{});var WLe=s(yF);Lue=n(WLe,"STRONG",{});var Fgt=s(Lue);zur=r(Fgt,"vision-encoder-decoder"),Fgt.forEach(t),Wur=r(WLe," \u2014 "),QO=n(WLe,"A",{href:!0});var Cgt=s(QO);Qur=r(Cgt,"TFVisionEncoderDecoderModel"),Cgt.forEach(t),Hur=r(WLe," (Vision Encoder decoder model)"),WLe.forEach(t),Tgt.forEach(t),Uur=i(Fa),Bue=n(Fa,"P",{});var Mgt=s(Bue);Jur=r(Mgt,"Examples:"),Mgt.forEach(t),Yur=i(Fa),m(L6.$$.fragment,Fa),Fa.forEach(t),Zl.forEach(t),sxe=i(c),Dc=n(c,"H2",{class:!0});var _Re=s(Dc);wF=n(_Re,"A",{id:!0,class:!0,href:!0});var Egt=s(wF);xue=n(Egt,"SPAN",{});var ygt=s(xue);m(B6.$$.fragment,ygt),ygt.forEach(t),Egt.forEach(t),Kur=i(_Re),kue=n(_Re,"SPAN",{});var wgt=s(kue);Zur=r(wgt,"TFAutoModelForSpeechSeq2Seq"),wgt.forEach(t),_Re.forEach(t),lxe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(x6.$$.fragment,oi),e1r=i(oi),jc=n(oi,"P",{});var Kz=s(jc);o1r=r(Kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Rue=n(Kz,"CODE",{});var Agt=s(Rue);r1r=r(Agt,"from_pretrained()"),Agt.forEach(t),t1r=r(Kz,"class method or the "),Sue=n(Kz,"CODE",{});var Lgt=s(Sue);a1r=r(Lgt,"from_config()"),Lgt.forEach(t),n1r=r(Kz,`class
method.`),Kz.forEach(t),s1r=i(oi),k6=n(oi,"P",{});var uRe=s(k6);l1r=r(uRe,"This class cannot be instantiated directly using "),Pue=n(uRe,"CODE",{});var Bgt=s(Pue);i1r=r(Bgt,"__init__()"),Bgt.forEach(t),d1r=r(uRe," (throws an error)."),uRe.forEach(t),c1r=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(R6.$$.fragment,ri),f1r=i(ri),$ue=n(ri,"P",{});var xgt=s($ue);m1r=r(xgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xgt.forEach(t),g1r=i(ri),Nc=n(ri,"P",{});var Zz=s(Nc);h1r=r(Zz,`Note:
Loading a model from its configuration file does `),Iue=n(Zz,"STRONG",{});var kgt=s(Iue);p1r=r(kgt,"not"),kgt.forEach(t),_1r=r(Zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Due=n(Zz,"CODE",{});var Rgt=s(Due);u1r=r(Rgt,"from_pretrained()"),Rgt.forEach(t),b1r=r(Zz,"to load the model weights."),Zz.forEach(t),v1r=i(ri),jue=n(ri,"P",{});var Sgt=s(jue);T1r=r(Sgt,"Examples:"),Sgt.forEach(t),F1r=i(ri),m(S6.$$.fragment,ri),ri.forEach(t),C1r=i(oi),yo=n(oi,"DIV",{class:!0});var Ca=s(yo);m(P6.$$.fragment,Ca),M1r=i(Ca),Nue=n(Ca,"P",{});var Pgt=s(Nue);E1r=r(Pgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Pgt.forEach(t),y1r=i(Ca),Cn=n(Ca,"P",{});var cM=s(Cn);w1r=r(cM,"The model class to instantiate is selected based on the "),que=n(cM,"CODE",{});var $gt=s(que);A1r=r($gt,"model_type"),$gt.forEach(t),L1r=r(cM,` property of the config object (either
passed as an argument or loaded from `),Gue=n(cM,"CODE",{});var Igt=s(Gue);B1r=r(Igt,"pretrained_model_name_or_path"),Igt.forEach(t),x1r=r(cM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=n(cM,"CODE",{});var Dgt=s(Oue);k1r=r(Dgt,"pretrained_model_name_or_path"),Dgt.forEach(t),R1r=r(cM,":"),cM.forEach(t),S1r=i(Ca),Xue=n(Ca,"UL",{});var jgt=s(Xue);AF=n(jgt,"LI",{});var QLe=s(AF);Vue=n(QLe,"STRONG",{});var Ngt=s(Vue);P1r=r(Ngt,"speech_to_text"),Ngt.forEach(t),$1r=r(QLe," \u2014 "),HO=n(QLe,"A",{href:!0});var qgt=s(HO);I1r=r(qgt,"TFSpeech2TextForConditionalGeneration"),qgt.forEach(t),D1r=r(QLe," (Speech2Text model)"),QLe.forEach(t),jgt.forEach(t),j1r=i(Ca),zue=n(Ca,"P",{});var Ggt=s(zue);N1r=r(Ggt,"Examples:"),Ggt.forEach(t),q1r=i(Ca),m($6.$$.fragment,Ca),Ca.forEach(t),oi.forEach(t),ixe=i(c),qc=n(c,"H2",{class:!0});var bRe=s(qc);LF=n(bRe,"A",{id:!0,class:!0,href:!0});var Ogt=s(LF);Wue=n(Ogt,"SPAN",{});var Xgt=s(Wue);m(I6.$$.fragment,Xgt),Xgt.forEach(t),Ogt.forEach(t),G1r=i(bRe),Que=n(bRe,"SPAN",{});var Vgt=s(Que);O1r=r(Vgt,"FlaxAutoModel"),Vgt.forEach(t),bRe.forEach(t),dxe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(D6.$$.fragment,ti),X1r=i(ti),Gc=n(ti,"P",{});var eW=s(Gc);V1r=r(eW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Hue=n(eW,"CODE",{});var zgt=s(Hue);z1r=r(zgt,"from_pretrained()"),zgt.forEach(t),W1r=r(eW,"class method or the "),Uue=n(eW,"CODE",{});var Wgt=s(Uue);Q1r=r(Wgt,"from_config()"),Wgt.forEach(t),H1r=r(eW,`class
method.`),eW.forEach(t),U1r=i(ti),j6=n(ti,"P",{});var vRe=s(j6);J1r=r(vRe,"This class cannot be instantiated directly using "),Jue=n(vRe,"CODE",{});var Qgt=s(Jue);Y1r=r(Qgt,"__init__()"),Qgt.forEach(t),K1r=r(vRe," (throws an error)."),vRe.forEach(t),Z1r=i(ti),Ft=n(ti,"DIV",{class:!0});var ai=s(Ft);m(N6.$$.fragment,ai),e7r=i(ai),Yue=n(ai,"P",{});var Hgt=s(Yue);o7r=r(Hgt,"Instantiates one of the base model classes of the library from a configuration."),Hgt.forEach(t),r7r=i(ai),Oc=n(ai,"P",{});var oW=s(Oc);t7r=r(oW,`Note:
Loading a model from its configuration file does `),Kue=n(oW,"STRONG",{});var Ugt=s(Kue);a7r=r(Ugt,"not"),Ugt.forEach(t),n7r=r(oW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zue=n(oW,"CODE",{});var Jgt=s(Zue);s7r=r(Jgt,"from_pretrained()"),Jgt.forEach(t),l7r=r(oW,"to load the model weights."),oW.forEach(t),i7r=i(ai),e1e=n(ai,"P",{});var Ygt=s(e1e);d7r=r(Ygt,"Examples:"),Ygt.forEach(t),c7r=i(ai),m(q6.$$.fragment,ai),ai.forEach(t),f7r=i(ti),wo=n(ti,"DIV",{class:!0});var Ma=s(wo);m(G6.$$.fragment,Ma),m7r=i(Ma),o1e=n(Ma,"P",{});var Kgt=s(o1e);g7r=r(Kgt,"Instantiate one of the base model classes of the library from a pretrained model."),Kgt.forEach(t),h7r=i(Ma),Mn=n(Ma,"P",{});var fM=s(Mn);p7r=r(fM,"The model class to instantiate is selected based on the "),r1e=n(fM,"CODE",{});var Zgt=s(r1e);_7r=r(Zgt,"model_type"),Zgt.forEach(t),u7r=r(fM,` property of the config object (either
passed as an argument or loaded from `),t1e=n(fM,"CODE",{});var eht=s(t1e);b7r=r(eht,"pretrained_model_name_or_path"),eht.forEach(t),v7r=r(fM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=n(fM,"CODE",{});var oht=s(a1e);T7r=r(oht,"pretrained_model_name_or_path"),oht.forEach(t),F7r=r(fM,":"),fM.forEach(t),C7r=i(Ma),z=n(Ma,"UL",{});var Q=s(z);BF=n(Q,"LI",{});var HLe=s(BF);n1e=n(HLe,"STRONG",{});var rht=s(n1e);M7r=r(rht,"albert"),rht.forEach(t),E7r=r(HLe," \u2014 "),UO=n(HLe,"A",{href:!0});var tht=s(UO);y7r=r(tht,"FlaxAlbertModel"),tht.forEach(t),w7r=r(HLe," (ALBERT model)"),HLe.forEach(t),A7r=i(Q),xF=n(Q,"LI",{});var ULe=s(xF);s1e=n(ULe,"STRONG",{});var aht=s(s1e);L7r=r(aht,"bart"),aht.forEach(t),B7r=r(ULe," \u2014 "),JO=n(ULe,"A",{href:!0});var nht=s(JO);x7r=r(nht,"FlaxBartModel"),nht.forEach(t),k7r=r(ULe," (BART model)"),ULe.forEach(t),R7r=i(Q),kF=n(Q,"LI",{});var JLe=s(kF);l1e=n(JLe,"STRONG",{});var sht=s(l1e);S7r=r(sht,"beit"),sht.forEach(t),P7r=r(JLe," \u2014 "),YO=n(JLe,"A",{href:!0});var lht=s(YO);$7r=r(lht,"FlaxBeitModel"),lht.forEach(t),I7r=r(JLe," (BEiT model)"),JLe.forEach(t),D7r=i(Q),RF=n(Q,"LI",{});var YLe=s(RF);i1e=n(YLe,"STRONG",{});var iht=s(i1e);j7r=r(iht,"bert"),iht.forEach(t),N7r=r(YLe," \u2014 "),KO=n(YLe,"A",{href:!0});var dht=s(KO);q7r=r(dht,"FlaxBertModel"),dht.forEach(t),G7r=r(YLe," (BERT model)"),YLe.forEach(t),O7r=i(Q),SF=n(Q,"LI",{});var KLe=s(SF);d1e=n(KLe,"STRONG",{});var cht=s(d1e);X7r=r(cht,"big_bird"),cht.forEach(t),V7r=r(KLe," \u2014 "),ZO=n(KLe,"A",{href:!0});var fht=s(ZO);z7r=r(fht,"FlaxBigBirdModel"),fht.forEach(t),W7r=r(KLe," (BigBird model)"),KLe.forEach(t),Q7r=i(Q),PF=n(Q,"LI",{});var ZLe=s(PF);c1e=n(ZLe,"STRONG",{});var mht=s(c1e);H7r=r(mht,"blenderbot"),mht.forEach(t),U7r=r(ZLe," \u2014 "),eX=n(ZLe,"A",{href:!0});var ght=s(eX);J7r=r(ght,"FlaxBlenderbotModel"),ght.forEach(t),Y7r=r(ZLe," (Blenderbot model)"),ZLe.forEach(t),K7r=i(Q),$F=n(Q,"LI",{});var e8e=s($F);f1e=n(e8e,"STRONG",{});var hht=s(f1e);Z7r=r(hht,"blenderbot-small"),hht.forEach(t),ebr=r(e8e," \u2014 "),oX=n(e8e,"A",{href:!0});var pht=s(oX);obr=r(pht,"FlaxBlenderbotSmallModel"),pht.forEach(t),rbr=r(e8e," (BlenderbotSmall model)"),e8e.forEach(t),tbr=i(Q),IF=n(Q,"LI",{});var o8e=s(IF);m1e=n(o8e,"STRONG",{});var _ht=s(m1e);abr=r(_ht,"clip"),_ht.forEach(t),nbr=r(o8e," \u2014 "),rX=n(o8e,"A",{href:!0});var uht=s(rX);sbr=r(uht,"FlaxCLIPModel"),uht.forEach(t),lbr=r(o8e," (CLIP model)"),o8e.forEach(t),ibr=i(Q),DF=n(Q,"LI",{});var r8e=s(DF);g1e=n(r8e,"STRONG",{});var bht=s(g1e);dbr=r(bht,"distilbert"),bht.forEach(t),cbr=r(r8e," \u2014 "),tX=n(r8e,"A",{href:!0});var vht=s(tX);fbr=r(vht,"FlaxDistilBertModel"),vht.forEach(t),mbr=r(r8e," (DistilBERT model)"),r8e.forEach(t),gbr=i(Q),jF=n(Q,"LI",{});var t8e=s(jF);h1e=n(t8e,"STRONG",{});var Tht=s(h1e);hbr=r(Tht,"electra"),Tht.forEach(t),pbr=r(t8e," \u2014 "),aX=n(t8e,"A",{href:!0});var Fht=s(aX);_br=r(Fht,"FlaxElectraModel"),Fht.forEach(t),ubr=r(t8e," (ELECTRA model)"),t8e.forEach(t),bbr=i(Q),NF=n(Q,"LI",{});var a8e=s(NF);p1e=n(a8e,"STRONG",{});var Cht=s(p1e);vbr=r(Cht,"gpt2"),Cht.forEach(t),Tbr=r(a8e," \u2014 "),nX=n(a8e,"A",{href:!0});var Mht=s(nX);Fbr=r(Mht,"FlaxGPT2Model"),Mht.forEach(t),Cbr=r(a8e," (OpenAI GPT-2 model)"),a8e.forEach(t),Mbr=i(Q),qF=n(Q,"LI",{});var n8e=s(qF);_1e=n(n8e,"STRONG",{});var Eht=s(_1e);Ebr=r(Eht,"gpt_neo"),Eht.forEach(t),ybr=r(n8e," \u2014 "),sX=n(n8e,"A",{href:!0});var yht=s(sX);wbr=r(yht,"FlaxGPTNeoModel"),yht.forEach(t),Abr=r(n8e," (GPT Neo model)"),n8e.forEach(t),Lbr=i(Q),GF=n(Q,"LI",{});var s8e=s(GF);u1e=n(s8e,"STRONG",{});var wht=s(u1e);Bbr=r(wht,"gptj"),wht.forEach(t),xbr=r(s8e," \u2014 "),lX=n(s8e,"A",{href:!0});var Aht=s(lX);kbr=r(Aht,"FlaxGPTJModel"),Aht.forEach(t),Rbr=r(s8e," (GPT-J model)"),s8e.forEach(t),Sbr=i(Q),OF=n(Q,"LI",{});var l8e=s(OF);b1e=n(l8e,"STRONG",{});var Lht=s(b1e);Pbr=r(Lht,"marian"),Lht.forEach(t),$br=r(l8e," \u2014 "),iX=n(l8e,"A",{href:!0});var Bht=s(iX);Ibr=r(Bht,"FlaxMarianModel"),Bht.forEach(t),Dbr=r(l8e," (Marian model)"),l8e.forEach(t),jbr=i(Q),XF=n(Q,"LI",{});var i8e=s(XF);v1e=n(i8e,"STRONG",{});var xht=s(v1e);Nbr=r(xht,"mbart"),xht.forEach(t),qbr=r(i8e," \u2014 "),dX=n(i8e,"A",{href:!0});var kht=s(dX);Gbr=r(kht,"FlaxMBartModel"),kht.forEach(t),Obr=r(i8e," (mBART model)"),i8e.forEach(t),Xbr=i(Q),VF=n(Q,"LI",{});var d8e=s(VF);T1e=n(d8e,"STRONG",{});var Rht=s(T1e);Vbr=r(Rht,"mt5"),Rht.forEach(t),zbr=r(d8e," \u2014 "),cX=n(d8e,"A",{href:!0});var Sht=s(cX);Wbr=r(Sht,"FlaxMT5Model"),Sht.forEach(t),Qbr=r(d8e," (mT5 model)"),d8e.forEach(t),Hbr=i(Q),zF=n(Q,"LI",{});var c8e=s(zF);F1e=n(c8e,"STRONG",{});var Pht=s(F1e);Ubr=r(Pht,"pegasus"),Pht.forEach(t),Jbr=r(c8e," \u2014 "),fX=n(c8e,"A",{href:!0});var $ht=s(fX);Ybr=r($ht,"FlaxPegasusModel"),$ht.forEach(t),Kbr=r(c8e," (Pegasus model)"),c8e.forEach(t),Zbr=i(Q),WF=n(Q,"LI",{});var f8e=s(WF);C1e=n(f8e,"STRONG",{});var Iht=s(C1e);e5r=r(Iht,"roberta"),Iht.forEach(t),o5r=r(f8e," \u2014 "),mX=n(f8e,"A",{href:!0});var Dht=s(mX);r5r=r(Dht,"FlaxRobertaModel"),Dht.forEach(t),t5r=r(f8e," (RoBERTa model)"),f8e.forEach(t),a5r=i(Q),QF=n(Q,"LI",{});var m8e=s(QF);M1e=n(m8e,"STRONG",{});var jht=s(M1e);n5r=r(jht,"roformer"),jht.forEach(t),s5r=r(m8e," \u2014 "),gX=n(m8e,"A",{href:!0});var Nht=s(gX);l5r=r(Nht,"FlaxRoFormerModel"),Nht.forEach(t),i5r=r(m8e," (RoFormer model)"),m8e.forEach(t),d5r=i(Q),HF=n(Q,"LI",{});var g8e=s(HF);E1e=n(g8e,"STRONG",{});var qht=s(E1e);c5r=r(qht,"t5"),qht.forEach(t),f5r=r(g8e," \u2014 "),hX=n(g8e,"A",{href:!0});var Ght=s(hX);m5r=r(Ght,"FlaxT5Model"),Ght.forEach(t),g5r=r(g8e," (T5 model)"),g8e.forEach(t),h5r=i(Q),UF=n(Q,"LI",{});var h8e=s(UF);y1e=n(h8e,"STRONG",{});var Oht=s(y1e);p5r=r(Oht,"vision-text-dual-encoder"),Oht.forEach(t),_5r=r(h8e," \u2014 "),pX=n(h8e,"A",{href:!0});var Xht=s(pX);u5r=r(Xht,"FlaxVisionTextDualEncoderModel"),Xht.forEach(t),b5r=r(h8e," (VisionTextDualEncoder model)"),h8e.forEach(t),v5r=i(Q),JF=n(Q,"LI",{});var p8e=s(JF);w1e=n(p8e,"STRONG",{});var Vht=s(w1e);T5r=r(Vht,"vit"),Vht.forEach(t),F5r=r(p8e," \u2014 "),_X=n(p8e,"A",{href:!0});var zht=s(_X);C5r=r(zht,"FlaxViTModel"),zht.forEach(t),M5r=r(p8e," (ViT model)"),p8e.forEach(t),E5r=i(Q),YF=n(Q,"LI",{});var _8e=s(YF);A1e=n(_8e,"STRONG",{});var Wht=s(A1e);y5r=r(Wht,"wav2vec2"),Wht.forEach(t),w5r=r(_8e," \u2014 "),uX=n(_8e,"A",{href:!0});var Qht=s(uX);A5r=r(Qht,"FlaxWav2Vec2Model"),Qht.forEach(t),L5r=r(_8e," (Wav2Vec2 model)"),_8e.forEach(t),B5r=i(Q),KF=n(Q,"LI",{});var u8e=s(KF);L1e=n(u8e,"STRONG",{});var Hht=s(L1e);x5r=r(Hht,"xglm"),Hht.forEach(t),k5r=r(u8e," \u2014 "),bX=n(u8e,"A",{href:!0});var Uht=s(bX);R5r=r(Uht,"FlaxXGLMModel"),Uht.forEach(t),S5r=r(u8e," (XGLM model)"),u8e.forEach(t),Q.forEach(t),P5r=i(Ma),B1e=n(Ma,"P",{});var Jht=s(B1e);$5r=r(Jht,"Examples:"),Jht.forEach(t),I5r=i(Ma),m(O6.$$.fragment,Ma),Ma.forEach(t),ti.forEach(t),cxe=i(c),Xc=n(c,"H2",{class:!0});var TRe=s(Xc);ZF=n(TRe,"A",{id:!0,class:!0,href:!0});var Yht=s(ZF);x1e=n(Yht,"SPAN",{});var Kht=s(x1e);m(X6.$$.fragment,Kht),Kht.forEach(t),Yht.forEach(t),D5r=i(TRe),k1e=n(TRe,"SPAN",{});var Zht=s(k1e);j5r=r(Zht,"FlaxAutoModelForCausalLM"),Zht.forEach(t),TRe.forEach(t),fxe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(V6.$$.fragment,ni),N5r=i(ni),Vc=n(ni,"P",{});var rW=s(Vc);q5r=r(rW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),R1e=n(rW,"CODE",{});var ept=s(R1e);G5r=r(ept,"from_pretrained()"),ept.forEach(t),O5r=r(rW,"class method or the "),S1e=n(rW,"CODE",{});var opt=s(S1e);X5r=r(opt,"from_config()"),opt.forEach(t),V5r=r(rW,`class
method.`),rW.forEach(t),z5r=i(ni),z6=n(ni,"P",{});var FRe=s(z6);W5r=r(FRe,"This class cannot be instantiated directly using "),P1e=n(FRe,"CODE",{});var rpt=s(P1e);Q5r=r(rpt,"__init__()"),rpt.forEach(t),H5r=r(FRe," (throws an error)."),FRe.forEach(t),U5r=i(ni),Ct=n(ni,"DIV",{class:!0});var si=s(Ct);m(W6.$$.fragment,si),J5r=i(si),$1e=n(si,"P",{});var tpt=s($1e);Y5r=r(tpt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),tpt.forEach(t),K5r=i(si),zc=n(si,"P",{});var tW=s(zc);Z5r=r(tW,`Note:
Loading a model from its configuration file does `),I1e=n(tW,"STRONG",{});var apt=s(I1e);e2r=r(apt,"not"),apt.forEach(t),o2r=r(tW,` load the model weights. It only affects the
model\u2019s configuration. Use `),D1e=n(tW,"CODE",{});var npt=s(D1e);r2r=r(npt,"from_pretrained()"),npt.forEach(t),t2r=r(tW,"to load the model weights."),tW.forEach(t),a2r=i(si),j1e=n(si,"P",{});var spt=s(j1e);n2r=r(spt,"Examples:"),spt.forEach(t),s2r=i(si),m(Q6.$$.fragment,si),si.forEach(t),l2r=i(ni),Ao=n(ni,"DIV",{class:!0});var Ea=s(Ao);m(H6.$$.fragment,Ea),i2r=i(Ea),N1e=n(Ea,"P",{});var lpt=s(N1e);d2r=r(lpt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lpt.forEach(t),c2r=i(Ea),En=n(Ea,"P",{});var mM=s(En);f2r=r(mM,"The model class to instantiate is selected based on the "),q1e=n(mM,"CODE",{});var ipt=s(q1e);m2r=r(ipt,"model_type"),ipt.forEach(t),g2r=r(mM,` property of the config object (either
passed as an argument or loaded from `),G1e=n(mM,"CODE",{});var dpt=s(G1e);h2r=r(dpt,"pretrained_model_name_or_path"),dpt.forEach(t),p2r=r(mM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=n(mM,"CODE",{});var cpt=s(O1e);_2r=r(cpt,"pretrained_model_name_or_path"),cpt.forEach(t),u2r=r(mM,":"),mM.forEach(t),b2r=i(Ea),yn=n(Ea,"UL",{});var gM=s(yn);eC=n(gM,"LI",{});var b8e=s(eC);X1e=n(b8e,"STRONG",{});var fpt=s(X1e);v2r=r(fpt,"gpt2"),fpt.forEach(t),T2r=r(b8e," \u2014 "),vX=n(b8e,"A",{href:!0});var mpt=s(vX);F2r=r(mpt,"FlaxGPT2LMHeadModel"),mpt.forEach(t),C2r=r(b8e," (OpenAI GPT-2 model)"),b8e.forEach(t),M2r=i(gM),oC=n(gM,"LI",{});var v8e=s(oC);V1e=n(v8e,"STRONG",{});var gpt=s(V1e);E2r=r(gpt,"gpt_neo"),gpt.forEach(t),y2r=r(v8e," \u2014 "),TX=n(v8e,"A",{href:!0});var hpt=s(TX);w2r=r(hpt,"FlaxGPTNeoForCausalLM"),hpt.forEach(t),A2r=r(v8e," (GPT Neo model)"),v8e.forEach(t),L2r=i(gM),rC=n(gM,"LI",{});var T8e=s(rC);z1e=n(T8e,"STRONG",{});var ppt=s(z1e);B2r=r(ppt,"gptj"),ppt.forEach(t),x2r=r(T8e," \u2014 "),FX=n(T8e,"A",{href:!0});var _pt=s(FX);k2r=r(_pt,"FlaxGPTJForCausalLM"),_pt.forEach(t),R2r=r(T8e," (GPT-J model)"),T8e.forEach(t),S2r=i(gM),tC=n(gM,"LI",{});var F8e=s(tC);W1e=n(F8e,"STRONG",{});var upt=s(W1e);P2r=r(upt,"xglm"),upt.forEach(t),$2r=r(F8e," \u2014 "),CX=n(F8e,"A",{href:!0});var bpt=s(CX);I2r=r(bpt,"FlaxXGLMForCausalLM"),bpt.forEach(t),D2r=r(F8e," (XGLM model)"),F8e.forEach(t),gM.forEach(t),j2r=i(Ea),Q1e=n(Ea,"P",{});var vpt=s(Q1e);N2r=r(vpt,"Examples:"),vpt.forEach(t),q2r=i(Ea),m(U6.$$.fragment,Ea),Ea.forEach(t),ni.forEach(t),mxe=i(c),Wc=n(c,"H2",{class:!0});var CRe=s(Wc);aC=n(CRe,"A",{id:!0,class:!0,href:!0});var Tpt=s(aC);H1e=n(Tpt,"SPAN",{});var Fpt=s(H1e);m(J6.$$.fragment,Fpt),Fpt.forEach(t),Tpt.forEach(t),G2r=i(CRe),U1e=n(CRe,"SPAN",{});var Cpt=s(U1e);O2r=r(Cpt,"FlaxAutoModelForPreTraining"),Cpt.forEach(t),CRe.forEach(t),gxe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(Y6.$$.fragment,li),X2r=i(li),Qc=n(li,"P",{});var aW=s(Qc);V2r=r(aW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),J1e=n(aW,"CODE",{});var Mpt=s(J1e);z2r=r(Mpt,"from_pretrained()"),Mpt.forEach(t),W2r=r(aW,"class method or the "),Y1e=n(aW,"CODE",{});var Ept=s(Y1e);Q2r=r(Ept,"from_config()"),Ept.forEach(t),H2r=r(aW,`class
method.`),aW.forEach(t),U2r=i(li),K6=n(li,"P",{});var MRe=s(K6);J2r=r(MRe,"This class cannot be instantiated directly using "),K1e=n(MRe,"CODE",{});var ypt=s(K1e);Y2r=r(ypt,"__init__()"),ypt.forEach(t),K2r=r(MRe," (throws an error)."),MRe.forEach(t),Z2r=i(li),Mt=n(li,"DIV",{class:!0});var ii=s(Mt);m(Z6.$$.fragment,ii),evr=i(ii),Z1e=n(ii,"P",{});var wpt=s(Z1e);ovr=r(wpt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wpt.forEach(t),rvr=i(ii),Hc=n(ii,"P",{});var nW=s(Hc);tvr=r(nW,`Note:
Loading a model from its configuration file does `),e7e=n(nW,"STRONG",{});var Apt=s(e7e);avr=r(Apt,"not"),Apt.forEach(t),nvr=r(nW,` load the model weights. It only affects the
model\u2019s configuration. Use `),o7e=n(nW,"CODE",{});var Lpt=s(o7e);svr=r(Lpt,"from_pretrained()"),Lpt.forEach(t),lvr=r(nW,"to load the model weights."),nW.forEach(t),ivr=i(ii),r7e=n(ii,"P",{});var Bpt=s(r7e);dvr=r(Bpt,"Examples:"),Bpt.forEach(t),cvr=i(ii),m(eA.$$.fragment,ii),ii.forEach(t),fvr=i(li),Lo=n(li,"DIV",{class:!0});var ya=s(Lo);m(oA.$$.fragment,ya),mvr=i(ya),t7e=n(ya,"P",{});var xpt=s(t7e);gvr=r(xpt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xpt.forEach(t),hvr=i(ya),wn=n(ya,"P",{});var hM=s(wn);pvr=r(hM,"The model class to instantiate is selected based on the "),a7e=n(hM,"CODE",{});var kpt=s(a7e);_vr=r(kpt,"model_type"),kpt.forEach(t),uvr=r(hM,` property of the config object (either
passed as an argument or loaded from `),n7e=n(hM,"CODE",{});var Rpt=s(n7e);bvr=r(Rpt,"pretrained_model_name_or_path"),Rpt.forEach(t),vvr=r(hM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=n(hM,"CODE",{});var Spt=s(s7e);Tvr=r(Spt,"pretrained_model_name_or_path"),Spt.forEach(t),Fvr=r(hM,":"),hM.forEach(t),Cvr=i(ya),fe=n(ya,"UL",{});var ue=s(fe);nC=n(ue,"LI",{});var C8e=s(nC);l7e=n(C8e,"STRONG",{});var Ppt=s(l7e);Mvr=r(Ppt,"albert"),Ppt.forEach(t),Evr=r(C8e," \u2014 "),MX=n(C8e,"A",{href:!0});var $pt=s(MX);yvr=r($pt,"FlaxAlbertForPreTraining"),$pt.forEach(t),wvr=r(C8e," (ALBERT model)"),C8e.forEach(t),Avr=i(ue),sC=n(ue,"LI",{});var M8e=s(sC);i7e=n(M8e,"STRONG",{});var Ipt=s(i7e);Lvr=r(Ipt,"bart"),Ipt.forEach(t),Bvr=r(M8e," \u2014 "),EX=n(M8e,"A",{href:!0});var Dpt=s(EX);xvr=r(Dpt,"FlaxBartForConditionalGeneration"),Dpt.forEach(t),kvr=r(M8e," (BART model)"),M8e.forEach(t),Rvr=i(ue),lC=n(ue,"LI",{});var E8e=s(lC);d7e=n(E8e,"STRONG",{});var jpt=s(d7e);Svr=r(jpt,"bert"),jpt.forEach(t),Pvr=r(E8e," \u2014 "),yX=n(E8e,"A",{href:!0});var Npt=s(yX);$vr=r(Npt,"FlaxBertForPreTraining"),Npt.forEach(t),Ivr=r(E8e," (BERT model)"),E8e.forEach(t),Dvr=i(ue),iC=n(ue,"LI",{});var y8e=s(iC);c7e=n(y8e,"STRONG",{});var qpt=s(c7e);jvr=r(qpt,"big_bird"),qpt.forEach(t),Nvr=r(y8e," \u2014 "),wX=n(y8e,"A",{href:!0});var Gpt=s(wX);qvr=r(Gpt,"FlaxBigBirdForPreTraining"),Gpt.forEach(t),Gvr=r(y8e," (BigBird model)"),y8e.forEach(t),Ovr=i(ue),dC=n(ue,"LI",{});var w8e=s(dC);f7e=n(w8e,"STRONG",{});var Opt=s(f7e);Xvr=r(Opt,"electra"),Opt.forEach(t),Vvr=r(w8e," \u2014 "),AX=n(w8e,"A",{href:!0});var Xpt=s(AX);zvr=r(Xpt,"FlaxElectraForPreTraining"),Xpt.forEach(t),Wvr=r(w8e," (ELECTRA model)"),w8e.forEach(t),Qvr=i(ue),cC=n(ue,"LI",{});var A8e=s(cC);m7e=n(A8e,"STRONG",{});var Vpt=s(m7e);Hvr=r(Vpt,"mbart"),Vpt.forEach(t),Uvr=r(A8e," \u2014 "),LX=n(A8e,"A",{href:!0});var zpt=s(LX);Jvr=r(zpt,"FlaxMBartForConditionalGeneration"),zpt.forEach(t),Yvr=r(A8e," (mBART model)"),A8e.forEach(t),Kvr=i(ue),fC=n(ue,"LI",{});var L8e=s(fC);g7e=n(L8e,"STRONG",{});var Wpt=s(g7e);Zvr=r(Wpt,"mt5"),Wpt.forEach(t),e0r=r(L8e," \u2014 "),BX=n(L8e,"A",{href:!0});var Qpt=s(BX);o0r=r(Qpt,"FlaxMT5ForConditionalGeneration"),Qpt.forEach(t),r0r=r(L8e," (mT5 model)"),L8e.forEach(t),t0r=i(ue),mC=n(ue,"LI",{});var B8e=s(mC);h7e=n(B8e,"STRONG",{});var Hpt=s(h7e);a0r=r(Hpt,"roberta"),Hpt.forEach(t),n0r=r(B8e," \u2014 "),xX=n(B8e,"A",{href:!0});var Upt=s(xX);s0r=r(Upt,"FlaxRobertaForMaskedLM"),Upt.forEach(t),l0r=r(B8e," (RoBERTa model)"),B8e.forEach(t),i0r=i(ue),gC=n(ue,"LI",{});var x8e=s(gC);p7e=n(x8e,"STRONG",{});var Jpt=s(p7e);d0r=r(Jpt,"roformer"),Jpt.forEach(t),c0r=r(x8e," \u2014 "),kX=n(x8e,"A",{href:!0});var Ypt=s(kX);f0r=r(Ypt,"FlaxRoFormerForMaskedLM"),Ypt.forEach(t),m0r=r(x8e," (RoFormer model)"),x8e.forEach(t),g0r=i(ue),hC=n(ue,"LI",{});var k8e=s(hC);_7e=n(k8e,"STRONG",{});var Kpt=s(_7e);h0r=r(Kpt,"t5"),Kpt.forEach(t),p0r=r(k8e," \u2014 "),RX=n(k8e,"A",{href:!0});var Zpt=s(RX);_0r=r(Zpt,"FlaxT5ForConditionalGeneration"),Zpt.forEach(t),u0r=r(k8e," (T5 model)"),k8e.forEach(t),b0r=i(ue),pC=n(ue,"LI",{});var R8e=s(pC);u7e=n(R8e,"STRONG",{});var e_t=s(u7e);v0r=r(e_t,"wav2vec2"),e_t.forEach(t),T0r=r(R8e," \u2014 "),SX=n(R8e,"A",{href:!0});var o_t=s(SX);F0r=r(o_t,"FlaxWav2Vec2ForPreTraining"),o_t.forEach(t),C0r=r(R8e," (Wav2Vec2 model)"),R8e.forEach(t),ue.forEach(t),M0r=i(ya),b7e=n(ya,"P",{});var r_t=s(b7e);E0r=r(r_t,"Examples:"),r_t.forEach(t),y0r=i(ya),m(rA.$$.fragment,ya),ya.forEach(t),li.forEach(t),hxe=i(c),Uc=n(c,"H2",{class:!0});var ERe=s(Uc);_C=n(ERe,"A",{id:!0,class:!0,href:!0});var t_t=s(_C);v7e=n(t_t,"SPAN",{});var a_t=s(v7e);m(tA.$$.fragment,a_t),a_t.forEach(t),t_t.forEach(t),w0r=i(ERe),T7e=n(ERe,"SPAN",{});var n_t=s(T7e);A0r=r(n_t,"FlaxAutoModelForMaskedLM"),n_t.forEach(t),ERe.forEach(t),pxe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(aA.$$.fragment,di),L0r=i(di),Jc=n(di,"P",{});var sW=s(Jc);B0r=r(sW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),F7e=n(sW,"CODE",{});var s_t=s(F7e);x0r=r(s_t,"from_pretrained()"),s_t.forEach(t),k0r=r(sW,"class method or the "),C7e=n(sW,"CODE",{});var l_t=s(C7e);R0r=r(l_t,"from_config()"),l_t.forEach(t),S0r=r(sW,`class
method.`),sW.forEach(t),P0r=i(di),nA=n(di,"P",{});var yRe=s(nA);$0r=r(yRe,"This class cannot be instantiated directly using "),M7e=n(yRe,"CODE",{});var i_t=s(M7e);I0r=r(i_t,"__init__()"),i_t.forEach(t),D0r=r(yRe," (throws an error)."),yRe.forEach(t),j0r=i(di),Et=n(di,"DIV",{class:!0});var ci=s(Et);m(sA.$$.fragment,ci),N0r=i(ci),E7e=n(ci,"P",{});var d_t=s(E7e);q0r=r(d_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),d_t.forEach(t),G0r=i(ci),Yc=n(ci,"P",{});var lW=s(Yc);O0r=r(lW,`Note:
Loading a model from its configuration file does `),y7e=n(lW,"STRONG",{});var c_t=s(y7e);X0r=r(c_t,"not"),c_t.forEach(t),V0r=r(lW,` load the model weights. It only affects the
model\u2019s configuration. Use `),w7e=n(lW,"CODE",{});var f_t=s(w7e);z0r=r(f_t,"from_pretrained()"),f_t.forEach(t),W0r=r(lW,"to load the model weights."),lW.forEach(t),Q0r=i(ci),A7e=n(ci,"P",{});var m_t=s(A7e);H0r=r(m_t,"Examples:"),m_t.forEach(t),U0r=i(ci),m(lA.$$.fragment,ci),ci.forEach(t),J0r=i(di),Bo=n(di,"DIV",{class:!0});var wa=s(Bo);m(iA.$$.fragment,wa),Y0r=i(wa),L7e=n(wa,"P",{});var g_t=s(L7e);K0r=r(g_t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),g_t.forEach(t),Z0r=i(wa),An=n(wa,"P",{});var pM=s(An);eTr=r(pM,"The model class to instantiate is selected based on the "),B7e=n(pM,"CODE",{});var h_t=s(B7e);oTr=r(h_t,"model_type"),h_t.forEach(t),rTr=r(pM,` property of the config object (either
passed as an argument or loaded from `),x7e=n(pM,"CODE",{});var p_t=s(x7e);tTr=r(p_t,"pretrained_model_name_or_path"),p_t.forEach(t),aTr=r(pM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k7e=n(pM,"CODE",{});var __t=s(k7e);nTr=r(__t,"pretrained_model_name_or_path"),__t.forEach(t),sTr=r(pM,":"),pM.forEach(t),lTr=i(wa),ve=n(wa,"UL",{});var oo=s(ve);uC=n(oo,"LI",{});var S8e=s(uC);R7e=n(S8e,"STRONG",{});var u_t=s(R7e);iTr=r(u_t,"albert"),u_t.forEach(t),dTr=r(S8e," \u2014 "),PX=n(S8e,"A",{href:!0});var b_t=s(PX);cTr=r(b_t,"FlaxAlbertForMaskedLM"),b_t.forEach(t),fTr=r(S8e," (ALBERT model)"),S8e.forEach(t),mTr=i(oo),bC=n(oo,"LI",{});var P8e=s(bC);S7e=n(P8e,"STRONG",{});var v_t=s(S7e);gTr=r(v_t,"bart"),v_t.forEach(t),hTr=r(P8e," \u2014 "),$X=n(P8e,"A",{href:!0});var T_t=s($X);pTr=r(T_t,"FlaxBartForConditionalGeneration"),T_t.forEach(t),_Tr=r(P8e," (BART model)"),P8e.forEach(t),uTr=i(oo),vC=n(oo,"LI",{});var $8e=s(vC);P7e=n($8e,"STRONG",{});var F_t=s(P7e);bTr=r(F_t,"bert"),F_t.forEach(t),vTr=r($8e," \u2014 "),IX=n($8e,"A",{href:!0});var C_t=s(IX);TTr=r(C_t,"FlaxBertForMaskedLM"),C_t.forEach(t),FTr=r($8e," (BERT model)"),$8e.forEach(t),CTr=i(oo),TC=n(oo,"LI",{});var I8e=s(TC);$7e=n(I8e,"STRONG",{});var M_t=s($7e);MTr=r(M_t,"big_bird"),M_t.forEach(t),ETr=r(I8e," \u2014 "),DX=n(I8e,"A",{href:!0});var E_t=s(DX);yTr=r(E_t,"FlaxBigBirdForMaskedLM"),E_t.forEach(t),wTr=r(I8e," (BigBird model)"),I8e.forEach(t),ATr=i(oo),FC=n(oo,"LI",{});var D8e=s(FC);I7e=n(D8e,"STRONG",{});var y_t=s(I7e);LTr=r(y_t,"distilbert"),y_t.forEach(t),BTr=r(D8e," \u2014 "),jX=n(D8e,"A",{href:!0});var w_t=s(jX);xTr=r(w_t,"FlaxDistilBertForMaskedLM"),w_t.forEach(t),kTr=r(D8e," (DistilBERT model)"),D8e.forEach(t),RTr=i(oo),CC=n(oo,"LI",{});var j8e=s(CC);D7e=n(j8e,"STRONG",{});var A_t=s(D7e);STr=r(A_t,"electra"),A_t.forEach(t),PTr=r(j8e," \u2014 "),NX=n(j8e,"A",{href:!0});var L_t=s(NX);$Tr=r(L_t,"FlaxElectraForMaskedLM"),L_t.forEach(t),ITr=r(j8e," (ELECTRA model)"),j8e.forEach(t),DTr=i(oo),MC=n(oo,"LI",{});var N8e=s(MC);j7e=n(N8e,"STRONG",{});var B_t=s(j7e);jTr=r(B_t,"mbart"),B_t.forEach(t),NTr=r(N8e," \u2014 "),qX=n(N8e,"A",{href:!0});var x_t=s(qX);qTr=r(x_t,"FlaxMBartForConditionalGeneration"),x_t.forEach(t),GTr=r(N8e," (mBART model)"),N8e.forEach(t),OTr=i(oo),EC=n(oo,"LI",{});var q8e=s(EC);N7e=n(q8e,"STRONG",{});var k_t=s(N7e);XTr=r(k_t,"roberta"),k_t.forEach(t),VTr=r(q8e," \u2014 "),GX=n(q8e,"A",{href:!0});var R_t=s(GX);zTr=r(R_t,"FlaxRobertaForMaskedLM"),R_t.forEach(t),WTr=r(q8e," (RoBERTa model)"),q8e.forEach(t),QTr=i(oo),yC=n(oo,"LI",{});var G8e=s(yC);q7e=n(G8e,"STRONG",{});var S_t=s(q7e);HTr=r(S_t,"roformer"),S_t.forEach(t),UTr=r(G8e," \u2014 "),OX=n(G8e,"A",{href:!0});var P_t=s(OX);JTr=r(P_t,"FlaxRoFormerForMaskedLM"),P_t.forEach(t),YTr=r(G8e," (RoFormer model)"),G8e.forEach(t),oo.forEach(t),KTr=i(wa),G7e=n(wa,"P",{});var $_t=s(G7e);ZTr=r($_t,"Examples:"),$_t.forEach(t),eFr=i(wa),m(dA.$$.fragment,wa),wa.forEach(t),di.forEach(t),_xe=i(c),Kc=n(c,"H2",{class:!0});var wRe=s(Kc);wC=n(wRe,"A",{id:!0,class:!0,href:!0});var I_t=s(wC);O7e=n(I_t,"SPAN",{});var D_t=s(O7e);m(cA.$$.fragment,D_t),D_t.forEach(t),I_t.forEach(t),oFr=i(wRe),X7e=n(wRe,"SPAN",{});var j_t=s(X7e);rFr=r(j_t,"FlaxAutoModelForSeq2SeqLM"),j_t.forEach(t),wRe.forEach(t),uxe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(fA.$$.fragment,fi),tFr=i(fi),Zc=n(fi,"P",{});var iW=s(Zc);aFr=r(iW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),V7e=n(iW,"CODE",{});var N_t=s(V7e);nFr=r(N_t,"from_pretrained()"),N_t.forEach(t),sFr=r(iW,"class method or the "),z7e=n(iW,"CODE",{});var q_t=s(z7e);lFr=r(q_t,"from_config()"),q_t.forEach(t),iFr=r(iW,`class
method.`),iW.forEach(t),dFr=i(fi),mA=n(fi,"P",{});var ARe=s(mA);cFr=r(ARe,"This class cannot be instantiated directly using "),W7e=n(ARe,"CODE",{});var G_t=s(W7e);fFr=r(G_t,"__init__()"),G_t.forEach(t),mFr=r(ARe," (throws an error)."),ARe.forEach(t),gFr=i(fi),yt=n(fi,"DIV",{class:!0});var mi=s(yt);m(gA.$$.fragment,mi),hFr=i(mi),Q7e=n(mi,"P",{});var O_t=s(Q7e);pFr=r(O_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),O_t.forEach(t),_Fr=i(mi),ef=n(mi,"P",{});var dW=s(ef);uFr=r(dW,`Note:
Loading a model from its configuration file does `),H7e=n(dW,"STRONG",{});var X_t=s(H7e);bFr=r(X_t,"not"),X_t.forEach(t),vFr=r(dW,` load the model weights. It only affects the
model\u2019s configuration. Use `),U7e=n(dW,"CODE",{});var V_t=s(U7e);TFr=r(V_t,"from_pretrained()"),V_t.forEach(t),FFr=r(dW,"to load the model weights."),dW.forEach(t),CFr=i(mi),J7e=n(mi,"P",{});var z_t=s(J7e);MFr=r(z_t,"Examples:"),z_t.forEach(t),EFr=i(mi),m(hA.$$.fragment,mi),mi.forEach(t),yFr=i(fi),xo=n(fi,"DIV",{class:!0});var Aa=s(xo);m(pA.$$.fragment,Aa),wFr=i(Aa),Y7e=n(Aa,"P",{});var W_t=s(Y7e);AFr=r(W_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),W_t.forEach(t),LFr=i(Aa),Ln=n(Aa,"P",{});var _M=s(Ln);BFr=r(_M,"The model class to instantiate is selected based on the "),K7e=n(_M,"CODE",{});var Q_t=s(K7e);xFr=r(Q_t,"model_type"),Q_t.forEach(t),kFr=r(_M,` property of the config object (either
passed as an argument or loaded from `),Z7e=n(_M,"CODE",{});var H_t=s(Z7e);RFr=r(H_t,"pretrained_model_name_or_path"),H_t.forEach(t),SFr=r(_M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=n(_M,"CODE",{});var U_t=s(ebe);PFr=r(U_t,"pretrained_model_name_or_path"),U_t.forEach(t),$Fr=r(_M,":"),_M.forEach(t),IFr=i(Aa),Te=n(Aa,"UL",{});var ro=s(Te);AC=n(ro,"LI",{});var O8e=s(AC);obe=n(O8e,"STRONG",{});var J_t=s(obe);DFr=r(J_t,"bart"),J_t.forEach(t),jFr=r(O8e," \u2014 "),XX=n(O8e,"A",{href:!0});var Y_t=s(XX);NFr=r(Y_t,"FlaxBartForConditionalGeneration"),Y_t.forEach(t),qFr=r(O8e," (BART model)"),O8e.forEach(t),GFr=i(ro),LC=n(ro,"LI",{});var X8e=s(LC);rbe=n(X8e,"STRONG",{});var K_t=s(rbe);OFr=r(K_t,"blenderbot"),K_t.forEach(t),XFr=r(X8e," \u2014 "),VX=n(X8e,"A",{href:!0});var Z_t=s(VX);VFr=r(Z_t,"FlaxBlenderbotForConditionalGeneration"),Z_t.forEach(t),zFr=r(X8e," (Blenderbot model)"),X8e.forEach(t),WFr=i(ro),BC=n(ro,"LI",{});var V8e=s(BC);tbe=n(V8e,"STRONG",{});var eut=s(tbe);QFr=r(eut,"blenderbot-small"),eut.forEach(t),HFr=r(V8e," \u2014 "),zX=n(V8e,"A",{href:!0});var out=s(zX);UFr=r(out,"FlaxBlenderbotSmallForConditionalGeneration"),out.forEach(t),JFr=r(V8e," (BlenderbotSmall model)"),V8e.forEach(t),YFr=i(ro),xC=n(ro,"LI",{});var z8e=s(xC);abe=n(z8e,"STRONG",{});var rut=s(abe);KFr=r(rut,"encoder-decoder"),rut.forEach(t),ZFr=r(z8e," \u2014 "),WX=n(z8e,"A",{href:!0});var tut=s(WX);eCr=r(tut,"FlaxEncoderDecoderModel"),tut.forEach(t),oCr=r(z8e," (Encoder decoder model)"),z8e.forEach(t),rCr=i(ro),kC=n(ro,"LI",{});var W8e=s(kC);nbe=n(W8e,"STRONG",{});var aut=s(nbe);tCr=r(aut,"marian"),aut.forEach(t),aCr=r(W8e," \u2014 "),QX=n(W8e,"A",{href:!0});var nut=s(QX);nCr=r(nut,"FlaxMarianMTModel"),nut.forEach(t),sCr=r(W8e," (Marian model)"),W8e.forEach(t),lCr=i(ro),RC=n(ro,"LI",{});var Q8e=s(RC);sbe=n(Q8e,"STRONG",{});var sut=s(sbe);iCr=r(sut,"mbart"),sut.forEach(t),dCr=r(Q8e," \u2014 "),HX=n(Q8e,"A",{href:!0});var lut=s(HX);cCr=r(lut,"FlaxMBartForConditionalGeneration"),lut.forEach(t),fCr=r(Q8e," (mBART model)"),Q8e.forEach(t),mCr=i(ro),SC=n(ro,"LI",{});var H8e=s(SC);lbe=n(H8e,"STRONG",{});var iut=s(lbe);gCr=r(iut,"mt5"),iut.forEach(t),hCr=r(H8e," \u2014 "),UX=n(H8e,"A",{href:!0});var dut=s(UX);pCr=r(dut,"FlaxMT5ForConditionalGeneration"),dut.forEach(t),_Cr=r(H8e," (mT5 model)"),H8e.forEach(t),uCr=i(ro),PC=n(ro,"LI",{});var U8e=s(PC);ibe=n(U8e,"STRONG",{});var cut=s(ibe);bCr=r(cut,"pegasus"),cut.forEach(t),vCr=r(U8e," \u2014 "),JX=n(U8e,"A",{href:!0});var fut=s(JX);TCr=r(fut,"FlaxPegasusForConditionalGeneration"),fut.forEach(t),FCr=r(U8e," (Pegasus model)"),U8e.forEach(t),CCr=i(ro),$C=n(ro,"LI",{});var J8e=s($C);dbe=n(J8e,"STRONG",{});var mut=s(dbe);MCr=r(mut,"t5"),mut.forEach(t),ECr=r(J8e," \u2014 "),YX=n(J8e,"A",{href:!0});var gut=s(YX);yCr=r(gut,"FlaxT5ForConditionalGeneration"),gut.forEach(t),wCr=r(J8e," (T5 model)"),J8e.forEach(t),ro.forEach(t),ACr=i(Aa),cbe=n(Aa,"P",{});var hut=s(cbe);LCr=r(hut,"Examples:"),hut.forEach(t),BCr=i(Aa),m(_A.$$.fragment,Aa),Aa.forEach(t),fi.forEach(t),bxe=i(c),of=n(c,"H2",{class:!0});var LRe=s(of);IC=n(LRe,"A",{id:!0,class:!0,href:!0});var put=s(IC);fbe=n(put,"SPAN",{});var _ut=s(fbe);m(uA.$$.fragment,_ut),_ut.forEach(t),put.forEach(t),xCr=i(LRe),mbe=n(LRe,"SPAN",{});var uut=s(mbe);kCr=r(uut,"FlaxAutoModelForSequenceClassification"),uut.forEach(t),LRe.forEach(t),vxe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(bA.$$.fragment,gi),RCr=i(gi),rf=n(gi,"P",{});var cW=s(rf);SCr=r(cW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gbe=n(cW,"CODE",{});var but=s(gbe);PCr=r(but,"from_pretrained()"),but.forEach(t),$Cr=r(cW,"class method or the "),hbe=n(cW,"CODE",{});var vut=s(hbe);ICr=r(vut,"from_config()"),vut.forEach(t),DCr=r(cW,`class
method.`),cW.forEach(t),jCr=i(gi),vA=n(gi,"P",{});var BRe=s(vA);NCr=r(BRe,"This class cannot be instantiated directly using "),pbe=n(BRe,"CODE",{});var Tut=s(pbe);qCr=r(Tut,"__init__()"),Tut.forEach(t),GCr=r(BRe," (throws an error)."),BRe.forEach(t),OCr=i(gi),wt=n(gi,"DIV",{class:!0});var hi=s(wt);m(TA.$$.fragment,hi),XCr=i(hi),_be=n(hi,"P",{});var Fut=s(_be);VCr=r(Fut,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Fut.forEach(t),zCr=i(hi),tf=n(hi,"P",{});var fW=s(tf);WCr=r(fW,`Note:
Loading a model from its configuration file does `),ube=n(fW,"STRONG",{});var Cut=s(ube);QCr=r(Cut,"not"),Cut.forEach(t),HCr=r(fW,` load the model weights. It only affects the
model\u2019s configuration. Use `),bbe=n(fW,"CODE",{});var Mut=s(bbe);UCr=r(Mut,"from_pretrained()"),Mut.forEach(t),JCr=r(fW,"to load the model weights."),fW.forEach(t),YCr=i(hi),vbe=n(hi,"P",{});var Eut=s(vbe);KCr=r(Eut,"Examples:"),Eut.forEach(t),ZCr=i(hi),m(FA.$$.fragment,hi),hi.forEach(t),e4r=i(gi),ko=n(gi,"DIV",{class:!0});var La=s(ko);m(CA.$$.fragment,La),o4r=i(La),Tbe=n(La,"P",{});var yut=s(Tbe);r4r=r(yut,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yut.forEach(t),t4r=i(La),Bn=n(La,"P",{});var uM=s(Bn);a4r=r(uM,"The model class to instantiate is selected based on the "),Fbe=n(uM,"CODE",{});var wut=s(Fbe);n4r=r(wut,"model_type"),wut.forEach(t),s4r=r(uM,` property of the config object (either
passed as an argument or loaded from `),Cbe=n(uM,"CODE",{});var Aut=s(Cbe);l4r=r(Aut,"pretrained_model_name_or_path"),Aut.forEach(t),i4r=r(uM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=n(uM,"CODE",{});var Lut=s(Mbe);d4r=r(Lut,"pretrained_model_name_or_path"),Lut.forEach(t),c4r=r(uM,":"),uM.forEach(t),f4r=i(La),Fe=n(La,"UL",{});var to=s(Fe);DC=n(to,"LI",{});var Y8e=s(DC);Ebe=n(Y8e,"STRONG",{});var But=s(Ebe);m4r=r(But,"albert"),But.forEach(t),g4r=r(Y8e," \u2014 "),KX=n(Y8e,"A",{href:!0});var xut=s(KX);h4r=r(xut,"FlaxAlbertForSequenceClassification"),xut.forEach(t),p4r=r(Y8e," (ALBERT model)"),Y8e.forEach(t),_4r=i(to),jC=n(to,"LI",{});var K8e=s(jC);ybe=n(K8e,"STRONG",{});var kut=s(ybe);u4r=r(kut,"bart"),kut.forEach(t),b4r=r(K8e," \u2014 "),ZX=n(K8e,"A",{href:!0});var Rut=s(ZX);v4r=r(Rut,"FlaxBartForSequenceClassification"),Rut.forEach(t),T4r=r(K8e," (BART model)"),K8e.forEach(t),F4r=i(to),NC=n(to,"LI",{});var Z8e=s(NC);wbe=n(Z8e,"STRONG",{});var Sut=s(wbe);C4r=r(Sut,"bert"),Sut.forEach(t),M4r=r(Z8e," \u2014 "),eV=n(Z8e,"A",{href:!0});var Put=s(eV);E4r=r(Put,"FlaxBertForSequenceClassification"),Put.forEach(t),y4r=r(Z8e," (BERT model)"),Z8e.forEach(t),w4r=i(to),qC=n(to,"LI",{});var e9e=s(qC);Abe=n(e9e,"STRONG",{});var $ut=s(Abe);A4r=r($ut,"big_bird"),$ut.forEach(t),L4r=r(e9e," \u2014 "),oV=n(e9e,"A",{href:!0});var Iut=s(oV);B4r=r(Iut,"FlaxBigBirdForSequenceClassification"),Iut.forEach(t),x4r=r(e9e," (BigBird model)"),e9e.forEach(t),k4r=i(to),GC=n(to,"LI",{});var o9e=s(GC);Lbe=n(o9e,"STRONG",{});var Dut=s(Lbe);R4r=r(Dut,"distilbert"),Dut.forEach(t),S4r=r(o9e," \u2014 "),rV=n(o9e,"A",{href:!0});var jut=s(rV);P4r=r(jut,"FlaxDistilBertForSequenceClassification"),jut.forEach(t),$4r=r(o9e," (DistilBERT model)"),o9e.forEach(t),I4r=i(to),OC=n(to,"LI",{});var r9e=s(OC);Bbe=n(r9e,"STRONG",{});var Nut=s(Bbe);D4r=r(Nut,"electra"),Nut.forEach(t),j4r=r(r9e," \u2014 "),tV=n(r9e,"A",{href:!0});var qut=s(tV);N4r=r(qut,"FlaxElectraForSequenceClassification"),qut.forEach(t),q4r=r(r9e," (ELECTRA model)"),r9e.forEach(t),G4r=i(to),XC=n(to,"LI",{});var t9e=s(XC);xbe=n(t9e,"STRONG",{});var Gut=s(xbe);O4r=r(Gut,"mbart"),Gut.forEach(t),X4r=r(t9e," \u2014 "),aV=n(t9e,"A",{href:!0});var Out=s(aV);V4r=r(Out,"FlaxMBartForSequenceClassification"),Out.forEach(t),z4r=r(t9e," (mBART model)"),t9e.forEach(t),W4r=i(to),VC=n(to,"LI",{});var a9e=s(VC);kbe=n(a9e,"STRONG",{});var Xut=s(kbe);Q4r=r(Xut,"roberta"),Xut.forEach(t),H4r=r(a9e," \u2014 "),nV=n(a9e,"A",{href:!0});var Vut=s(nV);U4r=r(Vut,"FlaxRobertaForSequenceClassification"),Vut.forEach(t),J4r=r(a9e," (RoBERTa model)"),a9e.forEach(t),Y4r=i(to),zC=n(to,"LI",{});var n9e=s(zC);Rbe=n(n9e,"STRONG",{});var zut=s(Rbe);K4r=r(zut,"roformer"),zut.forEach(t),Z4r=r(n9e," \u2014 "),sV=n(n9e,"A",{href:!0});var Wut=s(sV);eMr=r(Wut,"FlaxRoFormerForSequenceClassification"),Wut.forEach(t),oMr=r(n9e," (RoFormer model)"),n9e.forEach(t),to.forEach(t),rMr=i(La),Sbe=n(La,"P",{});var Qut=s(Sbe);tMr=r(Qut,"Examples:"),Qut.forEach(t),aMr=i(La),m(MA.$$.fragment,La),La.forEach(t),gi.forEach(t),Txe=i(c),af=n(c,"H2",{class:!0});var xRe=s(af);WC=n(xRe,"A",{id:!0,class:!0,href:!0});var Hut=s(WC);Pbe=n(Hut,"SPAN",{});var Uut=s(Pbe);m(EA.$$.fragment,Uut),Uut.forEach(t),Hut.forEach(t),nMr=i(xRe),$be=n(xRe,"SPAN",{});var Jut=s($be);sMr=r(Jut,"FlaxAutoModelForQuestionAnswering"),Jut.forEach(t),xRe.forEach(t),Fxe=i(c),Pr=n(c,"DIV",{class:!0});var pi=s(Pr);m(yA.$$.fragment,pi),lMr=i(pi),nf=n(pi,"P",{});var mW=s(nf);iMr=r(mW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ibe=n(mW,"CODE",{});var Yut=s(Ibe);dMr=r(Yut,"from_pretrained()"),Yut.forEach(t),cMr=r(mW,"class method or the "),Dbe=n(mW,"CODE",{});var Kut=s(Dbe);fMr=r(Kut,"from_config()"),Kut.forEach(t),mMr=r(mW,`class
method.`),mW.forEach(t),gMr=i(pi),wA=n(pi,"P",{});var kRe=s(wA);hMr=r(kRe,"This class cannot be instantiated directly using "),jbe=n(kRe,"CODE",{});var Zut=s(jbe);pMr=r(Zut,"__init__()"),Zut.forEach(t),_Mr=r(kRe," (throws an error)."),kRe.forEach(t),uMr=i(pi),At=n(pi,"DIV",{class:!0});var _i=s(At);m(AA.$$.fragment,_i),bMr=i(_i),Nbe=n(_i,"P",{});var e1t=s(Nbe);vMr=r(e1t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),e1t.forEach(t),TMr=i(_i),sf=n(_i,"P",{});var gW=s(sf);FMr=r(gW,`Note:
Loading a model from its configuration file does `),qbe=n(gW,"STRONG",{});var o1t=s(qbe);CMr=r(o1t,"not"),o1t.forEach(t),MMr=r(gW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gbe=n(gW,"CODE",{});var r1t=s(Gbe);EMr=r(r1t,"from_pretrained()"),r1t.forEach(t),yMr=r(gW,"to load the model weights."),gW.forEach(t),wMr=i(_i),Obe=n(_i,"P",{});var t1t=s(Obe);AMr=r(t1t,"Examples:"),t1t.forEach(t),LMr=i(_i),m(LA.$$.fragment,_i),_i.forEach(t),BMr=i(pi),Ro=n(pi,"DIV",{class:!0});var Ba=s(Ro);m(BA.$$.fragment,Ba),xMr=i(Ba),Xbe=n(Ba,"P",{});var a1t=s(Xbe);kMr=r(a1t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),a1t.forEach(t),RMr=i(Ba),xn=n(Ba,"P",{});var bM=s(xn);SMr=r(bM,"The model class to instantiate is selected based on the "),Vbe=n(bM,"CODE",{});var n1t=s(Vbe);PMr=r(n1t,"model_type"),n1t.forEach(t),$Mr=r(bM,` property of the config object (either
passed as an argument or loaded from `),zbe=n(bM,"CODE",{});var s1t=s(zbe);IMr=r(s1t,"pretrained_model_name_or_path"),s1t.forEach(t),DMr=r(bM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=n(bM,"CODE",{});var l1t=s(Wbe);jMr=r(l1t,"pretrained_model_name_or_path"),l1t.forEach(t),NMr=r(bM,":"),bM.forEach(t),qMr=i(Ba),Ce=n(Ba,"UL",{});var ao=s(Ce);QC=n(ao,"LI",{});var s9e=s(QC);Qbe=n(s9e,"STRONG",{});var i1t=s(Qbe);GMr=r(i1t,"albert"),i1t.forEach(t),OMr=r(s9e," \u2014 "),lV=n(s9e,"A",{href:!0});var d1t=s(lV);XMr=r(d1t,"FlaxAlbertForQuestionAnswering"),d1t.forEach(t),VMr=r(s9e," (ALBERT model)"),s9e.forEach(t),zMr=i(ao),HC=n(ao,"LI",{});var l9e=s(HC);Hbe=n(l9e,"STRONG",{});var c1t=s(Hbe);WMr=r(c1t,"bart"),c1t.forEach(t),QMr=r(l9e," \u2014 "),iV=n(l9e,"A",{href:!0});var f1t=s(iV);HMr=r(f1t,"FlaxBartForQuestionAnswering"),f1t.forEach(t),UMr=r(l9e," (BART model)"),l9e.forEach(t),JMr=i(ao),UC=n(ao,"LI",{});var i9e=s(UC);Ube=n(i9e,"STRONG",{});var m1t=s(Ube);YMr=r(m1t,"bert"),m1t.forEach(t),KMr=r(i9e," \u2014 "),dV=n(i9e,"A",{href:!0});var g1t=s(dV);ZMr=r(g1t,"FlaxBertForQuestionAnswering"),g1t.forEach(t),eEr=r(i9e," (BERT model)"),i9e.forEach(t),oEr=i(ao),JC=n(ao,"LI",{});var d9e=s(JC);Jbe=n(d9e,"STRONG",{});var h1t=s(Jbe);rEr=r(h1t,"big_bird"),h1t.forEach(t),tEr=r(d9e," \u2014 "),cV=n(d9e,"A",{href:!0});var p1t=s(cV);aEr=r(p1t,"FlaxBigBirdForQuestionAnswering"),p1t.forEach(t),nEr=r(d9e," (BigBird model)"),d9e.forEach(t),sEr=i(ao),YC=n(ao,"LI",{});var c9e=s(YC);Ybe=n(c9e,"STRONG",{});var _1t=s(Ybe);lEr=r(_1t,"distilbert"),_1t.forEach(t),iEr=r(c9e," \u2014 "),fV=n(c9e,"A",{href:!0});var u1t=s(fV);dEr=r(u1t,"FlaxDistilBertForQuestionAnswering"),u1t.forEach(t),cEr=r(c9e," (DistilBERT model)"),c9e.forEach(t),fEr=i(ao),KC=n(ao,"LI",{});var f9e=s(KC);Kbe=n(f9e,"STRONG",{});var b1t=s(Kbe);mEr=r(b1t,"electra"),b1t.forEach(t),gEr=r(f9e," \u2014 "),mV=n(f9e,"A",{href:!0});var v1t=s(mV);hEr=r(v1t,"FlaxElectraForQuestionAnswering"),v1t.forEach(t),pEr=r(f9e," (ELECTRA model)"),f9e.forEach(t),_Er=i(ao),ZC=n(ao,"LI",{});var m9e=s(ZC);Zbe=n(m9e,"STRONG",{});var T1t=s(Zbe);uEr=r(T1t,"mbart"),T1t.forEach(t),bEr=r(m9e," \u2014 "),gV=n(m9e,"A",{href:!0});var F1t=s(gV);vEr=r(F1t,"FlaxMBartForQuestionAnswering"),F1t.forEach(t),TEr=r(m9e," (mBART model)"),m9e.forEach(t),FEr=i(ao),e4=n(ao,"LI",{});var g9e=s(e4);e5e=n(g9e,"STRONG",{});var C1t=s(e5e);CEr=r(C1t,"roberta"),C1t.forEach(t),MEr=r(g9e," \u2014 "),hV=n(g9e,"A",{href:!0});var M1t=s(hV);EEr=r(M1t,"FlaxRobertaForQuestionAnswering"),M1t.forEach(t),yEr=r(g9e," (RoBERTa model)"),g9e.forEach(t),wEr=i(ao),o4=n(ao,"LI",{});var h9e=s(o4);o5e=n(h9e,"STRONG",{});var E1t=s(o5e);AEr=r(E1t,"roformer"),E1t.forEach(t),LEr=r(h9e," \u2014 "),pV=n(h9e,"A",{href:!0});var y1t=s(pV);BEr=r(y1t,"FlaxRoFormerForQuestionAnswering"),y1t.forEach(t),xEr=r(h9e," (RoFormer model)"),h9e.forEach(t),ao.forEach(t),kEr=i(Ba),r5e=n(Ba,"P",{});var w1t=s(r5e);REr=r(w1t,"Examples:"),w1t.forEach(t),SEr=i(Ba),m(xA.$$.fragment,Ba),Ba.forEach(t),pi.forEach(t),Cxe=i(c),lf=n(c,"H2",{class:!0});var RRe=s(lf);r4=n(RRe,"A",{id:!0,class:!0,href:!0});var A1t=s(r4);t5e=n(A1t,"SPAN",{});var L1t=s(t5e);m(kA.$$.fragment,L1t),L1t.forEach(t),A1t.forEach(t),PEr=i(RRe),a5e=n(RRe,"SPAN",{});var B1t=s(a5e);$Er=r(B1t,"FlaxAutoModelForTokenClassification"),B1t.forEach(t),RRe.forEach(t),Mxe=i(c),$r=n(c,"DIV",{class:!0});var ui=s($r);m(RA.$$.fragment,ui),IEr=i(ui),df=n(ui,"P",{});var hW=s(df);DEr=r(hW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),n5e=n(hW,"CODE",{});var x1t=s(n5e);jEr=r(x1t,"from_pretrained()"),x1t.forEach(t),NEr=r(hW,"class method or the "),s5e=n(hW,"CODE",{});var k1t=s(s5e);qEr=r(k1t,"from_config()"),k1t.forEach(t),GEr=r(hW,`class
method.`),hW.forEach(t),OEr=i(ui),SA=n(ui,"P",{});var SRe=s(SA);XEr=r(SRe,"This class cannot be instantiated directly using "),l5e=n(SRe,"CODE",{});var R1t=s(l5e);VEr=r(R1t,"__init__()"),R1t.forEach(t),zEr=r(SRe," (throws an error)."),SRe.forEach(t),WEr=i(ui),Lt=n(ui,"DIV",{class:!0});var bi=s(Lt);m(PA.$$.fragment,bi),QEr=i(bi),i5e=n(bi,"P",{});var S1t=s(i5e);HEr=r(S1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),S1t.forEach(t),UEr=i(bi),cf=n(bi,"P",{});var pW=s(cf);JEr=r(pW,`Note:
Loading a model from its configuration file does `),d5e=n(pW,"STRONG",{});var P1t=s(d5e);YEr=r(P1t,"not"),P1t.forEach(t),KEr=r(pW,` load the model weights. It only affects the
model\u2019s configuration. Use `),c5e=n(pW,"CODE",{});var $1t=s(c5e);ZEr=r($1t,"from_pretrained()"),$1t.forEach(t),e3r=r(pW,"to load the model weights."),pW.forEach(t),o3r=i(bi),f5e=n(bi,"P",{});var I1t=s(f5e);r3r=r(I1t,"Examples:"),I1t.forEach(t),t3r=i(bi),m($A.$$.fragment,bi),bi.forEach(t),a3r=i(ui),So=n(ui,"DIV",{class:!0});var xa=s(So);m(IA.$$.fragment,xa),n3r=i(xa),m5e=n(xa,"P",{});var D1t=s(m5e);s3r=r(D1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),D1t.forEach(t),l3r=i(xa),kn=n(xa,"P",{});var vM=s(kn);i3r=r(vM,"The model class to instantiate is selected based on the "),g5e=n(vM,"CODE",{});var j1t=s(g5e);d3r=r(j1t,"model_type"),j1t.forEach(t),c3r=r(vM,` property of the config object (either
passed as an argument or loaded from `),h5e=n(vM,"CODE",{});var N1t=s(h5e);f3r=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),m3r=r(vM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=n(vM,"CODE",{});var q1t=s(p5e);g3r=r(q1t,"pretrained_model_name_or_path"),q1t.forEach(t),h3r=r(vM,":"),vM.forEach(t),p3r=i(xa),so=n(xa,"UL",{});var ta=s(so);t4=n(ta,"LI",{});var p9e=s(t4);_5e=n(p9e,"STRONG",{});var G1t=s(_5e);_3r=r(G1t,"albert"),G1t.forEach(t),u3r=r(p9e," \u2014 "),_V=n(p9e,"A",{href:!0});var O1t=s(_V);b3r=r(O1t,"FlaxAlbertForTokenClassification"),O1t.forEach(t),v3r=r(p9e," (ALBERT model)"),p9e.forEach(t),T3r=i(ta),a4=n(ta,"LI",{});var _9e=s(a4);u5e=n(_9e,"STRONG",{});var X1t=s(u5e);F3r=r(X1t,"bert"),X1t.forEach(t),C3r=r(_9e," \u2014 "),uV=n(_9e,"A",{href:!0});var V1t=s(uV);M3r=r(V1t,"FlaxBertForTokenClassification"),V1t.forEach(t),E3r=r(_9e," (BERT model)"),_9e.forEach(t),y3r=i(ta),n4=n(ta,"LI",{});var u9e=s(n4);b5e=n(u9e,"STRONG",{});var z1t=s(b5e);w3r=r(z1t,"big_bird"),z1t.forEach(t),A3r=r(u9e," \u2014 "),bV=n(u9e,"A",{href:!0});var W1t=s(bV);L3r=r(W1t,"FlaxBigBirdForTokenClassification"),W1t.forEach(t),B3r=r(u9e," (BigBird model)"),u9e.forEach(t),x3r=i(ta),s4=n(ta,"LI",{});var b9e=s(s4);v5e=n(b9e,"STRONG",{});var Q1t=s(v5e);k3r=r(Q1t,"distilbert"),Q1t.forEach(t),R3r=r(b9e," \u2014 "),vV=n(b9e,"A",{href:!0});var H1t=s(vV);S3r=r(H1t,"FlaxDistilBertForTokenClassification"),H1t.forEach(t),P3r=r(b9e," (DistilBERT model)"),b9e.forEach(t),$3r=i(ta),l4=n(ta,"LI",{});var v9e=s(l4);T5e=n(v9e,"STRONG",{});var U1t=s(T5e);I3r=r(U1t,"electra"),U1t.forEach(t),D3r=r(v9e," \u2014 "),TV=n(v9e,"A",{href:!0});var J1t=s(TV);j3r=r(J1t,"FlaxElectraForTokenClassification"),J1t.forEach(t),N3r=r(v9e," (ELECTRA model)"),v9e.forEach(t),q3r=i(ta),i4=n(ta,"LI",{});var T9e=s(i4);F5e=n(T9e,"STRONG",{});var Y1t=s(F5e);G3r=r(Y1t,"roberta"),Y1t.forEach(t),O3r=r(T9e," \u2014 "),FV=n(T9e,"A",{href:!0});var K1t=s(FV);X3r=r(K1t,"FlaxRobertaForTokenClassification"),K1t.forEach(t),V3r=r(T9e," (RoBERTa model)"),T9e.forEach(t),z3r=i(ta),d4=n(ta,"LI",{});var F9e=s(d4);C5e=n(F9e,"STRONG",{});var Z1t=s(C5e);W3r=r(Z1t,"roformer"),Z1t.forEach(t),Q3r=r(F9e," \u2014 "),CV=n(F9e,"A",{href:!0});var e7t=s(CV);H3r=r(e7t,"FlaxRoFormerForTokenClassification"),e7t.forEach(t),U3r=r(F9e," (RoFormer model)"),F9e.forEach(t),ta.forEach(t),J3r=i(xa),M5e=n(xa,"P",{});var o7t=s(M5e);Y3r=r(o7t,"Examples:"),o7t.forEach(t),K3r=i(xa),m(DA.$$.fragment,xa),xa.forEach(t),ui.forEach(t),Exe=i(c),ff=n(c,"H2",{class:!0});var PRe=s(ff);c4=n(PRe,"A",{id:!0,class:!0,href:!0});var r7t=s(c4);E5e=n(r7t,"SPAN",{});var t7t=s(E5e);m(jA.$$.fragment,t7t),t7t.forEach(t),r7t.forEach(t),Z3r=i(PRe),y5e=n(PRe,"SPAN",{});var a7t=s(y5e);eyr=r(a7t,"FlaxAutoModelForMultipleChoice"),a7t.forEach(t),PRe.forEach(t),yxe=i(c),Ir=n(c,"DIV",{class:!0});var vi=s(Ir);m(NA.$$.fragment,vi),oyr=i(vi),mf=n(vi,"P",{});var _W=s(mf);ryr=r(_W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),w5e=n(_W,"CODE",{});var n7t=s(w5e);tyr=r(n7t,"from_pretrained()"),n7t.forEach(t),ayr=r(_W,"class method or the "),A5e=n(_W,"CODE",{});var s7t=s(A5e);nyr=r(s7t,"from_config()"),s7t.forEach(t),syr=r(_W,`class
method.`),_W.forEach(t),lyr=i(vi),qA=n(vi,"P",{});var $Re=s(qA);iyr=r($Re,"This class cannot be instantiated directly using "),L5e=n($Re,"CODE",{});var l7t=s(L5e);dyr=r(l7t,"__init__()"),l7t.forEach(t),cyr=r($Re," (throws an error)."),$Re.forEach(t),fyr=i(vi),Bt=n(vi,"DIV",{class:!0});var Ti=s(Bt);m(GA.$$.fragment,Ti),myr=i(Ti),B5e=n(Ti,"P",{});var i7t=s(B5e);gyr=r(i7t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),i7t.forEach(t),hyr=i(Ti),gf=n(Ti,"P",{});var uW=s(gf);pyr=r(uW,`Note:
Loading a model from its configuration file does `),x5e=n(uW,"STRONG",{});var d7t=s(x5e);_yr=r(d7t,"not"),d7t.forEach(t),uyr=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),k5e=n(uW,"CODE",{});var c7t=s(k5e);byr=r(c7t,"from_pretrained()"),c7t.forEach(t),vyr=r(uW,"to load the model weights."),uW.forEach(t),Tyr=i(Ti),R5e=n(Ti,"P",{});var f7t=s(R5e);Fyr=r(f7t,"Examples:"),f7t.forEach(t),Cyr=i(Ti),m(OA.$$.fragment,Ti),Ti.forEach(t),Myr=i(vi),Po=n(vi,"DIV",{class:!0});var ka=s(Po);m(XA.$$.fragment,ka),Eyr=i(ka),S5e=n(ka,"P",{});var m7t=s(S5e);yyr=r(m7t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),m7t.forEach(t),wyr=i(ka),Rn=n(ka,"P",{});var TM=s(Rn);Ayr=r(TM,"The model class to instantiate is selected based on the "),P5e=n(TM,"CODE",{});var g7t=s(P5e);Lyr=r(g7t,"model_type"),g7t.forEach(t),Byr=r(TM,` property of the config object (either
passed as an argument or loaded from `),$5e=n(TM,"CODE",{});var h7t=s($5e);xyr=r(h7t,"pretrained_model_name_or_path"),h7t.forEach(t),kyr=r(TM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I5e=n(TM,"CODE",{});var p7t=s(I5e);Ryr=r(p7t,"pretrained_model_name_or_path"),p7t.forEach(t),Syr=r(TM,":"),TM.forEach(t),Pyr=i(ka),lo=n(ka,"UL",{});var aa=s(lo);f4=n(aa,"LI",{});var C9e=s(f4);D5e=n(C9e,"STRONG",{});var _7t=s(D5e);$yr=r(_7t,"albert"),_7t.forEach(t),Iyr=r(C9e," \u2014 "),MV=n(C9e,"A",{href:!0});var u7t=s(MV);Dyr=r(u7t,"FlaxAlbertForMultipleChoice"),u7t.forEach(t),jyr=r(C9e," (ALBERT model)"),C9e.forEach(t),Nyr=i(aa),m4=n(aa,"LI",{});var M9e=s(m4);j5e=n(M9e,"STRONG",{});var b7t=s(j5e);qyr=r(b7t,"bert"),b7t.forEach(t),Gyr=r(M9e," \u2014 "),EV=n(M9e,"A",{href:!0});var v7t=s(EV);Oyr=r(v7t,"FlaxBertForMultipleChoice"),v7t.forEach(t),Xyr=r(M9e," (BERT model)"),M9e.forEach(t),Vyr=i(aa),g4=n(aa,"LI",{});var E9e=s(g4);N5e=n(E9e,"STRONG",{});var T7t=s(N5e);zyr=r(T7t,"big_bird"),T7t.forEach(t),Wyr=r(E9e," \u2014 "),yV=n(E9e,"A",{href:!0});var F7t=s(yV);Qyr=r(F7t,"FlaxBigBirdForMultipleChoice"),F7t.forEach(t),Hyr=r(E9e," (BigBird model)"),E9e.forEach(t),Uyr=i(aa),h4=n(aa,"LI",{});var y9e=s(h4);q5e=n(y9e,"STRONG",{});var C7t=s(q5e);Jyr=r(C7t,"distilbert"),C7t.forEach(t),Yyr=r(y9e," \u2014 "),wV=n(y9e,"A",{href:!0});var M7t=s(wV);Kyr=r(M7t,"FlaxDistilBertForMultipleChoice"),M7t.forEach(t),Zyr=r(y9e," (DistilBERT model)"),y9e.forEach(t),ewr=i(aa),p4=n(aa,"LI",{});var w9e=s(p4);G5e=n(w9e,"STRONG",{});var E7t=s(G5e);owr=r(E7t,"electra"),E7t.forEach(t),rwr=r(w9e," \u2014 "),AV=n(w9e,"A",{href:!0});var y7t=s(AV);twr=r(y7t,"FlaxElectraForMultipleChoice"),y7t.forEach(t),awr=r(w9e," (ELECTRA model)"),w9e.forEach(t),nwr=i(aa),_4=n(aa,"LI",{});var A9e=s(_4);O5e=n(A9e,"STRONG",{});var w7t=s(O5e);swr=r(w7t,"roberta"),w7t.forEach(t),lwr=r(A9e," \u2014 "),LV=n(A9e,"A",{href:!0});var A7t=s(LV);iwr=r(A7t,"FlaxRobertaForMultipleChoice"),A7t.forEach(t),dwr=r(A9e," (RoBERTa model)"),A9e.forEach(t),cwr=i(aa),u4=n(aa,"LI",{});var L9e=s(u4);X5e=n(L9e,"STRONG",{});var L7t=s(X5e);fwr=r(L7t,"roformer"),L7t.forEach(t),mwr=r(L9e," \u2014 "),BV=n(L9e,"A",{href:!0});var B7t=s(BV);gwr=r(B7t,"FlaxRoFormerForMultipleChoice"),B7t.forEach(t),hwr=r(L9e," (RoFormer model)"),L9e.forEach(t),aa.forEach(t),pwr=i(ka),V5e=n(ka,"P",{});var x7t=s(V5e);_wr=r(x7t,"Examples:"),x7t.forEach(t),uwr=i(ka),m(VA.$$.fragment,ka),ka.forEach(t),vi.forEach(t),wxe=i(c),hf=n(c,"H2",{class:!0});var IRe=s(hf);b4=n(IRe,"A",{id:!0,class:!0,href:!0});var k7t=s(b4);z5e=n(k7t,"SPAN",{});var R7t=s(z5e);m(zA.$$.fragment,R7t),R7t.forEach(t),k7t.forEach(t),bwr=i(IRe),W5e=n(IRe,"SPAN",{});var S7t=s(W5e);vwr=r(S7t,"FlaxAutoModelForNextSentencePrediction"),S7t.forEach(t),IRe.forEach(t),Axe=i(c),Dr=n(c,"DIV",{class:!0});var Fi=s(Dr);m(WA.$$.fragment,Fi),Twr=i(Fi),pf=n(Fi,"P",{});var bW=s(pf);Fwr=r(bW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Q5e=n(bW,"CODE",{});var P7t=s(Q5e);Cwr=r(P7t,"from_pretrained()"),P7t.forEach(t),Mwr=r(bW,"class method or the "),H5e=n(bW,"CODE",{});var $7t=s(H5e);Ewr=r($7t,"from_config()"),$7t.forEach(t),ywr=r(bW,`class
method.`),bW.forEach(t),wwr=i(Fi),QA=n(Fi,"P",{});var DRe=s(QA);Awr=r(DRe,"This class cannot be instantiated directly using "),U5e=n(DRe,"CODE",{});var I7t=s(U5e);Lwr=r(I7t,"__init__()"),I7t.forEach(t),Bwr=r(DRe," (throws an error)."),DRe.forEach(t),xwr=i(Fi),xt=n(Fi,"DIV",{class:!0});var Ci=s(xt);m(HA.$$.fragment,Ci),kwr=i(Ci),J5e=n(Ci,"P",{});var D7t=s(J5e);Rwr=r(D7t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),D7t.forEach(t),Swr=i(Ci),_f=n(Ci,"P",{});var vW=s(_f);Pwr=r(vW,`Note:
Loading a model from its configuration file does `),Y5e=n(vW,"STRONG",{});var j7t=s(Y5e);$wr=r(j7t,"not"),j7t.forEach(t),Iwr=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),K5e=n(vW,"CODE",{});var N7t=s(K5e);Dwr=r(N7t,"from_pretrained()"),N7t.forEach(t),jwr=r(vW,"to load the model weights."),vW.forEach(t),Nwr=i(Ci),Z5e=n(Ci,"P",{});var q7t=s(Z5e);qwr=r(q7t,"Examples:"),q7t.forEach(t),Gwr=i(Ci),m(UA.$$.fragment,Ci),Ci.forEach(t),Owr=i(Fi),$o=n(Fi,"DIV",{class:!0});var Ra=s($o);m(JA.$$.fragment,Ra),Xwr=i(Ra),e2e=n(Ra,"P",{});var G7t=s(e2e);Vwr=r(G7t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),G7t.forEach(t),zwr=i(Ra),Sn=n(Ra,"P",{});var FM=s(Sn);Wwr=r(FM,"The model class to instantiate is selected based on the "),o2e=n(FM,"CODE",{});var O7t=s(o2e);Qwr=r(O7t,"model_type"),O7t.forEach(t),Hwr=r(FM,` property of the config object (either
passed as an argument or loaded from `),r2e=n(FM,"CODE",{});var X7t=s(r2e);Uwr=r(X7t,"pretrained_model_name_or_path"),X7t.forEach(t),Jwr=r(FM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=n(FM,"CODE",{});var V7t=s(t2e);Ywr=r(V7t,"pretrained_model_name_or_path"),V7t.forEach(t),Kwr=r(FM,":"),FM.forEach(t),Zwr=i(Ra),a2e=n(Ra,"UL",{});var z7t=s(a2e);v4=n(z7t,"LI",{});var B9e=s(v4);n2e=n(B9e,"STRONG",{});var W7t=s(n2e);e6r=r(W7t,"bert"),W7t.forEach(t),o6r=r(B9e," \u2014 "),xV=n(B9e,"A",{href:!0});var Q7t=s(xV);r6r=r(Q7t,"FlaxBertForNextSentencePrediction"),Q7t.forEach(t),t6r=r(B9e," (BERT model)"),B9e.forEach(t),z7t.forEach(t),a6r=i(Ra),s2e=n(Ra,"P",{});var H7t=s(s2e);n6r=r(H7t,"Examples:"),H7t.forEach(t),s6r=i(Ra),m(YA.$$.fragment,Ra),Ra.forEach(t),Fi.forEach(t),Lxe=i(c),uf=n(c,"H2",{class:!0});var jRe=s(uf);T4=n(jRe,"A",{id:!0,class:!0,href:!0});var U7t=s(T4);l2e=n(U7t,"SPAN",{});var J7t=s(l2e);m(KA.$$.fragment,J7t),J7t.forEach(t),U7t.forEach(t),l6r=i(jRe),i2e=n(jRe,"SPAN",{});var Y7t=s(i2e);i6r=r(Y7t,"FlaxAutoModelForImageClassification"),Y7t.forEach(t),jRe.forEach(t),Bxe=i(c),jr=n(c,"DIV",{class:!0});var Mi=s(jr);m(ZA.$$.fragment,Mi),d6r=i(Mi),bf=n(Mi,"P",{});var TW=s(bf);c6r=r(TW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),d2e=n(TW,"CODE",{});var K7t=s(d2e);f6r=r(K7t,"from_pretrained()"),K7t.forEach(t),m6r=r(TW,"class method or the "),c2e=n(TW,"CODE",{});var Z7t=s(c2e);g6r=r(Z7t,"from_config()"),Z7t.forEach(t),h6r=r(TW,`class
method.`),TW.forEach(t),p6r=i(Mi),eL=n(Mi,"P",{});var NRe=s(eL);_6r=r(NRe,"This class cannot be instantiated directly using "),f2e=n(NRe,"CODE",{});var ebt=s(f2e);u6r=r(ebt,"__init__()"),ebt.forEach(t),b6r=r(NRe," (throws an error)."),NRe.forEach(t),v6r=i(Mi),kt=n(Mi,"DIV",{class:!0});var Ei=s(kt);m(oL.$$.fragment,Ei),T6r=i(Ei),m2e=n(Ei,"P",{});var obt=s(m2e);F6r=r(obt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),obt.forEach(t),C6r=i(Ei),vf=n(Ei,"P",{});var FW=s(vf);M6r=r(FW,`Note:
Loading a model from its configuration file does `),g2e=n(FW,"STRONG",{});var rbt=s(g2e);E6r=r(rbt,"not"),rbt.forEach(t),y6r=r(FW,` load the model weights. It only affects the
model\u2019s configuration. Use `),h2e=n(FW,"CODE",{});var tbt=s(h2e);w6r=r(tbt,"from_pretrained()"),tbt.forEach(t),A6r=r(FW,"to load the model weights."),FW.forEach(t),L6r=i(Ei),p2e=n(Ei,"P",{});var abt=s(p2e);B6r=r(abt,"Examples:"),abt.forEach(t),x6r=i(Ei),m(rL.$$.fragment,Ei),Ei.forEach(t),k6r=i(Mi),Io=n(Mi,"DIV",{class:!0});var Sa=s(Io);m(tL.$$.fragment,Sa),R6r=i(Sa),_2e=n(Sa,"P",{});var nbt=s(_2e);S6r=r(nbt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nbt.forEach(t),P6r=i(Sa),Pn=n(Sa,"P",{});var CM=s(Pn);$6r=r(CM,"The model class to instantiate is selected based on the "),u2e=n(CM,"CODE",{});var sbt=s(u2e);I6r=r(sbt,"model_type"),sbt.forEach(t),D6r=r(CM,` property of the config object (either
passed as an argument or loaded from `),b2e=n(CM,"CODE",{});var lbt=s(b2e);j6r=r(lbt,"pretrained_model_name_or_path"),lbt.forEach(t),N6r=r(CM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v2e=n(CM,"CODE",{});var ibt=s(v2e);q6r=r(ibt,"pretrained_model_name_or_path"),ibt.forEach(t),G6r=r(CM,":"),CM.forEach(t),O6r=i(Sa),aL=n(Sa,"UL",{});var qRe=s(aL);F4=n(qRe,"LI",{});var x9e=s(F4);T2e=n(x9e,"STRONG",{});var dbt=s(T2e);X6r=r(dbt,"beit"),dbt.forEach(t),V6r=r(x9e," \u2014 "),kV=n(x9e,"A",{href:!0});var cbt=s(kV);z6r=r(cbt,"FlaxBeitForImageClassification"),cbt.forEach(t),W6r=r(x9e," (BEiT model)"),x9e.forEach(t),Q6r=i(qRe),C4=n(qRe,"LI",{});var k9e=s(C4);F2e=n(k9e,"STRONG",{});var fbt=s(F2e);H6r=r(fbt,"vit"),fbt.forEach(t),U6r=r(k9e," \u2014 "),RV=n(k9e,"A",{href:!0});var mbt=s(RV);J6r=r(mbt,"FlaxViTForImageClassification"),mbt.forEach(t),Y6r=r(k9e," (ViT model)"),k9e.forEach(t),qRe.forEach(t),K6r=i(Sa),C2e=n(Sa,"P",{});var gbt=s(C2e);Z6r=r(gbt,"Examples:"),gbt.forEach(t),eAr=i(Sa),m(nL.$$.fragment,Sa),Sa.forEach(t),Mi.forEach(t),xxe=i(c),Tf=n(c,"H2",{class:!0});var GRe=s(Tf);M4=n(GRe,"A",{id:!0,class:!0,href:!0});var hbt=s(M4);M2e=n(hbt,"SPAN",{});var pbt=s(M2e);m(sL.$$.fragment,pbt),pbt.forEach(t),hbt.forEach(t),oAr=i(GRe),E2e=n(GRe,"SPAN",{});var _bt=s(E2e);rAr=r(_bt,"FlaxAutoModelForVision2Seq"),_bt.forEach(t),GRe.forEach(t),kxe=i(c),Nr=n(c,"DIV",{class:!0});var yi=s(Nr);m(lL.$$.fragment,yi),tAr=i(yi),Ff=n(yi,"P",{});var CW=s(Ff);aAr=r(CW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),y2e=n(CW,"CODE",{});var ubt=s(y2e);nAr=r(ubt,"from_pretrained()"),ubt.forEach(t),sAr=r(CW,"class method or the "),w2e=n(CW,"CODE",{});var bbt=s(w2e);lAr=r(bbt,"from_config()"),bbt.forEach(t),iAr=r(CW,`class
method.`),CW.forEach(t),dAr=i(yi),iL=n(yi,"P",{});var ORe=s(iL);cAr=r(ORe,"This class cannot be instantiated directly using "),A2e=n(ORe,"CODE",{});var vbt=s(A2e);fAr=r(vbt,"__init__()"),vbt.forEach(t),mAr=r(ORe," (throws an error)."),ORe.forEach(t),gAr=i(yi),Rt=n(yi,"DIV",{class:!0});var wi=s(Rt);m(dL.$$.fragment,wi),hAr=i(wi),L2e=n(wi,"P",{});var Tbt=s(L2e);pAr=r(Tbt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Tbt.forEach(t),_Ar=i(wi),Cf=n(wi,"P",{});var MW=s(Cf);uAr=r(MW,`Note:
Loading a model from its configuration file does `),B2e=n(MW,"STRONG",{});var Fbt=s(B2e);bAr=r(Fbt,"not"),Fbt.forEach(t),vAr=r(MW,` load the model weights. It only affects the
model\u2019s configuration. Use `),x2e=n(MW,"CODE",{});var Cbt=s(x2e);TAr=r(Cbt,"from_pretrained()"),Cbt.forEach(t),FAr=r(MW,"to load the model weights."),MW.forEach(t),CAr=i(wi),k2e=n(wi,"P",{});var Mbt=s(k2e);MAr=r(Mbt,"Examples:"),Mbt.forEach(t),EAr=i(wi),m(cL.$$.fragment,wi),wi.forEach(t),yAr=i(yi),Do=n(yi,"DIV",{class:!0});var Pa=s(Do);m(fL.$$.fragment,Pa),wAr=i(Pa),R2e=n(Pa,"P",{});var Ebt=s(R2e);AAr=r(Ebt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ebt.forEach(t),LAr=i(Pa),$n=n(Pa,"P",{});var MM=s($n);BAr=r(MM,"The model class to instantiate is selected based on the "),S2e=n(MM,"CODE",{});var ybt=s(S2e);xAr=r(ybt,"model_type"),ybt.forEach(t),kAr=r(MM,` property of the config object (either
passed as an argument or loaded from `),P2e=n(MM,"CODE",{});var wbt=s(P2e);RAr=r(wbt,"pretrained_model_name_or_path"),wbt.forEach(t),SAr=r(MM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=n(MM,"CODE",{});var Abt=s($2e);PAr=r(Abt,"pretrained_model_name_or_path"),Abt.forEach(t),$Ar=r(MM,":"),MM.forEach(t),IAr=i(Pa),I2e=n(Pa,"UL",{});var Lbt=s(I2e);E4=n(Lbt,"LI",{});var R9e=s(E4);D2e=n(R9e,"STRONG",{});var Bbt=s(D2e);DAr=r(Bbt,"vision-encoder-decoder"),Bbt.forEach(t),jAr=r(R9e," \u2014 "),SV=n(R9e,"A",{href:!0});var xbt=s(SV);NAr=r(xbt,"FlaxVisionEncoderDecoderModel"),xbt.forEach(t),qAr=r(R9e," (Vision Encoder decoder model)"),R9e.forEach(t),Lbt.forEach(t),GAr=i(Pa),j2e=n(Pa,"P",{});var kbt=s(j2e);OAr=r(kbt,"Examples:"),kbt.forEach(t),XAr=i(Pa),m(mL.$$.fragment,Pa),Pa.forEach(t),yi.forEach(t),this.h()},h(){d(J,"name","hf:doc:metadata"),d(J,"content",JSON.stringify(qbt)),d(me,"id","auto-classes"),d(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(me,"href","#auto-classes"),d(de,"class","relative group"),d(In,"href","/docs/transformers/pr_15770/en/model_doc/auto#transformers.AutoConfig"),d(jn,"href","/docs/transformers/pr_15770/en/model_doc/auto#transformers.AutoModel"),d(Nn,"href","/docs/transformers/pr_15770/en/model_doc/auto#transformers.AutoTokenizer"),d(Pi,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertModel"),d(Lf,"id","extending-the-auto-classes"),d(Lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lf,"href","#extending-the-auto-classes"),d($i,"class","relative group"),d(xf,"id","transformers.AutoConfig"),d(xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xf,"href","#transformers.AutoConfig"),d(Ii,"class","relative group"),d(p8,"href","/docs/transformers/pr_15770/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(_8,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertConfig"),d(u8,"href","/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartConfig"),d(b8,"href","/docs/transformers/pr_15770/en/model_doc/beit#transformers.BeitConfig"),d(v8,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertConfig"),d(T8,"href","/docs/transformers/pr_15770/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(F8,"href","/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdConfig"),d(C8,"href","/docs/transformers/pr_15770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(M8,"href","/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(E8,"href","/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(y8,"href","/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertConfig"),d(w8,"href","/docs/transformers/pr_15770/en/model_doc/canine#transformers.CanineConfig"),d(A8,"href","/docs/transformers/pr_15770/en/model_doc/clip#transformers.CLIPConfig"),d(L8,"href","/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertConfig"),d(B8,"href","/docs/transformers/pr_15770/en/model_doc/convnext#transformers.ConvNextConfig"),d(x8,"href","/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.CTRLConfig"),d(k8,"href","/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(R8,"href","/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(S8,"href","/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaConfig"),d(P8,"href","/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d($8,"href","/docs/transformers/pr_15770/en/model_doc/deit#transformers.DeiTConfig"),d(I8,"href","/docs/transformers/pr_15770/en/model_doc/detr#transformers.DetrConfig"),d(D8,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertConfig"),d(j8,"href","/docs/transformers/pr_15770/en/model_doc/dpr#transformers.DPRConfig"),d(N8,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraConfig"),d(q8,"href","/docs/transformers/pr_15770/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(G8,"href","/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertConfig"),d(O8,"href","/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetConfig"),d(X8,"href","/docs/transformers/pr_15770/en/model_doc/fsmt#transformers.FSMTConfig"),d(V8,"href","/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelConfig"),d(z8,"href","/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2Config"),d(W8,"href","/docs/transformers/pr_15770/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(Q8,"href","/docs/transformers/pr_15770/en/model_doc/gptj#transformers.GPTJConfig"),d(H8,"href","/docs/transformers/pr_15770/en/model_doc/hubert#transformers.HubertConfig"),d(U8,"href","/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertConfig"),d(J8,"href","/docs/transformers/pr_15770/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(Y8,"href","/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(K8,"href","/docs/transformers/pr_15770/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(Z8,"href","/docs/transformers/pr_15770/en/model_doc/led#transformers.LEDConfig"),d(e9,"href","/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerConfig"),d(o9,"href","/docs/transformers/pr_15770/en/model_doc/luke#transformers.LukeConfig"),d(r9,"href","/docs/transformers/pr_15770/en/model_doc/lxmert#transformers.LxmertConfig"),d(t9,"href","/docs/transformers/pr_15770/en/model_doc/m2m_100#transformers.M2M100Config"),d(a9,"href","/docs/transformers/pr_15770/en/model_doc/marian#transformers.MarianConfig"),d(n9,"href","/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartConfig"),d(s9,"href","/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(l9,"href","/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(i9,"href","/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetConfig"),d(d9,"href","/docs/transformers/pr_15770/en/model_doc/mt5#transformers.MT5Config"),d(c9,"href","/docs/transformers/pr_15770/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(f9,"href","/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(m9,"href","/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.PegasusConfig"),d(g9,"href","/docs/transformers/pr_15770/en/model_doc/perceiver#transformers.PerceiverConfig"),d(h9,"href","/docs/transformers/pr_15770/en/model_doc/plbart#transformers.PLBartConfig"),d(p9,"href","/docs/transformers/pr_15770/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(_9,"href","/docs/transformers/pr_15770/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(u9,"href","/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(b9,"href","/docs/transformers/pr_15770/en/model_doc/rag#transformers.RagConfig"),d(v9,"href","/docs/transformers/pr_15770/en/model_doc/realm#transformers.RealmConfig"),d(T9,"href","/docs/transformers/pr_15770/en/model_doc/reformer#transformers.ReformerConfig"),d(F9,"href","/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertConfig"),d(C9,"href","/docs/transformers/pr_15770/en/model_doc/resnet#transformers.ResNetConfig"),d(M9,"href","/docs/transformers/pr_15770/en/model_doc/retribert#transformers.RetriBertConfig"),d(E9,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaConfig"),d(y9,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerConfig"),d(w9,"href","/docs/transformers/pr_15770/en/model_doc/segformer#transformers.SegformerConfig"),d(A9,"href","/docs/transformers/pr_15770/en/model_doc/sew#transformers.SEWConfig"),d(L9,"href","/docs/transformers/pr_15770/en/model_doc/sew-d#transformers.SEWDConfig"),d(B9,"href","/docs/transformers/pr_15770/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(x9,"href","/docs/transformers/pr_15770/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(k9,"href","/docs/transformers/pr_15770/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(R9,"href","/docs/transformers/pr_15770/en/model_doc/splinter#transformers.SplinterConfig"),d(S9,"href","/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(P9,"href","/docs/transformers/pr_15770/en/model_doc/swin#transformers.SwinConfig"),d($9,"href","/docs/transformers/pr_15770/en/model_doc/t5#transformers.T5Config"),d(I9,"href","/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasConfig"),d(D9,"href","/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(j9,"href","/docs/transformers/pr_15770/en/model_doc/trocr#transformers.TrOCRConfig"),d(N9,"href","/docs/transformers/pr_15770/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(q9,"href","/docs/transformers/pr_15770/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(G9,"href","/docs/transformers/pr_15770/en/model_doc/vilt#transformers.ViltConfig"),d(O9,"href","/docs/transformers/pr_15770/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(X9,"href","/docs/transformers/pr_15770/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(V9,"href","/docs/transformers/pr_15770/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(z9,"href","/docs/transformers/pr_15770/en/model_doc/vit#transformers.ViTConfig"),d(W9,"href","/docs/transformers/pr_15770/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(Q9,"href","/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(H9,"href","/docs/transformers/pr_15770/en/model_doc/wavlm#transformers.WavLMConfig"),d(U9,"href","/docs/transformers/pr_15770/en/model_doc/xglm#transformers.XGLMConfig"),d(J9,"href","/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMConfig"),d(Y9,"href","/docs/transformers/pr_15770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(K9,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(Z9,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(eB,"href","/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetConfig"),d(oB,"href","/docs/transformers/pr_15770/en/model_doc/yoso#transformers.YosoConfig"),d(fo,"class","docstring"),d(ug,"class","docstring"),d(Xo,"class","docstring"),d(bg,"id","transformers.AutoTokenizer"),d(bg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bg,"href","#transformers.AutoTokenizer"),d(ji,"class","relative group"),d(rB,"href","/docs/transformers/pr_15770/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(tB,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertTokenizer"),d(aB,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(nB,"href","/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartTokenizer"),d(sB,"href","/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartTokenizerFast"),d(lB,"href","/docs/transformers/pr_15770/en/model_doc/barthez#transformers.BarthezTokenizer"),d(iB,"href","/docs/transformers/pr_15770/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(dB,"href","/docs/transformers/pr_15770/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(cB,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertTokenizer"),d(fB,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertTokenizerFast"),d(mB,"href","/docs/transformers/pr_15770/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(gB,"href","/docs/transformers/pr_15770/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(hB,"href","/docs/transformers/pr_15770/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(pB,"href","/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(_B,"href","/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(uB,"href","/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(bB,"href","/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(vB,"href","/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(TB,"href","/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(FB,"href","/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(CB,"href","/docs/transformers/pr_15770/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(MB,"href","/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertTokenizer"),d(EB,"href","/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(yB,"href","/docs/transformers/pr_15770/en/model_doc/canine#transformers.CanineTokenizer"),d(wB,"href","/docs/transformers/pr_15770/en/model_doc/clip#transformers.CLIPTokenizer"),d(AB,"href","/docs/transformers/pr_15770/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(LB,"href","/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(BB,"href","/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(xB,"href","/docs/transformers/pr_15770/en/model_doc/cpm#transformers.CpmTokenizer"),d(kB,"href","/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(RB,"href","/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaTokenizer"),d(SB,"href","/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(PB,"href","/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d($B,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(IB,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(DB,"href","/docs/transformers/pr_15770/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(jB,"href","/docs/transformers/pr_15770/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(NB,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraTokenizer"),d(qB,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(GB,"href","/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(OB,"href","/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetTokenizer"),d(XB,"href","/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(VB,"href","/docs/transformers/pr_15770/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(zB,"href","/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelTokenizer"),d(WB,"href","/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(QB,"href","/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(HB,"href","/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(UB,"href","/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(JB,"href","/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(YB,"href","/docs/transformers/pr_15770/en/model_doc/herbert#transformers.HerbertTokenizer"),d(KB,"href","/docs/transformers/pr_15770/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(ZB,"href","/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(ex,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaTokenizer"),d(ox,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(rx,"href","/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(tx,"href","/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(ax,"href","/docs/transformers/pr_15770/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(nx,"href","/docs/transformers/pr_15770/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(sx,"href","/docs/transformers/pr_15770/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(lx,"href","/docs/transformers/pr_15770/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(ix,"href","/docs/transformers/pr_15770/en/model_doc/led#transformers.LEDTokenizer"),d(dx,"href","/docs/transformers/pr_15770/en/model_doc/led#transformers.LEDTokenizerFast"),d(cx,"href","/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerTokenizer"),d(fx,"href","/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(mx,"href","/docs/transformers/pr_15770/en/model_doc/luke#transformers.LukeTokenizer"),d(gx,"href","/docs/transformers/pr_15770/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(hx,"href","/docs/transformers/pr_15770/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(px,"href","/docs/transformers/pr_15770/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(_x,"href","/docs/transformers/pr_15770/en/model_doc/marian#transformers.MarianTokenizer"),d(ux,"href","/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartTokenizer"),d(bx,"href","/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(vx,"href","/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(Tx,"href","/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(Fx,"href","/docs/transformers/pr_15770/en/model_doc/mluke#transformers.MLukeTokenizer"),d(Cx,"href","/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(Mx,"href","/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(Ex,"href","/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(yx,"href","/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(wx,"href","/docs/transformers/pr_15770/en/model_doc/mt5#transformers.T5Tokenizer"),d(Ax,"href","/docs/transformers/pr_15770/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Lx,"href","/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(Bx,"href","/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(xx,"href","/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(kx,"href","/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Rx,"href","/docs/transformers/pr_15770/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(Sx,"href","/docs/transformers/pr_15770/en/model_doc/phobert#transformers.PhobertTokenizer"),d(Px,"href","/docs/transformers/pr_15770/en/model_doc/plbart#transformers.PLBartTokenizer"),d($x,"href","/docs/transformers/pr_15770/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(Ix,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertTokenizer"),d(Dx,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertTokenizerFast"),d(jx,"href","/docs/transformers/pr_15770/en/model_doc/rag#transformers.RagTokenizer"),d(Nx,"href","/docs/transformers/pr_15770/en/model_doc/reformer#transformers.ReformerTokenizer"),d(qx,"href","/docs/transformers/pr_15770/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(Gx,"href","/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertTokenizer"),d(Ox,"href","/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Xx,"href","/docs/transformers/pr_15770/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Vx,"href","/docs/transformers/pr_15770/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(zx,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Wx,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Qx,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Hx,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Ux,"href","/docs/transformers/pr_15770/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Jx,"href","/docs/transformers/pr_15770/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(Yx,"href","/docs/transformers/pr_15770/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Kx,"href","/docs/transformers/pr_15770/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(Zx,"href","/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(ek,"href","/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(ok,"href","/docs/transformers/pr_15770/en/model_doc/mt5#transformers.T5Tokenizer"),d(rk,"href","/docs/transformers/pr_15770/en/model_doc/mt5#transformers.T5TokenizerFast"),d(tk,"href","/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasTokenizer"),d(ak,"href","/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(nk,"href","/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(sk,"href","/docs/transformers/pr_15770/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(lk,"href","/docs/transformers/pr_15770/en/model_doc/xglm#transformers.XGLMTokenizer"),d(ik,"href","/docs/transformers/pr_15770/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(dk,"href","/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMTokenizer"),d(ck,"href","/docs/transformers/pr_15770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(fk,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(mk,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(gk,"href","/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(hk,"href","/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(mo,"class","docstring"),d(Hg,"class","docstring"),d(Vo,"class","docstring"),d(Ug,"id","transformers.AutoFeatureExtractor"),d(Ug,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ug,"href","#transformers.AutoFeatureExtractor"),d(Ni,"class","relative group"),d(pk,"href","/docs/transformers/pr_15770/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(_k,"href","/docs/transformers/pr_15770/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(uk,"href","/docs/transformers/pr_15770/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(bk,"href","/docs/transformers/pr_15770/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(vk,"href","/docs/transformers/pr_15770/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(Tk,"href","/docs/transformers/pr_15770/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(Fk,"href","/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Ck,"href","/docs/transformers/pr_15770/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(Mk,"href","/docs/transformers/pr_15770/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(Ek,"href","/docs/transformers/pr_15770/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(yk,"href","/docs/transformers/pr_15770/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(wk,"href","/docs/transformers/pr_15770/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(Ak,"href","/docs/transformers/pr_15770/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(Lk,"href","/docs/transformers/pr_15770/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Bk,"href","/docs/transformers/pr_15770/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(xk,"href","/docs/transformers/pr_15770/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(kk,"href","/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(ke,"class","docstring"),d(gh,"class","docstring"),d(zo,"class","docstring"),d(hh,"id","transformers.AutoProcessor"),d(hh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hh,"href","#transformers.AutoProcessor"),d(qi,"class","relative group"),d(Rk,"href","/docs/transformers/pr_15770/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(Sk,"href","/docs/transformers/pr_15770/en/model_doc/clip#transformers.CLIPProcessor"),d(Pk,"href","/docs/transformers/pr_15770/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d($k,"href","/docs/transformers/pr_15770/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(Ik,"href","/docs/transformers/pr_15770/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(Dk,"href","/docs/transformers/pr_15770/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(jk,"href","/docs/transformers/pr_15770/en/model_doc/trocr#transformers.TrOCRProcessor"),d(Nk,"href","/docs/transformers/pr_15770/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(qk,"href","/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Re,"class","docstring"),d(Eh,"class","docstring"),d(Wo,"class","docstring"),d(yh,"id","transformers.AutoModel"),d(yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yh,"href","#transformers.AutoModel"),d(Oi,"class","relative group"),d(qr,"class","docstring"),d(Gk,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertModel"),d(Ok,"href","/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartModel"),d(Xk,"href","/docs/transformers/pr_15770/en/model_doc/beit#transformers.BeitModel"),d(Vk,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertModel"),d(zk,"href","/docs/transformers/pr_15770/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(Wk,"href","/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdModel"),d(Qk,"href","/docs/transformers/pr_15770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(Hk,"href","/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(Uk,"href","/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(Jk,"href","/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertModel"),d(Yk,"href","/docs/transformers/pr_15770/en/model_doc/canine#transformers.CanineModel"),d(Kk,"href","/docs/transformers/pr_15770/en/model_doc/clip#transformers.CLIPModel"),d(Zk,"href","/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertModel"),d(eR,"href","/docs/transformers/pr_15770/en/model_doc/convnext#transformers.ConvNextModel"),d(oR,"href","/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.CTRLModel"),d(rR,"href","/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(tR,"href","/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(aR,"href","/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaModel"),d(nR,"href","/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(sR,"href","/docs/transformers/pr_15770/en/model_doc/deit#transformers.DeiTModel"),d(lR,"href","/docs/transformers/pr_15770/en/model_doc/detr#transformers.DetrModel"),d(iR,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertModel"),d(dR,"href","/docs/transformers/pr_15770/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(cR,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraModel"),d(fR,"href","/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertModel"),d(mR,"href","/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetModel"),d(gR,"href","/docs/transformers/pr_15770/en/model_doc/fsmt#transformers.FSMTModel"),d(hR,"href","/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelModel"),d(pR,"href","/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelBaseModel"),d(_R,"href","/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2Model"),d(uR,"href","/docs/transformers/pr_15770/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(bR,"href","/docs/transformers/pr_15770/en/model_doc/gptj#transformers.GPTJModel"),d(vR,"href","/docs/transformers/pr_15770/en/model_doc/hubert#transformers.HubertModel"),d(TR,"href","/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertModel"),d(FR,"href","/docs/transformers/pr_15770/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(CR,"href","/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(MR,"href","/docs/transformers/pr_15770/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(ER,"href","/docs/transformers/pr_15770/en/model_doc/led#transformers.LEDModel"),d(yR,"href","/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerModel"),d(wR,"href","/docs/transformers/pr_15770/en/model_doc/luke#transformers.LukeModel"),d(AR,"href","/docs/transformers/pr_15770/en/model_doc/lxmert#transformers.LxmertModel"),d(LR,"href","/docs/transformers/pr_15770/en/model_doc/m2m_100#transformers.M2M100Model"),d(BR,"href","/docs/transformers/pr_15770/en/model_doc/marian#transformers.MarianModel"),d(xR,"href","/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartModel"),d(kR,"href","/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(RR,"href","/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertModel"),d(SR,"href","/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetModel"),d(PR,"href","/docs/transformers/pr_15770/en/model_doc/mt5#transformers.MT5Model"),d($R,"href","/docs/transformers/pr_15770/en/model_doc/nystromformer#transformers.NystromformerModel"),d(IR,"href","/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(DR,"href","/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.PegasusModel"),d(jR,"href","/docs/transformers/pr_15770/en/model_doc/perceiver#transformers.PerceiverModel"),d(NR,"href","/docs/transformers/pr_15770/en/model_doc/plbart#transformers.PLBartModel"),d(qR,"href","/docs/transformers/pr_15770/en/model_doc/poolformer#transformers.PoolFormerModel"),d(GR,"href","/docs/transformers/pr_15770/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(OR,"href","/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertModel"),d(XR,"href","/docs/transformers/pr_15770/en/model_doc/reformer#transformers.ReformerModel"),d(VR,"href","/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertModel"),d(zR,"href","/docs/transformers/pr_15770/en/model_doc/resnet#transformers.ResNetModel"),d(WR,"href","/docs/transformers/pr_15770/en/model_doc/retribert#transformers.RetriBertModel"),d(QR,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaModel"),d(HR,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerModel"),d(UR,"href","/docs/transformers/pr_15770/en/model_doc/segformer#transformers.SegformerModel"),d(JR,"href","/docs/transformers/pr_15770/en/model_doc/sew#transformers.SEWModel"),d(YR,"href","/docs/transformers/pr_15770/en/model_doc/sew-d#transformers.SEWDModel"),d(KR,"href","/docs/transformers/pr_15770/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(ZR,"href","/docs/transformers/pr_15770/en/model_doc/splinter#transformers.SplinterModel"),d(eS,"href","/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(oS,"href","/docs/transformers/pr_15770/en/model_doc/swin#transformers.SwinModel"),d(rS,"href","/docs/transformers/pr_15770/en/model_doc/t5#transformers.T5Model"),d(tS,"href","/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasModel"),d(aS,"href","/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(nS,"href","/docs/transformers/pr_15770/en/model_doc/unispeech#transformers.UniSpeechModel"),d(sS,"href","/docs/transformers/pr_15770/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(lS,"href","/docs/transformers/pr_15770/en/model_doc/vilt#transformers.ViltModel"),d(iS,"href","/docs/transformers/pr_15770/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(dS,"href","/docs/transformers/pr_15770/en/model_doc/visual_bert#transformers.VisualBertModel"),d(cS,"href","/docs/transformers/pr_15770/en/model_doc/vit#transformers.ViTModel"),d(fS,"href","/docs/transformers/pr_15770/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(mS,"href","/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(gS,"href","/docs/transformers/pr_15770/en/model_doc/wavlm#transformers.WavLMModel"),d(hS,"href","/docs/transformers/pr_15770/en/model_doc/xglm#transformers.XGLMModel"),d(pS,"href","/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMModel"),d(_S,"href","/docs/transformers/pr_15770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(uS,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(bS,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(vS,"href","/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetModel"),d(TS,"href","/docs/transformers/pr_15770/en/model_doc/yoso#transformers.YosoModel"),d(Se,"class","docstring"),d(Qo,"class","docstring"),d(n_,"id","transformers.AutoModelForPreTraining"),d(n_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n_,"href","#transformers.AutoModelForPreTraining"),d(zi,"class","relative group"),d(Gr,"class","docstring"),d(FS,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertForPreTraining"),d(CS,"href","/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(MS,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertForPreTraining"),d(ES,"href","/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(yS,"href","/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(wS,"href","/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(AS,"href","/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(LS,"href","/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(BS,"href","/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(xS,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(kS,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraForPreTraining"),d(RS,"href","/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(SS,"href","/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetForPreTraining"),d(PS,"href","/docs/transformers/pr_15770/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d($S,"href","/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(IS,"href","/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(DS,"href","/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(jS,"href","/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(NS,"href","/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(qS,"href","/docs/transformers/pr_15770/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(GS,"href","/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(OS,"href","/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(XS,"href","/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(VS,"href","/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(zS,"href","/docs/transformers/pr_15770/en/model_doc/retribert#transformers.RetriBertModel"),d(WS,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(QS,"href","/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(HS,"href","/docs/transformers/pr_15770/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(US,"href","/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(JS,"href","/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(YS,"href","/docs/transformers/pr_15770/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(KS,"href","/docs/transformers/pr_15770/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(ZS,"href","/docs/transformers/pr_15770/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(eP,"href","/docs/transformers/pr_15770/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(oP,"href","/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(rP,"href","/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(tP,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(aP,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(nP,"href","/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Pe,"class","docstring"),d(Ho,"class","docstring"),d(W_,"id","transformers.AutoModelForCausalLM"),d(W_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W_,"href","#transformers.AutoModelForCausalLM"),d(Hi,"class","relative group"),d(Or,"class","docstring"),d(sP,"href","/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartForCausalLM"),d(lP,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertLMHeadModel"),d(iP,"href","/docs/transformers/pr_15770/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(dP,"href","/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(cP,"href","/docs/transformers/pr_15770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(fP,"href","/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(mP,"href","/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(gP,"href","/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(hP,"href","/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(pP,"href","/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(_P,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraForCausalLM"),d(uP,"href","/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(bP,"href","/docs/transformers/pr_15770/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(vP,"href","/docs/transformers/pr_15770/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(TP,"href","/docs/transformers/pr_15770/en/model_doc/marian#transformers.MarianForCausalLM"),d(FP,"href","/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartForCausalLM"),d(CP,"href","/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(MP,"href","/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(EP,"href","/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(yP,"href","/docs/transformers/pr_15770/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(wP,"href","/docs/transformers/pr_15770/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(AP,"href","/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(LP,"href","/docs/transformers/pr_15770/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(BP,"href","/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(xP,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(kP,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(RP,"href","/docs/transformers/pr_15770/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(SP,"href","/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(PP,"href","/docs/transformers/pr_15770/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d($P,"href","/docs/transformers/pr_15770/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(IP,"href","/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(DP,"href","/docs/transformers/pr_15770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(jP,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(NP,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(qP,"href","/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d($e,"class","docstring"),d(Uo,"class","docstring"),d(Bu,"id","transformers.AutoModelForMaskedLM"),d(Bu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bu,"href","#transformers.AutoModelForMaskedLM"),d(Yi,"class","relative group"),d(Xr,"class","docstring"),d(GP,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(OP,"href","/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(XP,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertForMaskedLM"),d(VP,"href","/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(zP,"href","/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(WP,"href","/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(QP,"href","/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(HP,"href","/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(UP,"href","/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(JP,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(YP,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(KP,"href","/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(ZP,"href","/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(e$,"href","/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(o$,"href","/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(r$,"href","/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(t$,"href","/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(a$,"href","/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(n$,"href","/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(s$,"href","/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(l$,"href","/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(i$,"href","/docs/transformers/pr_15770/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(d$,"href","/docs/transformers/pr_15770/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(c$,"href","/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(f$,"href","/docs/transformers/pr_15770/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(m$,"href","/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(g$,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(h$,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(p$,"href","/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(_$,"href","/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(u$,"href","/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(b$,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(v$,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(T$,"href","/docs/transformers/pr_15770/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(Ie,"class","docstring"),d(Jo,"class","docstring"),d(m1,"id","transformers.AutoModelForSeq2SeqLM"),d(m1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m1,"href","#transformers.AutoModelForSeq2SeqLM"),d(ed,"class","relative group"),d(Vr,"class","docstring"),d(F$,"href","/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(C$,"href","/docs/transformers/pr_15770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(M$,"href","/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(E$,"href","/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(y$,"href","/docs/transformers/pr_15770/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(w$,"href","/docs/transformers/pr_15770/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(A$,"href","/docs/transformers/pr_15770/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(L$,"href","/docs/transformers/pr_15770/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(B$,"href","/docs/transformers/pr_15770/en/model_doc/marian#transformers.MarianMTModel"),d(x$,"href","/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(k$,"href","/docs/transformers/pr_15770/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(R$,"href","/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(S$,"href","/docs/transformers/pr_15770/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(P$,"href","/docs/transformers/pr_15770/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d($$,"href","/docs/transformers/pr_15770/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(I$,"href","/docs/transformers/pr_15770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(De,"class","docstring"),d(Yo,"class","docstring"),d(x1,"id","transformers.AutoModelForSequenceClassification"),d(x1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x1,"href","#transformers.AutoModelForSequenceClassification"),d(td,"class","relative group"),d(zr,"class","docstring"),d(D$,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(j$,"href","/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartForSequenceClassification"),d(N$,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertForSequenceClassification"),d(q$,"href","/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(G$,"href","/docs/transformers/pr_15770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(O$,"href","/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(X$,"href","/docs/transformers/pr_15770/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(V$,"href","/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(z$,"href","/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(W$,"href","/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Q$,"href","/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(H$,"href","/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(U$,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(J$,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(Y$,"href","/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(K$,"href","/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(Z$,"href","/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(eI,"href","/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(oI,"href","/docs/transformers/pr_15770/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(rI,"href","/docs/transformers/pr_15770/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(tI,"href","/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(aI,"href","/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(nI,"href","/docs/transformers/pr_15770/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(sI,"href","/docs/transformers/pr_15770/en/model_doc/led#transformers.LEDForSequenceClassification"),d(lI,"href","/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(iI,"href","/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(dI,"href","/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(cI,"href","/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(fI,"href","/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(mI,"href","/docs/transformers/pr_15770/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(gI,"href","/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(hI,"href","/docs/transformers/pr_15770/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(pI,"href","/docs/transformers/pr_15770/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(_I,"href","/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(uI,"href","/docs/transformers/pr_15770/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(bI,"href","/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(vI,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(TI,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(FI,"href","/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(CI,"href","/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(MI,"href","/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(EI,"href","/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(yI,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(wI,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(AI,"href","/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(LI,"href","/docs/transformers/pr_15770/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(E7,"id","transformers.AutoModelForMultipleChoice"),d(E7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E7,"href","#transformers.AutoModelForMultipleChoice"),d(sd,"class","relative group"),d(Wr,"class","docstring"),d(BI,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(xI,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertForMultipleChoice"),d(kI,"href","/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(RI,"href","/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(SI,"href","/docs/transformers/pr_15770/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(PI,"href","/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d($I,"href","/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(II,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(DI,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(jI,"href","/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(NI,"href","/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(qI,"href","/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(GI,"href","/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(OI,"href","/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(XI,"href","/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(VI,"href","/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(zI,"href","/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(WI,"href","/docs/transformers/pr_15770/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(QI,"href","/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(HI,"href","/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(UI,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(JI,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(YI,"href","/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(KI,"href","/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(ZI,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(eD,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(oD,"href","/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(rD,"href","/docs/transformers/pr_15770/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ne,"class","docstring"),d(Zo,"class","docstring"),d(eb,"id","transformers.AutoModelForNextSentencePrediction"),d(eb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eb,"href","#transformers.AutoModelForNextSentencePrediction"),d(dd,"class","relative group"),d(Qr,"class","docstring"),d(tD,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(aD,"href","/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(nD,"href","/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(sD,"href","/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(lD,"href","/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(qe,"class","docstring"),d(er,"class","docstring"),d(lb,"id","transformers.AutoModelForTokenClassification"),d(lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lb,"href","#transformers.AutoModelForTokenClassification"),d(md,"class","relative group"),d(Hr,"class","docstring"),d(iD,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(dD,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertForTokenClassification"),d(cD,"href","/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(fD,"href","/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(mD,"href","/docs/transformers/pr_15770/en/model_doc/canine#transformers.CanineForTokenClassification"),d(gD,"href","/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(hD,"href","/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(pD,"href","/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(_D,"href","/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(uD,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(bD,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(vD,"href","/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(TD,"href","/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(FD,"href","/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(CD,"href","/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(MD,"href","/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(ED,"href","/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(yD,"href","/docs/transformers/pr_15770/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(wD,"href","/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(AD,"href","/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(LD,"href","/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(BD,"href","/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(xD,"href","/docs/transformers/pr_15770/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(kD,"href","/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(RD,"href","/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(SD,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(PD,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d($D,"href","/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(ID,"href","/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(DD,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(jD,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(ND,"href","/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(qD,"href","/docs/transformers/pr_15770/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(Ge,"class","docstring"),d(or,"class","docstring"),d(Ob,"id","transformers.AutoModelForQuestionAnswering"),d(Ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ob,"href","#transformers.AutoModelForQuestionAnswering"),d(pd,"class","relative group"),d(Ur,"class","docstring"),d(GD,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(OD,"href","/docs/transformers/pr_15770/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(XD,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(VD,"href","/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(zD,"href","/docs/transformers/pr_15770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(WD,"href","/docs/transformers/pr_15770/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(QD,"href","/docs/transformers/pr_15770/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(HD,"href","/docs/transformers/pr_15770/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(UD,"href","/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(JD,"href","/docs/transformers/pr_15770/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(YD,"href","/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(KD,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(ZD,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(ej,"href","/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(oj,"href","/docs/transformers/pr_15770/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(rj,"href","/docs/transformers/pr_15770/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(tj,"href","/docs/transformers/pr_15770/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(aj,"href","/docs/transformers/pr_15770/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(nj,"href","/docs/transformers/pr_15770/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(sj,"href","/docs/transformers/pr_15770/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(lj,"href","/docs/transformers/pr_15770/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(ij,"href","/docs/transformers/pr_15770/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(dj,"href","/docs/transformers/pr_15770/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(cj,"href","/docs/transformers/pr_15770/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(fj,"href","/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(mj,"href","/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(gj,"href","/docs/transformers/pr_15770/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(hj,"href","/docs/transformers/pr_15770/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(pj,"href","/docs/transformers/pr_15770/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(_j,"href","/docs/transformers/pr_15770/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(uj,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(bj,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(vj,"href","/docs/transformers/pr_15770/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(Tj,"href","/docs/transformers/pr_15770/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(Fj,"href","/docs/transformers/pr_15770/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(Cj,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(Mj,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(Ej,"href","/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(yj,"href","/docs/transformers/pr_15770/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Oe,"class","docstring"),d(rr,"class","docstring"),d(B5,"id","transformers.AutoModelForTableQuestionAnswering"),d(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B5,"href","#transformers.AutoModelForTableQuestionAnswering"),d(bd,"class","relative group"),d(Jr,"class","docstring"),d(wj,"href","/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Xe,"class","docstring"),d(tr,"class","docstring"),d(R5,"id","transformers.AutoModelForImageClassification"),d(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R5,"href","#transformers.AutoModelForImageClassification"),d(Fd,"class","relative group"),d(Yr,"class","docstring"),d(Aj,"href","/docs/transformers/pr_15770/en/model_doc/beit#transformers.BeitForImageClassification"),d(Lj,"href","/docs/transformers/pr_15770/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(Bj,"href","/docs/transformers/pr_15770/en/model_doc/deit#transformers.DeiTForImageClassification"),d(xj,"href","/docs/transformers/pr_15770/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(kj,"href","/docs/transformers/pr_15770/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(Rj,"href","/docs/transformers/pr_15770/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(Sj,"href","/docs/transformers/pr_15770/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(Pj,"href","/docs/transformers/pr_15770/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d($j,"href","/docs/transformers/pr_15770/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(Ij,"href","/docs/transformers/pr_15770/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(Dj,"href","/docs/transformers/pr_15770/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(jj,"href","/docs/transformers/pr_15770/en/model_doc/swin#transformers.SwinForImageClassification"),d(Nj,"href","/docs/transformers/pr_15770/en/model_doc/vit#transformers.ViTForImageClassification"),d(Ve,"class","docstring"),d(ar,"class","docstring"),d(O5,"id","transformers.AutoModelForVision2Seq"),d(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O5,"href","#transformers.AutoModelForVision2Seq"),d(Ed,"class","relative group"),d(Kr,"class","docstring"),d(qj,"href","/docs/transformers/pr_15770/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(ze,"class","docstring"),d(nr,"class","docstring"),d(z5,"id","transformers.AutoModelForAudioClassification"),d(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z5,"href","#transformers.AutoModelForAudioClassification"),d(Ad,"class","relative group"),d(Zr,"class","docstring"),d(Gj,"href","/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(Oj,"href","/docs/transformers/pr_15770/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(Xj,"href","/docs/transformers/pr_15770/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(Vj,"href","/docs/transformers/pr_15770/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(zj,"href","/docs/transformers/pr_15770/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(Wj,"href","/docs/transformers/pr_15770/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(Qj,"href","/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(Hj,"href","/docs/transformers/pr_15770/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(We,"class","docstring"),d(sr,"class","docstring"),d(o2,"id","transformers.AutoModelForAudioFrameClassification"),d(o2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o2,"href","#transformers.AutoModelForAudioFrameClassification"),d(xd,"class","relative group"),d(et,"class","docstring"),d(Uj,"href","/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(Jj,"href","/docs/transformers/pr_15770/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(Yj,"href","/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(Kj,"href","/docs/transformers/pr_15770/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Qe,"class","docstring"),d(lr,"class","docstring"),d(l2,"id","transformers.AutoModelForCTC"),d(l2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l2,"href","#transformers.AutoModelForCTC"),d(Sd,"class","relative group"),d(ot,"class","docstring"),d(Zj,"href","/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(eN,"href","/docs/transformers/pr_15770/en/model_doc/hubert#transformers.HubertForCTC"),d(oN,"href","/docs/transformers/pr_15770/en/model_doc/sew#transformers.SEWForCTC"),d(rN,"href","/docs/transformers/pr_15770/en/model_doc/sew-d#transformers.SEWDForCTC"),d(tN,"href","/docs/transformers/pr_15770/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(aN,"href","/docs/transformers/pr_15770/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(nN,"href","/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(sN,"href","/docs/transformers/pr_15770/en/model_doc/wavlm#transformers.WavLMForCTC"),d(He,"class","docstring"),d(ir,"class","docstring"),d(u2,"id","transformers.AutoModelForSpeechSeq2Seq"),d(u2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u2,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Id,"class","relative group"),d(rt,"class","docstring"),d(lN,"href","/docs/transformers/pr_15770/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(iN,"href","/docs/transformers/pr_15770/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ue,"class","docstring"),d(dr,"class","docstring"),d(F2,"id","transformers.AutoModelForAudioXVector"),d(F2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F2,"href","#transformers.AutoModelForAudioXVector"),d(Nd,"class","relative group"),d(tt,"class","docstring"),d(dN,"href","/docs/transformers/pr_15770/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(cN,"href","/docs/transformers/pr_15770/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(fN,"href","/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(mN,"href","/docs/transformers/pr_15770/en/model_doc/wavlm#transformers.WavLMForXVector"),d(Je,"class","docstring"),d(cr,"class","docstring"),d(A2,"id","transformers.AutoModelForMaskedImageModeling"),d(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A2,"href","#transformers.AutoModelForMaskedImageModeling"),d(Od,"class","relative group"),d(at,"class","docstring"),d(gN,"href","/docs/transformers/pr_15770/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(hN,"href","/docs/transformers/pr_15770/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(pN,"href","/docs/transformers/pr_15770/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(Ye,"class","docstring"),d(fr,"class","docstring"),d(R2,"id","transformers.AutoModelForObjectDetection"),d(R2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R2,"href","#transformers.AutoModelForObjectDetection"),d(Wd,"class","relative group"),d(nt,"class","docstring"),d(_N,"href","/docs/transformers/pr_15770/en/model_doc/detr#transformers.DetrForObjectDetection"),d(Ke,"class","docstring"),d(mr,"class","docstring"),d($2,"id","transformers.AutoModelForImageSegmentation"),d($2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($2,"href","#transformers.AutoModelForImageSegmentation"),d(Ud,"class","relative group"),d(st,"class","docstring"),d(uN,"href","/docs/transformers/pr_15770/en/model_doc/detr#transformers.DetrForSegmentation"),d(Ze,"class","docstring"),d(gr,"class","docstring"),d(j2,"id","transformers.AutoModelForSemanticSegmentation"),d(j2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j2,"href","#transformers.AutoModelForSemanticSegmentation"),d(Kd,"class","relative group"),d(lt,"class","docstring"),d(bN,"href","/docs/transformers/pr_15770/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(vN,"href","/docs/transformers/pr_15770/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(eo,"class","docstring"),d(hr,"class","docstring"),d(O2,"id","transformers.TFAutoModel"),d(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O2,"href","#transformers.TFAutoModel"),d(oc,"class","relative group"),d(it,"class","docstring"),d(TN,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.TFAlbertModel"),d(FN,"href","/docs/transformers/pr_15770/en/model_doc/bart#transformers.TFBartModel"),d(CN,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.TFBertModel"),d(MN,"href","/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(EN,"href","/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(yN,"href","/docs/transformers/pr_15770/en/model_doc/camembert#transformers.TFCamembertModel"),d(wN,"href","/docs/transformers/pr_15770/en/model_doc/clip#transformers.TFCLIPModel"),d(AN,"href","/docs/transformers/pr_15770/en/model_doc/convbert#transformers.TFConvBertModel"),d(LN,"href","/docs/transformers/pr_15770/en/model_doc/convnext#transformers.TFConvNextModel"),d(BN,"href","/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.TFCTRLModel"),d(xN,"href","/docs/transformers/pr_15770/en/model_doc/deberta#transformers.TFDebertaModel"),d(kN,"href","/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(RN,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(SN,"href","/docs/transformers/pr_15770/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(PN,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.TFElectraModel"),d($N,"href","/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(IN,"href","/docs/transformers/pr_15770/en/model_doc/funnel#transformers.TFFunnelModel"),d(DN,"href","/docs/transformers/pr_15770/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(jN,"href","/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.TFGPT2Model"),d(NN,"href","/docs/transformers/pr_15770/en/model_doc/hubert#transformers.TFHubertModel"),d(qN,"href","/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(GN,"href","/docs/transformers/pr_15770/en/model_doc/led#transformers.TFLEDModel"),d(ON,"href","/docs/transformers/pr_15770/en/model_doc/longformer#transformers.TFLongformerModel"),d(XN,"href","/docs/transformers/pr_15770/en/model_doc/lxmert#transformers.TFLxmertModel"),d(VN,"href","/docs/transformers/pr_15770/en/model_doc/marian#transformers.TFMarianModel"),d(zN,"href","/docs/transformers/pr_15770/en/model_doc/mbart#transformers.TFMBartModel"),d(WN,"href","/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(QN,"href","/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.TFMPNetModel"),d(HN,"href","/docs/transformers/pr_15770/en/model_doc/mt5#transformers.TFMT5Model"),d(UN,"href","/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(JN,"href","/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.TFPegasusModel"),d(YN,"href","/docs/transformers/pr_15770/en/model_doc/rembert#transformers.TFRemBertModel"),d(KN,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.TFRobertaModel"),d(ZN,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.TFRoFormerModel"),d(eq,"href","/docs/transformers/pr_15770/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(oq,"href","/docs/transformers/pr_15770/en/model_doc/t5#transformers.TFT5Model"),d(rq,"href","/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TFTapasModel"),d(tq,"href","/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(aq,"href","/docs/transformers/pr_15770/en/model_doc/vit#transformers.TFViTModel"),d(nq,"href","/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(sq,"href","/docs/transformers/pr_15770/en/model_doc/xlm#transformers.TFXLMModel"),d(lq,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(iq,"href","/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.TFXLNetModel"),d(go,"class","docstring"),d(pr,"class","docstring"),d(xv,"id","transformers.TFAutoModelForPreTraining"),d(xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xv,"href","#transformers.TFAutoModelForPreTraining"),d(ac,"class","relative group"),d(dt,"class","docstring"),d(dq,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(cq,"href","/docs/transformers/pr_15770/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(fq,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.TFBertForPreTraining"),d(mq,"href","/docs/transformers/pr_15770/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(gq,"href","/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(hq,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(pq,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(_q,"href","/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(uq,"href","/docs/transformers/pr_15770/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(bq,"href","/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(vq,"href","/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(Tq,"href","/docs/transformers/pr_15770/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(Fq,"href","/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(Cq,"href","/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(Mq,"href","/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(Eq,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(yq,"href","/docs/transformers/pr_15770/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(wq,"href","/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(Aq,"href","/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(Lq,"href","/docs/transformers/pr_15770/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(Bq,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(xq,"href","/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(ho,"class","docstring"),d(_r,"class","docstring"),d(Zv,"id","transformers.TFAutoModelForCausalLM"),d(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zv,"href","#transformers.TFAutoModelForCausalLM"),d(lc,"class","relative group"),d(ct,"class","docstring"),d(kq,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(Rq,"href","/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(Sq,"href","/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(Pq,"href","/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d($q,"href","/docs/transformers/pr_15770/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(Iq,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(Dq,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(jq,"href","/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(Nq,"href","/docs/transformers/pr_15770/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(qq,"href","/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(ur,"class","docstring"),d(c0,"id","transformers.TFAutoModelForImageClassification"),d(c0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c0,"href","#transformers.TFAutoModelForImageClassification"),d(cc,"class","relative group"),d(ft,"class","docstring"),d(Gq,"href","/docs/transformers/pr_15770/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(Oq,"href","/docs/transformers/pr_15770/en/model_doc/vit#transformers.TFViTForImageClassification"),d(_o,"class","docstring"),d(br,"class","docstring"),d(g0,"id","transformers.TFAutoModelForMaskedLM"),d(g0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g0,"href","#transformers.TFAutoModelForMaskedLM"),d(gc,"class","relative group"),d(mt,"class","docstring"),d(Xq,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(Vq,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(zq,"href","/docs/transformers/pr_15770/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(Wq,"href","/docs/transformers/pr_15770/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(Qq,"href","/docs/transformers/pr_15770/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(Hq,"href","/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(Uq,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(Jq,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(Yq,"href","/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(Kq,"href","/docs/transformers/pr_15770/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(Zq,"href","/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(eG,"href","/docs/transformers/pr_15770/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(oG,"href","/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(rG,"href","/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(tG,"href","/docs/transformers/pr_15770/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(aG,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(nG,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(sG,"href","/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(lG,"href","/docs/transformers/pr_15770/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(iG,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(uo,"class","docstring"),d(vr,"class","docstring"),d(P0,"id","transformers.TFAutoModelForSeq2SeqLM"),d(P0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P0,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(_c,"class","relative group"),d(gt,"class","docstring"),d(dG,"href","/docs/transformers/pr_15770/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(cG,"href","/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(fG,"href","/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(mG,"href","/docs/transformers/pr_15770/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(gG,"href","/docs/transformers/pr_15770/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(hG,"href","/docs/transformers/pr_15770/en/model_doc/marian#transformers.TFMarianMTModel"),d(pG,"href","/docs/transformers/pr_15770/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(_G,"href","/docs/transformers/pr_15770/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(uG,"href","/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(bG,"href","/docs/transformers/pr_15770/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(bo,"class","docstring"),d(Tr,"class","docstring"),d(z0,"id","transformers.TFAutoModelForSequenceClassification"),d(z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z0,"href","#transformers.TFAutoModelForSequenceClassification"),d(vc,"class","relative group"),d(ht,"class","docstring"),d(vG,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(TG,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(FG,"href","/docs/transformers/pr_15770/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(CG,"href","/docs/transformers/pr_15770/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(MG,"href","/docs/transformers/pr_15770/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(EG,"href","/docs/transformers/pr_15770/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(yG,"href","/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(wG,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(AG,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(LG,"href","/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(BG,"href","/docs/transformers/pr_15770/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(xG,"href","/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(kG,"href","/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(RG,"href","/docs/transformers/pr_15770/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(SG,"href","/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(PG,"href","/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d($G,"href","/docs/transformers/pr_15770/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(IG,"href","/docs/transformers/pr_15770/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(DG,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(jG,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(NG,"href","/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(qG,"href","/docs/transformers/pr_15770/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(GG,"href","/docs/transformers/pr_15770/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(OG,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(XG,"href","/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(Fr,"class","docstring"),d(uT,"id","transformers.TFAutoModelForMultipleChoice"),d(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uT,"href","#transformers.TFAutoModelForMultipleChoice"),d(Cc,"class","relative group"),d(pt,"class","docstring"),d(VG,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(zG,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(WG,"href","/docs/transformers/pr_15770/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(QG,"href","/docs/transformers/pr_15770/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(HG,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(UG,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(JG,"href","/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(YG,"href","/docs/transformers/pr_15770/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(KG,"href","/docs/transformers/pr_15770/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(ZG,"href","/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(eO,"href","/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(oO,"href","/docs/transformers/pr_15770/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(rO,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(tO,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(aO,"href","/docs/transformers/pr_15770/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(nO,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(sO,"href","/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Cr,"class","docstring"),d($T,"id","transformers.TFAutoModelForTableQuestionAnswering"),d($T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($T,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(yc,"class","relative group"),d(_t,"class","docstring"),d(lO,"href","/docs/transformers/pr_15770/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Fo,"class","docstring"),d(Mr,"class","docstring"),d(DT,"id","transformers.TFAutoModelForTokenClassification"),d(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(DT,"href","#transformers.TFAutoModelForTokenClassification"),d(Lc,"class","relative group"),d(ut,"class","docstring"),d(iO,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(dO,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(cO,"href","/docs/transformers/pr_15770/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(fO,"href","/docs/transformers/pr_15770/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(mO,"href","/docs/transformers/pr_15770/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(gO,"href","/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(hO,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(pO,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(_O,"href","/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(uO,"href","/docs/transformers/pr_15770/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(bO,"href","/docs/transformers/pr_15770/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(vO,"href","/docs/transformers/pr_15770/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(TO,"href","/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(FO,"href","/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(CO,"href","/docs/transformers/pr_15770/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(MO,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(EO,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(yO,"href","/docs/transformers/pr_15770/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(wO,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(AO,"href","/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Co,"class","docstring"),d(Er,"class","docstring"),d(aF,"id","transformers.TFAutoModelForQuestionAnswering"),d(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aF,"href","#transformers.TFAutoModelForQuestionAnswering"),d(kc,"class","relative group"),d(bt,"class","docstring"),d(LO,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(BO,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(xO,"href","/docs/transformers/pr_15770/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(kO,"href","/docs/transformers/pr_15770/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(RO,"href","/docs/transformers/pr_15770/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(SO,"href","/docs/transformers/pr_15770/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(PO,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d($O,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(IO,"href","/docs/transformers/pr_15770/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(DO,"href","/docs/transformers/pr_15770/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(jO,"href","/docs/transformers/pr_15770/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(NO,"href","/docs/transformers/pr_15770/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(qO,"href","/docs/transformers/pr_15770/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(GO,"href","/docs/transformers/pr_15770/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(OO,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(XO,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(VO,"href","/docs/transformers/pr_15770/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(zO,"href","/docs/transformers/pr_15770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(WO,"href","/docs/transformers/pr_15770/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(EF,"id","transformers.TFAutoModelForVision2Seq"),d(EF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EF,"href","#transformers.TFAutoModelForVision2Seq"),d(Pc,"class","relative group"),d(vt,"class","docstring"),d(QO,"href","/docs/transformers/pr_15770/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Eo,"class","docstring"),d(wr,"class","docstring"),d(wF,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(wF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wF,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Dc,"class","relative group"),d(Tt,"class","docstring"),d(HO,"href","/docs/transformers/pr_15770/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(yo,"class","docstring"),d(Ar,"class","docstring"),d(LF,"id","transformers.FlaxAutoModel"),d(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LF,"href","#transformers.FlaxAutoModel"),d(qc,"class","relative group"),d(Ft,"class","docstring"),d(UO,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.FlaxAlbertModel"),d(JO,"href","/docs/transformers/pr_15770/en/model_doc/bart#transformers.FlaxBartModel"),d(YO,"href","/docs/transformers/pr_15770/en/model_doc/beit#transformers.FlaxBeitModel"),d(KO,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.FlaxBertModel"),d(ZO,"href","/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(eX,"href","/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(oX,"href","/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(rX,"href","/docs/transformers/pr_15770/en/model_doc/clip#transformers.FlaxCLIPModel"),d(tX,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(aX,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.FlaxElectraModel"),d(nX,"href","/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(sX,"href","/docs/transformers/pr_15770/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(lX,"href","/docs/transformers/pr_15770/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(iX,"href","/docs/transformers/pr_15770/en/model_doc/marian#transformers.FlaxMarianModel"),d(dX,"href","/docs/transformers/pr_15770/en/model_doc/mbart#transformers.FlaxMBartModel"),d(cX,"href","/docs/transformers/pr_15770/en/model_doc/mt5#transformers.FlaxMT5Model"),d(fX,"href","/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(mX,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(gX,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(hX,"href","/docs/transformers/pr_15770/en/model_doc/t5#transformers.FlaxT5Model"),d(pX,"href","/docs/transformers/pr_15770/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(_X,"href","/docs/transformers/pr_15770/en/model_doc/vit#transformers.FlaxViTModel"),d(uX,"href","/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(bX,"href","/docs/transformers/pr_15770/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(wo,"class","docstring"),d(Lr,"class","docstring"),d(ZF,"id","transformers.FlaxAutoModelForCausalLM"),d(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZF,"href","#transformers.FlaxAutoModelForCausalLM"),d(Xc,"class","relative group"),d(Ct,"class","docstring"),d(vX,"href","/docs/transformers/pr_15770/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(TX,"href","/docs/transformers/pr_15770/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(FX,"href","/docs/transformers/pr_15770/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(CX,"href","/docs/transformers/pr_15770/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Ao,"class","docstring"),d(Br,"class","docstring"),d(aC,"id","transformers.FlaxAutoModelForPreTraining"),d(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aC,"href","#transformers.FlaxAutoModelForPreTraining"),d(Wc,"class","relative group"),d(Mt,"class","docstring"),d(MX,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(EX,"href","/docs/transformers/pr_15770/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(yX,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(wX,"href","/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(AX,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(LX,"href","/docs/transformers/pr_15770/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(BX,"href","/docs/transformers/pr_15770/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(xX,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(kX,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(RX,"href","/docs/transformers/pr_15770/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(SX,"href","/docs/transformers/pr_15770/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(Lo,"class","docstring"),d(xr,"class","docstring"),d(_C,"id","transformers.FlaxAutoModelForMaskedLM"),d(_C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_C,"href","#transformers.FlaxAutoModelForMaskedLM"),d(Uc,"class","relative group"),d(Et,"class","docstring"),d(PX,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d($X,"href","/docs/transformers/pr_15770/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(IX,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(DX,"href","/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(jX,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(NX,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(qX,"href","/docs/transformers/pr_15770/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(GX,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(OX,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Bo,"class","docstring"),d(kr,"class","docstring"),d(wC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(Kc,"class","relative group"),d(yt,"class","docstring"),d(XX,"href","/docs/transformers/pr_15770/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(VX,"href","/docs/transformers/pr_15770/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(zX,"href","/docs/transformers/pr_15770/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(WX,"href","/docs/transformers/pr_15770/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(QX,"href","/docs/transformers/pr_15770/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(HX,"href","/docs/transformers/pr_15770/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(UX,"href","/docs/transformers/pr_15770/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(JX,"href","/docs/transformers/pr_15770/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(YX,"href","/docs/transformers/pr_15770/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(xo,"class","docstring"),d(Rr,"class","docstring"),d(IC,"id","transformers.FlaxAutoModelForSequenceClassification"),d(IC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(IC,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(of,"class","relative group"),d(wt,"class","docstring"),d(KX,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_15770/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(eV,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(oV,"href","/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(rV,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(tV,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(aV,"href","/docs/transformers/pr_15770/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(nV,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(sV,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(ko,"class","docstring"),d(Sr,"class","docstring"),d(WC,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(af,"class","relative group"),d(At,"class","docstring"),d(lV,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(iV,"href","/docs/transformers/pr_15770/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(dV,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(cV,"href","/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(fV,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(mV,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(gV,"href","/docs/transformers/pr_15770/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(hV,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(pV,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Ro,"class","docstring"),d(Pr,"class","docstring"),d(r4,"id","transformers.FlaxAutoModelForTokenClassification"),d(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r4,"href","#transformers.FlaxAutoModelForTokenClassification"),d(lf,"class","relative group"),d(Lt,"class","docstring"),d(_V,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(uV,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(bV,"href","/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(vV,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(TV,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(FV,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(CV,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(So,"class","docstring"),d($r,"class","docstring"),d(c4,"id","transformers.FlaxAutoModelForMultipleChoice"),d(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c4,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(ff,"class","relative group"),d(Bt,"class","docstring"),d(MV,"href","/docs/transformers/pr_15770/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(EV,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(yV,"href","/docs/transformers/pr_15770/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(wV,"href","/docs/transformers/pr_15770/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(AV,"href","/docs/transformers/pr_15770/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(LV,"href","/docs/transformers/pr_15770/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(BV,"href","/docs/transformers/pr_15770/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Po,"class","docstring"),d(Ir,"class","docstring"),d(b4,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b4,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(hf,"class","relative group"),d(xt,"class","docstring"),d(xV,"href","/docs/transformers/pr_15770/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(T4,"id","transformers.FlaxAutoModelForImageClassification"),d(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T4,"href","#transformers.FlaxAutoModelForImageClassification"),d(uf,"class","relative group"),d(kt,"class","docstring"),d(kV,"href","/docs/transformers/pr_15770/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(RV,"href","/docs/transformers/pr_15770/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(Io,"class","docstring"),d(jr,"class","docstring"),d(M4,"id","transformers.FlaxAutoModelForVision2Seq"),d(M4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M4,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Tf,"class","relative group"),d(Rt,"class","docstring"),d(SV,"href","/docs/transformers/pr_15770/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(Do,"class","docstring"),d(Nr,"class","docstring")},m(c,u){e(document.head,J),b(c,xe,u),b(c,de,u),e(de,me),e(me,no),g(ce,no,null),e(de,be),e(de,Go),e(Go,Li),b(c,Ef,u),b(c,sa,u),e(sa,Bi),e(sa,xi),e(xi,EM),e(sa,yf),b(c,we,u),b(c,io,u),e(io,ki),e(io,In),e(In,yM),e(io,Dn),e(io,jn),e(jn,wM),e(io,Ri),e(io,Nn),e(Nn,AM),e(io,Si),b(c,wf,u),g($a,c,u),b(c,co,u),b(c,ge,u),e(ge,d8),e(ge,Pi),e(Pi,c8),e(ge,f8),b(c,Oo,u),b(c,Ia,u),e(Ia,m8),e(Ia,Af),e(Af,g8),e(Ia,XRe),b(c,S9e,u),b(c,$i,u),e($i,Lf),e(Lf,EW),g(LM,EW,null),e($i,VRe),e($i,yW),e(yW,zRe),b(c,P9e,u),b(c,qn,u),e(qn,WRe),e(qn,wW),e(wW,QRe),e(qn,HRe),e(qn,AW),e(AW,URe),e(qn,JRe),b(c,$9e,u),g(BM,c,u),b(c,I9e,u),b(c,h8,u),e(h8,YRe),b(c,D9e,u),g(Bf,c,u),b(c,j9e,u),b(c,Ii,u),e(Ii,xf),e(xf,LW),g(xM,LW,null),e(Ii,KRe),e(Ii,BW),e(BW,ZRe),b(c,N9e,u),b(c,Xo,u),g(kM,Xo,null),e(Xo,eSe),e(Xo,RM),e(RM,oSe),e(RM,p8),e(p8,rSe),e(RM,tSe),e(Xo,aSe),e(Xo,SM),e(SM,nSe),e(SM,xW),e(xW,sSe),e(SM,lSe),e(Xo,iSe),e(Xo,fo),g(PM,fo,null),e(fo,dSe),e(fo,kW),e(kW,cSe),e(fo,fSe),e(fo,Di),e(Di,mSe),e(Di,RW),e(RW,gSe),e(Di,hSe),e(Di,SW),e(SW,pSe),e(Di,_Se),e(fo,uSe),e(fo,v),e(v,kf),e(kf,PW),e(PW,bSe),e(kf,vSe),e(kf,_8),e(_8,TSe),e(kf,FSe),e(v,CSe),e(v,Rf),e(Rf,$W),e($W,MSe),e(Rf,ESe),e(Rf,u8),e(u8,ySe),e(Rf,wSe),e(v,ASe),e(v,Sf),e(Sf,IW),e(IW,LSe),e(Sf,BSe),e(Sf,b8),e(b8,xSe),e(Sf,kSe),e(v,RSe),e(v,Pf),e(Pf,DW),e(DW,SSe),e(Pf,PSe),e(Pf,v8),e(v8,$Se),e(Pf,ISe),e(v,DSe),e(v,$f),e($f,jW),e(jW,jSe),e($f,NSe),e($f,T8),e(T8,qSe),e($f,GSe),e(v,OSe),e(v,If),e(If,NW),e(NW,XSe),e(If,VSe),e(If,F8),e(F8,zSe),e(If,WSe),e(v,QSe),e(v,Df),e(Df,qW),e(qW,HSe),e(Df,USe),e(Df,C8),e(C8,JSe),e(Df,YSe),e(v,KSe),e(v,jf),e(jf,GW),e(GW,ZSe),e(jf,ePe),e(jf,M8),e(M8,oPe),e(jf,rPe),e(v,tPe),e(v,Nf),e(Nf,OW),e(OW,aPe),e(Nf,nPe),e(Nf,E8),e(E8,sPe),e(Nf,lPe),e(v,iPe),e(v,qf),e(qf,XW),e(XW,dPe),e(qf,cPe),e(qf,y8),e(y8,fPe),e(qf,mPe),e(v,gPe),e(v,Gf),e(Gf,VW),e(VW,hPe),e(Gf,pPe),e(Gf,w8),e(w8,_Pe),e(Gf,uPe),e(v,bPe),e(v,Of),e(Of,zW),e(zW,vPe),e(Of,TPe),e(Of,A8),e(A8,FPe),e(Of,CPe),e(v,MPe),e(v,Xf),e(Xf,WW),e(WW,EPe),e(Xf,yPe),e(Xf,L8),e(L8,wPe),e(Xf,APe),e(v,LPe),e(v,Vf),e(Vf,QW),e(QW,BPe),e(Vf,xPe),e(Vf,B8),e(B8,kPe),e(Vf,RPe),e(v,SPe),e(v,zf),e(zf,HW),e(HW,PPe),e(zf,$Pe),e(zf,x8),e(x8,IPe),e(zf,DPe),e(v,jPe),e(v,Wf),e(Wf,UW),e(UW,NPe),e(Wf,qPe),e(Wf,k8),e(k8,GPe),e(Wf,OPe),e(v,XPe),e(v,Qf),e(Qf,JW),e(JW,VPe),e(Qf,zPe),e(Qf,R8),e(R8,WPe),e(Qf,QPe),e(v,HPe),e(v,Hf),e(Hf,YW),e(YW,UPe),e(Hf,JPe),e(Hf,S8),e(S8,YPe),e(Hf,KPe),e(v,ZPe),e(v,Uf),e(Uf,KW),e(KW,e$e),e(Uf,o$e),e(Uf,P8),e(P8,r$e),e(Uf,t$e),e(v,a$e),e(v,Jf),e(Jf,ZW),e(ZW,n$e),e(Jf,s$e),e(Jf,$8),e($8,l$e),e(Jf,i$e),e(v,d$e),e(v,Yf),e(Yf,eQ),e(eQ,c$e),e(Yf,f$e),e(Yf,I8),e(I8,m$e),e(Yf,g$e),e(v,h$e),e(v,Kf),e(Kf,oQ),e(oQ,p$e),e(Kf,_$e),e(Kf,D8),e(D8,u$e),e(Kf,b$e),e(v,v$e),e(v,Zf),e(Zf,rQ),e(rQ,T$e),e(Zf,F$e),e(Zf,j8),e(j8,C$e),e(Zf,M$e),e(v,E$e),e(v,em),e(em,tQ),e(tQ,y$e),e(em,w$e),e(em,N8),e(N8,A$e),e(em,L$e),e(v,B$e),e(v,om),e(om,aQ),e(aQ,x$e),e(om,k$e),e(om,q8),e(q8,R$e),e(om,S$e),e(v,P$e),e(v,rm),e(rm,nQ),e(nQ,$$e),e(rm,I$e),e(rm,G8),e(G8,D$e),e(rm,j$e),e(v,N$e),e(v,tm),e(tm,sQ),e(sQ,q$e),e(tm,G$e),e(tm,O8),e(O8,O$e),e(tm,X$e),e(v,V$e),e(v,am),e(am,lQ),e(lQ,z$e),e(am,W$e),e(am,X8),e(X8,Q$e),e(am,H$e),e(v,U$e),e(v,nm),e(nm,iQ),e(iQ,J$e),e(nm,Y$e),e(nm,V8),e(V8,K$e),e(nm,Z$e),e(v,eIe),e(v,sm),e(sm,dQ),e(dQ,oIe),e(sm,rIe),e(sm,z8),e(z8,tIe),e(sm,aIe),e(v,nIe),e(v,lm),e(lm,cQ),e(cQ,sIe),e(lm,lIe),e(lm,W8),e(W8,iIe),e(lm,dIe),e(v,cIe),e(v,im),e(im,fQ),e(fQ,fIe),e(im,mIe),e(im,Q8),e(Q8,gIe),e(im,hIe),e(v,pIe),e(v,dm),e(dm,mQ),e(mQ,_Ie),e(dm,uIe),e(dm,H8),e(H8,bIe),e(dm,vIe),e(v,TIe),e(v,cm),e(cm,gQ),e(gQ,FIe),e(cm,CIe),e(cm,U8),e(U8,MIe),e(cm,EIe),e(v,yIe),e(v,fm),e(fm,hQ),e(hQ,wIe),e(fm,AIe),e(fm,J8),e(J8,LIe),e(fm,BIe),e(v,xIe),e(v,mm),e(mm,pQ),e(pQ,kIe),e(mm,RIe),e(mm,Y8),e(Y8,SIe),e(mm,PIe),e(v,$Ie),e(v,gm),e(gm,_Q),e(_Q,IIe),e(gm,DIe),e(gm,K8),e(K8,jIe),e(gm,NIe),e(v,qIe),e(v,hm),e(hm,uQ),e(uQ,GIe),e(hm,OIe),e(hm,Z8),e(Z8,XIe),e(hm,VIe),e(v,zIe),e(v,pm),e(pm,bQ),e(bQ,WIe),e(pm,QIe),e(pm,e9),e(e9,HIe),e(pm,UIe),e(v,JIe),e(v,_m),e(_m,vQ),e(vQ,YIe),e(_m,KIe),e(_m,o9),e(o9,ZIe),e(_m,eDe),e(v,oDe),e(v,um),e(um,TQ),e(TQ,rDe),e(um,tDe),e(um,r9),e(r9,aDe),e(um,nDe),e(v,sDe),e(v,bm),e(bm,FQ),e(FQ,lDe),e(bm,iDe),e(bm,t9),e(t9,dDe),e(bm,cDe),e(v,fDe),e(v,vm),e(vm,CQ),e(CQ,mDe),e(vm,gDe),e(vm,a9),e(a9,hDe),e(vm,pDe),e(v,_De),e(v,Tm),e(Tm,MQ),e(MQ,uDe),e(Tm,bDe),e(Tm,n9),e(n9,vDe),e(Tm,TDe),e(v,FDe),e(v,Fm),e(Fm,EQ),e(EQ,CDe),e(Fm,MDe),e(Fm,s9),e(s9,EDe),e(Fm,yDe),e(v,wDe),e(v,Cm),e(Cm,yQ),e(yQ,ADe),e(Cm,LDe),e(Cm,l9),e(l9,BDe),e(Cm,xDe),e(v,kDe),e(v,Mm),e(Mm,wQ),e(wQ,RDe),e(Mm,SDe),e(Mm,i9),e(i9,PDe),e(Mm,$De),e(v,IDe),e(v,Em),e(Em,AQ),e(AQ,DDe),e(Em,jDe),e(Em,d9),e(d9,NDe),e(Em,qDe),e(v,GDe),e(v,ym),e(ym,LQ),e(LQ,ODe),e(ym,XDe),e(ym,c9),e(c9,VDe),e(ym,zDe),e(v,WDe),e(v,wm),e(wm,BQ),e(BQ,QDe),e(wm,HDe),e(wm,f9),e(f9,UDe),e(wm,JDe),e(v,YDe),e(v,Am),e(Am,xQ),e(xQ,KDe),e(Am,ZDe),e(Am,m9),e(m9,eje),e(Am,oje),e(v,rje),e(v,Lm),e(Lm,kQ),e(kQ,tje),e(Lm,aje),e(Lm,g9),e(g9,nje),e(Lm,sje),e(v,lje),e(v,Bm),e(Bm,RQ),e(RQ,ije),e(Bm,dje),e(Bm,h9),e(h9,cje),e(Bm,fje),e(v,mje),e(v,xm),e(xm,SQ),e(SQ,gje),e(xm,hje),e(xm,p9),e(p9,pje),e(xm,_je),e(v,uje),e(v,km),e(km,PQ),e(PQ,bje),e(km,vje),e(km,_9),e(_9,Tje),e(km,Fje),e(v,Cje),e(v,Rm),e(Rm,$Q),e($Q,Mje),e(Rm,Eje),e(Rm,u9),e(u9,yje),e(Rm,wje),e(v,Aje),e(v,Sm),e(Sm,IQ),e(IQ,Lje),e(Sm,Bje),e(Sm,b9),e(b9,xje),e(Sm,kje),e(v,Rje),e(v,Pm),e(Pm,DQ),e(DQ,Sje),e(Pm,Pje),e(Pm,v9),e(v9,$je),e(Pm,Ije),e(v,Dje),e(v,$m),e($m,jQ),e(jQ,jje),e($m,Nje),e($m,T9),e(T9,qje),e($m,Gje),e(v,Oje),e(v,Im),e(Im,NQ),e(NQ,Xje),e(Im,Vje),e(Im,F9),e(F9,zje),e(Im,Wje),e(v,Qje),e(v,Dm),e(Dm,qQ),e(qQ,Hje),e(Dm,Uje),e(Dm,C9),e(C9,Jje),e(Dm,Yje),e(v,Kje),e(v,jm),e(jm,GQ),e(GQ,Zje),e(jm,eNe),e(jm,M9),e(M9,oNe),e(jm,rNe),e(v,tNe),e(v,Nm),e(Nm,OQ),e(OQ,aNe),e(Nm,nNe),e(Nm,E9),e(E9,sNe),e(Nm,lNe),e(v,iNe),e(v,qm),e(qm,XQ),e(XQ,dNe),e(qm,cNe),e(qm,y9),e(y9,fNe),e(qm,mNe),e(v,gNe),e(v,Gm),e(Gm,VQ),e(VQ,hNe),e(Gm,pNe),e(Gm,w9),e(w9,_Ne),e(Gm,uNe),e(v,bNe),e(v,Om),e(Om,zQ),e(zQ,vNe),e(Om,TNe),e(Om,A9),e(A9,FNe),e(Om,CNe),e(v,MNe),e(v,Xm),e(Xm,WQ),e(WQ,ENe),e(Xm,yNe),e(Xm,L9),e(L9,wNe),e(Xm,ANe),e(v,LNe),e(v,Vm),e(Vm,QQ),e(QQ,BNe),e(Vm,xNe),e(Vm,B9),e(B9,kNe),e(Vm,RNe),e(v,SNe),e(v,zm),e(zm,HQ),e(HQ,PNe),e(zm,$Ne),e(zm,x9),e(x9,INe),e(zm,DNe),e(v,jNe),e(v,Wm),e(Wm,UQ),e(UQ,NNe),e(Wm,qNe),e(Wm,k9),e(k9,GNe),e(Wm,ONe),e(v,XNe),e(v,Qm),e(Qm,JQ),e(JQ,VNe),e(Qm,zNe),e(Qm,R9),e(R9,WNe),e(Qm,QNe),e(v,HNe),e(v,Hm),e(Hm,YQ),e(YQ,UNe),e(Hm,JNe),e(Hm,S9),e(S9,YNe),e(Hm,KNe),e(v,ZNe),e(v,Um),e(Um,KQ),e(KQ,eqe),e(Um,oqe),e(Um,P9),e(P9,rqe),e(Um,tqe),e(v,aqe),e(v,Jm),e(Jm,ZQ),e(ZQ,nqe),e(Jm,sqe),e(Jm,$9),e($9,lqe),e(Jm,iqe),e(v,dqe),e(v,Ym),e(Ym,eH),e(eH,cqe),e(Ym,fqe),e(Ym,I9),e(I9,mqe),e(Ym,gqe),e(v,hqe),e(v,Km),e(Km,oH),e(oH,pqe),e(Km,_qe),e(Km,D9),e(D9,uqe),e(Km,bqe),e(v,vqe),e(v,Zm),e(Zm,rH),e(rH,Tqe),e(Zm,Fqe),e(Zm,j9),e(j9,Cqe),e(Zm,Mqe),e(v,Eqe),e(v,eg),e(eg,tH),e(tH,yqe),e(eg,wqe),e(eg,N9),e(N9,Aqe),e(eg,Lqe),e(v,Bqe),e(v,og),e(og,aH),e(aH,xqe),e(og,kqe),e(og,q9),e(q9,Rqe),e(og,Sqe),e(v,Pqe),e(v,rg),e(rg,nH),e(nH,$qe),e(rg,Iqe),e(rg,G9),e(G9,Dqe),e(rg,jqe),e(v,Nqe),e(v,tg),e(tg,sH),e(sH,qqe),e(tg,Gqe),e(tg,O9),e(O9,Oqe),e(tg,Xqe),e(v,Vqe),e(v,ag),e(ag,lH),e(lH,zqe),e(ag,Wqe),e(ag,X9),e(X9,Qqe),e(ag,Hqe),e(v,Uqe),e(v,ng),e(ng,iH),e(iH,Jqe),e(ng,Yqe),e(ng,V9),e(V9,Kqe),e(ng,Zqe),e(v,eGe),e(v,sg),e(sg,dH),e(dH,oGe),e(sg,rGe),e(sg,z9),e(z9,tGe),e(sg,aGe),e(v,nGe),e(v,lg),e(lg,cH),e(cH,sGe),e(lg,lGe),e(lg,W9),e(W9,iGe),e(lg,dGe),e(v,cGe),e(v,ig),e(ig,fH),e(fH,fGe),e(ig,mGe),e(ig,Q9),e(Q9,gGe),e(ig,hGe),e(v,pGe),e(v,dg),e(dg,mH),e(mH,_Ge),e(dg,uGe),e(dg,H9),e(H9,bGe),e(dg,vGe),e(v,TGe),e(v,cg),e(cg,gH),e(gH,FGe),e(cg,CGe),e(cg,U9),e(U9,MGe),e(cg,EGe),e(v,yGe),e(v,fg),e(fg,hH),e(hH,wGe),e(fg,AGe),e(fg,J9),e(J9,LGe),e(fg,BGe),e(v,xGe),e(v,mg),e(mg,pH),e(pH,kGe),e(mg,RGe),e(mg,Y9),e(Y9,SGe),e(mg,PGe),e(v,$Ge),e(v,gg),e(gg,_H),e(_H,IGe),e(gg,DGe),e(gg,K9),e(K9,jGe),e(gg,NGe),e(v,qGe),e(v,hg),e(hg,uH),e(uH,GGe),e(hg,OGe),e(hg,Z9),e(Z9,XGe),e(hg,VGe),e(v,zGe),e(v,pg),e(pg,bH),e(bH,WGe),e(pg,QGe),e(pg,eB),e(eB,HGe),e(pg,UGe),e(v,JGe),e(v,_g),e(_g,vH),e(vH,YGe),e(_g,KGe),e(_g,oB),e(oB,ZGe),e(_g,eOe),e(fo,oOe),e(fo,TH),e(TH,rOe),e(fo,tOe),g($M,fo,null),e(Xo,aOe),e(Xo,ug),g(IM,ug,null),e(ug,nOe),e(ug,FH),e(FH,sOe),b(c,q9e,u),b(c,ji,u),e(ji,bg),e(bg,CH),g(DM,CH,null),e(ji,lOe),e(ji,MH),e(MH,iOe),b(c,G9e,u),b(c,Vo,u),g(jM,Vo,null),e(Vo,dOe),e(Vo,NM),e(NM,cOe),e(NM,rB),e(rB,fOe),e(NM,mOe),e(Vo,gOe),e(Vo,qM),e(qM,hOe),e(qM,EH),e(EH,pOe),e(qM,_Oe),e(Vo,uOe),e(Vo,mo),g(GM,mo,null),e(mo,bOe),e(mo,yH),e(yH,vOe),e(mo,TOe),e(mo,Da),e(Da,FOe),e(Da,wH),e(wH,COe),e(Da,MOe),e(Da,AH),e(AH,EOe),e(Da,yOe),e(Da,LH),e(LH,wOe),e(Da,AOe),e(mo,LOe),e(mo,M),e(M,Gn),e(Gn,BH),e(BH,BOe),e(Gn,xOe),e(Gn,tB),e(tB,kOe),e(Gn,ROe),e(Gn,aB),e(aB,SOe),e(Gn,POe),e(M,$Oe),e(M,On),e(On,xH),e(xH,IOe),e(On,DOe),e(On,nB),e(nB,jOe),e(On,NOe),e(On,sB),e(sB,qOe),e(On,GOe),e(M,OOe),e(M,Xn),e(Xn,kH),e(kH,XOe),e(Xn,VOe),e(Xn,lB),e(lB,zOe),e(Xn,WOe),e(Xn,iB),e(iB,QOe),e(Xn,HOe),e(M,UOe),e(M,vg),e(vg,RH),e(RH,JOe),e(vg,YOe),e(vg,dB),e(dB,KOe),e(vg,ZOe),e(M,eXe),e(M,Vn),e(Vn,SH),e(SH,oXe),e(Vn,rXe),e(Vn,cB),e(cB,tXe),e(Vn,aXe),e(Vn,fB),e(fB,nXe),e(Vn,sXe),e(M,lXe),e(M,Tg),e(Tg,PH),e(PH,iXe),e(Tg,dXe),e(Tg,mB),e(mB,cXe),e(Tg,fXe),e(M,mXe),e(M,Fg),e(Fg,$H),e($H,gXe),e(Fg,hXe),e(Fg,gB),e(gB,pXe),e(Fg,_Xe),e(M,uXe),e(M,Cg),e(Cg,IH),e(IH,bXe),e(Cg,vXe),e(Cg,hB),e(hB,TXe),e(Cg,FXe),e(M,CXe),e(M,zn),e(zn,DH),e(DH,MXe),e(zn,EXe),e(zn,pB),e(pB,yXe),e(zn,wXe),e(zn,_B),e(_B,AXe),e(zn,LXe),e(M,BXe),e(M,Wn),e(Wn,jH),e(jH,xXe),e(Wn,kXe),e(Wn,uB),e(uB,RXe),e(Wn,SXe),e(Wn,bB),e(bB,PXe),e(Wn,$Xe),e(M,IXe),e(M,Qn),e(Qn,NH),e(NH,DXe),e(Qn,jXe),e(Qn,vB),e(vB,NXe),e(Qn,qXe),e(Qn,TB),e(TB,GXe),e(Qn,OXe),e(M,XXe),e(M,Mg),e(Mg,qH),e(qH,VXe),e(Mg,zXe),e(Mg,FB),e(FB,WXe),e(Mg,QXe),e(M,HXe),e(M,Eg),e(Eg,GH),e(GH,UXe),e(Eg,JXe),e(Eg,CB),e(CB,YXe),e(Eg,KXe),e(M,ZXe),e(M,Hn),e(Hn,OH),e(OH,eVe),e(Hn,oVe),e(Hn,MB),e(MB,rVe),e(Hn,tVe),e(Hn,EB),e(EB,aVe),e(Hn,nVe),e(M,sVe),e(M,yg),e(yg,XH),e(XH,lVe),e(yg,iVe),e(yg,yB),e(yB,dVe),e(yg,cVe),e(M,fVe),e(M,Un),e(Un,VH),e(VH,mVe),e(Un,gVe),e(Un,wB),e(wB,hVe),e(Un,pVe),e(Un,AB),e(AB,_Ve),e(Un,uVe),e(M,bVe),e(M,Jn),e(Jn,zH),e(zH,vVe),e(Jn,TVe),e(Jn,LB),e(LB,FVe),e(Jn,CVe),e(Jn,BB),e(BB,MVe),e(Jn,EVe),e(M,yVe),e(M,Yn),e(Yn,WH),e(WH,wVe),e(Yn,AVe),e(Yn,xB),e(xB,LVe),e(Yn,BVe),e(Yn,QH),e(QH,xVe),e(Yn,kVe),e(M,RVe),e(M,wg),e(wg,HH),e(HH,SVe),e(wg,PVe),e(wg,kB),e(kB,$Ve),e(wg,IVe),e(M,DVe),e(M,Kn),e(Kn,UH),e(UH,jVe),e(Kn,NVe),e(Kn,RB),e(RB,qVe),e(Kn,GVe),e(Kn,SB),e(SB,OVe),e(Kn,XVe),e(M,VVe),e(M,Ag),e(Ag,JH),e(JH,zVe),e(Ag,WVe),e(Ag,PB),e(PB,QVe),e(Ag,HVe),e(M,UVe),e(M,Zn),e(Zn,YH),e(YH,JVe),e(Zn,YVe),e(Zn,$B),e($B,KVe),e(Zn,ZVe),e(Zn,IB),e(IB,eze),e(Zn,oze),e(M,rze),e(M,es),e(es,KH),e(KH,tze),e(es,aze),e(es,DB),e(DB,nze),e(es,sze),e(es,jB),e(jB,lze),e(es,ize),e(M,dze),e(M,os),e(os,ZH),e(ZH,cze),e(os,fze),e(os,NB),e(NB,mze),e(os,gze),e(os,qB),e(qB,hze),e(os,pze),e(M,_ze),e(M,Lg),e(Lg,eU),e(eU,uze),e(Lg,bze),e(Lg,GB),e(GB,vze),e(Lg,Tze),e(M,Fze),e(M,rs),e(rs,oU),e(oU,Cze),e(rs,Mze),e(rs,OB),e(OB,Eze),e(rs,yze),e(rs,XB),e(XB,wze),e(rs,Aze),e(M,Lze),e(M,Bg),e(Bg,rU),e(rU,Bze),e(Bg,xze),e(Bg,VB),e(VB,kze),e(Bg,Rze),e(M,Sze),e(M,ts),e(ts,tU),e(tU,Pze),e(ts,$ze),e(ts,zB),e(zB,Ize),e(ts,Dze),e(ts,WB),e(WB,jze),e(ts,Nze),e(M,qze),e(M,as),e(as,aU),e(aU,Gze),e(as,Oze),e(as,QB),e(QB,Xze),e(as,Vze),e(as,HB),e(HB,zze),e(as,Wze),e(M,Qze),e(M,ns),e(ns,nU),e(nU,Hze),e(ns,Uze),e(ns,UB),e(UB,Jze),e(ns,Yze),e(ns,JB),e(JB,Kze),e(ns,Zze),e(M,eWe),e(M,ss),e(ss,sU),e(sU,oWe),e(ss,rWe),e(ss,YB),e(YB,tWe),e(ss,aWe),e(ss,KB),e(KB,nWe),e(ss,sWe),e(M,lWe),e(M,xg),e(xg,lU),e(lU,iWe),e(xg,dWe),e(xg,ZB),e(ZB,cWe),e(xg,fWe),e(M,mWe),e(M,ls),e(ls,iU),e(iU,gWe),e(ls,hWe),e(ls,ex),e(ex,pWe),e(ls,_We),e(ls,ox),e(ox,uWe),e(ls,bWe),e(M,vWe),e(M,is),e(is,dU),e(dU,TWe),e(is,FWe),e(is,rx),e(rx,CWe),e(is,MWe),e(is,tx),e(tx,EWe),e(is,yWe),e(M,wWe),e(M,ds),e(ds,cU),e(cU,AWe),e(ds,LWe),e(ds,ax),e(ax,BWe),e(ds,xWe),e(ds,nx),e(nx,kWe),e(ds,RWe),e(M,SWe),e(M,cs),e(cs,fU),e(fU,PWe),e(cs,$We),e(cs,sx),e(sx,IWe),e(cs,DWe),e(cs,lx),e(lx,jWe),e(cs,NWe),e(M,qWe),e(M,fs),e(fs,mU),e(mU,GWe),e(fs,OWe),e(fs,ix),e(ix,XWe),e(fs,VWe),e(fs,dx),e(dx,zWe),e(fs,WWe),e(M,QWe),e(M,ms),e(ms,gU),e(gU,HWe),e(ms,UWe),e(ms,cx),e(cx,JWe),e(ms,YWe),e(ms,fx),e(fx,KWe),e(ms,ZWe),e(M,eQe),e(M,kg),e(kg,hU),e(hU,oQe),e(kg,rQe),e(kg,mx),e(mx,tQe),e(kg,aQe),e(M,nQe),e(M,gs),e(gs,pU),e(pU,sQe),e(gs,lQe),e(gs,gx),e(gx,iQe),e(gs,dQe),e(gs,hx),e(hx,cQe),e(gs,fQe),e(M,mQe),e(M,Rg),e(Rg,_U),e(_U,gQe),e(Rg,hQe),e(Rg,px),e(px,pQe),e(Rg,_Qe),e(M,uQe),e(M,Sg),e(Sg,uU),e(uU,bQe),e(Sg,vQe),e(Sg,_x),e(_x,TQe),e(Sg,FQe),e(M,CQe),e(M,hs),e(hs,bU),e(bU,MQe),e(hs,EQe),e(hs,ux),e(ux,yQe),e(hs,wQe),e(hs,bx),e(bx,AQe),e(hs,LQe),e(M,BQe),e(M,ps),e(ps,vU),e(vU,xQe),e(ps,kQe),e(ps,vx),e(vx,RQe),e(ps,SQe),e(ps,Tx),e(Tx,PQe),e(ps,$Qe),e(M,IQe),e(M,Pg),e(Pg,TU),e(TU,DQe),e(Pg,jQe),e(Pg,Fx),e(Fx,NQe),e(Pg,qQe),e(M,GQe),e(M,_s),e(_s,FU),e(FU,OQe),e(_s,XQe),e(_s,Cx),e(Cx,VQe),e(_s,zQe),e(_s,Mx),e(Mx,WQe),e(_s,QQe),e(M,HQe),e(M,us),e(us,CU),e(CU,UQe),e(us,JQe),e(us,Ex),e(Ex,YQe),e(us,KQe),e(us,yx),e(yx,ZQe),e(us,eHe),e(M,oHe),e(M,bs),e(bs,MU),e(MU,rHe),e(bs,tHe),e(bs,wx),e(wx,aHe),e(bs,nHe),e(bs,Ax),e(Ax,sHe),e(bs,lHe),e(M,iHe),e(M,vs),e(vs,EU),e(EU,dHe),e(vs,cHe),e(vs,Lx),e(Lx,fHe),e(vs,mHe),e(vs,Bx),e(Bx,gHe),e(vs,hHe),e(M,pHe),e(M,Ts),e(Ts,yU),e(yU,_He),e(Ts,uHe),e(Ts,xx),e(xx,bHe),e(Ts,vHe),e(Ts,kx),e(kx,THe),e(Ts,FHe),e(M,CHe),e(M,$g),e($g,wU),e(wU,MHe),e($g,EHe),e($g,Rx),e(Rx,yHe),e($g,wHe),e(M,AHe),e(M,Ig),e(Ig,AU),e(AU,LHe),e(Ig,BHe),e(Ig,Sx),e(Sx,xHe),e(Ig,kHe),e(M,RHe),e(M,Dg),e(Dg,LU),e(LU,SHe),e(Dg,PHe),e(Dg,Px),e(Px,$He),e(Dg,IHe),e(M,DHe),e(M,jg),e(jg,BU),e(BU,jHe),e(jg,NHe),e(jg,$x),e($x,qHe),e(jg,GHe),e(M,OHe),e(M,Fs),e(Fs,xU),e(xU,XHe),e(Fs,VHe),e(Fs,Ix),e(Ix,zHe),e(Fs,WHe),e(Fs,Dx),e(Dx,QHe),e(Fs,HHe),e(M,UHe),e(M,Ng),e(Ng,kU),e(kU,JHe),e(Ng,YHe),e(Ng,jx),e(jx,KHe),e(Ng,ZHe),e(M,eUe),e(M,Cs),e(Cs,RU),e(RU,oUe),e(Cs,rUe),e(Cs,Nx),e(Nx,tUe),e(Cs,aUe),e(Cs,qx),e(qx,nUe),e(Cs,sUe),e(M,lUe),e(M,Ms),e(Ms,SU),e(SU,iUe),e(Ms,dUe),e(Ms,Gx),e(Gx,cUe),e(Ms,fUe),e(Ms,Ox),e(Ox,mUe),e(Ms,gUe),e(M,hUe),e(M,Es),e(Es,PU),e(PU,pUe),e(Es,_Ue),e(Es,Xx),e(Xx,uUe),e(Es,bUe),e(Es,Vx),e(Vx,vUe),e(Es,TUe),e(M,FUe),e(M,ys),e(ys,$U),e($U,CUe),e(ys,MUe),e(ys,zx),e(zx,EUe),e(ys,yUe),e(ys,Wx),e(Wx,wUe),e(ys,AUe),e(M,LUe),e(M,ws),e(ws,IU),e(IU,BUe),e(ws,xUe),e(ws,Qx),e(Qx,kUe),e(ws,RUe),e(ws,Hx),e(Hx,SUe),e(ws,PUe),e(M,$Ue),e(M,qg),e(qg,DU),e(DU,IUe),e(qg,DUe),e(qg,Ux),e(Ux,jUe),e(qg,NUe),e(M,qUe),e(M,Gg),e(Gg,jU),e(jU,GUe),e(Gg,OUe),e(Gg,Jx),e(Jx,XUe),e(Gg,VUe),e(M,zUe),e(M,As),e(As,NU),e(NU,WUe),e(As,QUe),e(As,Yx),e(Yx,HUe),e(As,UUe),e(As,Kx),e(Kx,JUe),e(As,YUe),e(M,KUe),e(M,Ls),e(Ls,qU),e(qU,ZUe),e(Ls,eJe),e(Ls,Zx),e(Zx,oJe),e(Ls,rJe),e(Ls,ek),e(ek,tJe),e(Ls,aJe),e(M,nJe),e(M,Bs),e(Bs,GU),e(GU,sJe),e(Bs,lJe),e(Bs,ok),e(ok,iJe),e(Bs,dJe),e(Bs,rk),e(rk,cJe),e(Bs,fJe),e(M,mJe),e(M,Og),e(Og,OU),e(OU,gJe),e(Og,hJe),e(Og,tk),e(tk,pJe),e(Og,_Je),e(M,uJe),e(M,Xg),e(Xg,XU),e(XU,bJe),e(Xg,vJe),e(Xg,ak),e(ak,TJe),e(Xg,FJe),e(M,CJe),e(M,Vg),e(Vg,VU),e(VU,MJe),e(Vg,EJe),e(Vg,nk),e(nk,yJe),e(Vg,wJe),e(M,AJe),e(M,zg),e(zg,zU),e(zU,LJe),e(zg,BJe),e(zg,sk),e(sk,xJe),e(zg,kJe),e(M,RJe),e(M,xs),e(xs,WU),e(WU,SJe),e(xs,PJe),e(xs,lk),e(lk,$Je),e(xs,IJe),e(xs,ik),e(ik,DJe),e(xs,jJe),e(M,NJe),e(M,Wg),e(Wg,QU),e(QU,qJe),e(Wg,GJe),e(Wg,dk),e(dk,OJe),e(Wg,XJe),e(M,VJe),e(M,Qg),e(Qg,HU),e(HU,zJe),e(Qg,WJe),e(Qg,ck),e(ck,QJe),e(Qg,HJe),e(M,UJe),e(M,ks),e(ks,UU),e(UU,JJe),e(ks,YJe),e(ks,fk),e(fk,KJe),e(ks,ZJe),e(ks,mk),e(mk,eYe),e(ks,oYe),e(M,rYe),e(M,Rs),e(Rs,JU),e(JU,tYe),e(Rs,aYe),e(Rs,gk),e(gk,nYe),e(Rs,sYe),e(Rs,hk),e(hk,lYe),e(Rs,iYe),e(mo,dYe),e(mo,YU),e(YU,cYe),e(mo,fYe),g(OM,mo,null),e(Vo,mYe),e(Vo,Hg),g(XM,Hg,null),e(Hg,gYe),e(Hg,KU),e(KU,hYe),b(c,O9e,u),b(c,Ni,u),e(Ni,Ug),e(Ug,ZU),g(VM,ZU,null),e(Ni,pYe),e(Ni,eJ),e(eJ,_Ye),b(c,X9e,u),b(c,zo,u),g(zM,zo,null),e(zo,uYe),e(zo,WM),e(WM,bYe),e(WM,pk),e(pk,vYe),e(WM,TYe),e(zo,FYe),e(zo,QM),e(QM,CYe),e(QM,oJ),e(oJ,MYe),e(QM,EYe),e(zo,yYe),e(zo,ke),g(HM,ke,null),e(ke,wYe),e(ke,rJ),e(rJ,AYe),e(ke,LYe),e(ke,ja),e(ja,BYe),e(ja,tJ),e(tJ,xYe),e(ja,kYe),e(ja,aJ),e(aJ,RYe),e(ja,SYe),e(ja,nJ),e(nJ,PYe),e(ja,$Ye),e(ke,IYe),e(ke,ae),e(ae,Jg),e(Jg,sJ),e(sJ,DYe),e(Jg,jYe),e(Jg,_k),e(_k,NYe),e(Jg,qYe),e(ae,GYe),e(ae,Yg),e(Yg,lJ),e(lJ,OYe),e(Yg,XYe),e(Yg,uk),e(uk,VYe),e(Yg,zYe),e(ae,WYe),e(ae,Kg),e(Kg,iJ),e(iJ,QYe),e(Kg,HYe),e(Kg,bk),e(bk,UYe),e(Kg,JYe),e(ae,YYe),e(ae,Zg),e(Zg,dJ),e(dJ,KYe),e(Zg,ZYe),e(Zg,vk),e(vk,eKe),e(Zg,oKe),e(ae,rKe),e(ae,eh),e(eh,cJ),e(cJ,tKe),e(eh,aKe),e(eh,Tk),e(Tk,nKe),e(eh,sKe),e(ae,lKe),e(ae,oh),e(oh,fJ),e(fJ,iKe),e(oh,dKe),e(oh,Fk),e(Fk,cKe),e(oh,fKe),e(ae,mKe),e(ae,rh),e(rh,mJ),e(mJ,gKe),e(rh,hKe),e(rh,Ck),e(Ck,pKe),e(rh,_Ke),e(ae,uKe),e(ae,th),e(th,gJ),e(gJ,bKe),e(th,vKe),e(th,Mk),e(Mk,TKe),e(th,FKe),e(ae,CKe),e(ae,ah),e(ah,hJ),e(hJ,MKe),e(ah,EKe),e(ah,Ek),e(Ek,yKe),e(ah,wKe),e(ae,AKe),e(ae,nh),e(nh,pJ),e(pJ,LKe),e(nh,BKe),e(nh,yk),e(yk,xKe),e(nh,kKe),e(ae,RKe),e(ae,sh),e(sh,_J),e(_J,SKe),e(sh,PKe),e(sh,wk),e(wk,$Ke),e(sh,IKe),e(ae,DKe),e(ae,lh),e(lh,uJ),e(uJ,jKe),e(lh,NKe),e(lh,Ak),e(Ak,qKe),e(lh,GKe),e(ae,OKe),e(ae,ih),e(ih,bJ),e(bJ,XKe),e(ih,VKe),e(ih,Lk),e(Lk,zKe),e(ih,WKe),e(ae,QKe),e(ae,dh),e(dh,vJ),e(vJ,HKe),e(dh,UKe),e(dh,Bk),e(Bk,JKe),e(dh,YKe),e(ae,KKe),e(ae,ch),e(ch,TJ),e(TJ,ZKe),e(ch,eZe),e(ch,xk),e(xk,oZe),e(ch,rZe),e(ae,tZe),e(ae,fh),e(fh,FJ),e(FJ,aZe),e(fh,nZe),e(fh,kk),e(kk,sZe),e(fh,lZe),e(ke,iZe),g(mh,ke,null),e(ke,dZe),e(ke,CJ),e(CJ,cZe),e(ke,fZe),g(UM,ke,null),e(zo,mZe),e(zo,gh),g(JM,gh,null),e(gh,gZe),e(gh,MJ),e(MJ,hZe),b(c,V9e,u),b(c,qi,u),e(qi,hh),e(hh,EJ),g(YM,EJ,null),e(qi,pZe),e(qi,yJ),e(yJ,_Ze),b(c,z9e,u),b(c,Wo,u),g(KM,Wo,null),e(Wo,uZe),e(Wo,ZM),e(ZM,bZe),e(ZM,Rk),e(Rk,vZe),e(ZM,TZe),e(Wo,FZe),e(Wo,eE),e(eE,CZe),e(eE,wJ),e(wJ,MZe),e(eE,EZe),e(Wo,yZe),e(Wo,Re),g(oE,Re,null),e(Re,wZe),e(Re,AJ),e(AJ,AZe),e(Re,LZe),e(Re,Gi),e(Gi,BZe),e(Gi,LJ),e(LJ,xZe),e(Gi,kZe),e(Gi,BJ),e(BJ,RZe),e(Gi,SZe),e(Re,PZe),e(Re,Ae),e(Ae,ph),e(ph,xJ),e(xJ,$Ze),e(ph,IZe),e(ph,Sk),e(Sk,DZe),e(ph,jZe),e(Ae,NZe),e(Ae,_h),e(_h,kJ),e(kJ,qZe),e(_h,GZe),e(_h,Pk),e(Pk,OZe),e(_h,XZe),e(Ae,VZe),e(Ae,uh),e(uh,RJ),e(RJ,zZe),e(uh,WZe),e(uh,$k),e($k,QZe),e(uh,HZe),e(Ae,UZe),e(Ae,bh),e(bh,SJ),e(SJ,JZe),e(bh,YZe),e(bh,Ik),e(Ik,KZe),e(bh,ZZe),e(Ae,eeo),e(Ae,vh),e(vh,PJ),e(PJ,oeo),e(vh,reo),e(vh,Dk),e(Dk,teo),e(vh,aeo),e(Ae,neo),e(Ae,Th),e(Th,$J),e($J,seo),e(Th,leo),e(Th,jk),e(jk,ieo),e(Th,deo),e(Ae,ceo),e(Ae,Fh),e(Fh,IJ),e(IJ,feo),e(Fh,meo),e(Fh,Nk),e(Nk,geo),e(Fh,heo),e(Ae,peo),e(Ae,Ch),e(Ch,DJ),e(DJ,_eo),e(Ch,ueo),e(Ch,qk),e(qk,beo),e(Ch,veo),e(Re,Teo),g(Mh,Re,null),e(Re,Feo),e(Re,jJ),e(jJ,Ceo),e(Re,Meo),g(rE,Re,null),e(Wo,Eeo),e(Wo,Eh),g(tE,Eh,null),e(Eh,yeo),e(Eh,NJ),e(NJ,weo),b(c,W9e,u),b(c,Oi,u),e(Oi,yh),e(yh,qJ),g(aE,qJ,null),e(Oi,Aeo),e(Oi,GJ),e(GJ,Leo),b(c,Q9e,u),b(c,Qo,u),g(nE,Qo,null),e(Qo,Beo),e(Qo,Xi),e(Xi,xeo),e(Xi,OJ),e(OJ,keo),e(Xi,Reo),e(Xi,XJ),e(XJ,Seo),e(Xi,Peo),e(Qo,$eo),e(Qo,sE),e(sE,Ieo),e(sE,VJ),e(VJ,Deo),e(sE,jeo),e(Qo,Neo),e(Qo,qr),g(lE,qr,null),e(qr,qeo),e(qr,zJ),e(zJ,Geo),e(qr,Oeo),e(qr,Vi),e(Vi,Xeo),e(Vi,WJ),e(WJ,Veo),e(Vi,zeo),e(Vi,QJ),e(QJ,Weo),e(Vi,Qeo),e(qr,Heo),e(qr,HJ),e(HJ,Ueo),e(qr,Jeo),g(iE,qr,null),e(Qo,Yeo),e(Qo,Se),g(dE,Se,null),e(Se,Keo),e(Se,UJ),e(UJ,Zeo),e(Se,eoo),e(Se,Na),e(Na,ooo),e(Na,JJ),e(JJ,roo),e(Na,too),e(Na,YJ),e(YJ,aoo),e(Na,noo),e(Na,KJ),e(KJ,soo),e(Na,loo),e(Se,ioo),e(Se,F),e(F,wh),e(wh,ZJ),e(ZJ,doo),e(wh,coo),e(wh,Gk),e(Gk,foo),e(wh,moo),e(F,goo),e(F,Ah),e(Ah,eY),e(eY,hoo),e(Ah,poo),e(Ah,Ok),e(Ok,_oo),e(Ah,uoo),e(F,boo),e(F,Lh),e(Lh,oY),e(oY,voo),e(Lh,Too),e(Lh,Xk),e(Xk,Foo),e(Lh,Coo),e(F,Moo),e(F,Bh),e(Bh,rY),e(rY,Eoo),e(Bh,yoo),e(Bh,Vk),e(Vk,woo),e(Bh,Aoo),e(F,Loo),e(F,xh),e(xh,tY),e(tY,Boo),e(xh,xoo),e(xh,zk),e(zk,koo),e(xh,Roo),e(F,Soo),e(F,kh),e(kh,aY),e(aY,Poo),e(kh,$oo),e(kh,Wk),e(Wk,Ioo),e(kh,Doo),e(F,joo),e(F,Rh),e(Rh,nY),e(nY,Noo),e(Rh,qoo),e(Rh,Qk),e(Qk,Goo),e(Rh,Ooo),e(F,Xoo),e(F,Sh),e(Sh,sY),e(sY,Voo),e(Sh,zoo),e(Sh,Hk),e(Hk,Woo),e(Sh,Qoo),e(F,Hoo),e(F,Ph),e(Ph,lY),e(lY,Uoo),e(Ph,Joo),e(Ph,Uk),e(Uk,Yoo),e(Ph,Koo),e(F,Zoo),e(F,$h),e($h,iY),e(iY,ero),e($h,oro),e($h,Jk),e(Jk,rro),e($h,tro),e(F,aro),e(F,Ih),e(Ih,dY),e(dY,nro),e(Ih,sro),e(Ih,Yk),e(Yk,lro),e(Ih,iro),e(F,dro),e(F,Dh),e(Dh,cY),e(cY,cro),e(Dh,fro),e(Dh,Kk),e(Kk,mro),e(Dh,gro),e(F,hro),e(F,jh),e(jh,fY),e(fY,pro),e(jh,_ro),e(jh,Zk),e(Zk,uro),e(jh,bro),e(F,vro),e(F,Nh),e(Nh,mY),e(mY,Tro),e(Nh,Fro),e(Nh,eR),e(eR,Cro),e(Nh,Mro),e(F,Ero),e(F,qh),e(qh,gY),e(gY,yro),e(qh,wro),e(qh,oR),e(oR,Aro),e(qh,Lro),e(F,Bro),e(F,Gh),e(Gh,hY),e(hY,xro),e(Gh,kro),e(Gh,rR),e(rR,Rro),e(Gh,Sro),e(F,Pro),e(F,Oh),e(Oh,pY),e(pY,$ro),e(Oh,Iro),e(Oh,tR),e(tR,Dro),e(Oh,jro),e(F,Nro),e(F,Xh),e(Xh,_Y),e(_Y,qro),e(Xh,Gro),e(Xh,aR),e(aR,Oro),e(Xh,Xro),e(F,Vro),e(F,Vh),e(Vh,uY),e(uY,zro),e(Vh,Wro),e(Vh,nR),e(nR,Qro),e(Vh,Hro),e(F,Uro),e(F,zh),e(zh,bY),e(bY,Jro),e(zh,Yro),e(zh,sR),e(sR,Kro),e(zh,Zro),e(F,eto),e(F,Wh),e(Wh,vY),e(vY,oto),e(Wh,rto),e(Wh,lR),e(lR,tto),e(Wh,ato),e(F,nto),e(F,Qh),e(Qh,TY),e(TY,sto),e(Qh,lto),e(Qh,iR),e(iR,ito),e(Qh,dto),e(F,cto),e(F,Hh),e(Hh,FY),e(FY,fto),e(Hh,mto),e(Hh,dR),e(dR,gto),e(Hh,hto),e(F,pto),e(F,Uh),e(Uh,CY),e(CY,_to),e(Uh,uto),e(Uh,cR),e(cR,bto),e(Uh,vto),e(F,Tto),e(F,Jh),e(Jh,MY),e(MY,Fto),e(Jh,Cto),e(Jh,fR),e(fR,Mto),e(Jh,Eto),e(F,yto),e(F,Yh),e(Yh,EY),e(EY,wto),e(Yh,Ato),e(Yh,mR),e(mR,Lto),e(Yh,Bto),e(F,xto),e(F,Kh),e(Kh,yY),e(yY,kto),e(Kh,Rto),e(Kh,gR),e(gR,Sto),e(Kh,Pto),e(F,$to),e(F,Ss),e(Ss,wY),e(wY,Ito),e(Ss,Dto),e(Ss,hR),e(hR,jto),e(Ss,Nto),e(Ss,pR),e(pR,qto),e(Ss,Gto),e(F,Oto),e(F,Zh),e(Zh,AY),e(AY,Xto),e(Zh,Vto),e(Zh,_R),e(_R,zto),e(Zh,Wto),e(F,Qto),e(F,ep),e(ep,LY),e(LY,Hto),e(ep,Uto),e(ep,uR),e(uR,Jto),e(ep,Yto),e(F,Kto),e(F,op),e(op,BY),e(BY,Zto),e(op,eao),e(op,bR),e(bR,oao),e(op,rao),e(F,tao),e(F,rp),e(rp,xY),e(xY,aao),e(rp,nao),e(rp,vR),e(vR,sao),e(rp,lao),e(F,iao),e(F,tp),e(tp,kY),e(kY,dao),e(tp,cao),e(tp,TR),e(TR,fao),e(tp,mao),e(F,gao),e(F,ap),e(ap,RY),e(RY,hao),e(ap,pao),e(ap,FR),e(FR,_ao),e(ap,uao),e(F,bao),e(F,np),e(np,SY),e(SY,vao),e(np,Tao),e(np,CR),e(CR,Fao),e(np,Cao),e(F,Mao),e(F,sp),e(sp,PY),e(PY,Eao),e(sp,yao),e(sp,MR),e(MR,wao),e(sp,Aao),e(F,Lao),e(F,lp),e(lp,$Y),e($Y,Bao),e(lp,xao),e(lp,ER),e(ER,kao),e(lp,Rao),e(F,Sao),e(F,ip),e(ip,IY),e(IY,Pao),e(ip,$ao),e(ip,yR),e(yR,Iao),e(ip,Dao),e(F,jao),e(F,dp),e(dp,DY),e(DY,Nao),e(dp,qao),e(dp,wR),e(wR,Gao),e(dp,Oao),e(F,Xao),e(F,cp),e(cp,jY),e(jY,Vao),e(cp,zao),e(cp,AR),e(AR,Wao),e(cp,Qao),e(F,Hao),e(F,fp),e(fp,NY),e(NY,Uao),e(fp,Jao),e(fp,LR),e(LR,Yao),e(fp,Kao),e(F,Zao),e(F,mp),e(mp,qY),e(qY,eno),e(mp,ono),e(mp,BR),e(BR,rno),e(mp,tno),e(F,ano),e(F,gp),e(gp,GY),e(GY,nno),e(gp,sno),e(gp,xR),e(xR,lno),e(gp,ino),e(F,dno),e(F,hp),e(hp,OY),e(OY,cno),e(hp,fno),e(hp,kR),e(kR,mno),e(hp,gno),e(F,hno),e(F,pp),e(pp,XY),e(XY,pno),e(pp,_no),e(pp,RR),e(RR,uno),e(pp,bno),e(F,vno),e(F,_p),e(_p,VY),e(VY,Tno),e(_p,Fno),e(_p,SR),e(SR,Cno),e(_p,Mno),e(F,Eno),e(F,up),e(up,zY),e(zY,yno),e(up,wno),e(up,PR),e(PR,Ano),e(up,Lno),e(F,Bno),e(F,bp),e(bp,WY),e(WY,xno),e(bp,kno),e(bp,$R),e($R,Rno),e(bp,Sno),e(F,Pno),e(F,vp),e(vp,QY),e(QY,$no),e(vp,Ino),e(vp,IR),e(IR,Dno),e(vp,jno),e(F,Nno),e(F,Tp),e(Tp,HY),e(HY,qno),e(Tp,Gno),e(Tp,DR),e(DR,Ono),e(Tp,Xno),e(F,Vno),e(F,Fp),e(Fp,UY),e(UY,zno),e(Fp,Wno),e(Fp,jR),e(jR,Qno),e(Fp,Hno),e(F,Uno),e(F,Cp),e(Cp,JY),e(JY,Jno),e(Cp,Yno),e(Cp,NR),e(NR,Kno),e(Cp,Zno),e(F,eso),e(F,Mp),e(Mp,YY),e(YY,oso),e(Mp,rso),e(Mp,qR),e(qR,tso),e(Mp,aso),e(F,nso),e(F,Ep),e(Ep,KY),e(KY,sso),e(Ep,lso),e(Ep,GR),e(GR,iso),e(Ep,dso),e(F,cso),e(F,yp),e(yp,ZY),e(ZY,fso),e(yp,mso),e(yp,OR),e(OR,gso),e(yp,hso),e(F,pso),e(F,wp),e(wp,eK),e(eK,_so),e(wp,uso),e(wp,XR),e(XR,bso),e(wp,vso),e(F,Tso),e(F,Ap),e(Ap,oK),e(oK,Fso),e(Ap,Cso),e(Ap,VR),e(VR,Mso),e(Ap,Eso),e(F,yso),e(F,Lp),e(Lp,rK),e(rK,wso),e(Lp,Aso),e(Lp,zR),e(zR,Lso),e(Lp,Bso),e(F,xso),e(F,Bp),e(Bp,tK),e(tK,kso),e(Bp,Rso),e(Bp,WR),e(WR,Sso),e(Bp,Pso),e(F,$so),e(F,xp),e(xp,aK),e(aK,Iso),e(xp,Dso),e(xp,QR),e(QR,jso),e(xp,Nso),e(F,qso),e(F,kp),e(kp,nK),e(nK,Gso),e(kp,Oso),e(kp,HR),e(HR,Xso),e(kp,Vso),e(F,zso),e(F,Rp),e(Rp,sK),e(sK,Wso),e(Rp,Qso),e(Rp,UR),e(UR,Hso),e(Rp,Uso),e(F,Jso),e(F,Sp),e(Sp,lK),e(lK,Yso),e(Sp,Kso),e(Sp,JR),e(JR,Zso),e(Sp,elo),e(F,olo),e(F,Pp),e(Pp,iK),e(iK,rlo),e(Pp,tlo),e(Pp,YR),e(YR,alo),e(Pp,nlo),e(F,slo),e(F,$p),e($p,dK),e(dK,llo),e($p,ilo),e($p,KR),e(KR,dlo),e($p,clo),e(F,flo),e(F,Ip),e(Ip,cK),e(cK,mlo),e(Ip,glo),e(Ip,ZR),e(ZR,hlo),e(Ip,plo),e(F,_lo),e(F,Dp),e(Dp,fK),e(fK,ulo),e(Dp,blo),e(Dp,eS),e(eS,vlo),e(Dp,Tlo),e(F,Flo),e(F,jp),e(jp,mK),e(mK,Clo),e(jp,Mlo),e(jp,oS),e(oS,Elo),e(jp,ylo),e(F,wlo),e(F,Np),e(Np,gK),e(gK,Alo),e(Np,Llo),e(Np,rS),e(rS,Blo),e(Np,xlo),e(F,klo),e(F,qp),e(qp,hK),e(hK,Rlo),e(qp,Slo),e(qp,tS),e(tS,Plo),e(qp,$lo),e(F,Ilo),e(F,Gp),e(Gp,pK),e(pK,Dlo),e(Gp,jlo),e(Gp,aS),e(aS,Nlo),e(Gp,qlo),e(F,Glo),e(F,Op),e(Op,_K),e(_K,Olo),e(Op,Xlo),e(Op,nS),e(nS,Vlo),e(Op,zlo),e(F,Wlo),e(F,Xp),e(Xp,uK),e(uK,Qlo),e(Xp,Hlo),e(Xp,sS),e(sS,Ulo),e(Xp,Jlo),e(F,Ylo),e(F,Vp),e(Vp,bK),e(bK,Klo),e(Vp,Zlo),e(Vp,lS),e(lS,eio),e(Vp,oio),e(F,rio),e(F,zp),e(zp,vK),e(vK,tio),e(zp,aio),e(zp,iS),e(iS,nio),e(zp,sio),e(F,lio),e(F,Wp),e(Wp,TK),e(TK,iio),e(Wp,dio),e(Wp,dS),e(dS,cio),e(Wp,fio),e(F,mio),e(F,Qp),e(Qp,FK),e(FK,gio),e(Qp,hio),e(Qp,cS),e(cS,pio),e(Qp,_io),e(F,uio),e(F,Hp),e(Hp,CK),e(CK,bio),e(Hp,vio),e(Hp,fS),e(fS,Tio),e(Hp,Fio),e(F,Cio),e(F,Up),e(Up,MK),e(MK,Mio),e(Up,Eio),e(Up,mS),e(mS,yio),e(Up,wio),e(F,Aio),e(F,Jp),e(Jp,EK),e(EK,Lio),e(Jp,Bio),e(Jp,gS),e(gS,xio),e(Jp,kio),e(F,Rio),e(F,Yp),e(Yp,yK),e(yK,Sio),e(Yp,Pio),e(Yp,hS),e(hS,$io),e(Yp,Iio),e(F,Dio),e(F,Kp),e(Kp,wK),e(wK,jio),e(Kp,Nio),e(Kp,pS),e(pS,qio),e(Kp,Gio),e(F,Oio),e(F,Zp),e(Zp,AK),e(AK,Xio),e(Zp,Vio),e(Zp,_S),e(_S,zio),e(Zp,Wio),e(F,Qio),e(F,e_),e(e_,LK),e(LK,Hio),e(e_,Uio),e(e_,uS),e(uS,Jio),e(e_,Yio),e(F,Kio),e(F,o_),e(o_,BK),e(BK,Zio),e(o_,edo),e(o_,bS),e(bS,odo),e(o_,rdo),e(F,tdo),e(F,r_),e(r_,xK),e(xK,ado),e(r_,ndo),e(r_,vS),e(vS,sdo),e(r_,ldo),e(F,ido),e(F,t_),e(t_,kK),e(kK,ddo),e(t_,cdo),e(t_,TS),e(TS,fdo),e(t_,mdo),e(Se,gdo),e(Se,a_),e(a_,hdo),e(a_,RK),e(RK,pdo),e(a_,_do),e(a_,SK),e(SK,udo),e(Se,bdo),e(Se,PK),e(PK,vdo),e(Se,Tdo),g(cE,Se,null),b(c,H9e,u),b(c,zi,u),e(zi,n_),e(n_,$K),g(fE,$K,null),e(zi,Fdo),e(zi,IK),e(IK,Cdo),b(c,U9e,u),b(c,Ho,u),g(mE,Ho,null),e(Ho,Mdo),e(Ho,Wi),e(Wi,Edo),e(Wi,DK),e(DK,ydo),e(Wi,wdo),e(Wi,jK),e(jK,Ado),e(Wi,Ldo),e(Ho,Bdo),e(Ho,gE),e(gE,xdo),e(gE,NK),e(NK,kdo),e(gE,Rdo),e(Ho,Sdo),e(Ho,Gr),g(hE,Gr,null),e(Gr,Pdo),e(Gr,qK),e(qK,$do),e(Gr,Ido),e(Gr,Qi),e(Qi,Ddo),e(Qi,GK),e(GK,jdo),e(Qi,Ndo),e(Qi,OK),e(OK,qdo),e(Qi,Gdo),e(Gr,Odo),e(Gr,XK),e(XK,Xdo),e(Gr,Vdo),g(pE,Gr,null),e(Ho,zdo),e(Ho,Pe),g(_E,Pe,null),e(Pe,Wdo),e(Pe,VK),e(VK,Qdo),e(Pe,Hdo),e(Pe,qa),e(qa,Udo),e(qa,zK),e(zK,Jdo),e(qa,Ydo),e(qa,WK),e(WK,Kdo),e(qa,Zdo),e(qa,QK),e(QK,eco),e(qa,oco),e(Pe,rco),e(Pe,k),e(k,s_),e(s_,HK),e(HK,tco),e(s_,aco),e(s_,FS),e(FS,nco),e(s_,sco),e(k,lco),e(k,l_),e(l_,UK),e(UK,ico),e(l_,dco),e(l_,CS),e(CS,cco),e(l_,fco),e(k,mco),e(k,i_),e(i_,JK),e(JK,gco),e(i_,hco),e(i_,MS),e(MS,pco),e(i_,_co),e(k,uco),e(k,d_),e(d_,YK),e(YK,bco),e(d_,vco),e(d_,ES),e(ES,Tco),e(d_,Fco),e(k,Cco),e(k,c_),e(c_,KK),e(KK,Mco),e(c_,Eco),e(c_,yS),e(yS,yco),e(c_,wco),e(k,Aco),e(k,f_),e(f_,ZK),e(ZK,Lco),e(f_,Bco),e(f_,wS),e(wS,xco),e(f_,kco),e(k,Rco),e(k,m_),e(m_,eZ),e(eZ,Sco),e(m_,Pco),e(m_,AS),e(AS,$co),e(m_,Ico),e(k,Dco),e(k,g_),e(g_,oZ),e(oZ,jco),e(g_,Nco),e(g_,LS),e(LS,qco),e(g_,Gco),e(k,Oco),e(k,h_),e(h_,rZ),e(rZ,Xco),e(h_,Vco),e(h_,BS),e(BS,zco),e(h_,Wco),e(k,Qco),e(k,p_),e(p_,tZ),e(tZ,Hco),e(p_,Uco),e(p_,xS),e(xS,Jco),e(p_,Yco),e(k,Kco),e(k,__),e(__,aZ),e(aZ,Zco),e(__,efo),e(__,kS),e(kS,ofo),e(__,rfo),e(k,tfo),e(k,u_),e(u_,nZ),e(nZ,afo),e(u_,nfo),e(u_,RS),e(RS,sfo),e(u_,lfo),e(k,ifo),e(k,b_),e(b_,sZ),e(sZ,dfo),e(b_,cfo),e(b_,SS),e(SS,ffo),e(b_,mfo),e(k,gfo),e(k,v_),e(v_,lZ),e(lZ,hfo),e(v_,pfo),e(v_,PS),e(PS,_fo),e(v_,ufo),e(k,bfo),e(k,T_),e(T_,iZ),e(iZ,vfo),e(T_,Tfo),e(T_,$S),e($S,Ffo),e(T_,Cfo),e(k,Mfo),e(k,F_),e(F_,dZ),e(dZ,Efo),e(F_,yfo),e(F_,IS),e(IS,wfo),e(F_,Afo),e(k,Lfo),e(k,C_),e(C_,cZ),e(cZ,Bfo),e(C_,xfo),e(C_,DS),e(DS,kfo),e(C_,Rfo),e(k,Sfo),e(k,M_),e(M_,fZ),e(fZ,Pfo),e(M_,$fo),e(M_,jS),e(jS,Ifo),e(M_,Dfo),e(k,jfo),e(k,E_),e(E_,mZ),e(mZ,Nfo),e(E_,qfo),e(E_,NS),e(NS,Gfo),e(E_,Ofo),e(k,Xfo),e(k,y_),e(y_,gZ),e(gZ,Vfo),e(y_,zfo),e(y_,qS),e(qS,Wfo),e(y_,Qfo),e(k,Hfo),e(k,w_),e(w_,hZ),e(hZ,Ufo),e(w_,Jfo),e(w_,GS),e(GS,Yfo),e(w_,Kfo),e(k,Zfo),e(k,A_),e(A_,pZ),e(pZ,emo),e(A_,omo),e(A_,OS),e(OS,rmo),e(A_,tmo),e(k,amo),e(k,L_),e(L_,_Z),e(_Z,nmo),e(L_,smo),e(L_,XS),e(XS,lmo),e(L_,imo),e(k,dmo),e(k,B_),e(B_,uZ),e(uZ,cmo),e(B_,fmo),e(B_,VS),e(VS,mmo),e(B_,gmo),e(k,hmo),e(k,x_),e(x_,bZ),e(bZ,pmo),e(x_,_mo),e(x_,zS),e(zS,umo),e(x_,bmo),e(k,vmo),e(k,k_),e(k_,vZ),e(vZ,Tmo),e(k_,Fmo),e(k_,WS),e(WS,Cmo),e(k_,Mmo),e(k,Emo),e(k,R_),e(R_,TZ),e(TZ,ymo),e(R_,wmo),e(R_,QS),e(QS,Amo),e(R_,Lmo),e(k,Bmo),e(k,S_),e(S_,FZ),e(FZ,xmo),e(S_,kmo),e(S_,HS),e(HS,Rmo),e(S_,Smo),e(k,Pmo),e(k,P_),e(P_,CZ),e(CZ,$mo),e(P_,Imo),e(P_,US),e(US,Dmo),e(P_,jmo),e(k,Nmo),e(k,$_),e($_,MZ),e(MZ,qmo),e($_,Gmo),e($_,JS),e(JS,Omo),e($_,Xmo),e(k,Vmo),e(k,I_),e(I_,EZ),e(EZ,zmo),e(I_,Wmo),e(I_,YS),e(YS,Qmo),e(I_,Hmo),e(k,Umo),e(k,D_),e(D_,yZ),e(yZ,Jmo),e(D_,Ymo),e(D_,KS),e(KS,Kmo),e(D_,Zmo),e(k,ego),e(k,j_),e(j_,wZ),e(wZ,ogo),e(j_,rgo),e(j_,ZS),e(ZS,tgo),e(j_,ago),e(k,ngo),e(k,N_),e(N_,AZ),e(AZ,sgo),e(N_,lgo),e(N_,eP),e(eP,igo),e(N_,dgo),e(k,cgo),e(k,q_),e(q_,LZ),e(LZ,fgo),e(q_,mgo),e(q_,oP),e(oP,ggo),e(q_,hgo),e(k,pgo),e(k,G_),e(G_,BZ),e(BZ,_go),e(G_,ugo),e(G_,rP),e(rP,bgo),e(G_,vgo),e(k,Tgo),e(k,O_),e(O_,xZ),e(xZ,Fgo),e(O_,Cgo),e(O_,tP),e(tP,Mgo),e(O_,Ego),e(k,ygo),e(k,X_),e(X_,kZ),e(kZ,wgo),e(X_,Ago),e(X_,aP),e(aP,Lgo),e(X_,Bgo),e(k,xgo),e(k,V_),e(V_,RZ),e(RZ,kgo),e(V_,Rgo),e(V_,nP),e(nP,Sgo),e(V_,Pgo),e(Pe,$go),e(Pe,z_),e(z_,Igo),e(z_,SZ),e(SZ,Dgo),e(z_,jgo),e(z_,PZ),e(PZ,Ngo),e(Pe,qgo),e(Pe,$Z),e($Z,Ggo),e(Pe,Ogo),g(uE,Pe,null),b(c,J9e,u),b(c,Hi,u),e(Hi,W_),e(W_,IZ),g(bE,IZ,null),e(Hi,Xgo),e(Hi,DZ),e(DZ,Vgo),b(c,Y9e,u),b(c,Uo,u),g(vE,Uo,null),e(Uo,zgo),e(Uo,Ui),e(Ui,Wgo),e(Ui,jZ),e(jZ,Qgo),e(Ui,Hgo),e(Ui,NZ),e(NZ,Ugo),e(Ui,Jgo),e(Uo,Ygo),e(Uo,TE),e(TE,Kgo),e(TE,qZ),e(qZ,Zgo),e(TE,eho),e(Uo,oho),e(Uo,Or),g(FE,Or,null),e(Or,rho),e(Or,GZ),e(GZ,tho),e(Or,aho),e(Or,Ji),e(Ji,nho),e(Ji,OZ),e(OZ,sho),e(Ji,lho),e(Ji,XZ),e(XZ,iho),e(Ji,dho),e(Or,cho),e(Or,VZ),e(VZ,fho),e(Or,mho),g(CE,Or,null),e(Uo,gho),e(Uo,$e),g(ME,$e,null),e($e,hho),e($e,zZ),e(zZ,pho),e($e,_ho),e($e,Ga),e(Ga,uho),e(Ga,WZ),e(WZ,bho),e(Ga,vho),e(Ga,QZ),e(QZ,Tho),e(Ga,Fho),e(Ga,HZ),e(HZ,Cho),e(Ga,Mho),e($e,Eho),e($e,$),e($,Q_),e(Q_,UZ),e(UZ,yho),e(Q_,who),e(Q_,sP),e(sP,Aho),e(Q_,Lho),e($,Bho),e($,H_),e(H_,JZ),e(JZ,xho),e(H_,kho),e(H_,lP),e(lP,Rho),e(H_,Sho),e($,Pho),e($,U_),e(U_,YZ),e(YZ,$ho),e(U_,Iho),e(U_,iP),e(iP,Dho),e(U_,jho),e($,Nho),e($,J_),e(J_,KZ),e(KZ,qho),e(J_,Gho),e(J_,dP),e(dP,Oho),e(J_,Xho),e($,Vho),e($,Y_),e(Y_,ZZ),e(ZZ,zho),e(Y_,Who),e(Y_,cP),e(cP,Qho),e(Y_,Hho),e($,Uho),e($,K_),e(K_,eee),e(eee,Jho),e(K_,Yho),e(K_,fP),e(fP,Kho),e(K_,Zho),e($,epo),e($,Z_),e(Z_,oee),e(oee,opo),e(Z_,rpo),e(Z_,mP),e(mP,tpo),e(Z_,apo),e($,npo),e($,eu),e(eu,ree),e(ree,spo),e(eu,lpo),e(eu,gP),e(gP,ipo),e(eu,dpo),e($,cpo),e($,ou),e(ou,tee),e(tee,fpo),e(ou,mpo),e(ou,hP),e(hP,gpo),e(ou,hpo),e($,ppo),e($,ru),e(ru,aee),e(aee,_po),e(ru,upo),e(ru,pP),e(pP,bpo),e(ru,vpo),e($,Tpo),e($,tu),e(tu,nee),e(nee,Fpo),e(tu,Cpo),e(tu,_P),e(_P,Mpo),e(tu,Epo),e($,ypo),e($,au),e(au,see),e(see,wpo),e(au,Apo),e(au,uP),e(uP,Lpo),e(au,Bpo),e($,xpo),e($,nu),e(nu,lee),e(lee,kpo),e(nu,Rpo),e(nu,bP),e(bP,Spo),e(nu,Ppo),e($,$po),e($,su),e(su,iee),e(iee,Ipo),e(su,Dpo),e(su,vP),e(vP,jpo),e(su,Npo),e($,qpo),e($,lu),e(lu,dee),e(dee,Gpo),e(lu,Opo),e(lu,TP),e(TP,Xpo),e(lu,Vpo),e($,zpo),e($,iu),e(iu,cee),e(cee,Wpo),e(iu,Qpo),e(iu,FP),e(FP,Hpo),e(iu,Upo),e($,Jpo),e($,du),e(du,fee),e(fee,Ypo),e(du,Kpo),e(du,CP),e(CP,Zpo),e(du,e_o),e($,o_o),e($,cu),e(cu,mee),e(mee,r_o),e(cu,t_o),e(cu,MP),e(MP,a_o),e(cu,n_o),e($,s_o),e($,fu),e(fu,gee),e(gee,l_o),e(fu,i_o),e(fu,EP),e(EP,d_o),e(fu,c_o),e($,f_o),e($,mu),e(mu,hee),e(hee,m_o),e(mu,g_o),e(mu,yP),e(yP,h_o),e(mu,p_o),e($,__o),e($,gu),e(gu,pee),e(pee,u_o),e(gu,b_o),e(gu,wP),e(wP,v_o),e(gu,T_o),e($,F_o),e($,hu),e(hu,_ee),e(_ee,C_o),e(hu,M_o),e(hu,AP),e(AP,E_o),e(hu,y_o),e($,w_o),e($,pu),e(pu,uee),e(uee,A_o),e(pu,L_o),e(pu,LP),e(LP,B_o),e(pu,x_o),e($,k_o),e($,_u),e(_u,bee),e(bee,R_o),e(_u,S_o),e(_u,BP),e(BP,P_o),e(_u,$_o),e($,I_o),e($,uu),e(uu,vee),e(vee,D_o),e(uu,j_o),e(uu,xP),e(xP,N_o),e(uu,q_o),e($,G_o),e($,bu),e(bu,Tee),e(Tee,O_o),e(bu,X_o),e(bu,kP),e(kP,V_o),e(bu,z_o),e($,W_o),e($,vu),e(vu,Fee),e(Fee,Q_o),e(vu,H_o),e(vu,RP),e(RP,U_o),e(vu,J_o),e($,Y_o),e($,Tu),e(Tu,Cee),e(Cee,K_o),e(Tu,Z_o),e(Tu,SP),e(SP,euo),e(Tu,ouo),e($,ruo),e($,Fu),e(Fu,Mee),e(Mee,tuo),e(Fu,auo),e(Fu,PP),e(PP,nuo),e(Fu,suo),e($,luo),e($,Cu),e(Cu,Eee),e(Eee,iuo),e(Cu,duo),e(Cu,$P),e($P,cuo),e(Cu,fuo),e($,muo),e($,Mu),e(Mu,yee),e(yee,guo),e(Mu,huo),e(Mu,IP),e(IP,puo),e(Mu,_uo),e($,uuo),e($,Eu),e(Eu,wee),e(wee,buo),e(Eu,vuo),e(Eu,DP),e(DP,Tuo),e(Eu,Fuo),e($,Cuo),e($,yu),e(yu,Aee),e(Aee,Muo),e(yu,Euo),e(yu,jP),e(jP,yuo),e(yu,wuo),e($,Auo),e($,wu),e(wu,Lee),e(Lee,Luo),e(wu,Buo),e(wu,NP),e(NP,xuo),e(wu,kuo),e($,Ruo),e($,Au),e(Au,Bee),e(Bee,Suo),e(Au,Puo),e(Au,qP),e(qP,$uo),e(Au,Iuo),e($e,Duo),e($e,Lu),e(Lu,juo),e(Lu,xee),e(xee,Nuo),e(Lu,quo),e(Lu,kee),e(kee,Guo),e($e,Ouo),e($e,Ree),e(Ree,Xuo),e($e,Vuo),g(EE,$e,null),b(c,K9e,u),b(c,Yi,u),e(Yi,Bu),e(Bu,See),g(yE,See,null),e(Yi,zuo),e(Yi,Pee),e(Pee,Wuo),b(c,Z9e,u),b(c,Jo,u),g(wE,Jo,null),e(Jo,Quo),e(Jo,Ki),e(Ki,Huo),e(Ki,$ee),e($ee,Uuo),e(Ki,Juo),e(Ki,Iee),e(Iee,Yuo),e(Ki,Kuo),e(Jo,Zuo),e(Jo,AE),e(AE,e1o),e(AE,Dee),e(Dee,o1o),e(AE,r1o),e(Jo,t1o),e(Jo,Xr),g(LE,Xr,null),e(Xr,a1o),e(Xr,jee),e(jee,n1o),e(Xr,s1o),e(Xr,Zi),e(Zi,l1o),e(Zi,Nee),e(Nee,i1o),e(Zi,d1o),e(Zi,qee),e(qee,c1o),e(Zi,f1o),e(Xr,m1o),e(Xr,Gee),e(Gee,g1o),e(Xr,h1o),g(BE,Xr,null),e(Jo,p1o),e(Jo,Ie),g(xE,Ie,null),e(Ie,_1o),e(Ie,Oee),e(Oee,u1o),e(Ie,b1o),e(Ie,Oa),e(Oa,v1o),e(Oa,Xee),e(Xee,T1o),e(Oa,F1o),e(Oa,Vee),e(Vee,C1o),e(Oa,M1o),e(Oa,zee),e(zee,E1o),e(Oa,y1o),e(Ie,w1o),e(Ie,I),e(I,xu),e(xu,Wee),e(Wee,A1o),e(xu,L1o),e(xu,GP),e(GP,B1o),e(xu,x1o),e(I,k1o),e(I,ku),e(ku,Qee),e(Qee,R1o),e(ku,S1o),e(ku,OP),e(OP,P1o),e(ku,$1o),e(I,I1o),e(I,Ru),e(Ru,Hee),e(Hee,D1o),e(Ru,j1o),e(Ru,XP),e(XP,N1o),e(Ru,q1o),e(I,G1o),e(I,Su),e(Su,Uee),e(Uee,O1o),e(Su,X1o),e(Su,VP),e(VP,V1o),e(Su,z1o),e(I,W1o),e(I,Pu),e(Pu,Jee),e(Jee,Q1o),e(Pu,H1o),e(Pu,zP),e(zP,U1o),e(Pu,J1o),e(I,Y1o),e(I,$u),e($u,Yee),e(Yee,K1o),e($u,Z1o),e($u,WP),e(WP,e7o),e($u,o7o),e(I,r7o),e(I,Iu),e(Iu,Kee),e(Kee,t7o),e(Iu,a7o),e(Iu,QP),e(QP,n7o),e(Iu,s7o),e(I,l7o),e(I,Du),e(Du,Zee),e(Zee,i7o),e(Du,d7o),e(Du,HP),e(HP,c7o),e(Du,f7o),e(I,m7o),e(I,ju),e(ju,eoe),e(eoe,g7o),e(ju,h7o),e(ju,UP),e(UP,p7o),e(ju,_7o),e(I,u7o),e(I,Nu),e(Nu,ooe),e(ooe,b7o),e(Nu,v7o),e(Nu,JP),e(JP,T7o),e(Nu,F7o),e(I,C7o),e(I,qu),e(qu,roe),e(roe,M7o),e(qu,E7o),e(qu,YP),e(YP,y7o),e(qu,w7o),e(I,A7o),e(I,Gu),e(Gu,toe),e(toe,L7o),e(Gu,B7o),e(Gu,KP),e(KP,x7o),e(Gu,k7o),e(I,R7o),e(I,Ou),e(Ou,aoe),e(aoe,S7o),e(Ou,P7o),e(Ou,ZP),e(ZP,$7o),e(Ou,I7o),e(I,D7o),e(I,Xu),e(Xu,noe),e(noe,j7o),e(Xu,N7o),e(Xu,e$),e(e$,q7o),e(Xu,G7o),e(I,O7o),e(I,Vu),e(Vu,soe),e(soe,X7o),e(Vu,V7o),e(Vu,o$),e(o$,z7o),e(Vu,W7o),e(I,Q7o),e(I,zu),e(zu,loe),e(loe,H7o),e(zu,U7o),e(zu,r$),e(r$,J7o),e(zu,Y7o),e(I,K7o),e(I,Wu),e(Wu,ioe),e(ioe,Z7o),e(Wu,ebo),e(Wu,t$),e(t$,obo),e(Wu,rbo),e(I,tbo),e(I,Qu),e(Qu,doe),e(doe,abo),e(Qu,nbo),e(Qu,a$),e(a$,sbo),e(Qu,lbo),e(I,ibo),e(I,Hu),e(Hu,coe),e(coe,dbo),e(Hu,cbo),e(Hu,n$),e(n$,fbo),e(Hu,mbo),e(I,gbo),e(I,Uu),e(Uu,foe),e(foe,hbo),e(Uu,pbo),e(Uu,s$),e(s$,_bo),e(Uu,ubo),e(I,bbo),e(I,Ju),e(Ju,moe),e(moe,vbo),e(Ju,Tbo),e(Ju,l$),e(l$,Fbo),e(Ju,Cbo),e(I,Mbo),e(I,Yu),e(Yu,goe),e(goe,Ebo),e(Yu,ybo),e(Yu,i$),e(i$,wbo),e(Yu,Abo),e(I,Lbo),e(I,Ku),e(Ku,hoe),e(hoe,Bbo),e(Ku,xbo),e(Ku,d$),e(d$,kbo),e(Ku,Rbo),e(I,Sbo),e(I,Zu),e(Zu,poe),e(poe,Pbo),e(Zu,$bo),e(Zu,c$),e(c$,Ibo),e(Zu,Dbo),e(I,jbo),e(I,e1),e(e1,_oe),e(_oe,Nbo),e(e1,qbo),e(e1,f$),e(f$,Gbo),e(e1,Obo),e(I,Xbo),e(I,o1),e(o1,uoe),e(uoe,Vbo),e(o1,zbo),e(o1,m$),e(m$,Wbo),e(o1,Qbo),e(I,Hbo),e(I,r1),e(r1,boe),e(boe,Ubo),e(r1,Jbo),e(r1,g$),e(g$,Ybo),e(r1,Kbo),e(I,Zbo),e(I,t1),e(t1,voe),e(voe,e5o),e(t1,o5o),e(t1,h$),e(h$,r5o),e(t1,t5o),e(I,a5o),e(I,a1),e(a1,Toe),e(Toe,n5o),e(a1,s5o),e(a1,p$),e(p$,l5o),e(a1,i5o),e(I,d5o),e(I,n1),e(n1,Foe),e(Foe,c5o),e(n1,f5o),e(n1,_$),e(_$,m5o),e(n1,g5o),e(I,h5o),e(I,s1),e(s1,Coe),e(Coe,p5o),e(s1,_5o),e(s1,Moe),e(Moe,u5o),e(s1,b5o),e(I,v5o),e(I,l1),e(l1,Eoe),e(Eoe,T5o),e(l1,F5o),e(l1,u$),e(u$,C5o),e(l1,M5o),e(I,E5o),e(I,i1),e(i1,yoe),e(yoe,y5o),e(i1,w5o),e(i1,b$),e(b$,A5o),e(i1,L5o),e(I,B5o),e(I,d1),e(d1,woe),e(woe,x5o),e(d1,k5o),e(d1,v$),e(v$,R5o),e(d1,S5o),e(I,P5o),e(I,c1),e(c1,Aoe),e(Aoe,$5o),e(c1,I5o),e(c1,T$),e(T$,D5o),e(c1,j5o),e(Ie,N5o),e(Ie,f1),e(f1,q5o),e(f1,Loe),e(Loe,G5o),e(f1,O5o),e(f1,Boe),e(Boe,X5o),e(Ie,V5o),e(Ie,xoe),e(xoe,z5o),e(Ie,W5o),g(kE,Ie,null),b(c,eBe,u),b(c,ed,u),e(ed,m1),e(m1,koe),g(RE,koe,null),e(ed,Q5o),e(ed,Roe),e(Roe,H5o),b(c,oBe,u),b(c,Yo,u),g(SE,Yo,null),e(Yo,U5o),e(Yo,od),e(od,J5o),e(od,Soe),e(Soe,Y5o),e(od,K5o),e(od,Poe),e(Poe,Z5o),e(od,e2o),e(Yo,o2o),e(Yo,PE),e(PE,r2o),e(PE,$oe),e($oe,t2o),e(PE,a2o),e(Yo,n2o),e(Yo,Vr),g($E,Vr,null),e(Vr,s2o),e(Vr,Ioe),e(Ioe,l2o),e(Vr,i2o),e(Vr,rd),e(rd,d2o),e(rd,Doe),e(Doe,c2o),e(rd,f2o),e(rd,joe),e(joe,m2o),e(rd,g2o),e(Vr,h2o),e(Vr,Noe),e(Noe,p2o),e(Vr,_2o),g(IE,Vr,null),e(Yo,u2o),e(Yo,De),g(DE,De,null),e(De,b2o),e(De,qoe),e(qoe,v2o),e(De,T2o),e(De,Xa),e(Xa,F2o),e(Xa,Goe),e(Goe,C2o),e(Xa,M2o),e(Xa,Ooe),e(Ooe,E2o),e(Xa,y2o),e(Xa,Xoe),e(Xoe,w2o),e(Xa,A2o),e(De,L2o),e(De,ne),e(ne,g1),e(g1,Voe),e(Voe,B2o),e(g1,x2o),e(g1,F$),e(F$,k2o),e(g1,R2o),e(ne,S2o),e(ne,h1),e(h1,zoe),e(zoe,P2o),e(h1,$2o),e(h1,C$),e(C$,I2o),e(h1,D2o),e(ne,j2o),e(ne,p1),e(p1,Woe),e(Woe,N2o),e(p1,q2o),e(p1,M$),e(M$,G2o),e(p1,O2o),e(ne,X2o),e(ne,_1),e(_1,Qoe),e(Qoe,V2o),e(_1,z2o),e(_1,E$),e(E$,W2o),e(_1,Q2o),e(ne,H2o),e(ne,u1),e(u1,Hoe),e(Hoe,U2o),e(u1,J2o),e(u1,y$),e(y$,Y2o),e(u1,K2o),e(ne,Z2o),e(ne,b1),e(b1,Uoe),e(Uoe,evo),e(b1,ovo),e(b1,w$),e(w$,rvo),e(b1,tvo),e(ne,avo),e(ne,v1),e(v1,Joe),e(Joe,nvo),e(v1,svo),e(v1,A$),e(A$,lvo),e(v1,ivo),e(ne,dvo),e(ne,T1),e(T1,Yoe),e(Yoe,cvo),e(T1,fvo),e(T1,L$),e(L$,mvo),e(T1,gvo),e(ne,hvo),e(ne,F1),e(F1,Koe),e(Koe,pvo),e(F1,_vo),e(F1,B$),e(B$,uvo),e(F1,bvo),e(ne,vvo),e(ne,C1),e(C1,Zoe),e(Zoe,Tvo),e(C1,Fvo),e(C1,x$),e(x$,Cvo),e(C1,Mvo),e(ne,Evo),e(ne,M1),e(M1,ere),e(ere,yvo),e(M1,wvo),e(M1,k$),e(k$,Avo),e(M1,Lvo),e(ne,Bvo),e(ne,E1),e(E1,ore),e(ore,xvo),e(E1,kvo),e(E1,R$),e(R$,Rvo),e(E1,Svo),e(ne,Pvo),e(ne,y1),e(y1,rre),e(rre,$vo),e(y1,Ivo),e(y1,S$),e(S$,Dvo),e(y1,jvo),e(ne,Nvo),e(ne,w1),e(w1,tre),e(tre,qvo),e(w1,Gvo),e(w1,P$),e(P$,Ovo),e(w1,Xvo),e(ne,Vvo),e(ne,A1),e(A1,are),e(are,zvo),e(A1,Wvo),e(A1,$$),e($$,Qvo),e(A1,Hvo),e(ne,Uvo),e(ne,L1),e(L1,nre),e(nre,Jvo),e(L1,Yvo),e(L1,I$),e(I$,Kvo),e(L1,Zvo),e(De,e0o),e(De,B1),e(B1,o0o),e(B1,sre),e(sre,r0o),e(B1,t0o),e(B1,lre),e(lre,a0o),e(De,n0o),e(De,ire),e(ire,s0o),e(De,l0o),g(jE,De,null),b(c,rBe,u),b(c,td,u),e(td,x1),e(x1,dre),g(NE,dre,null),e(td,i0o),e(td,cre),e(cre,d0o),b(c,tBe,u),b(c,Ko,u),g(qE,Ko,null),e(Ko,c0o),e(Ko,ad),e(ad,f0o),e(ad,fre),e(fre,m0o),e(ad,g0o),e(ad,mre),e(mre,h0o),e(ad,p0o),e(Ko,_0o),e(Ko,GE),e(GE,u0o),e(GE,gre),e(gre,b0o),e(GE,v0o),e(Ko,T0o),e(Ko,zr),g(OE,zr,null),e(zr,F0o),e(zr,hre),e(hre,C0o),e(zr,M0o),e(zr,nd),e(nd,E0o),e(nd,pre),e(pre,y0o),e(nd,w0o),e(nd,_re),e(_re,A0o),e(nd,L0o),e(zr,B0o),e(zr,ure),e(ure,x0o),e(zr,k0o),g(XE,zr,null),e(Ko,R0o),e(Ko,je),g(VE,je,null),e(je,S0o),e(je,bre),e(bre,P0o),e(je,$0o),e(je,Va),e(Va,I0o),e(Va,vre),e(vre,D0o),e(Va,j0o),e(Va,Tre),e(Tre,N0o),e(Va,q0o),e(Va,Fre),e(Fre,G0o),e(Va,O0o),e(je,X0o),e(je,A),e(A,k1),e(k1,Cre),e(Cre,V0o),e(k1,z0o),e(k1,D$),e(D$,W0o),e(k1,Q0o),e(A,H0o),e(A,R1),e(R1,Mre),e(Mre,U0o),e(R1,J0o),e(R1,j$),e(j$,Y0o),e(R1,K0o),e(A,Z0o),e(A,S1),e(S1,Ere),e(Ere,eTo),e(S1,oTo),e(S1,N$),e(N$,rTo),e(S1,tTo),e(A,aTo),e(A,P1),e(P1,yre),e(yre,nTo),e(P1,sTo),e(P1,q$),e(q$,lTo),e(P1,iTo),e(A,dTo),e(A,$1),e($1,wre),e(wre,cTo),e($1,fTo),e($1,G$),e(G$,mTo),e($1,gTo),e(A,hTo),e(A,I1),e(I1,Are),e(Are,pTo),e(I1,_To),e(I1,O$),e(O$,uTo),e(I1,bTo),e(A,vTo),e(A,D1),e(D1,Lre),e(Lre,TTo),e(D1,FTo),e(D1,X$),e(X$,CTo),e(D1,MTo),e(A,ETo),e(A,j1),e(j1,Bre),e(Bre,yTo),e(j1,wTo),e(j1,V$),e(V$,ATo),e(j1,LTo),e(A,BTo),e(A,N1),e(N1,xre),e(xre,xTo),e(N1,kTo),e(N1,z$),e(z$,RTo),e(N1,STo),e(A,PTo),e(A,q1),e(q1,kre),e(kre,$To),e(q1,ITo),e(q1,W$),e(W$,DTo),e(q1,jTo),e(A,NTo),e(A,G1),e(G1,Rre),e(Rre,qTo),e(G1,GTo),e(G1,Q$),e(Q$,OTo),e(G1,XTo),e(A,VTo),e(A,O1),e(O1,Sre),e(Sre,zTo),e(O1,WTo),e(O1,H$),e(H$,QTo),e(O1,HTo),e(A,UTo),e(A,X1),e(X1,Pre),e(Pre,JTo),e(X1,YTo),e(X1,U$),e(U$,KTo),e(X1,ZTo),e(A,eFo),e(A,V1),e(V1,$re),e($re,oFo),e(V1,rFo),e(V1,J$),e(J$,tFo),e(V1,aFo),e(A,nFo),e(A,z1),e(z1,Ire),e(Ire,sFo),e(z1,lFo),e(z1,Y$),e(Y$,iFo),e(z1,dFo),e(A,cFo),e(A,W1),e(W1,Dre),e(Dre,fFo),e(W1,mFo),e(W1,K$),e(K$,gFo),e(W1,hFo),e(A,pFo),e(A,Q1),e(Q1,jre),e(jre,_Fo),e(Q1,uFo),e(Q1,Z$),e(Z$,bFo),e(Q1,vFo),e(A,TFo),e(A,H1),e(H1,Nre),e(Nre,FFo),e(H1,CFo),e(H1,eI),e(eI,MFo),e(H1,EFo),e(A,yFo),e(A,U1),e(U1,qre),e(qre,wFo),e(U1,AFo),e(U1,oI),e(oI,LFo),e(U1,BFo),e(A,xFo),e(A,J1),e(J1,Gre),e(Gre,kFo),e(J1,RFo),e(J1,rI),e(rI,SFo),e(J1,PFo),e(A,$Fo),e(A,Y1),e(Y1,Ore),e(Ore,IFo),e(Y1,DFo),e(Y1,tI),e(tI,jFo),e(Y1,NFo),e(A,qFo),e(A,K1),e(K1,Xre),e(Xre,GFo),e(K1,OFo),e(K1,aI),e(aI,XFo),e(K1,VFo),e(A,zFo),e(A,Z1),e(Z1,Vre),e(Vre,WFo),e(Z1,QFo),e(Z1,nI),e(nI,HFo),e(Z1,UFo),e(A,JFo),e(A,e7),e(e7,zre),e(zre,YFo),e(e7,KFo),e(e7,sI),e(sI,ZFo),e(e7,eCo),e(A,oCo),e(A,o7),e(o7,Wre),e(Wre,rCo),e(o7,tCo),e(o7,lI),e(lI,aCo),e(o7,nCo),e(A,sCo),e(A,r7),e(r7,Qre),e(Qre,lCo),e(r7,iCo),e(r7,iI),e(iI,dCo),e(r7,cCo),e(A,fCo),e(A,t7),e(t7,Hre),e(Hre,mCo),e(t7,gCo),e(t7,dI),e(dI,hCo),e(t7,pCo),e(A,_Co),e(A,a7),e(a7,Ure),e(Ure,uCo),e(a7,bCo),e(a7,cI),e(cI,vCo),e(a7,TCo),e(A,FCo),e(A,n7),e(n7,Jre),e(Jre,CCo),e(n7,MCo),e(n7,fI),e(fI,ECo),e(n7,yCo),e(A,wCo),e(A,s7),e(s7,Yre),e(Yre,ACo),e(s7,LCo),e(s7,mI),e(mI,BCo),e(s7,xCo),e(A,kCo),e(A,l7),e(l7,Kre),e(Kre,RCo),e(l7,SCo),e(l7,gI),e(gI,PCo),e(l7,$Co),e(A,ICo),e(A,i7),e(i7,Zre),e(Zre,DCo),e(i7,jCo),e(i7,hI),e(hI,NCo),e(i7,qCo),e(A,GCo),e(A,d7),e(d7,ete),e(ete,OCo),e(d7,XCo),e(d7,pI),e(pI,VCo),e(d7,zCo),e(A,WCo),e(A,c7),e(c7,ote),e(ote,QCo),e(c7,HCo),e(c7,_I),e(_I,UCo),e(c7,JCo),e(A,YCo),e(A,f7),e(f7,rte),e(rte,KCo),e(f7,ZCo),e(f7,uI),e(uI,e4o),e(f7,o4o),e(A,r4o),e(A,m7),e(m7,tte),e(tte,t4o),e(m7,a4o),e(m7,bI),e(bI,n4o),e(m7,s4o),e(A,l4o),e(A,g7),e(g7,ate),e(ate,i4o),e(g7,d4o),e(g7,vI),e(vI,c4o),e(g7,f4o),e(A,m4o),e(A,h7),e(h7,nte),e(nte,g4o),e(h7,h4o),e(h7,TI),e(TI,p4o),e(h7,_4o),e(A,u4o),e(A,p7),e(p7,ste),e(ste,b4o),e(p7,v4o),e(p7,FI),e(FI,T4o),e(p7,F4o),e(A,C4o),e(A,_7),e(_7,lte),e(lte,M4o),e(_7,E4o),e(_7,CI),e(CI,y4o),e(_7,w4o),e(A,A4o),e(A,u7),e(u7,ite),e(ite,L4o),e(u7,B4o),e(u7,MI),e(MI,x4o),e(u7,k4o),e(A,R4o),e(A,b7),e(b7,dte),e(dte,S4o),e(b7,P4o),e(b7,EI),e(EI,$4o),e(b7,I4o),e(A,D4o),e(A,v7),e(v7,cte),e(cte,j4o),e(v7,N4o),e(v7,yI),e(yI,q4o),e(v7,G4o),e(A,O4o),e(A,T7),e(T7,fte),e(fte,X4o),e(T7,V4o),e(T7,wI),e(wI,z4o),e(T7,W4o),e(A,Q4o),e(A,F7),e(F7,mte),e(mte,H4o),e(F7,U4o),e(F7,AI),e(AI,J4o),e(F7,Y4o),e(A,K4o),e(A,C7),e(C7,gte),e(gte,Z4o),e(C7,eMo),e(C7,LI),e(LI,oMo),e(C7,rMo),e(je,tMo),e(je,M7),e(M7,aMo),e(M7,hte),e(hte,nMo),e(M7,sMo),e(M7,pte),e(pte,lMo),e(je,iMo),e(je,_te),e(_te,dMo),e(je,cMo),g(zE,je,null),b(c,aBe,u),b(c,sd,u),e(sd,E7),e(E7,ute),g(WE,ute,null),e(sd,fMo),e(sd,bte),e(bte,mMo),b(c,nBe,u),b(c,Zo,u),g(QE,Zo,null),e(Zo,gMo),e(Zo,ld),e(ld,hMo),e(ld,vte),e(vte,pMo),e(ld,_Mo),e(ld,Tte),e(Tte,uMo),e(ld,bMo),e(Zo,vMo),e(Zo,HE),e(HE,TMo),e(HE,Fte),e(Fte,FMo),e(HE,CMo),e(Zo,MMo),e(Zo,Wr),g(UE,Wr,null),e(Wr,EMo),e(Wr,Cte),e(Cte,yMo),e(Wr,wMo),e(Wr,id),e(id,AMo),e(id,Mte),e(Mte,LMo),e(id,BMo),e(id,Ete),e(Ete,xMo),e(id,kMo),e(Wr,RMo),e(Wr,yte),e(yte,SMo),e(Wr,PMo),g(JE,Wr,null),e(Zo,$Mo),e(Zo,Ne),g(YE,Ne,null),e(Ne,IMo),e(Ne,wte),e(wte,DMo),e(Ne,jMo),e(Ne,za),e(za,NMo),e(za,Ate),e(Ate,qMo),e(za,GMo),e(za,Lte),e(Lte,OMo),e(za,XMo),e(za,Bte),e(Bte,VMo),e(za,zMo),e(Ne,WMo),e(Ne,G),e(G,y7),e(y7,xte),e(xte,QMo),e(y7,HMo),e(y7,BI),e(BI,UMo),e(y7,JMo),e(G,YMo),e(G,w7),e(w7,kte),e(kte,KMo),e(w7,ZMo),e(w7,xI),e(xI,eEo),e(w7,oEo),e(G,rEo),e(G,A7),e(A7,Rte),e(Rte,tEo),e(A7,aEo),e(A7,kI),e(kI,nEo),e(A7,sEo),e(G,lEo),e(G,L7),e(L7,Ste),e(Ste,iEo),e(L7,dEo),e(L7,RI),e(RI,cEo),e(L7,fEo),e(G,mEo),e(G,B7),e(B7,Pte),e(Pte,gEo),e(B7,hEo),e(B7,SI),e(SI,pEo),e(B7,_Eo),e(G,uEo),e(G,x7),e(x7,$te),e($te,bEo),e(x7,vEo),e(x7,PI),e(PI,TEo),e(x7,FEo),e(G,CEo),e(G,k7),e(k7,Ite),e(Ite,MEo),e(k7,EEo),e(k7,$I),e($I,yEo),e(k7,wEo),e(G,AEo),e(G,R7),e(R7,Dte),e(Dte,LEo),e(R7,BEo),e(R7,II),e(II,xEo),e(R7,kEo),e(G,REo),e(G,S7),e(S7,jte),e(jte,SEo),e(S7,PEo),e(S7,DI),e(DI,$Eo),e(S7,IEo),e(G,DEo),e(G,P7),e(P7,Nte),e(Nte,jEo),e(P7,NEo),e(P7,jI),e(jI,qEo),e(P7,GEo),e(G,OEo),e(G,$7),e($7,qte),e(qte,XEo),e($7,VEo),e($7,NI),e(NI,zEo),e($7,WEo),e(G,QEo),e(G,I7),e(I7,Gte),e(Gte,HEo),e(I7,UEo),e(I7,qI),e(qI,JEo),e(I7,YEo),e(G,KEo),e(G,D7),e(D7,Ote),e(Ote,ZEo),e(D7,e3o),e(D7,GI),e(GI,o3o),e(D7,r3o),e(G,t3o),e(G,j7),e(j7,Xte),e(Xte,a3o),e(j7,n3o),e(j7,OI),e(OI,s3o),e(j7,l3o),e(G,i3o),e(G,N7),e(N7,Vte),e(Vte,d3o),e(N7,c3o),e(N7,XI),e(XI,f3o),e(N7,m3o),e(G,g3o),e(G,q7),e(q7,zte),e(zte,h3o),e(q7,p3o),e(q7,VI),e(VI,_3o),e(q7,u3o),e(G,b3o),e(G,G7),e(G7,Wte),e(Wte,v3o),e(G7,T3o),e(G7,zI),e(zI,F3o),e(G7,C3o),e(G,M3o),e(G,O7),e(O7,Qte),e(Qte,E3o),e(O7,y3o),e(O7,WI),e(WI,w3o),e(O7,A3o),e(G,L3o),e(G,X7),e(X7,Hte),e(Hte,B3o),e(X7,x3o),e(X7,QI),e(QI,k3o),e(X7,R3o),e(G,S3o),e(G,V7),e(V7,Ute),e(Ute,P3o),e(V7,$3o),e(V7,HI),e(HI,I3o),e(V7,D3o),e(G,j3o),e(G,z7),e(z7,Jte),e(Jte,N3o),e(z7,q3o),e(z7,UI),e(UI,G3o),e(z7,O3o),e(G,X3o),e(G,W7),e(W7,Yte),e(Yte,V3o),e(W7,z3o),e(W7,JI),e(JI,W3o),e(W7,Q3o),e(G,H3o),e(G,Q7),e(Q7,Kte),e(Kte,U3o),e(Q7,J3o),e(Q7,YI),e(YI,Y3o),e(Q7,K3o),e(G,Z3o),e(G,H7),e(H7,Zte),e(Zte,eyo),e(H7,oyo),e(H7,KI),e(KI,ryo),e(H7,tyo),e(G,ayo),e(G,U7),e(U7,eae),e(eae,nyo),e(U7,syo),e(U7,ZI),e(ZI,lyo),e(U7,iyo),e(G,dyo),e(G,J7),e(J7,oae),e(oae,cyo),e(J7,fyo),e(J7,eD),e(eD,myo),e(J7,gyo),e(G,hyo),e(G,Y7),e(Y7,rae),e(rae,pyo),e(Y7,_yo),e(Y7,oD),e(oD,uyo),e(Y7,byo),e(G,vyo),e(G,K7),e(K7,tae),e(tae,Tyo),e(K7,Fyo),e(K7,rD),e(rD,Cyo),e(K7,Myo),e(Ne,Eyo),e(Ne,Z7),e(Z7,yyo),e(Z7,aae),e(aae,wyo),e(Z7,Ayo),e(Z7,nae),e(nae,Lyo),e(Ne,Byo),e(Ne,sae),e(sae,xyo),e(Ne,kyo),g(KE,Ne,null),b(c,sBe,u),b(c,dd,u),e(dd,eb),e(eb,lae),g(ZE,lae,null),e(dd,Ryo),e(dd,iae),e(iae,Syo),b(c,lBe,u),b(c,er,u),g(e3,er,null),e(er,Pyo),e(er,cd),e(cd,$yo),e(cd,dae),e(dae,Iyo),e(cd,Dyo),e(cd,cae),e(cae,jyo),e(cd,Nyo),e(er,qyo),e(er,o3),e(o3,Gyo),e(o3,fae),e(fae,Oyo),e(o3,Xyo),e(er,Vyo),e(er,Qr),g(r3,Qr,null),e(Qr,zyo),e(Qr,mae),e(mae,Wyo),e(Qr,Qyo),e(Qr,fd),e(fd,Hyo),e(fd,gae),e(gae,Uyo),e(fd,Jyo),e(fd,hae),e(hae,Yyo),e(fd,Kyo),e(Qr,Zyo),e(Qr,pae),e(pae,ewo),e(Qr,owo),g(t3,Qr,null),e(er,rwo),e(er,qe),g(a3,qe,null),e(qe,two),e(qe,_ae),e(_ae,awo),e(qe,nwo),e(qe,Wa),e(Wa,swo),e(Wa,uae),e(uae,lwo),e(Wa,iwo),e(Wa,bae),e(bae,dwo),e(Wa,cwo),e(Wa,vae),e(vae,fwo),e(Wa,mwo),e(qe,gwo),e(qe,na),e(na,ob),e(ob,Tae),e(Tae,hwo),e(ob,pwo),e(ob,tD),e(tD,_wo),e(ob,uwo),e(na,bwo),e(na,rb),e(rb,Fae),e(Fae,vwo),e(rb,Two),e(rb,aD),e(aD,Fwo),e(rb,Cwo),e(na,Mwo),e(na,tb),e(tb,Cae),e(Cae,Ewo),e(tb,ywo),e(tb,nD),e(nD,wwo),e(tb,Awo),e(na,Lwo),e(na,ab),e(ab,Mae),e(Mae,Bwo),e(ab,xwo),e(ab,sD),e(sD,kwo),e(ab,Rwo),e(na,Swo),e(na,nb),e(nb,Eae),e(Eae,Pwo),e(nb,$wo),e(nb,lD),e(lD,Iwo),e(nb,Dwo),e(qe,jwo),e(qe,sb),e(sb,Nwo),e(sb,yae),e(yae,qwo),e(sb,Gwo),e(sb,wae),e(wae,Owo),e(qe,Xwo),e(qe,Aae),e(Aae,Vwo),e(qe,zwo),g(n3,qe,null),b(c,iBe,u),b(c,md,u),e(md,lb),e(lb,Lae),g(s3,Lae,null),e(md,Wwo),e(md,Bae),e(Bae,Qwo),b(c,dBe,u),b(c,or,u),g(l3,or,null),e(or,Hwo),e(or,gd),e(gd,Uwo),e(gd,xae),e(xae,Jwo),e(gd,Ywo),e(gd,kae),e(kae,Kwo),e(gd,Zwo),e(or,e6o),e(or,i3),e(i3,o6o),e(i3,Rae),e(Rae,r6o),e(i3,t6o),e(or,a6o),e(or,Hr),g(d3,Hr,null),e(Hr,n6o),e(Hr,Sae),e(Sae,s6o),e(Hr,l6o),e(Hr,hd),e(hd,i6o),e(hd,Pae),e(Pae,d6o),e(hd,c6o),e(hd,$ae),e($ae,f6o),e(hd,m6o),e(Hr,g6o),e(Hr,Iae),e(Iae,h6o),e(Hr,p6o),g(c3,Hr,null),e(or,_6o),e(or,Ge),g(f3,Ge,null),e(Ge,u6o),e(Ge,Dae),e(Dae,b6o),e(Ge,v6o),e(Ge,Qa),e(Qa,T6o),e(Qa,jae),e(jae,F6o),e(Qa,C6o),e(Qa,Nae),e(Nae,M6o),e(Qa,E6o),e(Qa,qae),e(qae,y6o),e(Qa,w6o),e(Ge,A6o),e(Ge,N),e(N,ib),e(ib,Gae),e(Gae,L6o),e(ib,B6o),e(ib,iD),e(iD,x6o),e(ib,k6o),e(N,R6o),e(N,db),e(db,Oae),e(Oae,S6o),e(db,P6o),e(db,dD),e(dD,$6o),e(db,I6o),e(N,D6o),e(N,cb),e(cb,Xae),e(Xae,j6o),e(cb,N6o),e(cb,cD),e(cD,q6o),e(cb,G6o),e(N,O6o),e(N,fb),e(fb,Vae),e(Vae,X6o),e(fb,V6o),e(fb,fD),e(fD,z6o),e(fb,W6o),e(N,Q6o),e(N,mb),e(mb,zae),e(zae,H6o),e(mb,U6o),e(mb,mD),e(mD,J6o),e(mb,Y6o),e(N,K6o),e(N,gb),e(gb,Wae),e(Wae,Z6o),e(gb,eAo),e(gb,gD),e(gD,oAo),e(gb,rAo),e(N,tAo),e(N,hb),e(hb,Qae),e(Qae,aAo),e(hb,nAo),e(hb,hD),e(hD,sAo),e(hb,lAo),e(N,iAo),e(N,pb),e(pb,Hae),e(Hae,dAo),e(pb,cAo),e(pb,pD),e(pD,fAo),e(pb,mAo),e(N,gAo),e(N,_b),e(_b,Uae),e(Uae,hAo),e(_b,pAo),e(_b,_D),e(_D,_Ao),e(_b,uAo),e(N,bAo),e(N,ub),e(ub,Jae),e(Jae,vAo),e(ub,TAo),e(ub,uD),e(uD,FAo),e(ub,CAo),e(N,MAo),e(N,bb),e(bb,Yae),e(Yae,EAo),e(bb,yAo),e(bb,bD),e(bD,wAo),e(bb,AAo),e(N,LAo),e(N,vb),e(vb,Kae),e(Kae,BAo),e(vb,xAo),e(vb,vD),e(vD,kAo),e(vb,RAo),e(N,SAo),e(N,Tb),e(Tb,Zae),e(Zae,PAo),e(Tb,$Ao),e(Tb,TD),e(TD,IAo),e(Tb,DAo),e(N,jAo),e(N,Fb),e(Fb,ene),e(ene,NAo),e(Fb,qAo),e(Fb,FD),e(FD,GAo),e(Fb,OAo),e(N,XAo),e(N,Cb),e(Cb,one),e(one,VAo),e(Cb,zAo),e(Cb,CD),e(CD,WAo),e(Cb,QAo),e(N,HAo),e(N,Mb),e(Mb,rne),e(rne,UAo),e(Mb,JAo),e(Mb,MD),e(MD,YAo),e(Mb,KAo),e(N,ZAo),e(N,Eb),e(Eb,tne),e(tne,eLo),e(Eb,oLo),e(Eb,ED),e(ED,rLo),e(Eb,tLo),e(N,aLo),e(N,yb),e(yb,ane),e(ane,nLo),e(yb,sLo),e(yb,yD),e(yD,lLo),e(yb,iLo),e(N,dLo),e(N,wb),e(wb,nne),e(nne,cLo),e(wb,fLo),e(wb,wD),e(wD,mLo),e(wb,gLo),e(N,hLo),e(N,Ab),e(Ab,sne),e(sne,pLo),e(Ab,_Lo),e(Ab,AD),e(AD,uLo),e(Ab,bLo),e(N,vLo),e(N,Lb),e(Lb,lne),e(lne,TLo),e(Lb,FLo),e(Lb,LD),e(LD,CLo),e(Lb,MLo),e(N,ELo),e(N,Bb),e(Bb,ine),e(ine,yLo),e(Bb,wLo),e(Bb,BD),e(BD,ALo),e(Bb,LLo),e(N,BLo),e(N,xb),e(xb,dne),e(dne,xLo),e(xb,kLo),e(xb,xD),e(xD,RLo),e(xb,SLo),e(N,PLo),e(N,kb),e(kb,cne),e(cne,$Lo),e(kb,ILo),e(kb,kD),e(kD,DLo),e(kb,jLo),e(N,NLo),e(N,Rb),e(Rb,fne),e(fne,qLo),e(Rb,GLo),e(Rb,RD),e(RD,OLo),e(Rb,XLo),e(N,VLo),e(N,Sb),e(Sb,mne),e(mne,zLo),e(Sb,WLo),e(Sb,SD),e(SD,QLo),e(Sb,HLo),e(N,ULo),e(N,Pb),e(Pb,gne),e(gne,JLo),e(Pb,YLo),e(Pb,PD),e(PD,KLo),e(Pb,ZLo),e(N,e8o),e(N,$b),e($b,hne),e(hne,o8o),e($b,r8o),e($b,$D),e($D,t8o),e($b,a8o),e(N,n8o),e(N,Ib),e(Ib,pne),e(pne,s8o),e(Ib,l8o),e(Ib,ID),e(ID,i8o),e(Ib,d8o),e(N,c8o),e(N,Db),e(Db,_ne),e(_ne,f8o),e(Db,m8o),e(Db,DD),e(DD,g8o),e(Db,h8o),e(N,p8o),e(N,jb),e(jb,une),e(une,_8o),e(jb,u8o),e(jb,jD),e(jD,b8o),e(jb,v8o),e(N,T8o),e(N,Nb),e(Nb,bne),e(bne,F8o),e(Nb,C8o),e(Nb,ND),e(ND,M8o),e(Nb,E8o),e(N,y8o),e(N,qb),e(qb,vne),e(vne,w8o),e(qb,A8o),e(qb,qD),e(qD,L8o),e(qb,B8o),e(Ge,x8o),e(Ge,Gb),e(Gb,k8o),e(Gb,Tne),e(Tne,R8o),e(Gb,S8o),e(Gb,Fne),e(Fne,P8o),e(Ge,$8o),e(Ge,Cne),e(Cne,I8o),e(Ge,D8o),g(m3,Ge,null),b(c,cBe,u),b(c,pd,u),e(pd,Ob),e(Ob,Mne),g(g3,Mne,null),e(pd,j8o),e(pd,Ene),e(Ene,N8o),b(c,fBe,u),b(c,rr,u),g(h3,rr,null),e(rr,q8o),e(rr,_d),e(_d,G8o),e(_d,yne),e(yne,O8o),e(_d,X8o),e(_d,wne),e(wne,V8o),e(_d,z8o),e(rr,W8o),e(rr,p3),e(p3,Q8o),e(p3,Ane),e(Ane,H8o),e(p3,U8o),e(rr,J8o),e(rr,Ur),g(_3,Ur,null),e(Ur,Y8o),e(Ur,Lne),e(Lne,K8o),e(Ur,Z8o),e(Ur,ud),e(ud,e9o),e(ud,Bne),e(Bne,o9o),e(ud,r9o),e(ud,xne),e(xne,t9o),e(ud,a9o),e(Ur,n9o),e(Ur,kne),e(kne,s9o),e(Ur,l9o),g(u3,Ur,null),e(rr,i9o),e(rr,Oe),g(b3,Oe,null),e(Oe,d9o),e(Oe,Rne),e(Rne,c9o),e(Oe,f9o),e(Oe,Ha),e(Ha,m9o),e(Ha,Sne),e(Sne,g9o),e(Ha,h9o),e(Ha,Pne),e(Pne,p9o),e(Ha,_9o),e(Ha,$ne),e($ne,u9o),e(Ha,b9o),e(Oe,v9o),e(Oe,R),e(R,Xb),e(Xb,Ine),e(Ine,T9o),e(Xb,F9o),e(Xb,GD),e(GD,C9o),e(Xb,M9o),e(R,E9o),e(R,Vb),e(Vb,Dne),e(Dne,y9o),e(Vb,w9o),e(Vb,OD),e(OD,A9o),e(Vb,L9o),e(R,B9o),e(R,zb),e(zb,jne),e(jne,x9o),e(zb,k9o),e(zb,XD),e(XD,R9o),e(zb,S9o),e(R,P9o),e(R,Wb),e(Wb,Nne),e(Nne,$9o),e(Wb,I9o),e(Wb,VD),e(VD,D9o),e(Wb,j9o),e(R,N9o),e(R,Qb),e(Qb,qne),e(qne,q9o),e(Qb,G9o),e(Qb,zD),e(zD,O9o),e(Qb,X9o),e(R,V9o),e(R,Hb),e(Hb,Gne),e(Gne,z9o),e(Hb,W9o),e(Hb,WD),e(WD,Q9o),e(Hb,H9o),e(R,U9o),e(R,Ub),e(Ub,One),e(One,J9o),e(Ub,Y9o),e(Ub,QD),e(QD,K9o),e(Ub,Z9o),e(R,eBo),e(R,Jb),e(Jb,Xne),e(Xne,oBo),e(Jb,rBo),e(Jb,HD),e(HD,tBo),e(Jb,aBo),e(R,nBo),e(R,Yb),e(Yb,Vne),e(Vne,sBo),e(Yb,lBo),e(Yb,UD),e(UD,iBo),e(Yb,dBo),e(R,cBo),e(R,Kb),e(Kb,zne),e(zne,fBo),e(Kb,mBo),e(Kb,JD),e(JD,gBo),e(Kb,hBo),e(R,pBo),e(R,Zb),e(Zb,Wne),e(Wne,_Bo),e(Zb,uBo),e(Zb,YD),e(YD,bBo),e(Zb,vBo),e(R,TBo),e(R,e5),e(e5,Qne),e(Qne,FBo),e(e5,CBo),e(e5,KD),e(KD,MBo),e(e5,EBo),e(R,yBo),e(R,o5),e(o5,Hne),e(Hne,wBo),e(o5,ABo),e(o5,ZD),e(ZD,LBo),e(o5,BBo),e(R,xBo),e(R,r5),e(r5,Une),e(Une,kBo),e(r5,RBo),e(r5,ej),e(ej,SBo),e(r5,PBo),e(R,$Bo),e(R,t5),e(t5,Jne),e(Jne,IBo),e(t5,DBo),e(t5,oj),e(oj,jBo),e(t5,NBo),e(R,qBo),e(R,a5),e(a5,Yne),e(Yne,GBo),e(a5,OBo),e(a5,rj),e(rj,XBo),e(a5,VBo),e(R,zBo),e(R,n5),e(n5,Kne),e(Kne,WBo),e(n5,QBo),e(n5,tj),e(tj,HBo),e(n5,UBo),e(R,JBo),e(R,s5),e(s5,Zne),e(Zne,YBo),e(s5,KBo),e(s5,aj),e(aj,ZBo),e(s5,exo),e(R,oxo),e(R,l5),e(l5,ese),e(ese,rxo),e(l5,txo),e(l5,nj),e(nj,axo),e(l5,nxo),e(R,sxo),e(R,i5),e(i5,ose),e(ose,lxo),e(i5,ixo),e(i5,sj),e(sj,dxo),e(i5,cxo),e(R,fxo),e(R,d5),e(d5,rse),e(rse,mxo),e(d5,gxo),e(d5,lj),e(lj,hxo),e(d5,pxo),e(R,_xo),e(R,c5),e(c5,tse),e(tse,uxo),e(c5,bxo),e(c5,ij),e(ij,vxo),e(c5,Txo),e(R,Fxo),e(R,f5),e(f5,ase),e(ase,Cxo),e(f5,Mxo),e(f5,dj),e(dj,Exo),e(f5,yxo),e(R,wxo),e(R,m5),e(m5,nse),e(nse,Axo),e(m5,Lxo),e(m5,cj),e(cj,Bxo),e(m5,xxo),e(R,kxo),e(R,g5),e(g5,sse),e(sse,Rxo),e(g5,Sxo),e(g5,fj),e(fj,Pxo),e(g5,$xo),e(R,Ixo),e(R,h5),e(h5,lse),e(lse,Dxo),e(h5,jxo),e(h5,mj),e(mj,Nxo),e(h5,qxo),e(R,Gxo),e(R,p5),e(p5,ise),e(ise,Oxo),e(p5,Xxo),e(p5,gj),e(gj,Vxo),e(p5,zxo),e(R,Wxo),e(R,_5),e(_5,dse),e(dse,Qxo),e(_5,Hxo),e(_5,hj),e(hj,Uxo),e(_5,Jxo),e(R,Yxo),e(R,u5),e(u5,cse),e(cse,Kxo),e(u5,Zxo),e(u5,pj),e(pj,eko),e(u5,oko),e(R,rko),e(R,b5),e(b5,fse),e(fse,tko),e(b5,ako),e(b5,_j),e(_j,nko),e(b5,sko),e(R,lko),e(R,v5),e(v5,mse),e(mse,iko),e(v5,dko),e(v5,uj),e(uj,cko),e(v5,fko),e(R,mko),e(R,T5),e(T5,gse),e(gse,gko),e(T5,hko),e(T5,bj),e(bj,pko),e(T5,_ko),e(R,uko),e(R,F5),e(F5,hse),e(hse,bko),e(F5,vko),e(F5,vj),e(vj,Tko),e(F5,Fko),e(R,Cko),e(R,C5),e(C5,pse),e(pse,Mko),e(C5,Eko),e(C5,Tj),e(Tj,yko),e(C5,wko),e(R,Ako),e(R,M5),e(M5,_se),e(_se,Lko),e(M5,Bko),e(M5,Fj),e(Fj,xko),e(M5,kko),e(R,Rko),e(R,E5),e(E5,use),e(use,Sko),e(E5,Pko),e(E5,Cj),e(Cj,$ko),e(E5,Iko),e(R,Dko),e(R,y5),e(y5,bse),e(bse,jko),e(y5,Nko),e(y5,Mj),e(Mj,qko),e(y5,Gko),e(R,Oko),e(R,w5),e(w5,vse),e(vse,Xko),e(w5,Vko),e(w5,Ej),e(Ej,zko),e(w5,Wko),e(R,Qko),e(R,A5),e(A5,Tse),e(Tse,Hko),e(A5,Uko),e(A5,yj),e(yj,Jko),e(A5,Yko),e(Oe,Kko),e(Oe,L5),e(L5,Zko),e(L5,Fse),e(Fse,eRo),e(L5,oRo),e(L5,Cse),e(Cse,rRo),e(Oe,tRo),e(Oe,Mse),e(Mse,aRo),e(Oe,nRo),g(v3,Oe,null),b(c,mBe,u),b(c,bd,u),e(bd,B5),e(B5,Ese),g(T3,Ese,null),e(bd,sRo),e(bd,yse),e(yse,lRo),b(c,gBe,u),b(c,tr,u),g(F3,tr,null),e(tr,iRo),e(tr,vd),e(vd,dRo),e(vd,wse),e(wse,cRo),e(vd,fRo),e(vd,Ase),e(Ase,mRo),e(vd,gRo),e(tr,hRo),e(tr,C3),e(C3,pRo),e(C3,Lse),e(Lse,_Ro),e(C3,uRo),e(tr,bRo),e(tr,Jr),g(M3,Jr,null),e(Jr,vRo),e(Jr,Bse),e(Bse,TRo),e(Jr,FRo),e(Jr,Td),e(Td,CRo),e(Td,xse),e(xse,MRo),e(Td,ERo),e(Td,kse),e(kse,yRo),e(Td,wRo),e(Jr,ARo),e(Jr,Rse),e(Rse,LRo),e(Jr,BRo),g(E3,Jr,null),e(tr,xRo),e(tr,Xe),g(y3,Xe,null),e(Xe,kRo),e(Xe,Sse),e(Sse,RRo),e(Xe,SRo),e(Xe,Ua),e(Ua,PRo),e(Ua,Pse),e(Pse,$Ro),e(Ua,IRo),e(Ua,$se),e($se,DRo),e(Ua,jRo),e(Ua,Ise),e(Ise,NRo),e(Ua,qRo),e(Xe,GRo),e(Xe,Dse),e(Dse,x5),e(x5,jse),e(jse,ORo),e(x5,XRo),e(x5,wj),e(wj,VRo),e(x5,zRo),e(Xe,WRo),e(Xe,k5),e(k5,QRo),e(k5,Nse),e(Nse,HRo),e(k5,URo),e(k5,qse),e(qse,JRo),e(Xe,YRo),e(Xe,Gse),e(Gse,KRo),e(Xe,ZRo),g(w3,Xe,null),b(c,hBe,u),b(c,Fd,u),e(Fd,R5),e(R5,Ose),g(A3,Ose,null),e(Fd,eSo),e(Fd,Xse),e(Xse,oSo),b(c,pBe,u),b(c,ar,u),g(L3,ar,null),e(ar,rSo),e(ar,Cd),e(Cd,tSo),e(Cd,Vse),e(Vse,aSo),e(Cd,nSo),e(Cd,zse),e(zse,sSo),e(Cd,lSo),e(ar,iSo),e(ar,B3),e(B3,dSo),e(B3,Wse),e(Wse,cSo),e(B3,fSo),e(ar,mSo),e(ar,Yr),g(x3,Yr,null),e(Yr,gSo),e(Yr,Qse),e(Qse,hSo),e(Yr,pSo),e(Yr,Md),e(Md,_So),e(Md,Hse),e(Hse,uSo),e(Md,bSo),e(Md,Use),e(Use,vSo),e(Md,TSo),e(Yr,FSo),e(Yr,Jse),e(Jse,CSo),e(Yr,MSo),g(k3,Yr,null),e(ar,ESo),e(ar,Ve),g(R3,Ve,null),e(Ve,ySo),e(Ve,Yse),e(Yse,wSo),e(Ve,ASo),e(Ve,Ja),e(Ja,LSo),e(Ja,Kse),e(Kse,BSo),e(Ja,xSo),e(Ja,Zse),e(Zse,kSo),e(Ja,RSo),e(Ja,ele),e(ele,SSo),e(Ja,PSo),e(Ve,$So),e(Ve,he),e(he,S5),e(S5,ole),e(ole,ISo),e(S5,DSo),e(S5,Aj),e(Aj,jSo),e(S5,NSo),e(he,qSo),e(he,P5),e(P5,rle),e(rle,GSo),e(P5,OSo),e(P5,Lj),e(Lj,XSo),e(P5,VSo),e(he,zSo),e(he,Ps),e(Ps,tle),e(tle,WSo),e(Ps,QSo),e(Ps,Bj),e(Bj,HSo),e(Ps,USo),e(Ps,xj),e(xj,JSo),e(Ps,YSo),e(he,KSo),e(he,$5),e($5,ale),e(ale,ZSo),e($5,ePo),e($5,kj),e(kj,oPo),e($5,rPo),e(he,tPo),e(he,la),e(la,nle),e(nle,aPo),e(la,nPo),e(la,Rj),e(Rj,sPo),e(la,lPo),e(la,Sj),e(Sj,iPo),e(la,dPo),e(la,Pj),e(Pj,cPo),e(la,fPo),e(he,mPo),e(he,I5),e(I5,sle),e(sle,gPo),e(I5,hPo),e(I5,$j),e($j,pPo),e(I5,_Po),e(he,uPo),e(he,D5),e(D5,lle),e(lle,bPo),e(D5,vPo),e(D5,Ij),e(Ij,TPo),e(D5,FPo),e(he,CPo),e(he,j5),e(j5,ile),e(ile,MPo),e(j5,EPo),e(j5,Dj),e(Dj,yPo),e(j5,wPo),e(he,APo),e(he,N5),e(N5,dle),e(dle,LPo),e(N5,BPo),e(N5,jj),e(jj,xPo),e(N5,kPo),e(he,RPo),e(he,q5),e(q5,cle),e(cle,SPo),e(q5,PPo),e(q5,Nj),e(Nj,$Po),e(q5,IPo),e(Ve,DPo),e(Ve,G5),e(G5,jPo),e(G5,fle),e(fle,NPo),e(G5,qPo),e(G5,mle),e(mle,GPo),e(Ve,OPo),e(Ve,gle),e(gle,XPo),e(Ve,VPo),g(S3,Ve,null),b(c,_Be,u),b(c,Ed,u),e(Ed,O5),e(O5,hle),g(P3,hle,null),e(Ed,zPo),e(Ed,ple),e(ple,WPo),b(c,uBe,u),b(c,nr,u),g($3,nr,null),e(nr,QPo),e(nr,yd),e(yd,HPo),e(yd,_le),e(_le,UPo),e(yd,JPo),e(yd,ule),e(ule,YPo),e(yd,KPo),e(nr,ZPo),e(nr,I3),e(I3,e$o),e(I3,ble),e(ble,o$o),e(I3,r$o),e(nr,t$o),e(nr,Kr),g(D3,Kr,null),e(Kr,a$o),e(Kr,vle),e(vle,n$o),e(Kr,s$o),e(Kr,wd),e(wd,l$o),e(wd,Tle),e(Tle,i$o),e(wd,d$o),e(wd,Fle),e(Fle,c$o),e(wd,f$o),e(Kr,m$o),e(Kr,Cle),e(Cle,g$o),e(Kr,h$o),g(j3,Kr,null),e(nr,p$o),e(nr,ze),g(N3,ze,null),e(ze,_$o),e(ze,Mle),e(Mle,u$o),e(ze,b$o),e(ze,Ya),e(Ya,v$o),e(Ya,Ele),e(Ele,T$o),e(Ya,F$o),e(Ya,yle),e(yle,C$o),e(Ya,M$o),e(Ya,wle),e(wle,E$o),e(Ya,y$o),e(ze,w$o),e(ze,Ale),e(Ale,X5),e(X5,Lle),e(Lle,A$o),e(X5,L$o),e(X5,qj),e(qj,B$o),e(X5,x$o),e(ze,k$o),e(ze,V5),e(V5,R$o),e(V5,Ble),e(Ble,S$o),e(V5,P$o),e(V5,xle),e(xle,$$o),e(ze,I$o),e(ze,kle),e(kle,D$o),e(ze,j$o),g(q3,ze,null),b(c,bBe,u),b(c,Ad,u),e(Ad,z5),e(z5,Rle),g(G3,Rle,null),e(Ad,N$o),e(Ad,Sle),e(Sle,q$o),b(c,vBe,u),b(c,sr,u),g(O3,sr,null),e(sr,G$o),e(sr,Ld),e(Ld,O$o),e(Ld,Ple),e(Ple,X$o),e(Ld,V$o),e(Ld,$le),e($le,z$o),e(Ld,W$o),e(sr,Q$o),e(sr,X3),e(X3,H$o),e(X3,Ile),e(Ile,U$o),e(X3,J$o),e(sr,Y$o),e(sr,Zr),g(V3,Zr,null),e(Zr,K$o),e(Zr,Dle),e(Dle,Z$o),e(Zr,eIo),e(Zr,Bd),e(Bd,oIo),e(Bd,jle),e(jle,rIo),e(Bd,tIo),e(Bd,Nle),e(Nle,aIo),e(Bd,nIo),e(Zr,sIo),e(Zr,qle),e(qle,lIo),e(Zr,iIo),g(z3,Zr,null),e(sr,dIo),e(sr,We),g(W3,We,null),e(We,cIo),e(We,Gle),e(Gle,fIo),e(We,mIo),e(We,Ka),e(Ka,gIo),e(Ka,Ole),e(Ole,hIo),e(Ka,pIo),e(Ka,Xle),e(Xle,_Io),e(Ka,uIo),e(Ka,Vle),e(Vle,bIo),e(Ka,vIo),e(We,TIo),e(We,Le),e(Le,W5),e(W5,zle),e(zle,FIo),e(W5,CIo),e(W5,Gj),e(Gj,MIo),e(W5,EIo),e(Le,yIo),e(Le,Q5),e(Q5,Wle),e(Wle,wIo),e(Q5,AIo),e(Q5,Oj),e(Oj,LIo),e(Q5,BIo),e(Le,xIo),e(Le,H5),e(H5,Qle),e(Qle,kIo),e(H5,RIo),e(H5,Xj),e(Xj,SIo),e(H5,PIo),e(Le,$Io),e(Le,U5),e(U5,Hle),e(Hle,IIo),e(U5,DIo),e(U5,Vj),e(Vj,jIo),e(U5,NIo),e(Le,qIo),e(Le,J5),e(J5,Ule),e(Ule,GIo),e(J5,OIo),e(J5,zj),e(zj,XIo),e(J5,VIo),e(Le,zIo),e(Le,Y5),e(Y5,Jle),e(Jle,WIo),e(Y5,QIo),e(Y5,Wj),e(Wj,HIo),e(Y5,UIo),e(Le,JIo),e(Le,K5),e(K5,Yle),e(Yle,YIo),e(K5,KIo),e(K5,Qj),e(Qj,ZIo),e(K5,eDo),e(Le,oDo),e(Le,Z5),e(Z5,Kle),e(Kle,rDo),e(Z5,tDo),e(Z5,Hj),e(Hj,aDo),e(Z5,nDo),e(We,sDo),e(We,e2),e(e2,lDo),e(e2,Zle),e(Zle,iDo),e(e2,dDo),e(e2,eie),e(eie,cDo),e(We,fDo),e(We,oie),e(oie,mDo),e(We,gDo),g(Q3,We,null),b(c,TBe,u),b(c,xd,u),e(xd,o2),e(o2,rie),g(H3,rie,null),e(xd,hDo),e(xd,tie),e(tie,pDo),b(c,FBe,u),b(c,lr,u),g(U3,lr,null),e(lr,_Do),e(lr,kd),e(kd,uDo),e(kd,aie),e(aie,bDo),e(kd,vDo),e(kd,nie),e(nie,TDo),e(kd,FDo),e(lr,CDo),e(lr,J3),e(J3,MDo),e(J3,sie),e(sie,EDo),e(J3,yDo),e(lr,wDo),e(lr,et),g(Y3,et,null),e(et,ADo),e(et,lie),e(lie,LDo),e(et,BDo),e(et,Rd),e(Rd,xDo),e(Rd,iie),e(iie,kDo),e(Rd,RDo),e(Rd,die),e(die,SDo),e(Rd,PDo),e(et,$Do),e(et,cie),e(cie,IDo),e(et,DDo),g(K3,et,null),e(lr,jDo),e(lr,Qe),g(Z3,Qe,null),e(Qe,NDo),e(Qe,fie),e(fie,qDo),e(Qe,GDo),e(Qe,Za),e(Za,ODo),e(Za,mie),e(mie,XDo),e(Za,VDo),e(Za,gie),e(gie,zDo),e(Za,WDo),e(Za,hie),e(hie,QDo),e(Za,HDo),e(Qe,UDo),e(Qe,en),e(en,r2),e(r2,pie),e(pie,JDo),e(r2,YDo),e(r2,Uj),e(Uj,KDo),e(r2,ZDo),e(en,ejo),e(en,t2),e(t2,_ie),e(_ie,ojo),e(t2,rjo),e(t2,Jj),e(Jj,tjo),e(t2,ajo),e(en,njo),e(en,a2),e(a2,uie),e(uie,sjo),e(a2,ljo),e(a2,Yj),e(Yj,ijo),e(a2,djo),e(en,cjo),e(en,n2),e(n2,bie),e(bie,fjo),e(n2,mjo),e(n2,Kj),e(Kj,gjo),e(n2,hjo),e(Qe,pjo),e(Qe,s2),e(s2,_jo),e(s2,vie),e(vie,ujo),e(s2,bjo),e(s2,Tie),e(Tie,vjo),e(Qe,Tjo),e(Qe,Fie),e(Fie,Fjo),e(Qe,Cjo),g(ey,Qe,null),b(c,CBe,u),b(c,Sd,u),e(Sd,l2),e(l2,Cie),g(oy,Cie,null),e(Sd,Mjo),e(Sd,Mie),e(Mie,Ejo),b(c,MBe,u),b(c,ir,u),g(ry,ir,null),e(ir,yjo),e(ir,Pd),e(Pd,wjo),e(Pd,Eie),e(Eie,Ajo),e(Pd,Ljo),e(Pd,yie),e(yie,Bjo),e(Pd,xjo),e(ir,kjo),e(ir,ty),e(ty,Rjo),e(ty,wie),e(wie,Sjo),e(ty,Pjo),e(ir,$jo),e(ir,ot),g(ay,ot,null),e(ot,Ijo),e(ot,Aie),e(Aie,Djo),e(ot,jjo),e(ot,$d),e($d,Njo),e($d,Lie),e(Lie,qjo),e($d,Gjo),e($d,Bie),e(Bie,Ojo),e($d,Xjo),e(ot,Vjo),e(ot,xie),e(xie,zjo),e(ot,Wjo),g(ny,ot,null),e(ir,Qjo),e(ir,He),g(sy,He,null),e(He,Hjo),e(He,kie),e(kie,Ujo),e(He,Jjo),e(He,on),e(on,Yjo),e(on,Rie),e(Rie,Kjo),e(on,Zjo),e(on,Sie),e(Sie,eNo),e(on,oNo),e(on,Pie),e(Pie,rNo),e(on,tNo),e(He,aNo),e(He,Be),e(Be,i2),e(i2,$ie),e($ie,nNo),e(i2,sNo),e(i2,Zj),e(Zj,lNo),e(i2,iNo),e(Be,dNo),e(Be,d2),e(d2,Iie),e(Iie,cNo),e(d2,fNo),e(d2,eN),e(eN,mNo),e(d2,gNo),e(Be,hNo),e(Be,c2),e(c2,Die),e(Die,pNo),e(c2,_No),e(c2,oN),e(oN,uNo),e(c2,bNo),e(Be,vNo),e(Be,f2),e(f2,jie),e(jie,TNo),e(f2,FNo),e(f2,rN),e(rN,CNo),e(f2,MNo),e(Be,ENo),e(Be,m2),e(m2,Nie),e(Nie,yNo),e(m2,wNo),e(m2,tN),e(tN,ANo),e(m2,LNo),e(Be,BNo),e(Be,g2),e(g2,qie),e(qie,xNo),e(g2,kNo),e(g2,aN),e(aN,RNo),e(g2,SNo),e(Be,PNo),e(Be,h2),e(h2,Gie),e(Gie,$No),e(h2,INo),e(h2,nN),e(nN,DNo),e(h2,jNo),e(Be,NNo),e(Be,p2),e(p2,Oie),e(Oie,qNo),e(p2,GNo),e(p2,sN),e(sN,ONo),e(p2,XNo),e(He,VNo),e(He,_2),e(_2,zNo),e(_2,Xie),e(Xie,WNo),e(_2,QNo),e(_2,Vie),e(Vie,HNo),e(He,UNo),e(He,zie),e(zie,JNo),e(He,YNo),g(ly,He,null),b(c,EBe,u),b(c,Id,u),e(Id,u2),e(u2,Wie),g(iy,Wie,null),e(Id,KNo),e(Id,Qie),e(Qie,ZNo),b(c,yBe,u),b(c,dr,u),g(dy,dr,null),e(dr,eqo),e(dr,Dd),e(Dd,oqo),e(Dd,Hie),e(Hie,rqo),e(Dd,tqo),e(Dd,Uie),e(Uie,aqo),e(Dd,nqo),e(dr,sqo),e(dr,cy),e(cy,lqo),e(cy,Jie),e(Jie,iqo),e(cy,dqo),e(dr,cqo),e(dr,rt),g(fy,rt,null),e(rt,fqo),e(rt,Yie),e(Yie,mqo),e(rt,gqo),e(rt,jd),e(jd,hqo),e(jd,Kie),e(Kie,pqo),e(jd,_qo),e(jd,Zie),e(Zie,uqo),e(jd,bqo),e(rt,vqo),e(rt,ede),e(ede,Tqo),e(rt,Fqo),g(my,rt,null),e(dr,Cqo),e(dr,Ue),g(gy,Ue,null),e(Ue,Mqo),e(Ue,ode),e(ode,Eqo),e(Ue,yqo),e(Ue,rn),e(rn,wqo),e(rn,rde),e(rde,Aqo),e(rn,Lqo),e(rn,tde),e(tde,Bqo),e(rn,xqo),e(rn,ade),e(ade,kqo),e(rn,Rqo),e(Ue,Sqo),e(Ue,hy),e(hy,b2),e(b2,nde),e(nde,Pqo),e(b2,$qo),e(b2,lN),e(lN,Iqo),e(b2,Dqo),e(hy,jqo),e(hy,v2),e(v2,sde),e(sde,Nqo),e(v2,qqo),e(v2,iN),e(iN,Gqo),e(v2,Oqo),e(Ue,Xqo),e(Ue,T2),e(T2,Vqo),e(T2,lde),e(lde,zqo),e(T2,Wqo),e(T2,ide),e(ide,Qqo),e(Ue,Hqo),e(Ue,dde),e(dde,Uqo),e(Ue,Jqo),g(py,Ue,null),b(c,wBe,u),b(c,Nd,u),e(Nd,F2),e(F2,cde),g(_y,cde,null),e(Nd,Yqo),e(Nd,fde),e(fde,Kqo),b(c,ABe,u),b(c,cr,u),g(uy,cr,null),e(cr,Zqo),e(cr,qd),e(qd,eGo),e(qd,mde),e(mde,oGo),e(qd,rGo),e(qd,gde),e(gde,tGo),e(qd,aGo),e(cr,nGo),e(cr,by),e(by,sGo),e(by,hde),e(hde,lGo),e(by,iGo),e(cr,dGo),e(cr,tt),g(vy,tt,null),e(tt,cGo),e(tt,pde),e(pde,fGo),e(tt,mGo),e(tt,Gd),e(Gd,gGo),e(Gd,_de),e(_de,hGo),e(Gd,pGo),e(Gd,ude),e(ude,_Go),e(Gd,uGo),e(tt,bGo),e(tt,bde),e(bde,vGo),e(tt,TGo),g(Ty,tt,null),e(cr,FGo),e(cr,Je),g(Fy,Je,null),e(Je,CGo),e(Je,vde),e(vde,MGo),e(Je,EGo),e(Je,tn),e(tn,yGo),e(tn,Tde),e(Tde,wGo),e(tn,AGo),e(tn,Fde),e(Fde,LGo),e(tn,BGo),e(tn,Cde),e(Cde,xGo),e(tn,kGo),e(Je,RGo),e(Je,an),e(an,C2),e(C2,Mde),e(Mde,SGo),e(C2,PGo),e(C2,dN),e(dN,$Go),e(C2,IGo),e(an,DGo),e(an,M2),e(M2,Ede),e(Ede,jGo),e(M2,NGo),e(M2,cN),e(cN,qGo),e(M2,GGo),e(an,OGo),e(an,E2),e(E2,yde),e(yde,XGo),e(E2,VGo),e(E2,fN),e(fN,zGo),e(E2,WGo),e(an,QGo),e(an,y2),e(y2,wde),e(wde,HGo),e(y2,UGo),e(y2,mN),e(mN,JGo),e(y2,YGo),e(Je,KGo),e(Je,w2),e(w2,ZGo),e(w2,Ade),e(Ade,eOo),e(w2,oOo),e(w2,Lde),e(Lde,rOo),e(Je,tOo),e(Je,Bde),e(Bde,aOo),e(Je,nOo),g(Cy,Je,null),b(c,LBe,u),b(c,Od,u),e(Od,A2),e(A2,xde),g(My,xde,null),e(Od,sOo),e(Od,kde),e(kde,lOo),b(c,BBe,u),b(c,fr,u),g(Ey,fr,null),e(fr,iOo),e(fr,Xd),e(Xd,dOo),e(Xd,Rde),e(Rde,cOo),e(Xd,fOo),e(Xd,Sde),e(Sde,mOo),e(Xd,gOo),e(fr,hOo),e(fr,yy),e(yy,pOo),e(yy,Pde),e(Pde,_Oo),e(yy,uOo),e(fr,bOo),e(fr,at),g(wy,at,null),e(at,vOo),e(at,$de),e($de,TOo),e(at,FOo),e(at,Vd),e(Vd,COo),e(Vd,Ide),e(Ide,MOo),e(Vd,EOo),e(Vd,Dde),e(Dde,yOo),e(Vd,wOo),e(at,AOo),e(at,jde),e(jde,LOo),e(at,BOo),g(Ay,at,null),e(fr,xOo),e(fr,Ye),g(Ly,Ye,null),e(Ye,kOo),e(Ye,Nde),e(Nde,ROo),e(Ye,SOo),e(Ye,nn),e(nn,POo),e(nn,qde),e(qde,$Oo),e(nn,IOo),e(nn,Gde),e(Gde,DOo),e(nn,jOo),e(nn,Ode),e(Ode,NOo),e(nn,qOo),e(Ye,GOo),e(Ye,zd),e(zd,L2),e(L2,Xde),e(Xde,OOo),e(L2,XOo),e(L2,gN),e(gN,VOo),e(L2,zOo),e(zd,WOo),e(zd,B2),e(B2,Vde),e(Vde,QOo),e(B2,HOo),e(B2,hN),e(hN,UOo),e(B2,JOo),e(zd,YOo),e(zd,x2),e(x2,zde),e(zde,KOo),e(x2,ZOo),e(x2,pN),e(pN,eXo),e(x2,oXo),e(Ye,rXo),e(Ye,k2),e(k2,tXo),e(k2,Wde),e(Wde,aXo),e(k2,nXo),e(k2,Qde),e(Qde,sXo),e(Ye,lXo),e(Ye,Hde),e(Hde,iXo),e(Ye,dXo),g(By,Ye,null),b(c,xBe,u),b(c,Wd,u),e(Wd,R2),e(R2,Ude),g(xy,Ude,null),e(Wd,cXo),e(Wd,Jde),e(Jde,fXo),b(c,kBe,u),b(c,mr,u),g(ky,mr,null),e(mr,mXo),e(mr,Qd),e(Qd,gXo),e(Qd,Yde),e(Yde,hXo),e(Qd,pXo),e(Qd,Kde),e(Kde,_Xo),e(Qd,uXo),e(mr,bXo),e(mr,Ry),e(Ry,vXo),e(Ry,Zde),e(Zde,TXo),e(Ry,FXo),e(mr,CXo),e(mr,nt),g(Sy,nt,null),e(nt,MXo),e(nt,ece),e(ece,EXo),e(nt,yXo),e(nt,Hd),e(Hd,wXo),e(Hd,oce),e(oce,AXo),e(Hd,LXo),e(Hd,rce),e(rce,BXo),e(Hd,xXo),e(nt,kXo),e(nt,tce),e(tce,RXo),e(nt,SXo),g(Py,nt,null),e(mr,PXo),e(mr,Ke),g($y,Ke,null),e(Ke,$Xo),e(Ke,ace),e(ace,IXo),e(Ke,DXo),e(Ke,sn),e(sn,jXo),e(sn,nce),e(nce,NXo),e(sn,qXo),e(sn,sce),e(sce,GXo),e(sn,OXo),e(sn,lce),e(lce,XXo),e(sn,VXo),e(Ke,zXo),e(Ke,ice),e(ice,S2),e(S2,dce),e(dce,WXo),e(S2,QXo),e(S2,_N),e(_N,HXo),e(S2,UXo),e(Ke,JXo),e(Ke,P2),e(P2,YXo),e(P2,cce),e(cce,KXo),e(P2,ZXo),e(P2,fce),e(fce,eVo),e(Ke,oVo),e(Ke,mce),e(mce,rVo),e(Ke,tVo),g(Iy,Ke,null),b(c,RBe,u),b(c,Ud,u),e(Ud,$2),e($2,gce),g(Dy,gce,null),e(Ud,aVo),e(Ud,hce),e(hce,nVo),b(c,SBe,u),b(c,gr,u),g(jy,gr,null),e(gr,sVo),e(gr,Jd),e(Jd,lVo),e(Jd,pce),e(pce,iVo),e(Jd,dVo),e(Jd,_ce),e(_ce,cVo),e(Jd,fVo),e(gr,mVo),e(gr,Ny),e(Ny,gVo),e(Ny,uce),e(uce,hVo),e(Ny,pVo),e(gr,_Vo),e(gr,st),g(qy,st,null),e(st,uVo),e(st,bce),e(bce,bVo),e(st,vVo),e(st,Yd),e(Yd,TVo),e(Yd,vce),e(vce,FVo),e(Yd,CVo),e(Yd,Tce),e(Tce,MVo),e(Yd,EVo),e(st,yVo),e(st,Fce),e(Fce,wVo),e(st,AVo),g(Gy,st,null),e(gr,LVo),e(gr,Ze),g(Oy,Ze,null),e(Ze,BVo),e(Ze,Cce),e(Cce,xVo),e(Ze,kVo),e(Ze,ln),e(ln,RVo),e(ln,Mce),e(Mce,SVo),e(ln,PVo),e(ln,Ece),e(Ece,$Vo),e(ln,IVo),e(ln,yce),e(yce,DVo),e(ln,jVo),e(Ze,NVo),e(Ze,wce),e(wce,I2),e(I2,Ace),e(Ace,qVo),e(I2,GVo),e(I2,uN),e(uN,OVo),e(I2,XVo),e(Ze,VVo),e(Ze,D2),e(D2,zVo),e(D2,Lce),e(Lce,WVo),e(D2,QVo),e(D2,Bce),e(Bce,HVo),e(Ze,UVo),e(Ze,xce),e(xce,JVo),e(Ze,YVo),g(Xy,Ze,null),b(c,PBe,u),b(c,Kd,u),e(Kd,j2),e(j2,kce),g(Vy,kce,null),e(Kd,KVo),e(Kd,Rce),e(Rce,ZVo),b(c,$Be,u),b(c,hr,u),g(zy,hr,null),e(hr,ezo),e(hr,Zd),e(Zd,ozo),e(Zd,Sce),e(Sce,rzo),e(Zd,tzo),e(Zd,Pce),e(Pce,azo),e(Zd,nzo),e(hr,szo),e(hr,Wy),e(Wy,lzo),e(Wy,$ce),e($ce,izo),e(Wy,dzo),e(hr,czo),e(hr,lt),g(Qy,lt,null),e(lt,fzo),e(lt,Ice),e(Ice,mzo),e(lt,gzo),e(lt,ec),e(ec,hzo),e(ec,Dce),e(Dce,pzo),e(ec,_zo),e(ec,jce),e(jce,uzo),e(ec,bzo),e(lt,vzo),e(lt,Nce),e(Nce,Tzo),e(lt,Fzo),g(Hy,lt,null),e(hr,Czo),e(hr,eo),g(Uy,eo,null),e(eo,Mzo),e(eo,qce),e(qce,Ezo),e(eo,yzo),e(eo,dn),e(dn,wzo),e(dn,Gce),e(Gce,Azo),e(dn,Lzo),e(dn,Oce),e(Oce,Bzo),e(dn,xzo),e(dn,Xce),e(Xce,kzo),e(dn,Rzo),e(eo,Szo),e(eo,Jy),e(Jy,N2),e(N2,Vce),e(Vce,Pzo),e(N2,$zo),e(N2,bN),e(bN,Izo),e(N2,Dzo),e(Jy,jzo),e(Jy,q2),e(q2,zce),e(zce,Nzo),e(q2,qzo),e(q2,vN),e(vN,Gzo),e(q2,Ozo),e(eo,Xzo),e(eo,G2),e(G2,Vzo),e(G2,Wce),e(Wce,zzo),e(G2,Wzo),e(G2,Qce),e(Qce,Qzo),e(eo,Hzo),e(eo,Hce),e(Hce,Uzo),e(eo,Jzo),g(Yy,eo,null),b(c,IBe,u),b(c,oc,u),e(oc,O2),e(O2,Uce),g(Ky,Uce,null),e(oc,Yzo),e(oc,Jce),e(Jce,Kzo),b(c,DBe,u),b(c,pr,u),g(Zy,pr,null),e(pr,Zzo),e(pr,rc),e(rc,eWo),e(rc,Yce),e(Yce,oWo),e(rc,rWo),e(rc,Kce),e(Kce,tWo),e(rc,aWo),e(pr,nWo),e(pr,ew),e(ew,sWo),e(ew,Zce),e(Zce,lWo),e(ew,iWo),e(pr,dWo),e(pr,it),g(ow,it,null),e(it,cWo),e(it,efe),e(efe,fWo),e(it,mWo),e(it,tc),e(tc,gWo),e(tc,ofe),e(ofe,hWo),e(tc,pWo),e(tc,rfe),e(rfe,_Wo),e(tc,uWo),e(it,bWo),e(it,tfe),e(tfe,vWo),e(it,TWo),g(rw,it,null),e(pr,FWo),e(pr,go),g(tw,go,null),e(go,CWo),e(go,afe),e(afe,MWo),e(go,EWo),e(go,cn),e(cn,yWo),e(cn,nfe),e(nfe,wWo),e(cn,AWo),e(cn,sfe),e(sfe,LWo),e(cn,BWo),e(cn,lfe),e(lfe,xWo),e(cn,kWo),e(go,RWo),e(go,B),e(B,X2),e(X2,ife),e(ife,SWo),e(X2,PWo),e(X2,TN),e(TN,$Wo),e(X2,IWo),e(B,DWo),e(B,V2),e(V2,dfe),e(dfe,jWo),e(V2,NWo),e(V2,FN),e(FN,qWo),e(V2,GWo),e(B,OWo),e(B,z2),e(z2,cfe),e(cfe,XWo),e(z2,VWo),e(z2,CN),e(CN,zWo),e(z2,WWo),e(B,QWo),e(B,W2),e(W2,ffe),e(ffe,HWo),e(W2,UWo),e(W2,MN),e(MN,JWo),e(W2,YWo),e(B,KWo),e(B,Q2),e(Q2,mfe),e(mfe,ZWo),e(Q2,eQo),e(Q2,EN),e(EN,oQo),e(Q2,rQo),e(B,tQo),e(B,H2),e(H2,gfe),e(gfe,aQo),e(H2,nQo),e(H2,yN),e(yN,sQo),e(H2,lQo),e(B,iQo),e(B,U2),e(U2,hfe),e(hfe,dQo),e(U2,cQo),e(U2,wN),e(wN,fQo),e(U2,mQo),e(B,gQo),e(B,J2),e(J2,pfe),e(pfe,hQo),e(J2,pQo),e(J2,AN),e(AN,_Qo),e(J2,uQo),e(B,bQo),e(B,Y2),e(Y2,_fe),e(_fe,vQo),e(Y2,TQo),e(Y2,LN),e(LN,FQo),e(Y2,CQo),e(B,MQo),e(B,K2),e(K2,ufe),e(ufe,EQo),e(K2,yQo),e(K2,BN),e(BN,wQo),e(K2,AQo),e(B,LQo),e(B,Z2),e(Z2,bfe),e(bfe,BQo),e(Z2,xQo),e(Z2,xN),e(xN,kQo),e(Z2,RQo),e(B,SQo),e(B,ev),e(ev,vfe),e(vfe,PQo),e(ev,$Qo),e(ev,kN),e(kN,IQo),e(ev,DQo),e(B,jQo),e(B,ov),e(ov,Tfe),e(Tfe,NQo),e(ov,qQo),e(ov,RN),e(RN,GQo),e(ov,OQo),e(B,XQo),e(B,rv),e(rv,Ffe),e(Ffe,VQo),e(rv,zQo),e(rv,SN),e(SN,WQo),e(rv,QQo),e(B,HQo),e(B,tv),e(tv,Cfe),e(Cfe,UQo),e(tv,JQo),e(tv,PN),e(PN,YQo),e(tv,KQo),e(B,ZQo),e(B,av),e(av,Mfe),e(Mfe,eHo),e(av,oHo),e(av,$N),e($N,rHo),e(av,tHo),e(B,aHo),e(B,$s),e($s,Efe),e(Efe,nHo),e($s,sHo),e($s,IN),e(IN,lHo),e($s,iHo),e($s,DN),e(DN,dHo),e($s,cHo),e(B,fHo),e(B,nv),e(nv,yfe),e(yfe,mHo),e(nv,gHo),e(nv,jN),e(jN,hHo),e(nv,pHo),e(B,_Ho),e(B,sv),e(sv,wfe),e(wfe,uHo),e(sv,bHo),e(sv,NN),e(NN,vHo),e(sv,THo),e(B,FHo),e(B,lv),e(lv,Afe),e(Afe,CHo),e(lv,MHo),e(lv,qN),e(qN,EHo),e(lv,yHo),e(B,wHo),e(B,iv),e(iv,Lfe),e(Lfe,AHo),e(iv,LHo),e(iv,GN),e(GN,BHo),e(iv,xHo),e(B,kHo),e(B,dv),e(dv,Bfe),e(Bfe,RHo),e(dv,SHo),e(dv,ON),e(ON,PHo),e(dv,$Ho),e(B,IHo),e(B,cv),e(cv,xfe),e(xfe,DHo),e(cv,jHo),e(cv,XN),e(XN,NHo),e(cv,qHo),e(B,GHo),e(B,fv),e(fv,kfe),e(kfe,OHo),e(fv,XHo),e(fv,VN),e(VN,VHo),e(fv,zHo),e(B,WHo),e(B,mv),e(mv,Rfe),e(Rfe,QHo),e(mv,HHo),e(mv,zN),e(zN,UHo),e(mv,JHo),e(B,YHo),e(B,gv),e(gv,Sfe),e(Sfe,KHo),e(gv,ZHo),e(gv,WN),e(WN,eUo),e(gv,oUo),e(B,rUo),e(B,hv),e(hv,Pfe),e(Pfe,tUo),e(hv,aUo),e(hv,QN),e(QN,nUo),e(hv,sUo),e(B,lUo),e(B,pv),e(pv,$fe),e($fe,iUo),e(pv,dUo),e(pv,HN),e(HN,cUo),e(pv,fUo),e(B,mUo),e(B,_v),e(_v,Ife),e(Ife,gUo),e(_v,hUo),e(_v,UN),e(UN,pUo),e(_v,_Uo),e(B,uUo),e(B,uv),e(uv,Dfe),e(Dfe,bUo),e(uv,vUo),e(uv,JN),e(JN,TUo),e(uv,FUo),e(B,CUo),e(B,bv),e(bv,jfe),e(jfe,MUo),e(bv,EUo),e(bv,YN),e(YN,yUo),e(bv,wUo),e(B,AUo),e(B,vv),e(vv,Nfe),e(Nfe,LUo),e(vv,BUo),e(vv,KN),e(KN,xUo),e(vv,kUo),e(B,RUo),e(B,Tv),e(Tv,qfe),e(qfe,SUo),e(Tv,PUo),e(Tv,ZN),e(ZN,$Uo),e(Tv,IUo),e(B,DUo),e(B,Fv),e(Fv,Gfe),e(Gfe,jUo),e(Fv,NUo),e(Fv,eq),e(eq,qUo),e(Fv,GUo),e(B,OUo),e(B,Cv),e(Cv,Ofe),e(Ofe,XUo),e(Cv,VUo),e(Cv,oq),e(oq,zUo),e(Cv,WUo),e(B,QUo),e(B,Mv),e(Mv,Xfe),e(Xfe,HUo),e(Mv,UUo),e(Mv,rq),e(rq,JUo),e(Mv,YUo),e(B,KUo),e(B,Ev),e(Ev,Vfe),e(Vfe,ZUo),e(Ev,eJo),e(Ev,tq),e(tq,oJo),e(Ev,rJo),e(B,tJo),e(B,yv),e(yv,zfe),e(zfe,aJo),e(yv,nJo),e(yv,aq),e(aq,sJo),e(yv,lJo),e(B,iJo),e(B,wv),e(wv,Wfe),e(Wfe,dJo),e(wv,cJo),e(wv,nq),e(nq,fJo),e(wv,mJo),e(B,gJo),e(B,Av),e(Av,Qfe),e(Qfe,hJo),e(Av,pJo),e(Av,sq),e(sq,_Jo),e(Av,uJo),e(B,bJo),e(B,Lv),e(Lv,Hfe),e(Hfe,vJo),e(Lv,TJo),e(Lv,lq),e(lq,FJo),e(Lv,CJo),e(B,MJo),e(B,Bv),e(Bv,Ufe),e(Ufe,EJo),e(Bv,yJo),e(Bv,iq),e(iq,wJo),e(Bv,AJo),e(go,LJo),e(go,Jfe),e(Jfe,BJo),e(go,xJo),g(aw,go,null),b(c,jBe,u),b(c,ac,u),e(ac,xv),e(xv,Yfe),g(nw,Yfe,null),e(ac,kJo),e(ac,Kfe),e(Kfe,RJo),b(c,NBe,u),b(c,_r,u),g(sw,_r,null),e(_r,SJo),e(_r,nc),e(nc,PJo),e(nc,Zfe),e(Zfe,$Jo),e(nc,IJo),e(nc,eme),e(eme,DJo),e(nc,jJo),e(_r,NJo),e(_r,lw),e(lw,qJo),e(lw,ome),e(ome,GJo),e(lw,OJo),e(_r,XJo),e(_r,dt),g(iw,dt,null),e(dt,VJo),e(dt,rme),e(rme,zJo),e(dt,WJo),e(dt,sc),e(sc,QJo),e(sc,tme),e(tme,HJo),e(sc,UJo),e(sc,ame),e(ame,JJo),e(sc,YJo),e(dt,KJo),e(dt,nme),e(nme,ZJo),e(dt,eYo),g(dw,dt,null),e(_r,oYo),e(_r,ho),g(cw,ho,null),e(ho,rYo),e(ho,sme),e(sme,tYo),e(ho,aYo),e(ho,fn),e(fn,nYo),e(fn,lme),e(lme,sYo),e(fn,lYo),e(fn,ime),e(ime,iYo),e(fn,dYo),e(fn,dme),e(dme,cYo),e(fn,fYo),e(ho,mYo),e(ho,H),e(H,kv),e(kv,cme),e(cme,gYo),e(kv,hYo),e(kv,dq),e(dq,pYo),e(kv,_Yo),e(H,uYo),e(H,Rv),e(Rv,fme),e(fme,bYo),e(Rv,vYo),e(Rv,cq),e(cq,TYo),e(Rv,FYo),e(H,CYo),e(H,Sv),e(Sv,mme),e(mme,MYo),e(Sv,EYo),e(Sv,fq),e(fq,yYo),e(Sv,wYo),e(H,AYo),e(H,Pv),e(Pv,gme),e(gme,LYo),e(Pv,BYo),e(Pv,mq),e(mq,xYo),e(Pv,kYo),e(H,RYo),e(H,$v),e($v,hme),e(hme,SYo),e($v,PYo),e($v,gq),e(gq,$Yo),e($v,IYo),e(H,DYo),e(H,Iv),e(Iv,pme),e(pme,jYo),e(Iv,NYo),e(Iv,hq),e(hq,qYo),e(Iv,GYo),e(H,OYo),e(H,Dv),e(Dv,_me),e(_me,XYo),e(Dv,VYo),e(Dv,pq),e(pq,zYo),e(Dv,WYo),e(H,QYo),e(H,jv),e(jv,ume),e(ume,HYo),e(jv,UYo),e(jv,_q),e(_q,JYo),e(jv,YYo),e(H,KYo),e(H,Nv),e(Nv,bme),e(bme,ZYo),e(Nv,eKo),e(Nv,uq),e(uq,oKo),e(Nv,rKo),e(H,tKo),e(H,qv),e(qv,vme),e(vme,aKo),e(qv,nKo),e(qv,bq),e(bq,sKo),e(qv,lKo),e(H,iKo),e(H,Gv),e(Gv,Tme),e(Tme,dKo),e(Gv,cKo),e(Gv,vq),e(vq,fKo),e(Gv,mKo),e(H,gKo),e(H,Ov),e(Ov,Fme),e(Fme,hKo),e(Ov,pKo),e(Ov,Tq),e(Tq,_Ko),e(Ov,uKo),e(H,bKo),e(H,Xv),e(Xv,Cme),e(Cme,vKo),e(Xv,TKo),e(Xv,Fq),e(Fq,FKo),e(Xv,CKo),e(H,MKo),e(H,Vv),e(Vv,Mme),e(Mme,EKo),e(Vv,yKo),e(Vv,Cq),e(Cq,wKo),e(Vv,AKo),e(H,LKo),e(H,zv),e(zv,Eme),e(Eme,BKo),e(zv,xKo),e(zv,Mq),e(Mq,kKo),e(zv,RKo),e(H,SKo),e(H,Wv),e(Wv,yme),e(yme,PKo),e(Wv,$Ko),e(Wv,Eq),e(Eq,IKo),e(Wv,DKo),e(H,jKo),e(H,Qv),e(Qv,wme),e(wme,NKo),e(Qv,qKo),e(Qv,yq),e(yq,GKo),e(Qv,OKo),e(H,XKo),e(H,Hv),e(Hv,Ame),e(Ame,VKo),e(Hv,zKo),e(Hv,wq),e(wq,WKo),e(Hv,QKo),e(H,HKo),e(H,Uv),e(Uv,Lme),e(Lme,UKo),e(Uv,JKo),e(Uv,Aq),e(Aq,YKo),e(Uv,KKo),e(H,ZKo),e(H,Jv),e(Jv,Bme),e(Bme,eZo),e(Jv,oZo),e(Jv,Lq),e(Lq,rZo),e(Jv,tZo),e(H,aZo),e(H,Yv),e(Yv,xme),e(xme,nZo),e(Yv,sZo),e(Yv,Bq),e(Bq,lZo),e(Yv,iZo),e(H,dZo),e(H,Kv),e(Kv,kme),e(kme,cZo),e(Kv,fZo),e(Kv,xq),e(xq,mZo),e(Kv,gZo),e(ho,hZo),e(ho,Rme),e(Rme,pZo),e(ho,_Zo),g(fw,ho,null),b(c,qBe,u),b(c,lc,u),e(lc,Zv),e(Zv,Sme),g(mw,Sme,null),e(lc,uZo),e(lc,Pme),e(Pme,bZo),b(c,GBe,u),b(c,ur,u),g(gw,ur,null),e(ur,vZo),e(ur,ic),e(ic,TZo),e(ic,$me),e($me,FZo),e(ic,CZo),e(ic,Ime),e(Ime,MZo),e(ic,EZo),e(ur,yZo),e(ur,hw),e(hw,wZo),e(hw,Dme),e(Dme,AZo),e(hw,LZo),e(ur,BZo),e(ur,ct),g(pw,ct,null),e(ct,xZo),e(ct,jme),e(jme,kZo),e(ct,RZo),e(ct,dc),e(dc,SZo),e(dc,Nme),e(Nme,PZo),e(dc,$Zo),e(dc,qme),e(qme,IZo),e(dc,DZo),e(ct,jZo),e(ct,Gme),e(Gme,NZo),e(ct,qZo),g(_w,ct,null),e(ur,GZo),e(ur,po),g(uw,po,null),e(po,OZo),e(po,Ome),e(Ome,XZo),e(po,VZo),e(po,mn),e(mn,zZo),e(mn,Xme),e(Xme,WZo),e(mn,QZo),e(mn,Vme),e(Vme,HZo),e(mn,UZo),e(mn,zme),e(zme,JZo),e(mn,YZo),e(po,KZo),e(po,pe),e(pe,e0),e(e0,Wme),e(Wme,ZZo),e(e0,eer),e(e0,kq),e(kq,oer),e(e0,rer),e(pe,ter),e(pe,o0),e(o0,Qme),e(Qme,aer),e(o0,ner),e(o0,Rq),e(Rq,ser),e(o0,ler),e(pe,ier),e(pe,r0),e(r0,Hme),e(Hme,der),e(r0,cer),e(r0,Sq),e(Sq,fer),e(r0,mer),e(pe,ger),e(pe,t0),e(t0,Ume),e(Ume,her),e(t0,per),e(t0,Pq),e(Pq,_er),e(t0,uer),e(pe,ber),e(pe,a0),e(a0,Jme),e(Jme,ver),e(a0,Ter),e(a0,$q),e($q,Fer),e(a0,Cer),e(pe,Mer),e(pe,n0),e(n0,Yme),e(Yme,Eer),e(n0,yer),e(n0,Iq),e(Iq,wer),e(n0,Aer),e(pe,Ler),e(pe,s0),e(s0,Kme),e(Kme,Ber),e(s0,xer),e(s0,Dq),e(Dq,ker),e(s0,Rer),e(pe,Ser),e(pe,l0),e(l0,Zme),e(Zme,Per),e(l0,$er),e(l0,jq),e(jq,Ier),e(l0,Der),e(pe,jer),e(pe,i0),e(i0,ege),e(ege,Ner),e(i0,qer),e(i0,Nq),e(Nq,Ger),e(i0,Oer),e(pe,Xer),e(pe,d0),e(d0,oge),e(oge,Ver),e(d0,zer),e(d0,qq),e(qq,Wer),e(d0,Qer),e(po,Her),e(po,rge),e(rge,Uer),e(po,Jer),g(bw,po,null),b(c,OBe,u),b(c,cc,u),e(cc,c0),e(c0,tge),g(vw,tge,null),e(cc,Yer),e(cc,age),e(age,Ker),b(c,XBe,u),b(c,br,u),g(Tw,br,null),e(br,Zer),e(br,fc),e(fc,eor),e(fc,nge),e(nge,oor),e(fc,ror),e(fc,sge),e(sge,tor),e(fc,aor),e(br,nor),e(br,Fw),e(Fw,sor),e(Fw,lge),e(lge,lor),e(Fw,ior),e(br,dor),e(br,ft),g(Cw,ft,null),e(ft,cor),e(ft,ige),e(ige,mor),e(ft,gor),e(ft,mc),e(mc,hor),e(mc,dge),e(dge,por),e(mc,_or),e(mc,cge),e(cge,uor),e(mc,bor),e(ft,vor),e(ft,fge),e(fge,Tor),e(ft,For),g(Mw,ft,null),e(br,Cor),e(br,_o),g(Ew,_o,null),e(_o,Mor),e(_o,mge),e(mge,Eor),e(_o,yor),e(_o,gn),e(gn,wor),e(gn,gge),e(gge,Aor),e(gn,Lor),e(gn,hge),e(hge,Bor),e(gn,xor),e(gn,pge),e(pge,kor),e(gn,Ror),e(_o,Sor),e(_o,yw),e(yw,f0),e(f0,_ge),e(_ge,Por),e(f0,$or),e(f0,Gq),e(Gq,Ior),e(f0,Dor),e(yw,jor),e(yw,m0),e(m0,uge),e(uge,Nor),e(m0,qor),e(m0,Oq),e(Oq,Gor),e(m0,Oor),e(_o,Xor),e(_o,bge),e(bge,Vor),e(_o,zor),g(ww,_o,null),b(c,VBe,u),b(c,gc,u),e(gc,g0),e(g0,vge),g(Aw,vge,null),e(gc,Wor),e(gc,Tge),e(Tge,Qor),b(c,zBe,u),b(c,vr,u),g(Lw,vr,null),e(vr,Hor),e(vr,hc),e(hc,Uor),e(hc,Fge),e(Fge,Jor),e(hc,Yor),e(hc,Cge),e(Cge,Kor),e(hc,Zor),e(vr,err),e(vr,Bw),e(Bw,orr),e(Bw,Mge),e(Mge,rrr),e(Bw,trr),e(vr,arr),e(vr,mt),g(xw,mt,null),e(mt,nrr),e(mt,Ege),e(Ege,srr),e(mt,lrr),e(mt,pc),e(pc,irr),e(pc,yge),e(yge,drr),e(pc,crr),e(pc,wge),e(wge,frr),e(pc,mrr),e(mt,grr),e(mt,Age),e(Age,hrr),e(mt,prr),g(kw,mt,null),e(vr,_rr),e(vr,uo),g(Rw,uo,null),e(uo,urr),e(uo,Lge),e(Lge,brr),e(uo,vrr),e(uo,hn),e(hn,Trr),e(hn,Bge),e(Bge,Frr),e(hn,Crr),e(hn,xge),e(xge,Mrr),e(hn,Err),e(hn,kge),e(kge,yrr),e(hn,wrr),e(uo,Arr),e(uo,Y),e(Y,h0),e(h0,Rge),e(Rge,Lrr),e(h0,Brr),e(h0,Xq),e(Xq,xrr),e(h0,krr),e(Y,Rrr),e(Y,p0),e(p0,Sge),e(Sge,Srr),e(p0,Prr),e(p0,Vq),e(Vq,$rr),e(p0,Irr),e(Y,Drr),e(Y,_0),e(_0,Pge),e(Pge,jrr),e(_0,Nrr),e(_0,zq),e(zq,qrr),e(_0,Grr),e(Y,Orr),e(Y,u0),e(u0,$ge),e($ge,Xrr),e(u0,Vrr),e(u0,Wq),e(Wq,zrr),e(u0,Wrr),e(Y,Qrr),e(Y,b0),e(b0,Ige),e(Ige,Hrr),e(b0,Urr),e(b0,Qq),e(Qq,Jrr),e(b0,Yrr),e(Y,Krr),e(Y,v0),e(v0,Dge),e(Dge,Zrr),e(v0,etr),e(v0,Hq),e(Hq,otr),e(v0,rtr),e(Y,ttr),e(Y,T0),e(T0,jge),e(jge,atr),e(T0,ntr),e(T0,Uq),e(Uq,str),e(T0,ltr),e(Y,itr),e(Y,F0),e(F0,Nge),e(Nge,dtr),e(F0,ctr),e(F0,Jq),e(Jq,ftr),e(F0,mtr),e(Y,gtr),e(Y,C0),e(C0,qge),e(qge,htr),e(C0,ptr),e(C0,Yq),e(Yq,_tr),e(C0,utr),e(Y,btr),e(Y,M0),e(M0,Gge),e(Gge,vtr),e(M0,Ttr),e(M0,Kq),e(Kq,Ftr),e(M0,Ctr),e(Y,Mtr),e(Y,E0),e(E0,Oge),e(Oge,Etr),e(E0,ytr),e(E0,Zq),e(Zq,wtr),e(E0,Atr),e(Y,Ltr),e(Y,y0),e(y0,Xge),e(Xge,Btr),e(y0,xtr),e(y0,eG),e(eG,ktr),e(y0,Rtr),e(Y,Str),e(Y,w0),e(w0,Vge),e(Vge,Ptr),e(w0,$tr),e(w0,oG),e(oG,Itr),e(w0,Dtr),e(Y,jtr),e(Y,A0),e(A0,zge),e(zge,Ntr),e(A0,qtr),e(A0,rG),e(rG,Gtr),e(A0,Otr),e(Y,Xtr),e(Y,L0),e(L0,Wge),e(Wge,Vtr),e(L0,ztr),e(L0,tG),e(tG,Wtr),e(L0,Qtr),e(Y,Htr),e(Y,B0),e(B0,Qge),e(Qge,Utr),e(B0,Jtr),e(B0,aG),e(aG,Ytr),e(B0,Ktr),e(Y,Ztr),e(Y,x0),e(x0,Hge),e(Hge,ear),e(x0,oar),e(x0,nG),e(nG,rar),e(x0,tar),e(Y,aar),e(Y,k0),e(k0,Uge),e(Uge,nar),e(k0,sar),e(k0,sG),e(sG,lar),e(k0,iar),e(Y,dar),e(Y,R0),e(R0,Jge),e(Jge,car),e(R0,far),e(R0,lG),e(lG,mar),e(R0,gar),e(Y,har),e(Y,S0),e(S0,Yge),e(Yge,par),e(S0,_ar),e(S0,iG),e(iG,uar),e(S0,bar),e(uo,Tar),e(uo,Kge),e(Kge,Far),e(uo,Car),g(Sw,uo,null),b(c,WBe,u),b(c,_c,u),e(_c,P0),e(P0,Zge),g(Pw,Zge,null),e(_c,Mar),e(_c,ehe),e(ehe,Ear),b(c,QBe,u),b(c,Tr,u),g($w,Tr,null),e(Tr,yar),e(Tr,uc),e(uc,war),e(uc,ohe),e(ohe,Aar),e(uc,Lar),e(uc,rhe),e(rhe,Bar),e(uc,xar),e(Tr,kar),e(Tr,Iw),e(Iw,Rar),e(Iw,the),e(the,Sar),e(Iw,Par),e(Tr,$ar),e(Tr,gt),g(Dw,gt,null),e(gt,Iar),e(gt,ahe),e(ahe,Dar),e(gt,jar),e(gt,bc),e(bc,Nar),e(bc,nhe),e(nhe,qar),e(bc,Gar),e(bc,she),e(she,Oar),e(bc,Xar),e(gt,Var),e(gt,lhe),e(lhe,zar),e(gt,War),g(jw,gt,null),e(Tr,Qar),e(Tr,bo),g(Nw,bo,null),e(bo,Har),e(bo,ihe),e(ihe,Uar),e(bo,Jar),e(bo,pn),e(pn,Yar),e(pn,dhe),e(dhe,Kar),e(pn,Zar),e(pn,che),e(che,enr),e(pn,onr),e(pn,fhe),e(fhe,rnr),e(pn,tnr),e(bo,anr),e(bo,_e),e(_e,$0),e($0,mhe),e(mhe,nnr),e($0,snr),e($0,dG),e(dG,lnr),e($0,inr),e(_e,dnr),e(_e,I0),e(I0,ghe),e(ghe,cnr),e(I0,fnr),e(I0,cG),e(cG,mnr),e(I0,gnr),e(_e,hnr),e(_e,D0),e(D0,hhe),e(hhe,pnr),e(D0,_nr),e(D0,fG),e(fG,unr),e(D0,bnr),e(_e,vnr),e(_e,j0),e(j0,phe),e(phe,Tnr),e(j0,Fnr),e(j0,mG),e(mG,Cnr),e(j0,Mnr),e(_e,Enr),e(_e,N0),e(N0,_he),e(_he,ynr),e(N0,wnr),e(N0,gG),e(gG,Anr),e(N0,Lnr),e(_e,Bnr),e(_e,q0),e(q0,uhe),e(uhe,xnr),e(q0,knr),e(q0,hG),e(hG,Rnr),e(q0,Snr),e(_e,Pnr),e(_e,G0),e(G0,bhe),e(bhe,$nr),e(G0,Inr),e(G0,pG),e(pG,Dnr),e(G0,jnr),e(_e,Nnr),e(_e,O0),e(O0,vhe),e(vhe,qnr),e(O0,Gnr),e(O0,_G),e(_G,Onr),e(O0,Xnr),e(_e,Vnr),e(_e,X0),e(X0,The),e(The,znr),e(X0,Wnr),e(X0,uG),e(uG,Qnr),e(X0,Hnr),e(_e,Unr),e(_e,V0),e(V0,Fhe),e(Fhe,Jnr),e(V0,Ynr),e(V0,bG),e(bG,Knr),e(V0,Znr),e(bo,esr),e(bo,Che),e(Che,osr),e(bo,rsr),g(qw,bo,null),b(c,HBe,u),b(c,vc,u),e(vc,z0),e(z0,Mhe),g(Gw,Mhe,null),e(vc,tsr),e(vc,Ehe),e(Ehe,asr),b(c,UBe,u),b(c,Fr,u),g(Ow,Fr,null),e(Fr,nsr),e(Fr,Tc),e(Tc,ssr),e(Tc,yhe),e(yhe,lsr),e(Tc,isr),e(Tc,whe),e(whe,dsr),e(Tc,csr),e(Fr,fsr),e(Fr,Xw),e(Xw,msr),e(Xw,Ahe),e(Ahe,gsr),e(Xw,hsr),e(Fr,psr),e(Fr,ht),g(Vw,ht,null),e(ht,_sr),e(ht,Lhe),e(Lhe,usr),e(ht,bsr),e(ht,Fc),e(Fc,vsr),e(Fc,Bhe),e(Bhe,Tsr),e(Fc,Fsr),e(Fc,xhe),e(xhe,Csr),e(Fc,Msr),e(ht,Esr),e(ht,khe),e(khe,ysr),e(ht,wsr),g(zw,ht,null),e(Fr,Asr),e(Fr,vo),g(Ww,vo,null),e(vo,Lsr),e(vo,Rhe),e(Rhe,Bsr),e(vo,xsr),e(vo,_n),e(_n,ksr),e(_n,She),e(She,Rsr),e(_n,Ssr),e(_n,Phe),e(Phe,Psr),e(_n,$sr),e(_n,$he),e($he,Isr),e(_n,Dsr),e(vo,jsr),e(vo,X),e(X,W0),e(W0,Ihe),e(Ihe,Nsr),e(W0,qsr),e(W0,vG),e(vG,Gsr),e(W0,Osr),e(X,Xsr),e(X,Q0),e(Q0,Dhe),e(Dhe,Vsr),e(Q0,zsr),e(Q0,TG),e(TG,Wsr),e(Q0,Qsr),e(X,Hsr),e(X,H0),e(H0,jhe),e(jhe,Usr),e(H0,Jsr),e(H0,FG),e(FG,Ysr),e(H0,Ksr),e(X,Zsr),e(X,U0),e(U0,Nhe),e(Nhe,elr),e(U0,olr),e(U0,CG),e(CG,rlr),e(U0,tlr),e(X,alr),e(X,J0),e(J0,qhe),e(qhe,nlr),e(J0,slr),e(J0,MG),e(MG,llr),e(J0,ilr),e(X,dlr),e(X,Y0),e(Y0,Ghe),e(Ghe,clr),e(Y0,flr),e(Y0,EG),e(EG,mlr),e(Y0,glr),e(X,hlr),e(X,K0),e(K0,Ohe),e(Ohe,plr),e(K0,_lr),e(K0,yG),e(yG,ulr),e(K0,blr),e(X,vlr),e(X,Z0),e(Z0,Xhe),e(Xhe,Tlr),e(Z0,Flr),e(Z0,wG),e(wG,Clr),e(Z0,Mlr),e(X,Elr),e(X,eT),e(eT,Vhe),e(Vhe,ylr),e(eT,wlr),e(eT,AG),e(AG,Alr),e(eT,Llr),e(X,Blr),e(X,oT),e(oT,zhe),e(zhe,xlr),e(oT,klr),e(oT,LG),e(LG,Rlr),e(oT,Slr),e(X,Plr),e(X,rT),e(rT,Whe),e(Whe,$lr),e(rT,Ilr),e(rT,BG),e(BG,Dlr),e(rT,jlr),e(X,Nlr),e(X,tT),e(tT,Qhe),e(Qhe,qlr),e(tT,Glr),e(tT,xG),e(xG,Olr),e(tT,Xlr),e(X,Vlr),e(X,aT),e(aT,Hhe),e(Hhe,zlr),e(aT,Wlr),e(aT,kG),e(kG,Qlr),e(aT,Hlr),e(X,Ulr),e(X,nT),e(nT,Uhe),e(Uhe,Jlr),e(nT,Ylr),e(nT,RG),e(RG,Klr),e(nT,Zlr),e(X,eir),e(X,sT),e(sT,Jhe),e(Jhe,oir),e(sT,rir),e(sT,SG),e(SG,tir),e(sT,air),e(X,nir),e(X,lT),e(lT,Yhe),e(Yhe,sir),e(lT,lir),e(lT,PG),e(PG,iir),e(lT,dir),e(X,cir),e(X,iT),e(iT,Khe),e(Khe,fir),e(iT,mir),e(iT,$G),e($G,gir),e(iT,hir),e(X,pir),e(X,dT),e(dT,Zhe),e(Zhe,_ir),e(dT,uir),e(dT,IG),e(IG,bir),e(dT,vir),e(X,Tir),e(X,cT),e(cT,epe),e(epe,Fir),e(cT,Cir),e(cT,DG),e(DG,Mir),e(cT,Eir),e(X,yir),e(X,fT),e(fT,ope),e(ope,wir),e(fT,Air),e(fT,jG),e(jG,Lir),e(fT,Bir),e(X,xir),e(X,mT),e(mT,rpe),e(rpe,kir),e(mT,Rir),e(mT,NG),e(NG,Sir),e(mT,Pir),e(X,$ir),e(X,gT),e(gT,tpe),e(tpe,Iir),e(gT,Dir),e(gT,qG),e(qG,jir),e(gT,Nir),e(X,qir),e(X,hT),e(hT,ape),e(ape,Gir),e(hT,Oir),e(hT,GG),e(GG,Xir),e(hT,Vir),e(X,zir),e(X,pT),e(pT,npe),e(npe,Wir),e(pT,Qir),e(pT,OG),e(OG,Hir),e(pT,Uir),e(X,Jir),e(X,_T),e(_T,spe),e(spe,Yir),e(_T,Kir),e(_T,XG),e(XG,Zir),e(_T,edr),e(vo,odr),e(vo,lpe),e(lpe,rdr),e(vo,tdr),g(Qw,vo,null),b(c,JBe,u),b(c,Cc,u),e(Cc,uT),e(uT,ipe),g(Hw,ipe,null),e(Cc,adr),e(Cc,dpe),e(dpe,ndr),b(c,YBe,u),b(c,Cr,u),g(Uw,Cr,null),e(Cr,sdr),e(Cr,Mc),e(Mc,ldr),e(Mc,cpe),e(cpe,idr),e(Mc,ddr),e(Mc,fpe),e(fpe,cdr),e(Mc,fdr),e(Cr,mdr),e(Cr,Jw),e(Jw,gdr),e(Jw,mpe),e(mpe,hdr),e(Jw,pdr),e(Cr,_dr),e(Cr,pt),g(Yw,pt,null),e(pt,udr),e(pt,gpe),e(gpe,bdr),e(pt,vdr),e(pt,Ec),e(Ec,Tdr),e(Ec,hpe),e(hpe,Fdr),e(Ec,Cdr),e(Ec,ppe),e(ppe,Mdr),e(Ec,Edr),e(pt,ydr),e(pt,_pe),e(_pe,wdr),e(pt,Adr),g(Kw,pt,null),e(Cr,Ldr),e(Cr,To),g(Zw,To,null),e(To,Bdr),e(To,upe),e(upe,xdr),e(To,kdr),e(To,un),e(un,Rdr),e(un,bpe),e(bpe,Sdr),e(un,Pdr),e(un,vpe),e(vpe,$dr),e(un,Idr),e(un,Tpe),e(Tpe,Ddr),e(un,jdr),e(To,Ndr),e(To,te),e(te,bT),e(bT,Fpe),e(Fpe,qdr),e(bT,Gdr),e(bT,VG),e(VG,Odr),e(bT,Xdr),e(te,Vdr),e(te,vT),e(vT,Cpe),e(Cpe,zdr),e(vT,Wdr),e(vT,zG),e(zG,Qdr),e(vT,Hdr),e(te,Udr),e(te,TT),e(TT,Mpe),e(Mpe,Jdr),e(TT,Ydr),e(TT,WG),e(WG,Kdr),e(TT,Zdr),e(te,ecr),e(te,FT),e(FT,Epe),e(Epe,ocr),e(FT,rcr),e(FT,QG),e(QG,tcr),e(FT,acr),e(te,ncr),e(te,CT),e(CT,ype),e(ype,scr),e(CT,lcr),e(CT,HG),e(HG,icr),e(CT,dcr),e(te,ccr),e(te,MT),e(MT,wpe),e(wpe,fcr),e(MT,mcr),e(MT,UG),e(UG,gcr),e(MT,hcr),e(te,pcr),e(te,ET),e(ET,Ape),e(Ape,_cr),e(ET,ucr),e(ET,JG),e(JG,bcr),e(ET,vcr),e(te,Tcr),e(te,yT),e(yT,Lpe),e(Lpe,Fcr),e(yT,Ccr),e(yT,YG),e(YG,Mcr),e(yT,Ecr),e(te,ycr),e(te,wT),e(wT,Bpe),e(Bpe,wcr),e(wT,Acr),e(wT,KG),e(KG,Lcr),e(wT,Bcr),e(te,xcr),e(te,AT),e(AT,xpe),e(xpe,kcr),e(AT,Rcr),e(AT,ZG),e(ZG,Scr),e(AT,Pcr),e(te,$cr),e(te,LT),e(LT,kpe),e(kpe,Icr),e(LT,Dcr),e(LT,eO),e(eO,jcr),e(LT,Ncr),e(te,qcr),e(te,BT),e(BT,Rpe),e(Rpe,Gcr),e(BT,Ocr),e(BT,oO),e(oO,Xcr),e(BT,Vcr),e(te,zcr),e(te,xT),e(xT,Spe),e(Spe,Wcr),e(xT,Qcr),e(xT,rO),e(rO,Hcr),e(xT,Ucr),e(te,Jcr),e(te,kT),e(kT,Ppe),e(Ppe,Ycr),e(kT,Kcr),e(kT,tO),e(tO,Zcr),e(kT,efr),e(te,ofr),e(te,RT),e(RT,$pe),e($pe,rfr),e(RT,tfr),e(RT,aO),e(aO,afr),e(RT,nfr),e(te,sfr),e(te,ST),e(ST,Ipe),e(Ipe,lfr),e(ST,ifr),e(ST,nO),e(nO,dfr),e(ST,cfr),e(te,ffr),e(te,PT),e(PT,Dpe),e(Dpe,mfr),e(PT,gfr),e(PT,sO),e(sO,hfr),e(PT,pfr),e(To,_fr),e(To,jpe),e(jpe,ufr),e(To,bfr),g(e6,To,null),b(c,KBe,u),b(c,yc,u),e(yc,$T),e($T,Npe),g(o6,Npe,null),e(yc,vfr),e(yc,qpe),e(qpe,Tfr),b(c,ZBe,u),b(c,Mr,u),g(r6,Mr,null),e(Mr,Ffr),e(Mr,wc),e(wc,Cfr),e(wc,Gpe),e(Gpe,Mfr),e(wc,Efr),e(wc,Ope),e(Ope,yfr),e(wc,wfr),e(Mr,Afr),e(Mr,t6),e(t6,Lfr),e(t6,Xpe),e(Xpe,Bfr),e(t6,xfr),e(Mr,kfr),e(Mr,_t),g(a6,_t,null),e(_t,Rfr),e(_t,Vpe),e(Vpe,Sfr),e(_t,Pfr),e(_t,Ac),e(Ac,$fr),e(Ac,zpe),e(zpe,Ifr),e(Ac,Dfr),e(Ac,Wpe),e(Wpe,jfr),e(Ac,Nfr),e(_t,qfr),e(_t,Qpe),e(Qpe,Gfr),e(_t,Ofr),g(n6,_t,null),e(Mr,Xfr),e(Mr,Fo),g(s6,Fo,null),e(Fo,Vfr),e(Fo,Hpe),e(Hpe,zfr),e(Fo,Wfr),e(Fo,bn),e(bn,Qfr),e(bn,Upe),e(Upe,Hfr),e(bn,Ufr),e(bn,Jpe),e(Jpe,Jfr),e(bn,Yfr),e(bn,Ype),e(Ype,Kfr),e(bn,Zfr),e(Fo,emr),e(Fo,Kpe),e(Kpe,IT),e(IT,Zpe),e(Zpe,omr),e(IT,rmr),e(IT,lO),e(lO,tmr),e(IT,amr),e(Fo,nmr),e(Fo,e_e),e(e_e,smr),e(Fo,lmr),g(l6,Fo,null),b(c,exe,u),b(c,Lc,u),e(Lc,DT),e(DT,o_e),g(i6,o_e,null),e(Lc,imr),e(Lc,r_e),e(r_e,dmr),b(c,oxe,u),b(c,Er,u),g(d6,Er,null),e(Er,cmr),e(Er,Bc),e(Bc,fmr),e(Bc,t_e),e(t_e,mmr),e(Bc,gmr),e(Bc,a_e),e(a_e,hmr),e(Bc,pmr),e(Er,_mr),e(Er,c6),e(c6,umr),e(c6,n_e),e(n_e,bmr),e(c6,vmr),e(Er,Tmr),e(Er,ut),g(f6,ut,null),e(ut,Fmr),e(ut,s_e),e(s_e,Cmr),e(ut,Mmr),e(ut,xc),e(xc,Emr),e(xc,l_e),e(l_e,ymr),e(xc,wmr),e(xc,i_e),e(i_e,Amr),e(xc,Lmr),e(ut,Bmr),e(ut,d_e),e(d_e,xmr),e(ut,kmr),g(m6,ut,null),e(Er,Rmr),e(Er,Co),g(g6,Co,null),e(Co,Smr),e(Co,c_e),e(c_e,Pmr),e(Co,$mr),e(Co,vn),e(vn,Imr),e(vn,f_e),e(f_e,Dmr),e(vn,jmr),e(vn,m_e),e(m_e,Nmr),e(vn,qmr),e(vn,g_e),e(g_e,Gmr),e(vn,Omr),e(Co,Xmr),e(Co,K),e(K,jT),e(jT,h_e),e(h_e,Vmr),e(jT,zmr),e(jT,iO),e(iO,Wmr),e(jT,Qmr),e(K,Hmr),e(K,NT),e(NT,p_e),e(p_e,Umr),e(NT,Jmr),e(NT,dO),e(dO,Ymr),e(NT,Kmr),e(K,Zmr),e(K,qT),e(qT,__e),e(__e,egr),e(qT,ogr),e(qT,cO),e(cO,rgr),e(qT,tgr),e(K,agr),e(K,GT),e(GT,u_e),e(u_e,ngr),e(GT,sgr),e(GT,fO),e(fO,lgr),e(GT,igr),e(K,dgr),e(K,OT),e(OT,b_e),e(b_e,cgr),e(OT,fgr),e(OT,mO),e(mO,mgr),e(OT,ggr),e(K,hgr),e(K,XT),e(XT,v_e),e(v_e,pgr),e(XT,_gr),e(XT,gO),e(gO,ugr),e(XT,bgr),e(K,vgr),e(K,VT),e(VT,T_e),e(T_e,Tgr),e(VT,Fgr),e(VT,hO),e(hO,Cgr),e(VT,Mgr),e(K,Egr),e(K,zT),e(zT,F_e),e(F_e,ygr),e(zT,wgr),e(zT,pO),e(pO,Agr),e(zT,Lgr),e(K,Bgr),e(K,WT),e(WT,C_e),e(C_e,xgr),e(WT,kgr),e(WT,_O),e(_O,Rgr),e(WT,Sgr),e(K,Pgr),e(K,QT),e(QT,M_e),e(M_e,$gr),e(QT,Igr),e(QT,uO),e(uO,Dgr),e(QT,jgr),e(K,Ngr),e(K,HT),e(HT,E_e),e(E_e,qgr),e(HT,Ggr),e(HT,bO),e(bO,Ogr),e(HT,Xgr),e(K,Vgr),e(K,UT),e(UT,y_e),e(y_e,zgr),e(UT,Wgr),e(UT,vO),e(vO,Qgr),e(UT,Hgr),e(K,Ugr),e(K,JT),e(JT,w_e),e(w_e,Jgr),e(JT,Ygr),e(JT,TO),e(TO,Kgr),e(JT,Zgr),e(K,ehr),e(K,YT),e(YT,A_e),e(A_e,ohr),e(YT,rhr),e(YT,FO),e(FO,thr),e(YT,ahr),e(K,nhr),e(K,KT),e(KT,L_e),e(L_e,shr),e(KT,lhr),e(KT,CO),e(CO,ihr),e(KT,dhr),e(K,chr),e(K,ZT),e(ZT,B_e),e(B_e,fhr),e(ZT,mhr),e(ZT,MO),e(MO,ghr),e(ZT,hhr),e(K,phr),e(K,eF),e(eF,x_e),e(x_e,_hr),e(eF,uhr),e(eF,EO),e(EO,bhr),e(eF,vhr),e(K,Thr),e(K,oF),e(oF,k_e),e(k_e,Fhr),e(oF,Chr),e(oF,yO),e(yO,Mhr),e(oF,Ehr),e(K,yhr),e(K,rF),e(rF,R_e),e(R_e,whr),e(rF,Ahr),e(rF,wO),e(wO,Lhr),e(rF,Bhr),e(K,xhr),e(K,tF),e(tF,S_e),e(S_e,khr),e(tF,Rhr),e(tF,AO),e(AO,Shr),e(tF,Phr),e(Co,$hr),e(Co,P_e),e(P_e,Ihr),e(Co,Dhr),g(h6,Co,null),b(c,rxe,u),b(c,kc,u),e(kc,aF),e(aF,$_e),g(p6,$_e,null),e(kc,jhr),e(kc,I_e),e(I_e,Nhr),b(c,txe,u),b(c,yr,u),g(_6,yr,null),e(yr,qhr),e(yr,Rc),e(Rc,Ghr),e(Rc,D_e),e(D_e,Ohr),e(Rc,Xhr),e(Rc,j_e),e(j_e,Vhr),e(Rc,zhr),e(yr,Whr),e(yr,u6),e(u6,Qhr),e(u6,N_e),e(N_e,Hhr),e(u6,Uhr),e(yr,Jhr),e(yr,bt),g(b6,bt,null),e(bt,Yhr),e(bt,q_e),e(q_e,Khr),e(bt,Zhr),e(bt,Sc),e(Sc,epr),e(Sc,G_e),e(G_e,opr),e(Sc,rpr),e(Sc,O_e),e(O_e,tpr),e(Sc,apr),e(bt,npr),e(bt,X_e),e(X_e,spr),e(bt,lpr),g(v6,bt,null),e(yr,ipr),e(yr,Mo),g(T6,Mo,null),e(Mo,dpr),e(Mo,V_e),e(V_e,cpr),e(Mo,fpr),e(Mo,Tn),e(Tn,mpr),e(Tn,z_e),e(z_e,gpr),e(Tn,hpr),e(Tn,W_e),e(W_e,ppr),e(Tn,_pr),e(Tn,Q_e),e(Q_e,upr),e(Tn,bpr),e(Mo,vpr),e(Mo,Z),e(Z,nF),e(nF,H_e),e(H_e,Tpr),e(nF,Fpr),e(nF,LO),e(LO,Cpr),e(nF,Mpr),e(Z,Epr),e(Z,sF),e(sF,U_e),e(U_e,ypr),e(sF,wpr),e(sF,BO),e(BO,Apr),e(sF,Lpr),e(Z,Bpr),e(Z,lF),e(lF,J_e),e(J_e,xpr),e(lF,kpr),e(lF,xO),e(xO,Rpr),e(lF,Spr),e(Z,Ppr),e(Z,iF),e(iF,Y_e),e(Y_e,$pr),e(iF,Ipr),e(iF,kO),e(kO,Dpr),e(iF,jpr),e(Z,Npr),e(Z,dF),e(dF,K_e),e(K_e,qpr),e(dF,Gpr),e(dF,RO),e(RO,Opr),e(dF,Xpr),e(Z,Vpr),e(Z,cF),e(cF,Z_e),e(Z_e,zpr),e(cF,Wpr),e(cF,SO),e(SO,Qpr),e(cF,Hpr),e(Z,Upr),e(Z,fF),e(fF,eue),e(eue,Jpr),e(fF,Ypr),e(fF,PO),e(PO,Kpr),e(fF,Zpr),e(Z,e_r),e(Z,mF),e(mF,oue),e(oue,o_r),e(mF,r_r),e(mF,$O),e($O,t_r),e(mF,a_r),e(Z,n_r),e(Z,gF),e(gF,rue),e(rue,s_r),e(gF,l_r),e(gF,IO),e(IO,i_r),e(gF,d_r),e(Z,c_r),e(Z,hF),e(hF,tue),e(tue,f_r),e(hF,m_r),e(hF,DO),e(DO,g_r),e(hF,h_r),e(Z,p_r),e(Z,pF),e(pF,aue),e(aue,__r),e(pF,u_r),e(pF,jO),e(jO,b_r),e(pF,v_r),e(Z,T_r),e(Z,_F),e(_F,nue),e(nue,F_r),e(_F,C_r),e(_F,NO),e(NO,M_r),e(_F,E_r),e(Z,y_r),e(Z,uF),e(uF,sue),e(sue,w_r),e(uF,A_r),e(uF,qO),e(qO,L_r),e(uF,B_r),e(Z,x_r),e(Z,bF),e(bF,lue),e(lue,k_r),e(bF,R_r),e(bF,GO),e(GO,S_r),e(bF,P_r),e(Z,$_r),e(Z,vF),e(vF,iue),e(iue,I_r),e(vF,D_r),e(vF,OO),e(OO,j_r),e(vF,N_r),e(Z,q_r),e(Z,TF),e(TF,due),e(due,G_r),e(TF,O_r),e(TF,XO),e(XO,X_r),e(TF,V_r),e(Z,z_r),e(Z,FF),e(FF,cue),e(cue,W_r),e(FF,Q_r),e(FF,VO),e(VO,H_r),e(FF,U_r),e(Z,J_r),e(Z,CF),e(CF,fue),e(fue,Y_r),e(CF,K_r),e(CF,zO),e(zO,Z_r),e(CF,eur),e(Z,our),e(Z,MF),e(MF,mue),e(mue,rur),e(MF,tur),e(MF,WO),e(WO,aur),e(MF,nur),e(Mo,sur),e(Mo,gue),e(gue,lur),e(Mo,iur),g(F6,Mo,null),b(c,axe,u),b(c,Pc,u),e(Pc,EF),e(EF,hue),g(C6,hue,null),e(Pc,dur),e(Pc,pue),e(pue,cur),b(c,nxe,u),b(c,wr,u),g(M6,wr,null),e(wr,fur),e(wr,$c),e($c,mur),e($c,_ue),e(_ue,gur),e($c,hur),e($c,uue),e(uue,pur),e($c,_ur),e(wr,uur),e(wr,E6),e(E6,bur),e(E6,bue),e(bue,vur),e(E6,Tur),e(wr,Fur),e(wr,vt),g(y6,vt,null),e(vt,Cur),e(vt,vue),e(vue,Mur),e(vt,Eur),e(vt,Ic),e(Ic,yur),e(Ic,Tue),e(Tue,wur),e(Ic,Aur),e(Ic,Fue),e(Fue,Lur),e(Ic,Bur),e(vt,xur),e(vt,Cue),e(Cue,kur),e(vt,Rur),g(w6,vt,null),e(wr,Sur),e(wr,Eo),g(A6,Eo,null),e(Eo,Pur),e(Eo,Mue),e(Mue,$ur),e(Eo,Iur),e(Eo,Fn),e(Fn,Dur),e(Fn,Eue),e(Eue,jur),e(Fn,Nur),e(Fn,yue),e(yue,qur),e(Fn,Gur),e(Fn,wue),e(wue,Our),e(Fn,Xur),e(Eo,Vur),e(Eo,Aue),e(Aue,yF),e(yF,Lue),e(Lue,zur),e(yF,Wur),e(yF,QO),e(QO,Qur),e(yF,Hur),e(Eo,Uur),e(Eo,Bue),e(Bue,Jur),e(Eo,Yur),g(L6,Eo,null),b(c,sxe,u),b(c,Dc,u),e(Dc,wF),e(wF,xue),g(B6,xue,null),e(Dc,Kur),e(Dc,kue),e(kue,Zur),b(c,lxe,u),b(c,Ar,u),g(x6,Ar,null),e(Ar,e1r),e(Ar,jc),e(jc,o1r),e(jc,Rue),e(Rue,r1r),e(jc,t1r),e(jc,Sue),e(Sue,a1r),e(jc,n1r),e(Ar,s1r),e(Ar,k6),e(k6,l1r),e(k6,Pue),e(Pue,i1r),e(k6,d1r),e(Ar,c1r),e(Ar,Tt),g(R6,Tt,null),e(Tt,f1r),e(Tt,$ue),e($ue,m1r),e(Tt,g1r),e(Tt,Nc),e(Nc,h1r),e(Nc,Iue),e(Iue,p1r),e(Nc,_1r),e(Nc,Due),e(Due,u1r),e(Nc,b1r),e(Tt,v1r),e(Tt,jue),e(jue,T1r),e(Tt,F1r),g(S6,Tt,null),e(Ar,C1r),e(Ar,yo),g(P6,yo,null),e(yo,M1r),e(yo,Nue),e(Nue,E1r),e(yo,y1r),e(yo,Cn),e(Cn,w1r),e(Cn,que),e(que,A1r),e(Cn,L1r),e(Cn,Gue),e(Gue,B1r),e(Cn,x1r),e(Cn,Oue),e(Oue,k1r),e(Cn,R1r),e(yo,S1r),e(yo,Xue),e(Xue,AF),e(AF,Vue),e(Vue,P1r),e(AF,$1r),e(AF,HO),e(HO,I1r),e(AF,D1r),e(yo,j1r),e(yo,zue),e(zue,N1r),e(yo,q1r),g($6,yo,null),b(c,ixe,u),b(c,qc,u),e(qc,LF),e(LF,Wue),g(I6,Wue,null),e(qc,G1r),e(qc,Que),e(Que,O1r),b(c,dxe,u),b(c,Lr,u),g(D6,Lr,null),e(Lr,X1r),e(Lr,Gc),e(Gc,V1r),e(Gc,Hue),e(Hue,z1r),e(Gc,W1r),e(Gc,Uue),e(Uue,Q1r),e(Gc,H1r),e(Lr,U1r),e(Lr,j6),e(j6,J1r),e(j6,Jue),e(Jue,Y1r),e(j6,K1r),e(Lr,Z1r),e(Lr,Ft),g(N6,Ft,null),e(Ft,e7r),e(Ft,Yue),e(Yue,o7r),e(Ft,r7r),e(Ft,Oc),e(Oc,t7r),e(Oc,Kue),e(Kue,a7r),e(Oc,n7r),e(Oc,Zue),e(Zue,s7r),e(Oc,l7r),e(Ft,i7r),e(Ft,e1e),e(e1e,d7r),e(Ft,c7r),g(q6,Ft,null),e(Lr,f7r),e(Lr,wo),g(G6,wo,null),e(wo,m7r),e(wo,o1e),e(o1e,g7r),e(wo,h7r),e(wo,Mn),e(Mn,p7r),e(Mn,r1e),e(r1e,_7r),e(Mn,u7r),e(Mn,t1e),e(t1e,b7r),e(Mn,v7r),e(Mn,a1e),e(a1e,T7r),e(Mn,F7r),e(wo,C7r),e(wo,z),e(z,BF),e(BF,n1e),e(n1e,M7r),e(BF,E7r),e(BF,UO),e(UO,y7r),e(BF,w7r),e(z,A7r),e(z,xF),e(xF,s1e),e(s1e,L7r),e(xF,B7r),e(xF,JO),e(JO,x7r),e(xF,k7r),e(z,R7r),e(z,kF),e(kF,l1e),e(l1e,S7r),e(kF,P7r),e(kF,YO),e(YO,$7r),e(kF,I7r),e(z,D7r),e(z,RF),e(RF,i1e),e(i1e,j7r),e(RF,N7r),e(RF,KO),e(KO,q7r),e(RF,G7r),e(z,O7r),e(z,SF),e(SF,d1e),e(d1e,X7r),e(SF,V7r),e(SF,ZO),e(ZO,z7r),e(SF,W7r),e(z,Q7r),e(z,PF),e(PF,c1e),e(c1e,H7r),e(PF,U7r),e(PF,eX),e(eX,J7r),e(PF,Y7r),e(z,K7r),e(z,$F),e($F,f1e),e(f1e,Z7r),e($F,ebr),e($F,oX),e(oX,obr),e($F,rbr),e(z,tbr),e(z,IF),e(IF,m1e),e(m1e,abr),e(IF,nbr),e(IF,rX),e(rX,sbr),e(IF,lbr),e(z,ibr),e(z,DF),e(DF,g1e),e(g1e,dbr),e(DF,cbr),e(DF,tX),e(tX,fbr),e(DF,mbr),e(z,gbr),e(z,jF),e(jF,h1e),e(h1e,hbr),e(jF,pbr),e(jF,aX),e(aX,_br),e(jF,ubr),e(z,bbr),e(z,NF),e(NF,p1e),e(p1e,vbr),e(NF,Tbr),e(NF,nX),e(nX,Fbr),e(NF,Cbr),e(z,Mbr),e(z,qF),e(qF,_1e),e(_1e,Ebr),e(qF,ybr),e(qF,sX),e(sX,wbr),e(qF,Abr),e(z,Lbr),e(z,GF),e(GF,u1e),e(u1e,Bbr),e(GF,xbr),e(GF,lX),e(lX,kbr),e(GF,Rbr),e(z,Sbr),e(z,OF),e(OF,b1e),e(b1e,Pbr),e(OF,$br),e(OF,iX),e(iX,Ibr),e(OF,Dbr),e(z,jbr),e(z,XF),e(XF,v1e),e(v1e,Nbr),e(XF,qbr),e(XF,dX),e(dX,Gbr),e(XF,Obr),e(z,Xbr),e(z,VF),e(VF,T1e),e(T1e,Vbr),e(VF,zbr),e(VF,cX),e(cX,Wbr),e(VF,Qbr),e(z,Hbr),e(z,zF),e(zF,F1e),e(F1e,Ubr),e(zF,Jbr),e(zF,fX),e(fX,Ybr),e(zF,Kbr),e(z,Zbr),e(z,WF),e(WF,C1e),e(C1e,e5r),e(WF,o5r),e(WF,mX),e(mX,r5r),e(WF,t5r),e(z,a5r),e(z,QF),e(QF,M1e),e(M1e,n5r),e(QF,s5r),e(QF,gX),e(gX,l5r),e(QF,i5r),e(z,d5r),e(z,HF),e(HF,E1e),e(E1e,c5r),e(HF,f5r),e(HF,hX),e(hX,m5r),e(HF,g5r),e(z,h5r),e(z,UF),e(UF,y1e),e(y1e,p5r),e(UF,_5r),e(UF,pX),e(pX,u5r),e(UF,b5r),e(z,v5r),e(z,JF),e(JF,w1e),e(w1e,T5r),e(JF,F5r),e(JF,_X),e(_X,C5r),e(JF,M5r),e(z,E5r),e(z,YF),e(YF,A1e),e(A1e,y5r),e(YF,w5r),e(YF,uX),e(uX,A5r),e(YF,L5r),e(z,B5r),e(z,KF),e(KF,L1e),e(L1e,x5r),e(KF,k5r),e(KF,bX),e(bX,R5r),e(KF,S5r),e(wo,P5r),e(wo,B1e),e(B1e,$5r),e(wo,I5r),g(O6,wo,null),b(c,cxe,u),b(c,Xc,u),e(Xc,ZF),e(ZF,x1e),g(X6,x1e,null),e(Xc,D5r),e(Xc,k1e),e(k1e,j5r),b(c,fxe,u),b(c,Br,u),g(V6,Br,null),e(Br,N5r),e(Br,Vc),e(Vc,q5r),e(Vc,R1e),e(R1e,G5r),e(Vc,O5r),e(Vc,S1e),e(S1e,X5r),e(Vc,V5r),e(Br,z5r),e(Br,z6),e(z6,W5r),e(z6,P1e),e(P1e,Q5r),e(z6,H5r),e(Br,U5r),e(Br,Ct),g(W6,Ct,null),e(Ct,J5r),e(Ct,$1e),e($1e,Y5r),e(Ct,K5r),e(Ct,zc),e(zc,Z5r),e(zc,I1e),e(I1e,e2r),e(zc,o2r),e(zc,D1e),e(D1e,r2r),e(zc,t2r),e(Ct,a2r),e(Ct,j1e),e(j1e,n2r),e(Ct,s2r),g(Q6,Ct,null),e(Br,l2r),e(Br,Ao),g(H6,Ao,null),e(Ao,i2r),e(Ao,N1e),e(N1e,d2r),e(Ao,c2r),e(Ao,En),e(En,f2r),e(En,q1e),e(q1e,m2r),e(En,g2r),e(En,G1e),e(G1e,h2r),e(En,p2r),e(En,O1e),e(O1e,_2r),e(En,u2r),e(Ao,b2r),e(Ao,yn),e(yn,eC),e(eC,X1e),e(X1e,v2r),e(eC,T2r),e(eC,vX),e(vX,F2r),e(eC,C2r),e(yn,M2r),e(yn,oC),e(oC,V1e),e(V1e,E2r),e(oC,y2r),e(oC,TX),e(TX,w2r),e(oC,A2r),e(yn,L2r),e(yn,rC),e(rC,z1e),e(z1e,B2r),e(rC,x2r),e(rC,FX),e(FX,k2r),e(rC,R2r),e(yn,S2r),e(yn,tC),e(tC,W1e),e(W1e,P2r),e(tC,$2r),e(tC,CX),e(CX,I2r),e(tC,D2r),e(Ao,j2r),e(Ao,Q1e),e(Q1e,N2r),e(Ao,q2r),g(U6,Ao,null),b(c,mxe,u),b(c,Wc,u),e(Wc,aC),e(aC,H1e),g(J6,H1e,null),e(Wc,G2r),e(Wc,U1e),e(U1e,O2r),b(c,gxe,u),b(c,xr,u),g(Y6,xr,null),e(xr,X2r),e(xr,Qc),e(Qc,V2r),e(Qc,J1e),e(J1e,z2r),e(Qc,W2r),e(Qc,Y1e),e(Y1e,Q2r),e(Qc,H2r),e(xr,U2r),e(xr,K6),e(K6,J2r),e(K6,K1e),e(K1e,Y2r),e(K6,K2r),e(xr,Z2r),e(xr,Mt),g(Z6,Mt,null),e(Mt,evr),e(Mt,Z1e),e(Z1e,ovr),e(Mt,rvr),e(Mt,Hc),e(Hc,tvr),e(Hc,e7e),e(e7e,avr),e(Hc,nvr),e(Hc,o7e),e(o7e,svr),e(Hc,lvr),e(Mt,ivr),e(Mt,r7e),e(r7e,dvr),e(Mt,cvr),g(eA,Mt,null),e(xr,fvr),e(xr,Lo),g(oA,Lo,null),e(Lo,mvr),e(Lo,t7e),e(t7e,gvr),e(Lo,hvr),e(Lo,wn),e(wn,pvr),e(wn,a7e),e(a7e,_vr),e(wn,uvr),e(wn,n7e),e(n7e,bvr),e(wn,vvr),e(wn,s7e),e(s7e,Tvr),e(wn,Fvr),e(Lo,Cvr),e(Lo,fe),e(fe,nC),e(nC,l7e),e(l7e,Mvr),e(nC,Evr),e(nC,MX),e(MX,yvr),e(nC,wvr),e(fe,Avr),e(fe,sC),e(sC,i7e),e(i7e,Lvr),e(sC,Bvr),e(sC,EX),e(EX,xvr),e(sC,kvr),e(fe,Rvr),e(fe,lC),e(lC,d7e),e(d7e,Svr),e(lC,Pvr),e(lC,yX),e(yX,$vr),e(lC,Ivr),e(fe,Dvr),e(fe,iC),e(iC,c7e),e(c7e,jvr),e(iC,Nvr),e(iC,wX),e(wX,qvr),e(iC,Gvr),e(fe,Ovr),e(fe,dC),e(dC,f7e),e(f7e,Xvr),e(dC,Vvr),e(dC,AX),e(AX,zvr),e(dC,Wvr),e(fe,Qvr),e(fe,cC),e(cC,m7e),e(m7e,Hvr),e(cC,Uvr),e(cC,LX),e(LX,Jvr),e(cC,Yvr),e(fe,Kvr),e(fe,fC),e(fC,g7e),e(g7e,Zvr),e(fC,e0r),e(fC,BX),e(BX,o0r),e(fC,r0r),e(fe,t0r),e(fe,mC),e(mC,h7e),e(h7e,a0r),e(mC,n0r),e(mC,xX),e(xX,s0r),e(mC,l0r),e(fe,i0r),e(fe,gC),e(gC,p7e),e(p7e,d0r),e(gC,c0r),e(gC,kX),e(kX,f0r),e(gC,m0r),e(fe,g0r),e(fe,hC),e(hC,_7e),e(_7e,h0r),e(hC,p0r),e(hC,RX),e(RX,_0r),e(hC,u0r),e(fe,b0r),e(fe,pC),e(pC,u7e),e(u7e,v0r),e(pC,T0r),e(pC,SX),e(SX,F0r),e(pC,C0r),e(Lo,M0r),e(Lo,b7e),e(b7e,E0r),e(Lo,y0r),g(rA,Lo,null),b(c,hxe,u),b(c,Uc,u),e(Uc,_C),e(_C,v7e),g(tA,v7e,null),e(Uc,w0r),e(Uc,T7e),e(T7e,A0r),b(c,pxe,u),b(c,kr,u),g(aA,kr,null),e(kr,L0r),e(kr,Jc),e(Jc,B0r),e(Jc,F7e),e(F7e,x0r),e(Jc,k0r),e(Jc,C7e),e(C7e,R0r),e(Jc,S0r),e(kr,P0r),e(kr,nA),e(nA,$0r),e(nA,M7e),e(M7e,I0r),e(nA,D0r),e(kr,j0r),e(kr,Et),g(sA,Et,null),e(Et,N0r),e(Et,E7e),e(E7e,q0r),e(Et,G0r),e(Et,Yc),e(Yc,O0r),e(Yc,y7e),e(y7e,X0r),e(Yc,V0r),e(Yc,w7e),e(w7e,z0r),e(Yc,W0r),e(Et,Q0r),e(Et,A7e),e(A7e,H0r),e(Et,U0r),g(lA,Et,null),e(kr,J0r),e(kr,Bo),g(iA,Bo,null),e(Bo,Y0r),e(Bo,L7e),e(L7e,K0r),e(Bo,Z0r),e(Bo,An),e(An,eTr),e(An,B7e),e(B7e,oTr),e(An,rTr),e(An,x7e),e(x7e,tTr),e(An,aTr),e(An,k7e),e(k7e,nTr),e(An,sTr),e(Bo,lTr),e(Bo,ve),e(ve,uC),e(uC,R7e),e(R7e,iTr),e(uC,dTr),e(uC,PX),e(PX,cTr),e(uC,fTr),e(ve,mTr),e(ve,bC),e(bC,S7e),e(S7e,gTr),e(bC,hTr),e(bC,$X),e($X,pTr),e(bC,_Tr),e(ve,uTr),e(ve,vC),e(vC,P7e),e(P7e,bTr),e(vC,vTr),e(vC,IX),e(IX,TTr),e(vC,FTr),e(ve,CTr),e(ve,TC),e(TC,$7e),e($7e,MTr),e(TC,ETr),e(TC,DX),e(DX,yTr),e(TC,wTr),e(ve,ATr),e(ve,FC),e(FC,I7e),e(I7e,LTr),e(FC,BTr),e(FC,jX),e(jX,xTr),e(FC,kTr),e(ve,RTr),e(ve,CC),e(CC,D7e),e(D7e,STr),e(CC,PTr),e(CC,NX),e(NX,$Tr),e(CC,ITr),e(ve,DTr),e(ve,MC),e(MC,j7e),e(j7e,jTr),e(MC,NTr),e(MC,qX),e(qX,qTr),e(MC,GTr),e(ve,OTr),e(ve,EC),e(EC,N7e),e(N7e,XTr),e(EC,VTr),e(EC,GX),e(GX,zTr),e(EC,WTr),e(ve,QTr),e(ve,yC),e(yC,q7e),e(q7e,HTr),e(yC,UTr),e(yC,OX),e(OX,JTr),e(yC,YTr),e(Bo,KTr),e(Bo,G7e),e(G7e,ZTr),e(Bo,eFr),g(dA,Bo,null),b(c,_xe,u),b(c,Kc,u),e(Kc,wC),e(wC,O7e),g(cA,O7e,null),e(Kc,oFr),e(Kc,X7e),e(X7e,rFr),b(c,uxe,u),b(c,Rr,u),g(fA,Rr,null),e(Rr,tFr),e(Rr,Zc),e(Zc,aFr),e(Zc,V7e),e(V7e,nFr),e(Zc,sFr),e(Zc,z7e),e(z7e,lFr),e(Zc,iFr),e(Rr,dFr),e(Rr,mA),e(mA,cFr),e(mA,W7e),e(W7e,fFr),e(mA,mFr),e(Rr,gFr),e(Rr,yt),g(gA,yt,null),e(yt,hFr),e(yt,Q7e),e(Q7e,pFr),e(yt,_Fr),e(yt,ef),e(ef,uFr),e(ef,H7e),e(H7e,bFr),e(ef,vFr),e(ef,U7e),e(U7e,TFr),e(ef,FFr),e(yt,CFr),e(yt,J7e),e(J7e,MFr),e(yt,EFr),g(hA,yt,null),e(Rr,yFr),e(Rr,xo),g(pA,xo,null),e(xo,wFr),e(xo,Y7e),e(Y7e,AFr),e(xo,LFr),e(xo,Ln),e(Ln,BFr),e(Ln,K7e),e(K7e,xFr),e(Ln,kFr),e(Ln,Z7e),e(Z7e,RFr),e(Ln,SFr),e(Ln,ebe),e(ebe,PFr),e(Ln,$Fr),e(xo,IFr),e(xo,Te),e(Te,AC),e(AC,obe),e(obe,DFr),e(AC,jFr),e(AC,XX),e(XX,NFr),e(AC,qFr),e(Te,GFr),e(Te,LC),e(LC,rbe),e(rbe,OFr),e(LC,XFr),e(LC,VX),e(VX,VFr),e(LC,zFr),e(Te,WFr),e(Te,BC),e(BC,tbe),e(tbe,QFr),e(BC,HFr),e(BC,zX),e(zX,UFr),e(BC,JFr),e(Te,YFr),e(Te,xC),e(xC,abe),e(abe,KFr),e(xC,ZFr),e(xC,WX),e(WX,eCr),e(xC,oCr),e(Te,rCr),e(Te,kC),e(kC,nbe),e(nbe,tCr),e(kC,aCr),e(kC,QX),e(QX,nCr),e(kC,sCr),e(Te,lCr),e(Te,RC),e(RC,sbe),e(sbe,iCr),e(RC,dCr),e(RC,HX),e(HX,cCr),e(RC,fCr),e(Te,mCr),e(Te,SC),e(SC,lbe),e(lbe,gCr),e(SC,hCr),e(SC,UX),e(UX,pCr),e(SC,_Cr),e(Te,uCr),e(Te,PC),e(PC,ibe),e(ibe,bCr),e(PC,vCr),e(PC,JX),e(JX,TCr),e(PC,FCr),e(Te,CCr),e(Te,$C),e($C,dbe),e(dbe,MCr),e($C,ECr),e($C,YX),e(YX,yCr),e($C,wCr),e(xo,ACr),e(xo,cbe),e(cbe,LCr),e(xo,BCr),g(_A,xo,null),b(c,bxe,u),b(c,of,u),e(of,IC),e(IC,fbe),g(uA,fbe,null),e(of,xCr),e(of,mbe),e(mbe,kCr),b(c,vxe,u),b(c,Sr,u),g(bA,Sr,null),e(Sr,RCr),e(Sr,rf),e(rf,SCr),e(rf,gbe),e(gbe,PCr),e(rf,$Cr),e(rf,hbe),e(hbe,ICr),e(rf,DCr),e(Sr,jCr),e(Sr,vA),e(vA,NCr),e(vA,pbe),e(pbe,qCr),e(vA,GCr),e(Sr,OCr),e(Sr,wt),g(TA,wt,null),e(wt,XCr),e(wt,_be),e(_be,VCr),e(wt,zCr),e(wt,tf),e(tf,WCr),e(tf,ube),e(ube,QCr),e(tf,HCr),e(tf,bbe),e(bbe,UCr),e(tf,JCr),e(wt,YCr),e(wt,vbe),e(vbe,KCr),e(wt,ZCr),g(FA,wt,null),e(Sr,e4r),e(Sr,ko),g(CA,ko,null),e(ko,o4r),e(ko,Tbe),e(Tbe,r4r),e(ko,t4r),e(ko,Bn),e(Bn,a4r),e(Bn,Fbe),e(Fbe,n4r),e(Bn,s4r),e(Bn,Cbe),e(Cbe,l4r),e(Bn,i4r),e(Bn,Mbe),e(Mbe,d4r),e(Bn,c4r),e(ko,f4r),e(ko,Fe),e(Fe,DC),e(DC,Ebe),e(Ebe,m4r),e(DC,g4r),e(DC,KX),e(KX,h4r),e(DC,p4r),e(Fe,_4r),e(Fe,jC),e(jC,ybe),e(ybe,u4r),e(jC,b4r),e(jC,ZX),e(ZX,v4r),e(jC,T4r),e(Fe,F4r),e(Fe,NC),e(NC,wbe),e(wbe,C4r),e(NC,M4r),e(NC,eV),e(eV,E4r),e(NC,y4r),e(Fe,w4r),e(Fe,qC),e(qC,Abe),e(Abe,A4r),e(qC,L4r),e(qC,oV),e(oV,B4r),e(qC,x4r),e(Fe,k4r),e(Fe,GC),e(GC,Lbe),e(Lbe,R4r),e(GC,S4r),e(GC,rV),e(rV,P4r),e(GC,$4r),e(Fe,I4r),e(Fe,OC),e(OC,Bbe),e(Bbe,D4r),e(OC,j4r),e(OC,tV),e(tV,N4r),e(OC,q4r),e(Fe,G4r),e(Fe,XC),e(XC,xbe),e(xbe,O4r),e(XC,X4r),e(XC,aV),e(aV,V4r),e(XC,z4r),e(Fe,W4r),e(Fe,VC),e(VC,kbe),e(kbe,Q4r),e(VC,H4r),e(VC,nV),e(nV,U4r),e(VC,J4r),e(Fe,Y4r),e(Fe,zC),e(zC,Rbe),e(Rbe,K4r),e(zC,Z4r),e(zC,sV),e(sV,eMr),e(zC,oMr),e(ko,rMr),e(ko,Sbe),e(Sbe,tMr),e(ko,aMr),g(MA,ko,null),b(c,Txe,u),b(c,af,u),e(af,WC),e(WC,Pbe),g(EA,Pbe,null),e(af,nMr),e(af,$be),e($be,sMr),b(c,Fxe,u),b(c,Pr,u),g(yA,Pr,null),e(Pr,lMr),e(Pr,nf),e(nf,iMr),e(nf,Ibe),e(Ibe,dMr),e(nf,cMr),e(nf,Dbe),e(Dbe,fMr),e(nf,mMr),e(Pr,gMr),e(Pr,wA),e(wA,hMr),e(wA,jbe),e(jbe,pMr),e(wA,_Mr),e(Pr,uMr),e(Pr,At),g(AA,At,null),e(At,bMr),e(At,Nbe),e(Nbe,vMr),e(At,TMr),e(At,sf),e(sf,FMr),e(sf,qbe),e(qbe,CMr),e(sf,MMr),e(sf,Gbe),e(Gbe,EMr),e(sf,yMr),e(At,wMr),e(At,Obe),e(Obe,AMr),e(At,LMr),g(LA,At,null),e(Pr,BMr),e(Pr,Ro),g(BA,Ro,null),e(Ro,xMr),e(Ro,Xbe),e(Xbe,kMr),e(Ro,RMr),e(Ro,xn),e(xn,SMr),e(xn,Vbe),e(Vbe,PMr),e(xn,$Mr),e(xn,zbe),e(zbe,IMr),e(xn,DMr),e(xn,Wbe),e(Wbe,jMr),e(xn,NMr),e(Ro,qMr),e(Ro,Ce),e(Ce,QC),e(QC,Qbe),e(Qbe,GMr),e(QC,OMr),e(QC,lV),e(lV,XMr),e(QC,VMr),e(Ce,zMr),e(Ce,HC),e(HC,Hbe),e(Hbe,WMr),e(HC,QMr),e(HC,iV),e(iV,HMr),e(HC,UMr),e(Ce,JMr),e(Ce,UC),e(UC,Ube),e(Ube,YMr),e(UC,KMr),e(UC,dV),e(dV,ZMr),e(UC,eEr),e(Ce,oEr),e(Ce,JC),e(JC,Jbe),e(Jbe,rEr),e(JC,tEr),e(JC,cV),e(cV,aEr),e(JC,nEr),e(Ce,sEr),e(Ce,YC),e(YC,Ybe),e(Ybe,lEr),e(YC,iEr),e(YC,fV),e(fV,dEr),e(YC,cEr),e(Ce,fEr),e(Ce,KC),e(KC,Kbe),e(Kbe,mEr),e(KC,gEr),e(KC,mV),e(mV,hEr),e(KC,pEr),e(Ce,_Er),e(Ce,ZC),e(ZC,Zbe),e(Zbe,uEr),e(ZC,bEr),e(ZC,gV),e(gV,vEr),e(ZC,TEr),e(Ce,FEr),e(Ce,e4),e(e4,e5e),e(e5e,CEr),e(e4,MEr),e(e4,hV),e(hV,EEr),e(e4,yEr),e(Ce,wEr),e(Ce,o4),e(o4,o5e),e(o5e,AEr),e(o4,LEr),e(o4,pV),e(pV,BEr),e(o4,xEr),e(Ro,kEr),e(Ro,r5e),e(r5e,REr),e(Ro,SEr),g(xA,Ro,null),b(c,Cxe,u),b(c,lf,u),e(lf,r4),e(r4,t5e),g(kA,t5e,null),e(lf,PEr),e(lf,a5e),e(a5e,$Er),b(c,Mxe,u),b(c,$r,u),g(RA,$r,null),e($r,IEr),e($r,df),e(df,DEr),e(df,n5e),e(n5e,jEr),e(df,NEr),e(df,s5e),e(s5e,qEr),e(df,GEr),e($r,OEr),e($r,SA),e(SA,XEr),e(SA,l5e),e(l5e,VEr),e(SA,zEr),e($r,WEr),e($r,Lt),g(PA,Lt,null),e(Lt,QEr),e(Lt,i5e),e(i5e,HEr),e(Lt,UEr),e(Lt,cf),e(cf,JEr),e(cf,d5e),e(d5e,YEr),e(cf,KEr),e(cf,c5e),e(c5e,ZEr),e(cf,e3r),e(Lt,o3r),e(Lt,f5e),e(f5e,r3r),e(Lt,t3r),g($A,Lt,null),e($r,a3r),e($r,So),g(IA,So,null),e(So,n3r),e(So,m5e),e(m5e,s3r),e(So,l3r),e(So,kn),e(kn,i3r),e(kn,g5e),e(g5e,d3r),e(kn,c3r),e(kn,h5e),e(h5e,f3r),e(kn,m3r),e(kn,p5e),e(p5e,g3r),e(kn,h3r),e(So,p3r),e(So,so),e(so,t4),e(t4,_5e),e(_5e,_3r),e(t4,u3r),e(t4,_V),e(_V,b3r),e(t4,v3r),e(so,T3r),e(so,a4),e(a4,u5e),e(u5e,F3r),e(a4,C3r),e(a4,uV),e(uV,M3r),e(a4,E3r),e(so,y3r),e(so,n4),e(n4,b5e),e(b5e,w3r),e(n4,A3r),e(n4,bV),e(bV,L3r),e(n4,B3r),e(so,x3r),e(so,s4),e(s4,v5e),e(v5e,k3r),e(s4,R3r),e(s4,vV),e(vV,S3r),e(s4,P3r),e(so,$3r),e(so,l4),e(l4,T5e),e(T5e,I3r),e(l4,D3r),e(l4,TV),e(TV,j3r),e(l4,N3r),e(so,q3r),e(so,i4),e(i4,F5e),e(F5e,G3r),e(i4,O3r),e(i4,FV),e(FV,X3r),e(i4,V3r),e(so,z3r),e(so,d4),e(d4,C5e),e(C5e,W3r),e(d4,Q3r),e(d4,CV),e(CV,H3r),e(d4,U3r),e(So,J3r),e(So,M5e),e(M5e,Y3r),e(So,K3r),g(DA,So,null),b(c,Exe,u),b(c,ff,u),e(ff,c4),e(c4,E5e),g(jA,E5e,null),e(ff,Z3r),e(ff,y5e),e(y5e,eyr),b(c,yxe,u),b(c,Ir,u),g(NA,Ir,null),e(Ir,oyr),e(Ir,mf),e(mf,ryr),e(mf,w5e),e(w5e,tyr),e(mf,ayr),e(mf,A5e),e(A5e,nyr),e(mf,syr),e(Ir,lyr),e(Ir,qA),e(qA,iyr),e(qA,L5e),e(L5e,dyr),e(qA,cyr),e(Ir,fyr),e(Ir,Bt),g(GA,Bt,null),e(Bt,myr),e(Bt,B5e),e(B5e,gyr),e(Bt,hyr),e(Bt,gf),e(gf,pyr),e(gf,x5e),e(x5e,_yr),e(gf,uyr),e(gf,k5e),e(k5e,byr),e(gf,vyr),e(Bt,Tyr),e(Bt,R5e),e(R5e,Fyr),e(Bt,Cyr),g(OA,Bt,null),e(Ir,Myr),e(Ir,Po),g(XA,Po,null),e(Po,Eyr),e(Po,S5e),e(S5e,yyr),e(Po,wyr),e(Po,Rn),e(Rn,Ayr),e(Rn,P5e),e(P5e,Lyr),e(Rn,Byr),e(Rn,$5e),e($5e,xyr),e(Rn,kyr),e(Rn,I5e),e(I5e,Ryr),e(Rn,Syr),e(Po,Pyr),e(Po,lo),e(lo,f4),e(f4,D5e),e(D5e,$yr),e(f4,Iyr),e(f4,MV),e(MV,Dyr),e(f4,jyr),e(lo,Nyr),e(lo,m4),e(m4,j5e),e(j5e,qyr),e(m4,Gyr),e(m4,EV),e(EV,Oyr),e(m4,Xyr),e(lo,Vyr),e(lo,g4),e(g4,N5e),e(N5e,zyr),e(g4,Wyr),e(g4,yV),e(yV,Qyr),e(g4,Hyr),e(lo,Uyr),e(lo,h4),e(h4,q5e),e(q5e,Jyr),e(h4,Yyr),e(h4,wV),e(wV,Kyr),e(h4,Zyr),e(lo,ewr),e(lo,p4),e(p4,G5e),e(G5e,owr),e(p4,rwr),e(p4,AV),e(AV,twr),e(p4,awr),e(lo,nwr),e(lo,_4),e(_4,O5e),e(O5e,swr),e(_4,lwr),e(_4,LV),e(LV,iwr),e(_4,dwr),e(lo,cwr),e(lo,u4),e(u4,X5e),e(X5e,fwr),e(u4,mwr),e(u4,BV),e(BV,gwr),e(u4,hwr),e(Po,pwr),e(Po,V5e),e(V5e,_wr),e(Po,uwr),g(VA,Po,null),b(c,wxe,u),b(c,hf,u),e(hf,b4),e(b4,z5e),g(zA,z5e,null),e(hf,bwr),e(hf,W5e),e(W5e,vwr),b(c,Axe,u),b(c,Dr,u),g(WA,Dr,null),e(Dr,Twr),e(Dr,pf),e(pf,Fwr),e(pf,Q5e),e(Q5e,Cwr),e(pf,Mwr),e(pf,H5e),e(H5e,Ewr),e(pf,ywr),e(Dr,wwr),e(Dr,QA),e(QA,Awr),e(QA,U5e),e(U5e,Lwr),e(QA,Bwr),e(Dr,xwr),e(Dr,xt),g(HA,xt,null),e(xt,kwr),e(xt,J5e),e(J5e,Rwr),e(xt,Swr),e(xt,_f),e(_f,Pwr),e(_f,Y5e),e(Y5e,$wr),e(_f,Iwr),e(_f,K5e),e(K5e,Dwr),e(_f,jwr),e(xt,Nwr),e(xt,Z5e),e(Z5e,qwr),e(xt,Gwr),g(UA,xt,null),e(Dr,Owr),e(Dr,$o),g(JA,$o,null),e($o,Xwr),e($o,e2e),e(e2e,Vwr),e($o,zwr),e($o,Sn),e(Sn,Wwr),e(Sn,o2e),e(o2e,Qwr),e(Sn,Hwr),e(Sn,r2e),e(r2e,Uwr),e(Sn,Jwr),e(Sn,t2e),e(t2e,Ywr),e(Sn,Kwr),e($o,Zwr),e($o,a2e),e(a2e,v4),e(v4,n2e),e(n2e,e6r),e(v4,o6r),e(v4,xV),e(xV,r6r),e(v4,t6r),e($o,a6r),e($o,s2e),e(s2e,n6r),e($o,s6r),g(YA,$o,null),b(c,Lxe,u),b(c,uf,u),e(uf,T4),e(T4,l2e),g(KA,l2e,null),e(uf,l6r),e(uf,i2e),e(i2e,i6r),b(c,Bxe,u),b(c,jr,u),g(ZA,jr,null),e(jr,d6r),e(jr,bf),e(bf,c6r),e(bf,d2e),e(d2e,f6r),e(bf,m6r),e(bf,c2e),e(c2e,g6r),e(bf,h6r),e(jr,p6r),e(jr,eL),e(eL,_6r),e(eL,f2e),e(f2e,u6r),e(eL,b6r),e(jr,v6r),e(jr,kt),g(oL,kt,null),e(kt,T6r),e(kt,m2e),e(m2e,F6r),e(kt,C6r),e(kt,vf),e(vf,M6r),e(vf,g2e),e(g2e,E6r),e(vf,y6r),e(vf,h2e),e(h2e,w6r),e(vf,A6r),e(kt,L6r),e(kt,p2e),e(p2e,B6r),e(kt,x6r),g(rL,kt,null),e(jr,k6r),e(jr,Io),g(tL,Io,null),e(Io,R6r),e(Io,_2e),e(_2e,S6r),e(Io,P6r),e(Io,Pn),e(Pn,$6r),e(Pn,u2e),e(u2e,I6r),e(Pn,D6r),e(Pn,b2e),e(b2e,j6r),e(Pn,N6r),e(Pn,v2e),e(v2e,q6r),e(Pn,G6r),e(Io,O6r),e(Io,aL),e(aL,F4),e(F4,T2e),e(T2e,X6r),e(F4,V6r),e(F4,kV),e(kV,z6r),e(F4,W6r),e(aL,Q6r),e(aL,C4),e(C4,F2e),e(F2e,H6r),e(C4,U6r),e(C4,RV),e(RV,J6r),e(C4,Y6r),e(Io,K6r),e(Io,C2e),e(C2e,Z6r),e(Io,eAr),g(nL,Io,null),b(c,xxe,u),b(c,Tf,u),e(Tf,M4),e(M4,M2e),g(sL,M2e,null),e(Tf,oAr),e(Tf,E2e),e(E2e,rAr),b(c,kxe,u),b(c,Nr,u),g(lL,Nr,null),e(Nr,tAr),e(Nr,Ff),e(Ff,aAr),e(Ff,y2e),e(y2e,nAr),e(Ff,sAr),e(Ff,w2e),e(w2e,lAr),e(Ff,iAr),e(Nr,dAr),e(Nr,iL),e(iL,cAr),e(iL,A2e),e(A2e,fAr),e(iL,mAr),e(Nr,gAr),e(Nr,Rt),g(dL,Rt,null),e(Rt,hAr),e(Rt,L2e),e(L2e,pAr),e(Rt,_Ar),e(Rt,Cf),e(Cf,uAr),e(Cf,B2e),e(B2e,bAr),e(Cf,vAr),e(Cf,x2e),e(x2e,TAr),e(Cf,FAr),e(Rt,CAr),e(Rt,k2e),e(k2e,MAr),e(Rt,EAr),g(cL,Rt,null),e(Nr,yAr),e(Nr,Do),g(fL,Do,null),e(Do,wAr),e(Do,R2e),e(R2e,AAr),e(Do,LAr),e(Do,$n),e($n,BAr),e($n,S2e),e(S2e,xAr),e($n,kAr),e($n,P2e),e(P2e,RAr),e($n,SAr),e($n,$2e),e($2e,PAr),e($n,$Ar),e(Do,IAr),e(Do,I2e),e(I2e,E4),e(E4,D2e),e(D2e,DAr),e(E4,jAr),e(E4,SV),e(SV,NAr),e(E4,qAr),e(Do,GAr),e(Do,j2e),e(j2e,OAr),e(Do,XAr),g(mL,Do,null),Rxe=!0},p(c,[u]){const gL={};u&2&&(gL.$$scope={dirty:u,ctx:c}),Bf.$set(gL);const N2e={};u&2&&(N2e.$$scope={dirty:u,ctx:c}),mh.$set(N2e);const q2e={};u&2&&(q2e.$$scope={dirty:u,ctx:c}),Mh.$set(q2e)},i(c){Rxe||(h(ce.$$.fragment,c),h($a.$$.fragment,c),h(LM.$$.fragment,c),h(BM.$$.fragment,c),h(Bf.$$.fragment,c),h(xM.$$.fragment,c),h(kM.$$.fragment,c),h(PM.$$.fragment,c),h($M.$$.fragment,c),h(IM.$$.fragment,c),h(DM.$$.fragment,c),h(jM.$$.fragment,c),h(GM.$$.fragment,c),h(OM.$$.fragment,c),h(XM.$$.fragment,c),h(VM.$$.fragment,c),h(zM.$$.fragment,c),h(HM.$$.fragment,c),h(mh.$$.fragment,c),h(UM.$$.fragment,c),h(JM.$$.fragment,c),h(YM.$$.fragment,c),h(KM.$$.fragment,c),h(oE.$$.fragment,c),h(Mh.$$.fragment,c),h(rE.$$.fragment,c),h(tE.$$.fragment,c),h(aE.$$.fragment,c),h(nE.$$.fragment,c),h(lE.$$.fragment,c),h(iE.$$.fragment,c),h(dE.$$.fragment,c),h(cE.$$.fragment,c),h(fE.$$.fragment,c),h(mE.$$.fragment,c),h(hE.$$.fragment,c),h(pE.$$.fragment,c),h(_E.$$.fragment,c),h(uE.$$.fragment,c),h(bE.$$.fragment,c),h(vE.$$.fragment,c),h(FE.$$.fragment,c),h(CE.$$.fragment,c),h(ME.$$.fragment,c),h(EE.$$.fragment,c),h(yE.$$.fragment,c),h(wE.$$.fragment,c),h(LE.$$.fragment,c),h(BE.$$.fragment,c),h(xE.$$.fragment,c),h(kE.$$.fragment,c),h(RE.$$.fragment,c),h(SE.$$.fragment,c),h($E.$$.fragment,c),h(IE.$$.fragment,c),h(DE.$$.fragment,c),h(jE.$$.fragment,c),h(NE.$$.fragment,c),h(qE.$$.fragment,c),h(OE.$$.fragment,c),h(XE.$$.fragment,c),h(VE.$$.fragment,c),h(zE.$$.fragment,c),h(WE.$$.fragment,c),h(QE.$$.fragment,c),h(UE.$$.fragment,c),h(JE.$$.fragment,c),h(YE.$$.fragment,c),h(KE.$$.fragment,c),h(ZE.$$.fragment,c),h(e3.$$.fragment,c),h(r3.$$.fragment,c),h(t3.$$.fragment,c),h(a3.$$.fragment,c),h(n3.$$.fragment,c),h(s3.$$.fragment,c),h(l3.$$.fragment,c),h(d3.$$.fragment,c),h(c3.$$.fragment,c),h(f3.$$.fragment,c),h(m3.$$.fragment,c),h(g3.$$.fragment,c),h(h3.$$.fragment,c),h(_3.$$.fragment,c),h(u3.$$.fragment,c),h(b3.$$.fragment,c),h(v3.$$.fragment,c),h(T3.$$.fragment,c),h(F3.$$.fragment,c),h(M3.$$.fragment,c),h(E3.$$.fragment,c),h(y3.$$.fragment,c),h(w3.$$.fragment,c),h(A3.$$.fragment,c),h(L3.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(R3.$$.fragment,c),h(S3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(D3.$$.fragment,c),h(j3.$$.fragment,c),h(N3.$$.fragment,c),h(q3.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(V3.$$.fragment,c),h(z3.$$.fragment,c),h(W3.$$.fragment,c),h(Q3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(Z3.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Fy.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(Dy.$$.fragment,c),h(jy.$$.fragment,c),h(qy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Cw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Dw.$$.fragment,c),h(jw.$$.fragment,c),h(Nw.$$.fragment,c),h(qw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(e6.$$.fragment,c),h(o6.$$.fragment,c),h(r6.$$.fragment,c),h(a6.$$.fragment,c),h(n6.$$.fragment,c),h(s6.$$.fragment,c),h(l6.$$.fragment,c),h(i6.$$.fragment,c),h(d6.$$.fragment,c),h(f6.$$.fragment,c),h(m6.$$.fragment,c),h(g6.$$.fragment,c),h(h6.$$.fragment,c),h(p6.$$.fragment,c),h(_6.$$.fragment,c),h(b6.$$.fragment,c),h(v6.$$.fragment,c),h(T6.$$.fragment,c),h(F6.$$.fragment,c),h(C6.$$.fragment,c),h(M6.$$.fragment,c),h(y6.$$.fragment,c),h(w6.$$.fragment,c),h(A6.$$.fragment,c),h(L6.$$.fragment,c),h(B6.$$.fragment,c),h(x6.$$.fragment,c),h(R6.$$.fragment,c),h(S6.$$.fragment,c),h(P6.$$.fragment,c),h($6.$$.fragment,c),h(I6.$$.fragment,c),h(D6.$$.fragment,c),h(N6.$$.fragment,c),h(q6.$$.fragment,c),h(G6.$$.fragment,c),h(O6.$$.fragment,c),h(X6.$$.fragment,c),h(V6.$$.fragment,c),h(W6.$$.fragment,c),h(Q6.$$.fragment,c),h(H6.$$.fragment,c),h(U6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(Z6.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(yA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(DA.$$.fragment,c),h(jA.$$.fragment,c),h(NA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),Rxe=!0)},o(c){p(ce.$$.fragment,c),p($a.$$.fragment,c),p(LM.$$.fragment,c),p(BM.$$.fragment,c),p(Bf.$$.fragment,c),p(xM.$$.fragment,c),p(kM.$$.fragment,c),p(PM.$$.fragment,c),p($M.$$.fragment,c),p(IM.$$.fragment,c),p(DM.$$.fragment,c),p(jM.$$.fragment,c),p(GM.$$.fragment,c),p(OM.$$.fragment,c),p(XM.$$.fragment,c),p(VM.$$.fragment,c),p(zM.$$.fragment,c),p(HM.$$.fragment,c),p(mh.$$.fragment,c),p(UM.$$.fragment,c),p(JM.$$.fragment,c),p(YM.$$.fragment,c),p(KM.$$.fragment,c),p(oE.$$.fragment,c),p(Mh.$$.fragment,c),p(rE.$$.fragment,c),p(tE.$$.fragment,c),p(aE.$$.fragment,c),p(nE.$$.fragment,c),p(lE.$$.fragment,c),p(iE.$$.fragment,c),p(dE.$$.fragment,c),p(cE.$$.fragment,c),p(fE.$$.fragment,c),p(mE.$$.fragment,c),p(hE.$$.fragment,c),p(pE.$$.fragment,c),p(_E.$$.fragment,c),p(uE.$$.fragment,c),p(bE.$$.fragment,c),p(vE.$$.fragment,c),p(FE.$$.fragment,c),p(CE.$$.fragment,c),p(ME.$$.fragment,c),p(EE.$$.fragment,c),p(yE.$$.fragment,c),p(wE.$$.fragment,c),p(LE.$$.fragment,c),p(BE.$$.fragment,c),p(xE.$$.fragment,c),p(kE.$$.fragment,c),p(RE.$$.fragment,c),p(SE.$$.fragment,c),p($E.$$.fragment,c),p(IE.$$.fragment,c),p(DE.$$.fragment,c),p(jE.$$.fragment,c),p(NE.$$.fragment,c),p(qE.$$.fragment,c),p(OE.$$.fragment,c),p(XE.$$.fragment,c),p(VE.$$.fragment,c),p(zE.$$.fragment,c),p(WE.$$.fragment,c),p(QE.$$.fragment,c),p(UE.$$.fragment,c),p(JE.$$.fragment,c),p(YE.$$.fragment,c),p(KE.$$.fragment,c),p(ZE.$$.fragment,c),p(e3.$$.fragment,c),p(r3.$$.fragment,c),p(t3.$$.fragment,c),p(a3.$$.fragment,c),p(n3.$$.fragment,c),p(s3.$$.fragment,c),p(l3.$$.fragment,c),p(d3.$$.fragment,c),p(c3.$$.fragment,c),p(f3.$$.fragment,c),p(m3.$$.fragment,c),p(g3.$$.fragment,c),p(h3.$$.fragment,c),p(_3.$$.fragment,c),p(u3.$$.fragment,c),p(b3.$$.fragment,c),p(v3.$$.fragment,c),p(T3.$$.fragment,c),p(F3.$$.fragment,c),p(M3.$$.fragment,c),p(E3.$$.fragment,c),p(y3.$$.fragment,c),p(w3.$$.fragment,c),p(A3.$$.fragment,c),p(L3.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(R3.$$.fragment,c),p(S3.$$.fragment,c),p(P3.$$.fragment,c),p($3.$$.fragment,c),p(D3.$$.fragment,c),p(j3.$$.fragment,c),p(N3.$$.fragment,c),p(q3.$$.fragment,c),p(G3.$$.fragment,c),p(O3.$$.fragment,c),p(V3.$$.fragment,c),p(z3.$$.fragment,c),p(W3.$$.fragment,c),p(Q3.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(Z3.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(Fy.$$.fragment,c),p(Cy.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(Ly.$$.fragment,c),p(By.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(Dy.$$.fragment,c),p(jy.$$.fragment,c),p(qy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Xy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Cw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Rw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Dw.$$.fragment,c),p(jw.$$.fragment,c),p(Nw.$$.fragment,c),p(qw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(zw.$$.fragment,c),p(Ww.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(e6.$$.fragment,c),p(o6.$$.fragment,c),p(r6.$$.fragment,c),p(a6.$$.fragment,c),p(n6.$$.fragment,c),p(s6.$$.fragment,c),p(l6.$$.fragment,c),p(i6.$$.fragment,c),p(d6.$$.fragment,c),p(f6.$$.fragment,c),p(m6.$$.fragment,c),p(g6.$$.fragment,c),p(h6.$$.fragment,c),p(p6.$$.fragment,c),p(_6.$$.fragment,c),p(b6.$$.fragment,c),p(v6.$$.fragment,c),p(T6.$$.fragment,c),p(F6.$$.fragment,c),p(C6.$$.fragment,c),p(M6.$$.fragment,c),p(y6.$$.fragment,c),p(w6.$$.fragment,c),p(A6.$$.fragment,c),p(L6.$$.fragment,c),p(B6.$$.fragment,c),p(x6.$$.fragment,c),p(R6.$$.fragment,c),p(S6.$$.fragment,c),p(P6.$$.fragment,c),p($6.$$.fragment,c),p(I6.$$.fragment,c),p(D6.$$.fragment,c),p(N6.$$.fragment,c),p(q6.$$.fragment,c),p(G6.$$.fragment,c),p(O6.$$.fragment,c),p(X6.$$.fragment,c),p(V6.$$.fragment,c),p(W6.$$.fragment,c),p(Q6.$$.fragment,c),p(H6.$$.fragment,c),p(U6.$$.fragment,c),p(J6.$$.fragment,c),p(Y6.$$.fragment,c),p(Z6.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(TA.$$.fragment,c),p(FA.$$.fragment,c),p(CA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(yA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(BA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(DA.$$.fragment,c),p(jA.$$.fragment,c),p(NA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(XA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),Rxe=!1},d(c){t(J),c&&t(xe),c&&t(de),_(ce),c&&t(Ef),c&&t(sa),c&&t(we),c&&t(io),c&&t(wf),_($a,c),c&&t(co),c&&t(ge),c&&t(Oo),c&&t(Ia),c&&t(S9e),c&&t($i),_(LM),c&&t(P9e),c&&t(qn),c&&t($9e),_(BM,c),c&&t(I9e),c&&t(h8),c&&t(D9e),_(Bf,c),c&&t(j9e),c&&t(Ii),_(xM),c&&t(N9e),c&&t(Xo),_(kM),_(PM),_($M),_(IM),c&&t(q9e),c&&t(ji),_(DM),c&&t(G9e),c&&t(Vo),_(jM),_(GM),_(OM),_(XM),c&&t(O9e),c&&t(Ni),_(VM),c&&t(X9e),c&&t(zo),_(zM),_(HM),_(mh),_(UM),_(JM),c&&t(V9e),c&&t(qi),_(YM),c&&t(z9e),c&&t(Wo),_(KM),_(oE),_(Mh),_(rE),_(tE),c&&t(W9e),c&&t(Oi),_(aE),c&&t(Q9e),c&&t(Qo),_(nE),_(lE),_(iE),_(dE),_(cE),c&&t(H9e),c&&t(zi),_(fE),c&&t(U9e),c&&t(Ho),_(mE),_(hE),_(pE),_(_E),_(uE),c&&t(J9e),c&&t(Hi),_(bE),c&&t(Y9e),c&&t(Uo),_(vE),_(FE),_(CE),_(ME),_(EE),c&&t(K9e),c&&t(Yi),_(yE),c&&t(Z9e),c&&t(Jo),_(wE),_(LE),_(BE),_(xE),_(kE),c&&t(eBe),c&&t(ed),_(RE),c&&t(oBe),c&&t(Yo),_(SE),_($E),_(IE),_(DE),_(jE),c&&t(rBe),c&&t(td),_(NE),c&&t(tBe),c&&t(Ko),_(qE),_(OE),_(XE),_(VE),_(zE),c&&t(aBe),c&&t(sd),_(WE),c&&t(nBe),c&&t(Zo),_(QE),_(UE),_(JE),_(YE),_(KE),c&&t(sBe),c&&t(dd),_(ZE),c&&t(lBe),c&&t(er),_(e3),_(r3),_(t3),_(a3),_(n3),c&&t(iBe),c&&t(md),_(s3),c&&t(dBe),c&&t(or),_(l3),_(d3),_(c3),_(f3),_(m3),c&&t(cBe),c&&t(pd),_(g3),c&&t(fBe),c&&t(rr),_(h3),_(_3),_(u3),_(b3),_(v3),c&&t(mBe),c&&t(bd),_(T3),c&&t(gBe),c&&t(tr),_(F3),_(M3),_(E3),_(y3),_(w3),c&&t(hBe),c&&t(Fd),_(A3),c&&t(pBe),c&&t(ar),_(L3),_(x3),_(k3),_(R3),_(S3),c&&t(_Be),c&&t(Ed),_(P3),c&&t(uBe),c&&t(nr),_($3),_(D3),_(j3),_(N3),_(q3),c&&t(bBe),c&&t(Ad),_(G3),c&&t(vBe),c&&t(sr),_(O3),_(V3),_(z3),_(W3),_(Q3),c&&t(TBe),c&&t(xd),_(H3),c&&t(FBe),c&&t(lr),_(U3),_(Y3),_(K3),_(Z3),_(ey),c&&t(CBe),c&&t(Sd),_(oy),c&&t(MBe),c&&t(ir),_(ry),_(ay),_(ny),_(sy),_(ly),c&&t(EBe),c&&t(Id),_(iy),c&&t(yBe),c&&t(dr),_(dy),_(fy),_(my),_(gy),_(py),c&&t(wBe),c&&t(Nd),_(_y),c&&t(ABe),c&&t(cr),_(uy),_(vy),_(Ty),_(Fy),_(Cy),c&&t(LBe),c&&t(Od),_(My),c&&t(BBe),c&&t(fr),_(Ey),_(wy),_(Ay),_(Ly),_(By),c&&t(xBe),c&&t(Wd),_(xy),c&&t(kBe),c&&t(mr),_(ky),_(Sy),_(Py),_($y),_(Iy),c&&t(RBe),c&&t(Ud),_(Dy),c&&t(SBe),c&&t(gr),_(jy),_(qy),_(Gy),_(Oy),_(Xy),c&&t(PBe),c&&t(Kd),_(Vy),c&&t($Be),c&&t(hr),_(zy),_(Qy),_(Hy),_(Uy),_(Yy),c&&t(IBe),c&&t(oc),_(Ky),c&&t(DBe),c&&t(pr),_(Zy),_(ow),_(rw),_(tw),_(aw),c&&t(jBe),c&&t(ac),_(nw),c&&t(NBe),c&&t(_r),_(sw),_(iw),_(dw),_(cw),_(fw),c&&t(qBe),c&&t(lc),_(mw),c&&t(GBe),c&&t(ur),_(gw),_(pw),_(_w),_(uw),_(bw),c&&t(OBe),c&&t(cc),_(vw),c&&t(XBe),c&&t(br),_(Tw),_(Cw),_(Mw),_(Ew),_(ww),c&&t(VBe),c&&t(gc),_(Aw),c&&t(zBe),c&&t(vr),_(Lw),_(xw),_(kw),_(Rw),_(Sw),c&&t(WBe),c&&t(_c),_(Pw),c&&t(QBe),c&&t(Tr),_($w),_(Dw),_(jw),_(Nw),_(qw),c&&t(HBe),c&&t(vc),_(Gw),c&&t(UBe),c&&t(Fr),_(Ow),_(Vw),_(zw),_(Ww),_(Qw),c&&t(JBe),c&&t(Cc),_(Hw),c&&t(YBe),c&&t(Cr),_(Uw),_(Yw),_(Kw),_(Zw),_(e6),c&&t(KBe),c&&t(yc),_(o6),c&&t(ZBe),c&&t(Mr),_(r6),_(a6),_(n6),_(s6),_(l6),c&&t(exe),c&&t(Lc),_(i6),c&&t(oxe),c&&t(Er),_(d6),_(f6),_(m6),_(g6),_(h6),c&&t(rxe),c&&t(kc),_(p6),c&&t(txe),c&&t(yr),_(_6),_(b6),_(v6),_(T6),_(F6),c&&t(axe),c&&t(Pc),_(C6),c&&t(nxe),c&&t(wr),_(M6),_(y6),_(w6),_(A6),_(L6),c&&t(sxe),c&&t(Dc),_(B6),c&&t(lxe),c&&t(Ar),_(x6),_(R6),_(S6),_(P6),_($6),c&&t(ixe),c&&t(qc),_(I6),c&&t(dxe),c&&t(Lr),_(D6),_(N6),_(q6),_(G6),_(O6),c&&t(cxe),c&&t(Xc),_(X6),c&&t(fxe),c&&t(Br),_(V6),_(W6),_(Q6),_(H6),_(U6),c&&t(mxe),c&&t(Wc),_(J6),c&&t(gxe),c&&t(xr),_(Y6),_(Z6),_(eA),_(oA),_(rA),c&&t(hxe),c&&t(Uc),_(tA),c&&t(pxe),c&&t(kr),_(aA),_(sA),_(lA),_(iA),_(dA),c&&t(_xe),c&&t(Kc),_(cA),c&&t(uxe),c&&t(Rr),_(fA),_(gA),_(hA),_(pA),_(_A),c&&t(bxe),c&&t(of),_(uA),c&&t(vxe),c&&t(Sr),_(bA),_(TA),_(FA),_(CA),_(MA),c&&t(Txe),c&&t(af),_(EA),c&&t(Fxe),c&&t(Pr),_(yA),_(AA),_(LA),_(BA),_(xA),c&&t(Cxe),c&&t(lf),_(kA),c&&t(Mxe),c&&t($r),_(RA),_(PA),_($A),_(IA),_(DA),c&&t(Exe),c&&t(ff),_(jA),c&&t(yxe),c&&t(Ir),_(NA),_(GA),_(OA),_(XA),_(VA),c&&t(wxe),c&&t(hf),_(zA),c&&t(Axe),c&&t(Dr),_(WA),_(HA),_(UA),_(JA),_(YA),c&&t(Lxe),c&&t(uf),_(KA),c&&t(Bxe),c&&t(jr),_(ZA),_(oL),_(rL),_(tL),_(nL),c&&t(xxe),c&&t(Tf),_(sL),c&&t(kxe),c&&t(Nr),_(lL),_(dL),_(cL),_(fL),_(mL)}}}const qbt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Gbt(Ai,J,xe){let{fw:de}=J;return Ai.$$set=me=>{"fw"in me&&xe(0,de=me.fw)},[de]}class Hbt extends Rbt{constructor(J){super();Sbt(this,J,Gbt,Nbt,Pbt,{fw:0})}}export{Hbt as default,qbt as metadata};
