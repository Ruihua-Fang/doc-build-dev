import{S as uo,i as go,s as _o,e as o,k as d,w,t as n,L as vo,c as a,d as s,m as h,a as r,x as b,h as i,b as l,J as t,g as p,y,q as $,o as N,B as R}from"../../chunks/vendor-9e2b328e.js";import{T as mo}from"../../chunks/Tip-76f97a76.js";import{D as Ke}from"../../chunks/Docstring-50fd6873.js";import{C as ks}from"../../chunks/CodeBlock-88e23343.js";import{I as Xe}from"../../chunks/IconCopyLink-fd0e58fd.js";import"../../chunks/CopyButton-4ae140ab.js";function wo(Z){let f,C,m,u,j;return{c(){f=o("p"),C=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),m=o("code"),u=n("Module"),j=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(g){f=a(g,"P",{});var _=r(f);C=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),m=a(_,"CODE",{});var I=r(m);u=i(I,"Module"),I.forEach(s),j=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(s)},m(g,_){p(g,f,_),t(f,C),t(f,m),t(m,u),t(f,j)},d(g){g&&s(f)}}}function bo(Z){let f,C,m,u,j;return{c(){f=o("p"),C=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),m=o("code"),u=n("Module"),j=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(g){f=a(g,"P",{});var _=r(f);C=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),m=a(_,"CODE",{});var I=r(m);u=i(I,"Module"),I.forEach(s),j=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(s)},m(g,_){p(g,f,_),t(f,C),t(f,m),t(m,u),t(f,j)},d(g){g&&s(f)}}}function yo(Z){let f,C,m,u,j,g,_,I,wt,Ze,A,W,qe,Q,bt,Me,yt,Qe,H,$t,Y,Nt,Rt,Ye,we,Ct,et,be,xt,tt,ye,Pe,Et,st,$e,jt,ot,F,Tt,ee,It,kt,te,Ft,qt,at,O,G,Ae,se,Mt,Oe,Pt,rt,v,oe,At,ae,Ot,Ne,St,zt,Dt,S,Lt,Re,Vt,Wt,Ce,Ht,Gt,Bt,Se,Jt,Ut,re,nt,z,B,ze,ne,Kt,De,Xt,it,k,ie,Zt,le,Qt,ce,Yt,es,ts,x,de,ss,D,os,xe,as,rs,Le,ns,is,ls,J,cs,Ve,ds,hs,he,lt,L,U,We,pe,ps,He,fs,ct,T,fe,ms,Ge,us,gs,me,_s,ue,vs,ws,bs,E,ge,ys,V,$s,Ee,Ns,Rs,Be,Cs,xs,Es,K,js,Je,Ts,Is,_e,dt;return g=new Xe({}),Q=new Xe({}),se=new Xe({}),oe=new Ke({props:{name:"class transformers.ResNetConfig",anchor:"transformers.ResNetConfig",parameters:[{name:"num_channels",val:" = 3"},{name:"hidden_sizes",val:" = [64, 256, 512, 1024, 2048]"},{name:"depths",val:" = [3, 4, 6, 3]"},{name:"embeddings_type",val:" = 'classic'"},{name:"layer_type",val:" = 'bottleneck'"},{name:"hidden_act",val:" = 'relu'"},{name:"downsample_in_first_stage",val:" = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/resnet/configuration_resnet.py#L28",parametersDescription:[{anchor:"transformers.ResNetConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.ResNetConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, optional, defaults to 4) &#x2014;
Patch size to use in the patch embedding layer.`,name:"patch_size"},{anchor:"transformers.ResNetConfig.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[64, 256, 512, 1024, 2048]</code>) &#x2014;
Dimensionality (hidden size) embeddings + at each stage .`,name:"hidden_sizes"},{anchor:"transformers.ResNetConfig.depths",description:`<strong>depths</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[3, 4, 6, 3]</code>) &#x2014;
Depth (number of blocks) for each stage.`,name:"depths"},{anchor:"transformers.ResNetConfig.embeddings_type",description:`<strong>embeddings_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;classic&quot;</code>) &#x2014;
The embedding layer to use, either <code>&quot;classic&quot;</code> or <code>&quot;3x3&quot;</code>. If <code>&quot;classic&quot;</code>, the original resnet embedding, a
single agressive <code>7x7</code> convolution, is applied. If <code>&quot;3x3&quot;</code>, three <code>3x3</code> are applied instead.`,name:"embeddings_type"},{anchor:"transformers.ResNetConfig.layer_type",description:`<strong>layer_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;bottleneck&quot;</code>) &#x2014;
The layer to use, it can be either <code>&quot;basic&quot;</code> (<code>ResNetBasicLayer</code>) or <code>&quot;bottleneck&quot;</code>
(<code>ResNetBottleNeckLayer</code>).`,name:"layer_type"},{anchor:"transformers.ResNetConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;relu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in each block. If string, <code>&quot;gelu&quot;</code>, <code>&quot;relu&quot;</code>,
<code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.ResNetConfig.downsample_in_first_stage",description:`<strong>downsample_in_first_stage</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, the first stage will downsample the inputs using a <code>stride</code> of 2.`,name:"downsample_in_first_stage"}]}}),re=new ks({props:{code:`from transformers import ResNetModel, ResNetConfig

# Initializing a ResNet resnet50 style configuration
configuration = ResNetConfig()
# Initializing a model from the resnet50 style configuration
model = ResNetModel(configuration)
# Accessing the model configuration
configuration = model.config,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ResNetModel, ResNetConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a ResNet resnet50 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = ResNetConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the resnet50 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ResNetModel(configuration)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),ne=new Xe({}),ie=new Ke({props:{name:"class transformers.ResNetModel",anchor:"transformers.ResNetModel",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/resnet/modeling_resnet.py#L400",parametersDescription:[{anchor:"transformers.ResNetModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),de=new Ke({props:{name:"forward",anchor:"transformers.ResNetModel.forward",parameters:[{name:"pixel_values",val:": Tensor"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/resnet/modeling_resnet.py#L411",parametersDescription:[{anchor:"transformers.ResNetModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_15770/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.ResNetModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ResNetModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_15770/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],returnDescription:`
<p>A <code>transformers.models.resnet.modeling_resnet.ResNetModelOutput</code>or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_15770/en/model_doc/resnet#transformers.ResNetConfig"
>ResNetConfig</a>) and inputs.</p>
<ul>
<li><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Last hidden states (final feature map) of the last stage of the model.</li>
<li><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.dim[-1])</code>) \u2014 Global average pooling of the last feature map followed by a layernorm.</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the model at
the output of each stage.</li>
</ul>
`}}),J=new mo({props:{$$slots:{default:[wo]},$$scope:{ctx:Z}}}),he=new ks({props:{code:`from transformers import ConvNextFeatureExtractor, ResNetModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = ConvNextFeatureExtractor.from_pretrained("")
model = ResNetModel.from_pretrained("")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, ResNetModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ResNetModel.from_pretrained(<span class="hljs-string">&quot;&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">2048</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>]`}}),pe=new Xe({}),fe=new Ke({props:{name:"class transformers.ResNetForImageClassification",anchor:"transformers.ResNetForImageClassification",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/resnet/modeling_resnet.py#L453",parametersDescription:[{anchor:"transformers.ResNetForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15770/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),ge=new Ke({props:{name:"forward",anchor:"transformers.ResNetForImageClassification.forward",parameters:[{name:"pixel_values",val:" = None"},{name:"labels",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15770/src/transformers/models/resnet/modeling_resnet.py#L466",parametersDescription:[{anchor:"transformers.ResNetForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_15770/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.ResNetForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ResNetForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_15770/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.ResNetForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],returnDescription:`
<p>A <code>transformers.models.resnet.modeling_resnet.ResNetClassifierOutput</code>or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_15770/en/model_doc/resnet#transformers.ResNetConfig"
>ResNetConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the model at
the output of each stage.</li>
</ul>
`}}),K=new mo({props:{$$slots:{default:[bo]},$$scope:{ctx:Z}}}),_e=new ks({props:{code:`from transformers import ConvNextFeatureExtractor, ResNetForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = ConvNextFeatureExtractor.from_pretrained("")
model = ResNetForImageClassification.from_pretrained("")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label]),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, ResNetForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ResNetForImageClassification.from_pretrained(<span class="hljs-string">&quot;&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
<span class="hljs-string">&#x27;tabby, tabby cat&#x27;</span>`}}),{c(){f=o("meta"),C=d(),m=o("h1"),u=o("a"),j=o("span"),w(g.$$.fragment),_=d(),I=o("span"),wt=n("ResNet"),Ze=d(),A=o("h2"),W=o("a"),qe=o("span"),w(Q.$$.fragment),bt=d(),Me=o("span"),yt=n("Overview"),Qe=d(),H=o("p"),$t=n(`The resnet model was proposed in Deep Residual Learning for Image Recognition
](`),Y=o("a"),Nt=n("https://arxiv.org/abs/1512.03385"),Rt=n(") by Kaiming He, Xiangyu Zhang, Shaoqing Ren and Jian Sun."),Ye=d(),we=o("p"),Ct=n("ResNet introduced residual connections, they allow to train networks with an unseen number of layers (up to 1000). ResNet won the 2015 ILSVRC & COCO competition, one importart milestone in deep computer vision."),et=d(),be=o("p"),xt=n("The abstract from the paper is the following:"),tt=d(),ye=o("p"),Pe=o("em"),Et=n(`Deeper neural networks are more difficult to train. We present a residual learning framework to ease the training of networks that are substantially deeper than those used previously. We explicitly reformulate the layers as learning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We provide comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets with a depth of up to 152 layers---8x deeper than VGG nets but still having lower complexity. An ensemble of these residual nets achieves 3.57% error on the ImageNet test set. This result won the 1st place on the ILSVRC 2015 classification task. We also present analysis on CIFAR-10 with 100 and 1000 layers.
The depth of representations is of central importance for many visual recognition tasks. Solely due to our extremely deep representations, we obtain a 28% relative improvement on the COCO object detection dataset. Deep residual nets are foundations of our submissions to ILSVRC & COCO 2015 competitions, where we also won the 1st places on the tasks of ImageNet detection, ImageNet localization, COCO detection, and COCO segmentation.`),st=d(),$e=o("p"),jt=n("Tips:"),ot=d(),F=o("p"),Tt=n("This model was contributed by [Francesco]("),ee=o("a"),It=n("https://huggingface.co/Francesco>"),kt=n(`.
The original code can be found `),te=o("a"),Ft=n("here"),qt=n("."),at=d(),O=o("h2"),G=o("a"),Ae=o("span"),w(se.$$.fragment),Mt=d(),Oe=o("span"),Pt=n("ResNetConfig"),rt=d(),v=o("div"),w(oe.$$.fragment),At=d(),ae=o("p"),Ot=n("This is the configuration class to store the configuration of a "),Ne=o("a"),St=n("ResNetModel"),zt=n(`. It is used to instantiate an
ResNet model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the resnet50 architecture.`),Dt=d(),S=o("p"),Lt=n("Configuration objects inherit from "),Re=o("a"),Vt=n("PretrainedConfig"),Wt=n(` and can be used to control the model outputs. Read the
documentation from `),Ce=o("a"),Ht=n("PretrainedConfig"),Gt=n(" for more information."),Bt=d(),Se=o("p"),Jt=n("Example:"),Ut=d(),w(re.$$.fragment),nt=d(),z=o("h2"),B=o("a"),ze=o("span"),w(ne.$$.fragment),Kt=d(),De=o("span"),Xt=n("ResNetModel"),it=d(),k=o("div"),w(ie.$$.fragment),Zt=d(),le=o("p"),Qt=n(`The bare ResNet model outputting raw features without any specific head on top.
This model is a PyTorch `),ce=o("a"),Yt=n("torch.nn.Module"),es=n(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),ts=d(),x=o("div"),w(de.$$.fragment),ss=d(),D=o("p"),os=n("The "),xe=o("a"),as=n("ResNetModel"),rs=n(" forward method, overrides the "),Le=o("code"),ns=n("__call__"),is=n(" special method."),ls=d(),w(J.$$.fragment),cs=d(),Ve=o("p"),ds=n("Example:"),hs=d(),w(he.$$.fragment),lt=d(),L=o("h2"),U=o("a"),We=o("span"),w(pe.$$.fragment),ps=d(),He=o("span"),fs=n("ResNetForImageClassification"),ct=d(),T=o("div"),w(fe.$$.fragment),ms=d(),Ge=o("p"),us=n(`ResNet Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),gs=d(),me=o("p"),_s=n("This model is a PyTorch "),ue=o("a"),vs=n("torch.nn.Module"),ws=n(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),bs=d(),E=o("div"),w(ge.$$.fragment),ys=d(),V=o("p"),$s=n("The "),Ee=o("a"),Ns=n("ResNetForImageClassification"),Rs=n(" forward method, overrides the "),Be=o("code"),Cs=n("__call__"),xs=n(" special method."),Es=d(),w(K.$$.fragment),js=d(),Je=o("p"),Ts=n("Example:"),Is=d(),w(_e.$$.fragment),this.h()},l(e){const c=vo('[data-svelte="svelte-1phssyn"]',document.head);f=a(c,"META",{name:!0,content:!0}),c.forEach(s),C=h(e),m=a(e,"H1",{class:!0});var ve=r(m);u=a(ve,"A",{id:!0,class:!0,href:!0});var Ue=r(u);j=a(Ue,"SPAN",{});var Fs=r(j);b(g.$$.fragment,Fs),Fs.forEach(s),Ue.forEach(s),_=h(ve),I=a(ve,"SPAN",{});var qs=r(I);wt=i(qs,"ResNet"),qs.forEach(s),ve.forEach(s),Ze=h(e),A=a(e,"H2",{class:!0});var ht=r(A);W=a(ht,"A",{id:!0,class:!0,href:!0});var Ms=r(W);qe=a(Ms,"SPAN",{});var Ps=r(qe);b(Q.$$.fragment,Ps),Ps.forEach(s),Ms.forEach(s),bt=h(ht),Me=a(ht,"SPAN",{});var As=r(Me);yt=i(As,"Overview"),As.forEach(s),ht.forEach(s),Qe=h(e),H=a(e,"P",{});var pt=r(H);$t=i(pt,`The resnet model was proposed in Deep Residual Learning for Image Recognition
](`),Y=a(pt,"A",{href:!0,rel:!0});var Os=r(Y);Nt=i(Os,"https://arxiv.org/abs/1512.03385"),Os.forEach(s),Rt=i(pt,") by Kaiming He, Xiangyu Zhang, Shaoqing Ren and Jian Sun."),pt.forEach(s),Ye=h(e),we=a(e,"P",{});var Ss=r(we);Ct=i(Ss,"ResNet introduced residual connections, they allow to train networks with an unseen number of layers (up to 1000). ResNet won the 2015 ILSVRC & COCO competition, one importart milestone in deep computer vision."),Ss.forEach(s),et=h(e),be=a(e,"P",{});var zs=r(be);xt=i(zs,"The abstract from the paper is the following:"),zs.forEach(s),tt=h(e),ye=a(e,"P",{});var Ds=r(ye);Pe=a(Ds,"EM",{});var Ls=r(Pe);Et=i(Ls,`Deeper neural networks are more difficult to train. We present a residual learning framework to ease the training of networks that are substantially deeper than those used previously. We explicitly reformulate the layers as learning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We provide comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets with a depth of up to 152 layers---8x deeper than VGG nets but still having lower complexity. An ensemble of these residual nets achieves 3.57% error on the ImageNet test set. This result won the 1st place on the ILSVRC 2015 classification task. We also present analysis on CIFAR-10 with 100 and 1000 layers.
The depth of representations is of central importance for many visual recognition tasks. Solely due to our extremely deep representations, we obtain a 28% relative improvement on the COCO object detection dataset. Deep residual nets are foundations of our submissions to ILSVRC & COCO 2015 competitions, where we also won the 1st places on the tasks of ImageNet detection, ImageNet localization, COCO detection, and COCO segmentation.`),Ls.forEach(s),Ds.forEach(s),st=h(e),$e=a(e,"P",{});var Vs=r($e);jt=i(Vs,"Tips:"),Vs.forEach(s),ot=h(e),F=a(e,"P",{});var je=r(F);Tt=i(je,"This model was contributed by [Francesco]("),ee=a(je,"A",{href:!0,rel:!0});var Ws=r(ee);It=i(Ws,"https://huggingface.co/Francesco>"),Ws.forEach(s),kt=i(je,`.
The original code can be found `),te=a(je,"A",{href:!0,rel:!0});var Hs=r(te);Ft=i(Hs,"here"),Hs.forEach(s),qt=i(je,"."),je.forEach(s),at=h(e),O=a(e,"H2",{class:!0});var ft=r(O);G=a(ft,"A",{id:!0,class:!0,href:!0});var Gs=r(G);Ae=a(Gs,"SPAN",{});var Bs=r(Ae);b(se.$$.fragment,Bs),Bs.forEach(s),Gs.forEach(s),Mt=h(ft),Oe=a(ft,"SPAN",{});var Js=r(Oe);Pt=i(Js,"ResNetConfig"),Js.forEach(s),ft.forEach(s),rt=h(e),v=a(e,"DIV",{class:!0});var q=r(v);b(oe.$$.fragment,q),At=h(q),ae=a(q,"P",{});var mt=r(ae);Ot=i(mt,"This is the configuration class to store the configuration of a "),Ne=a(mt,"A",{href:!0});var Us=r(Ne);St=i(Us,"ResNetModel"),Us.forEach(s),zt=i(mt,`. It is used to instantiate an
ResNet model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the resnet50 architecture.`),mt.forEach(s),Dt=h(q),S=a(q,"P",{});var Te=r(S);Lt=i(Te,"Configuration objects inherit from "),Re=a(Te,"A",{href:!0});var Ks=r(Re);Vt=i(Ks,"PretrainedConfig"),Ks.forEach(s),Wt=i(Te,` and can be used to control the model outputs. Read the
documentation from `),Ce=a(Te,"A",{href:!0});var Xs=r(Ce);Ht=i(Xs,"PretrainedConfig"),Xs.forEach(s),Gt=i(Te," for more information."),Te.forEach(s),Bt=h(q),Se=a(q,"P",{});var Zs=r(Se);Jt=i(Zs,"Example:"),Zs.forEach(s),Ut=h(q),b(re.$$.fragment,q),q.forEach(s),nt=h(e),z=a(e,"H2",{class:!0});var ut=r(z);B=a(ut,"A",{id:!0,class:!0,href:!0});var Qs=r(B);ze=a(Qs,"SPAN",{});var Ys=r(ze);b(ne.$$.fragment,Ys),Ys.forEach(s),Qs.forEach(s),Kt=h(ut),De=a(ut,"SPAN",{});var eo=r(De);Xt=i(eo,"ResNetModel"),eo.forEach(s),ut.forEach(s),it=h(e),k=a(e,"DIV",{class:!0});var Ie=r(k);b(ie.$$.fragment,Ie),Zt=h(Ie),le=a(Ie,"P",{});var gt=r(le);Qt=i(gt,`The bare ResNet model outputting raw features without any specific head on top.
This model is a PyTorch `),ce=a(gt,"A",{href:!0,rel:!0});var to=r(ce);Yt=i(to,"torch.nn.Module"),to.forEach(s),es=i(gt,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),gt.forEach(s),ts=h(Ie),x=a(Ie,"DIV",{class:!0});var M=r(x);b(de.$$.fragment,M),ss=h(M),D=a(M,"P",{});var ke=r(D);os=i(ke,"The "),xe=a(ke,"A",{href:!0});var so=r(xe);as=i(so,"ResNetModel"),so.forEach(s),rs=i(ke," forward method, overrides the "),Le=a(ke,"CODE",{});var oo=r(Le);ns=i(oo,"__call__"),oo.forEach(s),is=i(ke," special method."),ke.forEach(s),ls=h(M),b(J.$$.fragment,M),cs=h(M),Ve=a(M,"P",{});var ao=r(Ve);ds=i(ao,"Example:"),ao.forEach(s),hs=h(M),b(he.$$.fragment,M),M.forEach(s),Ie.forEach(s),lt=h(e),L=a(e,"H2",{class:!0});var _t=r(L);U=a(_t,"A",{id:!0,class:!0,href:!0});var ro=r(U);We=a(ro,"SPAN",{});var no=r(We);b(pe.$$.fragment,no),no.forEach(s),ro.forEach(s),ps=h(_t),He=a(_t,"SPAN",{});var io=r(He);fs=i(io,"ResNetForImageClassification"),io.forEach(s),_t.forEach(s),ct=h(e),T=a(e,"DIV",{class:!0});var X=r(T);b(fe.$$.fragment,X),ms=h(X),Ge=a(X,"P",{});var lo=r(Ge);us=i(lo,`ResNet Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),lo.forEach(s),gs=h(X),me=a(X,"P",{});var vt=r(me);_s=i(vt,"This model is a PyTorch "),ue=a(vt,"A",{href:!0,rel:!0});var co=r(ue);vs=i(co,"torch.nn.Module"),co.forEach(s),ws=i(vt,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),vt.forEach(s),bs=h(X),E=a(X,"DIV",{class:!0});var P=r(E);b(ge.$$.fragment,P),ys=h(P),V=a(P,"P",{});var Fe=r(V);$s=i(Fe,"The "),Ee=a(Fe,"A",{href:!0});var ho=r(Ee);Ns=i(ho,"ResNetForImageClassification"),ho.forEach(s),Rs=i(Fe," forward method, overrides the "),Be=a(Fe,"CODE",{});var po=r(Be);Cs=i(po,"__call__"),po.forEach(s),xs=i(Fe," special method."),Fe.forEach(s),Es=h(P),b(K.$$.fragment,P),js=h(P),Je=a(P,"P",{});var fo=r(Je);Ts=i(fo,"Example:"),fo.forEach(s),Is=h(P),b(_e.$$.fragment,P),P.forEach(s),X.forEach(s),this.h()},h(){l(f,"name","hf:doc:metadata"),l(f,"content",JSON.stringify($o)),l(u,"id","resnet"),l(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(u,"href","#resnet"),l(m,"class","relative group"),l(W,"id","overview"),l(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(W,"href","#overview"),l(A,"class","relative group"),l(Y,"href","https://arxiv.org/abs/1512.03385"),l(Y,"rel","nofollow"),l(ee,"href","https://huggingface.co/Francesco%3E"),l(ee,"rel","nofollow"),l(te,"href","https://github.com/KaimingHe/deep-residual-networks"),l(te,"rel","nofollow"),l(G,"id","transformers.ResNetConfig"),l(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(G,"href","#transformers.ResNetConfig"),l(O,"class","relative group"),l(Ne,"href","/docs/transformers/pr_15770/en/model_doc/resnet#transformers.ResNetModel"),l(Re,"href","/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig"),l(Ce,"href","/docs/transformers/pr_15770/en/main_classes/configuration#transformers.PretrainedConfig"),l(v,"class","docstring"),l(B,"id","transformers.ResNetModel"),l(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(B,"href","#transformers.ResNetModel"),l(z,"class","relative group"),l(ce,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(ce,"rel","nofollow"),l(xe,"href","/docs/transformers/pr_15770/en/model_doc/resnet#transformers.ResNetModel"),l(x,"class","docstring"),l(k,"class","docstring"),l(U,"id","transformers.ResNetForImageClassification"),l(U,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(U,"href","#transformers.ResNetForImageClassification"),l(L,"class","relative group"),l(ue,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(ue,"rel","nofollow"),l(Ee,"href","/docs/transformers/pr_15770/en/model_doc/resnet#transformers.ResNetForImageClassification"),l(E,"class","docstring"),l(T,"class","docstring")},m(e,c){t(document.head,f),p(e,C,c),p(e,m,c),t(m,u),t(u,j),y(g,j,null),t(m,_),t(m,I),t(I,wt),p(e,Ze,c),p(e,A,c),t(A,W),t(W,qe),y(Q,qe,null),t(A,bt),t(A,Me),t(Me,yt),p(e,Qe,c),p(e,H,c),t(H,$t),t(H,Y),t(Y,Nt),t(H,Rt),p(e,Ye,c),p(e,we,c),t(we,Ct),p(e,et,c),p(e,be,c),t(be,xt),p(e,tt,c),p(e,ye,c),t(ye,Pe),t(Pe,Et),p(e,st,c),p(e,$e,c),t($e,jt),p(e,ot,c),p(e,F,c),t(F,Tt),t(F,ee),t(ee,It),t(F,kt),t(F,te),t(te,Ft),t(F,qt),p(e,at,c),p(e,O,c),t(O,G),t(G,Ae),y(se,Ae,null),t(O,Mt),t(O,Oe),t(Oe,Pt),p(e,rt,c),p(e,v,c),y(oe,v,null),t(v,At),t(v,ae),t(ae,Ot),t(ae,Ne),t(Ne,St),t(ae,zt),t(v,Dt),t(v,S),t(S,Lt),t(S,Re),t(Re,Vt),t(S,Wt),t(S,Ce),t(Ce,Ht),t(S,Gt),t(v,Bt),t(v,Se),t(Se,Jt),t(v,Ut),y(re,v,null),p(e,nt,c),p(e,z,c),t(z,B),t(B,ze),y(ne,ze,null),t(z,Kt),t(z,De),t(De,Xt),p(e,it,c),p(e,k,c),y(ie,k,null),t(k,Zt),t(k,le),t(le,Qt),t(le,ce),t(ce,Yt),t(le,es),t(k,ts),t(k,x),y(de,x,null),t(x,ss),t(x,D),t(D,os),t(D,xe),t(xe,as),t(D,rs),t(D,Le),t(Le,ns),t(D,is),t(x,ls),y(J,x,null),t(x,cs),t(x,Ve),t(Ve,ds),t(x,hs),y(he,x,null),p(e,lt,c),p(e,L,c),t(L,U),t(U,We),y(pe,We,null),t(L,ps),t(L,He),t(He,fs),p(e,ct,c),p(e,T,c),y(fe,T,null),t(T,ms),t(T,Ge),t(Ge,us),t(T,gs),t(T,me),t(me,_s),t(me,ue),t(ue,vs),t(me,ws),t(T,bs),t(T,E),y(ge,E,null),t(E,ys),t(E,V),t(V,$s),t(V,Ee),t(Ee,Ns),t(V,Rs),t(V,Be),t(Be,Cs),t(V,xs),t(E,Es),y(K,E,null),t(E,js),t(E,Je),t(Je,Ts),t(E,Is),y(_e,E,null),dt=!0},p(e,[c]){const ve={};c&2&&(ve.$$scope={dirty:c,ctx:e}),J.$set(ve);const Ue={};c&2&&(Ue.$$scope={dirty:c,ctx:e}),K.$set(Ue)},i(e){dt||($(g.$$.fragment,e),$(Q.$$.fragment,e),$(se.$$.fragment,e),$(oe.$$.fragment,e),$(re.$$.fragment,e),$(ne.$$.fragment,e),$(ie.$$.fragment,e),$(de.$$.fragment,e),$(J.$$.fragment,e),$(he.$$.fragment,e),$(pe.$$.fragment,e),$(fe.$$.fragment,e),$(ge.$$.fragment,e),$(K.$$.fragment,e),$(_e.$$.fragment,e),dt=!0)},o(e){N(g.$$.fragment,e),N(Q.$$.fragment,e),N(se.$$.fragment,e),N(oe.$$.fragment,e),N(re.$$.fragment,e),N(ne.$$.fragment,e),N(ie.$$.fragment,e),N(de.$$.fragment,e),N(J.$$.fragment,e),N(he.$$.fragment,e),N(pe.$$.fragment,e),N(fe.$$.fragment,e),N(ge.$$.fragment,e),N(K.$$.fragment,e),N(_e.$$.fragment,e),dt=!1},d(e){s(f),e&&s(C),e&&s(m),R(g),e&&s(Ze),e&&s(A),R(Q),e&&s(Qe),e&&s(H),e&&s(Ye),e&&s(we),e&&s(et),e&&s(be),e&&s(tt),e&&s(ye),e&&s(st),e&&s($e),e&&s(ot),e&&s(F),e&&s(at),e&&s(O),R(se),e&&s(rt),e&&s(v),R(oe),R(re),e&&s(nt),e&&s(z),R(ne),e&&s(it),e&&s(k),R(ie),R(de),R(J),R(he),e&&s(lt),e&&s(L),R(pe),e&&s(ct),e&&s(T),R(fe),R(ge),R(K),R(_e)}}}const $o={local:"resnet",sections:[{local:"overview",title:"Overview"},{local:"transformers.ResNetConfig",title:"ResNetConfig"},{local:"transformers.ResNetModel",title:"ResNetModel"},{local:"transformers.ResNetForImageClassification",title:"ResNetForImageClassification"}],title:"ResNet"};function No(Z,f,C){let{fw:m}=f;return Z.$$set=u=>{"fw"in u&&C(0,m=u.fw)},[m]}class Io extends uo{constructor(f){super();go(this,f,No,yo,_o,{fw:0})}}export{Io as default,$o as metadata};
