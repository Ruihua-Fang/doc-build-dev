import{S as awt,i as nwt,s as swt,e as a,k as l,w as f,t as o,M as lwt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as iwt}from"../../chunks/vendor-6b77c823.js";import{T as rIr}from"../../chunks/Tip-39098574.js";import{D as w}from"../../chunks/Docstring-1088f2fb.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as z}from"../../chunks/IconCopyLink-7a11ce68.js";function dwt(qf){let Z,io,fe,Ce,lo,pe,Ee,Xo,Ni,Nf,fa,ji,Di,I5,jf,ke,co,Gi,On,q5,Vn,Xn,N5,Oi,zn,j5,Vi,Df,Da;return{c(){Z=a("p"),io=o("If your "),fe=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),pe=a("code"),Ee=o("PretrainedConfig"),Xo=o(`, make sure its
`),Ni=a("code"),Nf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),ji=a("code"),Di=o('"new-model"'),I5=o(")."),jf=l(),ke=a("p"),co=o("Likewise, if your "),Gi=a("code"),On=o("NewModel"),q5=o(" is a subclass of "),Vn=a("a"),Xn=o("PreTrainedModel"),N5=o(`, make sure its
`),Oi=a("code"),zn=o("config_class"),j5=o(` attribute is set to the same class you use when registering the model (here
`),Vi=a("code"),Df=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var ue=s(Z);io=r(ue,"If your "),fe=n(ue,"CODE",{});var x8=s(fe);Ce=r(x8,"NewModelConfig"),x8.forEach(t),lo=r(ue," is a subclass of "),pe=n(ue,"CODE",{});var Xi=s(pe);Ee=r(Xi,"PretrainedConfig"),Xi.forEach(t),Xo=r(ue,`, make sure its
`),Ni=n(ue,"CODE",{});var k8=s(Ni);Nf=r(k8,"model_type"),k8.forEach(t),fa=r(ue," attribute is set to the same key you use when registering the config (here "),ji=n(ue,"CODE",{});var S8=s(ji);Di=r(S8,'"new-model"'),S8.forEach(t),I5=r(ue,")."),ue.forEach(t),jf=i(fo),ke=n(fo,"P",{});var zo=s(ke);co=r(zo,"Likewise, if your "),Gi=n(zo,"CODE",{});var Ga=s(Gi);On=r(Ga,"NewModel"),Ga.forEach(t),q5=r(zo," is a subclass of "),Vn=n(zo,"A",{href:!0});var R8=s(Vn);Xn=r(R8,"PreTrainedModel"),R8.forEach(t),N5=r(zo,`, make sure its
`),Oi=n(zo,"CODE",{});var Gf=s(Oi);zn=r(Gf,"config_class"),Gf.forEach(t),j5=r(zo,` attribute is set to the same class you use when registering the model (here
`),Vi=n(zo,"CODE",{});var B8=s(Vi);Df=r(B8,"NewModelConfig"),B8.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(Vn,"href","/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel")},m(fo,ue){b(fo,Z,ue),e(Z,io),e(Z,fe),e(fe,Ce),e(Z,lo),e(Z,pe),e(pe,Ee),e(Z,Xo),e(Z,Ni),e(Ni,Nf),e(Z,fa),e(Z,ji),e(ji,Di),e(Z,I5),b(fo,jf,ue),b(fo,ke,ue),e(ke,co),e(ke,Gi),e(Gi,On),e(ke,q5),e(ke,Vn),e(Vn,Xn),e(ke,N5),e(ke,Oi),e(Oi,zn),e(ke,j5),e(ke,Vi),e(Vi,Df),e(ke,Da)},d(fo){fo&&t(Z),fo&&t(jf),fo&&t(ke)}}}function cwt(qf){let Z,io,fe,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),fe=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(pe){Z=n(pe,"P",{});var Ee=s(Z);io=r(Ee,"Passing "),fe=n(Ee,"CODE",{});var Xo=s(fe);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Ee," is required when you want to use a private model."),Ee.forEach(t)},m(pe,Ee){b(pe,Z,Ee),e(Z,io),e(Z,fe),e(fe,Ce),e(Z,lo)},d(pe){pe&&t(Z)}}}function fwt(qf){let Z,io,fe,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),fe=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(pe){Z=n(pe,"P",{});var Ee=s(Z);io=r(Ee,"Passing "),fe=n(Ee,"CODE",{});var Xo=s(fe);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Ee," is required when you want to use a private model."),Ee.forEach(t)},m(pe,Ee){b(pe,Z,Ee),e(Z,io),e(Z,fe),e(fe,Ce),e(Z,lo)},d(pe){pe&&t(Z)}}}function mwt(qf){let Z,io,fe,Ce,lo,pe,Ee,Xo,Ni,Nf,fa,ji,Di,I5,jf,ke,co,Gi,On,q5,Vn,Xn,N5,Oi,zn,j5,Vi,Df,Da,fo,ue,x8,Xi,k8,S8,zo,Ga,R8,Gf,B8,Eqe,cBe,zi,Of,yY,D5,Cqe,LY,wqe,fBe,Qn,Aqe,xY,yqe,Lqe,kY,xqe,kqe,mBe,G5,gBe,P8,Sqe,hBe,Vf,pBe,Qi,Xf,SY,O5,Rqe,RY,Bqe,_Be,Qo,V5,Pqe,X5,$qe,$8,Iqe,qqe,Nqe,z5,jqe,BY,Dqe,Gqe,Oqe,mo,Q5,Vqe,PY,Xqe,zqe,Wi,Qqe,$Y,Wqe,Hqe,IY,Uqe,Jqe,Yqe,F,zf,qY,Kqe,Zqe,I8,eNe,oNe,rNe,Qf,NY,tNe,aNe,q8,nNe,sNe,lNe,Wf,jY,iNe,dNe,N8,cNe,fNe,mNe,Hf,DY,gNe,hNe,j8,pNe,_Ne,uNe,Uf,GY,bNe,FNe,D8,vNe,TNe,MNe,Jf,OY,ENe,CNe,G8,wNe,ANe,yNe,Yf,VY,LNe,xNe,O8,kNe,SNe,RNe,Kf,XY,BNe,PNe,V8,$Ne,INe,qNe,Zf,zY,NNe,jNe,X8,DNe,GNe,ONe,em,QY,VNe,XNe,z8,zNe,QNe,WNe,om,WY,HNe,UNe,Q8,JNe,YNe,KNe,rm,HY,ZNe,eje,W8,oje,rje,tje,tm,UY,aje,nje,H8,sje,lje,ije,am,JY,dje,cje,U8,fje,mje,gje,nm,YY,hje,pje,J8,_je,uje,bje,sm,KY,Fje,vje,Y8,Tje,Mje,Eje,lm,ZY,Cje,wje,K8,Aje,yje,Lje,im,eK,xje,kje,Z8,Sje,Rje,Bje,dm,oK,Pje,$je,ex,Ije,qje,Nje,cm,rK,jje,Dje,ox,Gje,Oje,Vje,fm,tK,Xje,zje,rx,Qje,Wje,Hje,mm,aK,Uje,Jje,tx,Yje,Kje,Zje,gm,nK,eDe,oDe,ax,rDe,tDe,aDe,hm,sK,nDe,sDe,nx,lDe,iDe,dDe,pm,lK,cDe,fDe,sx,mDe,gDe,hDe,_m,iK,pDe,_De,lx,uDe,bDe,FDe,um,dK,vDe,TDe,ix,MDe,EDe,CDe,bm,cK,wDe,ADe,dx,yDe,LDe,xDe,Fm,fK,kDe,SDe,cx,RDe,BDe,PDe,vm,mK,$De,IDe,fx,qDe,NDe,jDe,Tm,gK,DDe,GDe,mx,ODe,VDe,XDe,Mm,hK,zDe,QDe,gx,WDe,HDe,UDe,Em,pK,JDe,YDe,hx,KDe,ZDe,eGe,Cm,_K,oGe,rGe,px,tGe,aGe,nGe,wm,uK,sGe,lGe,_x,iGe,dGe,cGe,Am,bK,fGe,mGe,ux,gGe,hGe,pGe,ym,FK,_Ge,uGe,bx,bGe,FGe,vGe,Lm,vK,TGe,MGe,Fx,EGe,CGe,wGe,xm,TK,AGe,yGe,vx,LGe,xGe,kGe,km,MK,SGe,RGe,Tx,BGe,PGe,$Ge,Sm,EK,IGe,qGe,Mx,NGe,jGe,DGe,Rm,CK,GGe,OGe,Ex,VGe,XGe,zGe,Bm,wK,QGe,WGe,Cx,HGe,UGe,JGe,Pm,AK,YGe,KGe,wx,ZGe,eOe,oOe,$m,yK,rOe,tOe,Ax,aOe,nOe,sOe,Im,LK,lOe,iOe,yx,dOe,cOe,fOe,qm,xK,mOe,gOe,Lx,hOe,pOe,_Oe,Nm,kK,uOe,bOe,xx,FOe,vOe,TOe,jm,SK,MOe,EOe,kx,COe,wOe,AOe,Dm,RK,yOe,LOe,Sx,xOe,kOe,SOe,Gm,BK,ROe,BOe,Rx,POe,$Oe,IOe,Om,PK,qOe,NOe,Bx,jOe,DOe,GOe,Vm,$K,OOe,VOe,Px,XOe,zOe,QOe,Xm,IK,WOe,HOe,$x,UOe,JOe,YOe,zm,qK,KOe,ZOe,Ix,eVe,oVe,rVe,Qm,NK,tVe,aVe,qx,nVe,sVe,lVe,Wm,jK,iVe,dVe,Nx,cVe,fVe,mVe,Hm,DK,gVe,hVe,jx,pVe,_Ve,uVe,Um,GK,bVe,FVe,Dx,vVe,TVe,MVe,Jm,OK,EVe,CVe,Gx,wVe,AVe,yVe,Ym,VK,LVe,xVe,Ox,kVe,SVe,RVe,Km,XK,BVe,PVe,Vx,$Ve,IVe,qVe,Zm,zK,NVe,jVe,Xx,DVe,GVe,OVe,eg,QK,VVe,XVe,zx,zVe,QVe,WVe,og,WK,HVe,UVe,Qx,JVe,YVe,KVe,rg,HK,ZVe,eXe,Wx,oXe,rXe,tXe,tg,UK,aXe,nXe,Hx,sXe,lXe,iXe,ag,JK,dXe,cXe,Ux,fXe,mXe,gXe,ng,YK,hXe,pXe,Jx,_Xe,uXe,bXe,sg,KK,FXe,vXe,Yx,TXe,MXe,EXe,lg,ZK,CXe,wXe,Kx,AXe,yXe,LXe,ig,eZ,xXe,kXe,Zx,SXe,RXe,BXe,dg,oZ,PXe,$Xe,ek,IXe,qXe,NXe,cg,rZ,jXe,DXe,ok,GXe,OXe,VXe,fg,tZ,XXe,zXe,rk,QXe,WXe,HXe,mg,aZ,UXe,JXe,tk,YXe,KXe,ZXe,gg,nZ,eze,oze,ak,rze,tze,aze,hg,sZ,nze,sze,nk,lze,ize,dze,pg,lZ,cze,fze,sk,mze,gze,hze,_g,iZ,pze,_ze,lk,uze,bze,Fze,ug,dZ,vze,Tze,ik,Mze,Eze,Cze,bg,cZ,wze,Aze,dk,yze,Lze,xze,Fg,fZ,kze,Sze,ck,Rze,Bze,Pze,vg,mZ,$ze,Ize,fk,qze,Nze,jze,Tg,gZ,Dze,Gze,mk,Oze,Vze,Xze,Mg,hZ,zze,Qze,gk,Wze,Hze,Uze,Eg,pZ,Jze,Yze,hk,Kze,Zze,eQe,Cg,_Z,oQe,rQe,pk,tQe,aQe,nQe,wg,uZ,sQe,lQe,_k,iQe,dQe,cQe,Ag,bZ,fQe,mQe,uk,gQe,hQe,pQe,yg,FZ,_Qe,uQe,bk,bQe,FQe,vQe,Lg,vZ,TQe,MQe,Fk,EQe,CQe,wQe,xg,TZ,AQe,yQe,vk,LQe,xQe,kQe,kg,MZ,SQe,RQe,Tk,BQe,PQe,$Qe,Sg,EZ,IQe,qQe,Mk,NQe,jQe,DQe,Rg,CZ,GQe,OQe,Ek,VQe,XQe,zQe,Bg,wZ,QQe,WQe,Ck,HQe,UQe,JQe,Pg,AZ,YQe,KQe,wk,ZQe,eWe,oWe,$g,yZ,rWe,tWe,Ak,aWe,nWe,sWe,Ig,LZ,lWe,iWe,yk,dWe,cWe,fWe,qg,xZ,mWe,gWe,Lk,hWe,pWe,_We,Ng,kZ,uWe,bWe,xk,FWe,vWe,TWe,jg,SZ,MWe,EWe,kk,CWe,wWe,AWe,RZ,yWe,LWe,W5,xWe,Dg,H5,kWe,BZ,SWe,uBe,Hi,Gg,PZ,U5,RWe,$Z,BWe,bBe,Wo,J5,PWe,Y5,$We,Sk,IWe,qWe,NWe,K5,jWe,IZ,DWe,GWe,OWe,go,Z5,VWe,qZ,XWe,zWe,Oa,QWe,NZ,WWe,HWe,jZ,UWe,JWe,DZ,YWe,KWe,ZWe,E,Wn,GZ,eHe,oHe,Rk,rHe,tHe,Bk,aHe,nHe,sHe,Hn,OZ,lHe,iHe,Pk,dHe,cHe,$k,fHe,mHe,gHe,Un,VZ,hHe,pHe,Ik,_He,uHe,qk,bHe,FHe,vHe,Og,XZ,THe,MHe,Nk,EHe,CHe,wHe,Jn,zZ,AHe,yHe,jk,LHe,xHe,Dk,kHe,SHe,RHe,Vg,QZ,BHe,PHe,Gk,$He,IHe,qHe,Xg,WZ,NHe,jHe,Ok,DHe,GHe,OHe,zg,HZ,VHe,XHe,Vk,zHe,QHe,WHe,Yn,UZ,HHe,UHe,Xk,JHe,YHe,zk,KHe,ZHe,eUe,Kn,JZ,oUe,rUe,Qk,tUe,aUe,Wk,nUe,sUe,lUe,Zn,YZ,iUe,dUe,Hk,cUe,fUe,Uk,mUe,gUe,hUe,Qg,KZ,pUe,_Ue,Jk,uUe,bUe,FUe,Wg,ZZ,vUe,TUe,Yk,MUe,EUe,CUe,es,eee,wUe,AUe,Kk,yUe,LUe,Zk,xUe,kUe,SUe,Hg,oee,RUe,BUe,eS,PUe,$Ue,IUe,os,ree,qUe,NUe,oS,jUe,DUe,rS,GUe,OUe,VUe,rs,tee,XUe,zUe,tS,QUe,WUe,aS,HUe,UUe,JUe,ts,aee,YUe,KUe,nS,ZUe,eJe,nee,oJe,rJe,tJe,Ug,see,aJe,nJe,sS,sJe,lJe,iJe,as,lee,dJe,cJe,lS,fJe,mJe,iS,gJe,hJe,pJe,Jg,iee,_Je,uJe,dS,bJe,FJe,vJe,ns,dee,TJe,MJe,cS,EJe,CJe,fS,wJe,AJe,yJe,ss,cee,LJe,xJe,mS,kJe,SJe,gS,RJe,BJe,PJe,ls,fee,$Je,IJe,hS,qJe,NJe,pS,jJe,DJe,GJe,Yg,mee,OJe,VJe,_S,XJe,zJe,QJe,is,gee,WJe,HJe,uS,UJe,JJe,bS,YJe,KJe,ZJe,Kg,hee,eYe,oYe,FS,rYe,tYe,aYe,ds,pee,nYe,sYe,vS,lYe,iYe,TS,dYe,cYe,fYe,cs,_ee,mYe,gYe,MS,hYe,pYe,ES,_Ye,uYe,bYe,fs,uee,FYe,vYe,CS,TYe,MYe,wS,EYe,CYe,wYe,ms,bee,AYe,yYe,AS,LYe,xYe,yS,kYe,SYe,RYe,Zg,Fee,BYe,PYe,LS,$Ye,IYe,qYe,gs,vee,NYe,jYe,xS,DYe,GYe,kS,OYe,VYe,XYe,hs,Tee,zYe,QYe,SS,WYe,HYe,RS,UYe,JYe,YYe,ps,Mee,KYe,ZYe,BS,eKe,oKe,PS,rKe,tKe,aKe,_s,Eee,nKe,sKe,$S,lKe,iKe,IS,dKe,cKe,fKe,us,Cee,mKe,gKe,qS,hKe,pKe,NS,_Ke,uKe,bKe,bs,wee,FKe,vKe,jS,TKe,MKe,DS,EKe,CKe,wKe,Fs,Aee,AKe,yKe,GS,LKe,xKe,OS,kKe,SKe,RKe,eh,yee,BKe,PKe,VS,$Ke,IKe,qKe,vs,Lee,NKe,jKe,XS,DKe,GKe,zS,OKe,VKe,XKe,oh,xee,zKe,QKe,QS,WKe,HKe,UKe,rh,kee,JKe,YKe,WS,KKe,ZKe,eZe,Ts,See,oZe,rZe,HS,tZe,aZe,US,nZe,sZe,lZe,Ms,Ree,iZe,dZe,JS,cZe,fZe,YS,mZe,gZe,hZe,th,Bee,pZe,_Ze,KS,uZe,bZe,FZe,Es,Pee,vZe,TZe,ZS,MZe,EZe,eR,CZe,wZe,AZe,Cs,$ee,yZe,LZe,oR,xZe,kZe,rR,SZe,RZe,BZe,ws,Iee,PZe,$Ze,tR,IZe,qZe,aR,NZe,jZe,DZe,As,qee,GZe,OZe,nR,VZe,XZe,sR,zZe,QZe,WZe,ys,Nee,HZe,UZe,lR,JZe,YZe,iR,KZe,ZZe,eeo,ah,jee,oeo,reo,dR,teo,aeo,neo,nh,Dee,seo,leo,cR,ieo,deo,ceo,sh,Gee,feo,meo,fR,geo,heo,peo,lh,Oee,_eo,ueo,mR,beo,Feo,veo,Ls,Vee,Teo,Meo,gR,Eeo,Ceo,hR,weo,Aeo,yeo,ih,Xee,Leo,xeo,pR,keo,Seo,Reo,xs,zee,Beo,Peo,_R,$eo,Ieo,uR,qeo,Neo,jeo,ks,Qee,Deo,Geo,bR,Oeo,Veo,FR,Xeo,zeo,Qeo,Ss,Wee,Weo,Heo,vR,Ueo,Jeo,TR,Yeo,Keo,Zeo,Rs,Hee,eoo,ooo,MR,roo,too,ER,aoo,noo,soo,Bs,Uee,loo,ioo,CR,doo,coo,wR,foo,moo,goo,Ps,Jee,hoo,poo,AR,_oo,uoo,yR,boo,Foo,voo,dh,Yee,Too,Moo,LR,Eoo,Coo,woo,ch,Kee,Aoo,yoo,xR,Loo,xoo,koo,$s,Zee,Soo,Roo,kR,Boo,Poo,SR,$oo,Ioo,qoo,Is,eoe,Noo,joo,RR,Doo,Goo,BR,Ooo,Voo,Xoo,qs,ooe,zoo,Qoo,PR,Woo,Hoo,$R,Uoo,Joo,Yoo,fh,roe,Koo,Zoo,IR,ero,oro,rro,mh,toe,tro,aro,qR,nro,sro,lro,gh,aoe,iro,dro,NR,cro,fro,mro,hh,noe,gro,hro,jR,pro,_ro,uro,ph,soe,bro,Fro,DR,vro,Tro,Mro,Ns,loe,Ero,Cro,GR,wro,Aro,OR,yro,Lro,xro,_h,ioe,kro,Sro,VR,Rro,Bro,Pro,uh,doe,$ro,Iro,XR,qro,Nro,jro,js,coe,Dro,Gro,zR,Oro,Vro,QR,Xro,zro,Qro,Ds,foe,Wro,Hro,WR,Uro,Jro,HR,Yro,Kro,Zro,moe,eto,oto,e3,rto,bh,o3,tto,goe,ato,FBe,Ui,Fh,hoe,r3,nto,poe,sto,vBe,Ho,t3,lto,a3,ito,UR,dto,cto,fto,n3,mto,_oe,gto,hto,pto,Ie,s3,_to,uoe,uto,bto,Va,Fto,boe,vto,Tto,Foe,Mto,Eto,voe,Cto,wto,Ato,ee,vh,Toe,yto,Lto,JR,xto,kto,Sto,Th,Moe,Rto,Bto,YR,Pto,$to,Ito,Mh,Eoe,qto,Nto,KR,jto,Dto,Gto,Eh,Coe,Oto,Vto,ZR,Xto,zto,Qto,Ch,woe,Wto,Hto,eB,Uto,Jto,Yto,wh,Aoe,Kto,Zto,oB,eao,oao,rao,Ah,yoe,tao,aao,rB,nao,sao,lao,yh,Loe,iao,dao,tB,cao,fao,mao,Lh,xoe,gao,hao,aB,pao,_ao,uao,xh,koe,bao,Fao,nB,vao,Tao,Mao,kh,Soe,Eao,Cao,sB,wao,Aao,yao,Sh,Roe,Lao,xao,lB,kao,Sao,Rao,Rh,Boe,Bao,Pao,iB,$ao,Iao,qao,Bh,Poe,Nao,jao,dB,Dao,Gao,Oao,Ph,$oe,Vao,Xao,cB,zao,Qao,Wao,$h,Ioe,Hao,Uao,fB,Jao,Yao,Kao,Ih,qoe,Zao,eno,mB,ono,rno,tno,qh,Noe,ano,nno,gB,sno,lno,ino,Nh,joe,dno,cno,hB,fno,mno,gno,jh,hno,Doe,pno,_no,l3,uno,Dh,i3,bno,Goe,Fno,TBe,Ji,Gh,Ooe,d3,vno,Voe,Tno,MBe,Uo,c3,Mno,f3,Eno,pB,Cno,wno,Ano,m3,yno,Xoe,Lno,xno,kno,qe,g3,Sno,zoe,Rno,Bno,Yi,Pno,Qoe,$no,Ino,Woe,qno,Nno,jno,Se,Oh,Hoe,Dno,Gno,_B,Ono,Vno,Xno,Vh,Uoe,zno,Qno,uB,Wno,Hno,Uno,Xh,Joe,Jno,Yno,bB,Kno,Zno,eso,zh,Yoe,oso,rso,FB,tso,aso,nso,Qh,Koe,sso,lso,vB,iso,dso,cso,Wh,Zoe,fso,mso,TB,gso,hso,pso,Hh,ere,_so,uso,MB,bso,Fso,vso,Uh,ore,Tso,Mso,EB,Eso,Cso,wso,Jh,Aso,rre,yso,Lso,h3,xso,Yh,p3,kso,tre,Sso,EBe,Ki,Kh,are,_3,Rso,nre,Bso,CBe,Jo,u3,Pso,Zi,$so,CB,Iso,qso,wB,Nso,jso,Dso,b3,Gso,sre,Oso,Vso,Xso,Xr,F3,zso,lre,Qso,Wso,ed,Hso,ire,Uso,Jso,AB,Yso,Kso,Zso,dre,elo,olo,v3,rlo,Ne,T3,tlo,cre,alo,nlo,Xa,slo,fre,llo,ilo,mre,dlo,clo,gre,flo,mlo,glo,T,Zh,hre,hlo,plo,yB,_lo,ulo,blo,ep,pre,Flo,vlo,LB,Tlo,Mlo,Elo,op,_re,Clo,wlo,xB,Alo,ylo,Llo,rp,ure,xlo,klo,kB,Slo,Rlo,Blo,tp,bre,Plo,$lo,SB,Ilo,qlo,Nlo,ap,Fre,jlo,Dlo,RB,Glo,Olo,Vlo,np,vre,Xlo,zlo,BB,Qlo,Wlo,Hlo,sp,Tre,Ulo,Jlo,PB,Ylo,Klo,Zlo,lp,Mre,eio,oio,$B,rio,tio,aio,ip,Ere,nio,sio,IB,lio,iio,dio,dp,Cre,cio,fio,qB,mio,gio,hio,cp,wre,pio,_io,NB,uio,bio,Fio,fp,Are,vio,Tio,jB,Mio,Eio,Cio,mp,yre,wio,Aio,DB,yio,Lio,xio,gp,Lre,kio,Sio,GB,Rio,Bio,Pio,hp,xre,$io,Iio,OB,qio,Nio,jio,pp,kre,Dio,Gio,VB,Oio,Vio,Xio,_p,Sre,zio,Qio,XB,Wio,Hio,Uio,up,Rre,Jio,Yio,zB,Kio,Zio,edo,bp,Bre,odo,rdo,QB,tdo,ado,ndo,Fp,Pre,sdo,ldo,WB,ido,ddo,cdo,vp,$re,fdo,mdo,HB,gdo,hdo,pdo,Tp,Ire,_do,udo,UB,bdo,Fdo,vdo,Mp,qre,Tdo,Mdo,JB,Edo,Cdo,wdo,Ep,Nre,Ado,ydo,YB,Ldo,xdo,kdo,Cp,jre,Sdo,Rdo,KB,Bdo,Pdo,$do,wp,Dre,Ido,qdo,ZB,Ndo,jdo,Ddo,Ap,Gre,Gdo,Odo,eP,Vdo,Xdo,zdo,yp,Ore,Qdo,Wdo,oP,Hdo,Udo,Jdo,Lp,Vre,Ydo,Kdo,rP,Zdo,eco,oco,Gs,Xre,rco,tco,tP,aco,nco,aP,sco,lco,ico,xp,zre,dco,cco,nP,fco,mco,gco,kp,Qre,hco,pco,sP,_co,uco,bco,Sp,Wre,Fco,vco,lP,Tco,Mco,Eco,Rp,Hre,Cco,wco,iP,Aco,yco,Lco,Bp,Ure,xco,kco,dP,Sco,Rco,Bco,Pp,Jre,Pco,$co,cP,Ico,qco,Nco,$p,Yre,jco,Dco,fP,Gco,Oco,Vco,Ip,Kre,Xco,zco,mP,Qco,Wco,Hco,qp,Zre,Uco,Jco,gP,Yco,Kco,Zco,Np,ete,efo,ofo,hP,rfo,tfo,afo,jp,ote,nfo,sfo,pP,lfo,ifo,dfo,Dp,rte,cfo,ffo,_P,mfo,gfo,hfo,Gp,tte,pfo,_fo,uP,ufo,bfo,Ffo,Op,ate,vfo,Tfo,bP,Mfo,Efo,Cfo,Vp,nte,wfo,Afo,FP,yfo,Lfo,xfo,Xp,ste,kfo,Sfo,vP,Rfo,Bfo,Pfo,zp,lte,$fo,Ifo,TP,qfo,Nfo,jfo,Qp,ite,Dfo,Gfo,MP,Ofo,Vfo,Xfo,Wp,dte,zfo,Qfo,EP,Wfo,Hfo,Ufo,Hp,cte,Jfo,Yfo,CP,Kfo,Zfo,emo,Up,fte,omo,rmo,wP,tmo,amo,nmo,Jp,mte,smo,lmo,AP,imo,dmo,cmo,Yp,gte,fmo,mmo,yP,gmo,hmo,pmo,Kp,hte,_mo,umo,LP,bmo,Fmo,vmo,Zp,pte,Tmo,Mmo,xP,Emo,Cmo,wmo,e_,_te,Amo,ymo,kP,Lmo,xmo,kmo,o_,ute,Smo,Rmo,SP,Bmo,Pmo,$mo,r_,bte,Imo,qmo,RP,Nmo,jmo,Dmo,t_,Fte,Gmo,Omo,BP,Vmo,Xmo,zmo,a_,vte,Qmo,Wmo,PP,Hmo,Umo,Jmo,n_,Tte,Ymo,Kmo,$P,Zmo,ego,ogo,s_,Mte,rgo,tgo,IP,ago,ngo,sgo,l_,Ete,lgo,igo,qP,dgo,cgo,fgo,i_,Cte,mgo,ggo,NP,hgo,pgo,_go,d_,wte,ugo,bgo,jP,Fgo,vgo,Tgo,c_,Ate,Mgo,Ego,DP,Cgo,wgo,Ago,f_,yte,ygo,Lgo,GP,xgo,kgo,Sgo,m_,Lte,Rgo,Bgo,OP,Pgo,$go,Igo,g_,xte,qgo,Ngo,VP,jgo,Dgo,Ggo,h_,kte,Ogo,Vgo,XP,Xgo,zgo,Qgo,p_,Ste,Wgo,Hgo,zP,Ugo,Jgo,Ygo,__,Rte,Kgo,Zgo,QP,eho,oho,rho,u_,Bte,tho,aho,WP,nho,sho,lho,b_,Pte,iho,dho,HP,cho,fho,mho,F_,$te,gho,hho,UP,pho,_ho,uho,v_,Ite,bho,Fho,JP,vho,Tho,Mho,T_,qte,Eho,Cho,YP,who,Aho,yho,M_,Nte,Lho,xho,KP,kho,Sho,Rho,E_,jte,Bho,Pho,ZP,$ho,Iho,qho,C_,Dte,Nho,jho,e$,Dho,Gho,Oho,w_,Gte,Vho,Xho,o$,zho,Qho,Who,A_,Ote,Hho,Uho,r$,Jho,Yho,Kho,y_,Vte,Zho,epo,t$,opo,rpo,tpo,L_,Xte,apo,npo,a$,spo,lpo,ipo,x_,zte,dpo,cpo,n$,fpo,mpo,gpo,k_,Qte,hpo,ppo,s$,_po,upo,bpo,S_,Wte,Fpo,vpo,l$,Tpo,Mpo,Epo,R_,Hte,Cpo,wpo,i$,Apo,ypo,Lpo,B_,Ute,xpo,kpo,d$,Spo,Rpo,Bpo,P_,Jte,Ppo,$po,c$,Ipo,qpo,Npo,$_,Yte,jpo,Dpo,f$,Gpo,Opo,Vpo,I_,Kte,Xpo,zpo,m$,Qpo,Wpo,Hpo,q_,Zte,Upo,Jpo,g$,Ypo,Kpo,Zpo,N_,eae,e_o,o_o,h$,r_o,t_o,a_o,j_,n_o,oae,s_o,l_o,rae,i_o,d_o,tae,c_o,f_o,M3,wBe,od,D_,aae,E3,m_o,nae,g_o,ABe,Yo,C3,h_o,rd,p_o,p$,__o,u_o,_$,b_o,F_o,v_o,w3,T_o,sae,M_o,E_o,C_o,zr,A3,w_o,lae,A_o,y_o,td,L_o,iae,x_o,k_o,u$,S_o,R_o,B_o,dae,P_o,$_o,y3,I_o,je,L3,q_o,cae,N_o,j_o,za,D_o,fae,G_o,O_o,mae,V_o,X_o,gae,z_o,Q_o,W_o,S,G_,hae,H_o,U_o,b$,J_o,Y_o,K_o,O_,pae,Z_o,euo,F$,ouo,ruo,tuo,V_,_ae,auo,nuo,v$,suo,luo,iuo,X_,uae,duo,cuo,T$,fuo,muo,guo,z_,bae,huo,puo,M$,_uo,uuo,buo,Q_,Fae,Fuo,vuo,E$,Tuo,Muo,Euo,W_,vae,Cuo,wuo,C$,Auo,yuo,Luo,H_,Tae,xuo,kuo,w$,Suo,Ruo,Buo,U_,Mae,Puo,$uo,A$,Iuo,quo,Nuo,J_,Eae,juo,Duo,y$,Guo,Ouo,Vuo,Y_,Cae,Xuo,zuo,L$,Quo,Wuo,Huo,K_,wae,Uuo,Juo,x$,Yuo,Kuo,Zuo,Z_,Aae,e2o,o2o,k$,r2o,t2o,a2o,eu,yae,n2o,s2o,S$,l2o,i2o,d2o,ou,Lae,c2o,f2o,R$,m2o,g2o,h2o,ru,xae,p2o,_2o,B$,u2o,b2o,F2o,tu,kae,v2o,T2o,P$,M2o,E2o,C2o,au,Sae,w2o,A2o,$$,y2o,L2o,x2o,nu,Rae,k2o,S2o,I$,R2o,B2o,P2o,su,Bae,$2o,I2o,q$,q2o,N2o,j2o,lu,Pae,D2o,G2o,N$,O2o,V2o,X2o,iu,$ae,z2o,Q2o,j$,W2o,H2o,U2o,du,Iae,J2o,Y2o,D$,K2o,Z2o,e1o,cu,qae,o1o,r1o,G$,t1o,a1o,n1o,fu,Nae,s1o,l1o,O$,i1o,d1o,c1o,mu,jae,f1o,m1o,V$,g1o,h1o,p1o,gu,Dae,_1o,u1o,X$,b1o,F1o,v1o,hu,Gae,T1o,M1o,z$,E1o,C1o,w1o,pu,Oae,A1o,y1o,Q$,L1o,x1o,k1o,_u,Vae,S1o,R1o,W$,B1o,P1o,$1o,uu,Xae,I1o,q1o,H$,N1o,j1o,D1o,bu,zae,G1o,O1o,U$,V1o,X1o,z1o,Fu,Qae,Q1o,W1o,J$,H1o,U1o,J1o,vu,Wae,Y1o,K1o,Y$,Z1o,ebo,obo,Tu,Hae,rbo,tbo,K$,abo,nbo,sbo,Mu,Uae,lbo,ibo,Z$,dbo,cbo,fbo,Eu,Jae,mbo,gbo,eI,hbo,pbo,_bo,Cu,Yae,ubo,bbo,oI,Fbo,vbo,Tbo,wu,Kae,Mbo,Ebo,rI,Cbo,wbo,Abo,Au,Zae,ybo,Lbo,tI,xbo,kbo,Sbo,yu,Rbo,ene,Bbo,Pbo,one,$bo,Ibo,rne,qbo,Nbo,x3,yBe,ad,Lu,tne,k3,jbo,ane,Dbo,LBe,Ko,S3,Gbo,nd,Obo,aI,Vbo,Xbo,nI,zbo,Qbo,Wbo,R3,Hbo,nne,Ubo,Jbo,Ybo,Qr,B3,Kbo,sne,Zbo,e6o,sd,o6o,lne,r6o,t6o,sI,a6o,n6o,s6o,ine,l6o,i6o,P3,d6o,De,$3,c6o,dne,f6o,m6o,Qa,g6o,cne,h6o,p6o,fne,_6o,u6o,mne,b6o,F6o,v6o,$,xu,gne,T6o,M6o,lI,E6o,C6o,w6o,ku,hne,A6o,y6o,iI,L6o,x6o,k6o,Su,pne,S6o,R6o,dI,B6o,P6o,$6o,Ru,_ne,I6o,q6o,cI,N6o,j6o,D6o,Bu,une,G6o,O6o,fI,V6o,X6o,z6o,Pu,bne,Q6o,W6o,mI,H6o,U6o,J6o,$u,Fne,Y6o,K6o,gI,Z6o,eFo,oFo,Iu,vne,rFo,tFo,hI,aFo,nFo,sFo,qu,Tne,lFo,iFo,pI,dFo,cFo,fFo,Nu,Mne,mFo,gFo,_I,hFo,pFo,_Fo,ju,Ene,uFo,bFo,uI,FFo,vFo,TFo,Du,Cne,MFo,EFo,bI,CFo,wFo,AFo,Gu,wne,yFo,LFo,FI,xFo,kFo,SFo,Ou,Ane,RFo,BFo,vI,PFo,$Fo,IFo,Vu,yne,qFo,NFo,TI,jFo,DFo,GFo,Xu,Lne,OFo,VFo,MI,XFo,zFo,QFo,zu,xne,WFo,HFo,EI,UFo,JFo,YFo,Qu,kne,KFo,ZFo,CI,evo,ovo,rvo,Wu,Sne,tvo,avo,wI,nvo,svo,lvo,Hu,Rne,ivo,dvo,AI,cvo,fvo,mvo,Uu,Bne,gvo,hvo,yI,pvo,_vo,uvo,Ju,Pne,bvo,Fvo,LI,vvo,Tvo,Mvo,Yu,$ne,Evo,Cvo,xI,wvo,Avo,yvo,Ku,Ine,Lvo,xvo,kI,kvo,Svo,Rvo,Zu,qne,Bvo,Pvo,SI,$vo,Ivo,qvo,e2,Nne,Nvo,jvo,RI,Dvo,Gvo,Ovo,o2,jne,Vvo,Xvo,BI,zvo,Qvo,Wvo,r2,Dne,Hvo,Uvo,PI,Jvo,Yvo,Kvo,t2,Gne,Zvo,eTo,$I,oTo,rTo,tTo,a2,One,aTo,nTo,II,sTo,lTo,iTo,n2,Vne,dTo,cTo,qI,fTo,mTo,gTo,s2,Xne,hTo,pTo,NI,_To,uTo,bTo,l2,zne,FTo,vTo,jI,TTo,MTo,ETo,i2,Qne,CTo,wTo,DI,ATo,yTo,LTo,d2,Wne,xTo,kTo,GI,STo,RTo,BTo,c2,PTo,Hne,$To,ITo,Une,qTo,NTo,Jne,jTo,DTo,I3,xBe,ld,f2,Yne,q3,GTo,Kne,OTo,kBe,Zo,N3,VTo,id,XTo,OI,zTo,QTo,VI,WTo,HTo,UTo,j3,JTo,Zne,YTo,KTo,ZTo,Wr,D3,e7o,ese,o7o,r7o,dd,t7o,ose,a7o,n7o,XI,s7o,l7o,i7o,rse,d7o,c7o,G3,f7o,Ge,O3,m7o,tse,g7o,h7o,Wa,p7o,ase,_7o,u7o,nse,b7o,F7o,sse,v7o,T7o,M7o,I,m2,lse,E7o,C7o,zI,w7o,A7o,y7o,g2,ise,L7o,x7o,QI,k7o,S7o,R7o,h2,dse,B7o,P7o,WI,$7o,I7o,q7o,p2,cse,N7o,j7o,HI,D7o,G7o,O7o,_2,fse,V7o,X7o,UI,z7o,Q7o,W7o,u2,mse,H7o,U7o,JI,J7o,Y7o,K7o,b2,gse,Z7o,e9o,YI,o9o,r9o,t9o,F2,hse,a9o,n9o,KI,s9o,l9o,i9o,v2,pse,d9o,c9o,ZI,f9o,m9o,g9o,T2,_se,h9o,p9o,eq,_9o,u9o,b9o,M2,use,F9o,v9o,oq,T9o,M9o,E9o,E2,bse,C9o,w9o,rq,A9o,y9o,L9o,C2,Fse,x9o,k9o,tq,S9o,R9o,B9o,w2,vse,P9o,$9o,aq,I9o,q9o,N9o,A2,Tse,j9o,D9o,nq,G9o,O9o,V9o,y2,Mse,X9o,z9o,sq,Q9o,W9o,H9o,L2,Ese,U9o,J9o,lq,Y9o,K9o,Z9o,x2,Cse,eMo,oMo,iq,rMo,tMo,aMo,k2,wse,nMo,sMo,dq,lMo,iMo,dMo,S2,Ase,cMo,fMo,cq,mMo,gMo,hMo,R2,yse,pMo,_Mo,fq,uMo,bMo,FMo,B2,Lse,vMo,TMo,mq,MMo,EMo,CMo,P2,xse,wMo,AMo,gq,yMo,LMo,xMo,$2,kse,kMo,SMo,hq,RMo,BMo,PMo,I2,Sse,$Mo,IMo,pq,qMo,NMo,jMo,q2,Rse,DMo,GMo,_q,OMo,VMo,XMo,N2,Bse,zMo,QMo,uq,WMo,HMo,UMo,j2,Pse,JMo,YMo,bq,KMo,ZMo,e4o,D2,$se,o4o,r4o,Fq,t4o,a4o,n4o,G2,Ise,s4o,l4o,vq,i4o,d4o,c4o,O2,qse,f4o,m4o,Nse,g4o,h4o,p4o,V2,jse,_4o,u4o,Tq,b4o,F4o,v4o,X2,Dse,T4o,M4o,Mq,E4o,C4o,w4o,z2,Gse,A4o,y4o,Eq,L4o,x4o,k4o,Q2,Ose,S4o,R4o,Cq,B4o,P4o,$4o,W2,I4o,Vse,q4o,N4o,Xse,j4o,D4o,zse,G4o,O4o,V3,SBe,cd,H2,Qse,X3,V4o,Wse,X4o,RBe,er,z3,z4o,fd,Q4o,wq,W4o,H4o,Aq,U4o,J4o,Y4o,Q3,K4o,Hse,Z4o,eEo,oEo,Hr,W3,rEo,Use,tEo,aEo,md,nEo,Jse,sEo,lEo,yq,iEo,dEo,cEo,Yse,fEo,mEo,H3,gEo,Oe,U3,hEo,Kse,pEo,_Eo,Ha,uEo,Zse,bEo,FEo,ele,vEo,TEo,ole,MEo,EEo,CEo,ae,U2,rle,wEo,AEo,Lq,yEo,LEo,xEo,J2,tle,kEo,SEo,xq,REo,BEo,PEo,Y2,ale,$Eo,IEo,kq,qEo,NEo,jEo,K2,nle,DEo,GEo,Sq,OEo,VEo,XEo,Z2,sle,zEo,QEo,Rq,WEo,HEo,UEo,e1,lle,JEo,YEo,Bq,KEo,ZEo,e5o,o1,ile,o5o,r5o,Pq,t5o,a5o,n5o,r1,dle,s5o,l5o,$q,i5o,d5o,c5o,t1,cle,f5o,m5o,Iq,g5o,h5o,p5o,a1,fle,_5o,u5o,qq,b5o,F5o,v5o,n1,mle,T5o,M5o,Nq,E5o,C5o,w5o,s1,gle,A5o,y5o,jq,L5o,x5o,k5o,l1,hle,S5o,R5o,Dq,B5o,P5o,$5o,i1,ple,I5o,q5o,Gq,N5o,j5o,D5o,d1,_le,G5o,O5o,Oq,V5o,X5o,z5o,c1,ule,Q5o,W5o,Vq,H5o,U5o,J5o,f1,ble,Y5o,K5o,Xq,Z5o,e3o,o3o,m1,Fle,r3o,t3o,zq,a3o,n3o,s3o,g1,l3o,vle,i3o,d3o,Tle,c3o,f3o,Mle,m3o,g3o,J3,BBe,gd,h1,Ele,Y3,h3o,Cle,p3o,PBe,or,K3,_3o,hd,u3o,Qq,b3o,F3o,Wq,v3o,T3o,M3o,Z3,E3o,wle,C3o,w3o,A3o,Ur,eC,y3o,Ale,L3o,x3o,pd,k3o,yle,S3o,R3o,Hq,B3o,P3o,$3o,Lle,I3o,q3o,oC,N3o,Ve,rC,j3o,xle,D3o,G3o,Ua,O3o,kle,V3o,X3o,Sle,z3o,Q3o,Rle,W3o,H3o,U3o,y,p1,Ble,J3o,Y3o,Uq,K3o,Z3o,eCo,_1,Ple,oCo,rCo,Jq,tCo,aCo,nCo,u1,$le,sCo,lCo,Yq,iCo,dCo,cCo,b1,Ile,fCo,mCo,Kq,gCo,hCo,pCo,F1,qle,_Co,uCo,Zq,bCo,FCo,vCo,v1,Nle,TCo,MCo,eN,ECo,CCo,wCo,T1,jle,ACo,yCo,oN,LCo,xCo,kCo,M1,Dle,SCo,RCo,rN,BCo,PCo,$Co,E1,Gle,ICo,qCo,tN,NCo,jCo,DCo,C1,Ole,GCo,OCo,aN,VCo,XCo,zCo,w1,Vle,QCo,WCo,nN,HCo,UCo,JCo,A1,Xle,YCo,KCo,sN,ZCo,ewo,owo,y1,zle,rwo,two,lN,awo,nwo,swo,L1,Qle,lwo,iwo,iN,dwo,cwo,fwo,x1,Wle,mwo,gwo,dN,hwo,pwo,_wo,k1,Hle,uwo,bwo,cN,Fwo,vwo,Two,S1,Ule,Mwo,Ewo,fN,Cwo,wwo,Awo,R1,Jle,ywo,Lwo,mN,xwo,kwo,Swo,B1,Yle,Rwo,Bwo,gN,Pwo,$wo,Iwo,P1,Kle,qwo,Nwo,hN,jwo,Dwo,Gwo,$1,Zle,Owo,Vwo,pN,Xwo,zwo,Qwo,I1,eie,Wwo,Hwo,_N,Uwo,Jwo,Ywo,q1,oie,Kwo,Zwo,uN,eAo,oAo,rAo,N1,rie,tAo,aAo,bN,nAo,sAo,lAo,j1,tie,iAo,dAo,FN,cAo,fAo,mAo,D1,aie,gAo,hAo,vN,pAo,_Ao,uAo,G1,nie,bAo,FAo,TN,vAo,TAo,MAo,O1,sie,EAo,CAo,MN,wAo,AAo,yAo,V1,lie,LAo,xAo,EN,kAo,SAo,RAo,X1,iie,BAo,PAo,CN,$Ao,IAo,qAo,z1,die,NAo,jAo,wN,DAo,GAo,OAo,Q1,cie,VAo,XAo,AN,zAo,QAo,WAo,W1,fie,HAo,UAo,yN,JAo,YAo,KAo,H1,mie,ZAo,e0o,LN,o0o,r0o,t0o,U1,gie,a0o,n0o,xN,s0o,l0o,i0o,J1,hie,d0o,c0o,kN,f0o,m0o,g0o,Y1,pie,h0o,p0o,SN,_0o,u0o,b0o,K1,_ie,F0o,v0o,RN,T0o,M0o,E0o,Z1,uie,C0o,w0o,BN,A0o,y0o,L0o,eb,bie,x0o,k0o,PN,S0o,R0o,B0o,ob,Fie,P0o,$0o,$N,I0o,q0o,N0o,rb,vie,j0o,D0o,IN,G0o,O0o,V0o,tb,Tie,X0o,z0o,qN,Q0o,W0o,H0o,ab,Mie,U0o,J0o,NN,Y0o,K0o,Z0o,nb,Eie,eyo,oyo,jN,ryo,tyo,ayo,sb,Cie,nyo,syo,DN,lyo,iyo,dyo,lb,wie,cyo,fyo,GN,myo,gyo,hyo,ib,pyo,Aie,_yo,uyo,yie,byo,Fyo,Lie,vyo,Tyo,tC,$Be,_d,db,xie,aC,Myo,kie,Eyo,IBe,rr,nC,Cyo,ud,wyo,ON,Ayo,yyo,VN,Lyo,xyo,kyo,sC,Syo,Sie,Ryo,Byo,Pyo,Jr,lC,$yo,Rie,Iyo,qyo,bd,Nyo,Bie,jyo,Dyo,XN,Gyo,Oyo,Vyo,Pie,Xyo,zyo,iC,Qyo,Xe,dC,Wyo,$ie,Hyo,Uyo,Ja,Jyo,Iie,Yyo,Kyo,qie,Zyo,eLo,Nie,oLo,rLo,tLo,G,cb,jie,aLo,nLo,zN,sLo,lLo,iLo,fb,Die,dLo,cLo,QN,fLo,mLo,gLo,mb,Gie,hLo,pLo,WN,_Lo,uLo,bLo,gb,Oie,FLo,vLo,HN,TLo,MLo,ELo,hb,Vie,CLo,wLo,UN,ALo,yLo,LLo,pb,Xie,xLo,kLo,JN,SLo,RLo,BLo,_b,zie,PLo,$Lo,YN,ILo,qLo,NLo,ub,Qie,jLo,DLo,KN,GLo,OLo,VLo,bb,Wie,XLo,zLo,ZN,QLo,WLo,HLo,Fb,Hie,ULo,JLo,ej,YLo,KLo,ZLo,vb,Uie,e8o,o8o,oj,r8o,t8o,a8o,Tb,Jie,n8o,s8o,rj,l8o,i8o,d8o,Mb,Yie,c8o,f8o,tj,m8o,g8o,h8o,Eb,Kie,p8o,_8o,aj,u8o,b8o,F8o,Cb,Zie,v8o,T8o,nj,M8o,E8o,C8o,wb,ede,w8o,A8o,sj,y8o,L8o,x8o,Ab,ode,k8o,S8o,lj,R8o,B8o,P8o,yb,rde,$8o,I8o,ij,q8o,N8o,j8o,Lb,tde,D8o,G8o,dj,O8o,V8o,X8o,xb,ade,z8o,Q8o,cj,W8o,H8o,U8o,kb,nde,J8o,Y8o,fj,K8o,Z8o,exo,Sb,sde,oxo,rxo,mj,txo,axo,nxo,Rb,lde,sxo,lxo,gj,ixo,dxo,cxo,Bb,ide,fxo,mxo,hj,gxo,hxo,pxo,Pb,dde,_xo,uxo,pj,bxo,Fxo,vxo,$b,cde,Txo,Mxo,_j,Exo,Cxo,wxo,Ib,fde,Axo,yxo,uj,Lxo,xxo,kxo,qb,mde,Sxo,Rxo,bj,Bxo,Pxo,$xo,Nb,Ixo,gde,qxo,Nxo,hde,jxo,Dxo,pde,Gxo,Oxo,cC,qBe,Fd,jb,_de,fC,Vxo,ude,Xxo,NBe,tr,mC,zxo,vd,Qxo,Fj,Wxo,Hxo,vj,Uxo,Jxo,Yxo,gC,Kxo,bde,Zxo,eko,oko,Yr,hC,rko,Fde,tko,ako,Td,nko,vde,sko,lko,Tj,iko,dko,cko,Tde,fko,mko,pC,gko,ze,_C,hko,Mde,pko,_ko,Ya,uko,Ede,bko,Fko,Cde,vko,Tko,wde,Mko,Eko,Cko,da,Db,Ade,wko,Ako,Mj,yko,Lko,xko,Gb,yde,kko,Sko,Ej,Rko,Bko,Pko,Ob,Lde,$ko,Iko,Cj,qko,Nko,jko,Vb,xde,Dko,Gko,wj,Oko,Vko,Xko,Xb,kde,zko,Qko,Aj,Wko,Hko,Uko,zb,Jko,Sde,Yko,Kko,Rde,Zko,eSo,Bde,oSo,rSo,uC,jBe,Md,Qb,Pde,bC,tSo,$de,aSo,DBe,ar,FC,nSo,Ed,sSo,yj,lSo,iSo,Lj,dSo,cSo,fSo,vC,mSo,Ide,gSo,hSo,pSo,Kr,TC,_So,qde,uSo,bSo,Cd,FSo,Nde,vSo,TSo,xj,MSo,ESo,CSo,jde,wSo,ASo,MC,ySo,Qe,EC,LSo,Dde,xSo,kSo,Ka,SSo,Gde,RSo,BSo,Ode,PSo,$So,Vde,ISo,qSo,NSo,j,Wb,Xde,jSo,DSo,kj,GSo,OSo,VSo,Hb,zde,XSo,zSo,Sj,QSo,WSo,HSo,Ub,Qde,USo,JSo,Rj,YSo,KSo,ZSo,Jb,Wde,eRo,oRo,Bj,rRo,tRo,aRo,Yb,Hde,nRo,sRo,Pj,lRo,iRo,dRo,Kb,Ude,cRo,fRo,$j,mRo,gRo,hRo,Zb,Jde,pRo,_Ro,Ij,uRo,bRo,FRo,e6,Yde,vRo,TRo,qj,MRo,ERo,CRo,o6,Kde,wRo,ARo,Nj,yRo,LRo,xRo,r6,Zde,kRo,SRo,jj,RRo,BRo,PRo,t6,ece,$Ro,IRo,Dj,qRo,NRo,jRo,a6,oce,DRo,GRo,Gj,ORo,VRo,XRo,n6,rce,zRo,QRo,Oj,WRo,HRo,URo,s6,tce,JRo,YRo,Vj,KRo,ZRo,eBo,l6,ace,oBo,rBo,Xj,tBo,aBo,nBo,i6,nce,sBo,lBo,zj,iBo,dBo,cBo,d6,sce,fBo,mBo,Qj,gBo,hBo,pBo,c6,lce,_Bo,uBo,Wj,bBo,FBo,vBo,f6,ice,TBo,MBo,Hj,EBo,CBo,wBo,m6,dce,ABo,yBo,Uj,LBo,xBo,kBo,g6,cce,SBo,RBo,Jj,BBo,PBo,$Bo,h6,fce,IBo,qBo,Yj,NBo,jBo,DBo,p6,mce,GBo,OBo,Kj,VBo,XBo,zBo,_6,gce,QBo,WBo,Zj,HBo,UBo,JBo,u6,hce,YBo,KBo,eD,ZBo,ePo,oPo,b6,pce,rPo,tPo,oD,aPo,nPo,sPo,F6,_ce,lPo,iPo,rD,dPo,cPo,fPo,v6,uce,mPo,gPo,tD,hPo,pPo,_Po,T6,bce,uPo,bPo,aD,FPo,vPo,TPo,M6,Fce,MPo,EPo,nD,CPo,wPo,APo,E6,vce,yPo,LPo,sD,xPo,kPo,SPo,C6,Tce,RPo,BPo,lD,PPo,$Po,IPo,w6,Mce,qPo,NPo,iD,jPo,DPo,GPo,A6,OPo,Ece,VPo,XPo,Cce,zPo,QPo,wce,WPo,HPo,CC,GBe,wd,y6,Ace,wC,UPo,yce,JPo,OBe,nr,AC,YPo,Ad,KPo,dD,ZPo,e$o,cD,o$o,r$o,t$o,yC,a$o,Lce,n$o,s$o,l$o,Zr,LC,i$o,xce,d$o,c$o,yd,f$o,kce,m$o,g$o,fD,h$o,p$o,_$o,Sce,u$o,b$o,xC,F$o,We,kC,v$o,Rce,T$o,M$o,Za,E$o,Bce,C$o,w$o,Pce,A$o,y$o,$ce,L$o,x$o,k$o,R,L6,Ice,S$o,R$o,mD,B$o,P$o,$$o,x6,qce,I$o,q$o,gD,N$o,j$o,D$o,k6,Nce,G$o,O$o,hD,V$o,X$o,z$o,S6,jce,Q$o,W$o,pD,H$o,U$o,J$o,R6,Dce,Y$o,K$o,_D,Z$o,eIo,oIo,B6,Gce,rIo,tIo,uD,aIo,nIo,sIo,P6,Oce,lIo,iIo,bD,dIo,cIo,fIo,$6,Vce,mIo,gIo,FD,hIo,pIo,_Io,I6,Xce,uIo,bIo,vD,FIo,vIo,TIo,q6,zce,MIo,EIo,TD,CIo,wIo,AIo,N6,Qce,yIo,LIo,MD,xIo,kIo,SIo,j6,Wce,RIo,BIo,ED,PIo,$Io,IIo,D6,Hce,qIo,NIo,CD,jIo,DIo,GIo,G6,Uce,OIo,VIo,wD,XIo,zIo,QIo,O6,Jce,WIo,HIo,AD,UIo,JIo,YIo,V6,Yce,KIo,ZIo,yD,eqo,oqo,rqo,X6,Kce,tqo,aqo,LD,nqo,sqo,lqo,z6,Zce,iqo,dqo,xD,cqo,fqo,mqo,Q6,efe,gqo,hqo,kD,pqo,_qo,uqo,W6,ofe,bqo,Fqo,SD,vqo,Tqo,Mqo,H6,rfe,Eqo,Cqo,RD,wqo,Aqo,yqo,U6,tfe,Lqo,xqo,BD,kqo,Sqo,Rqo,J6,afe,Bqo,Pqo,PD,$qo,Iqo,qqo,Y6,nfe,Nqo,jqo,$D,Dqo,Gqo,Oqo,K6,sfe,Vqo,Xqo,ID,zqo,Qqo,Wqo,Z6,lfe,Hqo,Uqo,qD,Jqo,Yqo,Kqo,eF,ife,Zqo,eNo,ND,oNo,rNo,tNo,oF,dfe,aNo,nNo,jD,sNo,lNo,iNo,rF,cfe,dNo,cNo,DD,fNo,mNo,gNo,tF,ffe,hNo,pNo,GD,_No,uNo,bNo,aF,mfe,FNo,vNo,OD,TNo,MNo,ENo,nF,gfe,CNo,wNo,VD,ANo,yNo,LNo,sF,hfe,xNo,kNo,XD,SNo,RNo,BNo,lF,pfe,PNo,$No,zD,INo,qNo,NNo,iF,_fe,jNo,DNo,QD,GNo,ONo,VNo,dF,ufe,XNo,zNo,WD,QNo,WNo,HNo,cF,bfe,UNo,JNo,HD,YNo,KNo,ZNo,fF,Ffe,ejo,ojo,UD,rjo,tjo,ajo,mF,vfe,njo,sjo,JD,ljo,ijo,djo,gF,cjo,Tfe,fjo,mjo,Mfe,gjo,hjo,Efe,pjo,_jo,SC,VBe,Ld,hF,Cfe,RC,ujo,wfe,bjo,XBe,sr,BC,Fjo,xd,vjo,YD,Tjo,Mjo,KD,Ejo,Cjo,wjo,PC,Ajo,Afe,yjo,Ljo,xjo,et,$C,kjo,yfe,Sjo,Rjo,kd,Bjo,Lfe,Pjo,$jo,ZD,Ijo,qjo,Njo,xfe,jjo,Djo,IC,Gjo,He,qC,Ojo,kfe,Vjo,Xjo,en,zjo,Sfe,Qjo,Wjo,Rfe,Hjo,Ujo,Bfe,Jjo,Yjo,Kjo,Pfe,pF,$fe,Zjo,eDo,eG,oDo,rDo,tDo,_F,aDo,Ife,nDo,sDo,qfe,lDo,iDo,Nfe,dDo,cDo,NC,zBe,Sd,uF,jfe,jC,fDo,Dfe,mDo,QBe,lr,DC,gDo,Rd,hDo,oG,pDo,_Do,rG,uDo,bDo,FDo,GC,vDo,Gfe,TDo,MDo,EDo,ot,OC,CDo,Ofe,wDo,ADo,Bd,yDo,Vfe,LDo,xDo,tG,kDo,SDo,RDo,Xfe,BDo,PDo,VC,$Do,Ue,XC,IDo,zfe,qDo,NDo,on,jDo,Qfe,DDo,GDo,Wfe,ODo,VDo,Hfe,XDo,zDo,QDo,de,bF,Ufe,WDo,HDo,aG,UDo,JDo,YDo,FF,Jfe,KDo,ZDo,nG,eGo,oGo,rGo,vF,Yfe,tGo,aGo,sG,nGo,sGo,lGo,Os,Kfe,iGo,dGo,lG,cGo,fGo,iG,mGo,gGo,hGo,TF,Zfe,pGo,_Go,dG,uGo,bGo,FGo,ma,eme,vGo,TGo,cG,MGo,EGo,fG,CGo,wGo,mG,AGo,yGo,LGo,MF,ome,xGo,kGo,gG,SGo,RGo,BGo,EF,rme,PGo,$Go,hG,IGo,qGo,NGo,CF,tme,jGo,DGo,pG,GGo,OGo,VGo,wF,ame,XGo,zGo,_G,QGo,WGo,HGo,AF,nme,UGo,JGo,uG,YGo,KGo,ZGo,yF,sme,eOo,oOo,bG,rOo,tOo,aOo,LF,lme,nOo,sOo,FG,lOo,iOo,dOo,xF,cOo,ime,fOo,mOo,dme,gOo,hOo,cme,pOo,_Oo,zC,WBe,Pd,kF,fme,QC,uOo,mme,bOo,HBe,ir,WC,FOo,$d,vOo,vG,TOo,MOo,TG,EOo,COo,wOo,HC,AOo,gme,yOo,LOo,xOo,rt,UC,kOo,hme,SOo,ROo,Id,BOo,pme,POo,$Oo,MG,IOo,qOo,NOo,_me,jOo,DOo,JC,GOo,Je,YC,OOo,ume,VOo,XOo,rn,zOo,bme,QOo,WOo,Fme,HOo,UOo,vme,JOo,YOo,KOo,Tme,SF,Mme,ZOo,eVo,EG,oVo,rVo,tVo,RF,aVo,Eme,nVo,sVo,Cme,lVo,iVo,wme,dVo,cVo,KC,UBe,qd,BF,Ame,ZC,fVo,yme,mVo,JBe,dr,ew,gVo,Nd,hVo,CG,pVo,_Vo,wG,uVo,bVo,FVo,ow,vVo,Lme,TVo,MVo,EVo,tt,rw,CVo,xme,wVo,AVo,jd,yVo,kme,LVo,xVo,AG,kVo,SVo,RVo,Sme,BVo,PVo,tw,$Vo,Ye,aw,IVo,Rme,qVo,NVo,tn,jVo,Bme,DVo,GVo,Pme,OVo,VVo,$me,XVo,zVo,QVo,Re,PF,Ime,WVo,HVo,yG,UVo,JVo,YVo,$F,qme,KVo,ZVo,LG,eXo,oXo,rXo,IF,Nme,tXo,aXo,xG,nXo,sXo,lXo,qF,jme,iXo,dXo,kG,cXo,fXo,mXo,NF,Dme,gXo,hXo,SG,pXo,_Xo,uXo,jF,Gme,bXo,FXo,RG,vXo,TXo,MXo,DF,Ome,EXo,CXo,BG,wXo,AXo,yXo,GF,Vme,LXo,xXo,PG,kXo,SXo,RXo,OF,BXo,Xme,PXo,$Xo,zme,IXo,qXo,Qme,NXo,jXo,nw,YBe,Dd,VF,Wme,sw,DXo,Hme,GXo,KBe,cr,lw,OXo,Gd,VXo,$G,XXo,zXo,IG,QXo,WXo,HXo,iw,UXo,Ume,JXo,YXo,KXo,at,dw,ZXo,Jme,ezo,ozo,Od,rzo,Yme,tzo,azo,qG,nzo,szo,lzo,Kme,izo,dzo,cw,czo,Ke,fw,fzo,Zme,mzo,gzo,an,hzo,ege,pzo,_zo,oge,uzo,bzo,rge,Fzo,vzo,Tzo,nn,XF,tge,Mzo,Ezo,NG,Czo,wzo,Azo,zF,age,yzo,Lzo,jG,xzo,kzo,Szo,QF,nge,Rzo,Bzo,DG,Pzo,$zo,Izo,WF,sge,qzo,Nzo,GG,jzo,Dzo,Gzo,HF,Ozo,lge,Vzo,Xzo,ige,zzo,Qzo,dge,Wzo,Hzo,mw,ZBe,Vd,UF,cge,gw,Uzo,fge,Jzo,ePe,fr,hw,Yzo,Xd,Kzo,OG,Zzo,eQo,VG,oQo,rQo,tQo,pw,aQo,mge,nQo,sQo,lQo,nt,_w,iQo,gge,dQo,cQo,zd,fQo,hge,mQo,gQo,XG,hQo,pQo,_Qo,pge,uQo,bQo,uw,FQo,Ze,bw,vQo,_ge,TQo,MQo,sn,EQo,uge,CQo,wQo,bge,AQo,yQo,Fge,LQo,xQo,kQo,Be,JF,vge,SQo,RQo,zG,BQo,PQo,$Qo,YF,Tge,IQo,qQo,QG,NQo,jQo,DQo,KF,Mge,GQo,OQo,WG,VQo,XQo,zQo,ZF,Ege,QQo,WQo,HG,HQo,UQo,JQo,ev,Cge,YQo,KQo,UG,ZQo,eWo,oWo,ov,wge,rWo,tWo,JG,aWo,nWo,sWo,rv,Age,lWo,iWo,YG,dWo,cWo,fWo,tv,yge,mWo,gWo,KG,hWo,pWo,_Wo,av,uWo,Lge,bWo,FWo,xge,vWo,TWo,kge,MWo,EWo,Fw,oPe,Qd,nv,Sge,vw,CWo,Rge,wWo,rPe,mr,Tw,AWo,Wd,yWo,ZG,LWo,xWo,eO,kWo,SWo,RWo,Mw,BWo,Bge,PWo,$Wo,IWo,st,Ew,qWo,Pge,NWo,jWo,Hd,DWo,$ge,GWo,OWo,oO,VWo,XWo,zWo,Ige,QWo,WWo,Cw,HWo,eo,ww,UWo,qge,JWo,YWo,ln,KWo,Nge,ZWo,eHo,jge,oHo,rHo,Dge,tHo,aHo,nHo,Aw,sv,Gge,sHo,lHo,rO,iHo,dHo,cHo,lv,Oge,fHo,mHo,tO,gHo,hHo,pHo,iv,_Ho,Vge,uHo,bHo,Xge,FHo,vHo,zge,THo,MHo,yw,tPe,Ud,dv,Qge,Lw,EHo,Wge,CHo,aPe,gr,xw,wHo,Jd,AHo,aO,yHo,LHo,nO,xHo,kHo,SHo,kw,RHo,Hge,BHo,PHo,$Ho,lt,Sw,IHo,Uge,qHo,NHo,Yd,jHo,Jge,DHo,GHo,sO,OHo,VHo,XHo,Yge,zHo,QHo,Rw,WHo,oo,Bw,HHo,Kge,UHo,JHo,dn,YHo,Zge,KHo,ZHo,ehe,eUo,oUo,ohe,rUo,tUo,aUo,cn,cv,rhe,nUo,sUo,lO,lUo,iUo,dUo,fv,the,cUo,fUo,iO,mUo,gUo,hUo,mv,ahe,pUo,_Uo,dO,uUo,bUo,FUo,gv,nhe,vUo,TUo,cO,MUo,EUo,CUo,hv,wUo,she,AUo,yUo,lhe,LUo,xUo,ihe,kUo,SUo,Pw,nPe,Kd,pv,dhe,$w,RUo,che,BUo,sPe,hr,Iw,PUo,Zd,$Uo,fO,IUo,qUo,mO,NUo,jUo,DUo,qw,GUo,fhe,OUo,VUo,XUo,it,Nw,zUo,mhe,QUo,WUo,ec,HUo,ghe,UUo,JUo,gO,YUo,KUo,ZUo,hhe,eJo,oJo,jw,rJo,ro,Dw,tJo,phe,aJo,nJo,fn,sJo,_he,lJo,iJo,uhe,dJo,cJo,bhe,fJo,mJo,gJo,oc,_v,Fhe,hJo,pJo,hO,_Jo,uJo,bJo,uv,vhe,FJo,vJo,pO,TJo,MJo,EJo,bv,The,CJo,wJo,_O,AJo,yJo,LJo,Fv,xJo,Mhe,kJo,SJo,Ehe,RJo,BJo,Che,PJo,$Jo,Gw,lPe,rc,vv,whe,Ow,IJo,Ahe,qJo,iPe,pr,Vw,NJo,tc,jJo,uO,DJo,GJo,bO,OJo,VJo,XJo,Xw,zJo,yhe,QJo,WJo,HJo,dt,zw,UJo,Lhe,JJo,YJo,ac,KJo,xhe,ZJo,eYo,FO,oYo,rYo,tYo,khe,aYo,nYo,Qw,sYo,to,Ww,lYo,She,iYo,dYo,mn,cYo,Rhe,fYo,mYo,Bhe,gYo,hYo,Phe,pYo,_Yo,uYo,$he,Tv,Ihe,bYo,FYo,vO,vYo,TYo,MYo,Mv,EYo,qhe,CYo,wYo,Nhe,AYo,yYo,jhe,LYo,xYo,Hw,dPe,nc,Ev,Dhe,Uw,kYo,Ghe,SYo,cPe,_r,Jw,RYo,sc,BYo,TO,PYo,$Yo,MO,IYo,qYo,NYo,Yw,jYo,Ohe,DYo,GYo,OYo,ct,Kw,VYo,Vhe,XYo,zYo,lc,QYo,Xhe,WYo,HYo,EO,UYo,JYo,YYo,zhe,KYo,ZYo,Zw,eKo,ao,eA,oKo,Qhe,rKo,tKo,gn,aKo,Whe,nKo,sKo,Hhe,lKo,iKo,Uhe,dKo,cKo,fKo,Jhe,Cv,Yhe,mKo,gKo,CO,hKo,pKo,_Ko,wv,uKo,Khe,bKo,FKo,Zhe,vKo,TKo,epe,MKo,EKo,oA,fPe,ic,Av,ope,rA,CKo,rpe,wKo,mPe,ur,tA,AKo,dc,yKo,wO,LKo,xKo,AO,kKo,SKo,RKo,aA,BKo,tpe,PKo,$Ko,IKo,ft,nA,qKo,ape,NKo,jKo,cc,DKo,npe,GKo,OKo,yO,VKo,XKo,zKo,spe,QKo,WKo,sA,HKo,no,lA,UKo,lpe,JKo,YKo,hn,KKo,ipe,ZKo,eZo,dpe,oZo,rZo,cpe,tZo,aZo,nZo,pn,yv,fpe,sZo,lZo,LO,iZo,dZo,cZo,Lv,mpe,fZo,mZo,xO,gZo,hZo,pZo,xv,gpe,_Zo,uZo,kO,bZo,FZo,vZo,kv,hpe,TZo,MZo,SO,EZo,CZo,wZo,Sv,AZo,ppe,yZo,LZo,_pe,xZo,kZo,upe,SZo,RZo,iA,gPe,fc,Rv,bpe,dA,BZo,Fpe,PZo,hPe,br,cA,$Zo,mc,IZo,RO,qZo,NZo,BO,jZo,DZo,GZo,fA,OZo,vpe,VZo,XZo,zZo,mt,mA,QZo,Tpe,WZo,HZo,gc,UZo,Mpe,JZo,YZo,PO,KZo,ZZo,eer,Epe,oer,rer,gA,ter,so,hA,aer,Cpe,ner,ser,_n,ler,wpe,ier,der,Ape,cer,fer,ype,mer,ger,her,Lpe,Bv,xpe,per,_er,$O,uer,ber,Fer,Pv,ver,kpe,Ter,Mer,Spe,Eer,Cer,Rpe,wer,Aer,pA,pPe,hc,$v,Bpe,_A,yer,Ppe,Ler,_Pe,Fr,uA,xer,pc,ker,IO,Ser,Rer,qO,Ber,Per,$er,bA,Ier,$pe,qer,Ner,jer,gt,FA,Der,Ipe,Ger,Oer,_c,Ver,qpe,Xer,zer,NO,Qer,Wer,Her,Npe,Uer,Jer,vA,Yer,ho,TA,Ker,jpe,Zer,eor,un,oor,Dpe,ror,tor,Gpe,aor,nor,Ope,sor,lor,ior,x,Iv,Vpe,dor,cor,jO,mor,gor,hor,qv,Xpe,por,_or,DO,uor,bor,For,Nv,zpe,vor,Tor,GO,Mor,Eor,Cor,jv,Qpe,wor,Aor,OO,yor,Lor,xor,Dv,Wpe,kor,Sor,VO,Ror,Bor,Por,Gv,Hpe,$or,Ior,XO,qor,Nor,jor,Ov,Upe,Dor,Gor,zO,Oor,Vor,Xor,Vv,Jpe,zor,Qor,QO,Wor,Hor,Uor,Xv,Ype,Jor,Yor,WO,Kor,Zor,err,zv,Kpe,orr,rrr,HO,trr,arr,nrr,Qv,Zpe,srr,lrr,UO,irr,drr,crr,Wv,e_e,frr,mrr,JO,grr,hrr,prr,Hv,o_e,_rr,urr,YO,brr,Frr,vrr,Uv,r_e,Trr,Mrr,KO,Err,Crr,wrr,Jv,t_e,Arr,yrr,ZO,Lrr,xrr,krr,Yv,a_e,Srr,Rrr,eV,Brr,Prr,$rr,Vs,n_e,Irr,qrr,oV,Nrr,jrr,rV,Drr,Grr,Orr,Kv,s_e,Vrr,Xrr,tV,zrr,Qrr,Wrr,Zv,l_e,Hrr,Urr,aV,Jrr,Yrr,Krr,eT,i_e,Zrr,etr,nV,otr,rtr,ttr,oT,d_e,atr,ntr,sV,str,ltr,itr,rT,c_e,dtr,ctr,lV,ftr,mtr,gtr,tT,f_e,htr,ptr,iV,_tr,utr,btr,aT,m_e,Ftr,vtr,dV,Ttr,Mtr,Etr,nT,g_e,Ctr,wtr,cV,Atr,ytr,Ltr,sT,h_e,xtr,ktr,fV,Str,Rtr,Btr,lT,p_e,Ptr,$tr,mV,Itr,qtr,Ntr,iT,__e,jtr,Dtr,gV,Gtr,Otr,Vtr,dT,u_e,Xtr,ztr,hV,Qtr,Wtr,Htr,cT,b_e,Utr,Jtr,pV,Ytr,Ktr,Ztr,fT,F_e,ear,oar,_V,rar,tar,aar,mT,v_e,nar,sar,uV,lar,iar,dar,gT,T_e,car,far,bV,mar,gar,har,hT,M_e,par,_ar,FV,uar,bar,Far,pT,E_e,Tar,Mar,vV,Ear,Car,war,_T,C_e,Aar,yar,TV,Lar,xar,kar,uT,w_e,Sar,Rar,MV,Bar,Par,$ar,bT,A_e,Iar,qar,EV,Nar,jar,Dar,FT,y_e,Gar,Oar,CV,Var,Xar,zar,vT,L_e,Qar,War,wV,Har,Uar,Jar,TT,x_e,Yar,Kar,AV,Zar,enr,onr,MT,k_e,rnr,tnr,yV,anr,nnr,snr,ET,S_e,lnr,inr,LV,dnr,cnr,fnr,CT,R_e,mnr,gnr,xV,hnr,pnr,_nr,B_e,unr,bnr,MA,uPe,uc,wT,P_e,EA,Fnr,$_e,vnr,bPe,vr,CA,Tnr,bc,Mnr,kV,Enr,Cnr,SV,wnr,Anr,ynr,wA,Lnr,I_e,xnr,knr,Snr,ht,AA,Rnr,q_e,Bnr,Pnr,Fc,$nr,N_e,Inr,qnr,RV,Nnr,jnr,Dnr,j_e,Gnr,Onr,yA,Vnr,po,LA,Xnr,D_e,znr,Qnr,bn,Wnr,G_e,Hnr,Unr,O_e,Jnr,Ynr,V_e,Knr,Znr,esr,H,AT,X_e,osr,rsr,BV,tsr,asr,nsr,yT,z_e,ssr,lsr,PV,isr,dsr,csr,LT,Q_e,fsr,msr,$V,gsr,hsr,psr,xT,W_e,_sr,usr,IV,bsr,Fsr,vsr,kT,H_e,Tsr,Msr,qV,Esr,Csr,wsr,ST,U_e,Asr,ysr,NV,Lsr,xsr,ksr,RT,J_e,Ssr,Rsr,jV,Bsr,Psr,$sr,BT,Y_e,Isr,qsr,DV,Nsr,jsr,Dsr,PT,K_e,Gsr,Osr,GV,Vsr,Xsr,zsr,$T,Z_e,Qsr,Wsr,OV,Hsr,Usr,Jsr,IT,eue,Ysr,Ksr,VV,Zsr,elr,olr,qT,oue,rlr,tlr,XV,alr,nlr,slr,NT,rue,llr,ilr,zV,dlr,clr,flr,jT,tue,mlr,glr,QV,hlr,plr,_lr,DT,aue,ulr,blr,WV,Flr,vlr,Tlr,GT,nue,Mlr,Elr,HV,Clr,wlr,Alr,OT,sue,ylr,Llr,UV,xlr,klr,Slr,VT,lue,Rlr,Blr,JV,Plr,$lr,Ilr,XT,iue,qlr,Nlr,YV,jlr,Dlr,Glr,zT,due,Olr,Vlr,KV,Xlr,zlr,Qlr,QT,cue,Wlr,Hlr,ZV,Ulr,Jlr,Ylr,WT,fue,Klr,Zlr,eX,eir,oir,rir,HT,mue,tir,air,oX,nir,sir,lir,gue,iir,dir,xA,FPe,vc,UT,hue,kA,cir,pue,fir,vPe,Tr,SA,mir,Tc,gir,rX,hir,pir,tX,_ir,uir,bir,RA,Fir,_ue,vir,Tir,Mir,pt,BA,Eir,uue,Cir,wir,Mc,Air,bue,yir,Lir,aX,xir,kir,Sir,Fue,Rir,Bir,PA,Pir,_o,$A,$ir,vue,Iir,qir,Fn,Nir,Tue,jir,Dir,Mue,Gir,Oir,Eue,Vir,Xir,zir,me,JT,Cue,Qir,Wir,nX,Hir,Uir,Jir,YT,wue,Yir,Kir,sX,Zir,edr,odr,KT,Aue,rdr,tdr,lX,adr,ndr,sdr,ZT,yue,ldr,idr,iX,ddr,cdr,fdr,e7,Lue,mdr,gdr,dX,hdr,pdr,_dr,o7,xue,udr,bdr,cX,Fdr,vdr,Tdr,r7,kue,Mdr,Edr,fX,Cdr,wdr,Adr,t7,Sue,ydr,Ldr,mX,xdr,kdr,Sdr,a7,Rue,Rdr,Bdr,gX,Pdr,$dr,Idr,n7,Bue,qdr,Ndr,hX,jdr,Ddr,Gdr,s7,Pue,Odr,Vdr,pX,Xdr,zdr,Qdr,l7,$ue,Wdr,Hdr,_X,Udr,Jdr,Ydr,Iue,Kdr,Zdr,IA,TPe,Ec,i7,que,qA,ecr,Nue,ocr,MPe,Mr,NA,rcr,Cc,tcr,uX,acr,ncr,bX,scr,lcr,icr,jA,dcr,jue,ccr,fcr,mcr,_t,DA,gcr,Due,hcr,pcr,wc,_cr,Gue,ucr,bcr,FX,Fcr,vcr,Tcr,Oue,Mcr,Ecr,GA,Ccr,uo,OA,wcr,Vue,Acr,ycr,vn,Lcr,Xue,xcr,kcr,zue,Scr,Rcr,Que,Bcr,Pcr,$cr,VA,d7,Wue,Icr,qcr,vX,Ncr,jcr,Dcr,c7,Hue,Gcr,Ocr,TX,Vcr,Xcr,zcr,Uue,Qcr,Wcr,XA,EPe,Ac,f7,Jue,zA,Hcr,Yue,Ucr,CPe,Er,QA,Jcr,yc,Ycr,MX,Kcr,Zcr,EX,efr,ofr,rfr,WA,tfr,Kue,afr,nfr,sfr,ut,HA,lfr,Zue,ifr,dfr,Lc,cfr,e2e,ffr,mfr,CX,gfr,hfr,pfr,o2e,_fr,ufr,UA,bfr,bo,JA,Ffr,r2e,vfr,Tfr,Tn,Mfr,t2e,Efr,Cfr,a2e,wfr,Afr,n2e,yfr,Lfr,xfr,J,m7,s2e,kfr,Sfr,wX,Rfr,Bfr,Pfr,g7,l2e,$fr,Ifr,AX,qfr,Nfr,jfr,h7,i2e,Dfr,Gfr,yX,Ofr,Vfr,Xfr,p7,d2e,zfr,Qfr,LX,Wfr,Hfr,Ufr,_7,c2e,Jfr,Yfr,xX,Kfr,Zfr,emr,u7,f2e,omr,rmr,kX,tmr,amr,nmr,b7,m2e,smr,lmr,SX,imr,dmr,cmr,F7,g2e,fmr,mmr,RX,gmr,hmr,pmr,v7,h2e,_mr,umr,BX,bmr,Fmr,vmr,T7,p2e,Tmr,Mmr,PX,Emr,Cmr,wmr,M7,_2e,Amr,ymr,$X,Lmr,xmr,kmr,E7,u2e,Smr,Rmr,IX,Bmr,Pmr,$mr,C7,b2e,Imr,qmr,qX,Nmr,jmr,Dmr,w7,F2e,Gmr,Omr,NX,Vmr,Xmr,zmr,A7,v2e,Qmr,Wmr,jX,Hmr,Umr,Jmr,y7,T2e,Ymr,Kmr,DX,Zmr,egr,ogr,L7,M2e,rgr,tgr,GX,agr,ngr,sgr,x7,E2e,lgr,igr,OX,dgr,cgr,fgr,k7,C2e,mgr,ggr,VX,hgr,pgr,_gr,S7,w2e,ugr,bgr,XX,Fgr,vgr,Tgr,A2e,Mgr,Egr,YA,wPe,xc,R7,y2e,KA,Cgr,L2e,wgr,APe,Cr,ZA,Agr,kc,ygr,zX,Lgr,xgr,QX,kgr,Sgr,Rgr,e0,Bgr,x2e,Pgr,$gr,Igr,bt,o0,qgr,k2e,Ngr,jgr,Sc,Dgr,S2e,Ggr,Ogr,WX,Vgr,Xgr,zgr,R2e,Qgr,Wgr,r0,Hgr,Fo,t0,Ugr,B2e,Jgr,Ygr,Mn,Kgr,P2e,Zgr,ehr,$2e,ohr,rhr,I2e,thr,ahr,nhr,be,B7,q2e,shr,lhr,HX,ihr,dhr,chr,P7,N2e,fhr,mhr,UX,ghr,hhr,phr,$7,j2e,_hr,uhr,JX,bhr,Fhr,vhr,I7,D2e,Thr,Mhr,YX,Ehr,Chr,whr,q7,G2e,Ahr,yhr,KX,Lhr,xhr,khr,N7,O2e,Shr,Rhr,ZX,Bhr,Phr,$hr,j7,V2e,Ihr,qhr,ez,Nhr,jhr,Dhr,D7,X2e,Ghr,Ohr,oz,Vhr,Xhr,zhr,G7,z2e,Qhr,Whr,rz,Hhr,Uhr,Jhr,O7,Q2e,Yhr,Khr,tz,Zhr,epr,opr,W2e,rpr,tpr,a0,yPe,Rc,V7,H2e,n0,apr,U2e,npr,LPe,wr,s0,spr,Bc,lpr,az,ipr,dpr,nz,cpr,fpr,mpr,l0,gpr,J2e,hpr,ppr,_pr,Ft,i0,upr,Y2e,bpr,Fpr,Pc,vpr,K2e,Tpr,Mpr,sz,Epr,Cpr,wpr,Z2e,Apr,ypr,d0,Lpr,vo,c0,xpr,e1e,kpr,Spr,En,Rpr,o1e,Bpr,Ppr,r1e,$pr,Ipr,t1e,qpr,Npr,jpr,V,X7,a1e,Dpr,Gpr,lz,Opr,Vpr,Xpr,z7,n1e,zpr,Qpr,iz,Wpr,Hpr,Upr,Q7,s1e,Jpr,Ypr,dz,Kpr,Zpr,e_r,W7,l1e,o_r,r_r,cz,t_r,a_r,n_r,H7,i1e,s_r,l_r,fz,i_r,d_r,c_r,U7,d1e,f_r,m_r,mz,g_r,h_r,p_r,J7,c1e,__r,u_r,gz,b_r,F_r,v_r,Y7,f1e,T_r,M_r,hz,E_r,C_r,w_r,K7,m1e,A_r,y_r,pz,L_r,x_r,k_r,Z7,g1e,S_r,R_r,_z,B_r,P_r,$_r,e9,h1e,I_r,q_r,uz,N_r,j_r,D_r,o9,p1e,G_r,O_r,bz,V_r,X_r,z_r,r9,_1e,Q_r,W_r,Fz,H_r,U_r,J_r,t9,u1e,Y_r,K_r,vz,Z_r,eur,our,a9,b1e,rur,tur,Tz,aur,nur,sur,n9,F1e,lur,iur,Mz,dur,cur,fur,s9,v1e,mur,gur,Ez,hur,pur,_ur,l9,T1e,uur,bur,Cz,Fur,vur,Tur,i9,M1e,Mur,Eur,wz,Cur,wur,Aur,d9,E1e,yur,Lur,Az,xur,kur,Sur,c9,C1e,Rur,Bur,yz,Pur,$ur,Iur,f9,w1e,qur,Nur,Lz,jur,Dur,Gur,m9,A1e,Our,Vur,xz,Xur,zur,Qur,g9,y1e,Wur,Hur,kz,Uur,Jur,Yur,h9,L1e,Kur,Zur,Sz,e2r,o2r,r2r,p9,x1e,t2r,a2r,Rz,n2r,s2r,l2r,k1e,i2r,d2r,f0,xPe,$c,_9,S1e,m0,c2r,R1e,f2r,kPe,Ar,g0,m2r,Ic,g2r,Bz,h2r,p2r,Pz,_2r,u2r,b2r,h0,F2r,B1e,v2r,T2r,M2r,vt,p0,E2r,P1e,C2r,w2r,qc,A2r,$1e,y2r,L2r,$z,x2r,k2r,S2r,I1e,R2r,B2r,_0,P2r,To,u0,$2r,q1e,I2r,q2r,Cn,N2r,N1e,j2r,D2r,j1e,G2r,O2r,D1e,V2r,X2r,z2r,se,u9,G1e,Q2r,W2r,Iz,H2r,U2r,J2r,b9,O1e,Y2r,K2r,qz,Z2r,e1r,o1r,F9,V1e,r1r,t1r,Nz,a1r,n1r,s1r,v9,X1e,l1r,i1r,jz,d1r,c1r,f1r,T9,z1e,m1r,g1r,Dz,h1r,p1r,_1r,M9,Q1e,u1r,b1r,Gz,F1r,v1r,T1r,E9,W1e,M1r,E1r,Oz,C1r,w1r,A1r,C9,H1e,y1r,L1r,Vz,x1r,k1r,S1r,w9,U1e,R1r,B1r,Xz,P1r,$1r,I1r,A9,J1e,q1r,N1r,zz,j1r,D1r,G1r,y9,Y1e,O1r,V1r,Qz,X1r,z1r,Q1r,L9,K1e,W1r,H1r,Wz,U1r,J1r,Y1r,x9,Z1e,K1r,Z1r,Hz,ebr,obr,rbr,k9,ebe,tbr,abr,Uz,nbr,sbr,lbr,S9,obe,ibr,dbr,Jz,cbr,fbr,mbr,R9,rbe,gbr,hbr,Yz,pbr,_br,ubr,B9,tbe,bbr,Fbr,Kz,vbr,Tbr,Mbr,abe,Ebr,Cbr,b0,SPe,Nc,P9,nbe,F0,wbr,sbe,Abr,RPe,yr,v0,ybr,jc,Lbr,Zz,xbr,kbr,eQ,Sbr,Rbr,Bbr,T0,Pbr,lbe,$br,Ibr,qbr,Tt,M0,Nbr,ibe,jbr,Dbr,Dc,Gbr,dbe,Obr,Vbr,oQ,Xbr,zbr,Qbr,cbe,Wbr,Hbr,E0,Ubr,Mo,C0,Jbr,fbe,Ybr,Kbr,wn,Zbr,mbe,e6r,o6r,gbe,r6r,t6r,hbe,a6r,n6r,s6r,pbe,$9,_be,l6r,i6r,rQ,d6r,c6r,f6r,ube,m6r,g6r,w0,BPe,Gc,I9,bbe,A0,h6r,Fbe,p6r,PPe,Lr,y0,_6r,Oc,u6r,tQ,b6r,F6r,aQ,v6r,T6r,M6r,L0,E6r,vbe,C6r,w6r,A6r,Mt,x0,y6r,Tbe,L6r,x6r,Vc,k6r,Mbe,S6r,R6r,nQ,B6r,P6r,$6r,Ebe,I6r,q6r,k0,N6r,Eo,S0,j6r,Cbe,D6r,G6r,An,O6r,wbe,V6r,X6r,Abe,z6r,Q6r,ybe,W6r,H6r,U6r,Y,q9,Lbe,J6r,Y6r,sQ,K6r,Z6r,eFr,N9,xbe,oFr,rFr,lQ,tFr,aFr,nFr,j9,kbe,sFr,lFr,iQ,iFr,dFr,cFr,D9,Sbe,fFr,mFr,dQ,gFr,hFr,pFr,G9,Rbe,_Fr,uFr,cQ,bFr,FFr,vFr,O9,Bbe,TFr,MFr,fQ,EFr,CFr,wFr,V9,Pbe,AFr,yFr,mQ,LFr,xFr,kFr,X9,$be,SFr,RFr,gQ,BFr,PFr,$Fr,z9,Ibe,IFr,qFr,hQ,NFr,jFr,DFr,Q9,qbe,GFr,OFr,pQ,VFr,XFr,zFr,W9,Nbe,QFr,WFr,_Q,HFr,UFr,JFr,H9,jbe,YFr,KFr,uQ,ZFr,evr,ovr,U9,Dbe,rvr,tvr,bQ,avr,nvr,svr,J9,Gbe,lvr,ivr,FQ,dvr,cvr,fvr,Y9,Obe,mvr,gvr,vQ,hvr,pvr,_vr,K9,Vbe,uvr,bvr,TQ,Fvr,vvr,Tvr,Z9,Xbe,Mvr,Evr,MQ,Cvr,wvr,Avr,eM,zbe,yvr,Lvr,EQ,xvr,kvr,Svr,oM,Qbe,Rvr,Bvr,CQ,Pvr,$vr,Ivr,rM,Wbe,qvr,Nvr,wQ,jvr,Dvr,Gvr,Hbe,Ovr,Vvr,R0,$Pe,Xc,tM,Ube,B0,Xvr,Jbe,zvr,IPe,xr,P0,Qvr,zc,Wvr,AQ,Hvr,Uvr,yQ,Jvr,Yvr,Kvr,$0,Zvr,Ybe,eTr,oTr,rTr,Et,I0,tTr,Kbe,aTr,nTr,Qc,sTr,Zbe,lTr,iTr,LQ,dTr,cTr,fTr,e6e,mTr,gTr,q0,hTr,Co,N0,pTr,o6e,_Tr,uTr,yn,bTr,r6e,FTr,vTr,t6e,TTr,MTr,a6e,ETr,CTr,wTr,K,aM,n6e,ATr,yTr,xQ,LTr,xTr,kTr,nM,s6e,STr,RTr,kQ,BTr,PTr,$Tr,sM,l6e,ITr,qTr,SQ,NTr,jTr,DTr,lM,i6e,GTr,OTr,RQ,VTr,XTr,zTr,iM,d6e,QTr,WTr,BQ,HTr,UTr,JTr,dM,c6e,YTr,KTr,PQ,ZTr,e7r,o7r,cM,f6e,r7r,t7r,$Q,a7r,n7r,s7r,fM,m6e,l7r,i7r,IQ,d7r,c7r,f7r,mM,g6e,m7r,g7r,qQ,h7r,p7r,_7r,gM,h6e,u7r,b7r,NQ,F7r,v7r,T7r,hM,p6e,M7r,E7r,jQ,C7r,w7r,A7r,pM,_6e,y7r,L7r,DQ,x7r,k7r,S7r,_M,u6e,R7r,B7r,GQ,P7r,$7r,I7r,uM,b6e,q7r,N7r,OQ,j7r,D7r,G7r,bM,F6e,O7r,V7r,VQ,X7r,z7r,Q7r,FM,v6e,W7r,H7r,XQ,U7r,J7r,Y7r,vM,T6e,K7r,Z7r,zQ,e9r,o9r,r9r,TM,M6e,t9r,a9r,QQ,n9r,s9r,l9r,MM,E6e,i9r,d9r,WQ,c9r,f9r,m9r,EM,C6e,g9r,h9r,HQ,p9r,_9r,u9r,w6e,b9r,F9r,j0,qPe,Wc,CM,A6e,D0,v9r,y6e,T9r,NPe,kr,G0,M9r,Hc,E9r,UQ,C9r,w9r,JQ,A9r,y9r,L9r,O0,x9r,L6e,k9r,S9r,R9r,Ct,V0,B9r,x6e,P9r,$9r,Uc,I9r,k6e,q9r,N9r,YQ,j9r,D9r,G9r,S6e,O9r,V9r,X0,X9r,wo,z0,z9r,R6e,Q9r,W9r,Ln,H9r,B6e,U9r,J9r,P6e,Y9r,K9r,$6e,Z9r,eMr,oMr,I6e,wM,q6e,rMr,tMr,KQ,aMr,nMr,sMr,N6e,lMr,iMr,Q0,jPe,Jc,AM,j6e,W0,dMr,D6e,cMr,DPe,Sr,H0,fMr,Yc,mMr,ZQ,gMr,hMr,eW,pMr,_Mr,uMr,U0,bMr,G6e,FMr,vMr,TMr,wt,J0,MMr,O6e,EMr,CMr,Kc,wMr,V6e,AMr,yMr,oW,LMr,xMr,kMr,X6e,SMr,RMr,Y0,BMr,Ao,K0,PMr,z6e,$Mr,IMr,xn,qMr,Q6e,NMr,jMr,W6e,DMr,GMr,H6e,OMr,VMr,XMr,U6e,yM,J6e,zMr,QMr,rW,WMr,HMr,UMr,Y6e,JMr,YMr,Z0,GPe,Zc,LM,K6e,ey,KMr,Z6e,ZMr,OPe,Rr,oy,e4r,ef,o4r,tW,r4r,t4r,aW,a4r,n4r,s4r,ry,l4r,eFe,i4r,d4r,c4r,At,ty,f4r,oFe,m4r,g4r,of,h4r,rFe,p4r,_4r,nW,u4r,b4r,F4r,tFe,v4r,T4r,ay,M4r,yo,ny,E4r,aFe,C4r,w4r,kn,A4r,nFe,y4r,L4r,sFe,x4r,k4r,lFe,S4r,R4r,B4r,X,xM,iFe,P4r,$4r,sW,I4r,q4r,N4r,kM,dFe,j4r,D4r,lW,G4r,O4r,V4r,SM,cFe,X4r,z4r,iW,Q4r,W4r,H4r,RM,fFe,U4r,J4r,dW,Y4r,K4r,Z4r,BM,mFe,eEr,oEr,cW,rEr,tEr,aEr,PM,gFe,nEr,sEr,fW,lEr,iEr,dEr,$M,hFe,cEr,fEr,mW,mEr,gEr,hEr,IM,pFe,pEr,_Er,gW,uEr,bEr,FEr,qM,_Fe,vEr,TEr,hW,MEr,EEr,CEr,NM,uFe,wEr,AEr,pW,yEr,LEr,xEr,jM,bFe,kEr,SEr,_W,REr,BEr,PEr,DM,FFe,$Er,IEr,uW,qEr,NEr,jEr,GM,vFe,DEr,GEr,bW,OEr,VEr,XEr,OM,TFe,zEr,QEr,FW,WEr,HEr,UEr,VM,MFe,JEr,YEr,vW,KEr,ZEr,e5r,XM,EFe,o5r,r5r,TW,t5r,a5r,n5r,zM,CFe,s5r,l5r,MW,i5r,d5r,c5r,QM,wFe,f5r,m5r,EW,g5r,h5r,p5r,WM,AFe,_5r,u5r,CW,b5r,F5r,v5r,HM,yFe,T5r,M5r,wW,E5r,C5r,w5r,UM,LFe,A5r,y5r,AW,L5r,x5r,k5r,JM,xFe,S5r,R5r,yW,B5r,P5r,$5r,YM,kFe,I5r,q5r,LW,N5r,j5r,D5r,KM,SFe,G5r,O5r,xW,V5r,X5r,z5r,ZM,RFe,Q5r,W5r,kW,H5r,U5r,J5r,e4,BFe,Y5r,K5r,SW,Z5r,e3r,o3r,PFe,r3r,t3r,sy,VPe,rf,o4,$Fe,ly,a3r,IFe,n3r,XPe,Br,iy,s3r,tf,l3r,RW,i3r,d3r,BW,c3r,f3r,m3r,dy,g3r,qFe,h3r,p3r,_3r,yt,cy,u3r,NFe,b3r,F3r,af,v3r,jFe,T3r,M3r,PW,E3r,C3r,w3r,DFe,A3r,y3r,fy,L3r,Lo,my,x3r,GFe,k3r,S3r,Sn,R3r,OFe,B3r,P3r,VFe,$3r,I3r,XFe,q3r,N3r,j3r,ca,r4,zFe,D3r,G3r,$W,O3r,V3r,X3r,t4,QFe,z3r,Q3r,IW,W3r,H3r,U3r,a4,WFe,J3r,Y3r,qW,K3r,Z3r,eCr,n4,HFe,oCr,rCr,NW,tCr,aCr,nCr,s4,UFe,sCr,lCr,jW,iCr,dCr,cCr,JFe,fCr,mCr,gy,zPe,nf,l4,YFe,hy,gCr,KFe,hCr,QPe,Pr,py,pCr,sf,_Cr,DW,uCr,bCr,GW,FCr,vCr,TCr,_y,MCr,ZFe,ECr,CCr,wCr,Lt,uy,ACr,eve,yCr,LCr,lf,xCr,ove,kCr,SCr,OW,RCr,BCr,PCr,rve,$Cr,ICr,by,qCr,xo,Fy,NCr,tve,jCr,DCr,Rn,GCr,ave,OCr,VCr,nve,XCr,zCr,sve,QCr,WCr,HCr,ce,i4,lve,UCr,JCr,VW,YCr,KCr,ZCr,d4,ive,ewr,owr,XW,rwr,twr,awr,c4,dve,nwr,swr,zW,lwr,iwr,dwr,f4,cve,cwr,fwr,QW,mwr,gwr,hwr,m4,fve,pwr,_wr,WW,uwr,bwr,Fwr,g4,mve,vwr,Twr,HW,Mwr,Ewr,Cwr,h4,gve,wwr,Awr,UW,ywr,Lwr,xwr,p4,hve,kwr,Swr,JW,Rwr,Bwr,Pwr,_4,pve,$wr,Iwr,YW,qwr,Nwr,jwr,u4,_ve,Dwr,Gwr,KW,Owr,Vwr,Xwr,b4,uve,zwr,Qwr,ZW,Wwr,Hwr,Uwr,F4,bve,Jwr,Ywr,eH,Kwr,Zwr,eAr,v4,Fve,oAr,rAr,oH,tAr,aAr,nAr,vve,sAr,lAr,vy,WPe,df,T4,Tve,Ty,iAr,Mve,dAr,HPe,$r,My,cAr,cf,fAr,rH,mAr,gAr,tH,hAr,pAr,_Ar,Ey,uAr,Eve,bAr,FAr,vAr,xt,Cy,TAr,Cve,MAr,EAr,ff,CAr,wve,wAr,AAr,aH,yAr,LAr,xAr,Ave,kAr,SAr,wy,RAr,ko,Ay,BAr,yve,PAr,$Ar,Bn,IAr,Lve,qAr,NAr,xve,jAr,DAr,kve,GAr,OAr,VAr,Fe,M4,Sve,XAr,zAr,nH,QAr,WAr,HAr,E4,Rve,UAr,JAr,sH,YAr,KAr,ZAr,C4,Bve,e0r,o0r,lH,r0r,t0r,a0r,w4,Pve,n0r,s0r,iH,l0r,i0r,d0r,A4,$ve,c0r,f0r,dH,m0r,g0r,h0r,y4,Ive,p0r,_0r,cH,u0r,b0r,F0r,L4,qve,v0r,T0r,fH,M0r,E0r,C0r,x4,Nve,w0r,A0r,mH,y0r,L0r,x0r,k4,jve,k0r,S0r,gH,R0r,B0r,P0r,S4,Dve,$0r,I0r,hH,q0r,N0r,j0r,Gve,D0r,G0r,yy,UPe,mf,R4,Ove,Ly,O0r,Vve,V0r,JPe,Ir,xy,X0r,gf,z0r,pH,Q0r,W0r,_H,H0r,U0r,J0r,ky,Y0r,Xve,K0r,Z0r,eyr,kt,Sy,oyr,zve,ryr,tyr,hf,ayr,Qve,nyr,syr,uH,lyr,iyr,dyr,Wve,cyr,fyr,Ry,myr,So,By,gyr,Hve,hyr,pyr,Pn,_yr,Uve,uyr,byr,Jve,Fyr,vyr,Yve,Tyr,Myr,Eyr,ve,B4,Kve,Cyr,wyr,bH,Ayr,yyr,Lyr,P4,Zve,xyr,kyr,FH,Syr,Ryr,Byr,$4,eTe,Pyr,$yr,vH,Iyr,qyr,Nyr,I4,oTe,jyr,Dyr,TH,Gyr,Oyr,Vyr,q4,rTe,Xyr,zyr,MH,Qyr,Wyr,Hyr,N4,tTe,Uyr,Jyr,EH,Yyr,Kyr,Zyr,j4,aTe,eLr,oLr,CH,rLr,tLr,aLr,D4,nTe,nLr,sLr,wH,lLr,iLr,dLr,G4,sTe,cLr,fLr,AH,mLr,gLr,hLr,O4,lTe,pLr,_Lr,yH,uLr,bLr,FLr,iTe,vLr,TLr,Py,YPe,pf,V4,dTe,$y,MLr,cTe,ELr,KPe,qr,Iy,CLr,_f,wLr,LH,ALr,yLr,xH,LLr,xLr,kLr,qy,SLr,fTe,RLr,BLr,PLr,St,Ny,$Lr,mTe,ILr,qLr,uf,NLr,gTe,jLr,DLr,kH,GLr,OLr,VLr,hTe,XLr,zLr,jy,QLr,Ro,Dy,WLr,pTe,HLr,ULr,$n,JLr,_Te,YLr,KLr,uTe,ZLr,e8r,bTe,o8r,r8r,t8r,Te,X4,FTe,a8r,n8r,SH,s8r,l8r,i8r,z4,vTe,d8r,c8r,RH,f8r,m8r,g8r,Q4,TTe,h8r,p8r,BH,_8r,u8r,b8r,W4,MTe,F8r,v8r,PH,T8r,M8r,E8r,H4,ETe,C8r,w8r,$H,A8r,y8r,L8r,U4,CTe,x8r,k8r,IH,S8r,R8r,B8r,J4,wTe,P8r,$8r,qH,I8r,q8r,N8r,Y4,ATe,j8r,D8r,NH,G8r,O8r,V8r,K4,yTe,X8r,z8r,jH,Q8r,W8r,H8r,Z4,LTe,U8r,J8r,DH,Y8r,K8r,Z8r,xTe,exr,oxr,Gy,ZPe,bf,eE,kTe,Oy,rxr,STe,txr,e$e,Nr,Vy,axr,Ff,nxr,GH,sxr,lxr,OH,ixr,dxr,cxr,Xy,fxr,RTe,mxr,gxr,hxr,Rt,zy,pxr,BTe,_xr,uxr,vf,bxr,PTe,Fxr,vxr,VH,Txr,Mxr,Exr,$Te,Cxr,wxr,Qy,Axr,Bo,Wy,yxr,ITe,Lxr,xxr,In,kxr,qTe,Sxr,Rxr,NTe,Bxr,Pxr,jTe,$xr,Ixr,qxr,Me,oE,DTe,Nxr,jxr,XH,Dxr,Gxr,Oxr,rE,GTe,Vxr,Xxr,zH,zxr,Qxr,Wxr,tE,OTe,Hxr,Uxr,QH,Jxr,Yxr,Kxr,aE,VTe,Zxr,ekr,WH,okr,rkr,tkr,nE,XTe,akr,nkr,HH,skr,lkr,ikr,sE,zTe,dkr,ckr,UH,fkr,mkr,gkr,lE,QTe,hkr,pkr,JH,_kr,ukr,bkr,iE,WTe,Fkr,vkr,YH,Tkr,Mkr,Ekr,dE,HTe,Ckr,wkr,KH,Akr,ykr,Lkr,cE,UTe,xkr,kkr,ZH,Skr,Rkr,Bkr,JTe,Pkr,$kr,Hy,o$e,Tf,fE,YTe,Uy,Ikr,KTe,qkr,r$e,jr,Jy,Nkr,Mf,jkr,eU,Dkr,Gkr,oU,Okr,Vkr,Xkr,Yy,zkr,ZTe,Qkr,Wkr,Hkr,Bt,Ky,Ukr,e7e,Jkr,Ykr,Ef,Kkr,o7e,Zkr,eSr,rU,oSr,rSr,tSr,r7e,aSr,nSr,Zy,sSr,Po,eL,lSr,t7e,iSr,dSr,qn,cSr,a7e,fSr,mSr,n7e,gSr,hSr,s7e,pSr,_Sr,uSr,Pe,mE,l7e,bSr,FSr,tU,vSr,TSr,MSr,gE,i7e,ESr,CSr,aU,wSr,ASr,ySr,hE,d7e,LSr,xSr,nU,kSr,SSr,RSr,pE,c7e,BSr,PSr,sU,$Sr,ISr,qSr,_E,f7e,NSr,jSr,lU,DSr,GSr,OSr,uE,m7e,VSr,XSr,iU,zSr,QSr,WSr,bE,g7e,HSr,USr,dU,JSr,YSr,KSr,FE,h7e,ZSr,eRr,cU,oRr,rRr,tRr,p7e,aRr,nRr,oL,t$e,Cf,vE,_7e,rL,sRr,u7e,lRr,a$e,Dr,tL,iRr,wf,dRr,fU,cRr,fRr,mU,mRr,gRr,hRr,aL,pRr,b7e,_Rr,uRr,bRr,Pt,nL,FRr,F7e,vRr,TRr,Af,MRr,v7e,ERr,CRr,gU,wRr,ARr,yRr,T7e,LRr,xRr,sL,kRr,$o,lL,SRr,M7e,RRr,BRr,Nn,PRr,E7e,$Rr,IRr,C7e,qRr,NRr,w7e,jRr,DRr,GRr,$e,TE,A7e,ORr,VRr,hU,XRr,zRr,QRr,ME,y7e,WRr,HRr,pU,URr,JRr,YRr,EE,L7e,KRr,ZRr,_U,eBr,oBr,rBr,CE,x7e,tBr,aBr,uU,nBr,sBr,lBr,wE,k7e,iBr,dBr,bU,cBr,fBr,mBr,AE,S7e,gBr,hBr,FU,pBr,_Br,uBr,yE,R7e,bBr,FBr,vU,vBr,TBr,MBr,LE,B7e,EBr,CBr,TU,wBr,ABr,yBr,P7e,LBr,xBr,iL,n$e,yf,xE,$7e,dL,kBr,I7e,SBr,s$e,Gr,cL,RBr,Lf,BBr,MU,PBr,$Br,EU,IBr,qBr,NBr,fL,jBr,q7e,DBr,GBr,OBr,$t,mL,VBr,N7e,XBr,zBr,xf,QBr,j7e,WBr,HBr,CU,UBr,JBr,YBr,D7e,KBr,ZBr,gL,ePr,Io,hL,oPr,G7e,rPr,tPr,jn,aPr,O7e,nPr,sPr,V7e,lPr,iPr,X7e,dPr,cPr,fPr,z7e,kE,Q7e,mPr,gPr,wU,hPr,pPr,_Pr,W7e,uPr,bPr,pL,l$e,kf,SE,H7e,_L,FPr,U7e,vPr,i$e,Or,uL,TPr,Sf,MPr,AU,EPr,CPr,yU,wPr,APr,yPr,bL,LPr,J7e,xPr,kPr,SPr,It,FL,RPr,Y7e,BPr,PPr,Rf,$Pr,K7e,IPr,qPr,LU,NPr,jPr,DPr,Z7e,GPr,OPr,vL,VPr,qo,TL,XPr,e9e,zPr,QPr,Dn,WPr,o9e,HPr,UPr,r9e,JPr,YPr,t9e,KPr,ZPr,e$r,ML,RE,a9e,o$r,r$r,xU,t$r,a$r,n$r,BE,n9e,s$r,l$r,kU,i$r,d$r,c$r,s9e,f$r,m$r,EL,d$e,Bf,PE,l9e,CL,g$r,i9e,h$r,c$e,Vr,wL,p$r,Pf,_$r,SU,u$r,b$r,RU,F$r,v$r,T$r,AL,M$r,d9e,E$r,C$r,w$r,qt,yL,A$r,c9e,y$r,L$r,$f,x$r,f9e,k$r,S$r,BU,R$r,B$r,P$r,m9e,$$r,I$r,LL,q$r,No,xL,N$r,g9e,j$r,D$r,Gn,G$r,h9e,O$r,V$r,p9e,X$r,z$r,_9e,Q$r,W$r,H$r,u9e,$E,b9e,U$r,J$r,PU,Y$r,K$r,Z$r,F9e,eIr,oIr,kL,f$e;return pe=new z({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),D5=new z({}),G5=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Vf=new rIr({props:{warning:!0,$$slots:{default:[dwt]},$$scope:{ctx:qf}}}),O5=new z({}),V5=new w({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/configuration_auto.py#L563"}}),Q5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/configuration_auto.py#L586"}}),W5=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),H5=new w({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/configuration_auto.py#L708"}}),U5=new z({}),J5=new w({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/tokenization_auto.py#L359"}}),Z5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16792/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/tokenization_auto.py#L373"}}),e3=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),o3=new w({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/tokenization_auto.py#L569"}}),r3=new z({}),t3=new w({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),s3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),jh=new rIr({props:{$$slots:{default:[cwt]},$$scope:{ctx:qf}}}),l3=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),i3=new w({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/feature_extraction_auto.py#L313"}}),d3=new z({}),c3=new w({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/processing_auto.py#L70"}}),g3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/processing_auto.py#L84"}}),Jh=new rIr({props:{$$slots:{default:[fwt]},$$scope:{ctx:qf}}}),h3=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),p3=new w({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/processing_auto.py#L237"}}),_3=new z({}),u3=new w({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L718"}}),F3=new w({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),v3=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),T3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),M3=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E3=new z({}),C3=new w({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L725"}}),A3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),y3=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),L3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k3=new z({}),S3=new w({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L740"}}),B3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),P3=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),$3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),I3=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q3=new z({}),N3=new w({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L747"}}),D3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),O3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),V3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X3=new z({}),z3=new w({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L754"}}),W3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),H3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),U3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y3=new z({}),K3=new w({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L763"}}),eC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),rC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aC=new z({}),nC=new w({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L797"}}),lC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),dC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fC=new z({}),mC=new w({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L804"}}),hC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),_C=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bC=new z({}),FC=new w({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L790"}}),TC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),MC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),EC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wC=new z({}),AC=new w({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L772"}}),LC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),kC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RC=new z({}),BC=new w({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L779"}}),$C=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),IC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),qC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jC=new z({}),DC=new w({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L813"}}),OC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),XC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QC=new z({}),WC=new w({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L852"}}),UC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),YC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZC=new z({}),ew=new w({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L859"}}),rw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),aw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sw=new z({}),lw=new w({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L882"}}),dw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),cw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),fw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),mw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gw=new z({}),hw=new w({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L866"}}),_w=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),uw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),bw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Fw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vw=new z({}),Tw=new w({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L873"}}),Ew=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Cw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),ww=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),yw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Lw=new z({}),xw=new w({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L891"}}),Sw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Rw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),Bw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Pw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$w=new z({}),Iw=new w({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L898"}}),Nw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),jw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),Dw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Gw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ow=new z({}),Vw=new w({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L845"}}),zw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Qw=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),Ww=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Hw=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uw=new z({}),Jw=new w({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L820"}}),Kw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Zw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),eA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),oA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rA=new z({}),tA=new w({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L827"}}),nA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),sA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),lA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),iA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dA=new z({}),cA=new w({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L836"}}),mA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),gA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),hA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),pA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_A=new z({}),uA=new w({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),FA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),vA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),TA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),MA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EA=new z({}),CA=new w({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),AA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),yA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),LA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),xA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kA=new z({}),SA=new w({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),BA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),PA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),$A=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),IA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qA=new z({}),NA=new w({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),DA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),GA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),OA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),XA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zA=new z({}),QA=new w({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),HA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),UA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),JA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),YA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KA=new z({}),ZA=new w({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),o0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),t0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n0=new z({}),s0=new w({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),i0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),c0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),f0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m0=new z({}),g0=new w({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),p0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),_0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),u0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),b0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F0=new z({}),v0=new w({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),M0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),E0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),C0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),w0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A0=new z({}),y0=new w({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),x0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),S0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),R0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B0=new z({}),P0=new w({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),I0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),q0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),N0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),j0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D0=new z({}),G0=new w({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),V0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),X0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),z0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Q0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W0=new z({}),H0=new w({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),J0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Y0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),K0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Z0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ey=new z({}),oy=new w({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L240"}}),ty=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),ay=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),ny=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),sy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ly=new z({}),iy=new w({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L254"}}),cy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),fy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),my=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),gy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hy=new z({}),py=new w({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L247"}}),uy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),by=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),Fy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),vy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ty=new z({}),My=new w({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L261"}}),Cy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),wy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),Ay=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),yy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ly=new z({}),xy=new w({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L268"}}),Sy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Ry=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),By=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Py=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$y=new z({}),Iy=new w({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L277"}}),Ny=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),jy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),Dy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Gy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Oy=new z({}),Vy=new w({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L286"}}),zy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Qy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),Wy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Hy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uy=new z({}),Jy=new w({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L293"}}),Ky=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Zy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),eL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),oL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rL=new z({}),tL=new w({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L302"}}),nL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),sL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),lL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),iL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dL=new z({}),cL=new w({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L309"}}),mL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),gL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),hL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),pL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_L=new z({}),uL=new w({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L318"}}),FL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),vL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),TL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),EL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CL=new z({}),wL=new w({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L327"}}),yL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),LL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),xL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),kL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),fe=a("h1"),Ce=a("a"),lo=a("span"),f(pe.$$.fragment),Ee=l(),Xo=a("span"),Ni=o("Auto Classes"),Nf=l(),fa=a("p"),ji=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=a("code"),I5=o("from_pretrained()"),jf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ke=l(),co=a("p"),Gi=o("Instantiating one of "),On=a("a"),q5=o("AutoConfig"),Vn=o(", "),Xn=a("a"),N5=o("AutoModel"),Oi=o(`, and
`),zn=a("a"),j5=o("AutoTokenizer"),Vi=o(" will directly create a class of the relevant architecture. For instance"),Df=l(),f(Da.$$.fragment),fo=l(),ue=a("p"),x8=o("will create a model that is an instance of "),Xi=a("a"),k8=o("BertModel"),S8=o("."),zo=l(),Ga=a("p"),R8=o("There is one class of "),Gf=a("code"),B8=o("AutoModel"),Eqe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),cBe=l(),zi=a("h2"),Of=a("a"),yY=a("span"),f(D5.$$.fragment),Cqe=l(),LY=a("span"),wqe=o("Extending the Auto Classes"),fBe=l(),Qn=a("p"),Aqe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),xY=a("code"),yqe=o("NewModel"),Lqe=o(", make sure you have a "),kY=a("code"),xqe=o("NewModelConfig"),kqe=o(` then you can add those to the auto
classes like this:`),mBe=l(),f(G5.$$.fragment),gBe=l(),P8=a("p"),Sqe=o("You will then be able to use the auto classes like you would usually do!"),hBe=l(),f(Vf.$$.fragment),pBe=l(),Qi=a("h2"),Xf=a("a"),SY=a("span"),f(O5.$$.fragment),Rqe=l(),RY=a("span"),Bqe=o("AutoConfig"),_Be=l(),Qo=a("div"),f(V5.$$.fragment),Pqe=l(),X5=a("p"),$qe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),$8=a("a"),Iqe=o("from_pretrained()"),qqe=o(" class method."),Nqe=l(),z5=a("p"),jqe=o("This class cannot be instantiated directly using "),BY=a("code"),Dqe=o("__init__()"),Gqe=o(" (throws an error)."),Oqe=l(),mo=a("div"),f(Q5.$$.fragment),Vqe=l(),PY=a("p"),Xqe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),zqe=l(),Wi=a("p"),Qqe=o("The configuration class to instantiate is selected based on the "),$Y=a("code"),Wqe=o("model_type"),Hqe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),IY=a("code"),Uqe=o("pretrained_model_name_or_path"),Jqe=o(":"),Yqe=l(),F=a("ul"),zf=a("li"),qY=a("strong"),Kqe=o("albert"),Zqe=o(" \u2014 "),I8=a("a"),eNe=o("AlbertConfig"),oNe=o(" (ALBERT model)"),rNe=l(),Qf=a("li"),NY=a("strong"),tNe=o("bart"),aNe=o(" \u2014 "),q8=a("a"),nNe=o("BartConfig"),sNe=o(" (BART model)"),lNe=l(),Wf=a("li"),jY=a("strong"),iNe=o("beit"),dNe=o(" \u2014 "),N8=a("a"),cNe=o("BeitConfig"),fNe=o(" (BEiT model)"),mNe=l(),Hf=a("li"),DY=a("strong"),gNe=o("bert"),hNe=o(" \u2014 "),j8=a("a"),pNe=o("BertConfig"),_Ne=o(" (BERT model)"),uNe=l(),Uf=a("li"),GY=a("strong"),bNe=o("bert-generation"),FNe=o(" \u2014 "),D8=a("a"),vNe=o("BertGenerationConfig"),TNe=o(" (Bert Generation model)"),MNe=l(),Jf=a("li"),OY=a("strong"),ENe=o("big_bird"),CNe=o(" \u2014 "),G8=a("a"),wNe=o("BigBirdConfig"),ANe=o(" (BigBird model)"),yNe=l(),Yf=a("li"),VY=a("strong"),LNe=o("bigbird_pegasus"),xNe=o(" \u2014 "),O8=a("a"),kNe=o("BigBirdPegasusConfig"),SNe=o(" (BigBirdPegasus model)"),RNe=l(),Kf=a("li"),XY=a("strong"),BNe=o("blenderbot"),PNe=o(" \u2014 "),V8=a("a"),$Ne=o("BlenderbotConfig"),INe=o(" (Blenderbot model)"),qNe=l(),Zf=a("li"),zY=a("strong"),NNe=o("blenderbot-small"),jNe=o(" \u2014 "),X8=a("a"),DNe=o("BlenderbotSmallConfig"),GNe=o(" (BlenderbotSmall model)"),ONe=l(),em=a("li"),QY=a("strong"),VNe=o("camembert"),XNe=o(" \u2014 "),z8=a("a"),zNe=o("CamembertConfig"),QNe=o(" (CamemBERT model)"),WNe=l(),om=a("li"),WY=a("strong"),HNe=o("canine"),UNe=o(" \u2014 "),Q8=a("a"),JNe=o("CanineConfig"),YNe=o(" (Canine model)"),KNe=l(),rm=a("li"),HY=a("strong"),ZNe=o("clip"),eje=o(" \u2014 "),W8=a("a"),oje=o("CLIPConfig"),rje=o(" (CLIP model)"),tje=l(),tm=a("li"),UY=a("strong"),aje=o("convbert"),nje=o(" \u2014 "),H8=a("a"),sje=o("ConvBertConfig"),lje=o(" (ConvBERT model)"),ije=l(),am=a("li"),JY=a("strong"),dje=o("convnext"),cje=o(" \u2014 "),U8=a("a"),fje=o("ConvNextConfig"),mje=o(" (ConvNext model)"),gje=l(),nm=a("li"),YY=a("strong"),hje=o("ctrl"),pje=o(" \u2014 "),J8=a("a"),_je=o("CTRLConfig"),uje=o(" (CTRL model)"),bje=l(),sm=a("li"),KY=a("strong"),Fje=o("data2vec-audio"),vje=o(" \u2014 "),Y8=a("a"),Tje=o("Data2VecAudioConfig"),Mje=o(" (Data2VecAudio model)"),Eje=l(),lm=a("li"),ZY=a("strong"),Cje=o("data2vec-text"),wje=o(" \u2014 "),K8=a("a"),Aje=o("Data2VecTextConfig"),yje=o(" (Data2VecText model)"),Lje=l(),im=a("li"),eK=a("strong"),xje=o("data2vec-vision"),kje=o(" \u2014 "),Z8=a("a"),Sje=o("Data2VecVisionConfig"),Rje=o(" (Data2VecVision model)"),Bje=l(),dm=a("li"),oK=a("strong"),Pje=o("deberta"),$je=o(" \u2014 "),ex=a("a"),Ije=o("DebertaConfig"),qje=o(" (DeBERTa model)"),Nje=l(),cm=a("li"),rK=a("strong"),jje=o("deberta-v2"),Dje=o(" \u2014 "),ox=a("a"),Gje=o("DebertaV2Config"),Oje=o(" (DeBERTa-v2 model)"),Vje=l(),fm=a("li"),tK=a("strong"),Xje=o("decision_transformer"),zje=o(" \u2014 "),rx=a("a"),Qje=o("DecisionTransformerConfig"),Wje=o(" (Decision Transformer model)"),Hje=l(),mm=a("li"),aK=a("strong"),Uje=o("deit"),Jje=o(" \u2014 "),tx=a("a"),Yje=o("DeiTConfig"),Kje=o(" (DeiT model)"),Zje=l(),gm=a("li"),nK=a("strong"),eDe=o("detr"),oDe=o(" \u2014 "),ax=a("a"),rDe=o("DetrConfig"),tDe=o(" (DETR model)"),aDe=l(),hm=a("li"),sK=a("strong"),nDe=o("distilbert"),sDe=o(" \u2014 "),nx=a("a"),lDe=o("DistilBertConfig"),iDe=o(" (DistilBERT model)"),dDe=l(),pm=a("li"),lK=a("strong"),cDe=o("dpr"),fDe=o(" \u2014 "),sx=a("a"),mDe=o("DPRConfig"),gDe=o(" (DPR model)"),hDe=l(),_m=a("li"),iK=a("strong"),pDe=o("dpt"),_De=o(" \u2014 "),lx=a("a"),uDe=o("DPTConfig"),bDe=o(" (DPT model)"),FDe=l(),um=a("li"),dK=a("strong"),vDe=o("electra"),TDe=o(" \u2014 "),ix=a("a"),MDe=o("ElectraConfig"),EDe=o(" (ELECTRA model)"),CDe=l(),bm=a("li"),cK=a("strong"),wDe=o("encoder-decoder"),ADe=o(" \u2014 "),dx=a("a"),yDe=o("EncoderDecoderConfig"),LDe=o(" (Encoder decoder model)"),xDe=l(),Fm=a("li"),fK=a("strong"),kDe=o("flaubert"),SDe=o(" \u2014 "),cx=a("a"),RDe=o("FlaubertConfig"),BDe=o(" (FlauBERT model)"),PDe=l(),vm=a("li"),mK=a("strong"),$De=o("fnet"),IDe=o(" \u2014 "),fx=a("a"),qDe=o("FNetConfig"),NDe=o(" (FNet model)"),jDe=l(),Tm=a("li"),gK=a("strong"),DDe=o("fsmt"),GDe=o(" \u2014 "),mx=a("a"),ODe=o("FSMTConfig"),VDe=o(" (FairSeq Machine-Translation model)"),XDe=l(),Mm=a("li"),hK=a("strong"),zDe=o("funnel"),QDe=o(" \u2014 "),gx=a("a"),WDe=o("FunnelConfig"),HDe=o(" (Funnel Transformer model)"),UDe=l(),Em=a("li"),pK=a("strong"),JDe=o("glpn"),YDe=o(" \u2014 "),hx=a("a"),KDe=o("GLPNConfig"),ZDe=o(" (GLPN model)"),eGe=l(),Cm=a("li"),_K=a("strong"),oGe=o("gpt2"),rGe=o(" \u2014 "),px=a("a"),tGe=o("GPT2Config"),aGe=o(" (OpenAI GPT-2 model)"),nGe=l(),wm=a("li"),uK=a("strong"),sGe=o("gpt_neo"),lGe=o(" \u2014 "),_x=a("a"),iGe=o("GPTNeoConfig"),dGe=o(" (GPT Neo model)"),cGe=l(),Am=a("li"),bK=a("strong"),fGe=o("gptj"),mGe=o(" \u2014 "),ux=a("a"),gGe=o("GPTJConfig"),hGe=o(" (GPT-J model)"),pGe=l(),ym=a("li"),FK=a("strong"),_Ge=o("hubert"),uGe=o(" \u2014 "),bx=a("a"),bGe=o("HubertConfig"),FGe=o(" (Hubert model)"),vGe=l(),Lm=a("li"),vK=a("strong"),TGe=o("ibert"),MGe=o(" \u2014 "),Fx=a("a"),EGe=o("IBertConfig"),CGe=o(" (I-BERT model)"),wGe=l(),xm=a("li"),TK=a("strong"),AGe=o("imagegpt"),yGe=o(" \u2014 "),vx=a("a"),LGe=o("ImageGPTConfig"),xGe=o(" (ImageGPT model)"),kGe=l(),km=a("li"),MK=a("strong"),SGe=o("layoutlm"),RGe=o(" \u2014 "),Tx=a("a"),BGe=o("LayoutLMConfig"),PGe=o(" (LayoutLM model)"),$Ge=l(),Sm=a("li"),EK=a("strong"),IGe=o("layoutlmv2"),qGe=o(" \u2014 "),Mx=a("a"),NGe=o("LayoutLMv2Config"),jGe=o(" (LayoutLMv2 model)"),DGe=l(),Rm=a("li"),CK=a("strong"),GGe=o("led"),OGe=o(" \u2014 "),Ex=a("a"),VGe=o("LEDConfig"),XGe=o(" (LED model)"),zGe=l(),Bm=a("li"),wK=a("strong"),QGe=o("longformer"),WGe=o(" \u2014 "),Cx=a("a"),HGe=o("LongformerConfig"),UGe=o(" (Longformer model)"),JGe=l(),Pm=a("li"),AK=a("strong"),YGe=o("longt5"),KGe=o(" \u2014 "),wx=a("a"),ZGe=o("LongT5Config"),eOe=o(" (LongT5 model)"),oOe=l(),$m=a("li"),yK=a("strong"),rOe=o("luke"),tOe=o(" \u2014 "),Ax=a("a"),aOe=o("LukeConfig"),nOe=o(" (LUKE model)"),sOe=l(),Im=a("li"),LK=a("strong"),lOe=o("lxmert"),iOe=o(" \u2014 "),yx=a("a"),dOe=o("LxmertConfig"),cOe=o(" (LXMERT model)"),fOe=l(),qm=a("li"),xK=a("strong"),mOe=o("m2m_100"),gOe=o(" \u2014 "),Lx=a("a"),hOe=o("M2M100Config"),pOe=o(" (M2M100 model)"),_Oe=l(),Nm=a("li"),kK=a("strong"),uOe=o("marian"),bOe=o(" \u2014 "),xx=a("a"),FOe=o("MarianConfig"),vOe=o(" (Marian model)"),TOe=l(),jm=a("li"),SK=a("strong"),MOe=o("maskformer"),EOe=o(" \u2014 "),kx=a("a"),COe=o("MaskFormerConfig"),wOe=o(" (MaskFormer model)"),AOe=l(),Dm=a("li"),RK=a("strong"),yOe=o("mbart"),LOe=o(" \u2014 "),Sx=a("a"),xOe=o("MBartConfig"),kOe=o(" (mBART model)"),SOe=l(),Gm=a("li"),BK=a("strong"),ROe=o("megatron-bert"),BOe=o(" \u2014 "),Rx=a("a"),POe=o("MegatronBertConfig"),$Oe=o(" (MegatronBert model)"),IOe=l(),Om=a("li"),PK=a("strong"),qOe=o("mobilebert"),NOe=o(" \u2014 "),Bx=a("a"),jOe=o("MobileBertConfig"),DOe=o(" (MobileBERT model)"),GOe=l(),Vm=a("li"),$K=a("strong"),OOe=o("mpnet"),VOe=o(" \u2014 "),Px=a("a"),XOe=o("MPNetConfig"),zOe=o(" (MPNet model)"),QOe=l(),Xm=a("li"),IK=a("strong"),WOe=o("mt5"),HOe=o(" \u2014 "),$x=a("a"),UOe=o("MT5Config"),JOe=o(" (mT5 model)"),YOe=l(),zm=a("li"),qK=a("strong"),KOe=o("nystromformer"),ZOe=o(" \u2014 "),Ix=a("a"),eVe=o("NystromformerConfig"),oVe=o(" (Nystromformer model)"),rVe=l(),Qm=a("li"),NK=a("strong"),tVe=o("openai-gpt"),aVe=o(" \u2014 "),qx=a("a"),nVe=o("OpenAIGPTConfig"),sVe=o(" (OpenAI GPT model)"),lVe=l(),Wm=a("li"),jK=a("strong"),iVe=o("pegasus"),dVe=o(" \u2014 "),Nx=a("a"),cVe=o("PegasusConfig"),fVe=o(" (Pegasus model)"),mVe=l(),Hm=a("li"),DK=a("strong"),gVe=o("perceiver"),hVe=o(" \u2014 "),jx=a("a"),pVe=o("PerceiverConfig"),_Ve=o(" (Perceiver model)"),uVe=l(),Um=a("li"),GK=a("strong"),bVe=o("plbart"),FVe=o(" \u2014 "),Dx=a("a"),vVe=o("PLBartConfig"),TVe=o(" (PLBart model)"),MVe=l(),Jm=a("li"),OK=a("strong"),EVe=o("poolformer"),CVe=o(" \u2014 "),Gx=a("a"),wVe=o("PoolFormerConfig"),AVe=o(" (PoolFormer model)"),yVe=l(),Ym=a("li"),VK=a("strong"),LVe=o("prophetnet"),xVe=o(" \u2014 "),Ox=a("a"),kVe=o("ProphetNetConfig"),SVe=o(" (ProphetNet model)"),RVe=l(),Km=a("li"),XK=a("strong"),BVe=o("qdqbert"),PVe=o(" \u2014 "),Vx=a("a"),$Ve=o("QDQBertConfig"),IVe=o(" (QDQBert model)"),qVe=l(),Zm=a("li"),zK=a("strong"),NVe=o("rag"),jVe=o(" \u2014 "),Xx=a("a"),DVe=o("RagConfig"),GVe=o(" (RAG model)"),OVe=l(),eg=a("li"),QK=a("strong"),VVe=o("realm"),XVe=o(" \u2014 "),zx=a("a"),zVe=o("RealmConfig"),QVe=o(" (Realm model)"),WVe=l(),og=a("li"),WK=a("strong"),HVe=o("reformer"),UVe=o(" \u2014 "),Qx=a("a"),JVe=o("ReformerConfig"),YVe=o(" (Reformer model)"),KVe=l(),rg=a("li"),HK=a("strong"),ZVe=o("regnet"),eXe=o(" \u2014 "),Wx=a("a"),oXe=o("RegNetConfig"),rXe=o(" (RegNet model)"),tXe=l(),tg=a("li"),UK=a("strong"),aXe=o("rembert"),nXe=o(" \u2014 "),Hx=a("a"),sXe=o("RemBertConfig"),lXe=o(" (RemBERT model)"),iXe=l(),ag=a("li"),JK=a("strong"),dXe=o("resnet"),cXe=o(" \u2014 "),Ux=a("a"),fXe=o("ResNetConfig"),mXe=o(" (ResNet model)"),gXe=l(),ng=a("li"),YK=a("strong"),hXe=o("retribert"),pXe=o(" \u2014 "),Jx=a("a"),_Xe=o("RetriBertConfig"),uXe=o(" (RetriBERT model)"),bXe=l(),sg=a("li"),KK=a("strong"),FXe=o("roberta"),vXe=o(" \u2014 "),Yx=a("a"),TXe=o("RobertaConfig"),MXe=o(" (RoBERTa model)"),EXe=l(),lg=a("li"),ZK=a("strong"),CXe=o("roformer"),wXe=o(" \u2014 "),Kx=a("a"),AXe=o("RoFormerConfig"),yXe=o(" (RoFormer model)"),LXe=l(),ig=a("li"),eZ=a("strong"),xXe=o("segformer"),kXe=o(" \u2014 "),Zx=a("a"),SXe=o("SegformerConfig"),RXe=o(" (SegFormer model)"),BXe=l(),dg=a("li"),oZ=a("strong"),PXe=o("sew"),$Xe=o(" \u2014 "),ek=a("a"),IXe=o("SEWConfig"),qXe=o(" (SEW model)"),NXe=l(),cg=a("li"),rZ=a("strong"),jXe=o("sew-d"),DXe=o(" \u2014 "),ok=a("a"),GXe=o("SEWDConfig"),OXe=o(" (SEW-D model)"),VXe=l(),fg=a("li"),tZ=a("strong"),XXe=o("speech-encoder-decoder"),zXe=o(" \u2014 "),rk=a("a"),QXe=o("SpeechEncoderDecoderConfig"),WXe=o(" (Speech Encoder decoder model)"),HXe=l(),mg=a("li"),aZ=a("strong"),UXe=o("speech_to_text"),JXe=o(" \u2014 "),tk=a("a"),YXe=o("Speech2TextConfig"),KXe=o(" (Speech2Text model)"),ZXe=l(),gg=a("li"),nZ=a("strong"),eze=o("speech_to_text_2"),oze=o(" \u2014 "),ak=a("a"),rze=o("Speech2Text2Config"),tze=o(" (Speech2Text2 model)"),aze=l(),hg=a("li"),sZ=a("strong"),nze=o("splinter"),sze=o(" \u2014 "),nk=a("a"),lze=o("SplinterConfig"),ize=o(" (Splinter model)"),dze=l(),pg=a("li"),lZ=a("strong"),cze=o("squeezebert"),fze=o(" \u2014 "),sk=a("a"),mze=o("SqueezeBertConfig"),gze=o(" (SqueezeBERT model)"),hze=l(),_g=a("li"),iZ=a("strong"),pze=o("swin"),_ze=o(" \u2014 "),lk=a("a"),uze=o("SwinConfig"),bze=o(" (Swin model)"),Fze=l(),ug=a("li"),dZ=a("strong"),vze=o("t5"),Tze=o(" \u2014 "),ik=a("a"),Mze=o("T5Config"),Eze=o(" (T5 model)"),Cze=l(),bg=a("li"),cZ=a("strong"),wze=o("tapas"),Aze=o(" \u2014 "),dk=a("a"),yze=o("TapasConfig"),Lze=o(" (TAPAS model)"),xze=l(),Fg=a("li"),fZ=a("strong"),kze=o("tapex"),Sze=o(" \u2014 "),ck=a("a"),Rze=o("BartConfig"),Bze=o(" (TAPEX model)"),Pze=l(),vg=a("li"),mZ=a("strong"),$ze=o("transfo-xl"),Ize=o(" \u2014 "),fk=a("a"),qze=o("TransfoXLConfig"),Nze=o(" (Transformer-XL model)"),jze=l(),Tg=a("li"),gZ=a("strong"),Dze=o("trocr"),Gze=o(" \u2014 "),mk=a("a"),Oze=o("TrOCRConfig"),Vze=o(" (TrOCR model)"),Xze=l(),Mg=a("li"),hZ=a("strong"),zze=o("unispeech"),Qze=o(" \u2014 "),gk=a("a"),Wze=o("UniSpeechConfig"),Hze=o(" (UniSpeech model)"),Uze=l(),Eg=a("li"),pZ=a("strong"),Jze=o("unispeech-sat"),Yze=o(" \u2014 "),hk=a("a"),Kze=o("UniSpeechSatConfig"),Zze=o(" (UniSpeechSat model)"),eQe=l(),Cg=a("li"),_Z=a("strong"),oQe=o("van"),rQe=o(" \u2014 "),pk=a("a"),tQe=o("VanConfig"),aQe=o(" (VAN model)"),nQe=l(),wg=a("li"),uZ=a("strong"),sQe=o("vilt"),lQe=o(" \u2014 "),_k=a("a"),iQe=o("ViltConfig"),dQe=o(" (ViLT model)"),cQe=l(),Ag=a("li"),bZ=a("strong"),fQe=o("vision-encoder-decoder"),mQe=o(" \u2014 "),uk=a("a"),gQe=o("VisionEncoderDecoderConfig"),hQe=o(" (Vision Encoder decoder model)"),pQe=l(),yg=a("li"),FZ=a("strong"),_Qe=o("vision-text-dual-encoder"),uQe=o(" \u2014 "),bk=a("a"),bQe=o("VisionTextDualEncoderConfig"),FQe=o(" (VisionTextDualEncoder model)"),vQe=l(),Lg=a("li"),vZ=a("strong"),TQe=o("visual_bert"),MQe=o(" \u2014 "),Fk=a("a"),EQe=o("VisualBertConfig"),CQe=o(" (VisualBert model)"),wQe=l(),xg=a("li"),TZ=a("strong"),AQe=o("vit"),yQe=o(" \u2014 "),vk=a("a"),LQe=o("ViTConfig"),xQe=o(" (ViT model)"),kQe=l(),kg=a("li"),MZ=a("strong"),SQe=o("vit_mae"),RQe=o(" \u2014 "),Tk=a("a"),BQe=o("ViTMAEConfig"),PQe=o(" (ViTMAE model)"),$Qe=l(),Sg=a("li"),EZ=a("strong"),IQe=o("wav2vec2"),qQe=o(" \u2014 "),Mk=a("a"),NQe=o("Wav2Vec2Config"),jQe=o(" (Wav2Vec2 model)"),DQe=l(),Rg=a("li"),CZ=a("strong"),GQe=o("wavlm"),OQe=o(" \u2014 "),Ek=a("a"),VQe=o("WavLMConfig"),XQe=o(" (WavLM model)"),zQe=l(),Bg=a("li"),wZ=a("strong"),QQe=o("xglm"),WQe=o(" \u2014 "),Ck=a("a"),HQe=o("XGLMConfig"),UQe=o(" (XGLM model)"),JQe=l(),Pg=a("li"),AZ=a("strong"),YQe=o("xlm"),KQe=o(" \u2014 "),wk=a("a"),ZQe=o("XLMConfig"),eWe=o(" (XLM model)"),oWe=l(),$g=a("li"),yZ=a("strong"),rWe=o("xlm-prophetnet"),tWe=o(" \u2014 "),Ak=a("a"),aWe=o("XLMProphetNetConfig"),nWe=o(" (XLMProphetNet model)"),sWe=l(),Ig=a("li"),LZ=a("strong"),lWe=o("xlm-roberta"),iWe=o(" \u2014 "),yk=a("a"),dWe=o("XLMRobertaConfig"),cWe=o(" (XLM-RoBERTa model)"),fWe=l(),qg=a("li"),xZ=a("strong"),mWe=o("xlm-roberta-xl"),gWe=o(" \u2014 "),Lk=a("a"),hWe=o("XLMRobertaXLConfig"),pWe=o(" (XLM-RoBERTa-XL model)"),_We=l(),Ng=a("li"),kZ=a("strong"),uWe=o("xlnet"),bWe=o(" \u2014 "),xk=a("a"),FWe=o("XLNetConfig"),vWe=o(" (XLNet model)"),TWe=l(),jg=a("li"),SZ=a("strong"),MWe=o("yoso"),EWe=o(" \u2014 "),kk=a("a"),CWe=o("YosoConfig"),wWe=o(" (YOSO model)"),AWe=l(),RZ=a("p"),yWe=o("Examples:"),LWe=l(),f(W5.$$.fragment),xWe=l(),Dg=a("div"),f(H5.$$.fragment),kWe=l(),BZ=a("p"),SWe=o("Register a new configuration for this class."),uBe=l(),Hi=a("h2"),Gg=a("a"),PZ=a("span"),f(U5.$$.fragment),RWe=l(),$Z=a("span"),BWe=o("AutoTokenizer"),bBe=l(),Wo=a("div"),f(J5.$$.fragment),PWe=l(),Y5=a("p"),$We=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Sk=a("a"),IWe=o("AutoTokenizer.from_pretrained()"),qWe=o(" class method."),NWe=l(),K5=a("p"),jWe=o("This class cannot be instantiated directly using "),IZ=a("code"),DWe=o("__init__()"),GWe=o(" (throws an error)."),OWe=l(),go=a("div"),f(Z5.$$.fragment),VWe=l(),qZ=a("p"),XWe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),zWe=l(),Oa=a("p"),QWe=o("The tokenizer class to instantiate is selected based on the "),NZ=a("code"),WWe=o("model_type"),HWe=o(` property of the config object (either
passed as an argument or loaded from `),jZ=a("code"),UWe=o("pretrained_model_name_or_path"),JWe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DZ=a("code"),YWe=o("pretrained_model_name_or_path"),KWe=o(":"),ZWe=l(),E=a("ul"),Wn=a("li"),GZ=a("strong"),eHe=o("albert"),oHe=o(" \u2014 "),Rk=a("a"),rHe=o("AlbertTokenizer"),tHe=o(" or "),Bk=a("a"),aHe=o("AlbertTokenizerFast"),nHe=o(" (ALBERT model)"),sHe=l(),Hn=a("li"),OZ=a("strong"),lHe=o("bart"),iHe=o(" \u2014 "),Pk=a("a"),dHe=o("BartTokenizer"),cHe=o(" or "),$k=a("a"),fHe=o("BartTokenizerFast"),mHe=o(" (BART model)"),gHe=l(),Un=a("li"),VZ=a("strong"),hHe=o("barthez"),pHe=o(" \u2014 "),Ik=a("a"),_He=o("BarthezTokenizer"),uHe=o(" or "),qk=a("a"),bHe=o("BarthezTokenizerFast"),FHe=o(" (BARThez model)"),vHe=l(),Og=a("li"),XZ=a("strong"),THe=o("bartpho"),MHe=o(" \u2014 "),Nk=a("a"),EHe=o("BartphoTokenizer"),CHe=o(" (BARTpho model)"),wHe=l(),Jn=a("li"),zZ=a("strong"),AHe=o("bert"),yHe=o(" \u2014 "),jk=a("a"),LHe=o("BertTokenizer"),xHe=o(" or "),Dk=a("a"),kHe=o("BertTokenizerFast"),SHe=o(" (BERT model)"),RHe=l(),Vg=a("li"),QZ=a("strong"),BHe=o("bert-generation"),PHe=o(" \u2014 "),Gk=a("a"),$He=o("BertGenerationTokenizer"),IHe=o(" (Bert Generation model)"),qHe=l(),Xg=a("li"),WZ=a("strong"),NHe=o("bert-japanese"),jHe=o(" \u2014 "),Ok=a("a"),DHe=o("BertJapaneseTokenizer"),GHe=o(" (BertJapanese model)"),OHe=l(),zg=a("li"),HZ=a("strong"),VHe=o("bertweet"),XHe=o(" \u2014 "),Vk=a("a"),zHe=o("BertweetTokenizer"),QHe=o(" (Bertweet model)"),WHe=l(),Yn=a("li"),UZ=a("strong"),HHe=o("big_bird"),UHe=o(" \u2014 "),Xk=a("a"),JHe=o("BigBirdTokenizer"),YHe=o(" or "),zk=a("a"),KHe=o("BigBirdTokenizerFast"),ZHe=o(" (BigBird model)"),eUe=l(),Kn=a("li"),JZ=a("strong"),oUe=o("bigbird_pegasus"),rUe=o(" \u2014 "),Qk=a("a"),tUe=o("PegasusTokenizer"),aUe=o(" or "),Wk=a("a"),nUe=o("PegasusTokenizerFast"),sUe=o(" (BigBirdPegasus model)"),lUe=l(),Zn=a("li"),YZ=a("strong"),iUe=o("blenderbot"),dUe=o(" \u2014 "),Hk=a("a"),cUe=o("BlenderbotTokenizer"),fUe=o(" or "),Uk=a("a"),mUe=o("BlenderbotTokenizerFast"),gUe=o(" (Blenderbot model)"),hUe=l(),Qg=a("li"),KZ=a("strong"),pUe=o("blenderbot-small"),_Ue=o(" \u2014 "),Jk=a("a"),uUe=o("BlenderbotSmallTokenizer"),bUe=o(" (BlenderbotSmall model)"),FUe=l(),Wg=a("li"),ZZ=a("strong"),vUe=o("byt5"),TUe=o(" \u2014 "),Yk=a("a"),MUe=o("ByT5Tokenizer"),EUe=o(" (ByT5 model)"),CUe=l(),es=a("li"),eee=a("strong"),wUe=o("camembert"),AUe=o(" \u2014 "),Kk=a("a"),yUe=o("CamembertTokenizer"),LUe=o(" or "),Zk=a("a"),xUe=o("CamembertTokenizerFast"),kUe=o(" (CamemBERT model)"),SUe=l(),Hg=a("li"),oee=a("strong"),RUe=o("canine"),BUe=o(" \u2014 "),eS=a("a"),PUe=o("CanineTokenizer"),$Ue=o(" (Canine model)"),IUe=l(),os=a("li"),ree=a("strong"),qUe=o("clip"),NUe=o(" \u2014 "),oS=a("a"),jUe=o("CLIPTokenizer"),DUe=o(" or "),rS=a("a"),GUe=o("CLIPTokenizerFast"),OUe=o(" (CLIP model)"),VUe=l(),rs=a("li"),tee=a("strong"),XUe=o("convbert"),zUe=o(" \u2014 "),tS=a("a"),QUe=o("ConvBertTokenizer"),WUe=o(" or "),aS=a("a"),HUe=o("ConvBertTokenizerFast"),UUe=o(" (ConvBERT model)"),JUe=l(),ts=a("li"),aee=a("strong"),YUe=o("cpm"),KUe=o(" \u2014 "),nS=a("a"),ZUe=o("CpmTokenizer"),eJe=o(" or "),nee=a("code"),oJe=o("CpmTokenizerFast"),rJe=o(" (CPM model)"),tJe=l(),Ug=a("li"),see=a("strong"),aJe=o("ctrl"),nJe=o(" \u2014 "),sS=a("a"),sJe=o("CTRLTokenizer"),lJe=o(" (CTRL model)"),iJe=l(),as=a("li"),lee=a("strong"),dJe=o("deberta"),cJe=o(" \u2014 "),lS=a("a"),fJe=o("DebertaTokenizer"),mJe=o(" or "),iS=a("a"),gJe=o("DebertaTokenizerFast"),hJe=o(" (DeBERTa model)"),pJe=l(),Jg=a("li"),iee=a("strong"),_Je=o("deberta-v2"),uJe=o(" \u2014 "),dS=a("a"),bJe=o("DebertaV2Tokenizer"),FJe=o(" (DeBERTa-v2 model)"),vJe=l(),ns=a("li"),dee=a("strong"),TJe=o("distilbert"),MJe=o(" \u2014 "),cS=a("a"),EJe=o("DistilBertTokenizer"),CJe=o(" or "),fS=a("a"),wJe=o("DistilBertTokenizerFast"),AJe=o(" (DistilBERT model)"),yJe=l(),ss=a("li"),cee=a("strong"),LJe=o("dpr"),xJe=o(" \u2014 "),mS=a("a"),kJe=o("DPRQuestionEncoderTokenizer"),SJe=o(" or "),gS=a("a"),RJe=o("DPRQuestionEncoderTokenizerFast"),BJe=o(" (DPR model)"),PJe=l(),ls=a("li"),fee=a("strong"),$Je=o("electra"),IJe=o(" \u2014 "),hS=a("a"),qJe=o("ElectraTokenizer"),NJe=o(" or "),pS=a("a"),jJe=o("ElectraTokenizerFast"),DJe=o(" (ELECTRA model)"),GJe=l(),Yg=a("li"),mee=a("strong"),OJe=o("flaubert"),VJe=o(" \u2014 "),_S=a("a"),XJe=o("FlaubertTokenizer"),zJe=o(" (FlauBERT model)"),QJe=l(),is=a("li"),gee=a("strong"),WJe=o("fnet"),HJe=o(" \u2014 "),uS=a("a"),UJe=o("FNetTokenizer"),JJe=o(" or "),bS=a("a"),YJe=o("FNetTokenizerFast"),KJe=o(" (FNet model)"),ZJe=l(),Kg=a("li"),hee=a("strong"),eYe=o("fsmt"),oYe=o(" \u2014 "),FS=a("a"),rYe=o("FSMTTokenizer"),tYe=o(" (FairSeq Machine-Translation model)"),aYe=l(),ds=a("li"),pee=a("strong"),nYe=o("funnel"),sYe=o(" \u2014 "),vS=a("a"),lYe=o("FunnelTokenizer"),iYe=o(" or "),TS=a("a"),dYe=o("FunnelTokenizerFast"),cYe=o(" (Funnel Transformer model)"),fYe=l(),cs=a("li"),_ee=a("strong"),mYe=o("gpt2"),gYe=o(" \u2014 "),MS=a("a"),hYe=o("GPT2Tokenizer"),pYe=o(" or "),ES=a("a"),_Ye=o("GPT2TokenizerFast"),uYe=o(" (OpenAI GPT-2 model)"),bYe=l(),fs=a("li"),uee=a("strong"),FYe=o("gpt_neo"),vYe=o(" \u2014 "),CS=a("a"),TYe=o("GPT2Tokenizer"),MYe=o(" or "),wS=a("a"),EYe=o("GPT2TokenizerFast"),CYe=o(" (GPT Neo model)"),wYe=l(),ms=a("li"),bee=a("strong"),AYe=o("herbert"),yYe=o(" \u2014 "),AS=a("a"),LYe=o("HerbertTokenizer"),xYe=o(" or "),yS=a("a"),kYe=o("HerbertTokenizerFast"),SYe=o(" (HerBERT model)"),RYe=l(),Zg=a("li"),Fee=a("strong"),BYe=o("hubert"),PYe=o(" \u2014 "),LS=a("a"),$Ye=o("Wav2Vec2CTCTokenizer"),IYe=o(" (Hubert model)"),qYe=l(),gs=a("li"),vee=a("strong"),NYe=o("ibert"),jYe=o(" \u2014 "),xS=a("a"),DYe=o("RobertaTokenizer"),GYe=o(" or "),kS=a("a"),OYe=o("RobertaTokenizerFast"),VYe=o(" (I-BERT model)"),XYe=l(),hs=a("li"),Tee=a("strong"),zYe=o("layoutlm"),QYe=o(" \u2014 "),SS=a("a"),WYe=o("LayoutLMTokenizer"),HYe=o(" or "),RS=a("a"),UYe=o("LayoutLMTokenizerFast"),JYe=o(" (LayoutLM model)"),YYe=l(),ps=a("li"),Mee=a("strong"),KYe=o("layoutlmv2"),ZYe=o(" \u2014 "),BS=a("a"),eKe=o("LayoutLMv2Tokenizer"),oKe=o(" or "),PS=a("a"),rKe=o("LayoutLMv2TokenizerFast"),tKe=o(" (LayoutLMv2 model)"),aKe=l(),_s=a("li"),Eee=a("strong"),nKe=o("layoutxlm"),sKe=o(" \u2014 "),$S=a("a"),lKe=o("LayoutXLMTokenizer"),iKe=o(" or "),IS=a("a"),dKe=o("LayoutXLMTokenizerFast"),cKe=o(" (LayoutXLM model)"),fKe=l(),us=a("li"),Cee=a("strong"),mKe=o("led"),gKe=o(" \u2014 "),qS=a("a"),hKe=o("LEDTokenizer"),pKe=o(" or "),NS=a("a"),_Ke=o("LEDTokenizerFast"),uKe=o(" (LED model)"),bKe=l(),bs=a("li"),wee=a("strong"),FKe=o("longformer"),vKe=o(" \u2014 "),jS=a("a"),TKe=o("LongformerTokenizer"),MKe=o(" or "),DS=a("a"),EKe=o("LongformerTokenizerFast"),CKe=o(" (Longformer model)"),wKe=l(),Fs=a("li"),Aee=a("strong"),AKe=o("longt5"),yKe=o(" \u2014 "),GS=a("a"),LKe=o("T5Tokenizer"),xKe=o(" or "),OS=a("a"),kKe=o("T5TokenizerFast"),SKe=o(" (LongT5 model)"),RKe=l(),eh=a("li"),yee=a("strong"),BKe=o("luke"),PKe=o(" \u2014 "),VS=a("a"),$Ke=o("LukeTokenizer"),IKe=o(" (LUKE model)"),qKe=l(),vs=a("li"),Lee=a("strong"),NKe=o("lxmert"),jKe=o(" \u2014 "),XS=a("a"),DKe=o("LxmertTokenizer"),GKe=o(" or "),zS=a("a"),OKe=o("LxmertTokenizerFast"),VKe=o(" (LXMERT model)"),XKe=l(),oh=a("li"),xee=a("strong"),zKe=o("m2m_100"),QKe=o(" \u2014 "),QS=a("a"),WKe=o("M2M100Tokenizer"),HKe=o(" (M2M100 model)"),UKe=l(),rh=a("li"),kee=a("strong"),JKe=o("marian"),YKe=o(" \u2014 "),WS=a("a"),KKe=o("MarianTokenizer"),ZKe=o(" (Marian model)"),eZe=l(),Ts=a("li"),See=a("strong"),oZe=o("mbart"),rZe=o(" \u2014 "),HS=a("a"),tZe=o("MBartTokenizer"),aZe=o(" or "),US=a("a"),nZe=o("MBartTokenizerFast"),sZe=o(" (mBART model)"),lZe=l(),Ms=a("li"),Ree=a("strong"),iZe=o("mbart50"),dZe=o(" \u2014 "),JS=a("a"),cZe=o("MBart50Tokenizer"),fZe=o(" or "),YS=a("a"),mZe=o("MBart50TokenizerFast"),gZe=o(" (mBART-50 model)"),hZe=l(),th=a("li"),Bee=a("strong"),pZe=o("mluke"),_Ze=o(" \u2014 "),KS=a("a"),uZe=o("MLukeTokenizer"),bZe=o(" (mLUKE model)"),FZe=l(),Es=a("li"),Pee=a("strong"),vZe=o("mobilebert"),TZe=o(" \u2014 "),ZS=a("a"),MZe=o("MobileBertTokenizer"),EZe=o(" or "),eR=a("a"),CZe=o("MobileBertTokenizerFast"),wZe=o(" (MobileBERT model)"),AZe=l(),Cs=a("li"),$ee=a("strong"),yZe=o("mpnet"),LZe=o(" \u2014 "),oR=a("a"),xZe=o("MPNetTokenizer"),kZe=o(" or "),rR=a("a"),SZe=o("MPNetTokenizerFast"),RZe=o(" (MPNet model)"),BZe=l(),ws=a("li"),Iee=a("strong"),PZe=o("mt5"),$Ze=o(" \u2014 "),tR=a("a"),IZe=o("MT5Tokenizer"),qZe=o(" or "),aR=a("a"),NZe=o("MT5TokenizerFast"),jZe=o(" (mT5 model)"),DZe=l(),As=a("li"),qee=a("strong"),GZe=o("openai-gpt"),OZe=o(" \u2014 "),nR=a("a"),VZe=o("OpenAIGPTTokenizer"),XZe=o(" or "),sR=a("a"),zZe=o("OpenAIGPTTokenizerFast"),QZe=o(" (OpenAI GPT model)"),WZe=l(),ys=a("li"),Nee=a("strong"),HZe=o("pegasus"),UZe=o(" \u2014 "),lR=a("a"),JZe=o("PegasusTokenizer"),YZe=o(" or "),iR=a("a"),KZe=o("PegasusTokenizerFast"),ZZe=o(" (Pegasus model)"),eeo=l(),ah=a("li"),jee=a("strong"),oeo=o("perceiver"),reo=o(" \u2014 "),dR=a("a"),teo=o("PerceiverTokenizer"),aeo=o(" (Perceiver model)"),neo=l(),nh=a("li"),Dee=a("strong"),seo=o("phobert"),leo=o(" \u2014 "),cR=a("a"),ieo=o("PhobertTokenizer"),deo=o(" (PhoBERT model)"),ceo=l(),sh=a("li"),Gee=a("strong"),feo=o("plbart"),meo=o(" \u2014 "),fR=a("a"),geo=o("PLBartTokenizer"),heo=o(" (PLBart model)"),peo=l(),lh=a("li"),Oee=a("strong"),_eo=o("prophetnet"),ueo=o(" \u2014 "),mR=a("a"),beo=o("ProphetNetTokenizer"),Feo=o(" (ProphetNet model)"),veo=l(),Ls=a("li"),Vee=a("strong"),Teo=o("qdqbert"),Meo=o(" \u2014 "),gR=a("a"),Eeo=o("BertTokenizer"),Ceo=o(" or "),hR=a("a"),weo=o("BertTokenizerFast"),Aeo=o(" (QDQBert model)"),yeo=l(),ih=a("li"),Xee=a("strong"),Leo=o("rag"),xeo=o(" \u2014 "),pR=a("a"),keo=o("RagTokenizer"),Seo=o(" (RAG model)"),Reo=l(),xs=a("li"),zee=a("strong"),Beo=o("realm"),Peo=o(" \u2014 "),_R=a("a"),$eo=o("RealmTokenizer"),Ieo=o(" or "),uR=a("a"),qeo=o("RealmTokenizerFast"),Neo=o(" (Realm model)"),jeo=l(),ks=a("li"),Qee=a("strong"),Deo=o("reformer"),Geo=o(" \u2014 "),bR=a("a"),Oeo=o("ReformerTokenizer"),Veo=o(" or "),FR=a("a"),Xeo=o("ReformerTokenizerFast"),zeo=o(" (Reformer model)"),Qeo=l(),Ss=a("li"),Wee=a("strong"),Weo=o("rembert"),Heo=o(" \u2014 "),vR=a("a"),Ueo=o("RemBertTokenizer"),Jeo=o(" or "),TR=a("a"),Yeo=o("RemBertTokenizerFast"),Keo=o(" (RemBERT model)"),Zeo=l(),Rs=a("li"),Hee=a("strong"),eoo=o("retribert"),ooo=o(" \u2014 "),MR=a("a"),roo=o("RetriBertTokenizer"),too=o(" or "),ER=a("a"),aoo=o("RetriBertTokenizerFast"),noo=o(" (RetriBERT model)"),soo=l(),Bs=a("li"),Uee=a("strong"),loo=o("roberta"),ioo=o(" \u2014 "),CR=a("a"),doo=o("RobertaTokenizer"),coo=o(" or "),wR=a("a"),foo=o("RobertaTokenizerFast"),moo=o(" (RoBERTa model)"),goo=l(),Ps=a("li"),Jee=a("strong"),hoo=o("roformer"),poo=o(" \u2014 "),AR=a("a"),_oo=o("RoFormerTokenizer"),uoo=o(" or "),yR=a("a"),boo=o("RoFormerTokenizerFast"),Foo=o(" (RoFormer model)"),voo=l(),dh=a("li"),Yee=a("strong"),Too=o("speech_to_text"),Moo=o(" \u2014 "),LR=a("a"),Eoo=o("Speech2TextTokenizer"),Coo=o(" (Speech2Text model)"),woo=l(),ch=a("li"),Kee=a("strong"),Aoo=o("speech_to_text_2"),yoo=o(" \u2014 "),xR=a("a"),Loo=o("Speech2Text2Tokenizer"),xoo=o(" (Speech2Text2 model)"),koo=l(),$s=a("li"),Zee=a("strong"),Soo=o("splinter"),Roo=o(" \u2014 "),kR=a("a"),Boo=o("SplinterTokenizer"),Poo=o(" or "),SR=a("a"),$oo=o("SplinterTokenizerFast"),Ioo=o(" (Splinter model)"),qoo=l(),Is=a("li"),eoe=a("strong"),Noo=o("squeezebert"),joo=o(" \u2014 "),RR=a("a"),Doo=o("SqueezeBertTokenizer"),Goo=o(" or "),BR=a("a"),Ooo=o("SqueezeBertTokenizerFast"),Voo=o(" (SqueezeBERT model)"),Xoo=l(),qs=a("li"),ooe=a("strong"),zoo=o("t5"),Qoo=o(" \u2014 "),PR=a("a"),Woo=o("T5Tokenizer"),Hoo=o(" or "),$R=a("a"),Uoo=o("T5TokenizerFast"),Joo=o(" (T5 model)"),Yoo=l(),fh=a("li"),roe=a("strong"),Koo=o("tapas"),Zoo=o(" \u2014 "),IR=a("a"),ero=o("TapasTokenizer"),oro=o(" (TAPAS model)"),rro=l(),mh=a("li"),toe=a("strong"),tro=o("tapex"),aro=o(" \u2014 "),qR=a("a"),nro=o("TapexTokenizer"),sro=o(" (TAPEX model)"),lro=l(),gh=a("li"),aoe=a("strong"),iro=o("transfo-xl"),dro=o(" \u2014 "),NR=a("a"),cro=o("TransfoXLTokenizer"),fro=o(" (Transformer-XL model)"),mro=l(),hh=a("li"),noe=a("strong"),gro=o("wav2vec2"),hro=o(" \u2014 "),jR=a("a"),pro=o("Wav2Vec2CTCTokenizer"),_ro=o(" (Wav2Vec2 model)"),uro=l(),ph=a("li"),soe=a("strong"),bro=o("wav2vec2_phoneme"),Fro=o(" \u2014 "),DR=a("a"),vro=o("Wav2Vec2PhonemeCTCTokenizer"),Tro=o(" (Wav2Vec2Phoneme model)"),Mro=l(),Ns=a("li"),loe=a("strong"),Ero=o("xglm"),Cro=o(" \u2014 "),GR=a("a"),wro=o("XGLMTokenizer"),Aro=o(" or "),OR=a("a"),yro=o("XGLMTokenizerFast"),Lro=o(" (XGLM model)"),xro=l(),_h=a("li"),ioe=a("strong"),kro=o("xlm"),Sro=o(" \u2014 "),VR=a("a"),Rro=o("XLMTokenizer"),Bro=o(" (XLM model)"),Pro=l(),uh=a("li"),doe=a("strong"),$ro=o("xlm-prophetnet"),Iro=o(" \u2014 "),XR=a("a"),qro=o("XLMProphetNetTokenizer"),Nro=o(" (XLMProphetNet model)"),jro=l(),js=a("li"),coe=a("strong"),Dro=o("xlm-roberta"),Gro=o(" \u2014 "),zR=a("a"),Oro=o("XLMRobertaTokenizer"),Vro=o(" or "),QR=a("a"),Xro=o("XLMRobertaTokenizerFast"),zro=o(" (XLM-RoBERTa model)"),Qro=l(),Ds=a("li"),foe=a("strong"),Wro=o("xlnet"),Hro=o(" \u2014 "),WR=a("a"),Uro=o("XLNetTokenizer"),Jro=o(" or "),HR=a("a"),Yro=o("XLNetTokenizerFast"),Kro=o(" (XLNet model)"),Zro=l(),moe=a("p"),eto=o("Examples:"),oto=l(),f(e3.$$.fragment),rto=l(),bh=a("div"),f(o3.$$.fragment),tto=l(),goe=a("p"),ato=o("Register a new tokenizer in this mapping."),FBe=l(),Ui=a("h2"),Fh=a("a"),hoe=a("span"),f(r3.$$.fragment),nto=l(),poe=a("span"),sto=o("AutoFeatureExtractor"),vBe=l(),Ho=a("div"),f(t3.$$.fragment),lto=l(),a3=a("p"),ito=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),UR=a("a"),dto=o("AutoFeatureExtractor.from_pretrained()"),cto=o(" class method."),fto=l(),n3=a("p"),mto=o("This class cannot be instantiated directly using "),_oe=a("code"),gto=o("__init__()"),hto=o(" (throws an error)."),pto=l(),Ie=a("div"),f(s3.$$.fragment),_to=l(),uoe=a("p"),uto=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),bto=l(),Va=a("p"),Fto=o("The feature extractor class to instantiate is selected based on the "),boe=a("code"),vto=o("model_type"),Tto=o(` property of the config object
(either passed as an argument or loaded from `),Foe=a("code"),Mto=o("pretrained_model_name_or_path"),Eto=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),voe=a("code"),Cto=o("pretrained_model_name_or_path"),wto=o(":"),Ato=l(),ee=a("ul"),vh=a("li"),Toe=a("strong"),yto=o("beit"),Lto=o(" \u2014 "),JR=a("a"),xto=o("BeitFeatureExtractor"),kto=o(" (BEiT model)"),Sto=l(),Th=a("li"),Moe=a("strong"),Rto=o("clip"),Bto=o(" \u2014 "),YR=a("a"),Pto=o("CLIPFeatureExtractor"),$to=o(" (CLIP model)"),Ito=l(),Mh=a("li"),Eoe=a("strong"),qto=o("convnext"),Nto=o(" \u2014 "),KR=a("a"),jto=o("ConvNextFeatureExtractor"),Dto=o(" (ConvNext model)"),Gto=l(),Eh=a("li"),Coe=a("strong"),Oto=o("deit"),Vto=o(" \u2014 "),ZR=a("a"),Xto=o("DeiTFeatureExtractor"),zto=o(" (DeiT model)"),Qto=l(),Ch=a("li"),woe=a("strong"),Wto=o("detr"),Hto=o(" \u2014 "),eB=a("a"),Uto=o("DetrFeatureExtractor"),Jto=o(" (DETR model)"),Yto=l(),wh=a("li"),Aoe=a("strong"),Kto=o("hubert"),Zto=o(" \u2014 "),oB=a("a"),eao=o("Wav2Vec2FeatureExtractor"),oao=o(" (Hubert model)"),rao=l(),Ah=a("li"),yoe=a("strong"),tao=o("layoutlmv2"),aao=o(" \u2014 "),rB=a("a"),nao=o("LayoutLMv2FeatureExtractor"),sao=o(" (LayoutLMv2 model)"),lao=l(),yh=a("li"),Loe=a("strong"),iao=o("maskformer"),dao=o(" \u2014 "),tB=a("a"),cao=o("MaskFormerFeatureExtractor"),fao=o(" (MaskFormer model)"),mao=l(),Lh=a("li"),xoe=a("strong"),gao=o("perceiver"),hao=o(" \u2014 "),aB=a("a"),pao=o("PerceiverFeatureExtractor"),_ao=o(" (Perceiver model)"),uao=l(),xh=a("li"),koe=a("strong"),bao=o("poolformer"),Fao=o(" \u2014 "),nB=a("a"),vao=o("PoolFormerFeatureExtractor"),Tao=o(" (PoolFormer model)"),Mao=l(),kh=a("li"),Soe=a("strong"),Eao=o("regnet"),Cao=o(" \u2014 "),sB=a("a"),wao=o("ConvNextFeatureExtractor"),Aao=o(" (RegNet model)"),yao=l(),Sh=a("li"),Roe=a("strong"),Lao=o("resnet"),xao=o(" \u2014 "),lB=a("a"),kao=o("ConvNextFeatureExtractor"),Sao=o(" (ResNet model)"),Rao=l(),Rh=a("li"),Boe=a("strong"),Bao=o("segformer"),Pao=o(" \u2014 "),iB=a("a"),$ao=o("SegformerFeatureExtractor"),Iao=o(" (SegFormer model)"),qao=l(),Bh=a("li"),Poe=a("strong"),Nao=o("speech_to_text"),jao=o(" \u2014 "),dB=a("a"),Dao=o("Speech2TextFeatureExtractor"),Gao=o(" (Speech2Text model)"),Oao=l(),Ph=a("li"),$oe=a("strong"),Vao=o("swin"),Xao=o(" \u2014 "),cB=a("a"),zao=o("ViTFeatureExtractor"),Qao=o(" (Swin model)"),Wao=l(),$h=a("li"),Ioe=a("strong"),Hao=o("van"),Uao=o(" \u2014 "),fB=a("a"),Jao=o("ConvNextFeatureExtractor"),Yao=o(" (VAN model)"),Kao=l(),Ih=a("li"),qoe=a("strong"),Zao=o("vit"),eno=o(" \u2014 "),mB=a("a"),ono=o("ViTFeatureExtractor"),rno=o(" (ViT model)"),tno=l(),qh=a("li"),Noe=a("strong"),ano=o("vit_mae"),nno=o(" \u2014 "),gB=a("a"),sno=o("ViTFeatureExtractor"),lno=o(" (ViTMAE model)"),ino=l(),Nh=a("li"),joe=a("strong"),dno=o("wav2vec2"),cno=o(" \u2014 "),hB=a("a"),fno=o("Wav2Vec2FeatureExtractor"),mno=o(" (Wav2Vec2 model)"),gno=l(),f(jh.$$.fragment),hno=l(),Doe=a("p"),pno=o("Examples:"),_no=l(),f(l3.$$.fragment),uno=l(),Dh=a("div"),f(i3.$$.fragment),bno=l(),Goe=a("p"),Fno=o("Register a new feature extractor for this class."),TBe=l(),Ji=a("h2"),Gh=a("a"),Ooe=a("span"),f(d3.$$.fragment),vno=l(),Voe=a("span"),Tno=o("AutoProcessor"),MBe=l(),Uo=a("div"),f(c3.$$.fragment),Mno=l(),f3=a("p"),Eno=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),pB=a("a"),Cno=o("AutoProcessor.from_pretrained()"),wno=o(" class method."),Ano=l(),m3=a("p"),yno=o("This class cannot be instantiated directly using "),Xoe=a("code"),Lno=o("__init__()"),xno=o(" (throws an error)."),kno=l(),qe=a("div"),f(g3.$$.fragment),Sno=l(),zoe=a("p"),Rno=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Bno=l(),Yi=a("p"),Pno=o("The processor class to instantiate is selected based on the "),Qoe=a("code"),$no=o("model_type"),Ino=o(` property of the config object (either
passed as an argument or loaded from `),Woe=a("code"),qno=o("pretrained_model_name_or_path"),Nno=o(" if possible):"),jno=l(),Se=a("ul"),Oh=a("li"),Hoe=a("strong"),Dno=o("clip"),Gno=o(" \u2014 "),_B=a("a"),Ono=o("CLIPProcessor"),Vno=o(" (CLIP model)"),Xno=l(),Vh=a("li"),Uoe=a("strong"),zno=o("layoutlmv2"),Qno=o(" \u2014 "),uB=a("a"),Wno=o("LayoutLMv2Processor"),Hno=o(" (LayoutLMv2 model)"),Uno=l(),Xh=a("li"),Joe=a("strong"),Jno=o("layoutxlm"),Yno=o(" \u2014 "),bB=a("a"),Kno=o("LayoutXLMProcessor"),Zno=o(" (LayoutXLM model)"),eso=l(),zh=a("li"),Yoe=a("strong"),oso=o("speech_to_text"),rso=o(" \u2014 "),FB=a("a"),tso=o("Speech2TextProcessor"),aso=o(" (Speech2Text model)"),nso=l(),Qh=a("li"),Koe=a("strong"),sso=o("speech_to_text_2"),lso=o(" \u2014 "),vB=a("a"),iso=o("Speech2Text2Processor"),dso=o(" (Speech2Text2 model)"),cso=l(),Wh=a("li"),Zoe=a("strong"),fso=o("trocr"),mso=o(" \u2014 "),TB=a("a"),gso=o("TrOCRProcessor"),hso=o(" (TrOCR model)"),pso=l(),Hh=a("li"),ere=a("strong"),_so=o("vision-text-dual-encoder"),uso=o(" \u2014 "),MB=a("a"),bso=o("VisionTextDualEncoderProcessor"),Fso=o(" (VisionTextDualEncoder model)"),vso=l(),Uh=a("li"),ore=a("strong"),Tso=o("wav2vec2"),Mso=o(" \u2014 "),EB=a("a"),Eso=o("Wav2Vec2Processor"),Cso=o(" (Wav2Vec2 model)"),wso=l(),f(Jh.$$.fragment),Aso=l(),rre=a("p"),yso=o("Examples:"),Lso=l(),f(h3.$$.fragment),xso=l(),Yh=a("div"),f(p3.$$.fragment),kso=l(),tre=a("p"),Sso=o("Register a new processor for this class."),EBe=l(),Ki=a("h2"),Kh=a("a"),are=a("span"),f(_3.$$.fragment),Rso=l(),nre=a("span"),Bso=o("AutoModel"),CBe=l(),Jo=a("div"),f(u3.$$.fragment),Pso=l(),Zi=a("p"),$so=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),CB=a("a"),Iso=o("from_pretrained()"),qso=o(" class method or the "),wB=a("a"),Nso=o("from_config()"),jso=o(` class
method.`),Dso=l(),b3=a("p"),Gso=o("This class cannot be instantiated directly using "),sre=a("code"),Oso=o("__init__()"),Vso=o(" (throws an error)."),Xso=l(),Xr=a("div"),f(F3.$$.fragment),zso=l(),lre=a("p"),Qso=o("Instantiates one of the base model classes of the library from a configuration."),Wso=l(),ed=a("p"),Hso=o(`Note:
Loading a model from its configuration file does `),ire=a("strong"),Uso=o("not"),Jso=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AB=a("a"),Yso=o("from_pretrained()"),Kso=o(" to load the model weights."),Zso=l(),dre=a("p"),elo=o("Examples:"),olo=l(),f(v3.$$.fragment),rlo=l(),Ne=a("div"),f(T3.$$.fragment),tlo=l(),cre=a("p"),alo=o("Instantiate one of the base model classes of the library from a pretrained model."),nlo=l(),Xa=a("p"),slo=o("The model class to instantiate is selected based on the "),fre=a("code"),llo=o("model_type"),ilo=o(` property of the config object (either
passed as an argument or loaded from `),mre=a("code"),dlo=o("pretrained_model_name_or_path"),clo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gre=a("code"),flo=o("pretrained_model_name_or_path"),mlo=o(":"),glo=l(),T=a("ul"),Zh=a("li"),hre=a("strong"),hlo=o("albert"),plo=o(" \u2014 "),yB=a("a"),_lo=o("AlbertModel"),ulo=o(" (ALBERT model)"),blo=l(),ep=a("li"),pre=a("strong"),Flo=o("bart"),vlo=o(" \u2014 "),LB=a("a"),Tlo=o("BartModel"),Mlo=o(" (BART model)"),Elo=l(),op=a("li"),_re=a("strong"),Clo=o("beit"),wlo=o(" \u2014 "),xB=a("a"),Alo=o("BeitModel"),ylo=o(" (BEiT model)"),Llo=l(),rp=a("li"),ure=a("strong"),xlo=o("bert"),klo=o(" \u2014 "),kB=a("a"),Slo=o("BertModel"),Rlo=o(" (BERT model)"),Blo=l(),tp=a("li"),bre=a("strong"),Plo=o("bert-generation"),$lo=o(" \u2014 "),SB=a("a"),Ilo=o("BertGenerationEncoder"),qlo=o(" (Bert Generation model)"),Nlo=l(),ap=a("li"),Fre=a("strong"),jlo=o("big_bird"),Dlo=o(" \u2014 "),RB=a("a"),Glo=o("BigBirdModel"),Olo=o(" (BigBird model)"),Vlo=l(),np=a("li"),vre=a("strong"),Xlo=o("bigbird_pegasus"),zlo=o(" \u2014 "),BB=a("a"),Qlo=o("BigBirdPegasusModel"),Wlo=o(" (BigBirdPegasus model)"),Hlo=l(),sp=a("li"),Tre=a("strong"),Ulo=o("blenderbot"),Jlo=o(" \u2014 "),PB=a("a"),Ylo=o("BlenderbotModel"),Klo=o(" (Blenderbot model)"),Zlo=l(),lp=a("li"),Mre=a("strong"),eio=o("blenderbot-small"),oio=o(" \u2014 "),$B=a("a"),rio=o("BlenderbotSmallModel"),tio=o(" (BlenderbotSmall model)"),aio=l(),ip=a("li"),Ere=a("strong"),nio=o("camembert"),sio=o(" \u2014 "),IB=a("a"),lio=o("CamembertModel"),iio=o(" (CamemBERT model)"),dio=l(),dp=a("li"),Cre=a("strong"),cio=o("canine"),fio=o(" \u2014 "),qB=a("a"),mio=o("CanineModel"),gio=o(" (Canine model)"),hio=l(),cp=a("li"),wre=a("strong"),pio=o("clip"),_io=o(" \u2014 "),NB=a("a"),uio=o("CLIPModel"),bio=o(" (CLIP model)"),Fio=l(),fp=a("li"),Are=a("strong"),vio=o("convbert"),Tio=o(" \u2014 "),jB=a("a"),Mio=o("ConvBertModel"),Eio=o(" (ConvBERT model)"),Cio=l(),mp=a("li"),yre=a("strong"),wio=o("convnext"),Aio=o(" \u2014 "),DB=a("a"),yio=o("ConvNextModel"),Lio=o(" (ConvNext model)"),xio=l(),gp=a("li"),Lre=a("strong"),kio=o("ctrl"),Sio=o(" \u2014 "),GB=a("a"),Rio=o("CTRLModel"),Bio=o(" (CTRL model)"),Pio=l(),hp=a("li"),xre=a("strong"),$io=o("data2vec-audio"),Iio=o(" \u2014 "),OB=a("a"),qio=o("Data2VecAudioModel"),Nio=o(" (Data2VecAudio model)"),jio=l(),pp=a("li"),kre=a("strong"),Dio=o("data2vec-text"),Gio=o(" \u2014 "),VB=a("a"),Oio=o("Data2VecTextModel"),Vio=o(" (Data2VecText model)"),Xio=l(),_p=a("li"),Sre=a("strong"),zio=o("data2vec-vision"),Qio=o(" \u2014 "),XB=a("a"),Wio=o("Data2VecVisionModel"),Hio=o(" (Data2VecVision model)"),Uio=l(),up=a("li"),Rre=a("strong"),Jio=o("deberta"),Yio=o(" \u2014 "),zB=a("a"),Kio=o("DebertaModel"),Zio=o(" (DeBERTa model)"),edo=l(),bp=a("li"),Bre=a("strong"),odo=o("deberta-v2"),rdo=o(" \u2014 "),QB=a("a"),tdo=o("DebertaV2Model"),ado=o(" (DeBERTa-v2 model)"),ndo=l(),Fp=a("li"),Pre=a("strong"),sdo=o("decision_transformer"),ldo=o(" \u2014 "),WB=a("a"),ido=o("DecisionTransformerModel"),ddo=o(" (Decision Transformer model)"),cdo=l(),vp=a("li"),$re=a("strong"),fdo=o("deit"),mdo=o(" \u2014 "),HB=a("a"),gdo=o("DeiTModel"),hdo=o(" (DeiT model)"),pdo=l(),Tp=a("li"),Ire=a("strong"),_do=o("detr"),udo=o(" \u2014 "),UB=a("a"),bdo=o("DetrModel"),Fdo=o(" (DETR model)"),vdo=l(),Mp=a("li"),qre=a("strong"),Tdo=o("distilbert"),Mdo=o(" \u2014 "),JB=a("a"),Edo=o("DistilBertModel"),Cdo=o(" (DistilBERT model)"),wdo=l(),Ep=a("li"),Nre=a("strong"),Ado=o("dpr"),ydo=o(" \u2014 "),YB=a("a"),Ldo=o("DPRQuestionEncoder"),xdo=o(" (DPR model)"),kdo=l(),Cp=a("li"),jre=a("strong"),Sdo=o("dpt"),Rdo=o(" \u2014 "),KB=a("a"),Bdo=o("DPTModel"),Pdo=o(" (DPT model)"),$do=l(),wp=a("li"),Dre=a("strong"),Ido=o("electra"),qdo=o(" \u2014 "),ZB=a("a"),Ndo=o("ElectraModel"),jdo=o(" (ELECTRA model)"),Ddo=l(),Ap=a("li"),Gre=a("strong"),Gdo=o("flaubert"),Odo=o(" \u2014 "),eP=a("a"),Vdo=o("FlaubertModel"),Xdo=o(" (FlauBERT model)"),zdo=l(),yp=a("li"),Ore=a("strong"),Qdo=o("fnet"),Wdo=o(" \u2014 "),oP=a("a"),Hdo=o("FNetModel"),Udo=o(" (FNet model)"),Jdo=l(),Lp=a("li"),Vre=a("strong"),Ydo=o("fsmt"),Kdo=o(" \u2014 "),rP=a("a"),Zdo=o("FSMTModel"),eco=o(" (FairSeq Machine-Translation model)"),oco=l(),Gs=a("li"),Xre=a("strong"),rco=o("funnel"),tco=o(" \u2014 "),tP=a("a"),aco=o("FunnelModel"),nco=o(" or "),aP=a("a"),sco=o("FunnelBaseModel"),lco=o(" (Funnel Transformer model)"),ico=l(),xp=a("li"),zre=a("strong"),dco=o("glpn"),cco=o(" \u2014 "),nP=a("a"),fco=o("GLPNModel"),mco=o(" (GLPN model)"),gco=l(),kp=a("li"),Qre=a("strong"),hco=o("gpt2"),pco=o(" \u2014 "),sP=a("a"),_co=o("GPT2Model"),uco=o(" (OpenAI GPT-2 model)"),bco=l(),Sp=a("li"),Wre=a("strong"),Fco=o("gpt_neo"),vco=o(" \u2014 "),lP=a("a"),Tco=o("GPTNeoModel"),Mco=o(" (GPT Neo model)"),Eco=l(),Rp=a("li"),Hre=a("strong"),Cco=o("gptj"),wco=o(" \u2014 "),iP=a("a"),Aco=o("GPTJModel"),yco=o(" (GPT-J model)"),Lco=l(),Bp=a("li"),Ure=a("strong"),xco=o("hubert"),kco=o(" \u2014 "),dP=a("a"),Sco=o("HubertModel"),Rco=o(" (Hubert model)"),Bco=l(),Pp=a("li"),Jre=a("strong"),Pco=o("ibert"),$co=o(" \u2014 "),cP=a("a"),Ico=o("IBertModel"),qco=o(" (I-BERT model)"),Nco=l(),$p=a("li"),Yre=a("strong"),jco=o("imagegpt"),Dco=o(" \u2014 "),fP=a("a"),Gco=o("ImageGPTModel"),Oco=o(" (ImageGPT model)"),Vco=l(),Ip=a("li"),Kre=a("strong"),Xco=o("layoutlm"),zco=o(" \u2014 "),mP=a("a"),Qco=o("LayoutLMModel"),Wco=o(" (LayoutLM model)"),Hco=l(),qp=a("li"),Zre=a("strong"),Uco=o("layoutlmv2"),Jco=o(" \u2014 "),gP=a("a"),Yco=o("LayoutLMv2Model"),Kco=o(" (LayoutLMv2 model)"),Zco=l(),Np=a("li"),ete=a("strong"),efo=o("led"),ofo=o(" \u2014 "),hP=a("a"),rfo=o("LEDModel"),tfo=o(" (LED model)"),afo=l(),jp=a("li"),ote=a("strong"),nfo=o("longformer"),sfo=o(" \u2014 "),pP=a("a"),lfo=o("LongformerModel"),ifo=o(" (Longformer model)"),dfo=l(),Dp=a("li"),rte=a("strong"),cfo=o("longt5"),ffo=o(" \u2014 "),_P=a("a"),mfo=o("LongT5Model"),gfo=o(" (LongT5 model)"),hfo=l(),Gp=a("li"),tte=a("strong"),pfo=o("luke"),_fo=o(" \u2014 "),uP=a("a"),ufo=o("LukeModel"),bfo=o(" (LUKE model)"),Ffo=l(),Op=a("li"),ate=a("strong"),vfo=o("lxmert"),Tfo=o(" \u2014 "),bP=a("a"),Mfo=o("LxmertModel"),Efo=o(" (LXMERT model)"),Cfo=l(),Vp=a("li"),nte=a("strong"),wfo=o("m2m_100"),Afo=o(" \u2014 "),FP=a("a"),yfo=o("M2M100Model"),Lfo=o(" (M2M100 model)"),xfo=l(),Xp=a("li"),ste=a("strong"),kfo=o("marian"),Sfo=o(" \u2014 "),vP=a("a"),Rfo=o("MarianModel"),Bfo=o(" (Marian model)"),Pfo=l(),zp=a("li"),lte=a("strong"),$fo=o("maskformer"),Ifo=o(" \u2014 "),TP=a("a"),qfo=o("MaskFormerModel"),Nfo=o(" (MaskFormer model)"),jfo=l(),Qp=a("li"),ite=a("strong"),Dfo=o("mbart"),Gfo=o(" \u2014 "),MP=a("a"),Ofo=o("MBartModel"),Vfo=o(" (mBART model)"),Xfo=l(),Wp=a("li"),dte=a("strong"),zfo=o("megatron-bert"),Qfo=o(" \u2014 "),EP=a("a"),Wfo=o("MegatronBertModel"),Hfo=o(" (MegatronBert model)"),Ufo=l(),Hp=a("li"),cte=a("strong"),Jfo=o("mobilebert"),Yfo=o(" \u2014 "),CP=a("a"),Kfo=o("MobileBertModel"),Zfo=o(" (MobileBERT model)"),emo=l(),Up=a("li"),fte=a("strong"),omo=o("mpnet"),rmo=o(" \u2014 "),wP=a("a"),tmo=o("MPNetModel"),amo=o(" (MPNet model)"),nmo=l(),Jp=a("li"),mte=a("strong"),smo=o("mt5"),lmo=o(" \u2014 "),AP=a("a"),imo=o("MT5Model"),dmo=o(" (mT5 model)"),cmo=l(),Yp=a("li"),gte=a("strong"),fmo=o("nystromformer"),mmo=o(" \u2014 "),yP=a("a"),gmo=o("NystromformerModel"),hmo=o(" (Nystromformer model)"),pmo=l(),Kp=a("li"),hte=a("strong"),_mo=o("openai-gpt"),umo=o(" \u2014 "),LP=a("a"),bmo=o("OpenAIGPTModel"),Fmo=o(" (OpenAI GPT model)"),vmo=l(),Zp=a("li"),pte=a("strong"),Tmo=o("pegasus"),Mmo=o(" \u2014 "),xP=a("a"),Emo=o("PegasusModel"),Cmo=o(" (Pegasus model)"),wmo=l(),e_=a("li"),_te=a("strong"),Amo=o("perceiver"),ymo=o(" \u2014 "),kP=a("a"),Lmo=o("PerceiverModel"),xmo=o(" (Perceiver model)"),kmo=l(),o_=a("li"),ute=a("strong"),Smo=o("plbart"),Rmo=o(" \u2014 "),SP=a("a"),Bmo=o("PLBartModel"),Pmo=o(" (PLBart model)"),$mo=l(),r_=a("li"),bte=a("strong"),Imo=o("poolformer"),qmo=o(" \u2014 "),RP=a("a"),Nmo=o("PoolFormerModel"),jmo=o(" (PoolFormer model)"),Dmo=l(),t_=a("li"),Fte=a("strong"),Gmo=o("prophetnet"),Omo=o(" \u2014 "),BP=a("a"),Vmo=o("ProphetNetModel"),Xmo=o(" (ProphetNet model)"),zmo=l(),a_=a("li"),vte=a("strong"),Qmo=o("qdqbert"),Wmo=o(" \u2014 "),PP=a("a"),Hmo=o("QDQBertModel"),Umo=o(" (QDQBert model)"),Jmo=l(),n_=a("li"),Tte=a("strong"),Ymo=o("reformer"),Kmo=o(" \u2014 "),$P=a("a"),Zmo=o("ReformerModel"),ego=o(" (Reformer model)"),ogo=l(),s_=a("li"),Mte=a("strong"),rgo=o("regnet"),tgo=o(" \u2014 "),IP=a("a"),ago=o("RegNetModel"),ngo=o(" (RegNet model)"),sgo=l(),l_=a("li"),Ete=a("strong"),lgo=o("rembert"),igo=o(" \u2014 "),qP=a("a"),dgo=o("RemBertModel"),cgo=o(" (RemBERT model)"),fgo=l(),i_=a("li"),Cte=a("strong"),mgo=o("resnet"),ggo=o(" \u2014 "),NP=a("a"),hgo=o("ResNetModel"),pgo=o(" (ResNet model)"),_go=l(),d_=a("li"),wte=a("strong"),ugo=o("retribert"),bgo=o(" \u2014 "),jP=a("a"),Fgo=o("RetriBertModel"),vgo=o(" (RetriBERT model)"),Tgo=l(),c_=a("li"),Ate=a("strong"),Mgo=o("roberta"),Ego=o(" \u2014 "),DP=a("a"),Cgo=o("RobertaModel"),wgo=o(" (RoBERTa model)"),Ago=l(),f_=a("li"),yte=a("strong"),ygo=o("roformer"),Lgo=o(" \u2014 "),GP=a("a"),xgo=o("RoFormerModel"),kgo=o(" (RoFormer model)"),Sgo=l(),m_=a("li"),Lte=a("strong"),Rgo=o("segformer"),Bgo=o(" \u2014 "),OP=a("a"),Pgo=o("SegformerModel"),$go=o(" (SegFormer model)"),Igo=l(),g_=a("li"),xte=a("strong"),qgo=o("sew"),Ngo=o(" \u2014 "),VP=a("a"),jgo=o("SEWModel"),Dgo=o(" (SEW model)"),Ggo=l(),h_=a("li"),kte=a("strong"),Ogo=o("sew-d"),Vgo=o(" \u2014 "),XP=a("a"),Xgo=o("SEWDModel"),zgo=o(" (SEW-D model)"),Qgo=l(),p_=a("li"),Ste=a("strong"),Wgo=o("speech_to_text"),Hgo=o(" \u2014 "),zP=a("a"),Ugo=o("Speech2TextModel"),Jgo=o(" (Speech2Text model)"),Ygo=l(),__=a("li"),Rte=a("strong"),Kgo=o("splinter"),Zgo=o(" \u2014 "),QP=a("a"),eho=o("SplinterModel"),oho=o(" (Splinter model)"),rho=l(),u_=a("li"),Bte=a("strong"),tho=o("squeezebert"),aho=o(" \u2014 "),WP=a("a"),nho=o("SqueezeBertModel"),sho=o(" (SqueezeBERT model)"),lho=l(),b_=a("li"),Pte=a("strong"),iho=o("swin"),dho=o(" \u2014 "),HP=a("a"),cho=o("SwinModel"),fho=o(" (Swin model)"),mho=l(),F_=a("li"),$te=a("strong"),gho=o("t5"),hho=o(" \u2014 "),UP=a("a"),pho=o("T5Model"),_ho=o(" (T5 model)"),uho=l(),v_=a("li"),Ite=a("strong"),bho=o("tapas"),Fho=o(" \u2014 "),JP=a("a"),vho=o("TapasModel"),Tho=o(" (TAPAS model)"),Mho=l(),T_=a("li"),qte=a("strong"),Eho=o("transfo-xl"),Cho=o(" \u2014 "),YP=a("a"),who=o("TransfoXLModel"),Aho=o(" (Transformer-XL model)"),yho=l(),M_=a("li"),Nte=a("strong"),Lho=o("unispeech"),xho=o(" \u2014 "),KP=a("a"),kho=o("UniSpeechModel"),Sho=o(" (UniSpeech model)"),Rho=l(),E_=a("li"),jte=a("strong"),Bho=o("unispeech-sat"),Pho=o(" \u2014 "),ZP=a("a"),$ho=o("UniSpeechSatModel"),Iho=o(" (UniSpeechSat model)"),qho=l(),C_=a("li"),Dte=a("strong"),Nho=o("van"),jho=o(" \u2014 "),e$=a("a"),Dho=o("VanModel"),Gho=o(" (VAN model)"),Oho=l(),w_=a("li"),Gte=a("strong"),Vho=o("vilt"),Xho=o(" \u2014 "),o$=a("a"),zho=o("ViltModel"),Qho=o(" (ViLT model)"),Who=l(),A_=a("li"),Ote=a("strong"),Hho=o("vision-text-dual-encoder"),Uho=o(" \u2014 "),r$=a("a"),Jho=o("VisionTextDualEncoderModel"),Yho=o(" (VisionTextDualEncoder model)"),Kho=l(),y_=a("li"),Vte=a("strong"),Zho=o("visual_bert"),epo=o(" \u2014 "),t$=a("a"),opo=o("VisualBertModel"),rpo=o(" (VisualBert model)"),tpo=l(),L_=a("li"),Xte=a("strong"),apo=o("vit"),npo=o(" \u2014 "),a$=a("a"),spo=o("ViTModel"),lpo=o(" (ViT model)"),ipo=l(),x_=a("li"),zte=a("strong"),dpo=o("vit_mae"),cpo=o(" \u2014 "),n$=a("a"),fpo=o("ViTMAEModel"),mpo=o(" (ViTMAE model)"),gpo=l(),k_=a("li"),Qte=a("strong"),hpo=o("wav2vec2"),ppo=o(" \u2014 "),s$=a("a"),_po=o("Wav2Vec2Model"),upo=o(" (Wav2Vec2 model)"),bpo=l(),S_=a("li"),Wte=a("strong"),Fpo=o("wavlm"),vpo=o(" \u2014 "),l$=a("a"),Tpo=o("WavLMModel"),Mpo=o(" (WavLM model)"),Epo=l(),R_=a("li"),Hte=a("strong"),Cpo=o("xglm"),wpo=o(" \u2014 "),i$=a("a"),Apo=o("XGLMModel"),ypo=o(" (XGLM model)"),Lpo=l(),B_=a("li"),Ute=a("strong"),xpo=o("xlm"),kpo=o(" \u2014 "),d$=a("a"),Spo=o("XLMModel"),Rpo=o(" (XLM model)"),Bpo=l(),P_=a("li"),Jte=a("strong"),Ppo=o("xlm-prophetnet"),$po=o(" \u2014 "),c$=a("a"),Ipo=o("XLMProphetNetModel"),qpo=o(" (XLMProphetNet model)"),Npo=l(),$_=a("li"),Yte=a("strong"),jpo=o("xlm-roberta"),Dpo=o(" \u2014 "),f$=a("a"),Gpo=o("XLMRobertaModel"),Opo=o(" (XLM-RoBERTa model)"),Vpo=l(),I_=a("li"),Kte=a("strong"),Xpo=o("xlm-roberta-xl"),zpo=o(" \u2014 "),m$=a("a"),Qpo=o("XLMRobertaXLModel"),Wpo=o(" (XLM-RoBERTa-XL model)"),Hpo=l(),q_=a("li"),Zte=a("strong"),Upo=o("xlnet"),Jpo=o(" \u2014 "),g$=a("a"),Ypo=o("XLNetModel"),Kpo=o(" (XLNet model)"),Zpo=l(),N_=a("li"),eae=a("strong"),e_o=o("yoso"),o_o=o(" \u2014 "),h$=a("a"),r_o=o("YosoModel"),t_o=o(" (YOSO model)"),a_o=l(),j_=a("p"),n_o=o("The model is set in evaluation mode by default using "),oae=a("code"),s_o=o("model.eval()"),l_o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rae=a("code"),i_o=o("model.train()"),d_o=l(),tae=a("p"),c_o=o("Examples:"),f_o=l(),f(M3.$$.fragment),wBe=l(),od=a("h2"),D_=a("a"),aae=a("span"),f(E3.$$.fragment),m_o=l(),nae=a("span"),g_o=o("AutoModelForPreTraining"),ABe=l(),Yo=a("div"),f(C3.$$.fragment),h_o=l(),rd=a("p"),p_o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),p$=a("a"),__o=o("from_pretrained()"),u_o=o(" class method or the "),_$=a("a"),b_o=o("from_config()"),F_o=o(` class
method.`),v_o=l(),w3=a("p"),T_o=o("This class cannot be instantiated directly using "),sae=a("code"),M_o=o("__init__()"),E_o=o(" (throws an error)."),C_o=l(),zr=a("div"),f(A3.$$.fragment),w_o=l(),lae=a("p"),A_o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),y_o=l(),td=a("p"),L_o=o(`Note:
Loading a model from its configuration file does `),iae=a("strong"),x_o=o("not"),k_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u$=a("a"),S_o=o("from_pretrained()"),R_o=o(" to load the model weights."),B_o=l(),dae=a("p"),P_o=o("Examples:"),$_o=l(),f(y3.$$.fragment),I_o=l(),je=a("div"),f(L3.$$.fragment),q_o=l(),cae=a("p"),N_o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),j_o=l(),za=a("p"),D_o=o("The model class to instantiate is selected based on the "),fae=a("code"),G_o=o("model_type"),O_o=o(` property of the config object (either
passed as an argument or loaded from `),mae=a("code"),V_o=o("pretrained_model_name_or_path"),X_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gae=a("code"),z_o=o("pretrained_model_name_or_path"),Q_o=o(":"),W_o=l(),S=a("ul"),G_=a("li"),hae=a("strong"),H_o=o("albert"),U_o=o(" \u2014 "),b$=a("a"),J_o=o("AlbertForPreTraining"),Y_o=o(" (ALBERT model)"),K_o=l(),O_=a("li"),pae=a("strong"),Z_o=o("bart"),euo=o(" \u2014 "),F$=a("a"),ouo=o("BartForConditionalGeneration"),ruo=o(" (BART model)"),tuo=l(),V_=a("li"),_ae=a("strong"),auo=o("bert"),nuo=o(" \u2014 "),v$=a("a"),suo=o("BertForPreTraining"),luo=o(" (BERT model)"),iuo=l(),X_=a("li"),uae=a("strong"),duo=o("big_bird"),cuo=o(" \u2014 "),T$=a("a"),fuo=o("BigBirdForPreTraining"),muo=o(" (BigBird model)"),guo=l(),z_=a("li"),bae=a("strong"),huo=o("camembert"),puo=o(" \u2014 "),M$=a("a"),_uo=o("CamembertForMaskedLM"),uuo=o(" (CamemBERT model)"),buo=l(),Q_=a("li"),Fae=a("strong"),Fuo=o("ctrl"),vuo=o(" \u2014 "),E$=a("a"),Tuo=o("CTRLLMHeadModel"),Muo=o(" (CTRL model)"),Euo=l(),W_=a("li"),vae=a("strong"),Cuo=o("data2vec-text"),wuo=o(" \u2014 "),C$=a("a"),Auo=o("Data2VecTextForMaskedLM"),yuo=o(" (Data2VecText model)"),Luo=l(),H_=a("li"),Tae=a("strong"),xuo=o("deberta"),kuo=o(" \u2014 "),w$=a("a"),Suo=o("DebertaForMaskedLM"),Ruo=o(" (DeBERTa model)"),Buo=l(),U_=a("li"),Mae=a("strong"),Puo=o("deberta-v2"),$uo=o(" \u2014 "),A$=a("a"),Iuo=o("DebertaV2ForMaskedLM"),quo=o(" (DeBERTa-v2 model)"),Nuo=l(),J_=a("li"),Eae=a("strong"),juo=o("distilbert"),Duo=o(" \u2014 "),y$=a("a"),Guo=o("DistilBertForMaskedLM"),Ouo=o(" (DistilBERT model)"),Vuo=l(),Y_=a("li"),Cae=a("strong"),Xuo=o("electra"),zuo=o(" \u2014 "),L$=a("a"),Quo=o("ElectraForPreTraining"),Wuo=o(" (ELECTRA model)"),Huo=l(),K_=a("li"),wae=a("strong"),Uuo=o("flaubert"),Juo=o(" \u2014 "),x$=a("a"),Yuo=o("FlaubertWithLMHeadModel"),Kuo=o(" (FlauBERT model)"),Zuo=l(),Z_=a("li"),Aae=a("strong"),e2o=o("fnet"),o2o=o(" \u2014 "),k$=a("a"),r2o=o("FNetForPreTraining"),t2o=o(" (FNet model)"),a2o=l(),eu=a("li"),yae=a("strong"),n2o=o("fsmt"),s2o=o(" \u2014 "),S$=a("a"),l2o=o("FSMTForConditionalGeneration"),i2o=o(" (FairSeq Machine-Translation model)"),d2o=l(),ou=a("li"),Lae=a("strong"),c2o=o("funnel"),f2o=o(" \u2014 "),R$=a("a"),m2o=o("FunnelForPreTraining"),g2o=o(" (Funnel Transformer model)"),h2o=l(),ru=a("li"),xae=a("strong"),p2o=o("gpt2"),_2o=o(" \u2014 "),B$=a("a"),u2o=o("GPT2LMHeadModel"),b2o=o(" (OpenAI GPT-2 model)"),F2o=l(),tu=a("li"),kae=a("strong"),v2o=o("ibert"),T2o=o(" \u2014 "),P$=a("a"),M2o=o("IBertForMaskedLM"),E2o=o(" (I-BERT model)"),C2o=l(),au=a("li"),Sae=a("strong"),w2o=o("layoutlm"),A2o=o(" \u2014 "),$$=a("a"),y2o=o("LayoutLMForMaskedLM"),L2o=o(" (LayoutLM model)"),x2o=l(),nu=a("li"),Rae=a("strong"),k2o=o("longformer"),S2o=o(" \u2014 "),I$=a("a"),R2o=o("LongformerForMaskedLM"),B2o=o(" (Longformer model)"),P2o=l(),su=a("li"),Bae=a("strong"),$2o=o("longt5"),I2o=o(" \u2014 "),q$=a("a"),q2o=o("LongT5ForConditionalGeneration"),N2o=o(" (LongT5 model)"),j2o=l(),lu=a("li"),Pae=a("strong"),D2o=o("lxmert"),G2o=o(" \u2014 "),N$=a("a"),O2o=o("LxmertForPreTraining"),V2o=o(" (LXMERT model)"),X2o=l(),iu=a("li"),$ae=a("strong"),z2o=o("megatron-bert"),Q2o=o(" \u2014 "),j$=a("a"),W2o=o("MegatronBertForPreTraining"),H2o=o(" (MegatronBert model)"),U2o=l(),du=a("li"),Iae=a("strong"),J2o=o("mobilebert"),Y2o=o(" \u2014 "),D$=a("a"),K2o=o("MobileBertForPreTraining"),Z2o=o(" (MobileBERT model)"),e1o=l(),cu=a("li"),qae=a("strong"),o1o=o("mpnet"),r1o=o(" \u2014 "),G$=a("a"),t1o=o("MPNetForMaskedLM"),a1o=o(" (MPNet model)"),n1o=l(),fu=a("li"),Nae=a("strong"),s1o=o("openai-gpt"),l1o=o(" \u2014 "),O$=a("a"),i1o=o("OpenAIGPTLMHeadModel"),d1o=o(" (OpenAI GPT model)"),c1o=l(),mu=a("li"),jae=a("strong"),f1o=o("retribert"),m1o=o(" \u2014 "),V$=a("a"),g1o=o("RetriBertModel"),h1o=o(" (RetriBERT model)"),p1o=l(),gu=a("li"),Dae=a("strong"),_1o=o("roberta"),u1o=o(" \u2014 "),X$=a("a"),b1o=o("RobertaForMaskedLM"),F1o=o(" (RoBERTa model)"),v1o=l(),hu=a("li"),Gae=a("strong"),T1o=o("squeezebert"),M1o=o(" \u2014 "),z$=a("a"),E1o=o("SqueezeBertForMaskedLM"),C1o=o(" (SqueezeBERT model)"),w1o=l(),pu=a("li"),Oae=a("strong"),A1o=o("t5"),y1o=o(" \u2014 "),Q$=a("a"),L1o=o("T5ForConditionalGeneration"),x1o=o(" (T5 model)"),k1o=l(),_u=a("li"),Vae=a("strong"),S1o=o("tapas"),R1o=o(" \u2014 "),W$=a("a"),B1o=o("TapasForMaskedLM"),P1o=o(" (TAPAS model)"),$1o=l(),uu=a("li"),Xae=a("strong"),I1o=o("transfo-xl"),q1o=o(" \u2014 "),H$=a("a"),N1o=o("TransfoXLLMHeadModel"),j1o=o(" (Transformer-XL model)"),D1o=l(),bu=a("li"),zae=a("strong"),G1o=o("unispeech"),O1o=o(" \u2014 "),U$=a("a"),V1o=o("UniSpeechForPreTraining"),X1o=o(" (UniSpeech model)"),z1o=l(),Fu=a("li"),Qae=a("strong"),Q1o=o("unispeech-sat"),W1o=o(" \u2014 "),J$=a("a"),H1o=o("UniSpeechSatForPreTraining"),U1o=o(" (UniSpeechSat model)"),J1o=l(),vu=a("li"),Wae=a("strong"),Y1o=o("visual_bert"),K1o=o(" \u2014 "),Y$=a("a"),Z1o=o("VisualBertForPreTraining"),ebo=o(" (VisualBert model)"),obo=l(),Tu=a("li"),Hae=a("strong"),rbo=o("vit_mae"),tbo=o(" \u2014 "),K$=a("a"),abo=o("ViTMAEForPreTraining"),nbo=o(" (ViTMAE model)"),sbo=l(),Mu=a("li"),Uae=a("strong"),lbo=o("wav2vec2"),ibo=o(" \u2014 "),Z$=a("a"),dbo=o("Wav2Vec2ForPreTraining"),cbo=o(" (Wav2Vec2 model)"),fbo=l(),Eu=a("li"),Jae=a("strong"),mbo=o("xlm"),gbo=o(" \u2014 "),eI=a("a"),hbo=o("XLMWithLMHeadModel"),pbo=o(" (XLM model)"),_bo=l(),Cu=a("li"),Yae=a("strong"),ubo=o("xlm-roberta"),bbo=o(" \u2014 "),oI=a("a"),Fbo=o("XLMRobertaForMaskedLM"),vbo=o(" (XLM-RoBERTa model)"),Tbo=l(),wu=a("li"),Kae=a("strong"),Mbo=o("xlm-roberta-xl"),Ebo=o(" \u2014 "),rI=a("a"),Cbo=o("XLMRobertaXLForMaskedLM"),wbo=o(" (XLM-RoBERTa-XL model)"),Abo=l(),Au=a("li"),Zae=a("strong"),ybo=o("xlnet"),Lbo=o(" \u2014 "),tI=a("a"),xbo=o("XLNetLMHeadModel"),kbo=o(" (XLNet model)"),Sbo=l(),yu=a("p"),Rbo=o("The model is set in evaluation mode by default using "),ene=a("code"),Bbo=o("model.eval()"),Pbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),one=a("code"),$bo=o("model.train()"),Ibo=l(),rne=a("p"),qbo=o("Examples:"),Nbo=l(),f(x3.$$.fragment),yBe=l(),ad=a("h2"),Lu=a("a"),tne=a("span"),f(k3.$$.fragment),jbo=l(),ane=a("span"),Dbo=o("AutoModelForCausalLM"),LBe=l(),Ko=a("div"),f(S3.$$.fragment),Gbo=l(),nd=a("p"),Obo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aI=a("a"),Vbo=o("from_pretrained()"),Xbo=o(" class method or the "),nI=a("a"),zbo=o("from_config()"),Qbo=o(` class
method.`),Wbo=l(),R3=a("p"),Hbo=o("This class cannot be instantiated directly using "),nne=a("code"),Ubo=o("__init__()"),Jbo=o(" (throws an error)."),Ybo=l(),Qr=a("div"),f(B3.$$.fragment),Kbo=l(),sne=a("p"),Zbo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),e6o=l(),sd=a("p"),o6o=o(`Note:
Loading a model from its configuration file does `),lne=a("strong"),r6o=o("not"),t6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sI=a("a"),a6o=o("from_pretrained()"),n6o=o(" to load the model weights."),s6o=l(),ine=a("p"),l6o=o("Examples:"),i6o=l(),f(P3.$$.fragment),d6o=l(),De=a("div"),f($3.$$.fragment),c6o=l(),dne=a("p"),f6o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),m6o=l(),Qa=a("p"),g6o=o("The model class to instantiate is selected based on the "),cne=a("code"),h6o=o("model_type"),p6o=o(` property of the config object (either
passed as an argument or loaded from `),fne=a("code"),_6o=o("pretrained_model_name_or_path"),u6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mne=a("code"),b6o=o("pretrained_model_name_or_path"),F6o=o(":"),v6o=l(),$=a("ul"),xu=a("li"),gne=a("strong"),T6o=o("bart"),M6o=o(" \u2014 "),lI=a("a"),E6o=o("BartForCausalLM"),C6o=o(" (BART model)"),w6o=l(),ku=a("li"),hne=a("strong"),A6o=o("bert"),y6o=o(" \u2014 "),iI=a("a"),L6o=o("BertLMHeadModel"),x6o=o(" (BERT model)"),k6o=l(),Su=a("li"),pne=a("strong"),S6o=o("bert-generation"),R6o=o(" \u2014 "),dI=a("a"),B6o=o("BertGenerationDecoder"),P6o=o(" (Bert Generation model)"),$6o=l(),Ru=a("li"),_ne=a("strong"),I6o=o("big_bird"),q6o=o(" \u2014 "),cI=a("a"),N6o=o("BigBirdForCausalLM"),j6o=o(" (BigBird model)"),D6o=l(),Bu=a("li"),une=a("strong"),G6o=o("bigbird_pegasus"),O6o=o(" \u2014 "),fI=a("a"),V6o=o("BigBirdPegasusForCausalLM"),X6o=o(" (BigBirdPegasus model)"),z6o=l(),Pu=a("li"),bne=a("strong"),Q6o=o("blenderbot"),W6o=o(" \u2014 "),mI=a("a"),H6o=o("BlenderbotForCausalLM"),U6o=o(" (Blenderbot model)"),J6o=l(),$u=a("li"),Fne=a("strong"),Y6o=o("blenderbot-small"),K6o=o(" \u2014 "),gI=a("a"),Z6o=o("BlenderbotSmallForCausalLM"),eFo=o(" (BlenderbotSmall model)"),oFo=l(),Iu=a("li"),vne=a("strong"),rFo=o("camembert"),tFo=o(" \u2014 "),hI=a("a"),aFo=o("CamembertForCausalLM"),nFo=o(" (CamemBERT model)"),sFo=l(),qu=a("li"),Tne=a("strong"),lFo=o("ctrl"),iFo=o(" \u2014 "),pI=a("a"),dFo=o("CTRLLMHeadModel"),cFo=o(" (CTRL model)"),fFo=l(),Nu=a("li"),Mne=a("strong"),mFo=o("data2vec-text"),gFo=o(" \u2014 "),_I=a("a"),hFo=o("Data2VecTextForCausalLM"),pFo=o(" (Data2VecText model)"),_Fo=l(),ju=a("li"),Ene=a("strong"),uFo=o("electra"),bFo=o(" \u2014 "),uI=a("a"),FFo=o("ElectraForCausalLM"),vFo=o(" (ELECTRA model)"),TFo=l(),Du=a("li"),Cne=a("strong"),MFo=o("gpt2"),EFo=o(" \u2014 "),bI=a("a"),CFo=o("GPT2LMHeadModel"),wFo=o(" (OpenAI GPT-2 model)"),AFo=l(),Gu=a("li"),wne=a("strong"),yFo=o("gpt_neo"),LFo=o(" \u2014 "),FI=a("a"),xFo=o("GPTNeoForCausalLM"),kFo=o(" (GPT Neo model)"),SFo=l(),Ou=a("li"),Ane=a("strong"),RFo=o("gptj"),BFo=o(" \u2014 "),vI=a("a"),PFo=o("GPTJForCausalLM"),$Fo=o(" (GPT-J model)"),IFo=l(),Vu=a("li"),yne=a("strong"),qFo=o("marian"),NFo=o(" \u2014 "),TI=a("a"),jFo=o("MarianForCausalLM"),DFo=o(" (Marian model)"),GFo=l(),Xu=a("li"),Lne=a("strong"),OFo=o("mbart"),VFo=o(" \u2014 "),MI=a("a"),XFo=o("MBartForCausalLM"),zFo=o(" (mBART model)"),QFo=l(),zu=a("li"),xne=a("strong"),WFo=o("megatron-bert"),HFo=o(" \u2014 "),EI=a("a"),UFo=o("MegatronBertForCausalLM"),JFo=o(" (MegatronBert model)"),YFo=l(),Qu=a("li"),kne=a("strong"),KFo=o("openai-gpt"),ZFo=o(" \u2014 "),CI=a("a"),evo=o("OpenAIGPTLMHeadModel"),ovo=o(" (OpenAI GPT model)"),rvo=l(),Wu=a("li"),Sne=a("strong"),tvo=o("pegasus"),avo=o(" \u2014 "),wI=a("a"),nvo=o("PegasusForCausalLM"),svo=o(" (Pegasus model)"),lvo=l(),Hu=a("li"),Rne=a("strong"),ivo=o("plbart"),dvo=o(" \u2014 "),AI=a("a"),cvo=o("PLBartForCausalLM"),fvo=o(" (PLBart model)"),mvo=l(),Uu=a("li"),Bne=a("strong"),gvo=o("prophetnet"),hvo=o(" \u2014 "),yI=a("a"),pvo=o("ProphetNetForCausalLM"),_vo=o(" (ProphetNet model)"),uvo=l(),Ju=a("li"),Pne=a("strong"),bvo=o("qdqbert"),Fvo=o(" \u2014 "),LI=a("a"),vvo=o("QDQBertLMHeadModel"),Tvo=o(" (QDQBert model)"),Mvo=l(),Yu=a("li"),$ne=a("strong"),Evo=o("reformer"),Cvo=o(" \u2014 "),xI=a("a"),wvo=o("ReformerModelWithLMHead"),Avo=o(" (Reformer model)"),yvo=l(),Ku=a("li"),Ine=a("strong"),Lvo=o("rembert"),xvo=o(" \u2014 "),kI=a("a"),kvo=o("RemBertForCausalLM"),Svo=o(" (RemBERT model)"),Rvo=l(),Zu=a("li"),qne=a("strong"),Bvo=o("roberta"),Pvo=o(" \u2014 "),SI=a("a"),$vo=o("RobertaForCausalLM"),Ivo=o(" (RoBERTa model)"),qvo=l(),e2=a("li"),Nne=a("strong"),Nvo=o("roformer"),jvo=o(" \u2014 "),RI=a("a"),Dvo=o("RoFormerForCausalLM"),Gvo=o(" (RoFormer model)"),Ovo=l(),o2=a("li"),jne=a("strong"),Vvo=o("speech_to_text_2"),Xvo=o(" \u2014 "),BI=a("a"),zvo=o("Speech2Text2ForCausalLM"),Qvo=o(" (Speech2Text2 model)"),Wvo=l(),r2=a("li"),Dne=a("strong"),Hvo=o("transfo-xl"),Uvo=o(" \u2014 "),PI=a("a"),Jvo=o("TransfoXLLMHeadModel"),Yvo=o(" (Transformer-XL model)"),Kvo=l(),t2=a("li"),Gne=a("strong"),Zvo=o("trocr"),eTo=o(" \u2014 "),$I=a("a"),oTo=o("TrOCRForCausalLM"),rTo=o(" (TrOCR model)"),tTo=l(),a2=a("li"),One=a("strong"),aTo=o("xglm"),nTo=o(" \u2014 "),II=a("a"),sTo=o("XGLMForCausalLM"),lTo=o(" (XGLM model)"),iTo=l(),n2=a("li"),Vne=a("strong"),dTo=o("xlm"),cTo=o(" \u2014 "),qI=a("a"),fTo=o("XLMWithLMHeadModel"),mTo=o(" (XLM model)"),gTo=l(),s2=a("li"),Xne=a("strong"),hTo=o("xlm-prophetnet"),pTo=o(" \u2014 "),NI=a("a"),_To=o("XLMProphetNetForCausalLM"),uTo=o(" (XLMProphetNet model)"),bTo=l(),l2=a("li"),zne=a("strong"),FTo=o("xlm-roberta"),vTo=o(" \u2014 "),jI=a("a"),TTo=o("XLMRobertaForCausalLM"),MTo=o(" (XLM-RoBERTa model)"),ETo=l(),i2=a("li"),Qne=a("strong"),CTo=o("xlm-roberta-xl"),wTo=o(" \u2014 "),DI=a("a"),ATo=o("XLMRobertaXLForCausalLM"),yTo=o(" (XLM-RoBERTa-XL model)"),LTo=l(),d2=a("li"),Wne=a("strong"),xTo=o("xlnet"),kTo=o(" \u2014 "),GI=a("a"),STo=o("XLNetLMHeadModel"),RTo=o(" (XLNet model)"),BTo=l(),c2=a("p"),PTo=o("The model is set in evaluation mode by default using "),Hne=a("code"),$To=o("model.eval()"),ITo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Une=a("code"),qTo=o("model.train()"),NTo=l(),Jne=a("p"),jTo=o("Examples:"),DTo=l(),f(I3.$$.fragment),xBe=l(),ld=a("h2"),f2=a("a"),Yne=a("span"),f(q3.$$.fragment),GTo=l(),Kne=a("span"),OTo=o("AutoModelForMaskedLM"),kBe=l(),Zo=a("div"),f(N3.$$.fragment),VTo=l(),id=a("p"),XTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OI=a("a"),zTo=o("from_pretrained()"),QTo=o(" class method or the "),VI=a("a"),WTo=o("from_config()"),HTo=o(` class
method.`),UTo=l(),j3=a("p"),JTo=o("This class cannot be instantiated directly using "),Zne=a("code"),YTo=o("__init__()"),KTo=o(" (throws an error)."),ZTo=l(),Wr=a("div"),f(D3.$$.fragment),e7o=l(),ese=a("p"),o7o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),r7o=l(),dd=a("p"),t7o=o(`Note:
Loading a model from its configuration file does `),ose=a("strong"),a7o=o("not"),n7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XI=a("a"),s7o=o("from_pretrained()"),l7o=o(" to load the model weights."),i7o=l(),rse=a("p"),d7o=o("Examples:"),c7o=l(),f(G3.$$.fragment),f7o=l(),Ge=a("div"),f(O3.$$.fragment),m7o=l(),tse=a("p"),g7o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),h7o=l(),Wa=a("p"),p7o=o("The model class to instantiate is selected based on the "),ase=a("code"),_7o=o("model_type"),u7o=o(` property of the config object (either
passed as an argument or loaded from `),nse=a("code"),b7o=o("pretrained_model_name_or_path"),F7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sse=a("code"),v7o=o("pretrained_model_name_or_path"),T7o=o(":"),M7o=l(),I=a("ul"),m2=a("li"),lse=a("strong"),E7o=o("albert"),C7o=o(" \u2014 "),zI=a("a"),w7o=o("AlbertForMaskedLM"),A7o=o(" (ALBERT model)"),y7o=l(),g2=a("li"),ise=a("strong"),L7o=o("bart"),x7o=o(" \u2014 "),QI=a("a"),k7o=o("BartForConditionalGeneration"),S7o=o(" (BART model)"),R7o=l(),h2=a("li"),dse=a("strong"),B7o=o("bert"),P7o=o(" \u2014 "),WI=a("a"),$7o=o("BertForMaskedLM"),I7o=o(" (BERT model)"),q7o=l(),p2=a("li"),cse=a("strong"),N7o=o("big_bird"),j7o=o(" \u2014 "),HI=a("a"),D7o=o("BigBirdForMaskedLM"),G7o=o(" (BigBird model)"),O7o=l(),_2=a("li"),fse=a("strong"),V7o=o("camembert"),X7o=o(" \u2014 "),UI=a("a"),z7o=o("CamembertForMaskedLM"),Q7o=o(" (CamemBERT model)"),W7o=l(),u2=a("li"),mse=a("strong"),H7o=o("convbert"),U7o=o(" \u2014 "),JI=a("a"),J7o=o("ConvBertForMaskedLM"),Y7o=o(" (ConvBERT model)"),K7o=l(),b2=a("li"),gse=a("strong"),Z7o=o("data2vec-text"),e9o=o(" \u2014 "),YI=a("a"),o9o=o("Data2VecTextForMaskedLM"),r9o=o(" (Data2VecText model)"),t9o=l(),F2=a("li"),hse=a("strong"),a9o=o("deberta"),n9o=o(" \u2014 "),KI=a("a"),s9o=o("DebertaForMaskedLM"),l9o=o(" (DeBERTa model)"),i9o=l(),v2=a("li"),pse=a("strong"),d9o=o("deberta-v2"),c9o=o(" \u2014 "),ZI=a("a"),f9o=o("DebertaV2ForMaskedLM"),m9o=o(" (DeBERTa-v2 model)"),g9o=l(),T2=a("li"),_se=a("strong"),h9o=o("distilbert"),p9o=o(" \u2014 "),eq=a("a"),_9o=o("DistilBertForMaskedLM"),u9o=o(" (DistilBERT model)"),b9o=l(),M2=a("li"),use=a("strong"),F9o=o("electra"),v9o=o(" \u2014 "),oq=a("a"),T9o=o("ElectraForMaskedLM"),M9o=o(" (ELECTRA model)"),E9o=l(),E2=a("li"),bse=a("strong"),C9o=o("flaubert"),w9o=o(" \u2014 "),rq=a("a"),A9o=o("FlaubertWithLMHeadModel"),y9o=o(" (FlauBERT model)"),L9o=l(),C2=a("li"),Fse=a("strong"),x9o=o("fnet"),k9o=o(" \u2014 "),tq=a("a"),S9o=o("FNetForMaskedLM"),R9o=o(" (FNet model)"),B9o=l(),w2=a("li"),vse=a("strong"),P9o=o("funnel"),$9o=o(" \u2014 "),aq=a("a"),I9o=o("FunnelForMaskedLM"),q9o=o(" (Funnel Transformer model)"),N9o=l(),A2=a("li"),Tse=a("strong"),j9o=o("ibert"),D9o=o(" \u2014 "),nq=a("a"),G9o=o("IBertForMaskedLM"),O9o=o(" (I-BERT model)"),V9o=l(),y2=a("li"),Mse=a("strong"),X9o=o("layoutlm"),z9o=o(" \u2014 "),sq=a("a"),Q9o=o("LayoutLMForMaskedLM"),W9o=o(" (LayoutLM model)"),H9o=l(),L2=a("li"),Ese=a("strong"),U9o=o("longformer"),J9o=o(" \u2014 "),lq=a("a"),Y9o=o("LongformerForMaskedLM"),K9o=o(" (Longformer model)"),Z9o=l(),x2=a("li"),Cse=a("strong"),eMo=o("mbart"),oMo=o(" \u2014 "),iq=a("a"),rMo=o("MBartForConditionalGeneration"),tMo=o(" (mBART model)"),aMo=l(),k2=a("li"),wse=a("strong"),nMo=o("megatron-bert"),sMo=o(" \u2014 "),dq=a("a"),lMo=o("MegatronBertForMaskedLM"),iMo=o(" (MegatronBert model)"),dMo=l(),S2=a("li"),Ase=a("strong"),cMo=o("mobilebert"),fMo=o(" \u2014 "),cq=a("a"),mMo=o("MobileBertForMaskedLM"),gMo=o(" (MobileBERT model)"),hMo=l(),R2=a("li"),yse=a("strong"),pMo=o("mpnet"),_Mo=o(" \u2014 "),fq=a("a"),uMo=o("MPNetForMaskedLM"),bMo=o(" (MPNet model)"),FMo=l(),B2=a("li"),Lse=a("strong"),vMo=o("nystromformer"),TMo=o(" \u2014 "),mq=a("a"),MMo=o("NystromformerForMaskedLM"),EMo=o(" (Nystromformer model)"),CMo=l(),P2=a("li"),xse=a("strong"),wMo=o("perceiver"),AMo=o(" \u2014 "),gq=a("a"),yMo=o("PerceiverForMaskedLM"),LMo=o(" (Perceiver model)"),xMo=l(),$2=a("li"),kse=a("strong"),kMo=o("qdqbert"),SMo=o(" \u2014 "),hq=a("a"),RMo=o("QDQBertForMaskedLM"),BMo=o(" (QDQBert model)"),PMo=l(),I2=a("li"),Sse=a("strong"),$Mo=o("reformer"),IMo=o(" \u2014 "),pq=a("a"),qMo=o("ReformerForMaskedLM"),NMo=o(" (Reformer model)"),jMo=l(),q2=a("li"),Rse=a("strong"),DMo=o("rembert"),GMo=o(" \u2014 "),_q=a("a"),OMo=o("RemBertForMaskedLM"),VMo=o(" (RemBERT model)"),XMo=l(),N2=a("li"),Bse=a("strong"),zMo=o("roberta"),QMo=o(" \u2014 "),uq=a("a"),WMo=o("RobertaForMaskedLM"),HMo=o(" (RoBERTa model)"),UMo=l(),j2=a("li"),Pse=a("strong"),JMo=o("roformer"),YMo=o(" \u2014 "),bq=a("a"),KMo=o("RoFormerForMaskedLM"),ZMo=o(" (RoFormer model)"),e4o=l(),D2=a("li"),$se=a("strong"),o4o=o("squeezebert"),r4o=o(" \u2014 "),Fq=a("a"),t4o=o("SqueezeBertForMaskedLM"),a4o=o(" (SqueezeBERT model)"),n4o=l(),G2=a("li"),Ise=a("strong"),s4o=o("tapas"),l4o=o(" \u2014 "),vq=a("a"),i4o=o("TapasForMaskedLM"),d4o=o(" (TAPAS model)"),c4o=l(),O2=a("li"),qse=a("strong"),f4o=o("wav2vec2"),m4o=o(" \u2014 "),Nse=a("code"),g4o=o("Wav2Vec2ForMaskedLM"),h4o=o(" (Wav2Vec2 model)"),p4o=l(),V2=a("li"),jse=a("strong"),_4o=o("xlm"),u4o=o(" \u2014 "),Tq=a("a"),b4o=o("XLMWithLMHeadModel"),F4o=o(" (XLM model)"),v4o=l(),X2=a("li"),Dse=a("strong"),T4o=o("xlm-roberta"),M4o=o(" \u2014 "),Mq=a("a"),E4o=o("XLMRobertaForMaskedLM"),C4o=o(" (XLM-RoBERTa model)"),w4o=l(),z2=a("li"),Gse=a("strong"),A4o=o("xlm-roberta-xl"),y4o=o(" \u2014 "),Eq=a("a"),L4o=o("XLMRobertaXLForMaskedLM"),x4o=o(" (XLM-RoBERTa-XL model)"),k4o=l(),Q2=a("li"),Ose=a("strong"),S4o=o("yoso"),R4o=o(" \u2014 "),Cq=a("a"),B4o=o("YosoForMaskedLM"),P4o=o(" (YOSO model)"),$4o=l(),W2=a("p"),I4o=o("The model is set in evaluation mode by default using "),Vse=a("code"),q4o=o("model.eval()"),N4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xse=a("code"),j4o=o("model.train()"),D4o=l(),zse=a("p"),G4o=o("Examples:"),O4o=l(),f(V3.$$.fragment),SBe=l(),cd=a("h2"),H2=a("a"),Qse=a("span"),f(X3.$$.fragment),V4o=l(),Wse=a("span"),X4o=o("AutoModelForSeq2SeqLM"),RBe=l(),er=a("div"),f(z3.$$.fragment),z4o=l(),fd=a("p"),Q4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wq=a("a"),W4o=o("from_pretrained()"),H4o=o(" class method or the "),Aq=a("a"),U4o=o("from_config()"),J4o=o(` class
method.`),Y4o=l(),Q3=a("p"),K4o=o("This class cannot be instantiated directly using "),Hse=a("code"),Z4o=o("__init__()"),eEo=o(" (throws an error)."),oEo=l(),Hr=a("div"),f(W3.$$.fragment),rEo=l(),Use=a("p"),tEo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aEo=l(),md=a("p"),nEo=o(`Note:
Loading a model from its configuration file does `),Jse=a("strong"),sEo=o("not"),lEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yq=a("a"),iEo=o("from_pretrained()"),dEo=o(" to load the model weights."),cEo=l(),Yse=a("p"),fEo=o("Examples:"),mEo=l(),f(H3.$$.fragment),gEo=l(),Oe=a("div"),f(U3.$$.fragment),hEo=l(),Kse=a("p"),pEo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_Eo=l(),Ha=a("p"),uEo=o("The model class to instantiate is selected based on the "),Zse=a("code"),bEo=o("model_type"),FEo=o(` property of the config object (either
passed as an argument or loaded from `),ele=a("code"),vEo=o("pretrained_model_name_or_path"),TEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ole=a("code"),MEo=o("pretrained_model_name_or_path"),EEo=o(":"),CEo=l(),ae=a("ul"),U2=a("li"),rle=a("strong"),wEo=o("bart"),AEo=o(" \u2014 "),Lq=a("a"),yEo=o("BartForConditionalGeneration"),LEo=o(" (BART model)"),xEo=l(),J2=a("li"),tle=a("strong"),kEo=o("bigbird_pegasus"),SEo=o(" \u2014 "),xq=a("a"),REo=o("BigBirdPegasusForConditionalGeneration"),BEo=o(" (BigBirdPegasus model)"),PEo=l(),Y2=a("li"),ale=a("strong"),$Eo=o("blenderbot"),IEo=o(" \u2014 "),kq=a("a"),qEo=o("BlenderbotForConditionalGeneration"),NEo=o(" (Blenderbot model)"),jEo=l(),K2=a("li"),nle=a("strong"),DEo=o("blenderbot-small"),GEo=o(" \u2014 "),Sq=a("a"),OEo=o("BlenderbotSmallForConditionalGeneration"),VEo=o(" (BlenderbotSmall model)"),XEo=l(),Z2=a("li"),sle=a("strong"),zEo=o("encoder-decoder"),QEo=o(" \u2014 "),Rq=a("a"),WEo=o("EncoderDecoderModel"),HEo=o(" (Encoder decoder model)"),UEo=l(),e1=a("li"),lle=a("strong"),JEo=o("fsmt"),YEo=o(" \u2014 "),Bq=a("a"),KEo=o("FSMTForConditionalGeneration"),ZEo=o(" (FairSeq Machine-Translation model)"),e5o=l(),o1=a("li"),ile=a("strong"),o5o=o("led"),r5o=o(" \u2014 "),Pq=a("a"),t5o=o("LEDForConditionalGeneration"),a5o=o(" (LED model)"),n5o=l(),r1=a("li"),dle=a("strong"),s5o=o("longt5"),l5o=o(" \u2014 "),$q=a("a"),i5o=o("LongT5ForConditionalGeneration"),d5o=o(" (LongT5 model)"),c5o=l(),t1=a("li"),cle=a("strong"),f5o=o("m2m_100"),m5o=o(" \u2014 "),Iq=a("a"),g5o=o("M2M100ForConditionalGeneration"),h5o=o(" (M2M100 model)"),p5o=l(),a1=a("li"),fle=a("strong"),_5o=o("marian"),u5o=o(" \u2014 "),qq=a("a"),b5o=o("MarianMTModel"),F5o=o(" (Marian model)"),v5o=l(),n1=a("li"),mle=a("strong"),T5o=o("mbart"),M5o=o(" \u2014 "),Nq=a("a"),E5o=o("MBartForConditionalGeneration"),C5o=o(" (mBART model)"),w5o=l(),s1=a("li"),gle=a("strong"),A5o=o("mt5"),y5o=o(" \u2014 "),jq=a("a"),L5o=o("MT5ForConditionalGeneration"),x5o=o(" (mT5 model)"),k5o=l(),l1=a("li"),hle=a("strong"),S5o=o("pegasus"),R5o=o(" \u2014 "),Dq=a("a"),B5o=o("PegasusForConditionalGeneration"),P5o=o(" (Pegasus model)"),$5o=l(),i1=a("li"),ple=a("strong"),I5o=o("plbart"),q5o=o(" \u2014 "),Gq=a("a"),N5o=o("PLBartForConditionalGeneration"),j5o=o(" (PLBart model)"),D5o=l(),d1=a("li"),_le=a("strong"),G5o=o("prophetnet"),O5o=o(" \u2014 "),Oq=a("a"),V5o=o("ProphetNetForConditionalGeneration"),X5o=o(" (ProphetNet model)"),z5o=l(),c1=a("li"),ule=a("strong"),Q5o=o("t5"),W5o=o(" \u2014 "),Vq=a("a"),H5o=o("T5ForConditionalGeneration"),U5o=o(" (T5 model)"),J5o=l(),f1=a("li"),ble=a("strong"),Y5o=o("tapex"),K5o=o(" \u2014 "),Xq=a("a"),Z5o=o("BartForConditionalGeneration"),e3o=o(" (TAPEX model)"),o3o=l(),m1=a("li"),Fle=a("strong"),r3o=o("xlm-prophetnet"),t3o=o(" \u2014 "),zq=a("a"),a3o=o("XLMProphetNetForConditionalGeneration"),n3o=o(" (XLMProphetNet model)"),s3o=l(),g1=a("p"),l3o=o("The model is set in evaluation mode by default using "),vle=a("code"),i3o=o("model.eval()"),d3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tle=a("code"),c3o=o("model.train()"),f3o=l(),Mle=a("p"),m3o=o("Examples:"),g3o=l(),f(J3.$$.fragment),BBe=l(),gd=a("h2"),h1=a("a"),Ele=a("span"),f(Y3.$$.fragment),h3o=l(),Cle=a("span"),p3o=o("AutoModelForSequenceClassification"),PBe=l(),or=a("div"),f(K3.$$.fragment),_3o=l(),hd=a("p"),u3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Qq=a("a"),b3o=o("from_pretrained()"),F3o=o(" class method or the "),Wq=a("a"),v3o=o("from_config()"),T3o=o(` class
method.`),M3o=l(),Z3=a("p"),E3o=o("This class cannot be instantiated directly using "),wle=a("code"),C3o=o("__init__()"),w3o=o(" (throws an error)."),A3o=l(),Ur=a("div"),f(eC.$$.fragment),y3o=l(),Ale=a("p"),L3o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),x3o=l(),pd=a("p"),k3o=o(`Note:
Loading a model from its configuration file does `),yle=a("strong"),S3o=o("not"),R3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hq=a("a"),B3o=o("from_pretrained()"),P3o=o(" to load the model weights."),$3o=l(),Lle=a("p"),I3o=o("Examples:"),q3o=l(),f(oC.$$.fragment),N3o=l(),Ve=a("div"),f(rC.$$.fragment),j3o=l(),xle=a("p"),D3o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),G3o=l(),Ua=a("p"),O3o=o("The model class to instantiate is selected based on the "),kle=a("code"),V3o=o("model_type"),X3o=o(` property of the config object (either
passed as an argument or loaded from `),Sle=a("code"),z3o=o("pretrained_model_name_or_path"),Q3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rle=a("code"),W3o=o("pretrained_model_name_or_path"),H3o=o(":"),U3o=l(),y=a("ul"),p1=a("li"),Ble=a("strong"),J3o=o("albert"),Y3o=o(" \u2014 "),Uq=a("a"),K3o=o("AlbertForSequenceClassification"),Z3o=o(" (ALBERT model)"),eCo=l(),_1=a("li"),Ple=a("strong"),oCo=o("bart"),rCo=o(" \u2014 "),Jq=a("a"),tCo=o("BartForSequenceClassification"),aCo=o(" (BART model)"),nCo=l(),u1=a("li"),$le=a("strong"),sCo=o("bert"),lCo=o(" \u2014 "),Yq=a("a"),iCo=o("BertForSequenceClassification"),dCo=o(" (BERT model)"),cCo=l(),b1=a("li"),Ile=a("strong"),fCo=o("big_bird"),mCo=o(" \u2014 "),Kq=a("a"),gCo=o("BigBirdForSequenceClassification"),hCo=o(" (BigBird model)"),pCo=l(),F1=a("li"),qle=a("strong"),_Co=o("bigbird_pegasus"),uCo=o(" \u2014 "),Zq=a("a"),bCo=o("BigBirdPegasusForSequenceClassification"),FCo=o(" (BigBirdPegasus model)"),vCo=l(),v1=a("li"),Nle=a("strong"),TCo=o("camembert"),MCo=o(" \u2014 "),eN=a("a"),ECo=o("CamembertForSequenceClassification"),CCo=o(" (CamemBERT model)"),wCo=l(),T1=a("li"),jle=a("strong"),ACo=o("canine"),yCo=o(" \u2014 "),oN=a("a"),LCo=o("CanineForSequenceClassification"),xCo=o(" (Canine model)"),kCo=l(),M1=a("li"),Dle=a("strong"),SCo=o("convbert"),RCo=o(" \u2014 "),rN=a("a"),BCo=o("ConvBertForSequenceClassification"),PCo=o(" (ConvBERT model)"),$Co=l(),E1=a("li"),Gle=a("strong"),ICo=o("ctrl"),qCo=o(" \u2014 "),tN=a("a"),NCo=o("CTRLForSequenceClassification"),jCo=o(" (CTRL model)"),DCo=l(),C1=a("li"),Ole=a("strong"),GCo=o("data2vec-text"),OCo=o(" \u2014 "),aN=a("a"),VCo=o("Data2VecTextForSequenceClassification"),XCo=o(" (Data2VecText model)"),zCo=l(),w1=a("li"),Vle=a("strong"),QCo=o("deberta"),WCo=o(" \u2014 "),nN=a("a"),HCo=o("DebertaForSequenceClassification"),UCo=o(" (DeBERTa model)"),JCo=l(),A1=a("li"),Xle=a("strong"),YCo=o("deberta-v2"),KCo=o(" \u2014 "),sN=a("a"),ZCo=o("DebertaV2ForSequenceClassification"),ewo=o(" (DeBERTa-v2 model)"),owo=l(),y1=a("li"),zle=a("strong"),rwo=o("distilbert"),two=o(" \u2014 "),lN=a("a"),awo=o("DistilBertForSequenceClassification"),nwo=o(" (DistilBERT model)"),swo=l(),L1=a("li"),Qle=a("strong"),lwo=o("electra"),iwo=o(" \u2014 "),iN=a("a"),dwo=o("ElectraForSequenceClassification"),cwo=o(" (ELECTRA model)"),fwo=l(),x1=a("li"),Wle=a("strong"),mwo=o("flaubert"),gwo=o(" \u2014 "),dN=a("a"),hwo=o("FlaubertForSequenceClassification"),pwo=o(" (FlauBERT model)"),_wo=l(),k1=a("li"),Hle=a("strong"),uwo=o("fnet"),bwo=o(" \u2014 "),cN=a("a"),Fwo=o("FNetForSequenceClassification"),vwo=o(" (FNet model)"),Two=l(),S1=a("li"),Ule=a("strong"),Mwo=o("funnel"),Ewo=o(" \u2014 "),fN=a("a"),Cwo=o("FunnelForSequenceClassification"),wwo=o(" (Funnel Transformer model)"),Awo=l(),R1=a("li"),Jle=a("strong"),ywo=o("gpt2"),Lwo=o(" \u2014 "),mN=a("a"),xwo=o("GPT2ForSequenceClassification"),kwo=o(" (OpenAI GPT-2 model)"),Swo=l(),B1=a("li"),Yle=a("strong"),Rwo=o("gpt_neo"),Bwo=o(" \u2014 "),gN=a("a"),Pwo=o("GPTNeoForSequenceClassification"),$wo=o(" (GPT Neo model)"),Iwo=l(),P1=a("li"),Kle=a("strong"),qwo=o("gptj"),Nwo=o(" \u2014 "),hN=a("a"),jwo=o("GPTJForSequenceClassification"),Dwo=o(" (GPT-J model)"),Gwo=l(),$1=a("li"),Zle=a("strong"),Owo=o("ibert"),Vwo=o(" \u2014 "),pN=a("a"),Xwo=o("IBertForSequenceClassification"),zwo=o(" (I-BERT model)"),Qwo=l(),I1=a("li"),eie=a("strong"),Wwo=o("layoutlm"),Hwo=o(" \u2014 "),_N=a("a"),Uwo=o("LayoutLMForSequenceClassification"),Jwo=o(" (LayoutLM model)"),Ywo=l(),q1=a("li"),oie=a("strong"),Kwo=o("layoutlmv2"),Zwo=o(" \u2014 "),uN=a("a"),eAo=o("LayoutLMv2ForSequenceClassification"),oAo=o(" (LayoutLMv2 model)"),rAo=l(),N1=a("li"),rie=a("strong"),tAo=o("led"),aAo=o(" \u2014 "),bN=a("a"),nAo=o("LEDForSequenceClassification"),sAo=o(" (LED model)"),lAo=l(),j1=a("li"),tie=a("strong"),iAo=o("longformer"),dAo=o(" \u2014 "),FN=a("a"),cAo=o("LongformerForSequenceClassification"),fAo=o(" (Longformer model)"),mAo=l(),D1=a("li"),aie=a("strong"),gAo=o("mbart"),hAo=o(" \u2014 "),vN=a("a"),pAo=o("MBartForSequenceClassification"),_Ao=o(" (mBART model)"),uAo=l(),G1=a("li"),nie=a("strong"),bAo=o("megatron-bert"),FAo=o(" \u2014 "),TN=a("a"),vAo=o("MegatronBertForSequenceClassification"),TAo=o(" (MegatronBert model)"),MAo=l(),O1=a("li"),sie=a("strong"),EAo=o("mobilebert"),CAo=o(" \u2014 "),MN=a("a"),wAo=o("MobileBertForSequenceClassification"),AAo=o(" (MobileBERT model)"),yAo=l(),V1=a("li"),lie=a("strong"),LAo=o("mpnet"),xAo=o(" \u2014 "),EN=a("a"),kAo=o("MPNetForSequenceClassification"),SAo=o(" (MPNet model)"),RAo=l(),X1=a("li"),iie=a("strong"),BAo=o("nystromformer"),PAo=o(" \u2014 "),CN=a("a"),$Ao=o("NystromformerForSequenceClassification"),IAo=o(" (Nystromformer model)"),qAo=l(),z1=a("li"),die=a("strong"),NAo=o("openai-gpt"),jAo=o(" \u2014 "),wN=a("a"),DAo=o("OpenAIGPTForSequenceClassification"),GAo=o(" (OpenAI GPT model)"),OAo=l(),Q1=a("li"),cie=a("strong"),VAo=o("perceiver"),XAo=o(" \u2014 "),AN=a("a"),zAo=o("PerceiverForSequenceClassification"),QAo=o(" (Perceiver model)"),WAo=l(),W1=a("li"),fie=a("strong"),HAo=o("plbart"),UAo=o(" \u2014 "),yN=a("a"),JAo=o("PLBartForSequenceClassification"),YAo=o(" (PLBart model)"),KAo=l(),H1=a("li"),mie=a("strong"),ZAo=o("qdqbert"),e0o=o(" \u2014 "),LN=a("a"),o0o=o("QDQBertForSequenceClassification"),r0o=o(" (QDQBert model)"),t0o=l(),U1=a("li"),gie=a("strong"),a0o=o("reformer"),n0o=o(" \u2014 "),xN=a("a"),s0o=o("ReformerForSequenceClassification"),l0o=o(" (Reformer model)"),i0o=l(),J1=a("li"),hie=a("strong"),d0o=o("rembert"),c0o=o(" \u2014 "),kN=a("a"),f0o=o("RemBertForSequenceClassification"),m0o=o(" (RemBERT model)"),g0o=l(),Y1=a("li"),pie=a("strong"),h0o=o("roberta"),p0o=o(" \u2014 "),SN=a("a"),_0o=o("RobertaForSequenceClassification"),u0o=o(" (RoBERTa model)"),b0o=l(),K1=a("li"),_ie=a("strong"),F0o=o("roformer"),v0o=o(" \u2014 "),RN=a("a"),T0o=o("RoFormerForSequenceClassification"),M0o=o(" (RoFormer model)"),E0o=l(),Z1=a("li"),uie=a("strong"),C0o=o("squeezebert"),w0o=o(" \u2014 "),BN=a("a"),A0o=o("SqueezeBertForSequenceClassification"),y0o=o(" (SqueezeBERT model)"),L0o=l(),eb=a("li"),bie=a("strong"),x0o=o("tapas"),k0o=o(" \u2014 "),PN=a("a"),S0o=o("TapasForSequenceClassification"),R0o=o(" (TAPAS model)"),B0o=l(),ob=a("li"),Fie=a("strong"),P0o=o("tapex"),$0o=o(" \u2014 "),$N=a("a"),I0o=o("BartForSequenceClassification"),q0o=o(" (TAPEX model)"),N0o=l(),rb=a("li"),vie=a("strong"),j0o=o("transfo-xl"),D0o=o(" \u2014 "),IN=a("a"),G0o=o("TransfoXLForSequenceClassification"),O0o=o(" (Transformer-XL model)"),V0o=l(),tb=a("li"),Tie=a("strong"),X0o=o("xlm"),z0o=o(" \u2014 "),qN=a("a"),Q0o=o("XLMForSequenceClassification"),W0o=o(" (XLM model)"),H0o=l(),ab=a("li"),Mie=a("strong"),U0o=o("xlm-roberta"),J0o=o(" \u2014 "),NN=a("a"),Y0o=o("XLMRobertaForSequenceClassification"),K0o=o(" (XLM-RoBERTa model)"),Z0o=l(),nb=a("li"),Eie=a("strong"),eyo=o("xlm-roberta-xl"),oyo=o(" \u2014 "),jN=a("a"),ryo=o("XLMRobertaXLForSequenceClassification"),tyo=o(" (XLM-RoBERTa-XL model)"),ayo=l(),sb=a("li"),Cie=a("strong"),nyo=o("xlnet"),syo=o(" \u2014 "),DN=a("a"),lyo=o("XLNetForSequenceClassification"),iyo=o(" (XLNet model)"),dyo=l(),lb=a("li"),wie=a("strong"),cyo=o("yoso"),fyo=o(" \u2014 "),GN=a("a"),myo=o("YosoForSequenceClassification"),gyo=o(" (YOSO model)"),hyo=l(),ib=a("p"),pyo=o("The model is set in evaluation mode by default using "),Aie=a("code"),_yo=o("model.eval()"),uyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yie=a("code"),byo=o("model.train()"),Fyo=l(),Lie=a("p"),vyo=o("Examples:"),Tyo=l(),f(tC.$$.fragment),$Be=l(),_d=a("h2"),db=a("a"),xie=a("span"),f(aC.$$.fragment),Myo=l(),kie=a("span"),Eyo=o("AutoModelForMultipleChoice"),IBe=l(),rr=a("div"),f(nC.$$.fragment),Cyo=l(),ud=a("p"),wyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ON=a("a"),Ayo=o("from_pretrained()"),yyo=o(" class method or the "),VN=a("a"),Lyo=o("from_config()"),xyo=o(` class
method.`),kyo=l(),sC=a("p"),Syo=o("This class cannot be instantiated directly using "),Sie=a("code"),Ryo=o("__init__()"),Byo=o(" (throws an error)."),Pyo=l(),Jr=a("div"),f(lC.$$.fragment),$yo=l(),Rie=a("p"),Iyo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qyo=l(),bd=a("p"),Nyo=o(`Note:
Loading a model from its configuration file does `),Bie=a("strong"),jyo=o("not"),Dyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=a("a"),Gyo=o("from_pretrained()"),Oyo=o(" to load the model weights."),Vyo=l(),Pie=a("p"),Xyo=o("Examples:"),zyo=l(),f(iC.$$.fragment),Qyo=l(),Xe=a("div"),f(dC.$$.fragment),Wyo=l(),$ie=a("p"),Hyo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Uyo=l(),Ja=a("p"),Jyo=o("The model class to instantiate is selected based on the "),Iie=a("code"),Yyo=o("model_type"),Kyo=o(` property of the config object (either
passed as an argument or loaded from `),qie=a("code"),Zyo=o("pretrained_model_name_or_path"),eLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nie=a("code"),oLo=o("pretrained_model_name_or_path"),rLo=o(":"),tLo=l(),G=a("ul"),cb=a("li"),jie=a("strong"),aLo=o("albert"),nLo=o(" \u2014 "),zN=a("a"),sLo=o("AlbertForMultipleChoice"),lLo=o(" (ALBERT model)"),iLo=l(),fb=a("li"),Die=a("strong"),dLo=o("bert"),cLo=o(" \u2014 "),QN=a("a"),fLo=o("BertForMultipleChoice"),mLo=o(" (BERT model)"),gLo=l(),mb=a("li"),Gie=a("strong"),hLo=o("big_bird"),pLo=o(" \u2014 "),WN=a("a"),_Lo=o("BigBirdForMultipleChoice"),uLo=o(" (BigBird model)"),bLo=l(),gb=a("li"),Oie=a("strong"),FLo=o("camembert"),vLo=o(" \u2014 "),HN=a("a"),TLo=o("CamembertForMultipleChoice"),MLo=o(" (CamemBERT model)"),ELo=l(),hb=a("li"),Vie=a("strong"),CLo=o("canine"),wLo=o(" \u2014 "),UN=a("a"),ALo=o("CanineForMultipleChoice"),yLo=o(" (Canine model)"),LLo=l(),pb=a("li"),Xie=a("strong"),xLo=o("convbert"),kLo=o(" \u2014 "),JN=a("a"),SLo=o("ConvBertForMultipleChoice"),RLo=o(" (ConvBERT model)"),BLo=l(),_b=a("li"),zie=a("strong"),PLo=o("data2vec-text"),$Lo=o(" \u2014 "),YN=a("a"),ILo=o("Data2VecTextForMultipleChoice"),qLo=o(" (Data2VecText model)"),NLo=l(),ub=a("li"),Qie=a("strong"),jLo=o("distilbert"),DLo=o(" \u2014 "),KN=a("a"),GLo=o("DistilBertForMultipleChoice"),OLo=o(" (DistilBERT model)"),VLo=l(),bb=a("li"),Wie=a("strong"),XLo=o("electra"),zLo=o(" \u2014 "),ZN=a("a"),QLo=o("ElectraForMultipleChoice"),WLo=o(" (ELECTRA model)"),HLo=l(),Fb=a("li"),Hie=a("strong"),ULo=o("flaubert"),JLo=o(" \u2014 "),ej=a("a"),YLo=o("FlaubertForMultipleChoice"),KLo=o(" (FlauBERT model)"),ZLo=l(),vb=a("li"),Uie=a("strong"),e8o=o("fnet"),o8o=o(" \u2014 "),oj=a("a"),r8o=o("FNetForMultipleChoice"),t8o=o(" (FNet model)"),a8o=l(),Tb=a("li"),Jie=a("strong"),n8o=o("funnel"),s8o=o(" \u2014 "),rj=a("a"),l8o=o("FunnelForMultipleChoice"),i8o=o(" (Funnel Transformer model)"),d8o=l(),Mb=a("li"),Yie=a("strong"),c8o=o("ibert"),f8o=o(" \u2014 "),tj=a("a"),m8o=o("IBertForMultipleChoice"),g8o=o(" (I-BERT model)"),h8o=l(),Eb=a("li"),Kie=a("strong"),p8o=o("longformer"),_8o=o(" \u2014 "),aj=a("a"),u8o=o("LongformerForMultipleChoice"),b8o=o(" (Longformer model)"),F8o=l(),Cb=a("li"),Zie=a("strong"),v8o=o("megatron-bert"),T8o=o(" \u2014 "),nj=a("a"),M8o=o("MegatronBertForMultipleChoice"),E8o=o(" (MegatronBert model)"),C8o=l(),wb=a("li"),ede=a("strong"),w8o=o("mobilebert"),A8o=o(" \u2014 "),sj=a("a"),y8o=o("MobileBertForMultipleChoice"),L8o=o(" (MobileBERT model)"),x8o=l(),Ab=a("li"),ode=a("strong"),k8o=o("mpnet"),S8o=o(" \u2014 "),lj=a("a"),R8o=o("MPNetForMultipleChoice"),B8o=o(" (MPNet model)"),P8o=l(),yb=a("li"),rde=a("strong"),$8o=o("nystromformer"),I8o=o(" \u2014 "),ij=a("a"),q8o=o("NystromformerForMultipleChoice"),N8o=o(" (Nystromformer model)"),j8o=l(),Lb=a("li"),tde=a("strong"),D8o=o("qdqbert"),G8o=o(" \u2014 "),dj=a("a"),O8o=o("QDQBertForMultipleChoice"),V8o=o(" (QDQBert model)"),X8o=l(),xb=a("li"),ade=a("strong"),z8o=o("rembert"),Q8o=o(" \u2014 "),cj=a("a"),W8o=o("RemBertForMultipleChoice"),H8o=o(" (RemBERT model)"),U8o=l(),kb=a("li"),nde=a("strong"),J8o=o("roberta"),Y8o=o(" \u2014 "),fj=a("a"),K8o=o("RobertaForMultipleChoice"),Z8o=o(" (RoBERTa model)"),exo=l(),Sb=a("li"),sde=a("strong"),oxo=o("roformer"),rxo=o(" \u2014 "),mj=a("a"),txo=o("RoFormerForMultipleChoice"),axo=o(" (RoFormer model)"),nxo=l(),Rb=a("li"),lde=a("strong"),sxo=o("squeezebert"),lxo=o(" \u2014 "),gj=a("a"),ixo=o("SqueezeBertForMultipleChoice"),dxo=o(" (SqueezeBERT model)"),cxo=l(),Bb=a("li"),ide=a("strong"),fxo=o("xlm"),mxo=o(" \u2014 "),hj=a("a"),gxo=o("XLMForMultipleChoice"),hxo=o(" (XLM model)"),pxo=l(),Pb=a("li"),dde=a("strong"),_xo=o("xlm-roberta"),uxo=o(" \u2014 "),pj=a("a"),bxo=o("XLMRobertaForMultipleChoice"),Fxo=o(" (XLM-RoBERTa model)"),vxo=l(),$b=a("li"),cde=a("strong"),Txo=o("xlm-roberta-xl"),Mxo=o(" \u2014 "),_j=a("a"),Exo=o("XLMRobertaXLForMultipleChoice"),Cxo=o(" (XLM-RoBERTa-XL model)"),wxo=l(),Ib=a("li"),fde=a("strong"),Axo=o("xlnet"),yxo=o(" \u2014 "),uj=a("a"),Lxo=o("XLNetForMultipleChoice"),xxo=o(" (XLNet model)"),kxo=l(),qb=a("li"),mde=a("strong"),Sxo=o("yoso"),Rxo=o(" \u2014 "),bj=a("a"),Bxo=o("YosoForMultipleChoice"),Pxo=o(" (YOSO model)"),$xo=l(),Nb=a("p"),Ixo=o("The model is set in evaluation mode by default using "),gde=a("code"),qxo=o("model.eval()"),Nxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hde=a("code"),jxo=o("model.train()"),Dxo=l(),pde=a("p"),Gxo=o("Examples:"),Oxo=l(),f(cC.$$.fragment),qBe=l(),Fd=a("h2"),jb=a("a"),_de=a("span"),f(fC.$$.fragment),Vxo=l(),ude=a("span"),Xxo=o("AutoModelForNextSentencePrediction"),NBe=l(),tr=a("div"),f(mC.$$.fragment),zxo=l(),vd=a("p"),Qxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Fj=a("a"),Wxo=o("from_pretrained()"),Hxo=o(" class method or the "),vj=a("a"),Uxo=o("from_config()"),Jxo=o(` class
method.`),Yxo=l(),gC=a("p"),Kxo=o("This class cannot be instantiated directly using "),bde=a("code"),Zxo=o("__init__()"),eko=o(" (throws an error)."),oko=l(),Yr=a("div"),f(hC.$$.fragment),rko=l(),Fde=a("p"),tko=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ako=l(),Td=a("p"),nko=o(`Note:
Loading a model from its configuration file does `),vde=a("strong"),sko=o("not"),lko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tj=a("a"),iko=o("from_pretrained()"),dko=o(" to load the model weights."),cko=l(),Tde=a("p"),fko=o("Examples:"),mko=l(),f(pC.$$.fragment),gko=l(),ze=a("div"),f(_C.$$.fragment),hko=l(),Mde=a("p"),pko=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_ko=l(),Ya=a("p"),uko=o("The model class to instantiate is selected based on the "),Ede=a("code"),bko=o("model_type"),Fko=o(` property of the config object (either
passed as an argument or loaded from `),Cde=a("code"),vko=o("pretrained_model_name_or_path"),Tko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wde=a("code"),Mko=o("pretrained_model_name_or_path"),Eko=o(":"),Cko=l(),da=a("ul"),Db=a("li"),Ade=a("strong"),wko=o("bert"),Ako=o(" \u2014 "),Mj=a("a"),yko=o("BertForNextSentencePrediction"),Lko=o(" (BERT model)"),xko=l(),Gb=a("li"),yde=a("strong"),kko=o("fnet"),Sko=o(" \u2014 "),Ej=a("a"),Rko=o("FNetForNextSentencePrediction"),Bko=o(" (FNet model)"),Pko=l(),Ob=a("li"),Lde=a("strong"),$ko=o("megatron-bert"),Iko=o(" \u2014 "),Cj=a("a"),qko=o("MegatronBertForNextSentencePrediction"),Nko=o(" (MegatronBert model)"),jko=l(),Vb=a("li"),xde=a("strong"),Dko=o("mobilebert"),Gko=o(" \u2014 "),wj=a("a"),Oko=o("MobileBertForNextSentencePrediction"),Vko=o(" (MobileBERT model)"),Xko=l(),Xb=a("li"),kde=a("strong"),zko=o("qdqbert"),Qko=o(" \u2014 "),Aj=a("a"),Wko=o("QDQBertForNextSentencePrediction"),Hko=o(" (QDQBert model)"),Uko=l(),zb=a("p"),Jko=o("The model is set in evaluation mode by default using "),Sde=a("code"),Yko=o("model.eval()"),Kko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rde=a("code"),Zko=o("model.train()"),eSo=l(),Bde=a("p"),oSo=o("Examples:"),rSo=l(),f(uC.$$.fragment),jBe=l(),Md=a("h2"),Qb=a("a"),Pde=a("span"),f(bC.$$.fragment),tSo=l(),$de=a("span"),aSo=o("AutoModelForTokenClassification"),DBe=l(),ar=a("div"),f(FC.$$.fragment),nSo=l(),Ed=a("p"),sSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yj=a("a"),lSo=o("from_pretrained()"),iSo=o(" class method or the "),Lj=a("a"),dSo=o("from_config()"),cSo=o(` class
method.`),fSo=l(),vC=a("p"),mSo=o("This class cannot be instantiated directly using "),Ide=a("code"),gSo=o("__init__()"),hSo=o(" (throws an error)."),pSo=l(),Kr=a("div"),f(TC.$$.fragment),_So=l(),qde=a("p"),uSo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bSo=l(),Cd=a("p"),FSo=o(`Note:
Loading a model from its configuration file does `),Nde=a("strong"),vSo=o("not"),TSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xj=a("a"),MSo=o("from_pretrained()"),ESo=o(" to load the model weights."),CSo=l(),jde=a("p"),wSo=o("Examples:"),ASo=l(),f(MC.$$.fragment),ySo=l(),Qe=a("div"),f(EC.$$.fragment),LSo=l(),Dde=a("p"),xSo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kSo=l(),Ka=a("p"),SSo=o("The model class to instantiate is selected based on the "),Gde=a("code"),RSo=o("model_type"),BSo=o(` property of the config object (either
passed as an argument or loaded from `),Ode=a("code"),PSo=o("pretrained_model_name_or_path"),$So=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vde=a("code"),ISo=o("pretrained_model_name_or_path"),qSo=o(":"),NSo=l(),j=a("ul"),Wb=a("li"),Xde=a("strong"),jSo=o("albert"),DSo=o(" \u2014 "),kj=a("a"),GSo=o("AlbertForTokenClassification"),OSo=o(" (ALBERT model)"),VSo=l(),Hb=a("li"),zde=a("strong"),XSo=o("bert"),zSo=o(" \u2014 "),Sj=a("a"),QSo=o("BertForTokenClassification"),WSo=o(" (BERT model)"),HSo=l(),Ub=a("li"),Qde=a("strong"),USo=o("big_bird"),JSo=o(" \u2014 "),Rj=a("a"),YSo=o("BigBirdForTokenClassification"),KSo=o(" (BigBird model)"),ZSo=l(),Jb=a("li"),Wde=a("strong"),eRo=o("camembert"),oRo=o(" \u2014 "),Bj=a("a"),rRo=o("CamembertForTokenClassification"),tRo=o(" (CamemBERT model)"),aRo=l(),Yb=a("li"),Hde=a("strong"),nRo=o("canine"),sRo=o(" \u2014 "),Pj=a("a"),lRo=o("CanineForTokenClassification"),iRo=o(" (Canine model)"),dRo=l(),Kb=a("li"),Ude=a("strong"),cRo=o("convbert"),fRo=o(" \u2014 "),$j=a("a"),mRo=o("ConvBertForTokenClassification"),gRo=o(" (ConvBERT model)"),hRo=l(),Zb=a("li"),Jde=a("strong"),pRo=o("data2vec-text"),_Ro=o(" \u2014 "),Ij=a("a"),uRo=o("Data2VecTextForTokenClassification"),bRo=o(" (Data2VecText model)"),FRo=l(),e6=a("li"),Yde=a("strong"),vRo=o("deberta"),TRo=o(" \u2014 "),qj=a("a"),MRo=o("DebertaForTokenClassification"),ERo=o(" (DeBERTa model)"),CRo=l(),o6=a("li"),Kde=a("strong"),wRo=o("deberta-v2"),ARo=o(" \u2014 "),Nj=a("a"),yRo=o("DebertaV2ForTokenClassification"),LRo=o(" (DeBERTa-v2 model)"),xRo=l(),r6=a("li"),Zde=a("strong"),kRo=o("distilbert"),SRo=o(" \u2014 "),jj=a("a"),RRo=o("DistilBertForTokenClassification"),BRo=o(" (DistilBERT model)"),PRo=l(),t6=a("li"),ece=a("strong"),$Ro=o("electra"),IRo=o(" \u2014 "),Dj=a("a"),qRo=o("ElectraForTokenClassification"),NRo=o(" (ELECTRA model)"),jRo=l(),a6=a("li"),oce=a("strong"),DRo=o("flaubert"),GRo=o(" \u2014 "),Gj=a("a"),ORo=o("FlaubertForTokenClassification"),VRo=o(" (FlauBERT model)"),XRo=l(),n6=a("li"),rce=a("strong"),zRo=o("fnet"),QRo=o(" \u2014 "),Oj=a("a"),WRo=o("FNetForTokenClassification"),HRo=o(" (FNet model)"),URo=l(),s6=a("li"),tce=a("strong"),JRo=o("funnel"),YRo=o(" \u2014 "),Vj=a("a"),KRo=o("FunnelForTokenClassification"),ZRo=o(" (Funnel Transformer model)"),eBo=l(),l6=a("li"),ace=a("strong"),oBo=o("gpt2"),rBo=o(" \u2014 "),Xj=a("a"),tBo=o("GPT2ForTokenClassification"),aBo=o(" (OpenAI GPT-2 model)"),nBo=l(),i6=a("li"),nce=a("strong"),sBo=o("ibert"),lBo=o(" \u2014 "),zj=a("a"),iBo=o("IBertForTokenClassification"),dBo=o(" (I-BERT model)"),cBo=l(),d6=a("li"),sce=a("strong"),fBo=o("layoutlm"),mBo=o(" \u2014 "),Qj=a("a"),gBo=o("LayoutLMForTokenClassification"),hBo=o(" (LayoutLM model)"),pBo=l(),c6=a("li"),lce=a("strong"),_Bo=o("layoutlmv2"),uBo=o(" \u2014 "),Wj=a("a"),bBo=o("LayoutLMv2ForTokenClassification"),FBo=o(" (LayoutLMv2 model)"),vBo=l(),f6=a("li"),ice=a("strong"),TBo=o("longformer"),MBo=o(" \u2014 "),Hj=a("a"),EBo=o("LongformerForTokenClassification"),CBo=o(" (Longformer model)"),wBo=l(),m6=a("li"),dce=a("strong"),ABo=o("megatron-bert"),yBo=o(" \u2014 "),Uj=a("a"),LBo=o("MegatronBertForTokenClassification"),xBo=o(" (MegatronBert model)"),kBo=l(),g6=a("li"),cce=a("strong"),SBo=o("mobilebert"),RBo=o(" \u2014 "),Jj=a("a"),BBo=o("MobileBertForTokenClassification"),PBo=o(" (MobileBERT model)"),$Bo=l(),h6=a("li"),fce=a("strong"),IBo=o("mpnet"),qBo=o(" \u2014 "),Yj=a("a"),NBo=o("MPNetForTokenClassification"),jBo=o(" (MPNet model)"),DBo=l(),p6=a("li"),mce=a("strong"),GBo=o("nystromformer"),OBo=o(" \u2014 "),Kj=a("a"),VBo=o("NystromformerForTokenClassification"),XBo=o(" (Nystromformer model)"),zBo=l(),_6=a("li"),gce=a("strong"),QBo=o("qdqbert"),WBo=o(" \u2014 "),Zj=a("a"),HBo=o("QDQBertForTokenClassification"),UBo=o(" (QDQBert model)"),JBo=l(),u6=a("li"),hce=a("strong"),YBo=o("rembert"),KBo=o(" \u2014 "),eD=a("a"),ZBo=o("RemBertForTokenClassification"),ePo=o(" (RemBERT model)"),oPo=l(),b6=a("li"),pce=a("strong"),rPo=o("roberta"),tPo=o(" \u2014 "),oD=a("a"),aPo=o("RobertaForTokenClassification"),nPo=o(" (RoBERTa model)"),sPo=l(),F6=a("li"),_ce=a("strong"),lPo=o("roformer"),iPo=o(" \u2014 "),rD=a("a"),dPo=o("RoFormerForTokenClassification"),cPo=o(" (RoFormer model)"),fPo=l(),v6=a("li"),uce=a("strong"),mPo=o("squeezebert"),gPo=o(" \u2014 "),tD=a("a"),hPo=o("SqueezeBertForTokenClassification"),pPo=o(" (SqueezeBERT model)"),_Po=l(),T6=a("li"),bce=a("strong"),uPo=o("xlm"),bPo=o(" \u2014 "),aD=a("a"),FPo=o("XLMForTokenClassification"),vPo=o(" (XLM model)"),TPo=l(),M6=a("li"),Fce=a("strong"),MPo=o("xlm-roberta"),EPo=o(" \u2014 "),nD=a("a"),CPo=o("XLMRobertaForTokenClassification"),wPo=o(" (XLM-RoBERTa model)"),APo=l(),E6=a("li"),vce=a("strong"),yPo=o("xlm-roberta-xl"),LPo=o(" \u2014 "),sD=a("a"),xPo=o("XLMRobertaXLForTokenClassification"),kPo=o(" (XLM-RoBERTa-XL model)"),SPo=l(),C6=a("li"),Tce=a("strong"),RPo=o("xlnet"),BPo=o(" \u2014 "),lD=a("a"),PPo=o("XLNetForTokenClassification"),$Po=o(" (XLNet model)"),IPo=l(),w6=a("li"),Mce=a("strong"),qPo=o("yoso"),NPo=o(" \u2014 "),iD=a("a"),jPo=o("YosoForTokenClassification"),DPo=o(" (YOSO model)"),GPo=l(),A6=a("p"),OPo=o("The model is set in evaluation mode by default using "),Ece=a("code"),VPo=o("model.eval()"),XPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cce=a("code"),zPo=o("model.train()"),QPo=l(),wce=a("p"),WPo=o("Examples:"),HPo=l(),f(CC.$$.fragment),GBe=l(),wd=a("h2"),y6=a("a"),Ace=a("span"),f(wC.$$.fragment),UPo=l(),yce=a("span"),JPo=o("AutoModelForQuestionAnswering"),OBe=l(),nr=a("div"),f(AC.$$.fragment),YPo=l(),Ad=a("p"),KPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dD=a("a"),ZPo=o("from_pretrained()"),e$o=o(" class method or the "),cD=a("a"),o$o=o("from_config()"),r$o=o(` class
method.`),t$o=l(),yC=a("p"),a$o=o("This class cannot be instantiated directly using "),Lce=a("code"),n$o=o("__init__()"),s$o=o(" (throws an error)."),l$o=l(),Zr=a("div"),f(LC.$$.fragment),i$o=l(),xce=a("p"),d$o=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),c$o=l(),yd=a("p"),f$o=o(`Note:
Loading a model from its configuration file does `),kce=a("strong"),m$o=o("not"),g$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fD=a("a"),h$o=o("from_pretrained()"),p$o=o(" to load the model weights."),_$o=l(),Sce=a("p"),u$o=o("Examples:"),b$o=l(),f(xC.$$.fragment),F$o=l(),We=a("div"),f(kC.$$.fragment),v$o=l(),Rce=a("p"),T$o=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),M$o=l(),Za=a("p"),E$o=o("The model class to instantiate is selected based on the "),Bce=a("code"),C$o=o("model_type"),w$o=o(` property of the config object (either
passed as an argument or loaded from `),Pce=a("code"),A$o=o("pretrained_model_name_or_path"),y$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ce=a("code"),L$o=o("pretrained_model_name_or_path"),x$o=o(":"),k$o=l(),R=a("ul"),L6=a("li"),Ice=a("strong"),S$o=o("albert"),R$o=o(" \u2014 "),mD=a("a"),B$o=o("AlbertForQuestionAnswering"),P$o=o(" (ALBERT model)"),$$o=l(),x6=a("li"),qce=a("strong"),I$o=o("bart"),q$o=o(" \u2014 "),gD=a("a"),N$o=o("BartForQuestionAnswering"),j$o=o(" (BART model)"),D$o=l(),k6=a("li"),Nce=a("strong"),G$o=o("bert"),O$o=o(" \u2014 "),hD=a("a"),V$o=o("BertForQuestionAnswering"),X$o=o(" (BERT model)"),z$o=l(),S6=a("li"),jce=a("strong"),Q$o=o("big_bird"),W$o=o(" \u2014 "),pD=a("a"),H$o=o("BigBirdForQuestionAnswering"),U$o=o(" (BigBird model)"),J$o=l(),R6=a("li"),Dce=a("strong"),Y$o=o("bigbird_pegasus"),K$o=o(" \u2014 "),_D=a("a"),Z$o=o("BigBirdPegasusForQuestionAnswering"),eIo=o(" (BigBirdPegasus model)"),oIo=l(),B6=a("li"),Gce=a("strong"),rIo=o("camembert"),tIo=o(" \u2014 "),uD=a("a"),aIo=o("CamembertForQuestionAnswering"),nIo=o(" (CamemBERT model)"),sIo=l(),P6=a("li"),Oce=a("strong"),lIo=o("canine"),iIo=o(" \u2014 "),bD=a("a"),dIo=o("CanineForQuestionAnswering"),cIo=o(" (Canine model)"),fIo=l(),$6=a("li"),Vce=a("strong"),mIo=o("convbert"),gIo=o(" \u2014 "),FD=a("a"),hIo=o("ConvBertForQuestionAnswering"),pIo=o(" (ConvBERT model)"),_Io=l(),I6=a("li"),Xce=a("strong"),uIo=o("data2vec-text"),bIo=o(" \u2014 "),vD=a("a"),FIo=o("Data2VecTextForQuestionAnswering"),vIo=o(" (Data2VecText model)"),TIo=l(),q6=a("li"),zce=a("strong"),MIo=o("deberta"),EIo=o(" \u2014 "),TD=a("a"),CIo=o("DebertaForQuestionAnswering"),wIo=o(" (DeBERTa model)"),AIo=l(),N6=a("li"),Qce=a("strong"),yIo=o("deberta-v2"),LIo=o(" \u2014 "),MD=a("a"),xIo=o("DebertaV2ForQuestionAnswering"),kIo=o(" (DeBERTa-v2 model)"),SIo=l(),j6=a("li"),Wce=a("strong"),RIo=o("distilbert"),BIo=o(" \u2014 "),ED=a("a"),PIo=o("DistilBertForQuestionAnswering"),$Io=o(" (DistilBERT model)"),IIo=l(),D6=a("li"),Hce=a("strong"),qIo=o("electra"),NIo=o(" \u2014 "),CD=a("a"),jIo=o("ElectraForQuestionAnswering"),DIo=o(" (ELECTRA model)"),GIo=l(),G6=a("li"),Uce=a("strong"),OIo=o("flaubert"),VIo=o(" \u2014 "),wD=a("a"),XIo=o("FlaubertForQuestionAnsweringSimple"),zIo=o(" (FlauBERT model)"),QIo=l(),O6=a("li"),Jce=a("strong"),WIo=o("fnet"),HIo=o(" \u2014 "),AD=a("a"),UIo=o("FNetForQuestionAnswering"),JIo=o(" (FNet model)"),YIo=l(),V6=a("li"),Yce=a("strong"),KIo=o("funnel"),ZIo=o(" \u2014 "),yD=a("a"),eqo=o("FunnelForQuestionAnswering"),oqo=o(" (Funnel Transformer model)"),rqo=l(),X6=a("li"),Kce=a("strong"),tqo=o("gptj"),aqo=o(" \u2014 "),LD=a("a"),nqo=o("GPTJForQuestionAnswering"),sqo=o(" (GPT-J model)"),lqo=l(),z6=a("li"),Zce=a("strong"),iqo=o("ibert"),dqo=o(" \u2014 "),xD=a("a"),cqo=o("IBertForQuestionAnswering"),fqo=o(" (I-BERT model)"),mqo=l(),Q6=a("li"),efe=a("strong"),gqo=o("layoutlmv2"),hqo=o(" \u2014 "),kD=a("a"),pqo=o("LayoutLMv2ForQuestionAnswering"),_qo=o(" (LayoutLMv2 model)"),uqo=l(),W6=a("li"),ofe=a("strong"),bqo=o("led"),Fqo=o(" \u2014 "),SD=a("a"),vqo=o("LEDForQuestionAnswering"),Tqo=o(" (LED model)"),Mqo=l(),H6=a("li"),rfe=a("strong"),Eqo=o("longformer"),Cqo=o(" \u2014 "),RD=a("a"),wqo=o("LongformerForQuestionAnswering"),Aqo=o(" (Longformer model)"),yqo=l(),U6=a("li"),tfe=a("strong"),Lqo=o("lxmert"),xqo=o(" \u2014 "),BD=a("a"),kqo=o("LxmertForQuestionAnswering"),Sqo=o(" (LXMERT model)"),Rqo=l(),J6=a("li"),afe=a("strong"),Bqo=o("mbart"),Pqo=o(" \u2014 "),PD=a("a"),$qo=o("MBartForQuestionAnswering"),Iqo=o(" (mBART model)"),qqo=l(),Y6=a("li"),nfe=a("strong"),Nqo=o("megatron-bert"),jqo=o(" \u2014 "),$D=a("a"),Dqo=o("MegatronBertForQuestionAnswering"),Gqo=o(" (MegatronBert model)"),Oqo=l(),K6=a("li"),sfe=a("strong"),Vqo=o("mobilebert"),Xqo=o(" \u2014 "),ID=a("a"),zqo=o("MobileBertForQuestionAnswering"),Qqo=o(" (MobileBERT model)"),Wqo=l(),Z6=a("li"),lfe=a("strong"),Hqo=o("mpnet"),Uqo=o(" \u2014 "),qD=a("a"),Jqo=o("MPNetForQuestionAnswering"),Yqo=o(" (MPNet model)"),Kqo=l(),eF=a("li"),ife=a("strong"),Zqo=o("nystromformer"),eNo=o(" \u2014 "),ND=a("a"),oNo=o("NystromformerForQuestionAnswering"),rNo=o(" (Nystromformer model)"),tNo=l(),oF=a("li"),dfe=a("strong"),aNo=o("qdqbert"),nNo=o(" \u2014 "),jD=a("a"),sNo=o("QDQBertForQuestionAnswering"),lNo=o(" (QDQBert model)"),iNo=l(),rF=a("li"),cfe=a("strong"),dNo=o("reformer"),cNo=o(" \u2014 "),DD=a("a"),fNo=o("ReformerForQuestionAnswering"),mNo=o(" (Reformer model)"),gNo=l(),tF=a("li"),ffe=a("strong"),hNo=o("rembert"),pNo=o(" \u2014 "),GD=a("a"),_No=o("RemBertForQuestionAnswering"),uNo=o(" (RemBERT model)"),bNo=l(),aF=a("li"),mfe=a("strong"),FNo=o("roberta"),vNo=o(" \u2014 "),OD=a("a"),TNo=o("RobertaForQuestionAnswering"),MNo=o(" (RoBERTa model)"),ENo=l(),nF=a("li"),gfe=a("strong"),CNo=o("roformer"),wNo=o(" \u2014 "),VD=a("a"),ANo=o("RoFormerForQuestionAnswering"),yNo=o(" (RoFormer model)"),LNo=l(),sF=a("li"),hfe=a("strong"),xNo=o("splinter"),kNo=o(" \u2014 "),XD=a("a"),SNo=o("SplinterForQuestionAnswering"),RNo=o(" (Splinter model)"),BNo=l(),lF=a("li"),pfe=a("strong"),PNo=o("squeezebert"),$No=o(" \u2014 "),zD=a("a"),INo=o("SqueezeBertForQuestionAnswering"),qNo=o(" (SqueezeBERT model)"),NNo=l(),iF=a("li"),_fe=a("strong"),jNo=o("xlm"),DNo=o(" \u2014 "),QD=a("a"),GNo=o("XLMForQuestionAnsweringSimple"),ONo=o(" (XLM model)"),VNo=l(),dF=a("li"),ufe=a("strong"),XNo=o("xlm-roberta"),zNo=o(" \u2014 "),WD=a("a"),QNo=o("XLMRobertaForQuestionAnswering"),WNo=o(" (XLM-RoBERTa model)"),HNo=l(),cF=a("li"),bfe=a("strong"),UNo=o("xlm-roberta-xl"),JNo=o(" \u2014 "),HD=a("a"),YNo=o("XLMRobertaXLForQuestionAnswering"),KNo=o(" (XLM-RoBERTa-XL model)"),ZNo=l(),fF=a("li"),Ffe=a("strong"),ejo=o("xlnet"),ojo=o(" \u2014 "),UD=a("a"),rjo=o("XLNetForQuestionAnsweringSimple"),tjo=o(" (XLNet model)"),ajo=l(),mF=a("li"),vfe=a("strong"),njo=o("yoso"),sjo=o(" \u2014 "),JD=a("a"),ljo=o("YosoForQuestionAnswering"),ijo=o(" (YOSO model)"),djo=l(),gF=a("p"),cjo=o("The model is set in evaluation mode by default using "),Tfe=a("code"),fjo=o("model.eval()"),mjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mfe=a("code"),gjo=o("model.train()"),hjo=l(),Efe=a("p"),pjo=o("Examples:"),_jo=l(),f(SC.$$.fragment),VBe=l(),Ld=a("h2"),hF=a("a"),Cfe=a("span"),f(RC.$$.fragment),ujo=l(),wfe=a("span"),bjo=o("AutoModelForTableQuestionAnswering"),XBe=l(),sr=a("div"),f(BC.$$.fragment),Fjo=l(),xd=a("p"),vjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),YD=a("a"),Tjo=o("from_pretrained()"),Mjo=o(" class method or the "),KD=a("a"),Ejo=o("from_config()"),Cjo=o(` class
method.`),wjo=l(),PC=a("p"),Ajo=o("This class cannot be instantiated directly using "),Afe=a("code"),yjo=o("__init__()"),Ljo=o(" (throws an error)."),xjo=l(),et=a("div"),f($C.$$.fragment),kjo=l(),yfe=a("p"),Sjo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Rjo=l(),kd=a("p"),Bjo=o(`Note:
Loading a model from its configuration file does `),Lfe=a("strong"),Pjo=o("not"),$jo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=a("a"),Ijo=o("from_pretrained()"),qjo=o(" to load the model weights."),Njo=l(),xfe=a("p"),jjo=o("Examples:"),Djo=l(),f(IC.$$.fragment),Gjo=l(),He=a("div"),f(qC.$$.fragment),Ojo=l(),kfe=a("p"),Vjo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Xjo=l(),en=a("p"),zjo=o("The model class to instantiate is selected based on the "),Sfe=a("code"),Qjo=o("model_type"),Wjo=o(` property of the config object (either
passed as an argument or loaded from `),Rfe=a("code"),Hjo=o("pretrained_model_name_or_path"),Ujo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bfe=a("code"),Jjo=o("pretrained_model_name_or_path"),Yjo=o(":"),Kjo=l(),Pfe=a("ul"),pF=a("li"),$fe=a("strong"),Zjo=o("tapas"),eDo=o(" \u2014 "),eG=a("a"),oDo=o("TapasForQuestionAnswering"),rDo=o(" (TAPAS model)"),tDo=l(),_F=a("p"),aDo=o("The model is set in evaluation mode by default using "),Ife=a("code"),nDo=o("model.eval()"),sDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qfe=a("code"),lDo=o("model.train()"),iDo=l(),Nfe=a("p"),dDo=o("Examples:"),cDo=l(),f(NC.$$.fragment),zBe=l(),Sd=a("h2"),uF=a("a"),jfe=a("span"),f(jC.$$.fragment),fDo=l(),Dfe=a("span"),mDo=o("AutoModelForImageClassification"),QBe=l(),lr=a("div"),f(DC.$$.fragment),gDo=l(),Rd=a("p"),hDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oG=a("a"),pDo=o("from_pretrained()"),_Do=o(" class method or the "),rG=a("a"),uDo=o("from_config()"),bDo=o(` class
method.`),FDo=l(),GC=a("p"),vDo=o("This class cannot be instantiated directly using "),Gfe=a("code"),TDo=o("__init__()"),MDo=o(" (throws an error)."),EDo=l(),ot=a("div"),f(OC.$$.fragment),CDo=l(),Ofe=a("p"),wDo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ADo=l(),Bd=a("p"),yDo=o(`Note:
Loading a model from its configuration file does `),Vfe=a("strong"),LDo=o("not"),xDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),kDo=o("from_pretrained()"),SDo=o(" to load the model weights."),RDo=l(),Xfe=a("p"),BDo=o("Examples:"),PDo=l(),f(VC.$$.fragment),$Do=l(),Ue=a("div"),f(XC.$$.fragment),IDo=l(),zfe=a("p"),qDo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),NDo=l(),on=a("p"),jDo=o("The model class to instantiate is selected based on the "),Qfe=a("code"),DDo=o("model_type"),GDo=o(` property of the config object (either
passed as an argument or loaded from `),Wfe=a("code"),ODo=o("pretrained_model_name_or_path"),VDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hfe=a("code"),XDo=o("pretrained_model_name_or_path"),zDo=o(":"),QDo=l(),de=a("ul"),bF=a("li"),Ufe=a("strong"),WDo=o("beit"),HDo=o(" \u2014 "),aG=a("a"),UDo=o("BeitForImageClassification"),JDo=o(" (BEiT model)"),YDo=l(),FF=a("li"),Jfe=a("strong"),KDo=o("convnext"),ZDo=o(" \u2014 "),nG=a("a"),eGo=o("ConvNextForImageClassification"),oGo=o(" (ConvNext model)"),rGo=l(),vF=a("li"),Yfe=a("strong"),tGo=o("data2vec-vision"),aGo=o(" \u2014 "),sG=a("a"),nGo=o("Data2VecVisionForImageClassification"),sGo=o(" (Data2VecVision model)"),lGo=l(),Os=a("li"),Kfe=a("strong"),iGo=o("deit"),dGo=o(" \u2014 "),lG=a("a"),cGo=o("DeiTForImageClassification"),fGo=o(" or "),iG=a("a"),mGo=o("DeiTForImageClassificationWithTeacher"),gGo=o(" (DeiT model)"),hGo=l(),TF=a("li"),Zfe=a("strong"),pGo=o("imagegpt"),_Go=o(" \u2014 "),dG=a("a"),uGo=o("ImageGPTForImageClassification"),bGo=o(" (ImageGPT model)"),FGo=l(),ma=a("li"),eme=a("strong"),vGo=o("perceiver"),TGo=o(" \u2014 "),cG=a("a"),MGo=o("PerceiverForImageClassificationLearned"),EGo=o(" or "),fG=a("a"),CGo=o("PerceiverForImageClassificationFourier"),wGo=o(" or "),mG=a("a"),AGo=o("PerceiverForImageClassificationConvProcessing"),yGo=o(" (Perceiver model)"),LGo=l(),MF=a("li"),ome=a("strong"),xGo=o("poolformer"),kGo=o(" \u2014 "),gG=a("a"),SGo=o("PoolFormerForImageClassification"),RGo=o(" (PoolFormer model)"),BGo=l(),EF=a("li"),rme=a("strong"),PGo=o("regnet"),$Go=o(" \u2014 "),hG=a("a"),IGo=o("RegNetForImageClassification"),qGo=o(" (RegNet model)"),NGo=l(),CF=a("li"),tme=a("strong"),jGo=o("resnet"),DGo=o(" \u2014 "),pG=a("a"),GGo=o("ResNetForImageClassification"),OGo=o(" (ResNet model)"),VGo=l(),wF=a("li"),ame=a("strong"),XGo=o("segformer"),zGo=o(" \u2014 "),_G=a("a"),QGo=o("SegformerForImageClassification"),WGo=o(" (SegFormer model)"),HGo=l(),AF=a("li"),nme=a("strong"),UGo=o("swin"),JGo=o(" \u2014 "),uG=a("a"),YGo=o("SwinForImageClassification"),KGo=o(" (Swin model)"),ZGo=l(),yF=a("li"),sme=a("strong"),eOo=o("van"),oOo=o(" \u2014 "),bG=a("a"),rOo=o("VanForImageClassification"),tOo=o(" (VAN model)"),aOo=l(),LF=a("li"),lme=a("strong"),nOo=o("vit"),sOo=o(" \u2014 "),FG=a("a"),lOo=o("ViTForImageClassification"),iOo=o(" (ViT model)"),dOo=l(),xF=a("p"),cOo=o("The model is set in evaluation mode by default using "),ime=a("code"),fOo=o("model.eval()"),mOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dme=a("code"),gOo=o("model.train()"),hOo=l(),cme=a("p"),pOo=o("Examples:"),_Oo=l(),f(zC.$$.fragment),WBe=l(),Pd=a("h2"),kF=a("a"),fme=a("span"),f(QC.$$.fragment),uOo=l(),mme=a("span"),bOo=o("AutoModelForVision2Seq"),HBe=l(),ir=a("div"),f(WC.$$.fragment),FOo=l(),$d=a("p"),vOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vG=a("a"),TOo=o("from_pretrained()"),MOo=o(" class method or the "),TG=a("a"),EOo=o("from_config()"),COo=o(` class
method.`),wOo=l(),HC=a("p"),AOo=o("This class cannot be instantiated directly using "),gme=a("code"),yOo=o("__init__()"),LOo=o(" (throws an error)."),xOo=l(),rt=a("div"),f(UC.$$.fragment),kOo=l(),hme=a("p"),SOo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ROo=l(),Id=a("p"),BOo=o(`Note:
Loading a model from its configuration file does `),pme=a("strong"),POo=o("not"),$Oo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=a("a"),IOo=o("from_pretrained()"),qOo=o(" to load the model weights."),NOo=l(),_me=a("p"),jOo=o("Examples:"),DOo=l(),f(JC.$$.fragment),GOo=l(),Je=a("div"),f(YC.$$.fragment),OOo=l(),ume=a("p"),VOo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),XOo=l(),rn=a("p"),zOo=o("The model class to instantiate is selected based on the "),bme=a("code"),QOo=o("model_type"),WOo=o(` property of the config object (either
passed as an argument or loaded from `),Fme=a("code"),HOo=o("pretrained_model_name_or_path"),UOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vme=a("code"),JOo=o("pretrained_model_name_or_path"),YOo=o(":"),KOo=l(),Tme=a("ul"),SF=a("li"),Mme=a("strong"),ZOo=o("vision-encoder-decoder"),eVo=o(" \u2014 "),EG=a("a"),oVo=o("VisionEncoderDecoderModel"),rVo=o(" (Vision Encoder decoder model)"),tVo=l(),RF=a("p"),aVo=o("The model is set in evaluation mode by default using "),Eme=a("code"),nVo=o("model.eval()"),sVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cme=a("code"),lVo=o("model.train()"),iVo=l(),wme=a("p"),dVo=o("Examples:"),cVo=l(),f(KC.$$.fragment),UBe=l(),qd=a("h2"),BF=a("a"),Ame=a("span"),f(ZC.$$.fragment),fVo=l(),yme=a("span"),mVo=o("AutoModelForAudioClassification"),JBe=l(),dr=a("div"),f(ew.$$.fragment),gVo=l(),Nd=a("p"),hVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),CG=a("a"),pVo=o("from_pretrained()"),_Vo=o(" class method or the "),wG=a("a"),uVo=o("from_config()"),bVo=o(` class
method.`),FVo=l(),ow=a("p"),vVo=o("This class cannot be instantiated directly using "),Lme=a("code"),TVo=o("__init__()"),MVo=o(" (throws an error)."),EVo=l(),tt=a("div"),f(rw.$$.fragment),CVo=l(),xme=a("p"),wVo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),AVo=l(),jd=a("p"),yVo=o(`Note:
Loading a model from its configuration file does `),kme=a("strong"),LVo=o("not"),xVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AG=a("a"),kVo=o("from_pretrained()"),SVo=o(" to load the model weights."),RVo=l(),Sme=a("p"),BVo=o("Examples:"),PVo=l(),f(tw.$$.fragment),$Vo=l(),Ye=a("div"),f(aw.$$.fragment),IVo=l(),Rme=a("p"),qVo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),NVo=l(),tn=a("p"),jVo=o("The model class to instantiate is selected based on the "),Bme=a("code"),DVo=o("model_type"),GVo=o(` property of the config object (either
passed as an argument or loaded from `),Pme=a("code"),OVo=o("pretrained_model_name_or_path"),VVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$me=a("code"),XVo=o("pretrained_model_name_or_path"),zVo=o(":"),QVo=l(),Re=a("ul"),PF=a("li"),Ime=a("strong"),WVo=o("data2vec-audio"),HVo=o(" \u2014 "),yG=a("a"),UVo=o("Data2VecAudioForSequenceClassification"),JVo=o(" (Data2VecAudio model)"),YVo=l(),$F=a("li"),qme=a("strong"),KVo=o("hubert"),ZVo=o(" \u2014 "),LG=a("a"),eXo=o("HubertForSequenceClassification"),oXo=o(" (Hubert model)"),rXo=l(),IF=a("li"),Nme=a("strong"),tXo=o("sew"),aXo=o(" \u2014 "),xG=a("a"),nXo=o("SEWForSequenceClassification"),sXo=o(" (SEW model)"),lXo=l(),qF=a("li"),jme=a("strong"),iXo=o("sew-d"),dXo=o(" \u2014 "),kG=a("a"),cXo=o("SEWDForSequenceClassification"),fXo=o(" (SEW-D model)"),mXo=l(),NF=a("li"),Dme=a("strong"),gXo=o("unispeech"),hXo=o(" \u2014 "),SG=a("a"),pXo=o("UniSpeechForSequenceClassification"),_Xo=o(" (UniSpeech model)"),uXo=l(),jF=a("li"),Gme=a("strong"),bXo=o("unispeech-sat"),FXo=o(" \u2014 "),RG=a("a"),vXo=o("UniSpeechSatForSequenceClassification"),TXo=o(" (UniSpeechSat model)"),MXo=l(),DF=a("li"),Ome=a("strong"),EXo=o("wav2vec2"),CXo=o(" \u2014 "),BG=a("a"),wXo=o("Wav2Vec2ForSequenceClassification"),AXo=o(" (Wav2Vec2 model)"),yXo=l(),GF=a("li"),Vme=a("strong"),LXo=o("wavlm"),xXo=o(" \u2014 "),PG=a("a"),kXo=o("WavLMForSequenceClassification"),SXo=o(" (WavLM model)"),RXo=l(),OF=a("p"),BXo=o("The model is set in evaluation mode by default using "),Xme=a("code"),PXo=o("model.eval()"),$Xo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zme=a("code"),IXo=o("model.train()"),qXo=l(),Qme=a("p"),NXo=o("Examples:"),jXo=l(),f(nw.$$.fragment),YBe=l(),Dd=a("h2"),VF=a("a"),Wme=a("span"),f(sw.$$.fragment),DXo=l(),Hme=a("span"),GXo=o("AutoModelForAudioFrameClassification"),KBe=l(),cr=a("div"),f(lw.$$.fragment),OXo=l(),Gd=a("p"),VXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),$G=a("a"),XXo=o("from_pretrained()"),zXo=o(" class method or the "),IG=a("a"),QXo=o("from_config()"),WXo=o(` class
method.`),HXo=l(),iw=a("p"),UXo=o("This class cannot be instantiated directly using "),Ume=a("code"),JXo=o("__init__()"),YXo=o(" (throws an error)."),KXo=l(),at=a("div"),f(dw.$$.fragment),ZXo=l(),Jme=a("p"),ezo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ozo=l(),Od=a("p"),rzo=o(`Note:
Loading a model from its configuration file does `),Yme=a("strong"),tzo=o("not"),azo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=a("a"),nzo=o("from_pretrained()"),szo=o(" to load the model weights."),lzo=l(),Kme=a("p"),izo=o("Examples:"),dzo=l(),f(cw.$$.fragment),czo=l(),Ke=a("div"),f(fw.$$.fragment),fzo=l(),Zme=a("p"),mzo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),gzo=l(),an=a("p"),hzo=o("The model class to instantiate is selected based on the "),ege=a("code"),pzo=o("model_type"),_zo=o(` property of the config object (either
passed as an argument or loaded from `),oge=a("code"),uzo=o("pretrained_model_name_or_path"),bzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rge=a("code"),Fzo=o("pretrained_model_name_or_path"),vzo=o(":"),Tzo=l(),nn=a("ul"),XF=a("li"),tge=a("strong"),Mzo=o("data2vec-audio"),Ezo=o(" \u2014 "),NG=a("a"),Czo=o("Data2VecAudioForAudioFrameClassification"),wzo=o(" (Data2VecAudio model)"),Azo=l(),zF=a("li"),age=a("strong"),yzo=o("unispeech-sat"),Lzo=o(" \u2014 "),jG=a("a"),xzo=o("UniSpeechSatForAudioFrameClassification"),kzo=o(" (UniSpeechSat model)"),Szo=l(),QF=a("li"),nge=a("strong"),Rzo=o("wav2vec2"),Bzo=o(" \u2014 "),DG=a("a"),Pzo=o("Wav2Vec2ForAudioFrameClassification"),$zo=o(" (Wav2Vec2 model)"),Izo=l(),WF=a("li"),sge=a("strong"),qzo=o("wavlm"),Nzo=o(" \u2014 "),GG=a("a"),jzo=o("WavLMForAudioFrameClassification"),Dzo=o(" (WavLM model)"),Gzo=l(),HF=a("p"),Ozo=o("The model is set in evaluation mode by default using "),lge=a("code"),Vzo=o("model.eval()"),Xzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ige=a("code"),zzo=o("model.train()"),Qzo=l(),dge=a("p"),Wzo=o("Examples:"),Hzo=l(),f(mw.$$.fragment),ZBe=l(),Vd=a("h2"),UF=a("a"),cge=a("span"),f(gw.$$.fragment),Uzo=l(),fge=a("span"),Jzo=o("AutoModelForCTC"),ePe=l(),fr=a("div"),f(hw.$$.fragment),Yzo=l(),Xd=a("p"),Kzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),OG=a("a"),Zzo=o("from_pretrained()"),eQo=o(" class method or the "),VG=a("a"),oQo=o("from_config()"),rQo=o(` class
method.`),tQo=l(),pw=a("p"),aQo=o("This class cannot be instantiated directly using "),mge=a("code"),nQo=o("__init__()"),sQo=o(" (throws an error)."),lQo=l(),nt=a("div"),f(_w.$$.fragment),iQo=l(),gge=a("p"),dQo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),cQo=l(),zd=a("p"),fQo=o(`Note:
Loading a model from its configuration file does `),hge=a("strong"),mQo=o("not"),gQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XG=a("a"),hQo=o("from_pretrained()"),pQo=o(" to load the model weights."),_Qo=l(),pge=a("p"),uQo=o("Examples:"),bQo=l(),f(uw.$$.fragment),FQo=l(),Ze=a("div"),f(bw.$$.fragment),vQo=l(),_ge=a("p"),TQo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),MQo=l(),sn=a("p"),EQo=o("The model class to instantiate is selected based on the "),uge=a("code"),CQo=o("model_type"),wQo=o(` property of the config object (either
passed as an argument or loaded from `),bge=a("code"),AQo=o("pretrained_model_name_or_path"),yQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fge=a("code"),LQo=o("pretrained_model_name_or_path"),xQo=o(":"),kQo=l(),Be=a("ul"),JF=a("li"),vge=a("strong"),SQo=o("data2vec-audio"),RQo=o(" \u2014 "),zG=a("a"),BQo=o("Data2VecAudioForCTC"),PQo=o(" (Data2VecAudio model)"),$Qo=l(),YF=a("li"),Tge=a("strong"),IQo=o("hubert"),qQo=o(" \u2014 "),QG=a("a"),NQo=o("HubertForCTC"),jQo=o(" (Hubert model)"),DQo=l(),KF=a("li"),Mge=a("strong"),GQo=o("sew"),OQo=o(" \u2014 "),WG=a("a"),VQo=o("SEWForCTC"),XQo=o(" (SEW model)"),zQo=l(),ZF=a("li"),Ege=a("strong"),QQo=o("sew-d"),WQo=o(" \u2014 "),HG=a("a"),HQo=o("SEWDForCTC"),UQo=o(" (SEW-D model)"),JQo=l(),ev=a("li"),Cge=a("strong"),YQo=o("unispeech"),KQo=o(" \u2014 "),UG=a("a"),ZQo=o("UniSpeechForCTC"),eWo=o(" (UniSpeech model)"),oWo=l(),ov=a("li"),wge=a("strong"),rWo=o("unispeech-sat"),tWo=o(" \u2014 "),JG=a("a"),aWo=o("UniSpeechSatForCTC"),nWo=o(" (UniSpeechSat model)"),sWo=l(),rv=a("li"),Age=a("strong"),lWo=o("wav2vec2"),iWo=o(" \u2014 "),YG=a("a"),dWo=o("Wav2Vec2ForCTC"),cWo=o(" (Wav2Vec2 model)"),fWo=l(),tv=a("li"),yge=a("strong"),mWo=o("wavlm"),gWo=o(" \u2014 "),KG=a("a"),hWo=o("WavLMForCTC"),pWo=o(" (WavLM model)"),_Wo=l(),av=a("p"),uWo=o("The model is set in evaluation mode by default using "),Lge=a("code"),bWo=o("model.eval()"),FWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xge=a("code"),vWo=o("model.train()"),TWo=l(),kge=a("p"),MWo=o("Examples:"),EWo=l(),f(Fw.$$.fragment),oPe=l(),Qd=a("h2"),nv=a("a"),Sge=a("span"),f(vw.$$.fragment),CWo=l(),Rge=a("span"),wWo=o("AutoModelForSpeechSeq2Seq"),rPe=l(),mr=a("div"),f(Tw.$$.fragment),AWo=l(),Wd=a("p"),yWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZG=a("a"),LWo=o("from_pretrained()"),xWo=o(" class method or the "),eO=a("a"),kWo=o("from_config()"),SWo=o(` class
method.`),RWo=l(),Mw=a("p"),BWo=o("This class cannot be instantiated directly using "),Bge=a("code"),PWo=o("__init__()"),$Wo=o(" (throws an error)."),IWo=l(),st=a("div"),f(Ew.$$.fragment),qWo=l(),Pge=a("p"),NWo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jWo=l(),Hd=a("p"),DWo=o(`Note:
Loading a model from its configuration file does `),$ge=a("strong"),GWo=o("not"),OWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oO=a("a"),VWo=o("from_pretrained()"),XWo=o(" to load the model weights."),zWo=l(),Ige=a("p"),QWo=o("Examples:"),WWo=l(),f(Cw.$$.fragment),HWo=l(),eo=a("div"),f(ww.$$.fragment),UWo=l(),qge=a("p"),JWo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),YWo=l(),ln=a("p"),KWo=o("The model class to instantiate is selected based on the "),Nge=a("code"),ZWo=o("model_type"),eHo=o(` property of the config object (either
passed as an argument or loaded from `),jge=a("code"),oHo=o("pretrained_model_name_or_path"),rHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=a("code"),tHo=o("pretrained_model_name_or_path"),aHo=o(":"),nHo=l(),Aw=a("ul"),sv=a("li"),Gge=a("strong"),sHo=o("speech-encoder-decoder"),lHo=o(" \u2014 "),rO=a("a"),iHo=o("SpeechEncoderDecoderModel"),dHo=o(" (Speech Encoder decoder model)"),cHo=l(),lv=a("li"),Oge=a("strong"),fHo=o("speech_to_text"),mHo=o(" \u2014 "),tO=a("a"),gHo=o("Speech2TextForConditionalGeneration"),hHo=o(" (Speech2Text model)"),pHo=l(),iv=a("p"),_Ho=o("The model is set in evaluation mode by default using "),Vge=a("code"),uHo=o("model.eval()"),bHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xge=a("code"),FHo=o("model.train()"),vHo=l(),zge=a("p"),THo=o("Examples:"),MHo=l(),f(yw.$$.fragment),tPe=l(),Ud=a("h2"),dv=a("a"),Qge=a("span"),f(Lw.$$.fragment),EHo=l(),Wge=a("span"),CHo=o("AutoModelForAudioXVector"),aPe=l(),gr=a("div"),f(xw.$$.fragment),wHo=l(),Jd=a("p"),AHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),aO=a("a"),yHo=o("from_pretrained()"),LHo=o(" class method or the "),nO=a("a"),xHo=o("from_config()"),kHo=o(` class
method.`),SHo=l(),kw=a("p"),RHo=o("This class cannot be instantiated directly using "),Hge=a("code"),BHo=o("__init__()"),PHo=o(" (throws an error)."),$Ho=l(),lt=a("div"),f(Sw.$$.fragment),IHo=l(),Uge=a("p"),qHo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),NHo=l(),Yd=a("p"),jHo=o(`Note:
Loading a model from its configuration file does `),Jge=a("strong"),DHo=o("not"),GHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=a("a"),OHo=o("from_pretrained()"),VHo=o(" to load the model weights."),XHo=l(),Yge=a("p"),zHo=o("Examples:"),QHo=l(),f(Rw.$$.fragment),WHo=l(),oo=a("div"),f(Bw.$$.fragment),HHo=l(),Kge=a("p"),UHo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),JHo=l(),dn=a("p"),YHo=o("The model class to instantiate is selected based on the "),Zge=a("code"),KHo=o("model_type"),ZHo=o(` property of the config object (either
passed as an argument or loaded from `),ehe=a("code"),eUo=o("pretrained_model_name_or_path"),oUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ohe=a("code"),rUo=o("pretrained_model_name_or_path"),tUo=o(":"),aUo=l(),cn=a("ul"),cv=a("li"),rhe=a("strong"),nUo=o("data2vec-audio"),sUo=o(" \u2014 "),lO=a("a"),lUo=o("Data2VecAudioForXVector"),iUo=o(" (Data2VecAudio model)"),dUo=l(),fv=a("li"),the=a("strong"),cUo=o("unispeech-sat"),fUo=o(" \u2014 "),iO=a("a"),mUo=o("UniSpeechSatForXVector"),gUo=o(" (UniSpeechSat model)"),hUo=l(),mv=a("li"),ahe=a("strong"),pUo=o("wav2vec2"),_Uo=o(" \u2014 "),dO=a("a"),uUo=o("Wav2Vec2ForXVector"),bUo=o(" (Wav2Vec2 model)"),FUo=l(),gv=a("li"),nhe=a("strong"),vUo=o("wavlm"),TUo=o(" \u2014 "),cO=a("a"),MUo=o("WavLMForXVector"),EUo=o(" (WavLM model)"),CUo=l(),hv=a("p"),wUo=o("The model is set in evaluation mode by default using "),she=a("code"),AUo=o("model.eval()"),yUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=a("code"),LUo=o("model.train()"),xUo=l(),ihe=a("p"),kUo=o("Examples:"),SUo=l(),f(Pw.$$.fragment),nPe=l(),Kd=a("h2"),pv=a("a"),dhe=a("span"),f($w.$$.fragment),RUo=l(),che=a("span"),BUo=o("AutoModelForMaskedImageModeling"),sPe=l(),hr=a("div"),f(Iw.$$.fragment),PUo=l(),Zd=a("p"),$Uo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),fO=a("a"),IUo=o("from_pretrained()"),qUo=o(" class method or the "),mO=a("a"),NUo=o("from_config()"),jUo=o(` class
method.`),DUo=l(),qw=a("p"),GUo=o("This class cannot be instantiated directly using "),fhe=a("code"),OUo=o("__init__()"),VUo=o(" (throws an error)."),XUo=l(),it=a("div"),f(Nw.$$.fragment),zUo=l(),mhe=a("p"),QUo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),WUo=l(),ec=a("p"),HUo=o(`Note:
Loading a model from its configuration file does `),ghe=a("strong"),UUo=o("not"),JUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gO=a("a"),YUo=o("from_pretrained()"),KUo=o(" to load the model weights."),ZUo=l(),hhe=a("p"),eJo=o("Examples:"),oJo=l(),f(jw.$$.fragment),rJo=l(),ro=a("div"),f(Dw.$$.fragment),tJo=l(),phe=a("p"),aJo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),nJo=l(),fn=a("p"),sJo=o("The model class to instantiate is selected based on the "),_he=a("code"),lJo=o("model_type"),iJo=o(` property of the config object (either
passed as an argument or loaded from `),uhe=a("code"),dJo=o("pretrained_model_name_or_path"),cJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=a("code"),fJo=o("pretrained_model_name_or_path"),mJo=o(":"),gJo=l(),oc=a("ul"),_v=a("li"),Fhe=a("strong"),hJo=o("deit"),pJo=o(" \u2014 "),hO=a("a"),_Jo=o("DeiTForMaskedImageModeling"),uJo=o(" (DeiT model)"),bJo=l(),uv=a("li"),vhe=a("strong"),FJo=o("swin"),vJo=o(" \u2014 "),pO=a("a"),TJo=o("SwinForMaskedImageModeling"),MJo=o(" (Swin model)"),EJo=l(),bv=a("li"),The=a("strong"),CJo=o("vit"),wJo=o(" \u2014 "),_O=a("a"),AJo=o("ViTForMaskedImageModeling"),yJo=o(" (ViT model)"),LJo=l(),Fv=a("p"),xJo=o("The model is set in evaluation mode by default using "),Mhe=a("code"),kJo=o("model.eval()"),SJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ehe=a("code"),RJo=o("model.train()"),BJo=l(),Che=a("p"),PJo=o("Examples:"),$Jo=l(),f(Gw.$$.fragment),lPe=l(),rc=a("h2"),vv=a("a"),whe=a("span"),f(Ow.$$.fragment),IJo=l(),Ahe=a("span"),qJo=o("AutoModelForObjectDetection"),iPe=l(),pr=a("div"),f(Vw.$$.fragment),NJo=l(),tc=a("p"),jJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),uO=a("a"),DJo=o("from_pretrained()"),GJo=o(" class method or the "),bO=a("a"),OJo=o("from_config()"),VJo=o(` class
method.`),XJo=l(),Xw=a("p"),zJo=o("This class cannot be instantiated directly using "),yhe=a("code"),QJo=o("__init__()"),WJo=o(" (throws an error)."),HJo=l(),dt=a("div"),f(zw.$$.fragment),UJo=l(),Lhe=a("p"),JJo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),YJo=l(),ac=a("p"),KJo=o(`Note:
Loading a model from its configuration file does `),xhe=a("strong"),ZJo=o("not"),eYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=a("a"),oYo=o("from_pretrained()"),rYo=o(" to load the model weights."),tYo=l(),khe=a("p"),aYo=o("Examples:"),nYo=l(),f(Qw.$$.fragment),sYo=l(),to=a("div"),f(Ww.$$.fragment),lYo=l(),She=a("p"),iYo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),dYo=l(),mn=a("p"),cYo=o("The model class to instantiate is selected based on the "),Rhe=a("code"),fYo=o("model_type"),mYo=o(` property of the config object (either
passed as an argument or loaded from `),Bhe=a("code"),gYo=o("pretrained_model_name_or_path"),hYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Phe=a("code"),pYo=o("pretrained_model_name_or_path"),_Yo=o(":"),uYo=l(),$he=a("ul"),Tv=a("li"),Ihe=a("strong"),bYo=o("detr"),FYo=o(" \u2014 "),vO=a("a"),vYo=o("DetrForObjectDetection"),TYo=o(" (DETR model)"),MYo=l(),Mv=a("p"),EYo=o("The model is set in evaluation mode by default using "),qhe=a("code"),CYo=o("model.eval()"),wYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=a("code"),AYo=o("model.train()"),yYo=l(),jhe=a("p"),LYo=o("Examples:"),xYo=l(),f(Hw.$$.fragment),dPe=l(),nc=a("h2"),Ev=a("a"),Dhe=a("span"),f(Uw.$$.fragment),kYo=l(),Ghe=a("span"),SYo=o("AutoModelForImageSegmentation"),cPe=l(),_r=a("div"),f(Jw.$$.fragment),RYo=l(),sc=a("p"),BYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),TO=a("a"),PYo=o("from_pretrained()"),$Yo=o(" class method or the "),MO=a("a"),IYo=o("from_config()"),qYo=o(` class
method.`),NYo=l(),Yw=a("p"),jYo=o("This class cannot be instantiated directly using "),Ohe=a("code"),DYo=o("__init__()"),GYo=o(" (throws an error)."),OYo=l(),ct=a("div"),f(Kw.$$.fragment),VYo=l(),Vhe=a("p"),XYo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),zYo=l(),lc=a("p"),QYo=o(`Note:
Loading a model from its configuration file does `),Xhe=a("strong"),WYo=o("not"),HYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EO=a("a"),UYo=o("from_pretrained()"),JYo=o(" to load the model weights."),YYo=l(),zhe=a("p"),KYo=o("Examples:"),ZYo=l(),f(Zw.$$.fragment),eKo=l(),ao=a("div"),f(eA.$$.fragment),oKo=l(),Qhe=a("p"),rKo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),tKo=l(),gn=a("p"),aKo=o("The model class to instantiate is selected based on the "),Whe=a("code"),nKo=o("model_type"),sKo=o(` property of the config object (either
passed as an argument or loaded from `),Hhe=a("code"),lKo=o("pretrained_model_name_or_path"),iKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=a("code"),dKo=o("pretrained_model_name_or_path"),cKo=o(":"),fKo=l(),Jhe=a("ul"),Cv=a("li"),Yhe=a("strong"),mKo=o("detr"),gKo=o(" \u2014 "),CO=a("a"),hKo=o("DetrForSegmentation"),pKo=o(" (DETR model)"),_Ko=l(),wv=a("p"),uKo=o("The model is set in evaluation mode by default using "),Khe=a("code"),bKo=o("model.eval()"),FKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=a("code"),vKo=o("model.train()"),TKo=l(),epe=a("p"),MKo=o("Examples:"),EKo=l(),f(oA.$$.fragment),fPe=l(),ic=a("h2"),Av=a("a"),ope=a("span"),f(rA.$$.fragment),CKo=l(),rpe=a("span"),wKo=o("AutoModelForSemanticSegmentation"),mPe=l(),ur=a("div"),f(tA.$$.fragment),AKo=l(),dc=a("p"),yKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),wO=a("a"),LKo=o("from_pretrained()"),xKo=o(" class method or the "),AO=a("a"),kKo=o("from_config()"),SKo=o(` class
method.`),RKo=l(),aA=a("p"),BKo=o("This class cannot be instantiated directly using "),tpe=a("code"),PKo=o("__init__()"),$Ko=o(" (throws an error)."),IKo=l(),ft=a("div"),f(nA.$$.fragment),qKo=l(),ape=a("p"),NKo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),jKo=l(),cc=a("p"),DKo=o(`Note:
Loading a model from its configuration file does `),npe=a("strong"),GKo=o("not"),OKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=a("a"),VKo=o("from_pretrained()"),XKo=o(" to load the model weights."),zKo=l(),spe=a("p"),QKo=o("Examples:"),WKo=l(),f(sA.$$.fragment),HKo=l(),no=a("div"),f(lA.$$.fragment),UKo=l(),lpe=a("p"),JKo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),YKo=l(),hn=a("p"),KKo=o("The model class to instantiate is selected based on the "),ipe=a("code"),ZKo=o("model_type"),eZo=o(` property of the config object (either
passed as an argument or loaded from `),dpe=a("code"),oZo=o("pretrained_model_name_or_path"),rZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=a("code"),tZo=o("pretrained_model_name_or_path"),aZo=o(":"),nZo=l(),pn=a("ul"),yv=a("li"),fpe=a("strong"),sZo=o("beit"),lZo=o(" \u2014 "),LO=a("a"),iZo=o("BeitForSemanticSegmentation"),dZo=o(" (BEiT model)"),cZo=l(),Lv=a("li"),mpe=a("strong"),fZo=o("data2vec-vision"),mZo=o(" \u2014 "),xO=a("a"),gZo=o("Data2VecVisionForSemanticSegmentation"),hZo=o(" (Data2VecVision model)"),pZo=l(),xv=a("li"),gpe=a("strong"),_Zo=o("dpt"),uZo=o(" \u2014 "),kO=a("a"),bZo=o("DPTForSemanticSegmentation"),FZo=o(" (DPT model)"),vZo=l(),kv=a("li"),hpe=a("strong"),TZo=o("segformer"),MZo=o(" \u2014 "),SO=a("a"),EZo=o("SegformerForSemanticSegmentation"),CZo=o(" (SegFormer model)"),wZo=l(),Sv=a("p"),AZo=o("The model is set in evaluation mode by default using "),ppe=a("code"),yZo=o("model.eval()"),LZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=a("code"),xZo=o("model.train()"),kZo=l(),upe=a("p"),SZo=o("Examples:"),RZo=l(),f(iA.$$.fragment),gPe=l(),fc=a("h2"),Rv=a("a"),bpe=a("span"),f(dA.$$.fragment),BZo=l(),Fpe=a("span"),PZo=o("AutoModelForInstanceSegmentation"),hPe=l(),br=a("div"),f(cA.$$.fragment),$Zo=l(),mc=a("p"),IZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),RO=a("a"),qZo=o("from_pretrained()"),NZo=o(" class method or the "),BO=a("a"),jZo=o("from_config()"),DZo=o(` class
method.`),GZo=l(),fA=a("p"),OZo=o("This class cannot be instantiated directly using "),vpe=a("code"),VZo=o("__init__()"),XZo=o(" (throws an error)."),zZo=l(),mt=a("div"),f(mA.$$.fragment),QZo=l(),Tpe=a("p"),WZo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),HZo=l(),gc=a("p"),UZo=o(`Note:
Loading a model from its configuration file does `),Mpe=a("strong"),JZo=o("not"),YZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=a("a"),KZo=o("from_pretrained()"),ZZo=o(" to load the model weights."),eer=l(),Epe=a("p"),oer=o("Examples:"),rer=l(),f(gA.$$.fragment),ter=l(),so=a("div"),f(hA.$$.fragment),aer=l(),Cpe=a("p"),ner=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ser=l(),_n=a("p"),ler=o("The model class to instantiate is selected based on the "),wpe=a("code"),ier=o("model_type"),der=o(` property of the config object (either
passed as an argument or loaded from `),Ape=a("code"),cer=o("pretrained_model_name_or_path"),fer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=a("code"),mer=o("pretrained_model_name_or_path"),ger=o(":"),her=l(),Lpe=a("ul"),Bv=a("li"),xpe=a("strong"),per=o("maskformer"),_er=o(" \u2014 "),$O=a("a"),uer=o("MaskFormerForInstanceSegmentation"),ber=o(" (MaskFormer model)"),Fer=l(),Pv=a("p"),ver=o("The model is set in evaluation mode by default using "),kpe=a("code"),Ter=o("model.eval()"),Mer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Spe=a("code"),Eer=o("model.train()"),Cer=l(),Rpe=a("p"),wer=o("Examples:"),Aer=l(),f(pA.$$.fragment),pPe=l(),hc=a("h2"),$v=a("a"),Bpe=a("span"),f(_A.$$.fragment),yer=l(),Ppe=a("span"),Ler=o("TFAutoModel"),_Pe=l(),Fr=a("div"),f(uA.$$.fragment),xer=l(),pc=a("p"),ker=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IO=a("a"),Ser=o("from_pretrained()"),Rer=o(" class method or the "),qO=a("a"),Ber=o("from_config()"),Per=o(` class
method.`),$er=l(),bA=a("p"),Ier=o("This class cannot be instantiated directly using "),$pe=a("code"),qer=o("__init__()"),Ner=o(" (throws an error)."),jer=l(),gt=a("div"),f(FA.$$.fragment),Der=l(),Ipe=a("p"),Ger=o("Instantiates one of the base model classes of the library from a configuration."),Oer=l(),_c=a("p"),Ver=o(`Note:
Loading a model from its configuration file does `),qpe=a("strong"),Xer=o("not"),zer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=a("a"),Qer=o("from_pretrained()"),Wer=o(" to load the model weights."),Her=l(),Npe=a("p"),Uer=o("Examples:"),Jer=l(),f(vA.$$.fragment),Yer=l(),ho=a("div"),f(TA.$$.fragment),Ker=l(),jpe=a("p"),Zer=o("Instantiate one of the base model classes of the library from a pretrained model."),eor=l(),un=a("p"),oor=o("The model class to instantiate is selected based on the "),Dpe=a("code"),ror=o("model_type"),tor=o(` property of the config object (either
passed as an argument or loaded from `),Gpe=a("code"),aor=o("pretrained_model_name_or_path"),nor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=a("code"),sor=o("pretrained_model_name_or_path"),lor=o(":"),ior=l(),x=a("ul"),Iv=a("li"),Vpe=a("strong"),dor=o("albert"),cor=o(" \u2014 "),jO=a("a"),mor=o("TFAlbertModel"),gor=o(" (ALBERT model)"),hor=l(),qv=a("li"),Xpe=a("strong"),por=o("bart"),_or=o(" \u2014 "),DO=a("a"),uor=o("TFBartModel"),bor=o(" (BART model)"),For=l(),Nv=a("li"),zpe=a("strong"),vor=o("bert"),Tor=o(" \u2014 "),GO=a("a"),Mor=o("TFBertModel"),Eor=o(" (BERT model)"),Cor=l(),jv=a("li"),Qpe=a("strong"),wor=o("blenderbot"),Aor=o(" \u2014 "),OO=a("a"),yor=o("TFBlenderbotModel"),Lor=o(" (Blenderbot model)"),xor=l(),Dv=a("li"),Wpe=a("strong"),kor=o("blenderbot-small"),Sor=o(" \u2014 "),VO=a("a"),Ror=o("TFBlenderbotSmallModel"),Bor=o(" (BlenderbotSmall model)"),Por=l(),Gv=a("li"),Hpe=a("strong"),$or=o("camembert"),Ior=o(" \u2014 "),XO=a("a"),qor=o("TFCamembertModel"),Nor=o(" (CamemBERT model)"),jor=l(),Ov=a("li"),Upe=a("strong"),Dor=o("clip"),Gor=o(" \u2014 "),zO=a("a"),Oor=o("TFCLIPModel"),Vor=o(" (CLIP model)"),Xor=l(),Vv=a("li"),Jpe=a("strong"),zor=o("convbert"),Qor=o(" \u2014 "),QO=a("a"),Wor=o("TFConvBertModel"),Hor=o(" (ConvBERT model)"),Uor=l(),Xv=a("li"),Ype=a("strong"),Jor=o("convnext"),Yor=o(" \u2014 "),WO=a("a"),Kor=o("TFConvNextModel"),Zor=o(" (ConvNext model)"),err=l(),zv=a("li"),Kpe=a("strong"),orr=o("ctrl"),rrr=o(" \u2014 "),HO=a("a"),trr=o("TFCTRLModel"),arr=o(" (CTRL model)"),nrr=l(),Qv=a("li"),Zpe=a("strong"),srr=o("deberta"),lrr=o(" \u2014 "),UO=a("a"),irr=o("TFDebertaModel"),drr=o(" (DeBERTa model)"),crr=l(),Wv=a("li"),e_e=a("strong"),frr=o("deberta-v2"),mrr=o(" \u2014 "),JO=a("a"),grr=o("TFDebertaV2Model"),hrr=o(" (DeBERTa-v2 model)"),prr=l(),Hv=a("li"),o_e=a("strong"),_rr=o("distilbert"),urr=o(" \u2014 "),YO=a("a"),brr=o("TFDistilBertModel"),Frr=o(" (DistilBERT model)"),vrr=l(),Uv=a("li"),r_e=a("strong"),Trr=o("dpr"),Mrr=o(" \u2014 "),KO=a("a"),Err=o("TFDPRQuestionEncoder"),Crr=o(" (DPR model)"),wrr=l(),Jv=a("li"),t_e=a("strong"),Arr=o("electra"),yrr=o(" \u2014 "),ZO=a("a"),Lrr=o("TFElectraModel"),xrr=o(" (ELECTRA model)"),krr=l(),Yv=a("li"),a_e=a("strong"),Srr=o("flaubert"),Rrr=o(" \u2014 "),eV=a("a"),Brr=o("TFFlaubertModel"),Prr=o(" (FlauBERT model)"),$rr=l(),Vs=a("li"),n_e=a("strong"),Irr=o("funnel"),qrr=o(" \u2014 "),oV=a("a"),Nrr=o("TFFunnelModel"),jrr=o(" or "),rV=a("a"),Drr=o("TFFunnelBaseModel"),Grr=o(" (Funnel Transformer model)"),Orr=l(),Kv=a("li"),s_e=a("strong"),Vrr=o("gpt2"),Xrr=o(" \u2014 "),tV=a("a"),zrr=o("TFGPT2Model"),Qrr=o(" (OpenAI GPT-2 model)"),Wrr=l(),Zv=a("li"),l_e=a("strong"),Hrr=o("gptj"),Urr=o(" \u2014 "),aV=a("a"),Jrr=o("TFGPTJModel"),Yrr=o(" (GPT-J model)"),Krr=l(),eT=a("li"),i_e=a("strong"),Zrr=o("hubert"),etr=o(" \u2014 "),nV=a("a"),otr=o("TFHubertModel"),rtr=o(" (Hubert model)"),ttr=l(),oT=a("li"),d_e=a("strong"),atr=o("layoutlm"),ntr=o(" \u2014 "),sV=a("a"),str=o("TFLayoutLMModel"),ltr=o(" (LayoutLM model)"),itr=l(),rT=a("li"),c_e=a("strong"),dtr=o("led"),ctr=o(" \u2014 "),lV=a("a"),ftr=o("TFLEDModel"),mtr=o(" (LED model)"),gtr=l(),tT=a("li"),f_e=a("strong"),htr=o("longformer"),ptr=o(" \u2014 "),iV=a("a"),_tr=o("TFLongformerModel"),utr=o(" (Longformer model)"),btr=l(),aT=a("li"),m_e=a("strong"),Ftr=o("lxmert"),vtr=o(" \u2014 "),dV=a("a"),Ttr=o("TFLxmertModel"),Mtr=o(" (LXMERT model)"),Etr=l(),nT=a("li"),g_e=a("strong"),Ctr=o("marian"),wtr=o(" \u2014 "),cV=a("a"),Atr=o("TFMarianModel"),ytr=o(" (Marian model)"),Ltr=l(),sT=a("li"),h_e=a("strong"),xtr=o("mbart"),ktr=o(" \u2014 "),fV=a("a"),Str=o("TFMBartModel"),Rtr=o(" (mBART model)"),Btr=l(),lT=a("li"),p_e=a("strong"),Ptr=o("mobilebert"),$tr=o(" \u2014 "),mV=a("a"),Itr=o("TFMobileBertModel"),qtr=o(" (MobileBERT model)"),Ntr=l(),iT=a("li"),__e=a("strong"),jtr=o("mpnet"),Dtr=o(" \u2014 "),gV=a("a"),Gtr=o("TFMPNetModel"),Otr=o(" (MPNet model)"),Vtr=l(),dT=a("li"),u_e=a("strong"),Xtr=o("mt5"),ztr=o(" \u2014 "),hV=a("a"),Qtr=o("TFMT5Model"),Wtr=o(" (mT5 model)"),Htr=l(),cT=a("li"),b_e=a("strong"),Utr=o("openai-gpt"),Jtr=o(" \u2014 "),pV=a("a"),Ytr=o("TFOpenAIGPTModel"),Ktr=o(" (OpenAI GPT model)"),Ztr=l(),fT=a("li"),F_e=a("strong"),ear=o("pegasus"),oar=o(" \u2014 "),_V=a("a"),rar=o("TFPegasusModel"),tar=o(" (Pegasus model)"),aar=l(),mT=a("li"),v_e=a("strong"),nar=o("rembert"),sar=o(" \u2014 "),uV=a("a"),lar=o("TFRemBertModel"),iar=o(" (RemBERT model)"),dar=l(),gT=a("li"),T_e=a("strong"),car=o("roberta"),far=o(" \u2014 "),bV=a("a"),mar=o("TFRobertaModel"),gar=o(" (RoBERTa model)"),har=l(),hT=a("li"),M_e=a("strong"),par=o("roformer"),_ar=o(" \u2014 "),FV=a("a"),uar=o("TFRoFormerModel"),bar=o(" (RoFormer model)"),Far=l(),pT=a("li"),E_e=a("strong"),Tar=o("speech_to_text"),Mar=o(" \u2014 "),vV=a("a"),Ear=o("TFSpeech2TextModel"),Car=o(" (Speech2Text model)"),war=l(),_T=a("li"),C_e=a("strong"),Aar=o("t5"),yar=o(" \u2014 "),TV=a("a"),Lar=o("TFT5Model"),xar=o(" (T5 model)"),kar=l(),uT=a("li"),w_e=a("strong"),Sar=o("tapas"),Rar=o(" \u2014 "),MV=a("a"),Bar=o("TFTapasModel"),Par=o(" (TAPAS model)"),$ar=l(),bT=a("li"),A_e=a("strong"),Iar=o("transfo-xl"),qar=o(" \u2014 "),EV=a("a"),Nar=o("TFTransfoXLModel"),jar=o(" (Transformer-XL model)"),Dar=l(),FT=a("li"),y_e=a("strong"),Gar=o("vit"),Oar=o(" \u2014 "),CV=a("a"),Var=o("TFViTModel"),Xar=o(" (ViT model)"),zar=l(),vT=a("li"),L_e=a("strong"),Qar=o("vit_mae"),War=o(" \u2014 "),wV=a("a"),Har=o("TFViTMAEModel"),Uar=o(" (ViTMAE model)"),Jar=l(),TT=a("li"),x_e=a("strong"),Yar=o("wav2vec2"),Kar=o(" \u2014 "),AV=a("a"),Zar=o("TFWav2Vec2Model"),enr=o(" (Wav2Vec2 model)"),onr=l(),MT=a("li"),k_e=a("strong"),rnr=o("xlm"),tnr=o(" \u2014 "),yV=a("a"),anr=o("TFXLMModel"),nnr=o(" (XLM model)"),snr=l(),ET=a("li"),S_e=a("strong"),lnr=o("xlm-roberta"),inr=o(" \u2014 "),LV=a("a"),dnr=o("TFXLMRobertaModel"),cnr=o(" (XLM-RoBERTa model)"),fnr=l(),CT=a("li"),R_e=a("strong"),mnr=o("xlnet"),gnr=o(" \u2014 "),xV=a("a"),hnr=o("TFXLNetModel"),pnr=o(" (XLNet model)"),_nr=l(),B_e=a("p"),unr=o("Examples:"),bnr=l(),f(MA.$$.fragment),uPe=l(),uc=a("h2"),wT=a("a"),P_e=a("span"),f(EA.$$.fragment),Fnr=l(),$_e=a("span"),vnr=o("TFAutoModelForPreTraining"),bPe=l(),vr=a("div"),f(CA.$$.fragment),Tnr=l(),bc=a("p"),Mnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kV=a("a"),Enr=o("from_pretrained()"),Cnr=o(" class method or the "),SV=a("a"),wnr=o("from_config()"),Anr=o(` class
method.`),ynr=l(),wA=a("p"),Lnr=o("This class cannot be instantiated directly using "),I_e=a("code"),xnr=o("__init__()"),knr=o(" (throws an error)."),Snr=l(),ht=a("div"),f(AA.$$.fragment),Rnr=l(),q_e=a("p"),Bnr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Pnr=l(),Fc=a("p"),$nr=o(`Note:
Loading a model from its configuration file does `),N_e=a("strong"),Inr=o("not"),qnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),Nnr=o("from_pretrained()"),jnr=o(" to load the model weights."),Dnr=l(),j_e=a("p"),Gnr=o("Examples:"),Onr=l(),f(yA.$$.fragment),Vnr=l(),po=a("div"),f(LA.$$.fragment),Xnr=l(),D_e=a("p"),znr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Qnr=l(),bn=a("p"),Wnr=o("The model class to instantiate is selected based on the "),G_e=a("code"),Hnr=o("model_type"),Unr=o(` property of the config object (either
passed as an argument or loaded from `),O_e=a("code"),Jnr=o("pretrained_model_name_or_path"),Ynr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=a("code"),Knr=o("pretrained_model_name_or_path"),Znr=o(":"),esr=l(),H=a("ul"),AT=a("li"),X_e=a("strong"),osr=o("albert"),rsr=o(" \u2014 "),BV=a("a"),tsr=o("TFAlbertForPreTraining"),asr=o(" (ALBERT model)"),nsr=l(),yT=a("li"),z_e=a("strong"),ssr=o("bart"),lsr=o(" \u2014 "),PV=a("a"),isr=o("TFBartForConditionalGeneration"),dsr=o(" (BART model)"),csr=l(),LT=a("li"),Q_e=a("strong"),fsr=o("bert"),msr=o(" \u2014 "),$V=a("a"),gsr=o("TFBertForPreTraining"),hsr=o(" (BERT model)"),psr=l(),xT=a("li"),W_e=a("strong"),_sr=o("camembert"),usr=o(" \u2014 "),IV=a("a"),bsr=o("TFCamembertForMaskedLM"),Fsr=o(" (CamemBERT model)"),vsr=l(),kT=a("li"),H_e=a("strong"),Tsr=o("ctrl"),Msr=o(" \u2014 "),qV=a("a"),Esr=o("TFCTRLLMHeadModel"),Csr=o(" (CTRL model)"),wsr=l(),ST=a("li"),U_e=a("strong"),Asr=o("distilbert"),ysr=o(" \u2014 "),NV=a("a"),Lsr=o("TFDistilBertForMaskedLM"),xsr=o(" (DistilBERT model)"),ksr=l(),RT=a("li"),J_e=a("strong"),Ssr=o("electra"),Rsr=o(" \u2014 "),jV=a("a"),Bsr=o("TFElectraForPreTraining"),Psr=o(" (ELECTRA model)"),$sr=l(),BT=a("li"),Y_e=a("strong"),Isr=o("flaubert"),qsr=o(" \u2014 "),DV=a("a"),Nsr=o("TFFlaubertWithLMHeadModel"),jsr=o(" (FlauBERT model)"),Dsr=l(),PT=a("li"),K_e=a("strong"),Gsr=o("funnel"),Osr=o(" \u2014 "),GV=a("a"),Vsr=o("TFFunnelForPreTraining"),Xsr=o(" (Funnel Transformer model)"),zsr=l(),$T=a("li"),Z_e=a("strong"),Qsr=o("gpt2"),Wsr=o(" \u2014 "),OV=a("a"),Hsr=o("TFGPT2LMHeadModel"),Usr=o(" (OpenAI GPT-2 model)"),Jsr=l(),IT=a("li"),eue=a("strong"),Ysr=o("layoutlm"),Ksr=o(" \u2014 "),VV=a("a"),Zsr=o("TFLayoutLMForMaskedLM"),elr=o(" (LayoutLM model)"),olr=l(),qT=a("li"),oue=a("strong"),rlr=o("lxmert"),tlr=o(" \u2014 "),XV=a("a"),alr=o("TFLxmertForPreTraining"),nlr=o(" (LXMERT model)"),slr=l(),NT=a("li"),rue=a("strong"),llr=o("mobilebert"),ilr=o(" \u2014 "),zV=a("a"),dlr=o("TFMobileBertForPreTraining"),clr=o(" (MobileBERT model)"),flr=l(),jT=a("li"),tue=a("strong"),mlr=o("mpnet"),glr=o(" \u2014 "),QV=a("a"),hlr=o("TFMPNetForMaskedLM"),plr=o(" (MPNet model)"),_lr=l(),DT=a("li"),aue=a("strong"),ulr=o("openai-gpt"),blr=o(" \u2014 "),WV=a("a"),Flr=o("TFOpenAIGPTLMHeadModel"),vlr=o(" (OpenAI GPT model)"),Tlr=l(),GT=a("li"),nue=a("strong"),Mlr=o("roberta"),Elr=o(" \u2014 "),HV=a("a"),Clr=o("TFRobertaForMaskedLM"),wlr=o(" (RoBERTa model)"),Alr=l(),OT=a("li"),sue=a("strong"),ylr=o("t5"),Llr=o(" \u2014 "),UV=a("a"),xlr=o("TFT5ForConditionalGeneration"),klr=o(" (T5 model)"),Slr=l(),VT=a("li"),lue=a("strong"),Rlr=o("tapas"),Blr=o(" \u2014 "),JV=a("a"),Plr=o("TFTapasForMaskedLM"),$lr=o(" (TAPAS model)"),Ilr=l(),XT=a("li"),iue=a("strong"),qlr=o("transfo-xl"),Nlr=o(" \u2014 "),YV=a("a"),jlr=o("TFTransfoXLLMHeadModel"),Dlr=o(" (Transformer-XL model)"),Glr=l(),zT=a("li"),due=a("strong"),Olr=o("vit_mae"),Vlr=o(" \u2014 "),KV=a("a"),Xlr=o("TFViTMAEForPreTraining"),zlr=o(" (ViTMAE model)"),Qlr=l(),QT=a("li"),cue=a("strong"),Wlr=o("xlm"),Hlr=o(" \u2014 "),ZV=a("a"),Ulr=o("TFXLMWithLMHeadModel"),Jlr=o(" (XLM model)"),Ylr=l(),WT=a("li"),fue=a("strong"),Klr=o("xlm-roberta"),Zlr=o(" \u2014 "),eX=a("a"),eir=o("TFXLMRobertaForMaskedLM"),oir=o(" (XLM-RoBERTa model)"),rir=l(),HT=a("li"),mue=a("strong"),tir=o("xlnet"),air=o(" \u2014 "),oX=a("a"),nir=o("TFXLNetLMHeadModel"),sir=o(" (XLNet model)"),lir=l(),gue=a("p"),iir=o("Examples:"),dir=l(),f(xA.$$.fragment),FPe=l(),vc=a("h2"),UT=a("a"),hue=a("span"),f(kA.$$.fragment),cir=l(),pue=a("span"),fir=o("TFAutoModelForCausalLM"),vPe=l(),Tr=a("div"),f(SA.$$.fragment),mir=l(),Tc=a("p"),gir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rX=a("a"),hir=o("from_pretrained()"),pir=o(" class method or the "),tX=a("a"),_ir=o("from_config()"),uir=o(` class
method.`),bir=l(),RA=a("p"),Fir=o("This class cannot be instantiated directly using "),_ue=a("code"),vir=o("__init__()"),Tir=o(" (throws an error)."),Mir=l(),pt=a("div"),f(BA.$$.fragment),Eir=l(),uue=a("p"),Cir=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wir=l(),Mc=a("p"),Air=o(`Note:
Loading a model from its configuration file does `),bue=a("strong"),yir=o("not"),Lir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),xir=o("from_pretrained()"),kir=o(" to load the model weights."),Sir=l(),Fue=a("p"),Rir=o("Examples:"),Bir=l(),f(PA.$$.fragment),Pir=l(),_o=a("div"),f($A.$$.fragment),$ir=l(),vue=a("p"),Iir=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qir=l(),Fn=a("p"),Nir=o("The model class to instantiate is selected based on the "),Tue=a("code"),jir=o("model_type"),Dir=o(` property of the config object (either
passed as an argument or loaded from `),Mue=a("code"),Gir=o("pretrained_model_name_or_path"),Oir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=a("code"),Vir=o("pretrained_model_name_or_path"),Xir=o(":"),zir=l(),me=a("ul"),JT=a("li"),Cue=a("strong"),Qir=o("bert"),Wir=o(" \u2014 "),nX=a("a"),Hir=o("TFBertLMHeadModel"),Uir=o(" (BERT model)"),Jir=l(),YT=a("li"),wue=a("strong"),Yir=o("camembert"),Kir=o(" \u2014 "),sX=a("a"),Zir=o("TFCamembertForCausalLM"),edr=o(" (CamemBERT model)"),odr=l(),KT=a("li"),Aue=a("strong"),rdr=o("ctrl"),tdr=o(" \u2014 "),lX=a("a"),adr=o("TFCTRLLMHeadModel"),ndr=o(" (CTRL model)"),sdr=l(),ZT=a("li"),yue=a("strong"),ldr=o("gpt2"),idr=o(" \u2014 "),iX=a("a"),ddr=o("TFGPT2LMHeadModel"),cdr=o(" (OpenAI GPT-2 model)"),fdr=l(),e7=a("li"),Lue=a("strong"),mdr=o("gptj"),gdr=o(" \u2014 "),dX=a("a"),hdr=o("TFGPTJForCausalLM"),pdr=o(" (GPT-J model)"),_dr=l(),o7=a("li"),xue=a("strong"),udr=o("openai-gpt"),bdr=o(" \u2014 "),cX=a("a"),Fdr=o("TFOpenAIGPTLMHeadModel"),vdr=o(" (OpenAI GPT model)"),Tdr=l(),r7=a("li"),kue=a("strong"),Mdr=o("rembert"),Edr=o(" \u2014 "),fX=a("a"),Cdr=o("TFRemBertForCausalLM"),wdr=o(" (RemBERT model)"),Adr=l(),t7=a("li"),Sue=a("strong"),ydr=o("roberta"),Ldr=o(" \u2014 "),mX=a("a"),xdr=o("TFRobertaForCausalLM"),kdr=o(" (RoBERTa model)"),Sdr=l(),a7=a("li"),Rue=a("strong"),Rdr=o("roformer"),Bdr=o(" \u2014 "),gX=a("a"),Pdr=o("TFRoFormerForCausalLM"),$dr=o(" (RoFormer model)"),Idr=l(),n7=a("li"),Bue=a("strong"),qdr=o("transfo-xl"),Ndr=o(" \u2014 "),hX=a("a"),jdr=o("TFTransfoXLLMHeadModel"),Ddr=o(" (Transformer-XL model)"),Gdr=l(),s7=a("li"),Pue=a("strong"),Odr=o("xlm"),Vdr=o(" \u2014 "),pX=a("a"),Xdr=o("TFXLMWithLMHeadModel"),zdr=o(" (XLM model)"),Qdr=l(),l7=a("li"),$ue=a("strong"),Wdr=o("xlnet"),Hdr=o(" \u2014 "),_X=a("a"),Udr=o("TFXLNetLMHeadModel"),Jdr=o(" (XLNet model)"),Ydr=l(),Iue=a("p"),Kdr=o("Examples:"),Zdr=l(),f(IA.$$.fragment),TPe=l(),Ec=a("h2"),i7=a("a"),que=a("span"),f(qA.$$.fragment),ecr=l(),Nue=a("span"),ocr=o("TFAutoModelForImageClassification"),MPe=l(),Mr=a("div"),f(NA.$$.fragment),rcr=l(),Cc=a("p"),tcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uX=a("a"),acr=o("from_pretrained()"),ncr=o(" class method or the "),bX=a("a"),scr=o("from_config()"),lcr=o(` class
method.`),icr=l(),jA=a("p"),dcr=o("This class cannot be instantiated directly using "),jue=a("code"),ccr=o("__init__()"),fcr=o(" (throws an error)."),mcr=l(),_t=a("div"),f(DA.$$.fragment),gcr=l(),Due=a("p"),hcr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pcr=l(),wc=a("p"),_cr=o(`Note:
Loading a model from its configuration file does `),Gue=a("strong"),ucr=o("not"),bcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),Fcr=o("from_pretrained()"),vcr=o(" to load the model weights."),Tcr=l(),Oue=a("p"),Mcr=o("Examples:"),Ecr=l(),f(GA.$$.fragment),Ccr=l(),uo=a("div"),f(OA.$$.fragment),wcr=l(),Vue=a("p"),Acr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ycr=l(),vn=a("p"),Lcr=o("The model class to instantiate is selected based on the "),Xue=a("code"),xcr=o("model_type"),kcr=o(` property of the config object (either
passed as an argument or loaded from `),zue=a("code"),Scr=o("pretrained_model_name_or_path"),Rcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=a("code"),Bcr=o("pretrained_model_name_or_path"),Pcr=o(":"),$cr=l(),VA=a("ul"),d7=a("li"),Wue=a("strong"),Icr=o("convnext"),qcr=o(" \u2014 "),vX=a("a"),Ncr=o("TFConvNextForImageClassification"),jcr=o(" (ConvNext model)"),Dcr=l(),c7=a("li"),Hue=a("strong"),Gcr=o("vit"),Ocr=o(" \u2014 "),TX=a("a"),Vcr=o("TFViTForImageClassification"),Xcr=o(" (ViT model)"),zcr=l(),Uue=a("p"),Qcr=o("Examples:"),Wcr=l(),f(XA.$$.fragment),EPe=l(),Ac=a("h2"),f7=a("a"),Jue=a("span"),f(zA.$$.fragment),Hcr=l(),Yue=a("span"),Ucr=o("TFAutoModelForMaskedLM"),CPe=l(),Er=a("div"),f(QA.$$.fragment),Jcr=l(),yc=a("p"),Ycr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MX=a("a"),Kcr=o("from_pretrained()"),Zcr=o(" class method or the "),EX=a("a"),efr=o("from_config()"),ofr=o(` class
method.`),rfr=l(),WA=a("p"),tfr=o("This class cannot be instantiated directly using "),Kue=a("code"),afr=o("__init__()"),nfr=o(" (throws an error)."),sfr=l(),ut=a("div"),f(HA.$$.fragment),lfr=l(),Zue=a("p"),ifr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),dfr=l(),Lc=a("p"),cfr=o(`Note:
Loading a model from its configuration file does `),e2e=a("strong"),ffr=o("not"),mfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),gfr=o("from_pretrained()"),hfr=o(" to load the model weights."),pfr=l(),o2e=a("p"),_fr=o("Examples:"),ufr=l(),f(UA.$$.fragment),bfr=l(),bo=a("div"),f(JA.$$.fragment),Ffr=l(),r2e=a("p"),vfr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Tfr=l(),Tn=a("p"),Mfr=o("The model class to instantiate is selected based on the "),t2e=a("code"),Efr=o("model_type"),Cfr=o(` property of the config object (either
passed as an argument or loaded from `),a2e=a("code"),wfr=o("pretrained_model_name_or_path"),Afr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n2e=a("code"),yfr=o("pretrained_model_name_or_path"),Lfr=o(":"),xfr=l(),J=a("ul"),m7=a("li"),s2e=a("strong"),kfr=o("albert"),Sfr=o(" \u2014 "),wX=a("a"),Rfr=o("TFAlbertForMaskedLM"),Bfr=o(" (ALBERT model)"),Pfr=l(),g7=a("li"),l2e=a("strong"),$fr=o("bert"),Ifr=o(" \u2014 "),AX=a("a"),qfr=o("TFBertForMaskedLM"),Nfr=o(" (BERT model)"),jfr=l(),h7=a("li"),i2e=a("strong"),Dfr=o("camembert"),Gfr=o(" \u2014 "),yX=a("a"),Ofr=o("TFCamembertForMaskedLM"),Vfr=o(" (CamemBERT model)"),Xfr=l(),p7=a("li"),d2e=a("strong"),zfr=o("convbert"),Qfr=o(" \u2014 "),LX=a("a"),Wfr=o("TFConvBertForMaskedLM"),Hfr=o(" (ConvBERT model)"),Ufr=l(),_7=a("li"),c2e=a("strong"),Jfr=o("deberta"),Yfr=o(" \u2014 "),xX=a("a"),Kfr=o("TFDebertaForMaskedLM"),Zfr=o(" (DeBERTa model)"),emr=l(),u7=a("li"),f2e=a("strong"),omr=o("deberta-v2"),rmr=o(" \u2014 "),kX=a("a"),tmr=o("TFDebertaV2ForMaskedLM"),amr=o(" (DeBERTa-v2 model)"),nmr=l(),b7=a("li"),m2e=a("strong"),smr=o("distilbert"),lmr=o(" \u2014 "),SX=a("a"),imr=o("TFDistilBertForMaskedLM"),dmr=o(" (DistilBERT model)"),cmr=l(),F7=a("li"),g2e=a("strong"),fmr=o("electra"),mmr=o(" \u2014 "),RX=a("a"),gmr=o("TFElectraForMaskedLM"),hmr=o(" (ELECTRA model)"),pmr=l(),v7=a("li"),h2e=a("strong"),_mr=o("flaubert"),umr=o(" \u2014 "),BX=a("a"),bmr=o("TFFlaubertWithLMHeadModel"),Fmr=o(" (FlauBERT model)"),vmr=l(),T7=a("li"),p2e=a("strong"),Tmr=o("funnel"),Mmr=o(" \u2014 "),PX=a("a"),Emr=o("TFFunnelForMaskedLM"),Cmr=o(" (Funnel Transformer model)"),wmr=l(),M7=a("li"),_2e=a("strong"),Amr=o("layoutlm"),ymr=o(" \u2014 "),$X=a("a"),Lmr=o("TFLayoutLMForMaskedLM"),xmr=o(" (LayoutLM model)"),kmr=l(),E7=a("li"),u2e=a("strong"),Smr=o("longformer"),Rmr=o(" \u2014 "),IX=a("a"),Bmr=o("TFLongformerForMaskedLM"),Pmr=o(" (Longformer model)"),$mr=l(),C7=a("li"),b2e=a("strong"),Imr=o("mobilebert"),qmr=o(" \u2014 "),qX=a("a"),Nmr=o("TFMobileBertForMaskedLM"),jmr=o(" (MobileBERT model)"),Dmr=l(),w7=a("li"),F2e=a("strong"),Gmr=o("mpnet"),Omr=o(" \u2014 "),NX=a("a"),Vmr=o("TFMPNetForMaskedLM"),Xmr=o(" (MPNet model)"),zmr=l(),A7=a("li"),v2e=a("strong"),Qmr=o("rembert"),Wmr=o(" \u2014 "),jX=a("a"),Hmr=o("TFRemBertForMaskedLM"),Umr=o(" (RemBERT model)"),Jmr=l(),y7=a("li"),T2e=a("strong"),Ymr=o("roberta"),Kmr=o(" \u2014 "),DX=a("a"),Zmr=o("TFRobertaForMaskedLM"),egr=o(" (RoBERTa model)"),ogr=l(),L7=a("li"),M2e=a("strong"),rgr=o("roformer"),tgr=o(" \u2014 "),GX=a("a"),agr=o("TFRoFormerForMaskedLM"),ngr=o(" (RoFormer model)"),sgr=l(),x7=a("li"),E2e=a("strong"),lgr=o("tapas"),igr=o(" \u2014 "),OX=a("a"),dgr=o("TFTapasForMaskedLM"),cgr=o(" (TAPAS model)"),fgr=l(),k7=a("li"),C2e=a("strong"),mgr=o("xlm"),ggr=o(" \u2014 "),VX=a("a"),hgr=o("TFXLMWithLMHeadModel"),pgr=o(" (XLM model)"),_gr=l(),S7=a("li"),w2e=a("strong"),ugr=o("xlm-roberta"),bgr=o(" \u2014 "),XX=a("a"),Fgr=o("TFXLMRobertaForMaskedLM"),vgr=o(" (XLM-RoBERTa model)"),Tgr=l(),A2e=a("p"),Mgr=o("Examples:"),Egr=l(),f(YA.$$.fragment),wPe=l(),xc=a("h2"),R7=a("a"),y2e=a("span"),f(KA.$$.fragment),Cgr=l(),L2e=a("span"),wgr=o("TFAutoModelForSeq2SeqLM"),APe=l(),Cr=a("div"),f(ZA.$$.fragment),Agr=l(),kc=a("p"),ygr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zX=a("a"),Lgr=o("from_pretrained()"),xgr=o(" class method or the "),QX=a("a"),kgr=o("from_config()"),Sgr=o(` class
method.`),Rgr=l(),e0=a("p"),Bgr=o("This class cannot be instantiated directly using "),x2e=a("code"),Pgr=o("__init__()"),$gr=o(" (throws an error)."),Igr=l(),bt=a("div"),f(o0.$$.fragment),qgr=l(),k2e=a("p"),Ngr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jgr=l(),Sc=a("p"),Dgr=o(`Note:
Loading a model from its configuration file does `),S2e=a("strong"),Ggr=o("not"),Ogr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),Vgr=o("from_pretrained()"),Xgr=o(" to load the model weights."),zgr=l(),R2e=a("p"),Qgr=o("Examples:"),Wgr=l(),f(r0.$$.fragment),Hgr=l(),Fo=a("div"),f(t0.$$.fragment),Ugr=l(),B2e=a("p"),Jgr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ygr=l(),Mn=a("p"),Kgr=o("The model class to instantiate is selected based on the "),P2e=a("code"),Zgr=o("model_type"),ehr=o(` property of the config object (either
passed as an argument or loaded from `),$2e=a("code"),ohr=o("pretrained_model_name_or_path"),rhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=a("code"),thr=o("pretrained_model_name_or_path"),ahr=o(":"),nhr=l(),be=a("ul"),B7=a("li"),q2e=a("strong"),shr=o("bart"),lhr=o(" \u2014 "),HX=a("a"),ihr=o("TFBartForConditionalGeneration"),dhr=o(" (BART model)"),chr=l(),P7=a("li"),N2e=a("strong"),fhr=o("blenderbot"),mhr=o(" \u2014 "),UX=a("a"),ghr=o("TFBlenderbotForConditionalGeneration"),hhr=o(" (Blenderbot model)"),phr=l(),$7=a("li"),j2e=a("strong"),_hr=o("blenderbot-small"),uhr=o(" \u2014 "),JX=a("a"),bhr=o("TFBlenderbotSmallForConditionalGeneration"),Fhr=o(" (BlenderbotSmall model)"),vhr=l(),I7=a("li"),D2e=a("strong"),Thr=o("encoder-decoder"),Mhr=o(" \u2014 "),YX=a("a"),Ehr=o("TFEncoderDecoderModel"),Chr=o(" (Encoder decoder model)"),whr=l(),q7=a("li"),G2e=a("strong"),Ahr=o("led"),yhr=o(" \u2014 "),KX=a("a"),Lhr=o("TFLEDForConditionalGeneration"),xhr=o(" (LED model)"),khr=l(),N7=a("li"),O2e=a("strong"),Shr=o("marian"),Rhr=o(" \u2014 "),ZX=a("a"),Bhr=o("TFMarianMTModel"),Phr=o(" (Marian model)"),$hr=l(),j7=a("li"),V2e=a("strong"),Ihr=o("mbart"),qhr=o(" \u2014 "),ez=a("a"),Nhr=o("TFMBartForConditionalGeneration"),jhr=o(" (mBART model)"),Dhr=l(),D7=a("li"),X2e=a("strong"),Ghr=o("mt5"),Ohr=o(" \u2014 "),oz=a("a"),Vhr=o("TFMT5ForConditionalGeneration"),Xhr=o(" (mT5 model)"),zhr=l(),G7=a("li"),z2e=a("strong"),Qhr=o("pegasus"),Whr=o(" \u2014 "),rz=a("a"),Hhr=o("TFPegasusForConditionalGeneration"),Uhr=o(" (Pegasus model)"),Jhr=l(),O7=a("li"),Q2e=a("strong"),Yhr=o("t5"),Khr=o(" \u2014 "),tz=a("a"),Zhr=o("TFT5ForConditionalGeneration"),epr=o(" (T5 model)"),opr=l(),W2e=a("p"),rpr=o("Examples:"),tpr=l(),f(a0.$$.fragment),yPe=l(),Rc=a("h2"),V7=a("a"),H2e=a("span"),f(n0.$$.fragment),apr=l(),U2e=a("span"),npr=o("TFAutoModelForSequenceClassification"),LPe=l(),wr=a("div"),f(s0.$$.fragment),spr=l(),Bc=a("p"),lpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),az=a("a"),ipr=o("from_pretrained()"),dpr=o(" class method or the "),nz=a("a"),cpr=o("from_config()"),fpr=o(` class
method.`),mpr=l(),l0=a("p"),gpr=o("This class cannot be instantiated directly using "),J2e=a("code"),hpr=o("__init__()"),ppr=o(" (throws an error)."),_pr=l(),Ft=a("div"),f(i0.$$.fragment),upr=l(),Y2e=a("p"),bpr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Fpr=l(),Pc=a("p"),vpr=o(`Note:
Loading a model from its configuration file does `),K2e=a("strong"),Tpr=o("not"),Mpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),Epr=o("from_pretrained()"),Cpr=o(" to load the model weights."),wpr=l(),Z2e=a("p"),Apr=o("Examples:"),ypr=l(),f(d0.$$.fragment),Lpr=l(),vo=a("div"),f(c0.$$.fragment),xpr=l(),e1e=a("p"),kpr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Spr=l(),En=a("p"),Rpr=o("The model class to instantiate is selected based on the "),o1e=a("code"),Bpr=o("model_type"),Ppr=o(` property of the config object (either
passed as an argument or loaded from `),r1e=a("code"),$pr=o("pretrained_model_name_or_path"),Ipr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=a("code"),qpr=o("pretrained_model_name_or_path"),Npr=o(":"),jpr=l(),V=a("ul"),X7=a("li"),a1e=a("strong"),Dpr=o("albert"),Gpr=o(" \u2014 "),lz=a("a"),Opr=o("TFAlbertForSequenceClassification"),Vpr=o(" (ALBERT model)"),Xpr=l(),z7=a("li"),n1e=a("strong"),zpr=o("bert"),Qpr=o(" \u2014 "),iz=a("a"),Wpr=o("TFBertForSequenceClassification"),Hpr=o(" (BERT model)"),Upr=l(),Q7=a("li"),s1e=a("strong"),Jpr=o("camembert"),Ypr=o(" \u2014 "),dz=a("a"),Kpr=o("TFCamembertForSequenceClassification"),Zpr=o(" (CamemBERT model)"),e_r=l(),W7=a("li"),l1e=a("strong"),o_r=o("convbert"),r_r=o(" \u2014 "),cz=a("a"),t_r=o("TFConvBertForSequenceClassification"),a_r=o(" (ConvBERT model)"),n_r=l(),H7=a("li"),i1e=a("strong"),s_r=o("ctrl"),l_r=o(" \u2014 "),fz=a("a"),i_r=o("TFCTRLForSequenceClassification"),d_r=o(" (CTRL model)"),c_r=l(),U7=a("li"),d1e=a("strong"),f_r=o("deberta"),m_r=o(" \u2014 "),mz=a("a"),g_r=o("TFDebertaForSequenceClassification"),h_r=o(" (DeBERTa model)"),p_r=l(),J7=a("li"),c1e=a("strong"),__r=o("deberta-v2"),u_r=o(" \u2014 "),gz=a("a"),b_r=o("TFDebertaV2ForSequenceClassification"),F_r=o(" (DeBERTa-v2 model)"),v_r=l(),Y7=a("li"),f1e=a("strong"),T_r=o("distilbert"),M_r=o(" \u2014 "),hz=a("a"),E_r=o("TFDistilBertForSequenceClassification"),C_r=o(" (DistilBERT model)"),w_r=l(),K7=a("li"),m1e=a("strong"),A_r=o("electra"),y_r=o(" \u2014 "),pz=a("a"),L_r=o("TFElectraForSequenceClassification"),x_r=o(" (ELECTRA model)"),k_r=l(),Z7=a("li"),g1e=a("strong"),S_r=o("flaubert"),R_r=o(" \u2014 "),_z=a("a"),B_r=o("TFFlaubertForSequenceClassification"),P_r=o(" (FlauBERT model)"),$_r=l(),e9=a("li"),h1e=a("strong"),I_r=o("funnel"),q_r=o(" \u2014 "),uz=a("a"),N_r=o("TFFunnelForSequenceClassification"),j_r=o(" (Funnel Transformer model)"),D_r=l(),o9=a("li"),p1e=a("strong"),G_r=o("gpt2"),O_r=o(" \u2014 "),bz=a("a"),V_r=o("TFGPT2ForSequenceClassification"),X_r=o(" (OpenAI GPT-2 model)"),z_r=l(),r9=a("li"),_1e=a("strong"),Q_r=o("gptj"),W_r=o(" \u2014 "),Fz=a("a"),H_r=o("TFGPTJForSequenceClassification"),U_r=o(" (GPT-J model)"),J_r=l(),t9=a("li"),u1e=a("strong"),Y_r=o("layoutlm"),K_r=o(" \u2014 "),vz=a("a"),Z_r=o("TFLayoutLMForSequenceClassification"),eur=o(" (LayoutLM model)"),our=l(),a9=a("li"),b1e=a("strong"),rur=o("longformer"),tur=o(" \u2014 "),Tz=a("a"),aur=o("TFLongformerForSequenceClassification"),nur=o(" (Longformer model)"),sur=l(),n9=a("li"),F1e=a("strong"),lur=o("mobilebert"),iur=o(" \u2014 "),Mz=a("a"),dur=o("TFMobileBertForSequenceClassification"),cur=o(" (MobileBERT model)"),fur=l(),s9=a("li"),v1e=a("strong"),mur=o("mpnet"),gur=o(" \u2014 "),Ez=a("a"),hur=o("TFMPNetForSequenceClassification"),pur=o(" (MPNet model)"),_ur=l(),l9=a("li"),T1e=a("strong"),uur=o("openai-gpt"),bur=o(" \u2014 "),Cz=a("a"),Fur=o("TFOpenAIGPTForSequenceClassification"),vur=o(" (OpenAI GPT model)"),Tur=l(),i9=a("li"),M1e=a("strong"),Mur=o("rembert"),Eur=o(" \u2014 "),wz=a("a"),Cur=o("TFRemBertForSequenceClassification"),wur=o(" (RemBERT model)"),Aur=l(),d9=a("li"),E1e=a("strong"),yur=o("roberta"),Lur=o(" \u2014 "),Az=a("a"),xur=o("TFRobertaForSequenceClassification"),kur=o(" (RoBERTa model)"),Sur=l(),c9=a("li"),C1e=a("strong"),Rur=o("roformer"),Bur=o(" \u2014 "),yz=a("a"),Pur=o("TFRoFormerForSequenceClassification"),$ur=o(" (RoFormer model)"),Iur=l(),f9=a("li"),w1e=a("strong"),qur=o("tapas"),Nur=o(" \u2014 "),Lz=a("a"),jur=o("TFTapasForSequenceClassification"),Dur=o(" (TAPAS model)"),Gur=l(),m9=a("li"),A1e=a("strong"),Our=o("transfo-xl"),Vur=o(" \u2014 "),xz=a("a"),Xur=o("TFTransfoXLForSequenceClassification"),zur=o(" (Transformer-XL model)"),Qur=l(),g9=a("li"),y1e=a("strong"),Wur=o("xlm"),Hur=o(" \u2014 "),kz=a("a"),Uur=o("TFXLMForSequenceClassification"),Jur=o(" (XLM model)"),Yur=l(),h9=a("li"),L1e=a("strong"),Kur=o("xlm-roberta"),Zur=o(" \u2014 "),Sz=a("a"),e2r=o("TFXLMRobertaForSequenceClassification"),o2r=o(" (XLM-RoBERTa model)"),r2r=l(),p9=a("li"),x1e=a("strong"),t2r=o("xlnet"),a2r=o(" \u2014 "),Rz=a("a"),n2r=o("TFXLNetForSequenceClassification"),s2r=o(" (XLNet model)"),l2r=l(),k1e=a("p"),i2r=o("Examples:"),d2r=l(),f(f0.$$.fragment),xPe=l(),$c=a("h2"),_9=a("a"),S1e=a("span"),f(m0.$$.fragment),c2r=l(),R1e=a("span"),f2r=o("TFAutoModelForMultipleChoice"),kPe=l(),Ar=a("div"),f(g0.$$.fragment),m2r=l(),Ic=a("p"),g2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Bz=a("a"),h2r=o("from_pretrained()"),p2r=o(" class method or the "),Pz=a("a"),_2r=o("from_config()"),u2r=o(` class
method.`),b2r=l(),h0=a("p"),F2r=o("This class cannot be instantiated directly using "),B1e=a("code"),v2r=o("__init__()"),T2r=o(" (throws an error)."),M2r=l(),vt=a("div"),f(p0.$$.fragment),E2r=l(),P1e=a("p"),C2r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),w2r=l(),qc=a("p"),A2r=o(`Note:
Loading a model from its configuration file does `),$1e=a("strong"),y2r=o("not"),L2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=a("a"),x2r=o("from_pretrained()"),k2r=o(" to load the model weights."),S2r=l(),I1e=a("p"),R2r=o("Examples:"),B2r=l(),f(_0.$$.fragment),P2r=l(),To=a("div"),f(u0.$$.fragment),$2r=l(),q1e=a("p"),I2r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),q2r=l(),Cn=a("p"),N2r=o("The model class to instantiate is selected based on the "),N1e=a("code"),j2r=o("model_type"),D2r=o(` property of the config object (either
passed as an argument or loaded from `),j1e=a("code"),G2r=o("pretrained_model_name_or_path"),O2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=a("code"),V2r=o("pretrained_model_name_or_path"),X2r=o(":"),z2r=l(),se=a("ul"),u9=a("li"),G1e=a("strong"),Q2r=o("albert"),W2r=o(" \u2014 "),Iz=a("a"),H2r=o("TFAlbertForMultipleChoice"),U2r=o(" (ALBERT model)"),J2r=l(),b9=a("li"),O1e=a("strong"),Y2r=o("bert"),K2r=o(" \u2014 "),qz=a("a"),Z2r=o("TFBertForMultipleChoice"),e1r=o(" (BERT model)"),o1r=l(),F9=a("li"),V1e=a("strong"),r1r=o("camembert"),t1r=o(" \u2014 "),Nz=a("a"),a1r=o("TFCamembertForMultipleChoice"),n1r=o(" (CamemBERT model)"),s1r=l(),v9=a("li"),X1e=a("strong"),l1r=o("convbert"),i1r=o(" \u2014 "),jz=a("a"),d1r=o("TFConvBertForMultipleChoice"),c1r=o(" (ConvBERT model)"),f1r=l(),T9=a("li"),z1e=a("strong"),m1r=o("distilbert"),g1r=o(" \u2014 "),Dz=a("a"),h1r=o("TFDistilBertForMultipleChoice"),p1r=o(" (DistilBERT model)"),_1r=l(),M9=a("li"),Q1e=a("strong"),u1r=o("electra"),b1r=o(" \u2014 "),Gz=a("a"),F1r=o("TFElectraForMultipleChoice"),v1r=o(" (ELECTRA model)"),T1r=l(),E9=a("li"),W1e=a("strong"),M1r=o("flaubert"),E1r=o(" \u2014 "),Oz=a("a"),C1r=o("TFFlaubertForMultipleChoice"),w1r=o(" (FlauBERT model)"),A1r=l(),C9=a("li"),H1e=a("strong"),y1r=o("funnel"),L1r=o(" \u2014 "),Vz=a("a"),x1r=o("TFFunnelForMultipleChoice"),k1r=o(" (Funnel Transformer model)"),S1r=l(),w9=a("li"),U1e=a("strong"),R1r=o("longformer"),B1r=o(" \u2014 "),Xz=a("a"),P1r=o("TFLongformerForMultipleChoice"),$1r=o(" (Longformer model)"),I1r=l(),A9=a("li"),J1e=a("strong"),q1r=o("mobilebert"),N1r=o(" \u2014 "),zz=a("a"),j1r=o("TFMobileBertForMultipleChoice"),D1r=o(" (MobileBERT model)"),G1r=l(),y9=a("li"),Y1e=a("strong"),O1r=o("mpnet"),V1r=o(" \u2014 "),Qz=a("a"),X1r=o("TFMPNetForMultipleChoice"),z1r=o(" (MPNet model)"),Q1r=l(),L9=a("li"),K1e=a("strong"),W1r=o("rembert"),H1r=o(" \u2014 "),Wz=a("a"),U1r=o("TFRemBertForMultipleChoice"),J1r=o(" (RemBERT model)"),Y1r=l(),x9=a("li"),Z1e=a("strong"),K1r=o("roberta"),Z1r=o(" \u2014 "),Hz=a("a"),ebr=o("TFRobertaForMultipleChoice"),obr=o(" (RoBERTa model)"),rbr=l(),k9=a("li"),ebe=a("strong"),tbr=o("roformer"),abr=o(" \u2014 "),Uz=a("a"),nbr=o("TFRoFormerForMultipleChoice"),sbr=o(" (RoFormer model)"),lbr=l(),S9=a("li"),obe=a("strong"),ibr=o("xlm"),dbr=o(" \u2014 "),Jz=a("a"),cbr=o("TFXLMForMultipleChoice"),fbr=o(" (XLM model)"),mbr=l(),R9=a("li"),rbe=a("strong"),gbr=o("xlm-roberta"),hbr=o(" \u2014 "),Yz=a("a"),pbr=o("TFXLMRobertaForMultipleChoice"),_br=o(" (XLM-RoBERTa model)"),ubr=l(),B9=a("li"),tbe=a("strong"),bbr=o("xlnet"),Fbr=o(" \u2014 "),Kz=a("a"),vbr=o("TFXLNetForMultipleChoice"),Tbr=o(" (XLNet model)"),Mbr=l(),abe=a("p"),Ebr=o("Examples:"),Cbr=l(),f(b0.$$.fragment),SPe=l(),Nc=a("h2"),P9=a("a"),nbe=a("span"),f(F0.$$.fragment),wbr=l(),sbe=a("span"),Abr=o("TFAutoModelForTableQuestionAnswering"),RPe=l(),yr=a("div"),f(v0.$$.fragment),ybr=l(),jc=a("p"),Lbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Zz=a("a"),xbr=o("from_pretrained()"),kbr=o(" class method or the "),eQ=a("a"),Sbr=o("from_config()"),Rbr=o(` class
method.`),Bbr=l(),T0=a("p"),Pbr=o("This class cannot be instantiated directly using "),lbe=a("code"),$br=o("__init__()"),Ibr=o(" (throws an error)."),qbr=l(),Tt=a("div"),f(M0.$$.fragment),Nbr=l(),ibe=a("p"),jbr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Dbr=l(),Dc=a("p"),Gbr=o(`Note:
Loading a model from its configuration file does `),dbe=a("strong"),Obr=o("not"),Vbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=a("a"),Xbr=o("from_pretrained()"),zbr=o(" to load the model weights."),Qbr=l(),cbe=a("p"),Wbr=o("Examples:"),Hbr=l(),f(E0.$$.fragment),Ubr=l(),Mo=a("div"),f(C0.$$.fragment),Jbr=l(),fbe=a("p"),Ybr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Kbr=l(),wn=a("p"),Zbr=o("The model class to instantiate is selected based on the "),mbe=a("code"),e6r=o("model_type"),o6r=o(` property of the config object (either
passed as an argument or loaded from `),gbe=a("code"),r6r=o("pretrained_model_name_or_path"),t6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=a("code"),a6r=o("pretrained_model_name_or_path"),n6r=o(":"),s6r=l(),pbe=a("ul"),$9=a("li"),_be=a("strong"),l6r=o("tapas"),i6r=o(" \u2014 "),rQ=a("a"),d6r=o("TFTapasForQuestionAnswering"),c6r=o(" (TAPAS model)"),f6r=l(),ube=a("p"),m6r=o("Examples:"),g6r=l(),f(w0.$$.fragment),BPe=l(),Gc=a("h2"),I9=a("a"),bbe=a("span"),f(A0.$$.fragment),h6r=l(),Fbe=a("span"),p6r=o("TFAutoModelForTokenClassification"),PPe=l(),Lr=a("div"),f(y0.$$.fragment),_6r=l(),Oc=a("p"),u6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tQ=a("a"),b6r=o("from_pretrained()"),F6r=o(" class method or the "),aQ=a("a"),v6r=o("from_config()"),T6r=o(` class
method.`),M6r=l(),L0=a("p"),E6r=o("This class cannot be instantiated directly using "),vbe=a("code"),C6r=o("__init__()"),w6r=o(" (throws an error)."),A6r=l(),Mt=a("div"),f(x0.$$.fragment),y6r=l(),Tbe=a("p"),L6r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),x6r=l(),Vc=a("p"),k6r=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),S6r=o("not"),R6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=a("a"),B6r=o("from_pretrained()"),P6r=o(" to load the model weights."),$6r=l(),Ebe=a("p"),I6r=o("Examples:"),q6r=l(),f(k0.$$.fragment),N6r=l(),Eo=a("div"),f(S0.$$.fragment),j6r=l(),Cbe=a("p"),D6r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),G6r=l(),An=a("p"),O6r=o("The model class to instantiate is selected based on the "),wbe=a("code"),V6r=o("model_type"),X6r=o(` property of the config object (either
passed as an argument or loaded from `),Abe=a("code"),z6r=o("pretrained_model_name_or_path"),Q6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=a("code"),W6r=o("pretrained_model_name_or_path"),H6r=o(":"),U6r=l(),Y=a("ul"),q9=a("li"),Lbe=a("strong"),J6r=o("albert"),Y6r=o(" \u2014 "),sQ=a("a"),K6r=o("TFAlbertForTokenClassification"),Z6r=o(" (ALBERT model)"),eFr=l(),N9=a("li"),xbe=a("strong"),oFr=o("bert"),rFr=o(" \u2014 "),lQ=a("a"),tFr=o("TFBertForTokenClassification"),aFr=o(" (BERT model)"),nFr=l(),j9=a("li"),kbe=a("strong"),sFr=o("camembert"),lFr=o(" \u2014 "),iQ=a("a"),iFr=o("TFCamembertForTokenClassification"),dFr=o(" (CamemBERT model)"),cFr=l(),D9=a("li"),Sbe=a("strong"),fFr=o("convbert"),mFr=o(" \u2014 "),dQ=a("a"),gFr=o("TFConvBertForTokenClassification"),hFr=o(" (ConvBERT model)"),pFr=l(),G9=a("li"),Rbe=a("strong"),_Fr=o("deberta"),uFr=o(" \u2014 "),cQ=a("a"),bFr=o("TFDebertaForTokenClassification"),FFr=o(" (DeBERTa model)"),vFr=l(),O9=a("li"),Bbe=a("strong"),TFr=o("deberta-v2"),MFr=o(" \u2014 "),fQ=a("a"),EFr=o("TFDebertaV2ForTokenClassification"),CFr=o(" (DeBERTa-v2 model)"),wFr=l(),V9=a("li"),Pbe=a("strong"),AFr=o("distilbert"),yFr=o(" \u2014 "),mQ=a("a"),LFr=o("TFDistilBertForTokenClassification"),xFr=o(" (DistilBERT model)"),kFr=l(),X9=a("li"),$be=a("strong"),SFr=o("electra"),RFr=o(" \u2014 "),gQ=a("a"),BFr=o("TFElectraForTokenClassification"),PFr=o(" (ELECTRA model)"),$Fr=l(),z9=a("li"),Ibe=a("strong"),IFr=o("flaubert"),qFr=o(" \u2014 "),hQ=a("a"),NFr=o("TFFlaubertForTokenClassification"),jFr=o(" (FlauBERT model)"),DFr=l(),Q9=a("li"),qbe=a("strong"),GFr=o("funnel"),OFr=o(" \u2014 "),pQ=a("a"),VFr=o("TFFunnelForTokenClassification"),XFr=o(" (Funnel Transformer model)"),zFr=l(),W9=a("li"),Nbe=a("strong"),QFr=o("layoutlm"),WFr=o(" \u2014 "),_Q=a("a"),HFr=o("TFLayoutLMForTokenClassification"),UFr=o(" (LayoutLM model)"),JFr=l(),H9=a("li"),jbe=a("strong"),YFr=o("longformer"),KFr=o(" \u2014 "),uQ=a("a"),ZFr=o("TFLongformerForTokenClassification"),evr=o(" (Longformer model)"),ovr=l(),U9=a("li"),Dbe=a("strong"),rvr=o("mobilebert"),tvr=o(" \u2014 "),bQ=a("a"),avr=o("TFMobileBertForTokenClassification"),nvr=o(" (MobileBERT model)"),svr=l(),J9=a("li"),Gbe=a("strong"),lvr=o("mpnet"),ivr=o(" \u2014 "),FQ=a("a"),dvr=o("TFMPNetForTokenClassification"),cvr=o(" (MPNet model)"),fvr=l(),Y9=a("li"),Obe=a("strong"),mvr=o("rembert"),gvr=o(" \u2014 "),vQ=a("a"),hvr=o("TFRemBertForTokenClassification"),pvr=o(" (RemBERT model)"),_vr=l(),K9=a("li"),Vbe=a("strong"),uvr=o("roberta"),bvr=o(" \u2014 "),TQ=a("a"),Fvr=o("TFRobertaForTokenClassification"),vvr=o(" (RoBERTa model)"),Tvr=l(),Z9=a("li"),Xbe=a("strong"),Mvr=o("roformer"),Evr=o(" \u2014 "),MQ=a("a"),Cvr=o("TFRoFormerForTokenClassification"),wvr=o(" (RoFormer model)"),Avr=l(),eM=a("li"),zbe=a("strong"),yvr=o("xlm"),Lvr=o(" \u2014 "),EQ=a("a"),xvr=o("TFXLMForTokenClassification"),kvr=o(" (XLM model)"),Svr=l(),oM=a("li"),Qbe=a("strong"),Rvr=o("xlm-roberta"),Bvr=o(" \u2014 "),CQ=a("a"),Pvr=o("TFXLMRobertaForTokenClassification"),$vr=o(" (XLM-RoBERTa model)"),Ivr=l(),rM=a("li"),Wbe=a("strong"),qvr=o("xlnet"),Nvr=o(" \u2014 "),wQ=a("a"),jvr=o("TFXLNetForTokenClassification"),Dvr=o(" (XLNet model)"),Gvr=l(),Hbe=a("p"),Ovr=o("Examples:"),Vvr=l(),f(R0.$$.fragment),$Pe=l(),Xc=a("h2"),tM=a("a"),Ube=a("span"),f(B0.$$.fragment),Xvr=l(),Jbe=a("span"),zvr=o("TFAutoModelForQuestionAnswering"),IPe=l(),xr=a("div"),f(P0.$$.fragment),Qvr=l(),zc=a("p"),Wvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AQ=a("a"),Hvr=o("from_pretrained()"),Uvr=o(" class method or the "),yQ=a("a"),Jvr=o("from_config()"),Yvr=o(` class
method.`),Kvr=l(),$0=a("p"),Zvr=o("This class cannot be instantiated directly using "),Ybe=a("code"),eTr=o("__init__()"),oTr=o(" (throws an error)."),rTr=l(),Et=a("div"),f(I0.$$.fragment),tTr=l(),Kbe=a("p"),aTr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nTr=l(),Qc=a("p"),sTr=o(`Note:
Loading a model from its configuration file does `),Zbe=a("strong"),lTr=o("not"),iTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=a("a"),dTr=o("from_pretrained()"),cTr=o(" to load the model weights."),fTr=l(),e6e=a("p"),mTr=o("Examples:"),gTr=l(),f(q0.$$.fragment),hTr=l(),Co=a("div"),f(N0.$$.fragment),pTr=l(),o6e=a("p"),_Tr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uTr=l(),yn=a("p"),bTr=o("The model class to instantiate is selected based on the "),r6e=a("code"),FTr=o("model_type"),vTr=o(` property of the config object (either
passed as an argument or loaded from `),t6e=a("code"),TTr=o("pretrained_model_name_or_path"),MTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a6e=a("code"),ETr=o("pretrained_model_name_or_path"),CTr=o(":"),wTr=l(),K=a("ul"),aM=a("li"),n6e=a("strong"),ATr=o("albert"),yTr=o(" \u2014 "),xQ=a("a"),LTr=o("TFAlbertForQuestionAnswering"),xTr=o(" (ALBERT model)"),kTr=l(),nM=a("li"),s6e=a("strong"),STr=o("bert"),RTr=o(" \u2014 "),kQ=a("a"),BTr=o("TFBertForQuestionAnswering"),PTr=o(" (BERT model)"),$Tr=l(),sM=a("li"),l6e=a("strong"),ITr=o("camembert"),qTr=o(" \u2014 "),SQ=a("a"),NTr=o("TFCamembertForQuestionAnswering"),jTr=o(" (CamemBERT model)"),DTr=l(),lM=a("li"),i6e=a("strong"),GTr=o("convbert"),OTr=o(" \u2014 "),RQ=a("a"),VTr=o("TFConvBertForQuestionAnswering"),XTr=o(" (ConvBERT model)"),zTr=l(),iM=a("li"),d6e=a("strong"),QTr=o("deberta"),WTr=o(" \u2014 "),BQ=a("a"),HTr=o("TFDebertaForQuestionAnswering"),UTr=o(" (DeBERTa model)"),JTr=l(),dM=a("li"),c6e=a("strong"),YTr=o("deberta-v2"),KTr=o(" \u2014 "),PQ=a("a"),ZTr=o("TFDebertaV2ForQuestionAnswering"),e7r=o(" (DeBERTa-v2 model)"),o7r=l(),cM=a("li"),f6e=a("strong"),r7r=o("distilbert"),t7r=o(" \u2014 "),$Q=a("a"),a7r=o("TFDistilBertForQuestionAnswering"),n7r=o(" (DistilBERT model)"),s7r=l(),fM=a("li"),m6e=a("strong"),l7r=o("electra"),i7r=o(" \u2014 "),IQ=a("a"),d7r=o("TFElectraForQuestionAnswering"),c7r=o(" (ELECTRA model)"),f7r=l(),mM=a("li"),g6e=a("strong"),m7r=o("flaubert"),g7r=o(" \u2014 "),qQ=a("a"),h7r=o("TFFlaubertForQuestionAnsweringSimple"),p7r=o(" (FlauBERT model)"),_7r=l(),gM=a("li"),h6e=a("strong"),u7r=o("funnel"),b7r=o(" \u2014 "),NQ=a("a"),F7r=o("TFFunnelForQuestionAnswering"),v7r=o(" (Funnel Transformer model)"),T7r=l(),hM=a("li"),p6e=a("strong"),M7r=o("gptj"),E7r=o(" \u2014 "),jQ=a("a"),C7r=o("TFGPTJForQuestionAnswering"),w7r=o(" (GPT-J model)"),A7r=l(),pM=a("li"),_6e=a("strong"),y7r=o("longformer"),L7r=o(" \u2014 "),DQ=a("a"),x7r=o("TFLongformerForQuestionAnswering"),k7r=o(" (Longformer model)"),S7r=l(),_M=a("li"),u6e=a("strong"),R7r=o("mobilebert"),B7r=o(" \u2014 "),GQ=a("a"),P7r=o("TFMobileBertForQuestionAnswering"),$7r=o(" (MobileBERT model)"),I7r=l(),uM=a("li"),b6e=a("strong"),q7r=o("mpnet"),N7r=o(" \u2014 "),OQ=a("a"),j7r=o("TFMPNetForQuestionAnswering"),D7r=o(" (MPNet model)"),G7r=l(),bM=a("li"),F6e=a("strong"),O7r=o("rembert"),V7r=o(" \u2014 "),VQ=a("a"),X7r=o("TFRemBertForQuestionAnswering"),z7r=o(" (RemBERT model)"),Q7r=l(),FM=a("li"),v6e=a("strong"),W7r=o("roberta"),H7r=o(" \u2014 "),XQ=a("a"),U7r=o("TFRobertaForQuestionAnswering"),J7r=o(" (RoBERTa model)"),Y7r=l(),vM=a("li"),T6e=a("strong"),K7r=o("roformer"),Z7r=o(" \u2014 "),zQ=a("a"),e9r=o("TFRoFormerForQuestionAnswering"),o9r=o(" (RoFormer model)"),r9r=l(),TM=a("li"),M6e=a("strong"),t9r=o("xlm"),a9r=o(" \u2014 "),QQ=a("a"),n9r=o("TFXLMForQuestionAnsweringSimple"),s9r=o(" (XLM model)"),l9r=l(),MM=a("li"),E6e=a("strong"),i9r=o("xlm-roberta"),d9r=o(" \u2014 "),WQ=a("a"),c9r=o("TFXLMRobertaForQuestionAnswering"),f9r=o(" (XLM-RoBERTa model)"),m9r=l(),EM=a("li"),C6e=a("strong"),g9r=o("xlnet"),h9r=o(" \u2014 "),HQ=a("a"),p9r=o("TFXLNetForQuestionAnsweringSimple"),_9r=o(" (XLNet model)"),u9r=l(),w6e=a("p"),b9r=o("Examples:"),F9r=l(),f(j0.$$.fragment),qPe=l(),Wc=a("h2"),CM=a("a"),A6e=a("span"),f(D0.$$.fragment),v9r=l(),y6e=a("span"),T9r=o("TFAutoModelForVision2Seq"),NPe=l(),kr=a("div"),f(G0.$$.fragment),M9r=l(),Hc=a("p"),E9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),UQ=a("a"),C9r=o("from_pretrained()"),w9r=o(" class method or the "),JQ=a("a"),A9r=o("from_config()"),y9r=o(` class
method.`),L9r=l(),O0=a("p"),x9r=o("This class cannot be instantiated directly using "),L6e=a("code"),k9r=o("__init__()"),S9r=o(" (throws an error)."),R9r=l(),Ct=a("div"),f(V0.$$.fragment),B9r=l(),x6e=a("p"),P9r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$9r=l(),Uc=a("p"),I9r=o(`Note:
Loading a model from its configuration file does `),k6e=a("strong"),q9r=o("not"),N9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=a("a"),j9r=o("from_pretrained()"),D9r=o(" to load the model weights."),G9r=l(),S6e=a("p"),O9r=o("Examples:"),V9r=l(),f(X0.$$.fragment),X9r=l(),wo=a("div"),f(z0.$$.fragment),z9r=l(),R6e=a("p"),Q9r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),W9r=l(),Ln=a("p"),H9r=o("The model class to instantiate is selected based on the "),B6e=a("code"),U9r=o("model_type"),J9r=o(` property of the config object (either
passed as an argument or loaded from `),P6e=a("code"),Y9r=o("pretrained_model_name_or_path"),K9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=a("code"),Z9r=o("pretrained_model_name_or_path"),eMr=o(":"),oMr=l(),I6e=a("ul"),wM=a("li"),q6e=a("strong"),rMr=o("vision-encoder-decoder"),tMr=o(" \u2014 "),KQ=a("a"),aMr=o("TFVisionEncoderDecoderModel"),nMr=o(" (Vision Encoder decoder model)"),sMr=l(),N6e=a("p"),lMr=o("Examples:"),iMr=l(),f(Q0.$$.fragment),jPe=l(),Jc=a("h2"),AM=a("a"),j6e=a("span"),f(W0.$$.fragment),dMr=l(),D6e=a("span"),cMr=o("TFAutoModelForSpeechSeq2Seq"),DPe=l(),Sr=a("div"),f(H0.$$.fragment),fMr=l(),Yc=a("p"),mMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZQ=a("a"),gMr=o("from_pretrained()"),hMr=o(" class method or the "),eW=a("a"),pMr=o("from_config()"),_Mr=o(` class
method.`),uMr=l(),U0=a("p"),bMr=o("This class cannot be instantiated directly using "),G6e=a("code"),FMr=o("__init__()"),vMr=o(" (throws an error)."),TMr=l(),wt=a("div"),f(J0.$$.fragment),MMr=l(),O6e=a("p"),EMr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),CMr=l(),Kc=a("p"),wMr=o(`Note:
Loading a model from its configuration file does `),V6e=a("strong"),AMr=o("not"),yMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=a("a"),LMr=o("from_pretrained()"),xMr=o(" to load the model weights."),kMr=l(),X6e=a("p"),SMr=o("Examples:"),RMr=l(),f(Y0.$$.fragment),BMr=l(),Ao=a("div"),f(K0.$$.fragment),PMr=l(),z6e=a("p"),$Mr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),IMr=l(),xn=a("p"),qMr=o("The model class to instantiate is selected based on the "),Q6e=a("code"),NMr=o("model_type"),jMr=o(` property of the config object (either
passed as an argument or loaded from `),W6e=a("code"),DMr=o("pretrained_model_name_or_path"),GMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H6e=a("code"),OMr=o("pretrained_model_name_or_path"),VMr=o(":"),XMr=l(),U6e=a("ul"),yM=a("li"),J6e=a("strong"),zMr=o("speech_to_text"),QMr=o(" \u2014 "),rW=a("a"),WMr=o("TFSpeech2TextForConditionalGeneration"),HMr=o(" (Speech2Text model)"),UMr=l(),Y6e=a("p"),JMr=o("Examples:"),YMr=l(),f(Z0.$$.fragment),GPe=l(),Zc=a("h2"),LM=a("a"),K6e=a("span"),f(ey.$$.fragment),KMr=l(),Z6e=a("span"),ZMr=o("FlaxAutoModel"),OPe=l(),Rr=a("div"),f(oy.$$.fragment),e4r=l(),ef=a("p"),o4r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tW=a("a"),r4r=o("from_pretrained()"),t4r=o(" class method or the "),aW=a("a"),a4r=o("from_config()"),n4r=o(` class
method.`),s4r=l(),ry=a("p"),l4r=o("This class cannot be instantiated directly using "),eFe=a("code"),i4r=o("__init__()"),d4r=o(" (throws an error)."),c4r=l(),At=a("div"),f(ty.$$.fragment),f4r=l(),oFe=a("p"),m4r=o("Instantiates one of the base model classes of the library from a configuration."),g4r=l(),of=a("p"),h4r=o(`Note:
Loading a model from its configuration file does `),rFe=a("strong"),p4r=o("not"),_4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=a("a"),u4r=o("from_pretrained()"),b4r=o(" to load the model weights."),F4r=l(),tFe=a("p"),v4r=o("Examples:"),T4r=l(),f(ay.$$.fragment),M4r=l(),yo=a("div"),f(ny.$$.fragment),E4r=l(),aFe=a("p"),C4r=o("Instantiate one of the base model classes of the library from a pretrained model."),w4r=l(),kn=a("p"),A4r=o("The model class to instantiate is selected based on the "),nFe=a("code"),y4r=o("model_type"),L4r=o(` property of the config object (either
passed as an argument or loaded from `),sFe=a("code"),x4r=o("pretrained_model_name_or_path"),k4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=a("code"),S4r=o("pretrained_model_name_or_path"),R4r=o(":"),B4r=l(),X=a("ul"),xM=a("li"),iFe=a("strong"),P4r=o("albert"),$4r=o(" \u2014 "),sW=a("a"),I4r=o("FlaxAlbertModel"),q4r=o(" (ALBERT model)"),N4r=l(),kM=a("li"),dFe=a("strong"),j4r=o("bart"),D4r=o(" \u2014 "),lW=a("a"),G4r=o("FlaxBartModel"),O4r=o(" (BART model)"),V4r=l(),SM=a("li"),cFe=a("strong"),X4r=o("beit"),z4r=o(" \u2014 "),iW=a("a"),Q4r=o("FlaxBeitModel"),W4r=o(" (BEiT model)"),H4r=l(),RM=a("li"),fFe=a("strong"),U4r=o("bert"),J4r=o(" \u2014 "),dW=a("a"),Y4r=o("FlaxBertModel"),K4r=o(" (BERT model)"),Z4r=l(),BM=a("li"),mFe=a("strong"),eEr=o("big_bird"),oEr=o(" \u2014 "),cW=a("a"),rEr=o("FlaxBigBirdModel"),tEr=o(" (BigBird model)"),aEr=l(),PM=a("li"),gFe=a("strong"),nEr=o("blenderbot"),sEr=o(" \u2014 "),fW=a("a"),lEr=o("FlaxBlenderbotModel"),iEr=o(" (Blenderbot model)"),dEr=l(),$M=a("li"),hFe=a("strong"),cEr=o("blenderbot-small"),fEr=o(" \u2014 "),mW=a("a"),mEr=o("FlaxBlenderbotSmallModel"),gEr=o(" (BlenderbotSmall model)"),hEr=l(),IM=a("li"),pFe=a("strong"),pEr=o("clip"),_Er=o(" \u2014 "),gW=a("a"),uEr=o("FlaxCLIPModel"),bEr=o(" (CLIP model)"),FEr=l(),qM=a("li"),_Fe=a("strong"),vEr=o("distilbert"),TEr=o(" \u2014 "),hW=a("a"),MEr=o("FlaxDistilBertModel"),EEr=o(" (DistilBERT model)"),CEr=l(),NM=a("li"),uFe=a("strong"),wEr=o("electra"),AEr=o(" \u2014 "),pW=a("a"),yEr=o("FlaxElectraModel"),LEr=o(" (ELECTRA model)"),xEr=l(),jM=a("li"),bFe=a("strong"),kEr=o("gpt2"),SEr=o(" \u2014 "),_W=a("a"),REr=o("FlaxGPT2Model"),BEr=o(" (OpenAI GPT-2 model)"),PEr=l(),DM=a("li"),FFe=a("strong"),$Er=o("gpt_neo"),IEr=o(" \u2014 "),uW=a("a"),qEr=o("FlaxGPTNeoModel"),NEr=o(" (GPT Neo model)"),jEr=l(),GM=a("li"),vFe=a("strong"),DEr=o("gptj"),GEr=o(" \u2014 "),bW=a("a"),OEr=o("FlaxGPTJModel"),VEr=o(" (GPT-J model)"),XEr=l(),OM=a("li"),TFe=a("strong"),zEr=o("longt5"),QEr=o(" \u2014 "),FW=a("a"),WEr=o("FlaxLongT5Model"),HEr=o(" (LongT5 model)"),UEr=l(),VM=a("li"),MFe=a("strong"),JEr=o("marian"),YEr=o(" \u2014 "),vW=a("a"),KEr=o("FlaxMarianModel"),ZEr=o(" (Marian model)"),e5r=l(),XM=a("li"),EFe=a("strong"),o5r=o("mbart"),r5r=o(" \u2014 "),TW=a("a"),t5r=o("FlaxMBartModel"),a5r=o(" (mBART model)"),n5r=l(),zM=a("li"),CFe=a("strong"),s5r=o("mt5"),l5r=o(" \u2014 "),MW=a("a"),i5r=o("FlaxMT5Model"),d5r=o(" (mT5 model)"),c5r=l(),QM=a("li"),wFe=a("strong"),f5r=o("pegasus"),m5r=o(" \u2014 "),EW=a("a"),g5r=o("FlaxPegasusModel"),h5r=o(" (Pegasus model)"),p5r=l(),WM=a("li"),AFe=a("strong"),_5r=o("roberta"),u5r=o(" \u2014 "),CW=a("a"),b5r=o("FlaxRobertaModel"),F5r=o(" (RoBERTa model)"),v5r=l(),HM=a("li"),yFe=a("strong"),T5r=o("roformer"),M5r=o(" \u2014 "),wW=a("a"),E5r=o("FlaxRoFormerModel"),C5r=o(" (RoFormer model)"),w5r=l(),UM=a("li"),LFe=a("strong"),A5r=o("t5"),y5r=o(" \u2014 "),AW=a("a"),L5r=o("FlaxT5Model"),x5r=o(" (T5 model)"),k5r=l(),JM=a("li"),xFe=a("strong"),S5r=o("vision-text-dual-encoder"),R5r=o(" \u2014 "),yW=a("a"),B5r=o("FlaxVisionTextDualEncoderModel"),P5r=o(" (VisionTextDualEncoder model)"),$5r=l(),YM=a("li"),kFe=a("strong"),I5r=o("vit"),q5r=o(" \u2014 "),LW=a("a"),N5r=o("FlaxViTModel"),j5r=o(" (ViT model)"),D5r=l(),KM=a("li"),SFe=a("strong"),G5r=o("wav2vec2"),O5r=o(" \u2014 "),xW=a("a"),V5r=o("FlaxWav2Vec2Model"),X5r=o(" (Wav2Vec2 model)"),z5r=l(),ZM=a("li"),RFe=a("strong"),Q5r=o("xglm"),W5r=o(" \u2014 "),kW=a("a"),H5r=o("FlaxXGLMModel"),U5r=o(" (XGLM model)"),J5r=l(),e4=a("li"),BFe=a("strong"),Y5r=o("xlm-roberta"),K5r=o(" \u2014 "),SW=a("a"),Z5r=o("FlaxXLMRobertaModel"),e3r=o(" (XLM-RoBERTa model)"),o3r=l(),PFe=a("p"),r3r=o("Examples:"),t3r=l(),f(sy.$$.fragment),VPe=l(),rf=a("h2"),o4=a("a"),$Fe=a("span"),f(ly.$$.fragment),a3r=l(),IFe=a("span"),n3r=o("FlaxAutoModelForCausalLM"),XPe=l(),Br=a("div"),f(iy.$$.fragment),s3r=l(),tf=a("p"),l3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RW=a("a"),i3r=o("from_pretrained()"),d3r=o(" class method or the "),BW=a("a"),c3r=o("from_config()"),f3r=o(` class
method.`),m3r=l(),dy=a("p"),g3r=o("This class cannot be instantiated directly using "),qFe=a("code"),h3r=o("__init__()"),p3r=o(" (throws an error)."),_3r=l(),yt=a("div"),f(cy.$$.fragment),u3r=l(),NFe=a("p"),b3r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),F3r=l(),af=a("p"),v3r=o(`Note:
Loading a model from its configuration file does `),jFe=a("strong"),T3r=o("not"),M3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=a("a"),E3r=o("from_pretrained()"),C3r=o(" to load the model weights."),w3r=l(),DFe=a("p"),A3r=o("Examples:"),y3r=l(),f(fy.$$.fragment),L3r=l(),Lo=a("div"),f(my.$$.fragment),x3r=l(),GFe=a("p"),k3r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),S3r=l(),Sn=a("p"),R3r=o("The model class to instantiate is selected based on the "),OFe=a("code"),B3r=o("model_type"),P3r=o(` property of the config object (either
passed as an argument or loaded from `),VFe=a("code"),$3r=o("pretrained_model_name_or_path"),I3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=a("code"),q3r=o("pretrained_model_name_or_path"),N3r=o(":"),j3r=l(),ca=a("ul"),r4=a("li"),zFe=a("strong"),D3r=o("bart"),G3r=o(" \u2014 "),$W=a("a"),O3r=o("FlaxBartForCausalLM"),V3r=o(" (BART model)"),X3r=l(),t4=a("li"),QFe=a("strong"),z3r=o("gpt2"),Q3r=o(" \u2014 "),IW=a("a"),W3r=o("FlaxGPT2LMHeadModel"),H3r=o(" (OpenAI GPT-2 model)"),U3r=l(),a4=a("li"),WFe=a("strong"),J3r=o("gpt_neo"),Y3r=o(" \u2014 "),qW=a("a"),K3r=o("FlaxGPTNeoForCausalLM"),Z3r=o(" (GPT Neo model)"),eCr=l(),n4=a("li"),HFe=a("strong"),oCr=o("gptj"),rCr=o(" \u2014 "),NW=a("a"),tCr=o("FlaxGPTJForCausalLM"),aCr=o(" (GPT-J model)"),nCr=l(),s4=a("li"),UFe=a("strong"),sCr=o("xglm"),lCr=o(" \u2014 "),jW=a("a"),iCr=o("FlaxXGLMForCausalLM"),dCr=o(" (XGLM model)"),cCr=l(),JFe=a("p"),fCr=o("Examples:"),mCr=l(),f(gy.$$.fragment),zPe=l(),nf=a("h2"),l4=a("a"),YFe=a("span"),f(hy.$$.fragment),gCr=l(),KFe=a("span"),hCr=o("FlaxAutoModelForPreTraining"),QPe=l(),Pr=a("div"),f(py.$$.fragment),pCr=l(),sf=a("p"),_Cr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),DW=a("a"),uCr=o("from_pretrained()"),bCr=o(" class method or the "),GW=a("a"),FCr=o("from_config()"),vCr=o(` class
method.`),TCr=l(),_y=a("p"),MCr=o("This class cannot be instantiated directly using "),ZFe=a("code"),ECr=o("__init__()"),CCr=o(" (throws an error)."),wCr=l(),Lt=a("div"),f(uy.$$.fragment),ACr=l(),eve=a("p"),yCr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),LCr=l(),lf=a("p"),xCr=o(`Note:
Loading a model from its configuration file does `),ove=a("strong"),kCr=o("not"),SCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=a("a"),RCr=o("from_pretrained()"),BCr=o(" to load the model weights."),PCr=l(),rve=a("p"),$Cr=o("Examples:"),ICr=l(),f(by.$$.fragment),qCr=l(),xo=a("div"),f(Fy.$$.fragment),NCr=l(),tve=a("p"),jCr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),DCr=l(),Rn=a("p"),GCr=o("The model class to instantiate is selected based on the "),ave=a("code"),OCr=o("model_type"),VCr=o(` property of the config object (either
passed as an argument or loaded from `),nve=a("code"),XCr=o("pretrained_model_name_or_path"),zCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=a("code"),QCr=o("pretrained_model_name_or_path"),WCr=o(":"),HCr=l(),ce=a("ul"),i4=a("li"),lve=a("strong"),UCr=o("albert"),JCr=o(" \u2014 "),VW=a("a"),YCr=o("FlaxAlbertForPreTraining"),KCr=o(" (ALBERT model)"),ZCr=l(),d4=a("li"),ive=a("strong"),ewr=o("bart"),owr=o(" \u2014 "),XW=a("a"),rwr=o("FlaxBartForConditionalGeneration"),twr=o(" (BART model)"),awr=l(),c4=a("li"),dve=a("strong"),nwr=o("bert"),swr=o(" \u2014 "),zW=a("a"),lwr=o("FlaxBertForPreTraining"),iwr=o(" (BERT model)"),dwr=l(),f4=a("li"),cve=a("strong"),cwr=o("big_bird"),fwr=o(" \u2014 "),QW=a("a"),mwr=o("FlaxBigBirdForPreTraining"),gwr=o(" (BigBird model)"),hwr=l(),m4=a("li"),fve=a("strong"),pwr=o("electra"),_wr=o(" \u2014 "),WW=a("a"),uwr=o("FlaxElectraForPreTraining"),bwr=o(" (ELECTRA model)"),Fwr=l(),g4=a("li"),mve=a("strong"),vwr=o("longt5"),Twr=o(" \u2014 "),HW=a("a"),Mwr=o("FlaxLongT5ForConditionalGeneration"),Ewr=o(" (LongT5 model)"),Cwr=l(),h4=a("li"),gve=a("strong"),wwr=o("mbart"),Awr=o(" \u2014 "),UW=a("a"),ywr=o("FlaxMBartForConditionalGeneration"),Lwr=o(" (mBART model)"),xwr=l(),p4=a("li"),hve=a("strong"),kwr=o("mt5"),Swr=o(" \u2014 "),JW=a("a"),Rwr=o("FlaxMT5ForConditionalGeneration"),Bwr=o(" (mT5 model)"),Pwr=l(),_4=a("li"),pve=a("strong"),$wr=o("roberta"),Iwr=o(" \u2014 "),YW=a("a"),qwr=o("FlaxRobertaForMaskedLM"),Nwr=o(" (RoBERTa model)"),jwr=l(),u4=a("li"),_ve=a("strong"),Dwr=o("roformer"),Gwr=o(" \u2014 "),KW=a("a"),Owr=o("FlaxRoFormerForMaskedLM"),Vwr=o(" (RoFormer model)"),Xwr=l(),b4=a("li"),uve=a("strong"),zwr=o("t5"),Qwr=o(" \u2014 "),ZW=a("a"),Wwr=o("FlaxT5ForConditionalGeneration"),Hwr=o(" (T5 model)"),Uwr=l(),F4=a("li"),bve=a("strong"),Jwr=o("wav2vec2"),Ywr=o(" \u2014 "),eH=a("a"),Kwr=o("FlaxWav2Vec2ForPreTraining"),Zwr=o(" (Wav2Vec2 model)"),eAr=l(),v4=a("li"),Fve=a("strong"),oAr=o("xlm-roberta"),rAr=o(" \u2014 "),oH=a("a"),tAr=o("FlaxXLMRobertaForMaskedLM"),aAr=o(" (XLM-RoBERTa model)"),nAr=l(),vve=a("p"),sAr=o("Examples:"),lAr=l(),f(vy.$$.fragment),WPe=l(),df=a("h2"),T4=a("a"),Tve=a("span"),f(Ty.$$.fragment),iAr=l(),Mve=a("span"),dAr=o("FlaxAutoModelForMaskedLM"),HPe=l(),$r=a("div"),f(My.$$.fragment),cAr=l(),cf=a("p"),fAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rH=a("a"),mAr=o("from_pretrained()"),gAr=o(" class method or the "),tH=a("a"),hAr=o("from_config()"),pAr=o(` class
method.`),_Ar=l(),Ey=a("p"),uAr=o("This class cannot be instantiated directly using "),Eve=a("code"),bAr=o("__init__()"),FAr=o(" (throws an error)."),vAr=l(),xt=a("div"),f(Cy.$$.fragment),TAr=l(),Cve=a("p"),MAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),EAr=l(),ff=a("p"),CAr=o(`Note:
Loading a model from its configuration file does `),wve=a("strong"),wAr=o("not"),AAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=a("a"),yAr=o("from_pretrained()"),LAr=o(" to load the model weights."),xAr=l(),Ave=a("p"),kAr=o("Examples:"),SAr=l(),f(wy.$$.fragment),RAr=l(),ko=a("div"),f(Ay.$$.fragment),BAr=l(),yve=a("p"),PAr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$Ar=l(),Bn=a("p"),IAr=o("The model class to instantiate is selected based on the "),Lve=a("code"),qAr=o("model_type"),NAr=o(` property of the config object (either
passed as an argument or loaded from `),xve=a("code"),jAr=o("pretrained_model_name_or_path"),DAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=a("code"),GAr=o("pretrained_model_name_or_path"),OAr=o(":"),VAr=l(),Fe=a("ul"),M4=a("li"),Sve=a("strong"),XAr=o("albert"),zAr=o(" \u2014 "),nH=a("a"),QAr=o("FlaxAlbertForMaskedLM"),WAr=o(" (ALBERT model)"),HAr=l(),E4=a("li"),Rve=a("strong"),UAr=o("bart"),JAr=o(" \u2014 "),sH=a("a"),YAr=o("FlaxBartForConditionalGeneration"),KAr=o(" (BART model)"),ZAr=l(),C4=a("li"),Bve=a("strong"),e0r=o("bert"),o0r=o(" \u2014 "),lH=a("a"),r0r=o("FlaxBertForMaskedLM"),t0r=o(" (BERT model)"),a0r=l(),w4=a("li"),Pve=a("strong"),n0r=o("big_bird"),s0r=o(" \u2014 "),iH=a("a"),l0r=o("FlaxBigBirdForMaskedLM"),i0r=o(" (BigBird model)"),d0r=l(),A4=a("li"),$ve=a("strong"),c0r=o("distilbert"),f0r=o(" \u2014 "),dH=a("a"),m0r=o("FlaxDistilBertForMaskedLM"),g0r=o(" (DistilBERT model)"),h0r=l(),y4=a("li"),Ive=a("strong"),p0r=o("electra"),_0r=o(" \u2014 "),cH=a("a"),u0r=o("FlaxElectraForMaskedLM"),b0r=o(" (ELECTRA model)"),F0r=l(),L4=a("li"),qve=a("strong"),v0r=o("mbart"),T0r=o(" \u2014 "),fH=a("a"),M0r=o("FlaxMBartForConditionalGeneration"),E0r=o(" (mBART model)"),C0r=l(),x4=a("li"),Nve=a("strong"),w0r=o("roberta"),A0r=o(" \u2014 "),mH=a("a"),y0r=o("FlaxRobertaForMaskedLM"),L0r=o(" (RoBERTa model)"),x0r=l(),k4=a("li"),jve=a("strong"),k0r=o("roformer"),S0r=o(" \u2014 "),gH=a("a"),R0r=o("FlaxRoFormerForMaskedLM"),B0r=o(" (RoFormer model)"),P0r=l(),S4=a("li"),Dve=a("strong"),$0r=o("xlm-roberta"),I0r=o(" \u2014 "),hH=a("a"),q0r=o("FlaxXLMRobertaForMaskedLM"),N0r=o(" (XLM-RoBERTa model)"),j0r=l(),Gve=a("p"),D0r=o("Examples:"),G0r=l(),f(yy.$$.fragment),UPe=l(),mf=a("h2"),R4=a("a"),Ove=a("span"),f(Ly.$$.fragment),O0r=l(),Vve=a("span"),V0r=o("FlaxAutoModelForSeq2SeqLM"),JPe=l(),Ir=a("div"),f(xy.$$.fragment),X0r=l(),gf=a("p"),z0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pH=a("a"),Q0r=o("from_pretrained()"),W0r=o(" class method or the "),_H=a("a"),H0r=o("from_config()"),U0r=o(` class
method.`),J0r=l(),ky=a("p"),Y0r=o("This class cannot be instantiated directly using "),Xve=a("code"),K0r=o("__init__()"),Z0r=o(" (throws an error)."),eyr=l(),kt=a("div"),f(Sy.$$.fragment),oyr=l(),zve=a("p"),ryr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tyr=l(),hf=a("p"),ayr=o(`Note:
Loading a model from its configuration file does `),Qve=a("strong"),nyr=o("not"),syr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=a("a"),lyr=o("from_pretrained()"),iyr=o(" to load the model weights."),dyr=l(),Wve=a("p"),cyr=o("Examples:"),fyr=l(),f(Ry.$$.fragment),myr=l(),So=a("div"),f(By.$$.fragment),gyr=l(),Hve=a("p"),hyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pyr=l(),Pn=a("p"),_yr=o("The model class to instantiate is selected based on the "),Uve=a("code"),uyr=o("model_type"),byr=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),Fyr=o("pretrained_model_name_or_path"),vyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),Tyr=o("pretrained_model_name_or_path"),Myr=o(":"),Eyr=l(),ve=a("ul"),B4=a("li"),Kve=a("strong"),Cyr=o("bart"),wyr=o(" \u2014 "),bH=a("a"),Ayr=o("FlaxBartForConditionalGeneration"),yyr=o(" (BART model)"),Lyr=l(),P4=a("li"),Zve=a("strong"),xyr=o("blenderbot"),kyr=o(" \u2014 "),FH=a("a"),Syr=o("FlaxBlenderbotForConditionalGeneration"),Ryr=o(" (Blenderbot model)"),Byr=l(),$4=a("li"),eTe=a("strong"),Pyr=o("blenderbot-small"),$yr=o(" \u2014 "),vH=a("a"),Iyr=o("FlaxBlenderbotSmallForConditionalGeneration"),qyr=o(" (BlenderbotSmall model)"),Nyr=l(),I4=a("li"),oTe=a("strong"),jyr=o("encoder-decoder"),Dyr=o(" \u2014 "),TH=a("a"),Gyr=o("FlaxEncoderDecoderModel"),Oyr=o(" (Encoder decoder model)"),Vyr=l(),q4=a("li"),rTe=a("strong"),Xyr=o("longt5"),zyr=o(" \u2014 "),MH=a("a"),Qyr=o("FlaxLongT5ForConditionalGeneration"),Wyr=o(" (LongT5 model)"),Hyr=l(),N4=a("li"),tTe=a("strong"),Uyr=o("marian"),Jyr=o(" \u2014 "),EH=a("a"),Yyr=o("FlaxMarianMTModel"),Kyr=o(" (Marian model)"),Zyr=l(),j4=a("li"),aTe=a("strong"),eLr=o("mbart"),oLr=o(" \u2014 "),CH=a("a"),rLr=o("FlaxMBartForConditionalGeneration"),tLr=o(" (mBART model)"),aLr=l(),D4=a("li"),nTe=a("strong"),nLr=o("mt5"),sLr=o(" \u2014 "),wH=a("a"),lLr=o("FlaxMT5ForConditionalGeneration"),iLr=o(" (mT5 model)"),dLr=l(),G4=a("li"),sTe=a("strong"),cLr=o("pegasus"),fLr=o(" \u2014 "),AH=a("a"),mLr=o("FlaxPegasusForConditionalGeneration"),gLr=o(" (Pegasus model)"),hLr=l(),O4=a("li"),lTe=a("strong"),pLr=o("t5"),_Lr=o(" \u2014 "),yH=a("a"),uLr=o("FlaxT5ForConditionalGeneration"),bLr=o(" (T5 model)"),FLr=l(),iTe=a("p"),vLr=o("Examples:"),TLr=l(),f(Py.$$.fragment),YPe=l(),pf=a("h2"),V4=a("a"),dTe=a("span"),f($y.$$.fragment),MLr=l(),cTe=a("span"),ELr=o("FlaxAutoModelForSequenceClassification"),KPe=l(),qr=a("div"),f(Iy.$$.fragment),CLr=l(),_f=a("p"),wLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),LH=a("a"),ALr=o("from_pretrained()"),yLr=o(" class method or the "),xH=a("a"),LLr=o("from_config()"),xLr=o(` class
method.`),kLr=l(),qy=a("p"),SLr=o("This class cannot be instantiated directly using "),fTe=a("code"),RLr=o("__init__()"),BLr=o(" (throws an error)."),PLr=l(),St=a("div"),f(Ny.$$.fragment),$Lr=l(),mTe=a("p"),ILr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qLr=l(),uf=a("p"),NLr=o(`Note:
Loading a model from its configuration file does `),gTe=a("strong"),jLr=o("not"),DLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=a("a"),GLr=o("from_pretrained()"),OLr=o(" to load the model weights."),VLr=l(),hTe=a("p"),XLr=o("Examples:"),zLr=l(),f(jy.$$.fragment),QLr=l(),Ro=a("div"),f(Dy.$$.fragment),WLr=l(),pTe=a("p"),HLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ULr=l(),$n=a("p"),JLr=o("The model class to instantiate is selected based on the "),_Te=a("code"),YLr=o("model_type"),KLr=o(` property of the config object (either
passed as an argument or loaded from `),uTe=a("code"),ZLr=o("pretrained_model_name_or_path"),e8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=a("code"),o8r=o("pretrained_model_name_or_path"),r8r=o(":"),t8r=l(),Te=a("ul"),X4=a("li"),FTe=a("strong"),a8r=o("albert"),n8r=o(" \u2014 "),SH=a("a"),s8r=o("FlaxAlbertForSequenceClassification"),l8r=o(" (ALBERT model)"),i8r=l(),z4=a("li"),vTe=a("strong"),d8r=o("bart"),c8r=o(" \u2014 "),RH=a("a"),f8r=o("FlaxBartForSequenceClassification"),m8r=o(" (BART model)"),g8r=l(),Q4=a("li"),TTe=a("strong"),h8r=o("bert"),p8r=o(" \u2014 "),BH=a("a"),_8r=o("FlaxBertForSequenceClassification"),u8r=o(" (BERT model)"),b8r=l(),W4=a("li"),MTe=a("strong"),F8r=o("big_bird"),v8r=o(" \u2014 "),PH=a("a"),T8r=o("FlaxBigBirdForSequenceClassification"),M8r=o(" (BigBird model)"),E8r=l(),H4=a("li"),ETe=a("strong"),C8r=o("distilbert"),w8r=o(" \u2014 "),$H=a("a"),A8r=o("FlaxDistilBertForSequenceClassification"),y8r=o(" (DistilBERT model)"),L8r=l(),U4=a("li"),CTe=a("strong"),x8r=o("electra"),k8r=o(" \u2014 "),IH=a("a"),S8r=o("FlaxElectraForSequenceClassification"),R8r=o(" (ELECTRA model)"),B8r=l(),J4=a("li"),wTe=a("strong"),P8r=o("mbart"),$8r=o(" \u2014 "),qH=a("a"),I8r=o("FlaxMBartForSequenceClassification"),q8r=o(" (mBART model)"),N8r=l(),Y4=a("li"),ATe=a("strong"),j8r=o("roberta"),D8r=o(" \u2014 "),NH=a("a"),G8r=o("FlaxRobertaForSequenceClassification"),O8r=o(" (RoBERTa model)"),V8r=l(),K4=a("li"),yTe=a("strong"),X8r=o("roformer"),z8r=o(" \u2014 "),jH=a("a"),Q8r=o("FlaxRoFormerForSequenceClassification"),W8r=o(" (RoFormer model)"),H8r=l(),Z4=a("li"),LTe=a("strong"),U8r=o("xlm-roberta"),J8r=o(" \u2014 "),DH=a("a"),Y8r=o("FlaxXLMRobertaForSequenceClassification"),K8r=o(" (XLM-RoBERTa model)"),Z8r=l(),xTe=a("p"),exr=o("Examples:"),oxr=l(),f(Gy.$$.fragment),ZPe=l(),bf=a("h2"),eE=a("a"),kTe=a("span"),f(Oy.$$.fragment),rxr=l(),STe=a("span"),txr=o("FlaxAutoModelForQuestionAnswering"),e$e=l(),Nr=a("div"),f(Vy.$$.fragment),axr=l(),Ff=a("p"),nxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GH=a("a"),sxr=o("from_pretrained()"),lxr=o(" class method or the "),OH=a("a"),ixr=o("from_config()"),dxr=o(` class
method.`),cxr=l(),Xy=a("p"),fxr=o("This class cannot be instantiated directly using "),RTe=a("code"),mxr=o("__init__()"),gxr=o(" (throws an error)."),hxr=l(),Rt=a("div"),f(zy.$$.fragment),pxr=l(),BTe=a("p"),_xr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uxr=l(),vf=a("p"),bxr=o(`Note:
Loading a model from its configuration file does `),PTe=a("strong"),Fxr=o("not"),vxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),Txr=o("from_pretrained()"),Mxr=o(" to load the model weights."),Exr=l(),$Te=a("p"),Cxr=o("Examples:"),wxr=l(),f(Qy.$$.fragment),Axr=l(),Bo=a("div"),f(Wy.$$.fragment),yxr=l(),ITe=a("p"),Lxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xxr=l(),In=a("p"),kxr=o("The model class to instantiate is selected based on the "),qTe=a("code"),Sxr=o("model_type"),Rxr=o(` property of the config object (either
passed as an argument or loaded from `),NTe=a("code"),Bxr=o("pretrained_model_name_or_path"),Pxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=a("code"),$xr=o("pretrained_model_name_or_path"),Ixr=o(":"),qxr=l(),Me=a("ul"),oE=a("li"),DTe=a("strong"),Nxr=o("albert"),jxr=o(" \u2014 "),XH=a("a"),Dxr=o("FlaxAlbertForQuestionAnswering"),Gxr=o(" (ALBERT model)"),Oxr=l(),rE=a("li"),GTe=a("strong"),Vxr=o("bart"),Xxr=o(" \u2014 "),zH=a("a"),zxr=o("FlaxBartForQuestionAnswering"),Qxr=o(" (BART model)"),Wxr=l(),tE=a("li"),OTe=a("strong"),Hxr=o("bert"),Uxr=o(" \u2014 "),QH=a("a"),Jxr=o("FlaxBertForQuestionAnswering"),Yxr=o(" (BERT model)"),Kxr=l(),aE=a("li"),VTe=a("strong"),Zxr=o("big_bird"),ekr=o(" \u2014 "),WH=a("a"),okr=o("FlaxBigBirdForQuestionAnswering"),rkr=o(" (BigBird model)"),tkr=l(),nE=a("li"),XTe=a("strong"),akr=o("distilbert"),nkr=o(" \u2014 "),HH=a("a"),skr=o("FlaxDistilBertForQuestionAnswering"),lkr=o(" (DistilBERT model)"),ikr=l(),sE=a("li"),zTe=a("strong"),dkr=o("electra"),ckr=o(" \u2014 "),UH=a("a"),fkr=o("FlaxElectraForQuestionAnswering"),mkr=o(" (ELECTRA model)"),gkr=l(),lE=a("li"),QTe=a("strong"),hkr=o("mbart"),pkr=o(" \u2014 "),JH=a("a"),_kr=o("FlaxMBartForQuestionAnswering"),ukr=o(" (mBART model)"),bkr=l(),iE=a("li"),WTe=a("strong"),Fkr=o("roberta"),vkr=o(" \u2014 "),YH=a("a"),Tkr=o("FlaxRobertaForQuestionAnswering"),Mkr=o(" (RoBERTa model)"),Ekr=l(),dE=a("li"),HTe=a("strong"),Ckr=o("roformer"),wkr=o(" \u2014 "),KH=a("a"),Akr=o("FlaxRoFormerForQuestionAnswering"),ykr=o(" (RoFormer model)"),Lkr=l(),cE=a("li"),UTe=a("strong"),xkr=o("xlm-roberta"),kkr=o(" \u2014 "),ZH=a("a"),Skr=o("FlaxXLMRobertaForQuestionAnswering"),Rkr=o(" (XLM-RoBERTa model)"),Bkr=l(),JTe=a("p"),Pkr=o("Examples:"),$kr=l(),f(Hy.$$.fragment),o$e=l(),Tf=a("h2"),fE=a("a"),YTe=a("span"),f(Uy.$$.fragment),Ikr=l(),KTe=a("span"),qkr=o("FlaxAutoModelForTokenClassification"),r$e=l(),jr=a("div"),f(Jy.$$.fragment),Nkr=l(),Mf=a("p"),jkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eU=a("a"),Dkr=o("from_pretrained()"),Gkr=o(" class method or the "),oU=a("a"),Okr=o("from_config()"),Vkr=o(` class
method.`),Xkr=l(),Yy=a("p"),zkr=o("This class cannot be instantiated directly using "),ZTe=a("code"),Qkr=o("__init__()"),Wkr=o(" (throws an error)."),Hkr=l(),Bt=a("div"),f(Ky.$$.fragment),Ukr=l(),e7e=a("p"),Jkr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ykr=l(),Ef=a("p"),Kkr=o(`Note:
Loading a model from its configuration file does `),o7e=a("strong"),Zkr=o("not"),eSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),oSr=o("from_pretrained()"),rSr=o(" to load the model weights."),tSr=l(),r7e=a("p"),aSr=o("Examples:"),nSr=l(),f(Zy.$$.fragment),sSr=l(),Po=a("div"),f(eL.$$.fragment),lSr=l(),t7e=a("p"),iSr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dSr=l(),qn=a("p"),cSr=o("The model class to instantiate is selected based on the "),a7e=a("code"),fSr=o("model_type"),mSr=o(` property of the config object (either
passed as an argument or loaded from `),n7e=a("code"),gSr=o("pretrained_model_name_or_path"),hSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=a("code"),pSr=o("pretrained_model_name_or_path"),_Sr=o(":"),uSr=l(),Pe=a("ul"),mE=a("li"),l7e=a("strong"),bSr=o("albert"),FSr=o(" \u2014 "),tU=a("a"),vSr=o("FlaxAlbertForTokenClassification"),TSr=o(" (ALBERT model)"),MSr=l(),gE=a("li"),i7e=a("strong"),ESr=o("bert"),CSr=o(" \u2014 "),aU=a("a"),wSr=o("FlaxBertForTokenClassification"),ASr=o(" (BERT model)"),ySr=l(),hE=a("li"),d7e=a("strong"),LSr=o("big_bird"),xSr=o(" \u2014 "),nU=a("a"),kSr=o("FlaxBigBirdForTokenClassification"),SSr=o(" (BigBird model)"),RSr=l(),pE=a("li"),c7e=a("strong"),BSr=o("distilbert"),PSr=o(" \u2014 "),sU=a("a"),$Sr=o("FlaxDistilBertForTokenClassification"),ISr=o(" (DistilBERT model)"),qSr=l(),_E=a("li"),f7e=a("strong"),NSr=o("electra"),jSr=o(" \u2014 "),lU=a("a"),DSr=o("FlaxElectraForTokenClassification"),GSr=o(" (ELECTRA model)"),OSr=l(),uE=a("li"),m7e=a("strong"),VSr=o("roberta"),XSr=o(" \u2014 "),iU=a("a"),zSr=o("FlaxRobertaForTokenClassification"),QSr=o(" (RoBERTa model)"),WSr=l(),bE=a("li"),g7e=a("strong"),HSr=o("roformer"),USr=o(" \u2014 "),dU=a("a"),JSr=o("FlaxRoFormerForTokenClassification"),YSr=o(" (RoFormer model)"),KSr=l(),FE=a("li"),h7e=a("strong"),ZSr=o("xlm-roberta"),eRr=o(" \u2014 "),cU=a("a"),oRr=o("FlaxXLMRobertaForTokenClassification"),rRr=o(" (XLM-RoBERTa model)"),tRr=l(),p7e=a("p"),aRr=o("Examples:"),nRr=l(),f(oL.$$.fragment),t$e=l(),Cf=a("h2"),vE=a("a"),_7e=a("span"),f(rL.$$.fragment),sRr=l(),u7e=a("span"),lRr=o("FlaxAutoModelForMultipleChoice"),a$e=l(),Dr=a("div"),f(tL.$$.fragment),iRr=l(),wf=a("p"),dRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fU=a("a"),cRr=o("from_pretrained()"),fRr=o(" class method or the "),mU=a("a"),mRr=o("from_config()"),gRr=o(` class
method.`),hRr=l(),aL=a("p"),pRr=o("This class cannot be instantiated directly using "),b7e=a("code"),_Rr=o("__init__()"),uRr=o(" (throws an error)."),bRr=l(),Pt=a("div"),f(nL.$$.fragment),FRr=l(),F7e=a("p"),vRr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),TRr=l(),Af=a("p"),MRr=o(`Note:
Loading a model from its configuration file does `),v7e=a("strong"),ERr=o("not"),CRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),wRr=o("from_pretrained()"),ARr=o(" to load the model weights."),yRr=l(),T7e=a("p"),LRr=o("Examples:"),xRr=l(),f(sL.$$.fragment),kRr=l(),$o=a("div"),f(lL.$$.fragment),SRr=l(),M7e=a("p"),RRr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),BRr=l(),Nn=a("p"),PRr=o("The model class to instantiate is selected based on the "),E7e=a("code"),$Rr=o("model_type"),IRr=o(` property of the config object (either
passed as an argument or loaded from `),C7e=a("code"),qRr=o("pretrained_model_name_or_path"),NRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=a("code"),jRr=o("pretrained_model_name_or_path"),DRr=o(":"),GRr=l(),$e=a("ul"),TE=a("li"),A7e=a("strong"),ORr=o("albert"),VRr=o(" \u2014 "),hU=a("a"),XRr=o("FlaxAlbertForMultipleChoice"),zRr=o(" (ALBERT model)"),QRr=l(),ME=a("li"),y7e=a("strong"),WRr=o("bert"),HRr=o(" \u2014 "),pU=a("a"),URr=o("FlaxBertForMultipleChoice"),JRr=o(" (BERT model)"),YRr=l(),EE=a("li"),L7e=a("strong"),KRr=o("big_bird"),ZRr=o(" \u2014 "),_U=a("a"),eBr=o("FlaxBigBirdForMultipleChoice"),oBr=o(" (BigBird model)"),rBr=l(),CE=a("li"),x7e=a("strong"),tBr=o("distilbert"),aBr=o(" \u2014 "),uU=a("a"),nBr=o("FlaxDistilBertForMultipleChoice"),sBr=o(" (DistilBERT model)"),lBr=l(),wE=a("li"),k7e=a("strong"),iBr=o("electra"),dBr=o(" \u2014 "),bU=a("a"),cBr=o("FlaxElectraForMultipleChoice"),fBr=o(" (ELECTRA model)"),mBr=l(),AE=a("li"),S7e=a("strong"),gBr=o("roberta"),hBr=o(" \u2014 "),FU=a("a"),pBr=o("FlaxRobertaForMultipleChoice"),_Br=o(" (RoBERTa model)"),uBr=l(),yE=a("li"),R7e=a("strong"),bBr=o("roformer"),FBr=o(" \u2014 "),vU=a("a"),vBr=o("FlaxRoFormerForMultipleChoice"),TBr=o(" (RoFormer model)"),MBr=l(),LE=a("li"),B7e=a("strong"),EBr=o("xlm-roberta"),CBr=o(" \u2014 "),TU=a("a"),wBr=o("FlaxXLMRobertaForMultipleChoice"),ABr=o(" (XLM-RoBERTa model)"),yBr=l(),P7e=a("p"),LBr=o("Examples:"),xBr=l(),f(iL.$$.fragment),n$e=l(),yf=a("h2"),xE=a("a"),$7e=a("span"),f(dL.$$.fragment),kBr=l(),I7e=a("span"),SBr=o("FlaxAutoModelForNextSentencePrediction"),s$e=l(),Gr=a("div"),f(cL.$$.fragment),RBr=l(),Lf=a("p"),BBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),MU=a("a"),PBr=o("from_pretrained()"),$Br=o(" class method or the "),EU=a("a"),IBr=o("from_config()"),qBr=o(` class
method.`),NBr=l(),fL=a("p"),jBr=o("This class cannot be instantiated directly using "),q7e=a("code"),DBr=o("__init__()"),GBr=o(" (throws an error)."),OBr=l(),$t=a("div"),f(mL.$$.fragment),VBr=l(),N7e=a("p"),XBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zBr=l(),xf=a("p"),QBr=o(`Note:
Loading a model from its configuration file does `),j7e=a("strong"),WBr=o("not"),HBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),UBr=o("from_pretrained()"),JBr=o(" to load the model weights."),YBr=l(),D7e=a("p"),KBr=o("Examples:"),ZBr=l(),f(gL.$$.fragment),ePr=l(),Io=a("div"),f(hL.$$.fragment),oPr=l(),G7e=a("p"),rPr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tPr=l(),jn=a("p"),aPr=o("The model class to instantiate is selected based on the "),O7e=a("code"),nPr=o("model_type"),sPr=o(` property of the config object (either
passed as an argument or loaded from `),V7e=a("code"),lPr=o("pretrained_model_name_or_path"),iPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X7e=a("code"),dPr=o("pretrained_model_name_or_path"),cPr=o(":"),fPr=l(),z7e=a("ul"),kE=a("li"),Q7e=a("strong"),mPr=o("bert"),gPr=o(" \u2014 "),wU=a("a"),hPr=o("FlaxBertForNextSentencePrediction"),pPr=o(" (BERT model)"),_Pr=l(),W7e=a("p"),uPr=o("Examples:"),bPr=l(),f(pL.$$.fragment),l$e=l(),kf=a("h2"),SE=a("a"),H7e=a("span"),f(_L.$$.fragment),FPr=l(),U7e=a("span"),vPr=o("FlaxAutoModelForImageClassification"),i$e=l(),Or=a("div"),f(uL.$$.fragment),TPr=l(),Sf=a("p"),MPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),AU=a("a"),EPr=o("from_pretrained()"),CPr=o(" class method or the "),yU=a("a"),wPr=o("from_config()"),APr=o(` class
method.`),yPr=l(),bL=a("p"),LPr=o("This class cannot be instantiated directly using "),J7e=a("code"),xPr=o("__init__()"),kPr=o(" (throws an error)."),SPr=l(),It=a("div"),f(FL.$$.fragment),RPr=l(),Y7e=a("p"),BPr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),PPr=l(),Rf=a("p"),$Pr=o(`Note:
Loading a model from its configuration file does `),K7e=a("strong"),IPr=o("not"),qPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=a("a"),NPr=o("from_pretrained()"),jPr=o(" to load the model weights."),DPr=l(),Z7e=a("p"),GPr=o("Examples:"),OPr=l(),f(vL.$$.fragment),VPr=l(),qo=a("div"),f(TL.$$.fragment),XPr=l(),e9e=a("p"),zPr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QPr=l(),Dn=a("p"),WPr=o("The model class to instantiate is selected based on the "),o9e=a("code"),HPr=o("model_type"),UPr=o(` property of the config object (either
passed as an argument or loaded from `),r9e=a("code"),JPr=o("pretrained_model_name_or_path"),YPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t9e=a("code"),KPr=o("pretrained_model_name_or_path"),ZPr=o(":"),e$r=l(),ML=a("ul"),RE=a("li"),a9e=a("strong"),o$r=o("beit"),r$r=o(" \u2014 "),xU=a("a"),t$r=o("FlaxBeitForImageClassification"),a$r=o(" (BEiT model)"),n$r=l(),BE=a("li"),n9e=a("strong"),s$r=o("vit"),l$r=o(" \u2014 "),kU=a("a"),i$r=o("FlaxViTForImageClassification"),d$r=o(" (ViT model)"),c$r=l(),s9e=a("p"),f$r=o("Examples:"),m$r=l(),f(EL.$$.fragment),d$e=l(),Bf=a("h2"),PE=a("a"),l9e=a("span"),f(CL.$$.fragment),g$r=l(),i9e=a("span"),h$r=o("FlaxAutoModelForVision2Seq"),c$e=l(),Vr=a("div"),f(wL.$$.fragment),p$r=l(),Pf=a("p"),_$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SU=a("a"),u$r=o("from_pretrained()"),b$r=o(" class method or the "),RU=a("a"),F$r=o("from_config()"),v$r=o(` class
method.`),T$r=l(),AL=a("p"),M$r=o("This class cannot be instantiated directly using "),d9e=a("code"),E$r=o("__init__()"),C$r=o(" (throws an error)."),w$r=l(),qt=a("div"),f(yL.$$.fragment),A$r=l(),c9e=a("p"),y$r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),L$r=l(),$f=a("p"),x$r=o(`Note:
Loading a model from its configuration file does `),f9e=a("strong"),k$r=o("not"),S$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=a("a"),R$r=o("from_pretrained()"),B$r=o(" to load the model weights."),P$r=l(),m9e=a("p"),$$r=o("Examples:"),I$r=l(),f(LL.$$.fragment),q$r=l(),No=a("div"),f(xL.$$.fragment),N$r=l(),g9e=a("p"),j$r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),D$r=l(),Gn=a("p"),G$r=o("The model class to instantiate is selected based on the "),h9e=a("code"),O$r=o("model_type"),V$r=o(` property of the config object (either
passed as an argument or loaded from `),p9e=a("code"),X$r=o("pretrained_model_name_or_path"),z$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_9e=a("code"),Q$r=o("pretrained_model_name_or_path"),W$r=o(":"),H$r=l(),u9e=a("ul"),$E=a("li"),b9e=a("strong"),U$r=o("vision-encoder-decoder"),J$r=o(" \u2014 "),PU=a("a"),Y$r=o("FlaxVisionEncoderDecoderModel"),K$r=o(" (Vision Encoder decoder model)"),Z$r=l(),F9e=a("p"),eIr=o("Examples:"),oIr=l(),f(kL.$$.fragment),this.h()},l(c){const u=lwt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),fe=n(c,"H1",{class:!0});var SL=s(fe);Ce=n(SL,"A",{id:!0,class:!0,href:!0});var v9e=s(Ce);lo=n(v9e,"SPAN",{});var T9e=s(lo);m(pe.$$.fragment,T9e),T9e.forEach(t),v9e.forEach(t),Ee=i(SL),Xo=n(SL,"SPAN",{});var tIr=s(Xo);Ni=r(tIr,"Auto Classes"),tIr.forEach(t),SL.forEach(t),Nf=i(c),fa=n(c,"P",{});var m$e=s(fa);ji=r(m$e,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=n(m$e,"CODE",{});var aIr=s(Di);I5=r(aIr,"from_pretrained()"),aIr.forEach(t),jf=r(m$e,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),m$e.forEach(t),ke=i(c),co=n(c,"P",{});var IE=s(co);Gi=r(IE,"Instantiating one of "),On=n(IE,"A",{href:!0});var nIr=s(On);q5=r(nIr,"AutoConfig"),nIr.forEach(t),Vn=r(IE,", "),Xn=n(IE,"A",{href:!0});var sIr=s(Xn);N5=r(sIr,"AutoModel"),sIr.forEach(t),Oi=r(IE,`, and
`),zn=n(IE,"A",{href:!0});var lIr=s(zn);j5=r(lIr,"AutoTokenizer"),lIr.forEach(t),Vi=r(IE," will directly create a class of the relevant architecture. For instance"),IE.forEach(t),Df=i(c),m(Da.$$.fragment,c),fo=i(c),ue=n(c,"P",{});var g$e=s(ue);x8=r(g$e,"will create a model that is an instance of "),Xi=n(g$e,"A",{href:!0});var iIr=s(Xi);k8=r(iIr,"BertModel"),iIr.forEach(t),S8=r(g$e,"."),g$e.forEach(t),zo=i(c),Ga=n(c,"P",{});var h$e=s(Ga);R8=r(h$e,"There is one class of "),Gf=n(h$e,"CODE",{});var dIr=s(Gf);B8=r(dIr,"AutoModel"),dIr.forEach(t),Eqe=r(h$e," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),h$e.forEach(t),cBe=i(c),zi=n(c,"H2",{class:!0});var p$e=s(zi);Of=n(p$e,"A",{id:!0,class:!0,href:!0});var cIr=s(Of);yY=n(cIr,"SPAN",{});var fIr=s(yY);m(D5.$$.fragment,fIr),fIr.forEach(t),cIr.forEach(t),Cqe=i(p$e),LY=n(p$e,"SPAN",{});var mIr=s(LY);wqe=r(mIr,"Extending the Auto Classes"),mIr.forEach(t),p$e.forEach(t),fBe=i(c),Qn=n(c,"P",{});var $U=s(Qn);Aqe=r($U,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),xY=n($U,"CODE",{});var gIr=s(xY);yqe=r(gIr,"NewModel"),gIr.forEach(t),Lqe=r($U,", make sure you have a "),kY=n($U,"CODE",{});var hIr=s(kY);xqe=r(hIr,"NewModelConfig"),hIr.forEach(t),kqe=r($U,` then you can add those to the auto
classes like this:`),$U.forEach(t),mBe=i(c),m(G5.$$.fragment,c),gBe=i(c),P8=n(c,"P",{});var pIr=s(P8);Sqe=r(pIr,"You will then be able to use the auto classes like you would usually do!"),pIr.forEach(t),hBe=i(c),m(Vf.$$.fragment,c),pBe=i(c),Qi=n(c,"H2",{class:!0});var _$e=s(Qi);Xf=n(_$e,"A",{id:!0,class:!0,href:!0});var _Ir=s(Xf);SY=n(_Ir,"SPAN",{});var uIr=s(SY);m(O5.$$.fragment,uIr),uIr.forEach(t),_Ir.forEach(t),Rqe=i(_$e),RY=n(_$e,"SPAN",{});var bIr=s(RY);Bqe=r(bIr,"AutoConfig"),bIr.forEach(t),_$e.forEach(t),_Be=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);m(V5.$$.fragment,Xs),Pqe=i(Xs),X5=n(Xs,"P",{});var u$e=s(X5);$qe=r(u$e,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),$8=n(u$e,"A",{href:!0});var FIr=s($8);Iqe=r(FIr,"from_pretrained()"),FIr.forEach(t),qqe=r(u$e," class method."),u$e.forEach(t),Nqe=i(Xs),z5=n(Xs,"P",{});var b$e=s(z5);jqe=r(b$e,"This class cannot be instantiated directly using "),BY=n(b$e,"CODE",{});var vIr=s(BY);Dqe=r(vIr,"__init__()"),vIr.forEach(t),Gqe=r(b$e," (throws an error)."),b$e.forEach(t),Oqe=i(Xs),mo=n(Xs,"DIV",{class:!0});var ga=s(mo);m(Q5.$$.fragment,ga),Vqe=i(ga),PY=n(ga,"P",{});var TIr=s(PY);Xqe=r(TIr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),TIr.forEach(t),zqe=i(ga),Wi=n(ga,"P",{});var IU=s(Wi);Qqe=r(IU,"The configuration class to instantiate is selected based on the "),$Y=n(IU,"CODE",{});var MIr=s($Y);Wqe=r(MIr,"model_type"),MIr.forEach(t),Hqe=r(IU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),IY=n(IU,"CODE",{});var EIr=s(IY);Uqe=r(EIr,"pretrained_model_name_or_path"),EIr.forEach(t),Jqe=r(IU,":"),IU.forEach(t),Yqe=i(ga),F=n(ga,"UL",{});var v=s(F);zf=n(v,"LI",{});var M9e=s(zf);qY=n(M9e,"STRONG",{});var CIr=s(qY);Kqe=r(CIr,"albert"),CIr.forEach(t),Zqe=r(M9e," \u2014 "),I8=n(M9e,"A",{href:!0});var wIr=s(I8);eNe=r(wIr,"AlbertConfig"),wIr.forEach(t),oNe=r(M9e," (ALBERT model)"),M9e.forEach(t),rNe=i(v),Qf=n(v,"LI",{});var E9e=s(Qf);NY=n(E9e,"STRONG",{});var AIr=s(NY);tNe=r(AIr,"bart"),AIr.forEach(t),aNe=r(E9e," \u2014 "),q8=n(E9e,"A",{href:!0});var yIr=s(q8);nNe=r(yIr,"BartConfig"),yIr.forEach(t),sNe=r(E9e," (BART model)"),E9e.forEach(t),lNe=i(v),Wf=n(v,"LI",{});var C9e=s(Wf);jY=n(C9e,"STRONG",{});var LIr=s(jY);iNe=r(LIr,"beit"),LIr.forEach(t),dNe=r(C9e," \u2014 "),N8=n(C9e,"A",{href:!0});var xIr=s(N8);cNe=r(xIr,"BeitConfig"),xIr.forEach(t),fNe=r(C9e," (BEiT model)"),C9e.forEach(t),mNe=i(v),Hf=n(v,"LI",{});var w9e=s(Hf);DY=n(w9e,"STRONG",{});var kIr=s(DY);gNe=r(kIr,"bert"),kIr.forEach(t),hNe=r(w9e," \u2014 "),j8=n(w9e,"A",{href:!0});var SIr=s(j8);pNe=r(SIr,"BertConfig"),SIr.forEach(t),_Ne=r(w9e," (BERT model)"),w9e.forEach(t),uNe=i(v),Uf=n(v,"LI",{});var A9e=s(Uf);GY=n(A9e,"STRONG",{});var RIr=s(GY);bNe=r(RIr,"bert-generation"),RIr.forEach(t),FNe=r(A9e," \u2014 "),D8=n(A9e,"A",{href:!0});var BIr=s(D8);vNe=r(BIr,"BertGenerationConfig"),BIr.forEach(t),TNe=r(A9e," (Bert Generation model)"),A9e.forEach(t),MNe=i(v),Jf=n(v,"LI",{});var y9e=s(Jf);OY=n(y9e,"STRONG",{});var PIr=s(OY);ENe=r(PIr,"big_bird"),PIr.forEach(t),CNe=r(y9e," \u2014 "),G8=n(y9e,"A",{href:!0});var $Ir=s(G8);wNe=r($Ir,"BigBirdConfig"),$Ir.forEach(t),ANe=r(y9e," (BigBird model)"),y9e.forEach(t),yNe=i(v),Yf=n(v,"LI",{});var L9e=s(Yf);VY=n(L9e,"STRONG",{});var IIr=s(VY);LNe=r(IIr,"bigbird_pegasus"),IIr.forEach(t),xNe=r(L9e," \u2014 "),O8=n(L9e,"A",{href:!0});var qIr=s(O8);kNe=r(qIr,"BigBirdPegasusConfig"),qIr.forEach(t),SNe=r(L9e," (BigBirdPegasus model)"),L9e.forEach(t),RNe=i(v),Kf=n(v,"LI",{});var x9e=s(Kf);XY=n(x9e,"STRONG",{});var NIr=s(XY);BNe=r(NIr,"blenderbot"),NIr.forEach(t),PNe=r(x9e," \u2014 "),V8=n(x9e,"A",{href:!0});var jIr=s(V8);$Ne=r(jIr,"BlenderbotConfig"),jIr.forEach(t),INe=r(x9e," (Blenderbot model)"),x9e.forEach(t),qNe=i(v),Zf=n(v,"LI",{});var k9e=s(Zf);zY=n(k9e,"STRONG",{});var DIr=s(zY);NNe=r(DIr,"blenderbot-small"),DIr.forEach(t),jNe=r(k9e," \u2014 "),X8=n(k9e,"A",{href:!0});var GIr=s(X8);DNe=r(GIr,"BlenderbotSmallConfig"),GIr.forEach(t),GNe=r(k9e," (BlenderbotSmall model)"),k9e.forEach(t),ONe=i(v),em=n(v,"LI",{});var S9e=s(em);QY=n(S9e,"STRONG",{});var OIr=s(QY);VNe=r(OIr,"camembert"),OIr.forEach(t),XNe=r(S9e," \u2014 "),z8=n(S9e,"A",{href:!0});var VIr=s(z8);zNe=r(VIr,"CamembertConfig"),VIr.forEach(t),QNe=r(S9e," (CamemBERT model)"),S9e.forEach(t),WNe=i(v),om=n(v,"LI",{});var R9e=s(om);WY=n(R9e,"STRONG",{});var XIr=s(WY);HNe=r(XIr,"canine"),XIr.forEach(t),UNe=r(R9e," \u2014 "),Q8=n(R9e,"A",{href:!0});var zIr=s(Q8);JNe=r(zIr,"CanineConfig"),zIr.forEach(t),YNe=r(R9e," (Canine model)"),R9e.forEach(t),KNe=i(v),rm=n(v,"LI",{});var B9e=s(rm);HY=n(B9e,"STRONG",{});var QIr=s(HY);ZNe=r(QIr,"clip"),QIr.forEach(t),eje=r(B9e," \u2014 "),W8=n(B9e,"A",{href:!0});var WIr=s(W8);oje=r(WIr,"CLIPConfig"),WIr.forEach(t),rje=r(B9e," (CLIP model)"),B9e.forEach(t),tje=i(v),tm=n(v,"LI",{});var P9e=s(tm);UY=n(P9e,"STRONG",{});var HIr=s(UY);aje=r(HIr,"convbert"),HIr.forEach(t),nje=r(P9e," \u2014 "),H8=n(P9e,"A",{href:!0});var UIr=s(H8);sje=r(UIr,"ConvBertConfig"),UIr.forEach(t),lje=r(P9e," (ConvBERT model)"),P9e.forEach(t),ije=i(v),am=n(v,"LI",{});var $9e=s(am);JY=n($9e,"STRONG",{});var JIr=s(JY);dje=r(JIr,"convnext"),JIr.forEach(t),cje=r($9e," \u2014 "),U8=n($9e,"A",{href:!0});var YIr=s(U8);fje=r(YIr,"ConvNextConfig"),YIr.forEach(t),mje=r($9e," (ConvNext model)"),$9e.forEach(t),gje=i(v),nm=n(v,"LI",{});var I9e=s(nm);YY=n(I9e,"STRONG",{});var KIr=s(YY);hje=r(KIr,"ctrl"),KIr.forEach(t),pje=r(I9e," \u2014 "),J8=n(I9e,"A",{href:!0});var ZIr=s(J8);_je=r(ZIr,"CTRLConfig"),ZIr.forEach(t),uje=r(I9e," (CTRL model)"),I9e.forEach(t),bje=i(v),sm=n(v,"LI",{});var q9e=s(sm);KY=n(q9e,"STRONG",{});var eqr=s(KY);Fje=r(eqr,"data2vec-audio"),eqr.forEach(t),vje=r(q9e," \u2014 "),Y8=n(q9e,"A",{href:!0});var oqr=s(Y8);Tje=r(oqr,"Data2VecAudioConfig"),oqr.forEach(t),Mje=r(q9e," (Data2VecAudio model)"),q9e.forEach(t),Eje=i(v),lm=n(v,"LI",{});var N9e=s(lm);ZY=n(N9e,"STRONG",{});var rqr=s(ZY);Cje=r(rqr,"data2vec-text"),rqr.forEach(t),wje=r(N9e," \u2014 "),K8=n(N9e,"A",{href:!0});var tqr=s(K8);Aje=r(tqr,"Data2VecTextConfig"),tqr.forEach(t),yje=r(N9e," (Data2VecText model)"),N9e.forEach(t),Lje=i(v),im=n(v,"LI",{});var j9e=s(im);eK=n(j9e,"STRONG",{});var aqr=s(eK);xje=r(aqr,"data2vec-vision"),aqr.forEach(t),kje=r(j9e," \u2014 "),Z8=n(j9e,"A",{href:!0});var nqr=s(Z8);Sje=r(nqr,"Data2VecVisionConfig"),nqr.forEach(t),Rje=r(j9e," (Data2VecVision model)"),j9e.forEach(t),Bje=i(v),dm=n(v,"LI",{});var D9e=s(dm);oK=n(D9e,"STRONG",{});var sqr=s(oK);Pje=r(sqr,"deberta"),sqr.forEach(t),$je=r(D9e," \u2014 "),ex=n(D9e,"A",{href:!0});var lqr=s(ex);Ije=r(lqr,"DebertaConfig"),lqr.forEach(t),qje=r(D9e," (DeBERTa model)"),D9e.forEach(t),Nje=i(v),cm=n(v,"LI",{});var G9e=s(cm);rK=n(G9e,"STRONG",{});var iqr=s(rK);jje=r(iqr,"deberta-v2"),iqr.forEach(t),Dje=r(G9e," \u2014 "),ox=n(G9e,"A",{href:!0});var dqr=s(ox);Gje=r(dqr,"DebertaV2Config"),dqr.forEach(t),Oje=r(G9e," (DeBERTa-v2 model)"),G9e.forEach(t),Vje=i(v),fm=n(v,"LI",{});var O9e=s(fm);tK=n(O9e,"STRONG",{});var cqr=s(tK);Xje=r(cqr,"decision_transformer"),cqr.forEach(t),zje=r(O9e," \u2014 "),rx=n(O9e,"A",{href:!0});var fqr=s(rx);Qje=r(fqr,"DecisionTransformerConfig"),fqr.forEach(t),Wje=r(O9e," (Decision Transformer model)"),O9e.forEach(t),Hje=i(v),mm=n(v,"LI",{});var V9e=s(mm);aK=n(V9e,"STRONG",{});var mqr=s(aK);Uje=r(mqr,"deit"),mqr.forEach(t),Jje=r(V9e," \u2014 "),tx=n(V9e,"A",{href:!0});var gqr=s(tx);Yje=r(gqr,"DeiTConfig"),gqr.forEach(t),Kje=r(V9e," (DeiT model)"),V9e.forEach(t),Zje=i(v),gm=n(v,"LI",{});var X9e=s(gm);nK=n(X9e,"STRONG",{});var hqr=s(nK);eDe=r(hqr,"detr"),hqr.forEach(t),oDe=r(X9e," \u2014 "),ax=n(X9e,"A",{href:!0});var pqr=s(ax);rDe=r(pqr,"DetrConfig"),pqr.forEach(t),tDe=r(X9e," (DETR model)"),X9e.forEach(t),aDe=i(v),hm=n(v,"LI",{});var z9e=s(hm);sK=n(z9e,"STRONG",{});var _qr=s(sK);nDe=r(_qr,"distilbert"),_qr.forEach(t),sDe=r(z9e," \u2014 "),nx=n(z9e,"A",{href:!0});var uqr=s(nx);lDe=r(uqr,"DistilBertConfig"),uqr.forEach(t),iDe=r(z9e," (DistilBERT model)"),z9e.forEach(t),dDe=i(v),pm=n(v,"LI",{});var Q9e=s(pm);lK=n(Q9e,"STRONG",{});var bqr=s(lK);cDe=r(bqr,"dpr"),bqr.forEach(t),fDe=r(Q9e," \u2014 "),sx=n(Q9e,"A",{href:!0});var Fqr=s(sx);mDe=r(Fqr,"DPRConfig"),Fqr.forEach(t),gDe=r(Q9e," (DPR model)"),Q9e.forEach(t),hDe=i(v),_m=n(v,"LI",{});var W9e=s(_m);iK=n(W9e,"STRONG",{});var vqr=s(iK);pDe=r(vqr,"dpt"),vqr.forEach(t),_De=r(W9e," \u2014 "),lx=n(W9e,"A",{href:!0});var Tqr=s(lx);uDe=r(Tqr,"DPTConfig"),Tqr.forEach(t),bDe=r(W9e," (DPT model)"),W9e.forEach(t),FDe=i(v),um=n(v,"LI",{});var H9e=s(um);dK=n(H9e,"STRONG",{});var Mqr=s(dK);vDe=r(Mqr,"electra"),Mqr.forEach(t),TDe=r(H9e," \u2014 "),ix=n(H9e,"A",{href:!0});var Eqr=s(ix);MDe=r(Eqr,"ElectraConfig"),Eqr.forEach(t),EDe=r(H9e," (ELECTRA model)"),H9e.forEach(t),CDe=i(v),bm=n(v,"LI",{});var U9e=s(bm);cK=n(U9e,"STRONG",{});var Cqr=s(cK);wDe=r(Cqr,"encoder-decoder"),Cqr.forEach(t),ADe=r(U9e," \u2014 "),dx=n(U9e,"A",{href:!0});var wqr=s(dx);yDe=r(wqr,"EncoderDecoderConfig"),wqr.forEach(t),LDe=r(U9e," (Encoder decoder model)"),U9e.forEach(t),xDe=i(v),Fm=n(v,"LI",{});var J9e=s(Fm);fK=n(J9e,"STRONG",{});var Aqr=s(fK);kDe=r(Aqr,"flaubert"),Aqr.forEach(t),SDe=r(J9e," \u2014 "),cx=n(J9e,"A",{href:!0});var yqr=s(cx);RDe=r(yqr,"FlaubertConfig"),yqr.forEach(t),BDe=r(J9e," (FlauBERT model)"),J9e.forEach(t),PDe=i(v),vm=n(v,"LI",{});var Y9e=s(vm);mK=n(Y9e,"STRONG",{});var Lqr=s(mK);$De=r(Lqr,"fnet"),Lqr.forEach(t),IDe=r(Y9e," \u2014 "),fx=n(Y9e,"A",{href:!0});var xqr=s(fx);qDe=r(xqr,"FNetConfig"),xqr.forEach(t),NDe=r(Y9e," (FNet model)"),Y9e.forEach(t),jDe=i(v),Tm=n(v,"LI",{});var K9e=s(Tm);gK=n(K9e,"STRONG",{});var kqr=s(gK);DDe=r(kqr,"fsmt"),kqr.forEach(t),GDe=r(K9e," \u2014 "),mx=n(K9e,"A",{href:!0});var Sqr=s(mx);ODe=r(Sqr,"FSMTConfig"),Sqr.forEach(t),VDe=r(K9e," (FairSeq Machine-Translation model)"),K9e.forEach(t),XDe=i(v),Mm=n(v,"LI",{});var Z9e=s(Mm);hK=n(Z9e,"STRONG",{});var Rqr=s(hK);zDe=r(Rqr,"funnel"),Rqr.forEach(t),QDe=r(Z9e," \u2014 "),gx=n(Z9e,"A",{href:!0});var Bqr=s(gx);WDe=r(Bqr,"FunnelConfig"),Bqr.forEach(t),HDe=r(Z9e," (Funnel Transformer model)"),Z9e.forEach(t),UDe=i(v),Em=n(v,"LI",{});var eMe=s(Em);pK=n(eMe,"STRONG",{});var Pqr=s(pK);JDe=r(Pqr,"glpn"),Pqr.forEach(t),YDe=r(eMe," \u2014 "),hx=n(eMe,"A",{href:!0});var $qr=s(hx);KDe=r($qr,"GLPNConfig"),$qr.forEach(t),ZDe=r(eMe," (GLPN model)"),eMe.forEach(t),eGe=i(v),Cm=n(v,"LI",{});var oMe=s(Cm);_K=n(oMe,"STRONG",{});var Iqr=s(_K);oGe=r(Iqr,"gpt2"),Iqr.forEach(t),rGe=r(oMe," \u2014 "),px=n(oMe,"A",{href:!0});var qqr=s(px);tGe=r(qqr,"GPT2Config"),qqr.forEach(t),aGe=r(oMe," (OpenAI GPT-2 model)"),oMe.forEach(t),nGe=i(v),wm=n(v,"LI",{});var rMe=s(wm);uK=n(rMe,"STRONG",{});var Nqr=s(uK);sGe=r(Nqr,"gpt_neo"),Nqr.forEach(t),lGe=r(rMe," \u2014 "),_x=n(rMe,"A",{href:!0});var jqr=s(_x);iGe=r(jqr,"GPTNeoConfig"),jqr.forEach(t),dGe=r(rMe," (GPT Neo model)"),rMe.forEach(t),cGe=i(v),Am=n(v,"LI",{});var tMe=s(Am);bK=n(tMe,"STRONG",{});var Dqr=s(bK);fGe=r(Dqr,"gptj"),Dqr.forEach(t),mGe=r(tMe," \u2014 "),ux=n(tMe,"A",{href:!0});var Gqr=s(ux);gGe=r(Gqr,"GPTJConfig"),Gqr.forEach(t),hGe=r(tMe," (GPT-J model)"),tMe.forEach(t),pGe=i(v),ym=n(v,"LI",{});var aMe=s(ym);FK=n(aMe,"STRONG",{});var Oqr=s(FK);_Ge=r(Oqr,"hubert"),Oqr.forEach(t),uGe=r(aMe," \u2014 "),bx=n(aMe,"A",{href:!0});var Vqr=s(bx);bGe=r(Vqr,"HubertConfig"),Vqr.forEach(t),FGe=r(aMe," (Hubert model)"),aMe.forEach(t),vGe=i(v),Lm=n(v,"LI",{});var nMe=s(Lm);vK=n(nMe,"STRONG",{});var Xqr=s(vK);TGe=r(Xqr,"ibert"),Xqr.forEach(t),MGe=r(nMe," \u2014 "),Fx=n(nMe,"A",{href:!0});var zqr=s(Fx);EGe=r(zqr,"IBertConfig"),zqr.forEach(t),CGe=r(nMe," (I-BERT model)"),nMe.forEach(t),wGe=i(v),xm=n(v,"LI",{});var sMe=s(xm);TK=n(sMe,"STRONG",{});var Qqr=s(TK);AGe=r(Qqr,"imagegpt"),Qqr.forEach(t),yGe=r(sMe," \u2014 "),vx=n(sMe,"A",{href:!0});var Wqr=s(vx);LGe=r(Wqr,"ImageGPTConfig"),Wqr.forEach(t),xGe=r(sMe," (ImageGPT model)"),sMe.forEach(t),kGe=i(v),km=n(v,"LI",{});var lMe=s(km);MK=n(lMe,"STRONG",{});var Hqr=s(MK);SGe=r(Hqr,"layoutlm"),Hqr.forEach(t),RGe=r(lMe," \u2014 "),Tx=n(lMe,"A",{href:!0});var Uqr=s(Tx);BGe=r(Uqr,"LayoutLMConfig"),Uqr.forEach(t),PGe=r(lMe," (LayoutLM model)"),lMe.forEach(t),$Ge=i(v),Sm=n(v,"LI",{});var iMe=s(Sm);EK=n(iMe,"STRONG",{});var Jqr=s(EK);IGe=r(Jqr,"layoutlmv2"),Jqr.forEach(t),qGe=r(iMe," \u2014 "),Mx=n(iMe,"A",{href:!0});var Yqr=s(Mx);NGe=r(Yqr,"LayoutLMv2Config"),Yqr.forEach(t),jGe=r(iMe," (LayoutLMv2 model)"),iMe.forEach(t),DGe=i(v),Rm=n(v,"LI",{});var dMe=s(Rm);CK=n(dMe,"STRONG",{});var Kqr=s(CK);GGe=r(Kqr,"led"),Kqr.forEach(t),OGe=r(dMe," \u2014 "),Ex=n(dMe,"A",{href:!0});var Zqr=s(Ex);VGe=r(Zqr,"LEDConfig"),Zqr.forEach(t),XGe=r(dMe," (LED model)"),dMe.forEach(t),zGe=i(v),Bm=n(v,"LI",{});var cMe=s(Bm);wK=n(cMe,"STRONG",{});var eNr=s(wK);QGe=r(eNr,"longformer"),eNr.forEach(t),WGe=r(cMe," \u2014 "),Cx=n(cMe,"A",{href:!0});var oNr=s(Cx);HGe=r(oNr,"LongformerConfig"),oNr.forEach(t),UGe=r(cMe," (Longformer model)"),cMe.forEach(t),JGe=i(v),Pm=n(v,"LI",{});var fMe=s(Pm);AK=n(fMe,"STRONG",{});var rNr=s(AK);YGe=r(rNr,"longt5"),rNr.forEach(t),KGe=r(fMe," \u2014 "),wx=n(fMe,"A",{href:!0});var tNr=s(wx);ZGe=r(tNr,"LongT5Config"),tNr.forEach(t),eOe=r(fMe," (LongT5 model)"),fMe.forEach(t),oOe=i(v),$m=n(v,"LI",{});var mMe=s($m);yK=n(mMe,"STRONG",{});var aNr=s(yK);rOe=r(aNr,"luke"),aNr.forEach(t),tOe=r(mMe," \u2014 "),Ax=n(mMe,"A",{href:!0});var nNr=s(Ax);aOe=r(nNr,"LukeConfig"),nNr.forEach(t),nOe=r(mMe," (LUKE model)"),mMe.forEach(t),sOe=i(v),Im=n(v,"LI",{});var gMe=s(Im);LK=n(gMe,"STRONG",{});var sNr=s(LK);lOe=r(sNr,"lxmert"),sNr.forEach(t),iOe=r(gMe," \u2014 "),yx=n(gMe,"A",{href:!0});var lNr=s(yx);dOe=r(lNr,"LxmertConfig"),lNr.forEach(t),cOe=r(gMe," (LXMERT model)"),gMe.forEach(t),fOe=i(v),qm=n(v,"LI",{});var hMe=s(qm);xK=n(hMe,"STRONG",{});var iNr=s(xK);mOe=r(iNr,"m2m_100"),iNr.forEach(t),gOe=r(hMe," \u2014 "),Lx=n(hMe,"A",{href:!0});var dNr=s(Lx);hOe=r(dNr,"M2M100Config"),dNr.forEach(t),pOe=r(hMe," (M2M100 model)"),hMe.forEach(t),_Oe=i(v),Nm=n(v,"LI",{});var pMe=s(Nm);kK=n(pMe,"STRONG",{});var cNr=s(kK);uOe=r(cNr,"marian"),cNr.forEach(t),bOe=r(pMe," \u2014 "),xx=n(pMe,"A",{href:!0});var fNr=s(xx);FOe=r(fNr,"MarianConfig"),fNr.forEach(t),vOe=r(pMe," (Marian model)"),pMe.forEach(t),TOe=i(v),jm=n(v,"LI",{});var _Me=s(jm);SK=n(_Me,"STRONG",{});var mNr=s(SK);MOe=r(mNr,"maskformer"),mNr.forEach(t),EOe=r(_Me," \u2014 "),kx=n(_Me,"A",{href:!0});var gNr=s(kx);COe=r(gNr,"MaskFormerConfig"),gNr.forEach(t),wOe=r(_Me," (MaskFormer model)"),_Me.forEach(t),AOe=i(v),Dm=n(v,"LI",{});var uMe=s(Dm);RK=n(uMe,"STRONG",{});var hNr=s(RK);yOe=r(hNr,"mbart"),hNr.forEach(t),LOe=r(uMe," \u2014 "),Sx=n(uMe,"A",{href:!0});var pNr=s(Sx);xOe=r(pNr,"MBartConfig"),pNr.forEach(t),kOe=r(uMe," (mBART model)"),uMe.forEach(t),SOe=i(v),Gm=n(v,"LI",{});var bMe=s(Gm);BK=n(bMe,"STRONG",{});var _Nr=s(BK);ROe=r(_Nr,"megatron-bert"),_Nr.forEach(t),BOe=r(bMe," \u2014 "),Rx=n(bMe,"A",{href:!0});var uNr=s(Rx);POe=r(uNr,"MegatronBertConfig"),uNr.forEach(t),$Oe=r(bMe," (MegatronBert model)"),bMe.forEach(t),IOe=i(v),Om=n(v,"LI",{});var FMe=s(Om);PK=n(FMe,"STRONG",{});var bNr=s(PK);qOe=r(bNr,"mobilebert"),bNr.forEach(t),NOe=r(FMe," \u2014 "),Bx=n(FMe,"A",{href:!0});var FNr=s(Bx);jOe=r(FNr,"MobileBertConfig"),FNr.forEach(t),DOe=r(FMe," (MobileBERT model)"),FMe.forEach(t),GOe=i(v),Vm=n(v,"LI",{});var vMe=s(Vm);$K=n(vMe,"STRONG",{});var vNr=s($K);OOe=r(vNr,"mpnet"),vNr.forEach(t),VOe=r(vMe," \u2014 "),Px=n(vMe,"A",{href:!0});var TNr=s(Px);XOe=r(TNr,"MPNetConfig"),TNr.forEach(t),zOe=r(vMe," (MPNet model)"),vMe.forEach(t),QOe=i(v),Xm=n(v,"LI",{});var TMe=s(Xm);IK=n(TMe,"STRONG",{});var MNr=s(IK);WOe=r(MNr,"mt5"),MNr.forEach(t),HOe=r(TMe," \u2014 "),$x=n(TMe,"A",{href:!0});var ENr=s($x);UOe=r(ENr,"MT5Config"),ENr.forEach(t),JOe=r(TMe," (mT5 model)"),TMe.forEach(t),YOe=i(v),zm=n(v,"LI",{});var MMe=s(zm);qK=n(MMe,"STRONG",{});var CNr=s(qK);KOe=r(CNr,"nystromformer"),CNr.forEach(t),ZOe=r(MMe," \u2014 "),Ix=n(MMe,"A",{href:!0});var wNr=s(Ix);eVe=r(wNr,"NystromformerConfig"),wNr.forEach(t),oVe=r(MMe," (Nystromformer model)"),MMe.forEach(t),rVe=i(v),Qm=n(v,"LI",{});var EMe=s(Qm);NK=n(EMe,"STRONG",{});var ANr=s(NK);tVe=r(ANr,"openai-gpt"),ANr.forEach(t),aVe=r(EMe," \u2014 "),qx=n(EMe,"A",{href:!0});var yNr=s(qx);nVe=r(yNr,"OpenAIGPTConfig"),yNr.forEach(t),sVe=r(EMe," (OpenAI GPT model)"),EMe.forEach(t),lVe=i(v),Wm=n(v,"LI",{});var CMe=s(Wm);jK=n(CMe,"STRONG",{});var LNr=s(jK);iVe=r(LNr,"pegasus"),LNr.forEach(t),dVe=r(CMe," \u2014 "),Nx=n(CMe,"A",{href:!0});var xNr=s(Nx);cVe=r(xNr,"PegasusConfig"),xNr.forEach(t),fVe=r(CMe," (Pegasus model)"),CMe.forEach(t),mVe=i(v),Hm=n(v,"LI",{});var wMe=s(Hm);DK=n(wMe,"STRONG",{});var kNr=s(DK);gVe=r(kNr,"perceiver"),kNr.forEach(t),hVe=r(wMe," \u2014 "),jx=n(wMe,"A",{href:!0});var SNr=s(jx);pVe=r(SNr,"PerceiverConfig"),SNr.forEach(t),_Ve=r(wMe," (Perceiver model)"),wMe.forEach(t),uVe=i(v),Um=n(v,"LI",{});var AMe=s(Um);GK=n(AMe,"STRONG",{});var RNr=s(GK);bVe=r(RNr,"plbart"),RNr.forEach(t),FVe=r(AMe," \u2014 "),Dx=n(AMe,"A",{href:!0});var BNr=s(Dx);vVe=r(BNr,"PLBartConfig"),BNr.forEach(t),TVe=r(AMe," (PLBart model)"),AMe.forEach(t),MVe=i(v),Jm=n(v,"LI",{});var yMe=s(Jm);OK=n(yMe,"STRONG",{});var PNr=s(OK);EVe=r(PNr,"poolformer"),PNr.forEach(t),CVe=r(yMe," \u2014 "),Gx=n(yMe,"A",{href:!0});var $Nr=s(Gx);wVe=r($Nr,"PoolFormerConfig"),$Nr.forEach(t),AVe=r(yMe," (PoolFormer model)"),yMe.forEach(t),yVe=i(v),Ym=n(v,"LI",{});var LMe=s(Ym);VK=n(LMe,"STRONG",{});var INr=s(VK);LVe=r(INr,"prophetnet"),INr.forEach(t),xVe=r(LMe," \u2014 "),Ox=n(LMe,"A",{href:!0});var qNr=s(Ox);kVe=r(qNr,"ProphetNetConfig"),qNr.forEach(t),SVe=r(LMe," (ProphetNet model)"),LMe.forEach(t),RVe=i(v),Km=n(v,"LI",{});var xMe=s(Km);XK=n(xMe,"STRONG",{});var NNr=s(XK);BVe=r(NNr,"qdqbert"),NNr.forEach(t),PVe=r(xMe," \u2014 "),Vx=n(xMe,"A",{href:!0});var jNr=s(Vx);$Ve=r(jNr,"QDQBertConfig"),jNr.forEach(t),IVe=r(xMe," (QDQBert model)"),xMe.forEach(t),qVe=i(v),Zm=n(v,"LI",{});var kMe=s(Zm);zK=n(kMe,"STRONG",{});var DNr=s(zK);NVe=r(DNr,"rag"),DNr.forEach(t),jVe=r(kMe," \u2014 "),Xx=n(kMe,"A",{href:!0});var GNr=s(Xx);DVe=r(GNr,"RagConfig"),GNr.forEach(t),GVe=r(kMe," (RAG model)"),kMe.forEach(t),OVe=i(v),eg=n(v,"LI",{});var SMe=s(eg);QK=n(SMe,"STRONG",{});var ONr=s(QK);VVe=r(ONr,"realm"),ONr.forEach(t),XVe=r(SMe," \u2014 "),zx=n(SMe,"A",{href:!0});var VNr=s(zx);zVe=r(VNr,"RealmConfig"),VNr.forEach(t),QVe=r(SMe," (Realm model)"),SMe.forEach(t),WVe=i(v),og=n(v,"LI",{});var RMe=s(og);WK=n(RMe,"STRONG",{});var XNr=s(WK);HVe=r(XNr,"reformer"),XNr.forEach(t),UVe=r(RMe," \u2014 "),Qx=n(RMe,"A",{href:!0});var zNr=s(Qx);JVe=r(zNr,"ReformerConfig"),zNr.forEach(t),YVe=r(RMe," (Reformer model)"),RMe.forEach(t),KVe=i(v),rg=n(v,"LI",{});var BMe=s(rg);HK=n(BMe,"STRONG",{});var QNr=s(HK);ZVe=r(QNr,"regnet"),QNr.forEach(t),eXe=r(BMe," \u2014 "),Wx=n(BMe,"A",{href:!0});var WNr=s(Wx);oXe=r(WNr,"RegNetConfig"),WNr.forEach(t),rXe=r(BMe," (RegNet model)"),BMe.forEach(t),tXe=i(v),tg=n(v,"LI",{});var PMe=s(tg);UK=n(PMe,"STRONG",{});var HNr=s(UK);aXe=r(HNr,"rembert"),HNr.forEach(t),nXe=r(PMe," \u2014 "),Hx=n(PMe,"A",{href:!0});var UNr=s(Hx);sXe=r(UNr,"RemBertConfig"),UNr.forEach(t),lXe=r(PMe," (RemBERT model)"),PMe.forEach(t),iXe=i(v),ag=n(v,"LI",{});var $Me=s(ag);JK=n($Me,"STRONG",{});var JNr=s(JK);dXe=r(JNr,"resnet"),JNr.forEach(t),cXe=r($Me," \u2014 "),Ux=n($Me,"A",{href:!0});var YNr=s(Ux);fXe=r(YNr,"ResNetConfig"),YNr.forEach(t),mXe=r($Me," (ResNet model)"),$Me.forEach(t),gXe=i(v),ng=n(v,"LI",{});var IMe=s(ng);YK=n(IMe,"STRONG",{});var KNr=s(YK);hXe=r(KNr,"retribert"),KNr.forEach(t),pXe=r(IMe," \u2014 "),Jx=n(IMe,"A",{href:!0});var ZNr=s(Jx);_Xe=r(ZNr,"RetriBertConfig"),ZNr.forEach(t),uXe=r(IMe," (RetriBERT model)"),IMe.forEach(t),bXe=i(v),sg=n(v,"LI",{});var qMe=s(sg);KK=n(qMe,"STRONG",{});var ejr=s(KK);FXe=r(ejr,"roberta"),ejr.forEach(t),vXe=r(qMe," \u2014 "),Yx=n(qMe,"A",{href:!0});var ojr=s(Yx);TXe=r(ojr,"RobertaConfig"),ojr.forEach(t),MXe=r(qMe," (RoBERTa model)"),qMe.forEach(t),EXe=i(v),lg=n(v,"LI",{});var NMe=s(lg);ZK=n(NMe,"STRONG",{});var rjr=s(ZK);CXe=r(rjr,"roformer"),rjr.forEach(t),wXe=r(NMe," \u2014 "),Kx=n(NMe,"A",{href:!0});var tjr=s(Kx);AXe=r(tjr,"RoFormerConfig"),tjr.forEach(t),yXe=r(NMe," (RoFormer model)"),NMe.forEach(t),LXe=i(v),ig=n(v,"LI",{});var jMe=s(ig);eZ=n(jMe,"STRONG",{});var ajr=s(eZ);xXe=r(ajr,"segformer"),ajr.forEach(t),kXe=r(jMe," \u2014 "),Zx=n(jMe,"A",{href:!0});var njr=s(Zx);SXe=r(njr,"SegformerConfig"),njr.forEach(t),RXe=r(jMe," (SegFormer model)"),jMe.forEach(t),BXe=i(v),dg=n(v,"LI",{});var DMe=s(dg);oZ=n(DMe,"STRONG",{});var sjr=s(oZ);PXe=r(sjr,"sew"),sjr.forEach(t),$Xe=r(DMe," \u2014 "),ek=n(DMe,"A",{href:!0});var ljr=s(ek);IXe=r(ljr,"SEWConfig"),ljr.forEach(t),qXe=r(DMe," (SEW model)"),DMe.forEach(t),NXe=i(v),cg=n(v,"LI",{});var GMe=s(cg);rZ=n(GMe,"STRONG",{});var ijr=s(rZ);jXe=r(ijr,"sew-d"),ijr.forEach(t),DXe=r(GMe," \u2014 "),ok=n(GMe,"A",{href:!0});var djr=s(ok);GXe=r(djr,"SEWDConfig"),djr.forEach(t),OXe=r(GMe," (SEW-D model)"),GMe.forEach(t),VXe=i(v),fg=n(v,"LI",{});var OMe=s(fg);tZ=n(OMe,"STRONG",{});var cjr=s(tZ);XXe=r(cjr,"speech-encoder-decoder"),cjr.forEach(t),zXe=r(OMe," \u2014 "),rk=n(OMe,"A",{href:!0});var fjr=s(rk);QXe=r(fjr,"SpeechEncoderDecoderConfig"),fjr.forEach(t),WXe=r(OMe," (Speech Encoder decoder model)"),OMe.forEach(t),HXe=i(v),mg=n(v,"LI",{});var VMe=s(mg);aZ=n(VMe,"STRONG",{});var mjr=s(aZ);UXe=r(mjr,"speech_to_text"),mjr.forEach(t),JXe=r(VMe," \u2014 "),tk=n(VMe,"A",{href:!0});var gjr=s(tk);YXe=r(gjr,"Speech2TextConfig"),gjr.forEach(t),KXe=r(VMe," (Speech2Text model)"),VMe.forEach(t),ZXe=i(v),gg=n(v,"LI",{});var XMe=s(gg);nZ=n(XMe,"STRONG",{});var hjr=s(nZ);eze=r(hjr,"speech_to_text_2"),hjr.forEach(t),oze=r(XMe," \u2014 "),ak=n(XMe,"A",{href:!0});var pjr=s(ak);rze=r(pjr,"Speech2Text2Config"),pjr.forEach(t),tze=r(XMe," (Speech2Text2 model)"),XMe.forEach(t),aze=i(v),hg=n(v,"LI",{});var zMe=s(hg);sZ=n(zMe,"STRONG",{});var _jr=s(sZ);nze=r(_jr,"splinter"),_jr.forEach(t),sze=r(zMe," \u2014 "),nk=n(zMe,"A",{href:!0});var ujr=s(nk);lze=r(ujr,"SplinterConfig"),ujr.forEach(t),ize=r(zMe," (Splinter model)"),zMe.forEach(t),dze=i(v),pg=n(v,"LI",{});var QMe=s(pg);lZ=n(QMe,"STRONG",{});var bjr=s(lZ);cze=r(bjr,"squeezebert"),bjr.forEach(t),fze=r(QMe," \u2014 "),sk=n(QMe,"A",{href:!0});var Fjr=s(sk);mze=r(Fjr,"SqueezeBertConfig"),Fjr.forEach(t),gze=r(QMe," (SqueezeBERT model)"),QMe.forEach(t),hze=i(v),_g=n(v,"LI",{});var WMe=s(_g);iZ=n(WMe,"STRONG",{});var vjr=s(iZ);pze=r(vjr,"swin"),vjr.forEach(t),_ze=r(WMe," \u2014 "),lk=n(WMe,"A",{href:!0});var Tjr=s(lk);uze=r(Tjr,"SwinConfig"),Tjr.forEach(t),bze=r(WMe," (Swin model)"),WMe.forEach(t),Fze=i(v),ug=n(v,"LI",{});var HMe=s(ug);dZ=n(HMe,"STRONG",{});var Mjr=s(dZ);vze=r(Mjr,"t5"),Mjr.forEach(t),Tze=r(HMe," \u2014 "),ik=n(HMe,"A",{href:!0});var Ejr=s(ik);Mze=r(Ejr,"T5Config"),Ejr.forEach(t),Eze=r(HMe," (T5 model)"),HMe.forEach(t),Cze=i(v),bg=n(v,"LI",{});var UMe=s(bg);cZ=n(UMe,"STRONG",{});var Cjr=s(cZ);wze=r(Cjr,"tapas"),Cjr.forEach(t),Aze=r(UMe," \u2014 "),dk=n(UMe,"A",{href:!0});var wjr=s(dk);yze=r(wjr,"TapasConfig"),wjr.forEach(t),Lze=r(UMe," (TAPAS model)"),UMe.forEach(t),xze=i(v),Fg=n(v,"LI",{});var JMe=s(Fg);fZ=n(JMe,"STRONG",{});var Ajr=s(fZ);kze=r(Ajr,"tapex"),Ajr.forEach(t),Sze=r(JMe," \u2014 "),ck=n(JMe,"A",{href:!0});var yjr=s(ck);Rze=r(yjr,"BartConfig"),yjr.forEach(t),Bze=r(JMe," (TAPEX model)"),JMe.forEach(t),Pze=i(v),vg=n(v,"LI",{});var YMe=s(vg);mZ=n(YMe,"STRONG",{});var Ljr=s(mZ);$ze=r(Ljr,"transfo-xl"),Ljr.forEach(t),Ize=r(YMe," \u2014 "),fk=n(YMe,"A",{href:!0});var xjr=s(fk);qze=r(xjr,"TransfoXLConfig"),xjr.forEach(t),Nze=r(YMe," (Transformer-XL model)"),YMe.forEach(t),jze=i(v),Tg=n(v,"LI",{});var KMe=s(Tg);gZ=n(KMe,"STRONG",{});var kjr=s(gZ);Dze=r(kjr,"trocr"),kjr.forEach(t),Gze=r(KMe," \u2014 "),mk=n(KMe,"A",{href:!0});var Sjr=s(mk);Oze=r(Sjr,"TrOCRConfig"),Sjr.forEach(t),Vze=r(KMe," (TrOCR model)"),KMe.forEach(t),Xze=i(v),Mg=n(v,"LI",{});var ZMe=s(Mg);hZ=n(ZMe,"STRONG",{});var Rjr=s(hZ);zze=r(Rjr,"unispeech"),Rjr.forEach(t),Qze=r(ZMe," \u2014 "),gk=n(ZMe,"A",{href:!0});var Bjr=s(gk);Wze=r(Bjr,"UniSpeechConfig"),Bjr.forEach(t),Hze=r(ZMe," (UniSpeech model)"),ZMe.forEach(t),Uze=i(v),Eg=n(v,"LI",{});var e4e=s(Eg);pZ=n(e4e,"STRONG",{});var Pjr=s(pZ);Jze=r(Pjr,"unispeech-sat"),Pjr.forEach(t),Yze=r(e4e," \u2014 "),hk=n(e4e,"A",{href:!0});var $jr=s(hk);Kze=r($jr,"UniSpeechSatConfig"),$jr.forEach(t),Zze=r(e4e," (UniSpeechSat model)"),e4e.forEach(t),eQe=i(v),Cg=n(v,"LI",{});var o4e=s(Cg);_Z=n(o4e,"STRONG",{});var Ijr=s(_Z);oQe=r(Ijr,"van"),Ijr.forEach(t),rQe=r(o4e," \u2014 "),pk=n(o4e,"A",{href:!0});var qjr=s(pk);tQe=r(qjr,"VanConfig"),qjr.forEach(t),aQe=r(o4e," (VAN model)"),o4e.forEach(t),nQe=i(v),wg=n(v,"LI",{});var r4e=s(wg);uZ=n(r4e,"STRONG",{});var Njr=s(uZ);sQe=r(Njr,"vilt"),Njr.forEach(t),lQe=r(r4e," \u2014 "),_k=n(r4e,"A",{href:!0});var jjr=s(_k);iQe=r(jjr,"ViltConfig"),jjr.forEach(t),dQe=r(r4e," (ViLT model)"),r4e.forEach(t),cQe=i(v),Ag=n(v,"LI",{});var t4e=s(Ag);bZ=n(t4e,"STRONG",{});var Djr=s(bZ);fQe=r(Djr,"vision-encoder-decoder"),Djr.forEach(t),mQe=r(t4e," \u2014 "),uk=n(t4e,"A",{href:!0});var Gjr=s(uk);gQe=r(Gjr,"VisionEncoderDecoderConfig"),Gjr.forEach(t),hQe=r(t4e," (Vision Encoder decoder model)"),t4e.forEach(t),pQe=i(v),yg=n(v,"LI",{});var a4e=s(yg);FZ=n(a4e,"STRONG",{});var Ojr=s(FZ);_Qe=r(Ojr,"vision-text-dual-encoder"),Ojr.forEach(t),uQe=r(a4e," \u2014 "),bk=n(a4e,"A",{href:!0});var Vjr=s(bk);bQe=r(Vjr,"VisionTextDualEncoderConfig"),Vjr.forEach(t),FQe=r(a4e," (VisionTextDualEncoder model)"),a4e.forEach(t),vQe=i(v),Lg=n(v,"LI",{});var n4e=s(Lg);vZ=n(n4e,"STRONG",{});var Xjr=s(vZ);TQe=r(Xjr,"visual_bert"),Xjr.forEach(t),MQe=r(n4e," \u2014 "),Fk=n(n4e,"A",{href:!0});var zjr=s(Fk);EQe=r(zjr,"VisualBertConfig"),zjr.forEach(t),CQe=r(n4e," (VisualBert model)"),n4e.forEach(t),wQe=i(v),xg=n(v,"LI",{});var s4e=s(xg);TZ=n(s4e,"STRONG",{});var Qjr=s(TZ);AQe=r(Qjr,"vit"),Qjr.forEach(t),yQe=r(s4e," \u2014 "),vk=n(s4e,"A",{href:!0});var Wjr=s(vk);LQe=r(Wjr,"ViTConfig"),Wjr.forEach(t),xQe=r(s4e," (ViT model)"),s4e.forEach(t),kQe=i(v),kg=n(v,"LI",{});var l4e=s(kg);MZ=n(l4e,"STRONG",{});var Hjr=s(MZ);SQe=r(Hjr,"vit_mae"),Hjr.forEach(t),RQe=r(l4e," \u2014 "),Tk=n(l4e,"A",{href:!0});var Ujr=s(Tk);BQe=r(Ujr,"ViTMAEConfig"),Ujr.forEach(t),PQe=r(l4e," (ViTMAE model)"),l4e.forEach(t),$Qe=i(v),Sg=n(v,"LI",{});var i4e=s(Sg);EZ=n(i4e,"STRONG",{});var Jjr=s(EZ);IQe=r(Jjr,"wav2vec2"),Jjr.forEach(t),qQe=r(i4e," \u2014 "),Mk=n(i4e,"A",{href:!0});var Yjr=s(Mk);NQe=r(Yjr,"Wav2Vec2Config"),Yjr.forEach(t),jQe=r(i4e," (Wav2Vec2 model)"),i4e.forEach(t),DQe=i(v),Rg=n(v,"LI",{});var d4e=s(Rg);CZ=n(d4e,"STRONG",{});var Kjr=s(CZ);GQe=r(Kjr,"wavlm"),Kjr.forEach(t),OQe=r(d4e," \u2014 "),Ek=n(d4e,"A",{href:!0});var Zjr=s(Ek);VQe=r(Zjr,"WavLMConfig"),Zjr.forEach(t),XQe=r(d4e," (WavLM model)"),d4e.forEach(t),zQe=i(v),Bg=n(v,"LI",{});var c4e=s(Bg);wZ=n(c4e,"STRONG",{});var eDr=s(wZ);QQe=r(eDr,"xglm"),eDr.forEach(t),WQe=r(c4e," \u2014 "),Ck=n(c4e,"A",{href:!0});var oDr=s(Ck);HQe=r(oDr,"XGLMConfig"),oDr.forEach(t),UQe=r(c4e," (XGLM model)"),c4e.forEach(t),JQe=i(v),Pg=n(v,"LI",{});var f4e=s(Pg);AZ=n(f4e,"STRONG",{});var rDr=s(AZ);YQe=r(rDr,"xlm"),rDr.forEach(t),KQe=r(f4e," \u2014 "),wk=n(f4e,"A",{href:!0});var tDr=s(wk);ZQe=r(tDr,"XLMConfig"),tDr.forEach(t),eWe=r(f4e," (XLM model)"),f4e.forEach(t),oWe=i(v),$g=n(v,"LI",{});var m4e=s($g);yZ=n(m4e,"STRONG",{});var aDr=s(yZ);rWe=r(aDr,"xlm-prophetnet"),aDr.forEach(t),tWe=r(m4e," \u2014 "),Ak=n(m4e,"A",{href:!0});var nDr=s(Ak);aWe=r(nDr,"XLMProphetNetConfig"),nDr.forEach(t),nWe=r(m4e," (XLMProphetNet model)"),m4e.forEach(t),sWe=i(v),Ig=n(v,"LI",{});var g4e=s(Ig);LZ=n(g4e,"STRONG",{});var sDr=s(LZ);lWe=r(sDr,"xlm-roberta"),sDr.forEach(t),iWe=r(g4e," \u2014 "),yk=n(g4e,"A",{href:!0});var lDr=s(yk);dWe=r(lDr,"XLMRobertaConfig"),lDr.forEach(t),cWe=r(g4e," (XLM-RoBERTa model)"),g4e.forEach(t),fWe=i(v),qg=n(v,"LI",{});var h4e=s(qg);xZ=n(h4e,"STRONG",{});var iDr=s(xZ);mWe=r(iDr,"xlm-roberta-xl"),iDr.forEach(t),gWe=r(h4e," \u2014 "),Lk=n(h4e,"A",{href:!0});var dDr=s(Lk);hWe=r(dDr,"XLMRobertaXLConfig"),dDr.forEach(t),pWe=r(h4e," (XLM-RoBERTa-XL model)"),h4e.forEach(t),_We=i(v),Ng=n(v,"LI",{});var p4e=s(Ng);kZ=n(p4e,"STRONG",{});var cDr=s(kZ);uWe=r(cDr,"xlnet"),cDr.forEach(t),bWe=r(p4e," \u2014 "),xk=n(p4e,"A",{href:!0});var fDr=s(xk);FWe=r(fDr,"XLNetConfig"),fDr.forEach(t),vWe=r(p4e," (XLNet model)"),p4e.forEach(t),TWe=i(v),jg=n(v,"LI",{});var _4e=s(jg);SZ=n(_4e,"STRONG",{});var mDr=s(SZ);MWe=r(mDr,"yoso"),mDr.forEach(t),EWe=r(_4e," \u2014 "),kk=n(_4e,"A",{href:!0});var gDr=s(kk);CWe=r(gDr,"YosoConfig"),gDr.forEach(t),wWe=r(_4e," (YOSO model)"),_4e.forEach(t),v.forEach(t),AWe=i(ga),RZ=n(ga,"P",{});var hDr=s(RZ);yWe=r(hDr,"Examples:"),hDr.forEach(t),LWe=i(ga),m(W5.$$.fragment,ga),ga.forEach(t),xWe=i(Xs),Dg=n(Xs,"DIV",{class:!0});var F$e=s(Dg);m(H5.$$.fragment,F$e),kWe=i(F$e),BZ=n(F$e,"P",{});var pDr=s(BZ);SWe=r(pDr,"Register a new configuration for this class."),pDr.forEach(t),F$e.forEach(t),Xs.forEach(t),uBe=i(c),Hi=n(c,"H2",{class:!0});var v$e=s(Hi);Gg=n(v$e,"A",{id:!0,class:!0,href:!0});var _Dr=s(Gg);PZ=n(_Dr,"SPAN",{});var uDr=s(PZ);m(U5.$$.fragment,uDr),uDr.forEach(t),_Dr.forEach(t),RWe=i(v$e),$Z=n(v$e,"SPAN",{});var bDr=s($Z);BWe=r(bDr,"AutoTokenizer"),bDr.forEach(t),v$e.forEach(t),bBe=i(c),Wo=n(c,"DIV",{class:!0});var zs=s(Wo);m(J5.$$.fragment,zs),PWe=i(zs),Y5=n(zs,"P",{});var T$e=s(Y5);$We=r(T$e,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Sk=n(T$e,"A",{href:!0});var FDr=s(Sk);IWe=r(FDr,"AutoTokenizer.from_pretrained()"),FDr.forEach(t),qWe=r(T$e," class method."),T$e.forEach(t),NWe=i(zs),K5=n(zs,"P",{});var M$e=s(K5);jWe=r(M$e,"This class cannot be instantiated directly using "),IZ=n(M$e,"CODE",{});var vDr=s(IZ);DWe=r(vDr,"__init__()"),vDr.forEach(t),GWe=r(M$e," (throws an error)."),M$e.forEach(t),OWe=i(zs),go=n(zs,"DIV",{class:!0});var ha=s(go);m(Z5.$$.fragment,ha),VWe=i(ha),qZ=n(ha,"P",{});var TDr=s(qZ);XWe=r(TDr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),TDr.forEach(t),zWe=i(ha),Oa=n(ha,"P",{});var qE=s(Oa);QWe=r(qE,"The tokenizer class to instantiate is selected based on the "),NZ=n(qE,"CODE",{});var MDr=s(NZ);WWe=r(MDr,"model_type"),MDr.forEach(t),HWe=r(qE,` property of the config object (either
passed as an argument or loaded from `),jZ=n(qE,"CODE",{});var EDr=s(jZ);UWe=r(EDr,"pretrained_model_name_or_path"),EDr.forEach(t),JWe=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DZ=n(qE,"CODE",{});var CDr=s(DZ);YWe=r(CDr,"pretrained_model_name_or_path"),CDr.forEach(t),KWe=r(qE,":"),qE.forEach(t),ZWe=i(ha),E=n(ha,"UL",{});var C=s(E);Wn=n(C,"LI",{});var RL=s(Wn);GZ=n(RL,"STRONG",{});var wDr=s(GZ);eHe=r(wDr,"albert"),wDr.forEach(t),oHe=r(RL," \u2014 "),Rk=n(RL,"A",{href:!0});var ADr=s(Rk);rHe=r(ADr,"AlbertTokenizer"),ADr.forEach(t),tHe=r(RL," or "),Bk=n(RL,"A",{href:!0});var yDr=s(Bk);aHe=r(yDr,"AlbertTokenizerFast"),yDr.forEach(t),nHe=r(RL," (ALBERT model)"),RL.forEach(t),sHe=i(C),Hn=n(C,"LI",{});var BL=s(Hn);OZ=n(BL,"STRONG",{});var LDr=s(OZ);lHe=r(LDr,"bart"),LDr.forEach(t),iHe=r(BL," \u2014 "),Pk=n(BL,"A",{href:!0});var xDr=s(Pk);dHe=r(xDr,"BartTokenizer"),xDr.forEach(t),cHe=r(BL," or "),$k=n(BL,"A",{href:!0});var kDr=s($k);fHe=r(kDr,"BartTokenizerFast"),kDr.forEach(t),mHe=r(BL," (BART model)"),BL.forEach(t),gHe=i(C),Un=n(C,"LI",{});var PL=s(Un);VZ=n(PL,"STRONG",{});var SDr=s(VZ);hHe=r(SDr,"barthez"),SDr.forEach(t),pHe=r(PL," \u2014 "),Ik=n(PL,"A",{href:!0});var RDr=s(Ik);_He=r(RDr,"BarthezTokenizer"),RDr.forEach(t),uHe=r(PL," or "),qk=n(PL,"A",{href:!0});var BDr=s(qk);bHe=r(BDr,"BarthezTokenizerFast"),BDr.forEach(t),FHe=r(PL," (BARThez model)"),PL.forEach(t),vHe=i(C),Og=n(C,"LI",{});var u4e=s(Og);XZ=n(u4e,"STRONG",{});var PDr=s(XZ);THe=r(PDr,"bartpho"),PDr.forEach(t),MHe=r(u4e," \u2014 "),Nk=n(u4e,"A",{href:!0});var $Dr=s(Nk);EHe=r($Dr,"BartphoTokenizer"),$Dr.forEach(t),CHe=r(u4e," (BARTpho model)"),u4e.forEach(t),wHe=i(C),Jn=n(C,"LI",{});var $L=s(Jn);zZ=n($L,"STRONG",{});var IDr=s(zZ);AHe=r(IDr,"bert"),IDr.forEach(t),yHe=r($L," \u2014 "),jk=n($L,"A",{href:!0});var qDr=s(jk);LHe=r(qDr,"BertTokenizer"),qDr.forEach(t),xHe=r($L," or "),Dk=n($L,"A",{href:!0});var NDr=s(Dk);kHe=r(NDr,"BertTokenizerFast"),NDr.forEach(t),SHe=r($L," (BERT model)"),$L.forEach(t),RHe=i(C),Vg=n(C,"LI",{});var b4e=s(Vg);QZ=n(b4e,"STRONG",{});var jDr=s(QZ);BHe=r(jDr,"bert-generation"),jDr.forEach(t),PHe=r(b4e," \u2014 "),Gk=n(b4e,"A",{href:!0});var DDr=s(Gk);$He=r(DDr,"BertGenerationTokenizer"),DDr.forEach(t),IHe=r(b4e," (Bert Generation model)"),b4e.forEach(t),qHe=i(C),Xg=n(C,"LI",{});var F4e=s(Xg);WZ=n(F4e,"STRONG",{});var GDr=s(WZ);NHe=r(GDr,"bert-japanese"),GDr.forEach(t),jHe=r(F4e," \u2014 "),Ok=n(F4e,"A",{href:!0});var ODr=s(Ok);DHe=r(ODr,"BertJapaneseTokenizer"),ODr.forEach(t),GHe=r(F4e," (BertJapanese model)"),F4e.forEach(t),OHe=i(C),zg=n(C,"LI",{});var v4e=s(zg);HZ=n(v4e,"STRONG",{});var VDr=s(HZ);VHe=r(VDr,"bertweet"),VDr.forEach(t),XHe=r(v4e," \u2014 "),Vk=n(v4e,"A",{href:!0});var XDr=s(Vk);zHe=r(XDr,"BertweetTokenizer"),XDr.forEach(t),QHe=r(v4e," (Bertweet model)"),v4e.forEach(t),WHe=i(C),Yn=n(C,"LI",{});var IL=s(Yn);UZ=n(IL,"STRONG",{});var zDr=s(UZ);HHe=r(zDr,"big_bird"),zDr.forEach(t),UHe=r(IL," \u2014 "),Xk=n(IL,"A",{href:!0});var QDr=s(Xk);JHe=r(QDr,"BigBirdTokenizer"),QDr.forEach(t),YHe=r(IL," or "),zk=n(IL,"A",{href:!0});var WDr=s(zk);KHe=r(WDr,"BigBirdTokenizerFast"),WDr.forEach(t),ZHe=r(IL," (BigBird model)"),IL.forEach(t),eUe=i(C),Kn=n(C,"LI",{});var qL=s(Kn);JZ=n(qL,"STRONG",{});var HDr=s(JZ);oUe=r(HDr,"bigbird_pegasus"),HDr.forEach(t),rUe=r(qL," \u2014 "),Qk=n(qL,"A",{href:!0});var UDr=s(Qk);tUe=r(UDr,"PegasusTokenizer"),UDr.forEach(t),aUe=r(qL," or "),Wk=n(qL,"A",{href:!0});var JDr=s(Wk);nUe=r(JDr,"PegasusTokenizerFast"),JDr.forEach(t),sUe=r(qL," (BigBirdPegasus model)"),qL.forEach(t),lUe=i(C),Zn=n(C,"LI",{});var NL=s(Zn);YZ=n(NL,"STRONG",{});var YDr=s(YZ);iUe=r(YDr,"blenderbot"),YDr.forEach(t),dUe=r(NL," \u2014 "),Hk=n(NL,"A",{href:!0});var KDr=s(Hk);cUe=r(KDr,"BlenderbotTokenizer"),KDr.forEach(t),fUe=r(NL," or "),Uk=n(NL,"A",{href:!0});var ZDr=s(Uk);mUe=r(ZDr,"BlenderbotTokenizerFast"),ZDr.forEach(t),gUe=r(NL," (Blenderbot model)"),NL.forEach(t),hUe=i(C),Qg=n(C,"LI",{});var T4e=s(Qg);KZ=n(T4e,"STRONG",{});var eGr=s(KZ);pUe=r(eGr,"blenderbot-small"),eGr.forEach(t),_Ue=r(T4e," \u2014 "),Jk=n(T4e,"A",{href:!0});var oGr=s(Jk);uUe=r(oGr,"BlenderbotSmallTokenizer"),oGr.forEach(t),bUe=r(T4e," (BlenderbotSmall model)"),T4e.forEach(t),FUe=i(C),Wg=n(C,"LI",{});var M4e=s(Wg);ZZ=n(M4e,"STRONG",{});var rGr=s(ZZ);vUe=r(rGr,"byt5"),rGr.forEach(t),TUe=r(M4e," \u2014 "),Yk=n(M4e,"A",{href:!0});var tGr=s(Yk);MUe=r(tGr,"ByT5Tokenizer"),tGr.forEach(t),EUe=r(M4e," (ByT5 model)"),M4e.forEach(t),CUe=i(C),es=n(C,"LI",{});var jL=s(es);eee=n(jL,"STRONG",{});var aGr=s(eee);wUe=r(aGr,"camembert"),aGr.forEach(t),AUe=r(jL," \u2014 "),Kk=n(jL,"A",{href:!0});var nGr=s(Kk);yUe=r(nGr,"CamembertTokenizer"),nGr.forEach(t),LUe=r(jL," or "),Zk=n(jL,"A",{href:!0});var sGr=s(Zk);xUe=r(sGr,"CamembertTokenizerFast"),sGr.forEach(t),kUe=r(jL," (CamemBERT model)"),jL.forEach(t),SUe=i(C),Hg=n(C,"LI",{});var E4e=s(Hg);oee=n(E4e,"STRONG",{});var lGr=s(oee);RUe=r(lGr,"canine"),lGr.forEach(t),BUe=r(E4e," \u2014 "),eS=n(E4e,"A",{href:!0});var iGr=s(eS);PUe=r(iGr,"CanineTokenizer"),iGr.forEach(t),$Ue=r(E4e," (Canine model)"),E4e.forEach(t),IUe=i(C),os=n(C,"LI",{});var DL=s(os);ree=n(DL,"STRONG",{});var dGr=s(ree);qUe=r(dGr,"clip"),dGr.forEach(t),NUe=r(DL," \u2014 "),oS=n(DL,"A",{href:!0});var cGr=s(oS);jUe=r(cGr,"CLIPTokenizer"),cGr.forEach(t),DUe=r(DL," or "),rS=n(DL,"A",{href:!0});var fGr=s(rS);GUe=r(fGr,"CLIPTokenizerFast"),fGr.forEach(t),OUe=r(DL," (CLIP model)"),DL.forEach(t),VUe=i(C),rs=n(C,"LI",{});var GL=s(rs);tee=n(GL,"STRONG",{});var mGr=s(tee);XUe=r(mGr,"convbert"),mGr.forEach(t),zUe=r(GL," \u2014 "),tS=n(GL,"A",{href:!0});var gGr=s(tS);QUe=r(gGr,"ConvBertTokenizer"),gGr.forEach(t),WUe=r(GL," or "),aS=n(GL,"A",{href:!0});var hGr=s(aS);HUe=r(hGr,"ConvBertTokenizerFast"),hGr.forEach(t),UUe=r(GL," (ConvBERT model)"),GL.forEach(t),JUe=i(C),ts=n(C,"LI",{});var OL=s(ts);aee=n(OL,"STRONG",{});var pGr=s(aee);YUe=r(pGr,"cpm"),pGr.forEach(t),KUe=r(OL," \u2014 "),nS=n(OL,"A",{href:!0});var _Gr=s(nS);ZUe=r(_Gr,"CpmTokenizer"),_Gr.forEach(t),eJe=r(OL," or "),nee=n(OL,"CODE",{});var uGr=s(nee);oJe=r(uGr,"CpmTokenizerFast"),uGr.forEach(t),rJe=r(OL," (CPM model)"),OL.forEach(t),tJe=i(C),Ug=n(C,"LI",{});var C4e=s(Ug);see=n(C4e,"STRONG",{});var bGr=s(see);aJe=r(bGr,"ctrl"),bGr.forEach(t),nJe=r(C4e," \u2014 "),sS=n(C4e,"A",{href:!0});var FGr=s(sS);sJe=r(FGr,"CTRLTokenizer"),FGr.forEach(t),lJe=r(C4e," (CTRL model)"),C4e.forEach(t),iJe=i(C),as=n(C,"LI",{});var VL=s(as);lee=n(VL,"STRONG",{});var vGr=s(lee);dJe=r(vGr,"deberta"),vGr.forEach(t),cJe=r(VL," \u2014 "),lS=n(VL,"A",{href:!0});var TGr=s(lS);fJe=r(TGr,"DebertaTokenizer"),TGr.forEach(t),mJe=r(VL," or "),iS=n(VL,"A",{href:!0});var MGr=s(iS);gJe=r(MGr,"DebertaTokenizerFast"),MGr.forEach(t),hJe=r(VL," (DeBERTa model)"),VL.forEach(t),pJe=i(C),Jg=n(C,"LI",{});var w4e=s(Jg);iee=n(w4e,"STRONG",{});var EGr=s(iee);_Je=r(EGr,"deberta-v2"),EGr.forEach(t),uJe=r(w4e," \u2014 "),dS=n(w4e,"A",{href:!0});var CGr=s(dS);bJe=r(CGr,"DebertaV2Tokenizer"),CGr.forEach(t),FJe=r(w4e," (DeBERTa-v2 model)"),w4e.forEach(t),vJe=i(C),ns=n(C,"LI",{});var XL=s(ns);dee=n(XL,"STRONG",{});var wGr=s(dee);TJe=r(wGr,"distilbert"),wGr.forEach(t),MJe=r(XL," \u2014 "),cS=n(XL,"A",{href:!0});var AGr=s(cS);EJe=r(AGr,"DistilBertTokenizer"),AGr.forEach(t),CJe=r(XL," or "),fS=n(XL,"A",{href:!0});var yGr=s(fS);wJe=r(yGr,"DistilBertTokenizerFast"),yGr.forEach(t),AJe=r(XL," (DistilBERT model)"),XL.forEach(t),yJe=i(C),ss=n(C,"LI",{});var zL=s(ss);cee=n(zL,"STRONG",{});var LGr=s(cee);LJe=r(LGr,"dpr"),LGr.forEach(t),xJe=r(zL," \u2014 "),mS=n(zL,"A",{href:!0});var xGr=s(mS);kJe=r(xGr,"DPRQuestionEncoderTokenizer"),xGr.forEach(t),SJe=r(zL," or "),gS=n(zL,"A",{href:!0});var kGr=s(gS);RJe=r(kGr,"DPRQuestionEncoderTokenizerFast"),kGr.forEach(t),BJe=r(zL," (DPR model)"),zL.forEach(t),PJe=i(C),ls=n(C,"LI",{});var QL=s(ls);fee=n(QL,"STRONG",{});var SGr=s(fee);$Je=r(SGr,"electra"),SGr.forEach(t),IJe=r(QL," \u2014 "),hS=n(QL,"A",{href:!0});var RGr=s(hS);qJe=r(RGr,"ElectraTokenizer"),RGr.forEach(t),NJe=r(QL," or "),pS=n(QL,"A",{href:!0});var BGr=s(pS);jJe=r(BGr,"ElectraTokenizerFast"),BGr.forEach(t),DJe=r(QL," (ELECTRA model)"),QL.forEach(t),GJe=i(C),Yg=n(C,"LI",{});var A4e=s(Yg);mee=n(A4e,"STRONG",{});var PGr=s(mee);OJe=r(PGr,"flaubert"),PGr.forEach(t),VJe=r(A4e," \u2014 "),_S=n(A4e,"A",{href:!0});var $Gr=s(_S);XJe=r($Gr,"FlaubertTokenizer"),$Gr.forEach(t),zJe=r(A4e," (FlauBERT model)"),A4e.forEach(t),QJe=i(C),is=n(C,"LI",{});var WL=s(is);gee=n(WL,"STRONG",{});var IGr=s(gee);WJe=r(IGr,"fnet"),IGr.forEach(t),HJe=r(WL," \u2014 "),uS=n(WL,"A",{href:!0});var qGr=s(uS);UJe=r(qGr,"FNetTokenizer"),qGr.forEach(t),JJe=r(WL," or "),bS=n(WL,"A",{href:!0});var NGr=s(bS);YJe=r(NGr,"FNetTokenizerFast"),NGr.forEach(t),KJe=r(WL," (FNet model)"),WL.forEach(t),ZJe=i(C),Kg=n(C,"LI",{});var y4e=s(Kg);hee=n(y4e,"STRONG",{});var jGr=s(hee);eYe=r(jGr,"fsmt"),jGr.forEach(t),oYe=r(y4e," \u2014 "),FS=n(y4e,"A",{href:!0});var DGr=s(FS);rYe=r(DGr,"FSMTTokenizer"),DGr.forEach(t),tYe=r(y4e," (FairSeq Machine-Translation model)"),y4e.forEach(t),aYe=i(C),ds=n(C,"LI",{});var HL=s(ds);pee=n(HL,"STRONG",{});var GGr=s(pee);nYe=r(GGr,"funnel"),GGr.forEach(t),sYe=r(HL," \u2014 "),vS=n(HL,"A",{href:!0});var OGr=s(vS);lYe=r(OGr,"FunnelTokenizer"),OGr.forEach(t),iYe=r(HL," or "),TS=n(HL,"A",{href:!0});var VGr=s(TS);dYe=r(VGr,"FunnelTokenizerFast"),VGr.forEach(t),cYe=r(HL," (Funnel Transformer model)"),HL.forEach(t),fYe=i(C),cs=n(C,"LI",{});var UL=s(cs);_ee=n(UL,"STRONG",{});var XGr=s(_ee);mYe=r(XGr,"gpt2"),XGr.forEach(t),gYe=r(UL," \u2014 "),MS=n(UL,"A",{href:!0});var zGr=s(MS);hYe=r(zGr,"GPT2Tokenizer"),zGr.forEach(t),pYe=r(UL," or "),ES=n(UL,"A",{href:!0});var QGr=s(ES);_Ye=r(QGr,"GPT2TokenizerFast"),QGr.forEach(t),uYe=r(UL," (OpenAI GPT-2 model)"),UL.forEach(t),bYe=i(C),fs=n(C,"LI",{});var JL=s(fs);uee=n(JL,"STRONG",{});var WGr=s(uee);FYe=r(WGr,"gpt_neo"),WGr.forEach(t),vYe=r(JL," \u2014 "),CS=n(JL,"A",{href:!0});var HGr=s(CS);TYe=r(HGr,"GPT2Tokenizer"),HGr.forEach(t),MYe=r(JL," or "),wS=n(JL,"A",{href:!0});var UGr=s(wS);EYe=r(UGr,"GPT2TokenizerFast"),UGr.forEach(t),CYe=r(JL," (GPT Neo model)"),JL.forEach(t),wYe=i(C),ms=n(C,"LI",{});var YL=s(ms);bee=n(YL,"STRONG",{});var JGr=s(bee);AYe=r(JGr,"herbert"),JGr.forEach(t),yYe=r(YL," \u2014 "),AS=n(YL,"A",{href:!0});var YGr=s(AS);LYe=r(YGr,"HerbertTokenizer"),YGr.forEach(t),xYe=r(YL," or "),yS=n(YL,"A",{href:!0});var KGr=s(yS);kYe=r(KGr,"HerbertTokenizerFast"),KGr.forEach(t),SYe=r(YL," (HerBERT model)"),YL.forEach(t),RYe=i(C),Zg=n(C,"LI",{});var L4e=s(Zg);Fee=n(L4e,"STRONG",{});var ZGr=s(Fee);BYe=r(ZGr,"hubert"),ZGr.forEach(t),PYe=r(L4e," \u2014 "),LS=n(L4e,"A",{href:!0});var eOr=s(LS);$Ye=r(eOr,"Wav2Vec2CTCTokenizer"),eOr.forEach(t),IYe=r(L4e," (Hubert model)"),L4e.forEach(t),qYe=i(C),gs=n(C,"LI",{});var KL=s(gs);vee=n(KL,"STRONG",{});var oOr=s(vee);NYe=r(oOr,"ibert"),oOr.forEach(t),jYe=r(KL," \u2014 "),xS=n(KL,"A",{href:!0});var rOr=s(xS);DYe=r(rOr,"RobertaTokenizer"),rOr.forEach(t),GYe=r(KL," or "),kS=n(KL,"A",{href:!0});var tOr=s(kS);OYe=r(tOr,"RobertaTokenizerFast"),tOr.forEach(t),VYe=r(KL," (I-BERT model)"),KL.forEach(t),XYe=i(C),hs=n(C,"LI",{});var ZL=s(hs);Tee=n(ZL,"STRONG",{});var aOr=s(Tee);zYe=r(aOr,"layoutlm"),aOr.forEach(t),QYe=r(ZL," \u2014 "),SS=n(ZL,"A",{href:!0});var nOr=s(SS);WYe=r(nOr,"LayoutLMTokenizer"),nOr.forEach(t),HYe=r(ZL," or "),RS=n(ZL,"A",{href:!0});var sOr=s(RS);UYe=r(sOr,"LayoutLMTokenizerFast"),sOr.forEach(t),JYe=r(ZL," (LayoutLM model)"),ZL.forEach(t),YYe=i(C),ps=n(C,"LI",{});var e8=s(ps);Mee=n(e8,"STRONG",{});var lOr=s(Mee);KYe=r(lOr,"layoutlmv2"),lOr.forEach(t),ZYe=r(e8," \u2014 "),BS=n(e8,"A",{href:!0});var iOr=s(BS);eKe=r(iOr,"LayoutLMv2Tokenizer"),iOr.forEach(t),oKe=r(e8," or "),PS=n(e8,"A",{href:!0});var dOr=s(PS);rKe=r(dOr,"LayoutLMv2TokenizerFast"),dOr.forEach(t),tKe=r(e8," (LayoutLMv2 model)"),e8.forEach(t),aKe=i(C),_s=n(C,"LI",{});var o8=s(_s);Eee=n(o8,"STRONG",{});var cOr=s(Eee);nKe=r(cOr,"layoutxlm"),cOr.forEach(t),sKe=r(o8," \u2014 "),$S=n(o8,"A",{href:!0});var fOr=s($S);lKe=r(fOr,"LayoutXLMTokenizer"),fOr.forEach(t),iKe=r(o8," or "),IS=n(o8,"A",{href:!0});var mOr=s(IS);dKe=r(mOr,"LayoutXLMTokenizerFast"),mOr.forEach(t),cKe=r(o8," (LayoutXLM model)"),o8.forEach(t),fKe=i(C),us=n(C,"LI",{});var r8=s(us);Cee=n(r8,"STRONG",{});var gOr=s(Cee);mKe=r(gOr,"led"),gOr.forEach(t),gKe=r(r8," \u2014 "),qS=n(r8,"A",{href:!0});var hOr=s(qS);hKe=r(hOr,"LEDTokenizer"),hOr.forEach(t),pKe=r(r8," or "),NS=n(r8,"A",{href:!0});var pOr=s(NS);_Ke=r(pOr,"LEDTokenizerFast"),pOr.forEach(t),uKe=r(r8," (LED model)"),r8.forEach(t),bKe=i(C),bs=n(C,"LI",{});var t8=s(bs);wee=n(t8,"STRONG",{});var _Or=s(wee);FKe=r(_Or,"longformer"),_Or.forEach(t),vKe=r(t8," \u2014 "),jS=n(t8,"A",{href:!0});var uOr=s(jS);TKe=r(uOr,"LongformerTokenizer"),uOr.forEach(t),MKe=r(t8," or "),DS=n(t8,"A",{href:!0});var bOr=s(DS);EKe=r(bOr,"LongformerTokenizerFast"),bOr.forEach(t),CKe=r(t8," (Longformer model)"),t8.forEach(t),wKe=i(C),Fs=n(C,"LI",{});var a8=s(Fs);Aee=n(a8,"STRONG",{});var FOr=s(Aee);AKe=r(FOr,"longt5"),FOr.forEach(t),yKe=r(a8," \u2014 "),GS=n(a8,"A",{href:!0});var vOr=s(GS);LKe=r(vOr,"T5Tokenizer"),vOr.forEach(t),xKe=r(a8," or "),OS=n(a8,"A",{href:!0});var TOr=s(OS);kKe=r(TOr,"T5TokenizerFast"),TOr.forEach(t),SKe=r(a8," (LongT5 model)"),a8.forEach(t),RKe=i(C),eh=n(C,"LI",{});var x4e=s(eh);yee=n(x4e,"STRONG",{});var MOr=s(yee);BKe=r(MOr,"luke"),MOr.forEach(t),PKe=r(x4e," \u2014 "),VS=n(x4e,"A",{href:!0});var EOr=s(VS);$Ke=r(EOr,"LukeTokenizer"),EOr.forEach(t),IKe=r(x4e," (LUKE model)"),x4e.forEach(t),qKe=i(C),vs=n(C,"LI",{});var n8=s(vs);Lee=n(n8,"STRONG",{});var COr=s(Lee);NKe=r(COr,"lxmert"),COr.forEach(t),jKe=r(n8," \u2014 "),XS=n(n8,"A",{href:!0});var wOr=s(XS);DKe=r(wOr,"LxmertTokenizer"),wOr.forEach(t),GKe=r(n8," or "),zS=n(n8,"A",{href:!0});var AOr=s(zS);OKe=r(AOr,"LxmertTokenizerFast"),AOr.forEach(t),VKe=r(n8," (LXMERT model)"),n8.forEach(t),XKe=i(C),oh=n(C,"LI",{});var k4e=s(oh);xee=n(k4e,"STRONG",{});var yOr=s(xee);zKe=r(yOr,"m2m_100"),yOr.forEach(t),QKe=r(k4e," \u2014 "),QS=n(k4e,"A",{href:!0});var LOr=s(QS);WKe=r(LOr,"M2M100Tokenizer"),LOr.forEach(t),HKe=r(k4e," (M2M100 model)"),k4e.forEach(t),UKe=i(C),rh=n(C,"LI",{});var S4e=s(rh);kee=n(S4e,"STRONG",{});var xOr=s(kee);JKe=r(xOr,"marian"),xOr.forEach(t),YKe=r(S4e," \u2014 "),WS=n(S4e,"A",{href:!0});var kOr=s(WS);KKe=r(kOr,"MarianTokenizer"),kOr.forEach(t),ZKe=r(S4e," (Marian model)"),S4e.forEach(t),eZe=i(C),Ts=n(C,"LI",{});var s8=s(Ts);See=n(s8,"STRONG",{});var SOr=s(See);oZe=r(SOr,"mbart"),SOr.forEach(t),rZe=r(s8," \u2014 "),HS=n(s8,"A",{href:!0});var ROr=s(HS);tZe=r(ROr,"MBartTokenizer"),ROr.forEach(t),aZe=r(s8," or "),US=n(s8,"A",{href:!0});var BOr=s(US);nZe=r(BOr,"MBartTokenizerFast"),BOr.forEach(t),sZe=r(s8," (mBART model)"),s8.forEach(t),lZe=i(C),Ms=n(C,"LI",{});var l8=s(Ms);Ree=n(l8,"STRONG",{});var POr=s(Ree);iZe=r(POr,"mbart50"),POr.forEach(t),dZe=r(l8," \u2014 "),JS=n(l8,"A",{href:!0});var $Or=s(JS);cZe=r($Or,"MBart50Tokenizer"),$Or.forEach(t),fZe=r(l8," or "),YS=n(l8,"A",{href:!0});var IOr=s(YS);mZe=r(IOr,"MBart50TokenizerFast"),IOr.forEach(t),gZe=r(l8," (mBART-50 model)"),l8.forEach(t),hZe=i(C),th=n(C,"LI",{});var R4e=s(th);Bee=n(R4e,"STRONG",{});var qOr=s(Bee);pZe=r(qOr,"mluke"),qOr.forEach(t),_Ze=r(R4e," \u2014 "),KS=n(R4e,"A",{href:!0});var NOr=s(KS);uZe=r(NOr,"MLukeTokenizer"),NOr.forEach(t),bZe=r(R4e," (mLUKE model)"),R4e.forEach(t),FZe=i(C),Es=n(C,"LI",{});var i8=s(Es);Pee=n(i8,"STRONG",{});var jOr=s(Pee);vZe=r(jOr,"mobilebert"),jOr.forEach(t),TZe=r(i8," \u2014 "),ZS=n(i8,"A",{href:!0});var DOr=s(ZS);MZe=r(DOr,"MobileBertTokenizer"),DOr.forEach(t),EZe=r(i8," or "),eR=n(i8,"A",{href:!0});var GOr=s(eR);CZe=r(GOr,"MobileBertTokenizerFast"),GOr.forEach(t),wZe=r(i8," (MobileBERT model)"),i8.forEach(t),AZe=i(C),Cs=n(C,"LI",{});var d8=s(Cs);$ee=n(d8,"STRONG",{});var OOr=s($ee);yZe=r(OOr,"mpnet"),OOr.forEach(t),LZe=r(d8," \u2014 "),oR=n(d8,"A",{href:!0});var VOr=s(oR);xZe=r(VOr,"MPNetTokenizer"),VOr.forEach(t),kZe=r(d8," or "),rR=n(d8,"A",{href:!0});var XOr=s(rR);SZe=r(XOr,"MPNetTokenizerFast"),XOr.forEach(t),RZe=r(d8," (MPNet model)"),d8.forEach(t),BZe=i(C),ws=n(C,"LI",{});var c8=s(ws);Iee=n(c8,"STRONG",{});var zOr=s(Iee);PZe=r(zOr,"mt5"),zOr.forEach(t),$Ze=r(c8," \u2014 "),tR=n(c8,"A",{href:!0});var QOr=s(tR);IZe=r(QOr,"MT5Tokenizer"),QOr.forEach(t),qZe=r(c8," or "),aR=n(c8,"A",{href:!0});var WOr=s(aR);NZe=r(WOr,"MT5TokenizerFast"),WOr.forEach(t),jZe=r(c8," (mT5 model)"),c8.forEach(t),DZe=i(C),As=n(C,"LI",{});var f8=s(As);qee=n(f8,"STRONG",{});var HOr=s(qee);GZe=r(HOr,"openai-gpt"),HOr.forEach(t),OZe=r(f8," \u2014 "),nR=n(f8,"A",{href:!0});var UOr=s(nR);VZe=r(UOr,"OpenAIGPTTokenizer"),UOr.forEach(t),XZe=r(f8," or "),sR=n(f8,"A",{href:!0});var JOr=s(sR);zZe=r(JOr,"OpenAIGPTTokenizerFast"),JOr.forEach(t),QZe=r(f8," (OpenAI GPT model)"),f8.forEach(t),WZe=i(C),ys=n(C,"LI",{});var m8=s(ys);Nee=n(m8,"STRONG",{});var YOr=s(Nee);HZe=r(YOr,"pegasus"),YOr.forEach(t),UZe=r(m8," \u2014 "),lR=n(m8,"A",{href:!0});var KOr=s(lR);JZe=r(KOr,"PegasusTokenizer"),KOr.forEach(t),YZe=r(m8," or "),iR=n(m8,"A",{href:!0});var ZOr=s(iR);KZe=r(ZOr,"PegasusTokenizerFast"),ZOr.forEach(t),ZZe=r(m8," (Pegasus model)"),m8.forEach(t),eeo=i(C),ah=n(C,"LI",{});var B4e=s(ah);jee=n(B4e,"STRONG",{});var eVr=s(jee);oeo=r(eVr,"perceiver"),eVr.forEach(t),reo=r(B4e," \u2014 "),dR=n(B4e,"A",{href:!0});var oVr=s(dR);teo=r(oVr,"PerceiverTokenizer"),oVr.forEach(t),aeo=r(B4e," (Perceiver model)"),B4e.forEach(t),neo=i(C),nh=n(C,"LI",{});var P4e=s(nh);Dee=n(P4e,"STRONG",{});var rVr=s(Dee);seo=r(rVr,"phobert"),rVr.forEach(t),leo=r(P4e," \u2014 "),cR=n(P4e,"A",{href:!0});var tVr=s(cR);ieo=r(tVr,"PhobertTokenizer"),tVr.forEach(t),deo=r(P4e," (PhoBERT model)"),P4e.forEach(t),ceo=i(C),sh=n(C,"LI",{});var $4e=s(sh);Gee=n($4e,"STRONG",{});var aVr=s(Gee);feo=r(aVr,"plbart"),aVr.forEach(t),meo=r($4e," \u2014 "),fR=n($4e,"A",{href:!0});var nVr=s(fR);geo=r(nVr,"PLBartTokenizer"),nVr.forEach(t),heo=r($4e," (PLBart model)"),$4e.forEach(t),peo=i(C),lh=n(C,"LI",{});var I4e=s(lh);Oee=n(I4e,"STRONG",{});var sVr=s(Oee);_eo=r(sVr,"prophetnet"),sVr.forEach(t),ueo=r(I4e," \u2014 "),mR=n(I4e,"A",{href:!0});var lVr=s(mR);beo=r(lVr,"ProphetNetTokenizer"),lVr.forEach(t),Feo=r(I4e," (ProphetNet model)"),I4e.forEach(t),veo=i(C),Ls=n(C,"LI",{});var g8=s(Ls);Vee=n(g8,"STRONG",{});var iVr=s(Vee);Teo=r(iVr,"qdqbert"),iVr.forEach(t),Meo=r(g8," \u2014 "),gR=n(g8,"A",{href:!0});var dVr=s(gR);Eeo=r(dVr,"BertTokenizer"),dVr.forEach(t),Ceo=r(g8," or "),hR=n(g8,"A",{href:!0});var cVr=s(hR);weo=r(cVr,"BertTokenizerFast"),cVr.forEach(t),Aeo=r(g8," (QDQBert model)"),g8.forEach(t),yeo=i(C),ih=n(C,"LI",{});var q4e=s(ih);Xee=n(q4e,"STRONG",{});var fVr=s(Xee);Leo=r(fVr,"rag"),fVr.forEach(t),xeo=r(q4e," \u2014 "),pR=n(q4e,"A",{href:!0});var mVr=s(pR);keo=r(mVr,"RagTokenizer"),mVr.forEach(t),Seo=r(q4e," (RAG model)"),q4e.forEach(t),Reo=i(C),xs=n(C,"LI",{});var h8=s(xs);zee=n(h8,"STRONG",{});var gVr=s(zee);Beo=r(gVr,"realm"),gVr.forEach(t),Peo=r(h8," \u2014 "),_R=n(h8,"A",{href:!0});var hVr=s(_R);$eo=r(hVr,"RealmTokenizer"),hVr.forEach(t),Ieo=r(h8," or "),uR=n(h8,"A",{href:!0});var pVr=s(uR);qeo=r(pVr,"RealmTokenizerFast"),pVr.forEach(t),Neo=r(h8," (Realm model)"),h8.forEach(t),jeo=i(C),ks=n(C,"LI",{});var p8=s(ks);Qee=n(p8,"STRONG",{});var _Vr=s(Qee);Deo=r(_Vr,"reformer"),_Vr.forEach(t),Geo=r(p8," \u2014 "),bR=n(p8,"A",{href:!0});var uVr=s(bR);Oeo=r(uVr,"ReformerTokenizer"),uVr.forEach(t),Veo=r(p8," or "),FR=n(p8,"A",{href:!0});var bVr=s(FR);Xeo=r(bVr,"ReformerTokenizerFast"),bVr.forEach(t),zeo=r(p8," (Reformer model)"),p8.forEach(t),Qeo=i(C),Ss=n(C,"LI",{});var _8=s(Ss);Wee=n(_8,"STRONG",{});var FVr=s(Wee);Weo=r(FVr,"rembert"),FVr.forEach(t),Heo=r(_8," \u2014 "),vR=n(_8,"A",{href:!0});var vVr=s(vR);Ueo=r(vVr,"RemBertTokenizer"),vVr.forEach(t),Jeo=r(_8," or "),TR=n(_8,"A",{href:!0});var TVr=s(TR);Yeo=r(TVr,"RemBertTokenizerFast"),TVr.forEach(t),Keo=r(_8," (RemBERT model)"),_8.forEach(t),Zeo=i(C),Rs=n(C,"LI",{});var u8=s(Rs);Hee=n(u8,"STRONG",{});var MVr=s(Hee);eoo=r(MVr,"retribert"),MVr.forEach(t),ooo=r(u8," \u2014 "),MR=n(u8,"A",{href:!0});var EVr=s(MR);roo=r(EVr,"RetriBertTokenizer"),EVr.forEach(t),too=r(u8," or "),ER=n(u8,"A",{href:!0});var CVr=s(ER);aoo=r(CVr,"RetriBertTokenizerFast"),CVr.forEach(t),noo=r(u8," (RetriBERT model)"),u8.forEach(t),soo=i(C),Bs=n(C,"LI",{});var b8=s(Bs);Uee=n(b8,"STRONG",{});var wVr=s(Uee);loo=r(wVr,"roberta"),wVr.forEach(t),ioo=r(b8," \u2014 "),CR=n(b8,"A",{href:!0});var AVr=s(CR);doo=r(AVr,"RobertaTokenizer"),AVr.forEach(t),coo=r(b8," or "),wR=n(b8,"A",{href:!0});var yVr=s(wR);foo=r(yVr,"RobertaTokenizerFast"),yVr.forEach(t),moo=r(b8," (RoBERTa model)"),b8.forEach(t),goo=i(C),Ps=n(C,"LI",{});var F8=s(Ps);Jee=n(F8,"STRONG",{});var LVr=s(Jee);hoo=r(LVr,"roformer"),LVr.forEach(t),poo=r(F8," \u2014 "),AR=n(F8,"A",{href:!0});var xVr=s(AR);_oo=r(xVr,"RoFormerTokenizer"),xVr.forEach(t),uoo=r(F8," or "),yR=n(F8,"A",{href:!0});var kVr=s(yR);boo=r(kVr,"RoFormerTokenizerFast"),kVr.forEach(t),Foo=r(F8," (RoFormer model)"),F8.forEach(t),voo=i(C),dh=n(C,"LI",{});var N4e=s(dh);Yee=n(N4e,"STRONG",{});var SVr=s(Yee);Too=r(SVr,"speech_to_text"),SVr.forEach(t),Moo=r(N4e," \u2014 "),LR=n(N4e,"A",{href:!0});var RVr=s(LR);Eoo=r(RVr,"Speech2TextTokenizer"),RVr.forEach(t),Coo=r(N4e," (Speech2Text model)"),N4e.forEach(t),woo=i(C),ch=n(C,"LI",{});var j4e=s(ch);Kee=n(j4e,"STRONG",{});var BVr=s(Kee);Aoo=r(BVr,"speech_to_text_2"),BVr.forEach(t),yoo=r(j4e," \u2014 "),xR=n(j4e,"A",{href:!0});var PVr=s(xR);Loo=r(PVr,"Speech2Text2Tokenizer"),PVr.forEach(t),xoo=r(j4e," (Speech2Text2 model)"),j4e.forEach(t),koo=i(C),$s=n(C,"LI",{});var v8=s($s);Zee=n(v8,"STRONG",{});var $Vr=s(Zee);Soo=r($Vr,"splinter"),$Vr.forEach(t),Roo=r(v8," \u2014 "),kR=n(v8,"A",{href:!0});var IVr=s(kR);Boo=r(IVr,"SplinterTokenizer"),IVr.forEach(t),Poo=r(v8," or "),SR=n(v8,"A",{href:!0});var qVr=s(SR);$oo=r(qVr,"SplinterTokenizerFast"),qVr.forEach(t),Ioo=r(v8," (Splinter model)"),v8.forEach(t),qoo=i(C),Is=n(C,"LI",{});var T8=s(Is);eoe=n(T8,"STRONG",{});var NVr=s(eoe);Noo=r(NVr,"squeezebert"),NVr.forEach(t),joo=r(T8," \u2014 "),RR=n(T8,"A",{href:!0});var jVr=s(RR);Doo=r(jVr,"SqueezeBertTokenizer"),jVr.forEach(t),Goo=r(T8," or "),BR=n(T8,"A",{href:!0});var DVr=s(BR);Ooo=r(DVr,"SqueezeBertTokenizerFast"),DVr.forEach(t),Voo=r(T8," (SqueezeBERT model)"),T8.forEach(t),Xoo=i(C),qs=n(C,"LI",{});var M8=s(qs);ooe=n(M8,"STRONG",{});var GVr=s(ooe);zoo=r(GVr,"t5"),GVr.forEach(t),Qoo=r(M8," \u2014 "),PR=n(M8,"A",{href:!0});var OVr=s(PR);Woo=r(OVr,"T5Tokenizer"),OVr.forEach(t),Hoo=r(M8," or "),$R=n(M8,"A",{href:!0});var VVr=s($R);Uoo=r(VVr,"T5TokenizerFast"),VVr.forEach(t),Joo=r(M8," (T5 model)"),M8.forEach(t),Yoo=i(C),fh=n(C,"LI",{});var D4e=s(fh);roe=n(D4e,"STRONG",{});var XVr=s(roe);Koo=r(XVr,"tapas"),XVr.forEach(t),Zoo=r(D4e," \u2014 "),IR=n(D4e,"A",{href:!0});var zVr=s(IR);ero=r(zVr,"TapasTokenizer"),zVr.forEach(t),oro=r(D4e," (TAPAS model)"),D4e.forEach(t),rro=i(C),mh=n(C,"LI",{});var G4e=s(mh);toe=n(G4e,"STRONG",{});var QVr=s(toe);tro=r(QVr,"tapex"),QVr.forEach(t),aro=r(G4e," \u2014 "),qR=n(G4e,"A",{href:!0});var WVr=s(qR);nro=r(WVr,"TapexTokenizer"),WVr.forEach(t),sro=r(G4e," (TAPEX model)"),G4e.forEach(t),lro=i(C),gh=n(C,"LI",{});var O4e=s(gh);aoe=n(O4e,"STRONG",{});var HVr=s(aoe);iro=r(HVr,"transfo-xl"),HVr.forEach(t),dro=r(O4e," \u2014 "),NR=n(O4e,"A",{href:!0});var UVr=s(NR);cro=r(UVr,"TransfoXLTokenizer"),UVr.forEach(t),fro=r(O4e," (Transformer-XL model)"),O4e.forEach(t),mro=i(C),hh=n(C,"LI",{});var V4e=s(hh);noe=n(V4e,"STRONG",{});var JVr=s(noe);gro=r(JVr,"wav2vec2"),JVr.forEach(t),hro=r(V4e," \u2014 "),jR=n(V4e,"A",{href:!0});var YVr=s(jR);pro=r(YVr,"Wav2Vec2CTCTokenizer"),YVr.forEach(t),_ro=r(V4e," (Wav2Vec2 model)"),V4e.forEach(t),uro=i(C),ph=n(C,"LI",{});var X4e=s(ph);soe=n(X4e,"STRONG",{});var KVr=s(soe);bro=r(KVr,"wav2vec2_phoneme"),KVr.forEach(t),Fro=r(X4e," \u2014 "),DR=n(X4e,"A",{href:!0});var ZVr=s(DR);vro=r(ZVr,"Wav2Vec2PhonemeCTCTokenizer"),ZVr.forEach(t),Tro=r(X4e," (Wav2Vec2Phoneme model)"),X4e.forEach(t),Mro=i(C),Ns=n(C,"LI",{});var E8=s(Ns);loe=n(E8,"STRONG",{});var eXr=s(loe);Ero=r(eXr,"xglm"),eXr.forEach(t),Cro=r(E8," \u2014 "),GR=n(E8,"A",{href:!0});var oXr=s(GR);wro=r(oXr,"XGLMTokenizer"),oXr.forEach(t),Aro=r(E8," or "),OR=n(E8,"A",{href:!0});var rXr=s(OR);yro=r(rXr,"XGLMTokenizerFast"),rXr.forEach(t),Lro=r(E8," (XGLM model)"),E8.forEach(t),xro=i(C),_h=n(C,"LI",{});var z4e=s(_h);ioe=n(z4e,"STRONG",{});var tXr=s(ioe);kro=r(tXr,"xlm"),tXr.forEach(t),Sro=r(z4e," \u2014 "),VR=n(z4e,"A",{href:!0});var aXr=s(VR);Rro=r(aXr,"XLMTokenizer"),aXr.forEach(t),Bro=r(z4e," (XLM model)"),z4e.forEach(t),Pro=i(C),uh=n(C,"LI",{});var Q4e=s(uh);doe=n(Q4e,"STRONG",{});var nXr=s(doe);$ro=r(nXr,"xlm-prophetnet"),nXr.forEach(t),Iro=r(Q4e," \u2014 "),XR=n(Q4e,"A",{href:!0});var sXr=s(XR);qro=r(sXr,"XLMProphetNetTokenizer"),sXr.forEach(t),Nro=r(Q4e," (XLMProphetNet model)"),Q4e.forEach(t),jro=i(C),js=n(C,"LI",{});var C8=s(js);coe=n(C8,"STRONG",{});var lXr=s(coe);Dro=r(lXr,"xlm-roberta"),lXr.forEach(t),Gro=r(C8," \u2014 "),zR=n(C8,"A",{href:!0});var iXr=s(zR);Oro=r(iXr,"XLMRobertaTokenizer"),iXr.forEach(t),Vro=r(C8," or "),QR=n(C8,"A",{href:!0});var dXr=s(QR);Xro=r(dXr,"XLMRobertaTokenizerFast"),dXr.forEach(t),zro=r(C8," (XLM-RoBERTa model)"),C8.forEach(t),Qro=i(C),Ds=n(C,"LI",{});var w8=s(Ds);foe=n(w8,"STRONG",{});var cXr=s(foe);Wro=r(cXr,"xlnet"),cXr.forEach(t),Hro=r(w8," \u2014 "),WR=n(w8,"A",{href:!0});var fXr=s(WR);Uro=r(fXr,"XLNetTokenizer"),fXr.forEach(t),Jro=r(w8," or "),HR=n(w8,"A",{href:!0});var mXr=s(HR);Yro=r(mXr,"XLNetTokenizerFast"),mXr.forEach(t),Kro=r(w8," (XLNet model)"),w8.forEach(t),C.forEach(t),Zro=i(ha),moe=n(ha,"P",{});var gXr=s(moe);eto=r(gXr,"Examples:"),gXr.forEach(t),oto=i(ha),m(e3.$$.fragment,ha),ha.forEach(t),rto=i(zs),bh=n(zs,"DIV",{class:!0});var E$e=s(bh);m(o3.$$.fragment,E$e),tto=i(E$e),goe=n(E$e,"P",{});var hXr=s(goe);ato=r(hXr,"Register a new tokenizer in this mapping."),hXr.forEach(t),E$e.forEach(t),zs.forEach(t),FBe=i(c),Ui=n(c,"H2",{class:!0});var C$e=s(Ui);Fh=n(C$e,"A",{id:!0,class:!0,href:!0});var pXr=s(Fh);hoe=n(pXr,"SPAN",{});var _Xr=s(hoe);m(r3.$$.fragment,_Xr),_Xr.forEach(t),pXr.forEach(t),nto=i(C$e),poe=n(C$e,"SPAN",{});var uXr=s(poe);sto=r(uXr,"AutoFeatureExtractor"),uXr.forEach(t),C$e.forEach(t),vBe=i(c),Ho=n(c,"DIV",{class:!0});var Qs=s(Ho);m(t3.$$.fragment,Qs),lto=i(Qs),a3=n(Qs,"P",{});var w$e=s(a3);ito=r(w$e,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),UR=n(w$e,"A",{href:!0});var bXr=s(UR);dto=r(bXr,"AutoFeatureExtractor.from_pretrained()"),bXr.forEach(t),cto=r(w$e," class method."),w$e.forEach(t),fto=i(Qs),n3=n(Qs,"P",{});var A$e=s(n3);mto=r(A$e,"This class cannot be instantiated directly using "),_oe=n(A$e,"CODE",{});var FXr=s(_oe);gto=r(FXr,"__init__()"),FXr.forEach(t),hto=r(A$e," (throws an error)."),A$e.forEach(t),pto=i(Qs),Ie=n(Qs,"DIV",{class:!0});var Nt=s(Ie);m(s3.$$.fragment,Nt),_to=i(Nt),uoe=n(Nt,"P",{});var vXr=s(uoe);uto=r(vXr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),vXr.forEach(t),bto=i(Nt),Va=n(Nt,"P",{});var NE=s(Va);Fto=r(NE,"The feature extractor class to instantiate is selected based on the "),boe=n(NE,"CODE",{});var TXr=s(boe);vto=r(TXr,"model_type"),TXr.forEach(t),Tto=r(NE,` property of the config object
(either passed as an argument or loaded from `),Foe=n(NE,"CODE",{});var MXr=s(Foe);Mto=r(MXr,"pretrained_model_name_or_path"),MXr.forEach(t),Eto=r(NE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),voe=n(NE,"CODE",{});var EXr=s(voe);Cto=r(EXr,"pretrained_model_name_or_path"),EXr.forEach(t),wto=r(NE,":"),NE.forEach(t),Ato=i(Nt),ee=n(Nt,"UL",{});var ne=s(ee);vh=n(ne,"LI",{});var W4e=s(vh);Toe=n(W4e,"STRONG",{});var CXr=s(Toe);yto=r(CXr,"beit"),CXr.forEach(t),Lto=r(W4e," \u2014 "),JR=n(W4e,"A",{href:!0});var wXr=s(JR);xto=r(wXr,"BeitFeatureExtractor"),wXr.forEach(t),kto=r(W4e," (BEiT model)"),W4e.forEach(t),Sto=i(ne),Th=n(ne,"LI",{});var H4e=s(Th);Moe=n(H4e,"STRONG",{});var AXr=s(Moe);Rto=r(AXr,"clip"),AXr.forEach(t),Bto=r(H4e," \u2014 "),YR=n(H4e,"A",{href:!0});var yXr=s(YR);Pto=r(yXr,"CLIPFeatureExtractor"),yXr.forEach(t),$to=r(H4e," (CLIP model)"),H4e.forEach(t),Ito=i(ne),Mh=n(ne,"LI",{});var U4e=s(Mh);Eoe=n(U4e,"STRONG",{});var LXr=s(Eoe);qto=r(LXr,"convnext"),LXr.forEach(t),Nto=r(U4e," \u2014 "),KR=n(U4e,"A",{href:!0});var xXr=s(KR);jto=r(xXr,"ConvNextFeatureExtractor"),xXr.forEach(t),Dto=r(U4e," (ConvNext model)"),U4e.forEach(t),Gto=i(ne),Eh=n(ne,"LI",{});var J4e=s(Eh);Coe=n(J4e,"STRONG",{});var kXr=s(Coe);Oto=r(kXr,"deit"),kXr.forEach(t),Vto=r(J4e," \u2014 "),ZR=n(J4e,"A",{href:!0});var SXr=s(ZR);Xto=r(SXr,"DeiTFeatureExtractor"),SXr.forEach(t),zto=r(J4e," (DeiT model)"),J4e.forEach(t),Qto=i(ne),Ch=n(ne,"LI",{});var Y4e=s(Ch);woe=n(Y4e,"STRONG",{});var RXr=s(woe);Wto=r(RXr,"detr"),RXr.forEach(t),Hto=r(Y4e," \u2014 "),eB=n(Y4e,"A",{href:!0});var BXr=s(eB);Uto=r(BXr,"DetrFeatureExtractor"),BXr.forEach(t),Jto=r(Y4e," (DETR model)"),Y4e.forEach(t),Yto=i(ne),wh=n(ne,"LI",{});var K4e=s(wh);Aoe=n(K4e,"STRONG",{});var PXr=s(Aoe);Kto=r(PXr,"hubert"),PXr.forEach(t),Zto=r(K4e," \u2014 "),oB=n(K4e,"A",{href:!0});var $Xr=s(oB);eao=r($Xr,"Wav2Vec2FeatureExtractor"),$Xr.forEach(t),oao=r(K4e," (Hubert model)"),K4e.forEach(t),rao=i(ne),Ah=n(ne,"LI",{});var Z4e=s(Ah);yoe=n(Z4e,"STRONG",{});var IXr=s(yoe);tao=r(IXr,"layoutlmv2"),IXr.forEach(t),aao=r(Z4e," \u2014 "),rB=n(Z4e,"A",{href:!0});var qXr=s(rB);nao=r(qXr,"LayoutLMv2FeatureExtractor"),qXr.forEach(t),sao=r(Z4e," (LayoutLMv2 model)"),Z4e.forEach(t),lao=i(ne),yh=n(ne,"LI",{});var eEe=s(yh);Loe=n(eEe,"STRONG",{});var NXr=s(Loe);iao=r(NXr,"maskformer"),NXr.forEach(t),dao=r(eEe," \u2014 "),tB=n(eEe,"A",{href:!0});var jXr=s(tB);cao=r(jXr,"MaskFormerFeatureExtractor"),jXr.forEach(t),fao=r(eEe," (MaskFormer model)"),eEe.forEach(t),mao=i(ne),Lh=n(ne,"LI",{});var oEe=s(Lh);xoe=n(oEe,"STRONG",{});var DXr=s(xoe);gao=r(DXr,"perceiver"),DXr.forEach(t),hao=r(oEe," \u2014 "),aB=n(oEe,"A",{href:!0});var GXr=s(aB);pao=r(GXr,"PerceiverFeatureExtractor"),GXr.forEach(t),_ao=r(oEe," (Perceiver model)"),oEe.forEach(t),uao=i(ne),xh=n(ne,"LI",{});var rEe=s(xh);koe=n(rEe,"STRONG",{});var OXr=s(koe);bao=r(OXr,"poolformer"),OXr.forEach(t),Fao=r(rEe," \u2014 "),nB=n(rEe,"A",{href:!0});var VXr=s(nB);vao=r(VXr,"PoolFormerFeatureExtractor"),VXr.forEach(t),Tao=r(rEe," (PoolFormer model)"),rEe.forEach(t),Mao=i(ne),kh=n(ne,"LI",{});var tEe=s(kh);Soe=n(tEe,"STRONG",{});var XXr=s(Soe);Eao=r(XXr,"regnet"),XXr.forEach(t),Cao=r(tEe," \u2014 "),sB=n(tEe,"A",{href:!0});var zXr=s(sB);wao=r(zXr,"ConvNextFeatureExtractor"),zXr.forEach(t),Aao=r(tEe," (RegNet model)"),tEe.forEach(t),yao=i(ne),Sh=n(ne,"LI",{});var aEe=s(Sh);Roe=n(aEe,"STRONG",{});var QXr=s(Roe);Lao=r(QXr,"resnet"),QXr.forEach(t),xao=r(aEe," \u2014 "),lB=n(aEe,"A",{href:!0});var WXr=s(lB);kao=r(WXr,"ConvNextFeatureExtractor"),WXr.forEach(t),Sao=r(aEe," (ResNet model)"),aEe.forEach(t),Rao=i(ne),Rh=n(ne,"LI",{});var nEe=s(Rh);Boe=n(nEe,"STRONG",{});var HXr=s(Boe);Bao=r(HXr,"segformer"),HXr.forEach(t),Pao=r(nEe," \u2014 "),iB=n(nEe,"A",{href:!0});var UXr=s(iB);$ao=r(UXr,"SegformerFeatureExtractor"),UXr.forEach(t),Iao=r(nEe," (SegFormer model)"),nEe.forEach(t),qao=i(ne),Bh=n(ne,"LI",{});var sEe=s(Bh);Poe=n(sEe,"STRONG",{});var JXr=s(Poe);Nao=r(JXr,"speech_to_text"),JXr.forEach(t),jao=r(sEe," \u2014 "),dB=n(sEe,"A",{href:!0});var YXr=s(dB);Dao=r(YXr,"Speech2TextFeatureExtractor"),YXr.forEach(t),Gao=r(sEe," (Speech2Text model)"),sEe.forEach(t),Oao=i(ne),Ph=n(ne,"LI",{});var lEe=s(Ph);$oe=n(lEe,"STRONG",{});var KXr=s($oe);Vao=r(KXr,"swin"),KXr.forEach(t),Xao=r(lEe," \u2014 "),cB=n(lEe,"A",{href:!0});var ZXr=s(cB);zao=r(ZXr,"ViTFeatureExtractor"),ZXr.forEach(t),Qao=r(lEe," (Swin model)"),lEe.forEach(t),Wao=i(ne),$h=n(ne,"LI",{});var iEe=s($h);Ioe=n(iEe,"STRONG",{});var ezr=s(Ioe);Hao=r(ezr,"van"),ezr.forEach(t),Uao=r(iEe," \u2014 "),fB=n(iEe,"A",{href:!0});var ozr=s(fB);Jao=r(ozr,"ConvNextFeatureExtractor"),ozr.forEach(t),Yao=r(iEe," (VAN model)"),iEe.forEach(t),Kao=i(ne),Ih=n(ne,"LI",{});var dEe=s(Ih);qoe=n(dEe,"STRONG",{});var rzr=s(qoe);Zao=r(rzr,"vit"),rzr.forEach(t),eno=r(dEe," \u2014 "),mB=n(dEe,"A",{href:!0});var tzr=s(mB);ono=r(tzr,"ViTFeatureExtractor"),tzr.forEach(t),rno=r(dEe," (ViT model)"),dEe.forEach(t),tno=i(ne),qh=n(ne,"LI",{});var cEe=s(qh);Noe=n(cEe,"STRONG",{});var azr=s(Noe);ano=r(azr,"vit_mae"),azr.forEach(t),nno=r(cEe," \u2014 "),gB=n(cEe,"A",{href:!0});var nzr=s(gB);sno=r(nzr,"ViTFeatureExtractor"),nzr.forEach(t),lno=r(cEe," (ViTMAE model)"),cEe.forEach(t),ino=i(ne),Nh=n(ne,"LI",{});var fEe=s(Nh);joe=n(fEe,"STRONG",{});var szr=s(joe);dno=r(szr,"wav2vec2"),szr.forEach(t),cno=r(fEe," \u2014 "),hB=n(fEe,"A",{href:!0});var lzr=s(hB);fno=r(lzr,"Wav2Vec2FeatureExtractor"),lzr.forEach(t),mno=r(fEe," (Wav2Vec2 model)"),fEe.forEach(t),ne.forEach(t),gno=i(Nt),m(jh.$$.fragment,Nt),hno=i(Nt),Doe=n(Nt,"P",{});var izr=s(Doe);pno=r(izr,"Examples:"),izr.forEach(t),_no=i(Nt),m(l3.$$.fragment,Nt),Nt.forEach(t),uno=i(Qs),Dh=n(Qs,"DIV",{class:!0});var y$e=s(Dh);m(i3.$$.fragment,y$e),bno=i(y$e),Goe=n(y$e,"P",{});var dzr=s(Goe);Fno=r(dzr,"Register a new feature extractor for this class."),dzr.forEach(t),y$e.forEach(t),Qs.forEach(t),TBe=i(c),Ji=n(c,"H2",{class:!0});var L$e=s(Ji);Gh=n(L$e,"A",{id:!0,class:!0,href:!0});var czr=s(Gh);Ooe=n(czr,"SPAN",{});var fzr=s(Ooe);m(d3.$$.fragment,fzr),fzr.forEach(t),czr.forEach(t),vno=i(L$e),Voe=n(L$e,"SPAN",{});var mzr=s(Voe);Tno=r(mzr,"AutoProcessor"),mzr.forEach(t),L$e.forEach(t),MBe=i(c),Uo=n(c,"DIV",{class:!0});var Ws=s(Uo);m(c3.$$.fragment,Ws),Mno=i(Ws),f3=n(Ws,"P",{});var x$e=s(f3);Eno=r(x$e,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),pB=n(x$e,"A",{href:!0});var gzr=s(pB);Cno=r(gzr,"AutoProcessor.from_pretrained()"),gzr.forEach(t),wno=r(x$e," class method."),x$e.forEach(t),Ano=i(Ws),m3=n(Ws,"P",{});var k$e=s(m3);yno=r(k$e,"This class cannot be instantiated directly using "),Xoe=n(k$e,"CODE",{});var hzr=s(Xoe);Lno=r(hzr,"__init__()"),hzr.forEach(t),xno=r(k$e," (throws an error)."),k$e.forEach(t),kno=i(Ws),qe=n(Ws,"DIV",{class:!0});var jt=s(qe);m(g3.$$.fragment,jt),Sno=i(jt),zoe=n(jt,"P",{});var pzr=s(zoe);Rno=r(pzr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),pzr.forEach(t),Bno=i(jt),Yi=n(jt,"P",{});var qU=s(Yi);Pno=r(qU,"The processor class to instantiate is selected based on the "),Qoe=n(qU,"CODE",{});var _zr=s(Qoe);$no=r(_zr,"model_type"),_zr.forEach(t),Ino=r(qU,` property of the config object (either
passed as an argument or loaded from `),Woe=n(qU,"CODE",{});var uzr=s(Woe);qno=r(uzr,"pretrained_model_name_or_path"),uzr.forEach(t),Nno=r(qU," if possible):"),qU.forEach(t),jno=i(jt),Se=n(jt,"UL",{});var jo=s(Se);Oh=n(jo,"LI",{});var mEe=s(Oh);Hoe=n(mEe,"STRONG",{});var bzr=s(Hoe);Dno=r(bzr,"clip"),bzr.forEach(t),Gno=r(mEe," \u2014 "),_B=n(mEe,"A",{href:!0});var Fzr=s(_B);Ono=r(Fzr,"CLIPProcessor"),Fzr.forEach(t),Vno=r(mEe," (CLIP model)"),mEe.forEach(t),Xno=i(jo),Vh=n(jo,"LI",{});var gEe=s(Vh);Uoe=n(gEe,"STRONG",{});var vzr=s(Uoe);zno=r(vzr,"layoutlmv2"),vzr.forEach(t),Qno=r(gEe," \u2014 "),uB=n(gEe,"A",{href:!0});var Tzr=s(uB);Wno=r(Tzr,"LayoutLMv2Processor"),Tzr.forEach(t),Hno=r(gEe," (LayoutLMv2 model)"),gEe.forEach(t),Uno=i(jo),Xh=n(jo,"LI",{});var hEe=s(Xh);Joe=n(hEe,"STRONG",{});var Mzr=s(Joe);Jno=r(Mzr,"layoutxlm"),Mzr.forEach(t),Yno=r(hEe," \u2014 "),bB=n(hEe,"A",{href:!0});var Ezr=s(bB);Kno=r(Ezr,"LayoutXLMProcessor"),Ezr.forEach(t),Zno=r(hEe," (LayoutXLM model)"),hEe.forEach(t),eso=i(jo),zh=n(jo,"LI",{});var pEe=s(zh);Yoe=n(pEe,"STRONG",{});var Czr=s(Yoe);oso=r(Czr,"speech_to_text"),Czr.forEach(t),rso=r(pEe," \u2014 "),FB=n(pEe,"A",{href:!0});var wzr=s(FB);tso=r(wzr,"Speech2TextProcessor"),wzr.forEach(t),aso=r(pEe," (Speech2Text model)"),pEe.forEach(t),nso=i(jo),Qh=n(jo,"LI",{});var _Ee=s(Qh);Koe=n(_Ee,"STRONG",{});var Azr=s(Koe);sso=r(Azr,"speech_to_text_2"),Azr.forEach(t),lso=r(_Ee," \u2014 "),vB=n(_Ee,"A",{href:!0});var yzr=s(vB);iso=r(yzr,"Speech2Text2Processor"),yzr.forEach(t),dso=r(_Ee," (Speech2Text2 model)"),_Ee.forEach(t),cso=i(jo),Wh=n(jo,"LI",{});var uEe=s(Wh);Zoe=n(uEe,"STRONG",{});var Lzr=s(Zoe);fso=r(Lzr,"trocr"),Lzr.forEach(t),mso=r(uEe," \u2014 "),TB=n(uEe,"A",{href:!0});var xzr=s(TB);gso=r(xzr,"TrOCRProcessor"),xzr.forEach(t),hso=r(uEe," (TrOCR model)"),uEe.forEach(t),pso=i(jo),Hh=n(jo,"LI",{});var bEe=s(Hh);ere=n(bEe,"STRONG",{});var kzr=s(ere);_so=r(kzr,"vision-text-dual-encoder"),kzr.forEach(t),uso=r(bEe," \u2014 "),MB=n(bEe,"A",{href:!0});var Szr=s(MB);bso=r(Szr,"VisionTextDualEncoderProcessor"),Szr.forEach(t),Fso=r(bEe," (VisionTextDualEncoder model)"),bEe.forEach(t),vso=i(jo),Uh=n(jo,"LI",{});var FEe=s(Uh);ore=n(FEe,"STRONG",{});var Rzr=s(ore);Tso=r(Rzr,"wav2vec2"),Rzr.forEach(t),Mso=r(FEe," \u2014 "),EB=n(FEe,"A",{href:!0});var Bzr=s(EB);Eso=r(Bzr,"Wav2Vec2Processor"),Bzr.forEach(t),Cso=r(FEe," (Wav2Vec2 model)"),FEe.forEach(t),jo.forEach(t),wso=i(jt),m(Jh.$$.fragment,jt),Aso=i(jt),rre=n(jt,"P",{});var Pzr=s(rre);yso=r(Pzr,"Examples:"),Pzr.forEach(t),Lso=i(jt),m(h3.$$.fragment,jt),jt.forEach(t),xso=i(Ws),Yh=n(Ws,"DIV",{class:!0});var S$e=s(Yh);m(p3.$$.fragment,S$e),kso=i(S$e),tre=n(S$e,"P",{});var $zr=s(tre);Sso=r($zr,"Register a new processor for this class."),$zr.forEach(t),S$e.forEach(t),Ws.forEach(t),EBe=i(c),Ki=n(c,"H2",{class:!0});var R$e=s(Ki);Kh=n(R$e,"A",{id:!0,class:!0,href:!0});var Izr=s(Kh);are=n(Izr,"SPAN",{});var qzr=s(are);m(_3.$$.fragment,qzr),qzr.forEach(t),Izr.forEach(t),Rso=i(R$e),nre=n(R$e,"SPAN",{});var Nzr=s(nre);Bso=r(Nzr,"AutoModel"),Nzr.forEach(t),R$e.forEach(t),CBe=i(c),Jo=n(c,"DIV",{class:!0});var Hs=s(Jo);m(u3.$$.fragment,Hs),Pso=i(Hs),Zi=n(Hs,"P",{});var NU=s(Zi);$so=r(NU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),CB=n(NU,"A",{href:!0});var jzr=s(CB);Iso=r(jzr,"from_pretrained()"),jzr.forEach(t),qso=r(NU," class method or the "),wB=n(NU,"A",{href:!0});var Dzr=s(wB);Nso=r(Dzr,"from_config()"),Dzr.forEach(t),jso=r(NU,` class
method.`),NU.forEach(t),Dso=i(Hs),b3=n(Hs,"P",{});var B$e=s(b3);Gso=r(B$e,"This class cannot be instantiated directly using "),sre=n(B$e,"CODE",{});var Gzr=s(sre);Oso=r(Gzr,"__init__()"),Gzr.forEach(t),Vso=r(B$e," (throws an error)."),B$e.forEach(t),Xso=i(Hs),Xr=n(Hs,"DIV",{class:!0});var Us=s(Xr);m(F3.$$.fragment,Us),zso=i(Us),lre=n(Us,"P",{});var Ozr=s(lre);Qso=r(Ozr,"Instantiates one of the base model classes of the library from a configuration."),Ozr.forEach(t),Wso=i(Us),ed=n(Us,"P",{});var jU=s(ed);Hso=r(jU,`Note:
Loading a model from its configuration file does `),ire=n(jU,"STRONG",{});var Vzr=s(ire);Uso=r(Vzr,"not"),Vzr.forEach(t),Jso=r(jU,` load the model weights. It only affects the
model\u2019s configuration. Use `),AB=n(jU,"A",{href:!0});var Xzr=s(AB);Yso=r(Xzr,"from_pretrained()"),Xzr.forEach(t),Kso=r(jU," to load the model weights."),jU.forEach(t),Zso=i(Us),dre=n(Us,"P",{});var zzr=s(dre);elo=r(zzr,"Examples:"),zzr.forEach(t),olo=i(Us),m(v3.$$.fragment,Us),Us.forEach(t),rlo=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Dt=s(Ne);m(T3.$$.fragment,Dt),tlo=i(Dt),cre=n(Dt,"P",{});var Qzr=s(cre);alo=r(Qzr,"Instantiate one of the base model classes of the library from a pretrained model."),Qzr.forEach(t),nlo=i(Dt),Xa=n(Dt,"P",{});var jE=s(Xa);slo=r(jE,"The model class to instantiate is selected based on the "),fre=n(jE,"CODE",{});var Wzr=s(fre);llo=r(Wzr,"model_type"),Wzr.forEach(t),ilo=r(jE,` property of the config object (either
passed as an argument or loaded from `),mre=n(jE,"CODE",{});var Hzr=s(mre);dlo=r(Hzr,"pretrained_model_name_or_path"),Hzr.forEach(t),clo=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gre=n(jE,"CODE",{});var Uzr=s(gre);flo=r(Uzr,"pretrained_model_name_or_path"),Uzr.forEach(t),mlo=r(jE,":"),jE.forEach(t),glo=i(Dt),T=n(Dt,"UL",{});var M=s(T);Zh=n(M,"LI",{});var vEe=s(Zh);hre=n(vEe,"STRONG",{});var Jzr=s(hre);hlo=r(Jzr,"albert"),Jzr.forEach(t),plo=r(vEe," \u2014 "),yB=n(vEe,"A",{href:!0});var Yzr=s(yB);_lo=r(Yzr,"AlbertModel"),Yzr.forEach(t),ulo=r(vEe," (ALBERT model)"),vEe.forEach(t),blo=i(M),ep=n(M,"LI",{});var TEe=s(ep);pre=n(TEe,"STRONG",{});var Kzr=s(pre);Flo=r(Kzr,"bart"),Kzr.forEach(t),vlo=r(TEe," \u2014 "),LB=n(TEe,"A",{href:!0});var Zzr=s(LB);Tlo=r(Zzr,"BartModel"),Zzr.forEach(t),Mlo=r(TEe," (BART model)"),TEe.forEach(t),Elo=i(M),op=n(M,"LI",{});var MEe=s(op);_re=n(MEe,"STRONG",{});var eQr=s(_re);Clo=r(eQr,"beit"),eQr.forEach(t),wlo=r(MEe," \u2014 "),xB=n(MEe,"A",{href:!0});var oQr=s(xB);Alo=r(oQr,"BeitModel"),oQr.forEach(t),ylo=r(MEe," (BEiT model)"),MEe.forEach(t),Llo=i(M),rp=n(M,"LI",{});var EEe=s(rp);ure=n(EEe,"STRONG",{});var rQr=s(ure);xlo=r(rQr,"bert"),rQr.forEach(t),klo=r(EEe," \u2014 "),kB=n(EEe,"A",{href:!0});var tQr=s(kB);Slo=r(tQr,"BertModel"),tQr.forEach(t),Rlo=r(EEe," (BERT model)"),EEe.forEach(t),Blo=i(M),tp=n(M,"LI",{});var CEe=s(tp);bre=n(CEe,"STRONG",{});var aQr=s(bre);Plo=r(aQr,"bert-generation"),aQr.forEach(t),$lo=r(CEe," \u2014 "),SB=n(CEe,"A",{href:!0});var nQr=s(SB);Ilo=r(nQr,"BertGenerationEncoder"),nQr.forEach(t),qlo=r(CEe," (Bert Generation model)"),CEe.forEach(t),Nlo=i(M),ap=n(M,"LI",{});var wEe=s(ap);Fre=n(wEe,"STRONG",{});var sQr=s(Fre);jlo=r(sQr,"big_bird"),sQr.forEach(t),Dlo=r(wEe," \u2014 "),RB=n(wEe,"A",{href:!0});var lQr=s(RB);Glo=r(lQr,"BigBirdModel"),lQr.forEach(t),Olo=r(wEe," (BigBird model)"),wEe.forEach(t),Vlo=i(M),np=n(M,"LI",{});var AEe=s(np);vre=n(AEe,"STRONG",{});var iQr=s(vre);Xlo=r(iQr,"bigbird_pegasus"),iQr.forEach(t),zlo=r(AEe," \u2014 "),BB=n(AEe,"A",{href:!0});var dQr=s(BB);Qlo=r(dQr,"BigBirdPegasusModel"),dQr.forEach(t),Wlo=r(AEe," (BigBirdPegasus model)"),AEe.forEach(t),Hlo=i(M),sp=n(M,"LI",{});var yEe=s(sp);Tre=n(yEe,"STRONG",{});var cQr=s(Tre);Ulo=r(cQr,"blenderbot"),cQr.forEach(t),Jlo=r(yEe," \u2014 "),PB=n(yEe,"A",{href:!0});var fQr=s(PB);Ylo=r(fQr,"BlenderbotModel"),fQr.forEach(t),Klo=r(yEe," (Blenderbot model)"),yEe.forEach(t),Zlo=i(M),lp=n(M,"LI",{});var LEe=s(lp);Mre=n(LEe,"STRONG",{});var mQr=s(Mre);eio=r(mQr,"blenderbot-small"),mQr.forEach(t),oio=r(LEe," \u2014 "),$B=n(LEe,"A",{href:!0});var gQr=s($B);rio=r(gQr,"BlenderbotSmallModel"),gQr.forEach(t),tio=r(LEe," (BlenderbotSmall model)"),LEe.forEach(t),aio=i(M),ip=n(M,"LI",{});var xEe=s(ip);Ere=n(xEe,"STRONG",{});var hQr=s(Ere);nio=r(hQr,"camembert"),hQr.forEach(t),sio=r(xEe," \u2014 "),IB=n(xEe,"A",{href:!0});var pQr=s(IB);lio=r(pQr,"CamembertModel"),pQr.forEach(t),iio=r(xEe," (CamemBERT model)"),xEe.forEach(t),dio=i(M),dp=n(M,"LI",{});var kEe=s(dp);Cre=n(kEe,"STRONG",{});var _Qr=s(Cre);cio=r(_Qr,"canine"),_Qr.forEach(t),fio=r(kEe," \u2014 "),qB=n(kEe,"A",{href:!0});var uQr=s(qB);mio=r(uQr,"CanineModel"),uQr.forEach(t),gio=r(kEe," (Canine model)"),kEe.forEach(t),hio=i(M),cp=n(M,"LI",{});var SEe=s(cp);wre=n(SEe,"STRONG",{});var bQr=s(wre);pio=r(bQr,"clip"),bQr.forEach(t),_io=r(SEe," \u2014 "),NB=n(SEe,"A",{href:!0});var FQr=s(NB);uio=r(FQr,"CLIPModel"),FQr.forEach(t),bio=r(SEe," (CLIP model)"),SEe.forEach(t),Fio=i(M),fp=n(M,"LI",{});var REe=s(fp);Are=n(REe,"STRONG",{});var vQr=s(Are);vio=r(vQr,"convbert"),vQr.forEach(t),Tio=r(REe," \u2014 "),jB=n(REe,"A",{href:!0});var TQr=s(jB);Mio=r(TQr,"ConvBertModel"),TQr.forEach(t),Eio=r(REe," (ConvBERT model)"),REe.forEach(t),Cio=i(M),mp=n(M,"LI",{});var BEe=s(mp);yre=n(BEe,"STRONG",{});var MQr=s(yre);wio=r(MQr,"convnext"),MQr.forEach(t),Aio=r(BEe," \u2014 "),DB=n(BEe,"A",{href:!0});var EQr=s(DB);yio=r(EQr,"ConvNextModel"),EQr.forEach(t),Lio=r(BEe," (ConvNext model)"),BEe.forEach(t),xio=i(M),gp=n(M,"LI",{});var PEe=s(gp);Lre=n(PEe,"STRONG",{});var CQr=s(Lre);kio=r(CQr,"ctrl"),CQr.forEach(t),Sio=r(PEe," \u2014 "),GB=n(PEe,"A",{href:!0});var wQr=s(GB);Rio=r(wQr,"CTRLModel"),wQr.forEach(t),Bio=r(PEe," (CTRL model)"),PEe.forEach(t),Pio=i(M),hp=n(M,"LI",{});var $Ee=s(hp);xre=n($Ee,"STRONG",{});var AQr=s(xre);$io=r(AQr,"data2vec-audio"),AQr.forEach(t),Iio=r($Ee," \u2014 "),OB=n($Ee,"A",{href:!0});var yQr=s(OB);qio=r(yQr,"Data2VecAudioModel"),yQr.forEach(t),Nio=r($Ee," (Data2VecAudio model)"),$Ee.forEach(t),jio=i(M),pp=n(M,"LI",{});var IEe=s(pp);kre=n(IEe,"STRONG",{});var LQr=s(kre);Dio=r(LQr,"data2vec-text"),LQr.forEach(t),Gio=r(IEe," \u2014 "),VB=n(IEe,"A",{href:!0});var xQr=s(VB);Oio=r(xQr,"Data2VecTextModel"),xQr.forEach(t),Vio=r(IEe," (Data2VecText model)"),IEe.forEach(t),Xio=i(M),_p=n(M,"LI",{});var qEe=s(_p);Sre=n(qEe,"STRONG",{});var kQr=s(Sre);zio=r(kQr,"data2vec-vision"),kQr.forEach(t),Qio=r(qEe," \u2014 "),XB=n(qEe,"A",{href:!0});var SQr=s(XB);Wio=r(SQr,"Data2VecVisionModel"),SQr.forEach(t),Hio=r(qEe," (Data2VecVision model)"),qEe.forEach(t),Uio=i(M),up=n(M,"LI",{});var NEe=s(up);Rre=n(NEe,"STRONG",{});var RQr=s(Rre);Jio=r(RQr,"deberta"),RQr.forEach(t),Yio=r(NEe," \u2014 "),zB=n(NEe,"A",{href:!0});var BQr=s(zB);Kio=r(BQr,"DebertaModel"),BQr.forEach(t),Zio=r(NEe," (DeBERTa model)"),NEe.forEach(t),edo=i(M),bp=n(M,"LI",{});var jEe=s(bp);Bre=n(jEe,"STRONG",{});var PQr=s(Bre);odo=r(PQr,"deberta-v2"),PQr.forEach(t),rdo=r(jEe," \u2014 "),QB=n(jEe,"A",{href:!0});var $Qr=s(QB);tdo=r($Qr,"DebertaV2Model"),$Qr.forEach(t),ado=r(jEe," (DeBERTa-v2 model)"),jEe.forEach(t),ndo=i(M),Fp=n(M,"LI",{});var DEe=s(Fp);Pre=n(DEe,"STRONG",{});var IQr=s(Pre);sdo=r(IQr,"decision_transformer"),IQr.forEach(t),ldo=r(DEe," \u2014 "),WB=n(DEe,"A",{href:!0});var qQr=s(WB);ido=r(qQr,"DecisionTransformerModel"),qQr.forEach(t),ddo=r(DEe," (Decision Transformer model)"),DEe.forEach(t),cdo=i(M),vp=n(M,"LI",{});var GEe=s(vp);$re=n(GEe,"STRONG",{});var NQr=s($re);fdo=r(NQr,"deit"),NQr.forEach(t),mdo=r(GEe," \u2014 "),HB=n(GEe,"A",{href:!0});var jQr=s(HB);gdo=r(jQr,"DeiTModel"),jQr.forEach(t),hdo=r(GEe," (DeiT model)"),GEe.forEach(t),pdo=i(M),Tp=n(M,"LI",{});var OEe=s(Tp);Ire=n(OEe,"STRONG",{});var DQr=s(Ire);_do=r(DQr,"detr"),DQr.forEach(t),udo=r(OEe," \u2014 "),UB=n(OEe,"A",{href:!0});var GQr=s(UB);bdo=r(GQr,"DetrModel"),GQr.forEach(t),Fdo=r(OEe," (DETR model)"),OEe.forEach(t),vdo=i(M),Mp=n(M,"LI",{});var VEe=s(Mp);qre=n(VEe,"STRONG",{});var OQr=s(qre);Tdo=r(OQr,"distilbert"),OQr.forEach(t),Mdo=r(VEe," \u2014 "),JB=n(VEe,"A",{href:!0});var VQr=s(JB);Edo=r(VQr,"DistilBertModel"),VQr.forEach(t),Cdo=r(VEe," (DistilBERT model)"),VEe.forEach(t),wdo=i(M),Ep=n(M,"LI",{});var XEe=s(Ep);Nre=n(XEe,"STRONG",{});var XQr=s(Nre);Ado=r(XQr,"dpr"),XQr.forEach(t),ydo=r(XEe," \u2014 "),YB=n(XEe,"A",{href:!0});var zQr=s(YB);Ldo=r(zQr,"DPRQuestionEncoder"),zQr.forEach(t),xdo=r(XEe," (DPR model)"),XEe.forEach(t),kdo=i(M),Cp=n(M,"LI",{});var zEe=s(Cp);jre=n(zEe,"STRONG",{});var QQr=s(jre);Sdo=r(QQr,"dpt"),QQr.forEach(t),Rdo=r(zEe," \u2014 "),KB=n(zEe,"A",{href:!0});var WQr=s(KB);Bdo=r(WQr,"DPTModel"),WQr.forEach(t),Pdo=r(zEe," (DPT model)"),zEe.forEach(t),$do=i(M),wp=n(M,"LI",{});var QEe=s(wp);Dre=n(QEe,"STRONG",{});var HQr=s(Dre);Ido=r(HQr,"electra"),HQr.forEach(t),qdo=r(QEe," \u2014 "),ZB=n(QEe,"A",{href:!0});var UQr=s(ZB);Ndo=r(UQr,"ElectraModel"),UQr.forEach(t),jdo=r(QEe," (ELECTRA model)"),QEe.forEach(t),Ddo=i(M),Ap=n(M,"LI",{});var WEe=s(Ap);Gre=n(WEe,"STRONG",{});var JQr=s(Gre);Gdo=r(JQr,"flaubert"),JQr.forEach(t),Odo=r(WEe," \u2014 "),eP=n(WEe,"A",{href:!0});var YQr=s(eP);Vdo=r(YQr,"FlaubertModel"),YQr.forEach(t),Xdo=r(WEe," (FlauBERT model)"),WEe.forEach(t),zdo=i(M),yp=n(M,"LI",{});var HEe=s(yp);Ore=n(HEe,"STRONG",{});var KQr=s(Ore);Qdo=r(KQr,"fnet"),KQr.forEach(t),Wdo=r(HEe," \u2014 "),oP=n(HEe,"A",{href:!0});var ZQr=s(oP);Hdo=r(ZQr,"FNetModel"),ZQr.forEach(t),Udo=r(HEe," (FNet model)"),HEe.forEach(t),Jdo=i(M),Lp=n(M,"LI",{});var UEe=s(Lp);Vre=n(UEe,"STRONG",{});var eWr=s(Vre);Ydo=r(eWr,"fsmt"),eWr.forEach(t),Kdo=r(UEe," \u2014 "),rP=n(UEe,"A",{href:!0});var oWr=s(rP);Zdo=r(oWr,"FSMTModel"),oWr.forEach(t),eco=r(UEe," (FairSeq Machine-Translation model)"),UEe.forEach(t),oco=i(M),Gs=n(M,"LI",{});var A8=s(Gs);Xre=n(A8,"STRONG",{});var rWr=s(Xre);rco=r(rWr,"funnel"),rWr.forEach(t),tco=r(A8," \u2014 "),tP=n(A8,"A",{href:!0});var tWr=s(tP);aco=r(tWr,"FunnelModel"),tWr.forEach(t),nco=r(A8," or "),aP=n(A8,"A",{href:!0});var aWr=s(aP);sco=r(aWr,"FunnelBaseModel"),aWr.forEach(t),lco=r(A8," (Funnel Transformer model)"),A8.forEach(t),ico=i(M),xp=n(M,"LI",{});var JEe=s(xp);zre=n(JEe,"STRONG",{});var nWr=s(zre);dco=r(nWr,"glpn"),nWr.forEach(t),cco=r(JEe," \u2014 "),nP=n(JEe,"A",{href:!0});var sWr=s(nP);fco=r(sWr,"GLPNModel"),sWr.forEach(t),mco=r(JEe," (GLPN model)"),JEe.forEach(t),gco=i(M),kp=n(M,"LI",{});var YEe=s(kp);Qre=n(YEe,"STRONG",{});var lWr=s(Qre);hco=r(lWr,"gpt2"),lWr.forEach(t),pco=r(YEe," \u2014 "),sP=n(YEe,"A",{href:!0});var iWr=s(sP);_co=r(iWr,"GPT2Model"),iWr.forEach(t),uco=r(YEe," (OpenAI GPT-2 model)"),YEe.forEach(t),bco=i(M),Sp=n(M,"LI",{});var KEe=s(Sp);Wre=n(KEe,"STRONG",{});var dWr=s(Wre);Fco=r(dWr,"gpt_neo"),dWr.forEach(t),vco=r(KEe," \u2014 "),lP=n(KEe,"A",{href:!0});var cWr=s(lP);Tco=r(cWr,"GPTNeoModel"),cWr.forEach(t),Mco=r(KEe," (GPT Neo model)"),KEe.forEach(t),Eco=i(M),Rp=n(M,"LI",{});var ZEe=s(Rp);Hre=n(ZEe,"STRONG",{});var fWr=s(Hre);Cco=r(fWr,"gptj"),fWr.forEach(t),wco=r(ZEe," \u2014 "),iP=n(ZEe,"A",{href:!0});var mWr=s(iP);Aco=r(mWr,"GPTJModel"),mWr.forEach(t),yco=r(ZEe," (GPT-J model)"),ZEe.forEach(t),Lco=i(M),Bp=n(M,"LI",{});var e5e=s(Bp);Ure=n(e5e,"STRONG",{});var gWr=s(Ure);xco=r(gWr,"hubert"),gWr.forEach(t),kco=r(e5e," \u2014 "),dP=n(e5e,"A",{href:!0});var hWr=s(dP);Sco=r(hWr,"HubertModel"),hWr.forEach(t),Rco=r(e5e," (Hubert model)"),e5e.forEach(t),Bco=i(M),Pp=n(M,"LI",{});var o5e=s(Pp);Jre=n(o5e,"STRONG",{});var pWr=s(Jre);Pco=r(pWr,"ibert"),pWr.forEach(t),$co=r(o5e," \u2014 "),cP=n(o5e,"A",{href:!0});var _Wr=s(cP);Ico=r(_Wr,"IBertModel"),_Wr.forEach(t),qco=r(o5e," (I-BERT model)"),o5e.forEach(t),Nco=i(M),$p=n(M,"LI",{});var r5e=s($p);Yre=n(r5e,"STRONG",{});var uWr=s(Yre);jco=r(uWr,"imagegpt"),uWr.forEach(t),Dco=r(r5e," \u2014 "),fP=n(r5e,"A",{href:!0});var bWr=s(fP);Gco=r(bWr,"ImageGPTModel"),bWr.forEach(t),Oco=r(r5e," (ImageGPT model)"),r5e.forEach(t),Vco=i(M),Ip=n(M,"LI",{});var t5e=s(Ip);Kre=n(t5e,"STRONG",{});var FWr=s(Kre);Xco=r(FWr,"layoutlm"),FWr.forEach(t),zco=r(t5e," \u2014 "),mP=n(t5e,"A",{href:!0});var vWr=s(mP);Qco=r(vWr,"LayoutLMModel"),vWr.forEach(t),Wco=r(t5e," (LayoutLM model)"),t5e.forEach(t),Hco=i(M),qp=n(M,"LI",{});var a5e=s(qp);Zre=n(a5e,"STRONG",{});var TWr=s(Zre);Uco=r(TWr,"layoutlmv2"),TWr.forEach(t),Jco=r(a5e," \u2014 "),gP=n(a5e,"A",{href:!0});var MWr=s(gP);Yco=r(MWr,"LayoutLMv2Model"),MWr.forEach(t),Kco=r(a5e," (LayoutLMv2 model)"),a5e.forEach(t),Zco=i(M),Np=n(M,"LI",{});var n5e=s(Np);ete=n(n5e,"STRONG",{});var EWr=s(ete);efo=r(EWr,"led"),EWr.forEach(t),ofo=r(n5e," \u2014 "),hP=n(n5e,"A",{href:!0});var CWr=s(hP);rfo=r(CWr,"LEDModel"),CWr.forEach(t),tfo=r(n5e," (LED model)"),n5e.forEach(t),afo=i(M),jp=n(M,"LI",{});var s5e=s(jp);ote=n(s5e,"STRONG",{});var wWr=s(ote);nfo=r(wWr,"longformer"),wWr.forEach(t),sfo=r(s5e," \u2014 "),pP=n(s5e,"A",{href:!0});var AWr=s(pP);lfo=r(AWr,"LongformerModel"),AWr.forEach(t),ifo=r(s5e," (Longformer model)"),s5e.forEach(t),dfo=i(M),Dp=n(M,"LI",{});var l5e=s(Dp);rte=n(l5e,"STRONG",{});var yWr=s(rte);cfo=r(yWr,"longt5"),yWr.forEach(t),ffo=r(l5e," \u2014 "),_P=n(l5e,"A",{href:!0});var LWr=s(_P);mfo=r(LWr,"LongT5Model"),LWr.forEach(t),gfo=r(l5e," (LongT5 model)"),l5e.forEach(t),hfo=i(M),Gp=n(M,"LI",{});var i5e=s(Gp);tte=n(i5e,"STRONG",{});var xWr=s(tte);pfo=r(xWr,"luke"),xWr.forEach(t),_fo=r(i5e," \u2014 "),uP=n(i5e,"A",{href:!0});var kWr=s(uP);ufo=r(kWr,"LukeModel"),kWr.forEach(t),bfo=r(i5e," (LUKE model)"),i5e.forEach(t),Ffo=i(M),Op=n(M,"LI",{});var d5e=s(Op);ate=n(d5e,"STRONG",{});var SWr=s(ate);vfo=r(SWr,"lxmert"),SWr.forEach(t),Tfo=r(d5e," \u2014 "),bP=n(d5e,"A",{href:!0});var RWr=s(bP);Mfo=r(RWr,"LxmertModel"),RWr.forEach(t),Efo=r(d5e," (LXMERT model)"),d5e.forEach(t),Cfo=i(M),Vp=n(M,"LI",{});var c5e=s(Vp);nte=n(c5e,"STRONG",{});var BWr=s(nte);wfo=r(BWr,"m2m_100"),BWr.forEach(t),Afo=r(c5e," \u2014 "),FP=n(c5e,"A",{href:!0});var PWr=s(FP);yfo=r(PWr,"M2M100Model"),PWr.forEach(t),Lfo=r(c5e," (M2M100 model)"),c5e.forEach(t),xfo=i(M),Xp=n(M,"LI",{});var f5e=s(Xp);ste=n(f5e,"STRONG",{});var $Wr=s(ste);kfo=r($Wr,"marian"),$Wr.forEach(t),Sfo=r(f5e," \u2014 "),vP=n(f5e,"A",{href:!0});var IWr=s(vP);Rfo=r(IWr,"MarianModel"),IWr.forEach(t),Bfo=r(f5e," (Marian model)"),f5e.forEach(t),Pfo=i(M),zp=n(M,"LI",{});var m5e=s(zp);lte=n(m5e,"STRONG",{});var qWr=s(lte);$fo=r(qWr,"maskformer"),qWr.forEach(t),Ifo=r(m5e," \u2014 "),TP=n(m5e,"A",{href:!0});var NWr=s(TP);qfo=r(NWr,"MaskFormerModel"),NWr.forEach(t),Nfo=r(m5e," (MaskFormer model)"),m5e.forEach(t),jfo=i(M),Qp=n(M,"LI",{});var g5e=s(Qp);ite=n(g5e,"STRONG",{});var jWr=s(ite);Dfo=r(jWr,"mbart"),jWr.forEach(t),Gfo=r(g5e," \u2014 "),MP=n(g5e,"A",{href:!0});var DWr=s(MP);Ofo=r(DWr,"MBartModel"),DWr.forEach(t),Vfo=r(g5e," (mBART model)"),g5e.forEach(t),Xfo=i(M),Wp=n(M,"LI",{});var h5e=s(Wp);dte=n(h5e,"STRONG",{});var GWr=s(dte);zfo=r(GWr,"megatron-bert"),GWr.forEach(t),Qfo=r(h5e," \u2014 "),EP=n(h5e,"A",{href:!0});var OWr=s(EP);Wfo=r(OWr,"MegatronBertModel"),OWr.forEach(t),Hfo=r(h5e," (MegatronBert model)"),h5e.forEach(t),Ufo=i(M),Hp=n(M,"LI",{});var p5e=s(Hp);cte=n(p5e,"STRONG",{});var VWr=s(cte);Jfo=r(VWr,"mobilebert"),VWr.forEach(t),Yfo=r(p5e," \u2014 "),CP=n(p5e,"A",{href:!0});var XWr=s(CP);Kfo=r(XWr,"MobileBertModel"),XWr.forEach(t),Zfo=r(p5e," (MobileBERT model)"),p5e.forEach(t),emo=i(M),Up=n(M,"LI",{});var _5e=s(Up);fte=n(_5e,"STRONG",{});var zWr=s(fte);omo=r(zWr,"mpnet"),zWr.forEach(t),rmo=r(_5e," \u2014 "),wP=n(_5e,"A",{href:!0});var QWr=s(wP);tmo=r(QWr,"MPNetModel"),QWr.forEach(t),amo=r(_5e," (MPNet model)"),_5e.forEach(t),nmo=i(M),Jp=n(M,"LI",{});var u5e=s(Jp);mte=n(u5e,"STRONG",{});var WWr=s(mte);smo=r(WWr,"mt5"),WWr.forEach(t),lmo=r(u5e," \u2014 "),AP=n(u5e,"A",{href:!0});var HWr=s(AP);imo=r(HWr,"MT5Model"),HWr.forEach(t),dmo=r(u5e," (mT5 model)"),u5e.forEach(t),cmo=i(M),Yp=n(M,"LI",{});var b5e=s(Yp);gte=n(b5e,"STRONG",{});var UWr=s(gte);fmo=r(UWr,"nystromformer"),UWr.forEach(t),mmo=r(b5e," \u2014 "),yP=n(b5e,"A",{href:!0});var JWr=s(yP);gmo=r(JWr,"NystromformerModel"),JWr.forEach(t),hmo=r(b5e," (Nystromformer model)"),b5e.forEach(t),pmo=i(M),Kp=n(M,"LI",{});var F5e=s(Kp);hte=n(F5e,"STRONG",{});var YWr=s(hte);_mo=r(YWr,"openai-gpt"),YWr.forEach(t),umo=r(F5e," \u2014 "),LP=n(F5e,"A",{href:!0});var KWr=s(LP);bmo=r(KWr,"OpenAIGPTModel"),KWr.forEach(t),Fmo=r(F5e," (OpenAI GPT model)"),F5e.forEach(t),vmo=i(M),Zp=n(M,"LI",{});var v5e=s(Zp);pte=n(v5e,"STRONG",{});var ZWr=s(pte);Tmo=r(ZWr,"pegasus"),ZWr.forEach(t),Mmo=r(v5e," \u2014 "),xP=n(v5e,"A",{href:!0});var eHr=s(xP);Emo=r(eHr,"PegasusModel"),eHr.forEach(t),Cmo=r(v5e," (Pegasus model)"),v5e.forEach(t),wmo=i(M),e_=n(M,"LI",{});var T5e=s(e_);_te=n(T5e,"STRONG",{});var oHr=s(_te);Amo=r(oHr,"perceiver"),oHr.forEach(t),ymo=r(T5e," \u2014 "),kP=n(T5e,"A",{href:!0});var rHr=s(kP);Lmo=r(rHr,"PerceiverModel"),rHr.forEach(t),xmo=r(T5e," (Perceiver model)"),T5e.forEach(t),kmo=i(M),o_=n(M,"LI",{});var M5e=s(o_);ute=n(M5e,"STRONG",{});var tHr=s(ute);Smo=r(tHr,"plbart"),tHr.forEach(t),Rmo=r(M5e," \u2014 "),SP=n(M5e,"A",{href:!0});var aHr=s(SP);Bmo=r(aHr,"PLBartModel"),aHr.forEach(t),Pmo=r(M5e," (PLBart model)"),M5e.forEach(t),$mo=i(M),r_=n(M,"LI",{});var E5e=s(r_);bte=n(E5e,"STRONG",{});var nHr=s(bte);Imo=r(nHr,"poolformer"),nHr.forEach(t),qmo=r(E5e," \u2014 "),RP=n(E5e,"A",{href:!0});var sHr=s(RP);Nmo=r(sHr,"PoolFormerModel"),sHr.forEach(t),jmo=r(E5e," (PoolFormer model)"),E5e.forEach(t),Dmo=i(M),t_=n(M,"LI",{});var C5e=s(t_);Fte=n(C5e,"STRONG",{});var lHr=s(Fte);Gmo=r(lHr,"prophetnet"),lHr.forEach(t),Omo=r(C5e," \u2014 "),BP=n(C5e,"A",{href:!0});var iHr=s(BP);Vmo=r(iHr,"ProphetNetModel"),iHr.forEach(t),Xmo=r(C5e," (ProphetNet model)"),C5e.forEach(t),zmo=i(M),a_=n(M,"LI",{});var w5e=s(a_);vte=n(w5e,"STRONG",{});var dHr=s(vte);Qmo=r(dHr,"qdqbert"),dHr.forEach(t),Wmo=r(w5e," \u2014 "),PP=n(w5e,"A",{href:!0});var cHr=s(PP);Hmo=r(cHr,"QDQBertModel"),cHr.forEach(t),Umo=r(w5e," (QDQBert model)"),w5e.forEach(t),Jmo=i(M),n_=n(M,"LI",{});var A5e=s(n_);Tte=n(A5e,"STRONG",{});var fHr=s(Tte);Ymo=r(fHr,"reformer"),fHr.forEach(t),Kmo=r(A5e," \u2014 "),$P=n(A5e,"A",{href:!0});var mHr=s($P);Zmo=r(mHr,"ReformerModel"),mHr.forEach(t),ego=r(A5e," (Reformer model)"),A5e.forEach(t),ogo=i(M),s_=n(M,"LI",{});var y5e=s(s_);Mte=n(y5e,"STRONG",{});var gHr=s(Mte);rgo=r(gHr,"regnet"),gHr.forEach(t),tgo=r(y5e," \u2014 "),IP=n(y5e,"A",{href:!0});var hHr=s(IP);ago=r(hHr,"RegNetModel"),hHr.forEach(t),ngo=r(y5e," (RegNet model)"),y5e.forEach(t),sgo=i(M),l_=n(M,"LI",{});var L5e=s(l_);Ete=n(L5e,"STRONG",{});var pHr=s(Ete);lgo=r(pHr,"rembert"),pHr.forEach(t),igo=r(L5e," \u2014 "),qP=n(L5e,"A",{href:!0});var _Hr=s(qP);dgo=r(_Hr,"RemBertModel"),_Hr.forEach(t),cgo=r(L5e," (RemBERT model)"),L5e.forEach(t),fgo=i(M),i_=n(M,"LI",{});var x5e=s(i_);Cte=n(x5e,"STRONG",{});var uHr=s(Cte);mgo=r(uHr,"resnet"),uHr.forEach(t),ggo=r(x5e," \u2014 "),NP=n(x5e,"A",{href:!0});var bHr=s(NP);hgo=r(bHr,"ResNetModel"),bHr.forEach(t),pgo=r(x5e," (ResNet model)"),x5e.forEach(t),_go=i(M),d_=n(M,"LI",{});var k5e=s(d_);wte=n(k5e,"STRONG",{});var FHr=s(wte);ugo=r(FHr,"retribert"),FHr.forEach(t),bgo=r(k5e," \u2014 "),jP=n(k5e,"A",{href:!0});var vHr=s(jP);Fgo=r(vHr,"RetriBertModel"),vHr.forEach(t),vgo=r(k5e," (RetriBERT model)"),k5e.forEach(t),Tgo=i(M),c_=n(M,"LI",{});var S5e=s(c_);Ate=n(S5e,"STRONG",{});var THr=s(Ate);Mgo=r(THr,"roberta"),THr.forEach(t),Ego=r(S5e," \u2014 "),DP=n(S5e,"A",{href:!0});var MHr=s(DP);Cgo=r(MHr,"RobertaModel"),MHr.forEach(t),wgo=r(S5e," (RoBERTa model)"),S5e.forEach(t),Ago=i(M),f_=n(M,"LI",{});var R5e=s(f_);yte=n(R5e,"STRONG",{});var EHr=s(yte);ygo=r(EHr,"roformer"),EHr.forEach(t),Lgo=r(R5e," \u2014 "),GP=n(R5e,"A",{href:!0});var CHr=s(GP);xgo=r(CHr,"RoFormerModel"),CHr.forEach(t),kgo=r(R5e," (RoFormer model)"),R5e.forEach(t),Sgo=i(M),m_=n(M,"LI",{});var B5e=s(m_);Lte=n(B5e,"STRONG",{});var wHr=s(Lte);Rgo=r(wHr,"segformer"),wHr.forEach(t),Bgo=r(B5e," \u2014 "),OP=n(B5e,"A",{href:!0});var AHr=s(OP);Pgo=r(AHr,"SegformerModel"),AHr.forEach(t),$go=r(B5e," (SegFormer model)"),B5e.forEach(t),Igo=i(M),g_=n(M,"LI",{});var P5e=s(g_);xte=n(P5e,"STRONG",{});var yHr=s(xte);qgo=r(yHr,"sew"),yHr.forEach(t),Ngo=r(P5e," \u2014 "),VP=n(P5e,"A",{href:!0});var LHr=s(VP);jgo=r(LHr,"SEWModel"),LHr.forEach(t),Dgo=r(P5e," (SEW model)"),P5e.forEach(t),Ggo=i(M),h_=n(M,"LI",{});var $5e=s(h_);kte=n($5e,"STRONG",{});var xHr=s(kte);Ogo=r(xHr,"sew-d"),xHr.forEach(t),Vgo=r($5e," \u2014 "),XP=n($5e,"A",{href:!0});var kHr=s(XP);Xgo=r(kHr,"SEWDModel"),kHr.forEach(t),zgo=r($5e," (SEW-D model)"),$5e.forEach(t),Qgo=i(M),p_=n(M,"LI",{});var I5e=s(p_);Ste=n(I5e,"STRONG",{});var SHr=s(Ste);Wgo=r(SHr,"speech_to_text"),SHr.forEach(t),Hgo=r(I5e," \u2014 "),zP=n(I5e,"A",{href:!0});var RHr=s(zP);Ugo=r(RHr,"Speech2TextModel"),RHr.forEach(t),Jgo=r(I5e," (Speech2Text model)"),I5e.forEach(t),Ygo=i(M),__=n(M,"LI",{});var q5e=s(__);Rte=n(q5e,"STRONG",{});var BHr=s(Rte);Kgo=r(BHr,"splinter"),BHr.forEach(t),Zgo=r(q5e," \u2014 "),QP=n(q5e,"A",{href:!0});var PHr=s(QP);eho=r(PHr,"SplinterModel"),PHr.forEach(t),oho=r(q5e," (Splinter model)"),q5e.forEach(t),rho=i(M),u_=n(M,"LI",{});var N5e=s(u_);Bte=n(N5e,"STRONG",{});var $Hr=s(Bte);tho=r($Hr,"squeezebert"),$Hr.forEach(t),aho=r(N5e," \u2014 "),WP=n(N5e,"A",{href:!0});var IHr=s(WP);nho=r(IHr,"SqueezeBertModel"),IHr.forEach(t),sho=r(N5e," (SqueezeBERT model)"),N5e.forEach(t),lho=i(M),b_=n(M,"LI",{});var j5e=s(b_);Pte=n(j5e,"STRONG",{});var qHr=s(Pte);iho=r(qHr,"swin"),qHr.forEach(t),dho=r(j5e," \u2014 "),HP=n(j5e,"A",{href:!0});var NHr=s(HP);cho=r(NHr,"SwinModel"),NHr.forEach(t),fho=r(j5e," (Swin model)"),j5e.forEach(t),mho=i(M),F_=n(M,"LI",{});var D5e=s(F_);$te=n(D5e,"STRONG",{});var jHr=s($te);gho=r(jHr,"t5"),jHr.forEach(t),hho=r(D5e," \u2014 "),UP=n(D5e,"A",{href:!0});var DHr=s(UP);pho=r(DHr,"T5Model"),DHr.forEach(t),_ho=r(D5e," (T5 model)"),D5e.forEach(t),uho=i(M),v_=n(M,"LI",{});var G5e=s(v_);Ite=n(G5e,"STRONG",{});var GHr=s(Ite);bho=r(GHr,"tapas"),GHr.forEach(t),Fho=r(G5e," \u2014 "),JP=n(G5e,"A",{href:!0});var OHr=s(JP);vho=r(OHr,"TapasModel"),OHr.forEach(t),Tho=r(G5e," (TAPAS model)"),G5e.forEach(t),Mho=i(M),T_=n(M,"LI",{});var O5e=s(T_);qte=n(O5e,"STRONG",{});var VHr=s(qte);Eho=r(VHr,"transfo-xl"),VHr.forEach(t),Cho=r(O5e," \u2014 "),YP=n(O5e,"A",{href:!0});var XHr=s(YP);who=r(XHr,"TransfoXLModel"),XHr.forEach(t),Aho=r(O5e," (Transformer-XL model)"),O5e.forEach(t),yho=i(M),M_=n(M,"LI",{});var V5e=s(M_);Nte=n(V5e,"STRONG",{});var zHr=s(Nte);Lho=r(zHr,"unispeech"),zHr.forEach(t),xho=r(V5e," \u2014 "),KP=n(V5e,"A",{href:!0});var QHr=s(KP);kho=r(QHr,"UniSpeechModel"),QHr.forEach(t),Sho=r(V5e," (UniSpeech model)"),V5e.forEach(t),Rho=i(M),E_=n(M,"LI",{});var X5e=s(E_);jte=n(X5e,"STRONG",{});var WHr=s(jte);Bho=r(WHr,"unispeech-sat"),WHr.forEach(t),Pho=r(X5e," \u2014 "),ZP=n(X5e,"A",{href:!0});var HHr=s(ZP);$ho=r(HHr,"UniSpeechSatModel"),HHr.forEach(t),Iho=r(X5e," (UniSpeechSat model)"),X5e.forEach(t),qho=i(M),C_=n(M,"LI",{});var z5e=s(C_);Dte=n(z5e,"STRONG",{});var UHr=s(Dte);Nho=r(UHr,"van"),UHr.forEach(t),jho=r(z5e," \u2014 "),e$=n(z5e,"A",{href:!0});var JHr=s(e$);Dho=r(JHr,"VanModel"),JHr.forEach(t),Gho=r(z5e," (VAN model)"),z5e.forEach(t),Oho=i(M),w_=n(M,"LI",{});var Q5e=s(w_);Gte=n(Q5e,"STRONG",{});var YHr=s(Gte);Vho=r(YHr,"vilt"),YHr.forEach(t),Xho=r(Q5e," \u2014 "),o$=n(Q5e,"A",{href:!0});var KHr=s(o$);zho=r(KHr,"ViltModel"),KHr.forEach(t),Qho=r(Q5e," (ViLT model)"),Q5e.forEach(t),Who=i(M),A_=n(M,"LI",{});var W5e=s(A_);Ote=n(W5e,"STRONG",{});var ZHr=s(Ote);Hho=r(ZHr,"vision-text-dual-encoder"),ZHr.forEach(t),Uho=r(W5e," \u2014 "),r$=n(W5e,"A",{href:!0});var eUr=s(r$);Jho=r(eUr,"VisionTextDualEncoderModel"),eUr.forEach(t),Yho=r(W5e," (VisionTextDualEncoder model)"),W5e.forEach(t),Kho=i(M),y_=n(M,"LI",{});var H5e=s(y_);Vte=n(H5e,"STRONG",{});var oUr=s(Vte);Zho=r(oUr,"visual_bert"),oUr.forEach(t),epo=r(H5e," \u2014 "),t$=n(H5e,"A",{href:!0});var rUr=s(t$);opo=r(rUr,"VisualBertModel"),rUr.forEach(t),rpo=r(H5e," (VisualBert model)"),H5e.forEach(t),tpo=i(M),L_=n(M,"LI",{});var U5e=s(L_);Xte=n(U5e,"STRONG",{});var tUr=s(Xte);apo=r(tUr,"vit"),tUr.forEach(t),npo=r(U5e," \u2014 "),a$=n(U5e,"A",{href:!0});var aUr=s(a$);spo=r(aUr,"ViTModel"),aUr.forEach(t),lpo=r(U5e," (ViT model)"),U5e.forEach(t),ipo=i(M),x_=n(M,"LI",{});var J5e=s(x_);zte=n(J5e,"STRONG",{});var nUr=s(zte);dpo=r(nUr,"vit_mae"),nUr.forEach(t),cpo=r(J5e," \u2014 "),n$=n(J5e,"A",{href:!0});var sUr=s(n$);fpo=r(sUr,"ViTMAEModel"),sUr.forEach(t),mpo=r(J5e," (ViTMAE model)"),J5e.forEach(t),gpo=i(M),k_=n(M,"LI",{});var Y5e=s(k_);Qte=n(Y5e,"STRONG",{});var lUr=s(Qte);hpo=r(lUr,"wav2vec2"),lUr.forEach(t),ppo=r(Y5e," \u2014 "),s$=n(Y5e,"A",{href:!0});var iUr=s(s$);_po=r(iUr,"Wav2Vec2Model"),iUr.forEach(t),upo=r(Y5e," (Wav2Vec2 model)"),Y5e.forEach(t),bpo=i(M),S_=n(M,"LI",{});var K5e=s(S_);Wte=n(K5e,"STRONG",{});var dUr=s(Wte);Fpo=r(dUr,"wavlm"),dUr.forEach(t),vpo=r(K5e," \u2014 "),l$=n(K5e,"A",{href:!0});var cUr=s(l$);Tpo=r(cUr,"WavLMModel"),cUr.forEach(t),Mpo=r(K5e," (WavLM model)"),K5e.forEach(t),Epo=i(M),R_=n(M,"LI",{});var Z5e=s(R_);Hte=n(Z5e,"STRONG",{});var fUr=s(Hte);Cpo=r(fUr,"xglm"),fUr.forEach(t),wpo=r(Z5e," \u2014 "),i$=n(Z5e,"A",{href:!0});var mUr=s(i$);Apo=r(mUr,"XGLMModel"),mUr.forEach(t),ypo=r(Z5e," (XGLM model)"),Z5e.forEach(t),Lpo=i(M),B_=n(M,"LI",{});var e3e=s(B_);Ute=n(e3e,"STRONG",{});var gUr=s(Ute);xpo=r(gUr,"xlm"),gUr.forEach(t),kpo=r(e3e," \u2014 "),d$=n(e3e,"A",{href:!0});var hUr=s(d$);Spo=r(hUr,"XLMModel"),hUr.forEach(t),Rpo=r(e3e," (XLM model)"),e3e.forEach(t),Bpo=i(M),P_=n(M,"LI",{});var o3e=s(P_);Jte=n(o3e,"STRONG",{});var pUr=s(Jte);Ppo=r(pUr,"xlm-prophetnet"),pUr.forEach(t),$po=r(o3e," \u2014 "),c$=n(o3e,"A",{href:!0});var _Ur=s(c$);Ipo=r(_Ur,"XLMProphetNetModel"),_Ur.forEach(t),qpo=r(o3e," (XLMProphetNet model)"),o3e.forEach(t),Npo=i(M),$_=n(M,"LI",{});var r3e=s($_);Yte=n(r3e,"STRONG",{});var uUr=s(Yte);jpo=r(uUr,"xlm-roberta"),uUr.forEach(t),Dpo=r(r3e," \u2014 "),f$=n(r3e,"A",{href:!0});var bUr=s(f$);Gpo=r(bUr,"XLMRobertaModel"),bUr.forEach(t),Opo=r(r3e," (XLM-RoBERTa model)"),r3e.forEach(t),Vpo=i(M),I_=n(M,"LI",{});var t3e=s(I_);Kte=n(t3e,"STRONG",{});var FUr=s(Kte);Xpo=r(FUr,"xlm-roberta-xl"),FUr.forEach(t),zpo=r(t3e," \u2014 "),m$=n(t3e,"A",{href:!0});var vUr=s(m$);Qpo=r(vUr,"XLMRobertaXLModel"),vUr.forEach(t),Wpo=r(t3e," (XLM-RoBERTa-XL model)"),t3e.forEach(t),Hpo=i(M),q_=n(M,"LI",{});var a3e=s(q_);Zte=n(a3e,"STRONG",{});var TUr=s(Zte);Upo=r(TUr,"xlnet"),TUr.forEach(t),Jpo=r(a3e," \u2014 "),g$=n(a3e,"A",{href:!0});var MUr=s(g$);Ypo=r(MUr,"XLNetModel"),MUr.forEach(t),Kpo=r(a3e," (XLNet model)"),a3e.forEach(t),Zpo=i(M),N_=n(M,"LI",{});var n3e=s(N_);eae=n(n3e,"STRONG",{});var EUr=s(eae);e_o=r(EUr,"yoso"),EUr.forEach(t),o_o=r(n3e," \u2014 "),h$=n(n3e,"A",{href:!0});var CUr=s(h$);r_o=r(CUr,"YosoModel"),CUr.forEach(t),t_o=r(n3e," (YOSO model)"),n3e.forEach(t),M.forEach(t),a_o=i(Dt),j_=n(Dt,"P",{});var s3e=s(j_);n_o=r(s3e,"The model is set in evaluation mode by default using "),oae=n(s3e,"CODE",{});var wUr=s(oae);s_o=r(wUr,"model.eval()"),wUr.forEach(t),l_o=r(s3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rae=n(s3e,"CODE",{});var AUr=s(rae);i_o=r(AUr,"model.train()"),AUr.forEach(t),s3e.forEach(t),d_o=i(Dt),tae=n(Dt,"P",{});var yUr=s(tae);c_o=r(yUr,"Examples:"),yUr.forEach(t),f_o=i(Dt),m(M3.$$.fragment,Dt),Dt.forEach(t),Hs.forEach(t),wBe=i(c),od=n(c,"H2",{class:!0});var P$e=s(od);D_=n(P$e,"A",{id:!0,class:!0,href:!0});var LUr=s(D_);aae=n(LUr,"SPAN",{});var xUr=s(aae);m(E3.$$.fragment,xUr),xUr.forEach(t),LUr.forEach(t),m_o=i(P$e),nae=n(P$e,"SPAN",{});var kUr=s(nae);g_o=r(kUr,"AutoModelForPreTraining"),kUr.forEach(t),P$e.forEach(t),ABe=i(c),Yo=n(c,"DIV",{class:!0});var Js=s(Yo);m(C3.$$.fragment,Js),h_o=i(Js),rd=n(Js,"P",{});var DU=s(rd);p_o=r(DU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),p$=n(DU,"A",{href:!0});var SUr=s(p$);__o=r(SUr,"from_pretrained()"),SUr.forEach(t),u_o=r(DU," class method or the "),_$=n(DU,"A",{href:!0});var RUr=s(_$);b_o=r(RUr,"from_config()"),RUr.forEach(t),F_o=r(DU,` class
method.`),DU.forEach(t),v_o=i(Js),w3=n(Js,"P",{});var $$e=s(w3);T_o=r($$e,"This class cannot be instantiated directly using "),sae=n($$e,"CODE",{});var BUr=s(sae);M_o=r(BUr,"__init__()"),BUr.forEach(t),E_o=r($$e," (throws an error)."),$$e.forEach(t),C_o=i(Js),zr=n(Js,"DIV",{class:!0});var Ys=s(zr);m(A3.$$.fragment,Ys),w_o=i(Ys),lae=n(Ys,"P",{});var PUr=s(lae);A_o=r(PUr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),PUr.forEach(t),y_o=i(Ys),td=n(Ys,"P",{});var GU=s(td);L_o=r(GU,`Note:
Loading a model from its configuration file does `),iae=n(GU,"STRONG",{});var $Ur=s(iae);x_o=r($Ur,"not"),$Ur.forEach(t),k_o=r(GU,` load the model weights. It only affects the
model\u2019s configuration. Use `),u$=n(GU,"A",{href:!0});var IUr=s(u$);S_o=r(IUr,"from_pretrained()"),IUr.forEach(t),R_o=r(GU," to load the model weights."),GU.forEach(t),B_o=i(Ys),dae=n(Ys,"P",{});var qUr=s(dae);P_o=r(qUr,"Examples:"),qUr.forEach(t),$_o=i(Ys),m(y3.$$.fragment,Ys),Ys.forEach(t),I_o=i(Js),je=n(Js,"DIV",{class:!0});var Gt=s(je);m(L3.$$.fragment,Gt),q_o=i(Gt),cae=n(Gt,"P",{});var NUr=s(cae);N_o=r(NUr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),NUr.forEach(t),j_o=i(Gt),za=n(Gt,"P",{});var DE=s(za);D_o=r(DE,"The model class to instantiate is selected based on the "),fae=n(DE,"CODE",{});var jUr=s(fae);G_o=r(jUr,"model_type"),jUr.forEach(t),O_o=r(DE,` property of the config object (either
passed as an argument or loaded from `),mae=n(DE,"CODE",{});var DUr=s(mae);V_o=r(DUr,"pretrained_model_name_or_path"),DUr.forEach(t),X_o=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gae=n(DE,"CODE",{});var GUr=s(gae);z_o=r(GUr,"pretrained_model_name_or_path"),GUr.forEach(t),Q_o=r(DE,":"),DE.forEach(t),W_o=i(Gt),S=n(Gt,"UL",{});var B=s(S);G_=n(B,"LI",{});var l3e=s(G_);hae=n(l3e,"STRONG",{});var OUr=s(hae);H_o=r(OUr,"albert"),OUr.forEach(t),U_o=r(l3e," \u2014 "),b$=n(l3e,"A",{href:!0});var VUr=s(b$);J_o=r(VUr,"AlbertForPreTraining"),VUr.forEach(t),Y_o=r(l3e," (ALBERT model)"),l3e.forEach(t),K_o=i(B),O_=n(B,"LI",{});var i3e=s(O_);pae=n(i3e,"STRONG",{});var XUr=s(pae);Z_o=r(XUr,"bart"),XUr.forEach(t),euo=r(i3e," \u2014 "),F$=n(i3e,"A",{href:!0});var zUr=s(F$);ouo=r(zUr,"BartForConditionalGeneration"),zUr.forEach(t),ruo=r(i3e," (BART model)"),i3e.forEach(t),tuo=i(B),V_=n(B,"LI",{});var d3e=s(V_);_ae=n(d3e,"STRONG",{});var QUr=s(_ae);auo=r(QUr,"bert"),QUr.forEach(t),nuo=r(d3e," \u2014 "),v$=n(d3e,"A",{href:!0});var WUr=s(v$);suo=r(WUr,"BertForPreTraining"),WUr.forEach(t),luo=r(d3e," (BERT model)"),d3e.forEach(t),iuo=i(B),X_=n(B,"LI",{});var c3e=s(X_);uae=n(c3e,"STRONG",{});var HUr=s(uae);duo=r(HUr,"big_bird"),HUr.forEach(t),cuo=r(c3e," \u2014 "),T$=n(c3e,"A",{href:!0});var UUr=s(T$);fuo=r(UUr,"BigBirdForPreTraining"),UUr.forEach(t),muo=r(c3e," (BigBird model)"),c3e.forEach(t),guo=i(B),z_=n(B,"LI",{});var f3e=s(z_);bae=n(f3e,"STRONG",{});var JUr=s(bae);huo=r(JUr,"camembert"),JUr.forEach(t),puo=r(f3e," \u2014 "),M$=n(f3e,"A",{href:!0});var YUr=s(M$);_uo=r(YUr,"CamembertForMaskedLM"),YUr.forEach(t),uuo=r(f3e," (CamemBERT model)"),f3e.forEach(t),buo=i(B),Q_=n(B,"LI",{});var m3e=s(Q_);Fae=n(m3e,"STRONG",{});var KUr=s(Fae);Fuo=r(KUr,"ctrl"),KUr.forEach(t),vuo=r(m3e," \u2014 "),E$=n(m3e,"A",{href:!0});var ZUr=s(E$);Tuo=r(ZUr,"CTRLLMHeadModel"),ZUr.forEach(t),Muo=r(m3e," (CTRL model)"),m3e.forEach(t),Euo=i(B),W_=n(B,"LI",{});var g3e=s(W_);vae=n(g3e,"STRONG",{});var eJr=s(vae);Cuo=r(eJr,"data2vec-text"),eJr.forEach(t),wuo=r(g3e," \u2014 "),C$=n(g3e,"A",{href:!0});var oJr=s(C$);Auo=r(oJr,"Data2VecTextForMaskedLM"),oJr.forEach(t),yuo=r(g3e," (Data2VecText model)"),g3e.forEach(t),Luo=i(B),H_=n(B,"LI",{});var h3e=s(H_);Tae=n(h3e,"STRONG",{});var rJr=s(Tae);xuo=r(rJr,"deberta"),rJr.forEach(t),kuo=r(h3e," \u2014 "),w$=n(h3e,"A",{href:!0});var tJr=s(w$);Suo=r(tJr,"DebertaForMaskedLM"),tJr.forEach(t),Ruo=r(h3e," (DeBERTa model)"),h3e.forEach(t),Buo=i(B),U_=n(B,"LI",{});var p3e=s(U_);Mae=n(p3e,"STRONG",{});var aJr=s(Mae);Puo=r(aJr,"deberta-v2"),aJr.forEach(t),$uo=r(p3e," \u2014 "),A$=n(p3e,"A",{href:!0});var nJr=s(A$);Iuo=r(nJr,"DebertaV2ForMaskedLM"),nJr.forEach(t),quo=r(p3e," (DeBERTa-v2 model)"),p3e.forEach(t),Nuo=i(B),J_=n(B,"LI",{});var _3e=s(J_);Eae=n(_3e,"STRONG",{});var sJr=s(Eae);juo=r(sJr,"distilbert"),sJr.forEach(t),Duo=r(_3e," \u2014 "),y$=n(_3e,"A",{href:!0});var lJr=s(y$);Guo=r(lJr,"DistilBertForMaskedLM"),lJr.forEach(t),Ouo=r(_3e," (DistilBERT model)"),_3e.forEach(t),Vuo=i(B),Y_=n(B,"LI",{});var u3e=s(Y_);Cae=n(u3e,"STRONG",{});var iJr=s(Cae);Xuo=r(iJr,"electra"),iJr.forEach(t),zuo=r(u3e," \u2014 "),L$=n(u3e,"A",{href:!0});var dJr=s(L$);Quo=r(dJr,"ElectraForPreTraining"),dJr.forEach(t),Wuo=r(u3e," (ELECTRA model)"),u3e.forEach(t),Huo=i(B),K_=n(B,"LI",{});var b3e=s(K_);wae=n(b3e,"STRONG",{});var cJr=s(wae);Uuo=r(cJr,"flaubert"),cJr.forEach(t),Juo=r(b3e," \u2014 "),x$=n(b3e,"A",{href:!0});var fJr=s(x$);Yuo=r(fJr,"FlaubertWithLMHeadModel"),fJr.forEach(t),Kuo=r(b3e," (FlauBERT model)"),b3e.forEach(t),Zuo=i(B),Z_=n(B,"LI",{});var F3e=s(Z_);Aae=n(F3e,"STRONG",{});var mJr=s(Aae);e2o=r(mJr,"fnet"),mJr.forEach(t),o2o=r(F3e," \u2014 "),k$=n(F3e,"A",{href:!0});var gJr=s(k$);r2o=r(gJr,"FNetForPreTraining"),gJr.forEach(t),t2o=r(F3e," (FNet model)"),F3e.forEach(t),a2o=i(B),eu=n(B,"LI",{});var v3e=s(eu);yae=n(v3e,"STRONG",{});var hJr=s(yae);n2o=r(hJr,"fsmt"),hJr.forEach(t),s2o=r(v3e," \u2014 "),S$=n(v3e,"A",{href:!0});var pJr=s(S$);l2o=r(pJr,"FSMTForConditionalGeneration"),pJr.forEach(t),i2o=r(v3e," (FairSeq Machine-Translation model)"),v3e.forEach(t),d2o=i(B),ou=n(B,"LI",{});var T3e=s(ou);Lae=n(T3e,"STRONG",{});var _Jr=s(Lae);c2o=r(_Jr,"funnel"),_Jr.forEach(t),f2o=r(T3e," \u2014 "),R$=n(T3e,"A",{href:!0});var uJr=s(R$);m2o=r(uJr,"FunnelForPreTraining"),uJr.forEach(t),g2o=r(T3e," (Funnel Transformer model)"),T3e.forEach(t),h2o=i(B),ru=n(B,"LI",{});var M3e=s(ru);xae=n(M3e,"STRONG",{});var bJr=s(xae);p2o=r(bJr,"gpt2"),bJr.forEach(t),_2o=r(M3e," \u2014 "),B$=n(M3e,"A",{href:!0});var FJr=s(B$);u2o=r(FJr,"GPT2LMHeadModel"),FJr.forEach(t),b2o=r(M3e," (OpenAI GPT-2 model)"),M3e.forEach(t),F2o=i(B),tu=n(B,"LI",{});var E3e=s(tu);kae=n(E3e,"STRONG",{});var vJr=s(kae);v2o=r(vJr,"ibert"),vJr.forEach(t),T2o=r(E3e," \u2014 "),P$=n(E3e,"A",{href:!0});var TJr=s(P$);M2o=r(TJr,"IBertForMaskedLM"),TJr.forEach(t),E2o=r(E3e," (I-BERT model)"),E3e.forEach(t),C2o=i(B),au=n(B,"LI",{});var C3e=s(au);Sae=n(C3e,"STRONG",{});var MJr=s(Sae);w2o=r(MJr,"layoutlm"),MJr.forEach(t),A2o=r(C3e," \u2014 "),$$=n(C3e,"A",{href:!0});var EJr=s($$);y2o=r(EJr,"LayoutLMForMaskedLM"),EJr.forEach(t),L2o=r(C3e," (LayoutLM model)"),C3e.forEach(t),x2o=i(B),nu=n(B,"LI",{});var w3e=s(nu);Rae=n(w3e,"STRONG",{});var CJr=s(Rae);k2o=r(CJr,"longformer"),CJr.forEach(t),S2o=r(w3e," \u2014 "),I$=n(w3e,"A",{href:!0});var wJr=s(I$);R2o=r(wJr,"LongformerForMaskedLM"),wJr.forEach(t),B2o=r(w3e," (Longformer model)"),w3e.forEach(t),P2o=i(B),su=n(B,"LI",{});var A3e=s(su);Bae=n(A3e,"STRONG",{});var AJr=s(Bae);$2o=r(AJr,"longt5"),AJr.forEach(t),I2o=r(A3e," \u2014 "),q$=n(A3e,"A",{href:!0});var yJr=s(q$);q2o=r(yJr,"LongT5ForConditionalGeneration"),yJr.forEach(t),N2o=r(A3e," (LongT5 model)"),A3e.forEach(t),j2o=i(B),lu=n(B,"LI",{});var y3e=s(lu);Pae=n(y3e,"STRONG",{});var LJr=s(Pae);D2o=r(LJr,"lxmert"),LJr.forEach(t),G2o=r(y3e," \u2014 "),N$=n(y3e,"A",{href:!0});var xJr=s(N$);O2o=r(xJr,"LxmertForPreTraining"),xJr.forEach(t),V2o=r(y3e," (LXMERT model)"),y3e.forEach(t),X2o=i(B),iu=n(B,"LI",{});var L3e=s(iu);$ae=n(L3e,"STRONG",{});var kJr=s($ae);z2o=r(kJr,"megatron-bert"),kJr.forEach(t),Q2o=r(L3e," \u2014 "),j$=n(L3e,"A",{href:!0});var SJr=s(j$);W2o=r(SJr,"MegatronBertForPreTraining"),SJr.forEach(t),H2o=r(L3e," (MegatronBert model)"),L3e.forEach(t),U2o=i(B),du=n(B,"LI",{});var x3e=s(du);Iae=n(x3e,"STRONG",{});var RJr=s(Iae);J2o=r(RJr,"mobilebert"),RJr.forEach(t),Y2o=r(x3e," \u2014 "),D$=n(x3e,"A",{href:!0});var BJr=s(D$);K2o=r(BJr,"MobileBertForPreTraining"),BJr.forEach(t),Z2o=r(x3e," (MobileBERT model)"),x3e.forEach(t),e1o=i(B),cu=n(B,"LI",{});var k3e=s(cu);qae=n(k3e,"STRONG",{});var PJr=s(qae);o1o=r(PJr,"mpnet"),PJr.forEach(t),r1o=r(k3e," \u2014 "),G$=n(k3e,"A",{href:!0});var $Jr=s(G$);t1o=r($Jr,"MPNetForMaskedLM"),$Jr.forEach(t),a1o=r(k3e," (MPNet model)"),k3e.forEach(t),n1o=i(B),fu=n(B,"LI",{});var S3e=s(fu);Nae=n(S3e,"STRONG",{});var IJr=s(Nae);s1o=r(IJr,"openai-gpt"),IJr.forEach(t),l1o=r(S3e," \u2014 "),O$=n(S3e,"A",{href:!0});var qJr=s(O$);i1o=r(qJr,"OpenAIGPTLMHeadModel"),qJr.forEach(t),d1o=r(S3e," (OpenAI GPT model)"),S3e.forEach(t),c1o=i(B),mu=n(B,"LI",{});var R3e=s(mu);jae=n(R3e,"STRONG",{});var NJr=s(jae);f1o=r(NJr,"retribert"),NJr.forEach(t),m1o=r(R3e," \u2014 "),V$=n(R3e,"A",{href:!0});var jJr=s(V$);g1o=r(jJr,"RetriBertModel"),jJr.forEach(t),h1o=r(R3e," (RetriBERT model)"),R3e.forEach(t),p1o=i(B),gu=n(B,"LI",{});var B3e=s(gu);Dae=n(B3e,"STRONG",{});var DJr=s(Dae);_1o=r(DJr,"roberta"),DJr.forEach(t),u1o=r(B3e," \u2014 "),X$=n(B3e,"A",{href:!0});var GJr=s(X$);b1o=r(GJr,"RobertaForMaskedLM"),GJr.forEach(t),F1o=r(B3e," (RoBERTa model)"),B3e.forEach(t),v1o=i(B),hu=n(B,"LI",{});var P3e=s(hu);Gae=n(P3e,"STRONG",{});var OJr=s(Gae);T1o=r(OJr,"squeezebert"),OJr.forEach(t),M1o=r(P3e," \u2014 "),z$=n(P3e,"A",{href:!0});var VJr=s(z$);E1o=r(VJr,"SqueezeBertForMaskedLM"),VJr.forEach(t),C1o=r(P3e," (SqueezeBERT model)"),P3e.forEach(t),w1o=i(B),pu=n(B,"LI",{});var $3e=s(pu);Oae=n($3e,"STRONG",{});var XJr=s(Oae);A1o=r(XJr,"t5"),XJr.forEach(t),y1o=r($3e," \u2014 "),Q$=n($3e,"A",{href:!0});var zJr=s(Q$);L1o=r(zJr,"T5ForConditionalGeneration"),zJr.forEach(t),x1o=r($3e," (T5 model)"),$3e.forEach(t),k1o=i(B),_u=n(B,"LI",{});var I3e=s(_u);Vae=n(I3e,"STRONG",{});var QJr=s(Vae);S1o=r(QJr,"tapas"),QJr.forEach(t),R1o=r(I3e," \u2014 "),W$=n(I3e,"A",{href:!0});var WJr=s(W$);B1o=r(WJr,"TapasForMaskedLM"),WJr.forEach(t),P1o=r(I3e," (TAPAS model)"),I3e.forEach(t),$1o=i(B),uu=n(B,"LI",{});var q3e=s(uu);Xae=n(q3e,"STRONG",{});var HJr=s(Xae);I1o=r(HJr,"transfo-xl"),HJr.forEach(t),q1o=r(q3e," \u2014 "),H$=n(q3e,"A",{href:!0});var UJr=s(H$);N1o=r(UJr,"TransfoXLLMHeadModel"),UJr.forEach(t),j1o=r(q3e," (Transformer-XL model)"),q3e.forEach(t),D1o=i(B),bu=n(B,"LI",{});var N3e=s(bu);zae=n(N3e,"STRONG",{});var JJr=s(zae);G1o=r(JJr,"unispeech"),JJr.forEach(t),O1o=r(N3e," \u2014 "),U$=n(N3e,"A",{href:!0});var YJr=s(U$);V1o=r(YJr,"UniSpeechForPreTraining"),YJr.forEach(t),X1o=r(N3e," (UniSpeech model)"),N3e.forEach(t),z1o=i(B),Fu=n(B,"LI",{});var j3e=s(Fu);Qae=n(j3e,"STRONG",{});var KJr=s(Qae);Q1o=r(KJr,"unispeech-sat"),KJr.forEach(t),W1o=r(j3e," \u2014 "),J$=n(j3e,"A",{href:!0});var ZJr=s(J$);H1o=r(ZJr,"UniSpeechSatForPreTraining"),ZJr.forEach(t),U1o=r(j3e," (UniSpeechSat model)"),j3e.forEach(t),J1o=i(B),vu=n(B,"LI",{});var D3e=s(vu);Wae=n(D3e,"STRONG",{});var eYr=s(Wae);Y1o=r(eYr,"visual_bert"),eYr.forEach(t),K1o=r(D3e," \u2014 "),Y$=n(D3e,"A",{href:!0});var oYr=s(Y$);Z1o=r(oYr,"VisualBertForPreTraining"),oYr.forEach(t),ebo=r(D3e," (VisualBert model)"),D3e.forEach(t),obo=i(B),Tu=n(B,"LI",{});var G3e=s(Tu);Hae=n(G3e,"STRONG",{});var rYr=s(Hae);rbo=r(rYr,"vit_mae"),rYr.forEach(t),tbo=r(G3e," \u2014 "),K$=n(G3e,"A",{href:!0});var tYr=s(K$);abo=r(tYr,"ViTMAEForPreTraining"),tYr.forEach(t),nbo=r(G3e," (ViTMAE model)"),G3e.forEach(t),sbo=i(B),Mu=n(B,"LI",{});var O3e=s(Mu);Uae=n(O3e,"STRONG",{});var aYr=s(Uae);lbo=r(aYr,"wav2vec2"),aYr.forEach(t),ibo=r(O3e," \u2014 "),Z$=n(O3e,"A",{href:!0});var nYr=s(Z$);dbo=r(nYr,"Wav2Vec2ForPreTraining"),nYr.forEach(t),cbo=r(O3e," (Wav2Vec2 model)"),O3e.forEach(t),fbo=i(B),Eu=n(B,"LI",{});var V3e=s(Eu);Jae=n(V3e,"STRONG",{});var sYr=s(Jae);mbo=r(sYr,"xlm"),sYr.forEach(t),gbo=r(V3e," \u2014 "),eI=n(V3e,"A",{href:!0});var lYr=s(eI);hbo=r(lYr,"XLMWithLMHeadModel"),lYr.forEach(t),pbo=r(V3e," (XLM model)"),V3e.forEach(t),_bo=i(B),Cu=n(B,"LI",{});var X3e=s(Cu);Yae=n(X3e,"STRONG",{});var iYr=s(Yae);ubo=r(iYr,"xlm-roberta"),iYr.forEach(t),bbo=r(X3e," \u2014 "),oI=n(X3e,"A",{href:!0});var dYr=s(oI);Fbo=r(dYr,"XLMRobertaForMaskedLM"),dYr.forEach(t),vbo=r(X3e," (XLM-RoBERTa model)"),X3e.forEach(t),Tbo=i(B),wu=n(B,"LI",{});var z3e=s(wu);Kae=n(z3e,"STRONG",{});var cYr=s(Kae);Mbo=r(cYr,"xlm-roberta-xl"),cYr.forEach(t),Ebo=r(z3e," \u2014 "),rI=n(z3e,"A",{href:!0});var fYr=s(rI);Cbo=r(fYr,"XLMRobertaXLForMaskedLM"),fYr.forEach(t),wbo=r(z3e," (XLM-RoBERTa-XL model)"),z3e.forEach(t),Abo=i(B),Au=n(B,"LI",{});var Q3e=s(Au);Zae=n(Q3e,"STRONG",{});var mYr=s(Zae);ybo=r(mYr,"xlnet"),mYr.forEach(t),Lbo=r(Q3e," \u2014 "),tI=n(Q3e,"A",{href:!0});var gYr=s(tI);xbo=r(gYr,"XLNetLMHeadModel"),gYr.forEach(t),kbo=r(Q3e," (XLNet model)"),Q3e.forEach(t),B.forEach(t),Sbo=i(Gt),yu=n(Gt,"P",{});var W3e=s(yu);Rbo=r(W3e,"The model is set in evaluation mode by default using "),ene=n(W3e,"CODE",{});var hYr=s(ene);Bbo=r(hYr,"model.eval()"),hYr.forEach(t),Pbo=r(W3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),one=n(W3e,"CODE",{});var pYr=s(one);$bo=r(pYr,"model.train()"),pYr.forEach(t),W3e.forEach(t),Ibo=i(Gt),rne=n(Gt,"P",{});var _Yr=s(rne);qbo=r(_Yr,"Examples:"),_Yr.forEach(t),Nbo=i(Gt),m(x3.$$.fragment,Gt),Gt.forEach(t),Js.forEach(t),yBe=i(c),ad=n(c,"H2",{class:!0});var I$e=s(ad);Lu=n(I$e,"A",{id:!0,class:!0,href:!0});var uYr=s(Lu);tne=n(uYr,"SPAN",{});var bYr=s(tne);m(k3.$$.fragment,bYr),bYr.forEach(t),uYr.forEach(t),jbo=i(I$e),ane=n(I$e,"SPAN",{});var FYr=s(ane);Dbo=r(FYr,"AutoModelForCausalLM"),FYr.forEach(t),I$e.forEach(t),LBe=i(c),Ko=n(c,"DIV",{class:!0});var Ks=s(Ko);m(S3.$$.fragment,Ks),Gbo=i(Ks),nd=n(Ks,"P",{});var OU=s(nd);Obo=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aI=n(OU,"A",{href:!0});var vYr=s(aI);Vbo=r(vYr,"from_pretrained()"),vYr.forEach(t),Xbo=r(OU," class method or the "),nI=n(OU,"A",{href:!0});var TYr=s(nI);zbo=r(TYr,"from_config()"),TYr.forEach(t),Qbo=r(OU,` class
method.`),OU.forEach(t),Wbo=i(Ks),R3=n(Ks,"P",{});var q$e=s(R3);Hbo=r(q$e,"This class cannot be instantiated directly using "),nne=n(q$e,"CODE",{});var MYr=s(nne);Ubo=r(MYr,"__init__()"),MYr.forEach(t),Jbo=r(q$e," (throws an error)."),q$e.forEach(t),Ybo=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(B3.$$.fragment,Zs),Kbo=i(Zs),sne=n(Zs,"P",{});var EYr=s(sne);Zbo=r(EYr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),EYr.forEach(t),e6o=i(Zs),sd=n(Zs,"P",{});var VU=s(sd);o6o=r(VU,`Note:
Loading a model from its configuration file does `),lne=n(VU,"STRONG",{});var CYr=s(lne);r6o=r(CYr,"not"),CYr.forEach(t),t6o=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),sI=n(VU,"A",{href:!0});var wYr=s(sI);a6o=r(wYr,"from_pretrained()"),wYr.forEach(t),n6o=r(VU," to load the model weights."),VU.forEach(t),s6o=i(Zs),ine=n(Zs,"P",{});var AYr=s(ine);l6o=r(AYr,"Examples:"),AYr.forEach(t),i6o=i(Zs),m(P3.$$.fragment,Zs),Zs.forEach(t),d6o=i(Ks),De=n(Ks,"DIV",{class:!0});var Ot=s(De);m($3.$$.fragment,Ot),c6o=i(Ot),dne=n(Ot,"P",{});var yYr=s(dne);f6o=r(yYr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),yYr.forEach(t),m6o=i(Ot),Qa=n(Ot,"P",{});var GE=s(Qa);g6o=r(GE,"The model class to instantiate is selected based on the "),cne=n(GE,"CODE",{});var LYr=s(cne);h6o=r(LYr,"model_type"),LYr.forEach(t),p6o=r(GE,` property of the config object (either
passed as an argument or loaded from `),fne=n(GE,"CODE",{});var xYr=s(fne);_6o=r(xYr,"pretrained_model_name_or_path"),xYr.forEach(t),u6o=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mne=n(GE,"CODE",{});var kYr=s(mne);b6o=r(kYr,"pretrained_model_name_or_path"),kYr.forEach(t),F6o=r(GE,":"),GE.forEach(t),v6o=i(Ot),$=n(Ot,"UL",{});var q=s($);xu=n(q,"LI",{});var H3e=s(xu);gne=n(H3e,"STRONG",{});var SYr=s(gne);T6o=r(SYr,"bart"),SYr.forEach(t),M6o=r(H3e," \u2014 "),lI=n(H3e,"A",{href:!0});var RYr=s(lI);E6o=r(RYr,"BartForCausalLM"),RYr.forEach(t),C6o=r(H3e," (BART model)"),H3e.forEach(t),w6o=i(q),ku=n(q,"LI",{});var U3e=s(ku);hne=n(U3e,"STRONG",{});var BYr=s(hne);A6o=r(BYr,"bert"),BYr.forEach(t),y6o=r(U3e," \u2014 "),iI=n(U3e,"A",{href:!0});var PYr=s(iI);L6o=r(PYr,"BertLMHeadModel"),PYr.forEach(t),x6o=r(U3e," (BERT model)"),U3e.forEach(t),k6o=i(q),Su=n(q,"LI",{});var J3e=s(Su);pne=n(J3e,"STRONG",{});var $Yr=s(pne);S6o=r($Yr,"bert-generation"),$Yr.forEach(t),R6o=r(J3e," \u2014 "),dI=n(J3e,"A",{href:!0});var IYr=s(dI);B6o=r(IYr,"BertGenerationDecoder"),IYr.forEach(t),P6o=r(J3e," (Bert Generation model)"),J3e.forEach(t),$6o=i(q),Ru=n(q,"LI",{});var Y3e=s(Ru);_ne=n(Y3e,"STRONG",{});var qYr=s(_ne);I6o=r(qYr,"big_bird"),qYr.forEach(t),q6o=r(Y3e," \u2014 "),cI=n(Y3e,"A",{href:!0});var NYr=s(cI);N6o=r(NYr,"BigBirdForCausalLM"),NYr.forEach(t),j6o=r(Y3e," (BigBird model)"),Y3e.forEach(t),D6o=i(q),Bu=n(q,"LI",{});var K3e=s(Bu);une=n(K3e,"STRONG",{});var jYr=s(une);G6o=r(jYr,"bigbird_pegasus"),jYr.forEach(t),O6o=r(K3e," \u2014 "),fI=n(K3e,"A",{href:!0});var DYr=s(fI);V6o=r(DYr,"BigBirdPegasusForCausalLM"),DYr.forEach(t),X6o=r(K3e," (BigBirdPegasus model)"),K3e.forEach(t),z6o=i(q),Pu=n(q,"LI",{});var Z3e=s(Pu);bne=n(Z3e,"STRONG",{});var GYr=s(bne);Q6o=r(GYr,"blenderbot"),GYr.forEach(t),W6o=r(Z3e," \u2014 "),mI=n(Z3e,"A",{href:!0});var OYr=s(mI);H6o=r(OYr,"BlenderbotForCausalLM"),OYr.forEach(t),U6o=r(Z3e," (Blenderbot model)"),Z3e.forEach(t),J6o=i(q),$u=n(q,"LI",{});var eCe=s($u);Fne=n(eCe,"STRONG",{});var VYr=s(Fne);Y6o=r(VYr,"blenderbot-small"),VYr.forEach(t),K6o=r(eCe," \u2014 "),gI=n(eCe,"A",{href:!0});var XYr=s(gI);Z6o=r(XYr,"BlenderbotSmallForCausalLM"),XYr.forEach(t),eFo=r(eCe," (BlenderbotSmall model)"),eCe.forEach(t),oFo=i(q),Iu=n(q,"LI",{});var oCe=s(Iu);vne=n(oCe,"STRONG",{});var zYr=s(vne);rFo=r(zYr,"camembert"),zYr.forEach(t),tFo=r(oCe," \u2014 "),hI=n(oCe,"A",{href:!0});var QYr=s(hI);aFo=r(QYr,"CamembertForCausalLM"),QYr.forEach(t),nFo=r(oCe," (CamemBERT model)"),oCe.forEach(t),sFo=i(q),qu=n(q,"LI",{});var rCe=s(qu);Tne=n(rCe,"STRONG",{});var WYr=s(Tne);lFo=r(WYr,"ctrl"),WYr.forEach(t),iFo=r(rCe," \u2014 "),pI=n(rCe,"A",{href:!0});var HYr=s(pI);dFo=r(HYr,"CTRLLMHeadModel"),HYr.forEach(t),cFo=r(rCe," (CTRL model)"),rCe.forEach(t),fFo=i(q),Nu=n(q,"LI",{});var tCe=s(Nu);Mne=n(tCe,"STRONG",{});var UYr=s(Mne);mFo=r(UYr,"data2vec-text"),UYr.forEach(t),gFo=r(tCe," \u2014 "),_I=n(tCe,"A",{href:!0});var JYr=s(_I);hFo=r(JYr,"Data2VecTextForCausalLM"),JYr.forEach(t),pFo=r(tCe," (Data2VecText model)"),tCe.forEach(t),_Fo=i(q),ju=n(q,"LI",{});var aCe=s(ju);Ene=n(aCe,"STRONG",{});var YYr=s(Ene);uFo=r(YYr,"electra"),YYr.forEach(t),bFo=r(aCe," \u2014 "),uI=n(aCe,"A",{href:!0});var KYr=s(uI);FFo=r(KYr,"ElectraForCausalLM"),KYr.forEach(t),vFo=r(aCe," (ELECTRA model)"),aCe.forEach(t),TFo=i(q),Du=n(q,"LI",{});var nCe=s(Du);Cne=n(nCe,"STRONG",{});var ZYr=s(Cne);MFo=r(ZYr,"gpt2"),ZYr.forEach(t),EFo=r(nCe," \u2014 "),bI=n(nCe,"A",{href:!0});var eKr=s(bI);CFo=r(eKr,"GPT2LMHeadModel"),eKr.forEach(t),wFo=r(nCe," (OpenAI GPT-2 model)"),nCe.forEach(t),AFo=i(q),Gu=n(q,"LI",{});var sCe=s(Gu);wne=n(sCe,"STRONG",{});var oKr=s(wne);yFo=r(oKr,"gpt_neo"),oKr.forEach(t),LFo=r(sCe," \u2014 "),FI=n(sCe,"A",{href:!0});var rKr=s(FI);xFo=r(rKr,"GPTNeoForCausalLM"),rKr.forEach(t),kFo=r(sCe," (GPT Neo model)"),sCe.forEach(t),SFo=i(q),Ou=n(q,"LI",{});var lCe=s(Ou);Ane=n(lCe,"STRONG",{});var tKr=s(Ane);RFo=r(tKr,"gptj"),tKr.forEach(t),BFo=r(lCe," \u2014 "),vI=n(lCe,"A",{href:!0});var aKr=s(vI);PFo=r(aKr,"GPTJForCausalLM"),aKr.forEach(t),$Fo=r(lCe," (GPT-J model)"),lCe.forEach(t),IFo=i(q),Vu=n(q,"LI",{});var iCe=s(Vu);yne=n(iCe,"STRONG",{});var nKr=s(yne);qFo=r(nKr,"marian"),nKr.forEach(t),NFo=r(iCe," \u2014 "),TI=n(iCe,"A",{href:!0});var sKr=s(TI);jFo=r(sKr,"MarianForCausalLM"),sKr.forEach(t),DFo=r(iCe," (Marian model)"),iCe.forEach(t),GFo=i(q),Xu=n(q,"LI",{});var dCe=s(Xu);Lne=n(dCe,"STRONG",{});var lKr=s(Lne);OFo=r(lKr,"mbart"),lKr.forEach(t),VFo=r(dCe," \u2014 "),MI=n(dCe,"A",{href:!0});var iKr=s(MI);XFo=r(iKr,"MBartForCausalLM"),iKr.forEach(t),zFo=r(dCe," (mBART model)"),dCe.forEach(t),QFo=i(q),zu=n(q,"LI",{});var cCe=s(zu);xne=n(cCe,"STRONG",{});var dKr=s(xne);WFo=r(dKr,"megatron-bert"),dKr.forEach(t),HFo=r(cCe," \u2014 "),EI=n(cCe,"A",{href:!0});var cKr=s(EI);UFo=r(cKr,"MegatronBertForCausalLM"),cKr.forEach(t),JFo=r(cCe," (MegatronBert model)"),cCe.forEach(t),YFo=i(q),Qu=n(q,"LI",{});var fCe=s(Qu);kne=n(fCe,"STRONG",{});var fKr=s(kne);KFo=r(fKr,"openai-gpt"),fKr.forEach(t),ZFo=r(fCe," \u2014 "),CI=n(fCe,"A",{href:!0});var mKr=s(CI);evo=r(mKr,"OpenAIGPTLMHeadModel"),mKr.forEach(t),ovo=r(fCe," (OpenAI GPT model)"),fCe.forEach(t),rvo=i(q),Wu=n(q,"LI",{});var mCe=s(Wu);Sne=n(mCe,"STRONG",{});var gKr=s(Sne);tvo=r(gKr,"pegasus"),gKr.forEach(t),avo=r(mCe," \u2014 "),wI=n(mCe,"A",{href:!0});var hKr=s(wI);nvo=r(hKr,"PegasusForCausalLM"),hKr.forEach(t),svo=r(mCe," (Pegasus model)"),mCe.forEach(t),lvo=i(q),Hu=n(q,"LI",{});var gCe=s(Hu);Rne=n(gCe,"STRONG",{});var pKr=s(Rne);ivo=r(pKr,"plbart"),pKr.forEach(t),dvo=r(gCe," \u2014 "),AI=n(gCe,"A",{href:!0});var _Kr=s(AI);cvo=r(_Kr,"PLBartForCausalLM"),_Kr.forEach(t),fvo=r(gCe," (PLBart model)"),gCe.forEach(t),mvo=i(q),Uu=n(q,"LI",{});var hCe=s(Uu);Bne=n(hCe,"STRONG",{});var uKr=s(Bne);gvo=r(uKr,"prophetnet"),uKr.forEach(t),hvo=r(hCe," \u2014 "),yI=n(hCe,"A",{href:!0});var bKr=s(yI);pvo=r(bKr,"ProphetNetForCausalLM"),bKr.forEach(t),_vo=r(hCe," (ProphetNet model)"),hCe.forEach(t),uvo=i(q),Ju=n(q,"LI",{});var pCe=s(Ju);Pne=n(pCe,"STRONG",{});var FKr=s(Pne);bvo=r(FKr,"qdqbert"),FKr.forEach(t),Fvo=r(pCe," \u2014 "),LI=n(pCe,"A",{href:!0});var vKr=s(LI);vvo=r(vKr,"QDQBertLMHeadModel"),vKr.forEach(t),Tvo=r(pCe," (QDQBert model)"),pCe.forEach(t),Mvo=i(q),Yu=n(q,"LI",{});var _Ce=s(Yu);$ne=n(_Ce,"STRONG",{});var TKr=s($ne);Evo=r(TKr,"reformer"),TKr.forEach(t),Cvo=r(_Ce," \u2014 "),xI=n(_Ce,"A",{href:!0});var MKr=s(xI);wvo=r(MKr,"ReformerModelWithLMHead"),MKr.forEach(t),Avo=r(_Ce," (Reformer model)"),_Ce.forEach(t),yvo=i(q),Ku=n(q,"LI",{});var uCe=s(Ku);Ine=n(uCe,"STRONG",{});var EKr=s(Ine);Lvo=r(EKr,"rembert"),EKr.forEach(t),xvo=r(uCe," \u2014 "),kI=n(uCe,"A",{href:!0});var CKr=s(kI);kvo=r(CKr,"RemBertForCausalLM"),CKr.forEach(t),Svo=r(uCe," (RemBERT model)"),uCe.forEach(t),Rvo=i(q),Zu=n(q,"LI",{});var bCe=s(Zu);qne=n(bCe,"STRONG",{});var wKr=s(qne);Bvo=r(wKr,"roberta"),wKr.forEach(t),Pvo=r(bCe," \u2014 "),SI=n(bCe,"A",{href:!0});var AKr=s(SI);$vo=r(AKr,"RobertaForCausalLM"),AKr.forEach(t),Ivo=r(bCe," (RoBERTa model)"),bCe.forEach(t),qvo=i(q),e2=n(q,"LI",{});var FCe=s(e2);Nne=n(FCe,"STRONG",{});var yKr=s(Nne);Nvo=r(yKr,"roformer"),yKr.forEach(t),jvo=r(FCe," \u2014 "),RI=n(FCe,"A",{href:!0});var LKr=s(RI);Dvo=r(LKr,"RoFormerForCausalLM"),LKr.forEach(t),Gvo=r(FCe," (RoFormer model)"),FCe.forEach(t),Ovo=i(q),o2=n(q,"LI",{});var vCe=s(o2);jne=n(vCe,"STRONG",{});var xKr=s(jne);Vvo=r(xKr,"speech_to_text_2"),xKr.forEach(t),Xvo=r(vCe," \u2014 "),BI=n(vCe,"A",{href:!0});var kKr=s(BI);zvo=r(kKr,"Speech2Text2ForCausalLM"),kKr.forEach(t),Qvo=r(vCe," (Speech2Text2 model)"),vCe.forEach(t),Wvo=i(q),r2=n(q,"LI",{});var TCe=s(r2);Dne=n(TCe,"STRONG",{});var SKr=s(Dne);Hvo=r(SKr,"transfo-xl"),SKr.forEach(t),Uvo=r(TCe," \u2014 "),PI=n(TCe,"A",{href:!0});var RKr=s(PI);Jvo=r(RKr,"TransfoXLLMHeadModel"),RKr.forEach(t),Yvo=r(TCe," (Transformer-XL model)"),TCe.forEach(t),Kvo=i(q),t2=n(q,"LI",{});var MCe=s(t2);Gne=n(MCe,"STRONG",{});var BKr=s(Gne);Zvo=r(BKr,"trocr"),BKr.forEach(t),eTo=r(MCe," \u2014 "),$I=n(MCe,"A",{href:!0});var PKr=s($I);oTo=r(PKr,"TrOCRForCausalLM"),PKr.forEach(t),rTo=r(MCe," (TrOCR model)"),MCe.forEach(t),tTo=i(q),a2=n(q,"LI",{});var ECe=s(a2);One=n(ECe,"STRONG",{});var $Kr=s(One);aTo=r($Kr,"xglm"),$Kr.forEach(t),nTo=r(ECe," \u2014 "),II=n(ECe,"A",{href:!0});var IKr=s(II);sTo=r(IKr,"XGLMForCausalLM"),IKr.forEach(t),lTo=r(ECe," (XGLM model)"),ECe.forEach(t),iTo=i(q),n2=n(q,"LI",{});var CCe=s(n2);Vne=n(CCe,"STRONG",{});var qKr=s(Vne);dTo=r(qKr,"xlm"),qKr.forEach(t),cTo=r(CCe," \u2014 "),qI=n(CCe,"A",{href:!0});var NKr=s(qI);fTo=r(NKr,"XLMWithLMHeadModel"),NKr.forEach(t),mTo=r(CCe," (XLM model)"),CCe.forEach(t),gTo=i(q),s2=n(q,"LI",{});var wCe=s(s2);Xne=n(wCe,"STRONG",{});var jKr=s(Xne);hTo=r(jKr,"xlm-prophetnet"),jKr.forEach(t),pTo=r(wCe," \u2014 "),NI=n(wCe,"A",{href:!0});var DKr=s(NI);_To=r(DKr,"XLMProphetNetForCausalLM"),DKr.forEach(t),uTo=r(wCe," (XLMProphetNet model)"),wCe.forEach(t),bTo=i(q),l2=n(q,"LI",{});var ACe=s(l2);zne=n(ACe,"STRONG",{});var GKr=s(zne);FTo=r(GKr,"xlm-roberta"),GKr.forEach(t),vTo=r(ACe," \u2014 "),jI=n(ACe,"A",{href:!0});var OKr=s(jI);TTo=r(OKr,"XLMRobertaForCausalLM"),OKr.forEach(t),MTo=r(ACe," (XLM-RoBERTa model)"),ACe.forEach(t),ETo=i(q),i2=n(q,"LI",{});var yCe=s(i2);Qne=n(yCe,"STRONG",{});var VKr=s(Qne);CTo=r(VKr,"xlm-roberta-xl"),VKr.forEach(t),wTo=r(yCe," \u2014 "),DI=n(yCe,"A",{href:!0});var XKr=s(DI);ATo=r(XKr,"XLMRobertaXLForCausalLM"),XKr.forEach(t),yTo=r(yCe," (XLM-RoBERTa-XL model)"),yCe.forEach(t),LTo=i(q),d2=n(q,"LI",{});var LCe=s(d2);Wne=n(LCe,"STRONG",{});var zKr=s(Wne);xTo=r(zKr,"xlnet"),zKr.forEach(t),kTo=r(LCe," \u2014 "),GI=n(LCe,"A",{href:!0});var QKr=s(GI);STo=r(QKr,"XLNetLMHeadModel"),QKr.forEach(t),RTo=r(LCe," (XLNet model)"),LCe.forEach(t),q.forEach(t),BTo=i(Ot),c2=n(Ot,"P",{});var xCe=s(c2);PTo=r(xCe,"The model is set in evaluation mode by default using "),Hne=n(xCe,"CODE",{});var WKr=s(Hne);$To=r(WKr,"model.eval()"),WKr.forEach(t),ITo=r(xCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Une=n(xCe,"CODE",{});var HKr=s(Une);qTo=r(HKr,"model.train()"),HKr.forEach(t),xCe.forEach(t),NTo=i(Ot),Jne=n(Ot,"P",{});var UKr=s(Jne);jTo=r(UKr,"Examples:"),UKr.forEach(t),DTo=i(Ot),m(I3.$$.fragment,Ot),Ot.forEach(t),Ks.forEach(t),xBe=i(c),ld=n(c,"H2",{class:!0});var N$e=s(ld);f2=n(N$e,"A",{id:!0,class:!0,href:!0});var JKr=s(f2);Yne=n(JKr,"SPAN",{});var YKr=s(Yne);m(q3.$$.fragment,YKr),YKr.forEach(t),JKr.forEach(t),GTo=i(N$e),Kne=n(N$e,"SPAN",{});var KKr=s(Kne);OTo=r(KKr,"AutoModelForMaskedLM"),KKr.forEach(t),N$e.forEach(t),kBe=i(c),Zo=n(c,"DIV",{class:!0});var el=s(Zo);m(N3.$$.fragment,el),VTo=i(el),id=n(el,"P",{});var XU=s(id);XTo=r(XU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OI=n(XU,"A",{href:!0});var ZKr=s(OI);zTo=r(ZKr,"from_pretrained()"),ZKr.forEach(t),QTo=r(XU," class method or the "),VI=n(XU,"A",{href:!0});var eZr=s(VI);WTo=r(eZr,"from_config()"),eZr.forEach(t),HTo=r(XU,` class
method.`),XU.forEach(t),UTo=i(el),j3=n(el,"P",{});var j$e=s(j3);JTo=r(j$e,"This class cannot be instantiated directly using "),Zne=n(j$e,"CODE",{});var oZr=s(Zne);YTo=r(oZr,"__init__()"),oZr.forEach(t),KTo=r(j$e," (throws an error)."),j$e.forEach(t),ZTo=i(el),Wr=n(el,"DIV",{class:!0});var ol=s(Wr);m(D3.$$.fragment,ol),e7o=i(ol),ese=n(ol,"P",{});var rZr=s(ese);o7o=r(rZr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rZr.forEach(t),r7o=i(ol),dd=n(ol,"P",{});var zU=s(dd);t7o=r(zU,`Note:
Loading a model from its configuration file does `),ose=n(zU,"STRONG",{});var tZr=s(ose);a7o=r(tZr,"not"),tZr.forEach(t),n7o=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),XI=n(zU,"A",{href:!0});var aZr=s(XI);s7o=r(aZr,"from_pretrained()"),aZr.forEach(t),l7o=r(zU," to load the model weights."),zU.forEach(t),i7o=i(ol),rse=n(ol,"P",{});var nZr=s(rse);d7o=r(nZr,"Examples:"),nZr.forEach(t),c7o=i(ol),m(G3.$$.fragment,ol),ol.forEach(t),f7o=i(el),Ge=n(el,"DIV",{class:!0});var Vt=s(Ge);m(O3.$$.fragment,Vt),m7o=i(Vt),tse=n(Vt,"P",{});var sZr=s(tse);g7o=r(sZr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),sZr.forEach(t),h7o=i(Vt),Wa=n(Vt,"P",{});var OE=s(Wa);p7o=r(OE,"The model class to instantiate is selected based on the "),ase=n(OE,"CODE",{});var lZr=s(ase);_7o=r(lZr,"model_type"),lZr.forEach(t),u7o=r(OE,` property of the config object (either
passed as an argument or loaded from `),nse=n(OE,"CODE",{});var iZr=s(nse);b7o=r(iZr,"pretrained_model_name_or_path"),iZr.forEach(t),F7o=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sse=n(OE,"CODE",{});var dZr=s(sse);v7o=r(dZr,"pretrained_model_name_or_path"),dZr.forEach(t),T7o=r(OE,":"),OE.forEach(t),M7o=i(Vt),I=n(Vt,"UL",{});var N=s(I);m2=n(N,"LI",{});var kCe=s(m2);lse=n(kCe,"STRONG",{});var cZr=s(lse);E7o=r(cZr,"albert"),cZr.forEach(t),C7o=r(kCe," \u2014 "),zI=n(kCe,"A",{href:!0});var fZr=s(zI);w7o=r(fZr,"AlbertForMaskedLM"),fZr.forEach(t),A7o=r(kCe," (ALBERT model)"),kCe.forEach(t),y7o=i(N),g2=n(N,"LI",{});var SCe=s(g2);ise=n(SCe,"STRONG",{});var mZr=s(ise);L7o=r(mZr,"bart"),mZr.forEach(t),x7o=r(SCe," \u2014 "),QI=n(SCe,"A",{href:!0});var gZr=s(QI);k7o=r(gZr,"BartForConditionalGeneration"),gZr.forEach(t),S7o=r(SCe," (BART model)"),SCe.forEach(t),R7o=i(N),h2=n(N,"LI",{});var RCe=s(h2);dse=n(RCe,"STRONG",{});var hZr=s(dse);B7o=r(hZr,"bert"),hZr.forEach(t),P7o=r(RCe," \u2014 "),WI=n(RCe,"A",{href:!0});var pZr=s(WI);$7o=r(pZr,"BertForMaskedLM"),pZr.forEach(t),I7o=r(RCe," (BERT model)"),RCe.forEach(t),q7o=i(N),p2=n(N,"LI",{});var BCe=s(p2);cse=n(BCe,"STRONG",{});var _Zr=s(cse);N7o=r(_Zr,"big_bird"),_Zr.forEach(t),j7o=r(BCe," \u2014 "),HI=n(BCe,"A",{href:!0});var uZr=s(HI);D7o=r(uZr,"BigBirdForMaskedLM"),uZr.forEach(t),G7o=r(BCe," (BigBird model)"),BCe.forEach(t),O7o=i(N),_2=n(N,"LI",{});var PCe=s(_2);fse=n(PCe,"STRONG",{});var bZr=s(fse);V7o=r(bZr,"camembert"),bZr.forEach(t),X7o=r(PCe," \u2014 "),UI=n(PCe,"A",{href:!0});var FZr=s(UI);z7o=r(FZr,"CamembertForMaskedLM"),FZr.forEach(t),Q7o=r(PCe," (CamemBERT model)"),PCe.forEach(t),W7o=i(N),u2=n(N,"LI",{});var $Ce=s(u2);mse=n($Ce,"STRONG",{});var vZr=s(mse);H7o=r(vZr,"convbert"),vZr.forEach(t),U7o=r($Ce," \u2014 "),JI=n($Ce,"A",{href:!0});var TZr=s(JI);J7o=r(TZr,"ConvBertForMaskedLM"),TZr.forEach(t),Y7o=r($Ce," (ConvBERT model)"),$Ce.forEach(t),K7o=i(N),b2=n(N,"LI",{});var ICe=s(b2);gse=n(ICe,"STRONG",{});var MZr=s(gse);Z7o=r(MZr,"data2vec-text"),MZr.forEach(t),e9o=r(ICe," \u2014 "),YI=n(ICe,"A",{href:!0});var EZr=s(YI);o9o=r(EZr,"Data2VecTextForMaskedLM"),EZr.forEach(t),r9o=r(ICe," (Data2VecText model)"),ICe.forEach(t),t9o=i(N),F2=n(N,"LI",{});var qCe=s(F2);hse=n(qCe,"STRONG",{});var CZr=s(hse);a9o=r(CZr,"deberta"),CZr.forEach(t),n9o=r(qCe," \u2014 "),KI=n(qCe,"A",{href:!0});var wZr=s(KI);s9o=r(wZr,"DebertaForMaskedLM"),wZr.forEach(t),l9o=r(qCe," (DeBERTa model)"),qCe.forEach(t),i9o=i(N),v2=n(N,"LI",{});var NCe=s(v2);pse=n(NCe,"STRONG",{});var AZr=s(pse);d9o=r(AZr,"deberta-v2"),AZr.forEach(t),c9o=r(NCe," \u2014 "),ZI=n(NCe,"A",{href:!0});var yZr=s(ZI);f9o=r(yZr,"DebertaV2ForMaskedLM"),yZr.forEach(t),m9o=r(NCe," (DeBERTa-v2 model)"),NCe.forEach(t),g9o=i(N),T2=n(N,"LI",{});var jCe=s(T2);_se=n(jCe,"STRONG",{});var LZr=s(_se);h9o=r(LZr,"distilbert"),LZr.forEach(t),p9o=r(jCe," \u2014 "),eq=n(jCe,"A",{href:!0});var xZr=s(eq);_9o=r(xZr,"DistilBertForMaskedLM"),xZr.forEach(t),u9o=r(jCe," (DistilBERT model)"),jCe.forEach(t),b9o=i(N),M2=n(N,"LI",{});var DCe=s(M2);use=n(DCe,"STRONG",{});var kZr=s(use);F9o=r(kZr,"electra"),kZr.forEach(t),v9o=r(DCe," \u2014 "),oq=n(DCe,"A",{href:!0});var SZr=s(oq);T9o=r(SZr,"ElectraForMaskedLM"),SZr.forEach(t),M9o=r(DCe," (ELECTRA model)"),DCe.forEach(t),E9o=i(N),E2=n(N,"LI",{});var GCe=s(E2);bse=n(GCe,"STRONG",{});var RZr=s(bse);C9o=r(RZr,"flaubert"),RZr.forEach(t),w9o=r(GCe," \u2014 "),rq=n(GCe,"A",{href:!0});var BZr=s(rq);A9o=r(BZr,"FlaubertWithLMHeadModel"),BZr.forEach(t),y9o=r(GCe," (FlauBERT model)"),GCe.forEach(t),L9o=i(N),C2=n(N,"LI",{});var OCe=s(C2);Fse=n(OCe,"STRONG",{});var PZr=s(Fse);x9o=r(PZr,"fnet"),PZr.forEach(t),k9o=r(OCe," \u2014 "),tq=n(OCe,"A",{href:!0});var $Zr=s(tq);S9o=r($Zr,"FNetForMaskedLM"),$Zr.forEach(t),R9o=r(OCe," (FNet model)"),OCe.forEach(t),B9o=i(N),w2=n(N,"LI",{});var VCe=s(w2);vse=n(VCe,"STRONG",{});var IZr=s(vse);P9o=r(IZr,"funnel"),IZr.forEach(t),$9o=r(VCe," \u2014 "),aq=n(VCe,"A",{href:!0});var qZr=s(aq);I9o=r(qZr,"FunnelForMaskedLM"),qZr.forEach(t),q9o=r(VCe," (Funnel Transformer model)"),VCe.forEach(t),N9o=i(N),A2=n(N,"LI",{});var XCe=s(A2);Tse=n(XCe,"STRONG",{});var NZr=s(Tse);j9o=r(NZr,"ibert"),NZr.forEach(t),D9o=r(XCe," \u2014 "),nq=n(XCe,"A",{href:!0});var jZr=s(nq);G9o=r(jZr,"IBertForMaskedLM"),jZr.forEach(t),O9o=r(XCe," (I-BERT model)"),XCe.forEach(t),V9o=i(N),y2=n(N,"LI",{});var zCe=s(y2);Mse=n(zCe,"STRONG",{});var DZr=s(Mse);X9o=r(DZr,"layoutlm"),DZr.forEach(t),z9o=r(zCe," \u2014 "),sq=n(zCe,"A",{href:!0});var GZr=s(sq);Q9o=r(GZr,"LayoutLMForMaskedLM"),GZr.forEach(t),W9o=r(zCe," (LayoutLM model)"),zCe.forEach(t),H9o=i(N),L2=n(N,"LI",{});var QCe=s(L2);Ese=n(QCe,"STRONG",{});var OZr=s(Ese);U9o=r(OZr,"longformer"),OZr.forEach(t),J9o=r(QCe," \u2014 "),lq=n(QCe,"A",{href:!0});var VZr=s(lq);Y9o=r(VZr,"LongformerForMaskedLM"),VZr.forEach(t),K9o=r(QCe," (Longformer model)"),QCe.forEach(t),Z9o=i(N),x2=n(N,"LI",{});var WCe=s(x2);Cse=n(WCe,"STRONG",{});var XZr=s(Cse);eMo=r(XZr,"mbart"),XZr.forEach(t),oMo=r(WCe," \u2014 "),iq=n(WCe,"A",{href:!0});var zZr=s(iq);rMo=r(zZr,"MBartForConditionalGeneration"),zZr.forEach(t),tMo=r(WCe," (mBART model)"),WCe.forEach(t),aMo=i(N),k2=n(N,"LI",{});var HCe=s(k2);wse=n(HCe,"STRONG",{});var QZr=s(wse);nMo=r(QZr,"megatron-bert"),QZr.forEach(t),sMo=r(HCe," \u2014 "),dq=n(HCe,"A",{href:!0});var WZr=s(dq);lMo=r(WZr,"MegatronBertForMaskedLM"),WZr.forEach(t),iMo=r(HCe," (MegatronBert model)"),HCe.forEach(t),dMo=i(N),S2=n(N,"LI",{});var UCe=s(S2);Ase=n(UCe,"STRONG",{});var HZr=s(Ase);cMo=r(HZr,"mobilebert"),HZr.forEach(t),fMo=r(UCe," \u2014 "),cq=n(UCe,"A",{href:!0});var UZr=s(cq);mMo=r(UZr,"MobileBertForMaskedLM"),UZr.forEach(t),gMo=r(UCe," (MobileBERT model)"),UCe.forEach(t),hMo=i(N),R2=n(N,"LI",{});var JCe=s(R2);yse=n(JCe,"STRONG",{});var JZr=s(yse);pMo=r(JZr,"mpnet"),JZr.forEach(t),_Mo=r(JCe," \u2014 "),fq=n(JCe,"A",{href:!0});var YZr=s(fq);uMo=r(YZr,"MPNetForMaskedLM"),YZr.forEach(t),bMo=r(JCe," (MPNet model)"),JCe.forEach(t),FMo=i(N),B2=n(N,"LI",{});var YCe=s(B2);Lse=n(YCe,"STRONG",{});var KZr=s(Lse);vMo=r(KZr,"nystromformer"),KZr.forEach(t),TMo=r(YCe," \u2014 "),mq=n(YCe,"A",{href:!0});var ZZr=s(mq);MMo=r(ZZr,"NystromformerForMaskedLM"),ZZr.forEach(t),EMo=r(YCe," (Nystromformer model)"),YCe.forEach(t),CMo=i(N),P2=n(N,"LI",{});var KCe=s(P2);xse=n(KCe,"STRONG",{});var eet=s(xse);wMo=r(eet,"perceiver"),eet.forEach(t),AMo=r(KCe," \u2014 "),gq=n(KCe,"A",{href:!0});var oet=s(gq);yMo=r(oet,"PerceiverForMaskedLM"),oet.forEach(t),LMo=r(KCe," (Perceiver model)"),KCe.forEach(t),xMo=i(N),$2=n(N,"LI",{});var ZCe=s($2);kse=n(ZCe,"STRONG",{});var ret=s(kse);kMo=r(ret,"qdqbert"),ret.forEach(t),SMo=r(ZCe," \u2014 "),hq=n(ZCe,"A",{href:!0});var tet=s(hq);RMo=r(tet,"QDQBertForMaskedLM"),tet.forEach(t),BMo=r(ZCe," (QDQBert model)"),ZCe.forEach(t),PMo=i(N),I2=n(N,"LI",{});var ewe=s(I2);Sse=n(ewe,"STRONG",{});var aet=s(Sse);$Mo=r(aet,"reformer"),aet.forEach(t),IMo=r(ewe," \u2014 "),pq=n(ewe,"A",{href:!0});var net=s(pq);qMo=r(net,"ReformerForMaskedLM"),net.forEach(t),NMo=r(ewe," (Reformer model)"),ewe.forEach(t),jMo=i(N),q2=n(N,"LI",{});var owe=s(q2);Rse=n(owe,"STRONG",{});var set=s(Rse);DMo=r(set,"rembert"),set.forEach(t),GMo=r(owe," \u2014 "),_q=n(owe,"A",{href:!0});var iet=s(_q);OMo=r(iet,"RemBertForMaskedLM"),iet.forEach(t),VMo=r(owe," (RemBERT model)"),owe.forEach(t),XMo=i(N),N2=n(N,"LI",{});var rwe=s(N2);Bse=n(rwe,"STRONG",{});var det=s(Bse);zMo=r(det,"roberta"),det.forEach(t),QMo=r(rwe," \u2014 "),uq=n(rwe,"A",{href:!0});var cet=s(uq);WMo=r(cet,"RobertaForMaskedLM"),cet.forEach(t),HMo=r(rwe," (RoBERTa model)"),rwe.forEach(t),UMo=i(N),j2=n(N,"LI",{});var twe=s(j2);Pse=n(twe,"STRONG",{});var fet=s(Pse);JMo=r(fet,"roformer"),fet.forEach(t),YMo=r(twe," \u2014 "),bq=n(twe,"A",{href:!0});var met=s(bq);KMo=r(met,"RoFormerForMaskedLM"),met.forEach(t),ZMo=r(twe," (RoFormer model)"),twe.forEach(t),e4o=i(N),D2=n(N,"LI",{});var awe=s(D2);$se=n(awe,"STRONG",{});var get=s($se);o4o=r(get,"squeezebert"),get.forEach(t),r4o=r(awe," \u2014 "),Fq=n(awe,"A",{href:!0});var het=s(Fq);t4o=r(het,"SqueezeBertForMaskedLM"),het.forEach(t),a4o=r(awe," (SqueezeBERT model)"),awe.forEach(t),n4o=i(N),G2=n(N,"LI",{});var nwe=s(G2);Ise=n(nwe,"STRONG",{});var pet=s(Ise);s4o=r(pet,"tapas"),pet.forEach(t),l4o=r(nwe," \u2014 "),vq=n(nwe,"A",{href:!0});var _et=s(vq);i4o=r(_et,"TapasForMaskedLM"),_et.forEach(t),d4o=r(nwe," (TAPAS model)"),nwe.forEach(t),c4o=i(N),O2=n(N,"LI",{});var swe=s(O2);qse=n(swe,"STRONG",{});var uet=s(qse);f4o=r(uet,"wav2vec2"),uet.forEach(t),m4o=r(swe," \u2014 "),Nse=n(swe,"CODE",{});var bet=s(Nse);g4o=r(bet,"Wav2Vec2ForMaskedLM"),bet.forEach(t),h4o=r(swe," (Wav2Vec2 model)"),swe.forEach(t),p4o=i(N),V2=n(N,"LI",{});var lwe=s(V2);jse=n(lwe,"STRONG",{});var Fet=s(jse);_4o=r(Fet,"xlm"),Fet.forEach(t),u4o=r(lwe," \u2014 "),Tq=n(lwe,"A",{href:!0});var vet=s(Tq);b4o=r(vet,"XLMWithLMHeadModel"),vet.forEach(t),F4o=r(lwe," (XLM model)"),lwe.forEach(t),v4o=i(N),X2=n(N,"LI",{});var iwe=s(X2);Dse=n(iwe,"STRONG",{});var Tet=s(Dse);T4o=r(Tet,"xlm-roberta"),Tet.forEach(t),M4o=r(iwe," \u2014 "),Mq=n(iwe,"A",{href:!0});var Met=s(Mq);E4o=r(Met,"XLMRobertaForMaskedLM"),Met.forEach(t),C4o=r(iwe," (XLM-RoBERTa model)"),iwe.forEach(t),w4o=i(N),z2=n(N,"LI",{});var dwe=s(z2);Gse=n(dwe,"STRONG",{});var Eet=s(Gse);A4o=r(Eet,"xlm-roberta-xl"),Eet.forEach(t),y4o=r(dwe," \u2014 "),Eq=n(dwe,"A",{href:!0});var Cet=s(Eq);L4o=r(Cet,"XLMRobertaXLForMaskedLM"),Cet.forEach(t),x4o=r(dwe," (XLM-RoBERTa-XL model)"),dwe.forEach(t),k4o=i(N),Q2=n(N,"LI",{});var cwe=s(Q2);Ose=n(cwe,"STRONG",{});var wet=s(Ose);S4o=r(wet,"yoso"),wet.forEach(t),R4o=r(cwe," \u2014 "),Cq=n(cwe,"A",{href:!0});var Aet=s(Cq);B4o=r(Aet,"YosoForMaskedLM"),Aet.forEach(t),P4o=r(cwe," (YOSO model)"),cwe.forEach(t),N.forEach(t),$4o=i(Vt),W2=n(Vt,"P",{});var fwe=s(W2);I4o=r(fwe,"The model is set in evaluation mode by default using "),Vse=n(fwe,"CODE",{});var yet=s(Vse);q4o=r(yet,"model.eval()"),yet.forEach(t),N4o=r(fwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xse=n(fwe,"CODE",{});var Let=s(Xse);j4o=r(Let,"model.train()"),Let.forEach(t),fwe.forEach(t),D4o=i(Vt),zse=n(Vt,"P",{});var xet=s(zse);G4o=r(xet,"Examples:"),xet.forEach(t),O4o=i(Vt),m(V3.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),SBe=i(c),cd=n(c,"H2",{class:!0});var D$e=s(cd);H2=n(D$e,"A",{id:!0,class:!0,href:!0});var ket=s(H2);Qse=n(ket,"SPAN",{});var Set=s(Qse);m(X3.$$.fragment,Set),Set.forEach(t),ket.forEach(t),V4o=i(D$e),Wse=n(D$e,"SPAN",{});var Ret=s(Wse);X4o=r(Ret,"AutoModelForSeq2SeqLM"),Ret.forEach(t),D$e.forEach(t),RBe=i(c),er=n(c,"DIV",{class:!0});var rl=s(er);m(z3.$$.fragment,rl),z4o=i(rl),fd=n(rl,"P",{});var QU=s(fd);Q4o=r(QU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wq=n(QU,"A",{href:!0});var Bet=s(wq);W4o=r(Bet,"from_pretrained()"),Bet.forEach(t),H4o=r(QU," class method or the "),Aq=n(QU,"A",{href:!0});var Pet=s(Aq);U4o=r(Pet,"from_config()"),Pet.forEach(t),J4o=r(QU,` class
method.`),QU.forEach(t),Y4o=i(rl),Q3=n(rl,"P",{});var G$e=s(Q3);K4o=r(G$e,"This class cannot be instantiated directly using "),Hse=n(G$e,"CODE",{});var $et=s(Hse);Z4o=r($et,"__init__()"),$et.forEach(t),eEo=r(G$e," (throws an error)."),G$e.forEach(t),oEo=i(rl),Hr=n(rl,"DIV",{class:!0});var tl=s(Hr);m(W3.$$.fragment,tl),rEo=i(tl),Use=n(tl,"P",{});var Iet=s(Use);tEo=r(Iet,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Iet.forEach(t),aEo=i(tl),md=n(tl,"P",{});var WU=s(md);nEo=r(WU,`Note:
Loading a model from its configuration file does `),Jse=n(WU,"STRONG",{});var qet=s(Jse);sEo=r(qet,"not"),qet.forEach(t),lEo=r(WU,` load the model weights. It only affects the
model\u2019s configuration. Use `),yq=n(WU,"A",{href:!0});var Net=s(yq);iEo=r(Net,"from_pretrained()"),Net.forEach(t),dEo=r(WU," to load the model weights."),WU.forEach(t),cEo=i(tl),Yse=n(tl,"P",{});var jet=s(Yse);fEo=r(jet,"Examples:"),jet.forEach(t),mEo=i(tl),m(H3.$$.fragment,tl),tl.forEach(t),gEo=i(rl),Oe=n(rl,"DIV",{class:!0});var Xt=s(Oe);m(U3.$$.fragment,Xt),hEo=i(Xt),Kse=n(Xt,"P",{});var Det=s(Kse);pEo=r(Det,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Det.forEach(t),_Eo=i(Xt),Ha=n(Xt,"P",{});var VE=s(Ha);uEo=r(VE,"The model class to instantiate is selected based on the "),Zse=n(VE,"CODE",{});var Get=s(Zse);bEo=r(Get,"model_type"),Get.forEach(t),FEo=r(VE,` property of the config object (either
passed as an argument or loaded from `),ele=n(VE,"CODE",{});var Oet=s(ele);vEo=r(Oet,"pretrained_model_name_or_path"),Oet.forEach(t),TEo=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ole=n(VE,"CODE",{});var Vet=s(ole);MEo=r(Vet,"pretrained_model_name_or_path"),Vet.forEach(t),EEo=r(VE,":"),VE.forEach(t),CEo=i(Xt),ae=n(Xt,"UL",{});var le=s(ae);U2=n(le,"LI",{});var mwe=s(U2);rle=n(mwe,"STRONG",{});var Xet=s(rle);wEo=r(Xet,"bart"),Xet.forEach(t),AEo=r(mwe," \u2014 "),Lq=n(mwe,"A",{href:!0});var zet=s(Lq);yEo=r(zet,"BartForConditionalGeneration"),zet.forEach(t),LEo=r(mwe," (BART model)"),mwe.forEach(t),xEo=i(le),J2=n(le,"LI",{});var gwe=s(J2);tle=n(gwe,"STRONG",{});var Qet=s(tle);kEo=r(Qet,"bigbird_pegasus"),Qet.forEach(t),SEo=r(gwe," \u2014 "),xq=n(gwe,"A",{href:!0});var Wet=s(xq);REo=r(Wet,"BigBirdPegasusForConditionalGeneration"),Wet.forEach(t),BEo=r(gwe," (BigBirdPegasus model)"),gwe.forEach(t),PEo=i(le),Y2=n(le,"LI",{});var hwe=s(Y2);ale=n(hwe,"STRONG",{});var Het=s(ale);$Eo=r(Het,"blenderbot"),Het.forEach(t),IEo=r(hwe," \u2014 "),kq=n(hwe,"A",{href:!0});var Uet=s(kq);qEo=r(Uet,"BlenderbotForConditionalGeneration"),Uet.forEach(t),NEo=r(hwe," (Blenderbot model)"),hwe.forEach(t),jEo=i(le),K2=n(le,"LI",{});var pwe=s(K2);nle=n(pwe,"STRONG",{});var Jet=s(nle);DEo=r(Jet,"blenderbot-small"),Jet.forEach(t),GEo=r(pwe," \u2014 "),Sq=n(pwe,"A",{href:!0});var Yet=s(Sq);OEo=r(Yet,"BlenderbotSmallForConditionalGeneration"),Yet.forEach(t),VEo=r(pwe," (BlenderbotSmall model)"),pwe.forEach(t),XEo=i(le),Z2=n(le,"LI",{});var _we=s(Z2);sle=n(_we,"STRONG",{});var Ket=s(sle);zEo=r(Ket,"encoder-decoder"),Ket.forEach(t),QEo=r(_we," \u2014 "),Rq=n(_we,"A",{href:!0});var Zet=s(Rq);WEo=r(Zet,"EncoderDecoderModel"),Zet.forEach(t),HEo=r(_we," (Encoder decoder model)"),_we.forEach(t),UEo=i(le),e1=n(le,"LI",{});var uwe=s(e1);lle=n(uwe,"STRONG",{});var eot=s(lle);JEo=r(eot,"fsmt"),eot.forEach(t),YEo=r(uwe," \u2014 "),Bq=n(uwe,"A",{href:!0});var oot=s(Bq);KEo=r(oot,"FSMTForConditionalGeneration"),oot.forEach(t),ZEo=r(uwe," (FairSeq Machine-Translation model)"),uwe.forEach(t),e5o=i(le),o1=n(le,"LI",{});var bwe=s(o1);ile=n(bwe,"STRONG",{});var rot=s(ile);o5o=r(rot,"led"),rot.forEach(t),r5o=r(bwe," \u2014 "),Pq=n(bwe,"A",{href:!0});var tot=s(Pq);t5o=r(tot,"LEDForConditionalGeneration"),tot.forEach(t),a5o=r(bwe," (LED model)"),bwe.forEach(t),n5o=i(le),r1=n(le,"LI",{});var Fwe=s(r1);dle=n(Fwe,"STRONG",{});var aot=s(dle);s5o=r(aot,"longt5"),aot.forEach(t),l5o=r(Fwe," \u2014 "),$q=n(Fwe,"A",{href:!0});var not=s($q);i5o=r(not,"LongT5ForConditionalGeneration"),not.forEach(t),d5o=r(Fwe," (LongT5 model)"),Fwe.forEach(t),c5o=i(le),t1=n(le,"LI",{});var vwe=s(t1);cle=n(vwe,"STRONG",{});var sot=s(cle);f5o=r(sot,"m2m_100"),sot.forEach(t),m5o=r(vwe," \u2014 "),Iq=n(vwe,"A",{href:!0});var lot=s(Iq);g5o=r(lot,"M2M100ForConditionalGeneration"),lot.forEach(t),h5o=r(vwe," (M2M100 model)"),vwe.forEach(t),p5o=i(le),a1=n(le,"LI",{});var Twe=s(a1);fle=n(Twe,"STRONG",{});var iot=s(fle);_5o=r(iot,"marian"),iot.forEach(t),u5o=r(Twe," \u2014 "),qq=n(Twe,"A",{href:!0});var dot=s(qq);b5o=r(dot,"MarianMTModel"),dot.forEach(t),F5o=r(Twe," (Marian model)"),Twe.forEach(t),v5o=i(le),n1=n(le,"LI",{});var Mwe=s(n1);mle=n(Mwe,"STRONG",{});var cot=s(mle);T5o=r(cot,"mbart"),cot.forEach(t),M5o=r(Mwe," \u2014 "),Nq=n(Mwe,"A",{href:!0});var fot=s(Nq);E5o=r(fot,"MBartForConditionalGeneration"),fot.forEach(t),C5o=r(Mwe," (mBART model)"),Mwe.forEach(t),w5o=i(le),s1=n(le,"LI",{});var Ewe=s(s1);gle=n(Ewe,"STRONG",{});var mot=s(gle);A5o=r(mot,"mt5"),mot.forEach(t),y5o=r(Ewe," \u2014 "),jq=n(Ewe,"A",{href:!0});var got=s(jq);L5o=r(got,"MT5ForConditionalGeneration"),got.forEach(t),x5o=r(Ewe," (mT5 model)"),Ewe.forEach(t),k5o=i(le),l1=n(le,"LI",{});var Cwe=s(l1);hle=n(Cwe,"STRONG",{});var hot=s(hle);S5o=r(hot,"pegasus"),hot.forEach(t),R5o=r(Cwe," \u2014 "),Dq=n(Cwe,"A",{href:!0});var pot=s(Dq);B5o=r(pot,"PegasusForConditionalGeneration"),pot.forEach(t),P5o=r(Cwe," (Pegasus model)"),Cwe.forEach(t),$5o=i(le),i1=n(le,"LI",{});var wwe=s(i1);ple=n(wwe,"STRONG",{});var _ot=s(ple);I5o=r(_ot,"plbart"),_ot.forEach(t),q5o=r(wwe," \u2014 "),Gq=n(wwe,"A",{href:!0});var uot=s(Gq);N5o=r(uot,"PLBartForConditionalGeneration"),uot.forEach(t),j5o=r(wwe," (PLBart model)"),wwe.forEach(t),D5o=i(le),d1=n(le,"LI",{});var Awe=s(d1);_le=n(Awe,"STRONG",{});var bot=s(_le);G5o=r(bot,"prophetnet"),bot.forEach(t),O5o=r(Awe," \u2014 "),Oq=n(Awe,"A",{href:!0});var Fot=s(Oq);V5o=r(Fot,"ProphetNetForConditionalGeneration"),Fot.forEach(t),X5o=r(Awe," (ProphetNet model)"),Awe.forEach(t),z5o=i(le),c1=n(le,"LI",{});var ywe=s(c1);ule=n(ywe,"STRONG",{});var vot=s(ule);Q5o=r(vot,"t5"),vot.forEach(t),W5o=r(ywe," \u2014 "),Vq=n(ywe,"A",{href:!0});var Tot=s(Vq);H5o=r(Tot,"T5ForConditionalGeneration"),Tot.forEach(t),U5o=r(ywe," (T5 model)"),ywe.forEach(t),J5o=i(le),f1=n(le,"LI",{});var Lwe=s(f1);ble=n(Lwe,"STRONG",{});var Mot=s(ble);Y5o=r(Mot,"tapex"),Mot.forEach(t),K5o=r(Lwe," \u2014 "),Xq=n(Lwe,"A",{href:!0});var Eot=s(Xq);Z5o=r(Eot,"BartForConditionalGeneration"),Eot.forEach(t),e3o=r(Lwe," (TAPEX model)"),Lwe.forEach(t),o3o=i(le),m1=n(le,"LI",{});var xwe=s(m1);Fle=n(xwe,"STRONG",{});var Cot=s(Fle);r3o=r(Cot,"xlm-prophetnet"),Cot.forEach(t),t3o=r(xwe," \u2014 "),zq=n(xwe,"A",{href:!0});var wot=s(zq);a3o=r(wot,"XLMProphetNetForConditionalGeneration"),wot.forEach(t),n3o=r(xwe," (XLMProphetNet model)"),xwe.forEach(t),le.forEach(t),s3o=i(Xt),g1=n(Xt,"P",{});var kwe=s(g1);l3o=r(kwe,"The model is set in evaluation mode by default using "),vle=n(kwe,"CODE",{});var Aot=s(vle);i3o=r(Aot,"model.eval()"),Aot.forEach(t),d3o=r(kwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tle=n(kwe,"CODE",{});var yot=s(Tle);c3o=r(yot,"model.train()"),yot.forEach(t),kwe.forEach(t),f3o=i(Xt),Mle=n(Xt,"P",{});var Lot=s(Mle);m3o=r(Lot,"Examples:"),Lot.forEach(t),g3o=i(Xt),m(J3.$$.fragment,Xt),Xt.forEach(t),rl.forEach(t),BBe=i(c),gd=n(c,"H2",{class:!0});var O$e=s(gd);h1=n(O$e,"A",{id:!0,class:!0,href:!0});var xot=s(h1);Ele=n(xot,"SPAN",{});var kot=s(Ele);m(Y3.$$.fragment,kot),kot.forEach(t),xot.forEach(t),h3o=i(O$e),Cle=n(O$e,"SPAN",{});var Sot=s(Cle);p3o=r(Sot,"AutoModelForSequenceClassification"),Sot.forEach(t),O$e.forEach(t),PBe=i(c),or=n(c,"DIV",{class:!0});var al=s(or);m(K3.$$.fragment,al),_3o=i(al),hd=n(al,"P",{});var HU=s(hd);u3o=r(HU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Qq=n(HU,"A",{href:!0});var Rot=s(Qq);b3o=r(Rot,"from_pretrained()"),Rot.forEach(t),F3o=r(HU," class method or the "),Wq=n(HU,"A",{href:!0});var Bot=s(Wq);v3o=r(Bot,"from_config()"),Bot.forEach(t),T3o=r(HU,` class
method.`),HU.forEach(t),M3o=i(al),Z3=n(al,"P",{});var V$e=s(Z3);E3o=r(V$e,"This class cannot be instantiated directly using "),wle=n(V$e,"CODE",{});var Pot=s(wle);C3o=r(Pot,"__init__()"),Pot.forEach(t),w3o=r(V$e," (throws an error)."),V$e.forEach(t),A3o=i(al),Ur=n(al,"DIV",{class:!0});var nl=s(Ur);m(eC.$$.fragment,nl),y3o=i(nl),Ale=n(nl,"P",{});var $ot=s(Ale);L3o=r($ot,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$ot.forEach(t),x3o=i(nl),pd=n(nl,"P",{});var UU=s(pd);k3o=r(UU,`Note:
Loading a model from its configuration file does `),yle=n(UU,"STRONG",{});var Iot=s(yle);S3o=r(Iot,"not"),Iot.forEach(t),R3o=r(UU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hq=n(UU,"A",{href:!0});var qot=s(Hq);B3o=r(qot,"from_pretrained()"),qot.forEach(t),P3o=r(UU," to load the model weights."),UU.forEach(t),$3o=i(nl),Lle=n(nl,"P",{});var Not=s(Lle);I3o=r(Not,"Examples:"),Not.forEach(t),q3o=i(nl),m(oC.$$.fragment,nl),nl.forEach(t),N3o=i(al),Ve=n(al,"DIV",{class:!0});var zt=s(Ve);m(rC.$$.fragment,zt),j3o=i(zt),xle=n(zt,"P",{});var jot=s(xle);D3o=r(jot,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jot.forEach(t),G3o=i(zt),Ua=n(zt,"P",{});var XE=s(Ua);O3o=r(XE,"The model class to instantiate is selected based on the "),kle=n(XE,"CODE",{});var Dot=s(kle);V3o=r(Dot,"model_type"),Dot.forEach(t),X3o=r(XE,` property of the config object (either
passed as an argument or loaded from `),Sle=n(XE,"CODE",{});var Got=s(Sle);z3o=r(Got,"pretrained_model_name_or_path"),Got.forEach(t),Q3o=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rle=n(XE,"CODE",{});var Oot=s(Rle);W3o=r(Oot,"pretrained_model_name_or_path"),Oot.forEach(t),H3o=r(XE,":"),XE.forEach(t),U3o=i(zt),y=n(zt,"UL",{});var L=s(y);p1=n(L,"LI",{});var Swe=s(p1);Ble=n(Swe,"STRONG",{});var Vot=s(Ble);J3o=r(Vot,"albert"),Vot.forEach(t),Y3o=r(Swe," \u2014 "),Uq=n(Swe,"A",{href:!0});var Xot=s(Uq);K3o=r(Xot,"AlbertForSequenceClassification"),Xot.forEach(t),Z3o=r(Swe," (ALBERT model)"),Swe.forEach(t),eCo=i(L),_1=n(L,"LI",{});var Rwe=s(_1);Ple=n(Rwe,"STRONG",{});var zot=s(Ple);oCo=r(zot,"bart"),zot.forEach(t),rCo=r(Rwe," \u2014 "),Jq=n(Rwe,"A",{href:!0});var Qot=s(Jq);tCo=r(Qot,"BartForSequenceClassification"),Qot.forEach(t),aCo=r(Rwe," (BART model)"),Rwe.forEach(t),nCo=i(L),u1=n(L,"LI",{});var Bwe=s(u1);$le=n(Bwe,"STRONG",{});var Wot=s($le);sCo=r(Wot,"bert"),Wot.forEach(t),lCo=r(Bwe," \u2014 "),Yq=n(Bwe,"A",{href:!0});var Hot=s(Yq);iCo=r(Hot,"BertForSequenceClassification"),Hot.forEach(t),dCo=r(Bwe," (BERT model)"),Bwe.forEach(t),cCo=i(L),b1=n(L,"LI",{});var Pwe=s(b1);Ile=n(Pwe,"STRONG",{});var Uot=s(Ile);fCo=r(Uot,"big_bird"),Uot.forEach(t),mCo=r(Pwe," \u2014 "),Kq=n(Pwe,"A",{href:!0});var Jot=s(Kq);gCo=r(Jot,"BigBirdForSequenceClassification"),Jot.forEach(t),hCo=r(Pwe," (BigBird model)"),Pwe.forEach(t),pCo=i(L),F1=n(L,"LI",{});var $we=s(F1);qle=n($we,"STRONG",{});var Yot=s(qle);_Co=r(Yot,"bigbird_pegasus"),Yot.forEach(t),uCo=r($we," \u2014 "),Zq=n($we,"A",{href:!0});var Kot=s(Zq);bCo=r(Kot,"BigBirdPegasusForSequenceClassification"),Kot.forEach(t),FCo=r($we," (BigBirdPegasus model)"),$we.forEach(t),vCo=i(L),v1=n(L,"LI",{});var Iwe=s(v1);Nle=n(Iwe,"STRONG",{});var Zot=s(Nle);TCo=r(Zot,"camembert"),Zot.forEach(t),MCo=r(Iwe," \u2014 "),eN=n(Iwe,"A",{href:!0});var ert=s(eN);ECo=r(ert,"CamembertForSequenceClassification"),ert.forEach(t),CCo=r(Iwe," (CamemBERT model)"),Iwe.forEach(t),wCo=i(L),T1=n(L,"LI",{});var qwe=s(T1);jle=n(qwe,"STRONG",{});var ort=s(jle);ACo=r(ort,"canine"),ort.forEach(t),yCo=r(qwe," \u2014 "),oN=n(qwe,"A",{href:!0});var rrt=s(oN);LCo=r(rrt,"CanineForSequenceClassification"),rrt.forEach(t),xCo=r(qwe," (Canine model)"),qwe.forEach(t),kCo=i(L),M1=n(L,"LI",{});var Nwe=s(M1);Dle=n(Nwe,"STRONG",{});var trt=s(Dle);SCo=r(trt,"convbert"),trt.forEach(t),RCo=r(Nwe," \u2014 "),rN=n(Nwe,"A",{href:!0});var art=s(rN);BCo=r(art,"ConvBertForSequenceClassification"),art.forEach(t),PCo=r(Nwe," (ConvBERT model)"),Nwe.forEach(t),$Co=i(L),E1=n(L,"LI",{});var jwe=s(E1);Gle=n(jwe,"STRONG",{});var nrt=s(Gle);ICo=r(nrt,"ctrl"),nrt.forEach(t),qCo=r(jwe," \u2014 "),tN=n(jwe,"A",{href:!0});var srt=s(tN);NCo=r(srt,"CTRLForSequenceClassification"),srt.forEach(t),jCo=r(jwe," (CTRL model)"),jwe.forEach(t),DCo=i(L),C1=n(L,"LI",{});var Dwe=s(C1);Ole=n(Dwe,"STRONG",{});var lrt=s(Ole);GCo=r(lrt,"data2vec-text"),lrt.forEach(t),OCo=r(Dwe," \u2014 "),aN=n(Dwe,"A",{href:!0});var irt=s(aN);VCo=r(irt,"Data2VecTextForSequenceClassification"),irt.forEach(t),XCo=r(Dwe," (Data2VecText model)"),Dwe.forEach(t),zCo=i(L),w1=n(L,"LI",{});var Gwe=s(w1);Vle=n(Gwe,"STRONG",{});var drt=s(Vle);QCo=r(drt,"deberta"),drt.forEach(t),WCo=r(Gwe," \u2014 "),nN=n(Gwe,"A",{href:!0});var crt=s(nN);HCo=r(crt,"DebertaForSequenceClassification"),crt.forEach(t),UCo=r(Gwe," (DeBERTa model)"),Gwe.forEach(t),JCo=i(L),A1=n(L,"LI",{});var Owe=s(A1);Xle=n(Owe,"STRONG",{});var frt=s(Xle);YCo=r(frt,"deberta-v2"),frt.forEach(t),KCo=r(Owe," \u2014 "),sN=n(Owe,"A",{href:!0});var mrt=s(sN);ZCo=r(mrt,"DebertaV2ForSequenceClassification"),mrt.forEach(t),ewo=r(Owe," (DeBERTa-v2 model)"),Owe.forEach(t),owo=i(L),y1=n(L,"LI",{});var Vwe=s(y1);zle=n(Vwe,"STRONG",{});var grt=s(zle);rwo=r(grt,"distilbert"),grt.forEach(t),two=r(Vwe," \u2014 "),lN=n(Vwe,"A",{href:!0});var hrt=s(lN);awo=r(hrt,"DistilBertForSequenceClassification"),hrt.forEach(t),nwo=r(Vwe," (DistilBERT model)"),Vwe.forEach(t),swo=i(L),L1=n(L,"LI",{});var Xwe=s(L1);Qle=n(Xwe,"STRONG",{});var prt=s(Qle);lwo=r(prt,"electra"),prt.forEach(t),iwo=r(Xwe," \u2014 "),iN=n(Xwe,"A",{href:!0});var _rt=s(iN);dwo=r(_rt,"ElectraForSequenceClassification"),_rt.forEach(t),cwo=r(Xwe," (ELECTRA model)"),Xwe.forEach(t),fwo=i(L),x1=n(L,"LI",{});var zwe=s(x1);Wle=n(zwe,"STRONG",{});var urt=s(Wle);mwo=r(urt,"flaubert"),urt.forEach(t),gwo=r(zwe," \u2014 "),dN=n(zwe,"A",{href:!0});var brt=s(dN);hwo=r(brt,"FlaubertForSequenceClassification"),brt.forEach(t),pwo=r(zwe," (FlauBERT model)"),zwe.forEach(t),_wo=i(L),k1=n(L,"LI",{});var Qwe=s(k1);Hle=n(Qwe,"STRONG",{});var Frt=s(Hle);uwo=r(Frt,"fnet"),Frt.forEach(t),bwo=r(Qwe," \u2014 "),cN=n(Qwe,"A",{href:!0});var vrt=s(cN);Fwo=r(vrt,"FNetForSequenceClassification"),vrt.forEach(t),vwo=r(Qwe," (FNet model)"),Qwe.forEach(t),Two=i(L),S1=n(L,"LI",{});var Wwe=s(S1);Ule=n(Wwe,"STRONG",{});var Trt=s(Ule);Mwo=r(Trt,"funnel"),Trt.forEach(t),Ewo=r(Wwe," \u2014 "),fN=n(Wwe,"A",{href:!0});var Mrt=s(fN);Cwo=r(Mrt,"FunnelForSequenceClassification"),Mrt.forEach(t),wwo=r(Wwe," (Funnel Transformer model)"),Wwe.forEach(t),Awo=i(L),R1=n(L,"LI",{});var Hwe=s(R1);Jle=n(Hwe,"STRONG",{});var Ert=s(Jle);ywo=r(Ert,"gpt2"),Ert.forEach(t),Lwo=r(Hwe," \u2014 "),mN=n(Hwe,"A",{href:!0});var Crt=s(mN);xwo=r(Crt,"GPT2ForSequenceClassification"),Crt.forEach(t),kwo=r(Hwe," (OpenAI GPT-2 model)"),Hwe.forEach(t),Swo=i(L),B1=n(L,"LI",{});var Uwe=s(B1);Yle=n(Uwe,"STRONG",{});var wrt=s(Yle);Rwo=r(wrt,"gpt_neo"),wrt.forEach(t),Bwo=r(Uwe," \u2014 "),gN=n(Uwe,"A",{href:!0});var Art=s(gN);Pwo=r(Art,"GPTNeoForSequenceClassification"),Art.forEach(t),$wo=r(Uwe," (GPT Neo model)"),Uwe.forEach(t),Iwo=i(L),P1=n(L,"LI",{});var Jwe=s(P1);Kle=n(Jwe,"STRONG",{});var yrt=s(Kle);qwo=r(yrt,"gptj"),yrt.forEach(t),Nwo=r(Jwe," \u2014 "),hN=n(Jwe,"A",{href:!0});var Lrt=s(hN);jwo=r(Lrt,"GPTJForSequenceClassification"),Lrt.forEach(t),Dwo=r(Jwe," (GPT-J model)"),Jwe.forEach(t),Gwo=i(L),$1=n(L,"LI",{});var Ywe=s($1);Zle=n(Ywe,"STRONG",{});var xrt=s(Zle);Owo=r(xrt,"ibert"),xrt.forEach(t),Vwo=r(Ywe," \u2014 "),pN=n(Ywe,"A",{href:!0});var krt=s(pN);Xwo=r(krt,"IBertForSequenceClassification"),krt.forEach(t),zwo=r(Ywe," (I-BERT model)"),Ywe.forEach(t),Qwo=i(L),I1=n(L,"LI",{});var Kwe=s(I1);eie=n(Kwe,"STRONG",{});var Srt=s(eie);Wwo=r(Srt,"layoutlm"),Srt.forEach(t),Hwo=r(Kwe," \u2014 "),_N=n(Kwe,"A",{href:!0});var Rrt=s(_N);Uwo=r(Rrt,"LayoutLMForSequenceClassification"),Rrt.forEach(t),Jwo=r(Kwe," (LayoutLM model)"),Kwe.forEach(t),Ywo=i(L),q1=n(L,"LI",{});var Zwe=s(q1);oie=n(Zwe,"STRONG",{});var Brt=s(oie);Kwo=r(Brt,"layoutlmv2"),Brt.forEach(t),Zwo=r(Zwe," \u2014 "),uN=n(Zwe,"A",{href:!0});var Prt=s(uN);eAo=r(Prt,"LayoutLMv2ForSequenceClassification"),Prt.forEach(t),oAo=r(Zwe," (LayoutLMv2 model)"),Zwe.forEach(t),rAo=i(L),N1=n(L,"LI",{});var eAe=s(N1);rie=n(eAe,"STRONG",{});var $rt=s(rie);tAo=r($rt,"led"),$rt.forEach(t),aAo=r(eAe," \u2014 "),bN=n(eAe,"A",{href:!0});var Irt=s(bN);nAo=r(Irt,"LEDForSequenceClassification"),Irt.forEach(t),sAo=r(eAe," (LED model)"),eAe.forEach(t),lAo=i(L),j1=n(L,"LI",{});var oAe=s(j1);tie=n(oAe,"STRONG",{});var qrt=s(tie);iAo=r(qrt,"longformer"),qrt.forEach(t),dAo=r(oAe," \u2014 "),FN=n(oAe,"A",{href:!0});var Nrt=s(FN);cAo=r(Nrt,"LongformerForSequenceClassification"),Nrt.forEach(t),fAo=r(oAe," (Longformer model)"),oAe.forEach(t),mAo=i(L),D1=n(L,"LI",{});var rAe=s(D1);aie=n(rAe,"STRONG",{});var jrt=s(aie);gAo=r(jrt,"mbart"),jrt.forEach(t),hAo=r(rAe," \u2014 "),vN=n(rAe,"A",{href:!0});var Drt=s(vN);pAo=r(Drt,"MBartForSequenceClassification"),Drt.forEach(t),_Ao=r(rAe," (mBART model)"),rAe.forEach(t),uAo=i(L),G1=n(L,"LI",{});var tAe=s(G1);nie=n(tAe,"STRONG",{});var Grt=s(nie);bAo=r(Grt,"megatron-bert"),Grt.forEach(t),FAo=r(tAe," \u2014 "),TN=n(tAe,"A",{href:!0});var Ort=s(TN);vAo=r(Ort,"MegatronBertForSequenceClassification"),Ort.forEach(t),TAo=r(tAe," (MegatronBert model)"),tAe.forEach(t),MAo=i(L),O1=n(L,"LI",{});var aAe=s(O1);sie=n(aAe,"STRONG",{});var Vrt=s(sie);EAo=r(Vrt,"mobilebert"),Vrt.forEach(t),CAo=r(aAe," \u2014 "),MN=n(aAe,"A",{href:!0});var Xrt=s(MN);wAo=r(Xrt,"MobileBertForSequenceClassification"),Xrt.forEach(t),AAo=r(aAe," (MobileBERT model)"),aAe.forEach(t),yAo=i(L),V1=n(L,"LI",{});var nAe=s(V1);lie=n(nAe,"STRONG",{});var zrt=s(lie);LAo=r(zrt,"mpnet"),zrt.forEach(t),xAo=r(nAe," \u2014 "),EN=n(nAe,"A",{href:!0});var Qrt=s(EN);kAo=r(Qrt,"MPNetForSequenceClassification"),Qrt.forEach(t),SAo=r(nAe," (MPNet model)"),nAe.forEach(t),RAo=i(L),X1=n(L,"LI",{});var sAe=s(X1);iie=n(sAe,"STRONG",{});var Wrt=s(iie);BAo=r(Wrt,"nystromformer"),Wrt.forEach(t),PAo=r(sAe," \u2014 "),CN=n(sAe,"A",{href:!0});var Hrt=s(CN);$Ao=r(Hrt,"NystromformerForSequenceClassification"),Hrt.forEach(t),IAo=r(sAe," (Nystromformer model)"),sAe.forEach(t),qAo=i(L),z1=n(L,"LI",{});var lAe=s(z1);die=n(lAe,"STRONG",{});var Urt=s(die);NAo=r(Urt,"openai-gpt"),Urt.forEach(t),jAo=r(lAe," \u2014 "),wN=n(lAe,"A",{href:!0});var Jrt=s(wN);DAo=r(Jrt,"OpenAIGPTForSequenceClassification"),Jrt.forEach(t),GAo=r(lAe," (OpenAI GPT model)"),lAe.forEach(t),OAo=i(L),Q1=n(L,"LI",{});var iAe=s(Q1);cie=n(iAe,"STRONG",{});var Yrt=s(cie);VAo=r(Yrt,"perceiver"),Yrt.forEach(t),XAo=r(iAe," \u2014 "),AN=n(iAe,"A",{href:!0});var Krt=s(AN);zAo=r(Krt,"PerceiverForSequenceClassification"),Krt.forEach(t),QAo=r(iAe," (Perceiver model)"),iAe.forEach(t),WAo=i(L),W1=n(L,"LI",{});var dAe=s(W1);fie=n(dAe,"STRONG",{});var Zrt=s(fie);HAo=r(Zrt,"plbart"),Zrt.forEach(t),UAo=r(dAe," \u2014 "),yN=n(dAe,"A",{href:!0});var ett=s(yN);JAo=r(ett,"PLBartForSequenceClassification"),ett.forEach(t),YAo=r(dAe," (PLBart model)"),dAe.forEach(t),KAo=i(L),H1=n(L,"LI",{});var cAe=s(H1);mie=n(cAe,"STRONG",{});var ott=s(mie);ZAo=r(ott,"qdqbert"),ott.forEach(t),e0o=r(cAe," \u2014 "),LN=n(cAe,"A",{href:!0});var rtt=s(LN);o0o=r(rtt,"QDQBertForSequenceClassification"),rtt.forEach(t),r0o=r(cAe," (QDQBert model)"),cAe.forEach(t),t0o=i(L),U1=n(L,"LI",{});var fAe=s(U1);gie=n(fAe,"STRONG",{});var ttt=s(gie);a0o=r(ttt,"reformer"),ttt.forEach(t),n0o=r(fAe," \u2014 "),xN=n(fAe,"A",{href:!0});var att=s(xN);s0o=r(att,"ReformerForSequenceClassification"),att.forEach(t),l0o=r(fAe," (Reformer model)"),fAe.forEach(t),i0o=i(L),J1=n(L,"LI",{});var mAe=s(J1);hie=n(mAe,"STRONG",{});var ntt=s(hie);d0o=r(ntt,"rembert"),ntt.forEach(t),c0o=r(mAe," \u2014 "),kN=n(mAe,"A",{href:!0});var stt=s(kN);f0o=r(stt,"RemBertForSequenceClassification"),stt.forEach(t),m0o=r(mAe," (RemBERT model)"),mAe.forEach(t),g0o=i(L),Y1=n(L,"LI",{});var gAe=s(Y1);pie=n(gAe,"STRONG",{});var ltt=s(pie);h0o=r(ltt,"roberta"),ltt.forEach(t),p0o=r(gAe," \u2014 "),SN=n(gAe,"A",{href:!0});var itt=s(SN);_0o=r(itt,"RobertaForSequenceClassification"),itt.forEach(t),u0o=r(gAe," (RoBERTa model)"),gAe.forEach(t),b0o=i(L),K1=n(L,"LI",{});var hAe=s(K1);_ie=n(hAe,"STRONG",{});var dtt=s(_ie);F0o=r(dtt,"roformer"),dtt.forEach(t),v0o=r(hAe," \u2014 "),RN=n(hAe,"A",{href:!0});var ctt=s(RN);T0o=r(ctt,"RoFormerForSequenceClassification"),ctt.forEach(t),M0o=r(hAe," (RoFormer model)"),hAe.forEach(t),E0o=i(L),Z1=n(L,"LI",{});var pAe=s(Z1);uie=n(pAe,"STRONG",{});var ftt=s(uie);C0o=r(ftt,"squeezebert"),ftt.forEach(t),w0o=r(pAe," \u2014 "),BN=n(pAe,"A",{href:!0});var mtt=s(BN);A0o=r(mtt,"SqueezeBertForSequenceClassification"),mtt.forEach(t),y0o=r(pAe," (SqueezeBERT model)"),pAe.forEach(t),L0o=i(L),eb=n(L,"LI",{});var _Ae=s(eb);bie=n(_Ae,"STRONG",{});var gtt=s(bie);x0o=r(gtt,"tapas"),gtt.forEach(t),k0o=r(_Ae," \u2014 "),PN=n(_Ae,"A",{href:!0});var htt=s(PN);S0o=r(htt,"TapasForSequenceClassification"),htt.forEach(t),R0o=r(_Ae," (TAPAS model)"),_Ae.forEach(t),B0o=i(L),ob=n(L,"LI",{});var uAe=s(ob);Fie=n(uAe,"STRONG",{});var ptt=s(Fie);P0o=r(ptt,"tapex"),ptt.forEach(t),$0o=r(uAe," \u2014 "),$N=n(uAe,"A",{href:!0});var _tt=s($N);I0o=r(_tt,"BartForSequenceClassification"),_tt.forEach(t),q0o=r(uAe," (TAPEX model)"),uAe.forEach(t),N0o=i(L),rb=n(L,"LI",{});var bAe=s(rb);vie=n(bAe,"STRONG",{});var utt=s(vie);j0o=r(utt,"transfo-xl"),utt.forEach(t),D0o=r(bAe," \u2014 "),IN=n(bAe,"A",{href:!0});var btt=s(IN);G0o=r(btt,"TransfoXLForSequenceClassification"),btt.forEach(t),O0o=r(bAe," (Transformer-XL model)"),bAe.forEach(t),V0o=i(L),tb=n(L,"LI",{});var FAe=s(tb);Tie=n(FAe,"STRONG",{});var Ftt=s(Tie);X0o=r(Ftt,"xlm"),Ftt.forEach(t),z0o=r(FAe," \u2014 "),qN=n(FAe,"A",{href:!0});var vtt=s(qN);Q0o=r(vtt,"XLMForSequenceClassification"),vtt.forEach(t),W0o=r(FAe," (XLM model)"),FAe.forEach(t),H0o=i(L),ab=n(L,"LI",{});var vAe=s(ab);Mie=n(vAe,"STRONG",{});var Ttt=s(Mie);U0o=r(Ttt,"xlm-roberta"),Ttt.forEach(t),J0o=r(vAe," \u2014 "),NN=n(vAe,"A",{href:!0});var Mtt=s(NN);Y0o=r(Mtt,"XLMRobertaForSequenceClassification"),Mtt.forEach(t),K0o=r(vAe," (XLM-RoBERTa model)"),vAe.forEach(t),Z0o=i(L),nb=n(L,"LI",{});var TAe=s(nb);Eie=n(TAe,"STRONG",{});var Ett=s(Eie);eyo=r(Ett,"xlm-roberta-xl"),Ett.forEach(t),oyo=r(TAe," \u2014 "),jN=n(TAe,"A",{href:!0});var Ctt=s(jN);ryo=r(Ctt,"XLMRobertaXLForSequenceClassification"),Ctt.forEach(t),tyo=r(TAe," (XLM-RoBERTa-XL model)"),TAe.forEach(t),ayo=i(L),sb=n(L,"LI",{});var MAe=s(sb);Cie=n(MAe,"STRONG",{});var wtt=s(Cie);nyo=r(wtt,"xlnet"),wtt.forEach(t),syo=r(MAe," \u2014 "),DN=n(MAe,"A",{href:!0});var Att=s(DN);lyo=r(Att,"XLNetForSequenceClassification"),Att.forEach(t),iyo=r(MAe," (XLNet model)"),MAe.forEach(t),dyo=i(L),lb=n(L,"LI",{});var EAe=s(lb);wie=n(EAe,"STRONG",{});var ytt=s(wie);cyo=r(ytt,"yoso"),ytt.forEach(t),fyo=r(EAe," \u2014 "),GN=n(EAe,"A",{href:!0});var Ltt=s(GN);myo=r(Ltt,"YosoForSequenceClassification"),Ltt.forEach(t),gyo=r(EAe," (YOSO model)"),EAe.forEach(t),L.forEach(t),hyo=i(zt),ib=n(zt,"P",{});var CAe=s(ib);pyo=r(CAe,"The model is set in evaluation mode by default using "),Aie=n(CAe,"CODE",{});var xtt=s(Aie);_yo=r(xtt,"model.eval()"),xtt.forEach(t),uyo=r(CAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yie=n(CAe,"CODE",{});var ktt=s(yie);byo=r(ktt,"model.train()"),ktt.forEach(t),CAe.forEach(t),Fyo=i(zt),Lie=n(zt,"P",{});var Stt=s(Lie);vyo=r(Stt,"Examples:"),Stt.forEach(t),Tyo=i(zt),m(tC.$$.fragment,zt),zt.forEach(t),al.forEach(t),$Be=i(c),_d=n(c,"H2",{class:!0});var X$e=s(_d);db=n(X$e,"A",{id:!0,class:!0,href:!0});var Rtt=s(db);xie=n(Rtt,"SPAN",{});var Btt=s(xie);m(aC.$$.fragment,Btt),Btt.forEach(t),Rtt.forEach(t),Myo=i(X$e),kie=n(X$e,"SPAN",{});var Ptt=s(kie);Eyo=r(Ptt,"AutoModelForMultipleChoice"),Ptt.forEach(t),X$e.forEach(t),IBe=i(c),rr=n(c,"DIV",{class:!0});var sl=s(rr);m(nC.$$.fragment,sl),Cyo=i(sl),ud=n(sl,"P",{});var JU=s(ud);wyo=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ON=n(JU,"A",{href:!0});var $tt=s(ON);Ayo=r($tt,"from_pretrained()"),$tt.forEach(t),yyo=r(JU," class method or the "),VN=n(JU,"A",{href:!0});var Itt=s(VN);Lyo=r(Itt,"from_config()"),Itt.forEach(t),xyo=r(JU,` class
method.`),JU.forEach(t),kyo=i(sl),sC=n(sl,"P",{});var z$e=s(sC);Syo=r(z$e,"This class cannot be instantiated directly using "),Sie=n(z$e,"CODE",{});var qtt=s(Sie);Ryo=r(qtt,"__init__()"),qtt.forEach(t),Byo=r(z$e," (throws an error)."),z$e.forEach(t),Pyo=i(sl),Jr=n(sl,"DIV",{class:!0});var ll=s(Jr);m(lC.$$.fragment,ll),$yo=i(ll),Rie=n(ll,"P",{});var Ntt=s(Rie);Iyo=r(Ntt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ntt.forEach(t),qyo=i(ll),bd=n(ll,"P",{});var YU=s(bd);Nyo=r(YU,`Note:
Loading a model from its configuration file does `),Bie=n(YU,"STRONG",{});var jtt=s(Bie);jyo=r(jtt,"not"),jtt.forEach(t),Dyo=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=n(YU,"A",{href:!0});var Dtt=s(XN);Gyo=r(Dtt,"from_pretrained()"),Dtt.forEach(t),Oyo=r(YU," to load the model weights."),YU.forEach(t),Vyo=i(ll),Pie=n(ll,"P",{});var Gtt=s(Pie);Xyo=r(Gtt,"Examples:"),Gtt.forEach(t),zyo=i(ll),m(iC.$$.fragment,ll),ll.forEach(t),Qyo=i(sl),Xe=n(sl,"DIV",{class:!0});var Qt=s(Xe);m(dC.$$.fragment,Qt),Wyo=i(Qt),$ie=n(Qt,"P",{});var Ott=s($ie);Hyo=r(Ott,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Ott.forEach(t),Uyo=i(Qt),Ja=n(Qt,"P",{});var zE=s(Ja);Jyo=r(zE,"The model class to instantiate is selected based on the "),Iie=n(zE,"CODE",{});var Vtt=s(Iie);Yyo=r(Vtt,"model_type"),Vtt.forEach(t),Kyo=r(zE,` property of the config object (either
passed as an argument or loaded from `),qie=n(zE,"CODE",{});var Xtt=s(qie);Zyo=r(Xtt,"pretrained_model_name_or_path"),Xtt.forEach(t),eLo=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nie=n(zE,"CODE",{});var ztt=s(Nie);oLo=r(ztt,"pretrained_model_name_or_path"),ztt.forEach(t),rLo=r(zE,":"),zE.forEach(t),tLo=i(Qt),G=n(Qt,"UL",{});var O=s(G);cb=n(O,"LI",{});var wAe=s(cb);jie=n(wAe,"STRONG",{});var Qtt=s(jie);aLo=r(Qtt,"albert"),Qtt.forEach(t),nLo=r(wAe," \u2014 "),zN=n(wAe,"A",{href:!0});var Wtt=s(zN);sLo=r(Wtt,"AlbertForMultipleChoice"),Wtt.forEach(t),lLo=r(wAe," (ALBERT model)"),wAe.forEach(t),iLo=i(O),fb=n(O,"LI",{});var AAe=s(fb);Die=n(AAe,"STRONG",{});var Htt=s(Die);dLo=r(Htt,"bert"),Htt.forEach(t),cLo=r(AAe," \u2014 "),QN=n(AAe,"A",{href:!0});var Utt=s(QN);fLo=r(Utt,"BertForMultipleChoice"),Utt.forEach(t),mLo=r(AAe," (BERT model)"),AAe.forEach(t),gLo=i(O),mb=n(O,"LI",{});var yAe=s(mb);Gie=n(yAe,"STRONG",{});var Jtt=s(Gie);hLo=r(Jtt,"big_bird"),Jtt.forEach(t),pLo=r(yAe," \u2014 "),WN=n(yAe,"A",{href:!0});var Ytt=s(WN);_Lo=r(Ytt,"BigBirdForMultipleChoice"),Ytt.forEach(t),uLo=r(yAe," (BigBird model)"),yAe.forEach(t),bLo=i(O),gb=n(O,"LI",{});var LAe=s(gb);Oie=n(LAe,"STRONG",{});var Ktt=s(Oie);FLo=r(Ktt,"camembert"),Ktt.forEach(t),vLo=r(LAe," \u2014 "),HN=n(LAe,"A",{href:!0});var Ztt=s(HN);TLo=r(Ztt,"CamembertForMultipleChoice"),Ztt.forEach(t),MLo=r(LAe," (CamemBERT model)"),LAe.forEach(t),ELo=i(O),hb=n(O,"LI",{});var xAe=s(hb);Vie=n(xAe,"STRONG",{});var eat=s(Vie);CLo=r(eat,"canine"),eat.forEach(t),wLo=r(xAe," \u2014 "),UN=n(xAe,"A",{href:!0});var oat=s(UN);ALo=r(oat,"CanineForMultipleChoice"),oat.forEach(t),yLo=r(xAe," (Canine model)"),xAe.forEach(t),LLo=i(O),pb=n(O,"LI",{});var kAe=s(pb);Xie=n(kAe,"STRONG",{});var rat=s(Xie);xLo=r(rat,"convbert"),rat.forEach(t),kLo=r(kAe," \u2014 "),JN=n(kAe,"A",{href:!0});var tat=s(JN);SLo=r(tat,"ConvBertForMultipleChoice"),tat.forEach(t),RLo=r(kAe," (ConvBERT model)"),kAe.forEach(t),BLo=i(O),_b=n(O,"LI",{});var SAe=s(_b);zie=n(SAe,"STRONG",{});var aat=s(zie);PLo=r(aat,"data2vec-text"),aat.forEach(t),$Lo=r(SAe," \u2014 "),YN=n(SAe,"A",{href:!0});var nat=s(YN);ILo=r(nat,"Data2VecTextForMultipleChoice"),nat.forEach(t),qLo=r(SAe," (Data2VecText model)"),SAe.forEach(t),NLo=i(O),ub=n(O,"LI",{});var RAe=s(ub);Qie=n(RAe,"STRONG",{});var sat=s(Qie);jLo=r(sat,"distilbert"),sat.forEach(t),DLo=r(RAe," \u2014 "),KN=n(RAe,"A",{href:!0});var lat=s(KN);GLo=r(lat,"DistilBertForMultipleChoice"),lat.forEach(t),OLo=r(RAe," (DistilBERT model)"),RAe.forEach(t),VLo=i(O),bb=n(O,"LI",{});var BAe=s(bb);Wie=n(BAe,"STRONG",{});var iat=s(Wie);XLo=r(iat,"electra"),iat.forEach(t),zLo=r(BAe," \u2014 "),ZN=n(BAe,"A",{href:!0});var dat=s(ZN);QLo=r(dat,"ElectraForMultipleChoice"),dat.forEach(t),WLo=r(BAe," (ELECTRA model)"),BAe.forEach(t),HLo=i(O),Fb=n(O,"LI",{});var PAe=s(Fb);Hie=n(PAe,"STRONG",{});var cat=s(Hie);ULo=r(cat,"flaubert"),cat.forEach(t),JLo=r(PAe," \u2014 "),ej=n(PAe,"A",{href:!0});var fat=s(ej);YLo=r(fat,"FlaubertForMultipleChoice"),fat.forEach(t),KLo=r(PAe," (FlauBERT model)"),PAe.forEach(t),ZLo=i(O),vb=n(O,"LI",{});var $Ae=s(vb);Uie=n($Ae,"STRONG",{});var mat=s(Uie);e8o=r(mat,"fnet"),mat.forEach(t),o8o=r($Ae," \u2014 "),oj=n($Ae,"A",{href:!0});var gat=s(oj);r8o=r(gat,"FNetForMultipleChoice"),gat.forEach(t),t8o=r($Ae," (FNet model)"),$Ae.forEach(t),a8o=i(O),Tb=n(O,"LI",{});var IAe=s(Tb);Jie=n(IAe,"STRONG",{});var hat=s(Jie);n8o=r(hat,"funnel"),hat.forEach(t),s8o=r(IAe," \u2014 "),rj=n(IAe,"A",{href:!0});var pat=s(rj);l8o=r(pat,"FunnelForMultipleChoice"),pat.forEach(t),i8o=r(IAe," (Funnel Transformer model)"),IAe.forEach(t),d8o=i(O),Mb=n(O,"LI",{});var qAe=s(Mb);Yie=n(qAe,"STRONG",{});var _at=s(Yie);c8o=r(_at,"ibert"),_at.forEach(t),f8o=r(qAe," \u2014 "),tj=n(qAe,"A",{href:!0});var uat=s(tj);m8o=r(uat,"IBertForMultipleChoice"),uat.forEach(t),g8o=r(qAe," (I-BERT model)"),qAe.forEach(t),h8o=i(O),Eb=n(O,"LI",{});var NAe=s(Eb);Kie=n(NAe,"STRONG",{});var bat=s(Kie);p8o=r(bat,"longformer"),bat.forEach(t),_8o=r(NAe," \u2014 "),aj=n(NAe,"A",{href:!0});var Fat=s(aj);u8o=r(Fat,"LongformerForMultipleChoice"),Fat.forEach(t),b8o=r(NAe," (Longformer model)"),NAe.forEach(t),F8o=i(O),Cb=n(O,"LI",{});var jAe=s(Cb);Zie=n(jAe,"STRONG",{});var vat=s(Zie);v8o=r(vat,"megatron-bert"),vat.forEach(t),T8o=r(jAe," \u2014 "),nj=n(jAe,"A",{href:!0});var Tat=s(nj);M8o=r(Tat,"MegatronBertForMultipleChoice"),Tat.forEach(t),E8o=r(jAe," (MegatronBert model)"),jAe.forEach(t),C8o=i(O),wb=n(O,"LI",{});var DAe=s(wb);ede=n(DAe,"STRONG",{});var Mat=s(ede);w8o=r(Mat,"mobilebert"),Mat.forEach(t),A8o=r(DAe," \u2014 "),sj=n(DAe,"A",{href:!0});var Eat=s(sj);y8o=r(Eat,"MobileBertForMultipleChoice"),Eat.forEach(t),L8o=r(DAe," (MobileBERT model)"),DAe.forEach(t),x8o=i(O),Ab=n(O,"LI",{});var GAe=s(Ab);ode=n(GAe,"STRONG",{});var Cat=s(ode);k8o=r(Cat,"mpnet"),Cat.forEach(t),S8o=r(GAe," \u2014 "),lj=n(GAe,"A",{href:!0});var wat=s(lj);R8o=r(wat,"MPNetForMultipleChoice"),wat.forEach(t),B8o=r(GAe," (MPNet model)"),GAe.forEach(t),P8o=i(O),yb=n(O,"LI",{});var OAe=s(yb);rde=n(OAe,"STRONG",{});var Aat=s(rde);$8o=r(Aat,"nystromformer"),Aat.forEach(t),I8o=r(OAe," \u2014 "),ij=n(OAe,"A",{href:!0});var yat=s(ij);q8o=r(yat,"NystromformerForMultipleChoice"),yat.forEach(t),N8o=r(OAe," (Nystromformer model)"),OAe.forEach(t),j8o=i(O),Lb=n(O,"LI",{});var VAe=s(Lb);tde=n(VAe,"STRONG",{});var Lat=s(tde);D8o=r(Lat,"qdqbert"),Lat.forEach(t),G8o=r(VAe," \u2014 "),dj=n(VAe,"A",{href:!0});var xat=s(dj);O8o=r(xat,"QDQBertForMultipleChoice"),xat.forEach(t),V8o=r(VAe," (QDQBert model)"),VAe.forEach(t),X8o=i(O),xb=n(O,"LI",{});var XAe=s(xb);ade=n(XAe,"STRONG",{});var kat=s(ade);z8o=r(kat,"rembert"),kat.forEach(t),Q8o=r(XAe," \u2014 "),cj=n(XAe,"A",{href:!0});var Sat=s(cj);W8o=r(Sat,"RemBertForMultipleChoice"),Sat.forEach(t),H8o=r(XAe," (RemBERT model)"),XAe.forEach(t),U8o=i(O),kb=n(O,"LI",{});var zAe=s(kb);nde=n(zAe,"STRONG",{});var Rat=s(nde);J8o=r(Rat,"roberta"),Rat.forEach(t),Y8o=r(zAe," \u2014 "),fj=n(zAe,"A",{href:!0});var Bat=s(fj);K8o=r(Bat,"RobertaForMultipleChoice"),Bat.forEach(t),Z8o=r(zAe," (RoBERTa model)"),zAe.forEach(t),exo=i(O),Sb=n(O,"LI",{});var QAe=s(Sb);sde=n(QAe,"STRONG",{});var Pat=s(sde);oxo=r(Pat,"roformer"),Pat.forEach(t),rxo=r(QAe," \u2014 "),mj=n(QAe,"A",{href:!0});var $at=s(mj);txo=r($at,"RoFormerForMultipleChoice"),$at.forEach(t),axo=r(QAe," (RoFormer model)"),QAe.forEach(t),nxo=i(O),Rb=n(O,"LI",{});var WAe=s(Rb);lde=n(WAe,"STRONG",{});var Iat=s(lde);sxo=r(Iat,"squeezebert"),Iat.forEach(t),lxo=r(WAe," \u2014 "),gj=n(WAe,"A",{href:!0});var qat=s(gj);ixo=r(qat,"SqueezeBertForMultipleChoice"),qat.forEach(t),dxo=r(WAe," (SqueezeBERT model)"),WAe.forEach(t),cxo=i(O),Bb=n(O,"LI",{});var HAe=s(Bb);ide=n(HAe,"STRONG",{});var Nat=s(ide);fxo=r(Nat,"xlm"),Nat.forEach(t),mxo=r(HAe," \u2014 "),hj=n(HAe,"A",{href:!0});var jat=s(hj);gxo=r(jat,"XLMForMultipleChoice"),jat.forEach(t),hxo=r(HAe," (XLM model)"),HAe.forEach(t),pxo=i(O),Pb=n(O,"LI",{});var UAe=s(Pb);dde=n(UAe,"STRONG",{});var Dat=s(dde);_xo=r(Dat,"xlm-roberta"),Dat.forEach(t),uxo=r(UAe," \u2014 "),pj=n(UAe,"A",{href:!0});var Gat=s(pj);bxo=r(Gat,"XLMRobertaForMultipleChoice"),Gat.forEach(t),Fxo=r(UAe," (XLM-RoBERTa model)"),UAe.forEach(t),vxo=i(O),$b=n(O,"LI",{});var JAe=s($b);cde=n(JAe,"STRONG",{});var Oat=s(cde);Txo=r(Oat,"xlm-roberta-xl"),Oat.forEach(t),Mxo=r(JAe," \u2014 "),_j=n(JAe,"A",{href:!0});var Vat=s(_j);Exo=r(Vat,"XLMRobertaXLForMultipleChoice"),Vat.forEach(t),Cxo=r(JAe," (XLM-RoBERTa-XL model)"),JAe.forEach(t),wxo=i(O),Ib=n(O,"LI",{});var YAe=s(Ib);fde=n(YAe,"STRONG",{});var Xat=s(fde);Axo=r(Xat,"xlnet"),Xat.forEach(t),yxo=r(YAe," \u2014 "),uj=n(YAe,"A",{href:!0});var zat=s(uj);Lxo=r(zat,"XLNetForMultipleChoice"),zat.forEach(t),xxo=r(YAe," (XLNet model)"),YAe.forEach(t),kxo=i(O),qb=n(O,"LI",{});var KAe=s(qb);mde=n(KAe,"STRONG",{});var Qat=s(mde);Sxo=r(Qat,"yoso"),Qat.forEach(t),Rxo=r(KAe," \u2014 "),bj=n(KAe,"A",{href:!0});var Wat=s(bj);Bxo=r(Wat,"YosoForMultipleChoice"),Wat.forEach(t),Pxo=r(KAe," (YOSO model)"),KAe.forEach(t),O.forEach(t),$xo=i(Qt),Nb=n(Qt,"P",{});var ZAe=s(Nb);Ixo=r(ZAe,"The model is set in evaluation mode by default using "),gde=n(ZAe,"CODE",{});var Hat=s(gde);qxo=r(Hat,"model.eval()"),Hat.forEach(t),Nxo=r(ZAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hde=n(ZAe,"CODE",{});var Uat=s(hde);jxo=r(Uat,"model.train()"),Uat.forEach(t),ZAe.forEach(t),Dxo=i(Qt),pde=n(Qt,"P",{});var Jat=s(pde);Gxo=r(Jat,"Examples:"),Jat.forEach(t),Oxo=i(Qt),m(cC.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),qBe=i(c),Fd=n(c,"H2",{class:!0});var Q$e=s(Fd);jb=n(Q$e,"A",{id:!0,class:!0,href:!0});var Yat=s(jb);_de=n(Yat,"SPAN",{});var Kat=s(_de);m(fC.$$.fragment,Kat),Kat.forEach(t),Yat.forEach(t),Vxo=i(Q$e),ude=n(Q$e,"SPAN",{});var Zat=s(ude);Xxo=r(Zat,"AutoModelForNextSentencePrediction"),Zat.forEach(t),Q$e.forEach(t),NBe=i(c),tr=n(c,"DIV",{class:!0});var il=s(tr);m(mC.$$.fragment,il),zxo=i(il),vd=n(il,"P",{});var KU=s(vd);Qxo=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Fj=n(KU,"A",{href:!0});var ent=s(Fj);Wxo=r(ent,"from_pretrained()"),ent.forEach(t),Hxo=r(KU," class method or the "),vj=n(KU,"A",{href:!0});var ont=s(vj);Uxo=r(ont,"from_config()"),ont.forEach(t),Jxo=r(KU,` class
method.`),KU.forEach(t),Yxo=i(il),gC=n(il,"P",{});var W$e=s(gC);Kxo=r(W$e,"This class cannot be instantiated directly using "),bde=n(W$e,"CODE",{});var rnt=s(bde);Zxo=r(rnt,"__init__()"),rnt.forEach(t),eko=r(W$e," (throws an error)."),W$e.forEach(t),oko=i(il),Yr=n(il,"DIV",{class:!0});var dl=s(Yr);m(hC.$$.fragment,dl),rko=i(dl),Fde=n(dl,"P",{});var tnt=s(Fde);tko=r(tnt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tnt.forEach(t),ako=i(dl),Td=n(dl,"P",{});var ZU=s(Td);nko=r(ZU,`Note:
Loading a model from its configuration file does `),vde=n(ZU,"STRONG",{});var ant=s(vde);sko=r(ant,"not"),ant.forEach(t),lko=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tj=n(ZU,"A",{href:!0});var nnt=s(Tj);iko=r(nnt,"from_pretrained()"),nnt.forEach(t),dko=r(ZU," to load the model weights."),ZU.forEach(t),cko=i(dl),Tde=n(dl,"P",{});var snt=s(Tde);fko=r(snt,"Examples:"),snt.forEach(t),mko=i(dl),m(pC.$$.fragment,dl),dl.forEach(t),gko=i(il),ze=n(il,"DIV",{class:!0});var Wt=s(ze);m(_C.$$.fragment,Wt),hko=i(Wt),Mde=n(Wt,"P",{});var lnt=s(Mde);pko=r(lnt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lnt.forEach(t),_ko=i(Wt),Ya=n(Wt,"P",{});var QE=s(Ya);uko=r(QE,"The model class to instantiate is selected based on the "),Ede=n(QE,"CODE",{});var int=s(Ede);bko=r(int,"model_type"),int.forEach(t),Fko=r(QE,` property of the config object (either
passed as an argument or loaded from `),Cde=n(QE,"CODE",{});var dnt=s(Cde);vko=r(dnt,"pretrained_model_name_or_path"),dnt.forEach(t),Tko=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wde=n(QE,"CODE",{});var cnt=s(wde);Mko=r(cnt,"pretrained_model_name_or_path"),cnt.forEach(t),Eko=r(QE,":"),QE.forEach(t),Cko=i(Wt),da=n(Wt,"UL",{});var cl=s(da);Db=n(cl,"LI",{});var e0e=s(Db);Ade=n(e0e,"STRONG",{});var fnt=s(Ade);wko=r(fnt,"bert"),fnt.forEach(t),Ako=r(e0e," \u2014 "),Mj=n(e0e,"A",{href:!0});var mnt=s(Mj);yko=r(mnt,"BertForNextSentencePrediction"),mnt.forEach(t),Lko=r(e0e," (BERT model)"),e0e.forEach(t),xko=i(cl),Gb=n(cl,"LI",{});var o0e=s(Gb);yde=n(o0e,"STRONG",{});var gnt=s(yde);kko=r(gnt,"fnet"),gnt.forEach(t),Sko=r(o0e," \u2014 "),Ej=n(o0e,"A",{href:!0});var hnt=s(Ej);Rko=r(hnt,"FNetForNextSentencePrediction"),hnt.forEach(t),Bko=r(o0e," (FNet model)"),o0e.forEach(t),Pko=i(cl),Ob=n(cl,"LI",{});var r0e=s(Ob);Lde=n(r0e,"STRONG",{});var pnt=s(Lde);$ko=r(pnt,"megatron-bert"),pnt.forEach(t),Iko=r(r0e," \u2014 "),Cj=n(r0e,"A",{href:!0});var _nt=s(Cj);qko=r(_nt,"MegatronBertForNextSentencePrediction"),_nt.forEach(t),Nko=r(r0e," (MegatronBert model)"),r0e.forEach(t),jko=i(cl),Vb=n(cl,"LI",{});var t0e=s(Vb);xde=n(t0e,"STRONG",{});var unt=s(xde);Dko=r(unt,"mobilebert"),unt.forEach(t),Gko=r(t0e," \u2014 "),wj=n(t0e,"A",{href:!0});var bnt=s(wj);Oko=r(bnt,"MobileBertForNextSentencePrediction"),bnt.forEach(t),Vko=r(t0e," (MobileBERT model)"),t0e.forEach(t),Xko=i(cl),Xb=n(cl,"LI",{});var a0e=s(Xb);kde=n(a0e,"STRONG",{});var Fnt=s(kde);zko=r(Fnt,"qdqbert"),Fnt.forEach(t),Qko=r(a0e," \u2014 "),Aj=n(a0e,"A",{href:!0});var vnt=s(Aj);Wko=r(vnt,"QDQBertForNextSentencePrediction"),vnt.forEach(t),Hko=r(a0e," (QDQBert model)"),a0e.forEach(t),cl.forEach(t),Uko=i(Wt),zb=n(Wt,"P",{});var n0e=s(zb);Jko=r(n0e,"The model is set in evaluation mode by default using "),Sde=n(n0e,"CODE",{});var Tnt=s(Sde);Yko=r(Tnt,"model.eval()"),Tnt.forEach(t),Kko=r(n0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rde=n(n0e,"CODE",{});var Mnt=s(Rde);Zko=r(Mnt,"model.train()"),Mnt.forEach(t),n0e.forEach(t),eSo=i(Wt),Bde=n(Wt,"P",{});var Ent=s(Bde);oSo=r(Ent,"Examples:"),Ent.forEach(t),rSo=i(Wt),m(uC.$$.fragment,Wt),Wt.forEach(t),il.forEach(t),jBe=i(c),Md=n(c,"H2",{class:!0});var H$e=s(Md);Qb=n(H$e,"A",{id:!0,class:!0,href:!0});var Cnt=s(Qb);Pde=n(Cnt,"SPAN",{});var wnt=s(Pde);m(bC.$$.fragment,wnt),wnt.forEach(t),Cnt.forEach(t),tSo=i(H$e),$de=n(H$e,"SPAN",{});var Ant=s($de);aSo=r(Ant,"AutoModelForTokenClassification"),Ant.forEach(t),H$e.forEach(t),DBe=i(c),ar=n(c,"DIV",{class:!0});var fl=s(ar);m(FC.$$.fragment,fl),nSo=i(fl),Ed=n(fl,"P",{});var eJ=s(Ed);sSo=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yj=n(eJ,"A",{href:!0});var ynt=s(yj);lSo=r(ynt,"from_pretrained()"),ynt.forEach(t),iSo=r(eJ," class method or the "),Lj=n(eJ,"A",{href:!0});var Lnt=s(Lj);dSo=r(Lnt,"from_config()"),Lnt.forEach(t),cSo=r(eJ,` class
method.`),eJ.forEach(t),fSo=i(fl),vC=n(fl,"P",{});var U$e=s(vC);mSo=r(U$e,"This class cannot be instantiated directly using "),Ide=n(U$e,"CODE",{});var xnt=s(Ide);gSo=r(xnt,"__init__()"),xnt.forEach(t),hSo=r(U$e," (throws an error)."),U$e.forEach(t),pSo=i(fl),Kr=n(fl,"DIV",{class:!0});var ml=s(Kr);m(TC.$$.fragment,ml),_So=i(ml),qde=n(ml,"P",{});var knt=s(qde);uSo=r(knt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),knt.forEach(t),bSo=i(ml),Cd=n(ml,"P",{});var oJ=s(Cd);FSo=r(oJ,`Note:
Loading a model from its configuration file does `),Nde=n(oJ,"STRONG",{});var Snt=s(Nde);vSo=r(Snt,"not"),Snt.forEach(t),TSo=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xj=n(oJ,"A",{href:!0});var Rnt=s(xj);MSo=r(Rnt,"from_pretrained()"),Rnt.forEach(t),ESo=r(oJ," to load the model weights."),oJ.forEach(t),CSo=i(ml),jde=n(ml,"P",{});var Bnt=s(jde);wSo=r(Bnt,"Examples:"),Bnt.forEach(t),ASo=i(ml),m(MC.$$.fragment,ml),ml.forEach(t),ySo=i(fl),Qe=n(fl,"DIV",{class:!0});var Ht=s(Qe);m(EC.$$.fragment,Ht),LSo=i(Ht),Dde=n(Ht,"P",{});var Pnt=s(Dde);xSo=r(Pnt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Pnt.forEach(t),kSo=i(Ht),Ka=n(Ht,"P",{});var WE=s(Ka);SSo=r(WE,"The model class to instantiate is selected based on the "),Gde=n(WE,"CODE",{});var $nt=s(Gde);RSo=r($nt,"model_type"),$nt.forEach(t),BSo=r(WE,` property of the config object (either
passed as an argument or loaded from `),Ode=n(WE,"CODE",{});var Int=s(Ode);PSo=r(Int,"pretrained_model_name_or_path"),Int.forEach(t),$So=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vde=n(WE,"CODE",{});var qnt=s(Vde);ISo=r(qnt,"pretrained_model_name_or_path"),qnt.forEach(t),qSo=r(WE,":"),WE.forEach(t),NSo=i(Ht),j=n(Ht,"UL",{});var D=s(j);Wb=n(D,"LI",{});var s0e=s(Wb);Xde=n(s0e,"STRONG",{});var Nnt=s(Xde);jSo=r(Nnt,"albert"),Nnt.forEach(t),DSo=r(s0e," \u2014 "),kj=n(s0e,"A",{href:!0});var jnt=s(kj);GSo=r(jnt,"AlbertForTokenClassification"),jnt.forEach(t),OSo=r(s0e," (ALBERT model)"),s0e.forEach(t),VSo=i(D),Hb=n(D,"LI",{});var l0e=s(Hb);zde=n(l0e,"STRONG",{});var Dnt=s(zde);XSo=r(Dnt,"bert"),Dnt.forEach(t),zSo=r(l0e," \u2014 "),Sj=n(l0e,"A",{href:!0});var Gnt=s(Sj);QSo=r(Gnt,"BertForTokenClassification"),Gnt.forEach(t),WSo=r(l0e," (BERT model)"),l0e.forEach(t),HSo=i(D),Ub=n(D,"LI",{});var i0e=s(Ub);Qde=n(i0e,"STRONG",{});var Ont=s(Qde);USo=r(Ont,"big_bird"),Ont.forEach(t),JSo=r(i0e," \u2014 "),Rj=n(i0e,"A",{href:!0});var Vnt=s(Rj);YSo=r(Vnt,"BigBirdForTokenClassification"),Vnt.forEach(t),KSo=r(i0e," (BigBird model)"),i0e.forEach(t),ZSo=i(D),Jb=n(D,"LI",{});var d0e=s(Jb);Wde=n(d0e,"STRONG",{});var Xnt=s(Wde);eRo=r(Xnt,"camembert"),Xnt.forEach(t),oRo=r(d0e," \u2014 "),Bj=n(d0e,"A",{href:!0});var znt=s(Bj);rRo=r(znt,"CamembertForTokenClassification"),znt.forEach(t),tRo=r(d0e," (CamemBERT model)"),d0e.forEach(t),aRo=i(D),Yb=n(D,"LI",{});var c0e=s(Yb);Hde=n(c0e,"STRONG",{});var Qnt=s(Hde);nRo=r(Qnt,"canine"),Qnt.forEach(t),sRo=r(c0e," \u2014 "),Pj=n(c0e,"A",{href:!0});var Wnt=s(Pj);lRo=r(Wnt,"CanineForTokenClassification"),Wnt.forEach(t),iRo=r(c0e," (Canine model)"),c0e.forEach(t),dRo=i(D),Kb=n(D,"LI",{});var f0e=s(Kb);Ude=n(f0e,"STRONG",{});var Hnt=s(Ude);cRo=r(Hnt,"convbert"),Hnt.forEach(t),fRo=r(f0e," \u2014 "),$j=n(f0e,"A",{href:!0});var Unt=s($j);mRo=r(Unt,"ConvBertForTokenClassification"),Unt.forEach(t),gRo=r(f0e," (ConvBERT model)"),f0e.forEach(t),hRo=i(D),Zb=n(D,"LI",{});var m0e=s(Zb);Jde=n(m0e,"STRONG",{});var Jnt=s(Jde);pRo=r(Jnt,"data2vec-text"),Jnt.forEach(t),_Ro=r(m0e," \u2014 "),Ij=n(m0e,"A",{href:!0});var Ynt=s(Ij);uRo=r(Ynt,"Data2VecTextForTokenClassification"),Ynt.forEach(t),bRo=r(m0e," (Data2VecText model)"),m0e.forEach(t),FRo=i(D),e6=n(D,"LI",{});var g0e=s(e6);Yde=n(g0e,"STRONG",{});var Knt=s(Yde);vRo=r(Knt,"deberta"),Knt.forEach(t),TRo=r(g0e," \u2014 "),qj=n(g0e,"A",{href:!0});var Znt=s(qj);MRo=r(Znt,"DebertaForTokenClassification"),Znt.forEach(t),ERo=r(g0e," (DeBERTa model)"),g0e.forEach(t),CRo=i(D),o6=n(D,"LI",{});var h0e=s(o6);Kde=n(h0e,"STRONG",{});var est=s(Kde);wRo=r(est,"deberta-v2"),est.forEach(t),ARo=r(h0e," \u2014 "),Nj=n(h0e,"A",{href:!0});var ost=s(Nj);yRo=r(ost,"DebertaV2ForTokenClassification"),ost.forEach(t),LRo=r(h0e," (DeBERTa-v2 model)"),h0e.forEach(t),xRo=i(D),r6=n(D,"LI",{});var p0e=s(r6);Zde=n(p0e,"STRONG",{});var rst=s(Zde);kRo=r(rst,"distilbert"),rst.forEach(t),SRo=r(p0e," \u2014 "),jj=n(p0e,"A",{href:!0});var tst=s(jj);RRo=r(tst,"DistilBertForTokenClassification"),tst.forEach(t),BRo=r(p0e," (DistilBERT model)"),p0e.forEach(t),PRo=i(D),t6=n(D,"LI",{});var _0e=s(t6);ece=n(_0e,"STRONG",{});var ast=s(ece);$Ro=r(ast,"electra"),ast.forEach(t),IRo=r(_0e," \u2014 "),Dj=n(_0e,"A",{href:!0});var nst=s(Dj);qRo=r(nst,"ElectraForTokenClassification"),nst.forEach(t),NRo=r(_0e," (ELECTRA model)"),_0e.forEach(t),jRo=i(D),a6=n(D,"LI",{});var u0e=s(a6);oce=n(u0e,"STRONG",{});var sst=s(oce);DRo=r(sst,"flaubert"),sst.forEach(t),GRo=r(u0e," \u2014 "),Gj=n(u0e,"A",{href:!0});var lst=s(Gj);ORo=r(lst,"FlaubertForTokenClassification"),lst.forEach(t),VRo=r(u0e," (FlauBERT model)"),u0e.forEach(t),XRo=i(D),n6=n(D,"LI",{});var b0e=s(n6);rce=n(b0e,"STRONG",{});var ist=s(rce);zRo=r(ist,"fnet"),ist.forEach(t),QRo=r(b0e," \u2014 "),Oj=n(b0e,"A",{href:!0});var dst=s(Oj);WRo=r(dst,"FNetForTokenClassification"),dst.forEach(t),HRo=r(b0e," (FNet model)"),b0e.forEach(t),URo=i(D),s6=n(D,"LI",{});var F0e=s(s6);tce=n(F0e,"STRONG",{});var cst=s(tce);JRo=r(cst,"funnel"),cst.forEach(t),YRo=r(F0e," \u2014 "),Vj=n(F0e,"A",{href:!0});var fst=s(Vj);KRo=r(fst,"FunnelForTokenClassification"),fst.forEach(t),ZRo=r(F0e," (Funnel Transformer model)"),F0e.forEach(t),eBo=i(D),l6=n(D,"LI",{});var v0e=s(l6);ace=n(v0e,"STRONG",{});var mst=s(ace);oBo=r(mst,"gpt2"),mst.forEach(t),rBo=r(v0e," \u2014 "),Xj=n(v0e,"A",{href:!0});var gst=s(Xj);tBo=r(gst,"GPT2ForTokenClassification"),gst.forEach(t),aBo=r(v0e," (OpenAI GPT-2 model)"),v0e.forEach(t),nBo=i(D),i6=n(D,"LI",{});var T0e=s(i6);nce=n(T0e,"STRONG",{});var hst=s(nce);sBo=r(hst,"ibert"),hst.forEach(t),lBo=r(T0e," \u2014 "),zj=n(T0e,"A",{href:!0});var pst=s(zj);iBo=r(pst,"IBertForTokenClassification"),pst.forEach(t),dBo=r(T0e," (I-BERT model)"),T0e.forEach(t),cBo=i(D),d6=n(D,"LI",{});var M0e=s(d6);sce=n(M0e,"STRONG",{});var _st=s(sce);fBo=r(_st,"layoutlm"),_st.forEach(t),mBo=r(M0e," \u2014 "),Qj=n(M0e,"A",{href:!0});var ust=s(Qj);gBo=r(ust,"LayoutLMForTokenClassification"),ust.forEach(t),hBo=r(M0e," (LayoutLM model)"),M0e.forEach(t),pBo=i(D),c6=n(D,"LI",{});var E0e=s(c6);lce=n(E0e,"STRONG",{});var bst=s(lce);_Bo=r(bst,"layoutlmv2"),bst.forEach(t),uBo=r(E0e," \u2014 "),Wj=n(E0e,"A",{href:!0});var Fst=s(Wj);bBo=r(Fst,"LayoutLMv2ForTokenClassification"),Fst.forEach(t),FBo=r(E0e," (LayoutLMv2 model)"),E0e.forEach(t),vBo=i(D),f6=n(D,"LI",{});var C0e=s(f6);ice=n(C0e,"STRONG",{});var vst=s(ice);TBo=r(vst,"longformer"),vst.forEach(t),MBo=r(C0e," \u2014 "),Hj=n(C0e,"A",{href:!0});var Tst=s(Hj);EBo=r(Tst,"LongformerForTokenClassification"),Tst.forEach(t),CBo=r(C0e," (Longformer model)"),C0e.forEach(t),wBo=i(D),m6=n(D,"LI",{});var w0e=s(m6);dce=n(w0e,"STRONG",{});var Mst=s(dce);ABo=r(Mst,"megatron-bert"),Mst.forEach(t),yBo=r(w0e," \u2014 "),Uj=n(w0e,"A",{href:!0});var Est=s(Uj);LBo=r(Est,"MegatronBertForTokenClassification"),Est.forEach(t),xBo=r(w0e," (MegatronBert model)"),w0e.forEach(t),kBo=i(D),g6=n(D,"LI",{});var A0e=s(g6);cce=n(A0e,"STRONG",{});var Cst=s(cce);SBo=r(Cst,"mobilebert"),Cst.forEach(t),RBo=r(A0e," \u2014 "),Jj=n(A0e,"A",{href:!0});var wst=s(Jj);BBo=r(wst,"MobileBertForTokenClassification"),wst.forEach(t),PBo=r(A0e," (MobileBERT model)"),A0e.forEach(t),$Bo=i(D),h6=n(D,"LI",{});var y0e=s(h6);fce=n(y0e,"STRONG",{});var Ast=s(fce);IBo=r(Ast,"mpnet"),Ast.forEach(t),qBo=r(y0e," \u2014 "),Yj=n(y0e,"A",{href:!0});var yst=s(Yj);NBo=r(yst,"MPNetForTokenClassification"),yst.forEach(t),jBo=r(y0e," (MPNet model)"),y0e.forEach(t),DBo=i(D),p6=n(D,"LI",{});var L0e=s(p6);mce=n(L0e,"STRONG",{});var Lst=s(mce);GBo=r(Lst,"nystromformer"),Lst.forEach(t),OBo=r(L0e," \u2014 "),Kj=n(L0e,"A",{href:!0});var xst=s(Kj);VBo=r(xst,"NystromformerForTokenClassification"),xst.forEach(t),XBo=r(L0e," (Nystromformer model)"),L0e.forEach(t),zBo=i(D),_6=n(D,"LI",{});var x0e=s(_6);gce=n(x0e,"STRONG",{});var kst=s(gce);QBo=r(kst,"qdqbert"),kst.forEach(t),WBo=r(x0e," \u2014 "),Zj=n(x0e,"A",{href:!0});var Sst=s(Zj);HBo=r(Sst,"QDQBertForTokenClassification"),Sst.forEach(t),UBo=r(x0e," (QDQBert model)"),x0e.forEach(t),JBo=i(D),u6=n(D,"LI",{});var k0e=s(u6);hce=n(k0e,"STRONG",{});var Rst=s(hce);YBo=r(Rst,"rembert"),Rst.forEach(t),KBo=r(k0e," \u2014 "),eD=n(k0e,"A",{href:!0});var Bst=s(eD);ZBo=r(Bst,"RemBertForTokenClassification"),Bst.forEach(t),ePo=r(k0e," (RemBERT model)"),k0e.forEach(t),oPo=i(D),b6=n(D,"LI",{});var S0e=s(b6);pce=n(S0e,"STRONG",{});var Pst=s(pce);rPo=r(Pst,"roberta"),Pst.forEach(t),tPo=r(S0e," \u2014 "),oD=n(S0e,"A",{href:!0});var $st=s(oD);aPo=r($st,"RobertaForTokenClassification"),$st.forEach(t),nPo=r(S0e," (RoBERTa model)"),S0e.forEach(t),sPo=i(D),F6=n(D,"LI",{});var R0e=s(F6);_ce=n(R0e,"STRONG",{});var Ist=s(_ce);lPo=r(Ist,"roformer"),Ist.forEach(t),iPo=r(R0e," \u2014 "),rD=n(R0e,"A",{href:!0});var qst=s(rD);dPo=r(qst,"RoFormerForTokenClassification"),qst.forEach(t),cPo=r(R0e," (RoFormer model)"),R0e.forEach(t),fPo=i(D),v6=n(D,"LI",{});var B0e=s(v6);uce=n(B0e,"STRONG",{});var Nst=s(uce);mPo=r(Nst,"squeezebert"),Nst.forEach(t),gPo=r(B0e," \u2014 "),tD=n(B0e,"A",{href:!0});var jst=s(tD);hPo=r(jst,"SqueezeBertForTokenClassification"),jst.forEach(t),pPo=r(B0e," (SqueezeBERT model)"),B0e.forEach(t),_Po=i(D),T6=n(D,"LI",{});var P0e=s(T6);bce=n(P0e,"STRONG",{});var Dst=s(bce);uPo=r(Dst,"xlm"),Dst.forEach(t),bPo=r(P0e," \u2014 "),aD=n(P0e,"A",{href:!0});var Gst=s(aD);FPo=r(Gst,"XLMForTokenClassification"),Gst.forEach(t),vPo=r(P0e," (XLM model)"),P0e.forEach(t),TPo=i(D),M6=n(D,"LI",{});var $0e=s(M6);Fce=n($0e,"STRONG",{});var Ost=s(Fce);MPo=r(Ost,"xlm-roberta"),Ost.forEach(t),EPo=r($0e," \u2014 "),nD=n($0e,"A",{href:!0});var Vst=s(nD);CPo=r(Vst,"XLMRobertaForTokenClassification"),Vst.forEach(t),wPo=r($0e," (XLM-RoBERTa model)"),$0e.forEach(t),APo=i(D),E6=n(D,"LI",{});var I0e=s(E6);vce=n(I0e,"STRONG",{});var Xst=s(vce);yPo=r(Xst,"xlm-roberta-xl"),Xst.forEach(t),LPo=r(I0e," \u2014 "),sD=n(I0e,"A",{href:!0});var zst=s(sD);xPo=r(zst,"XLMRobertaXLForTokenClassification"),zst.forEach(t),kPo=r(I0e," (XLM-RoBERTa-XL model)"),I0e.forEach(t),SPo=i(D),C6=n(D,"LI",{});var q0e=s(C6);Tce=n(q0e,"STRONG",{});var Qst=s(Tce);RPo=r(Qst,"xlnet"),Qst.forEach(t),BPo=r(q0e," \u2014 "),lD=n(q0e,"A",{href:!0});var Wst=s(lD);PPo=r(Wst,"XLNetForTokenClassification"),Wst.forEach(t),$Po=r(q0e," (XLNet model)"),q0e.forEach(t),IPo=i(D),w6=n(D,"LI",{});var N0e=s(w6);Mce=n(N0e,"STRONG",{});var Hst=s(Mce);qPo=r(Hst,"yoso"),Hst.forEach(t),NPo=r(N0e," \u2014 "),iD=n(N0e,"A",{href:!0});var Ust=s(iD);jPo=r(Ust,"YosoForTokenClassification"),Ust.forEach(t),DPo=r(N0e," (YOSO model)"),N0e.forEach(t),D.forEach(t),GPo=i(Ht),A6=n(Ht,"P",{});var j0e=s(A6);OPo=r(j0e,"The model is set in evaluation mode by default using "),Ece=n(j0e,"CODE",{});var Jst=s(Ece);VPo=r(Jst,"model.eval()"),Jst.forEach(t),XPo=r(j0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cce=n(j0e,"CODE",{});var Yst=s(Cce);zPo=r(Yst,"model.train()"),Yst.forEach(t),j0e.forEach(t),QPo=i(Ht),wce=n(Ht,"P",{});var Kst=s(wce);WPo=r(Kst,"Examples:"),Kst.forEach(t),HPo=i(Ht),m(CC.$$.fragment,Ht),Ht.forEach(t),fl.forEach(t),GBe=i(c),wd=n(c,"H2",{class:!0});var J$e=s(wd);y6=n(J$e,"A",{id:!0,class:!0,href:!0});var Zst=s(y6);Ace=n(Zst,"SPAN",{});var elt=s(Ace);m(wC.$$.fragment,elt),elt.forEach(t),Zst.forEach(t),UPo=i(J$e),yce=n(J$e,"SPAN",{});var olt=s(yce);JPo=r(olt,"AutoModelForQuestionAnswering"),olt.forEach(t),J$e.forEach(t),OBe=i(c),nr=n(c,"DIV",{class:!0});var gl=s(nr);m(AC.$$.fragment,gl),YPo=i(gl),Ad=n(gl,"P",{});var rJ=s(Ad);KPo=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dD=n(rJ,"A",{href:!0});var rlt=s(dD);ZPo=r(rlt,"from_pretrained()"),rlt.forEach(t),e$o=r(rJ," class method or the "),cD=n(rJ,"A",{href:!0});var tlt=s(cD);o$o=r(tlt,"from_config()"),tlt.forEach(t),r$o=r(rJ,` class
method.`),rJ.forEach(t),t$o=i(gl),yC=n(gl,"P",{});var Y$e=s(yC);a$o=r(Y$e,"This class cannot be instantiated directly using "),Lce=n(Y$e,"CODE",{});var alt=s(Lce);n$o=r(alt,"__init__()"),alt.forEach(t),s$o=r(Y$e," (throws an error)."),Y$e.forEach(t),l$o=i(gl),Zr=n(gl,"DIV",{class:!0});var hl=s(Zr);m(LC.$$.fragment,hl),i$o=i(hl),xce=n(hl,"P",{});var nlt=s(xce);d$o=r(nlt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nlt.forEach(t),c$o=i(hl),yd=n(hl,"P",{});var tJ=s(yd);f$o=r(tJ,`Note:
Loading a model from its configuration file does `),kce=n(tJ,"STRONG",{});var slt=s(kce);m$o=r(slt,"not"),slt.forEach(t),g$o=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fD=n(tJ,"A",{href:!0});var llt=s(fD);h$o=r(llt,"from_pretrained()"),llt.forEach(t),p$o=r(tJ," to load the model weights."),tJ.forEach(t),_$o=i(hl),Sce=n(hl,"P",{});var ilt=s(Sce);u$o=r(ilt,"Examples:"),ilt.forEach(t),b$o=i(hl),m(xC.$$.fragment,hl),hl.forEach(t),F$o=i(gl),We=n(gl,"DIV",{class:!0});var Ut=s(We);m(kC.$$.fragment,Ut),v$o=i(Ut),Rce=n(Ut,"P",{});var dlt=s(Rce);T$o=r(dlt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),dlt.forEach(t),M$o=i(Ut),Za=n(Ut,"P",{});var HE=s(Za);E$o=r(HE,"The model class to instantiate is selected based on the "),Bce=n(HE,"CODE",{});var clt=s(Bce);C$o=r(clt,"model_type"),clt.forEach(t),w$o=r(HE,` property of the config object (either
passed as an argument or loaded from `),Pce=n(HE,"CODE",{});var flt=s(Pce);A$o=r(flt,"pretrained_model_name_or_path"),flt.forEach(t),y$o=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ce=n(HE,"CODE",{});var mlt=s($ce);L$o=r(mlt,"pretrained_model_name_or_path"),mlt.forEach(t),x$o=r(HE,":"),HE.forEach(t),k$o=i(Ut),R=n(Ut,"UL",{});var P=s(R);L6=n(P,"LI",{});var D0e=s(L6);Ice=n(D0e,"STRONG",{});var glt=s(Ice);S$o=r(glt,"albert"),glt.forEach(t),R$o=r(D0e," \u2014 "),mD=n(D0e,"A",{href:!0});var hlt=s(mD);B$o=r(hlt,"AlbertForQuestionAnswering"),hlt.forEach(t),P$o=r(D0e," (ALBERT model)"),D0e.forEach(t),$$o=i(P),x6=n(P,"LI",{});var G0e=s(x6);qce=n(G0e,"STRONG",{});var plt=s(qce);I$o=r(plt,"bart"),plt.forEach(t),q$o=r(G0e," \u2014 "),gD=n(G0e,"A",{href:!0});var _lt=s(gD);N$o=r(_lt,"BartForQuestionAnswering"),_lt.forEach(t),j$o=r(G0e," (BART model)"),G0e.forEach(t),D$o=i(P),k6=n(P,"LI",{});var O0e=s(k6);Nce=n(O0e,"STRONG",{});var ult=s(Nce);G$o=r(ult,"bert"),ult.forEach(t),O$o=r(O0e," \u2014 "),hD=n(O0e,"A",{href:!0});var blt=s(hD);V$o=r(blt,"BertForQuestionAnswering"),blt.forEach(t),X$o=r(O0e," (BERT model)"),O0e.forEach(t),z$o=i(P),S6=n(P,"LI",{});var V0e=s(S6);jce=n(V0e,"STRONG",{});var Flt=s(jce);Q$o=r(Flt,"big_bird"),Flt.forEach(t),W$o=r(V0e," \u2014 "),pD=n(V0e,"A",{href:!0});var vlt=s(pD);H$o=r(vlt,"BigBirdForQuestionAnswering"),vlt.forEach(t),U$o=r(V0e," (BigBird model)"),V0e.forEach(t),J$o=i(P),R6=n(P,"LI",{});var X0e=s(R6);Dce=n(X0e,"STRONG",{});var Tlt=s(Dce);Y$o=r(Tlt,"bigbird_pegasus"),Tlt.forEach(t),K$o=r(X0e," \u2014 "),_D=n(X0e,"A",{href:!0});var Mlt=s(_D);Z$o=r(Mlt,"BigBirdPegasusForQuestionAnswering"),Mlt.forEach(t),eIo=r(X0e," (BigBirdPegasus model)"),X0e.forEach(t),oIo=i(P),B6=n(P,"LI",{});var z0e=s(B6);Gce=n(z0e,"STRONG",{});var Elt=s(Gce);rIo=r(Elt,"camembert"),Elt.forEach(t),tIo=r(z0e," \u2014 "),uD=n(z0e,"A",{href:!0});var Clt=s(uD);aIo=r(Clt,"CamembertForQuestionAnswering"),Clt.forEach(t),nIo=r(z0e," (CamemBERT model)"),z0e.forEach(t),sIo=i(P),P6=n(P,"LI",{});var Q0e=s(P6);Oce=n(Q0e,"STRONG",{});var wlt=s(Oce);lIo=r(wlt,"canine"),wlt.forEach(t),iIo=r(Q0e," \u2014 "),bD=n(Q0e,"A",{href:!0});var Alt=s(bD);dIo=r(Alt,"CanineForQuestionAnswering"),Alt.forEach(t),cIo=r(Q0e," (Canine model)"),Q0e.forEach(t),fIo=i(P),$6=n(P,"LI",{});var W0e=s($6);Vce=n(W0e,"STRONG",{});var ylt=s(Vce);mIo=r(ylt,"convbert"),ylt.forEach(t),gIo=r(W0e," \u2014 "),FD=n(W0e,"A",{href:!0});var Llt=s(FD);hIo=r(Llt,"ConvBertForQuestionAnswering"),Llt.forEach(t),pIo=r(W0e," (ConvBERT model)"),W0e.forEach(t),_Io=i(P),I6=n(P,"LI",{});var H0e=s(I6);Xce=n(H0e,"STRONG",{});var xlt=s(Xce);uIo=r(xlt,"data2vec-text"),xlt.forEach(t),bIo=r(H0e," \u2014 "),vD=n(H0e,"A",{href:!0});var klt=s(vD);FIo=r(klt,"Data2VecTextForQuestionAnswering"),klt.forEach(t),vIo=r(H0e," (Data2VecText model)"),H0e.forEach(t),TIo=i(P),q6=n(P,"LI",{});var U0e=s(q6);zce=n(U0e,"STRONG",{});var Slt=s(zce);MIo=r(Slt,"deberta"),Slt.forEach(t),EIo=r(U0e," \u2014 "),TD=n(U0e,"A",{href:!0});var Rlt=s(TD);CIo=r(Rlt,"DebertaForQuestionAnswering"),Rlt.forEach(t),wIo=r(U0e," (DeBERTa model)"),U0e.forEach(t),AIo=i(P),N6=n(P,"LI",{});var J0e=s(N6);Qce=n(J0e,"STRONG",{});var Blt=s(Qce);yIo=r(Blt,"deberta-v2"),Blt.forEach(t),LIo=r(J0e," \u2014 "),MD=n(J0e,"A",{href:!0});var Plt=s(MD);xIo=r(Plt,"DebertaV2ForQuestionAnswering"),Plt.forEach(t),kIo=r(J0e," (DeBERTa-v2 model)"),J0e.forEach(t),SIo=i(P),j6=n(P,"LI",{});var Y0e=s(j6);Wce=n(Y0e,"STRONG",{});var $lt=s(Wce);RIo=r($lt,"distilbert"),$lt.forEach(t),BIo=r(Y0e," \u2014 "),ED=n(Y0e,"A",{href:!0});var Ilt=s(ED);PIo=r(Ilt,"DistilBertForQuestionAnswering"),Ilt.forEach(t),$Io=r(Y0e," (DistilBERT model)"),Y0e.forEach(t),IIo=i(P),D6=n(P,"LI",{});var K0e=s(D6);Hce=n(K0e,"STRONG",{});var qlt=s(Hce);qIo=r(qlt,"electra"),qlt.forEach(t),NIo=r(K0e," \u2014 "),CD=n(K0e,"A",{href:!0});var Nlt=s(CD);jIo=r(Nlt,"ElectraForQuestionAnswering"),Nlt.forEach(t),DIo=r(K0e," (ELECTRA model)"),K0e.forEach(t),GIo=i(P),G6=n(P,"LI",{});var Z0e=s(G6);Uce=n(Z0e,"STRONG",{});var jlt=s(Uce);OIo=r(jlt,"flaubert"),jlt.forEach(t),VIo=r(Z0e," \u2014 "),wD=n(Z0e,"A",{href:!0});var Dlt=s(wD);XIo=r(Dlt,"FlaubertForQuestionAnsweringSimple"),Dlt.forEach(t),zIo=r(Z0e," (FlauBERT model)"),Z0e.forEach(t),QIo=i(P),O6=n(P,"LI",{});var eye=s(O6);Jce=n(eye,"STRONG",{});var Glt=s(Jce);WIo=r(Glt,"fnet"),Glt.forEach(t),HIo=r(eye," \u2014 "),AD=n(eye,"A",{href:!0});var Olt=s(AD);UIo=r(Olt,"FNetForQuestionAnswering"),Olt.forEach(t),JIo=r(eye," (FNet model)"),eye.forEach(t),YIo=i(P),V6=n(P,"LI",{});var oye=s(V6);Yce=n(oye,"STRONG",{});var Vlt=s(Yce);KIo=r(Vlt,"funnel"),Vlt.forEach(t),ZIo=r(oye," \u2014 "),yD=n(oye,"A",{href:!0});var Xlt=s(yD);eqo=r(Xlt,"FunnelForQuestionAnswering"),Xlt.forEach(t),oqo=r(oye," (Funnel Transformer model)"),oye.forEach(t),rqo=i(P),X6=n(P,"LI",{});var rye=s(X6);Kce=n(rye,"STRONG",{});var zlt=s(Kce);tqo=r(zlt,"gptj"),zlt.forEach(t),aqo=r(rye," \u2014 "),LD=n(rye,"A",{href:!0});var Qlt=s(LD);nqo=r(Qlt,"GPTJForQuestionAnswering"),Qlt.forEach(t),sqo=r(rye," (GPT-J model)"),rye.forEach(t),lqo=i(P),z6=n(P,"LI",{});var tye=s(z6);Zce=n(tye,"STRONG",{});var Wlt=s(Zce);iqo=r(Wlt,"ibert"),Wlt.forEach(t),dqo=r(tye," \u2014 "),xD=n(tye,"A",{href:!0});var Hlt=s(xD);cqo=r(Hlt,"IBertForQuestionAnswering"),Hlt.forEach(t),fqo=r(tye," (I-BERT model)"),tye.forEach(t),mqo=i(P),Q6=n(P,"LI",{});var aye=s(Q6);efe=n(aye,"STRONG",{});var Ult=s(efe);gqo=r(Ult,"layoutlmv2"),Ult.forEach(t),hqo=r(aye," \u2014 "),kD=n(aye,"A",{href:!0});var Jlt=s(kD);pqo=r(Jlt,"LayoutLMv2ForQuestionAnswering"),Jlt.forEach(t),_qo=r(aye," (LayoutLMv2 model)"),aye.forEach(t),uqo=i(P),W6=n(P,"LI",{});var nye=s(W6);ofe=n(nye,"STRONG",{});var Ylt=s(ofe);bqo=r(Ylt,"led"),Ylt.forEach(t),Fqo=r(nye," \u2014 "),SD=n(nye,"A",{href:!0});var Klt=s(SD);vqo=r(Klt,"LEDForQuestionAnswering"),Klt.forEach(t),Tqo=r(nye," (LED model)"),nye.forEach(t),Mqo=i(P),H6=n(P,"LI",{});var sye=s(H6);rfe=n(sye,"STRONG",{});var Zlt=s(rfe);Eqo=r(Zlt,"longformer"),Zlt.forEach(t),Cqo=r(sye," \u2014 "),RD=n(sye,"A",{href:!0});var eit=s(RD);wqo=r(eit,"LongformerForQuestionAnswering"),eit.forEach(t),Aqo=r(sye," (Longformer model)"),sye.forEach(t),yqo=i(P),U6=n(P,"LI",{});var lye=s(U6);tfe=n(lye,"STRONG",{});var oit=s(tfe);Lqo=r(oit,"lxmert"),oit.forEach(t),xqo=r(lye," \u2014 "),BD=n(lye,"A",{href:!0});var rit=s(BD);kqo=r(rit,"LxmertForQuestionAnswering"),rit.forEach(t),Sqo=r(lye," (LXMERT model)"),lye.forEach(t),Rqo=i(P),J6=n(P,"LI",{});var iye=s(J6);afe=n(iye,"STRONG",{});var tit=s(afe);Bqo=r(tit,"mbart"),tit.forEach(t),Pqo=r(iye," \u2014 "),PD=n(iye,"A",{href:!0});var ait=s(PD);$qo=r(ait,"MBartForQuestionAnswering"),ait.forEach(t),Iqo=r(iye," (mBART model)"),iye.forEach(t),qqo=i(P),Y6=n(P,"LI",{});var dye=s(Y6);nfe=n(dye,"STRONG",{});var nit=s(nfe);Nqo=r(nit,"megatron-bert"),nit.forEach(t),jqo=r(dye," \u2014 "),$D=n(dye,"A",{href:!0});var sit=s($D);Dqo=r(sit,"MegatronBertForQuestionAnswering"),sit.forEach(t),Gqo=r(dye," (MegatronBert model)"),dye.forEach(t),Oqo=i(P),K6=n(P,"LI",{});var cye=s(K6);sfe=n(cye,"STRONG",{});var lit=s(sfe);Vqo=r(lit,"mobilebert"),lit.forEach(t),Xqo=r(cye," \u2014 "),ID=n(cye,"A",{href:!0});var iit=s(ID);zqo=r(iit,"MobileBertForQuestionAnswering"),iit.forEach(t),Qqo=r(cye," (MobileBERT model)"),cye.forEach(t),Wqo=i(P),Z6=n(P,"LI",{});var fye=s(Z6);lfe=n(fye,"STRONG",{});var dit=s(lfe);Hqo=r(dit,"mpnet"),dit.forEach(t),Uqo=r(fye," \u2014 "),qD=n(fye,"A",{href:!0});var cit=s(qD);Jqo=r(cit,"MPNetForQuestionAnswering"),cit.forEach(t),Yqo=r(fye," (MPNet model)"),fye.forEach(t),Kqo=i(P),eF=n(P,"LI",{});var mye=s(eF);ife=n(mye,"STRONG",{});var fit=s(ife);Zqo=r(fit,"nystromformer"),fit.forEach(t),eNo=r(mye," \u2014 "),ND=n(mye,"A",{href:!0});var mit=s(ND);oNo=r(mit,"NystromformerForQuestionAnswering"),mit.forEach(t),rNo=r(mye," (Nystromformer model)"),mye.forEach(t),tNo=i(P),oF=n(P,"LI",{});var gye=s(oF);dfe=n(gye,"STRONG",{});var git=s(dfe);aNo=r(git,"qdqbert"),git.forEach(t),nNo=r(gye," \u2014 "),jD=n(gye,"A",{href:!0});var hit=s(jD);sNo=r(hit,"QDQBertForQuestionAnswering"),hit.forEach(t),lNo=r(gye," (QDQBert model)"),gye.forEach(t),iNo=i(P),rF=n(P,"LI",{});var hye=s(rF);cfe=n(hye,"STRONG",{});var pit=s(cfe);dNo=r(pit,"reformer"),pit.forEach(t),cNo=r(hye," \u2014 "),DD=n(hye,"A",{href:!0});var _it=s(DD);fNo=r(_it,"ReformerForQuestionAnswering"),_it.forEach(t),mNo=r(hye," (Reformer model)"),hye.forEach(t),gNo=i(P),tF=n(P,"LI",{});var pye=s(tF);ffe=n(pye,"STRONG",{});var uit=s(ffe);hNo=r(uit,"rembert"),uit.forEach(t),pNo=r(pye," \u2014 "),GD=n(pye,"A",{href:!0});var bit=s(GD);_No=r(bit,"RemBertForQuestionAnswering"),bit.forEach(t),uNo=r(pye," (RemBERT model)"),pye.forEach(t),bNo=i(P),aF=n(P,"LI",{});var _ye=s(aF);mfe=n(_ye,"STRONG",{});var Fit=s(mfe);FNo=r(Fit,"roberta"),Fit.forEach(t),vNo=r(_ye," \u2014 "),OD=n(_ye,"A",{href:!0});var vit=s(OD);TNo=r(vit,"RobertaForQuestionAnswering"),vit.forEach(t),MNo=r(_ye," (RoBERTa model)"),_ye.forEach(t),ENo=i(P),nF=n(P,"LI",{});var uye=s(nF);gfe=n(uye,"STRONG",{});var Tit=s(gfe);CNo=r(Tit,"roformer"),Tit.forEach(t),wNo=r(uye," \u2014 "),VD=n(uye,"A",{href:!0});var Mit=s(VD);ANo=r(Mit,"RoFormerForQuestionAnswering"),Mit.forEach(t),yNo=r(uye," (RoFormer model)"),uye.forEach(t),LNo=i(P),sF=n(P,"LI",{});var bye=s(sF);hfe=n(bye,"STRONG",{});var Eit=s(hfe);xNo=r(Eit,"splinter"),Eit.forEach(t),kNo=r(bye," \u2014 "),XD=n(bye,"A",{href:!0});var Cit=s(XD);SNo=r(Cit,"SplinterForQuestionAnswering"),Cit.forEach(t),RNo=r(bye," (Splinter model)"),bye.forEach(t),BNo=i(P),lF=n(P,"LI",{});var Fye=s(lF);pfe=n(Fye,"STRONG",{});var wit=s(pfe);PNo=r(wit,"squeezebert"),wit.forEach(t),$No=r(Fye," \u2014 "),zD=n(Fye,"A",{href:!0});var Ait=s(zD);INo=r(Ait,"SqueezeBertForQuestionAnswering"),Ait.forEach(t),qNo=r(Fye," (SqueezeBERT model)"),Fye.forEach(t),NNo=i(P),iF=n(P,"LI",{});var vye=s(iF);_fe=n(vye,"STRONG",{});var yit=s(_fe);jNo=r(yit,"xlm"),yit.forEach(t),DNo=r(vye," \u2014 "),QD=n(vye,"A",{href:!0});var Lit=s(QD);GNo=r(Lit,"XLMForQuestionAnsweringSimple"),Lit.forEach(t),ONo=r(vye," (XLM model)"),vye.forEach(t),VNo=i(P),dF=n(P,"LI",{});var Tye=s(dF);ufe=n(Tye,"STRONG",{});var xit=s(ufe);XNo=r(xit,"xlm-roberta"),xit.forEach(t),zNo=r(Tye," \u2014 "),WD=n(Tye,"A",{href:!0});var kit=s(WD);QNo=r(kit,"XLMRobertaForQuestionAnswering"),kit.forEach(t),WNo=r(Tye," (XLM-RoBERTa model)"),Tye.forEach(t),HNo=i(P),cF=n(P,"LI",{});var Mye=s(cF);bfe=n(Mye,"STRONG",{});var Sit=s(bfe);UNo=r(Sit,"xlm-roberta-xl"),Sit.forEach(t),JNo=r(Mye," \u2014 "),HD=n(Mye,"A",{href:!0});var Rit=s(HD);YNo=r(Rit,"XLMRobertaXLForQuestionAnswering"),Rit.forEach(t),KNo=r(Mye," (XLM-RoBERTa-XL model)"),Mye.forEach(t),ZNo=i(P),fF=n(P,"LI",{});var Eye=s(fF);Ffe=n(Eye,"STRONG",{});var Bit=s(Ffe);ejo=r(Bit,"xlnet"),Bit.forEach(t),ojo=r(Eye," \u2014 "),UD=n(Eye,"A",{href:!0});var Pit=s(UD);rjo=r(Pit,"XLNetForQuestionAnsweringSimple"),Pit.forEach(t),tjo=r(Eye," (XLNet model)"),Eye.forEach(t),ajo=i(P),mF=n(P,"LI",{});var Cye=s(mF);vfe=n(Cye,"STRONG",{});var $it=s(vfe);njo=r($it,"yoso"),$it.forEach(t),sjo=r(Cye," \u2014 "),JD=n(Cye,"A",{href:!0});var Iit=s(JD);ljo=r(Iit,"YosoForQuestionAnswering"),Iit.forEach(t),ijo=r(Cye," (YOSO model)"),Cye.forEach(t),P.forEach(t),djo=i(Ut),gF=n(Ut,"P",{});var wye=s(gF);cjo=r(wye,"The model is set in evaluation mode by default using "),Tfe=n(wye,"CODE",{});var qit=s(Tfe);fjo=r(qit,"model.eval()"),qit.forEach(t),mjo=r(wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mfe=n(wye,"CODE",{});var Nit=s(Mfe);gjo=r(Nit,"model.train()"),Nit.forEach(t),wye.forEach(t),hjo=i(Ut),Efe=n(Ut,"P",{});var jit=s(Efe);pjo=r(jit,"Examples:"),jit.forEach(t),_jo=i(Ut),m(SC.$$.fragment,Ut),Ut.forEach(t),gl.forEach(t),VBe=i(c),Ld=n(c,"H2",{class:!0});var K$e=s(Ld);hF=n(K$e,"A",{id:!0,class:!0,href:!0});var Dit=s(hF);Cfe=n(Dit,"SPAN",{});var Git=s(Cfe);m(RC.$$.fragment,Git),Git.forEach(t),Dit.forEach(t),ujo=i(K$e),wfe=n(K$e,"SPAN",{});var Oit=s(wfe);bjo=r(Oit,"AutoModelForTableQuestionAnswering"),Oit.forEach(t),K$e.forEach(t),XBe=i(c),sr=n(c,"DIV",{class:!0});var pl=s(sr);m(BC.$$.fragment,pl),Fjo=i(pl),xd=n(pl,"P",{});var aJ=s(xd);vjo=r(aJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),YD=n(aJ,"A",{href:!0});var Vit=s(YD);Tjo=r(Vit,"from_pretrained()"),Vit.forEach(t),Mjo=r(aJ," class method or the "),KD=n(aJ,"A",{href:!0});var Xit=s(KD);Ejo=r(Xit,"from_config()"),Xit.forEach(t),Cjo=r(aJ,` class
method.`),aJ.forEach(t),wjo=i(pl),PC=n(pl,"P",{});var Z$e=s(PC);Ajo=r(Z$e,"This class cannot be instantiated directly using "),Afe=n(Z$e,"CODE",{});var zit=s(Afe);yjo=r(zit,"__init__()"),zit.forEach(t),Ljo=r(Z$e," (throws an error)."),Z$e.forEach(t),xjo=i(pl),et=n(pl,"DIV",{class:!0});var _l=s(et);m($C.$$.fragment,_l),kjo=i(_l),yfe=n(_l,"P",{});var Qit=s(yfe);Sjo=r(Qit,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Qit.forEach(t),Rjo=i(_l),kd=n(_l,"P",{});var nJ=s(kd);Bjo=r(nJ,`Note:
Loading a model from its configuration file does `),Lfe=n(nJ,"STRONG",{});var Wit=s(Lfe);Pjo=r(Wit,"not"),Wit.forEach(t),$jo=r(nJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=n(nJ,"A",{href:!0});var Hit=s(ZD);Ijo=r(Hit,"from_pretrained()"),Hit.forEach(t),qjo=r(nJ," to load the model weights."),nJ.forEach(t),Njo=i(_l),xfe=n(_l,"P",{});var Uit=s(xfe);jjo=r(Uit,"Examples:"),Uit.forEach(t),Djo=i(_l),m(IC.$$.fragment,_l),_l.forEach(t),Gjo=i(pl),He=n(pl,"DIV",{class:!0});var Jt=s(He);m(qC.$$.fragment,Jt),Ojo=i(Jt),kfe=n(Jt,"P",{});var Jit=s(kfe);Vjo=r(Jit,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Jit.forEach(t),Xjo=i(Jt),en=n(Jt,"P",{});var UE=s(en);zjo=r(UE,"The model class to instantiate is selected based on the "),Sfe=n(UE,"CODE",{});var Yit=s(Sfe);Qjo=r(Yit,"model_type"),Yit.forEach(t),Wjo=r(UE,` property of the config object (either
passed as an argument or loaded from `),Rfe=n(UE,"CODE",{});var Kit=s(Rfe);Hjo=r(Kit,"pretrained_model_name_or_path"),Kit.forEach(t),Ujo=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bfe=n(UE,"CODE",{});var Zit=s(Bfe);Jjo=r(Zit,"pretrained_model_name_or_path"),Zit.forEach(t),Yjo=r(UE,":"),UE.forEach(t),Kjo=i(Jt),Pfe=n(Jt,"UL",{});var edt=s(Pfe);pF=n(edt,"LI",{});var Aye=s(pF);$fe=n(Aye,"STRONG",{});var odt=s($fe);Zjo=r(odt,"tapas"),odt.forEach(t),eDo=r(Aye," \u2014 "),eG=n(Aye,"A",{href:!0});var rdt=s(eG);oDo=r(rdt,"TapasForQuestionAnswering"),rdt.forEach(t),rDo=r(Aye," (TAPAS model)"),Aye.forEach(t),edt.forEach(t),tDo=i(Jt),_F=n(Jt,"P",{});var yye=s(_F);aDo=r(yye,"The model is set in evaluation mode by default using "),Ife=n(yye,"CODE",{});var tdt=s(Ife);nDo=r(tdt,"model.eval()"),tdt.forEach(t),sDo=r(yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qfe=n(yye,"CODE",{});var adt=s(qfe);lDo=r(adt,"model.train()"),adt.forEach(t),yye.forEach(t),iDo=i(Jt),Nfe=n(Jt,"P",{});var ndt=s(Nfe);dDo=r(ndt,"Examples:"),ndt.forEach(t),cDo=i(Jt),m(NC.$$.fragment,Jt),Jt.forEach(t),pl.forEach(t),zBe=i(c),Sd=n(c,"H2",{class:!0});var eIe=s(Sd);uF=n(eIe,"A",{id:!0,class:!0,href:!0});var sdt=s(uF);jfe=n(sdt,"SPAN",{});var ldt=s(jfe);m(jC.$$.fragment,ldt),ldt.forEach(t),sdt.forEach(t),fDo=i(eIe),Dfe=n(eIe,"SPAN",{});var idt=s(Dfe);mDo=r(idt,"AutoModelForImageClassification"),idt.forEach(t),eIe.forEach(t),QBe=i(c),lr=n(c,"DIV",{class:!0});var ul=s(lr);m(DC.$$.fragment,ul),gDo=i(ul),Rd=n(ul,"P",{});var sJ=s(Rd);hDo=r(sJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oG=n(sJ,"A",{href:!0});var ddt=s(oG);pDo=r(ddt,"from_pretrained()"),ddt.forEach(t),_Do=r(sJ," class method or the "),rG=n(sJ,"A",{href:!0});var cdt=s(rG);uDo=r(cdt,"from_config()"),cdt.forEach(t),bDo=r(sJ,` class
method.`),sJ.forEach(t),FDo=i(ul),GC=n(ul,"P",{});var oIe=s(GC);vDo=r(oIe,"This class cannot be instantiated directly using "),Gfe=n(oIe,"CODE",{});var fdt=s(Gfe);TDo=r(fdt,"__init__()"),fdt.forEach(t),MDo=r(oIe," (throws an error)."),oIe.forEach(t),EDo=i(ul),ot=n(ul,"DIV",{class:!0});var bl=s(ot);m(OC.$$.fragment,bl),CDo=i(bl),Ofe=n(bl,"P",{});var mdt=s(Ofe);wDo=r(mdt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mdt.forEach(t),ADo=i(bl),Bd=n(bl,"P",{});var lJ=s(Bd);yDo=r(lJ,`Note:
Loading a model from its configuration file does `),Vfe=n(lJ,"STRONG",{});var gdt=s(Vfe);LDo=r(gdt,"not"),gdt.forEach(t),xDo=r(lJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(lJ,"A",{href:!0});var hdt=s(tG);kDo=r(hdt,"from_pretrained()"),hdt.forEach(t),SDo=r(lJ," to load the model weights."),lJ.forEach(t),RDo=i(bl),Xfe=n(bl,"P",{});var pdt=s(Xfe);BDo=r(pdt,"Examples:"),pdt.forEach(t),PDo=i(bl),m(VC.$$.fragment,bl),bl.forEach(t),$Do=i(ul),Ue=n(ul,"DIV",{class:!0});var Yt=s(Ue);m(XC.$$.fragment,Yt),IDo=i(Yt),zfe=n(Yt,"P",{});var _dt=s(zfe);qDo=r(_dt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_dt.forEach(t),NDo=i(Yt),on=n(Yt,"P",{});var JE=s(on);jDo=r(JE,"The model class to instantiate is selected based on the "),Qfe=n(JE,"CODE",{});var udt=s(Qfe);DDo=r(udt,"model_type"),udt.forEach(t),GDo=r(JE,` property of the config object (either
passed as an argument or loaded from `),Wfe=n(JE,"CODE",{});var bdt=s(Wfe);ODo=r(bdt,"pretrained_model_name_or_path"),bdt.forEach(t),VDo=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hfe=n(JE,"CODE",{});var Fdt=s(Hfe);XDo=r(Fdt,"pretrained_model_name_or_path"),Fdt.forEach(t),zDo=r(JE,":"),JE.forEach(t),QDo=i(Yt),de=n(Yt,"UL",{});var ge=s(de);bF=n(ge,"LI",{});var Lye=s(bF);Ufe=n(Lye,"STRONG",{});var vdt=s(Ufe);WDo=r(vdt,"beit"),vdt.forEach(t),HDo=r(Lye," \u2014 "),aG=n(Lye,"A",{href:!0});var Tdt=s(aG);UDo=r(Tdt,"BeitForImageClassification"),Tdt.forEach(t),JDo=r(Lye," (BEiT model)"),Lye.forEach(t),YDo=i(ge),FF=n(ge,"LI",{});var xye=s(FF);Jfe=n(xye,"STRONG",{});var Mdt=s(Jfe);KDo=r(Mdt,"convnext"),Mdt.forEach(t),ZDo=r(xye," \u2014 "),nG=n(xye,"A",{href:!0});var Edt=s(nG);eGo=r(Edt,"ConvNextForImageClassification"),Edt.forEach(t),oGo=r(xye," (ConvNext model)"),xye.forEach(t),rGo=i(ge),vF=n(ge,"LI",{});var kye=s(vF);Yfe=n(kye,"STRONG",{});var Cdt=s(Yfe);tGo=r(Cdt,"data2vec-vision"),Cdt.forEach(t),aGo=r(kye," \u2014 "),sG=n(kye,"A",{href:!0});var wdt=s(sG);nGo=r(wdt,"Data2VecVisionForImageClassification"),wdt.forEach(t),sGo=r(kye," (Data2VecVision model)"),kye.forEach(t),lGo=i(ge),Os=n(ge,"LI",{});var y8=s(Os);Kfe=n(y8,"STRONG",{});var Adt=s(Kfe);iGo=r(Adt,"deit"),Adt.forEach(t),dGo=r(y8," \u2014 "),lG=n(y8,"A",{href:!0});var ydt=s(lG);cGo=r(ydt,"DeiTForImageClassification"),ydt.forEach(t),fGo=r(y8," or "),iG=n(y8,"A",{href:!0});var Ldt=s(iG);mGo=r(Ldt,"DeiTForImageClassificationWithTeacher"),Ldt.forEach(t),gGo=r(y8," (DeiT model)"),y8.forEach(t),hGo=i(ge),TF=n(ge,"LI",{});var Sye=s(TF);Zfe=n(Sye,"STRONG",{});var xdt=s(Zfe);pGo=r(xdt,"imagegpt"),xdt.forEach(t),_Go=r(Sye," \u2014 "),dG=n(Sye,"A",{href:!0});var kdt=s(dG);uGo=r(kdt,"ImageGPTForImageClassification"),kdt.forEach(t),bGo=r(Sye," (ImageGPT model)"),Sye.forEach(t),FGo=i(ge),ma=n(ge,"LI",{});var If=s(ma);eme=n(If,"STRONG",{});var Sdt=s(eme);vGo=r(Sdt,"perceiver"),Sdt.forEach(t),TGo=r(If," \u2014 "),cG=n(If,"A",{href:!0});var Rdt=s(cG);MGo=r(Rdt,"PerceiverForImageClassificationLearned"),Rdt.forEach(t),EGo=r(If," or "),fG=n(If,"A",{href:!0});var Bdt=s(fG);CGo=r(Bdt,"PerceiverForImageClassificationFourier"),Bdt.forEach(t),wGo=r(If," or "),mG=n(If,"A",{href:!0});var Pdt=s(mG);AGo=r(Pdt,"PerceiverForImageClassificationConvProcessing"),Pdt.forEach(t),yGo=r(If," (Perceiver model)"),If.forEach(t),LGo=i(ge),MF=n(ge,"LI",{});var Rye=s(MF);ome=n(Rye,"STRONG",{});var $dt=s(ome);xGo=r($dt,"poolformer"),$dt.forEach(t),kGo=r(Rye," \u2014 "),gG=n(Rye,"A",{href:!0});var Idt=s(gG);SGo=r(Idt,"PoolFormerForImageClassification"),Idt.forEach(t),RGo=r(Rye," (PoolFormer model)"),Rye.forEach(t),BGo=i(ge),EF=n(ge,"LI",{});var Bye=s(EF);rme=n(Bye,"STRONG",{});var qdt=s(rme);PGo=r(qdt,"regnet"),qdt.forEach(t),$Go=r(Bye," \u2014 "),hG=n(Bye,"A",{href:!0});var Ndt=s(hG);IGo=r(Ndt,"RegNetForImageClassification"),Ndt.forEach(t),qGo=r(Bye," (RegNet model)"),Bye.forEach(t),NGo=i(ge),CF=n(ge,"LI",{});var Pye=s(CF);tme=n(Pye,"STRONG",{});var jdt=s(tme);jGo=r(jdt,"resnet"),jdt.forEach(t),DGo=r(Pye," \u2014 "),pG=n(Pye,"A",{href:!0});var Ddt=s(pG);GGo=r(Ddt,"ResNetForImageClassification"),Ddt.forEach(t),OGo=r(Pye," (ResNet model)"),Pye.forEach(t),VGo=i(ge),wF=n(ge,"LI",{});var $ye=s(wF);ame=n($ye,"STRONG",{});var Gdt=s(ame);XGo=r(Gdt,"segformer"),Gdt.forEach(t),zGo=r($ye," \u2014 "),_G=n($ye,"A",{href:!0});var Odt=s(_G);QGo=r(Odt,"SegformerForImageClassification"),Odt.forEach(t),WGo=r($ye," (SegFormer model)"),$ye.forEach(t),HGo=i(ge),AF=n(ge,"LI",{});var Iye=s(AF);nme=n(Iye,"STRONG",{});var Vdt=s(nme);UGo=r(Vdt,"swin"),Vdt.forEach(t),JGo=r(Iye," \u2014 "),uG=n(Iye,"A",{href:!0});var Xdt=s(uG);YGo=r(Xdt,"SwinForImageClassification"),Xdt.forEach(t),KGo=r(Iye," (Swin model)"),Iye.forEach(t),ZGo=i(ge),yF=n(ge,"LI",{});var qye=s(yF);sme=n(qye,"STRONG",{});var zdt=s(sme);eOo=r(zdt,"van"),zdt.forEach(t),oOo=r(qye," \u2014 "),bG=n(qye,"A",{href:!0});var Qdt=s(bG);rOo=r(Qdt,"VanForImageClassification"),Qdt.forEach(t),tOo=r(qye," (VAN model)"),qye.forEach(t),aOo=i(ge),LF=n(ge,"LI",{});var Nye=s(LF);lme=n(Nye,"STRONG",{});var Wdt=s(lme);nOo=r(Wdt,"vit"),Wdt.forEach(t),sOo=r(Nye," \u2014 "),FG=n(Nye,"A",{href:!0});var Hdt=s(FG);lOo=r(Hdt,"ViTForImageClassification"),Hdt.forEach(t),iOo=r(Nye," (ViT model)"),Nye.forEach(t),ge.forEach(t),dOo=i(Yt),xF=n(Yt,"P",{});var jye=s(xF);cOo=r(jye,"The model is set in evaluation mode by default using "),ime=n(jye,"CODE",{});var Udt=s(ime);fOo=r(Udt,"model.eval()"),Udt.forEach(t),mOo=r(jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dme=n(jye,"CODE",{});var Jdt=s(dme);gOo=r(Jdt,"model.train()"),Jdt.forEach(t),jye.forEach(t),hOo=i(Yt),cme=n(Yt,"P",{});var Ydt=s(cme);pOo=r(Ydt,"Examples:"),Ydt.forEach(t),_Oo=i(Yt),m(zC.$$.fragment,Yt),Yt.forEach(t),ul.forEach(t),WBe=i(c),Pd=n(c,"H2",{class:!0});var rIe=s(Pd);kF=n(rIe,"A",{id:!0,class:!0,href:!0});var Kdt=s(kF);fme=n(Kdt,"SPAN",{});var Zdt=s(fme);m(QC.$$.fragment,Zdt),Zdt.forEach(t),Kdt.forEach(t),uOo=i(rIe),mme=n(rIe,"SPAN",{});var ect=s(mme);bOo=r(ect,"AutoModelForVision2Seq"),ect.forEach(t),rIe.forEach(t),HBe=i(c),ir=n(c,"DIV",{class:!0});var Fl=s(ir);m(WC.$$.fragment,Fl),FOo=i(Fl),$d=n(Fl,"P",{});var iJ=s($d);vOo=r(iJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vG=n(iJ,"A",{href:!0});var oct=s(vG);TOo=r(oct,"from_pretrained()"),oct.forEach(t),MOo=r(iJ," class method or the "),TG=n(iJ,"A",{href:!0});var rct=s(TG);EOo=r(rct,"from_config()"),rct.forEach(t),COo=r(iJ,` class
method.`),iJ.forEach(t),wOo=i(Fl),HC=n(Fl,"P",{});var tIe=s(HC);AOo=r(tIe,"This class cannot be instantiated directly using "),gme=n(tIe,"CODE",{});var tct=s(gme);yOo=r(tct,"__init__()"),tct.forEach(t),LOo=r(tIe," (throws an error)."),tIe.forEach(t),xOo=i(Fl),rt=n(Fl,"DIV",{class:!0});var vl=s(rt);m(UC.$$.fragment,vl),kOo=i(vl),hme=n(vl,"P",{});var act=s(hme);SOo=r(act,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),act.forEach(t),ROo=i(vl),Id=n(vl,"P",{});var dJ=s(Id);BOo=r(dJ,`Note:
Loading a model from its configuration file does `),pme=n(dJ,"STRONG",{});var nct=s(pme);POo=r(nct,"not"),nct.forEach(t),$Oo=r(dJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=n(dJ,"A",{href:!0});var sct=s(MG);IOo=r(sct,"from_pretrained()"),sct.forEach(t),qOo=r(dJ," to load the model weights."),dJ.forEach(t),NOo=i(vl),_me=n(vl,"P",{});var lct=s(_me);jOo=r(lct,"Examples:"),lct.forEach(t),DOo=i(vl),m(JC.$$.fragment,vl),vl.forEach(t),GOo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Kt=s(Je);m(YC.$$.fragment,Kt),OOo=i(Kt),ume=n(Kt,"P",{});var ict=s(ume);VOo=r(ict,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ict.forEach(t),XOo=i(Kt),rn=n(Kt,"P",{});var YE=s(rn);zOo=r(YE,"The model class to instantiate is selected based on the "),bme=n(YE,"CODE",{});var dct=s(bme);QOo=r(dct,"model_type"),dct.forEach(t),WOo=r(YE,` property of the config object (either
passed as an argument or loaded from `),Fme=n(YE,"CODE",{});var cct=s(Fme);HOo=r(cct,"pretrained_model_name_or_path"),cct.forEach(t),UOo=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vme=n(YE,"CODE",{});var fct=s(vme);JOo=r(fct,"pretrained_model_name_or_path"),fct.forEach(t),YOo=r(YE,":"),YE.forEach(t),KOo=i(Kt),Tme=n(Kt,"UL",{});var mct=s(Tme);SF=n(mct,"LI",{});var Dye=s(SF);Mme=n(Dye,"STRONG",{});var gct=s(Mme);ZOo=r(gct,"vision-encoder-decoder"),gct.forEach(t),eVo=r(Dye," \u2014 "),EG=n(Dye,"A",{href:!0});var hct=s(EG);oVo=r(hct,"VisionEncoderDecoderModel"),hct.forEach(t),rVo=r(Dye," (Vision Encoder decoder model)"),Dye.forEach(t),mct.forEach(t),tVo=i(Kt),RF=n(Kt,"P",{});var Gye=s(RF);aVo=r(Gye,"The model is set in evaluation mode by default using "),Eme=n(Gye,"CODE",{});var pct=s(Eme);nVo=r(pct,"model.eval()"),pct.forEach(t),sVo=r(Gye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cme=n(Gye,"CODE",{});var _ct=s(Cme);lVo=r(_ct,"model.train()"),_ct.forEach(t),Gye.forEach(t),iVo=i(Kt),wme=n(Kt,"P",{});var uct=s(wme);dVo=r(uct,"Examples:"),uct.forEach(t),cVo=i(Kt),m(KC.$$.fragment,Kt),Kt.forEach(t),Fl.forEach(t),UBe=i(c),qd=n(c,"H2",{class:!0});var aIe=s(qd);BF=n(aIe,"A",{id:!0,class:!0,href:!0});var bct=s(BF);Ame=n(bct,"SPAN",{});var Fct=s(Ame);m(ZC.$$.fragment,Fct),Fct.forEach(t),bct.forEach(t),fVo=i(aIe),yme=n(aIe,"SPAN",{});var vct=s(yme);mVo=r(vct,"AutoModelForAudioClassification"),vct.forEach(t),aIe.forEach(t),JBe=i(c),dr=n(c,"DIV",{class:!0});var Tl=s(dr);m(ew.$$.fragment,Tl),gVo=i(Tl),Nd=n(Tl,"P",{});var cJ=s(Nd);hVo=r(cJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),CG=n(cJ,"A",{href:!0});var Tct=s(CG);pVo=r(Tct,"from_pretrained()"),Tct.forEach(t),_Vo=r(cJ," class method or the "),wG=n(cJ,"A",{href:!0});var Mct=s(wG);uVo=r(Mct,"from_config()"),Mct.forEach(t),bVo=r(cJ,` class
method.`),cJ.forEach(t),FVo=i(Tl),ow=n(Tl,"P",{});var nIe=s(ow);vVo=r(nIe,"This class cannot be instantiated directly using "),Lme=n(nIe,"CODE",{});var Ect=s(Lme);TVo=r(Ect,"__init__()"),Ect.forEach(t),MVo=r(nIe," (throws an error)."),nIe.forEach(t),EVo=i(Tl),tt=n(Tl,"DIV",{class:!0});var Ml=s(tt);m(rw.$$.fragment,Ml),CVo=i(Ml),xme=n(Ml,"P",{});var Cct=s(xme);wVo=r(Cct,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Cct.forEach(t),AVo=i(Ml),jd=n(Ml,"P",{});var fJ=s(jd);yVo=r(fJ,`Note:
Loading a model from its configuration file does `),kme=n(fJ,"STRONG",{});var wct=s(kme);LVo=r(wct,"not"),wct.forEach(t),xVo=r(fJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AG=n(fJ,"A",{href:!0});var Act=s(AG);kVo=r(Act,"from_pretrained()"),Act.forEach(t),SVo=r(fJ," to load the model weights."),fJ.forEach(t),RVo=i(Ml),Sme=n(Ml,"P",{});var yct=s(Sme);BVo=r(yct,"Examples:"),yct.forEach(t),PVo=i(Ml),m(tw.$$.fragment,Ml),Ml.forEach(t),$Vo=i(Tl),Ye=n(Tl,"DIV",{class:!0});var Zt=s(Ye);m(aw.$$.fragment,Zt),IVo=i(Zt),Rme=n(Zt,"P",{});var Lct=s(Rme);qVo=r(Lct,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Lct.forEach(t),NVo=i(Zt),tn=n(Zt,"P",{});var KE=s(tn);jVo=r(KE,"The model class to instantiate is selected based on the "),Bme=n(KE,"CODE",{});var xct=s(Bme);DVo=r(xct,"model_type"),xct.forEach(t),GVo=r(KE,` property of the config object (either
passed as an argument or loaded from `),Pme=n(KE,"CODE",{});var kct=s(Pme);OVo=r(kct,"pretrained_model_name_or_path"),kct.forEach(t),VVo=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$me=n(KE,"CODE",{});var Sct=s($me);XVo=r(Sct,"pretrained_model_name_or_path"),Sct.forEach(t),zVo=r(KE,":"),KE.forEach(t),QVo=i(Zt),Re=n(Zt,"UL",{});var Do=s(Re);PF=n(Do,"LI",{});var Oye=s(PF);Ime=n(Oye,"STRONG",{});var Rct=s(Ime);WVo=r(Rct,"data2vec-audio"),Rct.forEach(t),HVo=r(Oye," \u2014 "),yG=n(Oye,"A",{href:!0});var Bct=s(yG);UVo=r(Bct,"Data2VecAudioForSequenceClassification"),Bct.forEach(t),JVo=r(Oye," (Data2VecAudio model)"),Oye.forEach(t),YVo=i(Do),$F=n(Do,"LI",{});var Vye=s($F);qme=n(Vye,"STRONG",{});var Pct=s(qme);KVo=r(Pct,"hubert"),Pct.forEach(t),ZVo=r(Vye," \u2014 "),LG=n(Vye,"A",{href:!0});var $ct=s(LG);eXo=r($ct,"HubertForSequenceClassification"),$ct.forEach(t),oXo=r(Vye," (Hubert model)"),Vye.forEach(t),rXo=i(Do),IF=n(Do,"LI",{});var Xye=s(IF);Nme=n(Xye,"STRONG",{});var Ict=s(Nme);tXo=r(Ict,"sew"),Ict.forEach(t),aXo=r(Xye," \u2014 "),xG=n(Xye,"A",{href:!0});var qct=s(xG);nXo=r(qct,"SEWForSequenceClassification"),qct.forEach(t),sXo=r(Xye," (SEW model)"),Xye.forEach(t),lXo=i(Do),qF=n(Do,"LI",{});var zye=s(qF);jme=n(zye,"STRONG",{});var Nct=s(jme);iXo=r(Nct,"sew-d"),Nct.forEach(t),dXo=r(zye," \u2014 "),kG=n(zye,"A",{href:!0});var jct=s(kG);cXo=r(jct,"SEWDForSequenceClassification"),jct.forEach(t),fXo=r(zye," (SEW-D model)"),zye.forEach(t),mXo=i(Do),NF=n(Do,"LI",{});var Qye=s(NF);Dme=n(Qye,"STRONG",{});var Dct=s(Dme);gXo=r(Dct,"unispeech"),Dct.forEach(t),hXo=r(Qye," \u2014 "),SG=n(Qye,"A",{href:!0});var Gct=s(SG);pXo=r(Gct,"UniSpeechForSequenceClassification"),Gct.forEach(t),_Xo=r(Qye," (UniSpeech model)"),Qye.forEach(t),uXo=i(Do),jF=n(Do,"LI",{});var Wye=s(jF);Gme=n(Wye,"STRONG",{});var Oct=s(Gme);bXo=r(Oct,"unispeech-sat"),Oct.forEach(t),FXo=r(Wye," \u2014 "),RG=n(Wye,"A",{href:!0});var Vct=s(RG);vXo=r(Vct,"UniSpeechSatForSequenceClassification"),Vct.forEach(t),TXo=r(Wye," (UniSpeechSat model)"),Wye.forEach(t),MXo=i(Do),DF=n(Do,"LI",{});var Hye=s(DF);Ome=n(Hye,"STRONG",{});var Xct=s(Ome);EXo=r(Xct,"wav2vec2"),Xct.forEach(t),CXo=r(Hye," \u2014 "),BG=n(Hye,"A",{href:!0});var zct=s(BG);wXo=r(zct,"Wav2Vec2ForSequenceClassification"),zct.forEach(t),AXo=r(Hye," (Wav2Vec2 model)"),Hye.forEach(t),yXo=i(Do),GF=n(Do,"LI",{});var Uye=s(GF);Vme=n(Uye,"STRONG",{});var Qct=s(Vme);LXo=r(Qct,"wavlm"),Qct.forEach(t),xXo=r(Uye," \u2014 "),PG=n(Uye,"A",{href:!0});var Wct=s(PG);kXo=r(Wct,"WavLMForSequenceClassification"),Wct.forEach(t),SXo=r(Uye," (WavLM model)"),Uye.forEach(t),Do.forEach(t),RXo=i(Zt),OF=n(Zt,"P",{});var Jye=s(OF);BXo=r(Jye,"The model is set in evaluation mode by default using "),Xme=n(Jye,"CODE",{});var Hct=s(Xme);PXo=r(Hct,"model.eval()"),Hct.forEach(t),$Xo=r(Jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zme=n(Jye,"CODE",{});var Uct=s(zme);IXo=r(Uct,"model.train()"),Uct.forEach(t),Jye.forEach(t),qXo=i(Zt),Qme=n(Zt,"P",{});var Jct=s(Qme);NXo=r(Jct,"Examples:"),Jct.forEach(t),jXo=i(Zt),m(nw.$$.fragment,Zt),Zt.forEach(t),Tl.forEach(t),YBe=i(c),Dd=n(c,"H2",{class:!0});var sIe=s(Dd);VF=n(sIe,"A",{id:!0,class:!0,href:!0});var Yct=s(VF);Wme=n(Yct,"SPAN",{});var Kct=s(Wme);m(sw.$$.fragment,Kct),Kct.forEach(t),Yct.forEach(t),DXo=i(sIe),Hme=n(sIe,"SPAN",{});var Zct=s(Hme);GXo=r(Zct,"AutoModelForAudioFrameClassification"),Zct.forEach(t),sIe.forEach(t),KBe=i(c),cr=n(c,"DIV",{class:!0});var El=s(cr);m(lw.$$.fragment,El),OXo=i(El),Gd=n(El,"P",{});var mJ=s(Gd);VXo=r(mJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),$G=n(mJ,"A",{href:!0});var eft=s($G);XXo=r(eft,"from_pretrained()"),eft.forEach(t),zXo=r(mJ," class method or the "),IG=n(mJ,"A",{href:!0});var oft=s(IG);QXo=r(oft,"from_config()"),oft.forEach(t),WXo=r(mJ,` class
method.`),mJ.forEach(t),HXo=i(El),iw=n(El,"P",{});var lIe=s(iw);UXo=r(lIe,"This class cannot be instantiated directly using "),Ume=n(lIe,"CODE",{});var rft=s(Ume);JXo=r(rft,"__init__()"),rft.forEach(t),YXo=r(lIe," (throws an error)."),lIe.forEach(t),KXo=i(El),at=n(El,"DIV",{class:!0});var Cl=s(at);m(dw.$$.fragment,Cl),ZXo=i(Cl),Jme=n(Cl,"P",{});var tft=s(Jme);ezo=r(tft,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),tft.forEach(t),ozo=i(Cl),Od=n(Cl,"P",{});var gJ=s(Od);rzo=r(gJ,`Note:
Loading a model from its configuration file does `),Yme=n(gJ,"STRONG",{});var aft=s(Yme);tzo=r(aft,"not"),aft.forEach(t),azo=r(gJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=n(gJ,"A",{href:!0});var nft=s(qG);nzo=r(nft,"from_pretrained()"),nft.forEach(t),szo=r(gJ," to load the model weights."),gJ.forEach(t),lzo=i(Cl),Kme=n(Cl,"P",{});var sft=s(Kme);izo=r(sft,"Examples:"),sft.forEach(t),dzo=i(Cl),m(cw.$$.fragment,Cl),Cl.forEach(t),czo=i(El),Ke=n(El,"DIV",{class:!0});var ea=s(Ke);m(fw.$$.fragment,ea),fzo=i(ea),Zme=n(ea,"P",{});var lft=s(Zme);mzo=r(lft,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),lft.forEach(t),gzo=i(ea),an=n(ea,"P",{});var ZE=s(an);hzo=r(ZE,"The model class to instantiate is selected based on the "),ege=n(ZE,"CODE",{});var ift=s(ege);pzo=r(ift,"model_type"),ift.forEach(t),_zo=r(ZE,` property of the config object (either
passed as an argument or loaded from `),oge=n(ZE,"CODE",{});var dft=s(oge);uzo=r(dft,"pretrained_model_name_or_path"),dft.forEach(t),bzo=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rge=n(ZE,"CODE",{});var cft=s(rge);Fzo=r(cft,"pretrained_model_name_or_path"),cft.forEach(t),vzo=r(ZE,":"),ZE.forEach(t),Tzo=i(ea),nn=n(ea,"UL",{});var e5=s(nn);XF=n(e5,"LI",{});var Yye=s(XF);tge=n(Yye,"STRONG",{});var fft=s(tge);Mzo=r(fft,"data2vec-audio"),fft.forEach(t),Ezo=r(Yye," \u2014 "),NG=n(Yye,"A",{href:!0});var mft=s(NG);Czo=r(mft,"Data2VecAudioForAudioFrameClassification"),mft.forEach(t),wzo=r(Yye," (Data2VecAudio model)"),Yye.forEach(t),Azo=i(e5),zF=n(e5,"LI",{});var Kye=s(zF);age=n(Kye,"STRONG",{});var gft=s(age);yzo=r(gft,"unispeech-sat"),gft.forEach(t),Lzo=r(Kye," \u2014 "),jG=n(Kye,"A",{href:!0});var hft=s(jG);xzo=r(hft,"UniSpeechSatForAudioFrameClassification"),hft.forEach(t),kzo=r(Kye," (UniSpeechSat model)"),Kye.forEach(t),Szo=i(e5),QF=n(e5,"LI",{});var Zye=s(QF);nge=n(Zye,"STRONG",{});var pft=s(nge);Rzo=r(pft,"wav2vec2"),pft.forEach(t),Bzo=r(Zye," \u2014 "),DG=n(Zye,"A",{href:!0});var _ft=s(DG);Pzo=r(_ft,"Wav2Vec2ForAudioFrameClassification"),_ft.forEach(t),$zo=r(Zye," (Wav2Vec2 model)"),Zye.forEach(t),Izo=i(e5),WF=n(e5,"LI",{});var eLe=s(WF);sge=n(eLe,"STRONG",{});var uft=s(sge);qzo=r(uft,"wavlm"),uft.forEach(t),Nzo=r(eLe," \u2014 "),GG=n(eLe,"A",{href:!0});var bft=s(GG);jzo=r(bft,"WavLMForAudioFrameClassification"),bft.forEach(t),Dzo=r(eLe," (WavLM model)"),eLe.forEach(t),e5.forEach(t),Gzo=i(ea),HF=n(ea,"P",{});var oLe=s(HF);Ozo=r(oLe,"The model is set in evaluation mode by default using "),lge=n(oLe,"CODE",{});var Fft=s(lge);Vzo=r(Fft,"model.eval()"),Fft.forEach(t),Xzo=r(oLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ige=n(oLe,"CODE",{});var vft=s(ige);zzo=r(vft,"model.train()"),vft.forEach(t),oLe.forEach(t),Qzo=i(ea),dge=n(ea,"P",{});var Tft=s(dge);Wzo=r(Tft,"Examples:"),Tft.forEach(t),Hzo=i(ea),m(mw.$$.fragment,ea),ea.forEach(t),El.forEach(t),ZBe=i(c),Vd=n(c,"H2",{class:!0});var iIe=s(Vd);UF=n(iIe,"A",{id:!0,class:!0,href:!0});var Mft=s(UF);cge=n(Mft,"SPAN",{});var Eft=s(cge);m(gw.$$.fragment,Eft),Eft.forEach(t),Mft.forEach(t),Uzo=i(iIe),fge=n(iIe,"SPAN",{});var Cft=s(fge);Jzo=r(Cft,"AutoModelForCTC"),Cft.forEach(t),iIe.forEach(t),ePe=i(c),fr=n(c,"DIV",{class:!0});var wl=s(fr);m(hw.$$.fragment,wl),Yzo=i(wl),Xd=n(wl,"P",{});var hJ=s(Xd);Kzo=r(hJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),OG=n(hJ,"A",{href:!0});var wft=s(OG);Zzo=r(wft,"from_pretrained()"),wft.forEach(t),eQo=r(hJ," class method or the "),VG=n(hJ,"A",{href:!0});var Aft=s(VG);oQo=r(Aft,"from_config()"),Aft.forEach(t),rQo=r(hJ,` class
method.`),hJ.forEach(t),tQo=i(wl),pw=n(wl,"P",{});var dIe=s(pw);aQo=r(dIe,"This class cannot be instantiated directly using "),mge=n(dIe,"CODE",{});var yft=s(mge);nQo=r(yft,"__init__()"),yft.forEach(t),sQo=r(dIe," (throws an error)."),dIe.forEach(t),lQo=i(wl),nt=n(wl,"DIV",{class:!0});var Al=s(nt);m(_w.$$.fragment,Al),iQo=i(Al),gge=n(Al,"P",{});var Lft=s(gge);dQo=r(Lft,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Lft.forEach(t),cQo=i(Al),zd=n(Al,"P",{});var pJ=s(zd);fQo=r(pJ,`Note:
Loading a model from its configuration file does `),hge=n(pJ,"STRONG",{});var xft=s(hge);mQo=r(xft,"not"),xft.forEach(t),gQo=r(pJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XG=n(pJ,"A",{href:!0});var kft=s(XG);hQo=r(kft,"from_pretrained()"),kft.forEach(t),pQo=r(pJ," to load the model weights."),pJ.forEach(t),_Qo=i(Al),pge=n(Al,"P",{});var Sft=s(pge);uQo=r(Sft,"Examples:"),Sft.forEach(t),bQo=i(Al),m(uw.$$.fragment,Al),Al.forEach(t),FQo=i(wl),Ze=n(wl,"DIV",{class:!0});var oa=s(Ze);m(bw.$$.fragment,oa),vQo=i(oa),_ge=n(oa,"P",{});var Rft=s(_ge);TQo=r(Rft,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Rft.forEach(t),MQo=i(oa),sn=n(oa,"P",{});var o5=s(sn);EQo=r(o5,"The model class to instantiate is selected based on the "),uge=n(o5,"CODE",{});var Bft=s(uge);CQo=r(Bft,"model_type"),Bft.forEach(t),wQo=r(o5,` property of the config object (either
passed as an argument or loaded from `),bge=n(o5,"CODE",{});var Pft=s(bge);AQo=r(Pft,"pretrained_model_name_or_path"),Pft.forEach(t),yQo=r(o5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fge=n(o5,"CODE",{});var $ft=s(Fge);LQo=r($ft,"pretrained_model_name_or_path"),$ft.forEach(t),xQo=r(o5,":"),o5.forEach(t),kQo=i(oa),Be=n(oa,"UL",{});var Go=s(Be);JF=n(Go,"LI",{});var rLe=s(JF);vge=n(rLe,"STRONG",{});var Ift=s(vge);SQo=r(Ift,"data2vec-audio"),Ift.forEach(t),RQo=r(rLe," \u2014 "),zG=n(rLe,"A",{href:!0});var qft=s(zG);BQo=r(qft,"Data2VecAudioForCTC"),qft.forEach(t),PQo=r(rLe," (Data2VecAudio model)"),rLe.forEach(t),$Qo=i(Go),YF=n(Go,"LI",{});var tLe=s(YF);Tge=n(tLe,"STRONG",{});var Nft=s(Tge);IQo=r(Nft,"hubert"),Nft.forEach(t),qQo=r(tLe," \u2014 "),QG=n(tLe,"A",{href:!0});var jft=s(QG);NQo=r(jft,"HubertForCTC"),jft.forEach(t),jQo=r(tLe," (Hubert model)"),tLe.forEach(t),DQo=i(Go),KF=n(Go,"LI",{});var aLe=s(KF);Mge=n(aLe,"STRONG",{});var Dft=s(Mge);GQo=r(Dft,"sew"),Dft.forEach(t),OQo=r(aLe," \u2014 "),WG=n(aLe,"A",{href:!0});var Gft=s(WG);VQo=r(Gft,"SEWForCTC"),Gft.forEach(t),XQo=r(aLe," (SEW model)"),aLe.forEach(t),zQo=i(Go),ZF=n(Go,"LI",{});var nLe=s(ZF);Ege=n(nLe,"STRONG",{});var Oft=s(Ege);QQo=r(Oft,"sew-d"),Oft.forEach(t),WQo=r(nLe," \u2014 "),HG=n(nLe,"A",{href:!0});var Vft=s(HG);HQo=r(Vft,"SEWDForCTC"),Vft.forEach(t),UQo=r(nLe," (SEW-D model)"),nLe.forEach(t),JQo=i(Go),ev=n(Go,"LI",{});var sLe=s(ev);Cge=n(sLe,"STRONG",{});var Xft=s(Cge);YQo=r(Xft,"unispeech"),Xft.forEach(t),KQo=r(sLe," \u2014 "),UG=n(sLe,"A",{href:!0});var zft=s(UG);ZQo=r(zft,"UniSpeechForCTC"),zft.forEach(t),eWo=r(sLe," (UniSpeech model)"),sLe.forEach(t),oWo=i(Go),ov=n(Go,"LI",{});var lLe=s(ov);wge=n(lLe,"STRONG",{});var Qft=s(wge);rWo=r(Qft,"unispeech-sat"),Qft.forEach(t),tWo=r(lLe," \u2014 "),JG=n(lLe,"A",{href:!0});var Wft=s(JG);aWo=r(Wft,"UniSpeechSatForCTC"),Wft.forEach(t),nWo=r(lLe," (UniSpeechSat model)"),lLe.forEach(t),sWo=i(Go),rv=n(Go,"LI",{});var iLe=s(rv);Age=n(iLe,"STRONG",{});var Hft=s(Age);lWo=r(Hft,"wav2vec2"),Hft.forEach(t),iWo=r(iLe," \u2014 "),YG=n(iLe,"A",{href:!0});var Uft=s(YG);dWo=r(Uft,"Wav2Vec2ForCTC"),Uft.forEach(t),cWo=r(iLe," (Wav2Vec2 model)"),iLe.forEach(t),fWo=i(Go),tv=n(Go,"LI",{});var dLe=s(tv);yge=n(dLe,"STRONG",{});var Jft=s(yge);mWo=r(Jft,"wavlm"),Jft.forEach(t),gWo=r(dLe," \u2014 "),KG=n(dLe,"A",{href:!0});var Yft=s(KG);hWo=r(Yft,"WavLMForCTC"),Yft.forEach(t),pWo=r(dLe," (WavLM model)"),dLe.forEach(t),Go.forEach(t),_Wo=i(oa),av=n(oa,"P",{});var cLe=s(av);uWo=r(cLe,"The model is set in evaluation mode by default using "),Lge=n(cLe,"CODE",{});var Kft=s(Lge);bWo=r(Kft,"model.eval()"),Kft.forEach(t),FWo=r(cLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xge=n(cLe,"CODE",{});var Zft=s(xge);vWo=r(Zft,"model.train()"),Zft.forEach(t),cLe.forEach(t),TWo=i(oa),kge=n(oa,"P",{});var emt=s(kge);MWo=r(emt,"Examples:"),emt.forEach(t),EWo=i(oa),m(Fw.$$.fragment,oa),oa.forEach(t),wl.forEach(t),oPe=i(c),Qd=n(c,"H2",{class:!0});var cIe=s(Qd);nv=n(cIe,"A",{id:!0,class:!0,href:!0});var omt=s(nv);Sge=n(omt,"SPAN",{});var rmt=s(Sge);m(vw.$$.fragment,rmt),rmt.forEach(t),omt.forEach(t),CWo=i(cIe),Rge=n(cIe,"SPAN",{});var tmt=s(Rge);wWo=r(tmt,"AutoModelForSpeechSeq2Seq"),tmt.forEach(t),cIe.forEach(t),rPe=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(Tw.$$.fragment,yl),AWo=i(yl),Wd=n(yl,"P",{});var _J=s(Wd);yWo=r(_J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZG=n(_J,"A",{href:!0});var amt=s(ZG);LWo=r(amt,"from_pretrained()"),amt.forEach(t),xWo=r(_J," class method or the "),eO=n(_J,"A",{href:!0});var nmt=s(eO);kWo=r(nmt,"from_config()"),nmt.forEach(t),SWo=r(_J,` class
method.`),_J.forEach(t),RWo=i(yl),Mw=n(yl,"P",{});var fIe=s(Mw);BWo=r(fIe,"This class cannot be instantiated directly using "),Bge=n(fIe,"CODE",{});var smt=s(Bge);PWo=r(smt,"__init__()"),smt.forEach(t),$Wo=r(fIe," (throws an error)."),fIe.forEach(t),IWo=i(yl),st=n(yl,"DIV",{class:!0});var Ll=s(st);m(Ew.$$.fragment,Ll),qWo=i(Ll),Pge=n(Ll,"P",{});var lmt=s(Pge);NWo=r(lmt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),lmt.forEach(t),jWo=i(Ll),Hd=n(Ll,"P",{});var uJ=s(Hd);DWo=r(uJ,`Note:
Loading a model from its configuration file does `),$ge=n(uJ,"STRONG",{});var imt=s($ge);GWo=r(imt,"not"),imt.forEach(t),OWo=r(uJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oO=n(uJ,"A",{href:!0});var dmt=s(oO);VWo=r(dmt,"from_pretrained()"),dmt.forEach(t),XWo=r(uJ," to load the model weights."),uJ.forEach(t),zWo=i(Ll),Ige=n(Ll,"P",{});var cmt=s(Ige);QWo=r(cmt,"Examples:"),cmt.forEach(t),WWo=i(Ll),m(Cw.$$.fragment,Ll),Ll.forEach(t),HWo=i(yl),eo=n(yl,"DIV",{class:!0});var ra=s(eo);m(ww.$$.fragment,ra),UWo=i(ra),qge=n(ra,"P",{});var fmt=s(qge);JWo=r(fmt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fmt.forEach(t),YWo=i(ra),ln=n(ra,"P",{});var r5=s(ln);KWo=r(r5,"The model class to instantiate is selected based on the "),Nge=n(r5,"CODE",{});var mmt=s(Nge);ZWo=r(mmt,"model_type"),mmt.forEach(t),eHo=r(r5,` property of the config object (either
passed as an argument or loaded from `),jge=n(r5,"CODE",{});var gmt=s(jge);oHo=r(gmt,"pretrained_model_name_or_path"),gmt.forEach(t),rHo=r(r5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=n(r5,"CODE",{});var hmt=s(Dge);tHo=r(hmt,"pretrained_model_name_or_path"),hmt.forEach(t),aHo=r(r5,":"),r5.forEach(t),nHo=i(ra),Aw=n(ra,"UL",{});var mIe=s(Aw);sv=n(mIe,"LI",{});var fLe=s(sv);Gge=n(fLe,"STRONG",{});var pmt=s(Gge);sHo=r(pmt,"speech-encoder-decoder"),pmt.forEach(t),lHo=r(fLe," \u2014 "),rO=n(fLe,"A",{href:!0});var _mt=s(rO);iHo=r(_mt,"SpeechEncoderDecoderModel"),_mt.forEach(t),dHo=r(fLe," (Speech Encoder decoder model)"),fLe.forEach(t),cHo=i(mIe),lv=n(mIe,"LI",{});var mLe=s(lv);Oge=n(mLe,"STRONG",{});var umt=s(Oge);fHo=r(umt,"speech_to_text"),umt.forEach(t),mHo=r(mLe," \u2014 "),tO=n(mLe,"A",{href:!0});var bmt=s(tO);gHo=r(bmt,"Speech2TextForConditionalGeneration"),bmt.forEach(t),hHo=r(mLe," (Speech2Text model)"),mLe.forEach(t),mIe.forEach(t),pHo=i(ra),iv=n(ra,"P",{});var gLe=s(iv);_Ho=r(gLe,"The model is set in evaluation mode by default using "),Vge=n(gLe,"CODE",{});var Fmt=s(Vge);uHo=r(Fmt,"model.eval()"),Fmt.forEach(t),bHo=r(gLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xge=n(gLe,"CODE",{});var vmt=s(Xge);FHo=r(vmt,"model.train()"),vmt.forEach(t),gLe.forEach(t),vHo=i(ra),zge=n(ra,"P",{});var Tmt=s(zge);THo=r(Tmt,"Examples:"),Tmt.forEach(t),MHo=i(ra),m(yw.$$.fragment,ra),ra.forEach(t),yl.forEach(t),tPe=i(c),Ud=n(c,"H2",{class:!0});var gIe=s(Ud);dv=n(gIe,"A",{id:!0,class:!0,href:!0});var Mmt=s(dv);Qge=n(Mmt,"SPAN",{});var Emt=s(Qge);m(Lw.$$.fragment,Emt),Emt.forEach(t),Mmt.forEach(t),EHo=i(gIe),Wge=n(gIe,"SPAN",{});var Cmt=s(Wge);CHo=r(Cmt,"AutoModelForAudioXVector"),Cmt.forEach(t),gIe.forEach(t),aPe=i(c),gr=n(c,"DIV",{class:!0});var xl=s(gr);m(xw.$$.fragment,xl),wHo=i(xl),Jd=n(xl,"P",{});var bJ=s(Jd);AHo=r(bJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),aO=n(bJ,"A",{href:!0});var wmt=s(aO);yHo=r(wmt,"from_pretrained()"),wmt.forEach(t),LHo=r(bJ," class method or the "),nO=n(bJ,"A",{href:!0});var Amt=s(nO);xHo=r(Amt,"from_config()"),Amt.forEach(t),kHo=r(bJ,` class
method.`),bJ.forEach(t),SHo=i(xl),kw=n(xl,"P",{});var hIe=s(kw);RHo=r(hIe,"This class cannot be instantiated directly using "),Hge=n(hIe,"CODE",{});var ymt=s(Hge);BHo=r(ymt,"__init__()"),ymt.forEach(t),PHo=r(hIe," (throws an error)."),hIe.forEach(t),$Ho=i(xl),lt=n(xl,"DIV",{class:!0});var kl=s(lt);m(Sw.$$.fragment,kl),IHo=i(kl),Uge=n(kl,"P",{});var Lmt=s(Uge);qHo=r(Lmt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Lmt.forEach(t),NHo=i(kl),Yd=n(kl,"P",{});var FJ=s(Yd);jHo=r(FJ,`Note:
Loading a model from its configuration file does `),Jge=n(FJ,"STRONG",{});var xmt=s(Jge);DHo=r(xmt,"not"),xmt.forEach(t),GHo=r(FJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=n(FJ,"A",{href:!0});var kmt=s(sO);OHo=r(kmt,"from_pretrained()"),kmt.forEach(t),VHo=r(FJ," to load the model weights."),FJ.forEach(t),XHo=i(kl),Yge=n(kl,"P",{});var Smt=s(Yge);zHo=r(Smt,"Examples:"),Smt.forEach(t),QHo=i(kl),m(Rw.$$.fragment,kl),kl.forEach(t),WHo=i(xl),oo=n(xl,"DIV",{class:!0});var ta=s(oo);m(Bw.$$.fragment,ta),HHo=i(ta),Kge=n(ta,"P",{});var Rmt=s(Kge);UHo=r(Rmt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Rmt.forEach(t),JHo=i(ta),dn=n(ta,"P",{});var t5=s(dn);YHo=r(t5,"The model class to instantiate is selected based on the "),Zge=n(t5,"CODE",{});var Bmt=s(Zge);KHo=r(Bmt,"model_type"),Bmt.forEach(t),ZHo=r(t5,` property of the config object (either
passed as an argument or loaded from `),ehe=n(t5,"CODE",{});var Pmt=s(ehe);eUo=r(Pmt,"pretrained_model_name_or_path"),Pmt.forEach(t),oUo=r(t5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ohe=n(t5,"CODE",{});var $mt=s(ohe);rUo=r($mt,"pretrained_model_name_or_path"),$mt.forEach(t),tUo=r(t5,":"),t5.forEach(t),aUo=i(ta),cn=n(ta,"UL",{});var a5=s(cn);cv=n(a5,"LI",{});var hLe=s(cv);rhe=n(hLe,"STRONG",{});var Imt=s(rhe);nUo=r(Imt,"data2vec-audio"),Imt.forEach(t),sUo=r(hLe," \u2014 "),lO=n(hLe,"A",{href:!0});var qmt=s(lO);lUo=r(qmt,"Data2VecAudioForXVector"),qmt.forEach(t),iUo=r(hLe," (Data2VecAudio model)"),hLe.forEach(t),dUo=i(a5),fv=n(a5,"LI",{});var pLe=s(fv);the=n(pLe,"STRONG",{});var Nmt=s(the);cUo=r(Nmt,"unispeech-sat"),Nmt.forEach(t),fUo=r(pLe," \u2014 "),iO=n(pLe,"A",{href:!0});var jmt=s(iO);mUo=r(jmt,"UniSpeechSatForXVector"),jmt.forEach(t),gUo=r(pLe," (UniSpeechSat model)"),pLe.forEach(t),hUo=i(a5),mv=n(a5,"LI",{});var _Le=s(mv);ahe=n(_Le,"STRONG",{});var Dmt=s(ahe);pUo=r(Dmt,"wav2vec2"),Dmt.forEach(t),_Uo=r(_Le," \u2014 "),dO=n(_Le,"A",{href:!0});var Gmt=s(dO);uUo=r(Gmt,"Wav2Vec2ForXVector"),Gmt.forEach(t),bUo=r(_Le," (Wav2Vec2 model)"),_Le.forEach(t),FUo=i(a5),gv=n(a5,"LI",{});var uLe=s(gv);nhe=n(uLe,"STRONG",{});var Omt=s(nhe);vUo=r(Omt,"wavlm"),Omt.forEach(t),TUo=r(uLe," \u2014 "),cO=n(uLe,"A",{href:!0});var Vmt=s(cO);MUo=r(Vmt,"WavLMForXVector"),Vmt.forEach(t),EUo=r(uLe," (WavLM model)"),uLe.forEach(t),a5.forEach(t),CUo=i(ta),hv=n(ta,"P",{});var bLe=s(hv);wUo=r(bLe,"The model is set in evaluation mode by default using "),she=n(bLe,"CODE",{});var Xmt=s(she);AUo=r(Xmt,"model.eval()"),Xmt.forEach(t),yUo=r(bLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=n(bLe,"CODE",{});var zmt=s(lhe);LUo=r(zmt,"model.train()"),zmt.forEach(t),bLe.forEach(t),xUo=i(ta),ihe=n(ta,"P",{});var Qmt=s(ihe);kUo=r(Qmt,"Examples:"),Qmt.forEach(t),SUo=i(ta),m(Pw.$$.fragment,ta),ta.forEach(t),xl.forEach(t),nPe=i(c),Kd=n(c,"H2",{class:!0});var pIe=s(Kd);pv=n(pIe,"A",{id:!0,class:!0,href:!0});var Wmt=s(pv);dhe=n(Wmt,"SPAN",{});var Hmt=s(dhe);m($w.$$.fragment,Hmt),Hmt.forEach(t),Wmt.forEach(t),RUo=i(pIe),che=n(pIe,"SPAN",{});var Umt=s(che);BUo=r(Umt,"AutoModelForMaskedImageModeling"),Umt.forEach(t),pIe.forEach(t),sPe=i(c),hr=n(c,"DIV",{class:!0});var Sl=s(hr);m(Iw.$$.fragment,Sl),PUo=i(Sl),Zd=n(Sl,"P",{});var vJ=s(Zd);$Uo=r(vJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),fO=n(vJ,"A",{href:!0});var Jmt=s(fO);IUo=r(Jmt,"from_pretrained()"),Jmt.forEach(t),qUo=r(vJ," class method or the "),mO=n(vJ,"A",{href:!0});var Ymt=s(mO);NUo=r(Ymt,"from_config()"),Ymt.forEach(t),jUo=r(vJ,` class
method.`),vJ.forEach(t),DUo=i(Sl),qw=n(Sl,"P",{});var _Ie=s(qw);GUo=r(_Ie,"This class cannot be instantiated directly using "),fhe=n(_Ie,"CODE",{});var Kmt=s(fhe);OUo=r(Kmt,"__init__()"),Kmt.forEach(t),VUo=r(_Ie," (throws an error)."),_Ie.forEach(t),XUo=i(Sl),it=n(Sl,"DIV",{class:!0});var Rl=s(it);m(Nw.$$.fragment,Rl),zUo=i(Rl),mhe=n(Rl,"P",{});var Zmt=s(mhe);QUo=r(Zmt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Zmt.forEach(t),WUo=i(Rl),ec=n(Rl,"P",{});var TJ=s(ec);HUo=r(TJ,`Note:
Loading a model from its configuration file does `),ghe=n(TJ,"STRONG",{});var egt=s(ghe);UUo=r(egt,"not"),egt.forEach(t),JUo=r(TJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gO=n(TJ,"A",{href:!0});var ogt=s(gO);YUo=r(ogt,"from_pretrained()"),ogt.forEach(t),KUo=r(TJ," to load the model weights."),TJ.forEach(t),ZUo=i(Rl),hhe=n(Rl,"P",{});var rgt=s(hhe);eJo=r(rgt,"Examples:"),rgt.forEach(t),oJo=i(Rl),m(jw.$$.fragment,Rl),Rl.forEach(t),rJo=i(Sl),ro=n(Sl,"DIV",{class:!0});var aa=s(ro);m(Dw.$$.fragment,aa),tJo=i(aa),phe=n(aa,"P",{});var tgt=s(phe);aJo=r(tgt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),tgt.forEach(t),nJo=i(aa),fn=n(aa,"P",{});var n5=s(fn);sJo=r(n5,"The model class to instantiate is selected based on the "),_he=n(n5,"CODE",{});var agt=s(_he);lJo=r(agt,"model_type"),agt.forEach(t),iJo=r(n5,` property of the config object (either
passed as an argument or loaded from `),uhe=n(n5,"CODE",{});var ngt=s(uhe);dJo=r(ngt,"pretrained_model_name_or_path"),ngt.forEach(t),cJo=r(n5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=n(n5,"CODE",{});var sgt=s(bhe);fJo=r(sgt,"pretrained_model_name_or_path"),sgt.forEach(t),mJo=r(n5,":"),n5.forEach(t),gJo=i(aa),oc=n(aa,"UL",{});var MJ=s(oc);_v=n(MJ,"LI",{});var FLe=s(_v);Fhe=n(FLe,"STRONG",{});var lgt=s(Fhe);hJo=r(lgt,"deit"),lgt.forEach(t),pJo=r(FLe," \u2014 "),hO=n(FLe,"A",{href:!0});var igt=s(hO);_Jo=r(igt,"DeiTForMaskedImageModeling"),igt.forEach(t),uJo=r(FLe," (DeiT model)"),FLe.forEach(t),bJo=i(MJ),uv=n(MJ,"LI",{});var vLe=s(uv);vhe=n(vLe,"STRONG",{});var dgt=s(vhe);FJo=r(dgt,"swin"),dgt.forEach(t),vJo=r(vLe," \u2014 "),pO=n(vLe,"A",{href:!0});var cgt=s(pO);TJo=r(cgt,"SwinForMaskedImageModeling"),cgt.forEach(t),MJo=r(vLe," (Swin model)"),vLe.forEach(t),EJo=i(MJ),bv=n(MJ,"LI",{});var TLe=s(bv);The=n(TLe,"STRONG",{});var fgt=s(The);CJo=r(fgt,"vit"),fgt.forEach(t),wJo=r(TLe," \u2014 "),_O=n(TLe,"A",{href:!0});var mgt=s(_O);AJo=r(mgt,"ViTForMaskedImageModeling"),mgt.forEach(t),yJo=r(TLe," (ViT model)"),TLe.forEach(t),MJ.forEach(t),LJo=i(aa),Fv=n(aa,"P",{});var MLe=s(Fv);xJo=r(MLe,"The model is set in evaluation mode by default using "),Mhe=n(MLe,"CODE",{});var ggt=s(Mhe);kJo=r(ggt,"model.eval()"),ggt.forEach(t),SJo=r(MLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ehe=n(MLe,"CODE",{});var hgt=s(Ehe);RJo=r(hgt,"model.train()"),hgt.forEach(t),MLe.forEach(t),BJo=i(aa),Che=n(aa,"P",{});var pgt=s(Che);PJo=r(pgt,"Examples:"),pgt.forEach(t),$Jo=i(aa),m(Gw.$$.fragment,aa),aa.forEach(t),Sl.forEach(t),lPe=i(c),rc=n(c,"H2",{class:!0});var uIe=s(rc);vv=n(uIe,"A",{id:!0,class:!0,href:!0});var _gt=s(vv);whe=n(_gt,"SPAN",{});var ugt=s(whe);m(Ow.$$.fragment,ugt),ugt.forEach(t),_gt.forEach(t),IJo=i(uIe),Ahe=n(uIe,"SPAN",{});var bgt=s(Ahe);qJo=r(bgt,"AutoModelForObjectDetection"),bgt.forEach(t),uIe.forEach(t),iPe=i(c),pr=n(c,"DIV",{class:!0});var Bl=s(pr);m(Vw.$$.fragment,Bl),NJo=i(Bl),tc=n(Bl,"P",{});var EJ=s(tc);jJo=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),uO=n(EJ,"A",{href:!0});var Fgt=s(uO);DJo=r(Fgt,"from_pretrained()"),Fgt.forEach(t),GJo=r(EJ," class method or the "),bO=n(EJ,"A",{href:!0});var vgt=s(bO);OJo=r(vgt,"from_config()"),vgt.forEach(t),VJo=r(EJ,` class
method.`),EJ.forEach(t),XJo=i(Bl),Xw=n(Bl,"P",{});var bIe=s(Xw);zJo=r(bIe,"This class cannot be instantiated directly using "),yhe=n(bIe,"CODE",{});var Tgt=s(yhe);QJo=r(Tgt,"__init__()"),Tgt.forEach(t),WJo=r(bIe," (throws an error)."),bIe.forEach(t),HJo=i(Bl),dt=n(Bl,"DIV",{class:!0});var Pl=s(dt);m(zw.$$.fragment,Pl),UJo=i(Pl),Lhe=n(Pl,"P",{});var Mgt=s(Lhe);JJo=r(Mgt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Mgt.forEach(t),YJo=i(Pl),ac=n(Pl,"P",{});var CJ=s(ac);KJo=r(CJ,`Note:
Loading a model from its configuration file does `),xhe=n(CJ,"STRONG",{});var Egt=s(xhe);ZJo=r(Egt,"not"),Egt.forEach(t),eYo=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=n(CJ,"A",{href:!0});var Cgt=s(FO);oYo=r(Cgt,"from_pretrained()"),Cgt.forEach(t),rYo=r(CJ," to load the model weights."),CJ.forEach(t),tYo=i(Pl),khe=n(Pl,"P",{});var wgt=s(khe);aYo=r(wgt,"Examples:"),wgt.forEach(t),nYo=i(Pl),m(Qw.$$.fragment,Pl),Pl.forEach(t),sYo=i(Bl),to=n(Bl,"DIV",{class:!0});var na=s(to);m(Ww.$$.fragment,na),lYo=i(na),She=n(na,"P",{});var Agt=s(She);iYo=r(Agt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Agt.forEach(t),dYo=i(na),mn=n(na,"P",{});var s5=s(mn);cYo=r(s5,"The model class to instantiate is selected based on the "),Rhe=n(s5,"CODE",{});var ygt=s(Rhe);fYo=r(ygt,"model_type"),ygt.forEach(t),mYo=r(s5,` property of the config object (either
passed as an argument or loaded from `),Bhe=n(s5,"CODE",{});var Lgt=s(Bhe);gYo=r(Lgt,"pretrained_model_name_or_path"),Lgt.forEach(t),hYo=r(s5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Phe=n(s5,"CODE",{});var xgt=s(Phe);pYo=r(xgt,"pretrained_model_name_or_path"),xgt.forEach(t),_Yo=r(s5,":"),s5.forEach(t),uYo=i(na),$he=n(na,"UL",{});var kgt=s($he);Tv=n(kgt,"LI",{});var ELe=s(Tv);Ihe=n(ELe,"STRONG",{});var Sgt=s(Ihe);bYo=r(Sgt,"detr"),Sgt.forEach(t),FYo=r(ELe," \u2014 "),vO=n(ELe,"A",{href:!0});var Rgt=s(vO);vYo=r(Rgt,"DetrForObjectDetection"),Rgt.forEach(t),TYo=r(ELe," (DETR model)"),ELe.forEach(t),kgt.forEach(t),MYo=i(na),Mv=n(na,"P",{});var CLe=s(Mv);EYo=r(CLe,"The model is set in evaluation mode by default using "),qhe=n(CLe,"CODE",{});var Bgt=s(qhe);CYo=r(Bgt,"model.eval()"),Bgt.forEach(t),wYo=r(CLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=n(CLe,"CODE",{});var Pgt=s(Nhe);AYo=r(Pgt,"model.train()"),Pgt.forEach(t),CLe.forEach(t),yYo=i(na),jhe=n(na,"P",{});var $gt=s(jhe);LYo=r($gt,"Examples:"),$gt.forEach(t),xYo=i(na),m(Hw.$$.fragment,na),na.forEach(t),Bl.forEach(t),dPe=i(c),nc=n(c,"H2",{class:!0});var FIe=s(nc);Ev=n(FIe,"A",{id:!0,class:!0,href:!0});var Igt=s(Ev);Dhe=n(Igt,"SPAN",{});var qgt=s(Dhe);m(Uw.$$.fragment,qgt),qgt.forEach(t),Igt.forEach(t),kYo=i(FIe),Ghe=n(FIe,"SPAN",{});var Ngt=s(Ghe);SYo=r(Ngt,"AutoModelForImageSegmentation"),Ngt.forEach(t),FIe.forEach(t),cPe=i(c),_r=n(c,"DIV",{class:!0});var $l=s(_r);m(Jw.$$.fragment,$l),RYo=i($l),sc=n($l,"P",{});var wJ=s(sc);BYo=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),TO=n(wJ,"A",{href:!0});var jgt=s(TO);PYo=r(jgt,"from_pretrained()"),jgt.forEach(t),$Yo=r(wJ," class method or the "),MO=n(wJ,"A",{href:!0});var Dgt=s(MO);IYo=r(Dgt,"from_config()"),Dgt.forEach(t),qYo=r(wJ,` class
method.`),wJ.forEach(t),NYo=i($l),Yw=n($l,"P",{});var vIe=s(Yw);jYo=r(vIe,"This class cannot be instantiated directly using "),Ohe=n(vIe,"CODE",{});var Ggt=s(Ohe);DYo=r(Ggt,"__init__()"),Ggt.forEach(t),GYo=r(vIe," (throws an error)."),vIe.forEach(t),OYo=i($l),ct=n($l,"DIV",{class:!0});var Il=s(ct);m(Kw.$$.fragment,Il),VYo=i(Il),Vhe=n(Il,"P",{});var Ogt=s(Vhe);XYo=r(Ogt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Ogt.forEach(t),zYo=i(Il),lc=n(Il,"P",{});var AJ=s(lc);QYo=r(AJ,`Note:
Loading a model from its configuration file does `),Xhe=n(AJ,"STRONG",{});var Vgt=s(Xhe);WYo=r(Vgt,"not"),Vgt.forEach(t),HYo=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EO=n(AJ,"A",{href:!0});var Xgt=s(EO);UYo=r(Xgt,"from_pretrained()"),Xgt.forEach(t),JYo=r(AJ," to load the model weights."),AJ.forEach(t),YYo=i(Il),zhe=n(Il,"P",{});var zgt=s(zhe);KYo=r(zgt,"Examples:"),zgt.forEach(t),ZYo=i(Il),m(Zw.$$.fragment,Il),Il.forEach(t),eKo=i($l),ao=n($l,"DIV",{class:!0});var sa=s(ao);m(eA.$$.fragment,sa),oKo=i(sa),Qhe=n(sa,"P",{});var Qgt=s(Qhe);rKo=r(Qgt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Qgt.forEach(t),tKo=i(sa),gn=n(sa,"P",{});var l5=s(gn);aKo=r(l5,"The model class to instantiate is selected based on the "),Whe=n(l5,"CODE",{});var Wgt=s(Whe);nKo=r(Wgt,"model_type"),Wgt.forEach(t),sKo=r(l5,` property of the config object (either
passed as an argument or loaded from `),Hhe=n(l5,"CODE",{});var Hgt=s(Hhe);lKo=r(Hgt,"pretrained_model_name_or_path"),Hgt.forEach(t),iKo=r(l5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=n(l5,"CODE",{});var Ugt=s(Uhe);dKo=r(Ugt,"pretrained_model_name_or_path"),Ugt.forEach(t),cKo=r(l5,":"),l5.forEach(t),fKo=i(sa),Jhe=n(sa,"UL",{});var Jgt=s(Jhe);Cv=n(Jgt,"LI",{});var wLe=s(Cv);Yhe=n(wLe,"STRONG",{});var Ygt=s(Yhe);mKo=r(Ygt,"detr"),Ygt.forEach(t),gKo=r(wLe," \u2014 "),CO=n(wLe,"A",{href:!0});var Kgt=s(CO);hKo=r(Kgt,"DetrForSegmentation"),Kgt.forEach(t),pKo=r(wLe," (DETR model)"),wLe.forEach(t),Jgt.forEach(t),_Ko=i(sa),wv=n(sa,"P",{});var ALe=s(wv);uKo=r(ALe,"The model is set in evaluation mode by default using "),Khe=n(ALe,"CODE",{});var Zgt=s(Khe);bKo=r(Zgt,"model.eval()"),Zgt.forEach(t),FKo=r(ALe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=n(ALe,"CODE",{});var eht=s(Zhe);vKo=r(eht,"model.train()"),eht.forEach(t),ALe.forEach(t),TKo=i(sa),epe=n(sa,"P",{});var oht=s(epe);MKo=r(oht,"Examples:"),oht.forEach(t),EKo=i(sa),m(oA.$$.fragment,sa),sa.forEach(t),$l.forEach(t),fPe=i(c),ic=n(c,"H2",{class:!0});var TIe=s(ic);Av=n(TIe,"A",{id:!0,class:!0,href:!0});var rht=s(Av);ope=n(rht,"SPAN",{});var tht=s(ope);m(rA.$$.fragment,tht),tht.forEach(t),rht.forEach(t),CKo=i(TIe),rpe=n(TIe,"SPAN",{});var aht=s(rpe);wKo=r(aht,"AutoModelForSemanticSegmentation"),aht.forEach(t),TIe.forEach(t),mPe=i(c),ur=n(c,"DIV",{class:!0});var ql=s(ur);m(tA.$$.fragment,ql),AKo=i(ql),dc=n(ql,"P",{});var yJ=s(dc);yKo=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),wO=n(yJ,"A",{href:!0});var nht=s(wO);LKo=r(nht,"from_pretrained()"),nht.forEach(t),xKo=r(yJ," class method or the "),AO=n(yJ,"A",{href:!0});var sht=s(AO);kKo=r(sht,"from_config()"),sht.forEach(t),SKo=r(yJ,` class
method.`),yJ.forEach(t),RKo=i(ql),aA=n(ql,"P",{});var MIe=s(aA);BKo=r(MIe,"This class cannot be instantiated directly using "),tpe=n(MIe,"CODE",{});var lht=s(tpe);PKo=r(lht,"__init__()"),lht.forEach(t),$Ko=r(MIe," (throws an error)."),MIe.forEach(t),IKo=i(ql),ft=n(ql,"DIV",{class:!0});var Nl=s(ft);m(nA.$$.fragment,Nl),qKo=i(Nl),ape=n(Nl,"P",{});var iht=s(ape);NKo=r(iht,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),iht.forEach(t),jKo=i(Nl),cc=n(Nl,"P",{});var LJ=s(cc);DKo=r(LJ,`Note:
Loading a model from its configuration file does `),npe=n(LJ,"STRONG",{});var dht=s(npe);GKo=r(dht,"not"),dht.forEach(t),OKo=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=n(LJ,"A",{href:!0});var cht=s(yO);VKo=r(cht,"from_pretrained()"),cht.forEach(t),XKo=r(LJ," to load the model weights."),LJ.forEach(t),zKo=i(Nl),spe=n(Nl,"P",{});var fht=s(spe);QKo=r(fht,"Examples:"),fht.forEach(t),WKo=i(Nl),m(sA.$$.fragment,Nl),Nl.forEach(t),HKo=i(ql),no=n(ql,"DIV",{class:!0});var la=s(no);m(lA.$$.fragment,la),UKo=i(la),lpe=n(la,"P",{});var mht=s(lpe);JKo=r(mht,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),mht.forEach(t),YKo=i(la),hn=n(la,"P",{});var i5=s(hn);KKo=r(i5,"The model class to instantiate is selected based on the "),ipe=n(i5,"CODE",{});var ght=s(ipe);ZKo=r(ght,"model_type"),ght.forEach(t),eZo=r(i5,` property of the config object (either
passed as an argument or loaded from `),dpe=n(i5,"CODE",{});var hht=s(dpe);oZo=r(hht,"pretrained_model_name_or_path"),hht.forEach(t),rZo=r(i5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=n(i5,"CODE",{});var pht=s(cpe);tZo=r(pht,"pretrained_model_name_or_path"),pht.forEach(t),aZo=r(i5,":"),i5.forEach(t),nZo=i(la),pn=n(la,"UL",{});var d5=s(pn);yv=n(d5,"LI",{});var yLe=s(yv);fpe=n(yLe,"STRONG",{});var _ht=s(fpe);sZo=r(_ht,"beit"),_ht.forEach(t),lZo=r(yLe," \u2014 "),LO=n(yLe,"A",{href:!0});var uht=s(LO);iZo=r(uht,"BeitForSemanticSegmentation"),uht.forEach(t),dZo=r(yLe," (BEiT model)"),yLe.forEach(t),cZo=i(d5),Lv=n(d5,"LI",{});var LLe=s(Lv);mpe=n(LLe,"STRONG",{});var bht=s(mpe);fZo=r(bht,"data2vec-vision"),bht.forEach(t),mZo=r(LLe," \u2014 "),xO=n(LLe,"A",{href:!0});var Fht=s(xO);gZo=r(Fht,"Data2VecVisionForSemanticSegmentation"),Fht.forEach(t),hZo=r(LLe," (Data2VecVision model)"),LLe.forEach(t),pZo=i(d5),xv=n(d5,"LI",{});var xLe=s(xv);gpe=n(xLe,"STRONG",{});var vht=s(gpe);_Zo=r(vht,"dpt"),vht.forEach(t),uZo=r(xLe," \u2014 "),kO=n(xLe,"A",{href:!0});var Tht=s(kO);bZo=r(Tht,"DPTForSemanticSegmentation"),Tht.forEach(t),FZo=r(xLe," (DPT model)"),xLe.forEach(t),vZo=i(d5),kv=n(d5,"LI",{});var kLe=s(kv);hpe=n(kLe,"STRONG",{});var Mht=s(hpe);TZo=r(Mht,"segformer"),Mht.forEach(t),MZo=r(kLe," \u2014 "),SO=n(kLe,"A",{href:!0});var Eht=s(SO);EZo=r(Eht,"SegformerForSemanticSegmentation"),Eht.forEach(t),CZo=r(kLe," (SegFormer model)"),kLe.forEach(t),d5.forEach(t),wZo=i(la),Sv=n(la,"P",{});var SLe=s(Sv);AZo=r(SLe,"The model is set in evaluation mode by default using "),ppe=n(SLe,"CODE",{});var Cht=s(ppe);yZo=r(Cht,"model.eval()"),Cht.forEach(t),LZo=r(SLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=n(SLe,"CODE",{});var wht=s(_pe);xZo=r(wht,"model.train()"),wht.forEach(t),SLe.forEach(t),kZo=i(la),upe=n(la,"P",{});var Aht=s(upe);SZo=r(Aht,"Examples:"),Aht.forEach(t),RZo=i(la),m(iA.$$.fragment,la),la.forEach(t),ql.forEach(t),gPe=i(c),fc=n(c,"H2",{class:!0});var EIe=s(fc);Rv=n(EIe,"A",{id:!0,class:!0,href:!0});var yht=s(Rv);bpe=n(yht,"SPAN",{});var Lht=s(bpe);m(dA.$$.fragment,Lht),Lht.forEach(t),yht.forEach(t),BZo=i(EIe),Fpe=n(EIe,"SPAN",{});var xht=s(Fpe);PZo=r(xht,"AutoModelForInstanceSegmentation"),xht.forEach(t),EIe.forEach(t),hPe=i(c),br=n(c,"DIV",{class:!0});var jl=s(br);m(cA.$$.fragment,jl),$Zo=i(jl),mc=n(jl,"P",{});var xJ=s(mc);IZo=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),RO=n(xJ,"A",{href:!0});var kht=s(RO);qZo=r(kht,"from_pretrained()"),kht.forEach(t),NZo=r(xJ," class method or the "),BO=n(xJ,"A",{href:!0});var Sht=s(BO);jZo=r(Sht,"from_config()"),Sht.forEach(t),DZo=r(xJ,` class
method.`),xJ.forEach(t),GZo=i(jl),fA=n(jl,"P",{});var CIe=s(fA);OZo=r(CIe,"This class cannot be instantiated directly using "),vpe=n(CIe,"CODE",{});var Rht=s(vpe);VZo=r(Rht,"__init__()"),Rht.forEach(t),XZo=r(CIe," (throws an error)."),CIe.forEach(t),zZo=i(jl),mt=n(jl,"DIV",{class:!0});var Dl=s(mt);m(mA.$$.fragment,Dl),QZo=i(Dl),Tpe=n(Dl,"P",{});var Bht=s(Tpe);WZo=r(Bht,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Bht.forEach(t),HZo=i(Dl),gc=n(Dl,"P",{});var kJ=s(gc);UZo=r(kJ,`Note:
Loading a model from its configuration file does `),Mpe=n(kJ,"STRONG",{});var Pht=s(Mpe);JZo=r(Pht,"not"),Pht.forEach(t),YZo=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=n(kJ,"A",{href:!0});var $ht=s(PO);KZo=r($ht,"from_pretrained()"),$ht.forEach(t),ZZo=r(kJ," to load the model weights."),kJ.forEach(t),eer=i(Dl),Epe=n(Dl,"P",{});var Iht=s(Epe);oer=r(Iht,"Examples:"),Iht.forEach(t),rer=i(Dl),m(gA.$$.fragment,Dl),Dl.forEach(t),ter=i(jl),so=n(jl,"DIV",{class:!0});var ia=s(so);m(hA.$$.fragment,ia),aer=i(ia),Cpe=n(ia,"P",{});var qht=s(Cpe);ner=r(qht,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),qht.forEach(t),ser=i(ia),_n=n(ia,"P",{});var c5=s(_n);ler=r(c5,"The model class to instantiate is selected based on the "),wpe=n(c5,"CODE",{});var Nht=s(wpe);ier=r(Nht,"model_type"),Nht.forEach(t),der=r(c5,` property of the config object (either
passed as an argument or loaded from `),Ape=n(c5,"CODE",{});var jht=s(Ape);cer=r(jht,"pretrained_model_name_or_path"),jht.forEach(t),fer=r(c5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=n(c5,"CODE",{});var Dht=s(ype);mer=r(Dht,"pretrained_model_name_or_path"),Dht.forEach(t),ger=r(c5,":"),c5.forEach(t),her=i(ia),Lpe=n(ia,"UL",{});var Ght=s(Lpe);Bv=n(Ght,"LI",{});var RLe=s(Bv);xpe=n(RLe,"STRONG",{});var Oht=s(xpe);per=r(Oht,"maskformer"),Oht.forEach(t),_er=r(RLe," \u2014 "),$O=n(RLe,"A",{href:!0});var Vht=s($O);uer=r(Vht,"MaskFormerForInstanceSegmentation"),Vht.forEach(t),ber=r(RLe," (MaskFormer model)"),RLe.forEach(t),Ght.forEach(t),Fer=i(ia),Pv=n(ia,"P",{});var BLe=s(Pv);ver=r(BLe,"The model is set in evaluation mode by default using "),kpe=n(BLe,"CODE",{});var Xht=s(kpe);Ter=r(Xht,"model.eval()"),Xht.forEach(t),Mer=r(BLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Spe=n(BLe,"CODE",{});var zht=s(Spe);Eer=r(zht,"model.train()"),zht.forEach(t),BLe.forEach(t),Cer=i(ia),Rpe=n(ia,"P",{});var Qht=s(Rpe);wer=r(Qht,"Examples:"),Qht.forEach(t),Aer=i(ia),m(pA.$$.fragment,ia),ia.forEach(t),jl.forEach(t),pPe=i(c),hc=n(c,"H2",{class:!0});var wIe=s(hc);$v=n(wIe,"A",{id:!0,class:!0,href:!0});var Wht=s($v);Bpe=n(Wht,"SPAN",{});var Hht=s(Bpe);m(_A.$$.fragment,Hht),Hht.forEach(t),Wht.forEach(t),yer=i(wIe),Ppe=n(wIe,"SPAN",{});var Uht=s(Ppe);Ler=r(Uht,"TFAutoModel"),Uht.forEach(t),wIe.forEach(t),_Pe=i(c),Fr=n(c,"DIV",{class:!0});var Gl=s(Fr);m(uA.$$.fragment,Gl),xer=i(Gl),pc=n(Gl,"P",{});var SJ=s(pc);ker=r(SJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IO=n(SJ,"A",{href:!0});var Jht=s(IO);Ser=r(Jht,"from_pretrained()"),Jht.forEach(t),Rer=r(SJ," class method or the "),qO=n(SJ,"A",{href:!0});var Yht=s(qO);Ber=r(Yht,"from_config()"),Yht.forEach(t),Per=r(SJ,` class
method.`),SJ.forEach(t),$er=i(Gl),bA=n(Gl,"P",{});var AIe=s(bA);Ier=r(AIe,"This class cannot be instantiated directly using "),$pe=n(AIe,"CODE",{});var Kht=s($pe);qer=r(Kht,"__init__()"),Kht.forEach(t),Ner=r(AIe," (throws an error)."),AIe.forEach(t),jer=i(Gl),gt=n(Gl,"DIV",{class:!0});var Ol=s(gt);m(FA.$$.fragment,Ol),Der=i(Ol),Ipe=n(Ol,"P",{});var Zht=s(Ipe);Ger=r(Zht,"Instantiates one of the base model classes of the library from a configuration."),Zht.forEach(t),Oer=i(Ol),_c=n(Ol,"P",{});var RJ=s(_c);Ver=r(RJ,`Note:
Loading a model from its configuration file does `),qpe=n(RJ,"STRONG",{});var ept=s(qpe);Xer=r(ept,"not"),ept.forEach(t),zer=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=n(RJ,"A",{href:!0});var opt=s(NO);Qer=r(opt,"from_pretrained()"),opt.forEach(t),Wer=r(RJ," to load the model weights."),RJ.forEach(t),Her=i(Ol),Npe=n(Ol,"P",{});var rpt=s(Npe);Uer=r(rpt,"Examples:"),rpt.forEach(t),Jer=i(Ol),m(vA.$$.fragment,Ol),Ol.forEach(t),Yer=i(Gl),ho=n(Gl,"DIV",{class:!0});var pa=s(ho);m(TA.$$.fragment,pa),Ker=i(pa),jpe=n(pa,"P",{});var tpt=s(jpe);Zer=r(tpt,"Instantiate one of the base model classes of the library from a pretrained model."),tpt.forEach(t),eor=i(pa),un=n(pa,"P",{});var f5=s(un);oor=r(f5,"The model class to instantiate is selected based on the "),Dpe=n(f5,"CODE",{});var apt=s(Dpe);ror=r(apt,"model_type"),apt.forEach(t),tor=r(f5,` property of the config object (either
passed as an argument or loaded from `),Gpe=n(f5,"CODE",{});var npt=s(Gpe);aor=r(npt,"pretrained_model_name_or_path"),npt.forEach(t),nor=r(f5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=n(f5,"CODE",{});var spt=s(Ope);sor=r(spt,"pretrained_model_name_or_path"),spt.forEach(t),lor=r(f5,":"),f5.forEach(t),ior=i(pa),x=n(pa,"UL",{});var k=s(x);Iv=n(k,"LI",{});var PLe=s(Iv);Vpe=n(PLe,"STRONG",{});var lpt=s(Vpe);dor=r(lpt,"albert"),lpt.forEach(t),cor=r(PLe," \u2014 "),jO=n(PLe,"A",{href:!0});var ipt=s(jO);mor=r(ipt,"TFAlbertModel"),ipt.forEach(t),gor=r(PLe," (ALBERT model)"),PLe.forEach(t),hor=i(k),qv=n(k,"LI",{});var $Le=s(qv);Xpe=n($Le,"STRONG",{});var dpt=s(Xpe);por=r(dpt,"bart"),dpt.forEach(t),_or=r($Le," \u2014 "),DO=n($Le,"A",{href:!0});var cpt=s(DO);uor=r(cpt,"TFBartModel"),cpt.forEach(t),bor=r($Le," (BART model)"),$Le.forEach(t),For=i(k),Nv=n(k,"LI",{});var ILe=s(Nv);zpe=n(ILe,"STRONG",{});var fpt=s(zpe);vor=r(fpt,"bert"),fpt.forEach(t),Tor=r(ILe," \u2014 "),GO=n(ILe,"A",{href:!0});var mpt=s(GO);Mor=r(mpt,"TFBertModel"),mpt.forEach(t),Eor=r(ILe," (BERT model)"),ILe.forEach(t),Cor=i(k),jv=n(k,"LI",{});var qLe=s(jv);Qpe=n(qLe,"STRONG",{});var gpt=s(Qpe);wor=r(gpt,"blenderbot"),gpt.forEach(t),Aor=r(qLe," \u2014 "),OO=n(qLe,"A",{href:!0});var hpt=s(OO);yor=r(hpt,"TFBlenderbotModel"),hpt.forEach(t),Lor=r(qLe," (Blenderbot model)"),qLe.forEach(t),xor=i(k),Dv=n(k,"LI",{});var NLe=s(Dv);Wpe=n(NLe,"STRONG",{});var ppt=s(Wpe);kor=r(ppt,"blenderbot-small"),ppt.forEach(t),Sor=r(NLe," \u2014 "),VO=n(NLe,"A",{href:!0});var _pt=s(VO);Ror=r(_pt,"TFBlenderbotSmallModel"),_pt.forEach(t),Bor=r(NLe," (BlenderbotSmall model)"),NLe.forEach(t),Por=i(k),Gv=n(k,"LI",{});var jLe=s(Gv);Hpe=n(jLe,"STRONG",{});var upt=s(Hpe);$or=r(upt,"camembert"),upt.forEach(t),Ior=r(jLe," \u2014 "),XO=n(jLe,"A",{href:!0});var bpt=s(XO);qor=r(bpt,"TFCamembertModel"),bpt.forEach(t),Nor=r(jLe," (CamemBERT model)"),jLe.forEach(t),jor=i(k),Ov=n(k,"LI",{});var DLe=s(Ov);Upe=n(DLe,"STRONG",{});var Fpt=s(Upe);Dor=r(Fpt,"clip"),Fpt.forEach(t),Gor=r(DLe," \u2014 "),zO=n(DLe,"A",{href:!0});var vpt=s(zO);Oor=r(vpt,"TFCLIPModel"),vpt.forEach(t),Vor=r(DLe," (CLIP model)"),DLe.forEach(t),Xor=i(k),Vv=n(k,"LI",{});var GLe=s(Vv);Jpe=n(GLe,"STRONG",{});var Tpt=s(Jpe);zor=r(Tpt,"convbert"),Tpt.forEach(t),Qor=r(GLe," \u2014 "),QO=n(GLe,"A",{href:!0});var Mpt=s(QO);Wor=r(Mpt,"TFConvBertModel"),Mpt.forEach(t),Hor=r(GLe," (ConvBERT model)"),GLe.forEach(t),Uor=i(k),Xv=n(k,"LI",{});var OLe=s(Xv);Ype=n(OLe,"STRONG",{});var Ept=s(Ype);Jor=r(Ept,"convnext"),Ept.forEach(t),Yor=r(OLe," \u2014 "),WO=n(OLe,"A",{href:!0});var Cpt=s(WO);Kor=r(Cpt,"TFConvNextModel"),Cpt.forEach(t),Zor=r(OLe," (ConvNext model)"),OLe.forEach(t),err=i(k),zv=n(k,"LI",{});var VLe=s(zv);Kpe=n(VLe,"STRONG",{});var wpt=s(Kpe);orr=r(wpt,"ctrl"),wpt.forEach(t),rrr=r(VLe," \u2014 "),HO=n(VLe,"A",{href:!0});var Apt=s(HO);trr=r(Apt,"TFCTRLModel"),Apt.forEach(t),arr=r(VLe," (CTRL model)"),VLe.forEach(t),nrr=i(k),Qv=n(k,"LI",{});var XLe=s(Qv);Zpe=n(XLe,"STRONG",{});var ypt=s(Zpe);srr=r(ypt,"deberta"),ypt.forEach(t),lrr=r(XLe," \u2014 "),UO=n(XLe,"A",{href:!0});var Lpt=s(UO);irr=r(Lpt,"TFDebertaModel"),Lpt.forEach(t),drr=r(XLe," (DeBERTa model)"),XLe.forEach(t),crr=i(k),Wv=n(k,"LI",{});var zLe=s(Wv);e_e=n(zLe,"STRONG",{});var xpt=s(e_e);frr=r(xpt,"deberta-v2"),xpt.forEach(t),mrr=r(zLe," \u2014 "),JO=n(zLe,"A",{href:!0});var kpt=s(JO);grr=r(kpt,"TFDebertaV2Model"),kpt.forEach(t),hrr=r(zLe," (DeBERTa-v2 model)"),zLe.forEach(t),prr=i(k),Hv=n(k,"LI",{});var QLe=s(Hv);o_e=n(QLe,"STRONG",{});var Spt=s(o_e);_rr=r(Spt,"distilbert"),Spt.forEach(t),urr=r(QLe," \u2014 "),YO=n(QLe,"A",{href:!0});var Rpt=s(YO);brr=r(Rpt,"TFDistilBertModel"),Rpt.forEach(t),Frr=r(QLe," (DistilBERT model)"),QLe.forEach(t),vrr=i(k),Uv=n(k,"LI",{});var WLe=s(Uv);r_e=n(WLe,"STRONG",{});var Bpt=s(r_e);Trr=r(Bpt,"dpr"),Bpt.forEach(t),Mrr=r(WLe," \u2014 "),KO=n(WLe,"A",{href:!0});var Ppt=s(KO);Err=r(Ppt,"TFDPRQuestionEncoder"),Ppt.forEach(t),Crr=r(WLe," (DPR model)"),WLe.forEach(t),wrr=i(k),Jv=n(k,"LI",{});var HLe=s(Jv);t_e=n(HLe,"STRONG",{});var $pt=s(t_e);Arr=r($pt,"electra"),$pt.forEach(t),yrr=r(HLe," \u2014 "),ZO=n(HLe,"A",{href:!0});var Ipt=s(ZO);Lrr=r(Ipt,"TFElectraModel"),Ipt.forEach(t),xrr=r(HLe," (ELECTRA model)"),HLe.forEach(t),krr=i(k),Yv=n(k,"LI",{});var ULe=s(Yv);a_e=n(ULe,"STRONG",{});var qpt=s(a_e);Srr=r(qpt,"flaubert"),qpt.forEach(t),Rrr=r(ULe," \u2014 "),eV=n(ULe,"A",{href:!0});var Npt=s(eV);Brr=r(Npt,"TFFlaubertModel"),Npt.forEach(t),Prr=r(ULe," (FlauBERT model)"),ULe.forEach(t),$rr=i(k),Vs=n(k,"LI",{});var L8=s(Vs);n_e=n(L8,"STRONG",{});var jpt=s(n_e);Irr=r(jpt,"funnel"),jpt.forEach(t),qrr=r(L8," \u2014 "),oV=n(L8,"A",{href:!0});var Dpt=s(oV);Nrr=r(Dpt,"TFFunnelModel"),Dpt.forEach(t),jrr=r(L8," or "),rV=n(L8,"A",{href:!0});var Gpt=s(rV);Drr=r(Gpt,"TFFunnelBaseModel"),Gpt.forEach(t),Grr=r(L8," (Funnel Transformer model)"),L8.forEach(t),Orr=i(k),Kv=n(k,"LI",{});var JLe=s(Kv);s_e=n(JLe,"STRONG",{});var Opt=s(s_e);Vrr=r(Opt,"gpt2"),Opt.forEach(t),Xrr=r(JLe," \u2014 "),tV=n(JLe,"A",{href:!0});var Vpt=s(tV);zrr=r(Vpt,"TFGPT2Model"),Vpt.forEach(t),Qrr=r(JLe," (OpenAI GPT-2 model)"),JLe.forEach(t),Wrr=i(k),Zv=n(k,"LI",{});var YLe=s(Zv);l_e=n(YLe,"STRONG",{});var Xpt=s(l_e);Hrr=r(Xpt,"gptj"),Xpt.forEach(t),Urr=r(YLe," \u2014 "),aV=n(YLe,"A",{href:!0});var zpt=s(aV);Jrr=r(zpt,"TFGPTJModel"),zpt.forEach(t),Yrr=r(YLe," (GPT-J model)"),YLe.forEach(t),Krr=i(k),eT=n(k,"LI",{});var KLe=s(eT);i_e=n(KLe,"STRONG",{});var Qpt=s(i_e);Zrr=r(Qpt,"hubert"),Qpt.forEach(t),etr=r(KLe," \u2014 "),nV=n(KLe,"A",{href:!0});var Wpt=s(nV);otr=r(Wpt,"TFHubertModel"),Wpt.forEach(t),rtr=r(KLe," (Hubert model)"),KLe.forEach(t),ttr=i(k),oT=n(k,"LI",{});var ZLe=s(oT);d_e=n(ZLe,"STRONG",{});var Hpt=s(d_e);atr=r(Hpt,"layoutlm"),Hpt.forEach(t),ntr=r(ZLe," \u2014 "),sV=n(ZLe,"A",{href:!0});var Upt=s(sV);str=r(Upt,"TFLayoutLMModel"),Upt.forEach(t),ltr=r(ZLe," (LayoutLM model)"),ZLe.forEach(t),itr=i(k),rT=n(k,"LI",{});var e8e=s(rT);c_e=n(e8e,"STRONG",{});var Jpt=s(c_e);dtr=r(Jpt,"led"),Jpt.forEach(t),ctr=r(e8e," \u2014 "),lV=n(e8e,"A",{href:!0});var Ypt=s(lV);ftr=r(Ypt,"TFLEDModel"),Ypt.forEach(t),mtr=r(e8e," (LED model)"),e8e.forEach(t),gtr=i(k),tT=n(k,"LI",{});var o8e=s(tT);f_e=n(o8e,"STRONG",{});var Kpt=s(f_e);htr=r(Kpt,"longformer"),Kpt.forEach(t),ptr=r(o8e," \u2014 "),iV=n(o8e,"A",{href:!0});var Zpt=s(iV);_tr=r(Zpt,"TFLongformerModel"),Zpt.forEach(t),utr=r(o8e," (Longformer model)"),o8e.forEach(t),btr=i(k),aT=n(k,"LI",{});var r8e=s(aT);m_e=n(r8e,"STRONG",{});var e_t=s(m_e);Ftr=r(e_t,"lxmert"),e_t.forEach(t),vtr=r(r8e," \u2014 "),dV=n(r8e,"A",{href:!0});var o_t=s(dV);Ttr=r(o_t,"TFLxmertModel"),o_t.forEach(t),Mtr=r(r8e," (LXMERT model)"),r8e.forEach(t),Etr=i(k),nT=n(k,"LI",{});var t8e=s(nT);g_e=n(t8e,"STRONG",{});var r_t=s(g_e);Ctr=r(r_t,"marian"),r_t.forEach(t),wtr=r(t8e," \u2014 "),cV=n(t8e,"A",{href:!0});var t_t=s(cV);Atr=r(t_t,"TFMarianModel"),t_t.forEach(t),ytr=r(t8e," (Marian model)"),t8e.forEach(t),Ltr=i(k),sT=n(k,"LI",{});var a8e=s(sT);h_e=n(a8e,"STRONG",{});var a_t=s(h_e);xtr=r(a_t,"mbart"),a_t.forEach(t),ktr=r(a8e," \u2014 "),fV=n(a8e,"A",{href:!0});var n_t=s(fV);Str=r(n_t,"TFMBartModel"),n_t.forEach(t),Rtr=r(a8e," (mBART model)"),a8e.forEach(t),Btr=i(k),lT=n(k,"LI",{});var n8e=s(lT);p_e=n(n8e,"STRONG",{});var s_t=s(p_e);Ptr=r(s_t,"mobilebert"),s_t.forEach(t),$tr=r(n8e," \u2014 "),mV=n(n8e,"A",{href:!0});var l_t=s(mV);Itr=r(l_t,"TFMobileBertModel"),l_t.forEach(t),qtr=r(n8e," (MobileBERT model)"),n8e.forEach(t),Ntr=i(k),iT=n(k,"LI",{});var s8e=s(iT);__e=n(s8e,"STRONG",{});var i_t=s(__e);jtr=r(i_t,"mpnet"),i_t.forEach(t),Dtr=r(s8e," \u2014 "),gV=n(s8e,"A",{href:!0});var d_t=s(gV);Gtr=r(d_t,"TFMPNetModel"),d_t.forEach(t),Otr=r(s8e," (MPNet model)"),s8e.forEach(t),Vtr=i(k),dT=n(k,"LI",{});var l8e=s(dT);u_e=n(l8e,"STRONG",{});var c_t=s(u_e);Xtr=r(c_t,"mt5"),c_t.forEach(t),ztr=r(l8e," \u2014 "),hV=n(l8e,"A",{href:!0});var f_t=s(hV);Qtr=r(f_t,"TFMT5Model"),f_t.forEach(t),Wtr=r(l8e," (mT5 model)"),l8e.forEach(t),Htr=i(k),cT=n(k,"LI",{});var i8e=s(cT);b_e=n(i8e,"STRONG",{});var m_t=s(b_e);Utr=r(m_t,"openai-gpt"),m_t.forEach(t),Jtr=r(i8e," \u2014 "),pV=n(i8e,"A",{href:!0});var g_t=s(pV);Ytr=r(g_t,"TFOpenAIGPTModel"),g_t.forEach(t),Ktr=r(i8e," (OpenAI GPT model)"),i8e.forEach(t),Ztr=i(k),fT=n(k,"LI",{});var d8e=s(fT);F_e=n(d8e,"STRONG",{});var h_t=s(F_e);ear=r(h_t,"pegasus"),h_t.forEach(t),oar=r(d8e," \u2014 "),_V=n(d8e,"A",{href:!0});var p_t=s(_V);rar=r(p_t,"TFPegasusModel"),p_t.forEach(t),tar=r(d8e," (Pegasus model)"),d8e.forEach(t),aar=i(k),mT=n(k,"LI",{});var c8e=s(mT);v_e=n(c8e,"STRONG",{});var __t=s(v_e);nar=r(__t,"rembert"),__t.forEach(t),sar=r(c8e," \u2014 "),uV=n(c8e,"A",{href:!0});var u_t=s(uV);lar=r(u_t,"TFRemBertModel"),u_t.forEach(t),iar=r(c8e," (RemBERT model)"),c8e.forEach(t),dar=i(k),gT=n(k,"LI",{});var f8e=s(gT);T_e=n(f8e,"STRONG",{});var b_t=s(T_e);car=r(b_t,"roberta"),b_t.forEach(t),far=r(f8e," \u2014 "),bV=n(f8e,"A",{href:!0});var F_t=s(bV);mar=r(F_t,"TFRobertaModel"),F_t.forEach(t),gar=r(f8e," (RoBERTa model)"),f8e.forEach(t),har=i(k),hT=n(k,"LI",{});var m8e=s(hT);M_e=n(m8e,"STRONG",{});var v_t=s(M_e);par=r(v_t,"roformer"),v_t.forEach(t),_ar=r(m8e," \u2014 "),FV=n(m8e,"A",{href:!0});var T_t=s(FV);uar=r(T_t,"TFRoFormerModel"),T_t.forEach(t),bar=r(m8e," (RoFormer model)"),m8e.forEach(t),Far=i(k),pT=n(k,"LI",{});var g8e=s(pT);E_e=n(g8e,"STRONG",{});var M_t=s(E_e);Tar=r(M_t,"speech_to_text"),M_t.forEach(t),Mar=r(g8e," \u2014 "),vV=n(g8e,"A",{href:!0});var E_t=s(vV);Ear=r(E_t,"TFSpeech2TextModel"),E_t.forEach(t),Car=r(g8e," (Speech2Text model)"),g8e.forEach(t),war=i(k),_T=n(k,"LI",{});var h8e=s(_T);C_e=n(h8e,"STRONG",{});var C_t=s(C_e);Aar=r(C_t,"t5"),C_t.forEach(t),yar=r(h8e," \u2014 "),TV=n(h8e,"A",{href:!0});var w_t=s(TV);Lar=r(w_t,"TFT5Model"),w_t.forEach(t),xar=r(h8e," (T5 model)"),h8e.forEach(t),kar=i(k),uT=n(k,"LI",{});var p8e=s(uT);w_e=n(p8e,"STRONG",{});var A_t=s(w_e);Sar=r(A_t,"tapas"),A_t.forEach(t),Rar=r(p8e," \u2014 "),MV=n(p8e,"A",{href:!0});var y_t=s(MV);Bar=r(y_t,"TFTapasModel"),y_t.forEach(t),Par=r(p8e," (TAPAS model)"),p8e.forEach(t),$ar=i(k),bT=n(k,"LI",{});var _8e=s(bT);A_e=n(_8e,"STRONG",{});var L_t=s(A_e);Iar=r(L_t,"transfo-xl"),L_t.forEach(t),qar=r(_8e," \u2014 "),EV=n(_8e,"A",{href:!0});var x_t=s(EV);Nar=r(x_t,"TFTransfoXLModel"),x_t.forEach(t),jar=r(_8e," (Transformer-XL model)"),_8e.forEach(t),Dar=i(k),FT=n(k,"LI",{});var u8e=s(FT);y_e=n(u8e,"STRONG",{});var k_t=s(y_e);Gar=r(k_t,"vit"),k_t.forEach(t),Oar=r(u8e," \u2014 "),CV=n(u8e,"A",{href:!0});var S_t=s(CV);Var=r(S_t,"TFViTModel"),S_t.forEach(t),Xar=r(u8e," (ViT model)"),u8e.forEach(t),zar=i(k),vT=n(k,"LI",{});var b8e=s(vT);L_e=n(b8e,"STRONG",{});var R_t=s(L_e);Qar=r(R_t,"vit_mae"),R_t.forEach(t),War=r(b8e," \u2014 "),wV=n(b8e,"A",{href:!0});var B_t=s(wV);Har=r(B_t,"TFViTMAEModel"),B_t.forEach(t),Uar=r(b8e," (ViTMAE model)"),b8e.forEach(t),Jar=i(k),TT=n(k,"LI",{});var F8e=s(TT);x_e=n(F8e,"STRONG",{});var P_t=s(x_e);Yar=r(P_t,"wav2vec2"),P_t.forEach(t),Kar=r(F8e," \u2014 "),AV=n(F8e,"A",{href:!0});var $_t=s(AV);Zar=r($_t,"TFWav2Vec2Model"),$_t.forEach(t),enr=r(F8e," (Wav2Vec2 model)"),F8e.forEach(t),onr=i(k),MT=n(k,"LI",{});var v8e=s(MT);k_e=n(v8e,"STRONG",{});var I_t=s(k_e);rnr=r(I_t,"xlm"),I_t.forEach(t),tnr=r(v8e," \u2014 "),yV=n(v8e,"A",{href:!0});var q_t=s(yV);anr=r(q_t,"TFXLMModel"),q_t.forEach(t),nnr=r(v8e," (XLM model)"),v8e.forEach(t),snr=i(k),ET=n(k,"LI",{});var T8e=s(ET);S_e=n(T8e,"STRONG",{});var N_t=s(S_e);lnr=r(N_t,"xlm-roberta"),N_t.forEach(t),inr=r(T8e," \u2014 "),LV=n(T8e,"A",{href:!0});var j_t=s(LV);dnr=r(j_t,"TFXLMRobertaModel"),j_t.forEach(t),cnr=r(T8e," (XLM-RoBERTa model)"),T8e.forEach(t),fnr=i(k),CT=n(k,"LI",{});var M8e=s(CT);R_e=n(M8e,"STRONG",{});var D_t=s(R_e);mnr=r(D_t,"xlnet"),D_t.forEach(t),gnr=r(M8e," \u2014 "),xV=n(M8e,"A",{href:!0});var G_t=s(xV);hnr=r(G_t,"TFXLNetModel"),G_t.forEach(t),pnr=r(M8e," (XLNet model)"),M8e.forEach(t),k.forEach(t),_nr=i(pa),B_e=n(pa,"P",{});var O_t=s(B_e);unr=r(O_t,"Examples:"),O_t.forEach(t),bnr=i(pa),m(MA.$$.fragment,pa),pa.forEach(t),Gl.forEach(t),uPe=i(c),uc=n(c,"H2",{class:!0});var yIe=s(uc);wT=n(yIe,"A",{id:!0,class:!0,href:!0});var V_t=s(wT);P_e=n(V_t,"SPAN",{});var X_t=s(P_e);m(EA.$$.fragment,X_t),X_t.forEach(t),V_t.forEach(t),Fnr=i(yIe),$_e=n(yIe,"SPAN",{});var z_t=s($_e);vnr=r(z_t,"TFAutoModelForPreTraining"),z_t.forEach(t),yIe.forEach(t),bPe=i(c),vr=n(c,"DIV",{class:!0});var Vl=s(vr);m(CA.$$.fragment,Vl),Tnr=i(Vl),bc=n(Vl,"P",{});var BJ=s(bc);Mnr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kV=n(BJ,"A",{href:!0});var Q_t=s(kV);Enr=r(Q_t,"from_pretrained()"),Q_t.forEach(t),Cnr=r(BJ," class method or the "),SV=n(BJ,"A",{href:!0});var W_t=s(SV);wnr=r(W_t,"from_config()"),W_t.forEach(t),Anr=r(BJ,` class
method.`),BJ.forEach(t),ynr=i(Vl),wA=n(Vl,"P",{});var LIe=s(wA);Lnr=r(LIe,"This class cannot be instantiated directly using "),I_e=n(LIe,"CODE",{});var H_t=s(I_e);xnr=r(H_t,"__init__()"),H_t.forEach(t),knr=r(LIe," (throws an error)."),LIe.forEach(t),Snr=i(Vl),ht=n(Vl,"DIV",{class:!0});var Xl=s(ht);m(AA.$$.fragment,Xl),Rnr=i(Xl),q_e=n(Xl,"P",{});var U_t=s(q_e);Bnr=r(U_t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),U_t.forEach(t),Pnr=i(Xl),Fc=n(Xl,"P",{});var PJ=s(Fc);$nr=r(PJ,`Note:
Loading a model from its configuration file does `),N_e=n(PJ,"STRONG",{});var J_t=s(N_e);Inr=r(J_t,"not"),J_t.forEach(t),qnr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(PJ,"A",{href:!0});var Y_t=s(RV);Nnr=r(Y_t,"from_pretrained()"),Y_t.forEach(t),jnr=r(PJ," to load the model weights."),PJ.forEach(t),Dnr=i(Xl),j_e=n(Xl,"P",{});var K_t=s(j_e);Gnr=r(K_t,"Examples:"),K_t.forEach(t),Onr=i(Xl),m(yA.$$.fragment,Xl),Xl.forEach(t),Vnr=i(Vl),po=n(Vl,"DIV",{class:!0});var _a=s(po);m(LA.$$.fragment,_a),Xnr=i(_a),D_e=n(_a,"P",{});var Z_t=s(D_e);znr=r(Z_t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Z_t.forEach(t),Qnr=i(_a),bn=n(_a,"P",{});var m5=s(bn);Wnr=r(m5,"The model class to instantiate is selected based on the "),G_e=n(m5,"CODE",{});var eut=s(G_e);Hnr=r(eut,"model_type"),eut.forEach(t),Unr=r(m5,` property of the config object (either
passed as an argument or loaded from `),O_e=n(m5,"CODE",{});var out=s(O_e);Jnr=r(out,"pretrained_model_name_or_path"),out.forEach(t),Ynr=r(m5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=n(m5,"CODE",{});var rut=s(V_e);Knr=r(rut,"pretrained_model_name_or_path"),rut.forEach(t),Znr=r(m5,":"),m5.forEach(t),esr=i(_a),H=n(_a,"UL",{});var U=s(H);AT=n(U,"LI",{});var E8e=s(AT);X_e=n(E8e,"STRONG",{});var tut=s(X_e);osr=r(tut,"albert"),tut.forEach(t),rsr=r(E8e," \u2014 "),BV=n(E8e,"A",{href:!0});var aut=s(BV);tsr=r(aut,"TFAlbertForPreTraining"),aut.forEach(t),asr=r(E8e," (ALBERT model)"),E8e.forEach(t),nsr=i(U),yT=n(U,"LI",{});var C8e=s(yT);z_e=n(C8e,"STRONG",{});var nut=s(z_e);ssr=r(nut,"bart"),nut.forEach(t),lsr=r(C8e," \u2014 "),PV=n(C8e,"A",{href:!0});var sut=s(PV);isr=r(sut,"TFBartForConditionalGeneration"),sut.forEach(t),dsr=r(C8e," (BART model)"),C8e.forEach(t),csr=i(U),LT=n(U,"LI",{});var w8e=s(LT);Q_e=n(w8e,"STRONG",{});var lut=s(Q_e);fsr=r(lut,"bert"),lut.forEach(t),msr=r(w8e," \u2014 "),$V=n(w8e,"A",{href:!0});var iut=s($V);gsr=r(iut,"TFBertForPreTraining"),iut.forEach(t),hsr=r(w8e," (BERT model)"),w8e.forEach(t),psr=i(U),xT=n(U,"LI",{});var A8e=s(xT);W_e=n(A8e,"STRONG",{});var dut=s(W_e);_sr=r(dut,"camembert"),dut.forEach(t),usr=r(A8e," \u2014 "),IV=n(A8e,"A",{href:!0});var cut=s(IV);bsr=r(cut,"TFCamembertForMaskedLM"),cut.forEach(t),Fsr=r(A8e," (CamemBERT model)"),A8e.forEach(t),vsr=i(U),kT=n(U,"LI",{});var y8e=s(kT);H_e=n(y8e,"STRONG",{});var fut=s(H_e);Tsr=r(fut,"ctrl"),fut.forEach(t),Msr=r(y8e," \u2014 "),qV=n(y8e,"A",{href:!0});var mut=s(qV);Esr=r(mut,"TFCTRLLMHeadModel"),mut.forEach(t),Csr=r(y8e," (CTRL model)"),y8e.forEach(t),wsr=i(U),ST=n(U,"LI",{});var L8e=s(ST);U_e=n(L8e,"STRONG",{});var gut=s(U_e);Asr=r(gut,"distilbert"),gut.forEach(t),ysr=r(L8e," \u2014 "),NV=n(L8e,"A",{href:!0});var hut=s(NV);Lsr=r(hut,"TFDistilBertForMaskedLM"),hut.forEach(t),xsr=r(L8e," (DistilBERT model)"),L8e.forEach(t),ksr=i(U),RT=n(U,"LI",{});var x8e=s(RT);J_e=n(x8e,"STRONG",{});var put=s(J_e);Ssr=r(put,"electra"),put.forEach(t),Rsr=r(x8e," \u2014 "),jV=n(x8e,"A",{href:!0});var _ut=s(jV);Bsr=r(_ut,"TFElectraForPreTraining"),_ut.forEach(t),Psr=r(x8e," (ELECTRA model)"),x8e.forEach(t),$sr=i(U),BT=n(U,"LI",{});var k8e=s(BT);Y_e=n(k8e,"STRONG",{});var uut=s(Y_e);Isr=r(uut,"flaubert"),uut.forEach(t),qsr=r(k8e," \u2014 "),DV=n(k8e,"A",{href:!0});var but=s(DV);Nsr=r(but,"TFFlaubertWithLMHeadModel"),but.forEach(t),jsr=r(k8e," (FlauBERT model)"),k8e.forEach(t),Dsr=i(U),PT=n(U,"LI",{});var S8e=s(PT);K_e=n(S8e,"STRONG",{});var Fut=s(K_e);Gsr=r(Fut,"funnel"),Fut.forEach(t),Osr=r(S8e," \u2014 "),GV=n(S8e,"A",{href:!0});var vut=s(GV);Vsr=r(vut,"TFFunnelForPreTraining"),vut.forEach(t),Xsr=r(S8e," (Funnel Transformer model)"),S8e.forEach(t),zsr=i(U),$T=n(U,"LI",{});var R8e=s($T);Z_e=n(R8e,"STRONG",{});var Tut=s(Z_e);Qsr=r(Tut,"gpt2"),Tut.forEach(t),Wsr=r(R8e," \u2014 "),OV=n(R8e,"A",{href:!0});var Mut=s(OV);Hsr=r(Mut,"TFGPT2LMHeadModel"),Mut.forEach(t),Usr=r(R8e," (OpenAI GPT-2 model)"),R8e.forEach(t),Jsr=i(U),IT=n(U,"LI",{});var B8e=s(IT);eue=n(B8e,"STRONG",{});var Eut=s(eue);Ysr=r(Eut,"layoutlm"),Eut.forEach(t),Ksr=r(B8e," \u2014 "),VV=n(B8e,"A",{href:!0});var Cut=s(VV);Zsr=r(Cut,"TFLayoutLMForMaskedLM"),Cut.forEach(t),elr=r(B8e," (LayoutLM model)"),B8e.forEach(t),olr=i(U),qT=n(U,"LI",{});var P8e=s(qT);oue=n(P8e,"STRONG",{});var wut=s(oue);rlr=r(wut,"lxmert"),wut.forEach(t),tlr=r(P8e," \u2014 "),XV=n(P8e,"A",{href:!0});var Aut=s(XV);alr=r(Aut,"TFLxmertForPreTraining"),Aut.forEach(t),nlr=r(P8e," (LXMERT model)"),P8e.forEach(t),slr=i(U),NT=n(U,"LI",{});var $8e=s(NT);rue=n($8e,"STRONG",{});var yut=s(rue);llr=r(yut,"mobilebert"),yut.forEach(t),ilr=r($8e," \u2014 "),zV=n($8e,"A",{href:!0});var Lut=s(zV);dlr=r(Lut,"TFMobileBertForPreTraining"),Lut.forEach(t),clr=r($8e," (MobileBERT model)"),$8e.forEach(t),flr=i(U),jT=n(U,"LI",{});var I8e=s(jT);tue=n(I8e,"STRONG",{});var xut=s(tue);mlr=r(xut,"mpnet"),xut.forEach(t),glr=r(I8e," \u2014 "),QV=n(I8e,"A",{href:!0});var kut=s(QV);hlr=r(kut,"TFMPNetForMaskedLM"),kut.forEach(t),plr=r(I8e," (MPNet model)"),I8e.forEach(t),_lr=i(U),DT=n(U,"LI",{});var q8e=s(DT);aue=n(q8e,"STRONG",{});var Sut=s(aue);ulr=r(Sut,"openai-gpt"),Sut.forEach(t),blr=r(q8e," \u2014 "),WV=n(q8e,"A",{href:!0});var Rut=s(WV);Flr=r(Rut,"TFOpenAIGPTLMHeadModel"),Rut.forEach(t),vlr=r(q8e," (OpenAI GPT model)"),q8e.forEach(t),Tlr=i(U),GT=n(U,"LI",{});var N8e=s(GT);nue=n(N8e,"STRONG",{});var But=s(nue);Mlr=r(But,"roberta"),But.forEach(t),Elr=r(N8e," \u2014 "),HV=n(N8e,"A",{href:!0});var Put=s(HV);Clr=r(Put,"TFRobertaForMaskedLM"),Put.forEach(t),wlr=r(N8e," (RoBERTa model)"),N8e.forEach(t),Alr=i(U),OT=n(U,"LI",{});var j8e=s(OT);sue=n(j8e,"STRONG",{});var $ut=s(sue);ylr=r($ut,"t5"),$ut.forEach(t),Llr=r(j8e," \u2014 "),UV=n(j8e,"A",{href:!0});var Iut=s(UV);xlr=r(Iut,"TFT5ForConditionalGeneration"),Iut.forEach(t),klr=r(j8e," (T5 model)"),j8e.forEach(t),Slr=i(U),VT=n(U,"LI",{});var D8e=s(VT);lue=n(D8e,"STRONG",{});var qut=s(lue);Rlr=r(qut,"tapas"),qut.forEach(t),Blr=r(D8e," \u2014 "),JV=n(D8e,"A",{href:!0});var Nut=s(JV);Plr=r(Nut,"TFTapasForMaskedLM"),Nut.forEach(t),$lr=r(D8e," (TAPAS model)"),D8e.forEach(t),Ilr=i(U),XT=n(U,"LI",{});var G8e=s(XT);iue=n(G8e,"STRONG",{});var jut=s(iue);qlr=r(jut,"transfo-xl"),jut.forEach(t),Nlr=r(G8e," \u2014 "),YV=n(G8e,"A",{href:!0});var Dut=s(YV);jlr=r(Dut,"TFTransfoXLLMHeadModel"),Dut.forEach(t),Dlr=r(G8e," (Transformer-XL model)"),G8e.forEach(t),Glr=i(U),zT=n(U,"LI",{});var O8e=s(zT);due=n(O8e,"STRONG",{});var Gut=s(due);Olr=r(Gut,"vit_mae"),Gut.forEach(t),Vlr=r(O8e," \u2014 "),KV=n(O8e,"A",{href:!0});var Out=s(KV);Xlr=r(Out,"TFViTMAEForPreTraining"),Out.forEach(t),zlr=r(O8e," (ViTMAE model)"),O8e.forEach(t),Qlr=i(U),QT=n(U,"LI",{});var V8e=s(QT);cue=n(V8e,"STRONG",{});var Vut=s(cue);Wlr=r(Vut,"xlm"),Vut.forEach(t),Hlr=r(V8e," \u2014 "),ZV=n(V8e,"A",{href:!0});var Xut=s(ZV);Ulr=r(Xut,"TFXLMWithLMHeadModel"),Xut.forEach(t),Jlr=r(V8e," (XLM model)"),V8e.forEach(t),Ylr=i(U),WT=n(U,"LI",{});var X8e=s(WT);fue=n(X8e,"STRONG",{});var zut=s(fue);Klr=r(zut,"xlm-roberta"),zut.forEach(t),Zlr=r(X8e," \u2014 "),eX=n(X8e,"A",{href:!0});var Qut=s(eX);eir=r(Qut,"TFXLMRobertaForMaskedLM"),Qut.forEach(t),oir=r(X8e," (XLM-RoBERTa model)"),X8e.forEach(t),rir=i(U),HT=n(U,"LI",{});var z8e=s(HT);mue=n(z8e,"STRONG",{});var Wut=s(mue);tir=r(Wut,"xlnet"),Wut.forEach(t),air=r(z8e," \u2014 "),oX=n(z8e,"A",{href:!0});var Hut=s(oX);nir=r(Hut,"TFXLNetLMHeadModel"),Hut.forEach(t),sir=r(z8e," (XLNet model)"),z8e.forEach(t),U.forEach(t),lir=i(_a),gue=n(_a,"P",{});var Uut=s(gue);iir=r(Uut,"Examples:"),Uut.forEach(t),dir=i(_a),m(xA.$$.fragment,_a),_a.forEach(t),Vl.forEach(t),FPe=i(c),vc=n(c,"H2",{class:!0});var xIe=s(vc);UT=n(xIe,"A",{id:!0,class:!0,href:!0});var Jut=s(UT);hue=n(Jut,"SPAN",{});var Yut=s(hue);m(kA.$$.fragment,Yut),Yut.forEach(t),Jut.forEach(t),cir=i(xIe),pue=n(xIe,"SPAN",{});var Kut=s(pue);fir=r(Kut,"TFAutoModelForCausalLM"),Kut.forEach(t),xIe.forEach(t),vPe=i(c),Tr=n(c,"DIV",{class:!0});var zl=s(Tr);m(SA.$$.fragment,zl),mir=i(zl),Tc=n(zl,"P",{});var $J=s(Tc);gir=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rX=n($J,"A",{href:!0});var Zut=s(rX);hir=r(Zut,"from_pretrained()"),Zut.forEach(t),pir=r($J," class method or the "),tX=n($J,"A",{href:!0});var e2t=s(tX);_ir=r(e2t,"from_config()"),e2t.forEach(t),uir=r($J,` class
method.`),$J.forEach(t),bir=i(zl),RA=n(zl,"P",{});var kIe=s(RA);Fir=r(kIe,"This class cannot be instantiated directly using "),_ue=n(kIe,"CODE",{});var o2t=s(_ue);vir=r(o2t,"__init__()"),o2t.forEach(t),Tir=r(kIe," (throws an error)."),kIe.forEach(t),Mir=i(zl),pt=n(zl,"DIV",{class:!0});var Ql=s(pt);m(BA.$$.fragment,Ql),Eir=i(Ql),uue=n(Ql,"P",{});var r2t=s(uue);Cir=r(r2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),r2t.forEach(t),wir=i(Ql),Mc=n(Ql,"P",{});var IJ=s(Mc);Air=r(IJ,`Note:
Loading a model from its configuration file does `),bue=n(IJ,"STRONG",{});var t2t=s(bue);yir=r(t2t,"not"),t2t.forEach(t),Lir=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(IJ,"A",{href:!0});var a2t=s(aX);xir=r(a2t,"from_pretrained()"),a2t.forEach(t),kir=r(IJ," to load the model weights."),IJ.forEach(t),Sir=i(Ql),Fue=n(Ql,"P",{});var n2t=s(Fue);Rir=r(n2t,"Examples:"),n2t.forEach(t),Bir=i(Ql),m(PA.$$.fragment,Ql),Ql.forEach(t),Pir=i(zl),_o=n(zl,"DIV",{class:!0});var ua=s(_o);m($A.$$.fragment,ua),$ir=i(ua),vue=n(ua,"P",{});var s2t=s(vue);Iir=r(s2t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),s2t.forEach(t),qir=i(ua),Fn=n(ua,"P",{});var g5=s(Fn);Nir=r(g5,"The model class to instantiate is selected based on the "),Tue=n(g5,"CODE",{});var l2t=s(Tue);jir=r(l2t,"model_type"),l2t.forEach(t),Dir=r(g5,` property of the config object (either
passed as an argument or loaded from `),Mue=n(g5,"CODE",{});var i2t=s(Mue);Gir=r(i2t,"pretrained_model_name_or_path"),i2t.forEach(t),Oir=r(g5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=n(g5,"CODE",{});var d2t=s(Eue);Vir=r(d2t,"pretrained_model_name_or_path"),d2t.forEach(t),Xir=r(g5,":"),g5.forEach(t),zir=i(ua),me=n(ua,"UL",{});var _e=s(me);JT=n(_e,"LI",{});var Q8e=s(JT);Cue=n(Q8e,"STRONG",{});var c2t=s(Cue);Qir=r(c2t,"bert"),c2t.forEach(t),Wir=r(Q8e," \u2014 "),nX=n(Q8e,"A",{href:!0});var f2t=s(nX);Hir=r(f2t,"TFBertLMHeadModel"),f2t.forEach(t),Uir=r(Q8e," (BERT model)"),Q8e.forEach(t),Jir=i(_e),YT=n(_e,"LI",{});var W8e=s(YT);wue=n(W8e,"STRONG",{});var m2t=s(wue);Yir=r(m2t,"camembert"),m2t.forEach(t),Kir=r(W8e," \u2014 "),sX=n(W8e,"A",{href:!0});var g2t=s(sX);Zir=r(g2t,"TFCamembertForCausalLM"),g2t.forEach(t),edr=r(W8e," (CamemBERT model)"),W8e.forEach(t),odr=i(_e),KT=n(_e,"LI",{});var H8e=s(KT);Aue=n(H8e,"STRONG",{});var h2t=s(Aue);rdr=r(h2t,"ctrl"),h2t.forEach(t),tdr=r(H8e," \u2014 "),lX=n(H8e,"A",{href:!0});var p2t=s(lX);adr=r(p2t,"TFCTRLLMHeadModel"),p2t.forEach(t),ndr=r(H8e," (CTRL model)"),H8e.forEach(t),sdr=i(_e),ZT=n(_e,"LI",{});var U8e=s(ZT);yue=n(U8e,"STRONG",{});var _2t=s(yue);ldr=r(_2t,"gpt2"),_2t.forEach(t),idr=r(U8e," \u2014 "),iX=n(U8e,"A",{href:!0});var u2t=s(iX);ddr=r(u2t,"TFGPT2LMHeadModel"),u2t.forEach(t),cdr=r(U8e," (OpenAI GPT-2 model)"),U8e.forEach(t),fdr=i(_e),e7=n(_e,"LI",{});var J8e=s(e7);Lue=n(J8e,"STRONG",{});var b2t=s(Lue);mdr=r(b2t,"gptj"),b2t.forEach(t),gdr=r(J8e," \u2014 "),dX=n(J8e,"A",{href:!0});var F2t=s(dX);hdr=r(F2t,"TFGPTJForCausalLM"),F2t.forEach(t),pdr=r(J8e," (GPT-J model)"),J8e.forEach(t),_dr=i(_e),o7=n(_e,"LI",{});var Y8e=s(o7);xue=n(Y8e,"STRONG",{});var v2t=s(xue);udr=r(v2t,"openai-gpt"),v2t.forEach(t),bdr=r(Y8e," \u2014 "),cX=n(Y8e,"A",{href:!0});var T2t=s(cX);Fdr=r(T2t,"TFOpenAIGPTLMHeadModel"),T2t.forEach(t),vdr=r(Y8e," (OpenAI GPT model)"),Y8e.forEach(t),Tdr=i(_e),r7=n(_e,"LI",{});var K8e=s(r7);kue=n(K8e,"STRONG",{});var M2t=s(kue);Mdr=r(M2t,"rembert"),M2t.forEach(t),Edr=r(K8e," \u2014 "),fX=n(K8e,"A",{href:!0});var E2t=s(fX);Cdr=r(E2t,"TFRemBertForCausalLM"),E2t.forEach(t),wdr=r(K8e," (RemBERT model)"),K8e.forEach(t),Adr=i(_e),t7=n(_e,"LI",{});var Z8e=s(t7);Sue=n(Z8e,"STRONG",{});var C2t=s(Sue);ydr=r(C2t,"roberta"),C2t.forEach(t),Ldr=r(Z8e," \u2014 "),mX=n(Z8e,"A",{href:!0});var w2t=s(mX);xdr=r(w2t,"TFRobertaForCausalLM"),w2t.forEach(t),kdr=r(Z8e," (RoBERTa model)"),Z8e.forEach(t),Sdr=i(_e),a7=n(_e,"LI",{});var exe=s(a7);Rue=n(exe,"STRONG",{});var A2t=s(Rue);Rdr=r(A2t,"roformer"),A2t.forEach(t),Bdr=r(exe," \u2014 "),gX=n(exe,"A",{href:!0});var y2t=s(gX);Pdr=r(y2t,"TFRoFormerForCausalLM"),y2t.forEach(t),$dr=r(exe," (RoFormer model)"),exe.forEach(t),Idr=i(_e),n7=n(_e,"LI",{});var oxe=s(n7);Bue=n(oxe,"STRONG",{});var L2t=s(Bue);qdr=r(L2t,"transfo-xl"),L2t.forEach(t),Ndr=r(oxe," \u2014 "),hX=n(oxe,"A",{href:!0});var x2t=s(hX);jdr=r(x2t,"TFTransfoXLLMHeadModel"),x2t.forEach(t),Ddr=r(oxe," (Transformer-XL model)"),oxe.forEach(t),Gdr=i(_e),s7=n(_e,"LI",{});var rxe=s(s7);Pue=n(rxe,"STRONG",{});var k2t=s(Pue);Odr=r(k2t,"xlm"),k2t.forEach(t),Vdr=r(rxe," \u2014 "),pX=n(rxe,"A",{href:!0});var S2t=s(pX);Xdr=r(S2t,"TFXLMWithLMHeadModel"),S2t.forEach(t),zdr=r(rxe," (XLM model)"),rxe.forEach(t),Qdr=i(_e),l7=n(_e,"LI",{});var txe=s(l7);$ue=n(txe,"STRONG",{});var R2t=s($ue);Wdr=r(R2t,"xlnet"),R2t.forEach(t),Hdr=r(txe," \u2014 "),_X=n(txe,"A",{href:!0});var B2t=s(_X);Udr=r(B2t,"TFXLNetLMHeadModel"),B2t.forEach(t),Jdr=r(txe," (XLNet model)"),txe.forEach(t),_e.forEach(t),Ydr=i(ua),Iue=n(ua,"P",{});var P2t=s(Iue);Kdr=r(P2t,"Examples:"),P2t.forEach(t),Zdr=i(ua),m(IA.$$.fragment,ua),ua.forEach(t),zl.forEach(t),TPe=i(c),Ec=n(c,"H2",{class:!0});var SIe=s(Ec);i7=n(SIe,"A",{id:!0,class:!0,href:!0});var $2t=s(i7);que=n($2t,"SPAN",{});var I2t=s(que);m(qA.$$.fragment,I2t),I2t.forEach(t),$2t.forEach(t),ecr=i(SIe),Nue=n(SIe,"SPAN",{});var q2t=s(Nue);ocr=r(q2t,"TFAutoModelForImageClassification"),q2t.forEach(t),SIe.forEach(t),MPe=i(c),Mr=n(c,"DIV",{class:!0});var Wl=s(Mr);m(NA.$$.fragment,Wl),rcr=i(Wl),Cc=n(Wl,"P",{});var qJ=s(Cc);tcr=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uX=n(qJ,"A",{href:!0});var N2t=s(uX);acr=r(N2t,"from_pretrained()"),N2t.forEach(t),ncr=r(qJ," class method or the "),bX=n(qJ,"A",{href:!0});var j2t=s(bX);scr=r(j2t,"from_config()"),j2t.forEach(t),lcr=r(qJ,` class
method.`),qJ.forEach(t),icr=i(Wl),jA=n(Wl,"P",{});var RIe=s(jA);dcr=r(RIe,"This class cannot be instantiated directly using "),jue=n(RIe,"CODE",{});var D2t=s(jue);ccr=r(D2t,"__init__()"),D2t.forEach(t),fcr=r(RIe," (throws an error)."),RIe.forEach(t),mcr=i(Wl),_t=n(Wl,"DIV",{class:!0});var Hl=s(_t);m(DA.$$.fragment,Hl),gcr=i(Hl),Due=n(Hl,"P",{});var G2t=s(Due);hcr=r(G2t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),G2t.forEach(t),pcr=i(Hl),wc=n(Hl,"P",{});var NJ=s(wc);_cr=r(NJ,`Note:
Loading a model from its configuration file does `),Gue=n(NJ,"STRONG",{});var O2t=s(Gue);ucr=r(O2t,"not"),O2t.forEach(t),bcr=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(NJ,"A",{href:!0});var V2t=s(FX);Fcr=r(V2t,"from_pretrained()"),V2t.forEach(t),vcr=r(NJ," to load the model weights."),NJ.forEach(t),Tcr=i(Hl),Oue=n(Hl,"P",{});var X2t=s(Oue);Mcr=r(X2t,"Examples:"),X2t.forEach(t),Ecr=i(Hl),m(GA.$$.fragment,Hl),Hl.forEach(t),Ccr=i(Wl),uo=n(Wl,"DIV",{class:!0});var ba=s(uo);m(OA.$$.fragment,ba),wcr=i(ba),Vue=n(ba,"P",{});var z2t=s(Vue);Acr=r(z2t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),z2t.forEach(t),ycr=i(ba),vn=n(ba,"P",{});var h5=s(vn);Lcr=r(h5,"The model class to instantiate is selected based on the "),Xue=n(h5,"CODE",{});var Q2t=s(Xue);xcr=r(Q2t,"model_type"),Q2t.forEach(t),kcr=r(h5,` property of the config object (either
passed as an argument or loaded from `),zue=n(h5,"CODE",{});var W2t=s(zue);Scr=r(W2t,"pretrained_model_name_or_path"),W2t.forEach(t),Rcr=r(h5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=n(h5,"CODE",{});var H2t=s(Que);Bcr=r(H2t,"pretrained_model_name_or_path"),H2t.forEach(t),Pcr=r(h5,":"),h5.forEach(t),$cr=i(ba),VA=n(ba,"UL",{});var BIe=s(VA);d7=n(BIe,"LI",{});var axe=s(d7);Wue=n(axe,"STRONG",{});var U2t=s(Wue);Icr=r(U2t,"convnext"),U2t.forEach(t),qcr=r(axe," \u2014 "),vX=n(axe,"A",{href:!0});var J2t=s(vX);Ncr=r(J2t,"TFConvNextForImageClassification"),J2t.forEach(t),jcr=r(axe," (ConvNext model)"),axe.forEach(t),Dcr=i(BIe),c7=n(BIe,"LI",{});var nxe=s(c7);Hue=n(nxe,"STRONG",{});var Y2t=s(Hue);Gcr=r(Y2t,"vit"),Y2t.forEach(t),Ocr=r(nxe," \u2014 "),TX=n(nxe,"A",{href:!0});var K2t=s(TX);Vcr=r(K2t,"TFViTForImageClassification"),K2t.forEach(t),Xcr=r(nxe," (ViT model)"),nxe.forEach(t),BIe.forEach(t),zcr=i(ba),Uue=n(ba,"P",{});var Z2t=s(Uue);Qcr=r(Z2t,"Examples:"),Z2t.forEach(t),Wcr=i(ba),m(XA.$$.fragment,ba),ba.forEach(t),Wl.forEach(t),EPe=i(c),Ac=n(c,"H2",{class:!0});var PIe=s(Ac);f7=n(PIe,"A",{id:!0,class:!0,href:!0});var e1t=s(f7);Jue=n(e1t,"SPAN",{});var o1t=s(Jue);m(zA.$$.fragment,o1t),o1t.forEach(t),e1t.forEach(t),Hcr=i(PIe),Yue=n(PIe,"SPAN",{});var r1t=s(Yue);Ucr=r(r1t,"TFAutoModelForMaskedLM"),r1t.forEach(t),PIe.forEach(t),CPe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(QA.$$.fragment,Ul),Jcr=i(Ul),yc=n(Ul,"P",{});var jJ=s(yc);Ycr=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MX=n(jJ,"A",{href:!0});var t1t=s(MX);Kcr=r(t1t,"from_pretrained()"),t1t.forEach(t),Zcr=r(jJ," class method or the "),EX=n(jJ,"A",{href:!0});var a1t=s(EX);efr=r(a1t,"from_config()"),a1t.forEach(t),ofr=r(jJ,` class
method.`),jJ.forEach(t),rfr=i(Ul),WA=n(Ul,"P",{});var $Ie=s(WA);tfr=r($Ie,"This class cannot be instantiated directly using "),Kue=n($Ie,"CODE",{});var n1t=s(Kue);afr=r(n1t,"__init__()"),n1t.forEach(t),nfr=r($Ie," (throws an error)."),$Ie.forEach(t),sfr=i(Ul),ut=n(Ul,"DIV",{class:!0});var Jl=s(ut);m(HA.$$.fragment,Jl),lfr=i(Jl),Zue=n(Jl,"P",{});var s1t=s(Zue);ifr=r(s1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),s1t.forEach(t),dfr=i(Jl),Lc=n(Jl,"P",{});var DJ=s(Lc);cfr=r(DJ,`Note:
Loading a model from its configuration file does `),e2e=n(DJ,"STRONG",{});var l1t=s(e2e);ffr=r(l1t,"not"),l1t.forEach(t),mfr=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(DJ,"A",{href:!0});var i1t=s(CX);gfr=r(i1t,"from_pretrained()"),i1t.forEach(t),hfr=r(DJ," to load the model weights."),DJ.forEach(t),pfr=i(Jl),o2e=n(Jl,"P",{});var d1t=s(o2e);_fr=r(d1t,"Examples:"),d1t.forEach(t),ufr=i(Jl),m(UA.$$.fragment,Jl),Jl.forEach(t),bfr=i(Ul),bo=n(Ul,"DIV",{class:!0});var Fa=s(bo);m(JA.$$.fragment,Fa),Ffr=i(Fa),r2e=n(Fa,"P",{});var c1t=s(r2e);vfr=r(c1t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),c1t.forEach(t),Tfr=i(Fa),Tn=n(Fa,"P",{});var p5=s(Tn);Mfr=r(p5,"The model class to instantiate is selected based on the "),t2e=n(p5,"CODE",{});var f1t=s(t2e);Efr=r(f1t,"model_type"),f1t.forEach(t),Cfr=r(p5,` property of the config object (either
passed as an argument or loaded from `),a2e=n(p5,"CODE",{});var m1t=s(a2e);wfr=r(m1t,"pretrained_model_name_or_path"),m1t.forEach(t),Afr=r(p5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n2e=n(p5,"CODE",{});var g1t=s(n2e);yfr=r(g1t,"pretrained_model_name_or_path"),g1t.forEach(t),Lfr=r(p5,":"),p5.forEach(t),xfr=i(Fa),J=n(Fa,"UL",{});var oe=s(J);m7=n(oe,"LI",{});var sxe=s(m7);s2e=n(sxe,"STRONG",{});var h1t=s(s2e);kfr=r(h1t,"albert"),h1t.forEach(t),Sfr=r(sxe," \u2014 "),wX=n(sxe,"A",{href:!0});var p1t=s(wX);Rfr=r(p1t,"TFAlbertForMaskedLM"),p1t.forEach(t),Bfr=r(sxe," (ALBERT model)"),sxe.forEach(t),Pfr=i(oe),g7=n(oe,"LI",{});var lxe=s(g7);l2e=n(lxe,"STRONG",{});var _1t=s(l2e);$fr=r(_1t,"bert"),_1t.forEach(t),Ifr=r(lxe," \u2014 "),AX=n(lxe,"A",{href:!0});var u1t=s(AX);qfr=r(u1t,"TFBertForMaskedLM"),u1t.forEach(t),Nfr=r(lxe," (BERT model)"),lxe.forEach(t),jfr=i(oe),h7=n(oe,"LI",{});var ixe=s(h7);i2e=n(ixe,"STRONG",{});var b1t=s(i2e);Dfr=r(b1t,"camembert"),b1t.forEach(t),Gfr=r(ixe," \u2014 "),yX=n(ixe,"A",{href:!0});var F1t=s(yX);Ofr=r(F1t,"TFCamembertForMaskedLM"),F1t.forEach(t),Vfr=r(ixe," (CamemBERT model)"),ixe.forEach(t),Xfr=i(oe),p7=n(oe,"LI",{});var dxe=s(p7);d2e=n(dxe,"STRONG",{});var v1t=s(d2e);zfr=r(v1t,"convbert"),v1t.forEach(t),Qfr=r(dxe," \u2014 "),LX=n(dxe,"A",{href:!0});var T1t=s(LX);Wfr=r(T1t,"TFConvBertForMaskedLM"),T1t.forEach(t),Hfr=r(dxe," (ConvBERT model)"),dxe.forEach(t),Ufr=i(oe),_7=n(oe,"LI",{});var cxe=s(_7);c2e=n(cxe,"STRONG",{});var M1t=s(c2e);Jfr=r(M1t,"deberta"),M1t.forEach(t),Yfr=r(cxe," \u2014 "),xX=n(cxe,"A",{href:!0});var E1t=s(xX);Kfr=r(E1t,"TFDebertaForMaskedLM"),E1t.forEach(t),Zfr=r(cxe," (DeBERTa model)"),cxe.forEach(t),emr=i(oe),u7=n(oe,"LI",{});var fxe=s(u7);f2e=n(fxe,"STRONG",{});var C1t=s(f2e);omr=r(C1t,"deberta-v2"),C1t.forEach(t),rmr=r(fxe," \u2014 "),kX=n(fxe,"A",{href:!0});var w1t=s(kX);tmr=r(w1t,"TFDebertaV2ForMaskedLM"),w1t.forEach(t),amr=r(fxe," (DeBERTa-v2 model)"),fxe.forEach(t),nmr=i(oe),b7=n(oe,"LI",{});var mxe=s(b7);m2e=n(mxe,"STRONG",{});var A1t=s(m2e);smr=r(A1t,"distilbert"),A1t.forEach(t),lmr=r(mxe," \u2014 "),SX=n(mxe,"A",{href:!0});var y1t=s(SX);imr=r(y1t,"TFDistilBertForMaskedLM"),y1t.forEach(t),dmr=r(mxe," (DistilBERT model)"),mxe.forEach(t),cmr=i(oe),F7=n(oe,"LI",{});var gxe=s(F7);g2e=n(gxe,"STRONG",{});var L1t=s(g2e);fmr=r(L1t,"electra"),L1t.forEach(t),mmr=r(gxe," \u2014 "),RX=n(gxe,"A",{href:!0});var x1t=s(RX);gmr=r(x1t,"TFElectraForMaskedLM"),x1t.forEach(t),hmr=r(gxe," (ELECTRA model)"),gxe.forEach(t),pmr=i(oe),v7=n(oe,"LI",{});var hxe=s(v7);h2e=n(hxe,"STRONG",{});var k1t=s(h2e);_mr=r(k1t,"flaubert"),k1t.forEach(t),umr=r(hxe," \u2014 "),BX=n(hxe,"A",{href:!0});var S1t=s(BX);bmr=r(S1t,"TFFlaubertWithLMHeadModel"),S1t.forEach(t),Fmr=r(hxe," (FlauBERT model)"),hxe.forEach(t),vmr=i(oe),T7=n(oe,"LI",{});var pxe=s(T7);p2e=n(pxe,"STRONG",{});var R1t=s(p2e);Tmr=r(R1t,"funnel"),R1t.forEach(t),Mmr=r(pxe," \u2014 "),PX=n(pxe,"A",{href:!0});var B1t=s(PX);Emr=r(B1t,"TFFunnelForMaskedLM"),B1t.forEach(t),Cmr=r(pxe," (Funnel Transformer model)"),pxe.forEach(t),wmr=i(oe),M7=n(oe,"LI",{});var _xe=s(M7);_2e=n(_xe,"STRONG",{});var P1t=s(_2e);Amr=r(P1t,"layoutlm"),P1t.forEach(t),ymr=r(_xe," \u2014 "),$X=n(_xe,"A",{href:!0});var $1t=s($X);Lmr=r($1t,"TFLayoutLMForMaskedLM"),$1t.forEach(t),xmr=r(_xe," (LayoutLM model)"),_xe.forEach(t),kmr=i(oe),E7=n(oe,"LI",{});var uxe=s(E7);u2e=n(uxe,"STRONG",{});var I1t=s(u2e);Smr=r(I1t,"longformer"),I1t.forEach(t),Rmr=r(uxe," \u2014 "),IX=n(uxe,"A",{href:!0});var q1t=s(IX);Bmr=r(q1t,"TFLongformerForMaskedLM"),q1t.forEach(t),Pmr=r(uxe," (Longformer model)"),uxe.forEach(t),$mr=i(oe),C7=n(oe,"LI",{});var bxe=s(C7);b2e=n(bxe,"STRONG",{});var N1t=s(b2e);Imr=r(N1t,"mobilebert"),N1t.forEach(t),qmr=r(bxe," \u2014 "),qX=n(bxe,"A",{href:!0});var j1t=s(qX);Nmr=r(j1t,"TFMobileBertForMaskedLM"),j1t.forEach(t),jmr=r(bxe," (MobileBERT model)"),bxe.forEach(t),Dmr=i(oe),w7=n(oe,"LI",{});var Fxe=s(w7);F2e=n(Fxe,"STRONG",{});var D1t=s(F2e);Gmr=r(D1t,"mpnet"),D1t.forEach(t),Omr=r(Fxe," \u2014 "),NX=n(Fxe,"A",{href:!0});var G1t=s(NX);Vmr=r(G1t,"TFMPNetForMaskedLM"),G1t.forEach(t),Xmr=r(Fxe," (MPNet model)"),Fxe.forEach(t),zmr=i(oe),A7=n(oe,"LI",{});var vxe=s(A7);v2e=n(vxe,"STRONG",{});var O1t=s(v2e);Qmr=r(O1t,"rembert"),O1t.forEach(t),Wmr=r(vxe," \u2014 "),jX=n(vxe,"A",{href:!0});var V1t=s(jX);Hmr=r(V1t,"TFRemBertForMaskedLM"),V1t.forEach(t),Umr=r(vxe," (RemBERT model)"),vxe.forEach(t),Jmr=i(oe),y7=n(oe,"LI",{});var Txe=s(y7);T2e=n(Txe,"STRONG",{});var X1t=s(T2e);Ymr=r(X1t,"roberta"),X1t.forEach(t),Kmr=r(Txe," \u2014 "),DX=n(Txe,"A",{href:!0});var z1t=s(DX);Zmr=r(z1t,"TFRobertaForMaskedLM"),z1t.forEach(t),egr=r(Txe," (RoBERTa model)"),Txe.forEach(t),ogr=i(oe),L7=n(oe,"LI",{});var Mxe=s(L7);M2e=n(Mxe,"STRONG",{});var Q1t=s(M2e);rgr=r(Q1t,"roformer"),Q1t.forEach(t),tgr=r(Mxe," \u2014 "),GX=n(Mxe,"A",{href:!0});var W1t=s(GX);agr=r(W1t,"TFRoFormerForMaskedLM"),W1t.forEach(t),ngr=r(Mxe," (RoFormer model)"),Mxe.forEach(t),sgr=i(oe),x7=n(oe,"LI",{});var Exe=s(x7);E2e=n(Exe,"STRONG",{});var H1t=s(E2e);lgr=r(H1t,"tapas"),H1t.forEach(t),igr=r(Exe," \u2014 "),OX=n(Exe,"A",{href:!0});var U1t=s(OX);dgr=r(U1t,"TFTapasForMaskedLM"),U1t.forEach(t),cgr=r(Exe," (TAPAS model)"),Exe.forEach(t),fgr=i(oe),k7=n(oe,"LI",{});var Cxe=s(k7);C2e=n(Cxe,"STRONG",{});var J1t=s(C2e);mgr=r(J1t,"xlm"),J1t.forEach(t),ggr=r(Cxe," \u2014 "),VX=n(Cxe,"A",{href:!0});var Y1t=s(VX);hgr=r(Y1t,"TFXLMWithLMHeadModel"),Y1t.forEach(t),pgr=r(Cxe," (XLM model)"),Cxe.forEach(t),_gr=i(oe),S7=n(oe,"LI",{});var wxe=s(S7);w2e=n(wxe,"STRONG",{});var K1t=s(w2e);ugr=r(K1t,"xlm-roberta"),K1t.forEach(t),bgr=r(wxe," \u2014 "),XX=n(wxe,"A",{href:!0});var Z1t=s(XX);Fgr=r(Z1t,"TFXLMRobertaForMaskedLM"),Z1t.forEach(t),vgr=r(wxe," (XLM-RoBERTa model)"),wxe.forEach(t),oe.forEach(t),Tgr=i(Fa),A2e=n(Fa,"P",{});var ebt=s(A2e);Mgr=r(ebt,"Examples:"),ebt.forEach(t),Egr=i(Fa),m(YA.$$.fragment,Fa),Fa.forEach(t),Ul.forEach(t),wPe=i(c),xc=n(c,"H2",{class:!0});var IIe=s(xc);R7=n(IIe,"A",{id:!0,class:!0,href:!0});var obt=s(R7);y2e=n(obt,"SPAN",{});var rbt=s(y2e);m(KA.$$.fragment,rbt),rbt.forEach(t),obt.forEach(t),Cgr=i(IIe),L2e=n(IIe,"SPAN",{});var tbt=s(L2e);wgr=r(tbt,"TFAutoModelForSeq2SeqLM"),tbt.forEach(t),IIe.forEach(t),APe=i(c),Cr=n(c,"DIV",{class:!0});var Yl=s(Cr);m(ZA.$$.fragment,Yl),Agr=i(Yl),kc=n(Yl,"P",{});var GJ=s(kc);ygr=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zX=n(GJ,"A",{href:!0});var abt=s(zX);Lgr=r(abt,"from_pretrained()"),abt.forEach(t),xgr=r(GJ," class method or the "),QX=n(GJ,"A",{href:!0});var nbt=s(QX);kgr=r(nbt,"from_config()"),nbt.forEach(t),Sgr=r(GJ,` class
method.`),GJ.forEach(t),Rgr=i(Yl),e0=n(Yl,"P",{});var qIe=s(e0);Bgr=r(qIe,"This class cannot be instantiated directly using "),x2e=n(qIe,"CODE",{});var sbt=s(x2e);Pgr=r(sbt,"__init__()"),sbt.forEach(t),$gr=r(qIe," (throws an error)."),qIe.forEach(t),Igr=i(Yl),bt=n(Yl,"DIV",{class:!0});var Kl=s(bt);m(o0.$$.fragment,Kl),qgr=i(Kl),k2e=n(Kl,"P",{});var lbt=s(k2e);Ngr=r(lbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lbt.forEach(t),jgr=i(Kl),Sc=n(Kl,"P",{});var OJ=s(Sc);Dgr=r(OJ,`Note:
Loading a model from its configuration file does `),S2e=n(OJ,"STRONG",{});var ibt=s(S2e);Ggr=r(ibt,"not"),ibt.forEach(t),Ogr=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(OJ,"A",{href:!0});var dbt=s(WX);Vgr=r(dbt,"from_pretrained()"),dbt.forEach(t),Xgr=r(OJ," to load the model weights."),OJ.forEach(t),zgr=i(Kl),R2e=n(Kl,"P",{});var cbt=s(R2e);Qgr=r(cbt,"Examples:"),cbt.forEach(t),Wgr=i(Kl),m(r0.$$.fragment,Kl),Kl.forEach(t),Hgr=i(Yl),Fo=n(Yl,"DIV",{class:!0});var va=s(Fo);m(t0.$$.fragment,va),Ugr=i(va),B2e=n(va,"P",{});var fbt=s(B2e);Jgr=r(fbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fbt.forEach(t),Ygr=i(va),Mn=n(va,"P",{});var _5=s(Mn);Kgr=r(_5,"The model class to instantiate is selected based on the "),P2e=n(_5,"CODE",{});var mbt=s(P2e);Zgr=r(mbt,"model_type"),mbt.forEach(t),ehr=r(_5,` property of the config object (either
passed as an argument or loaded from `),$2e=n(_5,"CODE",{});var gbt=s($2e);ohr=r(gbt,"pretrained_model_name_or_path"),gbt.forEach(t),rhr=r(_5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=n(_5,"CODE",{});var hbt=s(I2e);thr=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),ahr=r(_5,":"),_5.forEach(t),nhr=i(va),be=n(va,"UL",{});var we=s(be);B7=n(we,"LI",{});var Axe=s(B7);q2e=n(Axe,"STRONG",{});var pbt=s(q2e);shr=r(pbt,"bart"),pbt.forEach(t),lhr=r(Axe," \u2014 "),HX=n(Axe,"A",{href:!0});var _bt=s(HX);ihr=r(_bt,"TFBartForConditionalGeneration"),_bt.forEach(t),dhr=r(Axe," (BART model)"),Axe.forEach(t),chr=i(we),P7=n(we,"LI",{});var yxe=s(P7);N2e=n(yxe,"STRONG",{});var ubt=s(N2e);fhr=r(ubt,"blenderbot"),ubt.forEach(t),mhr=r(yxe," \u2014 "),UX=n(yxe,"A",{href:!0});var bbt=s(UX);ghr=r(bbt,"TFBlenderbotForConditionalGeneration"),bbt.forEach(t),hhr=r(yxe," (Blenderbot model)"),yxe.forEach(t),phr=i(we),$7=n(we,"LI",{});var Lxe=s($7);j2e=n(Lxe,"STRONG",{});var Fbt=s(j2e);_hr=r(Fbt,"blenderbot-small"),Fbt.forEach(t),uhr=r(Lxe," \u2014 "),JX=n(Lxe,"A",{href:!0});var vbt=s(JX);bhr=r(vbt,"TFBlenderbotSmallForConditionalGeneration"),vbt.forEach(t),Fhr=r(Lxe," (BlenderbotSmall model)"),Lxe.forEach(t),vhr=i(we),I7=n(we,"LI",{});var xxe=s(I7);D2e=n(xxe,"STRONG",{});var Tbt=s(D2e);Thr=r(Tbt,"encoder-decoder"),Tbt.forEach(t),Mhr=r(xxe," \u2014 "),YX=n(xxe,"A",{href:!0});var Mbt=s(YX);Ehr=r(Mbt,"TFEncoderDecoderModel"),Mbt.forEach(t),Chr=r(xxe," (Encoder decoder model)"),xxe.forEach(t),whr=i(we),q7=n(we,"LI",{});var kxe=s(q7);G2e=n(kxe,"STRONG",{});var Ebt=s(G2e);Ahr=r(Ebt,"led"),Ebt.forEach(t),yhr=r(kxe," \u2014 "),KX=n(kxe,"A",{href:!0});var Cbt=s(KX);Lhr=r(Cbt,"TFLEDForConditionalGeneration"),Cbt.forEach(t),xhr=r(kxe," (LED model)"),kxe.forEach(t),khr=i(we),N7=n(we,"LI",{});var Sxe=s(N7);O2e=n(Sxe,"STRONG",{});var wbt=s(O2e);Shr=r(wbt,"marian"),wbt.forEach(t),Rhr=r(Sxe," \u2014 "),ZX=n(Sxe,"A",{href:!0});var Abt=s(ZX);Bhr=r(Abt,"TFMarianMTModel"),Abt.forEach(t),Phr=r(Sxe," (Marian model)"),Sxe.forEach(t),$hr=i(we),j7=n(we,"LI",{});var Rxe=s(j7);V2e=n(Rxe,"STRONG",{});var ybt=s(V2e);Ihr=r(ybt,"mbart"),ybt.forEach(t),qhr=r(Rxe," \u2014 "),ez=n(Rxe,"A",{href:!0});var Lbt=s(ez);Nhr=r(Lbt,"TFMBartForConditionalGeneration"),Lbt.forEach(t),jhr=r(Rxe," (mBART model)"),Rxe.forEach(t),Dhr=i(we),D7=n(we,"LI",{});var Bxe=s(D7);X2e=n(Bxe,"STRONG",{});var xbt=s(X2e);Ghr=r(xbt,"mt5"),xbt.forEach(t),Ohr=r(Bxe," \u2014 "),oz=n(Bxe,"A",{href:!0});var kbt=s(oz);Vhr=r(kbt,"TFMT5ForConditionalGeneration"),kbt.forEach(t),Xhr=r(Bxe," (mT5 model)"),Bxe.forEach(t),zhr=i(we),G7=n(we,"LI",{});var Pxe=s(G7);z2e=n(Pxe,"STRONG",{});var Sbt=s(z2e);Qhr=r(Sbt,"pegasus"),Sbt.forEach(t),Whr=r(Pxe," \u2014 "),rz=n(Pxe,"A",{href:!0});var Rbt=s(rz);Hhr=r(Rbt,"TFPegasusForConditionalGeneration"),Rbt.forEach(t),Uhr=r(Pxe," (Pegasus model)"),Pxe.forEach(t),Jhr=i(we),O7=n(we,"LI",{});var $xe=s(O7);Q2e=n($xe,"STRONG",{});var Bbt=s(Q2e);Yhr=r(Bbt,"t5"),Bbt.forEach(t),Khr=r($xe," \u2014 "),tz=n($xe,"A",{href:!0});var Pbt=s(tz);Zhr=r(Pbt,"TFT5ForConditionalGeneration"),Pbt.forEach(t),epr=r($xe," (T5 model)"),$xe.forEach(t),we.forEach(t),opr=i(va),W2e=n(va,"P",{});var $bt=s(W2e);rpr=r($bt,"Examples:"),$bt.forEach(t),tpr=i(va),m(a0.$$.fragment,va),va.forEach(t),Yl.forEach(t),yPe=i(c),Rc=n(c,"H2",{class:!0});var NIe=s(Rc);V7=n(NIe,"A",{id:!0,class:!0,href:!0});var Ibt=s(V7);H2e=n(Ibt,"SPAN",{});var qbt=s(H2e);m(n0.$$.fragment,qbt),qbt.forEach(t),Ibt.forEach(t),apr=i(NIe),U2e=n(NIe,"SPAN",{});var Nbt=s(U2e);npr=r(Nbt,"TFAutoModelForSequenceClassification"),Nbt.forEach(t),NIe.forEach(t),LPe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(s0.$$.fragment,Zl),spr=i(Zl),Bc=n(Zl,"P",{});var VJ=s(Bc);lpr=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),az=n(VJ,"A",{href:!0});var jbt=s(az);ipr=r(jbt,"from_pretrained()"),jbt.forEach(t),dpr=r(VJ," class method or the "),nz=n(VJ,"A",{href:!0});var Dbt=s(nz);cpr=r(Dbt,"from_config()"),Dbt.forEach(t),fpr=r(VJ,` class
method.`),VJ.forEach(t),mpr=i(Zl),l0=n(Zl,"P",{});var jIe=s(l0);gpr=r(jIe,"This class cannot be instantiated directly using "),J2e=n(jIe,"CODE",{});var Gbt=s(J2e);hpr=r(Gbt,"__init__()"),Gbt.forEach(t),ppr=r(jIe," (throws an error)."),jIe.forEach(t),_pr=i(Zl),Ft=n(Zl,"DIV",{class:!0});var ei=s(Ft);m(i0.$$.fragment,ei),upr=i(ei),Y2e=n(ei,"P",{});var Obt=s(Y2e);bpr=r(Obt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Obt.forEach(t),Fpr=i(ei),Pc=n(ei,"P",{});var XJ=s(Pc);vpr=r(XJ,`Note:
Loading a model from its configuration file does `),K2e=n(XJ,"STRONG",{});var Vbt=s(K2e);Tpr=r(Vbt,"not"),Vbt.forEach(t),Mpr=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(XJ,"A",{href:!0});var Xbt=s(sz);Epr=r(Xbt,"from_pretrained()"),Xbt.forEach(t),Cpr=r(XJ," to load the model weights."),XJ.forEach(t),wpr=i(ei),Z2e=n(ei,"P",{});var zbt=s(Z2e);Apr=r(zbt,"Examples:"),zbt.forEach(t),ypr=i(ei),m(d0.$$.fragment,ei),ei.forEach(t),Lpr=i(Zl),vo=n(Zl,"DIV",{class:!0});var Ta=s(vo);m(c0.$$.fragment,Ta),xpr=i(Ta),e1e=n(Ta,"P",{});var Qbt=s(e1e);kpr=r(Qbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Qbt.forEach(t),Spr=i(Ta),En=n(Ta,"P",{});var u5=s(En);Rpr=r(u5,"The model class to instantiate is selected based on the "),o1e=n(u5,"CODE",{});var Wbt=s(o1e);Bpr=r(Wbt,"model_type"),Wbt.forEach(t),Ppr=r(u5,` property of the config object (either
passed as an argument or loaded from `),r1e=n(u5,"CODE",{});var Hbt=s(r1e);$pr=r(Hbt,"pretrained_model_name_or_path"),Hbt.forEach(t),Ipr=r(u5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=n(u5,"CODE",{});var Ubt=s(t1e);qpr=r(Ubt,"pretrained_model_name_or_path"),Ubt.forEach(t),Npr=r(u5,":"),u5.forEach(t),jpr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);X7=n(Q,"LI",{});var Ixe=s(X7);a1e=n(Ixe,"STRONG",{});var Jbt=s(a1e);Dpr=r(Jbt,"albert"),Jbt.forEach(t),Gpr=r(Ixe," \u2014 "),lz=n(Ixe,"A",{href:!0});var Ybt=s(lz);Opr=r(Ybt,"TFAlbertForSequenceClassification"),Ybt.forEach(t),Vpr=r(Ixe," (ALBERT model)"),Ixe.forEach(t),Xpr=i(Q),z7=n(Q,"LI",{});var qxe=s(z7);n1e=n(qxe,"STRONG",{});var Kbt=s(n1e);zpr=r(Kbt,"bert"),Kbt.forEach(t),Qpr=r(qxe," \u2014 "),iz=n(qxe,"A",{href:!0});var Zbt=s(iz);Wpr=r(Zbt,"TFBertForSequenceClassification"),Zbt.forEach(t),Hpr=r(qxe," (BERT model)"),qxe.forEach(t),Upr=i(Q),Q7=n(Q,"LI",{});var Nxe=s(Q7);s1e=n(Nxe,"STRONG",{});var e6t=s(s1e);Jpr=r(e6t,"camembert"),e6t.forEach(t),Ypr=r(Nxe," \u2014 "),dz=n(Nxe,"A",{href:!0});var o6t=s(dz);Kpr=r(o6t,"TFCamembertForSequenceClassification"),o6t.forEach(t),Zpr=r(Nxe," (CamemBERT model)"),Nxe.forEach(t),e_r=i(Q),W7=n(Q,"LI",{});var jxe=s(W7);l1e=n(jxe,"STRONG",{});var r6t=s(l1e);o_r=r(r6t,"convbert"),r6t.forEach(t),r_r=r(jxe," \u2014 "),cz=n(jxe,"A",{href:!0});var t6t=s(cz);t_r=r(t6t,"TFConvBertForSequenceClassification"),t6t.forEach(t),a_r=r(jxe," (ConvBERT model)"),jxe.forEach(t),n_r=i(Q),H7=n(Q,"LI",{});var Dxe=s(H7);i1e=n(Dxe,"STRONG",{});var a6t=s(i1e);s_r=r(a6t,"ctrl"),a6t.forEach(t),l_r=r(Dxe," \u2014 "),fz=n(Dxe,"A",{href:!0});var n6t=s(fz);i_r=r(n6t,"TFCTRLForSequenceClassification"),n6t.forEach(t),d_r=r(Dxe," (CTRL model)"),Dxe.forEach(t),c_r=i(Q),U7=n(Q,"LI",{});var Gxe=s(U7);d1e=n(Gxe,"STRONG",{});var s6t=s(d1e);f_r=r(s6t,"deberta"),s6t.forEach(t),m_r=r(Gxe," \u2014 "),mz=n(Gxe,"A",{href:!0});var l6t=s(mz);g_r=r(l6t,"TFDebertaForSequenceClassification"),l6t.forEach(t),h_r=r(Gxe," (DeBERTa model)"),Gxe.forEach(t),p_r=i(Q),J7=n(Q,"LI",{});var Oxe=s(J7);c1e=n(Oxe,"STRONG",{});var i6t=s(c1e);__r=r(i6t,"deberta-v2"),i6t.forEach(t),u_r=r(Oxe," \u2014 "),gz=n(Oxe,"A",{href:!0});var d6t=s(gz);b_r=r(d6t,"TFDebertaV2ForSequenceClassification"),d6t.forEach(t),F_r=r(Oxe," (DeBERTa-v2 model)"),Oxe.forEach(t),v_r=i(Q),Y7=n(Q,"LI",{});var Vxe=s(Y7);f1e=n(Vxe,"STRONG",{});var c6t=s(f1e);T_r=r(c6t,"distilbert"),c6t.forEach(t),M_r=r(Vxe," \u2014 "),hz=n(Vxe,"A",{href:!0});var f6t=s(hz);E_r=r(f6t,"TFDistilBertForSequenceClassification"),f6t.forEach(t),C_r=r(Vxe," (DistilBERT model)"),Vxe.forEach(t),w_r=i(Q),K7=n(Q,"LI",{});var Xxe=s(K7);m1e=n(Xxe,"STRONG",{});var m6t=s(m1e);A_r=r(m6t,"electra"),m6t.forEach(t),y_r=r(Xxe," \u2014 "),pz=n(Xxe,"A",{href:!0});var g6t=s(pz);L_r=r(g6t,"TFElectraForSequenceClassification"),g6t.forEach(t),x_r=r(Xxe," (ELECTRA model)"),Xxe.forEach(t),k_r=i(Q),Z7=n(Q,"LI",{});var zxe=s(Z7);g1e=n(zxe,"STRONG",{});var h6t=s(g1e);S_r=r(h6t,"flaubert"),h6t.forEach(t),R_r=r(zxe," \u2014 "),_z=n(zxe,"A",{href:!0});var p6t=s(_z);B_r=r(p6t,"TFFlaubertForSequenceClassification"),p6t.forEach(t),P_r=r(zxe," (FlauBERT model)"),zxe.forEach(t),$_r=i(Q),e9=n(Q,"LI",{});var Qxe=s(e9);h1e=n(Qxe,"STRONG",{});var _6t=s(h1e);I_r=r(_6t,"funnel"),_6t.forEach(t),q_r=r(Qxe," \u2014 "),uz=n(Qxe,"A",{href:!0});var u6t=s(uz);N_r=r(u6t,"TFFunnelForSequenceClassification"),u6t.forEach(t),j_r=r(Qxe," (Funnel Transformer model)"),Qxe.forEach(t),D_r=i(Q),o9=n(Q,"LI",{});var Wxe=s(o9);p1e=n(Wxe,"STRONG",{});var b6t=s(p1e);G_r=r(b6t,"gpt2"),b6t.forEach(t),O_r=r(Wxe," \u2014 "),bz=n(Wxe,"A",{href:!0});var F6t=s(bz);V_r=r(F6t,"TFGPT2ForSequenceClassification"),F6t.forEach(t),X_r=r(Wxe," (OpenAI GPT-2 model)"),Wxe.forEach(t),z_r=i(Q),r9=n(Q,"LI",{});var Hxe=s(r9);_1e=n(Hxe,"STRONG",{});var v6t=s(_1e);Q_r=r(v6t,"gptj"),v6t.forEach(t),W_r=r(Hxe," \u2014 "),Fz=n(Hxe,"A",{href:!0});var T6t=s(Fz);H_r=r(T6t,"TFGPTJForSequenceClassification"),T6t.forEach(t),U_r=r(Hxe," (GPT-J model)"),Hxe.forEach(t),J_r=i(Q),t9=n(Q,"LI",{});var Uxe=s(t9);u1e=n(Uxe,"STRONG",{});var M6t=s(u1e);Y_r=r(M6t,"layoutlm"),M6t.forEach(t),K_r=r(Uxe," \u2014 "),vz=n(Uxe,"A",{href:!0});var E6t=s(vz);Z_r=r(E6t,"TFLayoutLMForSequenceClassification"),E6t.forEach(t),eur=r(Uxe," (LayoutLM model)"),Uxe.forEach(t),our=i(Q),a9=n(Q,"LI",{});var Jxe=s(a9);b1e=n(Jxe,"STRONG",{});var C6t=s(b1e);rur=r(C6t,"longformer"),C6t.forEach(t),tur=r(Jxe," \u2014 "),Tz=n(Jxe,"A",{href:!0});var w6t=s(Tz);aur=r(w6t,"TFLongformerForSequenceClassification"),w6t.forEach(t),nur=r(Jxe," (Longformer model)"),Jxe.forEach(t),sur=i(Q),n9=n(Q,"LI",{});var Yxe=s(n9);F1e=n(Yxe,"STRONG",{});var A6t=s(F1e);lur=r(A6t,"mobilebert"),A6t.forEach(t),iur=r(Yxe," \u2014 "),Mz=n(Yxe,"A",{href:!0});var y6t=s(Mz);dur=r(y6t,"TFMobileBertForSequenceClassification"),y6t.forEach(t),cur=r(Yxe," (MobileBERT model)"),Yxe.forEach(t),fur=i(Q),s9=n(Q,"LI",{});var Kxe=s(s9);v1e=n(Kxe,"STRONG",{});var L6t=s(v1e);mur=r(L6t,"mpnet"),L6t.forEach(t),gur=r(Kxe," \u2014 "),Ez=n(Kxe,"A",{href:!0});var x6t=s(Ez);hur=r(x6t,"TFMPNetForSequenceClassification"),x6t.forEach(t),pur=r(Kxe," (MPNet model)"),Kxe.forEach(t),_ur=i(Q),l9=n(Q,"LI",{});var Zxe=s(l9);T1e=n(Zxe,"STRONG",{});var k6t=s(T1e);uur=r(k6t,"openai-gpt"),k6t.forEach(t),bur=r(Zxe," \u2014 "),Cz=n(Zxe,"A",{href:!0});var S6t=s(Cz);Fur=r(S6t,"TFOpenAIGPTForSequenceClassification"),S6t.forEach(t),vur=r(Zxe," (OpenAI GPT model)"),Zxe.forEach(t),Tur=i(Q),i9=n(Q,"LI",{});var eke=s(i9);M1e=n(eke,"STRONG",{});var R6t=s(M1e);Mur=r(R6t,"rembert"),R6t.forEach(t),Eur=r(eke," \u2014 "),wz=n(eke,"A",{href:!0});var B6t=s(wz);Cur=r(B6t,"TFRemBertForSequenceClassification"),B6t.forEach(t),wur=r(eke," (RemBERT model)"),eke.forEach(t),Aur=i(Q),d9=n(Q,"LI",{});var oke=s(d9);E1e=n(oke,"STRONG",{});var P6t=s(E1e);yur=r(P6t,"roberta"),P6t.forEach(t),Lur=r(oke," \u2014 "),Az=n(oke,"A",{href:!0});var $6t=s(Az);xur=r($6t,"TFRobertaForSequenceClassification"),$6t.forEach(t),kur=r(oke," (RoBERTa model)"),oke.forEach(t),Sur=i(Q),c9=n(Q,"LI",{});var rke=s(c9);C1e=n(rke,"STRONG",{});var I6t=s(C1e);Rur=r(I6t,"roformer"),I6t.forEach(t),Bur=r(rke," \u2014 "),yz=n(rke,"A",{href:!0});var q6t=s(yz);Pur=r(q6t,"TFRoFormerForSequenceClassification"),q6t.forEach(t),$ur=r(rke," (RoFormer model)"),rke.forEach(t),Iur=i(Q),f9=n(Q,"LI",{});var tke=s(f9);w1e=n(tke,"STRONG",{});var N6t=s(w1e);qur=r(N6t,"tapas"),N6t.forEach(t),Nur=r(tke," \u2014 "),Lz=n(tke,"A",{href:!0});var j6t=s(Lz);jur=r(j6t,"TFTapasForSequenceClassification"),j6t.forEach(t),Dur=r(tke," (TAPAS model)"),tke.forEach(t),Gur=i(Q),m9=n(Q,"LI",{});var ake=s(m9);A1e=n(ake,"STRONG",{});var D6t=s(A1e);Our=r(D6t,"transfo-xl"),D6t.forEach(t),Vur=r(ake," \u2014 "),xz=n(ake,"A",{href:!0});var G6t=s(xz);Xur=r(G6t,"TFTransfoXLForSequenceClassification"),G6t.forEach(t),zur=r(ake," (Transformer-XL model)"),ake.forEach(t),Qur=i(Q),g9=n(Q,"LI",{});var nke=s(g9);y1e=n(nke,"STRONG",{});var O6t=s(y1e);Wur=r(O6t,"xlm"),O6t.forEach(t),Hur=r(nke," \u2014 "),kz=n(nke,"A",{href:!0});var V6t=s(kz);Uur=r(V6t,"TFXLMForSequenceClassification"),V6t.forEach(t),Jur=r(nke," (XLM model)"),nke.forEach(t),Yur=i(Q),h9=n(Q,"LI",{});var ske=s(h9);L1e=n(ske,"STRONG",{});var X6t=s(L1e);Kur=r(X6t,"xlm-roberta"),X6t.forEach(t),Zur=r(ske," \u2014 "),Sz=n(ske,"A",{href:!0});var z6t=s(Sz);e2r=r(z6t,"TFXLMRobertaForSequenceClassification"),z6t.forEach(t),o2r=r(ske," (XLM-RoBERTa model)"),ske.forEach(t),r2r=i(Q),p9=n(Q,"LI",{});var lke=s(p9);x1e=n(lke,"STRONG",{});var Q6t=s(x1e);t2r=r(Q6t,"xlnet"),Q6t.forEach(t),a2r=r(lke," \u2014 "),Rz=n(lke,"A",{href:!0});var W6t=s(Rz);n2r=r(W6t,"TFXLNetForSequenceClassification"),W6t.forEach(t),s2r=r(lke," (XLNet model)"),lke.forEach(t),Q.forEach(t),l2r=i(Ta),k1e=n(Ta,"P",{});var H6t=s(k1e);i2r=r(H6t,"Examples:"),H6t.forEach(t),d2r=i(Ta),m(f0.$$.fragment,Ta),Ta.forEach(t),Zl.forEach(t),xPe=i(c),$c=n(c,"H2",{class:!0});var DIe=s($c);_9=n(DIe,"A",{id:!0,class:!0,href:!0});var U6t=s(_9);S1e=n(U6t,"SPAN",{});var J6t=s(S1e);m(m0.$$.fragment,J6t),J6t.forEach(t),U6t.forEach(t),c2r=i(DIe),R1e=n(DIe,"SPAN",{});var Y6t=s(R1e);f2r=r(Y6t,"TFAutoModelForMultipleChoice"),Y6t.forEach(t),DIe.forEach(t),kPe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(g0.$$.fragment,oi),m2r=i(oi),Ic=n(oi,"P",{});var zJ=s(Ic);g2r=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Bz=n(zJ,"A",{href:!0});var K6t=s(Bz);h2r=r(K6t,"from_pretrained()"),K6t.forEach(t),p2r=r(zJ," class method or the "),Pz=n(zJ,"A",{href:!0});var Z6t=s(Pz);_2r=r(Z6t,"from_config()"),Z6t.forEach(t),u2r=r(zJ,` class
method.`),zJ.forEach(t),b2r=i(oi),h0=n(oi,"P",{});var GIe=s(h0);F2r=r(GIe,"This class cannot be instantiated directly using "),B1e=n(GIe,"CODE",{});var eFt=s(B1e);v2r=r(eFt,"__init__()"),eFt.forEach(t),T2r=r(GIe," (throws an error)."),GIe.forEach(t),M2r=i(oi),vt=n(oi,"DIV",{class:!0});var ri=s(vt);m(p0.$$.fragment,ri),E2r=i(ri),P1e=n(ri,"P",{});var oFt=s(P1e);C2r=r(oFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oFt.forEach(t),w2r=i(ri),qc=n(ri,"P",{});var QJ=s(qc);A2r=r(QJ,`Note:
Loading a model from its configuration file does `),$1e=n(QJ,"STRONG",{});var rFt=s($1e);y2r=r(rFt,"not"),rFt.forEach(t),L2r=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=n(QJ,"A",{href:!0});var tFt=s($z);x2r=r(tFt,"from_pretrained()"),tFt.forEach(t),k2r=r(QJ," to load the model weights."),QJ.forEach(t),S2r=i(ri),I1e=n(ri,"P",{});var aFt=s(I1e);R2r=r(aFt,"Examples:"),aFt.forEach(t),B2r=i(ri),m(_0.$$.fragment,ri),ri.forEach(t),P2r=i(oi),To=n(oi,"DIV",{class:!0});var Ma=s(To);m(u0.$$.fragment,Ma),$2r=i(Ma),q1e=n(Ma,"P",{});var nFt=s(q1e);I2r=r(nFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nFt.forEach(t),q2r=i(Ma),Cn=n(Ma,"P",{});var b5=s(Cn);N2r=r(b5,"The model class to instantiate is selected based on the "),N1e=n(b5,"CODE",{});var sFt=s(N1e);j2r=r(sFt,"model_type"),sFt.forEach(t),D2r=r(b5,` property of the config object (either
passed as an argument or loaded from `),j1e=n(b5,"CODE",{});var lFt=s(j1e);G2r=r(lFt,"pretrained_model_name_or_path"),lFt.forEach(t),O2r=r(b5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=n(b5,"CODE",{});var iFt=s(D1e);V2r=r(iFt,"pretrained_model_name_or_path"),iFt.forEach(t),X2r=r(b5,":"),b5.forEach(t),z2r=i(Ma),se=n(Ma,"UL",{});var ie=s(se);u9=n(ie,"LI",{});var ike=s(u9);G1e=n(ike,"STRONG",{});var dFt=s(G1e);Q2r=r(dFt,"albert"),dFt.forEach(t),W2r=r(ike," \u2014 "),Iz=n(ike,"A",{href:!0});var cFt=s(Iz);H2r=r(cFt,"TFAlbertForMultipleChoice"),cFt.forEach(t),U2r=r(ike," (ALBERT model)"),ike.forEach(t),J2r=i(ie),b9=n(ie,"LI",{});var dke=s(b9);O1e=n(dke,"STRONG",{});var fFt=s(O1e);Y2r=r(fFt,"bert"),fFt.forEach(t),K2r=r(dke," \u2014 "),qz=n(dke,"A",{href:!0});var mFt=s(qz);Z2r=r(mFt,"TFBertForMultipleChoice"),mFt.forEach(t),e1r=r(dke," (BERT model)"),dke.forEach(t),o1r=i(ie),F9=n(ie,"LI",{});var cke=s(F9);V1e=n(cke,"STRONG",{});var gFt=s(V1e);r1r=r(gFt,"camembert"),gFt.forEach(t),t1r=r(cke," \u2014 "),Nz=n(cke,"A",{href:!0});var hFt=s(Nz);a1r=r(hFt,"TFCamembertForMultipleChoice"),hFt.forEach(t),n1r=r(cke," (CamemBERT model)"),cke.forEach(t),s1r=i(ie),v9=n(ie,"LI",{});var fke=s(v9);X1e=n(fke,"STRONG",{});var pFt=s(X1e);l1r=r(pFt,"convbert"),pFt.forEach(t),i1r=r(fke," \u2014 "),jz=n(fke,"A",{href:!0});var _Ft=s(jz);d1r=r(_Ft,"TFConvBertForMultipleChoice"),_Ft.forEach(t),c1r=r(fke," (ConvBERT model)"),fke.forEach(t),f1r=i(ie),T9=n(ie,"LI",{});var mke=s(T9);z1e=n(mke,"STRONG",{});var uFt=s(z1e);m1r=r(uFt,"distilbert"),uFt.forEach(t),g1r=r(mke," \u2014 "),Dz=n(mke,"A",{href:!0});var bFt=s(Dz);h1r=r(bFt,"TFDistilBertForMultipleChoice"),bFt.forEach(t),p1r=r(mke," (DistilBERT model)"),mke.forEach(t),_1r=i(ie),M9=n(ie,"LI",{});var gke=s(M9);Q1e=n(gke,"STRONG",{});var FFt=s(Q1e);u1r=r(FFt,"electra"),FFt.forEach(t),b1r=r(gke," \u2014 "),Gz=n(gke,"A",{href:!0});var vFt=s(Gz);F1r=r(vFt,"TFElectraForMultipleChoice"),vFt.forEach(t),v1r=r(gke," (ELECTRA model)"),gke.forEach(t),T1r=i(ie),E9=n(ie,"LI",{});var hke=s(E9);W1e=n(hke,"STRONG",{});var TFt=s(W1e);M1r=r(TFt,"flaubert"),TFt.forEach(t),E1r=r(hke," \u2014 "),Oz=n(hke,"A",{href:!0});var MFt=s(Oz);C1r=r(MFt,"TFFlaubertForMultipleChoice"),MFt.forEach(t),w1r=r(hke," (FlauBERT model)"),hke.forEach(t),A1r=i(ie),C9=n(ie,"LI",{});var pke=s(C9);H1e=n(pke,"STRONG",{});var EFt=s(H1e);y1r=r(EFt,"funnel"),EFt.forEach(t),L1r=r(pke," \u2014 "),Vz=n(pke,"A",{href:!0});var CFt=s(Vz);x1r=r(CFt,"TFFunnelForMultipleChoice"),CFt.forEach(t),k1r=r(pke," (Funnel Transformer model)"),pke.forEach(t),S1r=i(ie),w9=n(ie,"LI",{});var _ke=s(w9);U1e=n(_ke,"STRONG",{});var wFt=s(U1e);R1r=r(wFt,"longformer"),wFt.forEach(t),B1r=r(_ke," \u2014 "),Xz=n(_ke,"A",{href:!0});var AFt=s(Xz);P1r=r(AFt,"TFLongformerForMultipleChoice"),AFt.forEach(t),$1r=r(_ke," (Longformer model)"),_ke.forEach(t),I1r=i(ie),A9=n(ie,"LI",{});var uke=s(A9);J1e=n(uke,"STRONG",{});var yFt=s(J1e);q1r=r(yFt,"mobilebert"),yFt.forEach(t),N1r=r(uke," \u2014 "),zz=n(uke,"A",{href:!0});var LFt=s(zz);j1r=r(LFt,"TFMobileBertForMultipleChoice"),LFt.forEach(t),D1r=r(uke," (MobileBERT model)"),uke.forEach(t),G1r=i(ie),y9=n(ie,"LI",{});var bke=s(y9);Y1e=n(bke,"STRONG",{});var xFt=s(Y1e);O1r=r(xFt,"mpnet"),xFt.forEach(t),V1r=r(bke," \u2014 "),Qz=n(bke,"A",{href:!0});var kFt=s(Qz);X1r=r(kFt,"TFMPNetForMultipleChoice"),kFt.forEach(t),z1r=r(bke," (MPNet model)"),bke.forEach(t),Q1r=i(ie),L9=n(ie,"LI",{});var Fke=s(L9);K1e=n(Fke,"STRONG",{});var SFt=s(K1e);W1r=r(SFt,"rembert"),SFt.forEach(t),H1r=r(Fke," \u2014 "),Wz=n(Fke,"A",{href:!0});var RFt=s(Wz);U1r=r(RFt,"TFRemBertForMultipleChoice"),RFt.forEach(t),J1r=r(Fke," (RemBERT model)"),Fke.forEach(t),Y1r=i(ie),x9=n(ie,"LI",{});var vke=s(x9);Z1e=n(vke,"STRONG",{});var BFt=s(Z1e);K1r=r(BFt,"roberta"),BFt.forEach(t),Z1r=r(vke," \u2014 "),Hz=n(vke,"A",{href:!0});var PFt=s(Hz);ebr=r(PFt,"TFRobertaForMultipleChoice"),PFt.forEach(t),obr=r(vke," (RoBERTa model)"),vke.forEach(t),rbr=i(ie),k9=n(ie,"LI",{});var Tke=s(k9);ebe=n(Tke,"STRONG",{});var $Ft=s(ebe);tbr=r($Ft,"roformer"),$Ft.forEach(t),abr=r(Tke," \u2014 "),Uz=n(Tke,"A",{href:!0});var IFt=s(Uz);nbr=r(IFt,"TFRoFormerForMultipleChoice"),IFt.forEach(t),sbr=r(Tke," (RoFormer model)"),Tke.forEach(t),lbr=i(ie),S9=n(ie,"LI",{});var Mke=s(S9);obe=n(Mke,"STRONG",{});var qFt=s(obe);ibr=r(qFt,"xlm"),qFt.forEach(t),dbr=r(Mke," \u2014 "),Jz=n(Mke,"A",{href:!0});var NFt=s(Jz);cbr=r(NFt,"TFXLMForMultipleChoice"),NFt.forEach(t),fbr=r(Mke," (XLM model)"),Mke.forEach(t),mbr=i(ie),R9=n(ie,"LI",{});var Eke=s(R9);rbe=n(Eke,"STRONG",{});var jFt=s(rbe);gbr=r(jFt,"xlm-roberta"),jFt.forEach(t),hbr=r(Eke," \u2014 "),Yz=n(Eke,"A",{href:!0});var DFt=s(Yz);pbr=r(DFt,"TFXLMRobertaForMultipleChoice"),DFt.forEach(t),_br=r(Eke," (XLM-RoBERTa model)"),Eke.forEach(t),ubr=i(ie),B9=n(ie,"LI",{});var Cke=s(B9);tbe=n(Cke,"STRONG",{});var GFt=s(tbe);bbr=r(GFt,"xlnet"),GFt.forEach(t),Fbr=r(Cke," \u2014 "),Kz=n(Cke,"A",{href:!0});var OFt=s(Kz);vbr=r(OFt,"TFXLNetForMultipleChoice"),OFt.forEach(t),Tbr=r(Cke," (XLNet model)"),Cke.forEach(t),ie.forEach(t),Mbr=i(Ma),abe=n(Ma,"P",{});var VFt=s(abe);Ebr=r(VFt,"Examples:"),VFt.forEach(t),Cbr=i(Ma),m(b0.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),SPe=i(c),Nc=n(c,"H2",{class:!0});var OIe=s(Nc);P9=n(OIe,"A",{id:!0,class:!0,href:!0});var XFt=s(P9);nbe=n(XFt,"SPAN",{});var zFt=s(nbe);m(F0.$$.fragment,zFt),zFt.forEach(t),XFt.forEach(t),wbr=i(OIe),sbe=n(OIe,"SPAN",{});var QFt=s(sbe);Abr=r(QFt,"TFAutoModelForTableQuestionAnswering"),QFt.forEach(t),OIe.forEach(t),RPe=i(c),yr=n(c,"DIV",{class:!0});var ti=s(yr);m(v0.$$.fragment,ti),ybr=i(ti),jc=n(ti,"P",{});var WJ=s(jc);Lbr=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Zz=n(WJ,"A",{href:!0});var WFt=s(Zz);xbr=r(WFt,"from_pretrained()"),WFt.forEach(t),kbr=r(WJ," class method or the "),eQ=n(WJ,"A",{href:!0});var HFt=s(eQ);Sbr=r(HFt,"from_config()"),HFt.forEach(t),Rbr=r(WJ,` class
method.`),WJ.forEach(t),Bbr=i(ti),T0=n(ti,"P",{});var VIe=s(T0);Pbr=r(VIe,"This class cannot be instantiated directly using "),lbe=n(VIe,"CODE",{});var UFt=s(lbe);$br=r(UFt,"__init__()"),UFt.forEach(t),Ibr=r(VIe," (throws an error)."),VIe.forEach(t),qbr=i(ti),Tt=n(ti,"DIV",{class:!0});var ai=s(Tt);m(M0.$$.fragment,ai),Nbr=i(ai),ibe=n(ai,"P",{});var JFt=s(ibe);jbr=r(JFt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),JFt.forEach(t),Dbr=i(ai),Dc=n(ai,"P",{});var HJ=s(Dc);Gbr=r(HJ,`Note:
Loading a model from its configuration file does `),dbe=n(HJ,"STRONG",{});var YFt=s(dbe);Obr=r(YFt,"not"),YFt.forEach(t),Vbr=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=n(HJ,"A",{href:!0});var KFt=s(oQ);Xbr=r(KFt,"from_pretrained()"),KFt.forEach(t),zbr=r(HJ," to load the model weights."),HJ.forEach(t),Qbr=i(ai),cbe=n(ai,"P",{});var ZFt=s(cbe);Wbr=r(ZFt,"Examples:"),ZFt.forEach(t),Hbr=i(ai),m(E0.$$.fragment,ai),ai.forEach(t),Ubr=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(C0.$$.fragment,Ea),Jbr=i(Ea),fbe=n(Ea,"P",{});var evt=s(fbe);Ybr=r(evt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),evt.forEach(t),Kbr=i(Ea),wn=n(Ea,"P",{});var F5=s(wn);Zbr=r(F5,"The model class to instantiate is selected based on the "),mbe=n(F5,"CODE",{});var ovt=s(mbe);e6r=r(ovt,"model_type"),ovt.forEach(t),o6r=r(F5,` property of the config object (either
passed as an argument or loaded from `),gbe=n(F5,"CODE",{});var rvt=s(gbe);r6r=r(rvt,"pretrained_model_name_or_path"),rvt.forEach(t),t6r=r(F5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=n(F5,"CODE",{});var tvt=s(hbe);a6r=r(tvt,"pretrained_model_name_or_path"),tvt.forEach(t),n6r=r(F5,":"),F5.forEach(t),s6r=i(Ea),pbe=n(Ea,"UL",{});var avt=s(pbe);$9=n(avt,"LI",{});var wke=s($9);_be=n(wke,"STRONG",{});var nvt=s(_be);l6r=r(nvt,"tapas"),nvt.forEach(t),i6r=r(wke," \u2014 "),rQ=n(wke,"A",{href:!0});var svt=s(rQ);d6r=r(svt,"TFTapasForQuestionAnswering"),svt.forEach(t),c6r=r(wke," (TAPAS model)"),wke.forEach(t),avt.forEach(t),f6r=i(Ea),ube=n(Ea,"P",{});var lvt=s(ube);m6r=r(lvt,"Examples:"),lvt.forEach(t),g6r=i(Ea),m(w0.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),BPe=i(c),Gc=n(c,"H2",{class:!0});var XIe=s(Gc);I9=n(XIe,"A",{id:!0,class:!0,href:!0});var ivt=s(I9);bbe=n(ivt,"SPAN",{});var dvt=s(bbe);m(A0.$$.fragment,dvt),dvt.forEach(t),ivt.forEach(t),h6r=i(XIe),Fbe=n(XIe,"SPAN",{});var cvt=s(Fbe);p6r=r(cvt,"TFAutoModelForTokenClassification"),cvt.forEach(t),XIe.forEach(t),PPe=i(c),Lr=n(c,"DIV",{class:!0});var ni=s(Lr);m(y0.$$.fragment,ni),_6r=i(ni),Oc=n(ni,"P",{});var UJ=s(Oc);u6r=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tQ=n(UJ,"A",{href:!0});var fvt=s(tQ);b6r=r(fvt,"from_pretrained()"),fvt.forEach(t),F6r=r(UJ," class method or the "),aQ=n(UJ,"A",{href:!0});var mvt=s(aQ);v6r=r(mvt,"from_config()"),mvt.forEach(t),T6r=r(UJ,` class
method.`),UJ.forEach(t),M6r=i(ni),L0=n(ni,"P",{});var zIe=s(L0);E6r=r(zIe,"This class cannot be instantiated directly using "),vbe=n(zIe,"CODE",{});var gvt=s(vbe);C6r=r(gvt,"__init__()"),gvt.forEach(t),w6r=r(zIe," (throws an error)."),zIe.forEach(t),A6r=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(x0.$$.fragment,si),y6r=i(si),Tbe=n(si,"P",{});var hvt=s(Tbe);L6r=r(hvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hvt.forEach(t),x6r=i(si),Vc=n(si,"P",{});var JJ=s(Vc);k6r=r(JJ,`Note:
Loading a model from its configuration file does `),Mbe=n(JJ,"STRONG",{});var pvt=s(Mbe);S6r=r(pvt,"not"),pvt.forEach(t),R6r=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=n(JJ,"A",{href:!0});var _vt=s(nQ);B6r=r(_vt,"from_pretrained()"),_vt.forEach(t),P6r=r(JJ," to load the model weights."),JJ.forEach(t),$6r=i(si),Ebe=n(si,"P",{});var uvt=s(Ebe);I6r=r(uvt,"Examples:"),uvt.forEach(t),q6r=i(si),m(k0.$$.fragment,si),si.forEach(t),N6r=i(ni),Eo=n(ni,"DIV",{class:!0});var Ca=s(Eo);m(S0.$$.fragment,Ca),j6r=i(Ca),Cbe=n(Ca,"P",{});var bvt=s(Cbe);D6r=r(bvt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bvt.forEach(t),G6r=i(Ca),An=n(Ca,"P",{});var v5=s(An);O6r=r(v5,"The model class to instantiate is selected based on the "),wbe=n(v5,"CODE",{});var Fvt=s(wbe);V6r=r(Fvt,"model_type"),Fvt.forEach(t),X6r=r(v5,` property of the config object (either
passed as an argument or loaded from `),Abe=n(v5,"CODE",{});var vvt=s(Abe);z6r=r(vvt,"pretrained_model_name_or_path"),vvt.forEach(t),Q6r=r(v5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=n(v5,"CODE",{});var Tvt=s(ybe);W6r=r(Tvt,"pretrained_model_name_or_path"),Tvt.forEach(t),H6r=r(v5,":"),v5.forEach(t),U6r=i(Ca),Y=n(Ca,"UL",{});var re=s(Y);q9=n(re,"LI",{});var Ake=s(q9);Lbe=n(Ake,"STRONG",{});var Mvt=s(Lbe);J6r=r(Mvt,"albert"),Mvt.forEach(t),Y6r=r(Ake," \u2014 "),sQ=n(Ake,"A",{href:!0});var Evt=s(sQ);K6r=r(Evt,"TFAlbertForTokenClassification"),Evt.forEach(t),Z6r=r(Ake," (ALBERT model)"),Ake.forEach(t),eFr=i(re),N9=n(re,"LI",{});var yke=s(N9);xbe=n(yke,"STRONG",{});var Cvt=s(xbe);oFr=r(Cvt,"bert"),Cvt.forEach(t),rFr=r(yke," \u2014 "),lQ=n(yke,"A",{href:!0});var wvt=s(lQ);tFr=r(wvt,"TFBertForTokenClassification"),wvt.forEach(t),aFr=r(yke," (BERT model)"),yke.forEach(t),nFr=i(re),j9=n(re,"LI",{});var Lke=s(j9);kbe=n(Lke,"STRONG",{});var Avt=s(kbe);sFr=r(Avt,"camembert"),Avt.forEach(t),lFr=r(Lke," \u2014 "),iQ=n(Lke,"A",{href:!0});var yvt=s(iQ);iFr=r(yvt,"TFCamembertForTokenClassification"),yvt.forEach(t),dFr=r(Lke," (CamemBERT model)"),Lke.forEach(t),cFr=i(re),D9=n(re,"LI",{});var xke=s(D9);Sbe=n(xke,"STRONG",{});var Lvt=s(Sbe);fFr=r(Lvt,"convbert"),Lvt.forEach(t),mFr=r(xke," \u2014 "),dQ=n(xke,"A",{href:!0});var xvt=s(dQ);gFr=r(xvt,"TFConvBertForTokenClassification"),xvt.forEach(t),hFr=r(xke," (ConvBERT model)"),xke.forEach(t),pFr=i(re),G9=n(re,"LI",{});var kke=s(G9);Rbe=n(kke,"STRONG",{});var kvt=s(Rbe);_Fr=r(kvt,"deberta"),kvt.forEach(t),uFr=r(kke," \u2014 "),cQ=n(kke,"A",{href:!0});var Svt=s(cQ);bFr=r(Svt,"TFDebertaForTokenClassification"),Svt.forEach(t),FFr=r(kke," (DeBERTa model)"),kke.forEach(t),vFr=i(re),O9=n(re,"LI",{});var Ske=s(O9);Bbe=n(Ske,"STRONG",{});var Rvt=s(Bbe);TFr=r(Rvt,"deberta-v2"),Rvt.forEach(t),MFr=r(Ske," \u2014 "),fQ=n(Ske,"A",{href:!0});var Bvt=s(fQ);EFr=r(Bvt,"TFDebertaV2ForTokenClassification"),Bvt.forEach(t),CFr=r(Ske," (DeBERTa-v2 model)"),Ske.forEach(t),wFr=i(re),V9=n(re,"LI",{});var Rke=s(V9);Pbe=n(Rke,"STRONG",{});var Pvt=s(Pbe);AFr=r(Pvt,"distilbert"),Pvt.forEach(t),yFr=r(Rke," \u2014 "),mQ=n(Rke,"A",{href:!0});var $vt=s(mQ);LFr=r($vt,"TFDistilBertForTokenClassification"),$vt.forEach(t),xFr=r(Rke," (DistilBERT model)"),Rke.forEach(t),kFr=i(re),X9=n(re,"LI",{});var Bke=s(X9);$be=n(Bke,"STRONG",{});var Ivt=s($be);SFr=r(Ivt,"electra"),Ivt.forEach(t),RFr=r(Bke," \u2014 "),gQ=n(Bke,"A",{href:!0});var qvt=s(gQ);BFr=r(qvt,"TFElectraForTokenClassification"),qvt.forEach(t),PFr=r(Bke," (ELECTRA model)"),Bke.forEach(t),$Fr=i(re),z9=n(re,"LI",{});var Pke=s(z9);Ibe=n(Pke,"STRONG",{});var Nvt=s(Ibe);IFr=r(Nvt,"flaubert"),Nvt.forEach(t),qFr=r(Pke," \u2014 "),hQ=n(Pke,"A",{href:!0});var jvt=s(hQ);NFr=r(jvt,"TFFlaubertForTokenClassification"),jvt.forEach(t),jFr=r(Pke," (FlauBERT model)"),Pke.forEach(t),DFr=i(re),Q9=n(re,"LI",{});var $ke=s(Q9);qbe=n($ke,"STRONG",{});var Dvt=s(qbe);GFr=r(Dvt,"funnel"),Dvt.forEach(t),OFr=r($ke," \u2014 "),pQ=n($ke,"A",{href:!0});var Gvt=s(pQ);VFr=r(Gvt,"TFFunnelForTokenClassification"),Gvt.forEach(t),XFr=r($ke," (Funnel Transformer model)"),$ke.forEach(t),zFr=i(re),W9=n(re,"LI",{});var Ike=s(W9);Nbe=n(Ike,"STRONG",{});var Ovt=s(Nbe);QFr=r(Ovt,"layoutlm"),Ovt.forEach(t),WFr=r(Ike," \u2014 "),_Q=n(Ike,"A",{href:!0});var Vvt=s(_Q);HFr=r(Vvt,"TFLayoutLMForTokenClassification"),Vvt.forEach(t),UFr=r(Ike," (LayoutLM model)"),Ike.forEach(t),JFr=i(re),H9=n(re,"LI",{});var qke=s(H9);jbe=n(qke,"STRONG",{});var Xvt=s(jbe);YFr=r(Xvt,"longformer"),Xvt.forEach(t),KFr=r(qke," \u2014 "),uQ=n(qke,"A",{href:!0});var zvt=s(uQ);ZFr=r(zvt,"TFLongformerForTokenClassification"),zvt.forEach(t),evr=r(qke," (Longformer model)"),qke.forEach(t),ovr=i(re),U9=n(re,"LI",{});var Nke=s(U9);Dbe=n(Nke,"STRONG",{});var Qvt=s(Dbe);rvr=r(Qvt,"mobilebert"),Qvt.forEach(t),tvr=r(Nke," \u2014 "),bQ=n(Nke,"A",{href:!0});var Wvt=s(bQ);avr=r(Wvt,"TFMobileBertForTokenClassification"),Wvt.forEach(t),nvr=r(Nke," (MobileBERT model)"),Nke.forEach(t),svr=i(re),J9=n(re,"LI",{});var jke=s(J9);Gbe=n(jke,"STRONG",{});var Hvt=s(Gbe);lvr=r(Hvt,"mpnet"),Hvt.forEach(t),ivr=r(jke," \u2014 "),FQ=n(jke,"A",{href:!0});var Uvt=s(FQ);dvr=r(Uvt,"TFMPNetForTokenClassification"),Uvt.forEach(t),cvr=r(jke," (MPNet model)"),jke.forEach(t),fvr=i(re),Y9=n(re,"LI",{});var Dke=s(Y9);Obe=n(Dke,"STRONG",{});var Jvt=s(Obe);mvr=r(Jvt,"rembert"),Jvt.forEach(t),gvr=r(Dke," \u2014 "),vQ=n(Dke,"A",{href:!0});var Yvt=s(vQ);hvr=r(Yvt,"TFRemBertForTokenClassification"),Yvt.forEach(t),pvr=r(Dke," (RemBERT model)"),Dke.forEach(t),_vr=i(re),K9=n(re,"LI",{});var Gke=s(K9);Vbe=n(Gke,"STRONG",{});var Kvt=s(Vbe);uvr=r(Kvt,"roberta"),Kvt.forEach(t),bvr=r(Gke," \u2014 "),TQ=n(Gke,"A",{href:!0});var Zvt=s(TQ);Fvr=r(Zvt,"TFRobertaForTokenClassification"),Zvt.forEach(t),vvr=r(Gke," (RoBERTa model)"),Gke.forEach(t),Tvr=i(re),Z9=n(re,"LI",{});var Oke=s(Z9);Xbe=n(Oke,"STRONG",{});var eTt=s(Xbe);Mvr=r(eTt,"roformer"),eTt.forEach(t),Evr=r(Oke," \u2014 "),MQ=n(Oke,"A",{href:!0});var oTt=s(MQ);Cvr=r(oTt,"TFRoFormerForTokenClassification"),oTt.forEach(t),wvr=r(Oke," (RoFormer model)"),Oke.forEach(t),Avr=i(re),eM=n(re,"LI",{});var Vke=s(eM);zbe=n(Vke,"STRONG",{});var rTt=s(zbe);yvr=r(rTt,"xlm"),rTt.forEach(t),Lvr=r(Vke," \u2014 "),EQ=n(Vke,"A",{href:!0});var tTt=s(EQ);xvr=r(tTt,"TFXLMForTokenClassification"),tTt.forEach(t),kvr=r(Vke," (XLM model)"),Vke.forEach(t),Svr=i(re),oM=n(re,"LI",{});var Xke=s(oM);Qbe=n(Xke,"STRONG",{});var aTt=s(Qbe);Rvr=r(aTt,"xlm-roberta"),aTt.forEach(t),Bvr=r(Xke," \u2014 "),CQ=n(Xke,"A",{href:!0});var nTt=s(CQ);Pvr=r(nTt,"TFXLMRobertaForTokenClassification"),nTt.forEach(t),$vr=r(Xke," (XLM-RoBERTa model)"),Xke.forEach(t),Ivr=i(re),rM=n(re,"LI",{});var zke=s(rM);Wbe=n(zke,"STRONG",{});var sTt=s(Wbe);qvr=r(sTt,"xlnet"),sTt.forEach(t),Nvr=r(zke," \u2014 "),wQ=n(zke,"A",{href:!0});var lTt=s(wQ);jvr=r(lTt,"TFXLNetForTokenClassification"),lTt.forEach(t),Dvr=r(zke," (XLNet model)"),zke.forEach(t),re.forEach(t),Gvr=i(Ca),Hbe=n(Ca,"P",{});var iTt=s(Hbe);Ovr=r(iTt,"Examples:"),iTt.forEach(t),Vvr=i(Ca),m(R0.$$.fragment,Ca),Ca.forEach(t),ni.forEach(t),$Pe=i(c),Xc=n(c,"H2",{class:!0});var QIe=s(Xc);tM=n(QIe,"A",{id:!0,class:!0,href:!0});var dTt=s(tM);Ube=n(dTt,"SPAN",{});var cTt=s(Ube);m(B0.$$.fragment,cTt),cTt.forEach(t),dTt.forEach(t),Xvr=i(QIe),Jbe=n(QIe,"SPAN",{});var fTt=s(Jbe);zvr=r(fTt,"TFAutoModelForQuestionAnswering"),fTt.forEach(t),QIe.forEach(t),IPe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(P0.$$.fragment,li),Qvr=i(li),zc=n(li,"P",{});var YJ=s(zc);Wvr=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AQ=n(YJ,"A",{href:!0});var mTt=s(AQ);Hvr=r(mTt,"from_pretrained()"),mTt.forEach(t),Uvr=r(YJ," class method or the "),yQ=n(YJ,"A",{href:!0});var gTt=s(yQ);Jvr=r(gTt,"from_config()"),gTt.forEach(t),Yvr=r(YJ,` class
method.`),YJ.forEach(t),Kvr=i(li),$0=n(li,"P",{});var WIe=s($0);Zvr=r(WIe,"This class cannot be instantiated directly using "),Ybe=n(WIe,"CODE",{});var hTt=s(Ybe);eTr=r(hTt,"__init__()"),hTt.forEach(t),oTr=r(WIe," (throws an error)."),WIe.forEach(t),rTr=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(I0.$$.fragment,ii),tTr=i(ii),Kbe=n(ii,"P",{});var pTt=s(Kbe);aTr=r(pTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pTt.forEach(t),nTr=i(ii),Qc=n(ii,"P",{});var KJ=s(Qc);sTr=r(KJ,`Note:
Loading a model from its configuration file does `),Zbe=n(KJ,"STRONG",{});var _Tt=s(Zbe);lTr=r(_Tt,"not"),_Tt.forEach(t),iTr=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=n(KJ,"A",{href:!0});var uTt=s(LQ);dTr=r(uTt,"from_pretrained()"),uTt.forEach(t),cTr=r(KJ," to load the model weights."),KJ.forEach(t),fTr=i(ii),e6e=n(ii,"P",{});var bTt=s(e6e);mTr=r(bTt,"Examples:"),bTt.forEach(t),gTr=i(ii),m(q0.$$.fragment,ii),ii.forEach(t),hTr=i(li),Co=n(li,"DIV",{class:!0});var wa=s(Co);m(N0.$$.fragment,wa),pTr=i(wa),o6e=n(wa,"P",{});var FTt=s(o6e);_Tr=r(FTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FTt.forEach(t),uTr=i(wa),yn=n(wa,"P",{});var T5=s(yn);bTr=r(T5,"The model class to instantiate is selected based on the "),r6e=n(T5,"CODE",{});var vTt=s(r6e);FTr=r(vTt,"model_type"),vTt.forEach(t),vTr=r(T5,` property of the config object (either
passed as an argument or loaded from `),t6e=n(T5,"CODE",{});var TTt=s(t6e);TTr=r(TTt,"pretrained_model_name_or_path"),TTt.forEach(t),MTr=r(T5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a6e=n(T5,"CODE",{});var MTt=s(a6e);ETr=r(MTt,"pretrained_model_name_or_path"),MTt.forEach(t),CTr=r(T5,":"),T5.forEach(t),wTr=i(wa),K=n(wa,"UL",{});var te=s(K);aM=n(te,"LI",{});var Qke=s(aM);n6e=n(Qke,"STRONG",{});var ETt=s(n6e);ATr=r(ETt,"albert"),ETt.forEach(t),yTr=r(Qke," \u2014 "),xQ=n(Qke,"A",{href:!0});var CTt=s(xQ);LTr=r(CTt,"TFAlbertForQuestionAnswering"),CTt.forEach(t),xTr=r(Qke," (ALBERT model)"),Qke.forEach(t),kTr=i(te),nM=n(te,"LI",{});var Wke=s(nM);s6e=n(Wke,"STRONG",{});var wTt=s(s6e);STr=r(wTt,"bert"),wTt.forEach(t),RTr=r(Wke," \u2014 "),kQ=n(Wke,"A",{href:!0});var ATt=s(kQ);BTr=r(ATt,"TFBertForQuestionAnswering"),ATt.forEach(t),PTr=r(Wke," (BERT model)"),Wke.forEach(t),$Tr=i(te),sM=n(te,"LI",{});var Hke=s(sM);l6e=n(Hke,"STRONG",{});var yTt=s(l6e);ITr=r(yTt,"camembert"),yTt.forEach(t),qTr=r(Hke," \u2014 "),SQ=n(Hke,"A",{href:!0});var LTt=s(SQ);NTr=r(LTt,"TFCamembertForQuestionAnswering"),LTt.forEach(t),jTr=r(Hke," (CamemBERT model)"),Hke.forEach(t),DTr=i(te),lM=n(te,"LI",{});var Uke=s(lM);i6e=n(Uke,"STRONG",{});var xTt=s(i6e);GTr=r(xTt,"convbert"),xTt.forEach(t),OTr=r(Uke," \u2014 "),RQ=n(Uke,"A",{href:!0});var kTt=s(RQ);VTr=r(kTt,"TFConvBertForQuestionAnswering"),kTt.forEach(t),XTr=r(Uke," (ConvBERT model)"),Uke.forEach(t),zTr=i(te),iM=n(te,"LI",{});var Jke=s(iM);d6e=n(Jke,"STRONG",{});var STt=s(d6e);QTr=r(STt,"deberta"),STt.forEach(t),WTr=r(Jke," \u2014 "),BQ=n(Jke,"A",{href:!0});var RTt=s(BQ);HTr=r(RTt,"TFDebertaForQuestionAnswering"),RTt.forEach(t),UTr=r(Jke," (DeBERTa model)"),Jke.forEach(t),JTr=i(te),dM=n(te,"LI",{});var Yke=s(dM);c6e=n(Yke,"STRONG",{});var BTt=s(c6e);YTr=r(BTt,"deberta-v2"),BTt.forEach(t),KTr=r(Yke," \u2014 "),PQ=n(Yke,"A",{href:!0});var PTt=s(PQ);ZTr=r(PTt,"TFDebertaV2ForQuestionAnswering"),PTt.forEach(t),e7r=r(Yke," (DeBERTa-v2 model)"),Yke.forEach(t),o7r=i(te),cM=n(te,"LI",{});var Kke=s(cM);f6e=n(Kke,"STRONG",{});var $Tt=s(f6e);r7r=r($Tt,"distilbert"),$Tt.forEach(t),t7r=r(Kke," \u2014 "),$Q=n(Kke,"A",{href:!0});var ITt=s($Q);a7r=r(ITt,"TFDistilBertForQuestionAnswering"),ITt.forEach(t),n7r=r(Kke," (DistilBERT model)"),Kke.forEach(t),s7r=i(te),fM=n(te,"LI",{});var Zke=s(fM);m6e=n(Zke,"STRONG",{});var qTt=s(m6e);l7r=r(qTt,"electra"),qTt.forEach(t),i7r=r(Zke," \u2014 "),IQ=n(Zke,"A",{href:!0});var NTt=s(IQ);d7r=r(NTt,"TFElectraForQuestionAnswering"),NTt.forEach(t),c7r=r(Zke," (ELECTRA model)"),Zke.forEach(t),f7r=i(te),mM=n(te,"LI",{});var eSe=s(mM);g6e=n(eSe,"STRONG",{});var jTt=s(g6e);m7r=r(jTt,"flaubert"),jTt.forEach(t),g7r=r(eSe," \u2014 "),qQ=n(eSe,"A",{href:!0});var DTt=s(qQ);h7r=r(DTt,"TFFlaubertForQuestionAnsweringSimple"),DTt.forEach(t),p7r=r(eSe," (FlauBERT model)"),eSe.forEach(t),_7r=i(te),gM=n(te,"LI",{});var oSe=s(gM);h6e=n(oSe,"STRONG",{});var GTt=s(h6e);u7r=r(GTt,"funnel"),GTt.forEach(t),b7r=r(oSe," \u2014 "),NQ=n(oSe,"A",{href:!0});var OTt=s(NQ);F7r=r(OTt,"TFFunnelForQuestionAnswering"),OTt.forEach(t),v7r=r(oSe," (Funnel Transformer model)"),oSe.forEach(t),T7r=i(te),hM=n(te,"LI",{});var rSe=s(hM);p6e=n(rSe,"STRONG",{});var VTt=s(p6e);M7r=r(VTt,"gptj"),VTt.forEach(t),E7r=r(rSe," \u2014 "),jQ=n(rSe,"A",{href:!0});var XTt=s(jQ);C7r=r(XTt,"TFGPTJForQuestionAnswering"),XTt.forEach(t),w7r=r(rSe," (GPT-J model)"),rSe.forEach(t),A7r=i(te),pM=n(te,"LI",{});var tSe=s(pM);_6e=n(tSe,"STRONG",{});var zTt=s(_6e);y7r=r(zTt,"longformer"),zTt.forEach(t),L7r=r(tSe," \u2014 "),DQ=n(tSe,"A",{href:!0});var QTt=s(DQ);x7r=r(QTt,"TFLongformerForQuestionAnswering"),QTt.forEach(t),k7r=r(tSe," (Longformer model)"),tSe.forEach(t),S7r=i(te),_M=n(te,"LI",{});var aSe=s(_M);u6e=n(aSe,"STRONG",{});var WTt=s(u6e);R7r=r(WTt,"mobilebert"),WTt.forEach(t),B7r=r(aSe," \u2014 "),GQ=n(aSe,"A",{href:!0});var HTt=s(GQ);P7r=r(HTt,"TFMobileBertForQuestionAnswering"),HTt.forEach(t),$7r=r(aSe," (MobileBERT model)"),aSe.forEach(t),I7r=i(te),uM=n(te,"LI",{});var nSe=s(uM);b6e=n(nSe,"STRONG",{});var UTt=s(b6e);q7r=r(UTt,"mpnet"),UTt.forEach(t),N7r=r(nSe," \u2014 "),OQ=n(nSe,"A",{href:!0});var JTt=s(OQ);j7r=r(JTt,"TFMPNetForQuestionAnswering"),JTt.forEach(t),D7r=r(nSe," (MPNet model)"),nSe.forEach(t),G7r=i(te),bM=n(te,"LI",{});var sSe=s(bM);F6e=n(sSe,"STRONG",{});var YTt=s(F6e);O7r=r(YTt,"rembert"),YTt.forEach(t),V7r=r(sSe," \u2014 "),VQ=n(sSe,"A",{href:!0});var KTt=s(VQ);X7r=r(KTt,"TFRemBertForQuestionAnswering"),KTt.forEach(t),z7r=r(sSe," (RemBERT model)"),sSe.forEach(t),Q7r=i(te),FM=n(te,"LI",{});var lSe=s(FM);v6e=n(lSe,"STRONG",{});var ZTt=s(v6e);W7r=r(ZTt,"roberta"),ZTt.forEach(t),H7r=r(lSe," \u2014 "),XQ=n(lSe,"A",{href:!0});var e7t=s(XQ);U7r=r(e7t,"TFRobertaForQuestionAnswering"),e7t.forEach(t),J7r=r(lSe," (RoBERTa model)"),lSe.forEach(t),Y7r=i(te),vM=n(te,"LI",{});var iSe=s(vM);T6e=n(iSe,"STRONG",{});var o7t=s(T6e);K7r=r(o7t,"roformer"),o7t.forEach(t),Z7r=r(iSe," \u2014 "),zQ=n(iSe,"A",{href:!0});var r7t=s(zQ);e9r=r(r7t,"TFRoFormerForQuestionAnswering"),r7t.forEach(t),o9r=r(iSe," (RoFormer model)"),iSe.forEach(t),r9r=i(te),TM=n(te,"LI",{});var dSe=s(TM);M6e=n(dSe,"STRONG",{});var t7t=s(M6e);t9r=r(t7t,"xlm"),t7t.forEach(t),a9r=r(dSe," \u2014 "),QQ=n(dSe,"A",{href:!0});var a7t=s(QQ);n9r=r(a7t,"TFXLMForQuestionAnsweringSimple"),a7t.forEach(t),s9r=r(dSe," (XLM model)"),dSe.forEach(t),l9r=i(te),MM=n(te,"LI",{});var cSe=s(MM);E6e=n(cSe,"STRONG",{});var n7t=s(E6e);i9r=r(n7t,"xlm-roberta"),n7t.forEach(t),d9r=r(cSe," \u2014 "),WQ=n(cSe,"A",{href:!0});var s7t=s(WQ);c9r=r(s7t,"TFXLMRobertaForQuestionAnswering"),s7t.forEach(t),f9r=r(cSe," (XLM-RoBERTa model)"),cSe.forEach(t),m9r=i(te),EM=n(te,"LI",{});var fSe=s(EM);C6e=n(fSe,"STRONG",{});var l7t=s(C6e);g9r=r(l7t,"xlnet"),l7t.forEach(t),h9r=r(fSe," \u2014 "),HQ=n(fSe,"A",{href:!0});var i7t=s(HQ);p9r=r(i7t,"TFXLNetForQuestionAnsweringSimple"),i7t.forEach(t),_9r=r(fSe," (XLNet model)"),fSe.forEach(t),te.forEach(t),u9r=i(wa),w6e=n(wa,"P",{});var d7t=s(w6e);b9r=r(d7t,"Examples:"),d7t.forEach(t),F9r=i(wa),m(j0.$$.fragment,wa),wa.forEach(t),li.forEach(t),qPe=i(c),Wc=n(c,"H2",{class:!0});var HIe=s(Wc);CM=n(HIe,"A",{id:!0,class:!0,href:!0});var c7t=s(CM);A6e=n(c7t,"SPAN",{});var f7t=s(A6e);m(D0.$$.fragment,f7t),f7t.forEach(t),c7t.forEach(t),v9r=i(HIe),y6e=n(HIe,"SPAN",{});var m7t=s(y6e);T9r=r(m7t,"TFAutoModelForVision2Seq"),m7t.forEach(t),HIe.forEach(t),NPe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(G0.$$.fragment,di),M9r=i(di),Hc=n(di,"P",{});var ZJ=s(Hc);E9r=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),UQ=n(ZJ,"A",{href:!0});var g7t=s(UQ);C9r=r(g7t,"from_pretrained()"),g7t.forEach(t),w9r=r(ZJ," class method or the "),JQ=n(ZJ,"A",{href:!0});var h7t=s(JQ);A9r=r(h7t,"from_config()"),h7t.forEach(t),y9r=r(ZJ,` class
method.`),ZJ.forEach(t),L9r=i(di),O0=n(di,"P",{});var UIe=s(O0);x9r=r(UIe,"This class cannot be instantiated directly using "),L6e=n(UIe,"CODE",{});var p7t=s(L6e);k9r=r(p7t,"__init__()"),p7t.forEach(t),S9r=r(UIe," (throws an error)."),UIe.forEach(t),R9r=i(di),Ct=n(di,"DIV",{class:!0});var ci=s(Ct);m(V0.$$.fragment,ci),B9r=i(ci),x6e=n(ci,"P",{});var _7t=s(x6e);P9r=r(_7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_7t.forEach(t),$9r=i(ci),Uc=n(ci,"P",{});var eY=s(Uc);I9r=r(eY,`Note:
Loading a model from its configuration file does `),k6e=n(eY,"STRONG",{});var u7t=s(k6e);q9r=r(u7t,"not"),u7t.forEach(t),N9r=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=n(eY,"A",{href:!0});var b7t=s(YQ);j9r=r(b7t,"from_pretrained()"),b7t.forEach(t),D9r=r(eY," to load the model weights."),eY.forEach(t),G9r=i(ci),S6e=n(ci,"P",{});var F7t=s(S6e);O9r=r(F7t,"Examples:"),F7t.forEach(t),V9r=i(ci),m(X0.$$.fragment,ci),ci.forEach(t),X9r=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(z0.$$.fragment,Aa),z9r=i(Aa),R6e=n(Aa,"P",{});var v7t=s(R6e);Q9r=r(v7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),v7t.forEach(t),W9r=i(Aa),Ln=n(Aa,"P",{});var M5=s(Ln);H9r=r(M5,"The model class to instantiate is selected based on the "),B6e=n(M5,"CODE",{});var T7t=s(B6e);U9r=r(T7t,"model_type"),T7t.forEach(t),J9r=r(M5,` property of the config object (either
passed as an argument or loaded from `),P6e=n(M5,"CODE",{});var M7t=s(P6e);Y9r=r(M7t,"pretrained_model_name_or_path"),M7t.forEach(t),K9r=r(M5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=n(M5,"CODE",{});var E7t=s($6e);Z9r=r(E7t,"pretrained_model_name_or_path"),E7t.forEach(t),eMr=r(M5,":"),M5.forEach(t),oMr=i(Aa),I6e=n(Aa,"UL",{});var C7t=s(I6e);wM=n(C7t,"LI",{});var mSe=s(wM);q6e=n(mSe,"STRONG",{});var w7t=s(q6e);rMr=r(w7t,"vision-encoder-decoder"),w7t.forEach(t),tMr=r(mSe," \u2014 "),KQ=n(mSe,"A",{href:!0});var A7t=s(KQ);aMr=r(A7t,"TFVisionEncoderDecoderModel"),A7t.forEach(t),nMr=r(mSe," (Vision Encoder decoder model)"),mSe.forEach(t),C7t.forEach(t),sMr=i(Aa),N6e=n(Aa,"P",{});var y7t=s(N6e);lMr=r(y7t,"Examples:"),y7t.forEach(t),iMr=i(Aa),m(Q0.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),jPe=i(c),Jc=n(c,"H2",{class:!0});var JIe=s(Jc);AM=n(JIe,"A",{id:!0,class:!0,href:!0});var L7t=s(AM);j6e=n(L7t,"SPAN",{});var x7t=s(j6e);m(W0.$$.fragment,x7t),x7t.forEach(t),L7t.forEach(t),dMr=i(JIe),D6e=n(JIe,"SPAN",{});var k7t=s(D6e);cMr=r(k7t,"TFAutoModelForSpeechSeq2Seq"),k7t.forEach(t),JIe.forEach(t),DPe=i(c),Sr=n(c,"DIV",{class:!0});var fi=s(Sr);m(H0.$$.fragment,fi),fMr=i(fi),Yc=n(fi,"P",{});var oY=s(Yc);mMr=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZQ=n(oY,"A",{href:!0});var S7t=s(ZQ);gMr=r(S7t,"from_pretrained()"),S7t.forEach(t),hMr=r(oY," class method or the "),eW=n(oY,"A",{href:!0});var R7t=s(eW);pMr=r(R7t,"from_config()"),R7t.forEach(t),_Mr=r(oY,` class
method.`),oY.forEach(t),uMr=i(fi),U0=n(fi,"P",{});var YIe=s(U0);bMr=r(YIe,"This class cannot be instantiated directly using "),G6e=n(YIe,"CODE",{});var B7t=s(G6e);FMr=r(B7t,"__init__()"),B7t.forEach(t),vMr=r(YIe," (throws an error)."),YIe.forEach(t),TMr=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(J0.$$.fragment,mi),MMr=i(mi),O6e=n(mi,"P",{});var P7t=s(O6e);EMr=r(P7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),P7t.forEach(t),CMr=i(mi),Kc=n(mi,"P",{});var rY=s(Kc);wMr=r(rY,`Note:
Loading a model from its configuration file does `),V6e=n(rY,"STRONG",{});var $7t=s(V6e);AMr=r($7t,"not"),$7t.forEach(t),yMr=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=n(rY,"A",{href:!0});var I7t=s(oW);LMr=r(I7t,"from_pretrained()"),I7t.forEach(t),xMr=r(rY," to load the model weights."),rY.forEach(t),kMr=i(mi),X6e=n(mi,"P",{});var q7t=s(X6e);SMr=r(q7t,"Examples:"),q7t.forEach(t),RMr=i(mi),m(Y0.$$.fragment,mi),mi.forEach(t),BMr=i(fi),Ao=n(fi,"DIV",{class:!0});var ya=s(Ao);m(K0.$$.fragment,ya),PMr=i(ya),z6e=n(ya,"P",{});var N7t=s(z6e);$Mr=r(N7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),N7t.forEach(t),IMr=i(ya),xn=n(ya,"P",{});var E5=s(xn);qMr=r(E5,"The model class to instantiate is selected based on the "),Q6e=n(E5,"CODE",{});var j7t=s(Q6e);NMr=r(j7t,"model_type"),j7t.forEach(t),jMr=r(E5,` property of the config object (either
passed as an argument or loaded from `),W6e=n(E5,"CODE",{});var D7t=s(W6e);DMr=r(D7t,"pretrained_model_name_or_path"),D7t.forEach(t),GMr=r(E5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H6e=n(E5,"CODE",{});var G7t=s(H6e);OMr=r(G7t,"pretrained_model_name_or_path"),G7t.forEach(t),VMr=r(E5,":"),E5.forEach(t),XMr=i(ya),U6e=n(ya,"UL",{});var O7t=s(U6e);yM=n(O7t,"LI",{});var gSe=s(yM);J6e=n(gSe,"STRONG",{});var V7t=s(J6e);zMr=r(V7t,"speech_to_text"),V7t.forEach(t),QMr=r(gSe," \u2014 "),rW=n(gSe,"A",{href:!0});var X7t=s(rW);WMr=r(X7t,"TFSpeech2TextForConditionalGeneration"),X7t.forEach(t),HMr=r(gSe," (Speech2Text model)"),gSe.forEach(t),O7t.forEach(t),UMr=i(ya),Y6e=n(ya,"P",{});var z7t=s(Y6e);JMr=r(z7t,"Examples:"),z7t.forEach(t),YMr=i(ya),m(Z0.$$.fragment,ya),ya.forEach(t),fi.forEach(t),GPe=i(c),Zc=n(c,"H2",{class:!0});var KIe=s(Zc);LM=n(KIe,"A",{id:!0,class:!0,href:!0});var Q7t=s(LM);K6e=n(Q7t,"SPAN",{});var W7t=s(K6e);m(ey.$$.fragment,W7t),W7t.forEach(t),Q7t.forEach(t),KMr=i(KIe),Z6e=n(KIe,"SPAN",{});var H7t=s(Z6e);ZMr=r(H7t,"FlaxAutoModel"),H7t.forEach(t),KIe.forEach(t),OPe=i(c),Rr=n(c,"DIV",{class:!0});var gi=s(Rr);m(oy.$$.fragment,gi),e4r=i(gi),ef=n(gi,"P",{});var tY=s(ef);o4r=r(tY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tW=n(tY,"A",{href:!0});var U7t=s(tW);r4r=r(U7t,"from_pretrained()"),U7t.forEach(t),t4r=r(tY," class method or the "),aW=n(tY,"A",{href:!0});var J7t=s(aW);a4r=r(J7t,"from_config()"),J7t.forEach(t),n4r=r(tY,` class
method.`),tY.forEach(t),s4r=i(gi),ry=n(gi,"P",{});var ZIe=s(ry);l4r=r(ZIe,"This class cannot be instantiated directly using "),eFe=n(ZIe,"CODE",{});var Y7t=s(eFe);i4r=r(Y7t,"__init__()"),Y7t.forEach(t),d4r=r(ZIe," (throws an error)."),ZIe.forEach(t),c4r=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(ty.$$.fragment,hi),f4r=i(hi),oFe=n(hi,"P",{});var K7t=s(oFe);m4r=r(K7t,"Instantiates one of the base model classes of the library from a configuration."),K7t.forEach(t),g4r=i(hi),of=n(hi,"P",{});var aY=s(of);h4r=r(aY,`Note:
Loading a model from its configuration file does `),rFe=n(aY,"STRONG",{});var Z7t=s(rFe);p4r=r(Z7t,"not"),Z7t.forEach(t),_4r=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=n(aY,"A",{href:!0});var e9t=s(nW);u4r=r(e9t,"from_pretrained()"),e9t.forEach(t),b4r=r(aY," to load the model weights."),aY.forEach(t),F4r=i(hi),tFe=n(hi,"P",{});var o9t=s(tFe);v4r=r(o9t,"Examples:"),o9t.forEach(t),T4r=i(hi),m(ay.$$.fragment,hi),hi.forEach(t),M4r=i(gi),yo=n(gi,"DIV",{class:!0});var La=s(yo);m(ny.$$.fragment,La),E4r=i(La),aFe=n(La,"P",{});var r9t=s(aFe);C4r=r(r9t,"Instantiate one of the base model classes of the library from a pretrained model."),r9t.forEach(t),w4r=i(La),kn=n(La,"P",{});var C5=s(kn);A4r=r(C5,"The model class to instantiate is selected based on the "),nFe=n(C5,"CODE",{});var t9t=s(nFe);y4r=r(t9t,"model_type"),t9t.forEach(t),L4r=r(C5,` property of the config object (either
passed as an argument or loaded from `),sFe=n(C5,"CODE",{});var a9t=s(sFe);x4r=r(a9t,"pretrained_model_name_or_path"),a9t.forEach(t),k4r=r(C5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=n(C5,"CODE",{});var n9t=s(lFe);S4r=r(n9t,"pretrained_model_name_or_path"),n9t.forEach(t),R4r=r(C5,":"),C5.forEach(t),B4r=i(La),X=n(La,"UL",{});var W=s(X);xM=n(W,"LI",{});var hSe=s(xM);iFe=n(hSe,"STRONG",{});var s9t=s(iFe);P4r=r(s9t,"albert"),s9t.forEach(t),$4r=r(hSe," \u2014 "),sW=n(hSe,"A",{href:!0});var l9t=s(sW);I4r=r(l9t,"FlaxAlbertModel"),l9t.forEach(t),q4r=r(hSe," (ALBERT model)"),hSe.forEach(t),N4r=i(W),kM=n(W,"LI",{});var pSe=s(kM);dFe=n(pSe,"STRONG",{});var i9t=s(dFe);j4r=r(i9t,"bart"),i9t.forEach(t),D4r=r(pSe," \u2014 "),lW=n(pSe,"A",{href:!0});var d9t=s(lW);G4r=r(d9t,"FlaxBartModel"),d9t.forEach(t),O4r=r(pSe," (BART model)"),pSe.forEach(t),V4r=i(W),SM=n(W,"LI",{});var _Se=s(SM);cFe=n(_Se,"STRONG",{});var c9t=s(cFe);X4r=r(c9t,"beit"),c9t.forEach(t),z4r=r(_Se," \u2014 "),iW=n(_Se,"A",{href:!0});var f9t=s(iW);Q4r=r(f9t,"FlaxBeitModel"),f9t.forEach(t),W4r=r(_Se," (BEiT model)"),_Se.forEach(t),H4r=i(W),RM=n(W,"LI",{});var uSe=s(RM);fFe=n(uSe,"STRONG",{});var m9t=s(fFe);U4r=r(m9t,"bert"),m9t.forEach(t),J4r=r(uSe," \u2014 "),dW=n(uSe,"A",{href:!0});var g9t=s(dW);Y4r=r(g9t,"FlaxBertModel"),g9t.forEach(t),K4r=r(uSe," (BERT model)"),uSe.forEach(t),Z4r=i(W),BM=n(W,"LI",{});var bSe=s(BM);mFe=n(bSe,"STRONG",{});var h9t=s(mFe);eEr=r(h9t,"big_bird"),h9t.forEach(t),oEr=r(bSe," \u2014 "),cW=n(bSe,"A",{href:!0});var p9t=s(cW);rEr=r(p9t,"FlaxBigBirdModel"),p9t.forEach(t),tEr=r(bSe," (BigBird model)"),bSe.forEach(t),aEr=i(W),PM=n(W,"LI",{});var FSe=s(PM);gFe=n(FSe,"STRONG",{});var _9t=s(gFe);nEr=r(_9t,"blenderbot"),_9t.forEach(t),sEr=r(FSe," \u2014 "),fW=n(FSe,"A",{href:!0});var u9t=s(fW);lEr=r(u9t,"FlaxBlenderbotModel"),u9t.forEach(t),iEr=r(FSe," (Blenderbot model)"),FSe.forEach(t),dEr=i(W),$M=n(W,"LI",{});var vSe=s($M);hFe=n(vSe,"STRONG",{});var b9t=s(hFe);cEr=r(b9t,"blenderbot-small"),b9t.forEach(t),fEr=r(vSe," \u2014 "),mW=n(vSe,"A",{href:!0});var F9t=s(mW);mEr=r(F9t,"FlaxBlenderbotSmallModel"),F9t.forEach(t),gEr=r(vSe," (BlenderbotSmall model)"),vSe.forEach(t),hEr=i(W),IM=n(W,"LI",{});var TSe=s(IM);pFe=n(TSe,"STRONG",{});var v9t=s(pFe);pEr=r(v9t,"clip"),v9t.forEach(t),_Er=r(TSe," \u2014 "),gW=n(TSe,"A",{href:!0});var T9t=s(gW);uEr=r(T9t,"FlaxCLIPModel"),T9t.forEach(t),bEr=r(TSe," (CLIP model)"),TSe.forEach(t),FEr=i(W),qM=n(W,"LI",{});var MSe=s(qM);_Fe=n(MSe,"STRONG",{});var M9t=s(_Fe);vEr=r(M9t,"distilbert"),M9t.forEach(t),TEr=r(MSe," \u2014 "),hW=n(MSe,"A",{href:!0});var E9t=s(hW);MEr=r(E9t,"FlaxDistilBertModel"),E9t.forEach(t),EEr=r(MSe," (DistilBERT model)"),MSe.forEach(t),CEr=i(W),NM=n(W,"LI",{});var ESe=s(NM);uFe=n(ESe,"STRONG",{});var C9t=s(uFe);wEr=r(C9t,"electra"),C9t.forEach(t),AEr=r(ESe," \u2014 "),pW=n(ESe,"A",{href:!0});var w9t=s(pW);yEr=r(w9t,"FlaxElectraModel"),w9t.forEach(t),LEr=r(ESe," (ELECTRA model)"),ESe.forEach(t),xEr=i(W),jM=n(W,"LI",{});var CSe=s(jM);bFe=n(CSe,"STRONG",{});var A9t=s(bFe);kEr=r(A9t,"gpt2"),A9t.forEach(t),SEr=r(CSe," \u2014 "),_W=n(CSe,"A",{href:!0});var y9t=s(_W);REr=r(y9t,"FlaxGPT2Model"),y9t.forEach(t),BEr=r(CSe," (OpenAI GPT-2 model)"),CSe.forEach(t),PEr=i(W),DM=n(W,"LI",{});var wSe=s(DM);FFe=n(wSe,"STRONG",{});var L9t=s(FFe);$Er=r(L9t,"gpt_neo"),L9t.forEach(t),IEr=r(wSe," \u2014 "),uW=n(wSe,"A",{href:!0});var x9t=s(uW);qEr=r(x9t,"FlaxGPTNeoModel"),x9t.forEach(t),NEr=r(wSe," (GPT Neo model)"),wSe.forEach(t),jEr=i(W),GM=n(W,"LI",{});var ASe=s(GM);vFe=n(ASe,"STRONG",{});var k9t=s(vFe);DEr=r(k9t,"gptj"),k9t.forEach(t),GEr=r(ASe," \u2014 "),bW=n(ASe,"A",{href:!0});var S9t=s(bW);OEr=r(S9t,"FlaxGPTJModel"),S9t.forEach(t),VEr=r(ASe," (GPT-J model)"),ASe.forEach(t),XEr=i(W),OM=n(W,"LI",{});var ySe=s(OM);TFe=n(ySe,"STRONG",{});var R9t=s(TFe);zEr=r(R9t,"longt5"),R9t.forEach(t),QEr=r(ySe," \u2014 "),FW=n(ySe,"A",{href:!0});var B9t=s(FW);WEr=r(B9t,"FlaxLongT5Model"),B9t.forEach(t),HEr=r(ySe," (LongT5 model)"),ySe.forEach(t),UEr=i(W),VM=n(W,"LI",{});var LSe=s(VM);MFe=n(LSe,"STRONG",{});var P9t=s(MFe);JEr=r(P9t,"marian"),P9t.forEach(t),YEr=r(LSe," \u2014 "),vW=n(LSe,"A",{href:!0});var $9t=s(vW);KEr=r($9t,"FlaxMarianModel"),$9t.forEach(t),ZEr=r(LSe," (Marian model)"),LSe.forEach(t),e5r=i(W),XM=n(W,"LI",{});var xSe=s(XM);EFe=n(xSe,"STRONG",{});var I9t=s(EFe);o5r=r(I9t,"mbart"),I9t.forEach(t),r5r=r(xSe," \u2014 "),TW=n(xSe,"A",{href:!0});var q9t=s(TW);t5r=r(q9t,"FlaxMBartModel"),q9t.forEach(t),a5r=r(xSe," (mBART model)"),xSe.forEach(t),n5r=i(W),zM=n(W,"LI",{});var kSe=s(zM);CFe=n(kSe,"STRONG",{});var N9t=s(CFe);s5r=r(N9t,"mt5"),N9t.forEach(t),l5r=r(kSe," \u2014 "),MW=n(kSe,"A",{href:!0});var j9t=s(MW);i5r=r(j9t,"FlaxMT5Model"),j9t.forEach(t),d5r=r(kSe," (mT5 model)"),kSe.forEach(t),c5r=i(W),QM=n(W,"LI",{});var SSe=s(QM);wFe=n(SSe,"STRONG",{});var D9t=s(wFe);f5r=r(D9t,"pegasus"),D9t.forEach(t),m5r=r(SSe," \u2014 "),EW=n(SSe,"A",{href:!0});var G9t=s(EW);g5r=r(G9t,"FlaxPegasusModel"),G9t.forEach(t),h5r=r(SSe," (Pegasus model)"),SSe.forEach(t),p5r=i(W),WM=n(W,"LI",{});var RSe=s(WM);AFe=n(RSe,"STRONG",{});var O9t=s(AFe);_5r=r(O9t,"roberta"),O9t.forEach(t),u5r=r(RSe," \u2014 "),CW=n(RSe,"A",{href:!0});var V9t=s(CW);b5r=r(V9t,"FlaxRobertaModel"),V9t.forEach(t),F5r=r(RSe," (RoBERTa model)"),RSe.forEach(t),v5r=i(W),HM=n(W,"LI",{});var BSe=s(HM);yFe=n(BSe,"STRONG",{});var X9t=s(yFe);T5r=r(X9t,"roformer"),X9t.forEach(t),M5r=r(BSe," \u2014 "),wW=n(BSe,"A",{href:!0});var z9t=s(wW);E5r=r(z9t,"FlaxRoFormerModel"),z9t.forEach(t),C5r=r(BSe," (RoFormer model)"),BSe.forEach(t),w5r=i(W),UM=n(W,"LI",{});var PSe=s(UM);LFe=n(PSe,"STRONG",{});var Q9t=s(LFe);A5r=r(Q9t,"t5"),Q9t.forEach(t),y5r=r(PSe," \u2014 "),AW=n(PSe,"A",{href:!0});var W9t=s(AW);L5r=r(W9t,"FlaxT5Model"),W9t.forEach(t),x5r=r(PSe," (T5 model)"),PSe.forEach(t),k5r=i(W),JM=n(W,"LI",{});var $Se=s(JM);xFe=n($Se,"STRONG",{});var H9t=s(xFe);S5r=r(H9t,"vision-text-dual-encoder"),H9t.forEach(t),R5r=r($Se," \u2014 "),yW=n($Se,"A",{href:!0});var U9t=s(yW);B5r=r(U9t,"FlaxVisionTextDualEncoderModel"),U9t.forEach(t),P5r=r($Se," (VisionTextDualEncoder model)"),$Se.forEach(t),$5r=i(W),YM=n(W,"LI",{});var ISe=s(YM);kFe=n(ISe,"STRONG",{});var J9t=s(kFe);I5r=r(J9t,"vit"),J9t.forEach(t),q5r=r(ISe," \u2014 "),LW=n(ISe,"A",{href:!0});var Y9t=s(LW);N5r=r(Y9t,"FlaxViTModel"),Y9t.forEach(t),j5r=r(ISe," (ViT model)"),ISe.forEach(t),D5r=i(W),KM=n(W,"LI",{});var qSe=s(KM);SFe=n(qSe,"STRONG",{});var K9t=s(SFe);G5r=r(K9t,"wav2vec2"),K9t.forEach(t),O5r=r(qSe," \u2014 "),xW=n(qSe,"A",{href:!0});var Z9t=s(xW);V5r=r(Z9t,"FlaxWav2Vec2Model"),Z9t.forEach(t),X5r=r(qSe," (Wav2Vec2 model)"),qSe.forEach(t),z5r=i(W),ZM=n(W,"LI",{});var NSe=s(ZM);RFe=n(NSe,"STRONG",{});var eMt=s(RFe);Q5r=r(eMt,"xglm"),eMt.forEach(t),W5r=r(NSe," \u2014 "),kW=n(NSe,"A",{href:!0});var oMt=s(kW);H5r=r(oMt,"FlaxXGLMModel"),oMt.forEach(t),U5r=r(NSe," (XGLM model)"),NSe.forEach(t),J5r=i(W),e4=n(W,"LI",{});var jSe=s(e4);BFe=n(jSe,"STRONG",{});var rMt=s(BFe);Y5r=r(rMt,"xlm-roberta"),rMt.forEach(t),K5r=r(jSe," \u2014 "),SW=n(jSe,"A",{href:!0});var tMt=s(SW);Z5r=r(tMt,"FlaxXLMRobertaModel"),tMt.forEach(t),e3r=r(jSe," (XLM-RoBERTa model)"),jSe.forEach(t),W.forEach(t),o3r=i(La),PFe=n(La,"P",{});var aMt=s(PFe);r3r=r(aMt,"Examples:"),aMt.forEach(t),t3r=i(La),m(sy.$$.fragment,La),La.forEach(t),gi.forEach(t),VPe=i(c),rf=n(c,"H2",{class:!0});var eqe=s(rf);o4=n(eqe,"A",{id:!0,class:!0,href:!0});var nMt=s(o4);$Fe=n(nMt,"SPAN",{});var sMt=s($Fe);m(ly.$$.fragment,sMt),sMt.forEach(t),nMt.forEach(t),a3r=i(eqe),IFe=n(eqe,"SPAN",{});var lMt=s(IFe);n3r=r(lMt,"FlaxAutoModelForCausalLM"),lMt.forEach(t),eqe.forEach(t),XPe=i(c),Br=n(c,"DIV",{class:!0});var pi=s(Br);m(iy.$$.fragment,pi),s3r=i(pi),tf=n(pi,"P",{});var nY=s(tf);l3r=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RW=n(nY,"A",{href:!0});var iMt=s(RW);i3r=r(iMt,"from_pretrained()"),iMt.forEach(t),d3r=r(nY," class method or the "),BW=n(nY,"A",{href:!0});var dMt=s(BW);c3r=r(dMt,"from_config()"),dMt.forEach(t),f3r=r(nY,` class
method.`),nY.forEach(t),m3r=i(pi),dy=n(pi,"P",{});var oqe=s(dy);g3r=r(oqe,"This class cannot be instantiated directly using "),qFe=n(oqe,"CODE",{});var cMt=s(qFe);h3r=r(cMt,"__init__()"),cMt.forEach(t),p3r=r(oqe," (throws an error)."),oqe.forEach(t),_3r=i(pi),yt=n(pi,"DIV",{class:!0});var _i=s(yt);m(cy.$$.fragment,_i),u3r=i(_i),NFe=n(_i,"P",{});var fMt=s(NFe);b3r=r(fMt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fMt.forEach(t),F3r=i(_i),af=n(_i,"P",{});var sY=s(af);v3r=r(sY,`Note:
Loading a model from its configuration file does `),jFe=n(sY,"STRONG",{});var mMt=s(jFe);T3r=r(mMt,"not"),mMt.forEach(t),M3r=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=n(sY,"A",{href:!0});var gMt=s(PW);E3r=r(gMt,"from_pretrained()"),gMt.forEach(t),C3r=r(sY," to load the model weights."),sY.forEach(t),w3r=i(_i),DFe=n(_i,"P",{});var hMt=s(DFe);A3r=r(hMt,"Examples:"),hMt.forEach(t),y3r=i(_i),m(fy.$$.fragment,_i),_i.forEach(t),L3r=i(pi),Lo=n(pi,"DIV",{class:!0});var xa=s(Lo);m(my.$$.fragment,xa),x3r=i(xa),GFe=n(xa,"P",{});var pMt=s(GFe);k3r=r(pMt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pMt.forEach(t),S3r=i(xa),Sn=n(xa,"P",{});var w5=s(Sn);R3r=r(w5,"The model class to instantiate is selected based on the "),OFe=n(w5,"CODE",{});var _Mt=s(OFe);B3r=r(_Mt,"model_type"),_Mt.forEach(t),P3r=r(w5,` property of the config object (either
passed as an argument or loaded from `),VFe=n(w5,"CODE",{});var uMt=s(VFe);$3r=r(uMt,"pretrained_model_name_or_path"),uMt.forEach(t),I3r=r(w5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=n(w5,"CODE",{});var bMt=s(XFe);q3r=r(bMt,"pretrained_model_name_or_path"),bMt.forEach(t),N3r=r(w5,":"),w5.forEach(t),j3r=i(xa),ca=n(xa,"UL",{});var ui=s(ca);r4=n(ui,"LI",{});var DSe=s(r4);zFe=n(DSe,"STRONG",{});var FMt=s(zFe);D3r=r(FMt,"bart"),FMt.forEach(t),G3r=r(DSe," \u2014 "),$W=n(DSe,"A",{href:!0});var vMt=s($W);O3r=r(vMt,"FlaxBartForCausalLM"),vMt.forEach(t),V3r=r(DSe," (BART model)"),DSe.forEach(t),X3r=i(ui),t4=n(ui,"LI",{});var GSe=s(t4);QFe=n(GSe,"STRONG",{});var TMt=s(QFe);z3r=r(TMt,"gpt2"),TMt.forEach(t),Q3r=r(GSe," \u2014 "),IW=n(GSe,"A",{href:!0});var MMt=s(IW);W3r=r(MMt,"FlaxGPT2LMHeadModel"),MMt.forEach(t),H3r=r(GSe," (OpenAI GPT-2 model)"),GSe.forEach(t),U3r=i(ui),a4=n(ui,"LI",{});var OSe=s(a4);WFe=n(OSe,"STRONG",{});var EMt=s(WFe);J3r=r(EMt,"gpt_neo"),EMt.forEach(t),Y3r=r(OSe," \u2014 "),qW=n(OSe,"A",{href:!0});var CMt=s(qW);K3r=r(CMt,"FlaxGPTNeoForCausalLM"),CMt.forEach(t),Z3r=r(OSe," (GPT Neo model)"),OSe.forEach(t),eCr=i(ui),n4=n(ui,"LI",{});var VSe=s(n4);HFe=n(VSe,"STRONG",{});var wMt=s(HFe);oCr=r(wMt,"gptj"),wMt.forEach(t),rCr=r(VSe," \u2014 "),NW=n(VSe,"A",{href:!0});var AMt=s(NW);tCr=r(AMt,"FlaxGPTJForCausalLM"),AMt.forEach(t),aCr=r(VSe," (GPT-J model)"),VSe.forEach(t),nCr=i(ui),s4=n(ui,"LI",{});var XSe=s(s4);UFe=n(XSe,"STRONG",{});var yMt=s(UFe);sCr=r(yMt,"xglm"),yMt.forEach(t),lCr=r(XSe," \u2014 "),jW=n(XSe,"A",{href:!0});var LMt=s(jW);iCr=r(LMt,"FlaxXGLMForCausalLM"),LMt.forEach(t),dCr=r(XSe," (XGLM model)"),XSe.forEach(t),ui.forEach(t),cCr=i(xa),JFe=n(xa,"P",{});var xMt=s(JFe);fCr=r(xMt,"Examples:"),xMt.forEach(t),mCr=i(xa),m(gy.$$.fragment,xa),xa.forEach(t),pi.forEach(t),zPe=i(c),nf=n(c,"H2",{class:!0});var rqe=s(nf);l4=n(rqe,"A",{id:!0,class:!0,href:!0});var kMt=s(l4);YFe=n(kMt,"SPAN",{});var SMt=s(YFe);m(hy.$$.fragment,SMt),SMt.forEach(t),kMt.forEach(t),gCr=i(rqe),KFe=n(rqe,"SPAN",{});var RMt=s(KFe);hCr=r(RMt,"FlaxAutoModelForPreTraining"),RMt.forEach(t),rqe.forEach(t),QPe=i(c),Pr=n(c,"DIV",{class:!0});var bi=s(Pr);m(py.$$.fragment,bi),pCr=i(bi),sf=n(bi,"P",{});var lY=s(sf);_Cr=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),DW=n(lY,"A",{href:!0});var BMt=s(DW);uCr=r(BMt,"from_pretrained()"),BMt.forEach(t),bCr=r(lY," class method or the "),GW=n(lY,"A",{href:!0});var PMt=s(GW);FCr=r(PMt,"from_config()"),PMt.forEach(t),vCr=r(lY,` class
method.`),lY.forEach(t),TCr=i(bi),_y=n(bi,"P",{});var tqe=s(_y);MCr=r(tqe,"This class cannot be instantiated directly using "),ZFe=n(tqe,"CODE",{});var $Mt=s(ZFe);ECr=r($Mt,"__init__()"),$Mt.forEach(t),CCr=r(tqe," (throws an error)."),tqe.forEach(t),wCr=i(bi),Lt=n(bi,"DIV",{class:!0});var Fi=s(Lt);m(uy.$$.fragment,Fi),ACr=i(Fi),eve=n(Fi,"P",{});var IMt=s(eve);yCr=r(IMt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),IMt.forEach(t),LCr=i(Fi),lf=n(Fi,"P",{});var iY=s(lf);xCr=r(iY,`Note:
Loading a model from its configuration file does `),ove=n(iY,"STRONG",{});var qMt=s(ove);kCr=r(qMt,"not"),qMt.forEach(t),SCr=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=n(iY,"A",{href:!0});var NMt=s(OW);RCr=r(NMt,"from_pretrained()"),NMt.forEach(t),BCr=r(iY," to load the model weights."),iY.forEach(t),PCr=i(Fi),rve=n(Fi,"P",{});var jMt=s(rve);$Cr=r(jMt,"Examples:"),jMt.forEach(t),ICr=i(Fi),m(by.$$.fragment,Fi),Fi.forEach(t),qCr=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(Fy.$$.fragment,ka),NCr=i(ka),tve=n(ka,"P",{});var DMt=s(tve);jCr=r(DMt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),DMt.forEach(t),DCr=i(ka),Rn=n(ka,"P",{});var A5=s(Rn);GCr=r(A5,"The model class to instantiate is selected based on the "),ave=n(A5,"CODE",{});var GMt=s(ave);OCr=r(GMt,"model_type"),GMt.forEach(t),VCr=r(A5,` property of the config object (either
passed as an argument or loaded from `),nve=n(A5,"CODE",{});var OMt=s(nve);XCr=r(OMt,"pretrained_model_name_or_path"),OMt.forEach(t),zCr=r(A5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=n(A5,"CODE",{});var VMt=s(sve);QCr=r(VMt,"pretrained_model_name_or_path"),VMt.forEach(t),WCr=r(A5,":"),A5.forEach(t),HCr=i(ka),ce=n(ka,"UL",{});var he=s(ce);i4=n(he,"LI",{});var zSe=s(i4);lve=n(zSe,"STRONG",{});var XMt=s(lve);UCr=r(XMt,"albert"),XMt.forEach(t),JCr=r(zSe," \u2014 "),VW=n(zSe,"A",{href:!0});var zMt=s(VW);YCr=r(zMt,"FlaxAlbertForPreTraining"),zMt.forEach(t),KCr=r(zSe," (ALBERT model)"),zSe.forEach(t),ZCr=i(he),d4=n(he,"LI",{});var QSe=s(d4);ive=n(QSe,"STRONG",{});var QMt=s(ive);ewr=r(QMt,"bart"),QMt.forEach(t),owr=r(QSe," \u2014 "),XW=n(QSe,"A",{href:!0});var WMt=s(XW);rwr=r(WMt,"FlaxBartForConditionalGeneration"),WMt.forEach(t),twr=r(QSe," (BART model)"),QSe.forEach(t),awr=i(he),c4=n(he,"LI",{});var WSe=s(c4);dve=n(WSe,"STRONG",{});var HMt=s(dve);nwr=r(HMt,"bert"),HMt.forEach(t),swr=r(WSe," \u2014 "),zW=n(WSe,"A",{href:!0});var UMt=s(zW);lwr=r(UMt,"FlaxBertForPreTraining"),UMt.forEach(t),iwr=r(WSe," (BERT model)"),WSe.forEach(t),dwr=i(he),f4=n(he,"LI",{});var HSe=s(f4);cve=n(HSe,"STRONG",{});var JMt=s(cve);cwr=r(JMt,"big_bird"),JMt.forEach(t),fwr=r(HSe," \u2014 "),QW=n(HSe,"A",{href:!0});var YMt=s(QW);mwr=r(YMt,"FlaxBigBirdForPreTraining"),YMt.forEach(t),gwr=r(HSe," (BigBird model)"),HSe.forEach(t),hwr=i(he),m4=n(he,"LI",{});var USe=s(m4);fve=n(USe,"STRONG",{});var KMt=s(fve);pwr=r(KMt,"electra"),KMt.forEach(t),_wr=r(USe," \u2014 "),WW=n(USe,"A",{href:!0});var ZMt=s(WW);uwr=r(ZMt,"FlaxElectraForPreTraining"),ZMt.forEach(t),bwr=r(USe," (ELECTRA model)"),USe.forEach(t),Fwr=i(he),g4=n(he,"LI",{});var JSe=s(g4);mve=n(JSe,"STRONG",{});var e4t=s(mve);vwr=r(e4t,"longt5"),e4t.forEach(t),Twr=r(JSe," \u2014 "),HW=n(JSe,"A",{href:!0});var o4t=s(HW);Mwr=r(o4t,"FlaxLongT5ForConditionalGeneration"),o4t.forEach(t),Ewr=r(JSe," (LongT5 model)"),JSe.forEach(t),Cwr=i(he),h4=n(he,"LI",{});var YSe=s(h4);gve=n(YSe,"STRONG",{});var r4t=s(gve);wwr=r(r4t,"mbart"),r4t.forEach(t),Awr=r(YSe," \u2014 "),UW=n(YSe,"A",{href:!0});var t4t=s(UW);ywr=r(t4t,"FlaxMBartForConditionalGeneration"),t4t.forEach(t),Lwr=r(YSe," (mBART model)"),YSe.forEach(t),xwr=i(he),p4=n(he,"LI",{});var KSe=s(p4);hve=n(KSe,"STRONG",{});var a4t=s(hve);kwr=r(a4t,"mt5"),a4t.forEach(t),Swr=r(KSe," \u2014 "),JW=n(KSe,"A",{href:!0});var n4t=s(JW);Rwr=r(n4t,"FlaxMT5ForConditionalGeneration"),n4t.forEach(t),Bwr=r(KSe," (mT5 model)"),KSe.forEach(t),Pwr=i(he),_4=n(he,"LI",{});var ZSe=s(_4);pve=n(ZSe,"STRONG",{});var s4t=s(pve);$wr=r(s4t,"roberta"),s4t.forEach(t),Iwr=r(ZSe," \u2014 "),YW=n(ZSe,"A",{href:!0});var l4t=s(YW);qwr=r(l4t,"FlaxRobertaForMaskedLM"),l4t.forEach(t),Nwr=r(ZSe," (RoBERTa model)"),ZSe.forEach(t),jwr=i(he),u4=n(he,"LI",{});var eRe=s(u4);_ve=n(eRe,"STRONG",{});var i4t=s(_ve);Dwr=r(i4t,"roformer"),i4t.forEach(t),Gwr=r(eRe," \u2014 "),KW=n(eRe,"A",{href:!0});var d4t=s(KW);Owr=r(d4t,"FlaxRoFormerForMaskedLM"),d4t.forEach(t),Vwr=r(eRe," (RoFormer model)"),eRe.forEach(t),Xwr=i(he),b4=n(he,"LI",{});var oRe=s(b4);uve=n(oRe,"STRONG",{});var c4t=s(uve);zwr=r(c4t,"t5"),c4t.forEach(t),Qwr=r(oRe," \u2014 "),ZW=n(oRe,"A",{href:!0});var f4t=s(ZW);Wwr=r(f4t,"FlaxT5ForConditionalGeneration"),f4t.forEach(t),Hwr=r(oRe," (T5 model)"),oRe.forEach(t),Uwr=i(he),F4=n(he,"LI",{});var rRe=s(F4);bve=n(rRe,"STRONG",{});var m4t=s(bve);Jwr=r(m4t,"wav2vec2"),m4t.forEach(t),Ywr=r(rRe," \u2014 "),eH=n(rRe,"A",{href:!0});var g4t=s(eH);Kwr=r(g4t,"FlaxWav2Vec2ForPreTraining"),g4t.forEach(t),Zwr=r(rRe," (Wav2Vec2 model)"),rRe.forEach(t),eAr=i(he),v4=n(he,"LI",{});var tRe=s(v4);Fve=n(tRe,"STRONG",{});var h4t=s(Fve);oAr=r(h4t,"xlm-roberta"),h4t.forEach(t),rAr=r(tRe," \u2014 "),oH=n(tRe,"A",{href:!0});var p4t=s(oH);tAr=r(p4t,"FlaxXLMRobertaForMaskedLM"),p4t.forEach(t),aAr=r(tRe," (XLM-RoBERTa model)"),tRe.forEach(t),he.forEach(t),nAr=i(ka),vve=n(ka,"P",{});var _4t=s(vve);sAr=r(_4t,"Examples:"),_4t.forEach(t),lAr=i(ka),m(vy.$$.fragment,ka),ka.forEach(t),bi.forEach(t),WPe=i(c),df=n(c,"H2",{class:!0});var aqe=s(df);T4=n(aqe,"A",{id:!0,class:!0,href:!0});var u4t=s(T4);Tve=n(u4t,"SPAN",{});var b4t=s(Tve);m(Ty.$$.fragment,b4t),b4t.forEach(t),u4t.forEach(t),iAr=i(aqe),Mve=n(aqe,"SPAN",{});var F4t=s(Mve);dAr=r(F4t,"FlaxAutoModelForMaskedLM"),F4t.forEach(t),aqe.forEach(t),HPe=i(c),$r=n(c,"DIV",{class:!0});var vi=s($r);m(My.$$.fragment,vi),cAr=i(vi),cf=n(vi,"P",{});var dY=s(cf);fAr=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rH=n(dY,"A",{href:!0});var v4t=s(rH);mAr=r(v4t,"from_pretrained()"),v4t.forEach(t),gAr=r(dY," class method or the "),tH=n(dY,"A",{href:!0});var T4t=s(tH);hAr=r(T4t,"from_config()"),T4t.forEach(t),pAr=r(dY,` class
method.`),dY.forEach(t),_Ar=i(vi),Ey=n(vi,"P",{});var nqe=s(Ey);uAr=r(nqe,"This class cannot be instantiated directly using "),Eve=n(nqe,"CODE",{});var M4t=s(Eve);bAr=r(M4t,"__init__()"),M4t.forEach(t),FAr=r(nqe," (throws an error)."),nqe.forEach(t),vAr=i(vi),xt=n(vi,"DIV",{class:!0});var Ti=s(xt);m(Cy.$$.fragment,Ti),TAr=i(Ti),Cve=n(Ti,"P",{});var E4t=s(Cve);MAr=r(E4t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),E4t.forEach(t),EAr=i(Ti),ff=n(Ti,"P",{});var cY=s(ff);CAr=r(cY,`Note:
Loading a model from its configuration file does `),wve=n(cY,"STRONG",{});var C4t=s(wve);wAr=r(C4t,"not"),C4t.forEach(t),AAr=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=n(cY,"A",{href:!0});var w4t=s(aH);yAr=r(w4t,"from_pretrained()"),w4t.forEach(t),LAr=r(cY," to load the model weights."),cY.forEach(t),xAr=i(Ti),Ave=n(Ti,"P",{});var A4t=s(Ave);kAr=r(A4t,"Examples:"),A4t.forEach(t),SAr=i(Ti),m(wy.$$.fragment,Ti),Ti.forEach(t),RAr=i(vi),ko=n(vi,"DIV",{class:!0});var Sa=s(ko);m(Ay.$$.fragment,Sa),BAr=i(Sa),yve=n(Sa,"P",{});var y4t=s(yve);PAr=r(y4t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),y4t.forEach(t),$Ar=i(Sa),Bn=n(Sa,"P",{});var y5=s(Bn);IAr=r(y5,"The model class to instantiate is selected based on the "),Lve=n(y5,"CODE",{});var L4t=s(Lve);qAr=r(L4t,"model_type"),L4t.forEach(t),NAr=r(y5,` property of the config object (either
passed as an argument or loaded from `),xve=n(y5,"CODE",{});var x4t=s(xve);jAr=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),DAr=r(y5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=n(y5,"CODE",{});var k4t=s(kve);GAr=r(k4t,"pretrained_model_name_or_path"),k4t.forEach(t),OAr=r(y5,":"),y5.forEach(t),VAr=i(Sa),Fe=n(Sa,"UL",{});var Ae=s(Fe);M4=n(Ae,"LI",{});var aRe=s(M4);Sve=n(aRe,"STRONG",{});var S4t=s(Sve);XAr=r(S4t,"albert"),S4t.forEach(t),zAr=r(aRe," \u2014 "),nH=n(aRe,"A",{href:!0});var R4t=s(nH);QAr=r(R4t,"FlaxAlbertForMaskedLM"),R4t.forEach(t),WAr=r(aRe," (ALBERT model)"),aRe.forEach(t),HAr=i(Ae),E4=n(Ae,"LI",{});var nRe=s(E4);Rve=n(nRe,"STRONG",{});var B4t=s(Rve);UAr=r(B4t,"bart"),B4t.forEach(t),JAr=r(nRe," \u2014 "),sH=n(nRe,"A",{href:!0});var P4t=s(sH);YAr=r(P4t,"FlaxBartForConditionalGeneration"),P4t.forEach(t),KAr=r(nRe," (BART model)"),nRe.forEach(t),ZAr=i(Ae),C4=n(Ae,"LI",{});var sRe=s(C4);Bve=n(sRe,"STRONG",{});var $4t=s(Bve);e0r=r($4t,"bert"),$4t.forEach(t),o0r=r(sRe," \u2014 "),lH=n(sRe,"A",{href:!0});var I4t=s(lH);r0r=r(I4t,"FlaxBertForMaskedLM"),I4t.forEach(t),t0r=r(sRe," (BERT model)"),sRe.forEach(t),a0r=i(Ae),w4=n(Ae,"LI",{});var lRe=s(w4);Pve=n(lRe,"STRONG",{});var q4t=s(Pve);n0r=r(q4t,"big_bird"),q4t.forEach(t),s0r=r(lRe," \u2014 "),iH=n(lRe,"A",{href:!0});var N4t=s(iH);l0r=r(N4t,"FlaxBigBirdForMaskedLM"),N4t.forEach(t),i0r=r(lRe," (BigBird model)"),lRe.forEach(t),d0r=i(Ae),A4=n(Ae,"LI",{});var iRe=s(A4);$ve=n(iRe,"STRONG",{});var j4t=s($ve);c0r=r(j4t,"distilbert"),j4t.forEach(t),f0r=r(iRe," \u2014 "),dH=n(iRe,"A",{href:!0});var D4t=s(dH);m0r=r(D4t,"FlaxDistilBertForMaskedLM"),D4t.forEach(t),g0r=r(iRe," (DistilBERT model)"),iRe.forEach(t),h0r=i(Ae),y4=n(Ae,"LI",{});var dRe=s(y4);Ive=n(dRe,"STRONG",{});var G4t=s(Ive);p0r=r(G4t,"electra"),G4t.forEach(t),_0r=r(dRe," \u2014 "),cH=n(dRe,"A",{href:!0});var O4t=s(cH);u0r=r(O4t,"FlaxElectraForMaskedLM"),O4t.forEach(t),b0r=r(dRe," (ELECTRA model)"),dRe.forEach(t),F0r=i(Ae),L4=n(Ae,"LI",{});var cRe=s(L4);qve=n(cRe,"STRONG",{});var V4t=s(qve);v0r=r(V4t,"mbart"),V4t.forEach(t),T0r=r(cRe," \u2014 "),fH=n(cRe,"A",{href:!0});var X4t=s(fH);M0r=r(X4t,"FlaxMBartForConditionalGeneration"),X4t.forEach(t),E0r=r(cRe," (mBART model)"),cRe.forEach(t),C0r=i(Ae),x4=n(Ae,"LI",{});var fRe=s(x4);Nve=n(fRe,"STRONG",{});var z4t=s(Nve);w0r=r(z4t,"roberta"),z4t.forEach(t),A0r=r(fRe," \u2014 "),mH=n(fRe,"A",{href:!0});var Q4t=s(mH);y0r=r(Q4t,"FlaxRobertaForMaskedLM"),Q4t.forEach(t),L0r=r(fRe," (RoBERTa model)"),fRe.forEach(t),x0r=i(Ae),k4=n(Ae,"LI",{});var mRe=s(k4);jve=n(mRe,"STRONG",{});var W4t=s(jve);k0r=r(W4t,"roformer"),W4t.forEach(t),S0r=r(mRe," \u2014 "),gH=n(mRe,"A",{href:!0});var H4t=s(gH);R0r=r(H4t,"FlaxRoFormerForMaskedLM"),H4t.forEach(t),B0r=r(mRe," (RoFormer model)"),mRe.forEach(t),P0r=i(Ae),S4=n(Ae,"LI",{});var gRe=s(S4);Dve=n(gRe,"STRONG",{});var U4t=s(Dve);$0r=r(U4t,"xlm-roberta"),U4t.forEach(t),I0r=r(gRe," \u2014 "),hH=n(gRe,"A",{href:!0});var J4t=s(hH);q0r=r(J4t,"FlaxXLMRobertaForMaskedLM"),J4t.forEach(t),N0r=r(gRe," (XLM-RoBERTa model)"),gRe.forEach(t),Ae.forEach(t),j0r=i(Sa),Gve=n(Sa,"P",{});var Y4t=s(Gve);D0r=r(Y4t,"Examples:"),Y4t.forEach(t),G0r=i(Sa),m(yy.$$.fragment,Sa),Sa.forEach(t),vi.forEach(t),UPe=i(c),mf=n(c,"H2",{class:!0});var sqe=s(mf);R4=n(sqe,"A",{id:!0,class:!0,href:!0});var K4t=s(R4);Ove=n(K4t,"SPAN",{});var Z4t=s(Ove);m(Ly.$$.fragment,Z4t),Z4t.forEach(t),K4t.forEach(t),O0r=i(sqe),Vve=n(sqe,"SPAN",{});var eEt=s(Vve);V0r=r(eEt,"FlaxAutoModelForSeq2SeqLM"),eEt.forEach(t),sqe.forEach(t),JPe=i(c),Ir=n(c,"DIV",{class:!0});var Mi=s(Ir);m(xy.$$.fragment,Mi),X0r=i(Mi),gf=n(Mi,"P",{});var fY=s(gf);z0r=r(fY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pH=n(fY,"A",{href:!0});var oEt=s(pH);Q0r=r(oEt,"from_pretrained()"),oEt.forEach(t),W0r=r(fY," class method or the "),_H=n(fY,"A",{href:!0});var rEt=s(_H);H0r=r(rEt,"from_config()"),rEt.forEach(t),U0r=r(fY,` class
method.`),fY.forEach(t),J0r=i(Mi),ky=n(Mi,"P",{});var lqe=s(ky);Y0r=r(lqe,"This class cannot be instantiated directly using "),Xve=n(lqe,"CODE",{});var tEt=s(Xve);K0r=r(tEt,"__init__()"),tEt.forEach(t),Z0r=r(lqe," (throws an error)."),lqe.forEach(t),eyr=i(Mi),kt=n(Mi,"DIV",{class:!0});var Ei=s(kt);m(Sy.$$.fragment,Ei),oyr=i(Ei),zve=n(Ei,"P",{});var aEt=s(zve);ryr=r(aEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aEt.forEach(t),tyr=i(Ei),hf=n(Ei,"P",{});var mY=s(hf);ayr=r(mY,`Note:
Loading a model from its configuration file does `),Qve=n(mY,"STRONG",{});var nEt=s(Qve);nyr=r(nEt,"not"),nEt.forEach(t),syr=r(mY,` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=n(mY,"A",{href:!0});var sEt=s(uH);lyr=r(sEt,"from_pretrained()"),sEt.forEach(t),iyr=r(mY," to load the model weights."),mY.forEach(t),dyr=i(Ei),Wve=n(Ei,"P",{});var lEt=s(Wve);cyr=r(lEt,"Examples:"),lEt.forEach(t),fyr=i(Ei),m(Ry.$$.fragment,Ei),Ei.forEach(t),myr=i(Mi),So=n(Mi,"DIV",{class:!0});var Ra=s(So);m(By.$$.fragment,Ra),gyr=i(Ra),Hve=n(Ra,"P",{});var iEt=s(Hve);hyr=r(iEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iEt.forEach(t),pyr=i(Ra),Pn=n(Ra,"P",{});var L5=s(Pn);_yr=r(L5,"The model class to instantiate is selected based on the "),Uve=n(L5,"CODE",{});var dEt=s(Uve);uyr=r(dEt,"model_type"),dEt.forEach(t),byr=r(L5,` property of the config object (either
passed as an argument or loaded from `),Jve=n(L5,"CODE",{});var cEt=s(Jve);Fyr=r(cEt,"pretrained_model_name_or_path"),cEt.forEach(t),vyr=r(L5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(L5,"CODE",{});var fEt=s(Yve);Tyr=r(fEt,"pretrained_model_name_or_path"),fEt.forEach(t),Myr=r(L5,":"),L5.forEach(t),Eyr=i(Ra),ve=n(Ra,"UL",{});var ye=s(ve);B4=n(ye,"LI",{});var hRe=s(B4);Kve=n(hRe,"STRONG",{});var mEt=s(Kve);Cyr=r(mEt,"bart"),mEt.forEach(t),wyr=r(hRe," \u2014 "),bH=n(hRe,"A",{href:!0});var gEt=s(bH);Ayr=r(gEt,"FlaxBartForConditionalGeneration"),gEt.forEach(t),yyr=r(hRe," (BART model)"),hRe.forEach(t),Lyr=i(ye),P4=n(ye,"LI",{});var pRe=s(P4);Zve=n(pRe,"STRONG",{});var hEt=s(Zve);xyr=r(hEt,"blenderbot"),hEt.forEach(t),kyr=r(pRe," \u2014 "),FH=n(pRe,"A",{href:!0});var pEt=s(FH);Syr=r(pEt,"FlaxBlenderbotForConditionalGeneration"),pEt.forEach(t),Ryr=r(pRe," (Blenderbot model)"),pRe.forEach(t),Byr=i(ye),$4=n(ye,"LI",{});var _Re=s($4);eTe=n(_Re,"STRONG",{});var _Et=s(eTe);Pyr=r(_Et,"blenderbot-small"),_Et.forEach(t),$yr=r(_Re," \u2014 "),vH=n(_Re,"A",{href:!0});var uEt=s(vH);Iyr=r(uEt,"FlaxBlenderbotSmallForConditionalGeneration"),uEt.forEach(t),qyr=r(_Re," (BlenderbotSmall model)"),_Re.forEach(t),Nyr=i(ye),I4=n(ye,"LI",{});var uRe=s(I4);oTe=n(uRe,"STRONG",{});var bEt=s(oTe);jyr=r(bEt,"encoder-decoder"),bEt.forEach(t),Dyr=r(uRe," \u2014 "),TH=n(uRe,"A",{href:!0});var FEt=s(TH);Gyr=r(FEt,"FlaxEncoderDecoderModel"),FEt.forEach(t),Oyr=r(uRe," (Encoder decoder model)"),uRe.forEach(t),Vyr=i(ye),q4=n(ye,"LI",{});var bRe=s(q4);rTe=n(bRe,"STRONG",{});var vEt=s(rTe);Xyr=r(vEt,"longt5"),vEt.forEach(t),zyr=r(bRe," \u2014 "),MH=n(bRe,"A",{href:!0});var TEt=s(MH);Qyr=r(TEt,"FlaxLongT5ForConditionalGeneration"),TEt.forEach(t),Wyr=r(bRe," (LongT5 model)"),bRe.forEach(t),Hyr=i(ye),N4=n(ye,"LI",{});var FRe=s(N4);tTe=n(FRe,"STRONG",{});var MEt=s(tTe);Uyr=r(MEt,"marian"),MEt.forEach(t),Jyr=r(FRe," \u2014 "),EH=n(FRe,"A",{href:!0});var EEt=s(EH);Yyr=r(EEt,"FlaxMarianMTModel"),EEt.forEach(t),Kyr=r(FRe," (Marian model)"),FRe.forEach(t),Zyr=i(ye),j4=n(ye,"LI",{});var vRe=s(j4);aTe=n(vRe,"STRONG",{});var CEt=s(aTe);eLr=r(CEt,"mbart"),CEt.forEach(t),oLr=r(vRe," \u2014 "),CH=n(vRe,"A",{href:!0});var wEt=s(CH);rLr=r(wEt,"FlaxMBartForConditionalGeneration"),wEt.forEach(t),tLr=r(vRe," (mBART model)"),vRe.forEach(t),aLr=i(ye),D4=n(ye,"LI",{});var TRe=s(D4);nTe=n(TRe,"STRONG",{});var AEt=s(nTe);nLr=r(AEt,"mt5"),AEt.forEach(t),sLr=r(TRe," \u2014 "),wH=n(TRe,"A",{href:!0});var yEt=s(wH);lLr=r(yEt,"FlaxMT5ForConditionalGeneration"),yEt.forEach(t),iLr=r(TRe," (mT5 model)"),TRe.forEach(t),dLr=i(ye),G4=n(ye,"LI",{});var MRe=s(G4);sTe=n(MRe,"STRONG",{});var LEt=s(sTe);cLr=r(LEt,"pegasus"),LEt.forEach(t),fLr=r(MRe," \u2014 "),AH=n(MRe,"A",{href:!0});var xEt=s(AH);mLr=r(xEt,"FlaxPegasusForConditionalGeneration"),xEt.forEach(t),gLr=r(MRe," (Pegasus model)"),MRe.forEach(t),hLr=i(ye),O4=n(ye,"LI",{});var ERe=s(O4);lTe=n(ERe,"STRONG",{});var kEt=s(lTe);pLr=r(kEt,"t5"),kEt.forEach(t),_Lr=r(ERe," \u2014 "),yH=n(ERe,"A",{href:!0});var SEt=s(yH);uLr=r(SEt,"FlaxT5ForConditionalGeneration"),SEt.forEach(t),bLr=r(ERe," (T5 model)"),ERe.forEach(t),ye.forEach(t),FLr=i(Ra),iTe=n(Ra,"P",{});var REt=s(iTe);vLr=r(REt,"Examples:"),REt.forEach(t),TLr=i(Ra),m(Py.$$.fragment,Ra),Ra.forEach(t),Mi.forEach(t),YPe=i(c),pf=n(c,"H2",{class:!0});var iqe=s(pf);V4=n(iqe,"A",{id:!0,class:!0,href:!0});var BEt=s(V4);dTe=n(BEt,"SPAN",{});var PEt=s(dTe);m($y.$$.fragment,PEt),PEt.forEach(t),BEt.forEach(t),MLr=i(iqe),cTe=n(iqe,"SPAN",{});var $Et=s(cTe);ELr=r($Et,"FlaxAutoModelForSequenceClassification"),$Et.forEach(t),iqe.forEach(t),KPe=i(c),qr=n(c,"DIV",{class:!0});var Ci=s(qr);m(Iy.$$.fragment,Ci),CLr=i(Ci),_f=n(Ci,"P",{});var gY=s(_f);wLr=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),LH=n(gY,"A",{href:!0});var IEt=s(LH);ALr=r(IEt,"from_pretrained()"),IEt.forEach(t),yLr=r(gY," class method or the "),xH=n(gY,"A",{href:!0});var qEt=s(xH);LLr=r(qEt,"from_config()"),qEt.forEach(t),xLr=r(gY,` class
method.`),gY.forEach(t),kLr=i(Ci),qy=n(Ci,"P",{});var dqe=s(qy);SLr=r(dqe,"This class cannot be instantiated directly using "),fTe=n(dqe,"CODE",{});var NEt=s(fTe);RLr=r(NEt,"__init__()"),NEt.forEach(t),BLr=r(dqe," (throws an error)."),dqe.forEach(t),PLr=i(Ci),St=n(Ci,"DIV",{class:!0});var wi=s(St);m(Ny.$$.fragment,wi),$Lr=i(wi),mTe=n(wi,"P",{});var jEt=s(mTe);ILr=r(jEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jEt.forEach(t),qLr=i(wi),uf=n(wi,"P",{});var hY=s(uf);NLr=r(hY,`Note:
Loading a model from its configuration file does `),gTe=n(hY,"STRONG",{});var DEt=s(gTe);jLr=r(DEt,"not"),DEt.forEach(t),DLr=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=n(hY,"A",{href:!0});var GEt=s(kH);GLr=r(GEt,"from_pretrained()"),GEt.forEach(t),OLr=r(hY," to load the model weights."),hY.forEach(t),VLr=i(wi),hTe=n(wi,"P",{});var OEt=s(hTe);XLr=r(OEt,"Examples:"),OEt.forEach(t),zLr=i(wi),m(jy.$$.fragment,wi),wi.forEach(t),QLr=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Ba=s(Ro);m(Dy.$$.fragment,Ba),WLr=i(Ba),pTe=n(Ba,"P",{});var VEt=s(pTe);HLr=r(VEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),VEt.forEach(t),ULr=i(Ba),$n=n(Ba,"P",{});var x5=s($n);JLr=r(x5,"The model class to instantiate is selected based on the "),_Te=n(x5,"CODE",{});var XEt=s(_Te);YLr=r(XEt,"model_type"),XEt.forEach(t),KLr=r(x5,` property of the config object (either
passed as an argument or loaded from `),uTe=n(x5,"CODE",{});var zEt=s(uTe);ZLr=r(zEt,"pretrained_model_name_or_path"),zEt.forEach(t),e8r=r(x5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=n(x5,"CODE",{});var QEt=s(bTe);o8r=r(QEt,"pretrained_model_name_or_path"),QEt.forEach(t),r8r=r(x5,":"),x5.forEach(t),t8r=i(Ba),Te=n(Ba,"UL",{});var Le=s(Te);X4=n(Le,"LI",{});var CRe=s(X4);FTe=n(CRe,"STRONG",{});var WEt=s(FTe);a8r=r(WEt,"albert"),WEt.forEach(t),n8r=r(CRe," \u2014 "),SH=n(CRe,"A",{href:!0});var HEt=s(SH);s8r=r(HEt,"FlaxAlbertForSequenceClassification"),HEt.forEach(t),l8r=r(CRe," (ALBERT model)"),CRe.forEach(t),i8r=i(Le),z4=n(Le,"LI",{});var wRe=s(z4);vTe=n(wRe,"STRONG",{});var UEt=s(vTe);d8r=r(UEt,"bart"),UEt.forEach(t),c8r=r(wRe," \u2014 "),RH=n(wRe,"A",{href:!0});var JEt=s(RH);f8r=r(JEt,"FlaxBartForSequenceClassification"),JEt.forEach(t),m8r=r(wRe," (BART model)"),wRe.forEach(t),g8r=i(Le),Q4=n(Le,"LI",{});var ARe=s(Q4);TTe=n(ARe,"STRONG",{});var YEt=s(TTe);h8r=r(YEt,"bert"),YEt.forEach(t),p8r=r(ARe," \u2014 "),BH=n(ARe,"A",{href:!0});var KEt=s(BH);_8r=r(KEt,"FlaxBertForSequenceClassification"),KEt.forEach(t),u8r=r(ARe," (BERT model)"),ARe.forEach(t),b8r=i(Le),W4=n(Le,"LI",{});var yRe=s(W4);MTe=n(yRe,"STRONG",{});var ZEt=s(MTe);F8r=r(ZEt,"big_bird"),ZEt.forEach(t),v8r=r(yRe," \u2014 "),PH=n(yRe,"A",{href:!0});var e5t=s(PH);T8r=r(e5t,"FlaxBigBirdForSequenceClassification"),e5t.forEach(t),M8r=r(yRe," (BigBird model)"),yRe.forEach(t),E8r=i(Le),H4=n(Le,"LI",{});var LRe=s(H4);ETe=n(LRe,"STRONG",{});var o5t=s(ETe);C8r=r(o5t,"distilbert"),o5t.forEach(t),w8r=r(LRe," \u2014 "),$H=n(LRe,"A",{href:!0});var r5t=s($H);A8r=r(r5t,"FlaxDistilBertForSequenceClassification"),r5t.forEach(t),y8r=r(LRe," (DistilBERT model)"),LRe.forEach(t),L8r=i(Le),U4=n(Le,"LI",{});var xRe=s(U4);CTe=n(xRe,"STRONG",{});var t5t=s(CTe);x8r=r(t5t,"electra"),t5t.forEach(t),k8r=r(xRe," \u2014 "),IH=n(xRe,"A",{href:!0});var a5t=s(IH);S8r=r(a5t,"FlaxElectraForSequenceClassification"),a5t.forEach(t),R8r=r(xRe," (ELECTRA model)"),xRe.forEach(t),B8r=i(Le),J4=n(Le,"LI",{});var kRe=s(J4);wTe=n(kRe,"STRONG",{});var n5t=s(wTe);P8r=r(n5t,"mbart"),n5t.forEach(t),$8r=r(kRe," \u2014 "),qH=n(kRe,"A",{href:!0});var s5t=s(qH);I8r=r(s5t,"FlaxMBartForSequenceClassification"),s5t.forEach(t),q8r=r(kRe," (mBART model)"),kRe.forEach(t),N8r=i(Le),Y4=n(Le,"LI",{});var SRe=s(Y4);ATe=n(SRe,"STRONG",{});var l5t=s(ATe);j8r=r(l5t,"roberta"),l5t.forEach(t),D8r=r(SRe," \u2014 "),NH=n(SRe,"A",{href:!0});var i5t=s(NH);G8r=r(i5t,"FlaxRobertaForSequenceClassification"),i5t.forEach(t),O8r=r(SRe," (RoBERTa model)"),SRe.forEach(t),V8r=i(Le),K4=n(Le,"LI",{});var RRe=s(K4);yTe=n(RRe,"STRONG",{});var d5t=s(yTe);X8r=r(d5t,"roformer"),d5t.forEach(t),z8r=r(RRe," \u2014 "),jH=n(RRe,"A",{href:!0});var c5t=s(jH);Q8r=r(c5t,"FlaxRoFormerForSequenceClassification"),c5t.forEach(t),W8r=r(RRe," (RoFormer model)"),RRe.forEach(t),H8r=i(Le),Z4=n(Le,"LI",{});var BRe=s(Z4);LTe=n(BRe,"STRONG",{});var f5t=s(LTe);U8r=r(f5t,"xlm-roberta"),f5t.forEach(t),J8r=r(BRe," \u2014 "),DH=n(BRe,"A",{href:!0});var m5t=s(DH);Y8r=r(m5t,"FlaxXLMRobertaForSequenceClassification"),m5t.forEach(t),K8r=r(BRe," (XLM-RoBERTa model)"),BRe.forEach(t),Le.forEach(t),Z8r=i(Ba),xTe=n(Ba,"P",{});var g5t=s(xTe);exr=r(g5t,"Examples:"),g5t.forEach(t),oxr=i(Ba),m(Gy.$$.fragment,Ba),Ba.forEach(t),Ci.forEach(t),ZPe=i(c),bf=n(c,"H2",{class:!0});var cqe=s(bf);eE=n(cqe,"A",{id:!0,class:!0,href:!0});var h5t=s(eE);kTe=n(h5t,"SPAN",{});var p5t=s(kTe);m(Oy.$$.fragment,p5t),p5t.forEach(t),h5t.forEach(t),rxr=i(cqe),STe=n(cqe,"SPAN",{});var _5t=s(STe);txr=r(_5t,"FlaxAutoModelForQuestionAnswering"),_5t.forEach(t),cqe.forEach(t),e$e=i(c),Nr=n(c,"DIV",{class:!0});var Ai=s(Nr);m(Vy.$$.fragment,Ai),axr=i(Ai),Ff=n(Ai,"P",{});var pY=s(Ff);nxr=r(pY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GH=n(pY,"A",{href:!0});var u5t=s(GH);sxr=r(u5t,"from_pretrained()"),u5t.forEach(t),lxr=r(pY," class method or the "),OH=n(pY,"A",{href:!0});var b5t=s(OH);ixr=r(b5t,"from_config()"),b5t.forEach(t),dxr=r(pY,` class
method.`),pY.forEach(t),cxr=i(Ai),Xy=n(Ai,"P",{});var fqe=s(Xy);fxr=r(fqe,"This class cannot be instantiated directly using "),RTe=n(fqe,"CODE",{});var F5t=s(RTe);mxr=r(F5t,"__init__()"),F5t.forEach(t),gxr=r(fqe," (throws an error)."),fqe.forEach(t),hxr=i(Ai),Rt=n(Ai,"DIV",{class:!0});var yi=s(Rt);m(zy.$$.fragment,yi),pxr=i(yi),BTe=n(yi,"P",{});var v5t=s(BTe);_xr=r(v5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),v5t.forEach(t),uxr=i(yi),vf=n(yi,"P",{});var _Y=s(vf);bxr=r(_Y,`Note:
Loading a model from its configuration file does `),PTe=n(_Y,"STRONG",{});var T5t=s(PTe);Fxr=r(T5t,"not"),T5t.forEach(t),vxr=r(_Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(_Y,"A",{href:!0});var M5t=s(VH);Txr=r(M5t,"from_pretrained()"),M5t.forEach(t),Mxr=r(_Y," to load the model weights."),_Y.forEach(t),Exr=i(yi),$Te=n(yi,"P",{});var E5t=s($Te);Cxr=r(E5t,"Examples:"),E5t.forEach(t),wxr=i(yi),m(Qy.$$.fragment,yi),yi.forEach(t),Axr=i(Ai),Bo=n(Ai,"DIV",{class:!0});var Pa=s(Bo);m(Wy.$$.fragment,Pa),yxr=i(Pa),ITe=n(Pa,"P",{});var C5t=s(ITe);Lxr=r(C5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),C5t.forEach(t),xxr=i(Pa),In=n(Pa,"P",{});var k5=s(In);kxr=r(k5,"The model class to instantiate is selected based on the "),qTe=n(k5,"CODE",{});var w5t=s(qTe);Sxr=r(w5t,"model_type"),w5t.forEach(t),Rxr=r(k5,` property of the config object (either
passed as an argument or loaded from `),NTe=n(k5,"CODE",{});var A5t=s(NTe);Bxr=r(A5t,"pretrained_model_name_or_path"),A5t.forEach(t),Pxr=r(k5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=n(k5,"CODE",{});var y5t=s(jTe);$xr=r(y5t,"pretrained_model_name_or_path"),y5t.forEach(t),Ixr=r(k5,":"),k5.forEach(t),qxr=i(Pa),Me=n(Pa,"UL",{});var xe=s(Me);oE=n(xe,"LI",{});var PRe=s(oE);DTe=n(PRe,"STRONG",{});var L5t=s(DTe);Nxr=r(L5t,"albert"),L5t.forEach(t),jxr=r(PRe," \u2014 "),XH=n(PRe,"A",{href:!0});var x5t=s(XH);Dxr=r(x5t,"FlaxAlbertForQuestionAnswering"),x5t.forEach(t),Gxr=r(PRe," (ALBERT model)"),PRe.forEach(t),Oxr=i(xe),rE=n(xe,"LI",{});var $Re=s(rE);GTe=n($Re,"STRONG",{});var k5t=s(GTe);Vxr=r(k5t,"bart"),k5t.forEach(t),Xxr=r($Re," \u2014 "),zH=n($Re,"A",{href:!0});var S5t=s(zH);zxr=r(S5t,"FlaxBartForQuestionAnswering"),S5t.forEach(t),Qxr=r($Re," (BART model)"),$Re.forEach(t),Wxr=i(xe),tE=n(xe,"LI",{});var IRe=s(tE);OTe=n(IRe,"STRONG",{});var R5t=s(OTe);Hxr=r(R5t,"bert"),R5t.forEach(t),Uxr=r(IRe," \u2014 "),QH=n(IRe,"A",{href:!0});var B5t=s(QH);Jxr=r(B5t,"FlaxBertForQuestionAnswering"),B5t.forEach(t),Yxr=r(IRe," (BERT model)"),IRe.forEach(t),Kxr=i(xe),aE=n(xe,"LI",{});var qRe=s(aE);VTe=n(qRe,"STRONG",{});var P5t=s(VTe);Zxr=r(P5t,"big_bird"),P5t.forEach(t),ekr=r(qRe," \u2014 "),WH=n(qRe,"A",{href:!0});var $5t=s(WH);okr=r($5t,"FlaxBigBirdForQuestionAnswering"),$5t.forEach(t),rkr=r(qRe," (BigBird model)"),qRe.forEach(t),tkr=i(xe),nE=n(xe,"LI",{});var NRe=s(nE);XTe=n(NRe,"STRONG",{});var I5t=s(XTe);akr=r(I5t,"distilbert"),I5t.forEach(t),nkr=r(NRe," \u2014 "),HH=n(NRe,"A",{href:!0});var q5t=s(HH);skr=r(q5t,"FlaxDistilBertForQuestionAnswering"),q5t.forEach(t),lkr=r(NRe," (DistilBERT model)"),NRe.forEach(t),ikr=i(xe),sE=n(xe,"LI",{});var jRe=s(sE);zTe=n(jRe,"STRONG",{});var N5t=s(zTe);dkr=r(N5t,"electra"),N5t.forEach(t),ckr=r(jRe," \u2014 "),UH=n(jRe,"A",{href:!0});var j5t=s(UH);fkr=r(j5t,"FlaxElectraForQuestionAnswering"),j5t.forEach(t),mkr=r(jRe," (ELECTRA model)"),jRe.forEach(t),gkr=i(xe),lE=n(xe,"LI",{});var DRe=s(lE);QTe=n(DRe,"STRONG",{});var D5t=s(QTe);hkr=r(D5t,"mbart"),D5t.forEach(t),pkr=r(DRe," \u2014 "),JH=n(DRe,"A",{href:!0});var G5t=s(JH);_kr=r(G5t,"FlaxMBartForQuestionAnswering"),G5t.forEach(t),ukr=r(DRe," (mBART model)"),DRe.forEach(t),bkr=i(xe),iE=n(xe,"LI",{});var GRe=s(iE);WTe=n(GRe,"STRONG",{});var O5t=s(WTe);Fkr=r(O5t,"roberta"),O5t.forEach(t),vkr=r(GRe," \u2014 "),YH=n(GRe,"A",{href:!0});var V5t=s(YH);Tkr=r(V5t,"FlaxRobertaForQuestionAnswering"),V5t.forEach(t),Mkr=r(GRe," (RoBERTa model)"),GRe.forEach(t),Ekr=i(xe),dE=n(xe,"LI",{});var ORe=s(dE);HTe=n(ORe,"STRONG",{});var X5t=s(HTe);Ckr=r(X5t,"roformer"),X5t.forEach(t),wkr=r(ORe," \u2014 "),KH=n(ORe,"A",{href:!0});var z5t=s(KH);Akr=r(z5t,"FlaxRoFormerForQuestionAnswering"),z5t.forEach(t),ykr=r(ORe," (RoFormer model)"),ORe.forEach(t),Lkr=i(xe),cE=n(xe,"LI",{});var VRe=s(cE);UTe=n(VRe,"STRONG",{});var Q5t=s(UTe);xkr=r(Q5t,"xlm-roberta"),Q5t.forEach(t),kkr=r(VRe," \u2014 "),ZH=n(VRe,"A",{href:!0});var W5t=s(ZH);Skr=r(W5t,"FlaxXLMRobertaForQuestionAnswering"),W5t.forEach(t),Rkr=r(VRe," (XLM-RoBERTa model)"),VRe.forEach(t),xe.forEach(t),Bkr=i(Pa),JTe=n(Pa,"P",{});var H5t=s(JTe);Pkr=r(H5t,"Examples:"),H5t.forEach(t),$kr=i(Pa),m(Hy.$$.fragment,Pa),Pa.forEach(t),Ai.forEach(t),o$e=i(c),Tf=n(c,"H2",{class:!0});var mqe=s(Tf);fE=n(mqe,"A",{id:!0,class:!0,href:!0});var U5t=s(fE);YTe=n(U5t,"SPAN",{});var J5t=s(YTe);m(Uy.$$.fragment,J5t),J5t.forEach(t),U5t.forEach(t),Ikr=i(mqe),KTe=n(mqe,"SPAN",{});var Y5t=s(KTe);qkr=r(Y5t,"FlaxAutoModelForTokenClassification"),Y5t.forEach(t),mqe.forEach(t),r$e=i(c),jr=n(c,"DIV",{class:!0});var Li=s(jr);m(Jy.$$.fragment,Li),Nkr=i(Li),Mf=n(Li,"P",{});var uY=s(Mf);jkr=r(uY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eU=n(uY,"A",{href:!0});var K5t=s(eU);Dkr=r(K5t,"from_pretrained()"),K5t.forEach(t),Gkr=r(uY," class method or the "),oU=n(uY,"A",{href:!0});var Z5t=s(oU);Okr=r(Z5t,"from_config()"),Z5t.forEach(t),Vkr=r(uY,` class
method.`),uY.forEach(t),Xkr=i(Li),Yy=n(Li,"P",{});var gqe=s(Yy);zkr=r(gqe,"This class cannot be instantiated directly using "),ZTe=n(gqe,"CODE",{});var e3t=s(ZTe);Qkr=r(e3t,"__init__()"),e3t.forEach(t),Wkr=r(gqe," (throws an error)."),gqe.forEach(t),Hkr=i(Li),Bt=n(Li,"DIV",{class:!0});var xi=s(Bt);m(Ky.$$.fragment,xi),Ukr=i(xi),e7e=n(xi,"P",{});var o3t=s(e7e);Jkr=r(o3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),o3t.forEach(t),Ykr=i(xi),Ef=n(xi,"P",{});var bY=s(Ef);Kkr=r(bY,`Note:
Loading a model from its configuration file does `),o7e=n(bY,"STRONG",{});var r3t=s(o7e);Zkr=r(r3t,"not"),r3t.forEach(t),eSr=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(bY,"A",{href:!0});var t3t=s(rU);oSr=r(t3t,"from_pretrained()"),t3t.forEach(t),rSr=r(bY," to load the model weights."),bY.forEach(t),tSr=i(xi),r7e=n(xi,"P",{});var a3t=s(r7e);aSr=r(a3t,"Examples:"),a3t.forEach(t),nSr=i(xi),m(Zy.$$.fragment,xi),xi.forEach(t),sSr=i(Li),Po=n(Li,"DIV",{class:!0});var $a=s(Po);m(eL.$$.fragment,$a),lSr=i($a),t7e=n($a,"P",{});var n3t=s(t7e);iSr=r(n3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),n3t.forEach(t),dSr=i($a),qn=n($a,"P",{});var S5=s(qn);cSr=r(S5,"The model class to instantiate is selected based on the "),a7e=n(S5,"CODE",{});var s3t=s(a7e);fSr=r(s3t,"model_type"),s3t.forEach(t),mSr=r(S5,` property of the config object (either
passed as an argument or loaded from `),n7e=n(S5,"CODE",{});var l3t=s(n7e);gSr=r(l3t,"pretrained_model_name_or_path"),l3t.forEach(t),hSr=r(S5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=n(S5,"CODE",{});var i3t=s(s7e);pSr=r(i3t,"pretrained_model_name_or_path"),i3t.forEach(t),_Sr=r(S5,":"),S5.forEach(t),uSr=i($a),Pe=n($a,"UL",{});var Oo=s(Pe);mE=n(Oo,"LI",{});var XRe=s(mE);l7e=n(XRe,"STRONG",{});var d3t=s(l7e);bSr=r(d3t,"albert"),d3t.forEach(t),FSr=r(XRe," \u2014 "),tU=n(XRe,"A",{href:!0});var c3t=s(tU);vSr=r(c3t,"FlaxAlbertForTokenClassification"),c3t.forEach(t),TSr=r(XRe," (ALBERT model)"),XRe.forEach(t),MSr=i(Oo),gE=n(Oo,"LI",{});var zRe=s(gE);i7e=n(zRe,"STRONG",{});var f3t=s(i7e);ESr=r(f3t,"bert"),f3t.forEach(t),CSr=r(zRe," \u2014 "),aU=n(zRe,"A",{href:!0});var m3t=s(aU);wSr=r(m3t,"FlaxBertForTokenClassification"),m3t.forEach(t),ASr=r(zRe," (BERT model)"),zRe.forEach(t),ySr=i(Oo),hE=n(Oo,"LI",{});var QRe=s(hE);d7e=n(QRe,"STRONG",{});var g3t=s(d7e);LSr=r(g3t,"big_bird"),g3t.forEach(t),xSr=r(QRe," \u2014 "),nU=n(QRe,"A",{href:!0});var h3t=s(nU);kSr=r(h3t,"FlaxBigBirdForTokenClassification"),h3t.forEach(t),SSr=r(QRe," (BigBird model)"),QRe.forEach(t),RSr=i(Oo),pE=n(Oo,"LI",{});var WRe=s(pE);c7e=n(WRe,"STRONG",{});var p3t=s(c7e);BSr=r(p3t,"distilbert"),p3t.forEach(t),PSr=r(WRe," \u2014 "),sU=n(WRe,"A",{href:!0});var _3t=s(sU);$Sr=r(_3t,"FlaxDistilBertForTokenClassification"),_3t.forEach(t),ISr=r(WRe," (DistilBERT model)"),WRe.forEach(t),qSr=i(Oo),_E=n(Oo,"LI",{});var HRe=s(_E);f7e=n(HRe,"STRONG",{});var u3t=s(f7e);NSr=r(u3t,"electra"),u3t.forEach(t),jSr=r(HRe," \u2014 "),lU=n(HRe,"A",{href:!0});var b3t=s(lU);DSr=r(b3t,"FlaxElectraForTokenClassification"),b3t.forEach(t),GSr=r(HRe," (ELECTRA model)"),HRe.forEach(t),OSr=i(Oo),uE=n(Oo,"LI",{});var URe=s(uE);m7e=n(URe,"STRONG",{});var F3t=s(m7e);VSr=r(F3t,"roberta"),F3t.forEach(t),XSr=r(URe," \u2014 "),iU=n(URe,"A",{href:!0});var v3t=s(iU);zSr=r(v3t,"FlaxRobertaForTokenClassification"),v3t.forEach(t),QSr=r(URe," (RoBERTa model)"),URe.forEach(t),WSr=i(Oo),bE=n(Oo,"LI",{});var JRe=s(bE);g7e=n(JRe,"STRONG",{});var T3t=s(g7e);HSr=r(T3t,"roformer"),T3t.forEach(t),USr=r(JRe," \u2014 "),dU=n(JRe,"A",{href:!0});var M3t=s(dU);JSr=r(M3t,"FlaxRoFormerForTokenClassification"),M3t.forEach(t),YSr=r(JRe," (RoFormer model)"),JRe.forEach(t),KSr=i(Oo),FE=n(Oo,"LI",{});var YRe=s(FE);h7e=n(YRe,"STRONG",{});var E3t=s(h7e);ZSr=r(E3t,"xlm-roberta"),E3t.forEach(t),eRr=r(YRe," \u2014 "),cU=n(YRe,"A",{href:!0});var C3t=s(cU);oRr=r(C3t,"FlaxXLMRobertaForTokenClassification"),C3t.forEach(t),rRr=r(YRe," (XLM-RoBERTa model)"),YRe.forEach(t),Oo.forEach(t),tRr=i($a),p7e=n($a,"P",{});var w3t=s(p7e);aRr=r(w3t,"Examples:"),w3t.forEach(t),nRr=i($a),m(oL.$$.fragment,$a),$a.forEach(t),Li.forEach(t),t$e=i(c),Cf=n(c,"H2",{class:!0});var hqe=s(Cf);vE=n(hqe,"A",{id:!0,class:!0,href:!0});var A3t=s(vE);_7e=n(A3t,"SPAN",{});var y3t=s(_7e);m(rL.$$.fragment,y3t),y3t.forEach(t),A3t.forEach(t),sRr=i(hqe),u7e=n(hqe,"SPAN",{});var L3t=s(u7e);lRr=r(L3t,"FlaxAutoModelForMultipleChoice"),L3t.forEach(t),hqe.forEach(t),a$e=i(c),Dr=n(c,"DIV",{class:!0});var ki=s(Dr);m(tL.$$.fragment,ki),iRr=i(ki),wf=n(ki,"P",{});var FY=s(wf);dRr=r(FY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fU=n(FY,"A",{href:!0});var x3t=s(fU);cRr=r(x3t,"from_pretrained()"),x3t.forEach(t),fRr=r(FY," class method or the "),mU=n(FY,"A",{href:!0});var k3t=s(mU);mRr=r(k3t,"from_config()"),k3t.forEach(t),gRr=r(FY,` class
method.`),FY.forEach(t),hRr=i(ki),aL=n(ki,"P",{});var pqe=s(aL);pRr=r(pqe,"This class cannot be instantiated directly using "),b7e=n(pqe,"CODE",{});var S3t=s(b7e);_Rr=r(S3t,"__init__()"),S3t.forEach(t),uRr=r(pqe," (throws an error)."),pqe.forEach(t),bRr=i(ki),Pt=n(ki,"DIV",{class:!0});var Si=s(Pt);m(nL.$$.fragment,Si),FRr=i(Si),F7e=n(Si,"P",{});var R3t=s(F7e);vRr=r(R3t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),R3t.forEach(t),TRr=i(Si),Af=n(Si,"P",{});var vY=s(Af);MRr=r(vY,`Note:
Loading a model from its configuration file does `),v7e=n(vY,"STRONG",{});var B3t=s(v7e);ERr=r(B3t,"not"),B3t.forEach(t),CRr=r(vY,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(vY,"A",{href:!0});var P3t=s(gU);wRr=r(P3t,"from_pretrained()"),P3t.forEach(t),ARr=r(vY," to load the model weights."),vY.forEach(t),yRr=i(Si),T7e=n(Si,"P",{});var $3t=s(T7e);LRr=r($3t,"Examples:"),$3t.forEach(t),xRr=i(Si),m(sL.$$.fragment,Si),Si.forEach(t),kRr=i(ki),$o=n(ki,"DIV",{class:!0});var Ia=s($o);m(lL.$$.fragment,Ia),SRr=i(Ia),M7e=n(Ia,"P",{});var I3t=s(M7e);RRr=r(I3t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),I3t.forEach(t),BRr=i(Ia),Nn=n(Ia,"P",{});var R5=s(Nn);PRr=r(R5,"The model class to instantiate is selected based on the "),E7e=n(R5,"CODE",{});var q3t=s(E7e);$Rr=r(q3t,"model_type"),q3t.forEach(t),IRr=r(R5,` property of the config object (either
passed as an argument or loaded from `),C7e=n(R5,"CODE",{});var N3t=s(C7e);qRr=r(N3t,"pretrained_model_name_or_path"),N3t.forEach(t),NRr=r(R5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=n(R5,"CODE",{});var j3t=s(w7e);jRr=r(j3t,"pretrained_model_name_or_path"),j3t.forEach(t),DRr=r(R5,":"),R5.forEach(t),GRr=i(Ia),$e=n(Ia,"UL",{});var Vo=s($e);TE=n(Vo,"LI",{});var KRe=s(TE);A7e=n(KRe,"STRONG",{});var D3t=s(A7e);ORr=r(D3t,"albert"),D3t.forEach(t),VRr=r(KRe," \u2014 "),hU=n(KRe,"A",{href:!0});var G3t=s(hU);XRr=r(G3t,"FlaxAlbertForMultipleChoice"),G3t.forEach(t),zRr=r(KRe," (ALBERT model)"),KRe.forEach(t),QRr=i(Vo),ME=n(Vo,"LI",{});var ZRe=s(ME);y7e=n(ZRe,"STRONG",{});var O3t=s(y7e);WRr=r(O3t,"bert"),O3t.forEach(t),HRr=r(ZRe," \u2014 "),pU=n(ZRe,"A",{href:!0});var V3t=s(pU);URr=r(V3t,"FlaxBertForMultipleChoice"),V3t.forEach(t),JRr=r(ZRe," (BERT model)"),ZRe.forEach(t),YRr=i(Vo),EE=n(Vo,"LI",{});var eBe=s(EE);L7e=n(eBe,"STRONG",{});var X3t=s(L7e);KRr=r(X3t,"big_bird"),X3t.forEach(t),ZRr=r(eBe," \u2014 "),_U=n(eBe,"A",{href:!0});var z3t=s(_U);eBr=r(z3t,"FlaxBigBirdForMultipleChoice"),z3t.forEach(t),oBr=r(eBe," (BigBird model)"),eBe.forEach(t),rBr=i(Vo),CE=n(Vo,"LI",{});var oBe=s(CE);x7e=n(oBe,"STRONG",{});var Q3t=s(x7e);tBr=r(Q3t,"distilbert"),Q3t.forEach(t),aBr=r(oBe," \u2014 "),uU=n(oBe,"A",{href:!0});var W3t=s(uU);nBr=r(W3t,"FlaxDistilBertForMultipleChoice"),W3t.forEach(t),sBr=r(oBe," (DistilBERT model)"),oBe.forEach(t),lBr=i(Vo),wE=n(Vo,"LI",{});var rBe=s(wE);k7e=n(rBe,"STRONG",{});var H3t=s(k7e);iBr=r(H3t,"electra"),H3t.forEach(t),dBr=r(rBe," \u2014 "),bU=n(rBe,"A",{href:!0});var U3t=s(bU);cBr=r(U3t,"FlaxElectraForMultipleChoice"),U3t.forEach(t),fBr=r(rBe," (ELECTRA model)"),rBe.forEach(t),mBr=i(Vo),AE=n(Vo,"LI",{});var tBe=s(AE);S7e=n(tBe,"STRONG",{});var J3t=s(S7e);gBr=r(J3t,"roberta"),J3t.forEach(t),hBr=r(tBe," \u2014 "),FU=n(tBe,"A",{href:!0});var Y3t=s(FU);pBr=r(Y3t,"FlaxRobertaForMultipleChoice"),Y3t.forEach(t),_Br=r(tBe," (RoBERTa model)"),tBe.forEach(t),uBr=i(Vo),yE=n(Vo,"LI",{});var aBe=s(yE);R7e=n(aBe,"STRONG",{});var K3t=s(R7e);bBr=r(K3t,"roformer"),K3t.forEach(t),FBr=r(aBe," \u2014 "),vU=n(aBe,"A",{href:!0});var Z3t=s(vU);vBr=r(Z3t,"FlaxRoFormerForMultipleChoice"),Z3t.forEach(t),TBr=r(aBe," (RoFormer model)"),aBe.forEach(t),MBr=i(Vo),LE=n(Vo,"LI",{});var nBe=s(LE);B7e=n(nBe,"STRONG",{});var eCt=s(B7e);EBr=r(eCt,"xlm-roberta"),eCt.forEach(t),CBr=r(nBe," \u2014 "),TU=n(nBe,"A",{href:!0});var oCt=s(TU);wBr=r(oCt,"FlaxXLMRobertaForMultipleChoice"),oCt.forEach(t),ABr=r(nBe," (XLM-RoBERTa model)"),nBe.forEach(t),Vo.forEach(t),yBr=i(Ia),P7e=n(Ia,"P",{});var rCt=s(P7e);LBr=r(rCt,"Examples:"),rCt.forEach(t),xBr=i(Ia),m(iL.$$.fragment,Ia),Ia.forEach(t),ki.forEach(t),n$e=i(c),yf=n(c,"H2",{class:!0});var _qe=s(yf);xE=n(_qe,"A",{id:!0,class:!0,href:!0});var tCt=s(xE);$7e=n(tCt,"SPAN",{});var aCt=s($7e);m(dL.$$.fragment,aCt),aCt.forEach(t),tCt.forEach(t),kBr=i(_qe),I7e=n(_qe,"SPAN",{});var nCt=s(I7e);SBr=r(nCt,"FlaxAutoModelForNextSentencePrediction"),nCt.forEach(t),_qe.forEach(t),s$e=i(c),Gr=n(c,"DIV",{class:!0});var Ri=s(Gr);m(cL.$$.fragment,Ri),RBr=i(Ri),Lf=n(Ri,"P",{});var TY=s(Lf);BBr=r(TY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),MU=n(TY,"A",{href:!0});var sCt=s(MU);PBr=r(sCt,"from_pretrained()"),sCt.forEach(t),$Br=r(TY," class method or the "),EU=n(TY,"A",{href:!0});var lCt=s(EU);IBr=r(lCt,"from_config()"),lCt.forEach(t),qBr=r(TY,` class
method.`),TY.forEach(t),NBr=i(Ri),fL=n(Ri,"P",{});var uqe=s(fL);jBr=r(uqe,"This class cannot be instantiated directly using "),q7e=n(uqe,"CODE",{});var iCt=s(q7e);DBr=r(iCt,"__init__()"),iCt.forEach(t),GBr=r(uqe," (throws an error)."),uqe.forEach(t),OBr=i(Ri),$t=n(Ri,"DIV",{class:!0});var Bi=s($t);m(mL.$$.fragment,Bi),VBr=i(Bi),N7e=n(Bi,"P",{});var dCt=s(N7e);XBr=r(dCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dCt.forEach(t),zBr=i(Bi),xf=n(Bi,"P",{});var MY=s(xf);QBr=r(MY,`Note:
Loading a model from its configuration file does `),j7e=n(MY,"STRONG",{});var cCt=s(j7e);WBr=r(cCt,"not"),cCt.forEach(t),HBr=r(MY,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(MY,"A",{href:!0});var fCt=s(CU);UBr=r(fCt,"from_pretrained()"),fCt.forEach(t),JBr=r(MY," to load the model weights."),MY.forEach(t),YBr=i(Bi),D7e=n(Bi,"P",{});var mCt=s(D7e);KBr=r(mCt,"Examples:"),mCt.forEach(t),ZBr=i(Bi),m(gL.$$.fragment,Bi),Bi.forEach(t),ePr=i(Ri),Io=n(Ri,"DIV",{class:!0});var qa=s(Io);m(hL.$$.fragment,qa),oPr=i(qa),G7e=n(qa,"P",{});var gCt=s(G7e);rPr=r(gCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gCt.forEach(t),tPr=i(qa),jn=n(qa,"P",{});var B5=s(jn);aPr=r(B5,"The model class to instantiate is selected based on the "),O7e=n(B5,"CODE",{});var hCt=s(O7e);nPr=r(hCt,"model_type"),hCt.forEach(t),sPr=r(B5,` property of the config object (either
passed as an argument or loaded from `),V7e=n(B5,"CODE",{});var pCt=s(V7e);lPr=r(pCt,"pretrained_model_name_or_path"),pCt.forEach(t),iPr=r(B5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X7e=n(B5,"CODE",{});var _Ct=s(X7e);dPr=r(_Ct,"pretrained_model_name_or_path"),_Ct.forEach(t),cPr=r(B5,":"),B5.forEach(t),fPr=i(qa),z7e=n(qa,"UL",{});var uCt=s(z7e);kE=n(uCt,"LI",{});var sBe=s(kE);Q7e=n(sBe,"STRONG",{});var bCt=s(Q7e);mPr=r(bCt,"bert"),bCt.forEach(t),gPr=r(sBe," \u2014 "),wU=n(sBe,"A",{href:!0});var FCt=s(wU);hPr=r(FCt,"FlaxBertForNextSentencePrediction"),FCt.forEach(t),pPr=r(sBe," (BERT model)"),sBe.forEach(t),uCt.forEach(t),_Pr=i(qa),W7e=n(qa,"P",{});var vCt=s(W7e);uPr=r(vCt,"Examples:"),vCt.forEach(t),bPr=i(qa),m(pL.$$.fragment,qa),qa.forEach(t),Ri.forEach(t),l$e=i(c),kf=n(c,"H2",{class:!0});var bqe=s(kf);SE=n(bqe,"A",{id:!0,class:!0,href:!0});var TCt=s(SE);H7e=n(TCt,"SPAN",{});var MCt=s(H7e);m(_L.$$.fragment,MCt),MCt.forEach(t),TCt.forEach(t),FPr=i(bqe),U7e=n(bqe,"SPAN",{});var ECt=s(U7e);vPr=r(ECt,"FlaxAutoModelForImageClassification"),ECt.forEach(t),bqe.forEach(t),i$e=i(c),Or=n(c,"DIV",{class:!0});var Pi=s(Or);m(uL.$$.fragment,Pi),TPr=i(Pi),Sf=n(Pi,"P",{});var EY=s(Sf);MPr=r(EY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),AU=n(EY,"A",{href:!0});var CCt=s(AU);EPr=r(CCt,"from_pretrained()"),CCt.forEach(t),CPr=r(EY," class method or the "),yU=n(EY,"A",{href:!0});var wCt=s(yU);wPr=r(wCt,"from_config()"),wCt.forEach(t),APr=r(EY,` class
method.`),EY.forEach(t),yPr=i(Pi),bL=n(Pi,"P",{});var Fqe=s(bL);LPr=r(Fqe,"This class cannot be instantiated directly using "),J7e=n(Fqe,"CODE",{});var ACt=s(J7e);xPr=r(ACt,"__init__()"),ACt.forEach(t),kPr=r(Fqe," (throws an error)."),Fqe.forEach(t),SPr=i(Pi),It=n(Pi,"DIV",{class:!0});var $i=s(It);m(FL.$$.fragment,$i),RPr=i($i),Y7e=n($i,"P",{});var yCt=s(Y7e);BPr=r(yCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yCt.forEach(t),PPr=i($i),Rf=n($i,"P",{});var CY=s(Rf);$Pr=r(CY,`Note:
Loading a model from its configuration file does `),K7e=n(CY,"STRONG",{});var LCt=s(K7e);IPr=r(LCt,"not"),LCt.forEach(t),qPr=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=n(CY,"A",{href:!0});var xCt=s(LU);NPr=r(xCt,"from_pretrained()"),xCt.forEach(t),jPr=r(CY," to load the model weights."),CY.forEach(t),DPr=i($i),Z7e=n($i,"P",{});var kCt=s(Z7e);GPr=r(kCt,"Examples:"),kCt.forEach(t),OPr=i($i),m(vL.$$.fragment,$i),$i.forEach(t),VPr=i(Pi),qo=n(Pi,"DIV",{class:!0});var Na=s(qo);m(TL.$$.fragment,Na),XPr=i(Na),e9e=n(Na,"P",{});var SCt=s(e9e);zPr=r(SCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),SCt.forEach(t),QPr=i(Na),Dn=n(Na,"P",{});var P5=s(Dn);WPr=r(P5,"The model class to instantiate is selected based on the "),o9e=n(P5,"CODE",{});var RCt=s(o9e);HPr=r(RCt,"model_type"),RCt.forEach(t),UPr=r(P5,` property of the config object (either
passed as an argument or loaded from `),r9e=n(P5,"CODE",{});var BCt=s(r9e);JPr=r(BCt,"pretrained_model_name_or_path"),BCt.forEach(t),YPr=r(P5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t9e=n(P5,"CODE",{});var PCt=s(t9e);KPr=r(PCt,"pretrained_model_name_or_path"),PCt.forEach(t),ZPr=r(P5,":"),P5.forEach(t),e$r=i(Na),ML=n(Na,"UL",{});var vqe=s(ML);RE=n(vqe,"LI",{});var lBe=s(RE);a9e=n(lBe,"STRONG",{});var $Ct=s(a9e);o$r=r($Ct,"beit"),$Ct.forEach(t),r$r=r(lBe," \u2014 "),xU=n(lBe,"A",{href:!0});var ICt=s(xU);t$r=r(ICt,"FlaxBeitForImageClassification"),ICt.forEach(t),a$r=r(lBe," (BEiT model)"),lBe.forEach(t),n$r=i(vqe),BE=n(vqe,"LI",{});var iBe=s(BE);n9e=n(iBe,"STRONG",{});var qCt=s(n9e);s$r=r(qCt,"vit"),qCt.forEach(t),l$r=r(iBe," \u2014 "),kU=n(iBe,"A",{href:!0});var NCt=s(kU);i$r=r(NCt,"FlaxViTForImageClassification"),NCt.forEach(t),d$r=r(iBe," (ViT model)"),iBe.forEach(t),vqe.forEach(t),c$r=i(Na),s9e=n(Na,"P",{});var jCt=s(s9e);f$r=r(jCt,"Examples:"),jCt.forEach(t),m$r=i(Na),m(EL.$$.fragment,Na),Na.forEach(t),Pi.forEach(t),d$e=i(c),Bf=n(c,"H2",{class:!0});var Tqe=s(Bf);PE=n(Tqe,"A",{id:!0,class:!0,href:!0});var DCt=s(PE);l9e=n(DCt,"SPAN",{});var GCt=s(l9e);m(CL.$$.fragment,GCt),GCt.forEach(t),DCt.forEach(t),g$r=i(Tqe),i9e=n(Tqe,"SPAN",{});var OCt=s(i9e);h$r=r(OCt,"FlaxAutoModelForVision2Seq"),OCt.forEach(t),Tqe.forEach(t),c$e=i(c),Vr=n(c,"DIV",{class:!0});var Ii=s(Vr);m(wL.$$.fragment,Ii),p$r=i(Ii),Pf=n(Ii,"P",{});var wY=s(Pf);_$r=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SU=n(wY,"A",{href:!0});var VCt=s(SU);u$r=r(VCt,"from_pretrained()"),VCt.forEach(t),b$r=r(wY," class method or the "),RU=n(wY,"A",{href:!0});var XCt=s(RU);F$r=r(XCt,"from_config()"),XCt.forEach(t),v$r=r(wY,` class
method.`),wY.forEach(t),T$r=i(Ii),AL=n(Ii,"P",{});var Mqe=s(AL);M$r=r(Mqe,"This class cannot be instantiated directly using "),d9e=n(Mqe,"CODE",{});var zCt=s(d9e);E$r=r(zCt,"__init__()"),zCt.forEach(t),C$r=r(Mqe," (throws an error)."),Mqe.forEach(t),w$r=i(Ii),qt=n(Ii,"DIV",{class:!0});var qi=s(qt);m(yL.$$.fragment,qi),A$r=i(qi),c9e=n(qi,"P",{});var QCt=s(c9e);y$r=r(QCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QCt.forEach(t),L$r=i(qi),$f=n(qi,"P",{});var AY=s($f);x$r=r(AY,`Note:
Loading a model from its configuration file does `),f9e=n(AY,"STRONG",{});var WCt=s(f9e);k$r=r(WCt,"not"),WCt.forEach(t),S$r=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=n(AY,"A",{href:!0});var HCt=s(BU);R$r=r(HCt,"from_pretrained()"),HCt.forEach(t),B$r=r(AY," to load the model weights."),AY.forEach(t),P$r=i(qi),m9e=n(qi,"P",{});var UCt=s(m9e);$$r=r(UCt,"Examples:"),UCt.forEach(t),I$r=i(qi),m(LL.$$.fragment,qi),qi.forEach(t),q$r=i(Ii),No=n(Ii,"DIV",{class:!0});var ja=s(No);m(xL.$$.fragment,ja),N$r=i(ja),g9e=n(ja,"P",{});var JCt=s(g9e);j$r=r(JCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),JCt.forEach(t),D$r=i(ja),Gn=n(ja,"P",{});var $5=s(Gn);G$r=r($5,"The model class to instantiate is selected based on the "),h9e=n($5,"CODE",{});var YCt=s(h9e);O$r=r(YCt,"model_type"),YCt.forEach(t),V$r=r($5,` property of the config object (either
passed as an argument or loaded from `),p9e=n($5,"CODE",{});var KCt=s(p9e);X$r=r(KCt,"pretrained_model_name_or_path"),KCt.forEach(t),z$r=r($5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_9e=n($5,"CODE",{});var ZCt=s(_9e);Q$r=r(ZCt,"pretrained_model_name_or_path"),ZCt.forEach(t),W$r=r($5,":"),$5.forEach(t),H$r=i(ja),u9e=n(ja,"UL",{});var ewt=s(u9e);$E=n(ewt,"LI",{});var dBe=s($E);b9e=n(dBe,"STRONG",{});var owt=s(b9e);U$r=r(owt,"vision-encoder-decoder"),owt.forEach(t),J$r=r(dBe," \u2014 "),PU=n(dBe,"A",{href:!0});var rwt=s(PU);Y$r=r(rwt,"FlaxVisionEncoderDecoderModel"),rwt.forEach(t),K$r=r(dBe," (Vision Encoder decoder model)"),dBe.forEach(t),ewt.forEach(t),Z$r=i(ja),F9e=n(ja,"P",{});var twt=s(F9e);eIr=r(twt,"Examples:"),twt.forEach(t),oIr=i(ja),m(kL.$$.fragment,ja),ja.forEach(t),Ii.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(gwt)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(fe,"class","relative group"),d(On,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoModel"),d(zn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer"),d(Xi,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),d(Of,"id","extending-the-auto-classes"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#extending-the-auto-classes"),d(zi,"class","relative group"),d(Xf,"id","transformers.AutoConfig"),d(Xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xf,"href","#transformers.AutoConfig"),d(Qi,"class","relative group"),d($8,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(I8,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig"),d(q8,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig"),d(N8,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig"),d(j8,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig"),d(D8,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(G8,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig"),d(O8,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(V8,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(X8,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(z8,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig"),d(Q8,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig"),d(W8,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig"),d(H8,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig"),d(U8,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig"),d(J8,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig"),d(Y8,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(K8,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(Z8,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(ex,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig"),d(ox,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(rx,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(tx,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig"),d(ax,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig"),d(nx,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig"),d(sx,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig"),d(lx,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig"),d(ix,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig"),d(dx,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(cx,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig"),d(fx,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig"),d(mx,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig"),d(gx,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig"),d(hx,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig"),d(px,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config"),d(_x,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(ux,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig"),d(bx,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig"),d(Fx,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig"),d(vx,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(Tx,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(Mx,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(Ex,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig"),d(Cx,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig"),d(wx,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config"),d(Ax,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig"),d(yx,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig"),d(Lx,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config"),d(xx,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig"),d(kx,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(Sx,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig"),d(Rx,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Bx,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(Px,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig"),d($x,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config"),d(Ix,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(qx,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Nx,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig"),d(jx,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig"),d(Dx,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig"),d(Gx,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Ox,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Vx,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Xx,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagConfig"),d(zx,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmConfig"),d(Qx,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig"),d(Wx,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig"),d(Hx,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig"),d(Ux,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig"),d(Jx,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig"),d(Yx,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig"),d(Kx,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig"),d(Zx,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig"),d(ek,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig"),d(ok,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig"),d(rk,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(tk,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(ak,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(nk,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig"),d(sk,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(lk,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig"),d(ik,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config"),d(dk,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig"),d(ck,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig"),d(fk,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(mk,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig"),d(gk,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(hk,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(pk,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig"),d(_k,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig"),d(uk,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(bk,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(Fk,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(vk,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig"),d(Tk,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(Mk,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(Ek,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig"),d(Ck,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig"),d(wk,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig"),d(Ak,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(yk,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(Lk,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(xk,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig"),d(kk,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gg,"id","transformers.AutoTokenizer"),d(Gg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gg,"href","#transformers.AutoTokenizer"),d(Hi,"class","relative group"),d(Sk,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(Rk,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),d(Bk,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(Pk,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizer"),d($k,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizerFast"),d(Ik,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizer"),d(qk,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(Nk,"href","/docs/transformers/pr_16792/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(jk,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),d(Dk,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),d(Gk,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(Ok,"href","/docs/transformers/pr_16792/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(Vk,"href","/docs/transformers/pr_16792/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Xk,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(zk,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Qk,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Wk,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Hk,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Uk,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Jk,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Yk,"href","/docs/transformers/pr_16792/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Kk,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Zk,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(eS,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineTokenizer"),d(oS,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizer"),d(rS,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(tS,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(aS,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(nS,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizer"),d(sS,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(lS,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizer"),d(iS,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(dS,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(cS,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(fS,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(mS,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(gS,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(hS,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizer"),d(pS,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(_S,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(uS,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizer"),d(bS,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(FS,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(vS,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizer"),d(TS,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(MS,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(ES,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(CS,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(wS,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(AS,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizer"),d(yS,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(LS,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(xS,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),d(kS,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(SS,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(RS,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(BS,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(PS,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d($S,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(IS,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(qS,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizer"),d(NS,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizerFast"),d(jS,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizer"),d(DS,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(GS,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5Tokenizer"),d(OS,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5TokenizerFast"),d(VS,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeTokenizer"),d(XS,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(zS,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(QS,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(WS,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianTokenizer"),d(HS,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizer"),d(US,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(JS,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(YS,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(KS,"href","/docs/transformers/pr_16792/en/model_doc/mluke#transformers.MLukeTokenizer"),d(ZS,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(eR,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(oR,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(rR,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(tR,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5Tokenizer"),d(aR,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5TokenizerFast"),d(nR,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(sR,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(lR,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(iR,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(dR,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(cR,"href","/docs/transformers/pr_16792/en/model_doc/phobert#transformers.PhobertTokenizer"),d(fR,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartTokenizer"),d(mR,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(gR,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),d(hR,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),d(pR,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagTokenizer"),d(_R,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizer"),d(uR,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizerFast"),d(bR,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizer"),d(FR,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(vR,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizer"),d(TR,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(MR,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(ER,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(CR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),d(wR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(AR,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(yR,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(LR,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(xR,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(kR,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizer"),d(SR,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(RR,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(BR,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(PR,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5Tokenizer"),d($R,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5TokenizerFast"),d(IR,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasTokenizer"),d(qR,"href","/docs/transformers/pr_16792/en/model_doc/tapex#transformers.TapexTokenizer"),d(NR,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(jR,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(DR,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(GR,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizer"),d(OR,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(VR,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMTokenizer"),d(XR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(zR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(QR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(WR,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(HR,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fh,"id","transformers.AutoFeatureExtractor"),d(Fh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Fh,"href","#transformers.AutoFeatureExtractor"),d(Ui,"class","relative group"),d(UR,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(JR,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(YR,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(KR,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(ZR,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(eB,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(oB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(rB,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(tB,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(aB,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(nB,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(sB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(lB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(iB,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(dB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(cB,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(fB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(mB,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(gB,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(hB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gh,"id","transformers.AutoProcessor"),d(Gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gh,"href","#transformers.AutoProcessor"),d(Ji,"class","relative group"),d(pB,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(_B,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPProcessor"),d(uB,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(bB,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(FB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(vB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(TB,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRProcessor"),d(MB,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(EB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kh,"id","transformers.AutoModel"),d(Kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Kh,"href","#transformers.AutoModel"),d(Ki,"class","relative group"),d(CB,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wB,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AB,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yB,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel"),d(LB,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel"),d(xB,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel"),d(kB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),d(SB,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(RB,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel"),d(BB,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(PB,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel"),d($B,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(IB,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel"),d(qB,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel"),d(NB,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel"),d(jB,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel"),d(DB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel"),d(GB,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel"),d(OB,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(VB,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(XB,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(zB,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel"),d(QB,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(WB,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(HB,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel"),d(UB,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel"),d(JB,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel"),d(YB,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(KB,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel"),d(ZB,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel"),d(eP,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel"),d(oP,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel"),d(rP,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel"),d(tP,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel"),d(aP,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel"),d(nP,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel"),d(sP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model"),d(lP,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(iP,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel"),d(dP,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel"),d(cP,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel"),d(fP,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(mP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(gP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(hP,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel"),d(pP,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel"),d(_P,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model"),d(uP,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel"),d(bP,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel"),d(FP,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model"),d(vP,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel"),d(TP,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel"),d(MP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel"),d(EP,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(CP,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel"),d(wP,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel"),d(AP,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model"),d(yP,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel"),d(LP,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(xP,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel"),d(kP,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel"),d(SP,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel"),d(RP,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel"),d(BP,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(PP,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel"),d($P,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel"),d(IP,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel"),d(qP,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel"),d(NP,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel"),d(jP,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),d(DP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel"),d(GP,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel"),d(OP,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel"),d(VP,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel"),d(XP,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel"),d(zP,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(QP,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel"),d(WP,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(HP,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel"),d(UP,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model"),d(JP,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel"),d(YP,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(KP,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel"),d(ZP,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(e$,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel"),d(o$,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel"),d(r$,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(t$,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel"),d(a$,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel"),d(n$,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(s$,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(l$,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel"),d(i$,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel"),d(d$,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel"),d(c$,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(f$,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(m$,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(g$,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel"),d(h$,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(D_,"id","transformers.AutoModelForPreTraining"),d(D_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D_,"href","#transformers.AutoModelForPreTraining"),d(od,"class","relative group"),d(p$,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_$,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(u$,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(b$,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining"),d(F$,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(v$,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining"),d(T$,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(M$,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(E$,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(C$,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(w$,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(A$,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(y$,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(L$,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining"),d(x$,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(k$,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining"),d(S$,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(R$,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(B$,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(P$,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),d($$,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(I$,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(q$,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),d(N$,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(j$,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(D$,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(G$,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(O$,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(V$,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),d(X$,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(z$,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(Q$,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(W$,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(H$,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(U$,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(J$,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(Y$,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(K$,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(Z$,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(eI,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(oI,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(rI,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(tI,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lu,"id","transformers.AutoModelForCausalLM"),d(Lu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lu,"href","#transformers.AutoModelForCausalLM"),d(ad,"class","relative group"),d(aI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lI,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM"),d(iI,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel"),d(dI,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(cI,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(fI,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(mI,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(gI,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(hI,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(pI,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(_I,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(uI,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM"),d(bI,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(FI,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(vI,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(TI,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM"),d(MI,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM"),d(EI,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(CI,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(wI,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(AI,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(yI,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(LI,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(xI,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(kI,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(SI,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(RI,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(BI,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(PI,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d($I,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(II,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(qI,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(NI,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(jI,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(DI,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(GI,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f2,"id","transformers.AutoModelForMaskedLM"),d(f2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f2,"href","#transformers.AutoModelForMaskedLM"),d(ld,"class","relative group"),d(OI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zI,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(QI,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(WI,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM"),d(HI,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(UI,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(JI,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(YI,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(KI,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(ZI,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(eq,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(oq,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(rq,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(tq,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(aq,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(nq,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(sq,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(lq,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(iq,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(dq,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(cq,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(fq,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(mq,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(gq,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(hq,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(pq,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(_q,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(uq,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(bq,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(Fq,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(vq,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(Tq,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(Mq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(Eq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(Cq,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(H2,"id","transformers.AutoModelForSeq2SeqLM"),d(H2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H2,"href","#transformers.AutoModelForSeq2SeqLM"),d(cd,"class","relative group"),d(wq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Aq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lq,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(xq,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(kq,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(Sq,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(Rq,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(Bq,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(Pq,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration"),d($q,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),d(Iq,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(qq,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel"),d(Nq,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(jq,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(Dq,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(Gq,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(Oq,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(Vq,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(Xq,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(zq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h1,"id","transformers.AutoModelForSequenceClassification"),d(h1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h1,"href","#transformers.AutoModelForSequenceClassification"),d(gd,"class","relative group"),d(Qq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Hq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uq,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(gN,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(hN,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(pN,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(_N,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(uN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(bN,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification"),d(FN,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(vN,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(TN,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(MN,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(EN,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(CN,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(wN,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(AN,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(yN,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(LN,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(xN,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(kN,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(SN,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(RN,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(BN,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(PN,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d($N,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification"),d(IN,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(qN,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(NN,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(jN,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(DN,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(GN,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(db,"id","transformers.AutoModelForMultipleChoice"),d(db,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(db,"href","#transformers.AutoModelForMultipleChoice"),d(_d,"class","relative group"),d(ON,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zN,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(QN,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice"),d(WN,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(HN,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(UN,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(JN,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(YN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(KN,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(ej,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(oj,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(rj,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(tj,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(aj,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(nj,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(sj,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(lj,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(ij,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(dj,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(cj,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(fj,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(mj,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(gj,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(hj,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(pj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(_j,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(uj,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(bj,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jb,"id","transformers.AutoModelForNextSentencePrediction"),d(jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jb,"href","#transformers.AutoModelForNextSentencePrediction"),d(Fd,"class","relative group"),d(Fj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Tj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mj,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(Ej,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(Cj,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(wj,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(Aj,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qb,"id","transformers.AutoModelForTokenClassification"),d(Qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qb,"href","#transformers.AutoModelForTokenClassification"),d(Md,"class","relative group"),d(yj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kj,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(Sj,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification"),d(Rj,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(Bj,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(Pj,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification"),d($j,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(Ij,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(qj,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(Nj,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(jj,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(Dj,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Gj,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(Oj,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Vj,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(Xj,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(zj,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(Qj,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Wj,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Hj,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(Uj,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(Jj,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Yj,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(Kj,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Zj,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(eD,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(oD,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(rD,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(tD,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(aD,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(nD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(sD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(lD,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(iD,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y6,"id","transformers.AutoModelForQuestionAnswering"),d(y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y6,"href","#transformers.AutoModelForQuestionAnswering"),d(wd,"class","relative group"),d(dD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mD,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(AD,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(kD,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(SD,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(RD,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(BD,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(PD,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d($D,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(ID,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(qD,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(ND,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(jD,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(DD,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(GD,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(OD,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(VD,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(XD,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(zD,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(QD,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(WD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(HD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(UD,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(JD,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hF,"id","transformers.AutoModelForTableQuestionAnswering"),d(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hF,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ld,"class","relative group"),d(YD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eG,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uF,"id","transformers.AutoModelForImageClassification"),d(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uF,"href","#transformers.AutoModelForImageClassification"),d(Sd,"class","relative group"),d(oG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aG,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification"),d(nG,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(sG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(lG,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification"),d(iG,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(dG,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(cG,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(fG,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(mG,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(gG,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(hG,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(pG,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(_G,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(uG,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification"),d(bG,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification"),d(FG,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kF,"id","transformers.AutoModelForVision2Seq"),d(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kF,"href","#transformers.AutoModelForVision2Seq"),d(Pd,"class","relative group"),d(vG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EG,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BF,"id","transformers.AutoModelForAudioClassification"),d(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BF,"href","#transformers.AutoModelForAudioClassification"),d(qd,"class","relative group"),d(CG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(LG,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(xG,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(kG,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(SG,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(RG,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(BG,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(PG,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VF,"id","transformers.AutoModelForAudioFrameClassification"),d(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VF,"href","#transformers.AutoModelForAudioFrameClassification"),d(Dd,"class","relative group"),d($G,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(jG,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(DG,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(GG,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UF,"id","transformers.AutoModelForCTC"),d(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UF,"href","#transformers.AutoModelForCTC"),d(Vd,"class","relative group"),d(OG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(QG,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC"),d(WG,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC"),d(HG,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC"),d(UG,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(JG,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(YG,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(KG,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nv,"id","transformers.AutoModelForSpeechSeq2Seq"),d(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nv,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Qd,"class","relative group"),d(ZG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rO,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(tO,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dv,"id","transformers.AutoModelForAudioXVector"),d(dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dv,"href","#transformers.AutoModelForAudioXVector"),d(Ud,"class","relative group"),d(aO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lO,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(iO,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(dO,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(cO,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pv,"id","transformers.AutoModelForMaskedImageModeling"),d(pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pv,"href","#transformers.AutoModelForMaskedImageModeling"),d(Kd,"class","relative group"),d(fO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hO,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(pO,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(_O,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vv,"id","transformers.AutoModelForObjectDetection"),d(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vv,"href","#transformers.AutoModelForObjectDetection"),d(rc,"class","relative group"),d(uO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vO,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ev,"id","transformers.AutoModelForImageSegmentation"),d(Ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ev,"href","#transformers.AutoModelForImageSegmentation"),d(nc,"class","relative group"),d(TO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CO,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Av,"id","transformers.AutoModelForSemanticSegmentation"),d(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Av,"href","#transformers.AutoModelForSemanticSegmentation"),d(ic,"class","relative group"),d(wO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LO,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(xO,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(kO,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(SO,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rv,"id","transformers.AutoModelForInstanceSegmentation"),d(Rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rv,"href","#transformers.AutoModelForInstanceSegmentation"),d(fc,"class","relative group"),d(RO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($O,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($v,"id","transformers.TFAutoModel"),d($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($v,"href","#transformers.TFAutoModel"),d(hc,"class","relative group"),d(IO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jO,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel"),d(DO,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel"),d(GO,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel"),d(OO,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(VO,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(XO,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel"),d(zO,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel"),d(QO,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel"),d(WO,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel"),d(HO,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel"),d(UO,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel"),d(JO,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(YO,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(KO,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(ZO,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel"),d(eV,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(oV,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel"),d(rV,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(tV,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model"),d(aV,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel"),d(nV,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel"),d(sV,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(lV,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel"),d(iV,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel"),d(dV,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel"),d(cV,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel"),d(fV,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel"),d(mV,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(gV,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel"),d(hV,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model"),d(pV,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(_V,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel"),d(uV,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel"),d(bV,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel"),d(FV,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel"),d(vV,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(TV,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model"),d(MV,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel"),d(EV,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(CV,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel"),d(wV,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(AV,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(yV,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel"),d(LV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(xV,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wT,"id","transformers.TFAutoModelForPreTraining"),d(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wT,"href","#transformers.TFAutoModelForPreTraining"),d(uc,"class","relative group"),d(kV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BV,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(PV,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d($V,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining"),d(IV,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(qV,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(NV,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(jV,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(DV,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(GV,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(OV,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(VV,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(XV,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(zV,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(QV,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(WV,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(HV,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(UV,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(JV,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(YV,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(KV,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(ZV,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(eX,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(oX,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UT,"id","transformers.TFAutoModelForCausalLM"),d(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UT,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(rX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nX,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(sX,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(lX,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(iX,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(dX,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(cX,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(fX,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(mX,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(gX,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(hX,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(pX,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(_X,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(i7,"id","transformers.TFAutoModelForImageClassification"),d(i7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i7,"href","#transformers.TFAutoModelForImageClassification"),d(Ec,"class","relative group"),d(uX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vX,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(TX,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f7,"id","transformers.TFAutoModelForMaskedLM"),d(f7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f7,"href","#transformers.TFAutoModelForMaskedLM"),d(Ac,"class","relative group"),d(MX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wX,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(AX,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(yX,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(LX,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(xX,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(kX,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(SX,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(RX,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(BX,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(PX,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d($X,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(IX,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(qX,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(NX,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(jX,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(DX,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(GX,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(OX,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(VX,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(XX,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R7,"id","transformers.TFAutoModelForSeq2SeqLM"),d(R7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R7,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(xc,"class","relative group"),d(zX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HX,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(UX,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(JX,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(YX,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(KX,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(ZX,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel"),d(ez,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(oz,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(rz,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(tz,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V7,"id","transformers.TFAutoModelForSequenceClassification"),d(V7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V7,"href","#transformers.TFAutoModelForSequenceClassification"),d(Rc,"class","relative group"),d(az,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lz,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(iz,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(dz,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(cz,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(fz,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(mz,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(gz,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(hz,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(pz,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(_z,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(uz,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(bz,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(Fz,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(vz,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(Tz,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(Mz,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(Ez,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(Cz,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(wz,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(Az,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(yz,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(Lz,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(xz,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(kz,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(Sz,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(Rz,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_9,"id","transformers.TFAutoModelForMultipleChoice"),d(_9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_9,"href","#transformers.TFAutoModelForMultipleChoice"),d($c,"class","relative group"),d(Bz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($z,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Iz,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(qz,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(jz,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(Dz,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(Oz,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Vz,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(Xz,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(zz,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(Qz,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(Wz,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(Hz,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(Uz,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(Jz,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Yz,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(Kz,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(P9,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(P9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P9,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Nc,"class","relative group"),d(Zz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rQ,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(I9,"id","transformers.TFAutoModelForTokenClassification"),d(I9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I9,"href","#transformers.TFAutoModelForTokenClassification"),d(Gc,"class","relative group"),d(tQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sQ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(lQ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(iQ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(dQ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(cQ,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(fQ,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(mQ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(gQ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(hQ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(pQ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(_Q,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(uQ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(bQ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(FQ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(vQ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(TQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(MQ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(EQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(CQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(wQ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tM,"id","transformers.TFAutoModelForQuestionAnswering"),d(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tM,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Xc,"class","relative group"),d(AQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xQ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(kQ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(SQ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(RQ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(BQ,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(PQ,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d($Q,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(IQ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(qQ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(NQ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(jQ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(DQ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(GQ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(OQ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(VQ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(XQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(zQ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(QQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(WQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(HQ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CM,"id","transformers.TFAutoModelForVision2Seq"),d(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CM,"href","#transformers.TFAutoModelForVision2Seq"),d(Wc,"class","relative group"),d(UQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KQ,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Jc,"class","relative group"),d(ZQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rW,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LM,"id","transformers.FlaxAutoModel"),d(LM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LM,"href","#transformers.FlaxAutoModel"),d(Zc,"class","relative group"),d(tW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sW,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel"),d(lW,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel"),d(iW,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel"),d(dW,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel"),d(cW,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(fW,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(mW,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(gW,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel"),d(hW,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(pW,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel"),d(_W,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(uW,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(bW,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(FW,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model"),d(vW,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel"),d(TW,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel"),d(MW,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model"),d(EW,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(CW,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(wW,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(AW,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model"),d(yW,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(LW,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel"),d(xW,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(kW,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(SW,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(o4,"id","transformers.FlaxAutoModelForCausalLM"),d(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o4,"href","#transformers.FlaxAutoModelForCausalLM"),d(rf,"class","relative group"),d(RW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($W,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(IW,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(qW,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(NW,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(jW,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l4,"id","transformers.FlaxAutoModelForPreTraining"),d(l4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l4,"href","#transformers.FlaxAutoModelForPreTraining"),d(nf,"class","relative group"),d(DW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VW,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(XW,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(zW,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(QW,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(WW,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(HW,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(UW,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(JW,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(YW,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(KW,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(ZW,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(eH,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(oH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(T4,"id","transformers.FlaxAutoModelForMaskedLM"),d(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T4,"href","#transformers.FlaxAutoModelForMaskedLM"),d(df,"class","relative group"),d(rH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(sH,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(lH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(iH,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(dH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(cH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(fH,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(mH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(gH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(hH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(R4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(mf,"class","relative group"),d(pH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_H,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bH,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(FH,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(vH,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(TH,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(MH,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(EH,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(CH,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(wH,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(AH,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(yH,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V4,"id","transformers.FlaxAutoModelForSequenceClassification"),d(V4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V4,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(pf,"class","relative group"),d(LH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(RH,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(BH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(PH,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d($H,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(IH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(qH,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(NH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(jH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(DH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eE,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eE,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(bf,"class","relative group"),d(GH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(zH,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(QH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(WH,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(HH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(UH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(JH,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(YH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(KH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(ZH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fE,"id","transformers.FlaxAutoModelForTokenClassification"),d(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fE,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Tf,"class","relative group"),d(eU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tU,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(aU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(nU,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(sU,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(lU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(iU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(dU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(cU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vE,"id","transformers.FlaxAutoModelForMultipleChoice"),d(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vE,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Cf,"class","relative group"),d(fU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hU,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(pU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(_U,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(uU,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(bU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(FU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(vU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(TU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(yf,"class","relative group"),d(MU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SE,"id","transformers.FlaxAutoModelForImageClassification"),d(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SE,"href","#transformers.FlaxAutoModelForImageClassification"),d(kf,"class","relative group"),d(AU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xU,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(kU,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PE,"id","transformers.FlaxAutoModelForVision2Seq"),d(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(PE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Bf,"class","relative group"),d(SU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PU,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,u){e(document.head,Z),b(c,io,u),b(c,fe,u),e(fe,Ce),e(Ce,lo),g(pe,lo,null),e(fe,Ee),e(fe,Xo),e(Xo,Ni),b(c,Nf,u),b(c,fa,u),e(fa,ji),e(fa,Di),e(Di,I5),e(fa,jf),b(c,ke,u),b(c,co,u),e(co,Gi),e(co,On),e(On,q5),e(co,Vn),e(co,Xn),e(Xn,N5),e(co,Oi),e(co,zn),e(zn,j5),e(co,Vi),b(c,Df,u),g(Da,c,u),b(c,fo,u),b(c,ue,u),e(ue,x8),e(ue,Xi),e(Xi,k8),e(ue,S8),b(c,zo,u),b(c,Ga,u),e(Ga,R8),e(Ga,Gf),e(Gf,B8),e(Ga,Eqe),b(c,cBe,u),b(c,zi,u),e(zi,Of),e(Of,yY),g(D5,yY,null),e(zi,Cqe),e(zi,LY),e(LY,wqe),b(c,fBe,u),b(c,Qn,u),e(Qn,Aqe),e(Qn,xY),e(xY,yqe),e(Qn,Lqe),e(Qn,kY),e(kY,xqe),e(Qn,kqe),b(c,mBe,u),g(G5,c,u),b(c,gBe,u),b(c,P8,u),e(P8,Sqe),b(c,hBe,u),g(Vf,c,u),b(c,pBe,u),b(c,Qi,u),e(Qi,Xf),e(Xf,SY),g(O5,SY,null),e(Qi,Rqe),e(Qi,RY),e(RY,Bqe),b(c,_Be,u),b(c,Qo,u),g(V5,Qo,null),e(Qo,Pqe),e(Qo,X5),e(X5,$qe),e(X5,$8),e($8,Iqe),e(X5,qqe),e(Qo,Nqe),e(Qo,z5),e(z5,jqe),e(z5,BY),e(BY,Dqe),e(z5,Gqe),e(Qo,Oqe),e(Qo,mo),g(Q5,mo,null),e(mo,Vqe),e(mo,PY),e(PY,Xqe),e(mo,zqe),e(mo,Wi),e(Wi,Qqe),e(Wi,$Y),e($Y,Wqe),e(Wi,Hqe),e(Wi,IY),e(IY,Uqe),e(Wi,Jqe),e(mo,Yqe),e(mo,F),e(F,zf),e(zf,qY),e(qY,Kqe),e(zf,Zqe),e(zf,I8),e(I8,eNe),e(zf,oNe),e(F,rNe),e(F,Qf),e(Qf,NY),e(NY,tNe),e(Qf,aNe),e(Qf,q8),e(q8,nNe),e(Qf,sNe),e(F,lNe),e(F,Wf),e(Wf,jY),e(jY,iNe),e(Wf,dNe),e(Wf,N8),e(N8,cNe),e(Wf,fNe),e(F,mNe),e(F,Hf),e(Hf,DY),e(DY,gNe),e(Hf,hNe),e(Hf,j8),e(j8,pNe),e(Hf,_Ne),e(F,uNe),e(F,Uf),e(Uf,GY),e(GY,bNe),e(Uf,FNe),e(Uf,D8),e(D8,vNe),e(Uf,TNe),e(F,MNe),e(F,Jf),e(Jf,OY),e(OY,ENe),e(Jf,CNe),e(Jf,G8),e(G8,wNe),e(Jf,ANe),e(F,yNe),e(F,Yf),e(Yf,VY),e(VY,LNe),e(Yf,xNe),e(Yf,O8),e(O8,kNe),e(Yf,SNe),e(F,RNe),e(F,Kf),e(Kf,XY),e(XY,BNe),e(Kf,PNe),e(Kf,V8),e(V8,$Ne),e(Kf,INe),e(F,qNe),e(F,Zf),e(Zf,zY),e(zY,NNe),e(Zf,jNe),e(Zf,X8),e(X8,DNe),e(Zf,GNe),e(F,ONe),e(F,em),e(em,QY),e(QY,VNe),e(em,XNe),e(em,z8),e(z8,zNe),e(em,QNe),e(F,WNe),e(F,om),e(om,WY),e(WY,HNe),e(om,UNe),e(om,Q8),e(Q8,JNe),e(om,YNe),e(F,KNe),e(F,rm),e(rm,HY),e(HY,ZNe),e(rm,eje),e(rm,W8),e(W8,oje),e(rm,rje),e(F,tje),e(F,tm),e(tm,UY),e(UY,aje),e(tm,nje),e(tm,H8),e(H8,sje),e(tm,lje),e(F,ije),e(F,am),e(am,JY),e(JY,dje),e(am,cje),e(am,U8),e(U8,fje),e(am,mje),e(F,gje),e(F,nm),e(nm,YY),e(YY,hje),e(nm,pje),e(nm,J8),e(J8,_je),e(nm,uje),e(F,bje),e(F,sm),e(sm,KY),e(KY,Fje),e(sm,vje),e(sm,Y8),e(Y8,Tje),e(sm,Mje),e(F,Eje),e(F,lm),e(lm,ZY),e(ZY,Cje),e(lm,wje),e(lm,K8),e(K8,Aje),e(lm,yje),e(F,Lje),e(F,im),e(im,eK),e(eK,xje),e(im,kje),e(im,Z8),e(Z8,Sje),e(im,Rje),e(F,Bje),e(F,dm),e(dm,oK),e(oK,Pje),e(dm,$je),e(dm,ex),e(ex,Ije),e(dm,qje),e(F,Nje),e(F,cm),e(cm,rK),e(rK,jje),e(cm,Dje),e(cm,ox),e(ox,Gje),e(cm,Oje),e(F,Vje),e(F,fm),e(fm,tK),e(tK,Xje),e(fm,zje),e(fm,rx),e(rx,Qje),e(fm,Wje),e(F,Hje),e(F,mm),e(mm,aK),e(aK,Uje),e(mm,Jje),e(mm,tx),e(tx,Yje),e(mm,Kje),e(F,Zje),e(F,gm),e(gm,nK),e(nK,eDe),e(gm,oDe),e(gm,ax),e(ax,rDe),e(gm,tDe),e(F,aDe),e(F,hm),e(hm,sK),e(sK,nDe),e(hm,sDe),e(hm,nx),e(nx,lDe),e(hm,iDe),e(F,dDe),e(F,pm),e(pm,lK),e(lK,cDe),e(pm,fDe),e(pm,sx),e(sx,mDe),e(pm,gDe),e(F,hDe),e(F,_m),e(_m,iK),e(iK,pDe),e(_m,_De),e(_m,lx),e(lx,uDe),e(_m,bDe),e(F,FDe),e(F,um),e(um,dK),e(dK,vDe),e(um,TDe),e(um,ix),e(ix,MDe),e(um,EDe),e(F,CDe),e(F,bm),e(bm,cK),e(cK,wDe),e(bm,ADe),e(bm,dx),e(dx,yDe),e(bm,LDe),e(F,xDe),e(F,Fm),e(Fm,fK),e(fK,kDe),e(Fm,SDe),e(Fm,cx),e(cx,RDe),e(Fm,BDe),e(F,PDe),e(F,vm),e(vm,mK),e(mK,$De),e(vm,IDe),e(vm,fx),e(fx,qDe),e(vm,NDe),e(F,jDe),e(F,Tm),e(Tm,gK),e(gK,DDe),e(Tm,GDe),e(Tm,mx),e(mx,ODe),e(Tm,VDe),e(F,XDe),e(F,Mm),e(Mm,hK),e(hK,zDe),e(Mm,QDe),e(Mm,gx),e(gx,WDe),e(Mm,HDe),e(F,UDe),e(F,Em),e(Em,pK),e(pK,JDe),e(Em,YDe),e(Em,hx),e(hx,KDe),e(Em,ZDe),e(F,eGe),e(F,Cm),e(Cm,_K),e(_K,oGe),e(Cm,rGe),e(Cm,px),e(px,tGe),e(Cm,aGe),e(F,nGe),e(F,wm),e(wm,uK),e(uK,sGe),e(wm,lGe),e(wm,_x),e(_x,iGe),e(wm,dGe),e(F,cGe),e(F,Am),e(Am,bK),e(bK,fGe),e(Am,mGe),e(Am,ux),e(ux,gGe),e(Am,hGe),e(F,pGe),e(F,ym),e(ym,FK),e(FK,_Ge),e(ym,uGe),e(ym,bx),e(bx,bGe),e(ym,FGe),e(F,vGe),e(F,Lm),e(Lm,vK),e(vK,TGe),e(Lm,MGe),e(Lm,Fx),e(Fx,EGe),e(Lm,CGe),e(F,wGe),e(F,xm),e(xm,TK),e(TK,AGe),e(xm,yGe),e(xm,vx),e(vx,LGe),e(xm,xGe),e(F,kGe),e(F,km),e(km,MK),e(MK,SGe),e(km,RGe),e(km,Tx),e(Tx,BGe),e(km,PGe),e(F,$Ge),e(F,Sm),e(Sm,EK),e(EK,IGe),e(Sm,qGe),e(Sm,Mx),e(Mx,NGe),e(Sm,jGe),e(F,DGe),e(F,Rm),e(Rm,CK),e(CK,GGe),e(Rm,OGe),e(Rm,Ex),e(Ex,VGe),e(Rm,XGe),e(F,zGe),e(F,Bm),e(Bm,wK),e(wK,QGe),e(Bm,WGe),e(Bm,Cx),e(Cx,HGe),e(Bm,UGe),e(F,JGe),e(F,Pm),e(Pm,AK),e(AK,YGe),e(Pm,KGe),e(Pm,wx),e(wx,ZGe),e(Pm,eOe),e(F,oOe),e(F,$m),e($m,yK),e(yK,rOe),e($m,tOe),e($m,Ax),e(Ax,aOe),e($m,nOe),e(F,sOe),e(F,Im),e(Im,LK),e(LK,lOe),e(Im,iOe),e(Im,yx),e(yx,dOe),e(Im,cOe),e(F,fOe),e(F,qm),e(qm,xK),e(xK,mOe),e(qm,gOe),e(qm,Lx),e(Lx,hOe),e(qm,pOe),e(F,_Oe),e(F,Nm),e(Nm,kK),e(kK,uOe),e(Nm,bOe),e(Nm,xx),e(xx,FOe),e(Nm,vOe),e(F,TOe),e(F,jm),e(jm,SK),e(SK,MOe),e(jm,EOe),e(jm,kx),e(kx,COe),e(jm,wOe),e(F,AOe),e(F,Dm),e(Dm,RK),e(RK,yOe),e(Dm,LOe),e(Dm,Sx),e(Sx,xOe),e(Dm,kOe),e(F,SOe),e(F,Gm),e(Gm,BK),e(BK,ROe),e(Gm,BOe),e(Gm,Rx),e(Rx,POe),e(Gm,$Oe),e(F,IOe),e(F,Om),e(Om,PK),e(PK,qOe),e(Om,NOe),e(Om,Bx),e(Bx,jOe),e(Om,DOe),e(F,GOe),e(F,Vm),e(Vm,$K),e($K,OOe),e(Vm,VOe),e(Vm,Px),e(Px,XOe),e(Vm,zOe),e(F,QOe),e(F,Xm),e(Xm,IK),e(IK,WOe),e(Xm,HOe),e(Xm,$x),e($x,UOe),e(Xm,JOe),e(F,YOe),e(F,zm),e(zm,qK),e(qK,KOe),e(zm,ZOe),e(zm,Ix),e(Ix,eVe),e(zm,oVe),e(F,rVe),e(F,Qm),e(Qm,NK),e(NK,tVe),e(Qm,aVe),e(Qm,qx),e(qx,nVe),e(Qm,sVe),e(F,lVe),e(F,Wm),e(Wm,jK),e(jK,iVe),e(Wm,dVe),e(Wm,Nx),e(Nx,cVe),e(Wm,fVe),e(F,mVe),e(F,Hm),e(Hm,DK),e(DK,gVe),e(Hm,hVe),e(Hm,jx),e(jx,pVe),e(Hm,_Ve),e(F,uVe),e(F,Um),e(Um,GK),e(GK,bVe),e(Um,FVe),e(Um,Dx),e(Dx,vVe),e(Um,TVe),e(F,MVe),e(F,Jm),e(Jm,OK),e(OK,EVe),e(Jm,CVe),e(Jm,Gx),e(Gx,wVe),e(Jm,AVe),e(F,yVe),e(F,Ym),e(Ym,VK),e(VK,LVe),e(Ym,xVe),e(Ym,Ox),e(Ox,kVe),e(Ym,SVe),e(F,RVe),e(F,Km),e(Km,XK),e(XK,BVe),e(Km,PVe),e(Km,Vx),e(Vx,$Ve),e(Km,IVe),e(F,qVe),e(F,Zm),e(Zm,zK),e(zK,NVe),e(Zm,jVe),e(Zm,Xx),e(Xx,DVe),e(Zm,GVe),e(F,OVe),e(F,eg),e(eg,QK),e(QK,VVe),e(eg,XVe),e(eg,zx),e(zx,zVe),e(eg,QVe),e(F,WVe),e(F,og),e(og,WK),e(WK,HVe),e(og,UVe),e(og,Qx),e(Qx,JVe),e(og,YVe),e(F,KVe),e(F,rg),e(rg,HK),e(HK,ZVe),e(rg,eXe),e(rg,Wx),e(Wx,oXe),e(rg,rXe),e(F,tXe),e(F,tg),e(tg,UK),e(UK,aXe),e(tg,nXe),e(tg,Hx),e(Hx,sXe),e(tg,lXe),e(F,iXe),e(F,ag),e(ag,JK),e(JK,dXe),e(ag,cXe),e(ag,Ux),e(Ux,fXe),e(ag,mXe),e(F,gXe),e(F,ng),e(ng,YK),e(YK,hXe),e(ng,pXe),e(ng,Jx),e(Jx,_Xe),e(ng,uXe),e(F,bXe),e(F,sg),e(sg,KK),e(KK,FXe),e(sg,vXe),e(sg,Yx),e(Yx,TXe),e(sg,MXe),e(F,EXe),e(F,lg),e(lg,ZK),e(ZK,CXe),e(lg,wXe),e(lg,Kx),e(Kx,AXe),e(lg,yXe),e(F,LXe),e(F,ig),e(ig,eZ),e(eZ,xXe),e(ig,kXe),e(ig,Zx),e(Zx,SXe),e(ig,RXe),e(F,BXe),e(F,dg),e(dg,oZ),e(oZ,PXe),e(dg,$Xe),e(dg,ek),e(ek,IXe),e(dg,qXe),e(F,NXe),e(F,cg),e(cg,rZ),e(rZ,jXe),e(cg,DXe),e(cg,ok),e(ok,GXe),e(cg,OXe),e(F,VXe),e(F,fg),e(fg,tZ),e(tZ,XXe),e(fg,zXe),e(fg,rk),e(rk,QXe),e(fg,WXe),e(F,HXe),e(F,mg),e(mg,aZ),e(aZ,UXe),e(mg,JXe),e(mg,tk),e(tk,YXe),e(mg,KXe),e(F,ZXe),e(F,gg),e(gg,nZ),e(nZ,eze),e(gg,oze),e(gg,ak),e(ak,rze),e(gg,tze),e(F,aze),e(F,hg),e(hg,sZ),e(sZ,nze),e(hg,sze),e(hg,nk),e(nk,lze),e(hg,ize),e(F,dze),e(F,pg),e(pg,lZ),e(lZ,cze),e(pg,fze),e(pg,sk),e(sk,mze),e(pg,gze),e(F,hze),e(F,_g),e(_g,iZ),e(iZ,pze),e(_g,_ze),e(_g,lk),e(lk,uze),e(_g,bze),e(F,Fze),e(F,ug),e(ug,dZ),e(dZ,vze),e(ug,Tze),e(ug,ik),e(ik,Mze),e(ug,Eze),e(F,Cze),e(F,bg),e(bg,cZ),e(cZ,wze),e(bg,Aze),e(bg,dk),e(dk,yze),e(bg,Lze),e(F,xze),e(F,Fg),e(Fg,fZ),e(fZ,kze),e(Fg,Sze),e(Fg,ck),e(ck,Rze),e(Fg,Bze),e(F,Pze),e(F,vg),e(vg,mZ),e(mZ,$ze),e(vg,Ize),e(vg,fk),e(fk,qze),e(vg,Nze),e(F,jze),e(F,Tg),e(Tg,gZ),e(gZ,Dze),e(Tg,Gze),e(Tg,mk),e(mk,Oze),e(Tg,Vze),e(F,Xze),e(F,Mg),e(Mg,hZ),e(hZ,zze),e(Mg,Qze),e(Mg,gk),e(gk,Wze),e(Mg,Hze),e(F,Uze),e(F,Eg),e(Eg,pZ),e(pZ,Jze),e(Eg,Yze),e(Eg,hk),e(hk,Kze),e(Eg,Zze),e(F,eQe),e(F,Cg),e(Cg,_Z),e(_Z,oQe),e(Cg,rQe),e(Cg,pk),e(pk,tQe),e(Cg,aQe),e(F,nQe),e(F,wg),e(wg,uZ),e(uZ,sQe),e(wg,lQe),e(wg,_k),e(_k,iQe),e(wg,dQe),e(F,cQe),e(F,Ag),e(Ag,bZ),e(bZ,fQe),e(Ag,mQe),e(Ag,uk),e(uk,gQe),e(Ag,hQe),e(F,pQe),e(F,yg),e(yg,FZ),e(FZ,_Qe),e(yg,uQe),e(yg,bk),e(bk,bQe),e(yg,FQe),e(F,vQe),e(F,Lg),e(Lg,vZ),e(vZ,TQe),e(Lg,MQe),e(Lg,Fk),e(Fk,EQe),e(Lg,CQe),e(F,wQe),e(F,xg),e(xg,TZ),e(TZ,AQe),e(xg,yQe),e(xg,vk),e(vk,LQe),e(xg,xQe),e(F,kQe),e(F,kg),e(kg,MZ),e(MZ,SQe),e(kg,RQe),e(kg,Tk),e(Tk,BQe),e(kg,PQe),e(F,$Qe),e(F,Sg),e(Sg,EZ),e(EZ,IQe),e(Sg,qQe),e(Sg,Mk),e(Mk,NQe),e(Sg,jQe),e(F,DQe),e(F,Rg),e(Rg,CZ),e(CZ,GQe),e(Rg,OQe),e(Rg,Ek),e(Ek,VQe),e(Rg,XQe),e(F,zQe),e(F,Bg),e(Bg,wZ),e(wZ,QQe),e(Bg,WQe),e(Bg,Ck),e(Ck,HQe),e(Bg,UQe),e(F,JQe),e(F,Pg),e(Pg,AZ),e(AZ,YQe),e(Pg,KQe),e(Pg,wk),e(wk,ZQe),e(Pg,eWe),e(F,oWe),e(F,$g),e($g,yZ),e(yZ,rWe),e($g,tWe),e($g,Ak),e(Ak,aWe),e($g,nWe),e(F,sWe),e(F,Ig),e(Ig,LZ),e(LZ,lWe),e(Ig,iWe),e(Ig,yk),e(yk,dWe),e(Ig,cWe),e(F,fWe),e(F,qg),e(qg,xZ),e(xZ,mWe),e(qg,gWe),e(qg,Lk),e(Lk,hWe),e(qg,pWe),e(F,_We),e(F,Ng),e(Ng,kZ),e(kZ,uWe),e(Ng,bWe),e(Ng,xk),e(xk,FWe),e(Ng,vWe),e(F,TWe),e(F,jg),e(jg,SZ),e(SZ,MWe),e(jg,EWe),e(jg,kk),e(kk,CWe),e(jg,wWe),e(mo,AWe),e(mo,RZ),e(RZ,yWe),e(mo,LWe),g(W5,mo,null),e(Qo,xWe),e(Qo,Dg),g(H5,Dg,null),e(Dg,kWe),e(Dg,BZ),e(BZ,SWe),b(c,uBe,u),b(c,Hi,u),e(Hi,Gg),e(Gg,PZ),g(U5,PZ,null),e(Hi,RWe),e(Hi,$Z),e($Z,BWe),b(c,bBe,u),b(c,Wo,u),g(J5,Wo,null),e(Wo,PWe),e(Wo,Y5),e(Y5,$We),e(Y5,Sk),e(Sk,IWe),e(Y5,qWe),e(Wo,NWe),e(Wo,K5),e(K5,jWe),e(K5,IZ),e(IZ,DWe),e(K5,GWe),e(Wo,OWe),e(Wo,go),g(Z5,go,null),e(go,VWe),e(go,qZ),e(qZ,XWe),e(go,zWe),e(go,Oa),e(Oa,QWe),e(Oa,NZ),e(NZ,WWe),e(Oa,HWe),e(Oa,jZ),e(jZ,UWe),e(Oa,JWe),e(Oa,DZ),e(DZ,YWe),e(Oa,KWe),e(go,ZWe),e(go,E),e(E,Wn),e(Wn,GZ),e(GZ,eHe),e(Wn,oHe),e(Wn,Rk),e(Rk,rHe),e(Wn,tHe),e(Wn,Bk),e(Bk,aHe),e(Wn,nHe),e(E,sHe),e(E,Hn),e(Hn,OZ),e(OZ,lHe),e(Hn,iHe),e(Hn,Pk),e(Pk,dHe),e(Hn,cHe),e(Hn,$k),e($k,fHe),e(Hn,mHe),e(E,gHe),e(E,Un),e(Un,VZ),e(VZ,hHe),e(Un,pHe),e(Un,Ik),e(Ik,_He),e(Un,uHe),e(Un,qk),e(qk,bHe),e(Un,FHe),e(E,vHe),e(E,Og),e(Og,XZ),e(XZ,THe),e(Og,MHe),e(Og,Nk),e(Nk,EHe),e(Og,CHe),e(E,wHe),e(E,Jn),e(Jn,zZ),e(zZ,AHe),e(Jn,yHe),e(Jn,jk),e(jk,LHe),e(Jn,xHe),e(Jn,Dk),e(Dk,kHe),e(Jn,SHe),e(E,RHe),e(E,Vg),e(Vg,QZ),e(QZ,BHe),e(Vg,PHe),e(Vg,Gk),e(Gk,$He),e(Vg,IHe),e(E,qHe),e(E,Xg),e(Xg,WZ),e(WZ,NHe),e(Xg,jHe),e(Xg,Ok),e(Ok,DHe),e(Xg,GHe),e(E,OHe),e(E,zg),e(zg,HZ),e(HZ,VHe),e(zg,XHe),e(zg,Vk),e(Vk,zHe),e(zg,QHe),e(E,WHe),e(E,Yn),e(Yn,UZ),e(UZ,HHe),e(Yn,UHe),e(Yn,Xk),e(Xk,JHe),e(Yn,YHe),e(Yn,zk),e(zk,KHe),e(Yn,ZHe),e(E,eUe),e(E,Kn),e(Kn,JZ),e(JZ,oUe),e(Kn,rUe),e(Kn,Qk),e(Qk,tUe),e(Kn,aUe),e(Kn,Wk),e(Wk,nUe),e(Kn,sUe),e(E,lUe),e(E,Zn),e(Zn,YZ),e(YZ,iUe),e(Zn,dUe),e(Zn,Hk),e(Hk,cUe),e(Zn,fUe),e(Zn,Uk),e(Uk,mUe),e(Zn,gUe),e(E,hUe),e(E,Qg),e(Qg,KZ),e(KZ,pUe),e(Qg,_Ue),e(Qg,Jk),e(Jk,uUe),e(Qg,bUe),e(E,FUe),e(E,Wg),e(Wg,ZZ),e(ZZ,vUe),e(Wg,TUe),e(Wg,Yk),e(Yk,MUe),e(Wg,EUe),e(E,CUe),e(E,es),e(es,eee),e(eee,wUe),e(es,AUe),e(es,Kk),e(Kk,yUe),e(es,LUe),e(es,Zk),e(Zk,xUe),e(es,kUe),e(E,SUe),e(E,Hg),e(Hg,oee),e(oee,RUe),e(Hg,BUe),e(Hg,eS),e(eS,PUe),e(Hg,$Ue),e(E,IUe),e(E,os),e(os,ree),e(ree,qUe),e(os,NUe),e(os,oS),e(oS,jUe),e(os,DUe),e(os,rS),e(rS,GUe),e(os,OUe),e(E,VUe),e(E,rs),e(rs,tee),e(tee,XUe),e(rs,zUe),e(rs,tS),e(tS,QUe),e(rs,WUe),e(rs,aS),e(aS,HUe),e(rs,UUe),e(E,JUe),e(E,ts),e(ts,aee),e(aee,YUe),e(ts,KUe),e(ts,nS),e(nS,ZUe),e(ts,eJe),e(ts,nee),e(nee,oJe),e(ts,rJe),e(E,tJe),e(E,Ug),e(Ug,see),e(see,aJe),e(Ug,nJe),e(Ug,sS),e(sS,sJe),e(Ug,lJe),e(E,iJe),e(E,as),e(as,lee),e(lee,dJe),e(as,cJe),e(as,lS),e(lS,fJe),e(as,mJe),e(as,iS),e(iS,gJe),e(as,hJe),e(E,pJe),e(E,Jg),e(Jg,iee),e(iee,_Je),e(Jg,uJe),e(Jg,dS),e(dS,bJe),e(Jg,FJe),e(E,vJe),e(E,ns),e(ns,dee),e(dee,TJe),e(ns,MJe),e(ns,cS),e(cS,EJe),e(ns,CJe),e(ns,fS),e(fS,wJe),e(ns,AJe),e(E,yJe),e(E,ss),e(ss,cee),e(cee,LJe),e(ss,xJe),e(ss,mS),e(mS,kJe),e(ss,SJe),e(ss,gS),e(gS,RJe),e(ss,BJe),e(E,PJe),e(E,ls),e(ls,fee),e(fee,$Je),e(ls,IJe),e(ls,hS),e(hS,qJe),e(ls,NJe),e(ls,pS),e(pS,jJe),e(ls,DJe),e(E,GJe),e(E,Yg),e(Yg,mee),e(mee,OJe),e(Yg,VJe),e(Yg,_S),e(_S,XJe),e(Yg,zJe),e(E,QJe),e(E,is),e(is,gee),e(gee,WJe),e(is,HJe),e(is,uS),e(uS,UJe),e(is,JJe),e(is,bS),e(bS,YJe),e(is,KJe),e(E,ZJe),e(E,Kg),e(Kg,hee),e(hee,eYe),e(Kg,oYe),e(Kg,FS),e(FS,rYe),e(Kg,tYe),e(E,aYe),e(E,ds),e(ds,pee),e(pee,nYe),e(ds,sYe),e(ds,vS),e(vS,lYe),e(ds,iYe),e(ds,TS),e(TS,dYe),e(ds,cYe),e(E,fYe),e(E,cs),e(cs,_ee),e(_ee,mYe),e(cs,gYe),e(cs,MS),e(MS,hYe),e(cs,pYe),e(cs,ES),e(ES,_Ye),e(cs,uYe),e(E,bYe),e(E,fs),e(fs,uee),e(uee,FYe),e(fs,vYe),e(fs,CS),e(CS,TYe),e(fs,MYe),e(fs,wS),e(wS,EYe),e(fs,CYe),e(E,wYe),e(E,ms),e(ms,bee),e(bee,AYe),e(ms,yYe),e(ms,AS),e(AS,LYe),e(ms,xYe),e(ms,yS),e(yS,kYe),e(ms,SYe),e(E,RYe),e(E,Zg),e(Zg,Fee),e(Fee,BYe),e(Zg,PYe),e(Zg,LS),e(LS,$Ye),e(Zg,IYe),e(E,qYe),e(E,gs),e(gs,vee),e(vee,NYe),e(gs,jYe),e(gs,xS),e(xS,DYe),e(gs,GYe),e(gs,kS),e(kS,OYe),e(gs,VYe),e(E,XYe),e(E,hs),e(hs,Tee),e(Tee,zYe),e(hs,QYe),e(hs,SS),e(SS,WYe),e(hs,HYe),e(hs,RS),e(RS,UYe),e(hs,JYe),e(E,YYe),e(E,ps),e(ps,Mee),e(Mee,KYe),e(ps,ZYe),e(ps,BS),e(BS,eKe),e(ps,oKe),e(ps,PS),e(PS,rKe),e(ps,tKe),e(E,aKe),e(E,_s),e(_s,Eee),e(Eee,nKe),e(_s,sKe),e(_s,$S),e($S,lKe),e(_s,iKe),e(_s,IS),e(IS,dKe),e(_s,cKe),e(E,fKe),e(E,us),e(us,Cee),e(Cee,mKe),e(us,gKe),e(us,qS),e(qS,hKe),e(us,pKe),e(us,NS),e(NS,_Ke),e(us,uKe),e(E,bKe),e(E,bs),e(bs,wee),e(wee,FKe),e(bs,vKe),e(bs,jS),e(jS,TKe),e(bs,MKe),e(bs,DS),e(DS,EKe),e(bs,CKe),e(E,wKe),e(E,Fs),e(Fs,Aee),e(Aee,AKe),e(Fs,yKe),e(Fs,GS),e(GS,LKe),e(Fs,xKe),e(Fs,OS),e(OS,kKe),e(Fs,SKe),e(E,RKe),e(E,eh),e(eh,yee),e(yee,BKe),e(eh,PKe),e(eh,VS),e(VS,$Ke),e(eh,IKe),e(E,qKe),e(E,vs),e(vs,Lee),e(Lee,NKe),e(vs,jKe),e(vs,XS),e(XS,DKe),e(vs,GKe),e(vs,zS),e(zS,OKe),e(vs,VKe),e(E,XKe),e(E,oh),e(oh,xee),e(xee,zKe),e(oh,QKe),e(oh,QS),e(QS,WKe),e(oh,HKe),e(E,UKe),e(E,rh),e(rh,kee),e(kee,JKe),e(rh,YKe),e(rh,WS),e(WS,KKe),e(rh,ZKe),e(E,eZe),e(E,Ts),e(Ts,See),e(See,oZe),e(Ts,rZe),e(Ts,HS),e(HS,tZe),e(Ts,aZe),e(Ts,US),e(US,nZe),e(Ts,sZe),e(E,lZe),e(E,Ms),e(Ms,Ree),e(Ree,iZe),e(Ms,dZe),e(Ms,JS),e(JS,cZe),e(Ms,fZe),e(Ms,YS),e(YS,mZe),e(Ms,gZe),e(E,hZe),e(E,th),e(th,Bee),e(Bee,pZe),e(th,_Ze),e(th,KS),e(KS,uZe),e(th,bZe),e(E,FZe),e(E,Es),e(Es,Pee),e(Pee,vZe),e(Es,TZe),e(Es,ZS),e(ZS,MZe),e(Es,EZe),e(Es,eR),e(eR,CZe),e(Es,wZe),e(E,AZe),e(E,Cs),e(Cs,$ee),e($ee,yZe),e(Cs,LZe),e(Cs,oR),e(oR,xZe),e(Cs,kZe),e(Cs,rR),e(rR,SZe),e(Cs,RZe),e(E,BZe),e(E,ws),e(ws,Iee),e(Iee,PZe),e(ws,$Ze),e(ws,tR),e(tR,IZe),e(ws,qZe),e(ws,aR),e(aR,NZe),e(ws,jZe),e(E,DZe),e(E,As),e(As,qee),e(qee,GZe),e(As,OZe),e(As,nR),e(nR,VZe),e(As,XZe),e(As,sR),e(sR,zZe),e(As,QZe),e(E,WZe),e(E,ys),e(ys,Nee),e(Nee,HZe),e(ys,UZe),e(ys,lR),e(lR,JZe),e(ys,YZe),e(ys,iR),e(iR,KZe),e(ys,ZZe),e(E,eeo),e(E,ah),e(ah,jee),e(jee,oeo),e(ah,reo),e(ah,dR),e(dR,teo),e(ah,aeo),e(E,neo),e(E,nh),e(nh,Dee),e(Dee,seo),e(nh,leo),e(nh,cR),e(cR,ieo),e(nh,deo),e(E,ceo),e(E,sh),e(sh,Gee),e(Gee,feo),e(sh,meo),e(sh,fR),e(fR,geo),e(sh,heo),e(E,peo),e(E,lh),e(lh,Oee),e(Oee,_eo),e(lh,ueo),e(lh,mR),e(mR,beo),e(lh,Feo),e(E,veo),e(E,Ls),e(Ls,Vee),e(Vee,Teo),e(Ls,Meo),e(Ls,gR),e(gR,Eeo),e(Ls,Ceo),e(Ls,hR),e(hR,weo),e(Ls,Aeo),e(E,yeo),e(E,ih),e(ih,Xee),e(Xee,Leo),e(ih,xeo),e(ih,pR),e(pR,keo),e(ih,Seo),e(E,Reo),e(E,xs),e(xs,zee),e(zee,Beo),e(xs,Peo),e(xs,_R),e(_R,$eo),e(xs,Ieo),e(xs,uR),e(uR,qeo),e(xs,Neo),e(E,jeo),e(E,ks),e(ks,Qee),e(Qee,Deo),e(ks,Geo),e(ks,bR),e(bR,Oeo),e(ks,Veo),e(ks,FR),e(FR,Xeo),e(ks,zeo),e(E,Qeo),e(E,Ss),e(Ss,Wee),e(Wee,Weo),e(Ss,Heo),e(Ss,vR),e(vR,Ueo),e(Ss,Jeo),e(Ss,TR),e(TR,Yeo),e(Ss,Keo),e(E,Zeo),e(E,Rs),e(Rs,Hee),e(Hee,eoo),e(Rs,ooo),e(Rs,MR),e(MR,roo),e(Rs,too),e(Rs,ER),e(ER,aoo),e(Rs,noo),e(E,soo),e(E,Bs),e(Bs,Uee),e(Uee,loo),e(Bs,ioo),e(Bs,CR),e(CR,doo),e(Bs,coo),e(Bs,wR),e(wR,foo),e(Bs,moo),e(E,goo),e(E,Ps),e(Ps,Jee),e(Jee,hoo),e(Ps,poo),e(Ps,AR),e(AR,_oo),e(Ps,uoo),e(Ps,yR),e(yR,boo),e(Ps,Foo),e(E,voo),e(E,dh),e(dh,Yee),e(Yee,Too),e(dh,Moo),e(dh,LR),e(LR,Eoo),e(dh,Coo),e(E,woo),e(E,ch),e(ch,Kee),e(Kee,Aoo),e(ch,yoo),e(ch,xR),e(xR,Loo),e(ch,xoo),e(E,koo),e(E,$s),e($s,Zee),e(Zee,Soo),e($s,Roo),e($s,kR),e(kR,Boo),e($s,Poo),e($s,SR),e(SR,$oo),e($s,Ioo),e(E,qoo),e(E,Is),e(Is,eoe),e(eoe,Noo),e(Is,joo),e(Is,RR),e(RR,Doo),e(Is,Goo),e(Is,BR),e(BR,Ooo),e(Is,Voo),e(E,Xoo),e(E,qs),e(qs,ooe),e(ooe,zoo),e(qs,Qoo),e(qs,PR),e(PR,Woo),e(qs,Hoo),e(qs,$R),e($R,Uoo),e(qs,Joo),e(E,Yoo),e(E,fh),e(fh,roe),e(roe,Koo),e(fh,Zoo),e(fh,IR),e(IR,ero),e(fh,oro),e(E,rro),e(E,mh),e(mh,toe),e(toe,tro),e(mh,aro),e(mh,qR),e(qR,nro),e(mh,sro),e(E,lro),e(E,gh),e(gh,aoe),e(aoe,iro),e(gh,dro),e(gh,NR),e(NR,cro),e(gh,fro),e(E,mro),e(E,hh),e(hh,noe),e(noe,gro),e(hh,hro),e(hh,jR),e(jR,pro),e(hh,_ro),e(E,uro),e(E,ph),e(ph,soe),e(soe,bro),e(ph,Fro),e(ph,DR),e(DR,vro),e(ph,Tro),e(E,Mro),e(E,Ns),e(Ns,loe),e(loe,Ero),e(Ns,Cro),e(Ns,GR),e(GR,wro),e(Ns,Aro),e(Ns,OR),e(OR,yro),e(Ns,Lro),e(E,xro),e(E,_h),e(_h,ioe),e(ioe,kro),e(_h,Sro),e(_h,VR),e(VR,Rro),e(_h,Bro),e(E,Pro),e(E,uh),e(uh,doe),e(doe,$ro),e(uh,Iro),e(uh,XR),e(XR,qro),e(uh,Nro),e(E,jro),e(E,js),e(js,coe),e(coe,Dro),e(js,Gro),e(js,zR),e(zR,Oro),e(js,Vro),e(js,QR),e(QR,Xro),e(js,zro),e(E,Qro),e(E,Ds),e(Ds,foe),e(foe,Wro),e(Ds,Hro),e(Ds,WR),e(WR,Uro),e(Ds,Jro),e(Ds,HR),e(HR,Yro),e(Ds,Kro),e(go,Zro),e(go,moe),e(moe,eto),e(go,oto),g(e3,go,null),e(Wo,rto),e(Wo,bh),g(o3,bh,null),e(bh,tto),e(bh,goe),e(goe,ato),b(c,FBe,u),b(c,Ui,u),e(Ui,Fh),e(Fh,hoe),g(r3,hoe,null),e(Ui,nto),e(Ui,poe),e(poe,sto),b(c,vBe,u),b(c,Ho,u),g(t3,Ho,null),e(Ho,lto),e(Ho,a3),e(a3,ito),e(a3,UR),e(UR,dto),e(a3,cto),e(Ho,fto),e(Ho,n3),e(n3,mto),e(n3,_oe),e(_oe,gto),e(n3,hto),e(Ho,pto),e(Ho,Ie),g(s3,Ie,null),e(Ie,_to),e(Ie,uoe),e(uoe,uto),e(Ie,bto),e(Ie,Va),e(Va,Fto),e(Va,boe),e(boe,vto),e(Va,Tto),e(Va,Foe),e(Foe,Mto),e(Va,Eto),e(Va,voe),e(voe,Cto),e(Va,wto),e(Ie,Ato),e(Ie,ee),e(ee,vh),e(vh,Toe),e(Toe,yto),e(vh,Lto),e(vh,JR),e(JR,xto),e(vh,kto),e(ee,Sto),e(ee,Th),e(Th,Moe),e(Moe,Rto),e(Th,Bto),e(Th,YR),e(YR,Pto),e(Th,$to),e(ee,Ito),e(ee,Mh),e(Mh,Eoe),e(Eoe,qto),e(Mh,Nto),e(Mh,KR),e(KR,jto),e(Mh,Dto),e(ee,Gto),e(ee,Eh),e(Eh,Coe),e(Coe,Oto),e(Eh,Vto),e(Eh,ZR),e(ZR,Xto),e(Eh,zto),e(ee,Qto),e(ee,Ch),e(Ch,woe),e(woe,Wto),e(Ch,Hto),e(Ch,eB),e(eB,Uto),e(Ch,Jto),e(ee,Yto),e(ee,wh),e(wh,Aoe),e(Aoe,Kto),e(wh,Zto),e(wh,oB),e(oB,eao),e(wh,oao),e(ee,rao),e(ee,Ah),e(Ah,yoe),e(yoe,tao),e(Ah,aao),e(Ah,rB),e(rB,nao),e(Ah,sao),e(ee,lao),e(ee,yh),e(yh,Loe),e(Loe,iao),e(yh,dao),e(yh,tB),e(tB,cao),e(yh,fao),e(ee,mao),e(ee,Lh),e(Lh,xoe),e(xoe,gao),e(Lh,hao),e(Lh,aB),e(aB,pao),e(Lh,_ao),e(ee,uao),e(ee,xh),e(xh,koe),e(koe,bao),e(xh,Fao),e(xh,nB),e(nB,vao),e(xh,Tao),e(ee,Mao),e(ee,kh),e(kh,Soe),e(Soe,Eao),e(kh,Cao),e(kh,sB),e(sB,wao),e(kh,Aao),e(ee,yao),e(ee,Sh),e(Sh,Roe),e(Roe,Lao),e(Sh,xao),e(Sh,lB),e(lB,kao),e(Sh,Sao),e(ee,Rao),e(ee,Rh),e(Rh,Boe),e(Boe,Bao),e(Rh,Pao),e(Rh,iB),e(iB,$ao),e(Rh,Iao),e(ee,qao),e(ee,Bh),e(Bh,Poe),e(Poe,Nao),e(Bh,jao),e(Bh,dB),e(dB,Dao),e(Bh,Gao),e(ee,Oao),e(ee,Ph),e(Ph,$oe),e($oe,Vao),e(Ph,Xao),e(Ph,cB),e(cB,zao),e(Ph,Qao),e(ee,Wao),e(ee,$h),e($h,Ioe),e(Ioe,Hao),e($h,Uao),e($h,fB),e(fB,Jao),e($h,Yao),e(ee,Kao),e(ee,Ih),e(Ih,qoe),e(qoe,Zao),e(Ih,eno),e(Ih,mB),e(mB,ono),e(Ih,rno),e(ee,tno),e(ee,qh),e(qh,Noe),e(Noe,ano),e(qh,nno),e(qh,gB),e(gB,sno),e(qh,lno),e(ee,ino),e(ee,Nh),e(Nh,joe),e(joe,dno),e(Nh,cno),e(Nh,hB),e(hB,fno),e(Nh,mno),e(Ie,gno),g(jh,Ie,null),e(Ie,hno),e(Ie,Doe),e(Doe,pno),e(Ie,_no),g(l3,Ie,null),e(Ho,uno),e(Ho,Dh),g(i3,Dh,null),e(Dh,bno),e(Dh,Goe),e(Goe,Fno),b(c,TBe,u),b(c,Ji,u),e(Ji,Gh),e(Gh,Ooe),g(d3,Ooe,null),e(Ji,vno),e(Ji,Voe),e(Voe,Tno),b(c,MBe,u),b(c,Uo,u),g(c3,Uo,null),e(Uo,Mno),e(Uo,f3),e(f3,Eno),e(f3,pB),e(pB,Cno),e(f3,wno),e(Uo,Ano),e(Uo,m3),e(m3,yno),e(m3,Xoe),e(Xoe,Lno),e(m3,xno),e(Uo,kno),e(Uo,qe),g(g3,qe,null),e(qe,Sno),e(qe,zoe),e(zoe,Rno),e(qe,Bno),e(qe,Yi),e(Yi,Pno),e(Yi,Qoe),e(Qoe,$no),e(Yi,Ino),e(Yi,Woe),e(Woe,qno),e(Yi,Nno),e(qe,jno),e(qe,Se),e(Se,Oh),e(Oh,Hoe),e(Hoe,Dno),e(Oh,Gno),e(Oh,_B),e(_B,Ono),e(Oh,Vno),e(Se,Xno),e(Se,Vh),e(Vh,Uoe),e(Uoe,zno),e(Vh,Qno),e(Vh,uB),e(uB,Wno),e(Vh,Hno),e(Se,Uno),e(Se,Xh),e(Xh,Joe),e(Joe,Jno),e(Xh,Yno),e(Xh,bB),e(bB,Kno),e(Xh,Zno),e(Se,eso),e(Se,zh),e(zh,Yoe),e(Yoe,oso),e(zh,rso),e(zh,FB),e(FB,tso),e(zh,aso),e(Se,nso),e(Se,Qh),e(Qh,Koe),e(Koe,sso),e(Qh,lso),e(Qh,vB),e(vB,iso),e(Qh,dso),e(Se,cso),e(Se,Wh),e(Wh,Zoe),e(Zoe,fso),e(Wh,mso),e(Wh,TB),e(TB,gso),e(Wh,hso),e(Se,pso),e(Se,Hh),e(Hh,ere),e(ere,_so),e(Hh,uso),e(Hh,MB),e(MB,bso),e(Hh,Fso),e(Se,vso),e(Se,Uh),e(Uh,ore),e(ore,Tso),e(Uh,Mso),e(Uh,EB),e(EB,Eso),e(Uh,Cso),e(qe,wso),g(Jh,qe,null),e(qe,Aso),e(qe,rre),e(rre,yso),e(qe,Lso),g(h3,qe,null),e(Uo,xso),e(Uo,Yh),g(p3,Yh,null),e(Yh,kso),e(Yh,tre),e(tre,Sso),b(c,EBe,u),b(c,Ki,u),e(Ki,Kh),e(Kh,are),g(_3,are,null),e(Ki,Rso),e(Ki,nre),e(nre,Bso),b(c,CBe,u),b(c,Jo,u),g(u3,Jo,null),e(Jo,Pso),e(Jo,Zi),e(Zi,$so),e(Zi,CB),e(CB,Iso),e(Zi,qso),e(Zi,wB),e(wB,Nso),e(Zi,jso),e(Jo,Dso),e(Jo,b3),e(b3,Gso),e(b3,sre),e(sre,Oso),e(b3,Vso),e(Jo,Xso),e(Jo,Xr),g(F3,Xr,null),e(Xr,zso),e(Xr,lre),e(lre,Qso),e(Xr,Wso),e(Xr,ed),e(ed,Hso),e(ed,ire),e(ire,Uso),e(ed,Jso),e(ed,AB),e(AB,Yso),e(ed,Kso),e(Xr,Zso),e(Xr,dre),e(dre,elo),e(Xr,olo),g(v3,Xr,null),e(Jo,rlo),e(Jo,Ne),g(T3,Ne,null),e(Ne,tlo),e(Ne,cre),e(cre,alo),e(Ne,nlo),e(Ne,Xa),e(Xa,slo),e(Xa,fre),e(fre,llo),e(Xa,ilo),e(Xa,mre),e(mre,dlo),e(Xa,clo),e(Xa,gre),e(gre,flo),e(Xa,mlo),e(Ne,glo),e(Ne,T),e(T,Zh),e(Zh,hre),e(hre,hlo),e(Zh,plo),e(Zh,yB),e(yB,_lo),e(Zh,ulo),e(T,blo),e(T,ep),e(ep,pre),e(pre,Flo),e(ep,vlo),e(ep,LB),e(LB,Tlo),e(ep,Mlo),e(T,Elo),e(T,op),e(op,_re),e(_re,Clo),e(op,wlo),e(op,xB),e(xB,Alo),e(op,ylo),e(T,Llo),e(T,rp),e(rp,ure),e(ure,xlo),e(rp,klo),e(rp,kB),e(kB,Slo),e(rp,Rlo),e(T,Blo),e(T,tp),e(tp,bre),e(bre,Plo),e(tp,$lo),e(tp,SB),e(SB,Ilo),e(tp,qlo),e(T,Nlo),e(T,ap),e(ap,Fre),e(Fre,jlo),e(ap,Dlo),e(ap,RB),e(RB,Glo),e(ap,Olo),e(T,Vlo),e(T,np),e(np,vre),e(vre,Xlo),e(np,zlo),e(np,BB),e(BB,Qlo),e(np,Wlo),e(T,Hlo),e(T,sp),e(sp,Tre),e(Tre,Ulo),e(sp,Jlo),e(sp,PB),e(PB,Ylo),e(sp,Klo),e(T,Zlo),e(T,lp),e(lp,Mre),e(Mre,eio),e(lp,oio),e(lp,$B),e($B,rio),e(lp,tio),e(T,aio),e(T,ip),e(ip,Ere),e(Ere,nio),e(ip,sio),e(ip,IB),e(IB,lio),e(ip,iio),e(T,dio),e(T,dp),e(dp,Cre),e(Cre,cio),e(dp,fio),e(dp,qB),e(qB,mio),e(dp,gio),e(T,hio),e(T,cp),e(cp,wre),e(wre,pio),e(cp,_io),e(cp,NB),e(NB,uio),e(cp,bio),e(T,Fio),e(T,fp),e(fp,Are),e(Are,vio),e(fp,Tio),e(fp,jB),e(jB,Mio),e(fp,Eio),e(T,Cio),e(T,mp),e(mp,yre),e(yre,wio),e(mp,Aio),e(mp,DB),e(DB,yio),e(mp,Lio),e(T,xio),e(T,gp),e(gp,Lre),e(Lre,kio),e(gp,Sio),e(gp,GB),e(GB,Rio),e(gp,Bio),e(T,Pio),e(T,hp),e(hp,xre),e(xre,$io),e(hp,Iio),e(hp,OB),e(OB,qio),e(hp,Nio),e(T,jio),e(T,pp),e(pp,kre),e(kre,Dio),e(pp,Gio),e(pp,VB),e(VB,Oio),e(pp,Vio),e(T,Xio),e(T,_p),e(_p,Sre),e(Sre,zio),e(_p,Qio),e(_p,XB),e(XB,Wio),e(_p,Hio),e(T,Uio),e(T,up),e(up,Rre),e(Rre,Jio),e(up,Yio),e(up,zB),e(zB,Kio),e(up,Zio),e(T,edo),e(T,bp),e(bp,Bre),e(Bre,odo),e(bp,rdo),e(bp,QB),e(QB,tdo),e(bp,ado),e(T,ndo),e(T,Fp),e(Fp,Pre),e(Pre,sdo),e(Fp,ldo),e(Fp,WB),e(WB,ido),e(Fp,ddo),e(T,cdo),e(T,vp),e(vp,$re),e($re,fdo),e(vp,mdo),e(vp,HB),e(HB,gdo),e(vp,hdo),e(T,pdo),e(T,Tp),e(Tp,Ire),e(Ire,_do),e(Tp,udo),e(Tp,UB),e(UB,bdo),e(Tp,Fdo),e(T,vdo),e(T,Mp),e(Mp,qre),e(qre,Tdo),e(Mp,Mdo),e(Mp,JB),e(JB,Edo),e(Mp,Cdo),e(T,wdo),e(T,Ep),e(Ep,Nre),e(Nre,Ado),e(Ep,ydo),e(Ep,YB),e(YB,Ldo),e(Ep,xdo),e(T,kdo),e(T,Cp),e(Cp,jre),e(jre,Sdo),e(Cp,Rdo),e(Cp,KB),e(KB,Bdo),e(Cp,Pdo),e(T,$do),e(T,wp),e(wp,Dre),e(Dre,Ido),e(wp,qdo),e(wp,ZB),e(ZB,Ndo),e(wp,jdo),e(T,Ddo),e(T,Ap),e(Ap,Gre),e(Gre,Gdo),e(Ap,Odo),e(Ap,eP),e(eP,Vdo),e(Ap,Xdo),e(T,zdo),e(T,yp),e(yp,Ore),e(Ore,Qdo),e(yp,Wdo),e(yp,oP),e(oP,Hdo),e(yp,Udo),e(T,Jdo),e(T,Lp),e(Lp,Vre),e(Vre,Ydo),e(Lp,Kdo),e(Lp,rP),e(rP,Zdo),e(Lp,eco),e(T,oco),e(T,Gs),e(Gs,Xre),e(Xre,rco),e(Gs,tco),e(Gs,tP),e(tP,aco),e(Gs,nco),e(Gs,aP),e(aP,sco),e(Gs,lco),e(T,ico),e(T,xp),e(xp,zre),e(zre,dco),e(xp,cco),e(xp,nP),e(nP,fco),e(xp,mco),e(T,gco),e(T,kp),e(kp,Qre),e(Qre,hco),e(kp,pco),e(kp,sP),e(sP,_co),e(kp,uco),e(T,bco),e(T,Sp),e(Sp,Wre),e(Wre,Fco),e(Sp,vco),e(Sp,lP),e(lP,Tco),e(Sp,Mco),e(T,Eco),e(T,Rp),e(Rp,Hre),e(Hre,Cco),e(Rp,wco),e(Rp,iP),e(iP,Aco),e(Rp,yco),e(T,Lco),e(T,Bp),e(Bp,Ure),e(Ure,xco),e(Bp,kco),e(Bp,dP),e(dP,Sco),e(Bp,Rco),e(T,Bco),e(T,Pp),e(Pp,Jre),e(Jre,Pco),e(Pp,$co),e(Pp,cP),e(cP,Ico),e(Pp,qco),e(T,Nco),e(T,$p),e($p,Yre),e(Yre,jco),e($p,Dco),e($p,fP),e(fP,Gco),e($p,Oco),e(T,Vco),e(T,Ip),e(Ip,Kre),e(Kre,Xco),e(Ip,zco),e(Ip,mP),e(mP,Qco),e(Ip,Wco),e(T,Hco),e(T,qp),e(qp,Zre),e(Zre,Uco),e(qp,Jco),e(qp,gP),e(gP,Yco),e(qp,Kco),e(T,Zco),e(T,Np),e(Np,ete),e(ete,efo),e(Np,ofo),e(Np,hP),e(hP,rfo),e(Np,tfo),e(T,afo),e(T,jp),e(jp,ote),e(ote,nfo),e(jp,sfo),e(jp,pP),e(pP,lfo),e(jp,ifo),e(T,dfo),e(T,Dp),e(Dp,rte),e(rte,cfo),e(Dp,ffo),e(Dp,_P),e(_P,mfo),e(Dp,gfo),e(T,hfo),e(T,Gp),e(Gp,tte),e(tte,pfo),e(Gp,_fo),e(Gp,uP),e(uP,ufo),e(Gp,bfo),e(T,Ffo),e(T,Op),e(Op,ate),e(ate,vfo),e(Op,Tfo),e(Op,bP),e(bP,Mfo),e(Op,Efo),e(T,Cfo),e(T,Vp),e(Vp,nte),e(nte,wfo),e(Vp,Afo),e(Vp,FP),e(FP,yfo),e(Vp,Lfo),e(T,xfo),e(T,Xp),e(Xp,ste),e(ste,kfo),e(Xp,Sfo),e(Xp,vP),e(vP,Rfo),e(Xp,Bfo),e(T,Pfo),e(T,zp),e(zp,lte),e(lte,$fo),e(zp,Ifo),e(zp,TP),e(TP,qfo),e(zp,Nfo),e(T,jfo),e(T,Qp),e(Qp,ite),e(ite,Dfo),e(Qp,Gfo),e(Qp,MP),e(MP,Ofo),e(Qp,Vfo),e(T,Xfo),e(T,Wp),e(Wp,dte),e(dte,zfo),e(Wp,Qfo),e(Wp,EP),e(EP,Wfo),e(Wp,Hfo),e(T,Ufo),e(T,Hp),e(Hp,cte),e(cte,Jfo),e(Hp,Yfo),e(Hp,CP),e(CP,Kfo),e(Hp,Zfo),e(T,emo),e(T,Up),e(Up,fte),e(fte,omo),e(Up,rmo),e(Up,wP),e(wP,tmo),e(Up,amo),e(T,nmo),e(T,Jp),e(Jp,mte),e(mte,smo),e(Jp,lmo),e(Jp,AP),e(AP,imo),e(Jp,dmo),e(T,cmo),e(T,Yp),e(Yp,gte),e(gte,fmo),e(Yp,mmo),e(Yp,yP),e(yP,gmo),e(Yp,hmo),e(T,pmo),e(T,Kp),e(Kp,hte),e(hte,_mo),e(Kp,umo),e(Kp,LP),e(LP,bmo),e(Kp,Fmo),e(T,vmo),e(T,Zp),e(Zp,pte),e(pte,Tmo),e(Zp,Mmo),e(Zp,xP),e(xP,Emo),e(Zp,Cmo),e(T,wmo),e(T,e_),e(e_,_te),e(_te,Amo),e(e_,ymo),e(e_,kP),e(kP,Lmo),e(e_,xmo),e(T,kmo),e(T,o_),e(o_,ute),e(ute,Smo),e(o_,Rmo),e(o_,SP),e(SP,Bmo),e(o_,Pmo),e(T,$mo),e(T,r_),e(r_,bte),e(bte,Imo),e(r_,qmo),e(r_,RP),e(RP,Nmo),e(r_,jmo),e(T,Dmo),e(T,t_),e(t_,Fte),e(Fte,Gmo),e(t_,Omo),e(t_,BP),e(BP,Vmo),e(t_,Xmo),e(T,zmo),e(T,a_),e(a_,vte),e(vte,Qmo),e(a_,Wmo),e(a_,PP),e(PP,Hmo),e(a_,Umo),e(T,Jmo),e(T,n_),e(n_,Tte),e(Tte,Ymo),e(n_,Kmo),e(n_,$P),e($P,Zmo),e(n_,ego),e(T,ogo),e(T,s_),e(s_,Mte),e(Mte,rgo),e(s_,tgo),e(s_,IP),e(IP,ago),e(s_,ngo),e(T,sgo),e(T,l_),e(l_,Ete),e(Ete,lgo),e(l_,igo),e(l_,qP),e(qP,dgo),e(l_,cgo),e(T,fgo),e(T,i_),e(i_,Cte),e(Cte,mgo),e(i_,ggo),e(i_,NP),e(NP,hgo),e(i_,pgo),e(T,_go),e(T,d_),e(d_,wte),e(wte,ugo),e(d_,bgo),e(d_,jP),e(jP,Fgo),e(d_,vgo),e(T,Tgo),e(T,c_),e(c_,Ate),e(Ate,Mgo),e(c_,Ego),e(c_,DP),e(DP,Cgo),e(c_,wgo),e(T,Ago),e(T,f_),e(f_,yte),e(yte,ygo),e(f_,Lgo),e(f_,GP),e(GP,xgo),e(f_,kgo),e(T,Sgo),e(T,m_),e(m_,Lte),e(Lte,Rgo),e(m_,Bgo),e(m_,OP),e(OP,Pgo),e(m_,$go),e(T,Igo),e(T,g_),e(g_,xte),e(xte,qgo),e(g_,Ngo),e(g_,VP),e(VP,jgo),e(g_,Dgo),e(T,Ggo),e(T,h_),e(h_,kte),e(kte,Ogo),e(h_,Vgo),e(h_,XP),e(XP,Xgo),e(h_,zgo),e(T,Qgo),e(T,p_),e(p_,Ste),e(Ste,Wgo),e(p_,Hgo),e(p_,zP),e(zP,Ugo),e(p_,Jgo),e(T,Ygo),e(T,__),e(__,Rte),e(Rte,Kgo),e(__,Zgo),e(__,QP),e(QP,eho),e(__,oho),e(T,rho),e(T,u_),e(u_,Bte),e(Bte,tho),e(u_,aho),e(u_,WP),e(WP,nho),e(u_,sho),e(T,lho),e(T,b_),e(b_,Pte),e(Pte,iho),e(b_,dho),e(b_,HP),e(HP,cho),e(b_,fho),e(T,mho),e(T,F_),e(F_,$te),e($te,gho),e(F_,hho),e(F_,UP),e(UP,pho),e(F_,_ho),e(T,uho),e(T,v_),e(v_,Ite),e(Ite,bho),e(v_,Fho),e(v_,JP),e(JP,vho),e(v_,Tho),e(T,Mho),e(T,T_),e(T_,qte),e(qte,Eho),e(T_,Cho),e(T_,YP),e(YP,who),e(T_,Aho),e(T,yho),e(T,M_),e(M_,Nte),e(Nte,Lho),e(M_,xho),e(M_,KP),e(KP,kho),e(M_,Sho),e(T,Rho),e(T,E_),e(E_,jte),e(jte,Bho),e(E_,Pho),e(E_,ZP),e(ZP,$ho),e(E_,Iho),e(T,qho),e(T,C_),e(C_,Dte),e(Dte,Nho),e(C_,jho),e(C_,e$),e(e$,Dho),e(C_,Gho),e(T,Oho),e(T,w_),e(w_,Gte),e(Gte,Vho),e(w_,Xho),e(w_,o$),e(o$,zho),e(w_,Qho),e(T,Who),e(T,A_),e(A_,Ote),e(Ote,Hho),e(A_,Uho),e(A_,r$),e(r$,Jho),e(A_,Yho),e(T,Kho),e(T,y_),e(y_,Vte),e(Vte,Zho),e(y_,epo),e(y_,t$),e(t$,opo),e(y_,rpo),e(T,tpo),e(T,L_),e(L_,Xte),e(Xte,apo),e(L_,npo),e(L_,a$),e(a$,spo),e(L_,lpo),e(T,ipo),e(T,x_),e(x_,zte),e(zte,dpo),e(x_,cpo),e(x_,n$),e(n$,fpo),e(x_,mpo),e(T,gpo),e(T,k_),e(k_,Qte),e(Qte,hpo),e(k_,ppo),e(k_,s$),e(s$,_po),e(k_,upo),e(T,bpo),e(T,S_),e(S_,Wte),e(Wte,Fpo),e(S_,vpo),e(S_,l$),e(l$,Tpo),e(S_,Mpo),e(T,Epo),e(T,R_),e(R_,Hte),e(Hte,Cpo),e(R_,wpo),e(R_,i$),e(i$,Apo),e(R_,ypo),e(T,Lpo),e(T,B_),e(B_,Ute),e(Ute,xpo),e(B_,kpo),e(B_,d$),e(d$,Spo),e(B_,Rpo),e(T,Bpo),e(T,P_),e(P_,Jte),e(Jte,Ppo),e(P_,$po),e(P_,c$),e(c$,Ipo),e(P_,qpo),e(T,Npo),e(T,$_),e($_,Yte),e(Yte,jpo),e($_,Dpo),e($_,f$),e(f$,Gpo),e($_,Opo),e(T,Vpo),e(T,I_),e(I_,Kte),e(Kte,Xpo),e(I_,zpo),e(I_,m$),e(m$,Qpo),e(I_,Wpo),e(T,Hpo),e(T,q_),e(q_,Zte),e(Zte,Upo),e(q_,Jpo),e(q_,g$),e(g$,Ypo),e(q_,Kpo),e(T,Zpo),e(T,N_),e(N_,eae),e(eae,e_o),e(N_,o_o),e(N_,h$),e(h$,r_o),e(N_,t_o),e(Ne,a_o),e(Ne,j_),e(j_,n_o),e(j_,oae),e(oae,s_o),e(j_,l_o),e(j_,rae),e(rae,i_o),e(Ne,d_o),e(Ne,tae),e(tae,c_o),e(Ne,f_o),g(M3,Ne,null),b(c,wBe,u),b(c,od,u),e(od,D_),e(D_,aae),g(E3,aae,null),e(od,m_o),e(od,nae),e(nae,g_o),b(c,ABe,u),b(c,Yo,u),g(C3,Yo,null),e(Yo,h_o),e(Yo,rd),e(rd,p_o),e(rd,p$),e(p$,__o),e(rd,u_o),e(rd,_$),e(_$,b_o),e(rd,F_o),e(Yo,v_o),e(Yo,w3),e(w3,T_o),e(w3,sae),e(sae,M_o),e(w3,E_o),e(Yo,C_o),e(Yo,zr),g(A3,zr,null),e(zr,w_o),e(zr,lae),e(lae,A_o),e(zr,y_o),e(zr,td),e(td,L_o),e(td,iae),e(iae,x_o),e(td,k_o),e(td,u$),e(u$,S_o),e(td,R_o),e(zr,B_o),e(zr,dae),e(dae,P_o),e(zr,$_o),g(y3,zr,null),e(Yo,I_o),e(Yo,je),g(L3,je,null),e(je,q_o),e(je,cae),e(cae,N_o),e(je,j_o),e(je,za),e(za,D_o),e(za,fae),e(fae,G_o),e(za,O_o),e(za,mae),e(mae,V_o),e(za,X_o),e(za,gae),e(gae,z_o),e(za,Q_o),e(je,W_o),e(je,S),e(S,G_),e(G_,hae),e(hae,H_o),e(G_,U_o),e(G_,b$),e(b$,J_o),e(G_,Y_o),e(S,K_o),e(S,O_),e(O_,pae),e(pae,Z_o),e(O_,euo),e(O_,F$),e(F$,ouo),e(O_,ruo),e(S,tuo),e(S,V_),e(V_,_ae),e(_ae,auo),e(V_,nuo),e(V_,v$),e(v$,suo),e(V_,luo),e(S,iuo),e(S,X_),e(X_,uae),e(uae,duo),e(X_,cuo),e(X_,T$),e(T$,fuo),e(X_,muo),e(S,guo),e(S,z_),e(z_,bae),e(bae,huo),e(z_,puo),e(z_,M$),e(M$,_uo),e(z_,uuo),e(S,buo),e(S,Q_),e(Q_,Fae),e(Fae,Fuo),e(Q_,vuo),e(Q_,E$),e(E$,Tuo),e(Q_,Muo),e(S,Euo),e(S,W_),e(W_,vae),e(vae,Cuo),e(W_,wuo),e(W_,C$),e(C$,Auo),e(W_,yuo),e(S,Luo),e(S,H_),e(H_,Tae),e(Tae,xuo),e(H_,kuo),e(H_,w$),e(w$,Suo),e(H_,Ruo),e(S,Buo),e(S,U_),e(U_,Mae),e(Mae,Puo),e(U_,$uo),e(U_,A$),e(A$,Iuo),e(U_,quo),e(S,Nuo),e(S,J_),e(J_,Eae),e(Eae,juo),e(J_,Duo),e(J_,y$),e(y$,Guo),e(J_,Ouo),e(S,Vuo),e(S,Y_),e(Y_,Cae),e(Cae,Xuo),e(Y_,zuo),e(Y_,L$),e(L$,Quo),e(Y_,Wuo),e(S,Huo),e(S,K_),e(K_,wae),e(wae,Uuo),e(K_,Juo),e(K_,x$),e(x$,Yuo),e(K_,Kuo),e(S,Zuo),e(S,Z_),e(Z_,Aae),e(Aae,e2o),e(Z_,o2o),e(Z_,k$),e(k$,r2o),e(Z_,t2o),e(S,a2o),e(S,eu),e(eu,yae),e(yae,n2o),e(eu,s2o),e(eu,S$),e(S$,l2o),e(eu,i2o),e(S,d2o),e(S,ou),e(ou,Lae),e(Lae,c2o),e(ou,f2o),e(ou,R$),e(R$,m2o),e(ou,g2o),e(S,h2o),e(S,ru),e(ru,xae),e(xae,p2o),e(ru,_2o),e(ru,B$),e(B$,u2o),e(ru,b2o),e(S,F2o),e(S,tu),e(tu,kae),e(kae,v2o),e(tu,T2o),e(tu,P$),e(P$,M2o),e(tu,E2o),e(S,C2o),e(S,au),e(au,Sae),e(Sae,w2o),e(au,A2o),e(au,$$),e($$,y2o),e(au,L2o),e(S,x2o),e(S,nu),e(nu,Rae),e(Rae,k2o),e(nu,S2o),e(nu,I$),e(I$,R2o),e(nu,B2o),e(S,P2o),e(S,su),e(su,Bae),e(Bae,$2o),e(su,I2o),e(su,q$),e(q$,q2o),e(su,N2o),e(S,j2o),e(S,lu),e(lu,Pae),e(Pae,D2o),e(lu,G2o),e(lu,N$),e(N$,O2o),e(lu,V2o),e(S,X2o),e(S,iu),e(iu,$ae),e($ae,z2o),e(iu,Q2o),e(iu,j$),e(j$,W2o),e(iu,H2o),e(S,U2o),e(S,du),e(du,Iae),e(Iae,J2o),e(du,Y2o),e(du,D$),e(D$,K2o),e(du,Z2o),e(S,e1o),e(S,cu),e(cu,qae),e(qae,o1o),e(cu,r1o),e(cu,G$),e(G$,t1o),e(cu,a1o),e(S,n1o),e(S,fu),e(fu,Nae),e(Nae,s1o),e(fu,l1o),e(fu,O$),e(O$,i1o),e(fu,d1o),e(S,c1o),e(S,mu),e(mu,jae),e(jae,f1o),e(mu,m1o),e(mu,V$),e(V$,g1o),e(mu,h1o),e(S,p1o),e(S,gu),e(gu,Dae),e(Dae,_1o),e(gu,u1o),e(gu,X$),e(X$,b1o),e(gu,F1o),e(S,v1o),e(S,hu),e(hu,Gae),e(Gae,T1o),e(hu,M1o),e(hu,z$),e(z$,E1o),e(hu,C1o),e(S,w1o),e(S,pu),e(pu,Oae),e(Oae,A1o),e(pu,y1o),e(pu,Q$),e(Q$,L1o),e(pu,x1o),e(S,k1o),e(S,_u),e(_u,Vae),e(Vae,S1o),e(_u,R1o),e(_u,W$),e(W$,B1o),e(_u,P1o),e(S,$1o),e(S,uu),e(uu,Xae),e(Xae,I1o),e(uu,q1o),e(uu,H$),e(H$,N1o),e(uu,j1o),e(S,D1o),e(S,bu),e(bu,zae),e(zae,G1o),e(bu,O1o),e(bu,U$),e(U$,V1o),e(bu,X1o),e(S,z1o),e(S,Fu),e(Fu,Qae),e(Qae,Q1o),e(Fu,W1o),e(Fu,J$),e(J$,H1o),e(Fu,U1o),e(S,J1o),e(S,vu),e(vu,Wae),e(Wae,Y1o),e(vu,K1o),e(vu,Y$),e(Y$,Z1o),e(vu,ebo),e(S,obo),e(S,Tu),e(Tu,Hae),e(Hae,rbo),e(Tu,tbo),e(Tu,K$),e(K$,abo),e(Tu,nbo),e(S,sbo),e(S,Mu),e(Mu,Uae),e(Uae,lbo),e(Mu,ibo),e(Mu,Z$),e(Z$,dbo),e(Mu,cbo),e(S,fbo),e(S,Eu),e(Eu,Jae),e(Jae,mbo),e(Eu,gbo),e(Eu,eI),e(eI,hbo),e(Eu,pbo),e(S,_bo),e(S,Cu),e(Cu,Yae),e(Yae,ubo),e(Cu,bbo),e(Cu,oI),e(oI,Fbo),e(Cu,vbo),e(S,Tbo),e(S,wu),e(wu,Kae),e(Kae,Mbo),e(wu,Ebo),e(wu,rI),e(rI,Cbo),e(wu,wbo),e(S,Abo),e(S,Au),e(Au,Zae),e(Zae,ybo),e(Au,Lbo),e(Au,tI),e(tI,xbo),e(Au,kbo),e(je,Sbo),e(je,yu),e(yu,Rbo),e(yu,ene),e(ene,Bbo),e(yu,Pbo),e(yu,one),e(one,$bo),e(je,Ibo),e(je,rne),e(rne,qbo),e(je,Nbo),g(x3,je,null),b(c,yBe,u),b(c,ad,u),e(ad,Lu),e(Lu,tne),g(k3,tne,null),e(ad,jbo),e(ad,ane),e(ane,Dbo),b(c,LBe,u),b(c,Ko,u),g(S3,Ko,null),e(Ko,Gbo),e(Ko,nd),e(nd,Obo),e(nd,aI),e(aI,Vbo),e(nd,Xbo),e(nd,nI),e(nI,zbo),e(nd,Qbo),e(Ko,Wbo),e(Ko,R3),e(R3,Hbo),e(R3,nne),e(nne,Ubo),e(R3,Jbo),e(Ko,Ybo),e(Ko,Qr),g(B3,Qr,null),e(Qr,Kbo),e(Qr,sne),e(sne,Zbo),e(Qr,e6o),e(Qr,sd),e(sd,o6o),e(sd,lne),e(lne,r6o),e(sd,t6o),e(sd,sI),e(sI,a6o),e(sd,n6o),e(Qr,s6o),e(Qr,ine),e(ine,l6o),e(Qr,i6o),g(P3,Qr,null),e(Ko,d6o),e(Ko,De),g($3,De,null),e(De,c6o),e(De,dne),e(dne,f6o),e(De,m6o),e(De,Qa),e(Qa,g6o),e(Qa,cne),e(cne,h6o),e(Qa,p6o),e(Qa,fne),e(fne,_6o),e(Qa,u6o),e(Qa,mne),e(mne,b6o),e(Qa,F6o),e(De,v6o),e(De,$),e($,xu),e(xu,gne),e(gne,T6o),e(xu,M6o),e(xu,lI),e(lI,E6o),e(xu,C6o),e($,w6o),e($,ku),e(ku,hne),e(hne,A6o),e(ku,y6o),e(ku,iI),e(iI,L6o),e(ku,x6o),e($,k6o),e($,Su),e(Su,pne),e(pne,S6o),e(Su,R6o),e(Su,dI),e(dI,B6o),e(Su,P6o),e($,$6o),e($,Ru),e(Ru,_ne),e(_ne,I6o),e(Ru,q6o),e(Ru,cI),e(cI,N6o),e(Ru,j6o),e($,D6o),e($,Bu),e(Bu,une),e(une,G6o),e(Bu,O6o),e(Bu,fI),e(fI,V6o),e(Bu,X6o),e($,z6o),e($,Pu),e(Pu,bne),e(bne,Q6o),e(Pu,W6o),e(Pu,mI),e(mI,H6o),e(Pu,U6o),e($,J6o),e($,$u),e($u,Fne),e(Fne,Y6o),e($u,K6o),e($u,gI),e(gI,Z6o),e($u,eFo),e($,oFo),e($,Iu),e(Iu,vne),e(vne,rFo),e(Iu,tFo),e(Iu,hI),e(hI,aFo),e(Iu,nFo),e($,sFo),e($,qu),e(qu,Tne),e(Tne,lFo),e(qu,iFo),e(qu,pI),e(pI,dFo),e(qu,cFo),e($,fFo),e($,Nu),e(Nu,Mne),e(Mne,mFo),e(Nu,gFo),e(Nu,_I),e(_I,hFo),e(Nu,pFo),e($,_Fo),e($,ju),e(ju,Ene),e(Ene,uFo),e(ju,bFo),e(ju,uI),e(uI,FFo),e(ju,vFo),e($,TFo),e($,Du),e(Du,Cne),e(Cne,MFo),e(Du,EFo),e(Du,bI),e(bI,CFo),e(Du,wFo),e($,AFo),e($,Gu),e(Gu,wne),e(wne,yFo),e(Gu,LFo),e(Gu,FI),e(FI,xFo),e(Gu,kFo),e($,SFo),e($,Ou),e(Ou,Ane),e(Ane,RFo),e(Ou,BFo),e(Ou,vI),e(vI,PFo),e(Ou,$Fo),e($,IFo),e($,Vu),e(Vu,yne),e(yne,qFo),e(Vu,NFo),e(Vu,TI),e(TI,jFo),e(Vu,DFo),e($,GFo),e($,Xu),e(Xu,Lne),e(Lne,OFo),e(Xu,VFo),e(Xu,MI),e(MI,XFo),e(Xu,zFo),e($,QFo),e($,zu),e(zu,xne),e(xne,WFo),e(zu,HFo),e(zu,EI),e(EI,UFo),e(zu,JFo),e($,YFo),e($,Qu),e(Qu,kne),e(kne,KFo),e(Qu,ZFo),e(Qu,CI),e(CI,evo),e(Qu,ovo),e($,rvo),e($,Wu),e(Wu,Sne),e(Sne,tvo),e(Wu,avo),e(Wu,wI),e(wI,nvo),e(Wu,svo),e($,lvo),e($,Hu),e(Hu,Rne),e(Rne,ivo),e(Hu,dvo),e(Hu,AI),e(AI,cvo),e(Hu,fvo),e($,mvo),e($,Uu),e(Uu,Bne),e(Bne,gvo),e(Uu,hvo),e(Uu,yI),e(yI,pvo),e(Uu,_vo),e($,uvo),e($,Ju),e(Ju,Pne),e(Pne,bvo),e(Ju,Fvo),e(Ju,LI),e(LI,vvo),e(Ju,Tvo),e($,Mvo),e($,Yu),e(Yu,$ne),e($ne,Evo),e(Yu,Cvo),e(Yu,xI),e(xI,wvo),e(Yu,Avo),e($,yvo),e($,Ku),e(Ku,Ine),e(Ine,Lvo),e(Ku,xvo),e(Ku,kI),e(kI,kvo),e(Ku,Svo),e($,Rvo),e($,Zu),e(Zu,qne),e(qne,Bvo),e(Zu,Pvo),e(Zu,SI),e(SI,$vo),e(Zu,Ivo),e($,qvo),e($,e2),e(e2,Nne),e(Nne,Nvo),e(e2,jvo),e(e2,RI),e(RI,Dvo),e(e2,Gvo),e($,Ovo),e($,o2),e(o2,jne),e(jne,Vvo),e(o2,Xvo),e(o2,BI),e(BI,zvo),e(o2,Qvo),e($,Wvo),e($,r2),e(r2,Dne),e(Dne,Hvo),e(r2,Uvo),e(r2,PI),e(PI,Jvo),e(r2,Yvo),e($,Kvo),e($,t2),e(t2,Gne),e(Gne,Zvo),e(t2,eTo),e(t2,$I),e($I,oTo),e(t2,rTo),e($,tTo),e($,a2),e(a2,One),e(One,aTo),e(a2,nTo),e(a2,II),e(II,sTo),e(a2,lTo),e($,iTo),e($,n2),e(n2,Vne),e(Vne,dTo),e(n2,cTo),e(n2,qI),e(qI,fTo),e(n2,mTo),e($,gTo),e($,s2),e(s2,Xne),e(Xne,hTo),e(s2,pTo),e(s2,NI),e(NI,_To),e(s2,uTo),e($,bTo),e($,l2),e(l2,zne),e(zne,FTo),e(l2,vTo),e(l2,jI),e(jI,TTo),e(l2,MTo),e($,ETo),e($,i2),e(i2,Qne),e(Qne,CTo),e(i2,wTo),e(i2,DI),e(DI,ATo),e(i2,yTo),e($,LTo),e($,d2),e(d2,Wne),e(Wne,xTo),e(d2,kTo),e(d2,GI),e(GI,STo),e(d2,RTo),e(De,BTo),e(De,c2),e(c2,PTo),e(c2,Hne),e(Hne,$To),e(c2,ITo),e(c2,Une),e(Une,qTo),e(De,NTo),e(De,Jne),e(Jne,jTo),e(De,DTo),g(I3,De,null),b(c,xBe,u),b(c,ld,u),e(ld,f2),e(f2,Yne),g(q3,Yne,null),e(ld,GTo),e(ld,Kne),e(Kne,OTo),b(c,kBe,u),b(c,Zo,u),g(N3,Zo,null),e(Zo,VTo),e(Zo,id),e(id,XTo),e(id,OI),e(OI,zTo),e(id,QTo),e(id,VI),e(VI,WTo),e(id,HTo),e(Zo,UTo),e(Zo,j3),e(j3,JTo),e(j3,Zne),e(Zne,YTo),e(j3,KTo),e(Zo,ZTo),e(Zo,Wr),g(D3,Wr,null),e(Wr,e7o),e(Wr,ese),e(ese,o7o),e(Wr,r7o),e(Wr,dd),e(dd,t7o),e(dd,ose),e(ose,a7o),e(dd,n7o),e(dd,XI),e(XI,s7o),e(dd,l7o),e(Wr,i7o),e(Wr,rse),e(rse,d7o),e(Wr,c7o),g(G3,Wr,null),e(Zo,f7o),e(Zo,Ge),g(O3,Ge,null),e(Ge,m7o),e(Ge,tse),e(tse,g7o),e(Ge,h7o),e(Ge,Wa),e(Wa,p7o),e(Wa,ase),e(ase,_7o),e(Wa,u7o),e(Wa,nse),e(nse,b7o),e(Wa,F7o),e(Wa,sse),e(sse,v7o),e(Wa,T7o),e(Ge,M7o),e(Ge,I),e(I,m2),e(m2,lse),e(lse,E7o),e(m2,C7o),e(m2,zI),e(zI,w7o),e(m2,A7o),e(I,y7o),e(I,g2),e(g2,ise),e(ise,L7o),e(g2,x7o),e(g2,QI),e(QI,k7o),e(g2,S7o),e(I,R7o),e(I,h2),e(h2,dse),e(dse,B7o),e(h2,P7o),e(h2,WI),e(WI,$7o),e(h2,I7o),e(I,q7o),e(I,p2),e(p2,cse),e(cse,N7o),e(p2,j7o),e(p2,HI),e(HI,D7o),e(p2,G7o),e(I,O7o),e(I,_2),e(_2,fse),e(fse,V7o),e(_2,X7o),e(_2,UI),e(UI,z7o),e(_2,Q7o),e(I,W7o),e(I,u2),e(u2,mse),e(mse,H7o),e(u2,U7o),e(u2,JI),e(JI,J7o),e(u2,Y7o),e(I,K7o),e(I,b2),e(b2,gse),e(gse,Z7o),e(b2,e9o),e(b2,YI),e(YI,o9o),e(b2,r9o),e(I,t9o),e(I,F2),e(F2,hse),e(hse,a9o),e(F2,n9o),e(F2,KI),e(KI,s9o),e(F2,l9o),e(I,i9o),e(I,v2),e(v2,pse),e(pse,d9o),e(v2,c9o),e(v2,ZI),e(ZI,f9o),e(v2,m9o),e(I,g9o),e(I,T2),e(T2,_se),e(_se,h9o),e(T2,p9o),e(T2,eq),e(eq,_9o),e(T2,u9o),e(I,b9o),e(I,M2),e(M2,use),e(use,F9o),e(M2,v9o),e(M2,oq),e(oq,T9o),e(M2,M9o),e(I,E9o),e(I,E2),e(E2,bse),e(bse,C9o),e(E2,w9o),e(E2,rq),e(rq,A9o),e(E2,y9o),e(I,L9o),e(I,C2),e(C2,Fse),e(Fse,x9o),e(C2,k9o),e(C2,tq),e(tq,S9o),e(C2,R9o),e(I,B9o),e(I,w2),e(w2,vse),e(vse,P9o),e(w2,$9o),e(w2,aq),e(aq,I9o),e(w2,q9o),e(I,N9o),e(I,A2),e(A2,Tse),e(Tse,j9o),e(A2,D9o),e(A2,nq),e(nq,G9o),e(A2,O9o),e(I,V9o),e(I,y2),e(y2,Mse),e(Mse,X9o),e(y2,z9o),e(y2,sq),e(sq,Q9o),e(y2,W9o),e(I,H9o),e(I,L2),e(L2,Ese),e(Ese,U9o),e(L2,J9o),e(L2,lq),e(lq,Y9o),e(L2,K9o),e(I,Z9o),e(I,x2),e(x2,Cse),e(Cse,eMo),e(x2,oMo),e(x2,iq),e(iq,rMo),e(x2,tMo),e(I,aMo),e(I,k2),e(k2,wse),e(wse,nMo),e(k2,sMo),e(k2,dq),e(dq,lMo),e(k2,iMo),e(I,dMo),e(I,S2),e(S2,Ase),e(Ase,cMo),e(S2,fMo),e(S2,cq),e(cq,mMo),e(S2,gMo),e(I,hMo),e(I,R2),e(R2,yse),e(yse,pMo),e(R2,_Mo),e(R2,fq),e(fq,uMo),e(R2,bMo),e(I,FMo),e(I,B2),e(B2,Lse),e(Lse,vMo),e(B2,TMo),e(B2,mq),e(mq,MMo),e(B2,EMo),e(I,CMo),e(I,P2),e(P2,xse),e(xse,wMo),e(P2,AMo),e(P2,gq),e(gq,yMo),e(P2,LMo),e(I,xMo),e(I,$2),e($2,kse),e(kse,kMo),e($2,SMo),e($2,hq),e(hq,RMo),e($2,BMo),e(I,PMo),e(I,I2),e(I2,Sse),e(Sse,$Mo),e(I2,IMo),e(I2,pq),e(pq,qMo),e(I2,NMo),e(I,jMo),e(I,q2),e(q2,Rse),e(Rse,DMo),e(q2,GMo),e(q2,_q),e(_q,OMo),e(q2,VMo),e(I,XMo),e(I,N2),e(N2,Bse),e(Bse,zMo),e(N2,QMo),e(N2,uq),e(uq,WMo),e(N2,HMo),e(I,UMo),e(I,j2),e(j2,Pse),e(Pse,JMo),e(j2,YMo),e(j2,bq),e(bq,KMo),e(j2,ZMo),e(I,e4o),e(I,D2),e(D2,$se),e($se,o4o),e(D2,r4o),e(D2,Fq),e(Fq,t4o),e(D2,a4o),e(I,n4o),e(I,G2),e(G2,Ise),e(Ise,s4o),e(G2,l4o),e(G2,vq),e(vq,i4o),e(G2,d4o),e(I,c4o),e(I,O2),e(O2,qse),e(qse,f4o),e(O2,m4o),e(O2,Nse),e(Nse,g4o),e(O2,h4o),e(I,p4o),e(I,V2),e(V2,jse),e(jse,_4o),e(V2,u4o),e(V2,Tq),e(Tq,b4o),e(V2,F4o),e(I,v4o),e(I,X2),e(X2,Dse),e(Dse,T4o),e(X2,M4o),e(X2,Mq),e(Mq,E4o),e(X2,C4o),e(I,w4o),e(I,z2),e(z2,Gse),e(Gse,A4o),e(z2,y4o),e(z2,Eq),e(Eq,L4o),e(z2,x4o),e(I,k4o),e(I,Q2),e(Q2,Ose),e(Ose,S4o),e(Q2,R4o),e(Q2,Cq),e(Cq,B4o),e(Q2,P4o),e(Ge,$4o),e(Ge,W2),e(W2,I4o),e(W2,Vse),e(Vse,q4o),e(W2,N4o),e(W2,Xse),e(Xse,j4o),e(Ge,D4o),e(Ge,zse),e(zse,G4o),e(Ge,O4o),g(V3,Ge,null),b(c,SBe,u),b(c,cd,u),e(cd,H2),e(H2,Qse),g(X3,Qse,null),e(cd,V4o),e(cd,Wse),e(Wse,X4o),b(c,RBe,u),b(c,er,u),g(z3,er,null),e(er,z4o),e(er,fd),e(fd,Q4o),e(fd,wq),e(wq,W4o),e(fd,H4o),e(fd,Aq),e(Aq,U4o),e(fd,J4o),e(er,Y4o),e(er,Q3),e(Q3,K4o),e(Q3,Hse),e(Hse,Z4o),e(Q3,eEo),e(er,oEo),e(er,Hr),g(W3,Hr,null),e(Hr,rEo),e(Hr,Use),e(Use,tEo),e(Hr,aEo),e(Hr,md),e(md,nEo),e(md,Jse),e(Jse,sEo),e(md,lEo),e(md,yq),e(yq,iEo),e(md,dEo),e(Hr,cEo),e(Hr,Yse),e(Yse,fEo),e(Hr,mEo),g(H3,Hr,null),e(er,gEo),e(er,Oe),g(U3,Oe,null),e(Oe,hEo),e(Oe,Kse),e(Kse,pEo),e(Oe,_Eo),e(Oe,Ha),e(Ha,uEo),e(Ha,Zse),e(Zse,bEo),e(Ha,FEo),e(Ha,ele),e(ele,vEo),e(Ha,TEo),e(Ha,ole),e(ole,MEo),e(Ha,EEo),e(Oe,CEo),e(Oe,ae),e(ae,U2),e(U2,rle),e(rle,wEo),e(U2,AEo),e(U2,Lq),e(Lq,yEo),e(U2,LEo),e(ae,xEo),e(ae,J2),e(J2,tle),e(tle,kEo),e(J2,SEo),e(J2,xq),e(xq,REo),e(J2,BEo),e(ae,PEo),e(ae,Y2),e(Y2,ale),e(ale,$Eo),e(Y2,IEo),e(Y2,kq),e(kq,qEo),e(Y2,NEo),e(ae,jEo),e(ae,K2),e(K2,nle),e(nle,DEo),e(K2,GEo),e(K2,Sq),e(Sq,OEo),e(K2,VEo),e(ae,XEo),e(ae,Z2),e(Z2,sle),e(sle,zEo),e(Z2,QEo),e(Z2,Rq),e(Rq,WEo),e(Z2,HEo),e(ae,UEo),e(ae,e1),e(e1,lle),e(lle,JEo),e(e1,YEo),e(e1,Bq),e(Bq,KEo),e(e1,ZEo),e(ae,e5o),e(ae,o1),e(o1,ile),e(ile,o5o),e(o1,r5o),e(o1,Pq),e(Pq,t5o),e(o1,a5o),e(ae,n5o),e(ae,r1),e(r1,dle),e(dle,s5o),e(r1,l5o),e(r1,$q),e($q,i5o),e(r1,d5o),e(ae,c5o),e(ae,t1),e(t1,cle),e(cle,f5o),e(t1,m5o),e(t1,Iq),e(Iq,g5o),e(t1,h5o),e(ae,p5o),e(ae,a1),e(a1,fle),e(fle,_5o),e(a1,u5o),e(a1,qq),e(qq,b5o),e(a1,F5o),e(ae,v5o),e(ae,n1),e(n1,mle),e(mle,T5o),e(n1,M5o),e(n1,Nq),e(Nq,E5o),e(n1,C5o),e(ae,w5o),e(ae,s1),e(s1,gle),e(gle,A5o),e(s1,y5o),e(s1,jq),e(jq,L5o),e(s1,x5o),e(ae,k5o),e(ae,l1),e(l1,hle),e(hle,S5o),e(l1,R5o),e(l1,Dq),e(Dq,B5o),e(l1,P5o),e(ae,$5o),e(ae,i1),e(i1,ple),e(ple,I5o),e(i1,q5o),e(i1,Gq),e(Gq,N5o),e(i1,j5o),e(ae,D5o),e(ae,d1),e(d1,_le),e(_le,G5o),e(d1,O5o),e(d1,Oq),e(Oq,V5o),e(d1,X5o),e(ae,z5o),e(ae,c1),e(c1,ule),e(ule,Q5o),e(c1,W5o),e(c1,Vq),e(Vq,H5o),e(c1,U5o),e(ae,J5o),e(ae,f1),e(f1,ble),e(ble,Y5o),e(f1,K5o),e(f1,Xq),e(Xq,Z5o),e(f1,e3o),e(ae,o3o),e(ae,m1),e(m1,Fle),e(Fle,r3o),e(m1,t3o),e(m1,zq),e(zq,a3o),e(m1,n3o),e(Oe,s3o),e(Oe,g1),e(g1,l3o),e(g1,vle),e(vle,i3o),e(g1,d3o),e(g1,Tle),e(Tle,c3o),e(Oe,f3o),e(Oe,Mle),e(Mle,m3o),e(Oe,g3o),g(J3,Oe,null),b(c,BBe,u),b(c,gd,u),e(gd,h1),e(h1,Ele),g(Y3,Ele,null),e(gd,h3o),e(gd,Cle),e(Cle,p3o),b(c,PBe,u),b(c,or,u),g(K3,or,null),e(or,_3o),e(or,hd),e(hd,u3o),e(hd,Qq),e(Qq,b3o),e(hd,F3o),e(hd,Wq),e(Wq,v3o),e(hd,T3o),e(or,M3o),e(or,Z3),e(Z3,E3o),e(Z3,wle),e(wle,C3o),e(Z3,w3o),e(or,A3o),e(or,Ur),g(eC,Ur,null),e(Ur,y3o),e(Ur,Ale),e(Ale,L3o),e(Ur,x3o),e(Ur,pd),e(pd,k3o),e(pd,yle),e(yle,S3o),e(pd,R3o),e(pd,Hq),e(Hq,B3o),e(pd,P3o),e(Ur,$3o),e(Ur,Lle),e(Lle,I3o),e(Ur,q3o),g(oC,Ur,null),e(or,N3o),e(or,Ve),g(rC,Ve,null),e(Ve,j3o),e(Ve,xle),e(xle,D3o),e(Ve,G3o),e(Ve,Ua),e(Ua,O3o),e(Ua,kle),e(kle,V3o),e(Ua,X3o),e(Ua,Sle),e(Sle,z3o),e(Ua,Q3o),e(Ua,Rle),e(Rle,W3o),e(Ua,H3o),e(Ve,U3o),e(Ve,y),e(y,p1),e(p1,Ble),e(Ble,J3o),e(p1,Y3o),e(p1,Uq),e(Uq,K3o),e(p1,Z3o),e(y,eCo),e(y,_1),e(_1,Ple),e(Ple,oCo),e(_1,rCo),e(_1,Jq),e(Jq,tCo),e(_1,aCo),e(y,nCo),e(y,u1),e(u1,$le),e($le,sCo),e(u1,lCo),e(u1,Yq),e(Yq,iCo),e(u1,dCo),e(y,cCo),e(y,b1),e(b1,Ile),e(Ile,fCo),e(b1,mCo),e(b1,Kq),e(Kq,gCo),e(b1,hCo),e(y,pCo),e(y,F1),e(F1,qle),e(qle,_Co),e(F1,uCo),e(F1,Zq),e(Zq,bCo),e(F1,FCo),e(y,vCo),e(y,v1),e(v1,Nle),e(Nle,TCo),e(v1,MCo),e(v1,eN),e(eN,ECo),e(v1,CCo),e(y,wCo),e(y,T1),e(T1,jle),e(jle,ACo),e(T1,yCo),e(T1,oN),e(oN,LCo),e(T1,xCo),e(y,kCo),e(y,M1),e(M1,Dle),e(Dle,SCo),e(M1,RCo),e(M1,rN),e(rN,BCo),e(M1,PCo),e(y,$Co),e(y,E1),e(E1,Gle),e(Gle,ICo),e(E1,qCo),e(E1,tN),e(tN,NCo),e(E1,jCo),e(y,DCo),e(y,C1),e(C1,Ole),e(Ole,GCo),e(C1,OCo),e(C1,aN),e(aN,VCo),e(C1,XCo),e(y,zCo),e(y,w1),e(w1,Vle),e(Vle,QCo),e(w1,WCo),e(w1,nN),e(nN,HCo),e(w1,UCo),e(y,JCo),e(y,A1),e(A1,Xle),e(Xle,YCo),e(A1,KCo),e(A1,sN),e(sN,ZCo),e(A1,ewo),e(y,owo),e(y,y1),e(y1,zle),e(zle,rwo),e(y1,two),e(y1,lN),e(lN,awo),e(y1,nwo),e(y,swo),e(y,L1),e(L1,Qle),e(Qle,lwo),e(L1,iwo),e(L1,iN),e(iN,dwo),e(L1,cwo),e(y,fwo),e(y,x1),e(x1,Wle),e(Wle,mwo),e(x1,gwo),e(x1,dN),e(dN,hwo),e(x1,pwo),e(y,_wo),e(y,k1),e(k1,Hle),e(Hle,uwo),e(k1,bwo),e(k1,cN),e(cN,Fwo),e(k1,vwo),e(y,Two),e(y,S1),e(S1,Ule),e(Ule,Mwo),e(S1,Ewo),e(S1,fN),e(fN,Cwo),e(S1,wwo),e(y,Awo),e(y,R1),e(R1,Jle),e(Jle,ywo),e(R1,Lwo),e(R1,mN),e(mN,xwo),e(R1,kwo),e(y,Swo),e(y,B1),e(B1,Yle),e(Yle,Rwo),e(B1,Bwo),e(B1,gN),e(gN,Pwo),e(B1,$wo),e(y,Iwo),e(y,P1),e(P1,Kle),e(Kle,qwo),e(P1,Nwo),e(P1,hN),e(hN,jwo),e(P1,Dwo),e(y,Gwo),e(y,$1),e($1,Zle),e(Zle,Owo),e($1,Vwo),e($1,pN),e(pN,Xwo),e($1,zwo),e(y,Qwo),e(y,I1),e(I1,eie),e(eie,Wwo),e(I1,Hwo),e(I1,_N),e(_N,Uwo),e(I1,Jwo),e(y,Ywo),e(y,q1),e(q1,oie),e(oie,Kwo),e(q1,Zwo),e(q1,uN),e(uN,eAo),e(q1,oAo),e(y,rAo),e(y,N1),e(N1,rie),e(rie,tAo),e(N1,aAo),e(N1,bN),e(bN,nAo),e(N1,sAo),e(y,lAo),e(y,j1),e(j1,tie),e(tie,iAo),e(j1,dAo),e(j1,FN),e(FN,cAo),e(j1,fAo),e(y,mAo),e(y,D1),e(D1,aie),e(aie,gAo),e(D1,hAo),e(D1,vN),e(vN,pAo),e(D1,_Ao),e(y,uAo),e(y,G1),e(G1,nie),e(nie,bAo),e(G1,FAo),e(G1,TN),e(TN,vAo),e(G1,TAo),e(y,MAo),e(y,O1),e(O1,sie),e(sie,EAo),e(O1,CAo),e(O1,MN),e(MN,wAo),e(O1,AAo),e(y,yAo),e(y,V1),e(V1,lie),e(lie,LAo),e(V1,xAo),e(V1,EN),e(EN,kAo),e(V1,SAo),e(y,RAo),e(y,X1),e(X1,iie),e(iie,BAo),e(X1,PAo),e(X1,CN),e(CN,$Ao),e(X1,IAo),e(y,qAo),e(y,z1),e(z1,die),e(die,NAo),e(z1,jAo),e(z1,wN),e(wN,DAo),e(z1,GAo),e(y,OAo),e(y,Q1),e(Q1,cie),e(cie,VAo),e(Q1,XAo),e(Q1,AN),e(AN,zAo),e(Q1,QAo),e(y,WAo),e(y,W1),e(W1,fie),e(fie,HAo),e(W1,UAo),e(W1,yN),e(yN,JAo),e(W1,YAo),e(y,KAo),e(y,H1),e(H1,mie),e(mie,ZAo),e(H1,e0o),e(H1,LN),e(LN,o0o),e(H1,r0o),e(y,t0o),e(y,U1),e(U1,gie),e(gie,a0o),e(U1,n0o),e(U1,xN),e(xN,s0o),e(U1,l0o),e(y,i0o),e(y,J1),e(J1,hie),e(hie,d0o),e(J1,c0o),e(J1,kN),e(kN,f0o),e(J1,m0o),e(y,g0o),e(y,Y1),e(Y1,pie),e(pie,h0o),e(Y1,p0o),e(Y1,SN),e(SN,_0o),e(Y1,u0o),e(y,b0o),e(y,K1),e(K1,_ie),e(_ie,F0o),e(K1,v0o),e(K1,RN),e(RN,T0o),e(K1,M0o),e(y,E0o),e(y,Z1),e(Z1,uie),e(uie,C0o),e(Z1,w0o),e(Z1,BN),e(BN,A0o),e(Z1,y0o),e(y,L0o),e(y,eb),e(eb,bie),e(bie,x0o),e(eb,k0o),e(eb,PN),e(PN,S0o),e(eb,R0o),e(y,B0o),e(y,ob),e(ob,Fie),e(Fie,P0o),e(ob,$0o),e(ob,$N),e($N,I0o),e(ob,q0o),e(y,N0o),e(y,rb),e(rb,vie),e(vie,j0o),e(rb,D0o),e(rb,IN),e(IN,G0o),e(rb,O0o),e(y,V0o),e(y,tb),e(tb,Tie),e(Tie,X0o),e(tb,z0o),e(tb,qN),e(qN,Q0o),e(tb,W0o),e(y,H0o),e(y,ab),e(ab,Mie),e(Mie,U0o),e(ab,J0o),e(ab,NN),e(NN,Y0o),e(ab,K0o),e(y,Z0o),e(y,nb),e(nb,Eie),e(Eie,eyo),e(nb,oyo),e(nb,jN),e(jN,ryo),e(nb,tyo),e(y,ayo),e(y,sb),e(sb,Cie),e(Cie,nyo),e(sb,syo),e(sb,DN),e(DN,lyo),e(sb,iyo),e(y,dyo),e(y,lb),e(lb,wie),e(wie,cyo),e(lb,fyo),e(lb,GN),e(GN,myo),e(lb,gyo),e(Ve,hyo),e(Ve,ib),e(ib,pyo),e(ib,Aie),e(Aie,_yo),e(ib,uyo),e(ib,yie),e(yie,byo),e(Ve,Fyo),e(Ve,Lie),e(Lie,vyo),e(Ve,Tyo),g(tC,Ve,null),b(c,$Be,u),b(c,_d,u),e(_d,db),e(db,xie),g(aC,xie,null),e(_d,Myo),e(_d,kie),e(kie,Eyo),b(c,IBe,u),b(c,rr,u),g(nC,rr,null),e(rr,Cyo),e(rr,ud),e(ud,wyo),e(ud,ON),e(ON,Ayo),e(ud,yyo),e(ud,VN),e(VN,Lyo),e(ud,xyo),e(rr,kyo),e(rr,sC),e(sC,Syo),e(sC,Sie),e(Sie,Ryo),e(sC,Byo),e(rr,Pyo),e(rr,Jr),g(lC,Jr,null),e(Jr,$yo),e(Jr,Rie),e(Rie,Iyo),e(Jr,qyo),e(Jr,bd),e(bd,Nyo),e(bd,Bie),e(Bie,jyo),e(bd,Dyo),e(bd,XN),e(XN,Gyo),e(bd,Oyo),e(Jr,Vyo),e(Jr,Pie),e(Pie,Xyo),e(Jr,zyo),g(iC,Jr,null),e(rr,Qyo),e(rr,Xe),g(dC,Xe,null),e(Xe,Wyo),e(Xe,$ie),e($ie,Hyo),e(Xe,Uyo),e(Xe,Ja),e(Ja,Jyo),e(Ja,Iie),e(Iie,Yyo),e(Ja,Kyo),e(Ja,qie),e(qie,Zyo),e(Ja,eLo),e(Ja,Nie),e(Nie,oLo),e(Ja,rLo),e(Xe,tLo),e(Xe,G),e(G,cb),e(cb,jie),e(jie,aLo),e(cb,nLo),e(cb,zN),e(zN,sLo),e(cb,lLo),e(G,iLo),e(G,fb),e(fb,Die),e(Die,dLo),e(fb,cLo),e(fb,QN),e(QN,fLo),e(fb,mLo),e(G,gLo),e(G,mb),e(mb,Gie),e(Gie,hLo),e(mb,pLo),e(mb,WN),e(WN,_Lo),e(mb,uLo),e(G,bLo),e(G,gb),e(gb,Oie),e(Oie,FLo),e(gb,vLo),e(gb,HN),e(HN,TLo),e(gb,MLo),e(G,ELo),e(G,hb),e(hb,Vie),e(Vie,CLo),e(hb,wLo),e(hb,UN),e(UN,ALo),e(hb,yLo),e(G,LLo),e(G,pb),e(pb,Xie),e(Xie,xLo),e(pb,kLo),e(pb,JN),e(JN,SLo),e(pb,RLo),e(G,BLo),e(G,_b),e(_b,zie),e(zie,PLo),e(_b,$Lo),e(_b,YN),e(YN,ILo),e(_b,qLo),e(G,NLo),e(G,ub),e(ub,Qie),e(Qie,jLo),e(ub,DLo),e(ub,KN),e(KN,GLo),e(ub,OLo),e(G,VLo),e(G,bb),e(bb,Wie),e(Wie,XLo),e(bb,zLo),e(bb,ZN),e(ZN,QLo),e(bb,WLo),e(G,HLo),e(G,Fb),e(Fb,Hie),e(Hie,ULo),e(Fb,JLo),e(Fb,ej),e(ej,YLo),e(Fb,KLo),e(G,ZLo),e(G,vb),e(vb,Uie),e(Uie,e8o),e(vb,o8o),e(vb,oj),e(oj,r8o),e(vb,t8o),e(G,a8o),e(G,Tb),e(Tb,Jie),e(Jie,n8o),e(Tb,s8o),e(Tb,rj),e(rj,l8o),e(Tb,i8o),e(G,d8o),e(G,Mb),e(Mb,Yie),e(Yie,c8o),e(Mb,f8o),e(Mb,tj),e(tj,m8o),e(Mb,g8o),e(G,h8o),e(G,Eb),e(Eb,Kie),e(Kie,p8o),e(Eb,_8o),e(Eb,aj),e(aj,u8o),e(Eb,b8o),e(G,F8o),e(G,Cb),e(Cb,Zie),e(Zie,v8o),e(Cb,T8o),e(Cb,nj),e(nj,M8o),e(Cb,E8o),e(G,C8o),e(G,wb),e(wb,ede),e(ede,w8o),e(wb,A8o),e(wb,sj),e(sj,y8o),e(wb,L8o),e(G,x8o),e(G,Ab),e(Ab,ode),e(ode,k8o),e(Ab,S8o),e(Ab,lj),e(lj,R8o),e(Ab,B8o),e(G,P8o),e(G,yb),e(yb,rde),e(rde,$8o),e(yb,I8o),e(yb,ij),e(ij,q8o),e(yb,N8o),e(G,j8o),e(G,Lb),e(Lb,tde),e(tde,D8o),e(Lb,G8o),e(Lb,dj),e(dj,O8o),e(Lb,V8o),e(G,X8o),e(G,xb),e(xb,ade),e(ade,z8o),e(xb,Q8o),e(xb,cj),e(cj,W8o),e(xb,H8o),e(G,U8o),e(G,kb),e(kb,nde),e(nde,J8o),e(kb,Y8o),e(kb,fj),e(fj,K8o),e(kb,Z8o),e(G,exo),e(G,Sb),e(Sb,sde),e(sde,oxo),e(Sb,rxo),e(Sb,mj),e(mj,txo),e(Sb,axo),e(G,nxo),e(G,Rb),e(Rb,lde),e(lde,sxo),e(Rb,lxo),e(Rb,gj),e(gj,ixo),e(Rb,dxo),e(G,cxo),e(G,Bb),e(Bb,ide),e(ide,fxo),e(Bb,mxo),e(Bb,hj),e(hj,gxo),e(Bb,hxo),e(G,pxo),e(G,Pb),e(Pb,dde),e(dde,_xo),e(Pb,uxo),e(Pb,pj),e(pj,bxo),e(Pb,Fxo),e(G,vxo),e(G,$b),e($b,cde),e(cde,Txo),e($b,Mxo),e($b,_j),e(_j,Exo),e($b,Cxo),e(G,wxo),e(G,Ib),e(Ib,fde),e(fde,Axo),e(Ib,yxo),e(Ib,uj),e(uj,Lxo),e(Ib,xxo),e(G,kxo),e(G,qb),e(qb,mde),e(mde,Sxo),e(qb,Rxo),e(qb,bj),e(bj,Bxo),e(qb,Pxo),e(Xe,$xo),e(Xe,Nb),e(Nb,Ixo),e(Nb,gde),e(gde,qxo),e(Nb,Nxo),e(Nb,hde),e(hde,jxo),e(Xe,Dxo),e(Xe,pde),e(pde,Gxo),e(Xe,Oxo),g(cC,Xe,null),b(c,qBe,u),b(c,Fd,u),e(Fd,jb),e(jb,_de),g(fC,_de,null),e(Fd,Vxo),e(Fd,ude),e(ude,Xxo),b(c,NBe,u),b(c,tr,u),g(mC,tr,null),e(tr,zxo),e(tr,vd),e(vd,Qxo),e(vd,Fj),e(Fj,Wxo),e(vd,Hxo),e(vd,vj),e(vj,Uxo),e(vd,Jxo),e(tr,Yxo),e(tr,gC),e(gC,Kxo),e(gC,bde),e(bde,Zxo),e(gC,eko),e(tr,oko),e(tr,Yr),g(hC,Yr,null),e(Yr,rko),e(Yr,Fde),e(Fde,tko),e(Yr,ako),e(Yr,Td),e(Td,nko),e(Td,vde),e(vde,sko),e(Td,lko),e(Td,Tj),e(Tj,iko),e(Td,dko),e(Yr,cko),e(Yr,Tde),e(Tde,fko),e(Yr,mko),g(pC,Yr,null),e(tr,gko),e(tr,ze),g(_C,ze,null),e(ze,hko),e(ze,Mde),e(Mde,pko),e(ze,_ko),e(ze,Ya),e(Ya,uko),e(Ya,Ede),e(Ede,bko),e(Ya,Fko),e(Ya,Cde),e(Cde,vko),e(Ya,Tko),e(Ya,wde),e(wde,Mko),e(Ya,Eko),e(ze,Cko),e(ze,da),e(da,Db),e(Db,Ade),e(Ade,wko),e(Db,Ako),e(Db,Mj),e(Mj,yko),e(Db,Lko),e(da,xko),e(da,Gb),e(Gb,yde),e(yde,kko),e(Gb,Sko),e(Gb,Ej),e(Ej,Rko),e(Gb,Bko),e(da,Pko),e(da,Ob),e(Ob,Lde),e(Lde,$ko),e(Ob,Iko),e(Ob,Cj),e(Cj,qko),e(Ob,Nko),e(da,jko),e(da,Vb),e(Vb,xde),e(xde,Dko),e(Vb,Gko),e(Vb,wj),e(wj,Oko),e(Vb,Vko),e(da,Xko),e(da,Xb),e(Xb,kde),e(kde,zko),e(Xb,Qko),e(Xb,Aj),e(Aj,Wko),e(Xb,Hko),e(ze,Uko),e(ze,zb),e(zb,Jko),e(zb,Sde),e(Sde,Yko),e(zb,Kko),e(zb,Rde),e(Rde,Zko),e(ze,eSo),e(ze,Bde),e(Bde,oSo),e(ze,rSo),g(uC,ze,null),b(c,jBe,u),b(c,Md,u),e(Md,Qb),e(Qb,Pde),g(bC,Pde,null),e(Md,tSo),e(Md,$de),e($de,aSo),b(c,DBe,u),b(c,ar,u),g(FC,ar,null),e(ar,nSo),e(ar,Ed),e(Ed,sSo),e(Ed,yj),e(yj,lSo),e(Ed,iSo),e(Ed,Lj),e(Lj,dSo),e(Ed,cSo),e(ar,fSo),e(ar,vC),e(vC,mSo),e(vC,Ide),e(Ide,gSo),e(vC,hSo),e(ar,pSo),e(ar,Kr),g(TC,Kr,null),e(Kr,_So),e(Kr,qde),e(qde,uSo),e(Kr,bSo),e(Kr,Cd),e(Cd,FSo),e(Cd,Nde),e(Nde,vSo),e(Cd,TSo),e(Cd,xj),e(xj,MSo),e(Cd,ESo),e(Kr,CSo),e(Kr,jde),e(jde,wSo),e(Kr,ASo),g(MC,Kr,null),e(ar,ySo),e(ar,Qe),g(EC,Qe,null),e(Qe,LSo),e(Qe,Dde),e(Dde,xSo),e(Qe,kSo),e(Qe,Ka),e(Ka,SSo),e(Ka,Gde),e(Gde,RSo),e(Ka,BSo),e(Ka,Ode),e(Ode,PSo),e(Ka,$So),e(Ka,Vde),e(Vde,ISo),e(Ka,qSo),e(Qe,NSo),e(Qe,j),e(j,Wb),e(Wb,Xde),e(Xde,jSo),e(Wb,DSo),e(Wb,kj),e(kj,GSo),e(Wb,OSo),e(j,VSo),e(j,Hb),e(Hb,zde),e(zde,XSo),e(Hb,zSo),e(Hb,Sj),e(Sj,QSo),e(Hb,WSo),e(j,HSo),e(j,Ub),e(Ub,Qde),e(Qde,USo),e(Ub,JSo),e(Ub,Rj),e(Rj,YSo),e(Ub,KSo),e(j,ZSo),e(j,Jb),e(Jb,Wde),e(Wde,eRo),e(Jb,oRo),e(Jb,Bj),e(Bj,rRo),e(Jb,tRo),e(j,aRo),e(j,Yb),e(Yb,Hde),e(Hde,nRo),e(Yb,sRo),e(Yb,Pj),e(Pj,lRo),e(Yb,iRo),e(j,dRo),e(j,Kb),e(Kb,Ude),e(Ude,cRo),e(Kb,fRo),e(Kb,$j),e($j,mRo),e(Kb,gRo),e(j,hRo),e(j,Zb),e(Zb,Jde),e(Jde,pRo),e(Zb,_Ro),e(Zb,Ij),e(Ij,uRo),e(Zb,bRo),e(j,FRo),e(j,e6),e(e6,Yde),e(Yde,vRo),e(e6,TRo),e(e6,qj),e(qj,MRo),e(e6,ERo),e(j,CRo),e(j,o6),e(o6,Kde),e(Kde,wRo),e(o6,ARo),e(o6,Nj),e(Nj,yRo),e(o6,LRo),e(j,xRo),e(j,r6),e(r6,Zde),e(Zde,kRo),e(r6,SRo),e(r6,jj),e(jj,RRo),e(r6,BRo),e(j,PRo),e(j,t6),e(t6,ece),e(ece,$Ro),e(t6,IRo),e(t6,Dj),e(Dj,qRo),e(t6,NRo),e(j,jRo),e(j,a6),e(a6,oce),e(oce,DRo),e(a6,GRo),e(a6,Gj),e(Gj,ORo),e(a6,VRo),e(j,XRo),e(j,n6),e(n6,rce),e(rce,zRo),e(n6,QRo),e(n6,Oj),e(Oj,WRo),e(n6,HRo),e(j,URo),e(j,s6),e(s6,tce),e(tce,JRo),e(s6,YRo),e(s6,Vj),e(Vj,KRo),e(s6,ZRo),e(j,eBo),e(j,l6),e(l6,ace),e(ace,oBo),e(l6,rBo),e(l6,Xj),e(Xj,tBo),e(l6,aBo),e(j,nBo),e(j,i6),e(i6,nce),e(nce,sBo),e(i6,lBo),e(i6,zj),e(zj,iBo),e(i6,dBo),e(j,cBo),e(j,d6),e(d6,sce),e(sce,fBo),e(d6,mBo),e(d6,Qj),e(Qj,gBo),e(d6,hBo),e(j,pBo),e(j,c6),e(c6,lce),e(lce,_Bo),e(c6,uBo),e(c6,Wj),e(Wj,bBo),e(c6,FBo),e(j,vBo),e(j,f6),e(f6,ice),e(ice,TBo),e(f6,MBo),e(f6,Hj),e(Hj,EBo),e(f6,CBo),e(j,wBo),e(j,m6),e(m6,dce),e(dce,ABo),e(m6,yBo),e(m6,Uj),e(Uj,LBo),e(m6,xBo),e(j,kBo),e(j,g6),e(g6,cce),e(cce,SBo),e(g6,RBo),e(g6,Jj),e(Jj,BBo),e(g6,PBo),e(j,$Bo),e(j,h6),e(h6,fce),e(fce,IBo),e(h6,qBo),e(h6,Yj),e(Yj,NBo),e(h6,jBo),e(j,DBo),e(j,p6),e(p6,mce),e(mce,GBo),e(p6,OBo),e(p6,Kj),e(Kj,VBo),e(p6,XBo),e(j,zBo),e(j,_6),e(_6,gce),e(gce,QBo),e(_6,WBo),e(_6,Zj),e(Zj,HBo),e(_6,UBo),e(j,JBo),e(j,u6),e(u6,hce),e(hce,YBo),e(u6,KBo),e(u6,eD),e(eD,ZBo),e(u6,ePo),e(j,oPo),e(j,b6),e(b6,pce),e(pce,rPo),e(b6,tPo),e(b6,oD),e(oD,aPo),e(b6,nPo),e(j,sPo),e(j,F6),e(F6,_ce),e(_ce,lPo),e(F6,iPo),e(F6,rD),e(rD,dPo),e(F6,cPo),e(j,fPo),e(j,v6),e(v6,uce),e(uce,mPo),e(v6,gPo),e(v6,tD),e(tD,hPo),e(v6,pPo),e(j,_Po),e(j,T6),e(T6,bce),e(bce,uPo),e(T6,bPo),e(T6,aD),e(aD,FPo),e(T6,vPo),e(j,TPo),e(j,M6),e(M6,Fce),e(Fce,MPo),e(M6,EPo),e(M6,nD),e(nD,CPo),e(M6,wPo),e(j,APo),e(j,E6),e(E6,vce),e(vce,yPo),e(E6,LPo),e(E6,sD),e(sD,xPo),e(E6,kPo),e(j,SPo),e(j,C6),e(C6,Tce),e(Tce,RPo),e(C6,BPo),e(C6,lD),e(lD,PPo),e(C6,$Po),e(j,IPo),e(j,w6),e(w6,Mce),e(Mce,qPo),e(w6,NPo),e(w6,iD),e(iD,jPo),e(w6,DPo),e(Qe,GPo),e(Qe,A6),e(A6,OPo),e(A6,Ece),e(Ece,VPo),e(A6,XPo),e(A6,Cce),e(Cce,zPo),e(Qe,QPo),e(Qe,wce),e(wce,WPo),e(Qe,HPo),g(CC,Qe,null),b(c,GBe,u),b(c,wd,u),e(wd,y6),e(y6,Ace),g(wC,Ace,null),e(wd,UPo),e(wd,yce),e(yce,JPo),b(c,OBe,u),b(c,nr,u),g(AC,nr,null),e(nr,YPo),e(nr,Ad),e(Ad,KPo),e(Ad,dD),e(dD,ZPo),e(Ad,e$o),e(Ad,cD),e(cD,o$o),e(Ad,r$o),e(nr,t$o),e(nr,yC),e(yC,a$o),e(yC,Lce),e(Lce,n$o),e(yC,s$o),e(nr,l$o),e(nr,Zr),g(LC,Zr,null),e(Zr,i$o),e(Zr,xce),e(xce,d$o),e(Zr,c$o),e(Zr,yd),e(yd,f$o),e(yd,kce),e(kce,m$o),e(yd,g$o),e(yd,fD),e(fD,h$o),e(yd,p$o),e(Zr,_$o),e(Zr,Sce),e(Sce,u$o),e(Zr,b$o),g(xC,Zr,null),e(nr,F$o),e(nr,We),g(kC,We,null),e(We,v$o),e(We,Rce),e(Rce,T$o),e(We,M$o),e(We,Za),e(Za,E$o),e(Za,Bce),e(Bce,C$o),e(Za,w$o),e(Za,Pce),e(Pce,A$o),e(Za,y$o),e(Za,$ce),e($ce,L$o),e(Za,x$o),e(We,k$o),e(We,R),e(R,L6),e(L6,Ice),e(Ice,S$o),e(L6,R$o),e(L6,mD),e(mD,B$o),e(L6,P$o),e(R,$$o),e(R,x6),e(x6,qce),e(qce,I$o),e(x6,q$o),e(x6,gD),e(gD,N$o),e(x6,j$o),e(R,D$o),e(R,k6),e(k6,Nce),e(Nce,G$o),e(k6,O$o),e(k6,hD),e(hD,V$o),e(k6,X$o),e(R,z$o),e(R,S6),e(S6,jce),e(jce,Q$o),e(S6,W$o),e(S6,pD),e(pD,H$o),e(S6,U$o),e(R,J$o),e(R,R6),e(R6,Dce),e(Dce,Y$o),e(R6,K$o),e(R6,_D),e(_D,Z$o),e(R6,eIo),e(R,oIo),e(R,B6),e(B6,Gce),e(Gce,rIo),e(B6,tIo),e(B6,uD),e(uD,aIo),e(B6,nIo),e(R,sIo),e(R,P6),e(P6,Oce),e(Oce,lIo),e(P6,iIo),e(P6,bD),e(bD,dIo),e(P6,cIo),e(R,fIo),e(R,$6),e($6,Vce),e(Vce,mIo),e($6,gIo),e($6,FD),e(FD,hIo),e($6,pIo),e(R,_Io),e(R,I6),e(I6,Xce),e(Xce,uIo),e(I6,bIo),e(I6,vD),e(vD,FIo),e(I6,vIo),e(R,TIo),e(R,q6),e(q6,zce),e(zce,MIo),e(q6,EIo),e(q6,TD),e(TD,CIo),e(q6,wIo),e(R,AIo),e(R,N6),e(N6,Qce),e(Qce,yIo),e(N6,LIo),e(N6,MD),e(MD,xIo),e(N6,kIo),e(R,SIo),e(R,j6),e(j6,Wce),e(Wce,RIo),e(j6,BIo),e(j6,ED),e(ED,PIo),e(j6,$Io),e(R,IIo),e(R,D6),e(D6,Hce),e(Hce,qIo),e(D6,NIo),e(D6,CD),e(CD,jIo),e(D6,DIo),e(R,GIo),e(R,G6),e(G6,Uce),e(Uce,OIo),e(G6,VIo),e(G6,wD),e(wD,XIo),e(G6,zIo),e(R,QIo),e(R,O6),e(O6,Jce),e(Jce,WIo),e(O6,HIo),e(O6,AD),e(AD,UIo),e(O6,JIo),e(R,YIo),e(R,V6),e(V6,Yce),e(Yce,KIo),e(V6,ZIo),e(V6,yD),e(yD,eqo),e(V6,oqo),e(R,rqo),e(R,X6),e(X6,Kce),e(Kce,tqo),e(X6,aqo),e(X6,LD),e(LD,nqo),e(X6,sqo),e(R,lqo),e(R,z6),e(z6,Zce),e(Zce,iqo),e(z6,dqo),e(z6,xD),e(xD,cqo),e(z6,fqo),e(R,mqo),e(R,Q6),e(Q6,efe),e(efe,gqo),e(Q6,hqo),e(Q6,kD),e(kD,pqo),e(Q6,_qo),e(R,uqo),e(R,W6),e(W6,ofe),e(ofe,bqo),e(W6,Fqo),e(W6,SD),e(SD,vqo),e(W6,Tqo),e(R,Mqo),e(R,H6),e(H6,rfe),e(rfe,Eqo),e(H6,Cqo),e(H6,RD),e(RD,wqo),e(H6,Aqo),e(R,yqo),e(R,U6),e(U6,tfe),e(tfe,Lqo),e(U6,xqo),e(U6,BD),e(BD,kqo),e(U6,Sqo),e(R,Rqo),e(R,J6),e(J6,afe),e(afe,Bqo),e(J6,Pqo),e(J6,PD),e(PD,$qo),e(J6,Iqo),e(R,qqo),e(R,Y6),e(Y6,nfe),e(nfe,Nqo),e(Y6,jqo),e(Y6,$D),e($D,Dqo),e(Y6,Gqo),e(R,Oqo),e(R,K6),e(K6,sfe),e(sfe,Vqo),e(K6,Xqo),e(K6,ID),e(ID,zqo),e(K6,Qqo),e(R,Wqo),e(R,Z6),e(Z6,lfe),e(lfe,Hqo),e(Z6,Uqo),e(Z6,qD),e(qD,Jqo),e(Z6,Yqo),e(R,Kqo),e(R,eF),e(eF,ife),e(ife,Zqo),e(eF,eNo),e(eF,ND),e(ND,oNo),e(eF,rNo),e(R,tNo),e(R,oF),e(oF,dfe),e(dfe,aNo),e(oF,nNo),e(oF,jD),e(jD,sNo),e(oF,lNo),e(R,iNo),e(R,rF),e(rF,cfe),e(cfe,dNo),e(rF,cNo),e(rF,DD),e(DD,fNo),e(rF,mNo),e(R,gNo),e(R,tF),e(tF,ffe),e(ffe,hNo),e(tF,pNo),e(tF,GD),e(GD,_No),e(tF,uNo),e(R,bNo),e(R,aF),e(aF,mfe),e(mfe,FNo),e(aF,vNo),e(aF,OD),e(OD,TNo),e(aF,MNo),e(R,ENo),e(R,nF),e(nF,gfe),e(gfe,CNo),e(nF,wNo),e(nF,VD),e(VD,ANo),e(nF,yNo),e(R,LNo),e(R,sF),e(sF,hfe),e(hfe,xNo),e(sF,kNo),e(sF,XD),e(XD,SNo),e(sF,RNo),e(R,BNo),e(R,lF),e(lF,pfe),e(pfe,PNo),e(lF,$No),e(lF,zD),e(zD,INo),e(lF,qNo),e(R,NNo),e(R,iF),e(iF,_fe),e(_fe,jNo),e(iF,DNo),e(iF,QD),e(QD,GNo),e(iF,ONo),e(R,VNo),e(R,dF),e(dF,ufe),e(ufe,XNo),e(dF,zNo),e(dF,WD),e(WD,QNo),e(dF,WNo),e(R,HNo),e(R,cF),e(cF,bfe),e(bfe,UNo),e(cF,JNo),e(cF,HD),e(HD,YNo),e(cF,KNo),e(R,ZNo),e(R,fF),e(fF,Ffe),e(Ffe,ejo),e(fF,ojo),e(fF,UD),e(UD,rjo),e(fF,tjo),e(R,ajo),e(R,mF),e(mF,vfe),e(vfe,njo),e(mF,sjo),e(mF,JD),e(JD,ljo),e(mF,ijo),e(We,djo),e(We,gF),e(gF,cjo),e(gF,Tfe),e(Tfe,fjo),e(gF,mjo),e(gF,Mfe),e(Mfe,gjo),e(We,hjo),e(We,Efe),e(Efe,pjo),e(We,_jo),g(SC,We,null),b(c,VBe,u),b(c,Ld,u),e(Ld,hF),e(hF,Cfe),g(RC,Cfe,null),e(Ld,ujo),e(Ld,wfe),e(wfe,bjo),b(c,XBe,u),b(c,sr,u),g(BC,sr,null),e(sr,Fjo),e(sr,xd),e(xd,vjo),e(xd,YD),e(YD,Tjo),e(xd,Mjo),e(xd,KD),e(KD,Ejo),e(xd,Cjo),e(sr,wjo),e(sr,PC),e(PC,Ajo),e(PC,Afe),e(Afe,yjo),e(PC,Ljo),e(sr,xjo),e(sr,et),g($C,et,null),e(et,kjo),e(et,yfe),e(yfe,Sjo),e(et,Rjo),e(et,kd),e(kd,Bjo),e(kd,Lfe),e(Lfe,Pjo),e(kd,$jo),e(kd,ZD),e(ZD,Ijo),e(kd,qjo),e(et,Njo),e(et,xfe),e(xfe,jjo),e(et,Djo),g(IC,et,null),e(sr,Gjo),e(sr,He),g(qC,He,null),e(He,Ojo),e(He,kfe),e(kfe,Vjo),e(He,Xjo),e(He,en),e(en,zjo),e(en,Sfe),e(Sfe,Qjo),e(en,Wjo),e(en,Rfe),e(Rfe,Hjo),e(en,Ujo),e(en,Bfe),e(Bfe,Jjo),e(en,Yjo),e(He,Kjo),e(He,Pfe),e(Pfe,pF),e(pF,$fe),e($fe,Zjo),e(pF,eDo),e(pF,eG),e(eG,oDo),e(pF,rDo),e(He,tDo),e(He,_F),e(_F,aDo),e(_F,Ife),e(Ife,nDo),e(_F,sDo),e(_F,qfe),e(qfe,lDo),e(He,iDo),e(He,Nfe),e(Nfe,dDo),e(He,cDo),g(NC,He,null),b(c,zBe,u),b(c,Sd,u),e(Sd,uF),e(uF,jfe),g(jC,jfe,null),e(Sd,fDo),e(Sd,Dfe),e(Dfe,mDo),b(c,QBe,u),b(c,lr,u),g(DC,lr,null),e(lr,gDo),e(lr,Rd),e(Rd,hDo),e(Rd,oG),e(oG,pDo),e(Rd,_Do),e(Rd,rG),e(rG,uDo),e(Rd,bDo),e(lr,FDo),e(lr,GC),e(GC,vDo),e(GC,Gfe),e(Gfe,TDo),e(GC,MDo),e(lr,EDo),e(lr,ot),g(OC,ot,null),e(ot,CDo),e(ot,Ofe),e(Ofe,wDo),e(ot,ADo),e(ot,Bd),e(Bd,yDo),e(Bd,Vfe),e(Vfe,LDo),e(Bd,xDo),e(Bd,tG),e(tG,kDo),e(Bd,SDo),e(ot,RDo),e(ot,Xfe),e(Xfe,BDo),e(ot,PDo),g(VC,ot,null),e(lr,$Do),e(lr,Ue),g(XC,Ue,null),e(Ue,IDo),e(Ue,zfe),e(zfe,qDo),e(Ue,NDo),e(Ue,on),e(on,jDo),e(on,Qfe),e(Qfe,DDo),e(on,GDo),e(on,Wfe),e(Wfe,ODo),e(on,VDo),e(on,Hfe),e(Hfe,XDo),e(on,zDo),e(Ue,QDo),e(Ue,de),e(de,bF),e(bF,Ufe),e(Ufe,WDo),e(bF,HDo),e(bF,aG),e(aG,UDo),e(bF,JDo),e(de,YDo),e(de,FF),e(FF,Jfe),e(Jfe,KDo),e(FF,ZDo),e(FF,nG),e(nG,eGo),e(FF,oGo),e(de,rGo),e(de,vF),e(vF,Yfe),e(Yfe,tGo),e(vF,aGo),e(vF,sG),e(sG,nGo),e(vF,sGo),e(de,lGo),e(de,Os),e(Os,Kfe),e(Kfe,iGo),e(Os,dGo),e(Os,lG),e(lG,cGo),e(Os,fGo),e(Os,iG),e(iG,mGo),e(Os,gGo),e(de,hGo),e(de,TF),e(TF,Zfe),e(Zfe,pGo),e(TF,_Go),e(TF,dG),e(dG,uGo),e(TF,bGo),e(de,FGo),e(de,ma),e(ma,eme),e(eme,vGo),e(ma,TGo),e(ma,cG),e(cG,MGo),e(ma,EGo),e(ma,fG),e(fG,CGo),e(ma,wGo),e(ma,mG),e(mG,AGo),e(ma,yGo),e(de,LGo),e(de,MF),e(MF,ome),e(ome,xGo),e(MF,kGo),e(MF,gG),e(gG,SGo),e(MF,RGo),e(de,BGo),e(de,EF),e(EF,rme),e(rme,PGo),e(EF,$Go),e(EF,hG),e(hG,IGo),e(EF,qGo),e(de,NGo),e(de,CF),e(CF,tme),e(tme,jGo),e(CF,DGo),e(CF,pG),e(pG,GGo),e(CF,OGo),e(de,VGo),e(de,wF),e(wF,ame),e(ame,XGo),e(wF,zGo),e(wF,_G),e(_G,QGo),e(wF,WGo),e(de,HGo),e(de,AF),e(AF,nme),e(nme,UGo),e(AF,JGo),e(AF,uG),e(uG,YGo),e(AF,KGo),e(de,ZGo),e(de,yF),e(yF,sme),e(sme,eOo),e(yF,oOo),e(yF,bG),e(bG,rOo),e(yF,tOo),e(de,aOo),e(de,LF),e(LF,lme),e(lme,nOo),e(LF,sOo),e(LF,FG),e(FG,lOo),e(LF,iOo),e(Ue,dOo),e(Ue,xF),e(xF,cOo),e(xF,ime),e(ime,fOo),e(xF,mOo),e(xF,dme),e(dme,gOo),e(Ue,hOo),e(Ue,cme),e(cme,pOo),e(Ue,_Oo),g(zC,Ue,null),b(c,WBe,u),b(c,Pd,u),e(Pd,kF),e(kF,fme),g(QC,fme,null),e(Pd,uOo),e(Pd,mme),e(mme,bOo),b(c,HBe,u),b(c,ir,u),g(WC,ir,null),e(ir,FOo),e(ir,$d),e($d,vOo),e($d,vG),e(vG,TOo),e($d,MOo),e($d,TG),e(TG,EOo),e($d,COo),e(ir,wOo),e(ir,HC),e(HC,AOo),e(HC,gme),e(gme,yOo),e(HC,LOo),e(ir,xOo),e(ir,rt),g(UC,rt,null),e(rt,kOo),e(rt,hme),e(hme,SOo),e(rt,ROo),e(rt,Id),e(Id,BOo),e(Id,pme),e(pme,POo),e(Id,$Oo),e(Id,MG),e(MG,IOo),e(Id,qOo),e(rt,NOo),e(rt,_me),e(_me,jOo),e(rt,DOo),g(JC,rt,null),e(ir,GOo),e(ir,Je),g(YC,Je,null),e(Je,OOo),e(Je,ume),e(ume,VOo),e(Je,XOo),e(Je,rn),e(rn,zOo),e(rn,bme),e(bme,QOo),e(rn,WOo),e(rn,Fme),e(Fme,HOo),e(rn,UOo),e(rn,vme),e(vme,JOo),e(rn,YOo),e(Je,KOo),e(Je,Tme),e(Tme,SF),e(SF,Mme),e(Mme,ZOo),e(SF,eVo),e(SF,EG),e(EG,oVo),e(SF,rVo),e(Je,tVo),e(Je,RF),e(RF,aVo),e(RF,Eme),e(Eme,nVo),e(RF,sVo),e(RF,Cme),e(Cme,lVo),e(Je,iVo),e(Je,wme),e(wme,dVo),e(Je,cVo),g(KC,Je,null),b(c,UBe,u),b(c,qd,u),e(qd,BF),e(BF,Ame),g(ZC,Ame,null),e(qd,fVo),e(qd,yme),e(yme,mVo),b(c,JBe,u),b(c,dr,u),g(ew,dr,null),e(dr,gVo),e(dr,Nd),e(Nd,hVo),e(Nd,CG),e(CG,pVo),e(Nd,_Vo),e(Nd,wG),e(wG,uVo),e(Nd,bVo),e(dr,FVo),e(dr,ow),e(ow,vVo),e(ow,Lme),e(Lme,TVo),e(ow,MVo),e(dr,EVo),e(dr,tt),g(rw,tt,null),e(tt,CVo),e(tt,xme),e(xme,wVo),e(tt,AVo),e(tt,jd),e(jd,yVo),e(jd,kme),e(kme,LVo),e(jd,xVo),e(jd,AG),e(AG,kVo),e(jd,SVo),e(tt,RVo),e(tt,Sme),e(Sme,BVo),e(tt,PVo),g(tw,tt,null),e(dr,$Vo),e(dr,Ye),g(aw,Ye,null),e(Ye,IVo),e(Ye,Rme),e(Rme,qVo),e(Ye,NVo),e(Ye,tn),e(tn,jVo),e(tn,Bme),e(Bme,DVo),e(tn,GVo),e(tn,Pme),e(Pme,OVo),e(tn,VVo),e(tn,$me),e($me,XVo),e(tn,zVo),e(Ye,QVo),e(Ye,Re),e(Re,PF),e(PF,Ime),e(Ime,WVo),e(PF,HVo),e(PF,yG),e(yG,UVo),e(PF,JVo),e(Re,YVo),e(Re,$F),e($F,qme),e(qme,KVo),e($F,ZVo),e($F,LG),e(LG,eXo),e($F,oXo),e(Re,rXo),e(Re,IF),e(IF,Nme),e(Nme,tXo),e(IF,aXo),e(IF,xG),e(xG,nXo),e(IF,sXo),e(Re,lXo),e(Re,qF),e(qF,jme),e(jme,iXo),e(qF,dXo),e(qF,kG),e(kG,cXo),e(qF,fXo),e(Re,mXo),e(Re,NF),e(NF,Dme),e(Dme,gXo),e(NF,hXo),e(NF,SG),e(SG,pXo),e(NF,_Xo),e(Re,uXo),e(Re,jF),e(jF,Gme),e(Gme,bXo),e(jF,FXo),e(jF,RG),e(RG,vXo),e(jF,TXo),e(Re,MXo),e(Re,DF),e(DF,Ome),e(Ome,EXo),e(DF,CXo),e(DF,BG),e(BG,wXo),e(DF,AXo),e(Re,yXo),e(Re,GF),e(GF,Vme),e(Vme,LXo),e(GF,xXo),e(GF,PG),e(PG,kXo),e(GF,SXo),e(Ye,RXo),e(Ye,OF),e(OF,BXo),e(OF,Xme),e(Xme,PXo),e(OF,$Xo),e(OF,zme),e(zme,IXo),e(Ye,qXo),e(Ye,Qme),e(Qme,NXo),e(Ye,jXo),g(nw,Ye,null),b(c,YBe,u),b(c,Dd,u),e(Dd,VF),e(VF,Wme),g(sw,Wme,null),e(Dd,DXo),e(Dd,Hme),e(Hme,GXo),b(c,KBe,u),b(c,cr,u),g(lw,cr,null),e(cr,OXo),e(cr,Gd),e(Gd,VXo),e(Gd,$G),e($G,XXo),e(Gd,zXo),e(Gd,IG),e(IG,QXo),e(Gd,WXo),e(cr,HXo),e(cr,iw),e(iw,UXo),e(iw,Ume),e(Ume,JXo),e(iw,YXo),e(cr,KXo),e(cr,at),g(dw,at,null),e(at,ZXo),e(at,Jme),e(Jme,ezo),e(at,ozo),e(at,Od),e(Od,rzo),e(Od,Yme),e(Yme,tzo),e(Od,azo),e(Od,qG),e(qG,nzo),e(Od,szo),e(at,lzo),e(at,Kme),e(Kme,izo),e(at,dzo),g(cw,at,null),e(cr,czo),e(cr,Ke),g(fw,Ke,null),e(Ke,fzo),e(Ke,Zme),e(Zme,mzo),e(Ke,gzo),e(Ke,an),e(an,hzo),e(an,ege),e(ege,pzo),e(an,_zo),e(an,oge),e(oge,uzo),e(an,bzo),e(an,rge),e(rge,Fzo),e(an,vzo),e(Ke,Tzo),e(Ke,nn),e(nn,XF),e(XF,tge),e(tge,Mzo),e(XF,Ezo),e(XF,NG),e(NG,Czo),e(XF,wzo),e(nn,Azo),e(nn,zF),e(zF,age),e(age,yzo),e(zF,Lzo),e(zF,jG),e(jG,xzo),e(zF,kzo),e(nn,Szo),e(nn,QF),e(QF,nge),e(nge,Rzo),e(QF,Bzo),e(QF,DG),e(DG,Pzo),e(QF,$zo),e(nn,Izo),e(nn,WF),e(WF,sge),e(sge,qzo),e(WF,Nzo),e(WF,GG),e(GG,jzo),e(WF,Dzo),e(Ke,Gzo),e(Ke,HF),e(HF,Ozo),e(HF,lge),e(lge,Vzo),e(HF,Xzo),e(HF,ige),e(ige,zzo),e(Ke,Qzo),e(Ke,dge),e(dge,Wzo),e(Ke,Hzo),g(mw,Ke,null),b(c,ZBe,u),b(c,Vd,u),e(Vd,UF),e(UF,cge),g(gw,cge,null),e(Vd,Uzo),e(Vd,fge),e(fge,Jzo),b(c,ePe,u),b(c,fr,u),g(hw,fr,null),e(fr,Yzo),e(fr,Xd),e(Xd,Kzo),e(Xd,OG),e(OG,Zzo),e(Xd,eQo),e(Xd,VG),e(VG,oQo),e(Xd,rQo),e(fr,tQo),e(fr,pw),e(pw,aQo),e(pw,mge),e(mge,nQo),e(pw,sQo),e(fr,lQo),e(fr,nt),g(_w,nt,null),e(nt,iQo),e(nt,gge),e(gge,dQo),e(nt,cQo),e(nt,zd),e(zd,fQo),e(zd,hge),e(hge,mQo),e(zd,gQo),e(zd,XG),e(XG,hQo),e(zd,pQo),e(nt,_Qo),e(nt,pge),e(pge,uQo),e(nt,bQo),g(uw,nt,null),e(fr,FQo),e(fr,Ze),g(bw,Ze,null),e(Ze,vQo),e(Ze,_ge),e(_ge,TQo),e(Ze,MQo),e(Ze,sn),e(sn,EQo),e(sn,uge),e(uge,CQo),e(sn,wQo),e(sn,bge),e(bge,AQo),e(sn,yQo),e(sn,Fge),e(Fge,LQo),e(sn,xQo),e(Ze,kQo),e(Ze,Be),e(Be,JF),e(JF,vge),e(vge,SQo),e(JF,RQo),e(JF,zG),e(zG,BQo),e(JF,PQo),e(Be,$Qo),e(Be,YF),e(YF,Tge),e(Tge,IQo),e(YF,qQo),e(YF,QG),e(QG,NQo),e(YF,jQo),e(Be,DQo),e(Be,KF),e(KF,Mge),e(Mge,GQo),e(KF,OQo),e(KF,WG),e(WG,VQo),e(KF,XQo),e(Be,zQo),e(Be,ZF),e(ZF,Ege),e(Ege,QQo),e(ZF,WQo),e(ZF,HG),e(HG,HQo),e(ZF,UQo),e(Be,JQo),e(Be,ev),e(ev,Cge),e(Cge,YQo),e(ev,KQo),e(ev,UG),e(UG,ZQo),e(ev,eWo),e(Be,oWo),e(Be,ov),e(ov,wge),e(wge,rWo),e(ov,tWo),e(ov,JG),e(JG,aWo),e(ov,nWo),e(Be,sWo),e(Be,rv),e(rv,Age),e(Age,lWo),e(rv,iWo),e(rv,YG),e(YG,dWo),e(rv,cWo),e(Be,fWo),e(Be,tv),e(tv,yge),e(yge,mWo),e(tv,gWo),e(tv,KG),e(KG,hWo),e(tv,pWo),e(Ze,_Wo),e(Ze,av),e(av,uWo),e(av,Lge),e(Lge,bWo),e(av,FWo),e(av,xge),e(xge,vWo),e(Ze,TWo),e(Ze,kge),e(kge,MWo),e(Ze,EWo),g(Fw,Ze,null),b(c,oPe,u),b(c,Qd,u),e(Qd,nv),e(nv,Sge),g(vw,Sge,null),e(Qd,CWo),e(Qd,Rge),e(Rge,wWo),b(c,rPe,u),b(c,mr,u),g(Tw,mr,null),e(mr,AWo),e(mr,Wd),e(Wd,yWo),e(Wd,ZG),e(ZG,LWo),e(Wd,xWo),e(Wd,eO),e(eO,kWo),e(Wd,SWo),e(mr,RWo),e(mr,Mw),e(Mw,BWo),e(Mw,Bge),e(Bge,PWo),e(Mw,$Wo),e(mr,IWo),e(mr,st),g(Ew,st,null),e(st,qWo),e(st,Pge),e(Pge,NWo),e(st,jWo),e(st,Hd),e(Hd,DWo),e(Hd,$ge),e($ge,GWo),e(Hd,OWo),e(Hd,oO),e(oO,VWo),e(Hd,XWo),e(st,zWo),e(st,Ige),e(Ige,QWo),e(st,WWo),g(Cw,st,null),e(mr,HWo),e(mr,eo),g(ww,eo,null),e(eo,UWo),e(eo,qge),e(qge,JWo),e(eo,YWo),e(eo,ln),e(ln,KWo),e(ln,Nge),e(Nge,ZWo),e(ln,eHo),e(ln,jge),e(jge,oHo),e(ln,rHo),e(ln,Dge),e(Dge,tHo),e(ln,aHo),e(eo,nHo),e(eo,Aw),e(Aw,sv),e(sv,Gge),e(Gge,sHo),e(sv,lHo),e(sv,rO),e(rO,iHo),e(sv,dHo),e(Aw,cHo),e(Aw,lv),e(lv,Oge),e(Oge,fHo),e(lv,mHo),e(lv,tO),e(tO,gHo),e(lv,hHo),e(eo,pHo),e(eo,iv),e(iv,_Ho),e(iv,Vge),e(Vge,uHo),e(iv,bHo),e(iv,Xge),e(Xge,FHo),e(eo,vHo),e(eo,zge),e(zge,THo),e(eo,MHo),g(yw,eo,null),b(c,tPe,u),b(c,Ud,u),e(Ud,dv),e(dv,Qge),g(Lw,Qge,null),e(Ud,EHo),e(Ud,Wge),e(Wge,CHo),b(c,aPe,u),b(c,gr,u),g(xw,gr,null),e(gr,wHo),e(gr,Jd),e(Jd,AHo),e(Jd,aO),e(aO,yHo),e(Jd,LHo),e(Jd,nO),e(nO,xHo),e(Jd,kHo),e(gr,SHo),e(gr,kw),e(kw,RHo),e(kw,Hge),e(Hge,BHo),e(kw,PHo),e(gr,$Ho),e(gr,lt),g(Sw,lt,null),e(lt,IHo),e(lt,Uge),e(Uge,qHo),e(lt,NHo),e(lt,Yd),e(Yd,jHo),e(Yd,Jge),e(Jge,DHo),e(Yd,GHo),e(Yd,sO),e(sO,OHo),e(Yd,VHo),e(lt,XHo),e(lt,Yge),e(Yge,zHo),e(lt,QHo),g(Rw,lt,null),e(gr,WHo),e(gr,oo),g(Bw,oo,null),e(oo,HHo),e(oo,Kge),e(Kge,UHo),e(oo,JHo),e(oo,dn),e(dn,YHo),e(dn,Zge),e(Zge,KHo),e(dn,ZHo),e(dn,ehe),e(ehe,eUo),e(dn,oUo),e(dn,ohe),e(ohe,rUo),e(dn,tUo),e(oo,aUo),e(oo,cn),e(cn,cv),e(cv,rhe),e(rhe,nUo),e(cv,sUo),e(cv,lO),e(lO,lUo),e(cv,iUo),e(cn,dUo),e(cn,fv),e(fv,the),e(the,cUo),e(fv,fUo),e(fv,iO),e(iO,mUo),e(fv,gUo),e(cn,hUo),e(cn,mv),e(mv,ahe),e(ahe,pUo),e(mv,_Uo),e(mv,dO),e(dO,uUo),e(mv,bUo),e(cn,FUo),e(cn,gv),e(gv,nhe),e(nhe,vUo),e(gv,TUo),e(gv,cO),e(cO,MUo),e(gv,EUo),e(oo,CUo),e(oo,hv),e(hv,wUo),e(hv,she),e(she,AUo),e(hv,yUo),e(hv,lhe),e(lhe,LUo),e(oo,xUo),e(oo,ihe),e(ihe,kUo),e(oo,SUo),g(Pw,oo,null),b(c,nPe,u),b(c,Kd,u),e(Kd,pv),e(pv,dhe),g($w,dhe,null),e(Kd,RUo),e(Kd,che),e(che,BUo),b(c,sPe,u),b(c,hr,u),g(Iw,hr,null),e(hr,PUo),e(hr,Zd),e(Zd,$Uo),e(Zd,fO),e(fO,IUo),e(Zd,qUo),e(Zd,mO),e(mO,NUo),e(Zd,jUo),e(hr,DUo),e(hr,qw),e(qw,GUo),e(qw,fhe),e(fhe,OUo),e(qw,VUo),e(hr,XUo),e(hr,it),g(Nw,it,null),e(it,zUo),e(it,mhe),e(mhe,QUo),e(it,WUo),e(it,ec),e(ec,HUo),e(ec,ghe),e(ghe,UUo),e(ec,JUo),e(ec,gO),e(gO,YUo),e(ec,KUo),e(it,ZUo),e(it,hhe),e(hhe,eJo),e(it,oJo),g(jw,it,null),e(hr,rJo),e(hr,ro),g(Dw,ro,null),e(ro,tJo),e(ro,phe),e(phe,aJo),e(ro,nJo),e(ro,fn),e(fn,sJo),e(fn,_he),e(_he,lJo),e(fn,iJo),e(fn,uhe),e(uhe,dJo),e(fn,cJo),e(fn,bhe),e(bhe,fJo),e(fn,mJo),e(ro,gJo),e(ro,oc),e(oc,_v),e(_v,Fhe),e(Fhe,hJo),e(_v,pJo),e(_v,hO),e(hO,_Jo),e(_v,uJo),e(oc,bJo),e(oc,uv),e(uv,vhe),e(vhe,FJo),e(uv,vJo),e(uv,pO),e(pO,TJo),e(uv,MJo),e(oc,EJo),e(oc,bv),e(bv,The),e(The,CJo),e(bv,wJo),e(bv,_O),e(_O,AJo),e(bv,yJo),e(ro,LJo),e(ro,Fv),e(Fv,xJo),e(Fv,Mhe),e(Mhe,kJo),e(Fv,SJo),e(Fv,Ehe),e(Ehe,RJo),e(ro,BJo),e(ro,Che),e(Che,PJo),e(ro,$Jo),g(Gw,ro,null),b(c,lPe,u),b(c,rc,u),e(rc,vv),e(vv,whe),g(Ow,whe,null),e(rc,IJo),e(rc,Ahe),e(Ahe,qJo),b(c,iPe,u),b(c,pr,u),g(Vw,pr,null),e(pr,NJo),e(pr,tc),e(tc,jJo),e(tc,uO),e(uO,DJo),e(tc,GJo),e(tc,bO),e(bO,OJo),e(tc,VJo),e(pr,XJo),e(pr,Xw),e(Xw,zJo),e(Xw,yhe),e(yhe,QJo),e(Xw,WJo),e(pr,HJo),e(pr,dt),g(zw,dt,null),e(dt,UJo),e(dt,Lhe),e(Lhe,JJo),e(dt,YJo),e(dt,ac),e(ac,KJo),e(ac,xhe),e(xhe,ZJo),e(ac,eYo),e(ac,FO),e(FO,oYo),e(ac,rYo),e(dt,tYo),e(dt,khe),e(khe,aYo),e(dt,nYo),g(Qw,dt,null),e(pr,sYo),e(pr,to),g(Ww,to,null),e(to,lYo),e(to,She),e(She,iYo),e(to,dYo),e(to,mn),e(mn,cYo),e(mn,Rhe),e(Rhe,fYo),e(mn,mYo),e(mn,Bhe),e(Bhe,gYo),e(mn,hYo),e(mn,Phe),e(Phe,pYo),e(mn,_Yo),e(to,uYo),e(to,$he),e($he,Tv),e(Tv,Ihe),e(Ihe,bYo),e(Tv,FYo),e(Tv,vO),e(vO,vYo),e(Tv,TYo),e(to,MYo),e(to,Mv),e(Mv,EYo),e(Mv,qhe),e(qhe,CYo),e(Mv,wYo),e(Mv,Nhe),e(Nhe,AYo),e(to,yYo),e(to,jhe),e(jhe,LYo),e(to,xYo),g(Hw,to,null),b(c,dPe,u),b(c,nc,u),e(nc,Ev),e(Ev,Dhe),g(Uw,Dhe,null),e(nc,kYo),e(nc,Ghe),e(Ghe,SYo),b(c,cPe,u),b(c,_r,u),g(Jw,_r,null),e(_r,RYo),e(_r,sc),e(sc,BYo),e(sc,TO),e(TO,PYo),e(sc,$Yo),e(sc,MO),e(MO,IYo),e(sc,qYo),e(_r,NYo),e(_r,Yw),e(Yw,jYo),e(Yw,Ohe),e(Ohe,DYo),e(Yw,GYo),e(_r,OYo),e(_r,ct),g(Kw,ct,null),e(ct,VYo),e(ct,Vhe),e(Vhe,XYo),e(ct,zYo),e(ct,lc),e(lc,QYo),e(lc,Xhe),e(Xhe,WYo),e(lc,HYo),e(lc,EO),e(EO,UYo),e(lc,JYo),e(ct,YYo),e(ct,zhe),e(zhe,KYo),e(ct,ZYo),g(Zw,ct,null),e(_r,eKo),e(_r,ao),g(eA,ao,null),e(ao,oKo),e(ao,Qhe),e(Qhe,rKo),e(ao,tKo),e(ao,gn),e(gn,aKo),e(gn,Whe),e(Whe,nKo),e(gn,sKo),e(gn,Hhe),e(Hhe,lKo),e(gn,iKo),e(gn,Uhe),e(Uhe,dKo),e(gn,cKo),e(ao,fKo),e(ao,Jhe),e(Jhe,Cv),e(Cv,Yhe),e(Yhe,mKo),e(Cv,gKo),e(Cv,CO),e(CO,hKo),e(Cv,pKo),e(ao,_Ko),e(ao,wv),e(wv,uKo),e(wv,Khe),e(Khe,bKo),e(wv,FKo),e(wv,Zhe),e(Zhe,vKo),e(ao,TKo),e(ao,epe),e(epe,MKo),e(ao,EKo),g(oA,ao,null),b(c,fPe,u),b(c,ic,u),e(ic,Av),e(Av,ope),g(rA,ope,null),e(ic,CKo),e(ic,rpe),e(rpe,wKo),b(c,mPe,u),b(c,ur,u),g(tA,ur,null),e(ur,AKo),e(ur,dc),e(dc,yKo),e(dc,wO),e(wO,LKo),e(dc,xKo),e(dc,AO),e(AO,kKo),e(dc,SKo),e(ur,RKo),e(ur,aA),e(aA,BKo),e(aA,tpe),e(tpe,PKo),e(aA,$Ko),e(ur,IKo),e(ur,ft),g(nA,ft,null),e(ft,qKo),e(ft,ape),e(ape,NKo),e(ft,jKo),e(ft,cc),e(cc,DKo),e(cc,npe),e(npe,GKo),e(cc,OKo),e(cc,yO),e(yO,VKo),e(cc,XKo),e(ft,zKo),e(ft,spe),e(spe,QKo),e(ft,WKo),g(sA,ft,null),e(ur,HKo),e(ur,no),g(lA,no,null),e(no,UKo),e(no,lpe),e(lpe,JKo),e(no,YKo),e(no,hn),e(hn,KKo),e(hn,ipe),e(ipe,ZKo),e(hn,eZo),e(hn,dpe),e(dpe,oZo),e(hn,rZo),e(hn,cpe),e(cpe,tZo),e(hn,aZo),e(no,nZo),e(no,pn),e(pn,yv),e(yv,fpe),e(fpe,sZo),e(yv,lZo),e(yv,LO),e(LO,iZo),e(yv,dZo),e(pn,cZo),e(pn,Lv),e(Lv,mpe),e(mpe,fZo),e(Lv,mZo),e(Lv,xO),e(xO,gZo),e(Lv,hZo),e(pn,pZo),e(pn,xv),e(xv,gpe),e(gpe,_Zo),e(xv,uZo),e(xv,kO),e(kO,bZo),e(xv,FZo),e(pn,vZo),e(pn,kv),e(kv,hpe),e(hpe,TZo),e(kv,MZo),e(kv,SO),e(SO,EZo),e(kv,CZo),e(no,wZo),e(no,Sv),e(Sv,AZo),e(Sv,ppe),e(ppe,yZo),e(Sv,LZo),e(Sv,_pe),e(_pe,xZo),e(no,kZo),e(no,upe),e(upe,SZo),e(no,RZo),g(iA,no,null),b(c,gPe,u),b(c,fc,u),e(fc,Rv),e(Rv,bpe),g(dA,bpe,null),e(fc,BZo),e(fc,Fpe),e(Fpe,PZo),b(c,hPe,u),b(c,br,u),g(cA,br,null),e(br,$Zo),e(br,mc),e(mc,IZo),e(mc,RO),e(RO,qZo),e(mc,NZo),e(mc,BO),e(BO,jZo),e(mc,DZo),e(br,GZo),e(br,fA),e(fA,OZo),e(fA,vpe),e(vpe,VZo),e(fA,XZo),e(br,zZo),e(br,mt),g(mA,mt,null),e(mt,QZo),e(mt,Tpe),e(Tpe,WZo),e(mt,HZo),e(mt,gc),e(gc,UZo),e(gc,Mpe),e(Mpe,JZo),e(gc,YZo),e(gc,PO),e(PO,KZo),e(gc,ZZo),e(mt,eer),e(mt,Epe),e(Epe,oer),e(mt,rer),g(gA,mt,null),e(br,ter),e(br,so),g(hA,so,null),e(so,aer),e(so,Cpe),e(Cpe,ner),e(so,ser),e(so,_n),e(_n,ler),e(_n,wpe),e(wpe,ier),e(_n,der),e(_n,Ape),e(Ape,cer),e(_n,fer),e(_n,ype),e(ype,mer),e(_n,ger),e(so,her),e(so,Lpe),e(Lpe,Bv),e(Bv,xpe),e(xpe,per),e(Bv,_er),e(Bv,$O),e($O,uer),e(Bv,ber),e(so,Fer),e(so,Pv),e(Pv,ver),e(Pv,kpe),e(kpe,Ter),e(Pv,Mer),e(Pv,Spe),e(Spe,Eer),e(so,Cer),e(so,Rpe),e(Rpe,wer),e(so,Aer),g(pA,so,null),b(c,pPe,u),b(c,hc,u),e(hc,$v),e($v,Bpe),g(_A,Bpe,null),e(hc,yer),e(hc,Ppe),e(Ppe,Ler),b(c,_Pe,u),b(c,Fr,u),g(uA,Fr,null),e(Fr,xer),e(Fr,pc),e(pc,ker),e(pc,IO),e(IO,Ser),e(pc,Rer),e(pc,qO),e(qO,Ber),e(pc,Per),e(Fr,$er),e(Fr,bA),e(bA,Ier),e(bA,$pe),e($pe,qer),e(bA,Ner),e(Fr,jer),e(Fr,gt),g(FA,gt,null),e(gt,Der),e(gt,Ipe),e(Ipe,Ger),e(gt,Oer),e(gt,_c),e(_c,Ver),e(_c,qpe),e(qpe,Xer),e(_c,zer),e(_c,NO),e(NO,Qer),e(_c,Wer),e(gt,Her),e(gt,Npe),e(Npe,Uer),e(gt,Jer),g(vA,gt,null),e(Fr,Yer),e(Fr,ho),g(TA,ho,null),e(ho,Ker),e(ho,jpe),e(jpe,Zer),e(ho,eor),e(ho,un),e(un,oor),e(un,Dpe),e(Dpe,ror),e(un,tor),e(un,Gpe),e(Gpe,aor),e(un,nor),e(un,Ope),e(Ope,sor),e(un,lor),e(ho,ior),e(ho,x),e(x,Iv),e(Iv,Vpe),e(Vpe,dor),e(Iv,cor),e(Iv,jO),e(jO,mor),e(Iv,gor),e(x,hor),e(x,qv),e(qv,Xpe),e(Xpe,por),e(qv,_or),e(qv,DO),e(DO,uor),e(qv,bor),e(x,For),e(x,Nv),e(Nv,zpe),e(zpe,vor),e(Nv,Tor),e(Nv,GO),e(GO,Mor),e(Nv,Eor),e(x,Cor),e(x,jv),e(jv,Qpe),e(Qpe,wor),e(jv,Aor),e(jv,OO),e(OO,yor),e(jv,Lor),e(x,xor),e(x,Dv),e(Dv,Wpe),e(Wpe,kor),e(Dv,Sor),e(Dv,VO),e(VO,Ror),e(Dv,Bor),e(x,Por),e(x,Gv),e(Gv,Hpe),e(Hpe,$or),e(Gv,Ior),e(Gv,XO),e(XO,qor),e(Gv,Nor),e(x,jor),e(x,Ov),e(Ov,Upe),e(Upe,Dor),e(Ov,Gor),e(Ov,zO),e(zO,Oor),e(Ov,Vor),e(x,Xor),e(x,Vv),e(Vv,Jpe),e(Jpe,zor),e(Vv,Qor),e(Vv,QO),e(QO,Wor),e(Vv,Hor),e(x,Uor),e(x,Xv),e(Xv,Ype),e(Ype,Jor),e(Xv,Yor),e(Xv,WO),e(WO,Kor),e(Xv,Zor),e(x,err),e(x,zv),e(zv,Kpe),e(Kpe,orr),e(zv,rrr),e(zv,HO),e(HO,trr),e(zv,arr),e(x,nrr),e(x,Qv),e(Qv,Zpe),e(Zpe,srr),e(Qv,lrr),e(Qv,UO),e(UO,irr),e(Qv,drr),e(x,crr),e(x,Wv),e(Wv,e_e),e(e_e,frr),e(Wv,mrr),e(Wv,JO),e(JO,grr),e(Wv,hrr),e(x,prr),e(x,Hv),e(Hv,o_e),e(o_e,_rr),e(Hv,urr),e(Hv,YO),e(YO,brr),e(Hv,Frr),e(x,vrr),e(x,Uv),e(Uv,r_e),e(r_e,Trr),e(Uv,Mrr),e(Uv,KO),e(KO,Err),e(Uv,Crr),e(x,wrr),e(x,Jv),e(Jv,t_e),e(t_e,Arr),e(Jv,yrr),e(Jv,ZO),e(ZO,Lrr),e(Jv,xrr),e(x,krr),e(x,Yv),e(Yv,a_e),e(a_e,Srr),e(Yv,Rrr),e(Yv,eV),e(eV,Brr),e(Yv,Prr),e(x,$rr),e(x,Vs),e(Vs,n_e),e(n_e,Irr),e(Vs,qrr),e(Vs,oV),e(oV,Nrr),e(Vs,jrr),e(Vs,rV),e(rV,Drr),e(Vs,Grr),e(x,Orr),e(x,Kv),e(Kv,s_e),e(s_e,Vrr),e(Kv,Xrr),e(Kv,tV),e(tV,zrr),e(Kv,Qrr),e(x,Wrr),e(x,Zv),e(Zv,l_e),e(l_e,Hrr),e(Zv,Urr),e(Zv,aV),e(aV,Jrr),e(Zv,Yrr),e(x,Krr),e(x,eT),e(eT,i_e),e(i_e,Zrr),e(eT,etr),e(eT,nV),e(nV,otr),e(eT,rtr),e(x,ttr),e(x,oT),e(oT,d_e),e(d_e,atr),e(oT,ntr),e(oT,sV),e(sV,str),e(oT,ltr),e(x,itr),e(x,rT),e(rT,c_e),e(c_e,dtr),e(rT,ctr),e(rT,lV),e(lV,ftr),e(rT,mtr),e(x,gtr),e(x,tT),e(tT,f_e),e(f_e,htr),e(tT,ptr),e(tT,iV),e(iV,_tr),e(tT,utr),e(x,btr),e(x,aT),e(aT,m_e),e(m_e,Ftr),e(aT,vtr),e(aT,dV),e(dV,Ttr),e(aT,Mtr),e(x,Etr),e(x,nT),e(nT,g_e),e(g_e,Ctr),e(nT,wtr),e(nT,cV),e(cV,Atr),e(nT,ytr),e(x,Ltr),e(x,sT),e(sT,h_e),e(h_e,xtr),e(sT,ktr),e(sT,fV),e(fV,Str),e(sT,Rtr),e(x,Btr),e(x,lT),e(lT,p_e),e(p_e,Ptr),e(lT,$tr),e(lT,mV),e(mV,Itr),e(lT,qtr),e(x,Ntr),e(x,iT),e(iT,__e),e(__e,jtr),e(iT,Dtr),e(iT,gV),e(gV,Gtr),e(iT,Otr),e(x,Vtr),e(x,dT),e(dT,u_e),e(u_e,Xtr),e(dT,ztr),e(dT,hV),e(hV,Qtr),e(dT,Wtr),e(x,Htr),e(x,cT),e(cT,b_e),e(b_e,Utr),e(cT,Jtr),e(cT,pV),e(pV,Ytr),e(cT,Ktr),e(x,Ztr),e(x,fT),e(fT,F_e),e(F_e,ear),e(fT,oar),e(fT,_V),e(_V,rar),e(fT,tar),e(x,aar),e(x,mT),e(mT,v_e),e(v_e,nar),e(mT,sar),e(mT,uV),e(uV,lar),e(mT,iar),e(x,dar),e(x,gT),e(gT,T_e),e(T_e,car),e(gT,far),e(gT,bV),e(bV,mar),e(gT,gar),e(x,har),e(x,hT),e(hT,M_e),e(M_e,par),e(hT,_ar),e(hT,FV),e(FV,uar),e(hT,bar),e(x,Far),e(x,pT),e(pT,E_e),e(E_e,Tar),e(pT,Mar),e(pT,vV),e(vV,Ear),e(pT,Car),e(x,war),e(x,_T),e(_T,C_e),e(C_e,Aar),e(_T,yar),e(_T,TV),e(TV,Lar),e(_T,xar),e(x,kar),e(x,uT),e(uT,w_e),e(w_e,Sar),e(uT,Rar),e(uT,MV),e(MV,Bar),e(uT,Par),e(x,$ar),e(x,bT),e(bT,A_e),e(A_e,Iar),e(bT,qar),e(bT,EV),e(EV,Nar),e(bT,jar),e(x,Dar),e(x,FT),e(FT,y_e),e(y_e,Gar),e(FT,Oar),e(FT,CV),e(CV,Var),e(FT,Xar),e(x,zar),e(x,vT),e(vT,L_e),e(L_e,Qar),e(vT,War),e(vT,wV),e(wV,Har),e(vT,Uar),e(x,Jar),e(x,TT),e(TT,x_e),e(x_e,Yar),e(TT,Kar),e(TT,AV),e(AV,Zar),e(TT,enr),e(x,onr),e(x,MT),e(MT,k_e),e(k_e,rnr),e(MT,tnr),e(MT,yV),e(yV,anr),e(MT,nnr),e(x,snr),e(x,ET),e(ET,S_e),e(S_e,lnr),e(ET,inr),e(ET,LV),e(LV,dnr),e(ET,cnr),e(x,fnr),e(x,CT),e(CT,R_e),e(R_e,mnr),e(CT,gnr),e(CT,xV),e(xV,hnr),e(CT,pnr),e(ho,_nr),e(ho,B_e),e(B_e,unr),e(ho,bnr),g(MA,ho,null),b(c,uPe,u),b(c,uc,u),e(uc,wT),e(wT,P_e),g(EA,P_e,null),e(uc,Fnr),e(uc,$_e),e($_e,vnr),b(c,bPe,u),b(c,vr,u),g(CA,vr,null),e(vr,Tnr),e(vr,bc),e(bc,Mnr),e(bc,kV),e(kV,Enr),e(bc,Cnr),e(bc,SV),e(SV,wnr),e(bc,Anr),e(vr,ynr),e(vr,wA),e(wA,Lnr),e(wA,I_e),e(I_e,xnr),e(wA,knr),e(vr,Snr),e(vr,ht),g(AA,ht,null),e(ht,Rnr),e(ht,q_e),e(q_e,Bnr),e(ht,Pnr),e(ht,Fc),e(Fc,$nr),e(Fc,N_e),e(N_e,Inr),e(Fc,qnr),e(Fc,RV),e(RV,Nnr),e(Fc,jnr),e(ht,Dnr),e(ht,j_e),e(j_e,Gnr),e(ht,Onr),g(yA,ht,null),e(vr,Vnr),e(vr,po),g(LA,po,null),e(po,Xnr),e(po,D_e),e(D_e,znr),e(po,Qnr),e(po,bn),e(bn,Wnr),e(bn,G_e),e(G_e,Hnr),e(bn,Unr),e(bn,O_e),e(O_e,Jnr),e(bn,Ynr),e(bn,V_e),e(V_e,Knr),e(bn,Znr),e(po,esr),e(po,H),e(H,AT),e(AT,X_e),e(X_e,osr),e(AT,rsr),e(AT,BV),e(BV,tsr),e(AT,asr),e(H,nsr),e(H,yT),e(yT,z_e),e(z_e,ssr),e(yT,lsr),e(yT,PV),e(PV,isr),e(yT,dsr),e(H,csr),e(H,LT),e(LT,Q_e),e(Q_e,fsr),e(LT,msr),e(LT,$V),e($V,gsr),e(LT,hsr),e(H,psr),e(H,xT),e(xT,W_e),e(W_e,_sr),e(xT,usr),e(xT,IV),e(IV,bsr),e(xT,Fsr),e(H,vsr),e(H,kT),e(kT,H_e),e(H_e,Tsr),e(kT,Msr),e(kT,qV),e(qV,Esr),e(kT,Csr),e(H,wsr),e(H,ST),e(ST,U_e),e(U_e,Asr),e(ST,ysr),e(ST,NV),e(NV,Lsr),e(ST,xsr),e(H,ksr),e(H,RT),e(RT,J_e),e(J_e,Ssr),e(RT,Rsr),e(RT,jV),e(jV,Bsr),e(RT,Psr),e(H,$sr),e(H,BT),e(BT,Y_e),e(Y_e,Isr),e(BT,qsr),e(BT,DV),e(DV,Nsr),e(BT,jsr),e(H,Dsr),e(H,PT),e(PT,K_e),e(K_e,Gsr),e(PT,Osr),e(PT,GV),e(GV,Vsr),e(PT,Xsr),e(H,zsr),e(H,$T),e($T,Z_e),e(Z_e,Qsr),e($T,Wsr),e($T,OV),e(OV,Hsr),e($T,Usr),e(H,Jsr),e(H,IT),e(IT,eue),e(eue,Ysr),e(IT,Ksr),e(IT,VV),e(VV,Zsr),e(IT,elr),e(H,olr),e(H,qT),e(qT,oue),e(oue,rlr),e(qT,tlr),e(qT,XV),e(XV,alr),e(qT,nlr),e(H,slr),e(H,NT),e(NT,rue),e(rue,llr),e(NT,ilr),e(NT,zV),e(zV,dlr),e(NT,clr),e(H,flr),e(H,jT),e(jT,tue),e(tue,mlr),e(jT,glr),e(jT,QV),e(QV,hlr),e(jT,plr),e(H,_lr),e(H,DT),e(DT,aue),e(aue,ulr),e(DT,blr),e(DT,WV),e(WV,Flr),e(DT,vlr),e(H,Tlr),e(H,GT),e(GT,nue),e(nue,Mlr),e(GT,Elr),e(GT,HV),e(HV,Clr),e(GT,wlr),e(H,Alr),e(H,OT),e(OT,sue),e(sue,ylr),e(OT,Llr),e(OT,UV),e(UV,xlr),e(OT,klr),e(H,Slr),e(H,VT),e(VT,lue),e(lue,Rlr),e(VT,Blr),e(VT,JV),e(JV,Plr),e(VT,$lr),e(H,Ilr),e(H,XT),e(XT,iue),e(iue,qlr),e(XT,Nlr),e(XT,YV),e(YV,jlr),e(XT,Dlr),e(H,Glr),e(H,zT),e(zT,due),e(due,Olr),e(zT,Vlr),e(zT,KV),e(KV,Xlr),e(zT,zlr),e(H,Qlr),e(H,QT),e(QT,cue),e(cue,Wlr),e(QT,Hlr),e(QT,ZV),e(ZV,Ulr),e(QT,Jlr),e(H,Ylr),e(H,WT),e(WT,fue),e(fue,Klr),e(WT,Zlr),e(WT,eX),e(eX,eir),e(WT,oir),e(H,rir),e(H,HT),e(HT,mue),e(mue,tir),e(HT,air),e(HT,oX),e(oX,nir),e(HT,sir),e(po,lir),e(po,gue),e(gue,iir),e(po,dir),g(xA,po,null),b(c,FPe,u),b(c,vc,u),e(vc,UT),e(UT,hue),g(kA,hue,null),e(vc,cir),e(vc,pue),e(pue,fir),b(c,vPe,u),b(c,Tr,u),g(SA,Tr,null),e(Tr,mir),e(Tr,Tc),e(Tc,gir),e(Tc,rX),e(rX,hir),e(Tc,pir),e(Tc,tX),e(tX,_ir),e(Tc,uir),e(Tr,bir),e(Tr,RA),e(RA,Fir),e(RA,_ue),e(_ue,vir),e(RA,Tir),e(Tr,Mir),e(Tr,pt),g(BA,pt,null),e(pt,Eir),e(pt,uue),e(uue,Cir),e(pt,wir),e(pt,Mc),e(Mc,Air),e(Mc,bue),e(bue,yir),e(Mc,Lir),e(Mc,aX),e(aX,xir),e(Mc,kir),e(pt,Sir),e(pt,Fue),e(Fue,Rir),e(pt,Bir),g(PA,pt,null),e(Tr,Pir),e(Tr,_o),g($A,_o,null),e(_o,$ir),e(_o,vue),e(vue,Iir),e(_o,qir),e(_o,Fn),e(Fn,Nir),e(Fn,Tue),e(Tue,jir),e(Fn,Dir),e(Fn,Mue),e(Mue,Gir),e(Fn,Oir),e(Fn,Eue),e(Eue,Vir),e(Fn,Xir),e(_o,zir),e(_o,me),e(me,JT),e(JT,Cue),e(Cue,Qir),e(JT,Wir),e(JT,nX),e(nX,Hir),e(JT,Uir),e(me,Jir),e(me,YT),e(YT,wue),e(wue,Yir),e(YT,Kir),e(YT,sX),e(sX,Zir),e(YT,edr),e(me,odr),e(me,KT),e(KT,Aue),e(Aue,rdr),e(KT,tdr),e(KT,lX),e(lX,adr),e(KT,ndr),e(me,sdr),e(me,ZT),e(ZT,yue),e(yue,ldr),e(ZT,idr),e(ZT,iX),e(iX,ddr),e(ZT,cdr),e(me,fdr),e(me,e7),e(e7,Lue),e(Lue,mdr),e(e7,gdr),e(e7,dX),e(dX,hdr),e(e7,pdr),e(me,_dr),e(me,o7),e(o7,xue),e(xue,udr),e(o7,bdr),e(o7,cX),e(cX,Fdr),e(o7,vdr),e(me,Tdr),e(me,r7),e(r7,kue),e(kue,Mdr),e(r7,Edr),e(r7,fX),e(fX,Cdr),e(r7,wdr),e(me,Adr),e(me,t7),e(t7,Sue),e(Sue,ydr),e(t7,Ldr),e(t7,mX),e(mX,xdr),e(t7,kdr),e(me,Sdr),e(me,a7),e(a7,Rue),e(Rue,Rdr),e(a7,Bdr),e(a7,gX),e(gX,Pdr),e(a7,$dr),e(me,Idr),e(me,n7),e(n7,Bue),e(Bue,qdr),e(n7,Ndr),e(n7,hX),e(hX,jdr),e(n7,Ddr),e(me,Gdr),e(me,s7),e(s7,Pue),e(Pue,Odr),e(s7,Vdr),e(s7,pX),e(pX,Xdr),e(s7,zdr),e(me,Qdr),e(me,l7),e(l7,$ue),e($ue,Wdr),e(l7,Hdr),e(l7,_X),e(_X,Udr),e(l7,Jdr),e(_o,Ydr),e(_o,Iue),e(Iue,Kdr),e(_o,Zdr),g(IA,_o,null),b(c,TPe,u),b(c,Ec,u),e(Ec,i7),e(i7,que),g(qA,que,null),e(Ec,ecr),e(Ec,Nue),e(Nue,ocr),b(c,MPe,u),b(c,Mr,u),g(NA,Mr,null),e(Mr,rcr),e(Mr,Cc),e(Cc,tcr),e(Cc,uX),e(uX,acr),e(Cc,ncr),e(Cc,bX),e(bX,scr),e(Cc,lcr),e(Mr,icr),e(Mr,jA),e(jA,dcr),e(jA,jue),e(jue,ccr),e(jA,fcr),e(Mr,mcr),e(Mr,_t),g(DA,_t,null),e(_t,gcr),e(_t,Due),e(Due,hcr),e(_t,pcr),e(_t,wc),e(wc,_cr),e(wc,Gue),e(Gue,ucr),e(wc,bcr),e(wc,FX),e(FX,Fcr),e(wc,vcr),e(_t,Tcr),e(_t,Oue),e(Oue,Mcr),e(_t,Ecr),g(GA,_t,null),e(Mr,Ccr),e(Mr,uo),g(OA,uo,null),e(uo,wcr),e(uo,Vue),e(Vue,Acr),e(uo,ycr),e(uo,vn),e(vn,Lcr),e(vn,Xue),e(Xue,xcr),e(vn,kcr),e(vn,zue),e(zue,Scr),e(vn,Rcr),e(vn,Que),e(Que,Bcr),e(vn,Pcr),e(uo,$cr),e(uo,VA),e(VA,d7),e(d7,Wue),e(Wue,Icr),e(d7,qcr),e(d7,vX),e(vX,Ncr),e(d7,jcr),e(VA,Dcr),e(VA,c7),e(c7,Hue),e(Hue,Gcr),e(c7,Ocr),e(c7,TX),e(TX,Vcr),e(c7,Xcr),e(uo,zcr),e(uo,Uue),e(Uue,Qcr),e(uo,Wcr),g(XA,uo,null),b(c,EPe,u),b(c,Ac,u),e(Ac,f7),e(f7,Jue),g(zA,Jue,null),e(Ac,Hcr),e(Ac,Yue),e(Yue,Ucr),b(c,CPe,u),b(c,Er,u),g(QA,Er,null),e(Er,Jcr),e(Er,yc),e(yc,Ycr),e(yc,MX),e(MX,Kcr),e(yc,Zcr),e(yc,EX),e(EX,efr),e(yc,ofr),e(Er,rfr),e(Er,WA),e(WA,tfr),e(WA,Kue),e(Kue,afr),e(WA,nfr),e(Er,sfr),e(Er,ut),g(HA,ut,null),e(ut,lfr),e(ut,Zue),e(Zue,ifr),e(ut,dfr),e(ut,Lc),e(Lc,cfr),e(Lc,e2e),e(e2e,ffr),e(Lc,mfr),e(Lc,CX),e(CX,gfr),e(Lc,hfr),e(ut,pfr),e(ut,o2e),e(o2e,_fr),e(ut,ufr),g(UA,ut,null),e(Er,bfr),e(Er,bo),g(JA,bo,null),e(bo,Ffr),e(bo,r2e),e(r2e,vfr),e(bo,Tfr),e(bo,Tn),e(Tn,Mfr),e(Tn,t2e),e(t2e,Efr),e(Tn,Cfr),e(Tn,a2e),e(a2e,wfr),e(Tn,Afr),e(Tn,n2e),e(n2e,yfr),e(Tn,Lfr),e(bo,xfr),e(bo,J),e(J,m7),e(m7,s2e),e(s2e,kfr),e(m7,Sfr),e(m7,wX),e(wX,Rfr),e(m7,Bfr),e(J,Pfr),e(J,g7),e(g7,l2e),e(l2e,$fr),e(g7,Ifr),e(g7,AX),e(AX,qfr),e(g7,Nfr),e(J,jfr),e(J,h7),e(h7,i2e),e(i2e,Dfr),e(h7,Gfr),e(h7,yX),e(yX,Ofr),e(h7,Vfr),e(J,Xfr),e(J,p7),e(p7,d2e),e(d2e,zfr),e(p7,Qfr),e(p7,LX),e(LX,Wfr),e(p7,Hfr),e(J,Ufr),e(J,_7),e(_7,c2e),e(c2e,Jfr),e(_7,Yfr),e(_7,xX),e(xX,Kfr),e(_7,Zfr),e(J,emr),e(J,u7),e(u7,f2e),e(f2e,omr),e(u7,rmr),e(u7,kX),e(kX,tmr),e(u7,amr),e(J,nmr),e(J,b7),e(b7,m2e),e(m2e,smr),e(b7,lmr),e(b7,SX),e(SX,imr),e(b7,dmr),e(J,cmr),e(J,F7),e(F7,g2e),e(g2e,fmr),e(F7,mmr),e(F7,RX),e(RX,gmr),e(F7,hmr),e(J,pmr),e(J,v7),e(v7,h2e),e(h2e,_mr),e(v7,umr),e(v7,BX),e(BX,bmr),e(v7,Fmr),e(J,vmr),e(J,T7),e(T7,p2e),e(p2e,Tmr),e(T7,Mmr),e(T7,PX),e(PX,Emr),e(T7,Cmr),e(J,wmr),e(J,M7),e(M7,_2e),e(_2e,Amr),e(M7,ymr),e(M7,$X),e($X,Lmr),e(M7,xmr),e(J,kmr),e(J,E7),e(E7,u2e),e(u2e,Smr),e(E7,Rmr),e(E7,IX),e(IX,Bmr),e(E7,Pmr),e(J,$mr),e(J,C7),e(C7,b2e),e(b2e,Imr),e(C7,qmr),e(C7,qX),e(qX,Nmr),e(C7,jmr),e(J,Dmr),e(J,w7),e(w7,F2e),e(F2e,Gmr),e(w7,Omr),e(w7,NX),e(NX,Vmr),e(w7,Xmr),e(J,zmr),e(J,A7),e(A7,v2e),e(v2e,Qmr),e(A7,Wmr),e(A7,jX),e(jX,Hmr),e(A7,Umr),e(J,Jmr),e(J,y7),e(y7,T2e),e(T2e,Ymr),e(y7,Kmr),e(y7,DX),e(DX,Zmr),e(y7,egr),e(J,ogr),e(J,L7),e(L7,M2e),e(M2e,rgr),e(L7,tgr),e(L7,GX),e(GX,agr),e(L7,ngr),e(J,sgr),e(J,x7),e(x7,E2e),e(E2e,lgr),e(x7,igr),e(x7,OX),e(OX,dgr),e(x7,cgr),e(J,fgr),e(J,k7),e(k7,C2e),e(C2e,mgr),e(k7,ggr),e(k7,VX),e(VX,hgr),e(k7,pgr),e(J,_gr),e(J,S7),e(S7,w2e),e(w2e,ugr),e(S7,bgr),e(S7,XX),e(XX,Fgr),e(S7,vgr),e(bo,Tgr),e(bo,A2e),e(A2e,Mgr),e(bo,Egr),g(YA,bo,null),b(c,wPe,u),b(c,xc,u),e(xc,R7),e(R7,y2e),g(KA,y2e,null),e(xc,Cgr),e(xc,L2e),e(L2e,wgr),b(c,APe,u),b(c,Cr,u),g(ZA,Cr,null),e(Cr,Agr),e(Cr,kc),e(kc,ygr),e(kc,zX),e(zX,Lgr),e(kc,xgr),e(kc,QX),e(QX,kgr),e(kc,Sgr),e(Cr,Rgr),e(Cr,e0),e(e0,Bgr),e(e0,x2e),e(x2e,Pgr),e(e0,$gr),e(Cr,Igr),e(Cr,bt),g(o0,bt,null),e(bt,qgr),e(bt,k2e),e(k2e,Ngr),e(bt,jgr),e(bt,Sc),e(Sc,Dgr),e(Sc,S2e),e(S2e,Ggr),e(Sc,Ogr),e(Sc,WX),e(WX,Vgr),e(Sc,Xgr),e(bt,zgr),e(bt,R2e),e(R2e,Qgr),e(bt,Wgr),g(r0,bt,null),e(Cr,Hgr),e(Cr,Fo),g(t0,Fo,null),e(Fo,Ugr),e(Fo,B2e),e(B2e,Jgr),e(Fo,Ygr),e(Fo,Mn),e(Mn,Kgr),e(Mn,P2e),e(P2e,Zgr),e(Mn,ehr),e(Mn,$2e),e($2e,ohr),e(Mn,rhr),e(Mn,I2e),e(I2e,thr),e(Mn,ahr),e(Fo,nhr),e(Fo,be),e(be,B7),e(B7,q2e),e(q2e,shr),e(B7,lhr),e(B7,HX),e(HX,ihr),e(B7,dhr),e(be,chr),e(be,P7),e(P7,N2e),e(N2e,fhr),e(P7,mhr),e(P7,UX),e(UX,ghr),e(P7,hhr),e(be,phr),e(be,$7),e($7,j2e),e(j2e,_hr),e($7,uhr),e($7,JX),e(JX,bhr),e($7,Fhr),e(be,vhr),e(be,I7),e(I7,D2e),e(D2e,Thr),e(I7,Mhr),e(I7,YX),e(YX,Ehr),e(I7,Chr),e(be,whr),e(be,q7),e(q7,G2e),e(G2e,Ahr),e(q7,yhr),e(q7,KX),e(KX,Lhr),e(q7,xhr),e(be,khr),e(be,N7),e(N7,O2e),e(O2e,Shr),e(N7,Rhr),e(N7,ZX),e(ZX,Bhr),e(N7,Phr),e(be,$hr),e(be,j7),e(j7,V2e),e(V2e,Ihr),e(j7,qhr),e(j7,ez),e(ez,Nhr),e(j7,jhr),e(be,Dhr),e(be,D7),e(D7,X2e),e(X2e,Ghr),e(D7,Ohr),e(D7,oz),e(oz,Vhr),e(D7,Xhr),e(be,zhr),e(be,G7),e(G7,z2e),e(z2e,Qhr),e(G7,Whr),e(G7,rz),e(rz,Hhr),e(G7,Uhr),e(be,Jhr),e(be,O7),e(O7,Q2e),e(Q2e,Yhr),e(O7,Khr),e(O7,tz),e(tz,Zhr),e(O7,epr),e(Fo,opr),e(Fo,W2e),e(W2e,rpr),e(Fo,tpr),g(a0,Fo,null),b(c,yPe,u),b(c,Rc,u),e(Rc,V7),e(V7,H2e),g(n0,H2e,null),e(Rc,apr),e(Rc,U2e),e(U2e,npr),b(c,LPe,u),b(c,wr,u),g(s0,wr,null),e(wr,spr),e(wr,Bc),e(Bc,lpr),e(Bc,az),e(az,ipr),e(Bc,dpr),e(Bc,nz),e(nz,cpr),e(Bc,fpr),e(wr,mpr),e(wr,l0),e(l0,gpr),e(l0,J2e),e(J2e,hpr),e(l0,ppr),e(wr,_pr),e(wr,Ft),g(i0,Ft,null),e(Ft,upr),e(Ft,Y2e),e(Y2e,bpr),e(Ft,Fpr),e(Ft,Pc),e(Pc,vpr),e(Pc,K2e),e(K2e,Tpr),e(Pc,Mpr),e(Pc,sz),e(sz,Epr),e(Pc,Cpr),e(Ft,wpr),e(Ft,Z2e),e(Z2e,Apr),e(Ft,ypr),g(d0,Ft,null),e(wr,Lpr),e(wr,vo),g(c0,vo,null),e(vo,xpr),e(vo,e1e),e(e1e,kpr),e(vo,Spr),e(vo,En),e(En,Rpr),e(En,o1e),e(o1e,Bpr),e(En,Ppr),e(En,r1e),e(r1e,$pr),e(En,Ipr),e(En,t1e),e(t1e,qpr),e(En,Npr),e(vo,jpr),e(vo,V),e(V,X7),e(X7,a1e),e(a1e,Dpr),e(X7,Gpr),e(X7,lz),e(lz,Opr),e(X7,Vpr),e(V,Xpr),e(V,z7),e(z7,n1e),e(n1e,zpr),e(z7,Qpr),e(z7,iz),e(iz,Wpr),e(z7,Hpr),e(V,Upr),e(V,Q7),e(Q7,s1e),e(s1e,Jpr),e(Q7,Ypr),e(Q7,dz),e(dz,Kpr),e(Q7,Zpr),e(V,e_r),e(V,W7),e(W7,l1e),e(l1e,o_r),e(W7,r_r),e(W7,cz),e(cz,t_r),e(W7,a_r),e(V,n_r),e(V,H7),e(H7,i1e),e(i1e,s_r),e(H7,l_r),e(H7,fz),e(fz,i_r),e(H7,d_r),e(V,c_r),e(V,U7),e(U7,d1e),e(d1e,f_r),e(U7,m_r),e(U7,mz),e(mz,g_r),e(U7,h_r),e(V,p_r),e(V,J7),e(J7,c1e),e(c1e,__r),e(J7,u_r),e(J7,gz),e(gz,b_r),e(J7,F_r),e(V,v_r),e(V,Y7),e(Y7,f1e),e(f1e,T_r),e(Y7,M_r),e(Y7,hz),e(hz,E_r),e(Y7,C_r),e(V,w_r),e(V,K7),e(K7,m1e),e(m1e,A_r),e(K7,y_r),e(K7,pz),e(pz,L_r),e(K7,x_r),e(V,k_r),e(V,Z7),e(Z7,g1e),e(g1e,S_r),e(Z7,R_r),e(Z7,_z),e(_z,B_r),e(Z7,P_r),e(V,$_r),e(V,e9),e(e9,h1e),e(h1e,I_r),e(e9,q_r),e(e9,uz),e(uz,N_r),e(e9,j_r),e(V,D_r),e(V,o9),e(o9,p1e),e(p1e,G_r),e(o9,O_r),e(o9,bz),e(bz,V_r),e(o9,X_r),e(V,z_r),e(V,r9),e(r9,_1e),e(_1e,Q_r),e(r9,W_r),e(r9,Fz),e(Fz,H_r),e(r9,U_r),e(V,J_r),e(V,t9),e(t9,u1e),e(u1e,Y_r),e(t9,K_r),e(t9,vz),e(vz,Z_r),e(t9,eur),e(V,our),e(V,a9),e(a9,b1e),e(b1e,rur),e(a9,tur),e(a9,Tz),e(Tz,aur),e(a9,nur),e(V,sur),e(V,n9),e(n9,F1e),e(F1e,lur),e(n9,iur),e(n9,Mz),e(Mz,dur),e(n9,cur),e(V,fur),e(V,s9),e(s9,v1e),e(v1e,mur),e(s9,gur),e(s9,Ez),e(Ez,hur),e(s9,pur),e(V,_ur),e(V,l9),e(l9,T1e),e(T1e,uur),e(l9,bur),e(l9,Cz),e(Cz,Fur),e(l9,vur),e(V,Tur),e(V,i9),e(i9,M1e),e(M1e,Mur),e(i9,Eur),e(i9,wz),e(wz,Cur),e(i9,wur),e(V,Aur),e(V,d9),e(d9,E1e),e(E1e,yur),e(d9,Lur),e(d9,Az),e(Az,xur),e(d9,kur),e(V,Sur),e(V,c9),e(c9,C1e),e(C1e,Rur),e(c9,Bur),e(c9,yz),e(yz,Pur),e(c9,$ur),e(V,Iur),e(V,f9),e(f9,w1e),e(w1e,qur),e(f9,Nur),e(f9,Lz),e(Lz,jur),e(f9,Dur),e(V,Gur),e(V,m9),e(m9,A1e),e(A1e,Our),e(m9,Vur),e(m9,xz),e(xz,Xur),e(m9,zur),e(V,Qur),e(V,g9),e(g9,y1e),e(y1e,Wur),e(g9,Hur),e(g9,kz),e(kz,Uur),e(g9,Jur),e(V,Yur),e(V,h9),e(h9,L1e),e(L1e,Kur),e(h9,Zur),e(h9,Sz),e(Sz,e2r),e(h9,o2r),e(V,r2r),e(V,p9),e(p9,x1e),e(x1e,t2r),e(p9,a2r),e(p9,Rz),e(Rz,n2r),e(p9,s2r),e(vo,l2r),e(vo,k1e),e(k1e,i2r),e(vo,d2r),g(f0,vo,null),b(c,xPe,u),b(c,$c,u),e($c,_9),e(_9,S1e),g(m0,S1e,null),e($c,c2r),e($c,R1e),e(R1e,f2r),b(c,kPe,u),b(c,Ar,u),g(g0,Ar,null),e(Ar,m2r),e(Ar,Ic),e(Ic,g2r),e(Ic,Bz),e(Bz,h2r),e(Ic,p2r),e(Ic,Pz),e(Pz,_2r),e(Ic,u2r),e(Ar,b2r),e(Ar,h0),e(h0,F2r),e(h0,B1e),e(B1e,v2r),e(h0,T2r),e(Ar,M2r),e(Ar,vt),g(p0,vt,null),e(vt,E2r),e(vt,P1e),e(P1e,C2r),e(vt,w2r),e(vt,qc),e(qc,A2r),e(qc,$1e),e($1e,y2r),e(qc,L2r),e(qc,$z),e($z,x2r),e(qc,k2r),e(vt,S2r),e(vt,I1e),e(I1e,R2r),e(vt,B2r),g(_0,vt,null),e(Ar,P2r),e(Ar,To),g(u0,To,null),e(To,$2r),e(To,q1e),e(q1e,I2r),e(To,q2r),e(To,Cn),e(Cn,N2r),e(Cn,N1e),e(N1e,j2r),e(Cn,D2r),e(Cn,j1e),e(j1e,G2r),e(Cn,O2r),e(Cn,D1e),e(D1e,V2r),e(Cn,X2r),e(To,z2r),e(To,se),e(se,u9),e(u9,G1e),e(G1e,Q2r),e(u9,W2r),e(u9,Iz),e(Iz,H2r),e(u9,U2r),e(se,J2r),e(se,b9),e(b9,O1e),e(O1e,Y2r),e(b9,K2r),e(b9,qz),e(qz,Z2r),e(b9,e1r),e(se,o1r),e(se,F9),e(F9,V1e),e(V1e,r1r),e(F9,t1r),e(F9,Nz),e(Nz,a1r),e(F9,n1r),e(se,s1r),e(se,v9),e(v9,X1e),e(X1e,l1r),e(v9,i1r),e(v9,jz),e(jz,d1r),e(v9,c1r),e(se,f1r),e(se,T9),e(T9,z1e),e(z1e,m1r),e(T9,g1r),e(T9,Dz),e(Dz,h1r),e(T9,p1r),e(se,_1r),e(se,M9),e(M9,Q1e),e(Q1e,u1r),e(M9,b1r),e(M9,Gz),e(Gz,F1r),e(M9,v1r),e(se,T1r),e(se,E9),e(E9,W1e),e(W1e,M1r),e(E9,E1r),e(E9,Oz),e(Oz,C1r),e(E9,w1r),e(se,A1r),e(se,C9),e(C9,H1e),e(H1e,y1r),e(C9,L1r),e(C9,Vz),e(Vz,x1r),e(C9,k1r),e(se,S1r),e(se,w9),e(w9,U1e),e(U1e,R1r),e(w9,B1r),e(w9,Xz),e(Xz,P1r),e(w9,$1r),e(se,I1r),e(se,A9),e(A9,J1e),e(J1e,q1r),e(A9,N1r),e(A9,zz),e(zz,j1r),e(A9,D1r),e(se,G1r),e(se,y9),e(y9,Y1e),e(Y1e,O1r),e(y9,V1r),e(y9,Qz),e(Qz,X1r),e(y9,z1r),e(se,Q1r),e(se,L9),e(L9,K1e),e(K1e,W1r),e(L9,H1r),e(L9,Wz),e(Wz,U1r),e(L9,J1r),e(se,Y1r),e(se,x9),e(x9,Z1e),e(Z1e,K1r),e(x9,Z1r),e(x9,Hz),e(Hz,ebr),e(x9,obr),e(se,rbr),e(se,k9),e(k9,ebe),e(ebe,tbr),e(k9,abr),e(k9,Uz),e(Uz,nbr),e(k9,sbr),e(se,lbr),e(se,S9),e(S9,obe),e(obe,ibr),e(S9,dbr),e(S9,Jz),e(Jz,cbr),e(S9,fbr),e(se,mbr),e(se,R9),e(R9,rbe),e(rbe,gbr),e(R9,hbr),e(R9,Yz),e(Yz,pbr),e(R9,_br),e(se,ubr),e(se,B9),e(B9,tbe),e(tbe,bbr),e(B9,Fbr),e(B9,Kz),e(Kz,vbr),e(B9,Tbr),e(To,Mbr),e(To,abe),e(abe,Ebr),e(To,Cbr),g(b0,To,null),b(c,SPe,u),b(c,Nc,u),e(Nc,P9),e(P9,nbe),g(F0,nbe,null),e(Nc,wbr),e(Nc,sbe),e(sbe,Abr),b(c,RPe,u),b(c,yr,u),g(v0,yr,null),e(yr,ybr),e(yr,jc),e(jc,Lbr),e(jc,Zz),e(Zz,xbr),e(jc,kbr),e(jc,eQ),e(eQ,Sbr),e(jc,Rbr),e(yr,Bbr),e(yr,T0),e(T0,Pbr),e(T0,lbe),e(lbe,$br),e(T0,Ibr),e(yr,qbr),e(yr,Tt),g(M0,Tt,null),e(Tt,Nbr),e(Tt,ibe),e(ibe,jbr),e(Tt,Dbr),e(Tt,Dc),e(Dc,Gbr),e(Dc,dbe),e(dbe,Obr),e(Dc,Vbr),e(Dc,oQ),e(oQ,Xbr),e(Dc,zbr),e(Tt,Qbr),e(Tt,cbe),e(cbe,Wbr),e(Tt,Hbr),g(E0,Tt,null),e(yr,Ubr),e(yr,Mo),g(C0,Mo,null),e(Mo,Jbr),e(Mo,fbe),e(fbe,Ybr),e(Mo,Kbr),e(Mo,wn),e(wn,Zbr),e(wn,mbe),e(mbe,e6r),e(wn,o6r),e(wn,gbe),e(gbe,r6r),e(wn,t6r),e(wn,hbe),e(hbe,a6r),e(wn,n6r),e(Mo,s6r),e(Mo,pbe),e(pbe,$9),e($9,_be),e(_be,l6r),e($9,i6r),e($9,rQ),e(rQ,d6r),e($9,c6r),e(Mo,f6r),e(Mo,ube),e(ube,m6r),e(Mo,g6r),g(w0,Mo,null),b(c,BPe,u),b(c,Gc,u),e(Gc,I9),e(I9,bbe),g(A0,bbe,null),e(Gc,h6r),e(Gc,Fbe),e(Fbe,p6r),b(c,PPe,u),b(c,Lr,u),g(y0,Lr,null),e(Lr,_6r),e(Lr,Oc),e(Oc,u6r),e(Oc,tQ),e(tQ,b6r),e(Oc,F6r),e(Oc,aQ),e(aQ,v6r),e(Oc,T6r),e(Lr,M6r),e(Lr,L0),e(L0,E6r),e(L0,vbe),e(vbe,C6r),e(L0,w6r),e(Lr,A6r),e(Lr,Mt),g(x0,Mt,null),e(Mt,y6r),e(Mt,Tbe),e(Tbe,L6r),e(Mt,x6r),e(Mt,Vc),e(Vc,k6r),e(Vc,Mbe),e(Mbe,S6r),e(Vc,R6r),e(Vc,nQ),e(nQ,B6r),e(Vc,P6r),e(Mt,$6r),e(Mt,Ebe),e(Ebe,I6r),e(Mt,q6r),g(k0,Mt,null),e(Lr,N6r),e(Lr,Eo),g(S0,Eo,null),e(Eo,j6r),e(Eo,Cbe),e(Cbe,D6r),e(Eo,G6r),e(Eo,An),e(An,O6r),e(An,wbe),e(wbe,V6r),e(An,X6r),e(An,Abe),e(Abe,z6r),e(An,Q6r),e(An,ybe),e(ybe,W6r),e(An,H6r),e(Eo,U6r),e(Eo,Y),e(Y,q9),e(q9,Lbe),e(Lbe,J6r),e(q9,Y6r),e(q9,sQ),e(sQ,K6r),e(q9,Z6r),e(Y,eFr),e(Y,N9),e(N9,xbe),e(xbe,oFr),e(N9,rFr),e(N9,lQ),e(lQ,tFr),e(N9,aFr),e(Y,nFr),e(Y,j9),e(j9,kbe),e(kbe,sFr),e(j9,lFr),e(j9,iQ),e(iQ,iFr),e(j9,dFr),e(Y,cFr),e(Y,D9),e(D9,Sbe),e(Sbe,fFr),e(D9,mFr),e(D9,dQ),e(dQ,gFr),e(D9,hFr),e(Y,pFr),e(Y,G9),e(G9,Rbe),e(Rbe,_Fr),e(G9,uFr),e(G9,cQ),e(cQ,bFr),e(G9,FFr),e(Y,vFr),e(Y,O9),e(O9,Bbe),e(Bbe,TFr),e(O9,MFr),e(O9,fQ),e(fQ,EFr),e(O9,CFr),e(Y,wFr),e(Y,V9),e(V9,Pbe),e(Pbe,AFr),e(V9,yFr),e(V9,mQ),e(mQ,LFr),e(V9,xFr),e(Y,kFr),e(Y,X9),e(X9,$be),e($be,SFr),e(X9,RFr),e(X9,gQ),e(gQ,BFr),e(X9,PFr),e(Y,$Fr),e(Y,z9),e(z9,Ibe),e(Ibe,IFr),e(z9,qFr),e(z9,hQ),e(hQ,NFr),e(z9,jFr),e(Y,DFr),e(Y,Q9),e(Q9,qbe),e(qbe,GFr),e(Q9,OFr),e(Q9,pQ),e(pQ,VFr),e(Q9,XFr),e(Y,zFr),e(Y,W9),e(W9,Nbe),e(Nbe,QFr),e(W9,WFr),e(W9,_Q),e(_Q,HFr),e(W9,UFr),e(Y,JFr),e(Y,H9),e(H9,jbe),e(jbe,YFr),e(H9,KFr),e(H9,uQ),e(uQ,ZFr),e(H9,evr),e(Y,ovr),e(Y,U9),e(U9,Dbe),e(Dbe,rvr),e(U9,tvr),e(U9,bQ),e(bQ,avr),e(U9,nvr),e(Y,svr),e(Y,J9),e(J9,Gbe),e(Gbe,lvr),e(J9,ivr),e(J9,FQ),e(FQ,dvr),e(J9,cvr),e(Y,fvr),e(Y,Y9),e(Y9,Obe),e(Obe,mvr),e(Y9,gvr),e(Y9,vQ),e(vQ,hvr),e(Y9,pvr),e(Y,_vr),e(Y,K9),e(K9,Vbe),e(Vbe,uvr),e(K9,bvr),e(K9,TQ),e(TQ,Fvr),e(K9,vvr),e(Y,Tvr),e(Y,Z9),e(Z9,Xbe),e(Xbe,Mvr),e(Z9,Evr),e(Z9,MQ),e(MQ,Cvr),e(Z9,wvr),e(Y,Avr),e(Y,eM),e(eM,zbe),e(zbe,yvr),e(eM,Lvr),e(eM,EQ),e(EQ,xvr),e(eM,kvr),e(Y,Svr),e(Y,oM),e(oM,Qbe),e(Qbe,Rvr),e(oM,Bvr),e(oM,CQ),e(CQ,Pvr),e(oM,$vr),e(Y,Ivr),e(Y,rM),e(rM,Wbe),e(Wbe,qvr),e(rM,Nvr),e(rM,wQ),e(wQ,jvr),e(rM,Dvr),e(Eo,Gvr),e(Eo,Hbe),e(Hbe,Ovr),e(Eo,Vvr),g(R0,Eo,null),b(c,$Pe,u),b(c,Xc,u),e(Xc,tM),e(tM,Ube),g(B0,Ube,null),e(Xc,Xvr),e(Xc,Jbe),e(Jbe,zvr),b(c,IPe,u),b(c,xr,u),g(P0,xr,null),e(xr,Qvr),e(xr,zc),e(zc,Wvr),e(zc,AQ),e(AQ,Hvr),e(zc,Uvr),e(zc,yQ),e(yQ,Jvr),e(zc,Yvr),e(xr,Kvr),e(xr,$0),e($0,Zvr),e($0,Ybe),e(Ybe,eTr),e($0,oTr),e(xr,rTr),e(xr,Et),g(I0,Et,null),e(Et,tTr),e(Et,Kbe),e(Kbe,aTr),e(Et,nTr),e(Et,Qc),e(Qc,sTr),e(Qc,Zbe),e(Zbe,lTr),e(Qc,iTr),e(Qc,LQ),e(LQ,dTr),e(Qc,cTr),e(Et,fTr),e(Et,e6e),e(e6e,mTr),e(Et,gTr),g(q0,Et,null),e(xr,hTr),e(xr,Co),g(N0,Co,null),e(Co,pTr),e(Co,o6e),e(o6e,_Tr),e(Co,uTr),e(Co,yn),e(yn,bTr),e(yn,r6e),e(r6e,FTr),e(yn,vTr),e(yn,t6e),e(t6e,TTr),e(yn,MTr),e(yn,a6e),e(a6e,ETr),e(yn,CTr),e(Co,wTr),e(Co,K),e(K,aM),e(aM,n6e),e(n6e,ATr),e(aM,yTr),e(aM,xQ),e(xQ,LTr),e(aM,xTr),e(K,kTr),e(K,nM),e(nM,s6e),e(s6e,STr),e(nM,RTr),e(nM,kQ),e(kQ,BTr),e(nM,PTr),e(K,$Tr),e(K,sM),e(sM,l6e),e(l6e,ITr),e(sM,qTr),e(sM,SQ),e(SQ,NTr),e(sM,jTr),e(K,DTr),e(K,lM),e(lM,i6e),e(i6e,GTr),e(lM,OTr),e(lM,RQ),e(RQ,VTr),e(lM,XTr),e(K,zTr),e(K,iM),e(iM,d6e),e(d6e,QTr),e(iM,WTr),e(iM,BQ),e(BQ,HTr),e(iM,UTr),e(K,JTr),e(K,dM),e(dM,c6e),e(c6e,YTr),e(dM,KTr),e(dM,PQ),e(PQ,ZTr),e(dM,e7r),e(K,o7r),e(K,cM),e(cM,f6e),e(f6e,r7r),e(cM,t7r),e(cM,$Q),e($Q,a7r),e(cM,n7r),e(K,s7r),e(K,fM),e(fM,m6e),e(m6e,l7r),e(fM,i7r),e(fM,IQ),e(IQ,d7r),e(fM,c7r),e(K,f7r),e(K,mM),e(mM,g6e),e(g6e,m7r),e(mM,g7r),e(mM,qQ),e(qQ,h7r),e(mM,p7r),e(K,_7r),e(K,gM),e(gM,h6e),e(h6e,u7r),e(gM,b7r),e(gM,NQ),e(NQ,F7r),e(gM,v7r),e(K,T7r),e(K,hM),e(hM,p6e),e(p6e,M7r),e(hM,E7r),e(hM,jQ),e(jQ,C7r),e(hM,w7r),e(K,A7r),e(K,pM),e(pM,_6e),e(_6e,y7r),e(pM,L7r),e(pM,DQ),e(DQ,x7r),e(pM,k7r),e(K,S7r),e(K,_M),e(_M,u6e),e(u6e,R7r),e(_M,B7r),e(_M,GQ),e(GQ,P7r),e(_M,$7r),e(K,I7r),e(K,uM),e(uM,b6e),e(b6e,q7r),e(uM,N7r),e(uM,OQ),e(OQ,j7r),e(uM,D7r),e(K,G7r),e(K,bM),e(bM,F6e),e(F6e,O7r),e(bM,V7r),e(bM,VQ),e(VQ,X7r),e(bM,z7r),e(K,Q7r),e(K,FM),e(FM,v6e),e(v6e,W7r),e(FM,H7r),e(FM,XQ),e(XQ,U7r),e(FM,J7r),e(K,Y7r),e(K,vM),e(vM,T6e),e(T6e,K7r),e(vM,Z7r),e(vM,zQ),e(zQ,e9r),e(vM,o9r),e(K,r9r),e(K,TM),e(TM,M6e),e(M6e,t9r),e(TM,a9r),e(TM,QQ),e(QQ,n9r),e(TM,s9r),e(K,l9r),e(K,MM),e(MM,E6e),e(E6e,i9r),e(MM,d9r),e(MM,WQ),e(WQ,c9r),e(MM,f9r),e(K,m9r),e(K,EM),e(EM,C6e),e(C6e,g9r),e(EM,h9r),e(EM,HQ),e(HQ,p9r),e(EM,_9r),e(Co,u9r),e(Co,w6e),e(w6e,b9r),e(Co,F9r),g(j0,Co,null),b(c,qPe,u),b(c,Wc,u),e(Wc,CM),e(CM,A6e),g(D0,A6e,null),e(Wc,v9r),e(Wc,y6e),e(y6e,T9r),b(c,NPe,u),b(c,kr,u),g(G0,kr,null),e(kr,M9r),e(kr,Hc),e(Hc,E9r),e(Hc,UQ),e(UQ,C9r),e(Hc,w9r),e(Hc,JQ),e(JQ,A9r),e(Hc,y9r),e(kr,L9r),e(kr,O0),e(O0,x9r),e(O0,L6e),e(L6e,k9r),e(O0,S9r),e(kr,R9r),e(kr,Ct),g(V0,Ct,null),e(Ct,B9r),e(Ct,x6e),e(x6e,P9r),e(Ct,$9r),e(Ct,Uc),e(Uc,I9r),e(Uc,k6e),e(k6e,q9r),e(Uc,N9r),e(Uc,YQ),e(YQ,j9r),e(Uc,D9r),e(Ct,G9r),e(Ct,S6e),e(S6e,O9r),e(Ct,V9r),g(X0,Ct,null),e(kr,X9r),e(kr,wo),g(z0,wo,null),e(wo,z9r),e(wo,R6e),e(R6e,Q9r),e(wo,W9r),e(wo,Ln),e(Ln,H9r),e(Ln,B6e),e(B6e,U9r),e(Ln,J9r),e(Ln,P6e),e(P6e,Y9r),e(Ln,K9r),e(Ln,$6e),e($6e,Z9r),e(Ln,eMr),e(wo,oMr),e(wo,I6e),e(I6e,wM),e(wM,q6e),e(q6e,rMr),e(wM,tMr),e(wM,KQ),e(KQ,aMr),e(wM,nMr),e(wo,sMr),e(wo,N6e),e(N6e,lMr),e(wo,iMr),g(Q0,wo,null),b(c,jPe,u),b(c,Jc,u),e(Jc,AM),e(AM,j6e),g(W0,j6e,null),e(Jc,dMr),e(Jc,D6e),e(D6e,cMr),b(c,DPe,u),b(c,Sr,u),g(H0,Sr,null),e(Sr,fMr),e(Sr,Yc),e(Yc,mMr),e(Yc,ZQ),e(ZQ,gMr),e(Yc,hMr),e(Yc,eW),e(eW,pMr),e(Yc,_Mr),e(Sr,uMr),e(Sr,U0),e(U0,bMr),e(U0,G6e),e(G6e,FMr),e(U0,vMr),e(Sr,TMr),e(Sr,wt),g(J0,wt,null),e(wt,MMr),e(wt,O6e),e(O6e,EMr),e(wt,CMr),e(wt,Kc),e(Kc,wMr),e(Kc,V6e),e(V6e,AMr),e(Kc,yMr),e(Kc,oW),e(oW,LMr),e(Kc,xMr),e(wt,kMr),e(wt,X6e),e(X6e,SMr),e(wt,RMr),g(Y0,wt,null),e(Sr,BMr),e(Sr,Ao),g(K0,Ao,null),e(Ao,PMr),e(Ao,z6e),e(z6e,$Mr),e(Ao,IMr),e(Ao,xn),e(xn,qMr),e(xn,Q6e),e(Q6e,NMr),e(xn,jMr),e(xn,W6e),e(W6e,DMr),e(xn,GMr),e(xn,H6e),e(H6e,OMr),e(xn,VMr),e(Ao,XMr),e(Ao,U6e),e(U6e,yM),e(yM,J6e),e(J6e,zMr),e(yM,QMr),e(yM,rW),e(rW,WMr),e(yM,HMr),e(Ao,UMr),e(Ao,Y6e),e(Y6e,JMr),e(Ao,YMr),g(Z0,Ao,null),b(c,GPe,u),b(c,Zc,u),e(Zc,LM),e(LM,K6e),g(ey,K6e,null),e(Zc,KMr),e(Zc,Z6e),e(Z6e,ZMr),b(c,OPe,u),b(c,Rr,u),g(oy,Rr,null),e(Rr,e4r),e(Rr,ef),e(ef,o4r),e(ef,tW),e(tW,r4r),e(ef,t4r),e(ef,aW),e(aW,a4r),e(ef,n4r),e(Rr,s4r),e(Rr,ry),e(ry,l4r),e(ry,eFe),e(eFe,i4r),e(ry,d4r),e(Rr,c4r),e(Rr,At),g(ty,At,null),e(At,f4r),e(At,oFe),e(oFe,m4r),e(At,g4r),e(At,of),e(of,h4r),e(of,rFe),e(rFe,p4r),e(of,_4r),e(of,nW),e(nW,u4r),e(of,b4r),e(At,F4r),e(At,tFe),e(tFe,v4r),e(At,T4r),g(ay,At,null),e(Rr,M4r),e(Rr,yo),g(ny,yo,null),e(yo,E4r),e(yo,aFe),e(aFe,C4r),e(yo,w4r),e(yo,kn),e(kn,A4r),e(kn,nFe),e(nFe,y4r),e(kn,L4r),e(kn,sFe),e(sFe,x4r),e(kn,k4r),e(kn,lFe),e(lFe,S4r),e(kn,R4r),e(yo,B4r),e(yo,X),e(X,xM),e(xM,iFe),e(iFe,P4r),e(xM,$4r),e(xM,sW),e(sW,I4r),e(xM,q4r),e(X,N4r),e(X,kM),e(kM,dFe),e(dFe,j4r),e(kM,D4r),e(kM,lW),e(lW,G4r),e(kM,O4r),e(X,V4r),e(X,SM),e(SM,cFe),e(cFe,X4r),e(SM,z4r),e(SM,iW),e(iW,Q4r),e(SM,W4r),e(X,H4r),e(X,RM),e(RM,fFe),e(fFe,U4r),e(RM,J4r),e(RM,dW),e(dW,Y4r),e(RM,K4r),e(X,Z4r),e(X,BM),e(BM,mFe),e(mFe,eEr),e(BM,oEr),e(BM,cW),e(cW,rEr),e(BM,tEr),e(X,aEr),e(X,PM),e(PM,gFe),e(gFe,nEr),e(PM,sEr),e(PM,fW),e(fW,lEr),e(PM,iEr),e(X,dEr),e(X,$M),e($M,hFe),e(hFe,cEr),e($M,fEr),e($M,mW),e(mW,mEr),e($M,gEr),e(X,hEr),e(X,IM),e(IM,pFe),e(pFe,pEr),e(IM,_Er),e(IM,gW),e(gW,uEr),e(IM,bEr),e(X,FEr),e(X,qM),e(qM,_Fe),e(_Fe,vEr),e(qM,TEr),e(qM,hW),e(hW,MEr),e(qM,EEr),e(X,CEr),e(X,NM),e(NM,uFe),e(uFe,wEr),e(NM,AEr),e(NM,pW),e(pW,yEr),e(NM,LEr),e(X,xEr),e(X,jM),e(jM,bFe),e(bFe,kEr),e(jM,SEr),e(jM,_W),e(_W,REr),e(jM,BEr),e(X,PEr),e(X,DM),e(DM,FFe),e(FFe,$Er),e(DM,IEr),e(DM,uW),e(uW,qEr),e(DM,NEr),e(X,jEr),e(X,GM),e(GM,vFe),e(vFe,DEr),e(GM,GEr),e(GM,bW),e(bW,OEr),e(GM,VEr),e(X,XEr),e(X,OM),e(OM,TFe),e(TFe,zEr),e(OM,QEr),e(OM,FW),e(FW,WEr),e(OM,HEr),e(X,UEr),e(X,VM),e(VM,MFe),e(MFe,JEr),e(VM,YEr),e(VM,vW),e(vW,KEr),e(VM,ZEr),e(X,e5r),e(X,XM),e(XM,EFe),e(EFe,o5r),e(XM,r5r),e(XM,TW),e(TW,t5r),e(XM,a5r),e(X,n5r),e(X,zM),e(zM,CFe),e(CFe,s5r),e(zM,l5r),e(zM,MW),e(MW,i5r),e(zM,d5r),e(X,c5r),e(X,QM),e(QM,wFe),e(wFe,f5r),e(QM,m5r),e(QM,EW),e(EW,g5r),e(QM,h5r),e(X,p5r),e(X,WM),e(WM,AFe),e(AFe,_5r),e(WM,u5r),e(WM,CW),e(CW,b5r),e(WM,F5r),e(X,v5r),e(X,HM),e(HM,yFe),e(yFe,T5r),e(HM,M5r),e(HM,wW),e(wW,E5r),e(HM,C5r),e(X,w5r),e(X,UM),e(UM,LFe),e(LFe,A5r),e(UM,y5r),e(UM,AW),e(AW,L5r),e(UM,x5r),e(X,k5r),e(X,JM),e(JM,xFe),e(xFe,S5r),e(JM,R5r),e(JM,yW),e(yW,B5r),e(JM,P5r),e(X,$5r),e(X,YM),e(YM,kFe),e(kFe,I5r),e(YM,q5r),e(YM,LW),e(LW,N5r),e(YM,j5r),e(X,D5r),e(X,KM),e(KM,SFe),e(SFe,G5r),e(KM,O5r),e(KM,xW),e(xW,V5r),e(KM,X5r),e(X,z5r),e(X,ZM),e(ZM,RFe),e(RFe,Q5r),e(ZM,W5r),e(ZM,kW),e(kW,H5r),e(ZM,U5r),e(X,J5r),e(X,e4),e(e4,BFe),e(BFe,Y5r),e(e4,K5r),e(e4,SW),e(SW,Z5r),e(e4,e3r),e(yo,o3r),e(yo,PFe),e(PFe,r3r),e(yo,t3r),g(sy,yo,null),b(c,VPe,u),b(c,rf,u),e(rf,o4),e(o4,$Fe),g(ly,$Fe,null),e(rf,a3r),e(rf,IFe),e(IFe,n3r),b(c,XPe,u),b(c,Br,u),g(iy,Br,null),e(Br,s3r),e(Br,tf),e(tf,l3r),e(tf,RW),e(RW,i3r),e(tf,d3r),e(tf,BW),e(BW,c3r),e(tf,f3r),e(Br,m3r),e(Br,dy),e(dy,g3r),e(dy,qFe),e(qFe,h3r),e(dy,p3r),e(Br,_3r),e(Br,yt),g(cy,yt,null),e(yt,u3r),e(yt,NFe),e(NFe,b3r),e(yt,F3r),e(yt,af),e(af,v3r),e(af,jFe),e(jFe,T3r),e(af,M3r),e(af,PW),e(PW,E3r),e(af,C3r),e(yt,w3r),e(yt,DFe),e(DFe,A3r),e(yt,y3r),g(fy,yt,null),e(Br,L3r),e(Br,Lo),g(my,Lo,null),e(Lo,x3r),e(Lo,GFe),e(GFe,k3r),e(Lo,S3r),e(Lo,Sn),e(Sn,R3r),e(Sn,OFe),e(OFe,B3r),e(Sn,P3r),e(Sn,VFe),e(VFe,$3r),e(Sn,I3r),e(Sn,XFe),e(XFe,q3r),e(Sn,N3r),e(Lo,j3r),e(Lo,ca),e(ca,r4),e(r4,zFe),e(zFe,D3r),e(r4,G3r),e(r4,$W),e($W,O3r),e(r4,V3r),e(ca,X3r),e(ca,t4),e(t4,QFe),e(QFe,z3r),e(t4,Q3r),e(t4,IW),e(IW,W3r),e(t4,H3r),e(ca,U3r),e(ca,a4),e(a4,WFe),e(WFe,J3r),e(a4,Y3r),e(a4,qW),e(qW,K3r),e(a4,Z3r),e(ca,eCr),e(ca,n4),e(n4,HFe),e(HFe,oCr),e(n4,rCr),e(n4,NW),e(NW,tCr),e(n4,aCr),e(ca,nCr),e(ca,s4),e(s4,UFe),e(UFe,sCr),e(s4,lCr),e(s4,jW),e(jW,iCr),e(s4,dCr),e(Lo,cCr),e(Lo,JFe),e(JFe,fCr),e(Lo,mCr),g(gy,Lo,null),b(c,zPe,u),b(c,nf,u),e(nf,l4),e(l4,YFe),g(hy,YFe,null),e(nf,gCr),e(nf,KFe),e(KFe,hCr),b(c,QPe,u),b(c,Pr,u),g(py,Pr,null),e(Pr,pCr),e(Pr,sf),e(sf,_Cr),e(sf,DW),e(DW,uCr),e(sf,bCr),e(sf,GW),e(GW,FCr),e(sf,vCr),e(Pr,TCr),e(Pr,_y),e(_y,MCr),e(_y,ZFe),e(ZFe,ECr),e(_y,CCr),e(Pr,wCr),e(Pr,Lt),g(uy,Lt,null),e(Lt,ACr),e(Lt,eve),e(eve,yCr),e(Lt,LCr),e(Lt,lf),e(lf,xCr),e(lf,ove),e(ove,kCr),e(lf,SCr),e(lf,OW),e(OW,RCr),e(lf,BCr),e(Lt,PCr),e(Lt,rve),e(rve,$Cr),e(Lt,ICr),g(by,Lt,null),e(Pr,qCr),e(Pr,xo),g(Fy,xo,null),e(xo,NCr),e(xo,tve),e(tve,jCr),e(xo,DCr),e(xo,Rn),e(Rn,GCr),e(Rn,ave),e(ave,OCr),e(Rn,VCr),e(Rn,nve),e(nve,XCr),e(Rn,zCr),e(Rn,sve),e(sve,QCr),e(Rn,WCr),e(xo,HCr),e(xo,ce),e(ce,i4),e(i4,lve),e(lve,UCr),e(i4,JCr),e(i4,VW),e(VW,YCr),e(i4,KCr),e(ce,ZCr),e(ce,d4),e(d4,ive),e(ive,ewr),e(d4,owr),e(d4,XW),e(XW,rwr),e(d4,twr),e(ce,awr),e(ce,c4),e(c4,dve),e(dve,nwr),e(c4,swr),e(c4,zW),e(zW,lwr),e(c4,iwr),e(ce,dwr),e(ce,f4),e(f4,cve),e(cve,cwr),e(f4,fwr),e(f4,QW),e(QW,mwr),e(f4,gwr),e(ce,hwr),e(ce,m4),e(m4,fve),e(fve,pwr),e(m4,_wr),e(m4,WW),e(WW,uwr),e(m4,bwr),e(ce,Fwr),e(ce,g4),e(g4,mve),e(mve,vwr),e(g4,Twr),e(g4,HW),e(HW,Mwr),e(g4,Ewr),e(ce,Cwr),e(ce,h4),e(h4,gve),e(gve,wwr),e(h4,Awr),e(h4,UW),e(UW,ywr),e(h4,Lwr),e(ce,xwr),e(ce,p4),e(p4,hve),e(hve,kwr),e(p4,Swr),e(p4,JW),e(JW,Rwr),e(p4,Bwr),e(ce,Pwr),e(ce,_4),e(_4,pve),e(pve,$wr),e(_4,Iwr),e(_4,YW),e(YW,qwr),e(_4,Nwr),e(ce,jwr),e(ce,u4),e(u4,_ve),e(_ve,Dwr),e(u4,Gwr),e(u4,KW),e(KW,Owr),e(u4,Vwr),e(ce,Xwr),e(ce,b4),e(b4,uve),e(uve,zwr),e(b4,Qwr),e(b4,ZW),e(ZW,Wwr),e(b4,Hwr),e(ce,Uwr),e(ce,F4),e(F4,bve),e(bve,Jwr),e(F4,Ywr),e(F4,eH),e(eH,Kwr),e(F4,Zwr),e(ce,eAr),e(ce,v4),e(v4,Fve),e(Fve,oAr),e(v4,rAr),e(v4,oH),e(oH,tAr),e(v4,aAr),e(xo,nAr),e(xo,vve),e(vve,sAr),e(xo,lAr),g(vy,xo,null),b(c,WPe,u),b(c,df,u),e(df,T4),e(T4,Tve),g(Ty,Tve,null),e(df,iAr),e(df,Mve),e(Mve,dAr),b(c,HPe,u),b(c,$r,u),g(My,$r,null),e($r,cAr),e($r,cf),e(cf,fAr),e(cf,rH),e(rH,mAr),e(cf,gAr),e(cf,tH),e(tH,hAr),e(cf,pAr),e($r,_Ar),e($r,Ey),e(Ey,uAr),e(Ey,Eve),e(Eve,bAr),e(Ey,FAr),e($r,vAr),e($r,xt),g(Cy,xt,null),e(xt,TAr),e(xt,Cve),e(Cve,MAr),e(xt,EAr),e(xt,ff),e(ff,CAr),e(ff,wve),e(wve,wAr),e(ff,AAr),e(ff,aH),e(aH,yAr),e(ff,LAr),e(xt,xAr),e(xt,Ave),e(Ave,kAr),e(xt,SAr),g(wy,xt,null),e($r,RAr),e($r,ko),g(Ay,ko,null),e(ko,BAr),e(ko,yve),e(yve,PAr),e(ko,$Ar),e(ko,Bn),e(Bn,IAr),e(Bn,Lve),e(Lve,qAr),e(Bn,NAr),e(Bn,xve),e(xve,jAr),e(Bn,DAr),e(Bn,kve),e(kve,GAr),e(Bn,OAr),e(ko,VAr),e(ko,Fe),e(Fe,M4),e(M4,Sve),e(Sve,XAr),e(M4,zAr),e(M4,nH),e(nH,QAr),e(M4,WAr),e(Fe,HAr),e(Fe,E4),e(E4,Rve),e(Rve,UAr),e(E4,JAr),e(E4,sH),e(sH,YAr),e(E4,KAr),e(Fe,ZAr),e(Fe,C4),e(C4,Bve),e(Bve,e0r),e(C4,o0r),e(C4,lH),e(lH,r0r),e(C4,t0r),e(Fe,a0r),e(Fe,w4),e(w4,Pve),e(Pve,n0r),e(w4,s0r),e(w4,iH),e(iH,l0r),e(w4,i0r),e(Fe,d0r),e(Fe,A4),e(A4,$ve),e($ve,c0r),e(A4,f0r),e(A4,dH),e(dH,m0r),e(A4,g0r),e(Fe,h0r),e(Fe,y4),e(y4,Ive),e(Ive,p0r),e(y4,_0r),e(y4,cH),e(cH,u0r),e(y4,b0r),e(Fe,F0r),e(Fe,L4),e(L4,qve),e(qve,v0r),e(L4,T0r),e(L4,fH),e(fH,M0r),e(L4,E0r),e(Fe,C0r),e(Fe,x4),e(x4,Nve),e(Nve,w0r),e(x4,A0r),e(x4,mH),e(mH,y0r),e(x4,L0r),e(Fe,x0r),e(Fe,k4),e(k4,jve),e(jve,k0r),e(k4,S0r),e(k4,gH),e(gH,R0r),e(k4,B0r),e(Fe,P0r),e(Fe,S4),e(S4,Dve),e(Dve,$0r),e(S4,I0r),e(S4,hH),e(hH,q0r),e(S4,N0r),e(ko,j0r),e(ko,Gve),e(Gve,D0r),e(ko,G0r),g(yy,ko,null),b(c,UPe,u),b(c,mf,u),e(mf,R4),e(R4,Ove),g(Ly,Ove,null),e(mf,O0r),e(mf,Vve),e(Vve,V0r),b(c,JPe,u),b(c,Ir,u),g(xy,Ir,null),e(Ir,X0r),e(Ir,gf),e(gf,z0r),e(gf,pH),e(pH,Q0r),e(gf,W0r),e(gf,_H),e(_H,H0r),e(gf,U0r),e(Ir,J0r),e(Ir,ky),e(ky,Y0r),e(ky,Xve),e(Xve,K0r),e(ky,Z0r),e(Ir,eyr),e(Ir,kt),g(Sy,kt,null),e(kt,oyr),e(kt,zve),e(zve,ryr),e(kt,tyr),e(kt,hf),e(hf,ayr),e(hf,Qve),e(Qve,nyr),e(hf,syr),e(hf,uH),e(uH,lyr),e(hf,iyr),e(kt,dyr),e(kt,Wve),e(Wve,cyr),e(kt,fyr),g(Ry,kt,null),e(Ir,myr),e(Ir,So),g(By,So,null),e(So,gyr),e(So,Hve),e(Hve,hyr),e(So,pyr),e(So,Pn),e(Pn,_yr),e(Pn,Uve),e(Uve,uyr),e(Pn,byr),e(Pn,Jve),e(Jve,Fyr),e(Pn,vyr),e(Pn,Yve),e(Yve,Tyr),e(Pn,Myr),e(So,Eyr),e(So,ve),e(ve,B4),e(B4,Kve),e(Kve,Cyr),e(B4,wyr),e(B4,bH),e(bH,Ayr),e(B4,yyr),e(ve,Lyr),e(ve,P4),e(P4,Zve),e(Zve,xyr),e(P4,kyr),e(P4,FH),e(FH,Syr),e(P4,Ryr),e(ve,Byr),e(ve,$4),e($4,eTe),e(eTe,Pyr),e($4,$yr),e($4,vH),e(vH,Iyr),e($4,qyr),e(ve,Nyr),e(ve,I4),e(I4,oTe),e(oTe,jyr),e(I4,Dyr),e(I4,TH),e(TH,Gyr),e(I4,Oyr),e(ve,Vyr),e(ve,q4),e(q4,rTe),e(rTe,Xyr),e(q4,zyr),e(q4,MH),e(MH,Qyr),e(q4,Wyr),e(ve,Hyr),e(ve,N4),e(N4,tTe),e(tTe,Uyr),e(N4,Jyr),e(N4,EH),e(EH,Yyr),e(N4,Kyr),e(ve,Zyr),e(ve,j4),e(j4,aTe),e(aTe,eLr),e(j4,oLr),e(j4,CH),e(CH,rLr),e(j4,tLr),e(ve,aLr),e(ve,D4),e(D4,nTe),e(nTe,nLr),e(D4,sLr),e(D4,wH),e(wH,lLr),e(D4,iLr),e(ve,dLr),e(ve,G4),e(G4,sTe),e(sTe,cLr),e(G4,fLr),e(G4,AH),e(AH,mLr),e(G4,gLr),e(ve,hLr),e(ve,O4),e(O4,lTe),e(lTe,pLr),e(O4,_Lr),e(O4,yH),e(yH,uLr),e(O4,bLr),e(So,FLr),e(So,iTe),e(iTe,vLr),e(So,TLr),g(Py,So,null),b(c,YPe,u),b(c,pf,u),e(pf,V4),e(V4,dTe),g($y,dTe,null),e(pf,MLr),e(pf,cTe),e(cTe,ELr),b(c,KPe,u),b(c,qr,u),g(Iy,qr,null),e(qr,CLr),e(qr,_f),e(_f,wLr),e(_f,LH),e(LH,ALr),e(_f,yLr),e(_f,xH),e(xH,LLr),e(_f,xLr),e(qr,kLr),e(qr,qy),e(qy,SLr),e(qy,fTe),e(fTe,RLr),e(qy,BLr),e(qr,PLr),e(qr,St),g(Ny,St,null),e(St,$Lr),e(St,mTe),e(mTe,ILr),e(St,qLr),e(St,uf),e(uf,NLr),e(uf,gTe),e(gTe,jLr),e(uf,DLr),e(uf,kH),e(kH,GLr),e(uf,OLr),e(St,VLr),e(St,hTe),e(hTe,XLr),e(St,zLr),g(jy,St,null),e(qr,QLr),e(qr,Ro),g(Dy,Ro,null),e(Ro,WLr),e(Ro,pTe),e(pTe,HLr),e(Ro,ULr),e(Ro,$n),e($n,JLr),e($n,_Te),e(_Te,YLr),e($n,KLr),e($n,uTe),e(uTe,ZLr),e($n,e8r),e($n,bTe),e(bTe,o8r),e($n,r8r),e(Ro,t8r),e(Ro,Te),e(Te,X4),e(X4,FTe),e(FTe,a8r),e(X4,n8r),e(X4,SH),e(SH,s8r),e(X4,l8r),e(Te,i8r),e(Te,z4),e(z4,vTe),e(vTe,d8r),e(z4,c8r),e(z4,RH),e(RH,f8r),e(z4,m8r),e(Te,g8r),e(Te,Q4),e(Q4,TTe),e(TTe,h8r),e(Q4,p8r),e(Q4,BH),e(BH,_8r),e(Q4,u8r),e(Te,b8r),e(Te,W4),e(W4,MTe),e(MTe,F8r),e(W4,v8r),e(W4,PH),e(PH,T8r),e(W4,M8r),e(Te,E8r),e(Te,H4),e(H4,ETe),e(ETe,C8r),e(H4,w8r),e(H4,$H),e($H,A8r),e(H4,y8r),e(Te,L8r),e(Te,U4),e(U4,CTe),e(CTe,x8r),e(U4,k8r),e(U4,IH),e(IH,S8r),e(U4,R8r),e(Te,B8r),e(Te,J4),e(J4,wTe),e(wTe,P8r),e(J4,$8r),e(J4,qH),e(qH,I8r),e(J4,q8r),e(Te,N8r),e(Te,Y4),e(Y4,ATe),e(ATe,j8r),e(Y4,D8r),e(Y4,NH),e(NH,G8r),e(Y4,O8r),e(Te,V8r),e(Te,K4),e(K4,yTe),e(yTe,X8r),e(K4,z8r),e(K4,jH),e(jH,Q8r),e(K4,W8r),e(Te,H8r),e(Te,Z4),e(Z4,LTe),e(LTe,U8r),e(Z4,J8r),e(Z4,DH),e(DH,Y8r),e(Z4,K8r),e(Ro,Z8r),e(Ro,xTe),e(xTe,exr),e(Ro,oxr),g(Gy,Ro,null),b(c,ZPe,u),b(c,bf,u),e(bf,eE),e(eE,kTe),g(Oy,kTe,null),e(bf,rxr),e(bf,STe),e(STe,txr),b(c,e$e,u),b(c,Nr,u),g(Vy,Nr,null),e(Nr,axr),e(Nr,Ff),e(Ff,nxr),e(Ff,GH),e(GH,sxr),e(Ff,lxr),e(Ff,OH),e(OH,ixr),e(Ff,dxr),e(Nr,cxr),e(Nr,Xy),e(Xy,fxr),e(Xy,RTe),e(RTe,mxr),e(Xy,gxr),e(Nr,hxr),e(Nr,Rt),g(zy,Rt,null),e(Rt,pxr),e(Rt,BTe),e(BTe,_xr),e(Rt,uxr),e(Rt,vf),e(vf,bxr),e(vf,PTe),e(PTe,Fxr),e(vf,vxr),e(vf,VH),e(VH,Txr),e(vf,Mxr),e(Rt,Exr),e(Rt,$Te),e($Te,Cxr),e(Rt,wxr),g(Qy,Rt,null),e(Nr,Axr),e(Nr,Bo),g(Wy,Bo,null),e(Bo,yxr),e(Bo,ITe),e(ITe,Lxr),e(Bo,xxr),e(Bo,In),e(In,kxr),e(In,qTe),e(qTe,Sxr),e(In,Rxr),e(In,NTe),e(NTe,Bxr),e(In,Pxr),e(In,jTe),e(jTe,$xr),e(In,Ixr),e(Bo,qxr),e(Bo,Me),e(Me,oE),e(oE,DTe),e(DTe,Nxr),e(oE,jxr),e(oE,XH),e(XH,Dxr),e(oE,Gxr),e(Me,Oxr),e(Me,rE),e(rE,GTe),e(GTe,Vxr),e(rE,Xxr),e(rE,zH),e(zH,zxr),e(rE,Qxr),e(Me,Wxr),e(Me,tE),e(tE,OTe),e(OTe,Hxr),e(tE,Uxr),e(tE,QH),e(QH,Jxr),e(tE,Yxr),e(Me,Kxr),e(Me,aE),e(aE,VTe),e(VTe,Zxr),e(aE,ekr),e(aE,WH),e(WH,okr),e(aE,rkr),e(Me,tkr),e(Me,nE),e(nE,XTe),e(XTe,akr),e(nE,nkr),e(nE,HH),e(HH,skr),e(nE,lkr),e(Me,ikr),e(Me,sE),e(sE,zTe),e(zTe,dkr),e(sE,ckr),e(sE,UH),e(UH,fkr),e(sE,mkr),e(Me,gkr),e(Me,lE),e(lE,QTe),e(QTe,hkr),e(lE,pkr),e(lE,JH),e(JH,_kr),e(lE,ukr),e(Me,bkr),e(Me,iE),e(iE,WTe),e(WTe,Fkr),e(iE,vkr),e(iE,YH),e(YH,Tkr),e(iE,Mkr),e(Me,Ekr),e(Me,dE),e(dE,HTe),e(HTe,Ckr),e(dE,wkr),e(dE,KH),e(KH,Akr),e(dE,ykr),e(Me,Lkr),e(Me,cE),e(cE,UTe),e(UTe,xkr),e(cE,kkr),e(cE,ZH),e(ZH,Skr),e(cE,Rkr),e(Bo,Bkr),e(Bo,JTe),e(JTe,Pkr),e(Bo,$kr),g(Hy,Bo,null),b(c,o$e,u),b(c,Tf,u),e(Tf,fE),e(fE,YTe),g(Uy,YTe,null),e(Tf,Ikr),e(Tf,KTe),e(KTe,qkr),b(c,r$e,u),b(c,jr,u),g(Jy,jr,null),e(jr,Nkr),e(jr,Mf),e(Mf,jkr),e(Mf,eU),e(eU,Dkr),e(Mf,Gkr),e(Mf,oU),e(oU,Okr),e(Mf,Vkr),e(jr,Xkr),e(jr,Yy),e(Yy,zkr),e(Yy,ZTe),e(ZTe,Qkr),e(Yy,Wkr),e(jr,Hkr),e(jr,Bt),g(Ky,Bt,null),e(Bt,Ukr),e(Bt,e7e),e(e7e,Jkr),e(Bt,Ykr),e(Bt,Ef),e(Ef,Kkr),e(Ef,o7e),e(o7e,Zkr),e(Ef,eSr),e(Ef,rU),e(rU,oSr),e(Ef,rSr),e(Bt,tSr),e(Bt,r7e),e(r7e,aSr),e(Bt,nSr),g(Zy,Bt,null),e(jr,sSr),e(jr,Po),g(eL,Po,null),e(Po,lSr),e(Po,t7e),e(t7e,iSr),e(Po,dSr),e(Po,qn),e(qn,cSr),e(qn,a7e),e(a7e,fSr),e(qn,mSr),e(qn,n7e),e(n7e,gSr),e(qn,hSr),e(qn,s7e),e(s7e,pSr),e(qn,_Sr),e(Po,uSr),e(Po,Pe),e(Pe,mE),e(mE,l7e),e(l7e,bSr),e(mE,FSr),e(mE,tU),e(tU,vSr),e(mE,TSr),e(Pe,MSr),e(Pe,gE),e(gE,i7e),e(i7e,ESr),e(gE,CSr),e(gE,aU),e(aU,wSr),e(gE,ASr),e(Pe,ySr),e(Pe,hE),e(hE,d7e),e(d7e,LSr),e(hE,xSr),e(hE,nU),e(nU,kSr),e(hE,SSr),e(Pe,RSr),e(Pe,pE),e(pE,c7e),e(c7e,BSr),e(pE,PSr),e(pE,sU),e(sU,$Sr),e(pE,ISr),e(Pe,qSr),e(Pe,_E),e(_E,f7e),e(f7e,NSr),e(_E,jSr),e(_E,lU),e(lU,DSr),e(_E,GSr),e(Pe,OSr),e(Pe,uE),e(uE,m7e),e(m7e,VSr),e(uE,XSr),e(uE,iU),e(iU,zSr),e(uE,QSr),e(Pe,WSr),e(Pe,bE),e(bE,g7e),e(g7e,HSr),e(bE,USr),e(bE,dU),e(dU,JSr),e(bE,YSr),e(Pe,KSr),e(Pe,FE),e(FE,h7e),e(h7e,ZSr),e(FE,eRr),e(FE,cU),e(cU,oRr),e(FE,rRr),e(Po,tRr),e(Po,p7e),e(p7e,aRr),e(Po,nRr),g(oL,Po,null),b(c,t$e,u),b(c,Cf,u),e(Cf,vE),e(vE,_7e),g(rL,_7e,null),e(Cf,sRr),e(Cf,u7e),e(u7e,lRr),b(c,a$e,u),b(c,Dr,u),g(tL,Dr,null),e(Dr,iRr),e(Dr,wf),e(wf,dRr),e(wf,fU),e(fU,cRr),e(wf,fRr),e(wf,mU),e(mU,mRr),e(wf,gRr),e(Dr,hRr),e(Dr,aL),e(aL,pRr),e(aL,b7e),e(b7e,_Rr),e(aL,uRr),e(Dr,bRr),e(Dr,Pt),g(nL,Pt,null),e(Pt,FRr),e(Pt,F7e),e(F7e,vRr),e(Pt,TRr),e(Pt,Af),e(Af,MRr),e(Af,v7e),e(v7e,ERr),e(Af,CRr),e(Af,gU),e(gU,wRr),e(Af,ARr),e(Pt,yRr),e(Pt,T7e),e(T7e,LRr),e(Pt,xRr),g(sL,Pt,null),e(Dr,kRr),e(Dr,$o),g(lL,$o,null),e($o,SRr),e($o,M7e),e(M7e,RRr),e($o,BRr),e($o,Nn),e(Nn,PRr),e(Nn,E7e),e(E7e,$Rr),e(Nn,IRr),e(Nn,C7e),e(C7e,qRr),e(Nn,NRr),e(Nn,w7e),e(w7e,jRr),e(Nn,DRr),e($o,GRr),e($o,$e),e($e,TE),e(TE,A7e),e(A7e,ORr),e(TE,VRr),e(TE,hU),e(hU,XRr),e(TE,zRr),e($e,QRr),e($e,ME),e(ME,y7e),e(y7e,WRr),e(ME,HRr),e(ME,pU),e(pU,URr),e(ME,JRr),e($e,YRr),e($e,EE),e(EE,L7e),e(L7e,KRr),e(EE,ZRr),e(EE,_U),e(_U,eBr),e(EE,oBr),e($e,rBr),e($e,CE),e(CE,x7e),e(x7e,tBr),e(CE,aBr),e(CE,uU),e(uU,nBr),e(CE,sBr),e($e,lBr),e($e,wE),e(wE,k7e),e(k7e,iBr),e(wE,dBr),e(wE,bU),e(bU,cBr),e(wE,fBr),e($e,mBr),e($e,AE),e(AE,S7e),e(S7e,gBr),e(AE,hBr),e(AE,FU),e(FU,pBr),e(AE,_Br),e($e,uBr),e($e,yE),e(yE,R7e),e(R7e,bBr),e(yE,FBr),e(yE,vU),e(vU,vBr),e(yE,TBr),e($e,MBr),e($e,LE),e(LE,B7e),e(B7e,EBr),e(LE,CBr),e(LE,TU),e(TU,wBr),e(LE,ABr),e($o,yBr),e($o,P7e),e(P7e,LBr),e($o,xBr),g(iL,$o,null),b(c,n$e,u),b(c,yf,u),e(yf,xE),e(xE,$7e),g(dL,$7e,null),e(yf,kBr),e(yf,I7e),e(I7e,SBr),b(c,s$e,u),b(c,Gr,u),g(cL,Gr,null),e(Gr,RBr),e(Gr,Lf),e(Lf,BBr),e(Lf,MU),e(MU,PBr),e(Lf,$Br),e(Lf,EU),e(EU,IBr),e(Lf,qBr),e(Gr,NBr),e(Gr,fL),e(fL,jBr),e(fL,q7e),e(q7e,DBr),e(fL,GBr),e(Gr,OBr),e(Gr,$t),g(mL,$t,null),e($t,VBr),e($t,N7e),e(N7e,XBr),e($t,zBr),e($t,xf),e(xf,QBr),e(xf,j7e),e(j7e,WBr),e(xf,HBr),e(xf,CU),e(CU,UBr),e(xf,JBr),e($t,YBr),e($t,D7e),e(D7e,KBr),e($t,ZBr),g(gL,$t,null),e(Gr,ePr),e(Gr,Io),g(hL,Io,null),e(Io,oPr),e(Io,G7e),e(G7e,rPr),e(Io,tPr),e(Io,jn),e(jn,aPr),e(jn,O7e),e(O7e,nPr),e(jn,sPr),e(jn,V7e),e(V7e,lPr),e(jn,iPr),e(jn,X7e),e(X7e,dPr),e(jn,cPr),e(Io,fPr),e(Io,z7e),e(z7e,kE),e(kE,Q7e),e(Q7e,mPr),e(kE,gPr),e(kE,wU),e(wU,hPr),e(kE,pPr),e(Io,_Pr),e(Io,W7e),e(W7e,uPr),e(Io,bPr),g(pL,Io,null),b(c,l$e,u),b(c,kf,u),e(kf,SE),e(SE,H7e),g(_L,H7e,null),e(kf,FPr),e(kf,U7e),e(U7e,vPr),b(c,i$e,u),b(c,Or,u),g(uL,Or,null),e(Or,TPr),e(Or,Sf),e(Sf,MPr),e(Sf,AU),e(AU,EPr),e(Sf,CPr),e(Sf,yU),e(yU,wPr),e(Sf,APr),e(Or,yPr),e(Or,bL),e(bL,LPr),e(bL,J7e),e(J7e,xPr),e(bL,kPr),e(Or,SPr),e(Or,It),g(FL,It,null),e(It,RPr),e(It,Y7e),e(Y7e,BPr),e(It,PPr),e(It,Rf),e(Rf,$Pr),e(Rf,K7e),e(K7e,IPr),e(Rf,qPr),e(Rf,LU),e(LU,NPr),e(Rf,jPr),e(It,DPr),e(It,Z7e),e(Z7e,GPr),e(It,OPr),g(vL,It,null),e(Or,VPr),e(Or,qo),g(TL,qo,null),e(qo,XPr),e(qo,e9e),e(e9e,zPr),e(qo,QPr),e(qo,Dn),e(Dn,WPr),e(Dn,o9e),e(o9e,HPr),e(Dn,UPr),e(Dn,r9e),e(r9e,JPr),e(Dn,YPr),e(Dn,t9e),e(t9e,KPr),e(Dn,ZPr),e(qo,e$r),e(qo,ML),e(ML,RE),e(RE,a9e),e(a9e,o$r),e(RE,r$r),e(RE,xU),e(xU,t$r),e(RE,a$r),e(ML,n$r),e(ML,BE),e(BE,n9e),e(n9e,s$r),e(BE,l$r),e(BE,kU),e(kU,i$r),e(BE,d$r),e(qo,c$r),e(qo,s9e),e(s9e,f$r),e(qo,m$r),g(EL,qo,null),b(c,d$e,u),b(c,Bf,u),e(Bf,PE),e(PE,l9e),g(CL,l9e,null),e(Bf,g$r),e(Bf,i9e),e(i9e,h$r),b(c,c$e,u),b(c,Vr,u),g(wL,Vr,null),e(Vr,p$r),e(Vr,Pf),e(Pf,_$r),e(Pf,SU),e(SU,u$r),e(Pf,b$r),e(Pf,RU),e(RU,F$r),e(Pf,v$r),e(Vr,T$r),e(Vr,AL),e(AL,M$r),e(AL,d9e),e(d9e,E$r),e(AL,C$r),e(Vr,w$r),e(Vr,qt),g(yL,qt,null),e(qt,A$r),e(qt,c9e),e(c9e,y$r),e(qt,L$r),e(qt,$f),e($f,x$r),e($f,f9e),e(f9e,k$r),e($f,S$r),e($f,BU),e(BU,R$r),e($f,B$r),e(qt,P$r),e(qt,m9e),e(m9e,$$r),e(qt,I$r),g(LL,qt,null),e(Vr,q$r),e(Vr,No),g(xL,No,null),e(No,N$r),e(No,g9e),e(g9e,j$r),e(No,D$r),e(No,Gn),e(Gn,G$r),e(Gn,h9e),e(h9e,O$r),e(Gn,V$r),e(Gn,p9e),e(p9e,X$r),e(Gn,z$r),e(Gn,_9e),e(_9e,Q$r),e(Gn,W$r),e(No,H$r),e(No,u9e),e(u9e,$E),e($E,b9e),e(b9e,U$r),e($E,J$r),e($E,PU),e(PU,Y$r),e($E,K$r),e(No,Z$r),e(No,F9e),e(F9e,eIr),e(No,oIr),g(kL,No,null),f$e=!0},p(c,[u]){const SL={};u&2&&(SL.$$scope={dirty:u,ctx:c}),Vf.$set(SL);const v9e={};u&2&&(v9e.$$scope={dirty:u,ctx:c}),jh.$set(v9e);const T9e={};u&2&&(T9e.$$scope={dirty:u,ctx:c}),Jh.$set(T9e)},i(c){f$e||(h(pe.$$.fragment,c),h(Da.$$.fragment,c),h(D5.$$.fragment,c),h(G5.$$.fragment,c),h(Vf.$$.fragment,c),h(O5.$$.fragment,c),h(V5.$$.fragment,c),h(Q5.$$.fragment,c),h(W5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(J5.$$.fragment,c),h(Z5.$$.fragment,c),h(e3.$$.fragment,c),h(o3.$$.fragment,c),h(r3.$$.fragment,c),h(t3.$$.fragment,c),h(s3.$$.fragment,c),h(jh.$$.fragment,c),h(l3.$$.fragment,c),h(i3.$$.fragment,c),h(d3.$$.fragment,c),h(c3.$$.fragment,c),h(g3.$$.fragment,c),h(Jh.$$.fragment,c),h(h3.$$.fragment,c),h(p3.$$.fragment,c),h(_3.$$.fragment,c),h(u3.$$.fragment,c),h(F3.$$.fragment,c),h(v3.$$.fragment,c),h(T3.$$.fragment,c),h(M3.$$.fragment,c),h(E3.$$.fragment,c),h(C3.$$.fragment,c),h(A3.$$.fragment,c),h(y3.$$.fragment,c),h(L3.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(S3.$$.fragment,c),h(B3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(q3.$$.fragment,c),h(N3.$$.fragment,c),h(D3.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(V3.$$.fragment,c),h(X3.$$.fragment,c),h(z3.$$.fragment,c),h(W3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(eC.$$.fragment,c),h(oC.$$.fragment,c),h(rC.$$.fragment,c),h(tC.$$.fragment,c),h(aC.$$.fragment,c),h(nC.$$.fragment,c),h(lC.$$.fragment,c),h(iC.$$.fragment,c),h(dC.$$.fragment,c),h(cC.$$.fragment,c),h(fC.$$.fragment,c),h(mC.$$.fragment,c),h(hC.$$.fragment,c),h(pC.$$.fragment,c),h(_C.$$.fragment,c),h(uC.$$.fragment,c),h(bC.$$.fragment,c),h(FC.$$.fragment,c),h(TC.$$.fragment,c),h(MC.$$.fragment,c),h(EC.$$.fragment,c),h(CC.$$.fragment,c),h(wC.$$.fragment,c),h(AC.$$.fragment,c),h(LC.$$.fragment,c),h(xC.$$.fragment,c),h(kC.$$.fragment,c),h(SC.$$.fragment,c),h(RC.$$.fragment,c),h(BC.$$.fragment,c),h($C.$$.fragment,c),h(IC.$$.fragment,c),h(qC.$$.fragment,c),h(NC.$$.fragment,c),h(jC.$$.fragment,c),h(DC.$$.fragment,c),h(OC.$$.fragment,c),h(VC.$$.fragment,c),h(XC.$$.fragment,c),h(zC.$$.fragment,c),h(QC.$$.fragment,c),h(WC.$$.fragment,c),h(UC.$$.fragment,c),h(JC.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(ZC.$$.fragment,c),h(ew.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(Fw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(FA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(F0.$$.fragment,c),h(v0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(Fy.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(FL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),f$e=!0)},o(c){p(pe.$$.fragment,c),p(Da.$$.fragment,c),p(D5.$$.fragment,c),p(G5.$$.fragment,c),p(Vf.$$.fragment,c),p(O5.$$.fragment,c),p(V5.$$.fragment,c),p(Q5.$$.fragment,c),p(W5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(J5.$$.fragment,c),p(Z5.$$.fragment,c),p(e3.$$.fragment,c),p(o3.$$.fragment,c),p(r3.$$.fragment,c),p(t3.$$.fragment,c),p(s3.$$.fragment,c),p(jh.$$.fragment,c),p(l3.$$.fragment,c),p(i3.$$.fragment,c),p(d3.$$.fragment,c),p(c3.$$.fragment,c),p(g3.$$.fragment,c),p(Jh.$$.fragment,c),p(h3.$$.fragment,c),p(p3.$$.fragment,c),p(_3.$$.fragment,c),p(u3.$$.fragment,c),p(F3.$$.fragment,c),p(v3.$$.fragment,c),p(T3.$$.fragment,c),p(M3.$$.fragment,c),p(E3.$$.fragment,c),p(C3.$$.fragment,c),p(A3.$$.fragment,c),p(y3.$$.fragment,c),p(L3.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(S3.$$.fragment,c),p(B3.$$.fragment,c),p(P3.$$.fragment,c),p($3.$$.fragment,c),p(I3.$$.fragment,c),p(q3.$$.fragment,c),p(N3.$$.fragment,c),p(D3.$$.fragment,c),p(G3.$$.fragment,c),p(O3.$$.fragment,c),p(V3.$$.fragment,c),p(X3.$$.fragment,c),p(z3.$$.fragment,c),p(W3.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(eC.$$.fragment,c),p(oC.$$.fragment,c),p(rC.$$.fragment,c),p(tC.$$.fragment,c),p(aC.$$.fragment,c),p(nC.$$.fragment,c),p(lC.$$.fragment,c),p(iC.$$.fragment,c),p(dC.$$.fragment,c),p(cC.$$.fragment,c),p(fC.$$.fragment,c),p(mC.$$.fragment,c),p(hC.$$.fragment,c),p(pC.$$.fragment,c),p(_C.$$.fragment,c),p(uC.$$.fragment,c),p(bC.$$.fragment,c),p(FC.$$.fragment,c),p(TC.$$.fragment,c),p(MC.$$.fragment,c),p(EC.$$.fragment,c),p(CC.$$.fragment,c),p(wC.$$.fragment,c),p(AC.$$.fragment,c),p(LC.$$.fragment,c),p(xC.$$.fragment,c),p(kC.$$.fragment,c),p(SC.$$.fragment,c),p(RC.$$.fragment,c),p(BC.$$.fragment,c),p($C.$$.fragment,c),p(IC.$$.fragment,c),p(qC.$$.fragment,c),p(NC.$$.fragment,c),p(jC.$$.fragment,c),p(DC.$$.fragment,c),p(OC.$$.fragment,c),p(VC.$$.fragment,c),p(XC.$$.fragment,c),p(zC.$$.fragment,c),p(QC.$$.fragment,c),p(WC.$$.fragment,c),p(UC.$$.fragment,c),p(JC.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(ZC.$$.fragment,c),p(ew.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(Fw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(FA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(CA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(NA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(F0.$$.fragment,c),p(v0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(y0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p(P0.$$.fragment,c),p(I0.$$.fragment,c),p(q0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(V0.$$.fragment,c),p(X0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(Fy.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(FL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(yL.$$.fragment,c),p(LL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),f$e=!1},d(c){t(Z),c&&t(io),c&&t(fe),_(pe),c&&t(Nf),c&&t(fa),c&&t(ke),c&&t(co),c&&t(Df),_(Da,c),c&&t(fo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(cBe),c&&t(zi),_(D5),c&&t(fBe),c&&t(Qn),c&&t(mBe),_(G5,c),c&&t(gBe),c&&t(P8),c&&t(hBe),_(Vf,c),c&&t(pBe),c&&t(Qi),_(O5),c&&t(_Be),c&&t(Qo),_(V5),_(Q5),_(W5),_(H5),c&&t(uBe),c&&t(Hi),_(U5),c&&t(bBe),c&&t(Wo),_(J5),_(Z5),_(e3),_(o3),c&&t(FBe),c&&t(Ui),_(r3),c&&t(vBe),c&&t(Ho),_(t3),_(s3),_(jh),_(l3),_(i3),c&&t(TBe),c&&t(Ji),_(d3),c&&t(MBe),c&&t(Uo),_(c3),_(g3),_(Jh),_(h3),_(p3),c&&t(EBe),c&&t(Ki),_(_3),c&&t(CBe),c&&t(Jo),_(u3),_(F3),_(v3),_(T3),_(M3),c&&t(wBe),c&&t(od),_(E3),c&&t(ABe),c&&t(Yo),_(C3),_(A3),_(y3),_(L3),_(x3),c&&t(yBe),c&&t(ad),_(k3),c&&t(LBe),c&&t(Ko),_(S3),_(B3),_(P3),_($3),_(I3),c&&t(xBe),c&&t(ld),_(q3),c&&t(kBe),c&&t(Zo),_(N3),_(D3),_(G3),_(O3),_(V3),c&&t(SBe),c&&t(cd),_(X3),c&&t(RBe),c&&t(er),_(z3),_(W3),_(H3),_(U3),_(J3),c&&t(BBe),c&&t(gd),_(Y3),c&&t(PBe),c&&t(or),_(K3),_(eC),_(oC),_(rC),_(tC),c&&t($Be),c&&t(_d),_(aC),c&&t(IBe),c&&t(rr),_(nC),_(lC),_(iC),_(dC),_(cC),c&&t(qBe),c&&t(Fd),_(fC),c&&t(NBe),c&&t(tr),_(mC),_(hC),_(pC),_(_C),_(uC),c&&t(jBe),c&&t(Md),_(bC),c&&t(DBe),c&&t(ar),_(FC),_(TC),_(MC),_(EC),_(CC),c&&t(GBe),c&&t(wd),_(wC),c&&t(OBe),c&&t(nr),_(AC),_(LC),_(xC),_(kC),_(SC),c&&t(VBe),c&&t(Ld),_(RC),c&&t(XBe),c&&t(sr),_(BC),_($C),_(IC),_(qC),_(NC),c&&t(zBe),c&&t(Sd),_(jC),c&&t(QBe),c&&t(lr),_(DC),_(OC),_(VC),_(XC),_(zC),c&&t(WBe),c&&t(Pd),_(QC),c&&t(HBe),c&&t(ir),_(WC),_(UC),_(JC),_(YC),_(KC),c&&t(UBe),c&&t(qd),_(ZC),c&&t(JBe),c&&t(dr),_(ew),_(rw),_(tw),_(aw),_(nw),c&&t(YBe),c&&t(Dd),_(sw),c&&t(KBe),c&&t(cr),_(lw),_(dw),_(cw),_(fw),_(mw),c&&t(ZBe),c&&t(Vd),_(gw),c&&t(ePe),c&&t(fr),_(hw),_(_w),_(uw),_(bw),_(Fw),c&&t(oPe),c&&t(Qd),_(vw),c&&t(rPe),c&&t(mr),_(Tw),_(Ew),_(Cw),_(ww),_(yw),c&&t(tPe),c&&t(Ud),_(Lw),c&&t(aPe),c&&t(gr),_(xw),_(Sw),_(Rw),_(Bw),_(Pw),c&&t(nPe),c&&t(Kd),_($w),c&&t(sPe),c&&t(hr),_(Iw),_(Nw),_(jw),_(Dw),_(Gw),c&&t(lPe),c&&t(rc),_(Ow),c&&t(iPe),c&&t(pr),_(Vw),_(zw),_(Qw),_(Ww),_(Hw),c&&t(dPe),c&&t(nc),_(Uw),c&&t(cPe),c&&t(_r),_(Jw),_(Kw),_(Zw),_(eA),_(oA),c&&t(fPe),c&&t(ic),_(rA),c&&t(mPe),c&&t(ur),_(tA),_(nA),_(sA),_(lA),_(iA),c&&t(gPe),c&&t(fc),_(dA),c&&t(hPe),c&&t(br),_(cA),_(mA),_(gA),_(hA),_(pA),c&&t(pPe),c&&t(hc),_(_A),c&&t(_Pe),c&&t(Fr),_(uA),_(FA),_(vA),_(TA),_(MA),c&&t(uPe),c&&t(uc),_(EA),c&&t(bPe),c&&t(vr),_(CA),_(AA),_(yA),_(LA),_(xA),c&&t(FPe),c&&t(vc),_(kA),c&&t(vPe),c&&t(Tr),_(SA),_(BA),_(PA),_($A),_(IA),c&&t(TPe),c&&t(Ec),_(qA),c&&t(MPe),c&&t(Mr),_(NA),_(DA),_(GA),_(OA),_(XA),c&&t(EPe),c&&t(Ac),_(zA),c&&t(CPe),c&&t(Er),_(QA),_(HA),_(UA),_(JA),_(YA),c&&t(wPe),c&&t(xc),_(KA),c&&t(APe),c&&t(Cr),_(ZA),_(o0),_(r0),_(t0),_(a0),c&&t(yPe),c&&t(Rc),_(n0),c&&t(LPe),c&&t(wr),_(s0),_(i0),_(d0),_(c0),_(f0),c&&t(xPe),c&&t($c),_(m0),c&&t(kPe),c&&t(Ar),_(g0),_(p0),_(_0),_(u0),_(b0),c&&t(SPe),c&&t(Nc),_(F0),c&&t(RPe),c&&t(yr),_(v0),_(M0),_(E0),_(C0),_(w0),c&&t(BPe),c&&t(Gc),_(A0),c&&t(PPe),c&&t(Lr),_(y0),_(x0),_(k0),_(S0),_(R0),c&&t($Pe),c&&t(Xc),_(B0),c&&t(IPe),c&&t(xr),_(P0),_(I0),_(q0),_(N0),_(j0),c&&t(qPe),c&&t(Wc),_(D0),c&&t(NPe),c&&t(kr),_(G0),_(V0),_(X0),_(z0),_(Q0),c&&t(jPe),c&&t(Jc),_(W0),c&&t(DPe),c&&t(Sr),_(H0),_(J0),_(Y0),_(K0),_(Z0),c&&t(GPe),c&&t(Zc),_(ey),c&&t(OPe),c&&t(Rr),_(oy),_(ty),_(ay),_(ny),_(sy),c&&t(VPe),c&&t(rf),_(ly),c&&t(XPe),c&&t(Br),_(iy),_(cy),_(fy),_(my),_(gy),c&&t(zPe),c&&t(nf),_(hy),c&&t(QPe),c&&t(Pr),_(py),_(uy),_(by),_(Fy),_(vy),c&&t(WPe),c&&t(df),_(Ty),c&&t(HPe),c&&t($r),_(My),_(Cy),_(wy),_(Ay),_(yy),c&&t(UPe),c&&t(mf),_(Ly),c&&t(JPe),c&&t(Ir),_(xy),_(Sy),_(Ry),_(By),_(Py),c&&t(YPe),c&&t(pf),_($y),c&&t(KPe),c&&t(qr),_(Iy),_(Ny),_(jy),_(Dy),_(Gy),c&&t(ZPe),c&&t(bf),_(Oy),c&&t(e$e),c&&t(Nr),_(Vy),_(zy),_(Qy),_(Wy),_(Hy),c&&t(o$e),c&&t(Tf),_(Uy),c&&t(r$e),c&&t(jr),_(Jy),_(Ky),_(Zy),_(eL),_(oL),c&&t(t$e),c&&t(Cf),_(rL),c&&t(a$e),c&&t(Dr),_(tL),_(nL),_(sL),_(lL),_(iL),c&&t(n$e),c&&t(yf),_(dL),c&&t(s$e),c&&t(Gr),_(cL),_(mL),_(gL),_(hL),_(pL),c&&t(l$e),c&&t(kf),_(_L),c&&t(i$e),c&&t(Or),_(uL),_(FL),_(vL),_(TL),_(EL),c&&t(d$e),c&&t(Bf),_(CL),c&&t(c$e),c&&t(Vr),_(wL),_(yL),_(LL),_(xL),_(kL)}}}const gwt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function hwt(qf){return iwt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class vwt extends awt{constructor(Z){super();nwt(this,Z,hwt,mwt,swt,{})}}export{vwt as default,gwt as metadata};
