import{S as hCt,i as pCt,s as _Ct,e as a,k as l,w as f,t as o,M as uCt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as bCt}from"../../chunks/vendor-6b77c823.js";import{T as v$r}from"../../chunks/Tip-39098574.js";import{D as w}from"../../chunks/Docstring-17b815d9.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as z}from"../../chunks/IconCopyLink-7a11ce68.js";function FCt(qf){let Z,io,ce,Ce,lo,he,Ee,Xo,qi,Nf,fa,Ni,ji,S5,jf,ke,co,Di,Gn,R5,On,Vn,B5,Gi,Xn,P5,Oi,Df,Da;return{c(){Z=a("p"),io=o("If your "),ce=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),he=a("code"),Ee=o("PretrainedConfig"),Xo=o(`, make sure its
`),qi=a("code"),Nf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Ni=a("code"),ji=o('"new-model"'),S5=o(")."),jf=l(),ke=a("p"),co=o("Likewise, if your "),Di=a("code"),Gn=o("NewModel"),R5=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),B5=o(`, make sure its
`),Gi=a("code"),Xn=o("config_class"),P5=o(` attribute is set to the same class you use when registering the model (here
`),Oi=a("code"),Df=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var ue=s(Z);io=r(ue,"If your "),ce=n(ue,"CODE",{});var C8=s(ce);Ce=r(C8,"NewModelConfig"),C8.forEach(t),lo=r(ue," is a subclass of "),he=n(ue,"CODE",{});var Vi=s(he);Ee=r(Vi,"PretrainedConfig"),Vi.forEach(t),Xo=r(ue,`, make sure its
`),qi=n(ue,"CODE",{});var w8=s(qi);Nf=r(w8,"model_type"),w8.forEach(t),fa=r(ue," attribute is set to the same key you use when registering the config (here "),Ni=n(ue,"CODE",{});var A8=s(Ni);ji=r(A8,'"new-model"'),A8.forEach(t),S5=r(ue,")."),ue.forEach(t),jf=i(fo),ke=n(fo,"P",{});var zo=s(ke);co=r(zo,"Likewise, if your "),Di=n(zo,"CODE",{});var Ga=s(Di);Gn=r(Ga,"NewModel"),Ga.forEach(t),R5=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var y8=s(On);Vn=r(y8,"PreTrainedModel"),y8.forEach(t),B5=r(zo,`, make sure its
`),Gi=n(zo,"CODE",{});var Gf=s(Gi);Xn=r(Gf,"config_class"),Gf.forEach(t),P5=r(zo,` attribute is set to the same class you use when registering the model (here
`),Oi=n(zo,"CODE",{});var L8=s(Oi);Df=r(L8,"NewModelConfig"),L8.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel")},m(fo,ue){b(fo,Z,ue),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo),e(Z,he),e(he,Ee),e(Z,Xo),e(Z,qi),e(qi,Nf),e(Z,fa),e(Z,Ni),e(Ni,ji),e(Z,S5),b(fo,jf,ue),b(fo,ke,ue),e(ke,co),e(ke,Di),e(Di,Gn),e(ke,R5),e(ke,On),e(On,Vn),e(ke,B5),e(ke,Gi),e(Gi,Xn),e(ke,P5),e(ke,Oi),e(Oi,Df),e(ke,Da)},d(fo){fo&&t(Z),fo&&t(jf),fo&&t(ke)}}}function vCt(qf){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){Z=n(he,"P",{});var Ee=s(Z);io=r(Ee,"Passing "),ce=n(Ee,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Ee," is required when you want to use a private model."),Ee.forEach(t)},m(he,Ee){b(he,Z,Ee),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(he){he&&t(Z)}}}function TCt(qf){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){Z=n(he,"P",{});var Ee=s(Z);io=r(Ee,"Passing "),ce=n(Ee,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Ee," is required when you want to use a private model."),Ee.forEach(t)},m(he,Ee){b(he,Z,Ee),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(he){he&&t(Z)}}}function MCt(qf){let Z,io,ce,Ce,lo,he,Ee,Xo,qi,Nf,fa,Ni,ji,S5,jf,ke,co,Di,Gn,R5,On,Vn,B5,Gi,Xn,P5,Oi,Df,Da,fo,ue,C8,Vi,w8,A8,zo,Ga,y8,Gf,L8,lqe,HRe,Xi,Of,FY,$5,iqe,vY,dqe,URe,zn,cqe,TY,fqe,mqe,MY,gqe,hqe,JRe,I5,YRe,x8,pqe,KRe,Vf,ZRe,zi,Xf,EY,q5,_qe,CY,uqe,eBe,Qo,N5,bqe,j5,Fqe,k8,vqe,Tqe,Mqe,D5,Eqe,wY,Cqe,wqe,Aqe,mo,G5,yqe,AY,Lqe,xqe,Qi,kqe,yY,Sqe,Rqe,LY,Bqe,Pqe,$qe,F,zf,xY,Iqe,qqe,S8,Nqe,jqe,Dqe,Qf,kY,Gqe,Oqe,R8,Vqe,Xqe,zqe,Wf,SY,Qqe,Wqe,B8,Hqe,Uqe,Jqe,Hf,RY,Yqe,Kqe,P8,Zqe,eNe,oNe,Uf,BY,rNe,tNe,$8,aNe,nNe,sNe,Jf,PY,lNe,iNe,I8,dNe,cNe,fNe,Yf,$Y,mNe,gNe,q8,hNe,pNe,_Ne,Kf,IY,uNe,bNe,N8,FNe,vNe,TNe,Zf,qY,MNe,ENe,j8,CNe,wNe,ANe,em,NY,yNe,LNe,D8,xNe,kNe,SNe,om,jY,RNe,BNe,G8,PNe,$Ne,INe,rm,DY,qNe,NNe,O8,jNe,DNe,GNe,tm,GY,ONe,VNe,V8,XNe,zNe,QNe,am,OY,WNe,HNe,X8,UNe,JNe,YNe,nm,VY,KNe,ZNe,z8,eje,oje,rje,sm,XY,tje,aje,Q8,nje,sje,lje,lm,zY,ije,dje,W8,cje,fje,mje,im,QY,gje,hje,H8,pje,_je,uje,dm,WY,bje,Fje,U8,vje,Tje,Mje,cm,HY,Eje,Cje,J8,wje,Aje,yje,fm,UY,Lje,xje,Y8,kje,Sje,Rje,mm,JY,Bje,Pje,K8,$je,Ije,qje,gm,YY,Nje,jje,Z8,Dje,Gje,Oje,hm,KY,Vje,Xje,ex,zje,Qje,Wje,pm,ZY,Hje,Uje,ox,Jje,Yje,Kje,_m,eK,Zje,eDe,rx,oDe,rDe,tDe,um,oK,aDe,nDe,tx,sDe,lDe,iDe,bm,rK,dDe,cDe,ax,fDe,mDe,gDe,Fm,tK,hDe,pDe,nx,_De,uDe,bDe,vm,aK,FDe,vDe,sx,TDe,MDe,EDe,Tm,nK,CDe,wDe,lx,ADe,yDe,LDe,Mm,sK,xDe,kDe,ix,SDe,RDe,BDe,Em,lK,PDe,$De,dx,IDe,qDe,NDe,Cm,iK,jDe,DDe,cx,GDe,ODe,VDe,wm,dK,XDe,zDe,fx,QDe,WDe,HDe,Am,cK,UDe,JDe,mx,YDe,KDe,ZDe,ym,fK,eGe,oGe,gx,rGe,tGe,aGe,Lm,mK,nGe,sGe,hx,lGe,iGe,dGe,xm,gK,cGe,fGe,px,mGe,gGe,hGe,km,hK,pGe,_Ge,_x,uGe,bGe,FGe,Sm,pK,vGe,TGe,ux,MGe,EGe,CGe,Rm,_K,wGe,AGe,bx,yGe,LGe,xGe,Bm,uK,kGe,SGe,Fx,RGe,BGe,PGe,Pm,bK,$Ge,IGe,vx,qGe,NGe,jGe,$m,FK,DGe,GGe,Tx,OGe,VGe,XGe,Im,vK,zGe,QGe,Mx,WGe,HGe,UGe,qm,TK,JGe,YGe,Ex,KGe,ZGe,eOe,Nm,MK,oOe,rOe,Cx,tOe,aOe,nOe,jm,EK,sOe,lOe,wx,iOe,dOe,cOe,Dm,CK,fOe,mOe,Ax,gOe,hOe,pOe,Gm,wK,_Oe,uOe,yx,bOe,FOe,vOe,Om,AK,TOe,MOe,Lx,EOe,COe,wOe,Vm,yK,AOe,yOe,xx,LOe,xOe,kOe,Xm,LK,SOe,ROe,kx,BOe,POe,$Oe,zm,xK,IOe,qOe,Sx,NOe,jOe,DOe,Qm,kK,GOe,OOe,Rx,VOe,XOe,zOe,Wm,SK,QOe,WOe,Bx,HOe,UOe,JOe,Hm,RK,YOe,KOe,Px,ZOe,eVe,oVe,Um,BK,rVe,tVe,$x,aVe,nVe,sVe,Jm,PK,lVe,iVe,Ix,dVe,cVe,fVe,Ym,$K,mVe,gVe,qx,hVe,pVe,_Ve,Km,IK,uVe,bVe,Nx,FVe,vVe,TVe,Zm,qK,MVe,EVe,jx,CVe,wVe,AVe,eg,NK,yVe,LVe,Dx,xVe,kVe,SVe,og,jK,RVe,BVe,Gx,PVe,$Ve,IVe,rg,DK,qVe,NVe,Ox,jVe,DVe,GVe,tg,GK,OVe,VVe,Vx,XVe,zVe,QVe,ag,OK,WVe,HVe,Xx,UVe,JVe,YVe,ng,VK,KVe,ZVe,zx,eXe,oXe,rXe,sg,XK,tXe,aXe,Qx,nXe,sXe,lXe,lg,zK,iXe,dXe,Wx,cXe,fXe,mXe,ig,QK,gXe,hXe,Hx,pXe,_Xe,uXe,dg,WK,bXe,FXe,Ux,vXe,TXe,MXe,cg,HK,EXe,CXe,Jx,wXe,AXe,yXe,fg,UK,LXe,xXe,Yx,kXe,SXe,RXe,mg,JK,BXe,PXe,Kx,$Xe,IXe,qXe,gg,YK,NXe,jXe,Zx,DXe,GXe,OXe,hg,KK,VXe,XXe,ek,zXe,QXe,WXe,pg,ZK,HXe,UXe,ok,JXe,YXe,KXe,_g,eZ,ZXe,eze,rk,oze,rze,tze,ug,oZ,aze,nze,tk,sze,lze,ize,bg,rZ,dze,cze,ak,fze,mze,gze,Fg,tZ,hze,pze,nk,_ze,uze,bze,vg,aZ,Fze,vze,sk,Tze,Mze,Eze,Tg,nZ,Cze,wze,lk,Aze,yze,Lze,Mg,sZ,xze,kze,ik,Sze,Rze,Bze,Eg,lZ,Pze,$ze,dk,Ize,qze,Nze,Cg,iZ,jze,Dze,ck,Gze,Oze,Vze,wg,dZ,Xze,zze,fk,Qze,Wze,Hze,Ag,cZ,Uze,Jze,mk,Yze,Kze,Zze,yg,fZ,eQe,oQe,gk,rQe,tQe,aQe,Lg,mZ,nQe,sQe,hk,lQe,iQe,dQe,xg,gZ,cQe,fQe,pk,mQe,gQe,hQe,kg,hZ,pQe,_Qe,_k,uQe,bQe,FQe,Sg,pZ,vQe,TQe,uk,MQe,EQe,CQe,Rg,_Z,wQe,AQe,bk,yQe,LQe,xQe,Bg,uZ,kQe,SQe,Fk,RQe,BQe,PQe,Pg,bZ,$Qe,IQe,vk,qQe,NQe,jQe,$g,FZ,DQe,GQe,Tk,OQe,VQe,XQe,Ig,vZ,zQe,QQe,Mk,WQe,HQe,UQe,qg,TZ,JQe,YQe,Ek,KQe,ZQe,eWe,Ng,MZ,oWe,rWe,Ck,tWe,aWe,nWe,EZ,sWe,lWe,O5,iWe,jg,V5,dWe,CZ,cWe,oBe,Wi,Dg,wZ,X5,fWe,AZ,mWe,rBe,Wo,z5,gWe,Q5,hWe,wk,pWe,_We,uWe,W5,bWe,yZ,FWe,vWe,TWe,go,H5,MWe,LZ,EWe,CWe,Oa,wWe,xZ,AWe,yWe,kZ,LWe,xWe,SZ,kWe,SWe,RWe,E,Qn,RZ,BWe,PWe,Ak,$We,IWe,yk,qWe,NWe,jWe,Wn,BZ,DWe,GWe,Lk,OWe,VWe,xk,XWe,zWe,QWe,Hn,PZ,WWe,HWe,kk,UWe,JWe,Sk,YWe,KWe,ZWe,Gg,$Z,eHe,oHe,Rk,rHe,tHe,aHe,Un,IZ,nHe,sHe,Bk,lHe,iHe,Pk,dHe,cHe,fHe,Og,qZ,mHe,gHe,$k,hHe,pHe,_He,Vg,NZ,uHe,bHe,Ik,FHe,vHe,THe,Xg,jZ,MHe,EHe,qk,CHe,wHe,AHe,Jn,DZ,yHe,LHe,Nk,xHe,kHe,jk,SHe,RHe,BHe,Yn,GZ,PHe,$He,Dk,IHe,qHe,Gk,NHe,jHe,DHe,Kn,OZ,GHe,OHe,Ok,VHe,XHe,Vk,zHe,QHe,WHe,zg,VZ,HHe,UHe,Xk,JHe,YHe,KHe,Qg,XZ,ZHe,eUe,zk,oUe,rUe,tUe,Zn,zZ,aUe,nUe,Qk,sUe,lUe,Wk,iUe,dUe,cUe,Wg,QZ,fUe,mUe,Hk,gUe,hUe,pUe,es,WZ,_Ue,uUe,Uk,bUe,FUe,Jk,vUe,TUe,MUe,os,HZ,EUe,CUe,Yk,wUe,AUe,Kk,yUe,LUe,xUe,rs,UZ,kUe,SUe,Zk,RUe,BUe,JZ,PUe,$Ue,IUe,Hg,YZ,qUe,NUe,eS,jUe,DUe,GUe,ts,KZ,OUe,VUe,oS,XUe,zUe,rS,QUe,WUe,HUe,Ug,ZZ,UUe,JUe,tS,YUe,KUe,ZUe,as,eee,eJe,oJe,aS,rJe,tJe,nS,aJe,nJe,sJe,ns,oee,lJe,iJe,sS,dJe,cJe,lS,fJe,mJe,gJe,ss,ree,hJe,pJe,iS,_Je,uJe,dS,bJe,FJe,vJe,Jg,tee,TJe,MJe,cS,EJe,CJe,wJe,ls,aee,AJe,yJe,fS,LJe,xJe,mS,kJe,SJe,RJe,Yg,nee,BJe,PJe,gS,$Je,IJe,qJe,is,see,NJe,jJe,hS,DJe,GJe,pS,OJe,VJe,XJe,ds,lee,zJe,QJe,_S,WJe,HJe,uS,UJe,JJe,YJe,cs,iee,KJe,ZJe,bS,eYe,oYe,FS,rYe,tYe,aYe,fs,dee,nYe,sYe,vS,lYe,iYe,TS,dYe,cYe,fYe,Kg,cee,mYe,gYe,MS,hYe,pYe,_Ye,ms,fee,uYe,bYe,ES,FYe,vYe,CS,TYe,MYe,EYe,gs,mee,CYe,wYe,wS,AYe,yYe,AS,LYe,xYe,kYe,hs,gee,SYe,RYe,yS,BYe,PYe,LS,$Ye,IYe,qYe,ps,hee,NYe,jYe,xS,DYe,GYe,kS,OYe,VYe,XYe,_s,pee,zYe,QYe,SS,WYe,HYe,RS,UYe,JYe,YYe,us,_ee,KYe,ZYe,BS,eKe,oKe,PS,rKe,tKe,aKe,bs,uee,nKe,sKe,$S,lKe,iKe,IS,dKe,cKe,fKe,Zg,bee,mKe,gKe,qS,hKe,pKe,_Ke,Fs,Fee,uKe,bKe,NS,FKe,vKe,jS,TKe,MKe,EKe,eh,vee,CKe,wKe,DS,AKe,yKe,LKe,oh,Tee,xKe,kKe,GS,SKe,RKe,BKe,vs,Mee,PKe,$Ke,OS,IKe,qKe,VS,NKe,jKe,DKe,Ts,Eee,GKe,OKe,XS,VKe,XKe,zS,zKe,QKe,WKe,rh,Cee,HKe,UKe,QS,JKe,YKe,KKe,Ms,wee,ZKe,eZe,WS,oZe,rZe,HS,tZe,aZe,nZe,Es,Aee,sZe,lZe,US,iZe,dZe,JS,cZe,fZe,mZe,Cs,yee,gZe,hZe,YS,pZe,_Ze,KS,uZe,bZe,FZe,ws,Lee,vZe,TZe,ZS,MZe,EZe,eR,CZe,wZe,AZe,As,xee,yZe,LZe,oR,xZe,kZe,rR,SZe,RZe,BZe,th,kee,PZe,$Ze,tR,IZe,qZe,NZe,ah,See,jZe,DZe,aR,GZe,OZe,VZe,nh,Ree,XZe,zZe,nR,QZe,WZe,HZe,sh,Bee,UZe,JZe,sR,YZe,KZe,ZZe,ys,Pee,eeo,oeo,lR,reo,teo,iR,aeo,neo,seo,lh,$ee,leo,ieo,dR,deo,ceo,feo,Ls,Iee,meo,geo,cR,heo,peo,fR,_eo,ueo,beo,xs,qee,Feo,veo,mR,Teo,Meo,gR,Eeo,Ceo,weo,ks,Nee,Aeo,yeo,hR,Leo,xeo,pR,keo,Seo,Reo,Ss,jee,Beo,Peo,_R,$eo,Ieo,uR,qeo,Neo,jeo,Rs,Dee,Deo,Geo,bR,Oeo,Veo,FR,Xeo,zeo,Qeo,Bs,Gee,Weo,Heo,vR,Ueo,Jeo,TR,Yeo,Keo,Zeo,ih,Oee,eoo,ooo,MR,roo,too,aoo,dh,Vee,noo,soo,ER,loo,ioo,doo,Ps,Xee,coo,foo,CR,moo,goo,wR,hoo,poo,_oo,$s,zee,uoo,boo,AR,Foo,voo,yR,Too,Moo,Eoo,Is,Qee,Coo,woo,LR,Aoo,yoo,xR,Loo,xoo,koo,ch,Wee,Soo,Roo,kR,Boo,Poo,$oo,fh,Hee,Ioo,qoo,SR,Noo,joo,Doo,mh,Uee,Goo,Ooo,RR,Voo,Xoo,zoo,gh,Jee,Qoo,Woo,BR,Hoo,Uoo,Joo,hh,Yee,Yoo,Koo,PR,Zoo,ero,oro,qs,Kee,rro,tro,$R,aro,nro,IR,sro,lro,iro,ph,Zee,dro,cro,qR,fro,mro,gro,_h,eoe,hro,pro,NR,_ro,uro,bro,Ns,ooe,Fro,vro,jR,Tro,Mro,DR,Ero,Cro,wro,js,roe,Aro,yro,GR,Lro,xro,OR,kro,Sro,Rro,toe,Bro,Pro,U5,$ro,uh,J5,Iro,aoe,qro,tBe,Hi,bh,noe,Y5,Nro,soe,jro,aBe,Ho,K5,Dro,Z5,Gro,VR,Oro,Vro,Xro,e3,zro,loe,Qro,Wro,Hro,Ie,o3,Uro,ioe,Jro,Yro,Va,Kro,doe,Zro,eto,coe,oto,rto,foe,tto,ato,nto,ee,Fh,moe,sto,lto,XR,ito,dto,cto,vh,goe,fto,mto,zR,gto,hto,pto,Th,hoe,_to,uto,QR,bto,Fto,vto,Mh,poe,Tto,Mto,WR,Eto,Cto,wto,Eh,_oe,Ato,yto,HR,Lto,xto,kto,Ch,uoe,Sto,Rto,UR,Bto,Pto,$to,wh,boe,Ito,qto,JR,Nto,jto,Dto,Ah,Foe,Gto,Oto,YR,Vto,Xto,zto,yh,voe,Qto,Wto,KR,Hto,Uto,Jto,Lh,Toe,Yto,Kto,ZR,Zto,eao,oao,xh,Moe,rao,tao,eB,aao,nao,sao,kh,Eoe,lao,iao,oB,dao,cao,fao,Sh,Coe,mao,gao,rB,hao,pao,_ao,Rh,woe,uao,bao,tB,Fao,vao,Tao,Bh,Aoe,Mao,Eao,aB,Cao,wao,Aao,Ph,yoe,yao,Lao,nB,xao,kao,Sao,$h,Loe,Rao,Bao,sB,Pao,$ao,Iao,Ih,xoe,qao,Nao,lB,jao,Dao,Gao,qh,koe,Oao,Vao,iB,Xao,zao,Qao,Nh,Wao,Soe,Hao,Uao,r3,Jao,jh,t3,Yao,Roe,Kao,nBe,Ui,Dh,Boe,a3,Zao,Poe,eno,sBe,Uo,n3,ono,s3,rno,dB,tno,ano,nno,l3,sno,$oe,lno,ino,dno,qe,i3,cno,Ioe,fno,mno,Ji,gno,qoe,hno,pno,Noe,_no,uno,bno,Se,Gh,joe,Fno,vno,cB,Tno,Mno,Eno,Oh,Doe,Cno,wno,fB,Ano,yno,Lno,Vh,Goe,xno,kno,mB,Sno,Rno,Bno,Xh,Ooe,Pno,$no,gB,Ino,qno,Nno,zh,Voe,jno,Dno,hB,Gno,Ono,Vno,Qh,Xoe,Xno,zno,pB,Qno,Wno,Hno,Wh,zoe,Uno,Jno,_B,Yno,Kno,Zno,Hh,Qoe,eso,oso,uB,rso,tso,aso,Uh,nso,Woe,sso,lso,d3,iso,Jh,c3,dso,Hoe,cso,lBe,Yi,Yh,Uoe,f3,fso,Joe,mso,iBe,Jo,m3,gso,Ki,hso,bB,pso,_so,FB,uso,bso,Fso,g3,vso,Yoe,Tso,Mso,Eso,Xr,h3,Cso,Koe,wso,Aso,Zi,yso,Zoe,Lso,xso,vB,kso,Sso,Rso,ere,Bso,Pso,p3,$so,Ne,_3,Iso,ore,qso,Nso,Xa,jso,rre,Dso,Gso,tre,Oso,Vso,are,Xso,zso,Qso,T,Kh,nre,Wso,Hso,TB,Uso,Jso,Yso,Zh,sre,Kso,Zso,MB,elo,olo,rlo,ep,lre,tlo,alo,EB,nlo,slo,llo,op,ire,ilo,dlo,CB,clo,flo,mlo,rp,dre,glo,hlo,wB,plo,_lo,ulo,tp,cre,blo,Flo,AB,vlo,Tlo,Mlo,ap,fre,Elo,Clo,yB,wlo,Alo,ylo,np,mre,Llo,xlo,LB,klo,Slo,Rlo,sp,gre,Blo,Plo,xB,$lo,Ilo,qlo,lp,hre,Nlo,jlo,kB,Dlo,Glo,Olo,ip,pre,Vlo,Xlo,SB,zlo,Qlo,Wlo,dp,_re,Hlo,Ulo,RB,Jlo,Ylo,Klo,cp,ure,Zlo,eio,BB,oio,rio,tio,fp,bre,aio,nio,PB,sio,lio,iio,mp,Fre,dio,cio,$B,fio,mio,gio,gp,vre,hio,pio,IB,_io,uio,bio,hp,Tre,Fio,vio,qB,Tio,Mio,Eio,pp,Mre,Cio,wio,NB,Aio,yio,Lio,_p,Ere,xio,kio,jB,Sio,Rio,Bio,up,Cre,Pio,$io,DB,Iio,qio,Nio,bp,wre,jio,Dio,GB,Gio,Oio,Vio,Fp,Are,Xio,zio,OB,Qio,Wio,Hio,vp,yre,Uio,Jio,VB,Yio,Kio,Zio,Tp,Lre,edo,odo,XB,rdo,tdo,ado,Mp,xre,ndo,sdo,zB,ldo,ido,ddo,Ep,kre,cdo,fdo,QB,mdo,gdo,hdo,Cp,Sre,pdo,_do,WB,udo,bdo,Fdo,wp,Rre,vdo,Tdo,HB,Mdo,Edo,Cdo,Ap,Bre,wdo,Ado,UB,ydo,Ldo,xdo,Ds,Pre,kdo,Sdo,JB,Rdo,Bdo,YB,Pdo,$do,Ido,yp,$re,qdo,Ndo,KB,jdo,Ddo,Gdo,Lp,Ire,Odo,Vdo,ZB,Xdo,zdo,Qdo,xp,qre,Wdo,Hdo,eP,Udo,Jdo,Ydo,kp,Nre,Kdo,Zdo,oP,eco,oco,rco,Sp,jre,tco,aco,rP,nco,sco,lco,Rp,Dre,ico,dco,tP,cco,fco,mco,Bp,Gre,gco,hco,aP,pco,_co,uco,Pp,Ore,bco,Fco,nP,vco,Tco,Mco,$p,Vre,Eco,Cco,sP,wco,Aco,yco,Ip,Xre,Lco,xco,lP,kco,Sco,Rco,qp,zre,Bco,Pco,iP,$co,Ico,qco,Np,Qre,Nco,jco,dP,Dco,Gco,Oco,jp,Wre,Vco,Xco,cP,zco,Qco,Wco,Dp,Hre,Hco,Uco,fP,Jco,Yco,Kco,Gp,Ure,Zco,efo,mP,ofo,rfo,tfo,Op,Jre,afo,nfo,gP,sfo,lfo,ifo,Vp,Yre,dfo,cfo,hP,ffo,mfo,gfo,Xp,Kre,hfo,pfo,pP,_fo,ufo,bfo,zp,Zre,Ffo,vfo,_P,Tfo,Mfo,Efo,Qp,ete,Cfo,wfo,uP,Afo,yfo,Lfo,Wp,ote,xfo,kfo,bP,Sfo,Rfo,Bfo,Hp,rte,Pfo,$fo,FP,Ifo,qfo,Nfo,Up,tte,jfo,Dfo,vP,Gfo,Ofo,Vfo,Jp,ate,Xfo,zfo,TP,Qfo,Wfo,Hfo,Yp,nte,Ufo,Jfo,MP,Yfo,Kfo,Zfo,Kp,ste,emo,omo,EP,rmo,tmo,amo,Zp,lte,nmo,smo,CP,lmo,imo,dmo,e_,ite,cmo,fmo,wP,mmo,gmo,hmo,o_,dte,pmo,_mo,AP,umo,bmo,Fmo,r_,cte,vmo,Tmo,yP,Mmo,Emo,Cmo,t_,fte,wmo,Amo,LP,ymo,Lmo,xmo,a_,mte,kmo,Smo,xP,Rmo,Bmo,Pmo,n_,gte,$mo,Imo,kP,qmo,Nmo,jmo,s_,hte,Dmo,Gmo,SP,Omo,Vmo,Xmo,l_,pte,zmo,Qmo,RP,Wmo,Hmo,Umo,i_,_te,Jmo,Ymo,BP,Kmo,Zmo,ego,d_,ute,ogo,rgo,PP,tgo,ago,ngo,c_,bte,sgo,lgo,$P,igo,dgo,cgo,f_,Fte,fgo,mgo,IP,ggo,hgo,pgo,m_,vte,_go,ugo,qP,bgo,Fgo,vgo,g_,Tte,Tgo,Mgo,NP,Ego,Cgo,wgo,h_,Mte,Ago,ygo,jP,Lgo,xgo,kgo,p_,Ete,Sgo,Rgo,DP,Bgo,Pgo,$go,__,Cte,Igo,qgo,GP,Ngo,jgo,Dgo,u_,wte,Ggo,Ogo,OP,Vgo,Xgo,zgo,b_,Ate,Qgo,Wgo,VP,Hgo,Ugo,Jgo,F_,yte,Ygo,Kgo,XP,Zgo,eho,oho,v_,Lte,rho,tho,zP,aho,nho,sho,T_,xte,lho,iho,QP,dho,cho,fho,M_,kte,mho,gho,WP,hho,pho,_ho,E_,Ste,uho,bho,HP,Fho,vho,Tho,C_,Rte,Mho,Eho,UP,Cho,who,Aho,w_,Bte,yho,Lho,JP,xho,kho,Sho,A_,Pte,Rho,Bho,YP,Pho,$ho,Iho,y_,$te,qho,Nho,KP,jho,Dho,Gho,L_,Ite,Oho,Vho,ZP,Xho,zho,Qho,x_,qte,Who,Hho,e$,Uho,Jho,Yho,k_,Nte,Kho,Zho,o$,epo,opo,rpo,S_,jte,tpo,apo,r$,npo,spo,lpo,R_,Dte,ipo,dpo,t$,cpo,fpo,mpo,B_,Gte,gpo,hpo,a$,ppo,_po,upo,P_,Ote,bpo,Fpo,n$,vpo,Tpo,Mpo,$_,Vte,Epo,Cpo,s$,wpo,Apo,ypo,I_,Xte,Lpo,xpo,l$,kpo,Spo,Rpo,q_,Bpo,zte,Ppo,$po,Qte,Ipo,qpo,Wte,Npo,jpo,u3,dBe,ed,N_,Hte,b3,Dpo,Ute,Gpo,cBe,Yo,F3,Opo,od,Vpo,i$,Xpo,zpo,d$,Qpo,Wpo,Hpo,v3,Upo,Jte,Jpo,Ypo,Kpo,zr,T3,Zpo,Yte,e_o,o_o,rd,r_o,Kte,t_o,a_o,c$,n_o,s_o,l_o,Zte,i_o,d_o,M3,c_o,je,E3,f_o,eae,m_o,g_o,za,h_o,oae,p_o,__o,rae,u_o,b_o,tae,F_o,v_o,T_o,S,j_,aae,M_o,E_o,f$,C_o,w_o,A_o,D_,nae,y_o,L_o,m$,x_o,k_o,S_o,G_,sae,R_o,B_o,g$,P_o,$_o,I_o,O_,lae,q_o,N_o,h$,j_o,D_o,G_o,V_,iae,O_o,V_o,p$,X_o,z_o,Q_o,X_,dae,W_o,H_o,_$,U_o,J_o,Y_o,z_,cae,K_o,Z_o,u$,euo,ouo,ruo,Q_,fae,tuo,auo,b$,nuo,suo,luo,W_,mae,iuo,duo,F$,cuo,fuo,muo,H_,gae,guo,huo,v$,puo,_uo,uuo,U_,hae,buo,Fuo,T$,vuo,Tuo,Muo,J_,pae,Euo,Cuo,M$,wuo,Auo,yuo,Y_,_ae,Luo,xuo,E$,kuo,Suo,Ruo,K_,uae,Buo,Puo,C$,$uo,Iuo,quo,Z_,bae,Nuo,juo,w$,Duo,Guo,Ouo,eu,Fae,Vuo,Xuo,A$,zuo,Quo,Wuo,ou,vae,Huo,Uuo,y$,Juo,Yuo,Kuo,ru,Tae,Zuo,e2o,L$,o2o,r2o,t2o,tu,Mae,a2o,n2o,x$,s2o,l2o,i2o,au,Eae,d2o,c2o,k$,f2o,m2o,g2o,nu,Cae,h2o,p2o,S$,_2o,u2o,b2o,su,wae,F2o,v2o,R$,T2o,M2o,E2o,lu,Aae,C2o,w2o,B$,A2o,y2o,L2o,iu,yae,x2o,k2o,P$,S2o,R2o,B2o,du,Lae,P2o,$2o,$$,I2o,q2o,N2o,cu,xae,j2o,D2o,I$,G2o,O2o,V2o,fu,kae,X2o,z2o,q$,Q2o,W2o,H2o,mu,Sae,U2o,J2o,N$,Y2o,K2o,Z2o,gu,Rae,e1o,o1o,j$,r1o,t1o,a1o,hu,Bae,n1o,s1o,D$,l1o,i1o,d1o,pu,Pae,c1o,f1o,G$,m1o,g1o,h1o,_u,$ae,p1o,_1o,O$,u1o,b1o,F1o,uu,Iae,v1o,T1o,V$,M1o,E1o,C1o,bu,qae,w1o,A1o,X$,y1o,L1o,x1o,Fu,Nae,k1o,S1o,z$,R1o,B1o,P1o,vu,jae,$1o,I1o,Q$,q1o,N1o,j1o,Tu,Dae,D1o,G1o,W$,O1o,V1o,X1o,Mu,Gae,z1o,Q1o,H$,W1o,H1o,U1o,Eu,Oae,J1o,Y1o,U$,K1o,Z1o,ebo,Cu,Vae,obo,rbo,J$,tbo,abo,nbo,wu,sbo,Xae,lbo,ibo,zae,dbo,cbo,Qae,fbo,mbo,C3,fBe,td,Au,Wae,w3,gbo,Hae,hbo,mBe,Ko,A3,pbo,ad,_bo,Y$,ubo,bbo,K$,Fbo,vbo,Tbo,y3,Mbo,Uae,Ebo,Cbo,wbo,Qr,L3,Abo,Jae,ybo,Lbo,nd,xbo,Yae,kbo,Sbo,Z$,Rbo,Bbo,Pbo,Kae,$bo,Ibo,x3,qbo,De,k3,Nbo,Zae,jbo,Dbo,Qa,Gbo,ene,Obo,Vbo,one,Xbo,zbo,rne,Qbo,Wbo,Hbo,$,yu,tne,Ubo,Jbo,eI,Ybo,Kbo,Zbo,Lu,ane,e6o,o6o,oI,r6o,t6o,a6o,xu,nne,n6o,s6o,rI,l6o,i6o,d6o,ku,sne,c6o,f6o,tI,m6o,g6o,h6o,Su,lne,p6o,_6o,aI,u6o,b6o,F6o,Ru,ine,v6o,T6o,nI,M6o,E6o,C6o,Bu,dne,w6o,A6o,sI,y6o,L6o,x6o,Pu,cne,k6o,S6o,lI,R6o,B6o,P6o,$u,fne,$6o,I6o,iI,q6o,N6o,j6o,Iu,mne,D6o,G6o,dI,O6o,V6o,X6o,qu,gne,z6o,Q6o,cI,W6o,H6o,U6o,Nu,hne,J6o,Y6o,fI,K6o,Z6o,eFo,ju,pne,oFo,rFo,mI,tFo,aFo,nFo,Du,_ne,sFo,lFo,gI,iFo,dFo,cFo,Gu,une,fFo,mFo,hI,gFo,hFo,pFo,Ou,bne,_Fo,uFo,pI,bFo,FFo,vFo,Vu,Fne,TFo,MFo,_I,EFo,CFo,wFo,Xu,vne,AFo,yFo,uI,LFo,xFo,kFo,zu,Tne,SFo,RFo,bI,BFo,PFo,$Fo,Qu,Mne,IFo,qFo,FI,NFo,jFo,DFo,Wu,Ene,GFo,OFo,vI,VFo,XFo,zFo,Hu,Cne,QFo,WFo,TI,HFo,UFo,JFo,Uu,wne,YFo,KFo,MI,ZFo,evo,ovo,Ju,Ane,rvo,tvo,EI,avo,nvo,svo,Yu,yne,lvo,ivo,CI,dvo,cvo,fvo,Ku,Lne,mvo,gvo,wI,hvo,pvo,_vo,Zu,xne,uvo,bvo,AI,Fvo,vvo,Tvo,e2,kne,Mvo,Evo,yI,Cvo,wvo,Avo,o2,Sne,yvo,Lvo,LI,xvo,kvo,Svo,r2,Rne,Rvo,Bvo,xI,Pvo,$vo,Ivo,t2,Bne,qvo,Nvo,kI,jvo,Dvo,Gvo,a2,Pne,Ovo,Vvo,SI,Xvo,zvo,Qvo,n2,$ne,Wvo,Hvo,RI,Uvo,Jvo,Yvo,s2,Ine,Kvo,Zvo,BI,eTo,oTo,rTo,l2,qne,tTo,aTo,PI,nTo,sTo,lTo,i2,iTo,Nne,dTo,cTo,jne,fTo,mTo,Dne,gTo,hTo,S3,gBe,sd,d2,Gne,R3,pTo,One,_To,hBe,Zo,B3,uTo,ld,bTo,$I,FTo,vTo,II,TTo,MTo,ETo,P3,CTo,Vne,wTo,ATo,yTo,Wr,$3,LTo,Xne,xTo,kTo,id,STo,zne,RTo,BTo,qI,PTo,$To,ITo,Qne,qTo,NTo,I3,jTo,Ge,q3,DTo,Wne,GTo,OTo,Wa,VTo,Hne,XTo,zTo,Une,QTo,WTo,Jne,HTo,UTo,JTo,I,c2,Yne,YTo,KTo,NI,ZTo,e7o,o7o,f2,Kne,r7o,t7o,jI,a7o,n7o,s7o,m2,Zne,l7o,i7o,DI,d7o,c7o,f7o,g2,ese,m7o,g7o,GI,h7o,p7o,_7o,h2,ose,u7o,b7o,OI,F7o,v7o,T7o,p2,rse,M7o,E7o,VI,C7o,w7o,A7o,_2,tse,y7o,L7o,XI,x7o,k7o,S7o,u2,ase,R7o,B7o,zI,P7o,$7o,I7o,b2,nse,q7o,N7o,QI,j7o,D7o,G7o,F2,sse,O7o,V7o,WI,X7o,z7o,Q7o,v2,lse,W7o,H7o,HI,U7o,J7o,Y7o,T2,ise,K7o,Z7o,UI,e9o,o9o,r9o,M2,dse,t9o,a9o,JI,n9o,s9o,l9o,E2,cse,i9o,d9o,YI,c9o,f9o,m9o,C2,fse,g9o,h9o,KI,p9o,_9o,u9o,w2,mse,b9o,F9o,ZI,v9o,T9o,M9o,A2,gse,E9o,C9o,eq,w9o,A9o,y9o,y2,hse,L9o,x9o,oq,k9o,S9o,R9o,L2,pse,B9o,P9o,rq,$9o,I9o,q9o,x2,_se,N9o,j9o,tq,D9o,G9o,O9o,k2,use,V9o,X9o,aq,z9o,Q9o,W9o,S2,bse,H9o,U9o,nq,J9o,Y9o,K9o,R2,Fse,Z9o,eMo,sq,oMo,rMo,tMo,B2,vse,aMo,nMo,lq,sMo,lMo,iMo,P2,Tse,dMo,cMo,iq,fMo,mMo,gMo,$2,Mse,hMo,pMo,dq,_Mo,uMo,bMo,I2,Ese,FMo,vMo,cq,TMo,MMo,EMo,q2,Cse,CMo,wMo,fq,AMo,yMo,LMo,N2,wse,xMo,kMo,mq,SMo,RMo,BMo,j2,Ase,PMo,$Mo,gq,IMo,qMo,NMo,D2,yse,jMo,DMo,Lse,GMo,OMo,VMo,G2,xse,XMo,zMo,hq,QMo,WMo,HMo,O2,kse,UMo,JMo,pq,YMo,KMo,ZMo,V2,Sse,e4o,o4o,_q,r4o,t4o,a4o,X2,Rse,n4o,s4o,uq,l4o,i4o,d4o,z2,c4o,Bse,f4o,m4o,Pse,g4o,h4o,$se,p4o,_4o,N3,pBe,dd,Q2,Ise,j3,u4o,qse,b4o,_Be,er,D3,F4o,cd,v4o,bq,T4o,M4o,Fq,E4o,C4o,w4o,G3,A4o,Nse,y4o,L4o,x4o,Hr,O3,k4o,jse,S4o,R4o,fd,B4o,Dse,P4o,$4o,vq,I4o,q4o,N4o,Gse,j4o,D4o,V3,G4o,Oe,X3,O4o,Ose,V4o,X4o,Ha,z4o,Vse,Q4o,W4o,Xse,H4o,U4o,zse,J4o,Y4o,K4o,ae,W2,Qse,Z4o,eEo,Tq,oEo,rEo,tEo,H2,Wse,aEo,nEo,Mq,sEo,lEo,iEo,U2,Hse,dEo,cEo,Eq,fEo,mEo,gEo,J2,Use,hEo,pEo,Cq,_Eo,uEo,bEo,Y2,Jse,FEo,vEo,wq,TEo,MEo,EEo,K2,Yse,CEo,wEo,Aq,AEo,yEo,LEo,Z2,Kse,xEo,kEo,yq,SEo,REo,BEo,e1,Zse,PEo,$Eo,Lq,IEo,qEo,NEo,o1,ele,jEo,DEo,xq,GEo,OEo,VEo,r1,ole,XEo,zEo,kq,QEo,WEo,HEo,t1,rle,UEo,JEo,Sq,YEo,KEo,ZEo,a1,tle,e5o,o5o,Rq,r5o,t5o,a5o,n1,ale,n5o,s5o,Bq,l5o,i5o,d5o,s1,nle,c5o,f5o,Pq,m5o,g5o,h5o,l1,sle,p5o,_5o,$q,u5o,b5o,F5o,i1,lle,v5o,T5o,Iq,M5o,E5o,C5o,d1,ile,w5o,A5o,qq,y5o,L5o,x5o,c1,dle,k5o,S5o,Nq,R5o,B5o,P5o,f1,$5o,cle,I5o,q5o,fle,N5o,j5o,mle,D5o,G5o,z3,uBe,md,m1,gle,Q3,O5o,hle,V5o,bBe,or,W3,X5o,gd,z5o,jq,Q5o,W5o,Dq,H5o,U5o,J5o,H3,Y5o,ple,K5o,Z5o,e3o,Ur,U3,o3o,_le,r3o,t3o,hd,a3o,ule,n3o,s3o,Gq,l3o,i3o,d3o,ble,c3o,f3o,J3,m3o,Ve,Y3,g3o,Fle,h3o,p3o,Ua,_3o,vle,u3o,b3o,Tle,F3o,v3o,Mle,T3o,M3o,E3o,y,g1,Ele,C3o,w3o,Oq,A3o,y3o,L3o,h1,Cle,x3o,k3o,Vq,S3o,R3o,B3o,p1,wle,P3o,$3o,Xq,I3o,q3o,N3o,_1,Ale,j3o,D3o,zq,G3o,O3o,V3o,u1,yle,X3o,z3o,Qq,Q3o,W3o,H3o,b1,Lle,U3o,J3o,Wq,Y3o,K3o,Z3o,F1,xle,eCo,oCo,Hq,rCo,tCo,aCo,v1,kle,nCo,sCo,Uq,lCo,iCo,dCo,T1,Sle,cCo,fCo,Jq,mCo,gCo,hCo,M1,Rle,pCo,_Co,Yq,uCo,bCo,FCo,E1,Ble,vCo,TCo,Kq,MCo,ECo,CCo,C1,Ple,wCo,ACo,Zq,yCo,LCo,xCo,w1,$le,kCo,SCo,eN,RCo,BCo,PCo,A1,Ile,$Co,ICo,oN,qCo,NCo,jCo,y1,qle,DCo,GCo,rN,OCo,VCo,XCo,L1,Nle,zCo,QCo,tN,WCo,HCo,UCo,x1,jle,JCo,YCo,aN,KCo,ZCo,ewo,k1,Dle,owo,rwo,nN,two,awo,nwo,S1,Gle,swo,lwo,sN,iwo,dwo,cwo,R1,Ole,fwo,mwo,lN,gwo,hwo,pwo,B1,Vle,_wo,uwo,iN,bwo,Fwo,vwo,P1,Xle,Two,Mwo,dN,Ewo,Cwo,wwo,$1,zle,Awo,ywo,cN,Lwo,xwo,kwo,I1,Qle,Swo,Rwo,fN,Bwo,Pwo,$wo,q1,Wle,Iwo,qwo,mN,Nwo,jwo,Dwo,N1,Hle,Gwo,Owo,gN,Vwo,Xwo,zwo,j1,Ule,Qwo,Wwo,hN,Hwo,Uwo,Jwo,D1,Jle,Ywo,Kwo,pN,Zwo,eAo,oAo,G1,Yle,rAo,tAo,_N,aAo,nAo,sAo,O1,Kle,lAo,iAo,uN,dAo,cAo,fAo,V1,Zle,mAo,gAo,bN,hAo,pAo,_Ao,X1,eie,uAo,bAo,FN,FAo,vAo,TAo,z1,oie,MAo,EAo,vN,CAo,wAo,AAo,Q1,rie,yAo,LAo,TN,xAo,kAo,SAo,W1,tie,RAo,BAo,MN,PAo,$Ao,IAo,H1,aie,qAo,NAo,EN,jAo,DAo,GAo,U1,nie,OAo,VAo,CN,XAo,zAo,QAo,J1,sie,WAo,HAo,wN,UAo,JAo,YAo,Y1,lie,KAo,ZAo,AN,e0o,o0o,r0o,K1,iie,t0o,a0o,yN,n0o,s0o,l0o,Z1,die,i0o,d0o,LN,c0o,f0o,m0o,eb,cie,g0o,h0o,xN,p0o,_0o,u0o,ob,fie,b0o,F0o,kN,v0o,T0o,M0o,rb,mie,E0o,C0o,SN,w0o,A0o,y0o,tb,gie,L0o,x0o,RN,k0o,S0o,R0o,ab,hie,B0o,P0o,BN,$0o,I0o,q0o,nb,pie,N0o,j0o,PN,D0o,G0o,O0o,sb,V0o,_ie,X0o,z0o,uie,Q0o,W0o,bie,H0o,U0o,K3,FBe,pd,lb,Fie,Z3,J0o,vie,Y0o,vBe,rr,eC,K0o,_d,Z0o,$N,eyo,oyo,IN,ryo,tyo,ayo,oC,nyo,Tie,syo,lyo,iyo,Jr,rC,dyo,Mie,cyo,fyo,ud,myo,Eie,gyo,hyo,qN,pyo,_yo,uyo,Cie,byo,Fyo,tC,vyo,Xe,aC,Tyo,wie,Myo,Eyo,Ja,Cyo,Aie,wyo,Ayo,yie,yyo,Lyo,Lie,xyo,kyo,Syo,G,ib,xie,Ryo,Byo,NN,Pyo,$yo,Iyo,db,kie,qyo,Nyo,jN,jyo,Dyo,Gyo,cb,Sie,Oyo,Vyo,DN,Xyo,zyo,Qyo,fb,Rie,Wyo,Hyo,GN,Uyo,Jyo,Yyo,mb,Bie,Kyo,Zyo,ON,eLo,oLo,rLo,gb,Pie,tLo,aLo,VN,nLo,sLo,lLo,hb,$ie,iLo,dLo,XN,cLo,fLo,mLo,pb,Iie,gLo,hLo,zN,pLo,_Lo,uLo,_b,qie,bLo,FLo,QN,vLo,TLo,MLo,ub,Nie,ELo,CLo,WN,wLo,ALo,yLo,bb,jie,LLo,xLo,HN,kLo,SLo,RLo,Fb,Die,BLo,PLo,UN,$Lo,ILo,qLo,vb,Gie,NLo,jLo,JN,DLo,GLo,OLo,Tb,Oie,VLo,XLo,YN,zLo,QLo,WLo,Mb,Vie,HLo,ULo,KN,JLo,YLo,KLo,Eb,Xie,ZLo,e8o,ZN,o8o,r8o,t8o,Cb,zie,a8o,n8o,ej,s8o,l8o,i8o,wb,Qie,d8o,c8o,oj,f8o,m8o,g8o,Ab,Wie,h8o,p8o,rj,_8o,u8o,b8o,yb,Hie,F8o,v8o,tj,T8o,M8o,E8o,Lb,Uie,C8o,w8o,aj,A8o,y8o,L8o,xb,Jie,x8o,k8o,nj,S8o,R8o,B8o,kb,Yie,P8o,$8o,sj,I8o,q8o,N8o,Sb,Kie,j8o,D8o,lj,G8o,O8o,V8o,Rb,Zie,X8o,z8o,ij,Q8o,W8o,H8o,Bb,ede,U8o,J8o,dj,Y8o,K8o,Z8o,Pb,ode,exo,oxo,cj,rxo,txo,axo,$b,rde,nxo,sxo,fj,lxo,ixo,dxo,Ib,cxo,tde,fxo,mxo,ade,gxo,hxo,nde,pxo,_xo,nC,TBe,bd,qb,sde,sC,uxo,lde,bxo,MBe,tr,lC,Fxo,Fd,vxo,mj,Txo,Mxo,gj,Exo,Cxo,wxo,iC,Axo,ide,yxo,Lxo,xxo,Yr,dC,kxo,dde,Sxo,Rxo,vd,Bxo,cde,Pxo,$xo,hj,Ixo,qxo,Nxo,fde,jxo,Dxo,cC,Gxo,ze,fC,Oxo,mde,Vxo,Xxo,Ya,zxo,gde,Qxo,Wxo,hde,Hxo,Uxo,pde,Jxo,Yxo,Kxo,da,Nb,_de,Zxo,eko,pj,oko,rko,tko,jb,ude,ako,nko,_j,sko,lko,iko,Db,bde,dko,cko,uj,fko,mko,gko,Gb,Fde,hko,pko,bj,_ko,uko,bko,Ob,vde,Fko,vko,Fj,Tko,Mko,Eko,Vb,Cko,Tde,wko,Ako,Mde,yko,Lko,Ede,xko,kko,mC,EBe,Td,Xb,Cde,gC,Sko,wde,Rko,CBe,ar,hC,Bko,Md,Pko,vj,$ko,Iko,Tj,qko,Nko,jko,pC,Dko,Ade,Gko,Oko,Vko,Kr,_C,Xko,yde,zko,Qko,Ed,Wko,Lde,Hko,Uko,Mj,Jko,Yko,Kko,xde,Zko,eSo,uC,oSo,Qe,bC,rSo,kde,tSo,aSo,Ka,nSo,Sde,sSo,lSo,Rde,iSo,dSo,Bde,cSo,fSo,mSo,j,zb,Pde,gSo,hSo,Ej,pSo,_So,uSo,Qb,$de,bSo,FSo,Cj,vSo,TSo,MSo,Wb,Ide,ESo,CSo,wj,wSo,ASo,ySo,Hb,qde,LSo,xSo,Aj,kSo,SSo,RSo,Ub,Nde,BSo,PSo,yj,$So,ISo,qSo,Jb,jde,NSo,jSo,Lj,DSo,GSo,OSo,Yb,Dde,VSo,XSo,xj,zSo,QSo,WSo,Kb,Gde,HSo,USo,kj,JSo,YSo,KSo,Zb,Ode,ZSo,eRo,Sj,oRo,rRo,tRo,e6,Vde,aRo,nRo,Rj,sRo,lRo,iRo,o6,Xde,dRo,cRo,Bj,fRo,mRo,gRo,r6,zde,hRo,pRo,Pj,_Ro,uRo,bRo,t6,Qde,FRo,vRo,$j,TRo,MRo,ERo,a6,Wde,CRo,wRo,Ij,ARo,yRo,LRo,n6,Hde,xRo,kRo,qj,SRo,RRo,BRo,s6,Ude,PRo,$Ro,Nj,IRo,qRo,NRo,l6,Jde,jRo,DRo,jj,GRo,ORo,VRo,i6,Yde,XRo,zRo,Dj,QRo,WRo,HRo,d6,Kde,URo,JRo,Gj,YRo,KRo,ZRo,c6,Zde,eBo,oBo,Oj,rBo,tBo,aBo,f6,ece,nBo,sBo,Vj,lBo,iBo,dBo,m6,oce,cBo,fBo,Xj,mBo,gBo,hBo,g6,rce,pBo,_Bo,zj,uBo,bBo,FBo,h6,tce,vBo,TBo,Qj,MBo,EBo,CBo,p6,ace,wBo,ABo,Wj,yBo,LBo,xBo,_6,nce,kBo,SBo,Hj,RBo,BBo,PBo,u6,sce,$Bo,IBo,Uj,qBo,NBo,jBo,b6,lce,DBo,GBo,Jj,OBo,VBo,XBo,F6,ice,zBo,QBo,Yj,WBo,HBo,UBo,v6,dce,JBo,YBo,Kj,KBo,ZBo,ePo,T6,cce,oPo,rPo,Zj,tPo,aPo,nPo,M6,fce,sPo,lPo,eD,iPo,dPo,cPo,E6,mce,fPo,mPo,oD,gPo,hPo,pPo,C6,_Po,gce,uPo,bPo,hce,FPo,vPo,pce,TPo,MPo,FC,wBe,Cd,w6,_ce,vC,EPo,uce,CPo,ABe,nr,TC,wPo,wd,APo,rD,yPo,LPo,tD,xPo,kPo,SPo,MC,RPo,bce,BPo,PPo,$Po,Zr,EC,IPo,Fce,qPo,NPo,Ad,jPo,vce,DPo,GPo,aD,OPo,VPo,XPo,Tce,zPo,QPo,CC,WPo,We,wC,HPo,Mce,UPo,JPo,Za,YPo,Ece,KPo,ZPo,Cce,e$o,o$o,wce,r$o,t$o,a$o,R,A6,Ace,n$o,s$o,nD,l$o,i$o,d$o,y6,yce,c$o,f$o,sD,m$o,g$o,h$o,L6,Lce,p$o,_$o,lD,u$o,b$o,F$o,x6,xce,v$o,T$o,iD,M$o,E$o,C$o,k6,kce,w$o,A$o,dD,y$o,L$o,x$o,S6,Sce,k$o,S$o,cD,R$o,B$o,P$o,R6,Rce,$$o,I$o,fD,q$o,N$o,j$o,B6,Bce,D$o,G$o,mD,O$o,V$o,X$o,P6,Pce,z$o,Q$o,gD,W$o,H$o,U$o,$6,$ce,J$o,Y$o,hD,K$o,Z$o,eIo,I6,Ice,oIo,rIo,pD,tIo,aIo,nIo,q6,qce,sIo,lIo,_D,iIo,dIo,cIo,N6,Nce,fIo,mIo,uD,gIo,hIo,pIo,j6,jce,_Io,uIo,bD,bIo,FIo,vIo,D6,Dce,TIo,MIo,FD,EIo,CIo,wIo,G6,Gce,AIo,yIo,vD,LIo,xIo,kIo,O6,Oce,SIo,RIo,TD,BIo,PIo,$Io,V6,Vce,IIo,qIo,MD,NIo,jIo,DIo,X6,Xce,GIo,OIo,ED,VIo,XIo,zIo,z6,zce,QIo,WIo,CD,HIo,UIo,JIo,Q6,Qce,YIo,KIo,wD,ZIo,eqo,oqo,W6,Wce,rqo,tqo,AD,aqo,nqo,sqo,H6,Hce,lqo,iqo,yD,dqo,cqo,fqo,U6,Uce,mqo,gqo,LD,hqo,pqo,_qo,J6,Jce,uqo,bqo,xD,Fqo,vqo,Tqo,Y6,Yce,Mqo,Eqo,kD,Cqo,wqo,Aqo,K6,Kce,yqo,Lqo,SD,xqo,kqo,Sqo,Z6,Zce,Rqo,Bqo,RD,Pqo,$qo,Iqo,eF,efe,qqo,Nqo,BD,jqo,Dqo,Gqo,oF,ofe,Oqo,Vqo,PD,Xqo,zqo,Qqo,rF,rfe,Wqo,Hqo,$D,Uqo,Jqo,Yqo,tF,tfe,Kqo,Zqo,ID,eNo,oNo,rNo,aF,afe,tNo,aNo,qD,nNo,sNo,lNo,nF,nfe,iNo,dNo,ND,cNo,fNo,mNo,sF,sfe,gNo,hNo,jD,pNo,_No,uNo,lF,lfe,bNo,FNo,DD,vNo,TNo,MNo,iF,ife,ENo,CNo,GD,wNo,ANo,yNo,dF,dfe,LNo,xNo,OD,kNo,SNo,RNo,cF,cfe,BNo,PNo,VD,$No,INo,qNo,fF,NNo,ffe,jNo,DNo,mfe,GNo,ONo,gfe,VNo,XNo,AC,yBe,yd,mF,hfe,yC,zNo,pfe,QNo,LBe,sr,LC,WNo,Ld,HNo,XD,UNo,JNo,zD,YNo,KNo,ZNo,xC,ejo,_fe,ojo,rjo,tjo,et,kC,ajo,ufe,njo,sjo,xd,ljo,bfe,ijo,djo,QD,cjo,fjo,mjo,Ffe,gjo,hjo,SC,pjo,He,RC,_jo,vfe,ujo,bjo,en,Fjo,Tfe,vjo,Tjo,Mfe,Mjo,Ejo,Efe,Cjo,wjo,Ajo,Cfe,gF,wfe,yjo,Ljo,WD,xjo,kjo,Sjo,hF,Rjo,Afe,Bjo,Pjo,yfe,$jo,Ijo,Lfe,qjo,Njo,BC,xBe,kd,pF,xfe,PC,jjo,kfe,Djo,kBe,lr,$C,Gjo,Sd,Ojo,HD,Vjo,Xjo,UD,zjo,Qjo,Wjo,IC,Hjo,Sfe,Ujo,Jjo,Yjo,ot,qC,Kjo,Rfe,Zjo,eDo,Rd,oDo,Bfe,rDo,tDo,JD,aDo,nDo,sDo,Pfe,lDo,iDo,NC,dDo,Ue,jC,cDo,$fe,fDo,mDo,on,gDo,Ife,hDo,pDo,qfe,_Do,uDo,Nfe,bDo,FDo,vDo,fe,_F,jfe,TDo,MDo,YD,EDo,CDo,wDo,uF,Dfe,ADo,yDo,KD,LDo,xDo,kDo,Gs,Gfe,SDo,RDo,ZD,BDo,PDo,eG,$Do,IDo,qDo,bF,Ofe,NDo,jDo,oG,DDo,GDo,ODo,ma,Vfe,VDo,XDo,rG,zDo,QDo,tG,WDo,HDo,aG,UDo,JDo,YDo,FF,Xfe,KDo,ZDo,nG,eGo,oGo,rGo,vF,zfe,tGo,aGo,sG,nGo,sGo,lGo,TF,Qfe,iGo,dGo,lG,cGo,fGo,mGo,MF,Wfe,gGo,hGo,iG,pGo,_Go,uGo,EF,Hfe,bGo,FGo,dG,vGo,TGo,MGo,CF,Ufe,EGo,CGo,cG,wGo,AGo,yGo,wF,Jfe,LGo,xGo,fG,kGo,SGo,RGo,AF,BGo,Yfe,PGo,$Go,Kfe,IGo,qGo,Zfe,NGo,jGo,DC,SBe,Bd,yF,eme,GC,DGo,ome,GGo,RBe,ir,OC,OGo,Pd,VGo,mG,XGo,zGo,gG,QGo,WGo,HGo,VC,UGo,rme,JGo,YGo,KGo,rt,XC,ZGo,tme,eOo,oOo,$d,rOo,ame,tOo,aOo,hG,nOo,sOo,lOo,nme,iOo,dOo,zC,cOo,Je,QC,fOo,sme,mOo,gOo,rn,hOo,lme,pOo,_Oo,ime,uOo,bOo,dme,FOo,vOo,TOo,cme,LF,fme,MOo,EOo,pG,COo,wOo,AOo,xF,yOo,mme,LOo,xOo,gme,kOo,SOo,hme,ROo,BOo,WC,BBe,Id,kF,pme,HC,POo,_me,$Oo,PBe,dr,UC,IOo,qd,qOo,_G,NOo,jOo,uG,DOo,GOo,OOo,JC,VOo,ume,XOo,zOo,QOo,tt,YC,WOo,bme,HOo,UOo,Nd,JOo,Fme,YOo,KOo,bG,ZOo,eVo,oVo,vme,rVo,tVo,KC,aVo,Ye,ZC,nVo,Tme,sVo,lVo,tn,iVo,Mme,dVo,cVo,Eme,fVo,mVo,Cme,gVo,hVo,pVo,Re,SF,wme,_Vo,uVo,FG,bVo,FVo,vVo,RF,Ame,TVo,MVo,vG,EVo,CVo,wVo,BF,yme,AVo,yVo,TG,LVo,xVo,kVo,PF,Lme,SVo,RVo,MG,BVo,PVo,$Vo,$F,xme,IVo,qVo,EG,NVo,jVo,DVo,IF,kme,GVo,OVo,CG,VVo,XVo,zVo,qF,Sme,QVo,WVo,wG,HVo,UVo,JVo,NF,Rme,YVo,KVo,AG,ZVo,eXo,oXo,jF,rXo,Bme,tXo,aXo,Pme,nXo,sXo,$me,lXo,iXo,ew,$Be,jd,DF,Ime,ow,dXo,qme,cXo,IBe,cr,rw,fXo,Dd,mXo,yG,gXo,hXo,LG,pXo,_Xo,uXo,tw,bXo,Nme,FXo,vXo,TXo,at,aw,MXo,jme,EXo,CXo,Gd,wXo,Dme,AXo,yXo,xG,LXo,xXo,kXo,Gme,SXo,RXo,nw,BXo,Ke,sw,PXo,Ome,$Xo,IXo,an,qXo,Vme,NXo,jXo,Xme,DXo,GXo,zme,OXo,VXo,XXo,nn,GF,Qme,zXo,QXo,kG,WXo,HXo,UXo,OF,Wme,JXo,YXo,SG,KXo,ZXo,ezo,VF,Hme,ozo,rzo,RG,tzo,azo,nzo,XF,Ume,szo,lzo,BG,izo,dzo,czo,zF,fzo,Jme,mzo,gzo,Yme,hzo,pzo,Kme,_zo,uzo,lw,qBe,Od,QF,Zme,iw,bzo,ege,Fzo,NBe,fr,dw,vzo,Vd,Tzo,PG,Mzo,Ezo,$G,Czo,wzo,Azo,cw,yzo,oge,Lzo,xzo,kzo,nt,fw,Szo,rge,Rzo,Bzo,Xd,Pzo,tge,$zo,Izo,IG,qzo,Nzo,jzo,age,Dzo,Gzo,mw,Ozo,Ze,gw,Vzo,nge,Xzo,zzo,sn,Qzo,sge,Wzo,Hzo,lge,Uzo,Jzo,ige,Yzo,Kzo,Zzo,Be,WF,dge,eQo,oQo,qG,rQo,tQo,aQo,HF,cge,nQo,sQo,NG,lQo,iQo,dQo,UF,fge,cQo,fQo,jG,mQo,gQo,hQo,JF,mge,pQo,_Qo,DG,uQo,bQo,FQo,YF,gge,vQo,TQo,GG,MQo,EQo,CQo,KF,hge,wQo,AQo,OG,yQo,LQo,xQo,ZF,pge,kQo,SQo,VG,RQo,BQo,PQo,ev,_ge,$Qo,IQo,XG,qQo,NQo,jQo,ov,DQo,uge,GQo,OQo,bge,VQo,XQo,Fge,zQo,QQo,hw,jBe,zd,rv,vge,pw,WQo,Tge,HQo,DBe,mr,_w,UQo,Qd,JQo,zG,YQo,KQo,QG,ZQo,eWo,oWo,uw,rWo,Mge,tWo,aWo,nWo,st,bw,sWo,Ege,lWo,iWo,Wd,dWo,Cge,cWo,fWo,WG,mWo,gWo,hWo,wge,pWo,_Wo,Fw,uWo,eo,vw,bWo,Age,FWo,vWo,ln,TWo,yge,MWo,EWo,Lge,CWo,wWo,xge,AWo,yWo,LWo,Tw,tv,kge,xWo,kWo,HG,SWo,RWo,BWo,av,Sge,PWo,$Wo,UG,IWo,qWo,NWo,nv,jWo,Rge,DWo,GWo,Bge,OWo,VWo,Pge,XWo,zWo,Mw,GBe,Hd,sv,$ge,Ew,QWo,Ige,WWo,OBe,gr,Cw,HWo,Ud,UWo,JG,JWo,YWo,YG,KWo,ZWo,eHo,ww,oHo,qge,rHo,tHo,aHo,lt,Aw,nHo,Nge,sHo,lHo,Jd,iHo,jge,dHo,cHo,KG,fHo,mHo,gHo,Dge,hHo,pHo,yw,_Ho,oo,Lw,uHo,Gge,bHo,FHo,dn,vHo,Oge,THo,MHo,Vge,EHo,CHo,Xge,wHo,AHo,yHo,cn,lv,zge,LHo,xHo,ZG,kHo,SHo,RHo,iv,Qge,BHo,PHo,eO,$Ho,IHo,qHo,dv,Wge,NHo,jHo,oO,DHo,GHo,OHo,cv,Hge,VHo,XHo,rO,zHo,QHo,WHo,fv,HHo,Uge,UHo,JHo,Jge,YHo,KHo,Yge,ZHo,eUo,xw,VBe,Yd,mv,Kge,kw,oUo,Zge,rUo,XBe,hr,Sw,tUo,Kd,aUo,tO,nUo,sUo,aO,lUo,iUo,dUo,Rw,cUo,ehe,fUo,mUo,gUo,it,Bw,hUo,ohe,pUo,_Uo,Zd,uUo,rhe,bUo,FUo,nO,vUo,TUo,MUo,the,EUo,CUo,Pw,wUo,ro,$w,AUo,ahe,yUo,LUo,fn,xUo,nhe,kUo,SUo,she,RUo,BUo,lhe,PUo,$Uo,IUo,ec,gv,ihe,qUo,NUo,sO,jUo,DUo,GUo,hv,dhe,OUo,VUo,lO,XUo,zUo,QUo,pv,che,WUo,HUo,iO,UUo,JUo,YUo,_v,KUo,fhe,ZUo,eJo,mhe,oJo,rJo,ghe,tJo,aJo,Iw,zBe,oc,uv,hhe,qw,nJo,phe,sJo,QBe,pr,Nw,lJo,rc,iJo,dO,dJo,cJo,cO,fJo,mJo,gJo,jw,hJo,_he,pJo,_Jo,uJo,dt,Dw,bJo,uhe,FJo,vJo,tc,TJo,bhe,MJo,EJo,fO,CJo,wJo,AJo,Fhe,yJo,LJo,Gw,xJo,to,Ow,kJo,vhe,SJo,RJo,mn,BJo,The,PJo,$Jo,Mhe,IJo,qJo,Ehe,NJo,jJo,DJo,Che,bv,whe,GJo,OJo,mO,VJo,XJo,zJo,Fv,QJo,Ahe,WJo,HJo,yhe,UJo,JJo,Lhe,YJo,KJo,Vw,WBe,ac,vv,xhe,Xw,ZJo,khe,eYo,HBe,_r,zw,oYo,nc,rYo,gO,tYo,aYo,hO,nYo,sYo,lYo,Qw,iYo,She,dYo,cYo,fYo,ct,Ww,mYo,Rhe,gYo,hYo,sc,pYo,Bhe,_Yo,uYo,pO,bYo,FYo,vYo,Phe,TYo,MYo,Hw,EYo,ao,Uw,CYo,$he,wYo,AYo,gn,yYo,Ihe,LYo,xYo,qhe,kYo,SYo,Nhe,RYo,BYo,PYo,jhe,Tv,Dhe,$Yo,IYo,_O,qYo,NYo,jYo,Mv,DYo,Ghe,GYo,OYo,Ohe,VYo,XYo,Vhe,zYo,QYo,Jw,UBe,lc,Ev,Xhe,Yw,WYo,zhe,HYo,JBe,ur,Kw,UYo,ic,JYo,uO,YYo,KYo,bO,ZYo,eKo,oKo,Zw,rKo,Qhe,tKo,aKo,nKo,ft,eA,sKo,Whe,lKo,iKo,dc,dKo,Hhe,cKo,fKo,FO,mKo,gKo,hKo,Uhe,pKo,_Ko,oA,uKo,no,rA,bKo,Jhe,FKo,vKo,hn,TKo,Yhe,MKo,EKo,Khe,CKo,wKo,Zhe,AKo,yKo,LKo,cc,Cv,epe,xKo,kKo,vO,SKo,RKo,BKo,wv,ope,PKo,$Ko,TO,IKo,qKo,NKo,Av,rpe,jKo,DKo,MO,GKo,OKo,VKo,yv,XKo,tpe,zKo,QKo,ape,WKo,HKo,npe,UKo,JKo,tA,YBe,fc,Lv,spe,aA,YKo,lpe,KKo,KBe,br,nA,ZKo,mc,eZo,EO,oZo,rZo,CO,tZo,aZo,nZo,sA,sZo,ipe,lZo,iZo,dZo,mt,lA,cZo,dpe,fZo,mZo,gc,gZo,cpe,hZo,pZo,wO,_Zo,uZo,bZo,fpe,FZo,vZo,iA,TZo,so,dA,MZo,mpe,EZo,CZo,pn,wZo,gpe,AZo,yZo,hpe,LZo,xZo,ppe,kZo,SZo,RZo,_pe,xv,upe,BZo,PZo,AO,$Zo,IZo,qZo,kv,NZo,bpe,jZo,DZo,Fpe,GZo,OZo,vpe,VZo,XZo,cA,ZBe,hc,Sv,Tpe,fA,zZo,Mpe,QZo,ePe,Fr,mA,WZo,pc,HZo,yO,UZo,JZo,LO,YZo,KZo,ZZo,gA,eer,Epe,oer,rer,ter,gt,hA,aer,Cpe,ner,ser,_c,ler,wpe,ier,der,xO,cer,fer,mer,Ape,ger,her,pA,per,ho,_A,_er,ype,uer,ber,_n,Fer,Lpe,ver,Ter,xpe,Mer,Eer,kpe,Cer,wer,Aer,x,Rv,Spe,yer,Ler,kO,xer,ker,Ser,Bv,Rpe,Rer,Ber,SO,Per,$er,Ier,Pv,Bpe,qer,Ner,RO,jer,Der,Ger,$v,Ppe,Oer,Ver,BO,Xer,zer,Qer,Iv,$pe,Wer,Her,PO,Uer,Jer,Yer,qv,Ipe,Ker,Zer,$O,eor,oor,ror,Nv,qpe,tor,aor,IO,nor,sor,lor,jv,Npe,ior,dor,qO,cor,mor,gor,Dv,jpe,hor,por,NO,_or,uor,bor,Gv,Dpe,For,vor,jO,Tor,Mor,Eor,Ov,Gpe,Cor,wor,DO,Aor,yor,Lor,Vv,Ope,xor,kor,GO,Sor,Ror,Bor,Xv,Vpe,Por,$or,OO,Ior,qor,Nor,zv,Xpe,jor,Dor,VO,Gor,Oor,Vor,Qv,zpe,Xor,zor,XO,Qor,Wor,Hor,Wv,Qpe,Uor,Jor,zO,Yor,Kor,Zor,Os,Wpe,err,orr,QO,rrr,trr,WO,arr,nrr,srr,Hv,Hpe,lrr,irr,HO,drr,crr,frr,Uv,Upe,mrr,grr,UO,hrr,prr,_rr,Jv,Jpe,urr,brr,JO,Frr,vrr,Trr,Yv,Ype,Mrr,Err,YO,Crr,wrr,Arr,Kv,Kpe,yrr,Lrr,KO,xrr,krr,Srr,Zv,Zpe,Rrr,Brr,ZO,Prr,$rr,Irr,eT,e_e,qrr,Nrr,eV,jrr,Drr,Grr,oT,o_e,Orr,Vrr,oV,Xrr,zrr,Qrr,rT,r_e,Wrr,Hrr,rV,Urr,Jrr,Yrr,tT,t_e,Krr,Zrr,tV,etr,otr,rtr,aT,a_e,ttr,atr,aV,ntr,str,ltr,nT,n_e,itr,dtr,nV,ctr,ftr,mtr,sT,s_e,gtr,htr,sV,ptr,_tr,utr,lT,l_e,btr,Ftr,lV,vtr,Ttr,Mtr,iT,i_e,Etr,Ctr,iV,wtr,Atr,ytr,dT,d_e,Ltr,xtr,dV,ktr,Str,Rtr,cT,c_e,Btr,Ptr,cV,$tr,Itr,qtr,fT,f_e,Ntr,jtr,fV,Dtr,Gtr,Otr,mT,m_e,Vtr,Xtr,mV,ztr,Qtr,Wtr,gT,g_e,Htr,Utr,gV,Jtr,Ytr,Ktr,hT,h_e,Ztr,ear,hV,oar,rar,tar,pT,p_e,aar,nar,pV,sar,lar,iar,_T,__e,dar,car,_V,far,mar,gar,uT,u_e,har,par,uV,_ar,uar,bar,bT,b_e,Far,Tar,bV,Mar,Ear,Car,FT,F_e,war,Aar,FV,yar,Lar,xar,vT,v_e,kar,Sar,vV,Rar,Bar,Par,T_e,$ar,Iar,uA,oPe,uc,TT,M_e,bA,qar,E_e,Nar,rPe,vr,FA,jar,bc,Dar,TV,Gar,Oar,MV,Var,Xar,zar,vA,Qar,C_e,War,Har,Uar,ht,TA,Jar,w_e,Yar,Kar,Fc,Zar,A_e,enr,onr,EV,rnr,tnr,anr,y_e,nnr,snr,MA,lnr,po,EA,inr,L_e,dnr,cnr,un,fnr,x_e,mnr,gnr,k_e,hnr,pnr,S_e,_nr,unr,bnr,H,MT,R_e,Fnr,vnr,CV,Tnr,Mnr,Enr,ET,B_e,Cnr,wnr,wV,Anr,ynr,Lnr,CT,P_e,xnr,knr,AV,Snr,Rnr,Bnr,wT,$_e,Pnr,$nr,yV,Inr,qnr,Nnr,AT,I_e,jnr,Dnr,LV,Gnr,Onr,Vnr,yT,q_e,Xnr,znr,xV,Qnr,Wnr,Hnr,LT,N_e,Unr,Jnr,kV,Ynr,Knr,Znr,xT,j_e,esr,osr,SV,rsr,tsr,asr,kT,D_e,nsr,ssr,RV,lsr,isr,dsr,ST,G_e,csr,fsr,BV,msr,gsr,hsr,RT,O_e,psr,_sr,PV,usr,bsr,Fsr,BT,V_e,vsr,Tsr,$V,Msr,Esr,Csr,PT,X_e,wsr,Asr,IV,ysr,Lsr,xsr,$T,z_e,ksr,Ssr,qV,Rsr,Bsr,Psr,IT,Q_e,$sr,Isr,NV,qsr,Nsr,jsr,qT,W_e,Dsr,Gsr,jV,Osr,Vsr,Xsr,NT,H_e,zsr,Qsr,DV,Wsr,Hsr,Usr,jT,U_e,Jsr,Ysr,GV,Ksr,Zsr,elr,DT,J_e,olr,rlr,OV,tlr,alr,nlr,GT,Y_e,slr,llr,VV,ilr,dlr,clr,OT,K_e,flr,mlr,XV,glr,hlr,plr,VT,Z_e,_lr,ulr,zV,blr,Flr,vlr,XT,eue,Tlr,Mlr,QV,Elr,Clr,wlr,oue,Alr,ylr,CA,tPe,vc,zT,rue,wA,Llr,tue,xlr,aPe,Tr,AA,klr,Tc,Slr,WV,Rlr,Blr,HV,Plr,$lr,Ilr,yA,qlr,aue,Nlr,jlr,Dlr,pt,LA,Glr,nue,Olr,Vlr,Mc,Xlr,sue,zlr,Qlr,UV,Wlr,Hlr,Ulr,lue,Jlr,Ylr,xA,Klr,_o,kA,Zlr,iue,eir,oir,bn,rir,due,tir,air,cue,nir,sir,fue,lir,iir,dir,me,QT,mue,cir,fir,JV,mir,gir,hir,WT,gue,pir,_ir,YV,uir,bir,Fir,HT,hue,vir,Tir,KV,Mir,Eir,Cir,UT,pue,wir,Air,ZV,yir,Lir,xir,JT,_ue,kir,Sir,eX,Rir,Bir,Pir,YT,uue,$ir,Iir,oX,qir,Nir,jir,KT,bue,Dir,Gir,rX,Oir,Vir,Xir,ZT,Fue,zir,Qir,tX,Wir,Hir,Uir,e7,vue,Jir,Yir,aX,Kir,Zir,edr,o7,Tue,odr,rdr,nX,tdr,adr,ndr,r7,Mue,sdr,ldr,sX,idr,ddr,cdr,t7,Eue,fdr,mdr,lX,gdr,hdr,pdr,Cue,_dr,udr,SA,nPe,Ec,a7,wue,RA,bdr,Aue,Fdr,sPe,Mr,BA,vdr,Cc,Tdr,iX,Mdr,Edr,dX,Cdr,wdr,Adr,PA,ydr,yue,Ldr,xdr,kdr,_t,$A,Sdr,Lue,Rdr,Bdr,wc,Pdr,xue,$dr,Idr,cX,qdr,Ndr,jdr,kue,Ddr,Gdr,IA,Odr,uo,qA,Vdr,Sue,Xdr,zdr,Fn,Qdr,Rue,Wdr,Hdr,Bue,Udr,Jdr,Pue,Ydr,Kdr,Zdr,NA,n7,$ue,ecr,ocr,fX,rcr,tcr,acr,s7,Iue,ncr,scr,mX,lcr,icr,dcr,que,ccr,fcr,jA,lPe,Ac,l7,Nue,DA,mcr,jue,gcr,iPe,Er,GA,hcr,yc,pcr,gX,_cr,ucr,hX,bcr,Fcr,vcr,OA,Tcr,Due,Mcr,Ecr,Ccr,ut,VA,wcr,Gue,Acr,ycr,Lc,Lcr,Oue,xcr,kcr,pX,Scr,Rcr,Bcr,Vue,Pcr,$cr,XA,Icr,bo,zA,qcr,Xue,Ncr,jcr,vn,Dcr,zue,Gcr,Ocr,Que,Vcr,Xcr,Wue,zcr,Qcr,Wcr,J,i7,Hue,Hcr,Ucr,_X,Jcr,Ycr,Kcr,d7,Uue,Zcr,efr,uX,ofr,rfr,tfr,c7,Jue,afr,nfr,bX,sfr,lfr,ifr,f7,Yue,dfr,cfr,FX,ffr,mfr,gfr,m7,Kue,hfr,pfr,vX,_fr,ufr,bfr,g7,Zue,Ffr,vfr,TX,Tfr,Mfr,Efr,h7,e2e,Cfr,wfr,MX,Afr,yfr,Lfr,p7,o2e,xfr,kfr,EX,Sfr,Rfr,Bfr,_7,r2e,Pfr,$fr,CX,Ifr,qfr,Nfr,u7,t2e,jfr,Dfr,wX,Gfr,Ofr,Vfr,b7,a2e,Xfr,zfr,AX,Qfr,Wfr,Hfr,F7,n2e,Ufr,Jfr,yX,Yfr,Kfr,Zfr,v7,s2e,emr,omr,LX,rmr,tmr,amr,T7,l2e,nmr,smr,xX,lmr,imr,dmr,M7,i2e,cmr,fmr,kX,mmr,gmr,hmr,E7,d2e,pmr,_mr,SX,umr,bmr,Fmr,C7,c2e,vmr,Tmr,RX,Mmr,Emr,Cmr,w7,f2e,wmr,Amr,BX,ymr,Lmr,xmr,A7,m2e,kmr,Smr,PX,Rmr,Bmr,Pmr,y7,g2e,$mr,Imr,$X,qmr,Nmr,jmr,h2e,Dmr,Gmr,QA,dPe,xc,L7,p2e,WA,Omr,_2e,Vmr,cPe,Cr,HA,Xmr,kc,zmr,IX,Qmr,Wmr,qX,Hmr,Umr,Jmr,UA,Ymr,u2e,Kmr,Zmr,egr,bt,JA,ogr,b2e,rgr,tgr,Sc,agr,F2e,ngr,sgr,NX,lgr,igr,dgr,v2e,cgr,fgr,YA,mgr,Fo,KA,ggr,T2e,hgr,pgr,Tn,_gr,M2e,ugr,bgr,E2e,Fgr,vgr,C2e,Tgr,Mgr,Egr,be,x7,w2e,Cgr,wgr,jX,Agr,ygr,Lgr,k7,A2e,xgr,kgr,DX,Sgr,Rgr,Bgr,S7,y2e,Pgr,$gr,GX,Igr,qgr,Ngr,R7,L2e,jgr,Dgr,OX,Ggr,Ogr,Vgr,B7,x2e,Xgr,zgr,VX,Qgr,Wgr,Hgr,P7,k2e,Ugr,Jgr,XX,Ygr,Kgr,Zgr,$7,S2e,ehr,ohr,zX,rhr,thr,ahr,I7,R2e,nhr,shr,QX,lhr,ihr,dhr,q7,B2e,chr,fhr,WX,mhr,ghr,hhr,N7,P2e,phr,_hr,HX,uhr,bhr,Fhr,$2e,vhr,Thr,ZA,fPe,Rc,j7,I2e,e0,Mhr,q2e,Ehr,mPe,wr,o0,Chr,Bc,whr,UX,Ahr,yhr,JX,Lhr,xhr,khr,r0,Shr,N2e,Rhr,Bhr,Phr,Ft,t0,$hr,j2e,Ihr,qhr,Pc,Nhr,D2e,jhr,Dhr,YX,Ghr,Ohr,Vhr,G2e,Xhr,zhr,a0,Qhr,vo,n0,Whr,O2e,Hhr,Uhr,Mn,Jhr,V2e,Yhr,Khr,X2e,Zhr,epr,z2e,opr,rpr,tpr,V,D7,Q2e,apr,npr,KX,spr,lpr,ipr,G7,W2e,dpr,cpr,ZX,fpr,mpr,gpr,O7,H2e,hpr,ppr,ez,_pr,upr,bpr,V7,U2e,Fpr,vpr,oz,Tpr,Mpr,Epr,X7,J2e,Cpr,wpr,rz,Apr,ypr,Lpr,z7,Y2e,xpr,kpr,tz,Spr,Rpr,Bpr,Q7,K2e,Ppr,$pr,az,Ipr,qpr,Npr,W7,Z2e,jpr,Dpr,nz,Gpr,Opr,Vpr,H7,e1e,Xpr,zpr,sz,Qpr,Wpr,Hpr,U7,o1e,Upr,Jpr,lz,Ypr,Kpr,Zpr,J7,r1e,e_r,o_r,iz,r_r,t_r,a_r,Y7,t1e,n_r,s_r,dz,l_r,i_r,d_r,K7,a1e,c_r,f_r,cz,m_r,g_r,h_r,Z7,n1e,p_r,__r,fz,u_r,b_r,F_r,e9,s1e,v_r,T_r,mz,M_r,E_r,C_r,o9,l1e,w_r,A_r,gz,y_r,L_r,x_r,r9,i1e,k_r,S_r,hz,R_r,B_r,P_r,t9,d1e,$_r,I_r,pz,q_r,N_r,j_r,a9,c1e,D_r,G_r,_z,O_r,V_r,X_r,n9,f1e,z_r,Q_r,uz,W_r,H_r,U_r,s9,m1e,J_r,Y_r,bz,K_r,Z_r,eur,l9,g1e,our,rur,Fz,tur,aur,nur,i9,h1e,sur,lur,vz,iur,dur,cur,d9,p1e,fur,mur,Tz,gur,hur,pur,c9,_1e,_ur,uur,Mz,bur,Fur,vur,f9,u1e,Tur,Mur,Ez,Eur,Cur,wur,b1e,Aur,yur,s0,gPe,$c,m9,F1e,l0,Lur,v1e,xur,hPe,Ar,i0,kur,Ic,Sur,Cz,Rur,Bur,wz,Pur,$ur,Iur,d0,qur,T1e,Nur,jur,Dur,vt,c0,Gur,M1e,Our,Vur,qc,Xur,E1e,zur,Qur,Az,Wur,Hur,Uur,C1e,Jur,Yur,f0,Kur,To,m0,Zur,w1e,e2r,o2r,En,r2r,A1e,t2r,a2r,y1e,n2r,s2r,L1e,l2r,i2r,d2r,se,g9,x1e,c2r,f2r,yz,m2r,g2r,h2r,h9,k1e,p2r,_2r,Lz,u2r,b2r,F2r,p9,S1e,v2r,T2r,xz,M2r,E2r,C2r,_9,R1e,w2r,A2r,kz,y2r,L2r,x2r,u9,B1e,k2r,S2r,Sz,R2r,B2r,P2r,b9,P1e,$2r,I2r,Rz,q2r,N2r,j2r,F9,$1e,D2r,G2r,Bz,O2r,V2r,X2r,v9,I1e,z2r,Q2r,Pz,W2r,H2r,U2r,T9,q1e,J2r,Y2r,$z,K2r,Z2r,e1r,M9,N1e,o1r,r1r,Iz,t1r,a1r,n1r,E9,j1e,s1r,l1r,qz,i1r,d1r,c1r,C9,D1e,f1r,m1r,Nz,g1r,h1r,p1r,w9,G1e,_1r,u1r,jz,b1r,F1r,v1r,A9,O1e,T1r,M1r,Dz,E1r,C1r,w1r,y9,V1e,A1r,y1r,Gz,L1r,x1r,k1r,L9,X1e,S1r,R1r,Oz,B1r,P1r,$1r,x9,z1e,I1r,q1r,Vz,N1r,j1r,D1r,Q1e,G1r,O1r,g0,pPe,Nc,k9,W1e,h0,V1r,H1e,X1r,_Pe,yr,p0,z1r,jc,Q1r,Xz,W1r,H1r,zz,U1r,J1r,Y1r,_0,K1r,U1e,Z1r,ebr,obr,Tt,u0,rbr,J1e,tbr,abr,Dc,nbr,Y1e,sbr,lbr,Qz,ibr,dbr,cbr,K1e,fbr,mbr,b0,gbr,Mo,F0,hbr,Z1e,pbr,_br,Cn,ubr,ebe,bbr,Fbr,obe,vbr,Tbr,rbe,Mbr,Ebr,Cbr,tbe,S9,abe,wbr,Abr,Wz,ybr,Lbr,xbr,nbe,kbr,Sbr,v0,uPe,Gc,R9,sbe,T0,Rbr,lbe,Bbr,bPe,Lr,M0,Pbr,Oc,$br,Hz,Ibr,qbr,Uz,Nbr,jbr,Dbr,E0,Gbr,ibe,Obr,Vbr,Xbr,Mt,C0,zbr,dbe,Qbr,Wbr,Vc,Hbr,cbe,Ubr,Jbr,Jz,Ybr,Kbr,Zbr,fbe,e6r,o6r,w0,r6r,Eo,A0,t6r,mbe,a6r,n6r,wn,s6r,gbe,l6r,i6r,hbe,d6r,c6r,pbe,f6r,m6r,g6r,Y,B9,_be,h6r,p6r,Yz,_6r,u6r,b6r,P9,ube,F6r,v6r,Kz,T6r,M6r,E6r,$9,bbe,C6r,w6r,Zz,A6r,y6r,L6r,I9,Fbe,x6r,k6r,eQ,S6r,R6r,B6r,q9,vbe,P6r,$6r,oQ,I6r,q6r,N6r,N9,Tbe,j6r,D6r,rQ,G6r,O6r,V6r,j9,Mbe,X6r,z6r,tQ,Q6r,W6r,H6r,D9,Ebe,U6r,J6r,aQ,Y6r,K6r,Z6r,G9,Cbe,eFr,oFr,nQ,rFr,tFr,aFr,O9,wbe,nFr,sFr,sQ,lFr,iFr,dFr,V9,Abe,cFr,fFr,lQ,mFr,gFr,hFr,X9,ybe,pFr,_Fr,iQ,uFr,bFr,FFr,z9,Lbe,vFr,TFr,dQ,MFr,EFr,CFr,Q9,xbe,wFr,AFr,cQ,yFr,LFr,xFr,W9,kbe,kFr,SFr,fQ,RFr,BFr,PFr,H9,Sbe,$Fr,IFr,mQ,qFr,NFr,jFr,U9,Rbe,DFr,GFr,gQ,OFr,VFr,XFr,J9,Bbe,zFr,QFr,hQ,WFr,HFr,UFr,Y9,Pbe,JFr,YFr,pQ,KFr,ZFr,evr,K9,$be,ovr,rvr,_Q,tvr,avr,nvr,Ibe,svr,lvr,y0,FPe,Xc,Z9,qbe,L0,ivr,Nbe,dvr,vPe,xr,x0,cvr,zc,fvr,uQ,mvr,gvr,bQ,hvr,pvr,_vr,k0,uvr,jbe,bvr,Fvr,vvr,Et,S0,Tvr,Dbe,Mvr,Evr,Qc,Cvr,Gbe,wvr,Avr,FQ,yvr,Lvr,xvr,Obe,kvr,Svr,R0,Rvr,Co,B0,Bvr,Vbe,Pvr,$vr,An,Ivr,Xbe,qvr,Nvr,zbe,jvr,Dvr,Qbe,Gvr,Ovr,Vvr,K,eM,Wbe,Xvr,zvr,vQ,Qvr,Wvr,Hvr,oM,Hbe,Uvr,Jvr,TQ,Yvr,Kvr,Zvr,rM,Ube,eTr,oTr,MQ,rTr,tTr,aTr,tM,Jbe,nTr,sTr,EQ,lTr,iTr,dTr,aM,Ybe,cTr,fTr,CQ,mTr,gTr,hTr,nM,Kbe,pTr,_Tr,wQ,uTr,bTr,FTr,sM,Zbe,vTr,TTr,AQ,MTr,ETr,CTr,lM,e6e,wTr,ATr,yQ,yTr,LTr,xTr,iM,o6e,kTr,STr,LQ,RTr,BTr,PTr,dM,r6e,$Tr,ITr,xQ,qTr,NTr,jTr,cM,t6e,DTr,GTr,kQ,OTr,VTr,XTr,fM,a6e,zTr,QTr,SQ,WTr,HTr,UTr,mM,n6e,JTr,YTr,RQ,KTr,ZTr,e7r,gM,s6e,o7r,r7r,BQ,t7r,a7r,n7r,hM,l6e,s7r,l7r,PQ,i7r,d7r,c7r,pM,i6e,f7r,m7r,$Q,g7r,h7r,p7r,_M,d6e,_7r,u7r,IQ,b7r,F7r,v7r,uM,c6e,T7r,M7r,qQ,E7r,C7r,w7r,bM,f6e,A7r,y7r,NQ,L7r,x7r,k7r,FM,m6e,S7r,R7r,jQ,B7r,P7r,$7r,g6e,I7r,q7r,P0,TPe,Wc,vM,h6e,$0,N7r,p6e,j7r,MPe,kr,I0,D7r,Hc,G7r,DQ,O7r,V7r,GQ,X7r,z7r,Q7r,q0,W7r,_6e,H7r,U7r,J7r,Ct,N0,Y7r,u6e,K7r,Z7r,Uc,e9r,b6e,o9r,r9r,OQ,t9r,a9r,n9r,F6e,s9r,l9r,j0,i9r,wo,D0,d9r,v6e,c9r,f9r,yn,m9r,T6e,g9r,h9r,M6e,p9r,_9r,E6e,u9r,b9r,F9r,C6e,TM,w6e,v9r,T9r,VQ,M9r,E9r,C9r,A6e,w9r,A9r,G0,EPe,Jc,MM,y6e,O0,y9r,L6e,L9r,CPe,Sr,V0,x9r,Yc,k9r,XQ,S9r,R9r,zQ,B9r,P9r,$9r,X0,I9r,x6e,q9r,N9r,j9r,wt,z0,D9r,k6e,G9r,O9r,Kc,V9r,S6e,X9r,z9r,QQ,Q9r,W9r,H9r,R6e,U9r,J9r,Q0,Y9r,Ao,W0,K9r,B6e,Z9r,eMr,Ln,oMr,P6e,rMr,tMr,$6e,aMr,nMr,I6e,sMr,lMr,iMr,q6e,EM,N6e,dMr,cMr,WQ,fMr,mMr,gMr,j6e,hMr,pMr,H0,wPe,Zc,CM,D6e,U0,_Mr,G6e,uMr,APe,Rr,J0,bMr,ef,FMr,HQ,vMr,TMr,UQ,MMr,EMr,CMr,Y0,wMr,O6e,AMr,yMr,LMr,At,K0,xMr,V6e,kMr,SMr,of,RMr,X6e,BMr,PMr,JQ,$Mr,IMr,qMr,z6e,NMr,jMr,Z0,DMr,yo,ey,GMr,Q6e,OMr,VMr,xn,XMr,W6e,zMr,QMr,H6e,WMr,HMr,U6e,UMr,JMr,YMr,X,wM,J6e,KMr,ZMr,YQ,e4r,o4r,r4r,AM,Y6e,t4r,a4r,KQ,n4r,s4r,l4r,yM,K6e,i4r,d4r,ZQ,c4r,f4r,m4r,LM,Z6e,g4r,h4r,eW,p4r,_4r,u4r,xM,eFe,b4r,F4r,oW,v4r,T4r,M4r,kM,oFe,E4r,C4r,rW,w4r,A4r,y4r,SM,rFe,L4r,x4r,tW,k4r,S4r,R4r,RM,tFe,B4r,P4r,aW,$4r,I4r,q4r,BM,aFe,N4r,j4r,nW,D4r,G4r,O4r,PM,nFe,V4r,X4r,sW,z4r,Q4r,W4r,$M,sFe,H4r,U4r,lW,J4r,Y4r,K4r,IM,lFe,Z4r,eEr,iW,oEr,rEr,tEr,qM,iFe,aEr,nEr,dW,sEr,lEr,iEr,NM,dFe,dEr,cEr,cW,fEr,mEr,gEr,jM,cFe,hEr,pEr,fW,_Er,uEr,bEr,DM,fFe,FEr,vEr,mW,TEr,MEr,EEr,GM,mFe,CEr,wEr,gW,AEr,yEr,LEr,OM,gFe,xEr,kEr,hW,SEr,REr,BEr,VM,hFe,PEr,$Er,pW,IEr,qEr,NEr,XM,pFe,jEr,DEr,_W,GEr,OEr,VEr,zM,_Fe,XEr,zEr,uW,QEr,WEr,HEr,QM,uFe,UEr,JEr,bW,YEr,KEr,ZEr,WM,bFe,e5r,o5r,FW,r5r,t5r,a5r,HM,FFe,n5r,s5r,vW,l5r,i5r,d5r,UM,vFe,c5r,f5r,TW,m5r,g5r,h5r,JM,TFe,p5r,_5r,MW,u5r,b5r,F5r,MFe,v5r,T5r,oy,yPe,rf,YM,EFe,ry,M5r,CFe,E5r,LPe,Br,ty,C5r,tf,w5r,EW,A5r,y5r,CW,L5r,x5r,k5r,ay,S5r,wFe,R5r,B5r,P5r,yt,ny,$5r,AFe,I5r,q5r,af,N5r,yFe,j5r,D5r,wW,G5r,O5r,V5r,LFe,X5r,z5r,sy,Q5r,Lo,ly,W5r,xFe,H5r,U5r,kn,J5r,kFe,Y5r,K5r,SFe,Z5r,e3r,RFe,o3r,r3r,t3r,ca,KM,BFe,a3r,n3r,AW,s3r,l3r,i3r,ZM,PFe,d3r,c3r,yW,f3r,m3r,g3r,e4,$Fe,h3r,p3r,LW,_3r,u3r,b3r,o4,IFe,F3r,v3r,xW,T3r,M3r,E3r,r4,qFe,C3r,w3r,kW,A3r,y3r,L3r,NFe,x3r,k3r,iy,xPe,nf,t4,jFe,dy,S3r,DFe,R3r,kPe,Pr,cy,B3r,sf,P3r,SW,$3r,I3r,RW,q3r,N3r,j3r,fy,D3r,GFe,G3r,O3r,V3r,Lt,my,X3r,OFe,z3r,Q3r,lf,W3r,VFe,H3r,U3r,BW,J3r,Y3r,K3r,XFe,Z3r,eCr,gy,oCr,xo,hy,rCr,zFe,tCr,aCr,Sn,nCr,QFe,sCr,lCr,WFe,iCr,dCr,HFe,cCr,fCr,mCr,de,a4,UFe,gCr,hCr,PW,pCr,_Cr,uCr,n4,JFe,bCr,FCr,$W,vCr,TCr,MCr,s4,YFe,ECr,CCr,IW,wCr,ACr,yCr,l4,KFe,LCr,xCr,qW,kCr,SCr,RCr,i4,ZFe,BCr,PCr,NW,$Cr,ICr,qCr,d4,eve,NCr,jCr,jW,DCr,GCr,OCr,c4,ove,VCr,XCr,DW,zCr,QCr,WCr,f4,rve,HCr,UCr,GW,JCr,YCr,KCr,m4,tve,ZCr,ewr,OW,owr,rwr,twr,g4,ave,awr,nwr,VW,swr,lwr,iwr,h4,nve,dwr,cwr,XW,fwr,mwr,gwr,p4,sve,hwr,pwr,zW,_wr,uwr,bwr,_4,lve,Fwr,vwr,QW,Twr,Mwr,Ewr,ive,Cwr,wwr,py,SPe,df,u4,dve,_y,Awr,cve,ywr,RPe,$r,uy,Lwr,cf,xwr,WW,kwr,Swr,HW,Rwr,Bwr,Pwr,by,$wr,fve,Iwr,qwr,Nwr,xt,Fy,jwr,mve,Dwr,Gwr,ff,Owr,gve,Vwr,Xwr,UW,zwr,Qwr,Wwr,hve,Hwr,Uwr,vy,Jwr,ko,Ty,Ywr,pve,Kwr,Zwr,Rn,eAr,_ve,oAr,rAr,uve,tAr,aAr,bve,nAr,sAr,lAr,Fe,b4,Fve,iAr,dAr,JW,cAr,fAr,mAr,F4,vve,gAr,hAr,YW,pAr,_Ar,uAr,v4,Tve,bAr,FAr,KW,vAr,TAr,MAr,T4,Mve,EAr,CAr,ZW,wAr,AAr,yAr,M4,Eve,LAr,xAr,eH,kAr,SAr,RAr,E4,Cve,BAr,PAr,oH,$Ar,IAr,qAr,C4,wve,NAr,jAr,rH,DAr,GAr,OAr,w4,Ave,VAr,XAr,tH,zAr,QAr,WAr,A4,yve,HAr,UAr,aH,JAr,YAr,KAr,y4,Lve,ZAr,e0r,nH,o0r,r0r,t0r,xve,a0r,n0r,My,BPe,mf,L4,kve,Ey,s0r,Sve,l0r,PPe,Ir,Cy,i0r,gf,d0r,sH,c0r,f0r,lH,m0r,g0r,h0r,wy,p0r,Rve,_0r,u0r,b0r,kt,Ay,F0r,Bve,v0r,T0r,hf,M0r,Pve,E0r,C0r,iH,w0r,A0r,y0r,$ve,L0r,x0r,yy,k0r,So,Ly,S0r,Ive,R0r,B0r,Bn,P0r,qve,$0r,I0r,Nve,q0r,N0r,jve,j0r,D0r,G0r,ve,x4,Dve,O0r,V0r,dH,X0r,z0r,Q0r,k4,Gve,W0r,H0r,cH,U0r,J0r,Y0r,S4,Ove,K0r,Z0r,fH,eyr,oyr,ryr,R4,Vve,tyr,ayr,mH,nyr,syr,lyr,B4,Xve,iyr,dyr,gH,cyr,fyr,myr,P4,zve,gyr,hyr,hH,pyr,_yr,uyr,$4,Qve,byr,Fyr,pH,vyr,Tyr,Myr,I4,Wve,Eyr,Cyr,_H,wyr,Ayr,yyr,q4,Hve,Lyr,xyr,uH,kyr,Syr,Ryr,N4,Uve,Byr,Pyr,bH,$yr,Iyr,qyr,Jve,Nyr,jyr,xy,$Pe,pf,j4,Yve,ky,Dyr,Kve,Gyr,IPe,qr,Sy,Oyr,_f,Vyr,FH,Xyr,zyr,vH,Qyr,Wyr,Hyr,Ry,Uyr,Zve,Jyr,Yyr,Kyr,St,By,Zyr,eTe,eLr,oLr,uf,rLr,oTe,tLr,aLr,TH,nLr,sLr,lLr,rTe,iLr,dLr,Py,cLr,Ro,$y,fLr,tTe,mLr,gLr,Pn,hLr,aTe,pLr,_Lr,nTe,uLr,bLr,sTe,FLr,vLr,TLr,Te,D4,lTe,MLr,ELr,MH,CLr,wLr,ALr,G4,iTe,yLr,LLr,EH,xLr,kLr,SLr,O4,dTe,RLr,BLr,CH,PLr,$Lr,ILr,V4,cTe,qLr,NLr,wH,jLr,DLr,GLr,X4,fTe,OLr,VLr,AH,XLr,zLr,QLr,z4,mTe,WLr,HLr,yH,ULr,JLr,YLr,Q4,gTe,KLr,ZLr,LH,e8r,o8r,r8r,W4,hTe,t8r,a8r,xH,n8r,s8r,l8r,H4,pTe,i8r,d8r,kH,c8r,f8r,m8r,U4,_Te,g8r,h8r,SH,p8r,_8r,u8r,uTe,b8r,F8r,Iy,qPe,bf,J4,bTe,qy,v8r,FTe,T8r,NPe,Nr,Ny,M8r,Ff,E8r,RH,C8r,w8r,BH,A8r,y8r,L8r,jy,x8r,vTe,k8r,S8r,R8r,Rt,Dy,B8r,TTe,P8r,$8r,vf,I8r,MTe,q8r,N8r,PH,j8r,D8r,G8r,ETe,O8r,V8r,Gy,X8r,Bo,Oy,z8r,CTe,Q8r,W8r,$n,H8r,wTe,U8r,J8r,ATe,Y8r,K8r,yTe,Z8r,exr,oxr,Me,Y4,LTe,rxr,txr,$H,axr,nxr,sxr,K4,xTe,lxr,ixr,IH,dxr,cxr,fxr,Z4,kTe,mxr,gxr,qH,hxr,pxr,_xr,eE,STe,uxr,bxr,NH,Fxr,vxr,Txr,oE,RTe,Mxr,Exr,jH,Cxr,wxr,Axr,rE,BTe,yxr,Lxr,DH,xxr,kxr,Sxr,tE,PTe,Rxr,Bxr,GH,Pxr,$xr,Ixr,aE,$Te,qxr,Nxr,OH,jxr,Dxr,Gxr,nE,ITe,Oxr,Vxr,VH,Xxr,zxr,Qxr,sE,qTe,Wxr,Hxr,XH,Uxr,Jxr,Yxr,NTe,Kxr,Zxr,Vy,jPe,Tf,lE,jTe,Xy,ekr,DTe,okr,DPe,jr,zy,rkr,Mf,tkr,zH,akr,nkr,QH,skr,lkr,ikr,Qy,dkr,GTe,ckr,fkr,mkr,Bt,Wy,gkr,OTe,hkr,pkr,Ef,_kr,VTe,ukr,bkr,WH,Fkr,vkr,Tkr,XTe,Mkr,Ekr,Hy,Ckr,Po,Uy,wkr,zTe,Akr,ykr,In,Lkr,QTe,xkr,kkr,WTe,Skr,Rkr,HTe,Bkr,Pkr,$kr,Pe,iE,UTe,Ikr,qkr,HH,Nkr,jkr,Dkr,dE,JTe,Gkr,Okr,UH,Vkr,Xkr,zkr,cE,YTe,Qkr,Wkr,JH,Hkr,Ukr,Jkr,fE,KTe,Ykr,Kkr,YH,Zkr,eSr,oSr,mE,ZTe,rSr,tSr,KH,aSr,nSr,sSr,gE,e7e,lSr,iSr,ZH,dSr,cSr,fSr,hE,o7e,mSr,gSr,eU,hSr,pSr,_Sr,pE,r7e,uSr,bSr,oU,FSr,vSr,TSr,t7e,MSr,ESr,Jy,GPe,Cf,_E,a7e,Yy,CSr,n7e,wSr,OPe,Dr,Ky,ASr,wf,ySr,rU,LSr,xSr,tU,kSr,SSr,RSr,Zy,BSr,s7e,PSr,$Sr,ISr,Pt,eL,qSr,l7e,NSr,jSr,Af,DSr,i7e,GSr,OSr,aU,VSr,XSr,zSr,d7e,QSr,WSr,oL,HSr,$o,rL,USr,c7e,JSr,YSr,qn,KSr,f7e,ZSr,eRr,m7e,oRr,rRr,g7e,tRr,aRr,nRr,$e,uE,h7e,sRr,lRr,nU,iRr,dRr,cRr,bE,p7e,fRr,mRr,sU,gRr,hRr,pRr,FE,_7e,_Rr,uRr,lU,bRr,FRr,vRr,vE,u7e,TRr,MRr,iU,ERr,CRr,wRr,TE,b7e,ARr,yRr,dU,LRr,xRr,kRr,ME,F7e,SRr,RRr,cU,BRr,PRr,$Rr,EE,v7e,IRr,qRr,fU,NRr,jRr,DRr,CE,T7e,GRr,ORr,mU,VRr,XRr,zRr,M7e,QRr,WRr,tL,VPe,yf,wE,E7e,aL,HRr,C7e,URr,XPe,Gr,nL,JRr,Lf,YRr,gU,KRr,ZRr,hU,eBr,oBr,rBr,sL,tBr,w7e,aBr,nBr,sBr,$t,lL,lBr,A7e,iBr,dBr,xf,cBr,y7e,fBr,mBr,pU,gBr,hBr,pBr,L7e,_Br,uBr,iL,bBr,Io,dL,FBr,x7e,vBr,TBr,Nn,MBr,k7e,EBr,CBr,S7e,wBr,ABr,R7e,yBr,LBr,xBr,B7e,AE,P7e,kBr,SBr,_U,RBr,BBr,PBr,$7e,$Br,IBr,cL,zPe,kf,yE,I7e,fL,qBr,q7e,NBr,QPe,Or,mL,jBr,Sf,DBr,uU,GBr,OBr,bU,VBr,XBr,zBr,gL,QBr,N7e,WBr,HBr,UBr,It,hL,JBr,j7e,YBr,KBr,Rf,ZBr,D7e,ePr,oPr,FU,rPr,tPr,aPr,G7e,nPr,sPr,pL,lPr,qo,_L,iPr,O7e,dPr,cPr,jn,fPr,V7e,mPr,gPr,X7e,hPr,pPr,z7e,_Pr,uPr,bPr,uL,LE,Q7e,FPr,vPr,vU,TPr,MPr,EPr,xE,W7e,CPr,wPr,TU,APr,yPr,LPr,H7e,xPr,kPr,bL,WPe,Bf,kE,U7e,FL,SPr,J7e,RPr,HPe,Vr,vL,BPr,Pf,PPr,MU,$Pr,IPr,EU,qPr,NPr,jPr,TL,DPr,Y7e,GPr,OPr,VPr,qt,ML,XPr,K7e,zPr,QPr,$f,WPr,Z7e,HPr,UPr,CU,JPr,YPr,KPr,e9e,ZPr,e$r,EL,o$r,No,CL,r$r,o9e,t$r,a$r,Dn,n$r,r9e,s$r,l$r,t9e,i$r,d$r,a9e,c$r,f$r,m$r,n9e,SE,s9e,g$r,h$r,wU,p$r,_$r,u$r,l9e,b$r,F$r,wL,UPe;return he=new z({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),$5=new z({}),I5=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Vf=new v$r({props:{warning:!0,$$slots:{default:[FCt]},$$scope:{ctx:qf}}}),q5=new z({}),N5=new w({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/configuration_auto.py#L555"}}),G5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/configuration_auto.py#L578"}}),O5=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),V5=new w({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/configuration_auto.py#L700"}}),X5=new z({}),z5=new w({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/tokenization_auto.py#L359"}}),H5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16792/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/tokenization_auto.py#L373"}}),U5=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),J5=new w({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/tokenization_auto.py#L569"}}),Y5=new z({}),K5=new w({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),o3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),Nh=new v$r({props:{$$slots:{default:[vCt]},$$scope:{ctx:qf}}}),r3=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),t3=new w({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/feature_extraction_auto.py#L313"}}),a3=new z({}),n3=new w({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/processing_auto.py#L70"}}),i3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/processing_auto.py#L84"}}),Uh=new v$r({props:{$$slots:{default:[TCt]},$$scope:{ctx:qf}}}),d3=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),c3=new w({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/processing_auto.py#L237"}}),f3=new z({}),m3=new w({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L715"}}),h3=new w({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),p3=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),_3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b3=new z({}),F3=new w({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L722"}}),T3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),M3=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),E3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w3=new z({}),A3=new w({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L737"}}),L3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),x3=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),k3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),S3=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R3=new z({}),B3=new w({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L744"}}),$3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),I3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),q3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),N3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j3=new z({}),D3=new w({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L751"}}),O3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),V3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),X3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),z3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q3=new z({}),W3=new w({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L760"}}),U3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),J3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),Y3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),K3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z3=new z({}),eC=new w({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L794"}}),rC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),tC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),aC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),nC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sC=new z({}),lC=new w({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L801"}}),dC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),cC=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),fC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gC=new z({}),hC=new w({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L787"}}),_C=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),bC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),FC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vC=new z({}),TC=new w({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L769"}}),EC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),wC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yC=new z({}),LC=new w({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L776"}}),kC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),SC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),RC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),BC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PC=new z({}),$C=new w({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L810"}}),qC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),NC=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),jC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),DC=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GC=new z({}),OC=new w({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L849"}}),XC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),zC=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),QC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HC=new z({}),UC=new w({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L856"}}),YC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),ZC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),ew=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ow=new z({}),rw=new w({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L879"}}),aw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),nw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),sw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),lw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iw=new z({}),dw=new w({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L863"}}),fw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),mw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),gw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pw=new z({}),_w=new w({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L870"}}),bw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Fw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),vw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Mw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ew=new z({}),Cw=new w({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L888"}}),Aw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),yw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),Lw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),xw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kw=new z({}),Sw=new w({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L895"}}),Bw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Pw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),$w=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Iw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qw=new z({}),Nw=new w({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L842"}}),Dw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Gw=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),Ow=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Vw=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xw=new z({}),zw=new w({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L817"}}),Ww=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Hw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Uw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Jw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yw=new z({}),Kw=new w({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L824"}}),eA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),oA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),rA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),tA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aA=new z({}),nA=new w({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L833"}}),lA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),iA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),dA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),cA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fA=new z({}),mA=new w({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),hA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),pA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),_A=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),uA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bA=new z({}),FA=new w({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),TA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),MA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),EA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),CA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wA=new z({}),AA=new w({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),LA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),xA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),kA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),SA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RA=new z({}),BA=new w({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),$A=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),IA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),qA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),jA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DA=new z({}),GA=new w({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),VA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),XA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),zA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),QA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WA=new z({}),HA=new w({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),JA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),YA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),KA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),ZA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e0=new z({}),o0=new w({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),t0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),a0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),n0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),s0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l0=new z({}),i0=new w({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),c0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),f0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),m0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),g0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h0=new z({}),p0=new w({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),u0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),b0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),F0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),v0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T0=new z({}),M0=new w({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),C0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),w0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),A0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),y0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L0=new z({}),x0=new w({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),S0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),R0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),B0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),P0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$0=new z({}),I0=new w({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),N0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),j0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),D0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),G0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),O0=new z({}),V0=new w({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),z0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),W0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),H0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U0=new z({}),J0=new w({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L240"}}),K0=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Z0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),ey=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),oy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ry=new z({}),ty=new w({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L254"}}),ny=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),sy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),ly=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),iy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dy=new z({}),cy=new w({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L247"}}),my=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),gy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),hy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),py=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_y=new z({}),uy=new w({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L261"}}),Fy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),vy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),Ty=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),My=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ey=new z({}),Cy=new w({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L268"}}),Ay=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),yy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),Ly=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),xy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ky=new z({}),Sy=new w({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L277"}}),By=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Py=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),$y=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Iy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qy=new z({}),Ny=new w({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L286"}}),Dy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Gy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),Oy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Vy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xy=new z({}),zy=new w({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L293"}}),Wy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Hy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),Uy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Jy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yy=new z({}),Ky=new w({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L302"}}),eL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),oL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),rL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),tL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aL=new z({}),nL=new w({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L309"}}),lL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),iL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),dL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),cL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fL=new z({}),mL=new w({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L318"}}),hL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),pL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),_L=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),bL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FL=new z({}),vL=new w({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L327"}}),ML=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),EL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),CL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),wL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),ce=a("h1"),Ce=a("a"),lo=a("span"),f(he.$$.fragment),Ee=l(),Xo=a("span"),qi=o("Auto Classes"),Nf=l(),fa=a("p"),Ni=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=a("code"),S5=o("from_pretrained()"),jf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ke=l(),co=a("p"),Di=o("Instantiating one of "),Gn=a("a"),R5=o("AutoConfig"),On=o(", "),Vn=a("a"),B5=o("AutoModel"),Gi=o(`, and
`),Xn=a("a"),P5=o("AutoTokenizer"),Oi=o(" will directly create a class of the relevant architecture. For instance"),Df=l(),f(Da.$$.fragment),fo=l(),ue=a("p"),C8=o("will create a model that is an instance of "),Vi=a("a"),w8=o("BertModel"),A8=o("."),zo=l(),Ga=a("p"),y8=o("There is one class of "),Gf=a("code"),L8=o("AutoModel"),lqe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),HRe=l(),Xi=a("h2"),Of=a("a"),FY=a("span"),f($5.$$.fragment),iqe=l(),vY=a("span"),dqe=o("Extending the Auto Classes"),URe=l(),zn=a("p"),cqe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),TY=a("code"),fqe=o("NewModel"),mqe=o(", make sure you have a "),MY=a("code"),gqe=o("NewModelConfig"),hqe=o(` then you can add those to the auto
classes like this:`),JRe=l(),f(I5.$$.fragment),YRe=l(),x8=a("p"),pqe=o("You will then be able to use the auto classes like you would usually do!"),KRe=l(),f(Vf.$$.fragment),ZRe=l(),zi=a("h2"),Xf=a("a"),EY=a("span"),f(q5.$$.fragment),_qe=l(),CY=a("span"),uqe=o("AutoConfig"),eBe=l(),Qo=a("div"),f(N5.$$.fragment),bqe=l(),j5=a("p"),Fqe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),k8=a("a"),vqe=o("from_pretrained()"),Tqe=o(" class method."),Mqe=l(),D5=a("p"),Eqe=o("This class cannot be instantiated directly using "),wY=a("code"),Cqe=o("__init__()"),wqe=o(" (throws an error)."),Aqe=l(),mo=a("div"),f(G5.$$.fragment),yqe=l(),AY=a("p"),Lqe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),xqe=l(),Qi=a("p"),kqe=o("The configuration class to instantiate is selected based on the "),yY=a("code"),Sqe=o("model_type"),Rqe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),LY=a("code"),Bqe=o("pretrained_model_name_or_path"),Pqe=o(":"),$qe=l(),F=a("ul"),zf=a("li"),xY=a("strong"),Iqe=o("albert"),qqe=o(" \u2014 "),S8=a("a"),Nqe=o("AlbertConfig"),jqe=o(" (ALBERT model)"),Dqe=l(),Qf=a("li"),kY=a("strong"),Gqe=o("bart"),Oqe=o(" \u2014 "),R8=a("a"),Vqe=o("BartConfig"),Xqe=o(" (BART model)"),zqe=l(),Wf=a("li"),SY=a("strong"),Qqe=o("beit"),Wqe=o(" \u2014 "),B8=a("a"),Hqe=o("BeitConfig"),Uqe=o(" (BEiT model)"),Jqe=l(),Hf=a("li"),RY=a("strong"),Yqe=o("bert"),Kqe=o(" \u2014 "),P8=a("a"),Zqe=o("BertConfig"),eNe=o(" (BERT model)"),oNe=l(),Uf=a("li"),BY=a("strong"),rNe=o("bert-generation"),tNe=o(" \u2014 "),$8=a("a"),aNe=o("BertGenerationConfig"),nNe=o(" (Bert Generation model)"),sNe=l(),Jf=a("li"),PY=a("strong"),lNe=o("big_bird"),iNe=o(" \u2014 "),I8=a("a"),dNe=o("BigBirdConfig"),cNe=o(" (BigBird model)"),fNe=l(),Yf=a("li"),$Y=a("strong"),mNe=o("bigbird_pegasus"),gNe=o(" \u2014 "),q8=a("a"),hNe=o("BigBirdPegasusConfig"),pNe=o(" (BigBirdPegasus model)"),_Ne=l(),Kf=a("li"),IY=a("strong"),uNe=o("blenderbot"),bNe=o(" \u2014 "),N8=a("a"),FNe=o("BlenderbotConfig"),vNe=o(" (Blenderbot model)"),TNe=l(),Zf=a("li"),qY=a("strong"),MNe=o("blenderbot-small"),ENe=o(" \u2014 "),j8=a("a"),CNe=o("BlenderbotSmallConfig"),wNe=o(" (BlenderbotSmall model)"),ANe=l(),em=a("li"),NY=a("strong"),yNe=o("camembert"),LNe=o(" \u2014 "),D8=a("a"),xNe=o("CamembertConfig"),kNe=o(" (CamemBERT model)"),SNe=l(),om=a("li"),jY=a("strong"),RNe=o("canine"),BNe=o(" \u2014 "),G8=a("a"),PNe=o("CanineConfig"),$Ne=o(" (Canine model)"),INe=l(),rm=a("li"),DY=a("strong"),qNe=o("clip"),NNe=o(" \u2014 "),O8=a("a"),jNe=o("CLIPConfig"),DNe=o(" (CLIP model)"),GNe=l(),tm=a("li"),GY=a("strong"),ONe=o("convbert"),VNe=o(" \u2014 "),V8=a("a"),XNe=o("ConvBertConfig"),zNe=o(" (ConvBERT model)"),QNe=l(),am=a("li"),OY=a("strong"),WNe=o("convnext"),HNe=o(" \u2014 "),X8=a("a"),UNe=o("ConvNextConfig"),JNe=o(" (ConvNext model)"),YNe=l(),nm=a("li"),VY=a("strong"),KNe=o("ctrl"),ZNe=o(" \u2014 "),z8=a("a"),eje=o("CTRLConfig"),oje=o(" (CTRL model)"),rje=l(),sm=a("li"),XY=a("strong"),tje=o("data2vec-audio"),aje=o(" \u2014 "),Q8=a("a"),nje=o("Data2VecAudioConfig"),sje=o(" (Data2VecAudio model)"),lje=l(),lm=a("li"),zY=a("strong"),ije=o("data2vec-text"),dje=o(" \u2014 "),W8=a("a"),cje=o("Data2VecTextConfig"),fje=o(" (Data2VecText model)"),mje=l(),im=a("li"),QY=a("strong"),gje=o("deberta"),hje=o(" \u2014 "),H8=a("a"),pje=o("DebertaConfig"),_je=o(" (DeBERTa model)"),uje=l(),dm=a("li"),WY=a("strong"),bje=o("deberta-v2"),Fje=o(" \u2014 "),U8=a("a"),vje=o("DebertaV2Config"),Tje=o(" (DeBERTa-v2 model)"),Mje=l(),cm=a("li"),HY=a("strong"),Eje=o("decision_transformer"),Cje=o(" \u2014 "),J8=a("a"),wje=o("DecisionTransformerConfig"),Aje=o(" (Decision Transformer model)"),yje=l(),fm=a("li"),UY=a("strong"),Lje=o("deit"),xje=o(" \u2014 "),Y8=a("a"),kje=o("DeiTConfig"),Sje=o(" (DeiT model)"),Rje=l(),mm=a("li"),JY=a("strong"),Bje=o("detr"),Pje=o(" \u2014 "),K8=a("a"),$je=o("DetrConfig"),Ije=o(" (DETR model)"),qje=l(),gm=a("li"),YY=a("strong"),Nje=o("distilbert"),jje=o(" \u2014 "),Z8=a("a"),Dje=o("DistilBertConfig"),Gje=o(" (DistilBERT model)"),Oje=l(),hm=a("li"),KY=a("strong"),Vje=o("dpr"),Xje=o(" \u2014 "),ex=a("a"),zje=o("DPRConfig"),Qje=o(" (DPR model)"),Wje=l(),pm=a("li"),ZY=a("strong"),Hje=o("dpt"),Uje=o(" \u2014 "),ox=a("a"),Jje=o("DPTConfig"),Yje=o(" (DPT model)"),Kje=l(),_m=a("li"),eK=a("strong"),Zje=o("electra"),eDe=o(" \u2014 "),rx=a("a"),oDe=o("ElectraConfig"),rDe=o(" (ELECTRA model)"),tDe=l(),um=a("li"),oK=a("strong"),aDe=o("encoder-decoder"),nDe=o(" \u2014 "),tx=a("a"),sDe=o("EncoderDecoderConfig"),lDe=o(" (Encoder decoder model)"),iDe=l(),bm=a("li"),rK=a("strong"),dDe=o("flaubert"),cDe=o(" \u2014 "),ax=a("a"),fDe=o("FlaubertConfig"),mDe=o(" (FlauBERT model)"),gDe=l(),Fm=a("li"),tK=a("strong"),hDe=o("fnet"),pDe=o(" \u2014 "),nx=a("a"),_De=o("FNetConfig"),uDe=o(" (FNet model)"),bDe=l(),vm=a("li"),aK=a("strong"),FDe=o("fsmt"),vDe=o(" \u2014 "),sx=a("a"),TDe=o("FSMTConfig"),MDe=o(" (FairSeq Machine-Translation model)"),EDe=l(),Tm=a("li"),nK=a("strong"),CDe=o("funnel"),wDe=o(" \u2014 "),lx=a("a"),ADe=o("FunnelConfig"),yDe=o(" (Funnel Transformer model)"),LDe=l(),Mm=a("li"),sK=a("strong"),xDe=o("glpn"),kDe=o(" \u2014 "),ix=a("a"),SDe=o("GLPNConfig"),RDe=o(" (GLPN model)"),BDe=l(),Em=a("li"),lK=a("strong"),PDe=o("gpt2"),$De=o(" \u2014 "),dx=a("a"),IDe=o("GPT2Config"),qDe=o(" (OpenAI GPT-2 model)"),NDe=l(),Cm=a("li"),iK=a("strong"),jDe=o("gpt_neo"),DDe=o(" \u2014 "),cx=a("a"),GDe=o("GPTNeoConfig"),ODe=o(" (GPT Neo model)"),VDe=l(),wm=a("li"),dK=a("strong"),XDe=o("gptj"),zDe=o(" \u2014 "),fx=a("a"),QDe=o("GPTJConfig"),WDe=o(" (GPT-J model)"),HDe=l(),Am=a("li"),cK=a("strong"),UDe=o("hubert"),JDe=o(" \u2014 "),mx=a("a"),YDe=o("HubertConfig"),KDe=o(" (Hubert model)"),ZDe=l(),ym=a("li"),fK=a("strong"),eGe=o("ibert"),oGe=o(" \u2014 "),gx=a("a"),rGe=o("IBertConfig"),tGe=o(" (I-BERT model)"),aGe=l(),Lm=a("li"),mK=a("strong"),nGe=o("imagegpt"),sGe=o(" \u2014 "),hx=a("a"),lGe=o("ImageGPTConfig"),iGe=o(" (ImageGPT model)"),dGe=l(),xm=a("li"),gK=a("strong"),cGe=o("layoutlm"),fGe=o(" \u2014 "),px=a("a"),mGe=o("LayoutLMConfig"),gGe=o(" (LayoutLM model)"),hGe=l(),km=a("li"),hK=a("strong"),pGe=o("layoutlmv2"),_Ge=o(" \u2014 "),_x=a("a"),uGe=o("LayoutLMv2Config"),bGe=o(" (LayoutLMv2 model)"),FGe=l(),Sm=a("li"),pK=a("strong"),vGe=o("led"),TGe=o(" \u2014 "),ux=a("a"),MGe=o("LEDConfig"),EGe=o(" (LED model)"),CGe=l(),Rm=a("li"),_K=a("strong"),wGe=o("longformer"),AGe=o(" \u2014 "),bx=a("a"),yGe=o("LongformerConfig"),LGe=o(" (Longformer model)"),xGe=l(),Bm=a("li"),uK=a("strong"),kGe=o("longt5"),SGe=o(" \u2014 "),Fx=a("a"),RGe=o("LongT5Config"),BGe=o(" (LongT5 model)"),PGe=l(),Pm=a("li"),bK=a("strong"),$Ge=o("luke"),IGe=o(" \u2014 "),vx=a("a"),qGe=o("LukeConfig"),NGe=o(" (LUKE model)"),jGe=l(),$m=a("li"),FK=a("strong"),DGe=o("lxmert"),GGe=o(" \u2014 "),Tx=a("a"),OGe=o("LxmertConfig"),VGe=o(" (LXMERT model)"),XGe=l(),Im=a("li"),vK=a("strong"),zGe=o("m2m_100"),QGe=o(" \u2014 "),Mx=a("a"),WGe=o("M2M100Config"),HGe=o(" (M2M100 model)"),UGe=l(),qm=a("li"),TK=a("strong"),JGe=o("marian"),YGe=o(" \u2014 "),Ex=a("a"),KGe=o("MarianConfig"),ZGe=o(" (Marian model)"),eOe=l(),Nm=a("li"),MK=a("strong"),oOe=o("maskformer"),rOe=o(" \u2014 "),Cx=a("a"),tOe=o("MaskFormerConfig"),aOe=o(" (MaskFormer model)"),nOe=l(),jm=a("li"),EK=a("strong"),sOe=o("mbart"),lOe=o(" \u2014 "),wx=a("a"),iOe=o("MBartConfig"),dOe=o(" (mBART model)"),cOe=l(),Dm=a("li"),CK=a("strong"),fOe=o("megatron-bert"),mOe=o(" \u2014 "),Ax=a("a"),gOe=o("MegatronBertConfig"),hOe=o(" (MegatronBert model)"),pOe=l(),Gm=a("li"),wK=a("strong"),_Oe=o("mobilebert"),uOe=o(" \u2014 "),yx=a("a"),bOe=o("MobileBertConfig"),FOe=o(" (MobileBERT model)"),vOe=l(),Om=a("li"),AK=a("strong"),TOe=o("mpnet"),MOe=o(" \u2014 "),Lx=a("a"),EOe=o("MPNetConfig"),COe=o(" (MPNet model)"),wOe=l(),Vm=a("li"),yK=a("strong"),AOe=o("mt5"),yOe=o(" \u2014 "),xx=a("a"),LOe=o("MT5Config"),xOe=o(" (mT5 model)"),kOe=l(),Xm=a("li"),LK=a("strong"),SOe=o("nystromformer"),ROe=o(" \u2014 "),kx=a("a"),BOe=o("NystromformerConfig"),POe=o(" (Nystromformer model)"),$Oe=l(),zm=a("li"),xK=a("strong"),IOe=o("openai-gpt"),qOe=o(" \u2014 "),Sx=a("a"),NOe=o("OpenAIGPTConfig"),jOe=o(" (OpenAI GPT model)"),DOe=l(),Qm=a("li"),kK=a("strong"),GOe=o("pegasus"),OOe=o(" \u2014 "),Rx=a("a"),VOe=o("PegasusConfig"),XOe=o(" (Pegasus model)"),zOe=l(),Wm=a("li"),SK=a("strong"),QOe=o("perceiver"),WOe=o(" \u2014 "),Bx=a("a"),HOe=o("PerceiverConfig"),UOe=o(" (Perceiver model)"),JOe=l(),Hm=a("li"),RK=a("strong"),YOe=o("plbart"),KOe=o(" \u2014 "),Px=a("a"),ZOe=o("PLBartConfig"),eVe=o(" (PLBart model)"),oVe=l(),Um=a("li"),BK=a("strong"),rVe=o("poolformer"),tVe=o(" \u2014 "),$x=a("a"),aVe=o("PoolFormerConfig"),nVe=o(" (PoolFormer model)"),sVe=l(),Jm=a("li"),PK=a("strong"),lVe=o("prophetnet"),iVe=o(" \u2014 "),Ix=a("a"),dVe=o("ProphetNetConfig"),cVe=o(" (ProphetNet model)"),fVe=l(),Ym=a("li"),$K=a("strong"),mVe=o("qdqbert"),gVe=o(" \u2014 "),qx=a("a"),hVe=o("QDQBertConfig"),pVe=o(" (QDQBert model)"),_Ve=l(),Km=a("li"),IK=a("strong"),uVe=o("rag"),bVe=o(" \u2014 "),Nx=a("a"),FVe=o("RagConfig"),vVe=o(" (RAG model)"),TVe=l(),Zm=a("li"),qK=a("strong"),MVe=o("realm"),EVe=o(" \u2014 "),jx=a("a"),CVe=o("RealmConfig"),wVe=o(" (Realm model)"),AVe=l(),eg=a("li"),NK=a("strong"),yVe=o("reformer"),LVe=o(" \u2014 "),Dx=a("a"),xVe=o("ReformerConfig"),kVe=o(" (Reformer model)"),SVe=l(),og=a("li"),jK=a("strong"),RVe=o("regnet"),BVe=o(" \u2014 "),Gx=a("a"),PVe=o("RegNetConfig"),$Ve=o(" (RegNet model)"),IVe=l(),rg=a("li"),DK=a("strong"),qVe=o("rembert"),NVe=o(" \u2014 "),Ox=a("a"),jVe=o("RemBertConfig"),DVe=o(" (RemBERT model)"),GVe=l(),tg=a("li"),GK=a("strong"),OVe=o("resnet"),VVe=o(" \u2014 "),Vx=a("a"),XVe=o("ResNetConfig"),zVe=o(" (ResNet model)"),QVe=l(),ag=a("li"),OK=a("strong"),WVe=o("retribert"),HVe=o(" \u2014 "),Xx=a("a"),UVe=o("RetriBertConfig"),JVe=o(" (RetriBERT model)"),YVe=l(),ng=a("li"),VK=a("strong"),KVe=o("roberta"),ZVe=o(" \u2014 "),zx=a("a"),eXe=o("RobertaConfig"),oXe=o(" (RoBERTa model)"),rXe=l(),sg=a("li"),XK=a("strong"),tXe=o("roformer"),aXe=o(" \u2014 "),Qx=a("a"),nXe=o("RoFormerConfig"),sXe=o(" (RoFormer model)"),lXe=l(),lg=a("li"),zK=a("strong"),iXe=o("segformer"),dXe=o(" \u2014 "),Wx=a("a"),cXe=o("SegformerConfig"),fXe=o(" (SegFormer model)"),mXe=l(),ig=a("li"),QK=a("strong"),gXe=o("sew"),hXe=o(" \u2014 "),Hx=a("a"),pXe=o("SEWConfig"),_Xe=o(" (SEW model)"),uXe=l(),dg=a("li"),WK=a("strong"),bXe=o("sew-d"),FXe=o(" \u2014 "),Ux=a("a"),vXe=o("SEWDConfig"),TXe=o(" (SEW-D model)"),MXe=l(),cg=a("li"),HK=a("strong"),EXe=o("speech-encoder-decoder"),CXe=o(" \u2014 "),Jx=a("a"),wXe=o("SpeechEncoderDecoderConfig"),AXe=o(" (Speech Encoder decoder model)"),yXe=l(),fg=a("li"),UK=a("strong"),LXe=o("speech_to_text"),xXe=o(" \u2014 "),Yx=a("a"),kXe=o("Speech2TextConfig"),SXe=o(" (Speech2Text model)"),RXe=l(),mg=a("li"),JK=a("strong"),BXe=o("speech_to_text_2"),PXe=o(" \u2014 "),Kx=a("a"),$Xe=o("Speech2Text2Config"),IXe=o(" (Speech2Text2 model)"),qXe=l(),gg=a("li"),YK=a("strong"),NXe=o("splinter"),jXe=o(" \u2014 "),Zx=a("a"),DXe=o("SplinterConfig"),GXe=o(" (Splinter model)"),OXe=l(),hg=a("li"),KK=a("strong"),VXe=o("squeezebert"),XXe=o(" \u2014 "),ek=a("a"),zXe=o("SqueezeBertConfig"),QXe=o(" (SqueezeBERT model)"),WXe=l(),pg=a("li"),ZK=a("strong"),HXe=o("swin"),UXe=o(" \u2014 "),ok=a("a"),JXe=o("SwinConfig"),YXe=o(" (Swin model)"),KXe=l(),_g=a("li"),eZ=a("strong"),ZXe=o("t5"),eze=o(" \u2014 "),rk=a("a"),oze=o("T5Config"),rze=o(" (T5 model)"),tze=l(),ug=a("li"),oZ=a("strong"),aze=o("tapas"),nze=o(" \u2014 "),tk=a("a"),sze=o("TapasConfig"),lze=o(" (TAPAS model)"),ize=l(),bg=a("li"),rZ=a("strong"),dze=o("tapex"),cze=o(" \u2014 "),ak=a("a"),fze=o("BartConfig"),mze=o(" (TAPEX model)"),gze=l(),Fg=a("li"),tZ=a("strong"),hze=o("transfo-xl"),pze=o(" \u2014 "),nk=a("a"),_ze=o("TransfoXLConfig"),uze=o(" (Transformer-XL model)"),bze=l(),vg=a("li"),aZ=a("strong"),Fze=o("trocr"),vze=o(" \u2014 "),sk=a("a"),Tze=o("TrOCRConfig"),Mze=o(" (TrOCR model)"),Eze=l(),Tg=a("li"),nZ=a("strong"),Cze=o("unispeech"),wze=o(" \u2014 "),lk=a("a"),Aze=o("UniSpeechConfig"),yze=o(" (UniSpeech model)"),Lze=l(),Mg=a("li"),sZ=a("strong"),xze=o("unispeech-sat"),kze=o(" \u2014 "),ik=a("a"),Sze=o("UniSpeechSatConfig"),Rze=o(" (UniSpeechSat model)"),Bze=l(),Eg=a("li"),lZ=a("strong"),Pze=o("van"),$ze=o(" \u2014 "),dk=a("a"),Ize=o("VanConfig"),qze=o(" (VAN model)"),Nze=l(),Cg=a("li"),iZ=a("strong"),jze=o("vilt"),Dze=o(" \u2014 "),ck=a("a"),Gze=o("ViltConfig"),Oze=o(" (ViLT model)"),Vze=l(),wg=a("li"),dZ=a("strong"),Xze=o("vision-encoder-decoder"),zze=o(" \u2014 "),fk=a("a"),Qze=o("VisionEncoderDecoderConfig"),Wze=o(" (Vision Encoder decoder model)"),Hze=l(),Ag=a("li"),cZ=a("strong"),Uze=o("vision-text-dual-encoder"),Jze=o(" \u2014 "),mk=a("a"),Yze=o("VisionTextDualEncoderConfig"),Kze=o(" (VisionTextDualEncoder model)"),Zze=l(),yg=a("li"),fZ=a("strong"),eQe=o("visual_bert"),oQe=o(" \u2014 "),gk=a("a"),rQe=o("VisualBertConfig"),tQe=o(" (VisualBert model)"),aQe=l(),Lg=a("li"),mZ=a("strong"),nQe=o("vit"),sQe=o(" \u2014 "),hk=a("a"),lQe=o("ViTConfig"),iQe=o(" (ViT model)"),dQe=l(),xg=a("li"),gZ=a("strong"),cQe=o("vit_mae"),fQe=o(" \u2014 "),pk=a("a"),mQe=o("ViTMAEConfig"),gQe=o(" (ViTMAE model)"),hQe=l(),kg=a("li"),hZ=a("strong"),pQe=o("wav2vec2"),_Qe=o(" \u2014 "),_k=a("a"),uQe=o("Wav2Vec2Config"),bQe=o(" (Wav2Vec2 model)"),FQe=l(),Sg=a("li"),pZ=a("strong"),vQe=o("wavlm"),TQe=o(" \u2014 "),uk=a("a"),MQe=o("WavLMConfig"),EQe=o(" (WavLM model)"),CQe=l(),Rg=a("li"),_Z=a("strong"),wQe=o("xglm"),AQe=o(" \u2014 "),bk=a("a"),yQe=o("XGLMConfig"),LQe=o(" (XGLM model)"),xQe=l(),Bg=a("li"),uZ=a("strong"),kQe=o("xlm"),SQe=o(" \u2014 "),Fk=a("a"),RQe=o("XLMConfig"),BQe=o(" (XLM model)"),PQe=l(),Pg=a("li"),bZ=a("strong"),$Qe=o("xlm-prophetnet"),IQe=o(" \u2014 "),vk=a("a"),qQe=o("XLMProphetNetConfig"),NQe=o(" (XLMProphetNet model)"),jQe=l(),$g=a("li"),FZ=a("strong"),DQe=o("xlm-roberta"),GQe=o(" \u2014 "),Tk=a("a"),OQe=o("XLMRobertaConfig"),VQe=o(" (XLM-RoBERTa model)"),XQe=l(),Ig=a("li"),vZ=a("strong"),zQe=o("xlm-roberta-xl"),QQe=o(" \u2014 "),Mk=a("a"),WQe=o("XLMRobertaXLConfig"),HQe=o(" (XLM-RoBERTa-XL model)"),UQe=l(),qg=a("li"),TZ=a("strong"),JQe=o("xlnet"),YQe=o(" \u2014 "),Ek=a("a"),KQe=o("XLNetConfig"),ZQe=o(" (XLNet model)"),eWe=l(),Ng=a("li"),MZ=a("strong"),oWe=o("yoso"),rWe=o(" \u2014 "),Ck=a("a"),tWe=o("YosoConfig"),aWe=o(" (YOSO model)"),nWe=l(),EZ=a("p"),sWe=o("Examples:"),lWe=l(),f(O5.$$.fragment),iWe=l(),jg=a("div"),f(V5.$$.fragment),dWe=l(),CZ=a("p"),cWe=o("Register a new configuration for this class."),oBe=l(),Wi=a("h2"),Dg=a("a"),wZ=a("span"),f(X5.$$.fragment),fWe=l(),AZ=a("span"),mWe=o("AutoTokenizer"),rBe=l(),Wo=a("div"),f(z5.$$.fragment),gWe=l(),Q5=a("p"),hWe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),wk=a("a"),pWe=o("AutoTokenizer.from_pretrained()"),_We=o(" class method."),uWe=l(),W5=a("p"),bWe=o("This class cannot be instantiated directly using "),yZ=a("code"),FWe=o("__init__()"),vWe=o(" (throws an error)."),TWe=l(),go=a("div"),f(H5.$$.fragment),MWe=l(),LZ=a("p"),EWe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),CWe=l(),Oa=a("p"),wWe=o("The tokenizer class to instantiate is selected based on the "),xZ=a("code"),AWe=o("model_type"),yWe=o(` property of the config object (either
passed as an argument or loaded from `),kZ=a("code"),LWe=o("pretrained_model_name_or_path"),xWe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SZ=a("code"),kWe=o("pretrained_model_name_or_path"),SWe=o(":"),RWe=l(),E=a("ul"),Qn=a("li"),RZ=a("strong"),BWe=o("albert"),PWe=o(" \u2014 "),Ak=a("a"),$We=o("AlbertTokenizer"),IWe=o(" or "),yk=a("a"),qWe=o("AlbertTokenizerFast"),NWe=o(" (ALBERT model)"),jWe=l(),Wn=a("li"),BZ=a("strong"),DWe=o("bart"),GWe=o(" \u2014 "),Lk=a("a"),OWe=o("BartTokenizer"),VWe=o(" or "),xk=a("a"),XWe=o("BartTokenizerFast"),zWe=o(" (BART model)"),QWe=l(),Hn=a("li"),PZ=a("strong"),WWe=o("barthez"),HWe=o(" \u2014 "),kk=a("a"),UWe=o("BarthezTokenizer"),JWe=o(" or "),Sk=a("a"),YWe=o("BarthezTokenizerFast"),KWe=o(" (BARThez model)"),ZWe=l(),Gg=a("li"),$Z=a("strong"),eHe=o("bartpho"),oHe=o(" \u2014 "),Rk=a("a"),rHe=o("BartphoTokenizer"),tHe=o(" (BARTpho model)"),aHe=l(),Un=a("li"),IZ=a("strong"),nHe=o("bert"),sHe=o(" \u2014 "),Bk=a("a"),lHe=o("BertTokenizer"),iHe=o(" or "),Pk=a("a"),dHe=o("BertTokenizerFast"),cHe=o(" (BERT model)"),fHe=l(),Og=a("li"),qZ=a("strong"),mHe=o("bert-generation"),gHe=o(" \u2014 "),$k=a("a"),hHe=o("BertGenerationTokenizer"),pHe=o(" (Bert Generation model)"),_He=l(),Vg=a("li"),NZ=a("strong"),uHe=o("bert-japanese"),bHe=o(" \u2014 "),Ik=a("a"),FHe=o("BertJapaneseTokenizer"),vHe=o(" (BertJapanese model)"),THe=l(),Xg=a("li"),jZ=a("strong"),MHe=o("bertweet"),EHe=o(" \u2014 "),qk=a("a"),CHe=o("BertweetTokenizer"),wHe=o(" (Bertweet model)"),AHe=l(),Jn=a("li"),DZ=a("strong"),yHe=o("big_bird"),LHe=o(" \u2014 "),Nk=a("a"),xHe=o("BigBirdTokenizer"),kHe=o(" or "),jk=a("a"),SHe=o("BigBirdTokenizerFast"),RHe=o(" (BigBird model)"),BHe=l(),Yn=a("li"),GZ=a("strong"),PHe=o("bigbird_pegasus"),$He=o(" \u2014 "),Dk=a("a"),IHe=o("PegasusTokenizer"),qHe=o(" or "),Gk=a("a"),NHe=o("PegasusTokenizerFast"),jHe=o(" (BigBirdPegasus model)"),DHe=l(),Kn=a("li"),OZ=a("strong"),GHe=o("blenderbot"),OHe=o(" \u2014 "),Ok=a("a"),VHe=o("BlenderbotTokenizer"),XHe=o(" or "),Vk=a("a"),zHe=o("BlenderbotTokenizerFast"),QHe=o(" (Blenderbot model)"),WHe=l(),zg=a("li"),VZ=a("strong"),HHe=o("blenderbot-small"),UHe=o(" \u2014 "),Xk=a("a"),JHe=o("BlenderbotSmallTokenizer"),YHe=o(" (BlenderbotSmall model)"),KHe=l(),Qg=a("li"),XZ=a("strong"),ZHe=o("byt5"),eUe=o(" \u2014 "),zk=a("a"),oUe=o("ByT5Tokenizer"),rUe=o(" (ByT5 model)"),tUe=l(),Zn=a("li"),zZ=a("strong"),aUe=o("camembert"),nUe=o(" \u2014 "),Qk=a("a"),sUe=o("CamembertTokenizer"),lUe=o(" or "),Wk=a("a"),iUe=o("CamembertTokenizerFast"),dUe=o(" (CamemBERT model)"),cUe=l(),Wg=a("li"),QZ=a("strong"),fUe=o("canine"),mUe=o(" \u2014 "),Hk=a("a"),gUe=o("CanineTokenizer"),hUe=o(" (Canine model)"),pUe=l(),es=a("li"),WZ=a("strong"),_Ue=o("clip"),uUe=o(" \u2014 "),Uk=a("a"),bUe=o("CLIPTokenizer"),FUe=o(" or "),Jk=a("a"),vUe=o("CLIPTokenizerFast"),TUe=o(" (CLIP model)"),MUe=l(),os=a("li"),HZ=a("strong"),EUe=o("convbert"),CUe=o(" \u2014 "),Yk=a("a"),wUe=o("ConvBertTokenizer"),AUe=o(" or "),Kk=a("a"),yUe=o("ConvBertTokenizerFast"),LUe=o(" (ConvBERT model)"),xUe=l(),rs=a("li"),UZ=a("strong"),kUe=o("cpm"),SUe=o(" \u2014 "),Zk=a("a"),RUe=o("CpmTokenizer"),BUe=o(" or "),JZ=a("code"),PUe=o("CpmTokenizerFast"),$Ue=o(" (CPM model)"),IUe=l(),Hg=a("li"),YZ=a("strong"),qUe=o("ctrl"),NUe=o(" \u2014 "),eS=a("a"),jUe=o("CTRLTokenizer"),DUe=o(" (CTRL model)"),GUe=l(),ts=a("li"),KZ=a("strong"),OUe=o("deberta"),VUe=o(" \u2014 "),oS=a("a"),XUe=o("DebertaTokenizer"),zUe=o(" or "),rS=a("a"),QUe=o("DebertaTokenizerFast"),WUe=o(" (DeBERTa model)"),HUe=l(),Ug=a("li"),ZZ=a("strong"),UUe=o("deberta-v2"),JUe=o(" \u2014 "),tS=a("a"),YUe=o("DebertaV2Tokenizer"),KUe=o(" (DeBERTa-v2 model)"),ZUe=l(),as=a("li"),eee=a("strong"),eJe=o("distilbert"),oJe=o(" \u2014 "),aS=a("a"),rJe=o("DistilBertTokenizer"),tJe=o(" or "),nS=a("a"),aJe=o("DistilBertTokenizerFast"),nJe=o(" (DistilBERT model)"),sJe=l(),ns=a("li"),oee=a("strong"),lJe=o("dpr"),iJe=o(" \u2014 "),sS=a("a"),dJe=o("DPRQuestionEncoderTokenizer"),cJe=o(" or "),lS=a("a"),fJe=o("DPRQuestionEncoderTokenizerFast"),mJe=o(" (DPR model)"),gJe=l(),ss=a("li"),ree=a("strong"),hJe=o("electra"),pJe=o(" \u2014 "),iS=a("a"),_Je=o("ElectraTokenizer"),uJe=o(" or "),dS=a("a"),bJe=o("ElectraTokenizerFast"),FJe=o(" (ELECTRA model)"),vJe=l(),Jg=a("li"),tee=a("strong"),TJe=o("flaubert"),MJe=o(" \u2014 "),cS=a("a"),EJe=o("FlaubertTokenizer"),CJe=o(" (FlauBERT model)"),wJe=l(),ls=a("li"),aee=a("strong"),AJe=o("fnet"),yJe=o(" \u2014 "),fS=a("a"),LJe=o("FNetTokenizer"),xJe=o(" or "),mS=a("a"),kJe=o("FNetTokenizerFast"),SJe=o(" (FNet model)"),RJe=l(),Yg=a("li"),nee=a("strong"),BJe=o("fsmt"),PJe=o(" \u2014 "),gS=a("a"),$Je=o("FSMTTokenizer"),IJe=o(" (FairSeq Machine-Translation model)"),qJe=l(),is=a("li"),see=a("strong"),NJe=o("funnel"),jJe=o(" \u2014 "),hS=a("a"),DJe=o("FunnelTokenizer"),GJe=o(" or "),pS=a("a"),OJe=o("FunnelTokenizerFast"),VJe=o(" (Funnel Transformer model)"),XJe=l(),ds=a("li"),lee=a("strong"),zJe=o("gpt2"),QJe=o(" \u2014 "),_S=a("a"),WJe=o("GPT2Tokenizer"),HJe=o(" or "),uS=a("a"),UJe=o("GPT2TokenizerFast"),JJe=o(" (OpenAI GPT-2 model)"),YJe=l(),cs=a("li"),iee=a("strong"),KJe=o("gpt_neo"),ZJe=o(" \u2014 "),bS=a("a"),eYe=o("GPT2Tokenizer"),oYe=o(" or "),FS=a("a"),rYe=o("GPT2TokenizerFast"),tYe=o(" (GPT Neo model)"),aYe=l(),fs=a("li"),dee=a("strong"),nYe=o("herbert"),sYe=o(" \u2014 "),vS=a("a"),lYe=o("HerbertTokenizer"),iYe=o(" or "),TS=a("a"),dYe=o("HerbertTokenizerFast"),cYe=o(" (HerBERT model)"),fYe=l(),Kg=a("li"),cee=a("strong"),mYe=o("hubert"),gYe=o(" \u2014 "),MS=a("a"),hYe=o("Wav2Vec2CTCTokenizer"),pYe=o(" (Hubert model)"),_Ye=l(),ms=a("li"),fee=a("strong"),uYe=o("ibert"),bYe=o(" \u2014 "),ES=a("a"),FYe=o("RobertaTokenizer"),vYe=o(" or "),CS=a("a"),TYe=o("RobertaTokenizerFast"),MYe=o(" (I-BERT model)"),EYe=l(),gs=a("li"),mee=a("strong"),CYe=o("layoutlm"),wYe=o(" \u2014 "),wS=a("a"),AYe=o("LayoutLMTokenizer"),yYe=o(" or "),AS=a("a"),LYe=o("LayoutLMTokenizerFast"),xYe=o(" (LayoutLM model)"),kYe=l(),hs=a("li"),gee=a("strong"),SYe=o("layoutlmv2"),RYe=o(" \u2014 "),yS=a("a"),BYe=o("LayoutLMv2Tokenizer"),PYe=o(" or "),LS=a("a"),$Ye=o("LayoutLMv2TokenizerFast"),IYe=o(" (LayoutLMv2 model)"),qYe=l(),ps=a("li"),hee=a("strong"),NYe=o("layoutxlm"),jYe=o(" \u2014 "),xS=a("a"),DYe=o("LayoutXLMTokenizer"),GYe=o(" or "),kS=a("a"),OYe=o("LayoutXLMTokenizerFast"),VYe=o(" (LayoutXLM model)"),XYe=l(),_s=a("li"),pee=a("strong"),zYe=o("led"),QYe=o(" \u2014 "),SS=a("a"),WYe=o("LEDTokenizer"),HYe=o(" or "),RS=a("a"),UYe=o("LEDTokenizerFast"),JYe=o(" (LED model)"),YYe=l(),us=a("li"),_ee=a("strong"),KYe=o("longformer"),ZYe=o(" \u2014 "),BS=a("a"),eKe=o("LongformerTokenizer"),oKe=o(" or "),PS=a("a"),rKe=o("LongformerTokenizerFast"),tKe=o(" (Longformer model)"),aKe=l(),bs=a("li"),uee=a("strong"),nKe=o("longt5"),sKe=o(" \u2014 "),$S=a("a"),lKe=o("T5Tokenizer"),iKe=o(" or "),IS=a("a"),dKe=o("T5TokenizerFast"),cKe=o(" (LongT5 model)"),fKe=l(),Zg=a("li"),bee=a("strong"),mKe=o("luke"),gKe=o(" \u2014 "),qS=a("a"),hKe=o("LukeTokenizer"),pKe=o(" (LUKE model)"),_Ke=l(),Fs=a("li"),Fee=a("strong"),uKe=o("lxmert"),bKe=o(" \u2014 "),NS=a("a"),FKe=o("LxmertTokenizer"),vKe=o(" or "),jS=a("a"),TKe=o("LxmertTokenizerFast"),MKe=o(" (LXMERT model)"),EKe=l(),eh=a("li"),vee=a("strong"),CKe=o("m2m_100"),wKe=o(" \u2014 "),DS=a("a"),AKe=o("M2M100Tokenizer"),yKe=o(" (M2M100 model)"),LKe=l(),oh=a("li"),Tee=a("strong"),xKe=o("marian"),kKe=o(" \u2014 "),GS=a("a"),SKe=o("MarianTokenizer"),RKe=o(" (Marian model)"),BKe=l(),vs=a("li"),Mee=a("strong"),PKe=o("mbart"),$Ke=o(" \u2014 "),OS=a("a"),IKe=o("MBartTokenizer"),qKe=o(" or "),VS=a("a"),NKe=o("MBartTokenizerFast"),jKe=o(" (mBART model)"),DKe=l(),Ts=a("li"),Eee=a("strong"),GKe=o("mbart50"),OKe=o(" \u2014 "),XS=a("a"),VKe=o("MBart50Tokenizer"),XKe=o(" or "),zS=a("a"),zKe=o("MBart50TokenizerFast"),QKe=o(" (mBART-50 model)"),WKe=l(),rh=a("li"),Cee=a("strong"),HKe=o("mluke"),UKe=o(" \u2014 "),QS=a("a"),JKe=o("MLukeTokenizer"),YKe=o(" (mLUKE model)"),KKe=l(),Ms=a("li"),wee=a("strong"),ZKe=o("mobilebert"),eZe=o(" \u2014 "),WS=a("a"),oZe=o("MobileBertTokenizer"),rZe=o(" or "),HS=a("a"),tZe=o("MobileBertTokenizerFast"),aZe=o(" (MobileBERT model)"),nZe=l(),Es=a("li"),Aee=a("strong"),sZe=o("mpnet"),lZe=o(" \u2014 "),US=a("a"),iZe=o("MPNetTokenizer"),dZe=o(" or "),JS=a("a"),cZe=o("MPNetTokenizerFast"),fZe=o(" (MPNet model)"),mZe=l(),Cs=a("li"),yee=a("strong"),gZe=o("mt5"),hZe=o(" \u2014 "),YS=a("a"),pZe=o("MT5Tokenizer"),_Ze=o(" or "),KS=a("a"),uZe=o("MT5TokenizerFast"),bZe=o(" (mT5 model)"),FZe=l(),ws=a("li"),Lee=a("strong"),vZe=o("openai-gpt"),TZe=o(" \u2014 "),ZS=a("a"),MZe=o("OpenAIGPTTokenizer"),EZe=o(" or "),eR=a("a"),CZe=o("OpenAIGPTTokenizerFast"),wZe=o(" (OpenAI GPT model)"),AZe=l(),As=a("li"),xee=a("strong"),yZe=o("pegasus"),LZe=o(" \u2014 "),oR=a("a"),xZe=o("PegasusTokenizer"),kZe=o(" or "),rR=a("a"),SZe=o("PegasusTokenizerFast"),RZe=o(" (Pegasus model)"),BZe=l(),th=a("li"),kee=a("strong"),PZe=o("perceiver"),$Ze=o(" \u2014 "),tR=a("a"),IZe=o("PerceiverTokenizer"),qZe=o(" (Perceiver model)"),NZe=l(),ah=a("li"),See=a("strong"),jZe=o("phobert"),DZe=o(" \u2014 "),aR=a("a"),GZe=o("PhobertTokenizer"),OZe=o(" (PhoBERT model)"),VZe=l(),nh=a("li"),Ree=a("strong"),XZe=o("plbart"),zZe=o(" \u2014 "),nR=a("a"),QZe=o("PLBartTokenizer"),WZe=o(" (PLBart model)"),HZe=l(),sh=a("li"),Bee=a("strong"),UZe=o("prophetnet"),JZe=o(" \u2014 "),sR=a("a"),YZe=o("ProphetNetTokenizer"),KZe=o(" (ProphetNet model)"),ZZe=l(),ys=a("li"),Pee=a("strong"),eeo=o("qdqbert"),oeo=o(" \u2014 "),lR=a("a"),reo=o("BertTokenizer"),teo=o(" or "),iR=a("a"),aeo=o("BertTokenizerFast"),neo=o(" (QDQBert model)"),seo=l(),lh=a("li"),$ee=a("strong"),leo=o("rag"),ieo=o(" \u2014 "),dR=a("a"),deo=o("RagTokenizer"),ceo=o(" (RAG model)"),feo=l(),Ls=a("li"),Iee=a("strong"),meo=o("realm"),geo=o(" \u2014 "),cR=a("a"),heo=o("RealmTokenizer"),peo=o(" or "),fR=a("a"),_eo=o("RealmTokenizerFast"),ueo=o(" (Realm model)"),beo=l(),xs=a("li"),qee=a("strong"),Feo=o("reformer"),veo=o(" \u2014 "),mR=a("a"),Teo=o("ReformerTokenizer"),Meo=o(" or "),gR=a("a"),Eeo=o("ReformerTokenizerFast"),Ceo=o(" (Reformer model)"),weo=l(),ks=a("li"),Nee=a("strong"),Aeo=o("rembert"),yeo=o(" \u2014 "),hR=a("a"),Leo=o("RemBertTokenizer"),xeo=o(" or "),pR=a("a"),keo=o("RemBertTokenizerFast"),Seo=o(" (RemBERT model)"),Reo=l(),Ss=a("li"),jee=a("strong"),Beo=o("retribert"),Peo=o(" \u2014 "),_R=a("a"),$eo=o("RetriBertTokenizer"),Ieo=o(" or "),uR=a("a"),qeo=o("RetriBertTokenizerFast"),Neo=o(" (RetriBERT model)"),jeo=l(),Rs=a("li"),Dee=a("strong"),Deo=o("roberta"),Geo=o(" \u2014 "),bR=a("a"),Oeo=o("RobertaTokenizer"),Veo=o(" or "),FR=a("a"),Xeo=o("RobertaTokenizerFast"),zeo=o(" (RoBERTa model)"),Qeo=l(),Bs=a("li"),Gee=a("strong"),Weo=o("roformer"),Heo=o(" \u2014 "),vR=a("a"),Ueo=o("RoFormerTokenizer"),Jeo=o(" or "),TR=a("a"),Yeo=o("RoFormerTokenizerFast"),Keo=o(" (RoFormer model)"),Zeo=l(),ih=a("li"),Oee=a("strong"),eoo=o("speech_to_text"),ooo=o(" \u2014 "),MR=a("a"),roo=o("Speech2TextTokenizer"),too=o(" (Speech2Text model)"),aoo=l(),dh=a("li"),Vee=a("strong"),noo=o("speech_to_text_2"),soo=o(" \u2014 "),ER=a("a"),loo=o("Speech2Text2Tokenizer"),ioo=o(" (Speech2Text2 model)"),doo=l(),Ps=a("li"),Xee=a("strong"),coo=o("splinter"),foo=o(" \u2014 "),CR=a("a"),moo=o("SplinterTokenizer"),goo=o(" or "),wR=a("a"),hoo=o("SplinterTokenizerFast"),poo=o(" (Splinter model)"),_oo=l(),$s=a("li"),zee=a("strong"),uoo=o("squeezebert"),boo=o(" \u2014 "),AR=a("a"),Foo=o("SqueezeBertTokenizer"),voo=o(" or "),yR=a("a"),Too=o("SqueezeBertTokenizerFast"),Moo=o(" (SqueezeBERT model)"),Eoo=l(),Is=a("li"),Qee=a("strong"),Coo=o("t5"),woo=o(" \u2014 "),LR=a("a"),Aoo=o("T5Tokenizer"),yoo=o(" or "),xR=a("a"),Loo=o("T5TokenizerFast"),xoo=o(" (T5 model)"),koo=l(),ch=a("li"),Wee=a("strong"),Soo=o("tapas"),Roo=o(" \u2014 "),kR=a("a"),Boo=o("TapasTokenizer"),Poo=o(" (TAPAS model)"),$oo=l(),fh=a("li"),Hee=a("strong"),Ioo=o("tapex"),qoo=o(" \u2014 "),SR=a("a"),Noo=o("TapexTokenizer"),joo=o(" (TAPEX model)"),Doo=l(),mh=a("li"),Uee=a("strong"),Goo=o("transfo-xl"),Ooo=o(" \u2014 "),RR=a("a"),Voo=o("TransfoXLTokenizer"),Xoo=o(" (Transformer-XL model)"),zoo=l(),gh=a("li"),Jee=a("strong"),Qoo=o("wav2vec2"),Woo=o(" \u2014 "),BR=a("a"),Hoo=o("Wav2Vec2CTCTokenizer"),Uoo=o(" (Wav2Vec2 model)"),Joo=l(),hh=a("li"),Yee=a("strong"),Yoo=o("wav2vec2_phoneme"),Koo=o(" \u2014 "),PR=a("a"),Zoo=o("Wav2Vec2PhonemeCTCTokenizer"),ero=o(" (Wav2Vec2Phoneme model)"),oro=l(),qs=a("li"),Kee=a("strong"),rro=o("xglm"),tro=o(" \u2014 "),$R=a("a"),aro=o("XGLMTokenizer"),nro=o(" or "),IR=a("a"),sro=o("XGLMTokenizerFast"),lro=o(" (XGLM model)"),iro=l(),ph=a("li"),Zee=a("strong"),dro=o("xlm"),cro=o(" \u2014 "),qR=a("a"),fro=o("XLMTokenizer"),mro=o(" (XLM model)"),gro=l(),_h=a("li"),eoe=a("strong"),hro=o("xlm-prophetnet"),pro=o(" \u2014 "),NR=a("a"),_ro=o("XLMProphetNetTokenizer"),uro=o(" (XLMProphetNet model)"),bro=l(),Ns=a("li"),ooe=a("strong"),Fro=o("xlm-roberta"),vro=o(" \u2014 "),jR=a("a"),Tro=o("XLMRobertaTokenizer"),Mro=o(" or "),DR=a("a"),Ero=o("XLMRobertaTokenizerFast"),Cro=o(" (XLM-RoBERTa model)"),wro=l(),js=a("li"),roe=a("strong"),Aro=o("xlnet"),yro=o(" \u2014 "),GR=a("a"),Lro=o("XLNetTokenizer"),xro=o(" or "),OR=a("a"),kro=o("XLNetTokenizerFast"),Sro=o(" (XLNet model)"),Rro=l(),toe=a("p"),Bro=o("Examples:"),Pro=l(),f(U5.$$.fragment),$ro=l(),uh=a("div"),f(J5.$$.fragment),Iro=l(),aoe=a("p"),qro=o("Register a new tokenizer in this mapping."),tBe=l(),Hi=a("h2"),bh=a("a"),noe=a("span"),f(Y5.$$.fragment),Nro=l(),soe=a("span"),jro=o("AutoFeatureExtractor"),aBe=l(),Ho=a("div"),f(K5.$$.fragment),Dro=l(),Z5=a("p"),Gro=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),VR=a("a"),Oro=o("AutoFeatureExtractor.from_pretrained()"),Vro=o(" class method."),Xro=l(),e3=a("p"),zro=o("This class cannot be instantiated directly using "),loe=a("code"),Qro=o("__init__()"),Wro=o(" (throws an error)."),Hro=l(),Ie=a("div"),f(o3.$$.fragment),Uro=l(),ioe=a("p"),Jro=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Yro=l(),Va=a("p"),Kro=o("The feature extractor class to instantiate is selected based on the "),doe=a("code"),Zro=o("model_type"),eto=o(` property of the config object
(either passed as an argument or loaded from `),coe=a("code"),oto=o("pretrained_model_name_or_path"),rto=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),foe=a("code"),tto=o("pretrained_model_name_or_path"),ato=o(":"),nto=l(),ee=a("ul"),Fh=a("li"),moe=a("strong"),sto=o("beit"),lto=o(" \u2014 "),XR=a("a"),ito=o("BeitFeatureExtractor"),dto=o(" (BEiT model)"),cto=l(),vh=a("li"),goe=a("strong"),fto=o("clip"),mto=o(" \u2014 "),zR=a("a"),gto=o("CLIPFeatureExtractor"),hto=o(" (CLIP model)"),pto=l(),Th=a("li"),hoe=a("strong"),_to=o("convnext"),uto=o(" \u2014 "),QR=a("a"),bto=o("ConvNextFeatureExtractor"),Fto=o(" (ConvNext model)"),vto=l(),Mh=a("li"),poe=a("strong"),Tto=o("deit"),Mto=o(" \u2014 "),WR=a("a"),Eto=o("DeiTFeatureExtractor"),Cto=o(" (DeiT model)"),wto=l(),Eh=a("li"),_oe=a("strong"),Ato=o("detr"),yto=o(" \u2014 "),HR=a("a"),Lto=o("DetrFeatureExtractor"),xto=o(" (DETR model)"),kto=l(),Ch=a("li"),uoe=a("strong"),Sto=o("hubert"),Rto=o(" \u2014 "),UR=a("a"),Bto=o("Wav2Vec2FeatureExtractor"),Pto=o(" (Hubert model)"),$to=l(),wh=a("li"),boe=a("strong"),Ito=o("layoutlmv2"),qto=o(" \u2014 "),JR=a("a"),Nto=o("LayoutLMv2FeatureExtractor"),jto=o(" (LayoutLMv2 model)"),Dto=l(),Ah=a("li"),Foe=a("strong"),Gto=o("maskformer"),Oto=o(" \u2014 "),YR=a("a"),Vto=o("MaskFormerFeatureExtractor"),Xto=o(" (MaskFormer model)"),zto=l(),yh=a("li"),voe=a("strong"),Qto=o("perceiver"),Wto=o(" \u2014 "),KR=a("a"),Hto=o("PerceiverFeatureExtractor"),Uto=o(" (Perceiver model)"),Jto=l(),Lh=a("li"),Toe=a("strong"),Yto=o("poolformer"),Kto=o(" \u2014 "),ZR=a("a"),Zto=o("PoolFormerFeatureExtractor"),eao=o(" (PoolFormer model)"),oao=l(),xh=a("li"),Moe=a("strong"),rao=o("regnet"),tao=o(" \u2014 "),eB=a("a"),aao=o("ConvNextFeatureExtractor"),nao=o(" (RegNet model)"),sao=l(),kh=a("li"),Eoe=a("strong"),lao=o("resnet"),iao=o(" \u2014 "),oB=a("a"),dao=o("ConvNextFeatureExtractor"),cao=o(" (ResNet model)"),fao=l(),Sh=a("li"),Coe=a("strong"),mao=o("segformer"),gao=o(" \u2014 "),rB=a("a"),hao=o("SegformerFeatureExtractor"),pao=o(" (SegFormer model)"),_ao=l(),Rh=a("li"),woe=a("strong"),uao=o("speech_to_text"),bao=o(" \u2014 "),tB=a("a"),Fao=o("Speech2TextFeatureExtractor"),vao=o(" (Speech2Text model)"),Tao=l(),Bh=a("li"),Aoe=a("strong"),Mao=o("swin"),Eao=o(" \u2014 "),aB=a("a"),Cao=o("ViTFeatureExtractor"),wao=o(" (Swin model)"),Aao=l(),Ph=a("li"),yoe=a("strong"),yao=o("van"),Lao=o(" \u2014 "),nB=a("a"),xao=o("ConvNextFeatureExtractor"),kao=o(" (VAN model)"),Sao=l(),$h=a("li"),Loe=a("strong"),Rao=o("vit"),Bao=o(" \u2014 "),sB=a("a"),Pao=o("ViTFeatureExtractor"),$ao=o(" (ViT model)"),Iao=l(),Ih=a("li"),xoe=a("strong"),qao=o("vit_mae"),Nao=o(" \u2014 "),lB=a("a"),jao=o("ViTFeatureExtractor"),Dao=o(" (ViTMAE model)"),Gao=l(),qh=a("li"),koe=a("strong"),Oao=o("wav2vec2"),Vao=o(" \u2014 "),iB=a("a"),Xao=o("Wav2Vec2FeatureExtractor"),zao=o(" (Wav2Vec2 model)"),Qao=l(),f(Nh.$$.fragment),Wao=l(),Soe=a("p"),Hao=o("Examples:"),Uao=l(),f(r3.$$.fragment),Jao=l(),jh=a("div"),f(t3.$$.fragment),Yao=l(),Roe=a("p"),Kao=o("Register a new feature extractor for this class."),nBe=l(),Ui=a("h2"),Dh=a("a"),Boe=a("span"),f(a3.$$.fragment),Zao=l(),Poe=a("span"),eno=o("AutoProcessor"),sBe=l(),Uo=a("div"),f(n3.$$.fragment),ono=l(),s3=a("p"),rno=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dB=a("a"),tno=o("AutoProcessor.from_pretrained()"),ano=o(" class method."),nno=l(),l3=a("p"),sno=o("This class cannot be instantiated directly using "),$oe=a("code"),lno=o("__init__()"),ino=o(" (throws an error)."),dno=l(),qe=a("div"),f(i3.$$.fragment),cno=l(),Ioe=a("p"),fno=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),mno=l(),Ji=a("p"),gno=o("The processor class to instantiate is selected based on the "),qoe=a("code"),hno=o("model_type"),pno=o(` property of the config object (either
passed as an argument or loaded from `),Noe=a("code"),_no=o("pretrained_model_name_or_path"),uno=o(" if possible):"),bno=l(),Se=a("ul"),Gh=a("li"),joe=a("strong"),Fno=o("clip"),vno=o(" \u2014 "),cB=a("a"),Tno=o("CLIPProcessor"),Mno=o(" (CLIP model)"),Eno=l(),Oh=a("li"),Doe=a("strong"),Cno=o("layoutlmv2"),wno=o(" \u2014 "),fB=a("a"),Ano=o("LayoutLMv2Processor"),yno=o(" (LayoutLMv2 model)"),Lno=l(),Vh=a("li"),Goe=a("strong"),xno=o("layoutxlm"),kno=o(" \u2014 "),mB=a("a"),Sno=o("LayoutXLMProcessor"),Rno=o(" (LayoutXLM model)"),Bno=l(),Xh=a("li"),Ooe=a("strong"),Pno=o("speech_to_text"),$no=o(" \u2014 "),gB=a("a"),Ino=o("Speech2TextProcessor"),qno=o(" (Speech2Text model)"),Nno=l(),zh=a("li"),Voe=a("strong"),jno=o("speech_to_text_2"),Dno=o(" \u2014 "),hB=a("a"),Gno=o("Speech2Text2Processor"),Ono=o(" (Speech2Text2 model)"),Vno=l(),Qh=a("li"),Xoe=a("strong"),Xno=o("trocr"),zno=o(" \u2014 "),pB=a("a"),Qno=o("TrOCRProcessor"),Wno=o(" (TrOCR model)"),Hno=l(),Wh=a("li"),zoe=a("strong"),Uno=o("vision-text-dual-encoder"),Jno=o(" \u2014 "),_B=a("a"),Yno=o("VisionTextDualEncoderProcessor"),Kno=o(" (VisionTextDualEncoder model)"),Zno=l(),Hh=a("li"),Qoe=a("strong"),eso=o("wav2vec2"),oso=o(" \u2014 "),uB=a("a"),rso=o("Wav2Vec2Processor"),tso=o(" (Wav2Vec2 model)"),aso=l(),f(Uh.$$.fragment),nso=l(),Woe=a("p"),sso=o("Examples:"),lso=l(),f(d3.$$.fragment),iso=l(),Jh=a("div"),f(c3.$$.fragment),dso=l(),Hoe=a("p"),cso=o("Register a new processor for this class."),lBe=l(),Yi=a("h2"),Yh=a("a"),Uoe=a("span"),f(f3.$$.fragment),fso=l(),Joe=a("span"),mso=o("AutoModel"),iBe=l(),Jo=a("div"),f(m3.$$.fragment),gso=l(),Ki=a("p"),hso=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bB=a("a"),pso=o("from_pretrained()"),_so=o(" class method or the "),FB=a("a"),uso=o("from_config()"),bso=o(` class
method.`),Fso=l(),g3=a("p"),vso=o("This class cannot be instantiated directly using "),Yoe=a("code"),Tso=o("__init__()"),Mso=o(" (throws an error)."),Eso=l(),Xr=a("div"),f(h3.$$.fragment),Cso=l(),Koe=a("p"),wso=o("Instantiates one of the base model classes of the library from a configuration."),Aso=l(),Zi=a("p"),yso=o(`Note:
Loading a model from its configuration file does `),Zoe=a("strong"),Lso=o("not"),xso=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vB=a("a"),kso=o("from_pretrained()"),Sso=o(" to load the model weights."),Rso=l(),ere=a("p"),Bso=o("Examples:"),Pso=l(),f(p3.$$.fragment),$so=l(),Ne=a("div"),f(_3.$$.fragment),Iso=l(),ore=a("p"),qso=o("Instantiate one of the base model classes of the library from a pretrained model."),Nso=l(),Xa=a("p"),jso=o("The model class to instantiate is selected based on the "),rre=a("code"),Dso=o("model_type"),Gso=o(` property of the config object (either
passed as an argument or loaded from `),tre=a("code"),Oso=o("pretrained_model_name_or_path"),Vso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),are=a("code"),Xso=o("pretrained_model_name_or_path"),zso=o(":"),Qso=l(),T=a("ul"),Kh=a("li"),nre=a("strong"),Wso=o("albert"),Hso=o(" \u2014 "),TB=a("a"),Uso=o("AlbertModel"),Jso=o(" (ALBERT model)"),Yso=l(),Zh=a("li"),sre=a("strong"),Kso=o("bart"),Zso=o(" \u2014 "),MB=a("a"),elo=o("BartModel"),olo=o(" (BART model)"),rlo=l(),ep=a("li"),lre=a("strong"),tlo=o("beit"),alo=o(" \u2014 "),EB=a("a"),nlo=o("BeitModel"),slo=o(" (BEiT model)"),llo=l(),op=a("li"),ire=a("strong"),ilo=o("bert"),dlo=o(" \u2014 "),CB=a("a"),clo=o("BertModel"),flo=o(" (BERT model)"),mlo=l(),rp=a("li"),dre=a("strong"),glo=o("bert-generation"),hlo=o(" \u2014 "),wB=a("a"),plo=o("BertGenerationEncoder"),_lo=o(" (Bert Generation model)"),ulo=l(),tp=a("li"),cre=a("strong"),blo=o("big_bird"),Flo=o(" \u2014 "),AB=a("a"),vlo=o("BigBirdModel"),Tlo=o(" (BigBird model)"),Mlo=l(),ap=a("li"),fre=a("strong"),Elo=o("bigbird_pegasus"),Clo=o(" \u2014 "),yB=a("a"),wlo=o("BigBirdPegasusModel"),Alo=o(" (BigBirdPegasus model)"),ylo=l(),np=a("li"),mre=a("strong"),Llo=o("blenderbot"),xlo=o(" \u2014 "),LB=a("a"),klo=o("BlenderbotModel"),Slo=o(" (Blenderbot model)"),Rlo=l(),sp=a("li"),gre=a("strong"),Blo=o("blenderbot-small"),Plo=o(" \u2014 "),xB=a("a"),$lo=o("BlenderbotSmallModel"),Ilo=o(" (BlenderbotSmall model)"),qlo=l(),lp=a("li"),hre=a("strong"),Nlo=o("camembert"),jlo=o(" \u2014 "),kB=a("a"),Dlo=o("CamembertModel"),Glo=o(" (CamemBERT model)"),Olo=l(),ip=a("li"),pre=a("strong"),Vlo=o("canine"),Xlo=o(" \u2014 "),SB=a("a"),zlo=o("CanineModel"),Qlo=o(" (Canine model)"),Wlo=l(),dp=a("li"),_re=a("strong"),Hlo=o("clip"),Ulo=o(" \u2014 "),RB=a("a"),Jlo=o("CLIPModel"),Ylo=o(" (CLIP model)"),Klo=l(),cp=a("li"),ure=a("strong"),Zlo=o("convbert"),eio=o(" \u2014 "),BB=a("a"),oio=o("ConvBertModel"),rio=o(" (ConvBERT model)"),tio=l(),fp=a("li"),bre=a("strong"),aio=o("convnext"),nio=o(" \u2014 "),PB=a("a"),sio=o("ConvNextModel"),lio=o(" (ConvNext model)"),iio=l(),mp=a("li"),Fre=a("strong"),dio=o("ctrl"),cio=o(" \u2014 "),$B=a("a"),fio=o("CTRLModel"),mio=o(" (CTRL model)"),gio=l(),gp=a("li"),vre=a("strong"),hio=o("data2vec-audio"),pio=o(" \u2014 "),IB=a("a"),_io=o("Data2VecAudioModel"),uio=o(" (Data2VecAudio model)"),bio=l(),hp=a("li"),Tre=a("strong"),Fio=o("data2vec-text"),vio=o(" \u2014 "),qB=a("a"),Tio=o("Data2VecTextModel"),Mio=o(" (Data2VecText model)"),Eio=l(),pp=a("li"),Mre=a("strong"),Cio=o("deberta"),wio=o(" \u2014 "),NB=a("a"),Aio=o("DebertaModel"),yio=o(" (DeBERTa model)"),Lio=l(),_p=a("li"),Ere=a("strong"),xio=o("deberta-v2"),kio=o(" \u2014 "),jB=a("a"),Sio=o("DebertaV2Model"),Rio=o(" (DeBERTa-v2 model)"),Bio=l(),up=a("li"),Cre=a("strong"),Pio=o("decision_transformer"),$io=o(" \u2014 "),DB=a("a"),Iio=o("DecisionTransformerModel"),qio=o(" (Decision Transformer model)"),Nio=l(),bp=a("li"),wre=a("strong"),jio=o("deit"),Dio=o(" \u2014 "),GB=a("a"),Gio=o("DeiTModel"),Oio=o(" (DeiT model)"),Vio=l(),Fp=a("li"),Are=a("strong"),Xio=o("detr"),zio=o(" \u2014 "),OB=a("a"),Qio=o("DetrModel"),Wio=o(" (DETR model)"),Hio=l(),vp=a("li"),yre=a("strong"),Uio=o("distilbert"),Jio=o(" \u2014 "),VB=a("a"),Yio=o("DistilBertModel"),Kio=o(" (DistilBERT model)"),Zio=l(),Tp=a("li"),Lre=a("strong"),edo=o("dpr"),odo=o(" \u2014 "),XB=a("a"),rdo=o("DPRQuestionEncoder"),tdo=o(" (DPR model)"),ado=l(),Mp=a("li"),xre=a("strong"),ndo=o("dpt"),sdo=o(" \u2014 "),zB=a("a"),ldo=o("DPTModel"),ido=o(" (DPT model)"),ddo=l(),Ep=a("li"),kre=a("strong"),cdo=o("electra"),fdo=o(" \u2014 "),QB=a("a"),mdo=o("ElectraModel"),gdo=o(" (ELECTRA model)"),hdo=l(),Cp=a("li"),Sre=a("strong"),pdo=o("flaubert"),_do=o(" \u2014 "),WB=a("a"),udo=o("FlaubertModel"),bdo=o(" (FlauBERT model)"),Fdo=l(),wp=a("li"),Rre=a("strong"),vdo=o("fnet"),Tdo=o(" \u2014 "),HB=a("a"),Mdo=o("FNetModel"),Edo=o(" (FNet model)"),Cdo=l(),Ap=a("li"),Bre=a("strong"),wdo=o("fsmt"),Ado=o(" \u2014 "),UB=a("a"),ydo=o("FSMTModel"),Ldo=o(" (FairSeq Machine-Translation model)"),xdo=l(),Ds=a("li"),Pre=a("strong"),kdo=o("funnel"),Sdo=o(" \u2014 "),JB=a("a"),Rdo=o("FunnelModel"),Bdo=o(" or "),YB=a("a"),Pdo=o("FunnelBaseModel"),$do=o(" (Funnel Transformer model)"),Ido=l(),yp=a("li"),$re=a("strong"),qdo=o("glpn"),Ndo=o(" \u2014 "),KB=a("a"),jdo=o("GLPNModel"),Ddo=o(" (GLPN model)"),Gdo=l(),Lp=a("li"),Ire=a("strong"),Odo=o("gpt2"),Vdo=o(" \u2014 "),ZB=a("a"),Xdo=o("GPT2Model"),zdo=o(" (OpenAI GPT-2 model)"),Qdo=l(),xp=a("li"),qre=a("strong"),Wdo=o("gpt_neo"),Hdo=o(" \u2014 "),eP=a("a"),Udo=o("GPTNeoModel"),Jdo=o(" (GPT Neo model)"),Ydo=l(),kp=a("li"),Nre=a("strong"),Kdo=o("gptj"),Zdo=o(" \u2014 "),oP=a("a"),eco=o("GPTJModel"),oco=o(" (GPT-J model)"),rco=l(),Sp=a("li"),jre=a("strong"),tco=o("hubert"),aco=o(" \u2014 "),rP=a("a"),nco=o("HubertModel"),sco=o(" (Hubert model)"),lco=l(),Rp=a("li"),Dre=a("strong"),ico=o("ibert"),dco=o(" \u2014 "),tP=a("a"),cco=o("IBertModel"),fco=o(" (I-BERT model)"),mco=l(),Bp=a("li"),Gre=a("strong"),gco=o("imagegpt"),hco=o(" \u2014 "),aP=a("a"),pco=o("ImageGPTModel"),_co=o(" (ImageGPT model)"),uco=l(),Pp=a("li"),Ore=a("strong"),bco=o("layoutlm"),Fco=o(" \u2014 "),nP=a("a"),vco=o("LayoutLMModel"),Tco=o(" (LayoutLM model)"),Mco=l(),$p=a("li"),Vre=a("strong"),Eco=o("layoutlmv2"),Cco=o(" \u2014 "),sP=a("a"),wco=o("LayoutLMv2Model"),Aco=o(" (LayoutLMv2 model)"),yco=l(),Ip=a("li"),Xre=a("strong"),Lco=o("led"),xco=o(" \u2014 "),lP=a("a"),kco=o("LEDModel"),Sco=o(" (LED model)"),Rco=l(),qp=a("li"),zre=a("strong"),Bco=o("longformer"),Pco=o(" \u2014 "),iP=a("a"),$co=o("LongformerModel"),Ico=o(" (Longformer model)"),qco=l(),Np=a("li"),Qre=a("strong"),Nco=o("longt5"),jco=o(" \u2014 "),dP=a("a"),Dco=o("LongT5Model"),Gco=o(" (LongT5 model)"),Oco=l(),jp=a("li"),Wre=a("strong"),Vco=o("luke"),Xco=o(" \u2014 "),cP=a("a"),zco=o("LukeModel"),Qco=o(" (LUKE model)"),Wco=l(),Dp=a("li"),Hre=a("strong"),Hco=o("lxmert"),Uco=o(" \u2014 "),fP=a("a"),Jco=o("LxmertModel"),Yco=o(" (LXMERT model)"),Kco=l(),Gp=a("li"),Ure=a("strong"),Zco=o("m2m_100"),efo=o(" \u2014 "),mP=a("a"),ofo=o("M2M100Model"),rfo=o(" (M2M100 model)"),tfo=l(),Op=a("li"),Jre=a("strong"),afo=o("marian"),nfo=o(" \u2014 "),gP=a("a"),sfo=o("MarianModel"),lfo=o(" (Marian model)"),ifo=l(),Vp=a("li"),Yre=a("strong"),dfo=o("maskformer"),cfo=o(" \u2014 "),hP=a("a"),ffo=o("MaskFormerModel"),mfo=o(" (MaskFormer model)"),gfo=l(),Xp=a("li"),Kre=a("strong"),hfo=o("mbart"),pfo=o(" \u2014 "),pP=a("a"),_fo=o("MBartModel"),ufo=o(" (mBART model)"),bfo=l(),zp=a("li"),Zre=a("strong"),Ffo=o("megatron-bert"),vfo=o(" \u2014 "),_P=a("a"),Tfo=o("MegatronBertModel"),Mfo=o(" (MegatronBert model)"),Efo=l(),Qp=a("li"),ete=a("strong"),Cfo=o("mobilebert"),wfo=o(" \u2014 "),uP=a("a"),Afo=o("MobileBertModel"),yfo=o(" (MobileBERT model)"),Lfo=l(),Wp=a("li"),ote=a("strong"),xfo=o("mpnet"),kfo=o(" \u2014 "),bP=a("a"),Sfo=o("MPNetModel"),Rfo=o(" (MPNet model)"),Bfo=l(),Hp=a("li"),rte=a("strong"),Pfo=o("mt5"),$fo=o(" \u2014 "),FP=a("a"),Ifo=o("MT5Model"),qfo=o(" (mT5 model)"),Nfo=l(),Up=a("li"),tte=a("strong"),jfo=o("nystromformer"),Dfo=o(" \u2014 "),vP=a("a"),Gfo=o("NystromformerModel"),Ofo=o(" (Nystromformer model)"),Vfo=l(),Jp=a("li"),ate=a("strong"),Xfo=o("openai-gpt"),zfo=o(" \u2014 "),TP=a("a"),Qfo=o("OpenAIGPTModel"),Wfo=o(" (OpenAI GPT model)"),Hfo=l(),Yp=a("li"),nte=a("strong"),Ufo=o("pegasus"),Jfo=o(" \u2014 "),MP=a("a"),Yfo=o("PegasusModel"),Kfo=o(" (Pegasus model)"),Zfo=l(),Kp=a("li"),ste=a("strong"),emo=o("perceiver"),omo=o(" \u2014 "),EP=a("a"),rmo=o("PerceiverModel"),tmo=o(" (Perceiver model)"),amo=l(),Zp=a("li"),lte=a("strong"),nmo=o("plbart"),smo=o(" \u2014 "),CP=a("a"),lmo=o("PLBartModel"),imo=o(" (PLBart model)"),dmo=l(),e_=a("li"),ite=a("strong"),cmo=o("poolformer"),fmo=o(" \u2014 "),wP=a("a"),mmo=o("PoolFormerModel"),gmo=o(" (PoolFormer model)"),hmo=l(),o_=a("li"),dte=a("strong"),pmo=o("prophetnet"),_mo=o(" \u2014 "),AP=a("a"),umo=o("ProphetNetModel"),bmo=o(" (ProphetNet model)"),Fmo=l(),r_=a("li"),cte=a("strong"),vmo=o("qdqbert"),Tmo=o(" \u2014 "),yP=a("a"),Mmo=o("QDQBertModel"),Emo=o(" (QDQBert model)"),Cmo=l(),t_=a("li"),fte=a("strong"),wmo=o("reformer"),Amo=o(" \u2014 "),LP=a("a"),ymo=o("ReformerModel"),Lmo=o(" (Reformer model)"),xmo=l(),a_=a("li"),mte=a("strong"),kmo=o("regnet"),Smo=o(" \u2014 "),xP=a("a"),Rmo=o("RegNetModel"),Bmo=o(" (RegNet model)"),Pmo=l(),n_=a("li"),gte=a("strong"),$mo=o("rembert"),Imo=o(" \u2014 "),kP=a("a"),qmo=o("RemBertModel"),Nmo=o(" (RemBERT model)"),jmo=l(),s_=a("li"),hte=a("strong"),Dmo=o("resnet"),Gmo=o(" \u2014 "),SP=a("a"),Omo=o("ResNetModel"),Vmo=o(" (ResNet model)"),Xmo=l(),l_=a("li"),pte=a("strong"),zmo=o("retribert"),Qmo=o(" \u2014 "),RP=a("a"),Wmo=o("RetriBertModel"),Hmo=o(" (RetriBERT model)"),Umo=l(),i_=a("li"),_te=a("strong"),Jmo=o("roberta"),Ymo=o(" \u2014 "),BP=a("a"),Kmo=o("RobertaModel"),Zmo=o(" (RoBERTa model)"),ego=l(),d_=a("li"),ute=a("strong"),ogo=o("roformer"),rgo=o(" \u2014 "),PP=a("a"),tgo=o("RoFormerModel"),ago=o(" (RoFormer model)"),ngo=l(),c_=a("li"),bte=a("strong"),sgo=o("segformer"),lgo=o(" \u2014 "),$P=a("a"),igo=o("SegformerModel"),dgo=o(" (SegFormer model)"),cgo=l(),f_=a("li"),Fte=a("strong"),fgo=o("sew"),mgo=o(" \u2014 "),IP=a("a"),ggo=o("SEWModel"),hgo=o(" (SEW model)"),pgo=l(),m_=a("li"),vte=a("strong"),_go=o("sew-d"),ugo=o(" \u2014 "),qP=a("a"),bgo=o("SEWDModel"),Fgo=o(" (SEW-D model)"),vgo=l(),g_=a("li"),Tte=a("strong"),Tgo=o("speech_to_text"),Mgo=o(" \u2014 "),NP=a("a"),Ego=o("Speech2TextModel"),Cgo=o(" (Speech2Text model)"),wgo=l(),h_=a("li"),Mte=a("strong"),Ago=o("splinter"),ygo=o(" \u2014 "),jP=a("a"),Lgo=o("SplinterModel"),xgo=o(" (Splinter model)"),kgo=l(),p_=a("li"),Ete=a("strong"),Sgo=o("squeezebert"),Rgo=o(" \u2014 "),DP=a("a"),Bgo=o("SqueezeBertModel"),Pgo=o(" (SqueezeBERT model)"),$go=l(),__=a("li"),Cte=a("strong"),Igo=o("swin"),qgo=o(" \u2014 "),GP=a("a"),Ngo=o("SwinModel"),jgo=o(" (Swin model)"),Dgo=l(),u_=a("li"),wte=a("strong"),Ggo=o("t5"),Ogo=o(" \u2014 "),OP=a("a"),Vgo=o("T5Model"),Xgo=o(" (T5 model)"),zgo=l(),b_=a("li"),Ate=a("strong"),Qgo=o("tapas"),Wgo=o(" \u2014 "),VP=a("a"),Hgo=o("TapasModel"),Ugo=o(" (TAPAS model)"),Jgo=l(),F_=a("li"),yte=a("strong"),Ygo=o("transfo-xl"),Kgo=o(" \u2014 "),XP=a("a"),Zgo=o("TransfoXLModel"),eho=o(" (Transformer-XL model)"),oho=l(),v_=a("li"),Lte=a("strong"),rho=o("unispeech"),tho=o(" \u2014 "),zP=a("a"),aho=o("UniSpeechModel"),nho=o(" (UniSpeech model)"),sho=l(),T_=a("li"),xte=a("strong"),lho=o("unispeech-sat"),iho=o(" \u2014 "),QP=a("a"),dho=o("UniSpeechSatModel"),cho=o(" (UniSpeechSat model)"),fho=l(),M_=a("li"),kte=a("strong"),mho=o("van"),gho=o(" \u2014 "),WP=a("a"),hho=o("VanModel"),pho=o(" (VAN model)"),_ho=l(),E_=a("li"),Ste=a("strong"),uho=o("vilt"),bho=o(" \u2014 "),HP=a("a"),Fho=o("ViltModel"),vho=o(" (ViLT model)"),Tho=l(),C_=a("li"),Rte=a("strong"),Mho=o("vision-text-dual-encoder"),Eho=o(" \u2014 "),UP=a("a"),Cho=o("VisionTextDualEncoderModel"),who=o(" (VisionTextDualEncoder model)"),Aho=l(),w_=a("li"),Bte=a("strong"),yho=o("visual_bert"),Lho=o(" \u2014 "),JP=a("a"),xho=o("VisualBertModel"),kho=o(" (VisualBert model)"),Sho=l(),A_=a("li"),Pte=a("strong"),Rho=o("vit"),Bho=o(" \u2014 "),YP=a("a"),Pho=o("ViTModel"),$ho=o(" (ViT model)"),Iho=l(),y_=a("li"),$te=a("strong"),qho=o("vit_mae"),Nho=o(" \u2014 "),KP=a("a"),jho=o("ViTMAEModel"),Dho=o(" (ViTMAE model)"),Gho=l(),L_=a("li"),Ite=a("strong"),Oho=o("wav2vec2"),Vho=o(" \u2014 "),ZP=a("a"),Xho=o("Wav2Vec2Model"),zho=o(" (Wav2Vec2 model)"),Qho=l(),x_=a("li"),qte=a("strong"),Who=o("wavlm"),Hho=o(" \u2014 "),e$=a("a"),Uho=o("WavLMModel"),Jho=o(" (WavLM model)"),Yho=l(),k_=a("li"),Nte=a("strong"),Kho=o("xglm"),Zho=o(" \u2014 "),o$=a("a"),epo=o("XGLMModel"),opo=o(" (XGLM model)"),rpo=l(),S_=a("li"),jte=a("strong"),tpo=o("xlm"),apo=o(" \u2014 "),r$=a("a"),npo=o("XLMModel"),spo=o(" (XLM model)"),lpo=l(),R_=a("li"),Dte=a("strong"),ipo=o("xlm-prophetnet"),dpo=o(" \u2014 "),t$=a("a"),cpo=o("XLMProphetNetModel"),fpo=o(" (XLMProphetNet model)"),mpo=l(),B_=a("li"),Gte=a("strong"),gpo=o("xlm-roberta"),hpo=o(" \u2014 "),a$=a("a"),ppo=o("XLMRobertaModel"),_po=o(" (XLM-RoBERTa model)"),upo=l(),P_=a("li"),Ote=a("strong"),bpo=o("xlm-roberta-xl"),Fpo=o(" \u2014 "),n$=a("a"),vpo=o("XLMRobertaXLModel"),Tpo=o(" (XLM-RoBERTa-XL model)"),Mpo=l(),$_=a("li"),Vte=a("strong"),Epo=o("xlnet"),Cpo=o(" \u2014 "),s$=a("a"),wpo=o("XLNetModel"),Apo=o(" (XLNet model)"),ypo=l(),I_=a("li"),Xte=a("strong"),Lpo=o("yoso"),xpo=o(" \u2014 "),l$=a("a"),kpo=o("YosoModel"),Spo=o(" (YOSO model)"),Rpo=l(),q_=a("p"),Bpo=o("The model is set in evaluation mode by default using "),zte=a("code"),Ppo=o("model.eval()"),$po=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qte=a("code"),Ipo=o("model.train()"),qpo=l(),Wte=a("p"),Npo=o("Examples:"),jpo=l(),f(u3.$$.fragment),dBe=l(),ed=a("h2"),N_=a("a"),Hte=a("span"),f(b3.$$.fragment),Dpo=l(),Ute=a("span"),Gpo=o("AutoModelForPreTraining"),cBe=l(),Yo=a("div"),f(F3.$$.fragment),Opo=l(),od=a("p"),Vpo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),i$=a("a"),Xpo=o("from_pretrained()"),zpo=o(" class method or the "),d$=a("a"),Qpo=o("from_config()"),Wpo=o(` class
method.`),Hpo=l(),v3=a("p"),Upo=o("This class cannot be instantiated directly using "),Jte=a("code"),Jpo=o("__init__()"),Ypo=o(" (throws an error)."),Kpo=l(),zr=a("div"),f(T3.$$.fragment),Zpo=l(),Yte=a("p"),e_o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),o_o=l(),rd=a("p"),r_o=o(`Note:
Loading a model from its configuration file does `),Kte=a("strong"),t_o=o("not"),a_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),c$=a("a"),n_o=o("from_pretrained()"),s_o=o(" to load the model weights."),l_o=l(),Zte=a("p"),i_o=o("Examples:"),d_o=l(),f(M3.$$.fragment),c_o=l(),je=a("div"),f(E3.$$.fragment),f_o=l(),eae=a("p"),m_o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),g_o=l(),za=a("p"),h_o=o("The model class to instantiate is selected based on the "),oae=a("code"),p_o=o("model_type"),__o=o(` property of the config object (either
passed as an argument or loaded from `),rae=a("code"),u_o=o("pretrained_model_name_or_path"),b_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tae=a("code"),F_o=o("pretrained_model_name_or_path"),v_o=o(":"),T_o=l(),S=a("ul"),j_=a("li"),aae=a("strong"),M_o=o("albert"),E_o=o(" \u2014 "),f$=a("a"),C_o=o("AlbertForPreTraining"),w_o=o(" (ALBERT model)"),A_o=l(),D_=a("li"),nae=a("strong"),y_o=o("bart"),L_o=o(" \u2014 "),m$=a("a"),x_o=o("BartForConditionalGeneration"),k_o=o(" (BART model)"),S_o=l(),G_=a("li"),sae=a("strong"),R_o=o("bert"),B_o=o(" \u2014 "),g$=a("a"),P_o=o("BertForPreTraining"),$_o=o(" (BERT model)"),I_o=l(),O_=a("li"),lae=a("strong"),q_o=o("big_bird"),N_o=o(" \u2014 "),h$=a("a"),j_o=o("BigBirdForPreTraining"),D_o=o(" (BigBird model)"),G_o=l(),V_=a("li"),iae=a("strong"),O_o=o("camembert"),V_o=o(" \u2014 "),p$=a("a"),X_o=o("CamembertForMaskedLM"),z_o=o(" (CamemBERT model)"),Q_o=l(),X_=a("li"),dae=a("strong"),W_o=o("ctrl"),H_o=o(" \u2014 "),_$=a("a"),U_o=o("CTRLLMHeadModel"),J_o=o(" (CTRL model)"),Y_o=l(),z_=a("li"),cae=a("strong"),K_o=o("data2vec-text"),Z_o=o(" \u2014 "),u$=a("a"),euo=o("Data2VecTextForMaskedLM"),ouo=o(" (Data2VecText model)"),ruo=l(),Q_=a("li"),fae=a("strong"),tuo=o("deberta"),auo=o(" \u2014 "),b$=a("a"),nuo=o("DebertaForMaskedLM"),suo=o(" (DeBERTa model)"),luo=l(),W_=a("li"),mae=a("strong"),iuo=o("deberta-v2"),duo=o(" \u2014 "),F$=a("a"),cuo=o("DebertaV2ForMaskedLM"),fuo=o(" (DeBERTa-v2 model)"),muo=l(),H_=a("li"),gae=a("strong"),guo=o("distilbert"),huo=o(" \u2014 "),v$=a("a"),puo=o("DistilBertForMaskedLM"),_uo=o(" (DistilBERT model)"),uuo=l(),U_=a("li"),hae=a("strong"),buo=o("electra"),Fuo=o(" \u2014 "),T$=a("a"),vuo=o("ElectraForPreTraining"),Tuo=o(" (ELECTRA model)"),Muo=l(),J_=a("li"),pae=a("strong"),Euo=o("flaubert"),Cuo=o(" \u2014 "),M$=a("a"),wuo=o("FlaubertWithLMHeadModel"),Auo=o(" (FlauBERT model)"),yuo=l(),Y_=a("li"),_ae=a("strong"),Luo=o("fnet"),xuo=o(" \u2014 "),E$=a("a"),kuo=o("FNetForPreTraining"),Suo=o(" (FNet model)"),Ruo=l(),K_=a("li"),uae=a("strong"),Buo=o("fsmt"),Puo=o(" \u2014 "),C$=a("a"),$uo=o("FSMTForConditionalGeneration"),Iuo=o(" (FairSeq Machine-Translation model)"),quo=l(),Z_=a("li"),bae=a("strong"),Nuo=o("funnel"),juo=o(" \u2014 "),w$=a("a"),Duo=o("FunnelForPreTraining"),Guo=o(" (Funnel Transformer model)"),Ouo=l(),eu=a("li"),Fae=a("strong"),Vuo=o("gpt2"),Xuo=o(" \u2014 "),A$=a("a"),zuo=o("GPT2LMHeadModel"),Quo=o(" (OpenAI GPT-2 model)"),Wuo=l(),ou=a("li"),vae=a("strong"),Huo=o("ibert"),Uuo=o(" \u2014 "),y$=a("a"),Juo=o("IBertForMaskedLM"),Yuo=o(" (I-BERT model)"),Kuo=l(),ru=a("li"),Tae=a("strong"),Zuo=o("layoutlm"),e2o=o(" \u2014 "),L$=a("a"),o2o=o("LayoutLMForMaskedLM"),r2o=o(" (LayoutLM model)"),t2o=l(),tu=a("li"),Mae=a("strong"),a2o=o("longformer"),n2o=o(" \u2014 "),x$=a("a"),s2o=o("LongformerForMaskedLM"),l2o=o(" (Longformer model)"),i2o=l(),au=a("li"),Eae=a("strong"),d2o=o("longt5"),c2o=o(" \u2014 "),k$=a("a"),f2o=o("LongT5ForConditionalGeneration"),m2o=o(" (LongT5 model)"),g2o=l(),nu=a("li"),Cae=a("strong"),h2o=o("lxmert"),p2o=o(" \u2014 "),S$=a("a"),_2o=o("LxmertForPreTraining"),u2o=o(" (LXMERT model)"),b2o=l(),su=a("li"),wae=a("strong"),F2o=o("megatron-bert"),v2o=o(" \u2014 "),R$=a("a"),T2o=o("MegatronBertForPreTraining"),M2o=o(" (MegatronBert model)"),E2o=l(),lu=a("li"),Aae=a("strong"),C2o=o("mobilebert"),w2o=o(" \u2014 "),B$=a("a"),A2o=o("MobileBertForPreTraining"),y2o=o(" (MobileBERT model)"),L2o=l(),iu=a("li"),yae=a("strong"),x2o=o("mpnet"),k2o=o(" \u2014 "),P$=a("a"),S2o=o("MPNetForMaskedLM"),R2o=o(" (MPNet model)"),B2o=l(),du=a("li"),Lae=a("strong"),P2o=o("openai-gpt"),$2o=o(" \u2014 "),$$=a("a"),I2o=o("OpenAIGPTLMHeadModel"),q2o=o(" (OpenAI GPT model)"),N2o=l(),cu=a("li"),xae=a("strong"),j2o=o("retribert"),D2o=o(" \u2014 "),I$=a("a"),G2o=o("RetriBertModel"),O2o=o(" (RetriBERT model)"),V2o=l(),fu=a("li"),kae=a("strong"),X2o=o("roberta"),z2o=o(" \u2014 "),q$=a("a"),Q2o=o("RobertaForMaskedLM"),W2o=o(" (RoBERTa model)"),H2o=l(),mu=a("li"),Sae=a("strong"),U2o=o("squeezebert"),J2o=o(" \u2014 "),N$=a("a"),Y2o=o("SqueezeBertForMaskedLM"),K2o=o(" (SqueezeBERT model)"),Z2o=l(),gu=a("li"),Rae=a("strong"),e1o=o("t5"),o1o=o(" \u2014 "),j$=a("a"),r1o=o("T5ForConditionalGeneration"),t1o=o(" (T5 model)"),a1o=l(),hu=a("li"),Bae=a("strong"),n1o=o("tapas"),s1o=o(" \u2014 "),D$=a("a"),l1o=o("TapasForMaskedLM"),i1o=o(" (TAPAS model)"),d1o=l(),pu=a("li"),Pae=a("strong"),c1o=o("transfo-xl"),f1o=o(" \u2014 "),G$=a("a"),m1o=o("TransfoXLLMHeadModel"),g1o=o(" (Transformer-XL model)"),h1o=l(),_u=a("li"),$ae=a("strong"),p1o=o("unispeech"),_1o=o(" \u2014 "),O$=a("a"),u1o=o("UniSpeechForPreTraining"),b1o=o(" (UniSpeech model)"),F1o=l(),uu=a("li"),Iae=a("strong"),v1o=o("unispeech-sat"),T1o=o(" \u2014 "),V$=a("a"),M1o=o("UniSpeechSatForPreTraining"),E1o=o(" (UniSpeechSat model)"),C1o=l(),bu=a("li"),qae=a("strong"),w1o=o("visual_bert"),A1o=o(" \u2014 "),X$=a("a"),y1o=o("VisualBertForPreTraining"),L1o=o(" (VisualBert model)"),x1o=l(),Fu=a("li"),Nae=a("strong"),k1o=o("vit_mae"),S1o=o(" \u2014 "),z$=a("a"),R1o=o("ViTMAEForPreTraining"),B1o=o(" (ViTMAE model)"),P1o=l(),vu=a("li"),jae=a("strong"),$1o=o("wav2vec2"),I1o=o(" \u2014 "),Q$=a("a"),q1o=o("Wav2Vec2ForPreTraining"),N1o=o(" (Wav2Vec2 model)"),j1o=l(),Tu=a("li"),Dae=a("strong"),D1o=o("xlm"),G1o=o(" \u2014 "),W$=a("a"),O1o=o("XLMWithLMHeadModel"),V1o=o(" (XLM model)"),X1o=l(),Mu=a("li"),Gae=a("strong"),z1o=o("xlm-roberta"),Q1o=o(" \u2014 "),H$=a("a"),W1o=o("XLMRobertaForMaskedLM"),H1o=o(" (XLM-RoBERTa model)"),U1o=l(),Eu=a("li"),Oae=a("strong"),J1o=o("xlm-roberta-xl"),Y1o=o(" \u2014 "),U$=a("a"),K1o=o("XLMRobertaXLForMaskedLM"),Z1o=o(" (XLM-RoBERTa-XL model)"),ebo=l(),Cu=a("li"),Vae=a("strong"),obo=o("xlnet"),rbo=o(" \u2014 "),J$=a("a"),tbo=o("XLNetLMHeadModel"),abo=o(" (XLNet model)"),nbo=l(),wu=a("p"),sbo=o("The model is set in evaluation mode by default using "),Xae=a("code"),lbo=o("model.eval()"),ibo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zae=a("code"),dbo=o("model.train()"),cbo=l(),Qae=a("p"),fbo=o("Examples:"),mbo=l(),f(C3.$$.fragment),fBe=l(),td=a("h2"),Au=a("a"),Wae=a("span"),f(w3.$$.fragment),gbo=l(),Hae=a("span"),hbo=o("AutoModelForCausalLM"),mBe=l(),Ko=a("div"),f(A3.$$.fragment),pbo=l(),ad=a("p"),_bo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Y$=a("a"),ubo=o("from_pretrained()"),bbo=o(" class method or the "),K$=a("a"),Fbo=o("from_config()"),vbo=o(` class
method.`),Tbo=l(),y3=a("p"),Mbo=o("This class cannot be instantiated directly using "),Uae=a("code"),Ebo=o("__init__()"),Cbo=o(" (throws an error)."),wbo=l(),Qr=a("div"),f(L3.$$.fragment),Abo=l(),Jae=a("p"),ybo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Lbo=l(),nd=a("p"),xbo=o(`Note:
Loading a model from its configuration file does `),Yae=a("strong"),kbo=o("not"),Sbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Z$=a("a"),Rbo=o("from_pretrained()"),Bbo=o(" to load the model weights."),Pbo=l(),Kae=a("p"),$bo=o("Examples:"),Ibo=l(),f(x3.$$.fragment),qbo=l(),De=a("div"),f(k3.$$.fragment),Nbo=l(),Zae=a("p"),jbo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Dbo=l(),Qa=a("p"),Gbo=o("The model class to instantiate is selected based on the "),ene=a("code"),Obo=o("model_type"),Vbo=o(` property of the config object (either
passed as an argument or loaded from `),one=a("code"),Xbo=o("pretrained_model_name_or_path"),zbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rne=a("code"),Qbo=o("pretrained_model_name_or_path"),Wbo=o(":"),Hbo=l(),$=a("ul"),yu=a("li"),tne=a("strong"),Ubo=o("bart"),Jbo=o(" \u2014 "),eI=a("a"),Ybo=o("BartForCausalLM"),Kbo=o(" (BART model)"),Zbo=l(),Lu=a("li"),ane=a("strong"),e6o=o("bert"),o6o=o(" \u2014 "),oI=a("a"),r6o=o("BertLMHeadModel"),t6o=o(" (BERT model)"),a6o=l(),xu=a("li"),nne=a("strong"),n6o=o("bert-generation"),s6o=o(" \u2014 "),rI=a("a"),l6o=o("BertGenerationDecoder"),i6o=o(" (Bert Generation model)"),d6o=l(),ku=a("li"),sne=a("strong"),c6o=o("big_bird"),f6o=o(" \u2014 "),tI=a("a"),m6o=o("BigBirdForCausalLM"),g6o=o(" (BigBird model)"),h6o=l(),Su=a("li"),lne=a("strong"),p6o=o("bigbird_pegasus"),_6o=o(" \u2014 "),aI=a("a"),u6o=o("BigBirdPegasusForCausalLM"),b6o=o(" (BigBirdPegasus model)"),F6o=l(),Ru=a("li"),ine=a("strong"),v6o=o("blenderbot"),T6o=o(" \u2014 "),nI=a("a"),M6o=o("BlenderbotForCausalLM"),E6o=o(" (Blenderbot model)"),C6o=l(),Bu=a("li"),dne=a("strong"),w6o=o("blenderbot-small"),A6o=o(" \u2014 "),sI=a("a"),y6o=o("BlenderbotSmallForCausalLM"),L6o=o(" (BlenderbotSmall model)"),x6o=l(),Pu=a("li"),cne=a("strong"),k6o=o("camembert"),S6o=o(" \u2014 "),lI=a("a"),R6o=o("CamembertForCausalLM"),B6o=o(" (CamemBERT model)"),P6o=l(),$u=a("li"),fne=a("strong"),$6o=o("ctrl"),I6o=o(" \u2014 "),iI=a("a"),q6o=o("CTRLLMHeadModel"),N6o=o(" (CTRL model)"),j6o=l(),Iu=a("li"),mne=a("strong"),D6o=o("data2vec-text"),G6o=o(" \u2014 "),dI=a("a"),O6o=o("Data2VecTextForCausalLM"),V6o=o(" (Data2VecText model)"),X6o=l(),qu=a("li"),gne=a("strong"),z6o=o("electra"),Q6o=o(" \u2014 "),cI=a("a"),W6o=o("ElectraForCausalLM"),H6o=o(" (ELECTRA model)"),U6o=l(),Nu=a("li"),hne=a("strong"),J6o=o("gpt2"),Y6o=o(" \u2014 "),fI=a("a"),K6o=o("GPT2LMHeadModel"),Z6o=o(" (OpenAI GPT-2 model)"),eFo=l(),ju=a("li"),pne=a("strong"),oFo=o("gpt_neo"),rFo=o(" \u2014 "),mI=a("a"),tFo=o("GPTNeoForCausalLM"),aFo=o(" (GPT Neo model)"),nFo=l(),Du=a("li"),_ne=a("strong"),sFo=o("gptj"),lFo=o(" \u2014 "),gI=a("a"),iFo=o("GPTJForCausalLM"),dFo=o(" (GPT-J model)"),cFo=l(),Gu=a("li"),une=a("strong"),fFo=o("marian"),mFo=o(" \u2014 "),hI=a("a"),gFo=o("MarianForCausalLM"),hFo=o(" (Marian model)"),pFo=l(),Ou=a("li"),bne=a("strong"),_Fo=o("mbart"),uFo=o(" \u2014 "),pI=a("a"),bFo=o("MBartForCausalLM"),FFo=o(" (mBART model)"),vFo=l(),Vu=a("li"),Fne=a("strong"),TFo=o("megatron-bert"),MFo=o(" \u2014 "),_I=a("a"),EFo=o("MegatronBertForCausalLM"),CFo=o(" (MegatronBert model)"),wFo=l(),Xu=a("li"),vne=a("strong"),AFo=o("openai-gpt"),yFo=o(" \u2014 "),uI=a("a"),LFo=o("OpenAIGPTLMHeadModel"),xFo=o(" (OpenAI GPT model)"),kFo=l(),zu=a("li"),Tne=a("strong"),SFo=o("pegasus"),RFo=o(" \u2014 "),bI=a("a"),BFo=o("PegasusForCausalLM"),PFo=o(" (Pegasus model)"),$Fo=l(),Qu=a("li"),Mne=a("strong"),IFo=o("plbart"),qFo=o(" \u2014 "),FI=a("a"),NFo=o("PLBartForCausalLM"),jFo=o(" (PLBart model)"),DFo=l(),Wu=a("li"),Ene=a("strong"),GFo=o("prophetnet"),OFo=o(" \u2014 "),vI=a("a"),VFo=o("ProphetNetForCausalLM"),XFo=o(" (ProphetNet model)"),zFo=l(),Hu=a("li"),Cne=a("strong"),QFo=o("qdqbert"),WFo=o(" \u2014 "),TI=a("a"),HFo=o("QDQBertLMHeadModel"),UFo=o(" (QDQBert model)"),JFo=l(),Uu=a("li"),wne=a("strong"),YFo=o("reformer"),KFo=o(" \u2014 "),MI=a("a"),ZFo=o("ReformerModelWithLMHead"),evo=o(" (Reformer model)"),ovo=l(),Ju=a("li"),Ane=a("strong"),rvo=o("rembert"),tvo=o(" \u2014 "),EI=a("a"),avo=o("RemBertForCausalLM"),nvo=o(" (RemBERT model)"),svo=l(),Yu=a("li"),yne=a("strong"),lvo=o("roberta"),ivo=o(" \u2014 "),CI=a("a"),dvo=o("RobertaForCausalLM"),cvo=o(" (RoBERTa model)"),fvo=l(),Ku=a("li"),Lne=a("strong"),mvo=o("roformer"),gvo=o(" \u2014 "),wI=a("a"),hvo=o("RoFormerForCausalLM"),pvo=o(" (RoFormer model)"),_vo=l(),Zu=a("li"),xne=a("strong"),uvo=o("speech_to_text_2"),bvo=o(" \u2014 "),AI=a("a"),Fvo=o("Speech2Text2ForCausalLM"),vvo=o(" (Speech2Text2 model)"),Tvo=l(),e2=a("li"),kne=a("strong"),Mvo=o("transfo-xl"),Evo=o(" \u2014 "),yI=a("a"),Cvo=o("TransfoXLLMHeadModel"),wvo=o(" (Transformer-XL model)"),Avo=l(),o2=a("li"),Sne=a("strong"),yvo=o("trocr"),Lvo=o(" \u2014 "),LI=a("a"),xvo=o("TrOCRForCausalLM"),kvo=o(" (TrOCR model)"),Svo=l(),r2=a("li"),Rne=a("strong"),Rvo=o("xglm"),Bvo=o(" \u2014 "),xI=a("a"),Pvo=o("XGLMForCausalLM"),$vo=o(" (XGLM model)"),Ivo=l(),t2=a("li"),Bne=a("strong"),qvo=o("xlm"),Nvo=o(" \u2014 "),kI=a("a"),jvo=o("XLMWithLMHeadModel"),Dvo=o(" (XLM model)"),Gvo=l(),a2=a("li"),Pne=a("strong"),Ovo=o("xlm-prophetnet"),Vvo=o(" \u2014 "),SI=a("a"),Xvo=o("XLMProphetNetForCausalLM"),zvo=o(" (XLMProphetNet model)"),Qvo=l(),n2=a("li"),$ne=a("strong"),Wvo=o("xlm-roberta"),Hvo=o(" \u2014 "),RI=a("a"),Uvo=o("XLMRobertaForCausalLM"),Jvo=o(" (XLM-RoBERTa model)"),Yvo=l(),s2=a("li"),Ine=a("strong"),Kvo=o("xlm-roberta-xl"),Zvo=o(" \u2014 "),BI=a("a"),eTo=o("XLMRobertaXLForCausalLM"),oTo=o(" (XLM-RoBERTa-XL model)"),rTo=l(),l2=a("li"),qne=a("strong"),tTo=o("xlnet"),aTo=o(" \u2014 "),PI=a("a"),nTo=o("XLNetLMHeadModel"),sTo=o(" (XLNet model)"),lTo=l(),i2=a("p"),iTo=o("The model is set in evaluation mode by default using "),Nne=a("code"),dTo=o("model.eval()"),cTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jne=a("code"),fTo=o("model.train()"),mTo=l(),Dne=a("p"),gTo=o("Examples:"),hTo=l(),f(S3.$$.fragment),gBe=l(),sd=a("h2"),d2=a("a"),Gne=a("span"),f(R3.$$.fragment),pTo=l(),One=a("span"),_To=o("AutoModelForMaskedLM"),hBe=l(),Zo=a("div"),f(B3.$$.fragment),uTo=l(),ld=a("p"),bTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$I=a("a"),FTo=o("from_pretrained()"),vTo=o(" class method or the "),II=a("a"),TTo=o("from_config()"),MTo=o(` class
method.`),ETo=l(),P3=a("p"),CTo=o("This class cannot be instantiated directly using "),Vne=a("code"),wTo=o("__init__()"),ATo=o(" (throws an error)."),yTo=l(),Wr=a("div"),f($3.$$.fragment),LTo=l(),Xne=a("p"),xTo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kTo=l(),id=a("p"),STo=o(`Note:
Loading a model from its configuration file does `),zne=a("strong"),RTo=o("not"),BTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qI=a("a"),PTo=o("from_pretrained()"),$To=o(" to load the model weights."),ITo=l(),Qne=a("p"),qTo=o("Examples:"),NTo=l(),f(I3.$$.fragment),jTo=l(),Ge=a("div"),f(q3.$$.fragment),DTo=l(),Wne=a("p"),GTo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),OTo=l(),Wa=a("p"),VTo=o("The model class to instantiate is selected based on the "),Hne=a("code"),XTo=o("model_type"),zTo=o(` property of the config object (either
passed as an argument or loaded from `),Une=a("code"),QTo=o("pretrained_model_name_or_path"),WTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jne=a("code"),HTo=o("pretrained_model_name_or_path"),UTo=o(":"),JTo=l(),I=a("ul"),c2=a("li"),Yne=a("strong"),YTo=o("albert"),KTo=o(" \u2014 "),NI=a("a"),ZTo=o("AlbertForMaskedLM"),e7o=o(" (ALBERT model)"),o7o=l(),f2=a("li"),Kne=a("strong"),r7o=o("bart"),t7o=o(" \u2014 "),jI=a("a"),a7o=o("BartForConditionalGeneration"),n7o=o(" (BART model)"),s7o=l(),m2=a("li"),Zne=a("strong"),l7o=o("bert"),i7o=o(" \u2014 "),DI=a("a"),d7o=o("BertForMaskedLM"),c7o=o(" (BERT model)"),f7o=l(),g2=a("li"),ese=a("strong"),m7o=o("big_bird"),g7o=o(" \u2014 "),GI=a("a"),h7o=o("BigBirdForMaskedLM"),p7o=o(" (BigBird model)"),_7o=l(),h2=a("li"),ose=a("strong"),u7o=o("camembert"),b7o=o(" \u2014 "),OI=a("a"),F7o=o("CamembertForMaskedLM"),v7o=o(" (CamemBERT model)"),T7o=l(),p2=a("li"),rse=a("strong"),M7o=o("convbert"),E7o=o(" \u2014 "),VI=a("a"),C7o=o("ConvBertForMaskedLM"),w7o=o(" (ConvBERT model)"),A7o=l(),_2=a("li"),tse=a("strong"),y7o=o("data2vec-text"),L7o=o(" \u2014 "),XI=a("a"),x7o=o("Data2VecTextForMaskedLM"),k7o=o(" (Data2VecText model)"),S7o=l(),u2=a("li"),ase=a("strong"),R7o=o("deberta"),B7o=o(" \u2014 "),zI=a("a"),P7o=o("DebertaForMaskedLM"),$7o=o(" (DeBERTa model)"),I7o=l(),b2=a("li"),nse=a("strong"),q7o=o("deberta-v2"),N7o=o(" \u2014 "),QI=a("a"),j7o=o("DebertaV2ForMaskedLM"),D7o=o(" (DeBERTa-v2 model)"),G7o=l(),F2=a("li"),sse=a("strong"),O7o=o("distilbert"),V7o=o(" \u2014 "),WI=a("a"),X7o=o("DistilBertForMaskedLM"),z7o=o(" (DistilBERT model)"),Q7o=l(),v2=a("li"),lse=a("strong"),W7o=o("electra"),H7o=o(" \u2014 "),HI=a("a"),U7o=o("ElectraForMaskedLM"),J7o=o(" (ELECTRA model)"),Y7o=l(),T2=a("li"),ise=a("strong"),K7o=o("flaubert"),Z7o=o(" \u2014 "),UI=a("a"),e9o=o("FlaubertWithLMHeadModel"),o9o=o(" (FlauBERT model)"),r9o=l(),M2=a("li"),dse=a("strong"),t9o=o("fnet"),a9o=o(" \u2014 "),JI=a("a"),n9o=o("FNetForMaskedLM"),s9o=o(" (FNet model)"),l9o=l(),E2=a("li"),cse=a("strong"),i9o=o("funnel"),d9o=o(" \u2014 "),YI=a("a"),c9o=o("FunnelForMaskedLM"),f9o=o(" (Funnel Transformer model)"),m9o=l(),C2=a("li"),fse=a("strong"),g9o=o("ibert"),h9o=o(" \u2014 "),KI=a("a"),p9o=o("IBertForMaskedLM"),_9o=o(" (I-BERT model)"),u9o=l(),w2=a("li"),mse=a("strong"),b9o=o("layoutlm"),F9o=o(" \u2014 "),ZI=a("a"),v9o=o("LayoutLMForMaskedLM"),T9o=o(" (LayoutLM model)"),M9o=l(),A2=a("li"),gse=a("strong"),E9o=o("longformer"),C9o=o(" \u2014 "),eq=a("a"),w9o=o("LongformerForMaskedLM"),A9o=o(" (Longformer model)"),y9o=l(),y2=a("li"),hse=a("strong"),L9o=o("mbart"),x9o=o(" \u2014 "),oq=a("a"),k9o=o("MBartForConditionalGeneration"),S9o=o(" (mBART model)"),R9o=l(),L2=a("li"),pse=a("strong"),B9o=o("megatron-bert"),P9o=o(" \u2014 "),rq=a("a"),$9o=o("MegatronBertForMaskedLM"),I9o=o(" (MegatronBert model)"),q9o=l(),x2=a("li"),_se=a("strong"),N9o=o("mobilebert"),j9o=o(" \u2014 "),tq=a("a"),D9o=o("MobileBertForMaskedLM"),G9o=o(" (MobileBERT model)"),O9o=l(),k2=a("li"),use=a("strong"),V9o=o("mpnet"),X9o=o(" \u2014 "),aq=a("a"),z9o=o("MPNetForMaskedLM"),Q9o=o(" (MPNet model)"),W9o=l(),S2=a("li"),bse=a("strong"),H9o=o("nystromformer"),U9o=o(" \u2014 "),nq=a("a"),J9o=o("NystromformerForMaskedLM"),Y9o=o(" (Nystromformer model)"),K9o=l(),R2=a("li"),Fse=a("strong"),Z9o=o("perceiver"),eMo=o(" \u2014 "),sq=a("a"),oMo=o("PerceiverForMaskedLM"),rMo=o(" (Perceiver model)"),tMo=l(),B2=a("li"),vse=a("strong"),aMo=o("qdqbert"),nMo=o(" \u2014 "),lq=a("a"),sMo=o("QDQBertForMaskedLM"),lMo=o(" (QDQBert model)"),iMo=l(),P2=a("li"),Tse=a("strong"),dMo=o("reformer"),cMo=o(" \u2014 "),iq=a("a"),fMo=o("ReformerForMaskedLM"),mMo=o(" (Reformer model)"),gMo=l(),$2=a("li"),Mse=a("strong"),hMo=o("rembert"),pMo=o(" \u2014 "),dq=a("a"),_Mo=o("RemBertForMaskedLM"),uMo=o(" (RemBERT model)"),bMo=l(),I2=a("li"),Ese=a("strong"),FMo=o("roberta"),vMo=o(" \u2014 "),cq=a("a"),TMo=o("RobertaForMaskedLM"),MMo=o(" (RoBERTa model)"),EMo=l(),q2=a("li"),Cse=a("strong"),CMo=o("roformer"),wMo=o(" \u2014 "),fq=a("a"),AMo=o("RoFormerForMaskedLM"),yMo=o(" (RoFormer model)"),LMo=l(),N2=a("li"),wse=a("strong"),xMo=o("squeezebert"),kMo=o(" \u2014 "),mq=a("a"),SMo=o("SqueezeBertForMaskedLM"),RMo=o(" (SqueezeBERT model)"),BMo=l(),j2=a("li"),Ase=a("strong"),PMo=o("tapas"),$Mo=o(" \u2014 "),gq=a("a"),IMo=o("TapasForMaskedLM"),qMo=o(" (TAPAS model)"),NMo=l(),D2=a("li"),yse=a("strong"),jMo=o("wav2vec2"),DMo=o(" \u2014 "),Lse=a("code"),GMo=o("Wav2Vec2ForMaskedLM"),OMo=o(" (Wav2Vec2 model)"),VMo=l(),G2=a("li"),xse=a("strong"),XMo=o("xlm"),zMo=o(" \u2014 "),hq=a("a"),QMo=o("XLMWithLMHeadModel"),WMo=o(" (XLM model)"),HMo=l(),O2=a("li"),kse=a("strong"),UMo=o("xlm-roberta"),JMo=o(" \u2014 "),pq=a("a"),YMo=o("XLMRobertaForMaskedLM"),KMo=o(" (XLM-RoBERTa model)"),ZMo=l(),V2=a("li"),Sse=a("strong"),e4o=o("xlm-roberta-xl"),o4o=o(" \u2014 "),_q=a("a"),r4o=o("XLMRobertaXLForMaskedLM"),t4o=o(" (XLM-RoBERTa-XL model)"),a4o=l(),X2=a("li"),Rse=a("strong"),n4o=o("yoso"),s4o=o(" \u2014 "),uq=a("a"),l4o=o("YosoForMaskedLM"),i4o=o(" (YOSO model)"),d4o=l(),z2=a("p"),c4o=o("The model is set in evaluation mode by default using "),Bse=a("code"),f4o=o("model.eval()"),m4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pse=a("code"),g4o=o("model.train()"),h4o=l(),$se=a("p"),p4o=o("Examples:"),_4o=l(),f(N3.$$.fragment),pBe=l(),dd=a("h2"),Q2=a("a"),Ise=a("span"),f(j3.$$.fragment),u4o=l(),qse=a("span"),b4o=o("AutoModelForSeq2SeqLM"),_Be=l(),er=a("div"),f(D3.$$.fragment),F4o=l(),cd=a("p"),v4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bq=a("a"),T4o=o("from_pretrained()"),M4o=o(" class method or the "),Fq=a("a"),E4o=o("from_config()"),C4o=o(` class
method.`),w4o=l(),G3=a("p"),A4o=o("This class cannot be instantiated directly using "),Nse=a("code"),y4o=o("__init__()"),L4o=o(" (throws an error)."),x4o=l(),Hr=a("div"),f(O3.$$.fragment),k4o=l(),jse=a("p"),S4o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),R4o=l(),fd=a("p"),B4o=o(`Note:
Loading a model from its configuration file does `),Dse=a("strong"),P4o=o("not"),$4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vq=a("a"),I4o=o("from_pretrained()"),q4o=o(" to load the model weights."),N4o=l(),Gse=a("p"),j4o=o("Examples:"),D4o=l(),f(V3.$$.fragment),G4o=l(),Oe=a("div"),f(X3.$$.fragment),O4o=l(),Ose=a("p"),V4o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),X4o=l(),Ha=a("p"),z4o=o("The model class to instantiate is selected based on the "),Vse=a("code"),Q4o=o("model_type"),W4o=o(` property of the config object (either
passed as an argument or loaded from `),Xse=a("code"),H4o=o("pretrained_model_name_or_path"),U4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zse=a("code"),J4o=o("pretrained_model_name_or_path"),Y4o=o(":"),K4o=l(),ae=a("ul"),W2=a("li"),Qse=a("strong"),Z4o=o("bart"),eEo=o(" \u2014 "),Tq=a("a"),oEo=o("BartForConditionalGeneration"),rEo=o(" (BART model)"),tEo=l(),H2=a("li"),Wse=a("strong"),aEo=o("bigbird_pegasus"),nEo=o(" \u2014 "),Mq=a("a"),sEo=o("BigBirdPegasusForConditionalGeneration"),lEo=o(" (BigBirdPegasus model)"),iEo=l(),U2=a("li"),Hse=a("strong"),dEo=o("blenderbot"),cEo=o(" \u2014 "),Eq=a("a"),fEo=o("BlenderbotForConditionalGeneration"),mEo=o(" (Blenderbot model)"),gEo=l(),J2=a("li"),Use=a("strong"),hEo=o("blenderbot-small"),pEo=o(" \u2014 "),Cq=a("a"),_Eo=o("BlenderbotSmallForConditionalGeneration"),uEo=o(" (BlenderbotSmall model)"),bEo=l(),Y2=a("li"),Jse=a("strong"),FEo=o("encoder-decoder"),vEo=o(" \u2014 "),wq=a("a"),TEo=o("EncoderDecoderModel"),MEo=o(" (Encoder decoder model)"),EEo=l(),K2=a("li"),Yse=a("strong"),CEo=o("fsmt"),wEo=o(" \u2014 "),Aq=a("a"),AEo=o("FSMTForConditionalGeneration"),yEo=o(" (FairSeq Machine-Translation model)"),LEo=l(),Z2=a("li"),Kse=a("strong"),xEo=o("led"),kEo=o(" \u2014 "),yq=a("a"),SEo=o("LEDForConditionalGeneration"),REo=o(" (LED model)"),BEo=l(),e1=a("li"),Zse=a("strong"),PEo=o("longt5"),$Eo=o(" \u2014 "),Lq=a("a"),IEo=o("LongT5ForConditionalGeneration"),qEo=o(" (LongT5 model)"),NEo=l(),o1=a("li"),ele=a("strong"),jEo=o("m2m_100"),DEo=o(" \u2014 "),xq=a("a"),GEo=o("M2M100ForConditionalGeneration"),OEo=o(" (M2M100 model)"),VEo=l(),r1=a("li"),ole=a("strong"),XEo=o("marian"),zEo=o(" \u2014 "),kq=a("a"),QEo=o("MarianMTModel"),WEo=o(" (Marian model)"),HEo=l(),t1=a("li"),rle=a("strong"),UEo=o("mbart"),JEo=o(" \u2014 "),Sq=a("a"),YEo=o("MBartForConditionalGeneration"),KEo=o(" (mBART model)"),ZEo=l(),a1=a("li"),tle=a("strong"),e5o=o("mt5"),o5o=o(" \u2014 "),Rq=a("a"),r5o=o("MT5ForConditionalGeneration"),t5o=o(" (mT5 model)"),a5o=l(),n1=a("li"),ale=a("strong"),n5o=o("pegasus"),s5o=o(" \u2014 "),Bq=a("a"),l5o=o("PegasusForConditionalGeneration"),i5o=o(" (Pegasus model)"),d5o=l(),s1=a("li"),nle=a("strong"),c5o=o("plbart"),f5o=o(" \u2014 "),Pq=a("a"),m5o=o("PLBartForConditionalGeneration"),g5o=o(" (PLBart model)"),h5o=l(),l1=a("li"),sle=a("strong"),p5o=o("prophetnet"),_5o=o(" \u2014 "),$q=a("a"),u5o=o("ProphetNetForConditionalGeneration"),b5o=o(" (ProphetNet model)"),F5o=l(),i1=a("li"),lle=a("strong"),v5o=o("t5"),T5o=o(" \u2014 "),Iq=a("a"),M5o=o("T5ForConditionalGeneration"),E5o=o(" (T5 model)"),C5o=l(),d1=a("li"),ile=a("strong"),w5o=o("tapex"),A5o=o(" \u2014 "),qq=a("a"),y5o=o("BartForConditionalGeneration"),L5o=o(" (TAPEX model)"),x5o=l(),c1=a("li"),dle=a("strong"),k5o=o("xlm-prophetnet"),S5o=o(" \u2014 "),Nq=a("a"),R5o=o("XLMProphetNetForConditionalGeneration"),B5o=o(" (XLMProphetNet model)"),P5o=l(),f1=a("p"),$5o=o("The model is set in evaluation mode by default using "),cle=a("code"),I5o=o("model.eval()"),q5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fle=a("code"),N5o=o("model.train()"),j5o=l(),mle=a("p"),D5o=o("Examples:"),G5o=l(),f(z3.$$.fragment),uBe=l(),md=a("h2"),m1=a("a"),gle=a("span"),f(Q3.$$.fragment),O5o=l(),hle=a("span"),V5o=o("AutoModelForSequenceClassification"),bBe=l(),or=a("div"),f(W3.$$.fragment),X5o=l(),gd=a("p"),z5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jq=a("a"),Q5o=o("from_pretrained()"),W5o=o(" class method or the "),Dq=a("a"),H5o=o("from_config()"),U5o=o(` class
method.`),J5o=l(),H3=a("p"),Y5o=o("This class cannot be instantiated directly using "),ple=a("code"),K5o=o("__init__()"),Z5o=o(" (throws an error)."),e3o=l(),Ur=a("div"),f(U3.$$.fragment),o3o=l(),_le=a("p"),r3o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),t3o=l(),hd=a("p"),a3o=o(`Note:
Loading a model from its configuration file does `),ule=a("strong"),n3o=o("not"),s3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gq=a("a"),l3o=o("from_pretrained()"),i3o=o(" to load the model weights."),d3o=l(),ble=a("p"),c3o=o("Examples:"),f3o=l(),f(J3.$$.fragment),m3o=l(),Ve=a("div"),f(Y3.$$.fragment),g3o=l(),Fle=a("p"),h3o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),p3o=l(),Ua=a("p"),_3o=o("The model class to instantiate is selected based on the "),vle=a("code"),u3o=o("model_type"),b3o=o(` property of the config object (either
passed as an argument or loaded from `),Tle=a("code"),F3o=o("pretrained_model_name_or_path"),v3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mle=a("code"),T3o=o("pretrained_model_name_or_path"),M3o=o(":"),E3o=l(),y=a("ul"),g1=a("li"),Ele=a("strong"),C3o=o("albert"),w3o=o(" \u2014 "),Oq=a("a"),A3o=o("AlbertForSequenceClassification"),y3o=o(" (ALBERT model)"),L3o=l(),h1=a("li"),Cle=a("strong"),x3o=o("bart"),k3o=o(" \u2014 "),Vq=a("a"),S3o=o("BartForSequenceClassification"),R3o=o(" (BART model)"),B3o=l(),p1=a("li"),wle=a("strong"),P3o=o("bert"),$3o=o(" \u2014 "),Xq=a("a"),I3o=o("BertForSequenceClassification"),q3o=o(" (BERT model)"),N3o=l(),_1=a("li"),Ale=a("strong"),j3o=o("big_bird"),D3o=o(" \u2014 "),zq=a("a"),G3o=o("BigBirdForSequenceClassification"),O3o=o(" (BigBird model)"),V3o=l(),u1=a("li"),yle=a("strong"),X3o=o("bigbird_pegasus"),z3o=o(" \u2014 "),Qq=a("a"),Q3o=o("BigBirdPegasusForSequenceClassification"),W3o=o(" (BigBirdPegasus model)"),H3o=l(),b1=a("li"),Lle=a("strong"),U3o=o("camembert"),J3o=o(" \u2014 "),Wq=a("a"),Y3o=o("CamembertForSequenceClassification"),K3o=o(" (CamemBERT model)"),Z3o=l(),F1=a("li"),xle=a("strong"),eCo=o("canine"),oCo=o(" \u2014 "),Hq=a("a"),rCo=o("CanineForSequenceClassification"),tCo=o(" (Canine model)"),aCo=l(),v1=a("li"),kle=a("strong"),nCo=o("convbert"),sCo=o(" \u2014 "),Uq=a("a"),lCo=o("ConvBertForSequenceClassification"),iCo=o(" (ConvBERT model)"),dCo=l(),T1=a("li"),Sle=a("strong"),cCo=o("ctrl"),fCo=o(" \u2014 "),Jq=a("a"),mCo=o("CTRLForSequenceClassification"),gCo=o(" (CTRL model)"),hCo=l(),M1=a("li"),Rle=a("strong"),pCo=o("data2vec-text"),_Co=o(" \u2014 "),Yq=a("a"),uCo=o("Data2VecTextForSequenceClassification"),bCo=o(" (Data2VecText model)"),FCo=l(),E1=a("li"),Ble=a("strong"),vCo=o("deberta"),TCo=o(" \u2014 "),Kq=a("a"),MCo=o("DebertaForSequenceClassification"),ECo=o(" (DeBERTa model)"),CCo=l(),C1=a("li"),Ple=a("strong"),wCo=o("deberta-v2"),ACo=o(" \u2014 "),Zq=a("a"),yCo=o("DebertaV2ForSequenceClassification"),LCo=o(" (DeBERTa-v2 model)"),xCo=l(),w1=a("li"),$le=a("strong"),kCo=o("distilbert"),SCo=o(" \u2014 "),eN=a("a"),RCo=o("DistilBertForSequenceClassification"),BCo=o(" (DistilBERT model)"),PCo=l(),A1=a("li"),Ile=a("strong"),$Co=o("electra"),ICo=o(" \u2014 "),oN=a("a"),qCo=o("ElectraForSequenceClassification"),NCo=o(" (ELECTRA model)"),jCo=l(),y1=a("li"),qle=a("strong"),DCo=o("flaubert"),GCo=o(" \u2014 "),rN=a("a"),OCo=o("FlaubertForSequenceClassification"),VCo=o(" (FlauBERT model)"),XCo=l(),L1=a("li"),Nle=a("strong"),zCo=o("fnet"),QCo=o(" \u2014 "),tN=a("a"),WCo=o("FNetForSequenceClassification"),HCo=o(" (FNet model)"),UCo=l(),x1=a("li"),jle=a("strong"),JCo=o("funnel"),YCo=o(" \u2014 "),aN=a("a"),KCo=o("FunnelForSequenceClassification"),ZCo=o(" (Funnel Transformer model)"),ewo=l(),k1=a("li"),Dle=a("strong"),owo=o("gpt2"),rwo=o(" \u2014 "),nN=a("a"),two=o("GPT2ForSequenceClassification"),awo=o(" (OpenAI GPT-2 model)"),nwo=l(),S1=a("li"),Gle=a("strong"),swo=o("gpt_neo"),lwo=o(" \u2014 "),sN=a("a"),iwo=o("GPTNeoForSequenceClassification"),dwo=o(" (GPT Neo model)"),cwo=l(),R1=a("li"),Ole=a("strong"),fwo=o("gptj"),mwo=o(" \u2014 "),lN=a("a"),gwo=o("GPTJForSequenceClassification"),hwo=o(" (GPT-J model)"),pwo=l(),B1=a("li"),Vle=a("strong"),_wo=o("ibert"),uwo=o(" \u2014 "),iN=a("a"),bwo=o("IBertForSequenceClassification"),Fwo=o(" (I-BERT model)"),vwo=l(),P1=a("li"),Xle=a("strong"),Two=o("layoutlm"),Mwo=o(" \u2014 "),dN=a("a"),Ewo=o("LayoutLMForSequenceClassification"),Cwo=o(" (LayoutLM model)"),wwo=l(),$1=a("li"),zle=a("strong"),Awo=o("layoutlmv2"),ywo=o(" \u2014 "),cN=a("a"),Lwo=o("LayoutLMv2ForSequenceClassification"),xwo=o(" (LayoutLMv2 model)"),kwo=l(),I1=a("li"),Qle=a("strong"),Swo=o("led"),Rwo=o(" \u2014 "),fN=a("a"),Bwo=o("LEDForSequenceClassification"),Pwo=o(" (LED model)"),$wo=l(),q1=a("li"),Wle=a("strong"),Iwo=o("longformer"),qwo=o(" \u2014 "),mN=a("a"),Nwo=o("LongformerForSequenceClassification"),jwo=o(" (Longformer model)"),Dwo=l(),N1=a("li"),Hle=a("strong"),Gwo=o("mbart"),Owo=o(" \u2014 "),gN=a("a"),Vwo=o("MBartForSequenceClassification"),Xwo=o(" (mBART model)"),zwo=l(),j1=a("li"),Ule=a("strong"),Qwo=o("megatron-bert"),Wwo=o(" \u2014 "),hN=a("a"),Hwo=o("MegatronBertForSequenceClassification"),Uwo=o(" (MegatronBert model)"),Jwo=l(),D1=a("li"),Jle=a("strong"),Ywo=o("mobilebert"),Kwo=o(" \u2014 "),pN=a("a"),Zwo=o("MobileBertForSequenceClassification"),eAo=o(" (MobileBERT model)"),oAo=l(),G1=a("li"),Yle=a("strong"),rAo=o("mpnet"),tAo=o(" \u2014 "),_N=a("a"),aAo=o("MPNetForSequenceClassification"),nAo=o(" (MPNet model)"),sAo=l(),O1=a("li"),Kle=a("strong"),lAo=o("nystromformer"),iAo=o(" \u2014 "),uN=a("a"),dAo=o("NystromformerForSequenceClassification"),cAo=o(" (Nystromformer model)"),fAo=l(),V1=a("li"),Zle=a("strong"),mAo=o("openai-gpt"),gAo=o(" \u2014 "),bN=a("a"),hAo=o("OpenAIGPTForSequenceClassification"),pAo=o(" (OpenAI GPT model)"),_Ao=l(),X1=a("li"),eie=a("strong"),uAo=o("perceiver"),bAo=o(" \u2014 "),FN=a("a"),FAo=o("PerceiverForSequenceClassification"),vAo=o(" (Perceiver model)"),TAo=l(),z1=a("li"),oie=a("strong"),MAo=o("plbart"),EAo=o(" \u2014 "),vN=a("a"),CAo=o("PLBartForSequenceClassification"),wAo=o(" (PLBart model)"),AAo=l(),Q1=a("li"),rie=a("strong"),yAo=o("qdqbert"),LAo=o(" \u2014 "),TN=a("a"),xAo=o("QDQBertForSequenceClassification"),kAo=o(" (QDQBert model)"),SAo=l(),W1=a("li"),tie=a("strong"),RAo=o("reformer"),BAo=o(" \u2014 "),MN=a("a"),PAo=o("ReformerForSequenceClassification"),$Ao=o(" (Reformer model)"),IAo=l(),H1=a("li"),aie=a("strong"),qAo=o("rembert"),NAo=o(" \u2014 "),EN=a("a"),jAo=o("RemBertForSequenceClassification"),DAo=o(" (RemBERT model)"),GAo=l(),U1=a("li"),nie=a("strong"),OAo=o("roberta"),VAo=o(" \u2014 "),CN=a("a"),XAo=o("RobertaForSequenceClassification"),zAo=o(" (RoBERTa model)"),QAo=l(),J1=a("li"),sie=a("strong"),WAo=o("roformer"),HAo=o(" \u2014 "),wN=a("a"),UAo=o("RoFormerForSequenceClassification"),JAo=o(" (RoFormer model)"),YAo=l(),Y1=a("li"),lie=a("strong"),KAo=o("squeezebert"),ZAo=o(" \u2014 "),AN=a("a"),e0o=o("SqueezeBertForSequenceClassification"),o0o=o(" (SqueezeBERT model)"),r0o=l(),K1=a("li"),iie=a("strong"),t0o=o("tapas"),a0o=o(" \u2014 "),yN=a("a"),n0o=o("TapasForSequenceClassification"),s0o=o(" (TAPAS model)"),l0o=l(),Z1=a("li"),die=a("strong"),i0o=o("tapex"),d0o=o(" \u2014 "),LN=a("a"),c0o=o("BartForSequenceClassification"),f0o=o(" (TAPEX model)"),m0o=l(),eb=a("li"),cie=a("strong"),g0o=o("transfo-xl"),h0o=o(" \u2014 "),xN=a("a"),p0o=o("TransfoXLForSequenceClassification"),_0o=o(" (Transformer-XL model)"),u0o=l(),ob=a("li"),fie=a("strong"),b0o=o("xlm"),F0o=o(" \u2014 "),kN=a("a"),v0o=o("XLMForSequenceClassification"),T0o=o(" (XLM model)"),M0o=l(),rb=a("li"),mie=a("strong"),E0o=o("xlm-roberta"),C0o=o(" \u2014 "),SN=a("a"),w0o=o("XLMRobertaForSequenceClassification"),A0o=o(" (XLM-RoBERTa model)"),y0o=l(),tb=a("li"),gie=a("strong"),L0o=o("xlm-roberta-xl"),x0o=o(" \u2014 "),RN=a("a"),k0o=o("XLMRobertaXLForSequenceClassification"),S0o=o(" (XLM-RoBERTa-XL model)"),R0o=l(),ab=a("li"),hie=a("strong"),B0o=o("xlnet"),P0o=o(" \u2014 "),BN=a("a"),$0o=o("XLNetForSequenceClassification"),I0o=o(" (XLNet model)"),q0o=l(),nb=a("li"),pie=a("strong"),N0o=o("yoso"),j0o=o(" \u2014 "),PN=a("a"),D0o=o("YosoForSequenceClassification"),G0o=o(" (YOSO model)"),O0o=l(),sb=a("p"),V0o=o("The model is set in evaluation mode by default using "),_ie=a("code"),X0o=o("model.eval()"),z0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uie=a("code"),Q0o=o("model.train()"),W0o=l(),bie=a("p"),H0o=o("Examples:"),U0o=l(),f(K3.$$.fragment),FBe=l(),pd=a("h2"),lb=a("a"),Fie=a("span"),f(Z3.$$.fragment),J0o=l(),vie=a("span"),Y0o=o("AutoModelForMultipleChoice"),vBe=l(),rr=a("div"),f(eC.$$.fragment),K0o=l(),_d=a("p"),Z0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$N=a("a"),eyo=o("from_pretrained()"),oyo=o(" class method or the "),IN=a("a"),ryo=o("from_config()"),tyo=o(` class
method.`),ayo=l(),oC=a("p"),nyo=o("This class cannot be instantiated directly using "),Tie=a("code"),syo=o("__init__()"),lyo=o(" (throws an error)."),iyo=l(),Jr=a("div"),f(rC.$$.fragment),dyo=l(),Mie=a("p"),cyo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fyo=l(),ud=a("p"),myo=o(`Note:
Loading a model from its configuration file does `),Eie=a("strong"),gyo=o("not"),hyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qN=a("a"),pyo=o("from_pretrained()"),_yo=o(" to load the model weights."),uyo=l(),Cie=a("p"),byo=o("Examples:"),Fyo=l(),f(tC.$$.fragment),vyo=l(),Xe=a("div"),f(aC.$$.fragment),Tyo=l(),wie=a("p"),Myo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Eyo=l(),Ja=a("p"),Cyo=o("The model class to instantiate is selected based on the "),Aie=a("code"),wyo=o("model_type"),Ayo=o(` property of the config object (either
passed as an argument or loaded from `),yie=a("code"),yyo=o("pretrained_model_name_or_path"),Lyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lie=a("code"),xyo=o("pretrained_model_name_or_path"),kyo=o(":"),Syo=l(),G=a("ul"),ib=a("li"),xie=a("strong"),Ryo=o("albert"),Byo=o(" \u2014 "),NN=a("a"),Pyo=o("AlbertForMultipleChoice"),$yo=o(" (ALBERT model)"),Iyo=l(),db=a("li"),kie=a("strong"),qyo=o("bert"),Nyo=o(" \u2014 "),jN=a("a"),jyo=o("BertForMultipleChoice"),Dyo=o(" (BERT model)"),Gyo=l(),cb=a("li"),Sie=a("strong"),Oyo=o("big_bird"),Vyo=o(" \u2014 "),DN=a("a"),Xyo=o("BigBirdForMultipleChoice"),zyo=o(" (BigBird model)"),Qyo=l(),fb=a("li"),Rie=a("strong"),Wyo=o("camembert"),Hyo=o(" \u2014 "),GN=a("a"),Uyo=o("CamembertForMultipleChoice"),Jyo=o(" (CamemBERT model)"),Yyo=l(),mb=a("li"),Bie=a("strong"),Kyo=o("canine"),Zyo=o(" \u2014 "),ON=a("a"),eLo=o("CanineForMultipleChoice"),oLo=o(" (Canine model)"),rLo=l(),gb=a("li"),Pie=a("strong"),tLo=o("convbert"),aLo=o(" \u2014 "),VN=a("a"),nLo=o("ConvBertForMultipleChoice"),sLo=o(" (ConvBERT model)"),lLo=l(),hb=a("li"),$ie=a("strong"),iLo=o("data2vec-text"),dLo=o(" \u2014 "),XN=a("a"),cLo=o("Data2VecTextForMultipleChoice"),fLo=o(" (Data2VecText model)"),mLo=l(),pb=a("li"),Iie=a("strong"),gLo=o("distilbert"),hLo=o(" \u2014 "),zN=a("a"),pLo=o("DistilBertForMultipleChoice"),_Lo=o(" (DistilBERT model)"),uLo=l(),_b=a("li"),qie=a("strong"),bLo=o("electra"),FLo=o(" \u2014 "),QN=a("a"),vLo=o("ElectraForMultipleChoice"),TLo=o(" (ELECTRA model)"),MLo=l(),ub=a("li"),Nie=a("strong"),ELo=o("flaubert"),CLo=o(" \u2014 "),WN=a("a"),wLo=o("FlaubertForMultipleChoice"),ALo=o(" (FlauBERT model)"),yLo=l(),bb=a("li"),jie=a("strong"),LLo=o("fnet"),xLo=o(" \u2014 "),HN=a("a"),kLo=o("FNetForMultipleChoice"),SLo=o(" (FNet model)"),RLo=l(),Fb=a("li"),Die=a("strong"),BLo=o("funnel"),PLo=o(" \u2014 "),UN=a("a"),$Lo=o("FunnelForMultipleChoice"),ILo=o(" (Funnel Transformer model)"),qLo=l(),vb=a("li"),Gie=a("strong"),NLo=o("ibert"),jLo=o(" \u2014 "),JN=a("a"),DLo=o("IBertForMultipleChoice"),GLo=o(" (I-BERT model)"),OLo=l(),Tb=a("li"),Oie=a("strong"),VLo=o("longformer"),XLo=o(" \u2014 "),YN=a("a"),zLo=o("LongformerForMultipleChoice"),QLo=o(" (Longformer model)"),WLo=l(),Mb=a("li"),Vie=a("strong"),HLo=o("megatron-bert"),ULo=o(" \u2014 "),KN=a("a"),JLo=o("MegatronBertForMultipleChoice"),YLo=o(" (MegatronBert model)"),KLo=l(),Eb=a("li"),Xie=a("strong"),ZLo=o("mobilebert"),e8o=o(" \u2014 "),ZN=a("a"),o8o=o("MobileBertForMultipleChoice"),r8o=o(" (MobileBERT model)"),t8o=l(),Cb=a("li"),zie=a("strong"),a8o=o("mpnet"),n8o=o(" \u2014 "),ej=a("a"),s8o=o("MPNetForMultipleChoice"),l8o=o(" (MPNet model)"),i8o=l(),wb=a("li"),Qie=a("strong"),d8o=o("nystromformer"),c8o=o(" \u2014 "),oj=a("a"),f8o=o("NystromformerForMultipleChoice"),m8o=o(" (Nystromformer model)"),g8o=l(),Ab=a("li"),Wie=a("strong"),h8o=o("qdqbert"),p8o=o(" \u2014 "),rj=a("a"),_8o=o("QDQBertForMultipleChoice"),u8o=o(" (QDQBert model)"),b8o=l(),yb=a("li"),Hie=a("strong"),F8o=o("rembert"),v8o=o(" \u2014 "),tj=a("a"),T8o=o("RemBertForMultipleChoice"),M8o=o(" (RemBERT model)"),E8o=l(),Lb=a("li"),Uie=a("strong"),C8o=o("roberta"),w8o=o(" \u2014 "),aj=a("a"),A8o=o("RobertaForMultipleChoice"),y8o=o(" (RoBERTa model)"),L8o=l(),xb=a("li"),Jie=a("strong"),x8o=o("roformer"),k8o=o(" \u2014 "),nj=a("a"),S8o=o("RoFormerForMultipleChoice"),R8o=o(" (RoFormer model)"),B8o=l(),kb=a("li"),Yie=a("strong"),P8o=o("squeezebert"),$8o=o(" \u2014 "),sj=a("a"),I8o=o("SqueezeBertForMultipleChoice"),q8o=o(" (SqueezeBERT model)"),N8o=l(),Sb=a("li"),Kie=a("strong"),j8o=o("xlm"),D8o=o(" \u2014 "),lj=a("a"),G8o=o("XLMForMultipleChoice"),O8o=o(" (XLM model)"),V8o=l(),Rb=a("li"),Zie=a("strong"),X8o=o("xlm-roberta"),z8o=o(" \u2014 "),ij=a("a"),Q8o=o("XLMRobertaForMultipleChoice"),W8o=o(" (XLM-RoBERTa model)"),H8o=l(),Bb=a("li"),ede=a("strong"),U8o=o("xlm-roberta-xl"),J8o=o(" \u2014 "),dj=a("a"),Y8o=o("XLMRobertaXLForMultipleChoice"),K8o=o(" (XLM-RoBERTa-XL model)"),Z8o=l(),Pb=a("li"),ode=a("strong"),exo=o("xlnet"),oxo=o(" \u2014 "),cj=a("a"),rxo=o("XLNetForMultipleChoice"),txo=o(" (XLNet model)"),axo=l(),$b=a("li"),rde=a("strong"),nxo=o("yoso"),sxo=o(" \u2014 "),fj=a("a"),lxo=o("YosoForMultipleChoice"),ixo=o(" (YOSO model)"),dxo=l(),Ib=a("p"),cxo=o("The model is set in evaluation mode by default using "),tde=a("code"),fxo=o("model.eval()"),mxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ade=a("code"),gxo=o("model.train()"),hxo=l(),nde=a("p"),pxo=o("Examples:"),_xo=l(),f(nC.$$.fragment),TBe=l(),bd=a("h2"),qb=a("a"),sde=a("span"),f(sC.$$.fragment),uxo=l(),lde=a("span"),bxo=o("AutoModelForNextSentencePrediction"),MBe=l(),tr=a("div"),f(lC.$$.fragment),Fxo=l(),Fd=a("p"),vxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mj=a("a"),Txo=o("from_pretrained()"),Mxo=o(" class method or the "),gj=a("a"),Exo=o("from_config()"),Cxo=o(` class
method.`),wxo=l(),iC=a("p"),Axo=o("This class cannot be instantiated directly using "),ide=a("code"),yxo=o("__init__()"),Lxo=o(" (throws an error)."),xxo=l(),Yr=a("div"),f(dC.$$.fragment),kxo=l(),dde=a("p"),Sxo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Rxo=l(),vd=a("p"),Bxo=o(`Note:
Loading a model from its configuration file does `),cde=a("strong"),Pxo=o("not"),$xo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hj=a("a"),Ixo=o("from_pretrained()"),qxo=o(" to load the model weights."),Nxo=l(),fde=a("p"),jxo=o("Examples:"),Dxo=l(),f(cC.$$.fragment),Gxo=l(),ze=a("div"),f(fC.$$.fragment),Oxo=l(),mde=a("p"),Vxo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Xxo=l(),Ya=a("p"),zxo=o("The model class to instantiate is selected based on the "),gde=a("code"),Qxo=o("model_type"),Wxo=o(` property of the config object (either
passed as an argument or loaded from `),hde=a("code"),Hxo=o("pretrained_model_name_or_path"),Uxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=a("code"),Jxo=o("pretrained_model_name_or_path"),Yxo=o(":"),Kxo=l(),da=a("ul"),Nb=a("li"),_de=a("strong"),Zxo=o("bert"),eko=o(" \u2014 "),pj=a("a"),oko=o("BertForNextSentencePrediction"),rko=o(" (BERT model)"),tko=l(),jb=a("li"),ude=a("strong"),ako=o("fnet"),nko=o(" \u2014 "),_j=a("a"),sko=o("FNetForNextSentencePrediction"),lko=o(" (FNet model)"),iko=l(),Db=a("li"),bde=a("strong"),dko=o("megatron-bert"),cko=o(" \u2014 "),uj=a("a"),fko=o("MegatronBertForNextSentencePrediction"),mko=o(" (MegatronBert model)"),gko=l(),Gb=a("li"),Fde=a("strong"),hko=o("mobilebert"),pko=o(" \u2014 "),bj=a("a"),_ko=o("MobileBertForNextSentencePrediction"),uko=o(" (MobileBERT model)"),bko=l(),Ob=a("li"),vde=a("strong"),Fko=o("qdqbert"),vko=o(" \u2014 "),Fj=a("a"),Tko=o("QDQBertForNextSentencePrediction"),Mko=o(" (QDQBert model)"),Eko=l(),Vb=a("p"),Cko=o("The model is set in evaluation mode by default using "),Tde=a("code"),wko=o("model.eval()"),Ako=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mde=a("code"),yko=o("model.train()"),Lko=l(),Ede=a("p"),xko=o("Examples:"),kko=l(),f(mC.$$.fragment),EBe=l(),Td=a("h2"),Xb=a("a"),Cde=a("span"),f(gC.$$.fragment),Sko=l(),wde=a("span"),Rko=o("AutoModelForTokenClassification"),CBe=l(),ar=a("div"),f(hC.$$.fragment),Bko=l(),Md=a("p"),Pko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vj=a("a"),$ko=o("from_pretrained()"),Iko=o(" class method or the "),Tj=a("a"),qko=o("from_config()"),Nko=o(` class
method.`),jko=l(),pC=a("p"),Dko=o("This class cannot be instantiated directly using "),Ade=a("code"),Gko=o("__init__()"),Oko=o(" (throws an error)."),Vko=l(),Kr=a("div"),f(_C.$$.fragment),Xko=l(),yde=a("p"),zko=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Qko=l(),Ed=a("p"),Wko=o(`Note:
Loading a model from its configuration file does `),Lde=a("strong"),Hko=o("not"),Uko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mj=a("a"),Jko=o("from_pretrained()"),Yko=o(" to load the model weights."),Kko=l(),xde=a("p"),Zko=o("Examples:"),eSo=l(),f(uC.$$.fragment),oSo=l(),Qe=a("div"),f(bC.$$.fragment),rSo=l(),kde=a("p"),tSo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),aSo=l(),Ka=a("p"),nSo=o("The model class to instantiate is selected based on the "),Sde=a("code"),sSo=o("model_type"),lSo=o(` property of the config object (either
passed as an argument or loaded from `),Rde=a("code"),iSo=o("pretrained_model_name_or_path"),dSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bde=a("code"),cSo=o("pretrained_model_name_or_path"),fSo=o(":"),mSo=l(),j=a("ul"),zb=a("li"),Pde=a("strong"),gSo=o("albert"),hSo=o(" \u2014 "),Ej=a("a"),pSo=o("AlbertForTokenClassification"),_So=o(" (ALBERT model)"),uSo=l(),Qb=a("li"),$de=a("strong"),bSo=o("bert"),FSo=o(" \u2014 "),Cj=a("a"),vSo=o("BertForTokenClassification"),TSo=o(" (BERT model)"),MSo=l(),Wb=a("li"),Ide=a("strong"),ESo=o("big_bird"),CSo=o(" \u2014 "),wj=a("a"),wSo=o("BigBirdForTokenClassification"),ASo=o(" (BigBird model)"),ySo=l(),Hb=a("li"),qde=a("strong"),LSo=o("camembert"),xSo=o(" \u2014 "),Aj=a("a"),kSo=o("CamembertForTokenClassification"),SSo=o(" (CamemBERT model)"),RSo=l(),Ub=a("li"),Nde=a("strong"),BSo=o("canine"),PSo=o(" \u2014 "),yj=a("a"),$So=o("CanineForTokenClassification"),ISo=o(" (Canine model)"),qSo=l(),Jb=a("li"),jde=a("strong"),NSo=o("convbert"),jSo=o(" \u2014 "),Lj=a("a"),DSo=o("ConvBertForTokenClassification"),GSo=o(" (ConvBERT model)"),OSo=l(),Yb=a("li"),Dde=a("strong"),VSo=o("data2vec-text"),XSo=o(" \u2014 "),xj=a("a"),zSo=o("Data2VecTextForTokenClassification"),QSo=o(" (Data2VecText model)"),WSo=l(),Kb=a("li"),Gde=a("strong"),HSo=o("deberta"),USo=o(" \u2014 "),kj=a("a"),JSo=o("DebertaForTokenClassification"),YSo=o(" (DeBERTa model)"),KSo=l(),Zb=a("li"),Ode=a("strong"),ZSo=o("deberta-v2"),eRo=o(" \u2014 "),Sj=a("a"),oRo=o("DebertaV2ForTokenClassification"),rRo=o(" (DeBERTa-v2 model)"),tRo=l(),e6=a("li"),Vde=a("strong"),aRo=o("distilbert"),nRo=o(" \u2014 "),Rj=a("a"),sRo=o("DistilBertForTokenClassification"),lRo=o(" (DistilBERT model)"),iRo=l(),o6=a("li"),Xde=a("strong"),dRo=o("electra"),cRo=o(" \u2014 "),Bj=a("a"),fRo=o("ElectraForTokenClassification"),mRo=o(" (ELECTRA model)"),gRo=l(),r6=a("li"),zde=a("strong"),hRo=o("flaubert"),pRo=o(" \u2014 "),Pj=a("a"),_Ro=o("FlaubertForTokenClassification"),uRo=o(" (FlauBERT model)"),bRo=l(),t6=a("li"),Qde=a("strong"),FRo=o("fnet"),vRo=o(" \u2014 "),$j=a("a"),TRo=o("FNetForTokenClassification"),MRo=o(" (FNet model)"),ERo=l(),a6=a("li"),Wde=a("strong"),CRo=o("funnel"),wRo=o(" \u2014 "),Ij=a("a"),ARo=o("FunnelForTokenClassification"),yRo=o(" (Funnel Transformer model)"),LRo=l(),n6=a("li"),Hde=a("strong"),xRo=o("gpt2"),kRo=o(" \u2014 "),qj=a("a"),SRo=o("GPT2ForTokenClassification"),RRo=o(" (OpenAI GPT-2 model)"),BRo=l(),s6=a("li"),Ude=a("strong"),PRo=o("ibert"),$Ro=o(" \u2014 "),Nj=a("a"),IRo=o("IBertForTokenClassification"),qRo=o(" (I-BERT model)"),NRo=l(),l6=a("li"),Jde=a("strong"),jRo=o("layoutlm"),DRo=o(" \u2014 "),jj=a("a"),GRo=o("LayoutLMForTokenClassification"),ORo=o(" (LayoutLM model)"),VRo=l(),i6=a("li"),Yde=a("strong"),XRo=o("layoutlmv2"),zRo=o(" \u2014 "),Dj=a("a"),QRo=o("LayoutLMv2ForTokenClassification"),WRo=o(" (LayoutLMv2 model)"),HRo=l(),d6=a("li"),Kde=a("strong"),URo=o("longformer"),JRo=o(" \u2014 "),Gj=a("a"),YRo=o("LongformerForTokenClassification"),KRo=o(" (Longformer model)"),ZRo=l(),c6=a("li"),Zde=a("strong"),eBo=o("megatron-bert"),oBo=o(" \u2014 "),Oj=a("a"),rBo=o("MegatronBertForTokenClassification"),tBo=o(" (MegatronBert model)"),aBo=l(),f6=a("li"),ece=a("strong"),nBo=o("mobilebert"),sBo=o(" \u2014 "),Vj=a("a"),lBo=o("MobileBertForTokenClassification"),iBo=o(" (MobileBERT model)"),dBo=l(),m6=a("li"),oce=a("strong"),cBo=o("mpnet"),fBo=o(" \u2014 "),Xj=a("a"),mBo=o("MPNetForTokenClassification"),gBo=o(" (MPNet model)"),hBo=l(),g6=a("li"),rce=a("strong"),pBo=o("nystromformer"),_Bo=o(" \u2014 "),zj=a("a"),uBo=o("NystromformerForTokenClassification"),bBo=o(" (Nystromformer model)"),FBo=l(),h6=a("li"),tce=a("strong"),vBo=o("qdqbert"),TBo=o(" \u2014 "),Qj=a("a"),MBo=o("QDQBertForTokenClassification"),EBo=o(" (QDQBert model)"),CBo=l(),p6=a("li"),ace=a("strong"),wBo=o("rembert"),ABo=o(" \u2014 "),Wj=a("a"),yBo=o("RemBertForTokenClassification"),LBo=o(" (RemBERT model)"),xBo=l(),_6=a("li"),nce=a("strong"),kBo=o("roberta"),SBo=o(" \u2014 "),Hj=a("a"),RBo=o("RobertaForTokenClassification"),BBo=o(" (RoBERTa model)"),PBo=l(),u6=a("li"),sce=a("strong"),$Bo=o("roformer"),IBo=o(" \u2014 "),Uj=a("a"),qBo=o("RoFormerForTokenClassification"),NBo=o(" (RoFormer model)"),jBo=l(),b6=a("li"),lce=a("strong"),DBo=o("squeezebert"),GBo=o(" \u2014 "),Jj=a("a"),OBo=o("SqueezeBertForTokenClassification"),VBo=o(" (SqueezeBERT model)"),XBo=l(),F6=a("li"),ice=a("strong"),zBo=o("xlm"),QBo=o(" \u2014 "),Yj=a("a"),WBo=o("XLMForTokenClassification"),HBo=o(" (XLM model)"),UBo=l(),v6=a("li"),dce=a("strong"),JBo=o("xlm-roberta"),YBo=o(" \u2014 "),Kj=a("a"),KBo=o("XLMRobertaForTokenClassification"),ZBo=o(" (XLM-RoBERTa model)"),ePo=l(),T6=a("li"),cce=a("strong"),oPo=o("xlm-roberta-xl"),rPo=o(" \u2014 "),Zj=a("a"),tPo=o("XLMRobertaXLForTokenClassification"),aPo=o(" (XLM-RoBERTa-XL model)"),nPo=l(),M6=a("li"),fce=a("strong"),sPo=o("xlnet"),lPo=o(" \u2014 "),eD=a("a"),iPo=o("XLNetForTokenClassification"),dPo=o(" (XLNet model)"),cPo=l(),E6=a("li"),mce=a("strong"),fPo=o("yoso"),mPo=o(" \u2014 "),oD=a("a"),gPo=o("YosoForTokenClassification"),hPo=o(" (YOSO model)"),pPo=l(),C6=a("p"),_Po=o("The model is set in evaluation mode by default using "),gce=a("code"),uPo=o("model.eval()"),bPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hce=a("code"),FPo=o("model.train()"),vPo=l(),pce=a("p"),TPo=o("Examples:"),MPo=l(),f(FC.$$.fragment),wBe=l(),Cd=a("h2"),w6=a("a"),_ce=a("span"),f(vC.$$.fragment),EPo=l(),uce=a("span"),CPo=o("AutoModelForQuestionAnswering"),ABe=l(),nr=a("div"),f(TC.$$.fragment),wPo=l(),wd=a("p"),APo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rD=a("a"),yPo=o("from_pretrained()"),LPo=o(" class method or the "),tD=a("a"),xPo=o("from_config()"),kPo=o(` class
method.`),SPo=l(),MC=a("p"),RPo=o("This class cannot be instantiated directly using "),bce=a("code"),BPo=o("__init__()"),PPo=o(" (throws an error)."),$Po=l(),Zr=a("div"),f(EC.$$.fragment),IPo=l(),Fce=a("p"),qPo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NPo=l(),Ad=a("p"),jPo=o(`Note:
Loading a model from its configuration file does `),vce=a("strong"),DPo=o("not"),GPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aD=a("a"),OPo=o("from_pretrained()"),VPo=o(" to load the model weights."),XPo=l(),Tce=a("p"),zPo=o("Examples:"),QPo=l(),f(CC.$$.fragment),WPo=l(),We=a("div"),f(wC.$$.fragment),HPo=l(),Mce=a("p"),UPo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JPo=l(),Za=a("p"),YPo=o("The model class to instantiate is selected based on the "),Ece=a("code"),KPo=o("model_type"),ZPo=o(` property of the config object (either
passed as an argument or loaded from `),Cce=a("code"),e$o=o("pretrained_model_name_or_path"),o$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wce=a("code"),r$o=o("pretrained_model_name_or_path"),t$o=o(":"),a$o=l(),R=a("ul"),A6=a("li"),Ace=a("strong"),n$o=o("albert"),s$o=o(" \u2014 "),nD=a("a"),l$o=o("AlbertForQuestionAnswering"),i$o=o(" (ALBERT model)"),d$o=l(),y6=a("li"),yce=a("strong"),c$o=o("bart"),f$o=o(" \u2014 "),sD=a("a"),m$o=o("BartForQuestionAnswering"),g$o=o(" (BART model)"),h$o=l(),L6=a("li"),Lce=a("strong"),p$o=o("bert"),_$o=o(" \u2014 "),lD=a("a"),u$o=o("BertForQuestionAnswering"),b$o=o(" (BERT model)"),F$o=l(),x6=a("li"),xce=a("strong"),v$o=o("big_bird"),T$o=o(" \u2014 "),iD=a("a"),M$o=o("BigBirdForQuestionAnswering"),E$o=o(" (BigBird model)"),C$o=l(),k6=a("li"),kce=a("strong"),w$o=o("bigbird_pegasus"),A$o=o(" \u2014 "),dD=a("a"),y$o=o("BigBirdPegasusForQuestionAnswering"),L$o=o(" (BigBirdPegasus model)"),x$o=l(),S6=a("li"),Sce=a("strong"),k$o=o("camembert"),S$o=o(" \u2014 "),cD=a("a"),R$o=o("CamembertForQuestionAnswering"),B$o=o(" (CamemBERT model)"),P$o=l(),R6=a("li"),Rce=a("strong"),$$o=o("canine"),I$o=o(" \u2014 "),fD=a("a"),q$o=o("CanineForQuestionAnswering"),N$o=o(" (Canine model)"),j$o=l(),B6=a("li"),Bce=a("strong"),D$o=o("convbert"),G$o=o(" \u2014 "),mD=a("a"),O$o=o("ConvBertForQuestionAnswering"),V$o=o(" (ConvBERT model)"),X$o=l(),P6=a("li"),Pce=a("strong"),z$o=o("data2vec-text"),Q$o=o(" \u2014 "),gD=a("a"),W$o=o("Data2VecTextForQuestionAnswering"),H$o=o(" (Data2VecText model)"),U$o=l(),$6=a("li"),$ce=a("strong"),J$o=o("deberta"),Y$o=o(" \u2014 "),hD=a("a"),K$o=o("DebertaForQuestionAnswering"),Z$o=o(" (DeBERTa model)"),eIo=l(),I6=a("li"),Ice=a("strong"),oIo=o("deberta-v2"),rIo=o(" \u2014 "),pD=a("a"),tIo=o("DebertaV2ForQuestionAnswering"),aIo=o(" (DeBERTa-v2 model)"),nIo=l(),q6=a("li"),qce=a("strong"),sIo=o("distilbert"),lIo=o(" \u2014 "),_D=a("a"),iIo=o("DistilBertForQuestionAnswering"),dIo=o(" (DistilBERT model)"),cIo=l(),N6=a("li"),Nce=a("strong"),fIo=o("electra"),mIo=o(" \u2014 "),uD=a("a"),gIo=o("ElectraForQuestionAnswering"),hIo=o(" (ELECTRA model)"),pIo=l(),j6=a("li"),jce=a("strong"),_Io=o("flaubert"),uIo=o(" \u2014 "),bD=a("a"),bIo=o("FlaubertForQuestionAnsweringSimple"),FIo=o(" (FlauBERT model)"),vIo=l(),D6=a("li"),Dce=a("strong"),TIo=o("fnet"),MIo=o(" \u2014 "),FD=a("a"),EIo=o("FNetForQuestionAnswering"),CIo=o(" (FNet model)"),wIo=l(),G6=a("li"),Gce=a("strong"),AIo=o("funnel"),yIo=o(" \u2014 "),vD=a("a"),LIo=o("FunnelForQuestionAnswering"),xIo=o(" (Funnel Transformer model)"),kIo=l(),O6=a("li"),Oce=a("strong"),SIo=o("gptj"),RIo=o(" \u2014 "),TD=a("a"),BIo=o("GPTJForQuestionAnswering"),PIo=o(" (GPT-J model)"),$Io=l(),V6=a("li"),Vce=a("strong"),IIo=o("ibert"),qIo=o(" \u2014 "),MD=a("a"),NIo=o("IBertForQuestionAnswering"),jIo=o(" (I-BERT model)"),DIo=l(),X6=a("li"),Xce=a("strong"),GIo=o("layoutlmv2"),OIo=o(" \u2014 "),ED=a("a"),VIo=o("LayoutLMv2ForQuestionAnswering"),XIo=o(" (LayoutLMv2 model)"),zIo=l(),z6=a("li"),zce=a("strong"),QIo=o("led"),WIo=o(" \u2014 "),CD=a("a"),HIo=o("LEDForQuestionAnswering"),UIo=o(" (LED model)"),JIo=l(),Q6=a("li"),Qce=a("strong"),YIo=o("longformer"),KIo=o(" \u2014 "),wD=a("a"),ZIo=o("LongformerForQuestionAnswering"),eqo=o(" (Longformer model)"),oqo=l(),W6=a("li"),Wce=a("strong"),rqo=o("lxmert"),tqo=o(" \u2014 "),AD=a("a"),aqo=o("LxmertForQuestionAnswering"),nqo=o(" (LXMERT model)"),sqo=l(),H6=a("li"),Hce=a("strong"),lqo=o("mbart"),iqo=o(" \u2014 "),yD=a("a"),dqo=o("MBartForQuestionAnswering"),cqo=o(" (mBART model)"),fqo=l(),U6=a("li"),Uce=a("strong"),mqo=o("megatron-bert"),gqo=o(" \u2014 "),LD=a("a"),hqo=o("MegatronBertForQuestionAnswering"),pqo=o(" (MegatronBert model)"),_qo=l(),J6=a("li"),Jce=a("strong"),uqo=o("mobilebert"),bqo=o(" \u2014 "),xD=a("a"),Fqo=o("MobileBertForQuestionAnswering"),vqo=o(" (MobileBERT model)"),Tqo=l(),Y6=a("li"),Yce=a("strong"),Mqo=o("mpnet"),Eqo=o(" \u2014 "),kD=a("a"),Cqo=o("MPNetForQuestionAnswering"),wqo=o(" (MPNet model)"),Aqo=l(),K6=a("li"),Kce=a("strong"),yqo=o("nystromformer"),Lqo=o(" \u2014 "),SD=a("a"),xqo=o("NystromformerForQuestionAnswering"),kqo=o(" (Nystromformer model)"),Sqo=l(),Z6=a("li"),Zce=a("strong"),Rqo=o("qdqbert"),Bqo=o(" \u2014 "),RD=a("a"),Pqo=o("QDQBertForQuestionAnswering"),$qo=o(" (QDQBert model)"),Iqo=l(),eF=a("li"),efe=a("strong"),qqo=o("reformer"),Nqo=o(" \u2014 "),BD=a("a"),jqo=o("ReformerForQuestionAnswering"),Dqo=o(" (Reformer model)"),Gqo=l(),oF=a("li"),ofe=a("strong"),Oqo=o("rembert"),Vqo=o(" \u2014 "),PD=a("a"),Xqo=o("RemBertForQuestionAnswering"),zqo=o(" (RemBERT model)"),Qqo=l(),rF=a("li"),rfe=a("strong"),Wqo=o("roberta"),Hqo=o(" \u2014 "),$D=a("a"),Uqo=o("RobertaForQuestionAnswering"),Jqo=o(" (RoBERTa model)"),Yqo=l(),tF=a("li"),tfe=a("strong"),Kqo=o("roformer"),Zqo=o(" \u2014 "),ID=a("a"),eNo=o("RoFormerForQuestionAnswering"),oNo=o(" (RoFormer model)"),rNo=l(),aF=a("li"),afe=a("strong"),tNo=o("splinter"),aNo=o(" \u2014 "),qD=a("a"),nNo=o("SplinterForQuestionAnswering"),sNo=o(" (Splinter model)"),lNo=l(),nF=a("li"),nfe=a("strong"),iNo=o("squeezebert"),dNo=o(" \u2014 "),ND=a("a"),cNo=o("SqueezeBertForQuestionAnswering"),fNo=o(" (SqueezeBERT model)"),mNo=l(),sF=a("li"),sfe=a("strong"),gNo=o("xlm"),hNo=o(" \u2014 "),jD=a("a"),pNo=o("XLMForQuestionAnsweringSimple"),_No=o(" (XLM model)"),uNo=l(),lF=a("li"),lfe=a("strong"),bNo=o("xlm-roberta"),FNo=o(" \u2014 "),DD=a("a"),vNo=o("XLMRobertaForQuestionAnswering"),TNo=o(" (XLM-RoBERTa model)"),MNo=l(),iF=a("li"),ife=a("strong"),ENo=o("xlm-roberta-xl"),CNo=o(" \u2014 "),GD=a("a"),wNo=o("XLMRobertaXLForQuestionAnswering"),ANo=o(" (XLM-RoBERTa-XL model)"),yNo=l(),dF=a("li"),dfe=a("strong"),LNo=o("xlnet"),xNo=o(" \u2014 "),OD=a("a"),kNo=o("XLNetForQuestionAnsweringSimple"),SNo=o(" (XLNet model)"),RNo=l(),cF=a("li"),cfe=a("strong"),BNo=o("yoso"),PNo=o(" \u2014 "),VD=a("a"),$No=o("YosoForQuestionAnswering"),INo=o(" (YOSO model)"),qNo=l(),fF=a("p"),NNo=o("The model is set in evaluation mode by default using "),ffe=a("code"),jNo=o("model.eval()"),DNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mfe=a("code"),GNo=o("model.train()"),ONo=l(),gfe=a("p"),VNo=o("Examples:"),XNo=l(),f(AC.$$.fragment),yBe=l(),yd=a("h2"),mF=a("a"),hfe=a("span"),f(yC.$$.fragment),zNo=l(),pfe=a("span"),QNo=o("AutoModelForTableQuestionAnswering"),LBe=l(),sr=a("div"),f(LC.$$.fragment),WNo=l(),Ld=a("p"),HNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),XD=a("a"),UNo=o("from_pretrained()"),JNo=o(" class method or the "),zD=a("a"),YNo=o("from_config()"),KNo=o(` class
method.`),ZNo=l(),xC=a("p"),ejo=o("This class cannot be instantiated directly using "),_fe=a("code"),ojo=o("__init__()"),rjo=o(" (throws an error)."),tjo=l(),et=a("div"),f(kC.$$.fragment),ajo=l(),ufe=a("p"),njo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),sjo=l(),xd=a("p"),ljo=o(`Note:
Loading a model from its configuration file does `),bfe=a("strong"),ijo=o("not"),djo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QD=a("a"),cjo=o("from_pretrained()"),fjo=o(" to load the model weights."),mjo=l(),Ffe=a("p"),gjo=o("Examples:"),hjo=l(),f(SC.$$.fragment),pjo=l(),He=a("div"),f(RC.$$.fragment),_jo=l(),vfe=a("p"),ujo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bjo=l(),en=a("p"),Fjo=o("The model class to instantiate is selected based on the "),Tfe=a("code"),vjo=o("model_type"),Tjo=o(` property of the config object (either
passed as an argument or loaded from `),Mfe=a("code"),Mjo=o("pretrained_model_name_or_path"),Ejo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Efe=a("code"),Cjo=o("pretrained_model_name_or_path"),wjo=o(":"),Ajo=l(),Cfe=a("ul"),gF=a("li"),wfe=a("strong"),yjo=o("tapas"),Ljo=o(" \u2014 "),WD=a("a"),xjo=o("TapasForQuestionAnswering"),kjo=o(" (TAPAS model)"),Sjo=l(),hF=a("p"),Rjo=o("The model is set in evaluation mode by default using "),Afe=a("code"),Bjo=o("model.eval()"),Pjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yfe=a("code"),$jo=o("model.train()"),Ijo=l(),Lfe=a("p"),qjo=o("Examples:"),Njo=l(),f(BC.$$.fragment),xBe=l(),kd=a("h2"),pF=a("a"),xfe=a("span"),f(PC.$$.fragment),jjo=l(),kfe=a("span"),Djo=o("AutoModelForImageClassification"),kBe=l(),lr=a("div"),f($C.$$.fragment),Gjo=l(),Sd=a("p"),Ojo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),HD=a("a"),Vjo=o("from_pretrained()"),Xjo=o(" class method or the "),UD=a("a"),zjo=o("from_config()"),Qjo=o(` class
method.`),Wjo=l(),IC=a("p"),Hjo=o("This class cannot be instantiated directly using "),Sfe=a("code"),Ujo=o("__init__()"),Jjo=o(" (throws an error)."),Yjo=l(),ot=a("div"),f(qC.$$.fragment),Kjo=l(),Rfe=a("p"),Zjo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),eDo=l(),Rd=a("p"),oDo=o(`Note:
Loading a model from its configuration file does `),Bfe=a("strong"),rDo=o("not"),tDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JD=a("a"),aDo=o("from_pretrained()"),nDo=o(" to load the model weights."),sDo=l(),Pfe=a("p"),lDo=o("Examples:"),iDo=l(),f(NC.$$.fragment),dDo=l(),Ue=a("div"),f(jC.$$.fragment),cDo=l(),$fe=a("p"),fDo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mDo=l(),on=a("p"),gDo=o("The model class to instantiate is selected based on the "),Ife=a("code"),hDo=o("model_type"),pDo=o(` property of the config object (either
passed as an argument or loaded from `),qfe=a("code"),_Do=o("pretrained_model_name_or_path"),uDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nfe=a("code"),bDo=o("pretrained_model_name_or_path"),FDo=o(":"),vDo=l(),fe=a("ul"),_F=a("li"),jfe=a("strong"),TDo=o("beit"),MDo=o(" \u2014 "),YD=a("a"),EDo=o("BeitForImageClassification"),CDo=o(" (BEiT model)"),wDo=l(),uF=a("li"),Dfe=a("strong"),ADo=o("convnext"),yDo=o(" \u2014 "),KD=a("a"),LDo=o("ConvNextForImageClassification"),xDo=o(" (ConvNext model)"),kDo=l(),Gs=a("li"),Gfe=a("strong"),SDo=o("deit"),RDo=o(" \u2014 "),ZD=a("a"),BDo=o("DeiTForImageClassification"),PDo=o(" or "),eG=a("a"),$Do=o("DeiTForImageClassificationWithTeacher"),IDo=o(" (DeiT model)"),qDo=l(),bF=a("li"),Ofe=a("strong"),NDo=o("imagegpt"),jDo=o(" \u2014 "),oG=a("a"),DDo=o("ImageGPTForImageClassification"),GDo=o(" (ImageGPT model)"),ODo=l(),ma=a("li"),Vfe=a("strong"),VDo=o("perceiver"),XDo=o(" \u2014 "),rG=a("a"),zDo=o("PerceiverForImageClassificationLearned"),QDo=o(" or "),tG=a("a"),WDo=o("PerceiverForImageClassificationFourier"),HDo=o(" or "),aG=a("a"),UDo=o("PerceiverForImageClassificationConvProcessing"),JDo=o(" (Perceiver model)"),YDo=l(),FF=a("li"),Xfe=a("strong"),KDo=o("poolformer"),ZDo=o(" \u2014 "),nG=a("a"),eGo=o("PoolFormerForImageClassification"),oGo=o(" (PoolFormer model)"),rGo=l(),vF=a("li"),zfe=a("strong"),tGo=o("regnet"),aGo=o(" \u2014 "),sG=a("a"),nGo=o("RegNetForImageClassification"),sGo=o(" (RegNet model)"),lGo=l(),TF=a("li"),Qfe=a("strong"),iGo=o("resnet"),dGo=o(" \u2014 "),lG=a("a"),cGo=o("ResNetForImageClassification"),fGo=o(" (ResNet model)"),mGo=l(),MF=a("li"),Wfe=a("strong"),gGo=o("segformer"),hGo=o(" \u2014 "),iG=a("a"),pGo=o("SegformerForImageClassification"),_Go=o(" (SegFormer model)"),uGo=l(),EF=a("li"),Hfe=a("strong"),bGo=o("swin"),FGo=o(" \u2014 "),dG=a("a"),vGo=o("SwinForImageClassification"),TGo=o(" (Swin model)"),MGo=l(),CF=a("li"),Ufe=a("strong"),EGo=o("van"),CGo=o(" \u2014 "),cG=a("a"),wGo=o("VanForImageClassification"),AGo=o(" (VAN model)"),yGo=l(),wF=a("li"),Jfe=a("strong"),LGo=o("vit"),xGo=o(" \u2014 "),fG=a("a"),kGo=o("ViTForImageClassification"),SGo=o(" (ViT model)"),RGo=l(),AF=a("p"),BGo=o("The model is set in evaluation mode by default using "),Yfe=a("code"),PGo=o("model.eval()"),$Go=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kfe=a("code"),IGo=o("model.train()"),qGo=l(),Zfe=a("p"),NGo=o("Examples:"),jGo=l(),f(DC.$$.fragment),SBe=l(),Bd=a("h2"),yF=a("a"),eme=a("span"),f(GC.$$.fragment),DGo=l(),ome=a("span"),GGo=o("AutoModelForVision2Seq"),RBe=l(),ir=a("div"),f(OC.$$.fragment),OGo=l(),Pd=a("p"),VGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mG=a("a"),XGo=o("from_pretrained()"),zGo=o(" class method or the "),gG=a("a"),QGo=o("from_config()"),WGo=o(` class
method.`),HGo=l(),VC=a("p"),UGo=o("This class cannot be instantiated directly using "),rme=a("code"),JGo=o("__init__()"),YGo=o(" (throws an error)."),KGo=l(),rt=a("div"),f(XC.$$.fragment),ZGo=l(),tme=a("p"),eOo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),oOo=l(),$d=a("p"),rOo=o(`Note:
Loading a model from its configuration file does `),ame=a("strong"),tOo=o("not"),aOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=a("a"),nOo=o("from_pretrained()"),sOo=o(" to load the model weights."),lOo=l(),nme=a("p"),iOo=o("Examples:"),dOo=l(),f(zC.$$.fragment),cOo=l(),Je=a("div"),f(QC.$$.fragment),fOo=l(),sme=a("p"),mOo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gOo=l(),rn=a("p"),hOo=o("The model class to instantiate is selected based on the "),lme=a("code"),pOo=o("model_type"),_Oo=o(` property of the config object (either
passed as an argument or loaded from `),ime=a("code"),uOo=o("pretrained_model_name_or_path"),bOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=a("code"),FOo=o("pretrained_model_name_or_path"),vOo=o(":"),TOo=l(),cme=a("ul"),LF=a("li"),fme=a("strong"),MOo=o("vision-encoder-decoder"),EOo=o(" \u2014 "),pG=a("a"),COo=o("VisionEncoderDecoderModel"),wOo=o(" (Vision Encoder decoder model)"),AOo=l(),xF=a("p"),yOo=o("The model is set in evaluation mode by default using "),mme=a("code"),LOo=o("model.eval()"),xOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=a("code"),kOo=o("model.train()"),SOo=l(),hme=a("p"),ROo=o("Examples:"),BOo=l(),f(WC.$$.fragment),BBe=l(),Id=a("h2"),kF=a("a"),pme=a("span"),f(HC.$$.fragment),POo=l(),_me=a("span"),$Oo=o("AutoModelForAudioClassification"),PBe=l(),dr=a("div"),f(UC.$$.fragment),IOo=l(),qd=a("p"),qOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),_G=a("a"),NOo=o("from_pretrained()"),jOo=o(" class method or the "),uG=a("a"),DOo=o("from_config()"),GOo=o(` class
method.`),OOo=l(),JC=a("p"),VOo=o("This class cannot be instantiated directly using "),ume=a("code"),XOo=o("__init__()"),zOo=o(" (throws an error)."),QOo=l(),tt=a("div"),f(YC.$$.fragment),WOo=l(),bme=a("p"),HOo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),UOo=l(),Nd=a("p"),JOo=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),YOo=o("not"),KOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=a("a"),ZOo=o("from_pretrained()"),eVo=o(" to load the model weights."),oVo=l(),vme=a("p"),rVo=o("Examples:"),tVo=l(),f(KC.$$.fragment),aVo=l(),Ye=a("div"),f(ZC.$$.fragment),nVo=l(),Tme=a("p"),sVo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),lVo=l(),tn=a("p"),iVo=o("The model class to instantiate is selected based on the "),Mme=a("code"),dVo=o("model_type"),cVo=o(` property of the config object (either
passed as an argument or loaded from `),Eme=a("code"),fVo=o("pretrained_model_name_or_path"),mVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=a("code"),gVo=o("pretrained_model_name_or_path"),hVo=o(":"),pVo=l(),Re=a("ul"),SF=a("li"),wme=a("strong"),_Vo=o("data2vec-audio"),uVo=o(" \u2014 "),FG=a("a"),bVo=o("Data2VecAudioForSequenceClassification"),FVo=o(" (Data2VecAudio model)"),vVo=l(),RF=a("li"),Ame=a("strong"),TVo=o("hubert"),MVo=o(" \u2014 "),vG=a("a"),EVo=o("HubertForSequenceClassification"),CVo=o(" (Hubert model)"),wVo=l(),BF=a("li"),yme=a("strong"),AVo=o("sew"),yVo=o(" \u2014 "),TG=a("a"),LVo=o("SEWForSequenceClassification"),xVo=o(" (SEW model)"),kVo=l(),PF=a("li"),Lme=a("strong"),SVo=o("sew-d"),RVo=o(" \u2014 "),MG=a("a"),BVo=o("SEWDForSequenceClassification"),PVo=o(" (SEW-D model)"),$Vo=l(),$F=a("li"),xme=a("strong"),IVo=o("unispeech"),qVo=o(" \u2014 "),EG=a("a"),NVo=o("UniSpeechForSequenceClassification"),jVo=o(" (UniSpeech model)"),DVo=l(),IF=a("li"),kme=a("strong"),GVo=o("unispeech-sat"),OVo=o(" \u2014 "),CG=a("a"),VVo=o("UniSpeechSatForSequenceClassification"),XVo=o(" (UniSpeechSat model)"),zVo=l(),qF=a("li"),Sme=a("strong"),QVo=o("wav2vec2"),WVo=o(" \u2014 "),wG=a("a"),HVo=o("Wav2Vec2ForSequenceClassification"),UVo=o(" (Wav2Vec2 model)"),JVo=l(),NF=a("li"),Rme=a("strong"),YVo=o("wavlm"),KVo=o(" \u2014 "),AG=a("a"),ZVo=o("WavLMForSequenceClassification"),eXo=o(" (WavLM model)"),oXo=l(),jF=a("p"),rXo=o("The model is set in evaluation mode by default using "),Bme=a("code"),tXo=o("model.eval()"),aXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pme=a("code"),nXo=o("model.train()"),sXo=l(),$me=a("p"),lXo=o("Examples:"),iXo=l(),f(ew.$$.fragment),$Be=l(),jd=a("h2"),DF=a("a"),Ime=a("span"),f(ow.$$.fragment),dXo=l(),qme=a("span"),cXo=o("AutoModelForAudioFrameClassification"),IBe=l(),cr=a("div"),f(rw.$$.fragment),fXo=l(),Dd=a("p"),mXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),yG=a("a"),gXo=o("from_pretrained()"),hXo=o(" class method or the "),LG=a("a"),pXo=o("from_config()"),_Xo=o(` class
method.`),uXo=l(),tw=a("p"),bXo=o("This class cannot be instantiated directly using "),Nme=a("code"),FXo=o("__init__()"),vXo=o(" (throws an error)."),TXo=l(),at=a("div"),f(aw.$$.fragment),MXo=l(),jme=a("p"),EXo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),CXo=l(),Gd=a("p"),wXo=o(`Note:
Loading a model from its configuration file does `),Dme=a("strong"),AXo=o("not"),yXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=a("a"),LXo=o("from_pretrained()"),xXo=o(" to load the model weights."),kXo=l(),Gme=a("p"),SXo=o("Examples:"),RXo=l(),f(nw.$$.fragment),BXo=l(),Ke=a("div"),f(sw.$$.fragment),PXo=l(),Ome=a("p"),$Xo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),IXo=l(),an=a("p"),qXo=o("The model class to instantiate is selected based on the "),Vme=a("code"),NXo=o("model_type"),jXo=o(` property of the config object (either
passed as an argument or loaded from `),Xme=a("code"),DXo=o("pretrained_model_name_or_path"),GXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=a("code"),OXo=o("pretrained_model_name_or_path"),VXo=o(":"),XXo=l(),nn=a("ul"),GF=a("li"),Qme=a("strong"),zXo=o("data2vec-audio"),QXo=o(" \u2014 "),kG=a("a"),WXo=o("Data2VecAudioForAudioFrameClassification"),HXo=o(" (Data2VecAudio model)"),UXo=l(),OF=a("li"),Wme=a("strong"),JXo=o("unispeech-sat"),YXo=o(" \u2014 "),SG=a("a"),KXo=o("UniSpeechSatForAudioFrameClassification"),ZXo=o(" (UniSpeechSat model)"),ezo=l(),VF=a("li"),Hme=a("strong"),ozo=o("wav2vec2"),rzo=o(" \u2014 "),RG=a("a"),tzo=o("Wav2Vec2ForAudioFrameClassification"),azo=o(" (Wav2Vec2 model)"),nzo=l(),XF=a("li"),Ume=a("strong"),szo=o("wavlm"),lzo=o(" \u2014 "),BG=a("a"),izo=o("WavLMForAudioFrameClassification"),dzo=o(" (WavLM model)"),czo=l(),zF=a("p"),fzo=o("The model is set in evaluation mode by default using "),Jme=a("code"),mzo=o("model.eval()"),gzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yme=a("code"),hzo=o("model.train()"),pzo=l(),Kme=a("p"),_zo=o("Examples:"),uzo=l(),f(lw.$$.fragment),qBe=l(),Od=a("h2"),QF=a("a"),Zme=a("span"),f(iw.$$.fragment),bzo=l(),ege=a("span"),Fzo=o("AutoModelForCTC"),NBe=l(),fr=a("div"),f(dw.$$.fragment),vzo=l(),Vd=a("p"),Tzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),PG=a("a"),Mzo=o("from_pretrained()"),Ezo=o(" class method or the "),$G=a("a"),Czo=o("from_config()"),wzo=o(` class
method.`),Azo=l(),cw=a("p"),yzo=o("This class cannot be instantiated directly using "),oge=a("code"),Lzo=o("__init__()"),xzo=o(" (throws an error)."),kzo=l(),nt=a("div"),f(fw.$$.fragment),Szo=l(),rge=a("p"),Rzo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Bzo=l(),Xd=a("p"),Pzo=o(`Note:
Loading a model from its configuration file does `),tge=a("strong"),$zo=o("not"),Izo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=a("a"),qzo=o("from_pretrained()"),Nzo=o(" to load the model weights."),jzo=l(),age=a("p"),Dzo=o("Examples:"),Gzo=l(),f(mw.$$.fragment),Ozo=l(),Ze=a("div"),f(gw.$$.fragment),Vzo=l(),nge=a("p"),Xzo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),zzo=l(),sn=a("p"),Qzo=o("The model class to instantiate is selected based on the "),sge=a("code"),Wzo=o("model_type"),Hzo=o(` property of the config object (either
passed as an argument or loaded from `),lge=a("code"),Uzo=o("pretrained_model_name_or_path"),Jzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=a("code"),Yzo=o("pretrained_model_name_or_path"),Kzo=o(":"),Zzo=l(),Be=a("ul"),WF=a("li"),dge=a("strong"),eQo=o("data2vec-audio"),oQo=o(" \u2014 "),qG=a("a"),rQo=o("Data2VecAudioForCTC"),tQo=o(" (Data2VecAudio model)"),aQo=l(),HF=a("li"),cge=a("strong"),nQo=o("hubert"),sQo=o(" \u2014 "),NG=a("a"),lQo=o("HubertForCTC"),iQo=o(" (Hubert model)"),dQo=l(),UF=a("li"),fge=a("strong"),cQo=o("sew"),fQo=o(" \u2014 "),jG=a("a"),mQo=o("SEWForCTC"),gQo=o(" (SEW model)"),hQo=l(),JF=a("li"),mge=a("strong"),pQo=o("sew-d"),_Qo=o(" \u2014 "),DG=a("a"),uQo=o("SEWDForCTC"),bQo=o(" (SEW-D model)"),FQo=l(),YF=a("li"),gge=a("strong"),vQo=o("unispeech"),TQo=o(" \u2014 "),GG=a("a"),MQo=o("UniSpeechForCTC"),EQo=o(" (UniSpeech model)"),CQo=l(),KF=a("li"),hge=a("strong"),wQo=o("unispeech-sat"),AQo=o(" \u2014 "),OG=a("a"),yQo=o("UniSpeechSatForCTC"),LQo=o(" (UniSpeechSat model)"),xQo=l(),ZF=a("li"),pge=a("strong"),kQo=o("wav2vec2"),SQo=o(" \u2014 "),VG=a("a"),RQo=o("Wav2Vec2ForCTC"),BQo=o(" (Wav2Vec2 model)"),PQo=l(),ev=a("li"),_ge=a("strong"),$Qo=o("wavlm"),IQo=o(" \u2014 "),XG=a("a"),qQo=o("WavLMForCTC"),NQo=o(" (WavLM model)"),jQo=l(),ov=a("p"),DQo=o("The model is set in evaluation mode by default using "),uge=a("code"),GQo=o("model.eval()"),OQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=a("code"),VQo=o("model.train()"),XQo=l(),Fge=a("p"),zQo=o("Examples:"),QQo=l(),f(hw.$$.fragment),jBe=l(),zd=a("h2"),rv=a("a"),vge=a("span"),f(pw.$$.fragment),WQo=l(),Tge=a("span"),HQo=o("AutoModelForSpeechSeq2Seq"),DBe=l(),mr=a("div"),f(_w.$$.fragment),UQo=l(),Qd=a("p"),JQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zG=a("a"),YQo=o("from_pretrained()"),KQo=o(" class method or the "),QG=a("a"),ZQo=o("from_config()"),eWo=o(` class
method.`),oWo=l(),uw=a("p"),rWo=o("This class cannot be instantiated directly using "),Mge=a("code"),tWo=o("__init__()"),aWo=o(" (throws an error)."),nWo=l(),st=a("div"),f(bw.$$.fragment),sWo=l(),Ege=a("p"),lWo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),iWo=l(),Wd=a("p"),dWo=o(`Note:
Loading a model from its configuration file does `),Cge=a("strong"),cWo=o("not"),fWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WG=a("a"),mWo=o("from_pretrained()"),gWo=o(" to load the model weights."),hWo=l(),wge=a("p"),pWo=o("Examples:"),_Wo=l(),f(Fw.$$.fragment),uWo=l(),eo=a("div"),f(vw.$$.fragment),bWo=l(),Age=a("p"),FWo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vWo=l(),ln=a("p"),TWo=o("The model class to instantiate is selected based on the "),yge=a("code"),MWo=o("model_type"),EWo=o(` property of the config object (either
passed as an argument or loaded from `),Lge=a("code"),CWo=o("pretrained_model_name_or_path"),wWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xge=a("code"),AWo=o("pretrained_model_name_or_path"),yWo=o(":"),LWo=l(),Tw=a("ul"),tv=a("li"),kge=a("strong"),xWo=o("speech-encoder-decoder"),kWo=o(" \u2014 "),HG=a("a"),SWo=o("SpeechEncoderDecoderModel"),RWo=o(" (Speech Encoder decoder model)"),BWo=l(),av=a("li"),Sge=a("strong"),PWo=o("speech_to_text"),$Wo=o(" \u2014 "),UG=a("a"),IWo=o("Speech2TextForConditionalGeneration"),qWo=o(" (Speech2Text model)"),NWo=l(),nv=a("p"),jWo=o("The model is set in evaluation mode by default using "),Rge=a("code"),DWo=o("model.eval()"),GWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bge=a("code"),OWo=o("model.train()"),VWo=l(),Pge=a("p"),XWo=o("Examples:"),zWo=l(),f(Mw.$$.fragment),GBe=l(),Hd=a("h2"),sv=a("a"),$ge=a("span"),f(Ew.$$.fragment),QWo=l(),Ige=a("span"),WWo=o("AutoModelForAudioXVector"),OBe=l(),gr=a("div"),f(Cw.$$.fragment),HWo=l(),Ud=a("p"),UWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),JG=a("a"),JWo=o("from_pretrained()"),YWo=o(" class method or the "),YG=a("a"),KWo=o("from_config()"),ZWo=o(` class
method.`),eHo=l(),ww=a("p"),oHo=o("This class cannot be instantiated directly using "),qge=a("code"),rHo=o("__init__()"),tHo=o(" (throws an error)."),aHo=l(),lt=a("div"),f(Aw.$$.fragment),nHo=l(),Nge=a("p"),sHo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),lHo=l(),Jd=a("p"),iHo=o(`Note:
Loading a model from its configuration file does `),jge=a("strong"),dHo=o("not"),cHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=a("a"),fHo=o("from_pretrained()"),mHo=o(" to load the model weights."),gHo=l(),Dge=a("p"),hHo=o("Examples:"),pHo=l(),f(yw.$$.fragment),_Ho=l(),oo=a("div"),f(Lw.$$.fragment),uHo=l(),Gge=a("p"),bHo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),FHo=l(),dn=a("p"),vHo=o("The model class to instantiate is selected based on the "),Oge=a("code"),THo=o("model_type"),MHo=o(` property of the config object (either
passed as an argument or loaded from `),Vge=a("code"),EHo=o("pretrained_model_name_or_path"),CHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xge=a("code"),wHo=o("pretrained_model_name_or_path"),AHo=o(":"),yHo=l(),cn=a("ul"),lv=a("li"),zge=a("strong"),LHo=o("data2vec-audio"),xHo=o(" \u2014 "),ZG=a("a"),kHo=o("Data2VecAudioForXVector"),SHo=o(" (Data2VecAudio model)"),RHo=l(),iv=a("li"),Qge=a("strong"),BHo=o("unispeech-sat"),PHo=o(" \u2014 "),eO=a("a"),$Ho=o("UniSpeechSatForXVector"),IHo=o(" (UniSpeechSat model)"),qHo=l(),dv=a("li"),Wge=a("strong"),NHo=o("wav2vec2"),jHo=o(" \u2014 "),oO=a("a"),DHo=o("Wav2Vec2ForXVector"),GHo=o(" (Wav2Vec2 model)"),OHo=l(),cv=a("li"),Hge=a("strong"),VHo=o("wavlm"),XHo=o(" \u2014 "),rO=a("a"),zHo=o("WavLMForXVector"),QHo=o(" (WavLM model)"),WHo=l(),fv=a("p"),HHo=o("The model is set in evaluation mode by default using "),Uge=a("code"),UHo=o("model.eval()"),JHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jge=a("code"),YHo=o("model.train()"),KHo=l(),Yge=a("p"),ZHo=o("Examples:"),eUo=l(),f(xw.$$.fragment),VBe=l(),Yd=a("h2"),mv=a("a"),Kge=a("span"),f(kw.$$.fragment),oUo=l(),Zge=a("span"),rUo=o("AutoModelForMaskedImageModeling"),XBe=l(),hr=a("div"),f(Sw.$$.fragment),tUo=l(),Kd=a("p"),aUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),tO=a("a"),nUo=o("from_pretrained()"),sUo=o(" class method or the "),aO=a("a"),lUo=o("from_config()"),iUo=o(` class
method.`),dUo=l(),Rw=a("p"),cUo=o("This class cannot be instantiated directly using "),ehe=a("code"),fUo=o("__init__()"),mUo=o(" (throws an error)."),gUo=l(),it=a("div"),f(Bw.$$.fragment),hUo=l(),ohe=a("p"),pUo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),_Uo=l(),Zd=a("p"),uUo=o(`Note:
Loading a model from its configuration file does `),rhe=a("strong"),bUo=o("not"),FUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nO=a("a"),vUo=o("from_pretrained()"),TUo=o(" to load the model weights."),MUo=l(),the=a("p"),EUo=o("Examples:"),CUo=l(),f(Pw.$$.fragment),wUo=l(),ro=a("div"),f($w.$$.fragment),AUo=l(),ahe=a("p"),yUo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),LUo=l(),fn=a("p"),xUo=o("The model class to instantiate is selected based on the "),nhe=a("code"),kUo=o("model_type"),SUo=o(` property of the config object (either
passed as an argument or loaded from `),she=a("code"),RUo=o("pretrained_model_name_or_path"),BUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lhe=a("code"),PUo=o("pretrained_model_name_or_path"),$Uo=o(":"),IUo=l(),ec=a("ul"),gv=a("li"),ihe=a("strong"),qUo=o("deit"),NUo=o(" \u2014 "),sO=a("a"),jUo=o("DeiTForMaskedImageModeling"),DUo=o(" (DeiT model)"),GUo=l(),hv=a("li"),dhe=a("strong"),OUo=o("swin"),VUo=o(" \u2014 "),lO=a("a"),XUo=o("SwinForMaskedImageModeling"),zUo=o(" (Swin model)"),QUo=l(),pv=a("li"),che=a("strong"),WUo=o("vit"),HUo=o(" \u2014 "),iO=a("a"),UUo=o("ViTForMaskedImageModeling"),JUo=o(" (ViT model)"),YUo=l(),_v=a("p"),KUo=o("The model is set in evaluation mode by default using "),fhe=a("code"),ZUo=o("model.eval()"),eJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mhe=a("code"),oJo=o("model.train()"),rJo=l(),ghe=a("p"),tJo=o("Examples:"),aJo=l(),f(Iw.$$.fragment),zBe=l(),oc=a("h2"),uv=a("a"),hhe=a("span"),f(qw.$$.fragment),nJo=l(),phe=a("span"),sJo=o("AutoModelForObjectDetection"),QBe=l(),pr=a("div"),f(Nw.$$.fragment),lJo=l(),rc=a("p"),iJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),dO=a("a"),dJo=o("from_pretrained()"),cJo=o(" class method or the "),cO=a("a"),fJo=o("from_config()"),mJo=o(` class
method.`),gJo=l(),jw=a("p"),hJo=o("This class cannot be instantiated directly using "),_he=a("code"),pJo=o("__init__()"),_Jo=o(" (throws an error)."),uJo=l(),dt=a("div"),f(Dw.$$.fragment),bJo=l(),uhe=a("p"),FJo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),vJo=l(),tc=a("p"),TJo=o(`Note:
Loading a model from its configuration file does `),bhe=a("strong"),MJo=o("not"),EJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fO=a("a"),CJo=o("from_pretrained()"),wJo=o(" to load the model weights."),AJo=l(),Fhe=a("p"),yJo=o("Examples:"),LJo=l(),f(Gw.$$.fragment),xJo=l(),to=a("div"),f(Ow.$$.fragment),kJo=l(),vhe=a("p"),SJo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),RJo=l(),mn=a("p"),BJo=o("The model class to instantiate is selected based on the "),The=a("code"),PJo=o("model_type"),$Jo=o(` property of the config object (either
passed as an argument or loaded from `),Mhe=a("code"),IJo=o("pretrained_model_name_or_path"),qJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ehe=a("code"),NJo=o("pretrained_model_name_or_path"),jJo=o(":"),DJo=l(),Che=a("ul"),bv=a("li"),whe=a("strong"),GJo=o("detr"),OJo=o(" \u2014 "),mO=a("a"),VJo=o("DetrForObjectDetection"),XJo=o(" (DETR model)"),zJo=l(),Fv=a("p"),QJo=o("The model is set in evaluation mode by default using "),Ahe=a("code"),WJo=o("model.eval()"),HJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=a("code"),UJo=o("model.train()"),JJo=l(),Lhe=a("p"),YJo=o("Examples:"),KJo=l(),f(Vw.$$.fragment),WBe=l(),ac=a("h2"),vv=a("a"),xhe=a("span"),f(Xw.$$.fragment),ZJo=l(),khe=a("span"),eYo=o("AutoModelForImageSegmentation"),HBe=l(),_r=a("div"),f(zw.$$.fragment),oYo=l(),nc=a("p"),rYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),gO=a("a"),tYo=o("from_pretrained()"),aYo=o(" class method or the "),hO=a("a"),nYo=o("from_config()"),sYo=o(` class
method.`),lYo=l(),Qw=a("p"),iYo=o("This class cannot be instantiated directly using "),She=a("code"),dYo=o("__init__()"),cYo=o(" (throws an error)."),fYo=l(),ct=a("div"),f(Ww.$$.fragment),mYo=l(),Rhe=a("p"),gYo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),hYo=l(),sc=a("p"),pYo=o(`Note:
Loading a model from its configuration file does `),Bhe=a("strong"),_Yo=o("not"),uYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pO=a("a"),bYo=o("from_pretrained()"),FYo=o(" to load the model weights."),vYo=l(),Phe=a("p"),TYo=o("Examples:"),MYo=l(),f(Hw.$$.fragment),EYo=l(),ao=a("div"),f(Uw.$$.fragment),CYo=l(),$he=a("p"),wYo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),AYo=l(),gn=a("p"),yYo=o("The model class to instantiate is selected based on the "),Ihe=a("code"),LYo=o("model_type"),xYo=o(` property of the config object (either
passed as an argument or loaded from `),qhe=a("code"),kYo=o("pretrained_model_name_or_path"),SYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=a("code"),RYo=o("pretrained_model_name_or_path"),BYo=o(":"),PYo=l(),jhe=a("ul"),Tv=a("li"),Dhe=a("strong"),$Yo=o("detr"),IYo=o(" \u2014 "),_O=a("a"),qYo=o("DetrForSegmentation"),NYo=o(" (DETR model)"),jYo=l(),Mv=a("p"),DYo=o("The model is set in evaluation mode by default using "),Ghe=a("code"),GYo=o("model.eval()"),OYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ohe=a("code"),VYo=o("model.train()"),XYo=l(),Vhe=a("p"),zYo=o("Examples:"),QYo=l(),f(Jw.$$.fragment),UBe=l(),lc=a("h2"),Ev=a("a"),Xhe=a("span"),f(Yw.$$.fragment),WYo=l(),zhe=a("span"),HYo=o("AutoModelForSemanticSegmentation"),JBe=l(),ur=a("div"),f(Kw.$$.fragment),UYo=l(),ic=a("p"),JYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),uO=a("a"),YYo=o("from_pretrained()"),KYo=o(" class method or the "),bO=a("a"),ZYo=o("from_config()"),eKo=o(` class
method.`),oKo=l(),Zw=a("p"),rKo=o("This class cannot be instantiated directly using "),Qhe=a("code"),tKo=o("__init__()"),aKo=o(" (throws an error)."),nKo=l(),ft=a("div"),f(eA.$$.fragment),sKo=l(),Whe=a("p"),lKo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),iKo=l(),dc=a("p"),dKo=o(`Note:
Loading a model from its configuration file does `),Hhe=a("strong"),cKo=o("not"),fKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=a("a"),mKo=o("from_pretrained()"),gKo=o(" to load the model weights."),hKo=l(),Uhe=a("p"),pKo=o("Examples:"),_Ko=l(),f(oA.$$.fragment),uKo=l(),no=a("div"),f(rA.$$.fragment),bKo=l(),Jhe=a("p"),FKo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),vKo=l(),hn=a("p"),TKo=o("The model class to instantiate is selected based on the "),Yhe=a("code"),MKo=o("model_type"),EKo=o(` property of the config object (either
passed as an argument or loaded from `),Khe=a("code"),CKo=o("pretrained_model_name_or_path"),wKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=a("code"),AKo=o("pretrained_model_name_or_path"),yKo=o(":"),LKo=l(),cc=a("ul"),Cv=a("li"),epe=a("strong"),xKo=o("beit"),kKo=o(" \u2014 "),vO=a("a"),SKo=o("BeitForSemanticSegmentation"),RKo=o(" (BEiT model)"),BKo=l(),wv=a("li"),ope=a("strong"),PKo=o("dpt"),$Ko=o(" \u2014 "),TO=a("a"),IKo=o("DPTForSemanticSegmentation"),qKo=o(" (DPT model)"),NKo=l(),Av=a("li"),rpe=a("strong"),jKo=o("segformer"),DKo=o(" \u2014 "),MO=a("a"),GKo=o("SegformerForSemanticSegmentation"),OKo=o(" (SegFormer model)"),VKo=l(),yv=a("p"),XKo=o("The model is set in evaluation mode by default using "),tpe=a("code"),zKo=o("model.eval()"),QKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ape=a("code"),WKo=o("model.train()"),HKo=l(),npe=a("p"),UKo=o("Examples:"),JKo=l(),f(tA.$$.fragment),YBe=l(),fc=a("h2"),Lv=a("a"),spe=a("span"),f(aA.$$.fragment),YKo=l(),lpe=a("span"),KKo=o("AutoModelForInstanceSegmentation"),KBe=l(),br=a("div"),f(nA.$$.fragment),ZKo=l(),mc=a("p"),eZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),EO=a("a"),oZo=o("from_pretrained()"),rZo=o(" class method or the "),CO=a("a"),tZo=o("from_config()"),aZo=o(` class
method.`),nZo=l(),sA=a("p"),sZo=o("This class cannot be instantiated directly using "),ipe=a("code"),lZo=o("__init__()"),iZo=o(" (throws an error)."),dZo=l(),mt=a("div"),f(lA.$$.fragment),cZo=l(),dpe=a("p"),fZo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),mZo=l(),gc=a("p"),gZo=o(`Note:
Loading a model from its configuration file does `),cpe=a("strong"),hZo=o("not"),pZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=a("a"),_Zo=o("from_pretrained()"),uZo=o(" to load the model weights."),bZo=l(),fpe=a("p"),FZo=o("Examples:"),vZo=l(),f(iA.$$.fragment),TZo=l(),so=a("div"),f(dA.$$.fragment),MZo=l(),mpe=a("p"),EZo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),CZo=l(),pn=a("p"),wZo=o("The model class to instantiate is selected based on the "),gpe=a("code"),AZo=o("model_type"),yZo=o(` property of the config object (either
passed as an argument or loaded from `),hpe=a("code"),LZo=o("pretrained_model_name_or_path"),xZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ppe=a("code"),kZo=o("pretrained_model_name_or_path"),SZo=o(":"),RZo=l(),_pe=a("ul"),xv=a("li"),upe=a("strong"),BZo=o("maskformer"),PZo=o(" \u2014 "),AO=a("a"),$Zo=o("MaskFormerForInstanceSegmentation"),IZo=o(" (MaskFormer model)"),qZo=l(),kv=a("p"),NZo=o("The model is set in evaluation mode by default using "),bpe=a("code"),jZo=o("model.eval()"),DZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fpe=a("code"),GZo=o("model.train()"),OZo=l(),vpe=a("p"),VZo=o("Examples:"),XZo=l(),f(cA.$$.fragment),ZBe=l(),hc=a("h2"),Sv=a("a"),Tpe=a("span"),f(fA.$$.fragment),zZo=l(),Mpe=a("span"),QZo=o("TFAutoModel"),ePe=l(),Fr=a("div"),f(mA.$$.fragment),WZo=l(),pc=a("p"),HZo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yO=a("a"),UZo=o("from_pretrained()"),JZo=o(" class method or the "),LO=a("a"),YZo=o("from_config()"),KZo=o(` class
method.`),ZZo=l(),gA=a("p"),eer=o("This class cannot be instantiated directly using "),Epe=a("code"),oer=o("__init__()"),rer=o(" (throws an error)."),ter=l(),gt=a("div"),f(hA.$$.fragment),aer=l(),Cpe=a("p"),ner=o("Instantiates one of the base model classes of the library from a configuration."),ser=l(),_c=a("p"),ler=o(`Note:
Loading a model from its configuration file does `),wpe=a("strong"),ier=o("not"),der=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xO=a("a"),cer=o("from_pretrained()"),fer=o(" to load the model weights."),mer=l(),Ape=a("p"),ger=o("Examples:"),her=l(),f(pA.$$.fragment),per=l(),ho=a("div"),f(_A.$$.fragment),_er=l(),ype=a("p"),uer=o("Instantiate one of the base model classes of the library from a pretrained model."),ber=l(),_n=a("p"),Fer=o("The model class to instantiate is selected based on the "),Lpe=a("code"),ver=o("model_type"),Ter=o(` property of the config object (either
passed as an argument or loaded from `),xpe=a("code"),Mer=o("pretrained_model_name_or_path"),Eer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kpe=a("code"),Cer=o("pretrained_model_name_or_path"),wer=o(":"),Aer=l(),x=a("ul"),Rv=a("li"),Spe=a("strong"),yer=o("albert"),Ler=o(" \u2014 "),kO=a("a"),xer=o("TFAlbertModel"),ker=o(" (ALBERT model)"),Ser=l(),Bv=a("li"),Rpe=a("strong"),Rer=o("bart"),Ber=o(" \u2014 "),SO=a("a"),Per=o("TFBartModel"),$er=o(" (BART model)"),Ier=l(),Pv=a("li"),Bpe=a("strong"),qer=o("bert"),Ner=o(" \u2014 "),RO=a("a"),jer=o("TFBertModel"),Der=o(" (BERT model)"),Ger=l(),$v=a("li"),Ppe=a("strong"),Oer=o("blenderbot"),Ver=o(" \u2014 "),BO=a("a"),Xer=o("TFBlenderbotModel"),zer=o(" (Blenderbot model)"),Qer=l(),Iv=a("li"),$pe=a("strong"),Wer=o("blenderbot-small"),Her=o(" \u2014 "),PO=a("a"),Uer=o("TFBlenderbotSmallModel"),Jer=o(" (BlenderbotSmall model)"),Yer=l(),qv=a("li"),Ipe=a("strong"),Ker=o("camembert"),Zer=o(" \u2014 "),$O=a("a"),eor=o("TFCamembertModel"),oor=o(" (CamemBERT model)"),ror=l(),Nv=a("li"),qpe=a("strong"),tor=o("clip"),aor=o(" \u2014 "),IO=a("a"),nor=o("TFCLIPModel"),sor=o(" (CLIP model)"),lor=l(),jv=a("li"),Npe=a("strong"),ior=o("convbert"),dor=o(" \u2014 "),qO=a("a"),cor=o("TFConvBertModel"),mor=o(" (ConvBERT model)"),gor=l(),Dv=a("li"),jpe=a("strong"),hor=o("convnext"),por=o(" \u2014 "),NO=a("a"),_or=o("TFConvNextModel"),uor=o(" (ConvNext model)"),bor=l(),Gv=a("li"),Dpe=a("strong"),For=o("ctrl"),vor=o(" \u2014 "),jO=a("a"),Tor=o("TFCTRLModel"),Mor=o(" (CTRL model)"),Eor=l(),Ov=a("li"),Gpe=a("strong"),Cor=o("deberta"),wor=o(" \u2014 "),DO=a("a"),Aor=o("TFDebertaModel"),yor=o(" (DeBERTa model)"),Lor=l(),Vv=a("li"),Ope=a("strong"),xor=o("deberta-v2"),kor=o(" \u2014 "),GO=a("a"),Sor=o("TFDebertaV2Model"),Ror=o(" (DeBERTa-v2 model)"),Bor=l(),Xv=a("li"),Vpe=a("strong"),Por=o("distilbert"),$or=o(" \u2014 "),OO=a("a"),Ior=o("TFDistilBertModel"),qor=o(" (DistilBERT model)"),Nor=l(),zv=a("li"),Xpe=a("strong"),jor=o("dpr"),Dor=o(" \u2014 "),VO=a("a"),Gor=o("TFDPRQuestionEncoder"),Oor=o(" (DPR model)"),Vor=l(),Qv=a("li"),zpe=a("strong"),Xor=o("electra"),zor=o(" \u2014 "),XO=a("a"),Qor=o("TFElectraModel"),Wor=o(" (ELECTRA model)"),Hor=l(),Wv=a("li"),Qpe=a("strong"),Uor=o("flaubert"),Jor=o(" \u2014 "),zO=a("a"),Yor=o("TFFlaubertModel"),Kor=o(" (FlauBERT model)"),Zor=l(),Os=a("li"),Wpe=a("strong"),err=o("funnel"),orr=o(" \u2014 "),QO=a("a"),rrr=o("TFFunnelModel"),trr=o(" or "),WO=a("a"),arr=o("TFFunnelBaseModel"),nrr=o(" (Funnel Transformer model)"),srr=l(),Hv=a("li"),Hpe=a("strong"),lrr=o("gpt2"),irr=o(" \u2014 "),HO=a("a"),drr=o("TFGPT2Model"),crr=o(" (OpenAI GPT-2 model)"),frr=l(),Uv=a("li"),Upe=a("strong"),mrr=o("gptj"),grr=o(" \u2014 "),UO=a("a"),hrr=o("TFGPTJModel"),prr=o(" (GPT-J model)"),_rr=l(),Jv=a("li"),Jpe=a("strong"),urr=o("hubert"),brr=o(" \u2014 "),JO=a("a"),Frr=o("TFHubertModel"),vrr=o(" (Hubert model)"),Trr=l(),Yv=a("li"),Ype=a("strong"),Mrr=o("layoutlm"),Err=o(" \u2014 "),YO=a("a"),Crr=o("TFLayoutLMModel"),wrr=o(" (LayoutLM model)"),Arr=l(),Kv=a("li"),Kpe=a("strong"),yrr=o("led"),Lrr=o(" \u2014 "),KO=a("a"),xrr=o("TFLEDModel"),krr=o(" (LED model)"),Srr=l(),Zv=a("li"),Zpe=a("strong"),Rrr=o("longformer"),Brr=o(" \u2014 "),ZO=a("a"),Prr=o("TFLongformerModel"),$rr=o(" (Longformer model)"),Irr=l(),eT=a("li"),e_e=a("strong"),qrr=o("lxmert"),Nrr=o(" \u2014 "),eV=a("a"),jrr=o("TFLxmertModel"),Drr=o(" (LXMERT model)"),Grr=l(),oT=a("li"),o_e=a("strong"),Orr=o("marian"),Vrr=o(" \u2014 "),oV=a("a"),Xrr=o("TFMarianModel"),zrr=o(" (Marian model)"),Qrr=l(),rT=a("li"),r_e=a("strong"),Wrr=o("mbart"),Hrr=o(" \u2014 "),rV=a("a"),Urr=o("TFMBartModel"),Jrr=o(" (mBART model)"),Yrr=l(),tT=a("li"),t_e=a("strong"),Krr=o("mobilebert"),Zrr=o(" \u2014 "),tV=a("a"),etr=o("TFMobileBertModel"),otr=o(" (MobileBERT model)"),rtr=l(),aT=a("li"),a_e=a("strong"),ttr=o("mpnet"),atr=o(" \u2014 "),aV=a("a"),ntr=o("TFMPNetModel"),str=o(" (MPNet model)"),ltr=l(),nT=a("li"),n_e=a("strong"),itr=o("mt5"),dtr=o(" \u2014 "),nV=a("a"),ctr=o("TFMT5Model"),ftr=o(" (mT5 model)"),mtr=l(),sT=a("li"),s_e=a("strong"),gtr=o("openai-gpt"),htr=o(" \u2014 "),sV=a("a"),ptr=o("TFOpenAIGPTModel"),_tr=o(" (OpenAI GPT model)"),utr=l(),lT=a("li"),l_e=a("strong"),btr=o("pegasus"),Ftr=o(" \u2014 "),lV=a("a"),vtr=o("TFPegasusModel"),Ttr=o(" (Pegasus model)"),Mtr=l(),iT=a("li"),i_e=a("strong"),Etr=o("rembert"),Ctr=o(" \u2014 "),iV=a("a"),wtr=o("TFRemBertModel"),Atr=o(" (RemBERT model)"),ytr=l(),dT=a("li"),d_e=a("strong"),Ltr=o("roberta"),xtr=o(" \u2014 "),dV=a("a"),ktr=o("TFRobertaModel"),Str=o(" (RoBERTa model)"),Rtr=l(),cT=a("li"),c_e=a("strong"),Btr=o("roformer"),Ptr=o(" \u2014 "),cV=a("a"),$tr=o("TFRoFormerModel"),Itr=o(" (RoFormer model)"),qtr=l(),fT=a("li"),f_e=a("strong"),Ntr=o("speech_to_text"),jtr=o(" \u2014 "),fV=a("a"),Dtr=o("TFSpeech2TextModel"),Gtr=o(" (Speech2Text model)"),Otr=l(),mT=a("li"),m_e=a("strong"),Vtr=o("t5"),Xtr=o(" \u2014 "),mV=a("a"),ztr=o("TFT5Model"),Qtr=o(" (T5 model)"),Wtr=l(),gT=a("li"),g_e=a("strong"),Htr=o("tapas"),Utr=o(" \u2014 "),gV=a("a"),Jtr=o("TFTapasModel"),Ytr=o(" (TAPAS model)"),Ktr=l(),hT=a("li"),h_e=a("strong"),Ztr=o("transfo-xl"),ear=o(" \u2014 "),hV=a("a"),oar=o("TFTransfoXLModel"),rar=o(" (Transformer-XL model)"),tar=l(),pT=a("li"),p_e=a("strong"),aar=o("vit"),nar=o(" \u2014 "),pV=a("a"),sar=o("TFViTModel"),lar=o(" (ViT model)"),iar=l(),_T=a("li"),__e=a("strong"),dar=o("vit_mae"),car=o(" \u2014 "),_V=a("a"),far=o("TFViTMAEModel"),mar=o(" (ViTMAE model)"),gar=l(),uT=a("li"),u_e=a("strong"),har=o("wav2vec2"),par=o(" \u2014 "),uV=a("a"),_ar=o("TFWav2Vec2Model"),uar=o(" (Wav2Vec2 model)"),bar=l(),bT=a("li"),b_e=a("strong"),Far=o("xlm"),Tar=o(" \u2014 "),bV=a("a"),Mar=o("TFXLMModel"),Ear=o(" (XLM model)"),Car=l(),FT=a("li"),F_e=a("strong"),war=o("xlm-roberta"),Aar=o(" \u2014 "),FV=a("a"),yar=o("TFXLMRobertaModel"),Lar=o(" (XLM-RoBERTa model)"),xar=l(),vT=a("li"),v_e=a("strong"),kar=o("xlnet"),Sar=o(" \u2014 "),vV=a("a"),Rar=o("TFXLNetModel"),Bar=o(" (XLNet model)"),Par=l(),T_e=a("p"),$ar=o("Examples:"),Iar=l(),f(uA.$$.fragment),oPe=l(),uc=a("h2"),TT=a("a"),M_e=a("span"),f(bA.$$.fragment),qar=l(),E_e=a("span"),Nar=o("TFAutoModelForPreTraining"),rPe=l(),vr=a("div"),f(FA.$$.fragment),jar=l(),bc=a("p"),Dar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TV=a("a"),Gar=o("from_pretrained()"),Oar=o(" class method or the "),MV=a("a"),Var=o("from_config()"),Xar=o(` class
method.`),zar=l(),vA=a("p"),Qar=o("This class cannot be instantiated directly using "),C_e=a("code"),War=o("__init__()"),Har=o(" (throws an error)."),Uar=l(),ht=a("div"),f(TA.$$.fragment),Jar=l(),w_e=a("p"),Yar=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Kar=l(),Fc=a("p"),Zar=o(`Note:
Loading a model from its configuration file does `),A_e=a("strong"),enr=o("not"),onr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=a("a"),rnr=o("from_pretrained()"),tnr=o(" to load the model weights."),anr=l(),y_e=a("p"),nnr=o("Examples:"),snr=l(),f(MA.$$.fragment),lnr=l(),po=a("div"),f(EA.$$.fragment),inr=l(),L_e=a("p"),dnr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cnr=l(),un=a("p"),fnr=o("The model class to instantiate is selected based on the "),x_e=a("code"),mnr=o("model_type"),gnr=o(` property of the config object (either
passed as an argument or loaded from `),k_e=a("code"),hnr=o("pretrained_model_name_or_path"),pnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=a("code"),_nr=o("pretrained_model_name_or_path"),unr=o(":"),bnr=l(),H=a("ul"),MT=a("li"),R_e=a("strong"),Fnr=o("albert"),vnr=o(" \u2014 "),CV=a("a"),Tnr=o("TFAlbertForPreTraining"),Mnr=o(" (ALBERT model)"),Enr=l(),ET=a("li"),B_e=a("strong"),Cnr=o("bart"),wnr=o(" \u2014 "),wV=a("a"),Anr=o("TFBartForConditionalGeneration"),ynr=o(" (BART model)"),Lnr=l(),CT=a("li"),P_e=a("strong"),xnr=o("bert"),knr=o(" \u2014 "),AV=a("a"),Snr=o("TFBertForPreTraining"),Rnr=o(" (BERT model)"),Bnr=l(),wT=a("li"),$_e=a("strong"),Pnr=o("camembert"),$nr=o(" \u2014 "),yV=a("a"),Inr=o("TFCamembertForMaskedLM"),qnr=o(" (CamemBERT model)"),Nnr=l(),AT=a("li"),I_e=a("strong"),jnr=o("ctrl"),Dnr=o(" \u2014 "),LV=a("a"),Gnr=o("TFCTRLLMHeadModel"),Onr=o(" (CTRL model)"),Vnr=l(),yT=a("li"),q_e=a("strong"),Xnr=o("distilbert"),znr=o(" \u2014 "),xV=a("a"),Qnr=o("TFDistilBertForMaskedLM"),Wnr=o(" (DistilBERT model)"),Hnr=l(),LT=a("li"),N_e=a("strong"),Unr=o("electra"),Jnr=o(" \u2014 "),kV=a("a"),Ynr=o("TFElectraForPreTraining"),Knr=o(" (ELECTRA model)"),Znr=l(),xT=a("li"),j_e=a("strong"),esr=o("flaubert"),osr=o(" \u2014 "),SV=a("a"),rsr=o("TFFlaubertWithLMHeadModel"),tsr=o(" (FlauBERT model)"),asr=l(),kT=a("li"),D_e=a("strong"),nsr=o("funnel"),ssr=o(" \u2014 "),RV=a("a"),lsr=o("TFFunnelForPreTraining"),isr=o(" (Funnel Transformer model)"),dsr=l(),ST=a("li"),G_e=a("strong"),csr=o("gpt2"),fsr=o(" \u2014 "),BV=a("a"),msr=o("TFGPT2LMHeadModel"),gsr=o(" (OpenAI GPT-2 model)"),hsr=l(),RT=a("li"),O_e=a("strong"),psr=o("layoutlm"),_sr=o(" \u2014 "),PV=a("a"),usr=o("TFLayoutLMForMaskedLM"),bsr=o(" (LayoutLM model)"),Fsr=l(),BT=a("li"),V_e=a("strong"),vsr=o("lxmert"),Tsr=o(" \u2014 "),$V=a("a"),Msr=o("TFLxmertForPreTraining"),Esr=o(" (LXMERT model)"),Csr=l(),PT=a("li"),X_e=a("strong"),wsr=o("mobilebert"),Asr=o(" \u2014 "),IV=a("a"),ysr=o("TFMobileBertForPreTraining"),Lsr=o(" (MobileBERT model)"),xsr=l(),$T=a("li"),z_e=a("strong"),ksr=o("mpnet"),Ssr=o(" \u2014 "),qV=a("a"),Rsr=o("TFMPNetForMaskedLM"),Bsr=o(" (MPNet model)"),Psr=l(),IT=a("li"),Q_e=a("strong"),$sr=o("openai-gpt"),Isr=o(" \u2014 "),NV=a("a"),qsr=o("TFOpenAIGPTLMHeadModel"),Nsr=o(" (OpenAI GPT model)"),jsr=l(),qT=a("li"),W_e=a("strong"),Dsr=o("roberta"),Gsr=o(" \u2014 "),jV=a("a"),Osr=o("TFRobertaForMaskedLM"),Vsr=o(" (RoBERTa model)"),Xsr=l(),NT=a("li"),H_e=a("strong"),zsr=o("t5"),Qsr=o(" \u2014 "),DV=a("a"),Wsr=o("TFT5ForConditionalGeneration"),Hsr=o(" (T5 model)"),Usr=l(),jT=a("li"),U_e=a("strong"),Jsr=o("tapas"),Ysr=o(" \u2014 "),GV=a("a"),Ksr=o("TFTapasForMaskedLM"),Zsr=o(" (TAPAS model)"),elr=l(),DT=a("li"),J_e=a("strong"),olr=o("transfo-xl"),rlr=o(" \u2014 "),OV=a("a"),tlr=o("TFTransfoXLLMHeadModel"),alr=o(" (Transformer-XL model)"),nlr=l(),GT=a("li"),Y_e=a("strong"),slr=o("vit_mae"),llr=o(" \u2014 "),VV=a("a"),ilr=o("TFViTMAEForPreTraining"),dlr=o(" (ViTMAE model)"),clr=l(),OT=a("li"),K_e=a("strong"),flr=o("xlm"),mlr=o(" \u2014 "),XV=a("a"),glr=o("TFXLMWithLMHeadModel"),hlr=o(" (XLM model)"),plr=l(),VT=a("li"),Z_e=a("strong"),_lr=o("xlm-roberta"),ulr=o(" \u2014 "),zV=a("a"),blr=o("TFXLMRobertaForMaskedLM"),Flr=o(" (XLM-RoBERTa model)"),vlr=l(),XT=a("li"),eue=a("strong"),Tlr=o("xlnet"),Mlr=o(" \u2014 "),QV=a("a"),Elr=o("TFXLNetLMHeadModel"),Clr=o(" (XLNet model)"),wlr=l(),oue=a("p"),Alr=o("Examples:"),ylr=l(),f(CA.$$.fragment),tPe=l(),vc=a("h2"),zT=a("a"),rue=a("span"),f(wA.$$.fragment),Llr=l(),tue=a("span"),xlr=o("TFAutoModelForCausalLM"),aPe=l(),Tr=a("div"),f(AA.$$.fragment),klr=l(),Tc=a("p"),Slr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WV=a("a"),Rlr=o("from_pretrained()"),Blr=o(" class method or the "),HV=a("a"),Plr=o("from_config()"),$lr=o(` class
method.`),Ilr=l(),yA=a("p"),qlr=o("This class cannot be instantiated directly using "),aue=a("code"),Nlr=o("__init__()"),jlr=o(" (throws an error)."),Dlr=l(),pt=a("div"),f(LA.$$.fragment),Glr=l(),nue=a("p"),Olr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vlr=l(),Mc=a("p"),Xlr=o(`Note:
Loading a model from its configuration file does `),sue=a("strong"),zlr=o("not"),Qlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),Wlr=o("from_pretrained()"),Hlr=o(" to load the model weights."),Ulr=l(),lue=a("p"),Jlr=o("Examples:"),Ylr=l(),f(xA.$$.fragment),Klr=l(),_o=a("div"),f(kA.$$.fragment),Zlr=l(),iue=a("p"),eir=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oir=l(),bn=a("p"),rir=o("The model class to instantiate is selected based on the "),due=a("code"),tir=o("model_type"),air=o(` property of the config object (either
passed as an argument or loaded from `),cue=a("code"),nir=o("pretrained_model_name_or_path"),sir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=a("code"),lir=o("pretrained_model_name_or_path"),iir=o(":"),dir=l(),me=a("ul"),QT=a("li"),mue=a("strong"),cir=o("bert"),fir=o(" \u2014 "),JV=a("a"),mir=o("TFBertLMHeadModel"),gir=o(" (BERT model)"),hir=l(),WT=a("li"),gue=a("strong"),pir=o("camembert"),_ir=o(" \u2014 "),YV=a("a"),uir=o("TFCamembertForCausalLM"),bir=o(" (CamemBERT model)"),Fir=l(),HT=a("li"),hue=a("strong"),vir=o("ctrl"),Tir=o(" \u2014 "),KV=a("a"),Mir=o("TFCTRLLMHeadModel"),Eir=o(" (CTRL model)"),Cir=l(),UT=a("li"),pue=a("strong"),wir=o("gpt2"),Air=o(" \u2014 "),ZV=a("a"),yir=o("TFGPT2LMHeadModel"),Lir=o(" (OpenAI GPT-2 model)"),xir=l(),JT=a("li"),_ue=a("strong"),kir=o("gptj"),Sir=o(" \u2014 "),eX=a("a"),Rir=o("TFGPTJForCausalLM"),Bir=o(" (GPT-J model)"),Pir=l(),YT=a("li"),uue=a("strong"),$ir=o("openai-gpt"),Iir=o(" \u2014 "),oX=a("a"),qir=o("TFOpenAIGPTLMHeadModel"),Nir=o(" (OpenAI GPT model)"),jir=l(),KT=a("li"),bue=a("strong"),Dir=o("rembert"),Gir=o(" \u2014 "),rX=a("a"),Oir=o("TFRemBertForCausalLM"),Vir=o(" (RemBERT model)"),Xir=l(),ZT=a("li"),Fue=a("strong"),zir=o("roberta"),Qir=o(" \u2014 "),tX=a("a"),Wir=o("TFRobertaForCausalLM"),Hir=o(" (RoBERTa model)"),Uir=l(),e7=a("li"),vue=a("strong"),Jir=o("roformer"),Yir=o(" \u2014 "),aX=a("a"),Kir=o("TFRoFormerForCausalLM"),Zir=o(" (RoFormer model)"),edr=l(),o7=a("li"),Tue=a("strong"),odr=o("transfo-xl"),rdr=o(" \u2014 "),nX=a("a"),tdr=o("TFTransfoXLLMHeadModel"),adr=o(" (Transformer-XL model)"),ndr=l(),r7=a("li"),Mue=a("strong"),sdr=o("xlm"),ldr=o(" \u2014 "),sX=a("a"),idr=o("TFXLMWithLMHeadModel"),ddr=o(" (XLM model)"),cdr=l(),t7=a("li"),Eue=a("strong"),fdr=o("xlnet"),mdr=o(" \u2014 "),lX=a("a"),gdr=o("TFXLNetLMHeadModel"),hdr=o(" (XLNet model)"),pdr=l(),Cue=a("p"),_dr=o("Examples:"),udr=l(),f(SA.$$.fragment),nPe=l(),Ec=a("h2"),a7=a("a"),wue=a("span"),f(RA.$$.fragment),bdr=l(),Aue=a("span"),Fdr=o("TFAutoModelForImageClassification"),sPe=l(),Mr=a("div"),f(BA.$$.fragment),vdr=l(),Cc=a("p"),Tdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iX=a("a"),Mdr=o("from_pretrained()"),Edr=o(" class method or the "),dX=a("a"),Cdr=o("from_config()"),wdr=o(` class
method.`),Adr=l(),PA=a("p"),ydr=o("This class cannot be instantiated directly using "),yue=a("code"),Ldr=o("__init__()"),xdr=o(" (throws an error)."),kdr=l(),_t=a("div"),f($A.$$.fragment),Sdr=l(),Lue=a("p"),Rdr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Bdr=l(),wc=a("p"),Pdr=o(`Note:
Loading a model from its configuration file does `),xue=a("strong"),$dr=o("not"),Idr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),qdr=o("from_pretrained()"),Ndr=o(" to load the model weights."),jdr=l(),kue=a("p"),Ddr=o("Examples:"),Gdr=l(),f(IA.$$.fragment),Odr=l(),uo=a("div"),f(qA.$$.fragment),Vdr=l(),Sue=a("p"),Xdr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zdr=l(),Fn=a("p"),Qdr=o("The model class to instantiate is selected based on the "),Rue=a("code"),Wdr=o("model_type"),Hdr=o(` property of the config object (either
passed as an argument or loaded from `),Bue=a("code"),Udr=o("pretrained_model_name_or_path"),Jdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=a("code"),Ydr=o("pretrained_model_name_or_path"),Kdr=o(":"),Zdr=l(),NA=a("ul"),n7=a("li"),$ue=a("strong"),ecr=o("convnext"),ocr=o(" \u2014 "),fX=a("a"),rcr=o("TFConvNextForImageClassification"),tcr=o(" (ConvNext model)"),acr=l(),s7=a("li"),Iue=a("strong"),ncr=o("vit"),scr=o(" \u2014 "),mX=a("a"),lcr=o("TFViTForImageClassification"),icr=o(" (ViT model)"),dcr=l(),que=a("p"),ccr=o("Examples:"),fcr=l(),f(jA.$$.fragment),lPe=l(),Ac=a("h2"),l7=a("a"),Nue=a("span"),f(DA.$$.fragment),mcr=l(),jue=a("span"),gcr=o("TFAutoModelForMaskedLM"),iPe=l(),Er=a("div"),f(GA.$$.fragment),hcr=l(),yc=a("p"),pcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gX=a("a"),_cr=o("from_pretrained()"),ucr=o(" class method or the "),hX=a("a"),bcr=o("from_config()"),Fcr=o(` class
method.`),vcr=l(),OA=a("p"),Tcr=o("This class cannot be instantiated directly using "),Due=a("code"),Mcr=o("__init__()"),Ecr=o(" (throws an error)."),Ccr=l(),ut=a("div"),f(VA.$$.fragment),wcr=l(),Gue=a("p"),Acr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ycr=l(),Lc=a("p"),Lcr=o(`Note:
Loading a model from its configuration file does `),Oue=a("strong"),xcr=o("not"),kcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=a("a"),Scr=o("from_pretrained()"),Rcr=o(" to load the model weights."),Bcr=l(),Vue=a("p"),Pcr=o("Examples:"),$cr=l(),f(XA.$$.fragment),Icr=l(),bo=a("div"),f(zA.$$.fragment),qcr=l(),Xue=a("p"),Ncr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jcr=l(),vn=a("p"),Dcr=o("The model class to instantiate is selected based on the "),zue=a("code"),Gcr=o("model_type"),Ocr=o(` property of the config object (either
passed as an argument or loaded from `),Que=a("code"),Vcr=o("pretrained_model_name_or_path"),Xcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=a("code"),zcr=o("pretrained_model_name_or_path"),Qcr=o(":"),Wcr=l(),J=a("ul"),i7=a("li"),Hue=a("strong"),Hcr=o("albert"),Ucr=o(" \u2014 "),_X=a("a"),Jcr=o("TFAlbertForMaskedLM"),Ycr=o(" (ALBERT model)"),Kcr=l(),d7=a("li"),Uue=a("strong"),Zcr=o("bert"),efr=o(" \u2014 "),uX=a("a"),ofr=o("TFBertForMaskedLM"),rfr=o(" (BERT model)"),tfr=l(),c7=a("li"),Jue=a("strong"),afr=o("camembert"),nfr=o(" \u2014 "),bX=a("a"),sfr=o("TFCamembertForMaskedLM"),lfr=o(" (CamemBERT model)"),ifr=l(),f7=a("li"),Yue=a("strong"),dfr=o("convbert"),cfr=o(" \u2014 "),FX=a("a"),ffr=o("TFConvBertForMaskedLM"),mfr=o(" (ConvBERT model)"),gfr=l(),m7=a("li"),Kue=a("strong"),hfr=o("deberta"),pfr=o(" \u2014 "),vX=a("a"),_fr=o("TFDebertaForMaskedLM"),ufr=o(" (DeBERTa model)"),bfr=l(),g7=a("li"),Zue=a("strong"),Ffr=o("deberta-v2"),vfr=o(" \u2014 "),TX=a("a"),Tfr=o("TFDebertaV2ForMaskedLM"),Mfr=o(" (DeBERTa-v2 model)"),Efr=l(),h7=a("li"),e2e=a("strong"),Cfr=o("distilbert"),wfr=o(" \u2014 "),MX=a("a"),Afr=o("TFDistilBertForMaskedLM"),yfr=o(" (DistilBERT model)"),Lfr=l(),p7=a("li"),o2e=a("strong"),xfr=o("electra"),kfr=o(" \u2014 "),EX=a("a"),Sfr=o("TFElectraForMaskedLM"),Rfr=o(" (ELECTRA model)"),Bfr=l(),_7=a("li"),r2e=a("strong"),Pfr=o("flaubert"),$fr=o(" \u2014 "),CX=a("a"),Ifr=o("TFFlaubertWithLMHeadModel"),qfr=o(" (FlauBERT model)"),Nfr=l(),u7=a("li"),t2e=a("strong"),jfr=o("funnel"),Dfr=o(" \u2014 "),wX=a("a"),Gfr=o("TFFunnelForMaskedLM"),Ofr=o(" (Funnel Transformer model)"),Vfr=l(),b7=a("li"),a2e=a("strong"),Xfr=o("layoutlm"),zfr=o(" \u2014 "),AX=a("a"),Qfr=o("TFLayoutLMForMaskedLM"),Wfr=o(" (LayoutLM model)"),Hfr=l(),F7=a("li"),n2e=a("strong"),Ufr=o("longformer"),Jfr=o(" \u2014 "),yX=a("a"),Yfr=o("TFLongformerForMaskedLM"),Kfr=o(" (Longformer model)"),Zfr=l(),v7=a("li"),s2e=a("strong"),emr=o("mobilebert"),omr=o(" \u2014 "),LX=a("a"),rmr=o("TFMobileBertForMaskedLM"),tmr=o(" (MobileBERT model)"),amr=l(),T7=a("li"),l2e=a("strong"),nmr=o("mpnet"),smr=o(" \u2014 "),xX=a("a"),lmr=o("TFMPNetForMaskedLM"),imr=o(" (MPNet model)"),dmr=l(),M7=a("li"),i2e=a("strong"),cmr=o("rembert"),fmr=o(" \u2014 "),kX=a("a"),mmr=o("TFRemBertForMaskedLM"),gmr=o(" (RemBERT model)"),hmr=l(),E7=a("li"),d2e=a("strong"),pmr=o("roberta"),_mr=o(" \u2014 "),SX=a("a"),umr=o("TFRobertaForMaskedLM"),bmr=o(" (RoBERTa model)"),Fmr=l(),C7=a("li"),c2e=a("strong"),vmr=o("roformer"),Tmr=o(" \u2014 "),RX=a("a"),Mmr=o("TFRoFormerForMaskedLM"),Emr=o(" (RoFormer model)"),Cmr=l(),w7=a("li"),f2e=a("strong"),wmr=o("tapas"),Amr=o(" \u2014 "),BX=a("a"),ymr=o("TFTapasForMaskedLM"),Lmr=o(" (TAPAS model)"),xmr=l(),A7=a("li"),m2e=a("strong"),kmr=o("xlm"),Smr=o(" \u2014 "),PX=a("a"),Rmr=o("TFXLMWithLMHeadModel"),Bmr=o(" (XLM model)"),Pmr=l(),y7=a("li"),g2e=a("strong"),$mr=o("xlm-roberta"),Imr=o(" \u2014 "),$X=a("a"),qmr=o("TFXLMRobertaForMaskedLM"),Nmr=o(" (XLM-RoBERTa model)"),jmr=l(),h2e=a("p"),Dmr=o("Examples:"),Gmr=l(),f(QA.$$.fragment),dPe=l(),xc=a("h2"),L7=a("a"),p2e=a("span"),f(WA.$$.fragment),Omr=l(),_2e=a("span"),Vmr=o("TFAutoModelForSeq2SeqLM"),cPe=l(),Cr=a("div"),f(HA.$$.fragment),Xmr=l(),kc=a("p"),zmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IX=a("a"),Qmr=o("from_pretrained()"),Wmr=o(" class method or the "),qX=a("a"),Hmr=o("from_config()"),Umr=o(` class
method.`),Jmr=l(),UA=a("p"),Ymr=o("This class cannot be instantiated directly using "),u2e=a("code"),Kmr=o("__init__()"),Zmr=o(" (throws an error)."),egr=l(),bt=a("div"),f(JA.$$.fragment),ogr=l(),b2e=a("p"),rgr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tgr=l(),Sc=a("p"),agr=o(`Note:
Loading a model from its configuration file does `),F2e=a("strong"),ngr=o("not"),sgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=a("a"),lgr=o("from_pretrained()"),igr=o(" to load the model weights."),dgr=l(),v2e=a("p"),cgr=o("Examples:"),fgr=l(),f(YA.$$.fragment),mgr=l(),Fo=a("div"),f(KA.$$.fragment),ggr=l(),T2e=a("p"),hgr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pgr=l(),Tn=a("p"),_gr=o("The model class to instantiate is selected based on the "),M2e=a("code"),ugr=o("model_type"),bgr=o(` property of the config object (either
passed as an argument or loaded from `),E2e=a("code"),Fgr=o("pretrained_model_name_or_path"),vgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=a("code"),Tgr=o("pretrained_model_name_or_path"),Mgr=o(":"),Egr=l(),be=a("ul"),x7=a("li"),w2e=a("strong"),Cgr=o("bart"),wgr=o(" \u2014 "),jX=a("a"),Agr=o("TFBartForConditionalGeneration"),ygr=o(" (BART model)"),Lgr=l(),k7=a("li"),A2e=a("strong"),xgr=o("blenderbot"),kgr=o(" \u2014 "),DX=a("a"),Sgr=o("TFBlenderbotForConditionalGeneration"),Rgr=o(" (Blenderbot model)"),Bgr=l(),S7=a("li"),y2e=a("strong"),Pgr=o("blenderbot-small"),$gr=o(" \u2014 "),GX=a("a"),Igr=o("TFBlenderbotSmallForConditionalGeneration"),qgr=o(" (BlenderbotSmall model)"),Ngr=l(),R7=a("li"),L2e=a("strong"),jgr=o("encoder-decoder"),Dgr=o(" \u2014 "),OX=a("a"),Ggr=o("TFEncoderDecoderModel"),Ogr=o(" (Encoder decoder model)"),Vgr=l(),B7=a("li"),x2e=a("strong"),Xgr=o("led"),zgr=o(" \u2014 "),VX=a("a"),Qgr=o("TFLEDForConditionalGeneration"),Wgr=o(" (LED model)"),Hgr=l(),P7=a("li"),k2e=a("strong"),Ugr=o("marian"),Jgr=o(" \u2014 "),XX=a("a"),Ygr=o("TFMarianMTModel"),Kgr=o(" (Marian model)"),Zgr=l(),$7=a("li"),S2e=a("strong"),ehr=o("mbart"),ohr=o(" \u2014 "),zX=a("a"),rhr=o("TFMBartForConditionalGeneration"),thr=o(" (mBART model)"),ahr=l(),I7=a("li"),R2e=a("strong"),nhr=o("mt5"),shr=o(" \u2014 "),QX=a("a"),lhr=o("TFMT5ForConditionalGeneration"),ihr=o(" (mT5 model)"),dhr=l(),q7=a("li"),B2e=a("strong"),chr=o("pegasus"),fhr=o(" \u2014 "),WX=a("a"),mhr=o("TFPegasusForConditionalGeneration"),ghr=o(" (Pegasus model)"),hhr=l(),N7=a("li"),P2e=a("strong"),phr=o("t5"),_hr=o(" \u2014 "),HX=a("a"),uhr=o("TFT5ForConditionalGeneration"),bhr=o(" (T5 model)"),Fhr=l(),$2e=a("p"),vhr=o("Examples:"),Thr=l(),f(ZA.$$.fragment),fPe=l(),Rc=a("h2"),j7=a("a"),I2e=a("span"),f(e0.$$.fragment),Mhr=l(),q2e=a("span"),Ehr=o("TFAutoModelForSequenceClassification"),mPe=l(),wr=a("div"),f(o0.$$.fragment),Chr=l(),Bc=a("p"),whr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UX=a("a"),Ahr=o("from_pretrained()"),yhr=o(" class method or the "),JX=a("a"),Lhr=o("from_config()"),xhr=o(` class
method.`),khr=l(),r0=a("p"),Shr=o("This class cannot be instantiated directly using "),N2e=a("code"),Rhr=o("__init__()"),Bhr=o(" (throws an error)."),Phr=l(),Ft=a("div"),f(t0.$$.fragment),$hr=l(),j2e=a("p"),Ihr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qhr=l(),Pc=a("p"),Nhr=o(`Note:
Loading a model from its configuration file does `),D2e=a("strong"),jhr=o("not"),Dhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=a("a"),Ghr=o("from_pretrained()"),Ohr=o(" to load the model weights."),Vhr=l(),G2e=a("p"),Xhr=o("Examples:"),zhr=l(),f(a0.$$.fragment),Qhr=l(),vo=a("div"),f(n0.$$.fragment),Whr=l(),O2e=a("p"),Hhr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Uhr=l(),Mn=a("p"),Jhr=o("The model class to instantiate is selected based on the "),V2e=a("code"),Yhr=o("model_type"),Khr=o(` property of the config object (either
passed as an argument or loaded from `),X2e=a("code"),Zhr=o("pretrained_model_name_or_path"),epr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=a("code"),opr=o("pretrained_model_name_or_path"),rpr=o(":"),tpr=l(),V=a("ul"),D7=a("li"),Q2e=a("strong"),apr=o("albert"),npr=o(" \u2014 "),KX=a("a"),spr=o("TFAlbertForSequenceClassification"),lpr=o(" (ALBERT model)"),ipr=l(),G7=a("li"),W2e=a("strong"),dpr=o("bert"),cpr=o(" \u2014 "),ZX=a("a"),fpr=o("TFBertForSequenceClassification"),mpr=o(" (BERT model)"),gpr=l(),O7=a("li"),H2e=a("strong"),hpr=o("camembert"),ppr=o(" \u2014 "),ez=a("a"),_pr=o("TFCamembertForSequenceClassification"),upr=o(" (CamemBERT model)"),bpr=l(),V7=a("li"),U2e=a("strong"),Fpr=o("convbert"),vpr=o(" \u2014 "),oz=a("a"),Tpr=o("TFConvBertForSequenceClassification"),Mpr=o(" (ConvBERT model)"),Epr=l(),X7=a("li"),J2e=a("strong"),Cpr=o("ctrl"),wpr=o(" \u2014 "),rz=a("a"),Apr=o("TFCTRLForSequenceClassification"),ypr=o(" (CTRL model)"),Lpr=l(),z7=a("li"),Y2e=a("strong"),xpr=o("deberta"),kpr=o(" \u2014 "),tz=a("a"),Spr=o("TFDebertaForSequenceClassification"),Rpr=o(" (DeBERTa model)"),Bpr=l(),Q7=a("li"),K2e=a("strong"),Ppr=o("deberta-v2"),$pr=o(" \u2014 "),az=a("a"),Ipr=o("TFDebertaV2ForSequenceClassification"),qpr=o(" (DeBERTa-v2 model)"),Npr=l(),W7=a("li"),Z2e=a("strong"),jpr=o("distilbert"),Dpr=o(" \u2014 "),nz=a("a"),Gpr=o("TFDistilBertForSequenceClassification"),Opr=o(" (DistilBERT model)"),Vpr=l(),H7=a("li"),e1e=a("strong"),Xpr=o("electra"),zpr=o(" \u2014 "),sz=a("a"),Qpr=o("TFElectraForSequenceClassification"),Wpr=o(" (ELECTRA model)"),Hpr=l(),U7=a("li"),o1e=a("strong"),Upr=o("flaubert"),Jpr=o(" \u2014 "),lz=a("a"),Ypr=o("TFFlaubertForSequenceClassification"),Kpr=o(" (FlauBERT model)"),Zpr=l(),J7=a("li"),r1e=a("strong"),e_r=o("funnel"),o_r=o(" \u2014 "),iz=a("a"),r_r=o("TFFunnelForSequenceClassification"),t_r=o(" (Funnel Transformer model)"),a_r=l(),Y7=a("li"),t1e=a("strong"),n_r=o("gpt2"),s_r=o(" \u2014 "),dz=a("a"),l_r=o("TFGPT2ForSequenceClassification"),i_r=o(" (OpenAI GPT-2 model)"),d_r=l(),K7=a("li"),a1e=a("strong"),c_r=o("gptj"),f_r=o(" \u2014 "),cz=a("a"),m_r=o("TFGPTJForSequenceClassification"),g_r=o(" (GPT-J model)"),h_r=l(),Z7=a("li"),n1e=a("strong"),p_r=o("layoutlm"),__r=o(" \u2014 "),fz=a("a"),u_r=o("TFLayoutLMForSequenceClassification"),b_r=o(" (LayoutLM model)"),F_r=l(),e9=a("li"),s1e=a("strong"),v_r=o("longformer"),T_r=o(" \u2014 "),mz=a("a"),M_r=o("TFLongformerForSequenceClassification"),E_r=o(" (Longformer model)"),C_r=l(),o9=a("li"),l1e=a("strong"),w_r=o("mobilebert"),A_r=o(" \u2014 "),gz=a("a"),y_r=o("TFMobileBertForSequenceClassification"),L_r=o(" (MobileBERT model)"),x_r=l(),r9=a("li"),i1e=a("strong"),k_r=o("mpnet"),S_r=o(" \u2014 "),hz=a("a"),R_r=o("TFMPNetForSequenceClassification"),B_r=o(" (MPNet model)"),P_r=l(),t9=a("li"),d1e=a("strong"),$_r=o("openai-gpt"),I_r=o(" \u2014 "),pz=a("a"),q_r=o("TFOpenAIGPTForSequenceClassification"),N_r=o(" (OpenAI GPT model)"),j_r=l(),a9=a("li"),c1e=a("strong"),D_r=o("rembert"),G_r=o(" \u2014 "),_z=a("a"),O_r=o("TFRemBertForSequenceClassification"),V_r=o(" (RemBERT model)"),X_r=l(),n9=a("li"),f1e=a("strong"),z_r=o("roberta"),Q_r=o(" \u2014 "),uz=a("a"),W_r=o("TFRobertaForSequenceClassification"),H_r=o(" (RoBERTa model)"),U_r=l(),s9=a("li"),m1e=a("strong"),J_r=o("roformer"),Y_r=o(" \u2014 "),bz=a("a"),K_r=o("TFRoFormerForSequenceClassification"),Z_r=o(" (RoFormer model)"),eur=l(),l9=a("li"),g1e=a("strong"),our=o("tapas"),rur=o(" \u2014 "),Fz=a("a"),tur=o("TFTapasForSequenceClassification"),aur=o(" (TAPAS model)"),nur=l(),i9=a("li"),h1e=a("strong"),sur=o("transfo-xl"),lur=o(" \u2014 "),vz=a("a"),iur=o("TFTransfoXLForSequenceClassification"),dur=o(" (Transformer-XL model)"),cur=l(),d9=a("li"),p1e=a("strong"),fur=o("xlm"),mur=o(" \u2014 "),Tz=a("a"),gur=o("TFXLMForSequenceClassification"),hur=o(" (XLM model)"),pur=l(),c9=a("li"),_1e=a("strong"),_ur=o("xlm-roberta"),uur=o(" \u2014 "),Mz=a("a"),bur=o("TFXLMRobertaForSequenceClassification"),Fur=o(" (XLM-RoBERTa model)"),vur=l(),f9=a("li"),u1e=a("strong"),Tur=o("xlnet"),Mur=o(" \u2014 "),Ez=a("a"),Eur=o("TFXLNetForSequenceClassification"),Cur=o(" (XLNet model)"),wur=l(),b1e=a("p"),Aur=o("Examples:"),yur=l(),f(s0.$$.fragment),gPe=l(),$c=a("h2"),m9=a("a"),F1e=a("span"),f(l0.$$.fragment),Lur=l(),v1e=a("span"),xur=o("TFAutoModelForMultipleChoice"),hPe=l(),Ar=a("div"),f(i0.$$.fragment),kur=l(),Ic=a("p"),Sur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Cz=a("a"),Rur=o("from_pretrained()"),Bur=o(" class method or the "),wz=a("a"),Pur=o("from_config()"),$ur=o(` class
method.`),Iur=l(),d0=a("p"),qur=o("This class cannot be instantiated directly using "),T1e=a("code"),Nur=o("__init__()"),jur=o(" (throws an error)."),Dur=l(),vt=a("div"),f(c0.$$.fragment),Gur=l(),M1e=a("p"),Our=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Vur=l(),qc=a("p"),Xur=o(`Note:
Loading a model from its configuration file does `),E1e=a("strong"),zur=o("not"),Qur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),Wur=o("from_pretrained()"),Hur=o(" to load the model weights."),Uur=l(),C1e=a("p"),Jur=o("Examples:"),Yur=l(),f(f0.$$.fragment),Kur=l(),To=a("div"),f(m0.$$.fragment),Zur=l(),w1e=a("p"),e2r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),o2r=l(),En=a("p"),r2r=o("The model class to instantiate is selected based on the "),A1e=a("code"),t2r=o("model_type"),a2r=o(` property of the config object (either
passed as an argument or loaded from `),y1e=a("code"),n2r=o("pretrained_model_name_or_path"),s2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=a("code"),l2r=o("pretrained_model_name_or_path"),i2r=o(":"),d2r=l(),se=a("ul"),g9=a("li"),x1e=a("strong"),c2r=o("albert"),f2r=o(" \u2014 "),yz=a("a"),m2r=o("TFAlbertForMultipleChoice"),g2r=o(" (ALBERT model)"),h2r=l(),h9=a("li"),k1e=a("strong"),p2r=o("bert"),_2r=o(" \u2014 "),Lz=a("a"),u2r=o("TFBertForMultipleChoice"),b2r=o(" (BERT model)"),F2r=l(),p9=a("li"),S1e=a("strong"),v2r=o("camembert"),T2r=o(" \u2014 "),xz=a("a"),M2r=o("TFCamembertForMultipleChoice"),E2r=o(" (CamemBERT model)"),C2r=l(),_9=a("li"),R1e=a("strong"),w2r=o("convbert"),A2r=o(" \u2014 "),kz=a("a"),y2r=o("TFConvBertForMultipleChoice"),L2r=o(" (ConvBERT model)"),x2r=l(),u9=a("li"),B1e=a("strong"),k2r=o("distilbert"),S2r=o(" \u2014 "),Sz=a("a"),R2r=o("TFDistilBertForMultipleChoice"),B2r=o(" (DistilBERT model)"),P2r=l(),b9=a("li"),P1e=a("strong"),$2r=o("electra"),I2r=o(" \u2014 "),Rz=a("a"),q2r=o("TFElectraForMultipleChoice"),N2r=o(" (ELECTRA model)"),j2r=l(),F9=a("li"),$1e=a("strong"),D2r=o("flaubert"),G2r=o(" \u2014 "),Bz=a("a"),O2r=o("TFFlaubertForMultipleChoice"),V2r=o(" (FlauBERT model)"),X2r=l(),v9=a("li"),I1e=a("strong"),z2r=o("funnel"),Q2r=o(" \u2014 "),Pz=a("a"),W2r=o("TFFunnelForMultipleChoice"),H2r=o(" (Funnel Transformer model)"),U2r=l(),T9=a("li"),q1e=a("strong"),J2r=o("longformer"),Y2r=o(" \u2014 "),$z=a("a"),K2r=o("TFLongformerForMultipleChoice"),Z2r=o(" (Longformer model)"),e1r=l(),M9=a("li"),N1e=a("strong"),o1r=o("mobilebert"),r1r=o(" \u2014 "),Iz=a("a"),t1r=o("TFMobileBertForMultipleChoice"),a1r=o(" (MobileBERT model)"),n1r=l(),E9=a("li"),j1e=a("strong"),s1r=o("mpnet"),l1r=o(" \u2014 "),qz=a("a"),i1r=o("TFMPNetForMultipleChoice"),d1r=o(" (MPNet model)"),c1r=l(),C9=a("li"),D1e=a("strong"),f1r=o("rembert"),m1r=o(" \u2014 "),Nz=a("a"),g1r=o("TFRemBertForMultipleChoice"),h1r=o(" (RemBERT model)"),p1r=l(),w9=a("li"),G1e=a("strong"),_1r=o("roberta"),u1r=o(" \u2014 "),jz=a("a"),b1r=o("TFRobertaForMultipleChoice"),F1r=o(" (RoBERTa model)"),v1r=l(),A9=a("li"),O1e=a("strong"),T1r=o("roformer"),M1r=o(" \u2014 "),Dz=a("a"),E1r=o("TFRoFormerForMultipleChoice"),C1r=o(" (RoFormer model)"),w1r=l(),y9=a("li"),V1e=a("strong"),A1r=o("xlm"),y1r=o(" \u2014 "),Gz=a("a"),L1r=o("TFXLMForMultipleChoice"),x1r=o(" (XLM model)"),k1r=l(),L9=a("li"),X1e=a("strong"),S1r=o("xlm-roberta"),R1r=o(" \u2014 "),Oz=a("a"),B1r=o("TFXLMRobertaForMultipleChoice"),P1r=o(" (XLM-RoBERTa model)"),$1r=l(),x9=a("li"),z1e=a("strong"),I1r=o("xlnet"),q1r=o(" \u2014 "),Vz=a("a"),N1r=o("TFXLNetForMultipleChoice"),j1r=o(" (XLNet model)"),D1r=l(),Q1e=a("p"),G1r=o("Examples:"),O1r=l(),f(g0.$$.fragment),pPe=l(),Nc=a("h2"),k9=a("a"),W1e=a("span"),f(h0.$$.fragment),V1r=l(),H1e=a("span"),X1r=o("TFAutoModelForTableQuestionAnswering"),_Pe=l(),yr=a("div"),f(p0.$$.fragment),z1r=l(),jc=a("p"),Q1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Xz=a("a"),W1r=o("from_pretrained()"),H1r=o(" class method or the "),zz=a("a"),U1r=o("from_config()"),J1r=o(` class
method.`),Y1r=l(),_0=a("p"),K1r=o("This class cannot be instantiated directly using "),U1e=a("code"),Z1r=o("__init__()"),ebr=o(" (throws an error)."),obr=l(),Tt=a("div"),f(u0.$$.fragment),rbr=l(),J1e=a("p"),tbr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),abr=l(),Dc=a("p"),nbr=o(`Note:
Loading a model from its configuration file does `),Y1e=a("strong"),sbr=o("not"),lbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),ibr=o("from_pretrained()"),dbr=o(" to load the model weights."),cbr=l(),K1e=a("p"),fbr=o("Examples:"),mbr=l(),f(b0.$$.fragment),gbr=l(),Mo=a("div"),f(F0.$$.fragment),hbr=l(),Z1e=a("p"),pbr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_br=l(),Cn=a("p"),ubr=o("The model class to instantiate is selected based on the "),ebe=a("code"),bbr=o("model_type"),Fbr=o(` property of the config object (either
passed as an argument or loaded from `),obe=a("code"),vbr=o("pretrained_model_name_or_path"),Tbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=a("code"),Mbr=o("pretrained_model_name_or_path"),Ebr=o(":"),Cbr=l(),tbe=a("ul"),S9=a("li"),abe=a("strong"),wbr=o("tapas"),Abr=o(" \u2014 "),Wz=a("a"),ybr=o("TFTapasForQuestionAnswering"),Lbr=o(" (TAPAS model)"),xbr=l(),nbe=a("p"),kbr=o("Examples:"),Sbr=l(),f(v0.$$.fragment),uPe=l(),Gc=a("h2"),R9=a("a"),sbe=a("span"),f(T0.$$.fragment),Rbr=l(),lbe=a("span"),Bbr=o("TFAutoModelForTokenClassification"),bPe=l(),Lr=a("div"),f(M0.$$.fragment),Pbr=l(),Oc=a("p"),$br=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Hz=a("a"),Ibr=o("from_pretrained()"),qbr=o(" class method or the "),Uz=a("a"),Nbr=o("from_config()"),jbr=o(` class
method.`),Dbr=l(),E0=a("p"),Gbr=o("This class cannot be instantiated directly using "),ibe=a("code"),Obr=o("__init__()"),Vbr=o(" (throws an error)."),Xbr=l(),Mt=a("div"),f(C0.$$.fragment),zbr=l(),dbe=a("p"),Qbr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Wbr=l(),Vc=a("p"),Hbr=o(`Note:
Loading a model from its configuration file does `),cbe=a("strong"),Ubr=o("not"),Jbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),Ybr=o("from_pretrained()"),Kbr=o(" to load the model weights."),Zbr=l(),fbe=a("p"),e6r=o("Examples:"),o6r=l(),f(w0.$$.fragment),r6r=l(),Eo=a("div"),f(A0.$$.fragment),t6r=l(),mbe=a("p"),a6r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),n6r=l(),wn=a("p"),s6r=o("The model class to instantiate is selected based on the "),gbe=a("code"),l6r=o("model_type"),i6r=o(` property of the config object (either
passed as an argument or loaded from `),hbe=a("code"),d6r=o("pretrained_model_name_or_path"),c6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=a("code"),f6r=o("pretrained_model_name_or_path"),m6r=o(":"),g6r=l(),Y=a("ul"),B9=a("li"),_be=a("strong"),h6r=o("albert"),p6r=o(" \u2014 "),Yz=a("a"),_6r=o("TFAlbertForTokenClassification"),u6r=o(" (ALBERT model)"),b6r=l(),P9=a("li"),ube=a("strong"),F6r=o("bert"),v6r=o(" \u2014 "),Kz=a("a"),T6r=o("TFBertForTokenClassification"),M6r=o(" (BERT model)"),E6r=l(),$9=a("li"),bbe=a("strong"),C6r=o("camembert"),w6r=o(" \u2014 "),Zz=a("a"),A6r=o("TFCamembertForTokenClassification"),y6r=o(" (CamemBERT model)"),L6r=l(),I9=a("li"),Fbe=a("strong"),x6r=o("convbert"),k6r=o(" \u2014 "),eQ=a("a"),S6r=o("TFConvBertForTokenClassification"),R6r=o(" (ConvBERT model)"),B6r=l(),q9=a("li"),vbe=a("strong"),P6r=o("deberta"),$6r=o(" \u2014 "),oQ=a("a"),I6r=o("TFDebertaForTokenClassification"),q6r=o(" (DeBERTa model)"),N6r=l(),N9=a("li"),Tbe=a("strong"),j6r=o("deberta-v2"),D6r=o(" \u2014 "),rQ=a("a"),G6r=o("TFDebertaV2ForTokenClassification"),O6r=o(" (DeBERTa-v2 model)"),V6r=l(),j9=a("li"),Mbe=a("strong"),X6r=o("distilbert"),z6r=o(" \u2014 "),tQ=a("a"),Q6r=o("TFDistilBertForTokenClassification"),W6r=o(" (DistilBERT model)"),H6r=l(),D9=a("li"),Ebe=a("strong"),U6r=o("electra"),J6r=o(" \u2014 "),aQ=a("a"),Y6r=o("TFElectraForTokenClassification"),K6r=o(" (ELECTRA model)"),Z6r=l(),G9=a("li"),Cbe=a("strong"),eFr=o("flaubert"),oFr=o(" \u2014 "),nQ=a("a"),rFr=o("TFFlaubertForTokenClassification"),tFr=o(" (FlauBERT model)"),aFr=l(),O9=a("li"),wbe=a("strong"),nFr=o("funnel"),sFr=o(" \u2014 "),sQ=a("a"),lFr=o("TFFunnelForTokenClassification"),iFr=o(" (Funnel Transformer model)"),dFr=l(),V9=a("li"),Abe=a("strong"),cFr=o("layoutlm"),fFr=o(" \u2014 "),lQ=a("a"),mFr=o("TFLayoutLMForTokenClassification"),gFr=o(" (LayoutLM model)"),hFr=l(),X9=a("li"),ybe=a("strong"),pFr=o("longformer"),_Fr=o(" \u2014 "),iQ=a("a"),uFr=o("TFLongformerForTokenClassification"),bFr=o(" (Longformer model)"),FFr=l(),z9=a("li"),Lbe=a("strong"),vFr=o("mobilebert"),TFr=o(" \u2014 "),dQ=a("a"),MFr=o("TFMobileBertForTokenClassification"),EFr=o(" (MobileBERT model)"),CFr=l(),Q9=a("li"),xbe=a("strong"),wFr=o("mpnet"),AFr=o(" \u2014 "),cQ=a("a"),yFr=o("TFMPNetForTokenClassification"),LFr=o(" (MPNet model)"),xFr=l(),W9=a("li"),kbe=a("strong"),kFr=o("rembert"),SFr=o(" \u2014 "),fQ=a("a"),RFr=o("TFRemBertForTokenClassification"),BFr=o(" (RemBERT model)"),PFr=l(),H9=a("li"),Sbe=a("strong"),$Fr=o("roberta"),IFr=o(" \u2014 "),mQ=a("a"),qFr=o("TFRobertaForTokenClassification"),NFr=o(" (RoBERTa model)"),jFr=l(),U9=a("li"),Rbe=a("strong"),DFr=o("roformer"),GFr=o(" \u2014 "),gQ=a("a"),OFr=o("TFRoFormerForTokenClassification"),VFr=o(" (RoFormer model)"),XFr=l(),J9=a("li"),Bbe=a("strong"),zFr=o("xlm"),QFr=o(" \u2014 "),hQ=a("a"),WFr=o("TFXLMForTokenClassification"),HFr=o(" (XLM model)"),UFr=l(),Y9=a("li"),Pbe=a("strong"),JFr=o("xlm-roberta"),YFr=o(" \u2014 "),pQ=a("a"),KFr=o("TFXLMRobertaForTokenClassification"),ZFr=o(" (XLM-RoBERTa model)"),evr=l(),K9=a("li"),$be=a("strong"),ovr=o("xlnet"),rvr=o(" \u2014 "),_Q=a("a"),tvr=o("TFXLNetForTokenClassification"),avr=o(" (XLNet model)"),nvr=l(),Ibe=a("p"),svr=o("Examples:"),lvr=l(),f(y0.$$.fragment),FPe=l(),Xc=a("h2"),Z9=a("a"),qbe=a("span"),f(L0.$$.fragment),ivr=l(),Nbe=a("span"),dvr=o("TFAutoModelForQuestionAnswering"),vPe=l(),xr=a("div"),f(x0.$$.fragment),cvr=l(),zc=a("p"),fvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uQ=a("a"),mvr=o("from_pretrained()"),gvr=o(" class method or the "),bQ=a("a"),hvr=o("from_config()"),pvr=o(` class
method.`),_vr=l(),k0=a("p"),uvr=o("This class cannot be instantiated directly using "),jbe=a("code"),bvr=o("__init__()"),Fvr=o(" (throws an error)."),vvr=l(),Et=a("div"),f(S0.$$.fragment),Tvr=l(),Dbe=a("p"),Mvr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Evr=l(),Qc=a("p"),Cvr=o(`Note:
Loading a model from its configuration file does `),Gbe=a("strong"),wvr=o("not"),Avr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),yvr=o("from_pretrained()"),Lvr=o(" to load the model weights."),xvr=l(),Obe=a("p"),kvr=o("Examples:"),Svr=l(),f(R0.$$.fragment),Rvr=l(),Co=a("div"),f(B0.$$.fragment),Bvr=l(),Vbe=a("p"),Pvr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$vr=l(),An=a("p"),Ivr=o("The model class to instantiate is selected based on the "),Xbe=a("code"),qvr=o("model_type"),Nvr=o(` property of the config object (either
passed as an argument or loaded from `),zbe=a("code"),jvr=o("pretrained_model_name_or_path"),Dvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=a("code"),Gvr=o("pretrained_model_name_or_path"),Ovr=o(":"),Vvr=l(),K=a("ul"),eM=a("li"),Wbe=a("strong"),Xvr=o("albert"),zvr=o(" \u2014 "),vQ=a("a"),Qvr=o("TFAlbertForQuestionAnswering"),Wvr=o(" (ALBERT model)"),Hvr=l(),oM=a("li"),Hbe=a("strong"),Uvr=o("bert"),Jvr=o(" \u2014 "),TQ=a("a"),Yvr=o("TFBertForQuestionAnswering"),Kvr=o(" (BERT model)"),Zvr=l(),rM=a("li"),Ube=a("strong"),eTr=o("camembert"),oTr=o(" \u2014 "),MQ=a("a"),rTr=o("TFCamembertForQuestionAnswering"),tTr=o(" (CamemBERT model)"),aTr=l(),tM=a("li"),Jbe=a("strong"),nTr=o("convbert"),sTr=o(" \u2014 "),EQ=a("a"),lTr=o("TFConvBertForQuestionAnswering"),iTr=o(" (ConvBERT model)"),dTr=l(),aM=a("li"),Ybe=a("strong"),cTr=o("deberta"),fTr=o(" \u2014 "),CQ=a("a"),mTr=o("TFDebertaForQuestionAnswering"),gTr=o(" (DeBERTa model)"),hTr=l(),nM=a("li"),Kbe=a("strong"),pTr=o("deberta-v2"),_Tr=o(" \u2014 "),wQ=a("a"),uTr=o("TFDebertaV2ForQuestionAnswering"),bTr=o(" (DeBERTa-v2 model)"),FTr=l(),sM=a("li"),Zbe=a("strong"),vTr=o("distilbert"),TTr=o(" \u2014 "),AQ=a("a"),MTr=o("TFDistilBertForQuestionAnswering"),ETr=o(" (DistilBERT model)"),CTr=l(),lM=a("li"),e6e=a("strong"),wTr=o("electra"),ATr=o(" \u2014 "),yQ=a("a"),yTr=o("TFElectraForQuestionAnswering"),LTr=o(" (ELECTRA model)"),xTr=l(),iM=a("li"),o6e=a("strong"),kTr=o("flaubert"),STr=o(" \u2014 "),LQ=a("a"),RTr=o("TFFlaubertForQuestionAnsweringSimple"),BTr=o(" (FlauBERT model)"),PTr=l(),dM=a("li"),r6e=a("strong"),$Tr=o("funnel"),ITr=o(" \u2014 "),xQ=a("a"),qTr=o("TFFunnelForQuestionAnswering"),NTr=o(" (Funnel Transformer model)"),jTr=l(),cM=a("li"),t6e=a("strong"),DTr=o("gptj"),GTr=o(" \u2014 "),kQ=a("a"),OTr=o("TFGPTJForQuestionAnswering"),VTr=o(" (GPT-J model)"),XTr=l(),fM=a("li"),a6e=a("strong"),zTr=o("longformer"),QTr=o(" \u2014 "),SQ=a("a"),WTr=o("TFLongformerForQuestionAnswering"),HTr=o(" (Longformer model)"),UTr=l(),mM=a("li"),n6e=a("strong"),JTr=o("mobilebert"),YTr=o(" \u2014 "),RQ=a("a"),KTr=o("TFMobileBertForQuestionAnswering"),ZTr=o(" (MobileBERT model)"),e7r=l(),gM=a("li"),s6e=a("strong"),o7r=o("mpnet"),r7r=o(" \u2014 "),BQ=a("a"),t7r=o("TFMPNetForQuestionAnswering"),a7r=o(" (MPNet model)"),n7r=l(),hM=a("li"),l6e=a("strong"),s7r=o("rembert"),l7r=o(" \u2014 "),PQ=a("a"),i7r=o("TFRemBertForQuestionAnswering"),d7r=o(" (RemBERT model)"),c7r=l(),pM=a("li"),i6e=a("strong"),f7r=o("roberta"),m7r=o(" \u2014 "),$Q=a("a"),g7r=o("TFRobertaForQuestionAnswering"),h7r=o(" (RoBERTa model)"),p7r=l(),_M=a("li"),d6e=a("strong"),_7r=o("roformer"),u7r=o(" \u2014 "),IQ=a("a"),b7r=o("TFRoFormerForQuestionAnswering"),F7r=o(" (RoFormer model)"),v7r=l(),uM=a("li"),c6e=a("strong"),T7r=o("xlm"),M7r=o(" \u2014 "),qQ=a("a"),E7r=o("TFXLMForQuestionAnsweringSimple"),C7r=o(" (XLM model)"),w7r=l(),bM=a("li"),f6e=a("strong"),A7r=o("xlm-roberta"),y7r=o(" \u2014 "),NQ=a("a"),L7r=o("TFXLMRobertaForQuestionAnswering"),x7r=o(" (XLM-RoBERTa model)"),k7r=l(),FM=a("li"),m6e=a("strong"),S7r=o("xlnet"),R7r=o(" \u2014 "),jQ=a("a"),B7r=o("TFXLNetForQuestionAnsweringSimple"),P7r=o(" (XLNet model)"),$7r=l(),g6e=a("p"),I7r=o("Examples:"),q7r=l(),f(P0.$$.fragment),TPe=l(),Wc=a("h2"),vM=a("a"),h6e=a("span"),f($0.$$.fragment),N7r=l(),p6e=a("span"),j7r=o("TFAutoModelForVision2Seq"),MPe=l(),kr=a("div"),f(I0.$$.fragment),D7r=l(),Hc=a("p"),G7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DQ=a("a"),O7r=o("from_pretrained()"),V7r=o(" class method or the "),GQ=a("a"),X7r=o("from_config()"),z7r=o(` class
method.`),Q7r=l(),q0=a("p"),W7r=o("This class cannot be instantiated directly using "),_6e=a("code"),H7r=o("__init__()"),U7r=o(" (throws an error)."),J7r=l(),Ct=a("div"),f(N0.$$.fragment),Y7r=l(),u6e=a("p"),K7r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Z7r=l(),Uc=a("p"),e9r=o(`Note:
Loading a model from its configuration file does `),b6e=a("strong"),o9r=o("not"),r9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=a("a"),t9r=o("from_pretrained()"),a9r=o(" to load the model weights."),n9r=l(),F6e=a("p"),s9r=o("Examples:"),l9r=l(),f(j0.$$.fragment),i9r=l(),wo=a("div"),f(D0.$$.fragment),d9r=l(),v6e=a("p"),c9r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),f9r=l(),yn=a("p"),m9r=o("The model class to instantiate is selected based on the "),T6e=a("code"),g9r=o("model_type"),h9r=o(` property of the config object (either
passed as an argument or loaded from `),M6e=a("code"),p9r=o("pretrained_model_name_or_path"),_9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E6e=a("code"),u9r=o("pretrained_model_name_or_path"),b9r=o(":"),F9r=l(),C6e=a("ul"),TM=a("li"),w6e=a("strong"),v9r=o("vision-encoder-decoder"),T9r=o(" \u2014 "),VQ=a("a"),M9r=o("TFVisionEncoderDecoderModel"),E9r=o(" (Vision Encoder decoder model)"),C9r=l(),A6e=a("p"),w9r=o("Examples:"),A9r=l(),f(G0.$$.fragment),EPe=l(),Jc=a("h2"),MM=a("a"),y6e=a("span"),f(O0.$$.fragment),y9r=l(),L6e=a("span"),L9r=o("TFAutoModelForSpeechSeq2Seq"),CPe=l(),Sr=a("div"),f(V0.$$.fragment),x9r=l(),Yc=a("p"),k9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XQ=a("a"),S9r=o("from_pretrained()"),R9r=o(" class method or the "),zQ=a("a"),B9r=o("from_config()"),P9r=o(` class
method.`),$9r=l(),X0=a("p"),I9r=o("This class cannot be instantiated directly using "),x6e=a("code"),q9r=o("__init__()"),N9r=o(" (throws an error)."),j9r=l(),wt=a("div"),f(z0.$$.fragment),D9r=l(),k6e=a("p"),G9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),O9r=l(),Kc=a("p"),V9r=o(`Note:
Loading a model from its configuration file does `),S6e=a("strong"),X9r=o("not"),z9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),Q9r=o("from_pretrained()"),W9r=o(" to load the model weights."),H9r=l(),R6e=a("p"),U9r=o("Examples:"),J9r=l(),f(Q0.$$.fragment),Y9r=l(),Ao=a("div"),f(W0.$$.fragment),K9r=l(),B6e=a("p"),Z9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),eMr=l(),Ln=a("p"),oMr=o("The model class to instantiate is selected based on the "),P6e=a("code"),rMr=o("model_type"),tMr=o(` property of the config object (either
passed as an argument or loaded from `),$6e=a("code"),aMr=o("pretrained_model_name_or_path"),nMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I6e=a("code"),sMr=o("pretrained_model_name_or_path"),lMr=o(":"),iMr=l(),q6e=a("ul"),EM=a("li"),N6e=a("strong"),dMr=o("speech_to_text"),cMr=o(" \u2014 "),WQ=a("a"),fMr=o("TFSpeech2TextForConditionalGeneration"),mMr=o(" (Speech2Text model)"),gMr=l(),j6e=a("p"),hMr=o("Examples:"),pMr=l(),f(H0.$$.fragment),wPe=l(),Zc=a("h2"),CM=a("a"),D6e=a("span"),f(U0.$$.fragment),_Mr=l(),G6e=a("span"),uMr=o("FlaxAutoModel"),APe=l(),Rr=a("div"),f(J0.$$.fragment),bMr=l(),ef=a("p"),FMr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HQ=a("a"),vMr=o("from_pretrained()"),TMr=o(" class method or the "),UQ=a("a"),MMr=o("from_config()"),EMr=o(` class
method.`),CMr=l(),Y0=a("p"),wMr=o("This class cannot be instantiated directly using "),O6e=a("code"),AMr=o("__init__()"),yMr=o(" (throws an error)."),LMr=l(),At=a("div"),f(K0.$$.fragment),xMr=l(),V6e=a("p"),kMr=o("Instantiates one of the base model classes of the library from a configuration."),SMr=l(),of=a("p"),RMr=o(`Note:
Loading a model from its configuration file does `),X6e=a("strong"),BMr=o("not"),PMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),$Mr=o("from_pretrained()"),IMr=o(" to load the model weights."),qMr=l(),z6e=a("p"),NMr=o("Examples:"),jMr=l(),f(Z0.$$.fragment),DMr=l(),yo=a("div"),f(ey.$$.fragment),GMr=l(),Q6e=a("p"),OMr=o("Instantiate one of the base model classes of the library from a pretrained model."),VMr=l(),xn=a("p"),XMr=o("The model class to instantiate is selected based on the "),W6e=a("code"),zMr=o("model_type"),QMr=o(` property of the config object (either
passed as an argument or loaded from `),H6e=a("code"),WMr=o("pretrained_model_name_or_path"),HMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U6e=a("code"),UMr=o("pretrained_model_name_or_path"),JMr=o(":"),YMr=l(),X=a("ul"),wM=a("li"),J6e=a("strong"),KMr=o("albert"),ZMr=o(" \u2014 "),YQ=a("a"),e4r=o("FlaxAlbertModel"),o4r=o(" (ALBERT model)"),r4r=l(),AM=a("li"),Y6e=a("strong"),t4r=o("bart"),a4r=o(" \u2014 "),KQ=a("a"),n4r=o("FlaxBartModel"),s4r=o(" (BART model)"),l4r=l(),yM=a("li"),K6e=a("strong"),i4r=o("beit"),d4r=o(" \u2014 "),ZQ=a("a"),c4r=o("FlaxBeitModel"),f4r=o(" (BEiT model)"),m4r=l(),LM=a("li"),Z6e=a("strong"),g4r=o("bert"),h4r=o(" \u2014 "),eW=a("a"),p4r=o("FlaxBertModel"),_4r=o(" (BERT model)"),u4r=l(),xM=a("li"),eFe=a("strong"),b4r=o("big_bird"),F4r=o(" \u2014 "),oW=a("a"),v4r=o("FlaxBigBirdModel"),T4r=o(" (BigBird model)"),M4r=l(),kM=a("li"),oFe=a("strong"),E4r=o("blenderbot"),C4r=o(" \u2014 "),rW=a("a"),w4r=o("FlaxBlenderbotModel"),A4r=o(" (Blenderbot model)"),y4r=l(),SM=a("li"),rFe=a("strong"),L4r=o("blenderbot-small"),x4r=o(" \u2014 "),tW=a("a"),k4r=o("FlaxBlenderbotSmallModel"),S4r=o(" (BlenderbotSmall model)"),R4r=l(),RM=a("li"),tFe=a("strong"),B4r=o("clip"),P4r=o(" \u2014 "),aW=a("a"),$4r=o("FlaxCLIPModel"),I4r=o(" (CLIP model)"),q4r=l(),BM=a("li"),aFe=a("strong"),N4r=o("distilbert"),j4r=o(" \u2014 "),nW=a("a"),D4r=o("FlaxDistilBertModel"),G4r=o(" (DistilBERT model)"),O4r=l(),PM=a("li"),nFe=a("strong"),V4r=o("electra"),X4r=o(" \u2014 "),sW=a("a"),z4r=o("FlaxElectraModel"),Q4r=o(" (ELECTRA model)"),W4r=l(),$M=a("li"),sFe=a("strong"),H4r=o("gpt2"),U4r=o(" \u2014 "),lW=a("a"),J4r=o("FlaxGPT2Model"),Y4r=o(" (OpenAI GPT-2 model)"),K4r=l(),IM=a("li"),lFe=a("strong"),Z4r=o("gpt_neo"),eEr=o(" \u2014 "),iW=a("a"),oEr=o("FlaxGPTNeoModel"),rEr=o(" (GPT Neo model)"),tEr=l(),qM=a("li"),iFe=a("strong"),aEr=o("gptj"),nEr=o(" \u2014 "),dW=a("a"),sEr=o("FlaxGPTJModel"),lEr=o(" (GPT-J model)"),iEr=l(),NM=a("li"),dFe=a("strong"),dEr=o("longt5"),cEr=o(" \u2014 "),cW=a("a"),fEr=o("FlaxLongT5Model"),mEr=o(" (LongT5 model)"),gEr=l(),jM=a("li"),cFe=a("strong"),hEr=o("marian"),pEr=o(" \u2014 "),fW=a("a"),_Er=o("FlaxMarianModel"),uEr=o(" (Marian model)"),bEr=l(),DM=a("li"),fFe=a("strong"),FEr=o("mbart"),vEr=o(" \u2014 "),mW=a("a"),TEr=o("FlaxMBartModel"),MEr=o(" (mBART model)"),EEr=l(),GM=a("li"),mFe=a("strong"),CEr=o("mt5"),wEr=o(" \u2014 "),gW=a("a"),AEr=o("FlaxMT5Model"),yEr=o(" (mT5 model)"),LEr=l(),OM=a("li"),gFe=a("strong"),xEr=o("pegasus"),kEr=o(" \u2014 "),hW=a("a"),SEr=o("FlaxPegasusModel"),REr=o(" (Pegasus model)"),BEr=l(),VM=a("li"),hFe=a("strong"),PEr=o("roberta"),$Er=o(" \u2014 "),pW=a("a"),IEr=o("FlaxRobertaModel"),qEr=o(" (RoBERTa model)"),NEr=l(),XM=a("li"),pFe=a("strong"),jEr=o("roformer"),DEr=o(" \u2014 "),_W=a("a"),GEr=o("FlaxRoFormerModel"),OEr=o(" (RoFormer model)"),VEr=l(),zM=a("li"),_Fe=a("strong"),XEr=o("t5"),zEr=o(" \u2014 "),uW=a("a"),QEr=o("FlaxT5Model"),WEr=o(" (T5 model)"),HEr=l(),QM=a("li"),uFe=a("strong"),UEr=o("vision-text-dual-encoder"),JEr=o(" \u2014 "),bW=a("a"),YEr=o("FlaxVisionTextDualEncoderModel"),KEr=o(" (VisionTextDualEncoder model)"),ZEr=l(),WM=a("li"),bFe=a("strong"),e5r=o("vit"),o5r=o(" \u2014 "),FW=a("a"),r5r=o("FlaxViTModel"),t5r=o(" (ViT model)"),a5r=l(),HM=a("li"),FFe=a("strong"),n5r=o("wav2vec2"),s5r=o(" \u2014 "),vW=a("a"),l5r=o("FlaxWav2Vec2Model"),i5r=o(" (Wav2Vec2 model)"),d5r=l(),UM=a("li"),vFe=a("strong"),c5r=o("xglm"),f5r=o(" \u2014 "),TW=a("a"),m5r=o("FlaxXGLMModel"),g5r=o(" (XGLM model)"),h5r=l(),JM=a("li"),TFe=a("strong"),p5r=o("xlm-roberta"),_5r=o(" \u2014 "),MW=a("a"),u5r=o("FlaxXLMRobertaModel"),b5r=o(" (XLM-RoBERTa model)"),F5r=l(),MFe=a("p"),v5r=o("Examples:"),T5r=l(),f(oy.$$.fragment),yPe=l(),rf=a("h2"),YM=a("a"),EFe=a("span"),f(ry.$$.fragment),M5r=l(),CFe=a("span"),E5r=o("FlaxAutoModelForCausalLM"),LPe=l(),Br=a("div"),f(ty.$$.fragment),C5r=l(),tf=a("p"),w5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),EW=a("a"),A5r=o("from_pretrained()"),y5r=o(" class method or the "),CW=a("a"),L5r=o("from_config()"),x5r=o(` class
method.`),k5r=l(),ay=a("p"),S5r=o("This class cannot be instantiated directly using "),wFe=a("code"),R5r=o("__init__()"),B5r=o(" (throws an error)."),P5r=l(),yt=a("div"),f(ny.$$.fragment),$5r=l(),AFe=a("p"),I5r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),q5r=l(),af=a("p"),N5r=o(`Note:
Loading a model from its configuration file does `),yFe=a("strong"),j5r=o("not"),D5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=a("a"),G5r=o("from_pretrained()"),O5r=o(" to load the model weights."),V5r=l(),LFe=a("p"),X5r=o("Examples:"),z5r=l(),f(sy.$$.fragment),Q5r=l(),Lo=a("div"),f(ly.$$.fragment),W5r=l(),xFe=a("p"),H5r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),U5r=l(),kn=a("p"),J5r=o("The model class to instantiate is selected based on the "),kFe=a("code"),Y5r=o("model_type"),K5r=o(` property of the config object (either
passed as an argument or loaded from `),SFe=a("code"),Z5r=o("pretrained_model_name_or_path"),e3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=a("code"),o3r=o("pretrained_model_name_or_path"),r3r=o(":"),t3r=l(),ca=a("ul"),KM=a("li"),BFe=a("strong"),a3r=o("bart"),n3r=o(" \u2014 "),AW=a("a"),s3r=o("FlaxBartForCausalLM"),l3r=o(" (BART model)"),i3r=l(),ZM=a("li"),PFe=a("strong"),d3r=o("gpt2"),c3r=o(" \u2014 "),yW=a("a"),f3r=o("FlaxGPT2LMHeadModel"),m3r=o(" (OpenAI GPT-2 model)"),g3r=l(),e4=a("li"),$Fe=a("strong"),h3r=o("gpt_neo"),p3r=o(" \u2014 "),LW=a("a"),_3r=o("FlaxGPTNeoForCausalLM"),u3r=o(" (GPT Neo model)"),b3r=l(),o4=a("li"),IFe=a("strong"),F3r=o("gptj"),v3r=o(" \u2014 "),xW=a("a"),T3r=o("FlaxGPTJForCausalLM"),M3r=o(" (GPT-J model)"),E3r=l(),r4=a("li"),qFe=a("strong"),C3r=o("xglm"),w3r=o(" \u2014 "),kW=a("a"),A3r=o("FlaxXGLMForCausalLM"),y3r=o(" (XGLM model)"),L3r=l(),NFe=a("p"),x3r=o("Examples:"),k3r=l(),f(iy.$$.fragment),xPe=l(),nf=a("h2"),t4=a("a"),jFe=a("span"),f(dy.$$.fragment),S3r=l(),DFe=a("span"),R3r=o("FlaxAutoModelForPreTraining"),kPe=l(),Pr=a("div"),f(cy.$$.fragment),B3r=l(),sf=a("p"),P3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),SW=a("a"),$3r=o("from_pretrained()"),I3r=o(" class method or the "),RW=a("a"),q3r=o("from_config()"),N3r=o(` class
method.`),j3r=l(),fy=a("p"),D3r=o("This class cannot be instantiated directly using "),GFe=a("code"),G3r=o("__init__()"),O3r=o(" (throws an error)."),V3r=l(),Lt=a("div"),f(my.$$.fragment),X3r=l(),OFe=a("p"),z3r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Q3r=l(),lf=a("p"),W3r=o(`Note:
Loading a model from its configuration file does `),VFe=a("strong"),H3r=o("not"),U3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=a("a"),J3r=o("from_pretrained()"),Y3r=o(" to load the model weights."),K3r=l(),XFe=a("p"),Z3r=o("Examples:"),eCr=l(),f(gy.$$.fragment),oCr=l(),xo=a("div"),f(hy.$$.fragment),rCr=l(),zFe=a("p"),tCr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),aCr=l(),Sn=a("p"),nCr=o("The model class to instantiate is selected based on the "),QFe=a("code"),sCr=o("model_type"),lCr=o(` property of the config object (either
passed as an argument or loaded from `),WFe=a("code"),iCr=o("pretrained_model_name_or_path"),dCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=a("code"),cCr=o("pretrained_model_name_or_path"),fCr=o(":"),mCr=l(),de=a("ul"),a4=a("li"),UFe=a("strong"),gCr=o("albert"),hCr=o(" \u2014 "),PW=a("a"),pCr=o("FlaxAlbertForPreTraining"),_Cr=o(" (ALBERT model)"),uCr=l(),n4=a("li"),JFe=a("strong"),bCr=o("bart"),FCr=o(" \u2014 "),$W=a("a"),vCr=o("FlaxBartForConditionalGeneration"),TCr=o(" (BART model)"),MCr=l(),s4=a("li"),YFe=a("strong"),ECr=o("bert"),CCr=o(" \u2014 "),IW=a("a"),wCr=o("FlaxBertForPreTraining"),ACr=o(" (BERT model)"),yCr=l(),l4=a("li"),KFe=a("strong"),LCr=o("big_bird"),xCr=o(" \u2014 "),qW=a("a"),kCr=o("FlaxBigBirdForPreTraining"),SCr=o(" (BigBird model)"),RCr=l(),i4=a("li"),ZFe=a("strong"),BCr=o("electra"),PCr=o(" \u2014 "),NW=a("a"),$Cr=o("FlaxElectraForPreTraining"),ICr=o(" (ELECTRA model)"),qCr=l(),d4=a("li"),eve=a("strong"),NCr=o("longt5"),jCr=o(" \u2014 "),jW=a("a"),DCr=o("FlaxLongT5ForConditionalGeneration"),GCr=o(" (LongT5 model)"),OCr=l(),c4=a("li"),ove=a("strong"),VCr=o("mbart"),XCr=o(" \u2014 "),DW=a("a"),zCr=o("FlaxMBartForConditionalGeneration"),QCr=o(" (mBART model)"),WCr=l(),f4=a("li"),rve=a("strong"),HCr=o("mt5"),UCr=o(" \u2014 "),GW=a("a"),JCr=o("FlaxMT5ForConditionalGeneration"),YCr=o(" (mT5 model)"),KCr=l(),m4=a("li"),tve=a("strong"),ZCr=o("roberta"),ewr=o(" \u2014 "),OW=a("a"),owr=o("FlaxRobertaForMaskedLM"),rwr=o(" (RoBERTa model)"),twr=l(),g4=a("li"),ave=a("strong"),awr=o("roformer"),nwr=o(" \u2014 "),VW=a("a"),swr=o("FlaxRoFormerForMaskedLM"),lwr=o(" (RoFormer model)"),iwr=l(),h4=a("li"),nve=a("strong"),dwr=o("t5"),cwr=o(" \u2014 "),XW=a("a"),fwr=o("FlaxT5ForConditionalGeneration"),mwr=o(" (T5 model)"),gwr=l(),p4=a("li"),sve=a("strong"),hwr=o("wav2vec2"),pwr=o(" \u2014 "),zW=a("a"),_wr=o("FlaxWav2Vec2ForPreTraining"),uwr=o(" (Wav2Vec2 model)"),bwr=l(),_4=a("li"),lve=a("strong"),Fwr=o("xlm-roberta"),vwr=o(" \u2014 "),QW=a("a"),Twr=o("FlaxXLMRobertaForMaskedLM"),Mwr=o(" (XLM-RoBERTa model)"),Ewr=l(),ive=a("p"),Cwr=o("Examples:"),wwr=l(),f(py.$$.fragment),SPe=l(),df=a("h2"),u4=a("a"),dve=a("span"),f(_y.$$.fragment),Awr=l(),cve=a("span"),ywr=o("FlaxAutoModelForMaskedLM"),RPe=l(),$r=a("div"),f(uy.$$.fragment),Lwr=l(),cf=a("p"),xwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WW=a("a"),kwr=o("from_pretrained()"),Swr=o(" class method or the "),HW=a("a"),Rwr=o("from_config()"),Bwr=o(` class
method.`),Pwr=l(),by=a("p"),$wr=o("This class cannot be instantiated directly using "),fve=a("code"),Iwr=o("__init__()"),qwr=o(" (throws an error)."),Nwr=l(),xt=a("div"),f(Fy.$$.fragment),jwr=l(),mve=a("p"),Dwr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Gwr=l(),ff=a("p"),Owr=o(`Note:
Loading a model from its configuration file does `),gve=a("strong"),Vwr=o("not"),Xwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),zwr=o("from_pretrained()"),Qwr=o(" to load the model weights."),Wwr=l(),hve=a("p"),Hwr=o("Examples:"),Uwr=l(),f(vy.$$.fragment),Jwr=l(),ko=a("div"),f(Ty.$$.fragment),Ywr=l(),pve=a("p"),Kwr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Zwr=l(),Rn=a("p"),eAr=o("The model class to instantiate is selected based on the "),_ve=a("code"),oAr=o("model_type"),rAr=o(` property of the config object (either
passed as an argument or loaded from `),uve=a("code"),tAr=o("pretrained_model_name_or_path"),aAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=a("code"),nAr=o("pretrained_model_name_or_path"),sAr=o(":"),lAr=l(),Fe=a("ul"),b4=a("li"),Fve=a("strong"),iAr=o("albert"),dAr=o(" \u2014 "),JW=a("a"),cAr=o("FlaxAlbertForMaskedLM"),fAr=o(" (ALBERT model)"),mAr=l(),F4=a("li"),vve=a("strong"),gAr=o("bart"),hAr=o(" \u2014 "),YW=a("a"),pAr=o("FlaxBartForConditionalGeneration"),_Ar=o(" (BART model)"),uAr=l(),v4=a("li"),Tve=a("strong"),bAr=o("bert"),FAr=o(" \u2014 "),KW=a("a"),vAr=o("FlaxBertForMaskedLM"),TAr=o(" (BERT model)"),MAr=l(),T4=a("li"),Mve=a("strong"),EAr=o("big_bird"),CAr=o(" \u2014 "),ZW=a("a"),wAr=o("FlaxBigBirdForMaskedLM"),AAr=o(" (BigBird model)"),yAr=l(),M4=a("li"),Eve=a("strong"),LAr=o("distilbert"),xAr=o(" \u2014 "),eH=a("a"),kAr=o("FlaxDistilBertForMaskedLM"),SAr=o(" (DistilBERT model)"),RAr=l(),E4=a("li"),Cve=a("strong"),BAr=o("electra"),PAr=o(" \u2014 "),oH=a("a"),$Ar=o("FlaxElectraForMaskedLM"),IAr=o(" (ELECTRA model)"),qAr=l(),C4=a("li"),wve=a("strong"),NAr=o("mbart"),jAr=o(" \u2014 "),rH=a("a"),DAr=o("FlaxMBartForConditionalGeneration"),GAr=o(" (mBART model)"),OAr=l(),w4=a("li"),Ave=a("strong"),VAr=o("roberta"),XAr=o(" \u2014 "),tH=a("a"),zAr=o("FlaxRobertaForMaskedLM"),QAr=o(" (RoBERTa model)"),WAr=l(),A4=a("li"),yve=a("strong"),HAr=o("roformer"),UAr=o(" \u2014 "),aH=a("a"),JAr=o("FlaxRoFormerForMaskedLM"),YAr=o(" (RoFormer model)"),KAr=l(),y4=a("li"),Lve=a("strong"),ZAr=o("xlm-roberta"),e0r=o(" \u2014 "),nH=a("a"),o0r=o("FlaxXLMRobertaForMaskedLM"),r0r=o(" (XLM-RoBERTa model)"),t0r=l(),xve=a("p"),a0r=o("Examples:"),n0r=l(),f(My.$$.fragment),BPe=l(),mf=a("h2"),L4=a("a"),kve=a("span"),f(Ey.$$.fragment),s0r=l(),Sve=a("span"),l0r=o("FlaxAutoModelForSeq2SeqLM"),PPe=l(),Ir=a("div"),f(Cy.$$.fragment),i0r=l(),gf=a("p"),d0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sH=a("a"),c0r=o("from_pretrained()"),f0r=o(" class method or the "),lH=a("a"),m0r=o("from_config()"),g0r=o(` class
method.`),h0r=l(),wy=a("p"),p0r=o("This class cannot be instantiated directly using "),Rve=a("code"),_0r=o("__init__()"),u0r=o(" (throws an error)."),b0r=l(),kt=a("div"),f(Ay.$$.fragment),F0r=l(),Bve=a("p"),v0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),T0r=l(),hf=a("p"),M0r=o(`Note:
Loading a model from its configuration file does `),Pve=a("strong"),E0r=o("not"),C0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=a("a"),w0r=o("from_pretrained()"),A0r=o(" to load the model weights."),y0r=l(),$ve=a("p"),L0r=o("Examples:"),x0r=l(),f(yy.$$.fragment),k0r=l(),So=a("div"),f(Ly.$$.fragment),S0r=l(),Ive=a("p"),R0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),B0r=l(),Bn=a("p"),P0r=o("The model class to instantiate is selected based on the "),qve=a("code"),$0r=o("model_type"),I0r=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),q0r=o("pretrained_model_name_or_path"),N0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=a("code"),j0r=o("pretrained_model_name_or_path"),D0r=o(":"),G0r=l(),ve=a("ul"),x4=a("li"),Dve=a("strong"),O0r=o("bart"),V0r=o(" \u2014 "),dH=a("a"),X0r=o("FlaxBartForConditionalGeneration"),z0r=o(" (BART model)"),Q0r=l(),k4=a("li"),Gve=a("strong"),W0r=o("blenderbot"),H0r=o(" \u2014 "),cH=a("a"),U0r=o("FlaxBlenderbotForConditionalGeneration"),J0r=o(" (Blenderbot model)"),Y0r=l(),S4=a("li"),Ove=a("strong"),K0r=o("blenderbot-small"),Z0r=o(" \u2014 "),fH=a("a"),eyr=o("FlaxBlenderbotSmallForConditionalGeneration"),oyr=o(" (BlenderbotSmall model)"),ryr=l(),R4=a("li"),Vve=a("strong"),tyr=o("encoder-decoder"),ayr=o(" \u2014 "),mH=a("a"),nyr=o("FlaxEncoderDecoderModel"),syr=o(" (Encoder decoder model)"),lyr=l(),B4=a("li"),Xve=a("strong"),iyr=o("longt5"),dyr=o(" \u2014 "),gH=a("a"),cyr=o("FlaxLongT5ForConditionalGeneration"),fyr=o(" (LongT5 model)"),myr=l(),P4=a("li"),zve=a("strong"),gyr=o("marian"),hyr=o(" \u2014 "),hH=a("a"),pyr=o("FlaxMarianMTModel"),_yr=o(" (Marian model)"),uyr=l(),$4=a("li"),Qve=a("strong"),byr=o("mbart"),Fyr=o(" \u2014 "),pH=a("a"),vyr=o("FlaxMBartForConditionalGeneration"),Tyr=o(" (mBART model)"),Myr=l(),I4=a("li"),Wve=a("strong"),Eyr=o("mt5"),Cyr=o(" \u2014 "),_H=a("a"),wyr=o("FlaxMT5ForConditionalGeneration"),Ayr=o(" (mT5 model)"),yyr=l(),q4=a("li"),Hve=a("strong"),Lyr=o("pegasus"),xyr=o(" \u2014 "),uH=a("a"),kyr=o("FlaxPegasusForConditionalGeneration"),Syr=o(" (Pegasus model)"),Ryr=l(),N4=a("li"),Uve=a("strong"),Byr=o("t5"),Pyr=o(" \u2014 "),bH=a("a"),$yr=o("FlaxT5ForConditionalGeneration"),Iyr=o(" (T5 model)"),qyr=l(),Jve=a("p"),Nyr=o("Examples:"),jyr=l(),f(xy.$$.fragment),$Pe=l(),pf=a("h2"),j4=a("a"),Yve=a("span"),f(ky.$$.fragment),Dyr=l(),Kve=a("span"),Gyr=o("FlaxAutoModelForSequenceClassification"),IPe=l(),qr=a("div"),f(Sy.$$.fragment),Oyr=l(),_f=a("p"),Vyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FH=a("a"),Xyr=o("from_pretrained()"),zyr=o(" class method or the "),vH=a("a"),Qyr=o("from_config()"),Wyr=o(` class
method.`),Hyr=l(),Ry=a("p"),Uyr=o("This class cannot be instantiated directly using "),Zve=a("code"),Jyr=o("__init__()"),Yyr=o(" (throws an error)."),Kyr=l(),St=a("div"),f(By.$$.fragment),Zyr=l(),eTe=a("p"),eLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),oLr=l(),uf=a("p"),rLr=o(`Note:
Loading a model from its configuration file does `),oTe=a("strong"),tLr=o("not"),aLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=a("a"),nLr=o("from_pretrained()"),sLr=o(" to load the model weights."),lLr=l(),rTe=a("p"),iLr=o("Examples:"),dLr=l(),f(Py.$$.fragment),cLr=l(),Ro=a("div"),f($y.$$.fragment),fLr=l(),tTe=a("p"),mLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gLr=l(),Pn=a("p"),hLr=o("The model class to instantiate is selected based on the "),aTe=a("code"),pLr=o("model_type"),_Lr=o(` property of the config object (either
passed as an argument or loaded from `),nTe=a("code"),uLr=o("pretrained_model_name_or_path"),bLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=a("code"),FLr=o("pretrained_model_name_or_path"),vLr=o(":"),TLr=l(),Te=a("ul"),D4=a("li"),lTe=a("strong"),MLr=o("albert"),ELr=o(" \u2014 "),MH=a("a"),CLr=o("FlaxAlbertForSequenceClassification"),wLr=o(" (ALBERT model)"),ALr=l(),G4=a("li"),iTe=a("strong"),yLr=o("bart"),LLr=o(" \u2014 "),EH=a("a"),xLr=o("FlaxBartForSequenceClassification"),kLr=o(" (BART model)"),SLr=l(),O4=a("li"),dTe=a("strong"),RLr=o("bert"),BLr=o(" \u2014 "),CH=a("a"),PLr=o("FlaxBertForSequenceClassification"),$Lr=o(" (BERT model)"),ILr=l(),V4=a("li"),cTe=a("strong"),qLr=o("big_bird"),NLr=o(" \u2014 "),wH=a("a"),jLr=o("FlaxBigBirdForSequenceClassification"),DLr=o(" (BigBird model)"),GLr=l(),X4=a("li"),fTe=a("strong"),OLr=o("distilbert"),VLr=o(" \u2014 "),AH=a("a"),XLr=o("FlaxDistilBertForSequenceClassification"),zLr=o(" (DistilBERT model)"),QLr=l(),z4=a("li"),mTe=a("strong"),WLr=o("electra"),HLr=o(" \u2014 "),yH=a("a"),ULr=o("FlaxElectraForSequenceClassification"),JLr=o(" (ELECTRA model)"),YLr=l(),Q4=a("li"),gTe=a("strong"),KLr=o("mbart"),ZLr=o(" \u2014 "),LH=a("a"),e8r=o("FlaxMBartForSequenceClassification"),o8r=o(" (mBART model)"),r8r=l(),W4=a("li"),hTe=a("strong"),t8r=o("roberta"),a8r=o(" \u2014 "),xH=a("a"),n8r=o("FlaxRobertaForSequenceClassification"),s8r=o(" (RoBERTa model)"),l8r=l(),H4=a("li"),pTe=a("strong"),i8r=o("roformer"),d8r=o(" \u2014 "),kH=a("a"),c8r=o("FlaxRoFormerForSequenceClassification"),f8r=o(" (RoFormer model)"),m8r=l(),U4=a("li"),_Te=a("strong"),g8r=o("xlm-roberta"),h8r=o(" \u2014 "),SH=a("a"),p8r=o("FlaxXLMRobertaForSequenceClassification"),_8r=o(" (XLM-RoBERTa model)"),u8r=l(),uTe=a("p"),b8r=o("Examples:"),F8r=l(),f(Iy.$$.fragment),qPe=l(),bf=a("h2"),J4=a("a"),bTe=a("span"),f(qy.$$.fragment),v8r=l(),FTe=a("span"),T8r=o("FlaxAutoModelForQuestionAnswering"),NPe=l(),Nr=a("div"),f(Ny.$$.fragment),M8r=l(),Ff=a("p"),E8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),RH=a("a"),C8r=o("from_pretrained()"),w8r=o(" class method or the "),BH=a("a"),A8r=o("from_config()"),y8r=o(` class
method.`),L8r=l(),jy=a("p"),x8r=o("This class cannot be instantiated directly using "),vTe=a("code"),k8r=o("__init__()"),S8r=o(" (throws an error)."),R8r=l(),Rt=a("div"),f(Dy.$$.fragment),B8r=l(),TTe=a("p"),P8r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$8r=l(),vf=a("p"),I8r=o(`Note:
Loading a model from its configuration file does `),MTe=a("strong"),q8r=o("not"),N8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=a("a"),j8r=o("from_pretrained()"),D8r=o(" to load the model weights."),G8r=l(),ETe=a("p"),O8r=o("Examples:"),V8r=l(),f(Gy.$$.fragment),X8r=l(),Bo=a("div"),f(Oy.$$.fragment),z8r=l(),CTe=a("p"),Q8r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),W8r=l(),$n=a("p"),H8r=o("The model class to instantiate is selected based on the "),wTe=a("code"),U8r=o("model_type"),J8r=o(` property of the config object (either
passed as an argument or loaded from `),ATe=a("code"),Y8r=o("pretrained_model_name_or_path"),K8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=a("code"),Z8r=o("pretrained_model_name_or_path"),exr=o(":"),oxr=l(),Me=a("ul"),Y4=a("li"),LTe=a("strong"),rxr=o("albert"),txr=o(" \u2014 "),$H=a("a"),axr=o("FlaxAlbertForQuestionAnswering"),nxr=o(" (ALBERT model)"),sxr=l(),K4=a("li"),xTe=a("strong"),lxr=o("bart"),ixr=o(" \u2014 "),IH=a("a"),dxr=o("FlaxBartForQuestionAnswering"),cxr=o(" (BART model)"),fxr=l(),Z4=a("li"),kTe=a("strong"),mxr=o("bert"),gxr=o(" \u2014 "),qH=a("a"),hxr=o("FlaxBertForQuestionAnswering"),pxr=o(" (BERT model)"),_xr=l(),eE=a("li"),STe=a("strong"),uxr=o("big_bird"),bxr=o(" \u2014 "),NH=a("a"),Fxr=o("FlaxBigBirdForQuestionAnswering"),vxr=o(" (BigBird model)"),Txr=l(),oE=a("li"),RTe=a("strong"),Mxr=o("distilbert"),Exr=o(" \u2014 "),jH=a("a"),Cxr=o("FlaxDistilBertForQuestionAnswering"),wxr=o(" (DistilBERT model)"),Axr=l(),rE=a("li"),BTe=a("strong"),yxr=o("electra"),Lxr=o(" \u2014 "),DH=a("a"),xxr=o("FlaxElectraForQuestionAnswering"),kxr=o(" (ELECTRA model)"),Sxr=l(),tE=a("li"),PTe=a("strong"),Rxr=o("mbart"),Bxr=o(" \u2014 "),GH=a("a"),Pxr=o("FlaxMBartForQuestionAnswering"),$xr=o(" (mBART model)"),Ixr=l(),aE=a("li"),$Te=a("strong"),qxr=o("roberta"),Nxr=o(" \u2014 "),OH=a("a"),jxr=o("FlaxRobertaForQuestionAnswering"),Dxr=o(" (RoBERTa model)"),Gxr=l(),nE=a("li"),ITe=a("strong"),Oxr=o("roformer"),Vxr=o(" \u2014 "),VH=a("a"),Xxr=o("FlaxRoFormerForQuestionAnswering"),zxr=o(" (RoFormer model)"),Qxr=l(),sE=a("li"),qTe=a("strong"),Wxr=o("xlm-roberta"),Hxr=o(" \u2014 "),XH=a("a"),Uxr=o("FlaxXLMRobertaForQuestionAnswering"),Jxr=o(" (XLM-RoBERTa model)"),Yxr=l(),NTe=a("p"),Kxr=o("Examples:"),Zxr=l(),f(Vy.$$.fragment),jPe=l(),Tf=a("h2"),lE=a("a"),jTe=a("span"),f(Xy.$$.fragment),ekr=l(),DTe=a("span"),okr=o("FlaxAutoModelForTokenClassification"),DPe=l(),jr=a("div"),f(zy.$$.fragment),rkr=l(),Mf=a("p"),tkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zH=a("a"),akr=o("from_pretrained()"),nkr=o(" class method or the "),QH=a("a"),skr=o("from_config()"),lkr=o(` class
method.`),ikr=l(),Qy=a("p"),dkr=o("This class cannot be instantiated directly using "),GTe=a("code"),ckr=o("__init__()"),fkr=o(" (throws an error)."),mkr=l(),Bt=a("div"),f(Wy.$$.fragment),gkr=l(),OTe=a("p"),hkr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pkr=l(),Ef=a("p"),_kr=o(`Note:
Loading a model from its configuration file does `),VTe=a("strong"),ukr=o("not"),bkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),Fkr=o("from_pretrained()"),vkr=o(" to load the model weights."),Tkr=l(),XTe=a("p"),Mkr=o("Examples:"),Ekr=l(),f(Hy.$$.fragment),Ckr=l(),Po=a("div"),f(Uy.$$.fragment),wkr=l(),zTe=a("p"),Akr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ykr=l(),In=a("p"),Lkr=o("The model class to instantiate is selected based on the "),QTe=a("code"),xkr=o("model_type"),kkr=o(` property of the config object (either
passed as an argument or loaded from `),WTe=a("code"),Skr=o("pretrained_model_name_or_path"),Rkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=a("code"),Bkr=o("pretrained_model_name_or_path"),Pkr=o(":"),$kr=l(),Pe=a("ul"),iE=a("li"),UTe=a("strong"),Ikr=o("albert"),qkr=o(" \u2014 "),HH=a("a"),Nkr=o("FlaxAlbertForTokenClassification"),jkr=o(" (ALBERT model)"),Dkr=l(),dE=a("li"),JTe=a("strong"),Gkr=o("bert"),Okr=o(" \u2014 "),UH=a("a"),Vkr=o("FlaxBertForTokenClassification"),Xkr=o(" (BERT model)"),zkr=l(),cE=a("li"),YTe=a("strong"),Qkr=o("big_bird"),Wkr=o(" \u2014 "),JH=a("a"),Hkr=o("FlaxBigBirdForTokenClassification"),Ukr=o(" (BigBird model)"),Jkr=l(),fE=a("li"),KTe=a("strong"),Ykr=o("distilbert"),Kkr=o(" \u2014 "),YH=a("a"),Zkr=o("FlaxDistilBertForTokenClassification"),eSr=o(" (DistilBERT model)"),oSr=l(),mE=a("li"),ZTe=a("strong"),rSr=o("electra"),tSr=o(" \u2014 "),KH=a("a"),aSr=o("FlaxElectraForTokenClassification"),nSr=o(" (ELECTRA model)"),sSr=l(),gE=a("li"),e7e=a("strong"),lSr=o("roberta"),iSr=o(" \u2014 "),ZH=a("a"),dSr=o("FlaxRobertaForTokenClassification"),cSr=o(" (RoBERTa model)"),fSr=l(),hE=a("li"),o7e=a("strong"),mSr=o("roformer"),gSr=o(" \u2014 "),eU=a("a"),hSr=o("FlaxRoFormerForTokenClassification"),pSr=o(" (RoFormer model)"),_Sr=l(),pE=a("li"),r7e=a("strong"),uSr=o("xlm-roberta"),bSr=o(" \u2014 "),oU=a("a"),FSr=o("FlaxXLMRobertaForTokenClassification"),vSr=o(" (XLM-RoBERTa model)"),TSr=l(),t7e=a("p"),MSr=o("Examples:"),ESr=l(),f(Jy.$$.fragment),GPe=l(),Cf=a("h2"),_E=a("a"),a7e=a("span"),f(Yy.$$.fragment),CSr=l(),n7e=a("span"),wSr=o("FlaxAutoModelForMultipleChoice"),OPe=l(),Dr=a("div"),f(Ky.$$.fragment),ASr=l(),wf=a("p"),ySr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rU=a("a"),LSr=o("from_pretrained()"),xSr=o(" class method or the "),tU=a("a"),kSr=o("from_config()"),SSr=o(` class
method.`),RSr=l(),Zy=a("p"),BSr=o("This class cannot be instantiated directly using "),s7e=a("code"),PSr=o("__init__()"),$Sr=o(" (throws an error)."),ISr=l(),Pt=a("div"),f(eL.$$.fragment),qSr=l(),l7e=a("p"),NSr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),jSr=l(),Af=a("p"),DSr=o(`Note:
Loading a model from its configuration file does `),i7e=a("strong"),GSr=o("not"),OSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=a("a"),VSr=o("from_pretrained()"),XSr=o(" to load the model weights."),zSr=l(),d7e=a("p"),QSr=o("Examples:"),WSr=l(),f(oL.$$.fragment),HSr=l(),$o=a("div"),f(rL.$$.fragment),USr=l(),c7e=a("p"),JSr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),YSr=l(),qn=a("p"),KSr=o("The model class to instantiate is selected based on the "),f7e=a("code"),ZSr=o("model_type"),eRr=o(` property of the config object (either
passed as an argument or loaded from `),m7e=a("code"),oRr=o("pretrained_model_name_or_path"),rRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g7e=a("code"),tRr=o("pretrained_model_name_or_path"),aRr=o(":"),nRr=l(),$e=a("ul"),uE=a("li"),h7e=a("strong"),sRr=o("albert"),lRr=o(" \u2014 "),nU=a("a"),iRr=o("FlaxAlbertForMultipleChoice"),dRr=o(" (ALBERT model)"),cRr=l(),bE=a("li"),p7e=a("strong"),fRr=o("bert"),mRr=o(" \u2014 "),sU=a("a"),gRr=o("FlaxBertForMultipleChoice"),hRr=o(" (BERT model)"),pRr=l(),FE=a("li"),_7e=a("strong"),_Rr=o("big_bird"),uRr=o(" \u2014 "),lU=a("a"),bRr=o("FlaxBigBirdForMultipleChoice"),FRr=o(" (BigBird model)"),vRr=l(),vE=a("li"),u7e=a("strong"),TRr=o("distilbert"),MRr=o(" \u2014 "),iU=a("a"),ERr=o("FlaxDistilBertForMultipleChoice"),CRr=o(" (DistilBERT model)"),wRr=l(),TE=a("li"),b7e=a("strong"),ARr=o("electra"),yRr=o(" \u2014 "),dU=a("a"),LRr=o("FlaxElectraForMultipleChoice"),xRr=o(" (ELECTRA model)"),kRr=l(),ME=a("li"),F7e=a("strong"),SRr=o("roberta"),RRr=o(" \u2014 "),cU=a("a"),BRr=o("FlaxRobertaForMultipleChoice"),PRr=o(" (RoBERTa model)"),$Rr=l(),EE=a("li"),v7e=a("strong"),IRr=o("roformer"),qRr=o(" \u2014 "),fU=a("a"),NRr=o("FlaxRoFormerForMultipleChoice"),jRr=o(" (RoFormer model)"),DRr=l(),CE=a("li"),T7e=a("strong"),GRr=o("xlm-roberta"),ORr=o(" \u2014 "),mU=a("a"),VRr=o("FlaxXLMRobertaForMultipleChoice"),XRr=o(" (XLM-RoBERTa model)"),zRr=l(),M7e=a("p"),QRr=o("Examples:"),WRr=l(),f(tL.$$.fragment),VPe=l(),yf=a("h2"),wE=a("a"),E7e=a("span"),f(aL.$$.fragment),HRr=l(),C7e=a("span"),URr=o("FlaxAutoModelForNextSentencePrediction"),XPe=l(),Gr=a("div"),f(nL.$$.fragment),JRr=l(),Lf=a("p"),YRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gU=a("a"),KRr=o("from_pretrained()"),ZRr=o(" class method or the "),hU=a("a"),eBr=o("from_config()"),oBr=o(` class
method.`),rBr=l(),sL=a("p"),tBr=o("This class cannot be instantiated directly using "),w7e=a("code"),aBr=o("__init__()"),nBr=o(" (throws an error)."),sBr=l(),$t=a("div"),f(lL.$$.fragment),lBr=l(),A7e=a("p"),iBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dBr=l(),xf=a("p"),cBr=o(`Note:
Loading a model from its configuration file does `),y7e=a("strong"),fBr=o("not"),mBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),gBr=o("from_pretrained()"),hBr=o(" to load the model weights."),pBr=l(),L7e=a("p"),_Br=o("Examples:"),uBr=l(),f(iL.$$.fragment),bBr=l(),Io=a("div"),f(dL.$$.fragment),FBr=l(),x7e=a("p"),vBr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),TBr=l(),Nn=a("p"),MBr=o("The model class to instantiate is selected based on the "),k7e=a("code"),EBr=o("model_type"),CBr=o(` property of the config object (either
passed as an argument or loaded from `),S7e=a("code"),wBr=o("pretrained_model_name_or_path"),ABr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=a("code"),yBr=o("pretrained_model_name_or_path"),LBr=o(":"),xBr=l(),B7e=a("ul"),AE=a("li"),P7e=a("strong"),kBr=o("bert"),SBr=o(" \u2014 "),_U=a("a"),RBr=o("FlaxBertForNextSentencePrediction"),BBr=o(" (BERT model)"),PBr=l(),$7e=a("p"),$Br=o("Examples:"),IBr=l(),f(cL.$$.fragment),zPe=l(),kf=a("h2"),yE=a("a"),I7e=a("span"),f(fL.$$.fragment),qBr=l(),q7e=a("span"),NBr=o("FlaxAutoModelForImageClassification"),QPe=l(),Or=a("div"),f(mL.$$.fragment),jBr=l(),Sf=a("p"),DBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uU=a("a"),GBr=o("from_pretrained()"),OBr=o(" class method or the "),bU=a("a"),VBr=o("from_config()"),XBr=o(` class
method.`),zBr=l(),gL=a("p"),QBr=o("This class cannot be instantiated directly using "),N7e=a("code"),WBr=o("__init__()"),HBr=o(" (throws an error)."),UBr=l(),It=a("div"),f(hL.$$.fragment),JBr=l(),j7e=a("p"),YBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KBr=l(),Rf=a("p"),ZBr=o(`Note:
Loading a model from its configuration file does `),D7e=a("strong"),ePr=o("not"),oPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=a("a"),rPr=o("from_pretrained()"),tPr=o(" to load the model weights."),aPr=l(),G7e=a("p"),nPr=o("Examples:"),sPr=l(),f(pL.$$.fragment),lPr=l(),qo=a("div"),f(_L.$$.fragment),iPr=l(),O7e=a("p"),dPr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cPr=l(),jn=a("p"),fPr=o("The model class to instantiate is selected based on the "),V7e=a("code"),mPr=o("model_type"),gPr=o(` property of the config object (either
passed as an argument or loaded from `),X7e=a("code"),hPr=o("pretrained_model_name_or_path"),pPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=a("code"),_Pr=o("pretrained_model_name_or_path"),uPr=o(":"),bPr=l(),uL=a("ul"),LE=a("li"),Q7e=a("strong"),FPr=o("beit"),vPr=o(" \u2014 "),vU=a("a"),TPr=o("FlaxBeitForImageClassification"),MPr=o(" (BEiT model)"),EPr=l(),xE=a("li"),W7e=a("strong"),CPr=o("vit"),wPr=o(" \u2014 "),TU=a("a"),APr=o("FlaxViTForImageClassification"),yPr=o(" (ViT model)"),LPr=l(),H7e=a("p"),xPr=o("Examples:"),kPr=l(),f(bL.$$.fragment),WPe=l(),Bf=a("h2"),kE=a("a"),U7e=a("span"),f(FL.$$.fragment),SPr=l(),J7e=a("span"),RPr=o("FlaxAutoModelForVision2Seq"),HPe=l(),Vr=a("div"),f(vL.$$.fragment),BPr=l(),Pf=a("p"),PPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),MU=a("a"),$Pr=o("from_pretrained()"),IPr=o(" class method or the "),EU=a("a"),qPr=o("from_config()"),NPr=o(` class
method.`),jPr=l(),TL=a("p"),DPr=o("This class cannot be instantiated directly using "),Y7e=a("code"),GPr=o("__init__()"),OPr=o(" (throws an error)."),VPr=l(),qt=a("div"),f(ML.$$.fragment),XPr=l(),K7e=a("p"),zPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QPr=l(),$f=a("p"),WPr=o(`Note:
Loading a model from its configuration file does `),Z7e=a("strong"),HPr=o("not"),UPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),JPr=o("from_pretrained()"),YPr=o(" to load the model weights."),KPr=l(),e9e=a("p"),ZPr=o("Examples:"),e$r=l(),f(EL.$$.fragment),o$r=l(),No=a("div"),f(CL.$$.fragment),r$r=l(),o9e=a("p"),t$r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),a$r=l(),Dn=a("p"),n$r=o("The model class to instantiate is selected based on the "),r9e=a("code"),s$r=o("model_type"),l$r=o(` property of the config object (either
passed as an argument or loaded from `),t9e=a("code"),i$r=o("pretrained_model_name_or_path"),d$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a9e=a("code"),c$r=o("pretrained_model_name_or_path"),f$r=o(":"),m$r=l(),n9e=a("ul"),SE=a("li"),s9e=a("strong"),g$r=o("vision-encoder-decoder"),h$r=o(" \u2014 "),wU=a("a"),p$r=o("FlaxVisionEncoderDecoderModel"),_$r=o(" (Vision Encoder decoder model)"),u$r=l(),l9e=a("p"),b$r=o("Examples:"),F$r=l(),f(wL.$$.fragment),this.h()},l(c){const u=uCt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),ce=n(c,"H1",{class:!0});var AL=s(ce);Ce=n(AL,"A",{id:!0,class:!0,href:!0});var i9e=s(Ce);lo=n(i9e,"SPAN",{});var d9e=s(lo);m(he.$$.fragment,d9e),d9e.forEach(t),i9e.forEach(t),Ee=i(AL),Xo=n(AL,"SPAN",{});var T$r=s(Xo);qi=r(T$r,"Auto Classes"),T$r.forEach(t),AL.forEach(t),Nf=i(c),fa=n(c,"P",{});var JPe=s(fa);Ni=r(JPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=n(JPe,"CODE",{});var M$r=s(ji);S5=r(M$r,"from_pretrained()"),M$r.forEach(t),jf=r(JPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),JPe.forEach(t),ke=i(c),co=n(c,"P",{});var RE=s(co);Di=r(RE,"Instantiating one of "),Gn=n(RE,"A",{href:!0});var E$r=s(Gn);R5=r(E$r,"AutoConfig"),E$r.forEach(t),On=r(RE,", "),Vn=n(RE,"A",{href:!0});var C$r=s(Vn);B5=r(C$r,"AutoModel"),C$r.forEach(t),Gi=r(RE,`, and
`),Xn=n(RE,"A",{href:!0});var w$r=s(Xn);P5=r(w$r,"AutoTokenizer"),w$r.forEach(t),Oi=r(RE," will directly create a class of the relevant architecture. For instance"),RE.forEach(t),Df=i(c),m(Da.$$.fragment,c),fo=i(c),ue=n(c,"P",{});var YPe=s(ue);C8=r(YPe,"will create a model that is an instance of "),Vi=n(YPe,"A",{href:!0});var A$r=s(Vi);w8=r(A$r,"BertModel"),A$r.forEach(t),A8=r(YPe,"."),YPe.forEach(t),zo=i(c),Ga=n(c,"P",{});var KPe=s(Ga);y8=r(KPe,"There is one class of "),Gf=n(KPe,"CODE",{});var y$r=s(Gf);L8=r(y$r,"AutoModel"),y$r.forEach(t),lqe=r(KPe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),KPe.forEach(t),HRe=i(c),Xi=n(c,"H2",{class:!0});var ZPe=s(Xi);Of=n(ZPe,"A",{id:!0,class:!0,href:!0});var L$r=s(Of);FY=n(L$r,"SPAN",{});var x$r=s(FY);m($5.$$.fragment,x$r),x$r.forEach(t),L$r.forEach(t),iqe=i(ZPe),vY=n(ZPe,"SPAN",{});var k$r=s(vY);dqe=r(k$r,"Extending the Auto Classes"),k$r.forEach(t),ZPe.forEach(t),URe=i(c),zn=n(c,"P",{});var AU=s(zn);cqe=r(AU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),TY=n(AU,"CODE",{});var S$r=s(TY);fqe=r(S$r,"NewModel"),S$r.forEach(t),mqe=r(AU,", make sure you have a "),MY=n(AU,"CODE",{});var R$r=s(MY);gqe=r(R$r,"NewModelConfig"),R$r.forEach(t),hqe=r(AU,` then you can add those to the auto
classes like this:`),AU.forEach(t),JRe=i(c),m(I5.$$.fragment,c),YRe=i(c),x8=n(c,"P",{});var B$r=s(x8);pqe=r(B$r,"You will then be able to use the auto classes like you would usually do!"),B$r.forEach(t),KRe=i(c),m(Vf.$$.fragment,c),ZRe=i(c),zi=n(c,"H2",{class:!0});var e$e=s(zi);Xf=n(e$e,"A",{id:!0,class:!0,href:!0});var P$r=s(Xf);EY=n(P$r,"SPAN",{});var $$r=s(EY);m(q5.$$.fragment,$$r),$$r.forEach(t),P$r.forEach(t),_qe=i(e$e),CY=n(e$e,"SPAN",{});var I$r=s(CY);uqe=r(I$r,"AutoConfig"),I$r.forEach(t),e$e.forEach(t),eBe=i(c),Qo=n(c,"DIV",{class:!0});var Vs=s(Qo);m(N5.$$.fragment,Vs),bqe=i(Vs),j5=n(Vs,"P",{});var o$e=s(j5);Fqe=r(o$e,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),k8=n(o$e,"A",{href:!0});var q$r=s(k8);vqe=r(q$r,"from_pretrained()"),q$r.forEach(t),Tqe=r(o$e," class method."),o$e.forEach(t),Mqe=i(Vs),D5=n(Vs,"P",{});var r$e=s(D5);Eqe=r(r$e,"This class cannot be instantiated directly using "),wY=n(r$e,"CODE",{});var N$r=s(wY);Cqe=r(N$r,"__init__()"),N$r.forEach(t),wqe=r(r$e," (throws an error)."),r$e.forEach(t),Aqe=i(Vs),mo=n(Vs,"DIV",{class:!0});var ga=s(mo);m(G5.$$.fragment,ga),yqe=i(ga),AY=n(ga,"P",{});var j$r=s(AY);Lqe=r(j$r,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),j$r.forEach(t),xqe=i(ga),Qi=n(ga,"P",{});var yU=s(Qi);kqe=r(yU,"The configuration class to instantiate is selected based on the "),yY=n(yU,"CODE",{});var D$r=s(yY);Sqe=r(D$r,"model_type"),D$r.forEach(t),Rqe=r(yU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),LY=n(yU,"CODE",{});var G$r=s(LY);Bqe=r(G$r,"pretrained_model_name_or_path"),G$r.forEach(t),Pqe=r(yU,":"),yU.forEach(t),$qe=i(ga),F=n(ga,"UL",{});var v=s(F);zf=n(v,"LI",{});var c9e=s(zf);xY=n(c9e,"STRONG",{});var O$r=s(xY);Iqe=r(O$r,"albert"),O$r.forEach(t),qqe=r(c9e," \u2014 "),S8=n(c9e,"A",{href:!0});var V$r=s(S8);Nqe=r(V$r,"AlbertConfig"),V$r.forEach(t),jqe=r(c9e," (ALBERT model)"),c9e.forEach(t),Dqe=i(v),Qf=n(v,"LI",{});var f9e=s(Qf);kY=n(f9e,"STRONG",{});var X$r=s(kY);Gqe=r(X$r,"bart"),X$r.forEach(t),Oqe=r(f9e," \u2014 "),R8=n(f9e,"A",{href:!0});var z$r=s(R8);Vqe=r(z$r,"BartConfig"),z$r.forEach(t),Xqe=r(f9e," (BART model)"),f9e.forEach(t),zqe=i(v),Wf=n(v,"LI",{});var m9e=s(Wf);SY=n(m9e,"STRONG",{});var Q$r=s(SY);Qqe=r(Q$r,"beit"),Q$r.forEach(t),Wqe=r(m9e," \u2014 "),B8=n(m9e,"A",{href:!0});var W$r=s(B8);Hqe=r(W$r,"BeitConfig"),W$r.forEach(t),Uqe=r(m9e," (BEiT model)"),m9e.forEach(t),Jqe=i(v),Hf=n(v,"LI",{});var g9e=s(Hf);RY=n(g9e,"STRONG",{});var H$r=s(RY);Yqe=r(H$r,"bert"),H$r.forEach(t),Kqe=r(g9e," \u2014 "),P8=n(g9e,"A",{href:!0});var U$r=s(P8);Zqe=r(U$r,"BertConfig"),U$r.forEach(t),eNe=r(g9e," (BERT model)"),g9e.forEach(t),oNe=i(v),Uf=n(v,"LI",{});var h9e=s(Uf);BY=n(h9e,"STRONG",{});var J$r=s(BY);rNe=r(J$r,"bert-generation"),J$r.forEach(t),tNe=r(h9e," \u2014 "),$8=n(h9e,"A",{href:!0});var Y$r=s($8);aNe=r(Y$r,"BertGenerationConfig"),Y$r.forEach(t),nNe=r(h9e," (Bert Generation model)"),h9e.forEach(t),sNe=i(v),Jf=n(v,"LI",{});var p9e=s(Jf);PY=n(p9e,"STRONG",{});var K$r=s(PY);lNe=r(K$r,"big_bird"),K$r.forEach(t),iNe=r(p9e," \u2014 "),I8=n(p9e,"A",{href:!0});var Z$r=s(I8);dNe=r(Z$r,"BigBirdConfig"),Z$r.forEach(t),cNe=r(p9e," (BigBird model)"),p9e.forEach(t),fNe=i(v),Yf=n(v,"LI",{});var _9e=s(Yf);$Y=n(_9e,"STRONG",{});var eIr=s($Y);mNe=r(eIr,"bigbird_pegasus"),eIr.forEach(t),gNe=r(_9e," \u2014 "),q8=n(_9e,"A",{href:!0});var oIr=s(q8);hNe=r(oIr,"BigBirdPegasusConfig"),oIr.forEach(t),pNe=r(_9e," (BigBirdPegasus model)"),_9e.forEach(t),_Ne=i(v),Kf=n(v,"LI",{});var u9e=s(Kf);IY=n(u9e,"STRONG",{});var rIr=s(IY);uNe=r(rIr,"blenderbot"),rIr.forEach(t),bNe=r(u9e," \u2014 "),N8=n(u9e,"A",{href:!0});var tIr=s(N8);FNe=r(tIr,"BlenderbotConfig"),tIr.forEach(t),vNe=r(u9e," (Blenderbot model)"),u9e.forEach(t),TNe=i(v),Zf=n(v,"LI",{});var b9e=s(Zf);qY=n(b9e,"STRONG",{});var aIr=s(qY);MNe=r(aIr,"blenderbot-small"),aIr.forEach(t),ENe=r(b9e," \u2014 "),j8=n(b9e,"A",{href:!0});var nIr=s(j8);CNe=r(nIr,"BlenderbotSmallConfig"),nIr.forEach(t),wNe=r(b9e," (BlenderbotSmall model)"),b9e.forEach(t),ANe=i(v),em=n(v,"LI",{});var F9e=s(em);NY=n(F9e,"STRONG",{});var sIr=s(NY);yNe=r(sIr,"camembert"),sIr.forEach(t),LNe=r(F9e," \u2014 "),D8=n(F9e,"A",{href:!0});var lIr=s(D8);xNe=r(lIr,"CamembertConfig"),lIr.forEach(t),kNe=r(F9e," (CamemBERT model)"),F9e.forEach(t),SNe=i(v),om=n(v,"LI",{});var v9e=s(om);jY=n(v9e,"STRONG",{});var iIr=s(jY);RNe=r(iIr,"canine"),iIr.forEach(t),BNe=r(v9e," \u2014 "),G8=n(v9e,"A",{href:!0});var dIr=s(G8);PNe=r(dIr,"CanineConfig"),dIr.forEach(t),$Ne=r(v9e," (Canine model)"),v9e.forEach(t),INe=i(v),rm=n(v,"LI",{});var T9e=s(rm);DY=n(T9e,"STRONG",{});var cIr=s(DY);qNe=r(cIr,"clip"),cIr.forEach(t),NNe=r(T9e," \u2014 "),O8=n(T9e,"A",{href:!0});var fIr=s(O8);jNe=r(fIr,"CLIPConfig"),fIr.forEach(t),DNe=r(T9e," (CLIP model)"),T9e.forEach(t),GNe=i(v),tm=n(v,"LI",{});var M9e=s(tm);GY=n(M9e,"STRONG",{});var mIr=s(GY);ONe=r(mIr,"convbert"),mIr.forEach(t),VNe=r(M9e," \u2014 "),V8=n(M9e,"A",{href:!0});var gIr=s(V8);XNe=r(gIr,"ConvBertConfig"),gIr.forEach(t),zNe=r(M9e," (ConvBERT model)"),M9e.forEach(t),QNe=i(v),am=n(v,"LI",{});var E9e=s(am);OY=n(E9e,"STRONG",{});var hIr=s(OY);WNe=r(hIr,"convnext"),hIr.forEach(t),HNe=r(E9e," \u2014 "),X8=n(E9e,"A",{href:!0});var pIr=s(X8);UNe=r(pIr,"ConvNextConfig"),pIr.forEach(t),JNe=r(E9e," (ConvNext model)"),E9e.forEach(t),YNe=i(v),nm=n(v,"LI",{});var C9e=s(nm);VY=n(C9e,"STRONG",{});var _Ir=s(VY);KNe=r(_Ir,"ctrl"),_Ir.forEach(t),ZNe=r(C9e," \u2014 "),z8=n(C9e,"A",{href:!0});var uIr=s(z8);eje=r(uIr,"CTRLConfig"),uIr.forEach(t),oje=r(C9e," (CTRL model)"),C9e.forEach(t),rje=i(v),sm=n(v,"LI",{});var w9e=s(sm);XY=n(w9e,"STRONG",{});var bIr=s(XY);tje=r(bIr,"data2vec-audio"),bIr.forEach(t),aje=r(w9e," \u2014 "),Q8=n(w9e,"A",{href:!0});var FIr=s(Q8);nje=r(FIr,"Data2VecAudioConfig"),FIr.forEach(t),sje=r(w9e," (Data2VecAudio model)"),w9e.forEach(t),lje=i(v),lm=n(v,"LI",{});var A9e=s(lm);zY=n(A9e,"STRONG",{});var vIr=s(zY);ije=r(vIr,"data2vec-text"),vIr.forEach(t),dje=r(A9e," \u2014 "),W8=n(A9e,"A",{href:!0});var TIr=s(W8);cje=r(TIr,"Data2VecTextConfig"),TIr.forEach(t),fje=r(A9e," (Data2VecText model)"),A9e.forEach(t),mje=i(v),im=n(v,"LI",{});var y9e=s(im);QY=n(y9e,"STRONG",{});var MIr=s(QY);gje=r(MIr,"deberta"),MIr.forEach(t),hje=r(y9e," \u2014 "),H8=n(y9e,"A",{href:!0});var EIr=s(H8);pje=r(EIr,"DebertaConfig"),EIr.forEach(t),_je=r(y9e," (DeBERTa model)"),y9e.forEach(t),uje=i(v),dm=n(v,"LI",{});var L9e=s(dm);WY=n(L9e,"STRONG",{});var CIr=s(WY);bje=r(CIr,"deberta-v2"),CIr.forEach(t),Fje=r(L9e," \u2014 "),U8=n(L9e,"A",{href:!0});var wIr=s(U8);vje=r(wIr,"DebertaV2Config"),wIr.forEach(t),Tje=r(L9e," (DeBERTa-v2 model)"),L9e.forEach(t),Mje=i(v),cm=n(v,"LI",{});var x9e=s(cm);HY=n(x9e,"STRONG",{});var AIr=s(HY);Eje=r(AIr,"decision_transformer"),AIr.forEach(t),Cje=r(x9e," \u2014 "),J8=n(x9e,"A",{href:!0});var yIr=s(J8);wje=r(yIr,"DecisionTransformerConfig"),yIr.forEach(t),Aje=r(x9e," (Decision Transformer model)"),x9e.forEach(t),yje=i(v),fm=n(v,"LI",{});var k9e=s(fm);UY=n(k9e,"STRONG",{});var LIr=s(UY);Lje=r(LIr,"deit"),LIr.forEach(t),xje=r(k9e," \u2014 "),Y8=n(k9e,"A",{href:!0});var xIr=s(Y8);kje=r(xIr,"DeiTConfig"),xIr.forEach(t),Sje=r(k9e," (DeiT model)"),k9e.forEach(t),Rje=i(v),mm=n(v,"LI",{});var S9e=s(mm);JY=n(S9e,"STRONG",{});var kIr=s(JY);Bje=r(kIr,"detr"),kIr.forEach(t),Pje=r(S9e," \u2014 "),K8=n(S9e,"A",{href:!0});var SIr=s(K8);$je=r(SIr,"DetrConfig"),SIr.forEach(t),Ije=r(S9e," (DETR model)"),S9e.forEach(t),qje=i(v),gm=n(v,"LI",{});var R9e=s(gm);YY=n(R9e,"STRONG",{});var RIr=s(YY);Nje=r(RIr,"distilbert"),RIr.forEach(t),jje=r(R9e," \u2014 "),Z8=n(R9e,"A",{href:!0});var BIr=s(Z8);Dje=r(BIr,"DistilBertConfig"),BIr.forEach(t),Gje=r(R9e," (DistilBERT model)"),R9e.forEach(t),Oje=i(v),hm=n(v,"LI",{});var B9e=s(hm);KY=n(B9e,"STRONG",{});var PIr=s(KY);Vje=r(PIr,"dpr"),PIr.forEach(t),Xje=r(B9e," \u2014 "),ex=n(B9e,"A",{href:!0});var $Ir=s(ex);zje=r($Ir,"DPRConfig"),$Ir.forEach(t),Qje=r(B9e," (DPR model)"),B9e.forEach(t),Wje=i(v),pm=n(v,"LI",{});var P9e=s(pm);ZY=n(P9e,"STRONG",{});var IIr=s(ZY);Hje=r(IIr,"dpt"),IIr.forEach(t),Uje=r(P9e," \u2014 "),ox=n(P9e,"A",{href:!0});var qIr=s(ox);Jje=r(qIr,"DPTConfig"),qIr.forEach(t),Yje=r(P9e," (DPT model)"),P9e.forEach(t),Kje=i(v),_m=n(v,"LI",{});var $9e=s(_m);eK=n($9e,"STRONG",{});var NIr=s(eK);Zje=r(NIr,"electra"),NIr.forEach(t),eDe=r($9e," \u2014 "),rx=n($9e,"A",{href:!0});var jIr=s(rx);oDe=r(jIr,"ElectraConfig"),jIr.forEach(t),rDe=r($9e," (ELECTRA model)"),$9e.forEach(t),tDe=i(v),um=n(v,"LI",{});var I9e=s(um);oK=n(I9e,"STRONG",{});var DIr=s(oK);aDe=r(DIr,"encoder-decoder"),DIr.forEach(t),nDe=r(I9e," \u2014 "),tx=n(I9e,"A",{href:!0});var GIr=s(tx);sDe=r(GIr,"EncoderDecoderConfig"),GIr.forEach(t),lDe=r(I9e," (Encoder decoder model)"),I9e.forEach(t),iDe=i(v),bm=n(v,"LI",{});var q9e=s(bm);rK=n(q9e,"STRONG",{});var OIr=s(rK);dDe=r(OIr,"flaubert"),OIr.forEach(t),cDe=r(q9e," \u2014 "),ax=n(q9e,"A",{href:!0});var VIr=s(ax);fDe=r(VIr,"FlaubertConfig"),VIr.forEach(t),mDe=r(q9e," (FlauBERT model)"),q9e.forEach(t),gDe=i(v),Fm=n(v,"LI",{});var N9e=s(Fm);tK=n(N9e,"STRONG",{});var XIr=s(tK);hDe=r(XIr,"fnet"),XIr.forEach(t),pDe=r(N9e," \u2014 "),nx=n(N9e,"A",{href:!0});var zIr=s(nx);_De=r(zIr,"FNetConfig"),zIr.forEach(t),uDe=r(N9e," (FNet model)"),N9e.forEach(t),bDe=i(v),vm=n(v,"LI",{});var j9e=s(vm);aK=n(j9e,"STRONG",{});var QIr=s(aK);FDe=r(QIr,"fsmt"),QIr.forEach(t),vDe=r(j9e," \u2014 "),sx=n(j9e,"A",{href:!0});var WIr=s(sx);TDe=r(WIr,"FSMTConfig"),WIr.forEach(t),MDe=r(j9e," (FairSeq Machine-Translation model)"),j9e.forEach(t),EDe=i(v),Tm=n(v,"LI",{});var D9e=s(Tm);nK=n(D9e,"STRONG",{});var HIr=s(nK);CDe=r(HIr,"funnel"),HIr.forEach(t),wDe=r(D9e," \u2014 "),lx=n(D9e,"A",{href:!0});var UIr=s(lx);ADe=r(UIr,"FunnelConfig"),UIr.forEach(t),yDe=r(D9e," (Funnel Transformer model)"),D9e.forEach(t),LDe=i(v),Mm=n(v,"LI",{});var G9e=s(Mm);sK=n(G9e,"STRONG",{});var JIr=s(sK);xDe=r(JIr,"glpn"),JIr.forEach(t),kDe=r(G9e," \u2014 "),ix=n(G9e,"A",{href:!0});var YIr=s(ix);SDe=r(YIr,"GLPNConfig"),YIr.forEach(t),RDe=r(G9e," (GLPN model)"),G9e.forEach(t),BDe=i(v),Em=n(v,"LI",{});var O9e=s(Em);lK=n(O9e,"STRONG",{});var KIr=s(lK);PDe=r(KIr,"gpt2"),KIr.forEach(t),$De=r(O9e," \u2014 "),dx=n(O9e,"A",{href:!0});var ZIr=s(dx);IDe=r(ZIr,"GPT2Config"),ZIr.forEach(t),qDe=r(O9e," (OpenAI GPT-2 model)"),O9e.forEach(t),NDe=i(v),Cm=n(v,"LI",{});var V9e=s(Cm);iK=n(V9e,"STRONG",{});var eqr=s(iK);jDe=r(eqr,"gpt_neo"),eqr.forEach(t),DDe=r(V9e," \u2014 "),cx=n(V9e,"A",{href:!0});var oqr=s(cx);GDe=r(oqr,"GPTNeoConfig"),oqr.forEach(t),ODe=r(V9e," (GPT Neo model)"),V9e.forEach(t),VDe=i(v),wm=n(v,"LI",{});var X9e=s(wm);dK=n(X9e,"STRONG",{});var rqr=s(dK);XDe=r(rqr,"gptj"),rqr.forEach(t),zDe=r(X9e," \u2014 "),fx=n(X9e,"A",{href:!0});var tqr=s(fx);QDe=r(tqr,"GPTJConfig"),tqr.forEach(t),WDe=r(X9e," (GPT-J model)"),X9e.forEach(t),HDe=i(v),Am=n(v,"LI",{});var z9e=s(Am);cK=n(z9e,"STRONG",{});var aqr=s(cK);UDe=r(aqr,"hubert"),aqr.forEach(t),JDe=r(z9e," \u2014 "),mx=n(z9e,"A",{href:!0});var nqr=s(mx);YDe=r(nqr,"HubertConfig"),nqr.forEach(t),KDe=r(z9e," (Hubert model)"),z9e.forEach(t),ZDe=i(v),ym=n(v,"LI",{});var Q9e=s(ym);fK=n(Q9e,"STRONG",{});var sqr=s(fK);eGe=r(sqr,"ibert"),sqr.forEach(t),oGe=r(Q9e," \u2014 "),gx=n(Q9e,"A",{href:!0});var lqr=s(gx);rGe=r(lqr,"IBertConfig"),lqr.forEach(t),tGe=r(Q9e," (I-BERT model)"),Q9e.forEach(t),aGe=i(v),Lm=n(v,"LI",{});var W9e=s(Lm);mK=n(W9e,"STRONG",{});var iqr=s(mK);nGe=r(iqr,"imagegpt"),iqr.forEach(t),sGe=r(W9e," \u2014 "),hx=n(W9e,"A",{href:!0});var dqr=s(hx);lGe=r(dqr,"ImageGPTConfig"),dqr.forEach(t),iGe=r(W9e," (ImageGPT model)"),W9e.forEach(t),dGe=i(v),xm=n(v,"LI",{});var H9e=s(xm);gK=n(H9e,"STRONG",{});var cqr=s(gK);cGe=r(cqr,"layoutlm"),cqr.forEach(t),fGe=r(H9e," \u2014 "),px=n(H9e,"A",{href:!0});var fqr=s(px);mGe=r(fqr,"LayoutLMConfig"),fqr.forEach(t),gGe=r(H9e," (LayoutLM model)"),H9e.forEach(t),hGe=i(v),km=n(v,"LI",{});var U9e=s(km);hK=n(U9e,"STRONG",{});var mqr=s(hK);pGe=r(mqr,"layoutlmv2"),mqr.forEach(t),_Ge=r(U9e," \u2014 "),_x=n(U9e,"A",{href:!0});var gqr=s(_x);uGe=r(gqr,"LayoutLMv2Config"),gqr.forEach(t),bGe=r(U9e," (LayoutLMv2 model)"),U9e.forEach(t),FGe=i(v),Sm=n(v,"LI",{});var J9e=s(Sm);pK=n(J9e,"STRONG",{});var hqr=s(pK);vGe=r(hqr,"led"),hqr.forEach(t),TGe=r(J9e," \u2014 "),ux=n(J9e,"A",{href:!0});var pqr=s(ux);MGe=r(pqr,"LEDConfig"),pqr.forEach(t),EGe=r(J9e," (LED model)"),J9e.forEach(t),CGe=i(v),Rm=n(v,"LI",{});var Y9e=s(Rm);_K=n(Y9e,"STRONG",{});var _qr=s(_K);wGe=r(_qr,"longformer"),_qr.forEach(t),AGe=r(Y9e," \u2014 "),bx=n(Y9e,"A",{href:!0});var uqr=s(bx);yGe=r(uqr,"LongformerConfig"),uqr.forEach(t),LGe=r(Y9e," (Longformer model)"),Y9e.forEach(t),xGe=i(v),Bm=n(v,"LI",{});var K9e=s(Bm);uK=n(K9e,"STRONG",{});var bqr=s(uK);kGe=r(bqr,"longt5"),bqr.forEach(t),SGe=r(K9e," \u2014 "),Fx=n(K9e,"A",{href:!0});var Fqr=s(Fx);RGe=r(Fqr,"LongT5Config"),Fqr.forEach(t),BGe=r(K9e," (LongT5 model)"),K9e.forEach(t),PGe=i(v),Pm=n(v,"LI",{});var Z9e=s(Pm);bK=n(Z9e,"STRONG",{});var vqr=s(bK);$Ge=r(vqr,"luke"),vqr.forEach(t),IGe=r(Z9e," \u2014 "),vx=n(Z9e,"A",{href:!0});var Tqr=s(vx);qGe=r(Tqr,"LukeConfig"),Tqr.forEach(t),NGe=r(Z9e," (LUKE model)"),Z9e.forEach(t),jGe=i(v),$m=n(v,"LI",{});var eMe=s($m);FK=n(eMe,"STRONG",{});var Mqr=s(FK);DGe=r(Mqr,"lxmert"),Mqr.forEach(t),GGe=r(eMe," \u2014 "),Tx=n(eMe,"A",{href:!0});var Eqr=s(Tx);OGe=r(Eqr,"LxmertConfig"),Eqr.forEach(t),VGe=r(eMe," (LXMERT model)"),eMe.forEach(t),XGe=i(v),Im=n(v,"LI",{});var oMe=s(Im);vK=n(oMe,"STRONG",{});var Cqr=s(vK);zGe=r(Cqr,"m2m_100"),Cqr.forEach(t),QGe=r(oMe," \u2014 "),Mx=n(oMe,"A",{href:!0});var wqr=s(Mx);WGe=r(wqr,"M2M100Config"),wqr.forEach(t),HGe=r(oMe," (M2M100 model)"),oMe.forEach(t),UGe=i(v),qm=n(v,"LI",{});var rMe=s(qm);TK=n(rMe,"STRONG",{});var Aqr=s(TK);JGe=r(Aqr,"marian"),Aqr.forEach(t),YGe=r(rMe," \u2014 "),Ex=n(rMe,"A",{href:!0});var yqr=s(Ex);KGe=r(yqr,"MarianConfig"),yqr.forEach(t),ZGe=r(rMe," (Marian model)"),rMe.forEach(t),eOe=i(v),Nm=n(v,"LI",{});var tMe=s(Nm);MK=n(tMe,"STRONG",{});var Lqr=s(MK);oOe=r(Lqr,"maskformer"),Lqr.forEach(t),rOe=r(tMe," \u2014 "),Cx=n(tMe,"A",{href:!0});var xqr=s(Cx);tOe=r(xqr,"MaskFormerConfig"),xqr.forEach(t),aOe=r(tMe," (MaskFormer model)"),tMe.forEach(t),nOe=i(v),jm=n(v,"LI",{});var aMe=s(jm);EK=n(aMe,"STRONG",{});var kqr=s(EK);sOe=r(kqr,"mbart"),kqr.forEach(t),lOe=r(aMe," \u2014 "),wx=n(aMe,"A",{href:!0});var Sqr=s(wx);iOe=r(Sqr,"MBartConfig"),Sqr.forEach(t),dOe=r(aMe," (mBART model)"),aMe.forEach(t),cOe=i(v),Dm=n(v,"LI",{});var nMe=s(Dm);CK=n(nMe,"STRONG",{});var Rqr=s(CK);fOe=r(Rqr,"megatron-bert"),Rqr.forEach(t),mOe=r(nMe," \u2014 "),Ax=n(nMe,"A",{href:!0});var Bqr=s(Ax);gOe=r(Bqr,"MegatronBertConfig"),Bqr.forEach(t),hOe=r(nMe," (MegatronBert model)"),nMe.forEach(t),pOe=i(v),Gm=n(v,"LI",{});var sMe=s(Gm);wK=n(sMe,"STRONG",{});var Pqr=s(wK);_Oe=r(Pqr,"mobilebert"),Pqr.forEach(t),uOe=r(sMe," \u2014 "),yx=n(sMe,"A",{href:!0});var $qr=s(yx);bOe=r($qr,"MobileBertConfig"),$qr.forEach(t),FOe=r(sMe," (MobileBERT model)"),sMe.forEach(t),vOe=i(v),Om=n(v,"LI",{});var lMe=s(Om);AK=n(lMe,"STRONG",{});var Iqr=s(AK);TOe=r(Iqr,"mpnet"),Iqr.forEach(t),MOe=r(lMe," \u2014 "),Lx=n(lMe,"A",{href:!0});var qqr=s(Lx);EOe=r(qqr,"MPNetConfig"),qqr.forEach(t),COe=r(lMe," (MPNet model)"),lMe.forEach(t),wOe=i(v),Vm=n(v,"LI",{});var iMe=s(Vm);yK=n(iMe,"STRONG",{});var Nqr=s(yK);AOe=r(Nqr,"mt5"),Nqr.forEach(t),yOe=r(iMe," \u2014 "),xx=n(iMe,"A",{href:!0});var jqr=s(xx);LOe=r(jqr,"MT5Config"),jqr.forEach(t),xOe=r(iMe," (mT5 model)"),iMe.forEach(t),kOe=i(v),Xm=n(v,"LI",{});var dMe=s(Xm);LK=n(dMe,"STRONG",{});var Dqr=s(LK);SOe=r(Dqr,"nystromformer"),Dqr.forEach(t),ROe=r(dMe," \u2014 "),kx=n(dMe,"A",{href:!0});var Gqr=s(kx);BOe=r(Gqr,"NystromformerConfig"),Gqr.forEach(t),POe=r(dMe," (Nystromformer model)"),dMe.forEach(t),$Oe=i(v),zm=n(v,"LI",{});var cMe=s(zm);xK=n(cMe,"STRONG",{});var Oqr=s(xK);IOe=r(Oqr,"openai-gpt"),Oqr.forEach(t),qOe=r(cMe," \u2014 "),Sx=n(cMe,"A",{href:!0});var Vqr=s(Sx);NOe=r(Vqr,"OpenAIGPTConfig"),Vqr.forEach(t),jOe=r(cMe," (OpenAI GPT model)"),cMe.forEach(t),DOe=i(v),Qm=n(v,"LI",{});var fMe=s(Qm);kK=n(fMe,"STRONG",{});var Xqr=s(kK);GOe=r(Xqr,"pegasus"),Xqr.forEach(t),OOe=r(fMe," \u2014 "),Rx=n(fMe,"A",{href:!0});var zqr=s(Rx);VOe=r(zqr,"PegasusConfig"),zqr.forEach(t),XOe=r(fMe," (Pegasus model)"),fMe.forEach(t),zOe=i(v),Wm=n(v,"LI",{});var mMe=s(Wm);SK=n(mMe,"STRONG",{});var Qqr=s(SK);QOe=r(Qqr,"perceiver"),Qqr.forEach(t),WOe=r(mMe," \u2014 "),Bx=n(mMe,"A",{href:!0});var Wqr=s(Bx);HOe=r(Wqr,"PerceiverConfig"),Wqr.forEach(t),UOe=r(mMe," (Perceiver model)"),mMe.forEach(t),JOe=i(v),Hm=n(v,"LI",{});var gMe=s(Hm);RK=n(gMe,"STRONG",{});var Hqr=s(RK);YOe=r(Hqr,"plbart"),Hqr.forEach(t),KOe=r(gMe," \u2014 "),Px=n(gMe,"A",{href:!0});var Uqr=s(Px);ZOe=r(Uqr,"PLBartConfig"),Uqr.forEach(t),eVe=r(gMe," (PLBart model)"),gMe.forEach(t),oVe=i(v),Um=n(v,"LI",{});var hMe=s(Um);BK=n(hMe,"STRONG",{});var Jqr=s(BK);rVe=r(Jqr,"poolformer"),Jqr.forEach(t),tVe=r(hMe," \u2014 "),$x=n(hMe,"A",{href:!0});var Yqr=s($x);aVe=r(Yqr,"PoolFormerConfig"),Yqr.forEach(t),nVe=r(hMe," (PoolFormer model)"),hMe.forEach(t),sVe=i(v),Jm=n(v,"LI",{});var pMe=s(Jm);PK=n(pMe,"STRONG",{});var Kqr=s(PK);lVe=r(Kqr,"prophetnet"),Kqr.forEach(t),iVe=r(pMe," \u2014 "),Ix=n(pMe,"A",{href:!0});var Zqr=s(Ix);dVe=r(Zqr,"ProphetNetConfig"),Zqr.forEach(t),cVe=r(pMe," (ProphetNet model)"),pMe.forEach(t),fVe=i(v),Ym=n(v,"LI",{});var _Me=s(Ym);$K=n(_Me,"STRONG",{});var eNr=s($K);mVe=r(eNr,"qdqbert"),eNr.forEach(t),gVe=r(_Me," \u2014 "),qx=n(_Me,"A",{href:!0});var oNr=s(qx);hVe=r(oNr,"QDQBertConfig"),oNr.forEach(t),pVe=r(_Me," (QDQBert model)"),_Me.forEach(t),_Ve=i(v),Km=n(v,"LI",{});var uMe=s(Km);IK=n(uMe,"STRONG",{});var rNr=s(IK);uVe=r(rNr,"rag"),rNr.forEach(t),bVe=r(uMe," \u2014 "),Nx=n(uMe,"A",{href:!0});var tNr=s(Nx);FVe=r(tNr,"RagConfig"),tNr.forEach(t),vVe=r(uMe," (RAG model)"),uMe.forEach(t),TVe=i(v),Zm=n(v,"LI",{});var bMe=s(Zm);qK=n(bMe,"STRONG",{});var aNr=s(qK);MVe=r(aNr,"realm"),aNr.forEach(t),EVe=r(bMe," \u2014 "),jx=n(bMe,"A",{href:!0});var nNr=s(jx);CVe=r(nNr,"RealmConfig"),nNr.forEach(t),wVe=r(bMe," (Realm model)"),bMe.forEach(t),AVe=i(v),eg=n(v,"LI",{});var FMe=s(eg);NK=n(FMe,"STRONG",{});var sNr=s(NK);yVe=r(sNr,"reformer"),sNr.forEach(t),LVe=r(FMe," \u2014 "),Dx=n(FMe,"A",{href:!0});var lNr=s(Dx);xVe=r(lNr,"ReformerConfig"),lNr.forEach(t),kVe=r(FMe," (Reformer model)"),FMe.forEach(t),SVe=i(v),og=n(v,"LI",{});var vMe=s(og);jK=n(vMe,"STRONG",{});var iNr=s(jK);RVe=r(iNr,"regnet"),iNr.forEach(t),BVe=r(vMe," \u2014 "),Gx=n(vMe,"A",{href:!0});var dNr=s(Gx);PVe=r(dNr,"RegNetConfig"),dNr.forEach(t),$Ve=r(vMe," (RegNet model)"),vMe.forEach(t),IVe=i(v),rg=n(v,"LI",{});var TMe=s(rg);DK=n(TMe,"STRONG",{});var cNr=s(DK);qVe=r(cNr,"rembert"),cNr.forEach(t),NVe=r(TMe," \u2014 "),Ox=n(TMe,"A",{href:!0});var fNr=s(Ox);jVe=r(fNr,"RemBertConfig"),fNr.forEach(t),DVe=r(TMe," (RemBERT model)"),TMe.forEach(t),GVe=i(v),tg=n(v,"LI",{});var MMe=s(tg);GK=n(MMe,"STRONG",{});var mNr=s(GK);OVe=r(mNr,"resnet"),mNr.forEach(t),VVe=r(MMe," \u2014 "),Vx=n(MMe,"A",{href:!0});var gNr=s(Vx);XVe=r(gNr,"ResNetConfig"),gNr.forEach(t),zVe=r(MMe," (ResNet model)"),MMe.forEach(t),QVe=i(v),ag=n(v,"LI",{});var EMe=s(ag);OK=n(EMe,"STRONG",{});var hNr=s(OK);WVe=r(hNr,"retribert"),hNr.forEach(t),HVe=r(EMe," \u2014 "),Xx=n(EMe,"A",{href:!0});var pNr=s(Xx);UVe=r(pNr,"RetriBertConfig"),pNr.forEach(t),JVe=r(EMe," (RetriBERT model)"),EMe.forEach(t),YVe=i(v),ng=n(v,"LI",{});var CMe=s(ng);VK=n(CMe,"STRONG",{});var _Nr=s(VK);KVe=r(_Nr,"roberta"),_Nr.forEach(t),ZVe=r(CMe," \u2014 "),zx=n(CMe,"A",{href:!0});var uNr=s(zx);eXe=r(uNr,"RobertaConfig"),uNr.forEach(t),oXe=r(CMe," (RoBERTa model)"),CMe.forEach(t),rXe=i(v),sg=n(v,"LI",{});var wMe=s(sg);XK=n(wMe,"STRONG",{});var bNr=s(XK);tXe=r(bNr,"roformer"),bNr.forEach(t),aXe=r(wMe," \u2014 "),Qx=n(wMe,"A",{href:!0});var FNr=s(Qx);nXe=r(FNr,"RoFormerConfig"),FNr.forEach(t),sXe=r(wMe," (RoFormer model)"),wMe.forEach(t),lXe=i(v),lg=n(v,"LI",{});var AMe=s(lg);zK=n(AMe,"STRONG",{});var vNr=s(zK);iXe=r(vNr,"segformer"),vNr.forEach(t),dXe=r(AMe," \u2014 "),Wx=n(AMe,"A",{href:!0});var TNr=s(Wx);cXe=r(TNr,"SegformerConfig"),TNr.forEach(t),fXe=r(AMe," (SegFormer model)"),AMe.forEach(t),mXe=i(v),ig=n(v,"LI",{});var yMe=s(ig);QK=n(yMe,"STRONG",{});var MNr=s(QK);gXe=r(MNr,"sew"),MNr.forEach(t),hXe=r(yMe," \u2014 "),Hx=n(yMe,"A",{href:!0});var ENr=s(Hx);pXe=r(ENr,"SEWConfig"),ENr.forEach(t),_Xe=r(yMe," (SEW model)"),yMe.forEach(t),uXe=i(v),dg=n(v,"LI",{});var LMe=s(dg);WK=n(LMe,"STRONG",{});var CNr=s(WK);bXe=r(CNr,"sew-d"),CNr.forEach(t),FXe=r(LMe," \u2014 "),Ux=n(LMe,"A",{href:!0});var wNr=s(Ux);vXe=r(wNr,"SEWDConfig"),wNr.forEach(t),TXe=r(LMe," (SEW-D model)"),LMe.forEach(t),MXe=i(v),cg=n(v,"LI",{});var xMe=s(cg);HK=n(xMe,"STRONG",{});var ANr=s(HK);EXe=r(ANr,"speech-encoder-decoder"),ANr.forEach(t),CXe=r(xMe," \u2014 "),Jx=n(xMe,"A",{href:!0});var yNr=s(Jx);wXe=r(yNr,"SpeechEncoderDecoderConfig"),yNr.forEach(t),AXe=r(xMe," (Speech Encoder decoder model)"),xMe.forEach(t),yXe=i(v),fg=n(v,"LI",{});var kMe=s(fg);UK=n(kMe,"STRONG",{});var LNr=s(UK);LXe=r(LNr,"speech_to_text"),LNr.forEach(t),xXe=r(kMe," \u2014 "),Yx=n(kMe,"A",{href:!0});var xNr=s(Yx);kXe=r(xNr,"Speech2TextConfig"),xNr.forEach(t),SXe=r(kMe," (Speech2Text model)"),kMe.forEach(t),RXe=i(v),mg=n(v,"LI",{});var SMe=s(mg);JK=n(SMe,"STRONG",{});var kNr=s(JK);BXe=r(kNr,"speech_to_text_2"),kNr.forEach(t),PXe=r(SMe," \u2014 "),Kx=n(SMe,"A",{href:!0});var SNr=s(Kx);$Xe=r(SNr,"Speech2Text2Config"),SNr.forEach(t),IXe=r(SMe," (Speech2Text2 model)"),SMe.forEach(t),qXe=i(v),gg=n(v,"LI",{});var RMe=s(gg);YK=n(RMe,"STRONG",{});var RNr=s(YK);NXe=r(RNr,"splinter"),RNr.forEach(t),jXe=r(RMe," \u2014 "),Zx=n(RMe,"A",{href:!0});var BNr=s(Zx);DXe=r(BNr,"SplinterConfig"),BNr.forEach(t),GXe=r(RMe," (Splinter model)"),RMe.forEach(t),OXe=i(v),hg=n(v,"LI",{});var BMe=s(hg);KK=n(BMe,"STRONG",{});var PNr=s(KK);VXe=r(PNr,"squeezebert"),PNr.forEach(t),XXe=r(BMe," \u2014 "),ek=n(BMe,"A",{href:!0});var $Nr=s(ek);zXe=r($Nr,"SqueezeBertConfig"),$Nr.forEach(t),QXe=r(BMe," (SqueezeBERT model)"),BMe.forEach(t),WXe=i(v),pg=n(v,"LI",{});var PMe=s(pg);ZK=n(PMe,"STRONG",{});var INr=s(ZK);HXe=r(INr,"swin"),INr.forEach(t),UXe=r(PMe," \u2014 "),ok=n(PMe,"A",{href:!0});var qNr=s(ok);JXe=r(qNr,"SwinConfig"),qNr.forEach(t),YXe=r(PMe," (Swin model)"),PMe.forEach(t),KXe=i(v),_g=n(v,"LI",{});var $Me=s(_g);eZ=n($Me,"STRONG",{});var NNr=s(eZ);ZXe=r(NNr,"t5"),NNr.forEach(t),eze=r($Me," \u2014 "),rk=n($Me,"A",{href:!0});var jNr=s(rk);oze=r(jNr,"T5Config"),jNr.forEach(t),rze=r($Me," (T5 model)"),$Me.forEach(t),tze=i(v),ug=n(v,"LI",{});var IMe=s(ug);oZ=n(IMe,"STRONG",{});var DNr=s(oZ);aze=r(DNr,"tapas"),DNr.forEach(t),nze=r(IMe," \u2014 "),tk=n(IMe,"A",{href:!0});var GNr=s(tk);sze=r(GNr,"TapasConfig"),GNr.forEach(t),lze=r(IMe," (TAPAS model)"),IMe.forEach(t),ize=i(v),bg=n(v,"LI",{});var qMe=s(bg);rZ=n(qMe,"STRONG",{});var ONr=s(rZ);dze=r(ONr,"tapex"),ONr.forEach(t),cze=r(qMe," \u2014 "),ak=n(qMe,"A",{href:!0});var VNr=s(ak);fze=r(VNr,"BartConfig"),VNr.forEach(t),mze=r(qMe," (TAPEX model)"),qMe.forEach(t),gze=i(v),Fg=n(v,"LI",{});var NMe=s(Fg);tZ=n(NMe,"STRONG",{});var XNr=s(tZ);hze=r(XNr,"transfo-xl"),XNr.forEach(t),pze=r(NMe," \u2014 "),nk=n(NMe,"A",{href:!0});var zNr=s(nk);_ze=r(zNr,"TransfoXLConfig"),zNr.forEach(t),uze=r(NMe," (Transformer-XL model)"),NMe.forEach(t),bze=i(v),vg=n(v,"LI",{});var jMe=s(vg);aZ=n(jMe,"STRONG",{});var QNr=s(aZ);Fze=r(QNr,"trocr"),QNr.forEach(t),vze=r(jMe," \u2014 "),sk=n(jMe,"A",{href:!0});var WNr=s(sk);Tze=r(WNr,"TrOCRConfig"),WNr.forEach(t),Mze=r(jMe," (TrOCR model)"),jMe.forEach(t),Eze=i(v),Tg=n(v,"LI",{});var DMe=s(Tg);nZ=n(DMe,"STRONG",{});var HNr=s(nZ);Cze=r(HNr,"unispeech"),HNr.forEach(t),wze=r(DMe," \u2014 "),lk=n(DMe,"A",{href:!0});var UNr=s(lk);Aze=r(UNr,"UniSpeechConfig"),UNr.forEach(t),yze=r(DMe," (UniSpeech model)"),DMe.forEach(t),Lze=i(v),Mg=n(v,"LI",{});var GMe=s(Mg);sZ=n(GMe,"STRONG",{});var JNr=s(sZ);xze=r(JNr,"unispeech-sat"),JNr.forEach(t),kze=r(GMe," \u2014 "),ik=n(GMe,"A",{href:!0});var YNr=s(ik);Sze=r(YNr,"UniSpeechSatConfig"),YNr.forEach(t),Rze=r(GMe," (UniSpeechSat model)"),GMe.forEach(t),Bze=i(v),Eg=n(v,"LI",{});var OMe=s(Eg);lZ=n(OMe,"STRONG",{});var KNr=s(lZ);Pze=r(KNr,"van"),KNr.forEach(t),$ze=r(OMe," \u2014 "),dk=n(OMe,"A",{href:!0});var ZNr=s(dk);Ize=r(ZNr,"VanConfig"),ZNr.forEach(t),qze=r(OMe," (VAN model)"),OMe.forEach(t),Nze=i(v),Cg=n(v,"LI",{});var VMe=s(Cg);iZ=n(VMe,"STRONG",{});var ejr=s(iZ);jze=r(ejr,"vilt"),ejr.forEach(t),Dze=r(VMe," \u2014 "),ck=n(VMe,"A",{href:!0});var ojr=s(ck);Gze=r(ojr,"ViltConfig"),ojr.forEach(t),Oze=r(VMe," (ViLT model)"),VMe.forEach(t),Vze=i(v),wg=n(v,"LI",{});var XMe=s(wg);dZ=n(XMe,"STRONG",{});var rjr=s(dZ);Xze=r(rjr,"vision-encoder-decoder"),rjr.forEach(t),zze=r(XMe," \u2014 "),fk=n(XMe,"A",{href:!0});var tjr=s(fk);Qze=r(tjr,"VisionEncoderDecoderConfig"),tjr.forEach(t),Wze=r(XMe," (Vision Encoder decoder model)"),XMe.forEach(t),Hze=i(v),Ag=n(v,"LI",{});var zMe=s(Ag);cZ=n(zMe,"STRONG",{});var ajr=s(cZ);Uze=r(ajr,"vision-text-dual-encoder"),ajr.forEach(t),Jze=r(zMe," \u2014 "),mk=n(zMe,"A",{href:!0});var njr=s(mk);Yze=r(njr,"VisionTextDualEncoderConfig"),njr.forEach(t),Kze=r(zMe," (VisionTextDualEncoder model)"),zMe.forEach(t),Zze=i(v),yg=n(v,"LI",{});var QMe=s(yg);fZ=n(QMe,"STRONG",{});var sjr=s(fZ);eQe=r(sjr,"visual_bert"),sjr.forEach(t),oQe=r(QMe," \u2014 "),gk=n(QMe,"A",{href:!0});var ljr=s(gk);rQe=r(ljr,"VisualBertConfig"),ljr.forEach(t),tQe=r(QMe," (VisualBert model)"),QMe.forEach(t),aQe=i(v),Lg=n(v,"LI",{});var WMe=s(Lg);mZ=n(WMe,"STRONG",{});var ijr=s(mZ);nQe=r(ijr,"vit"),ijr.forEach(t),sQe=r(WMe," \u2014 "),hk=n(WMe,"A",{href:!0});var djr=s(hk);lQe=r(djr,"ViTConfig"),djr.forEach(t),iQe=r(WMe," (ViT model)"),WMe.forEach(t),dQe=i(v),xg=n(v,"LI",{});var HMe=s(xg);gZ=n(HMe,"STRONG",{});var cjr=s(gZ);cQe=r(cjr,"vit_mae"),cjr.forEach(t),fQe=r(HMe," \u2014 "),pk=n(HMe,"A",{href:!0});var fjr=s(pk);mQe=r(fjr,"ViTMAEConfig"),fjr.forEach(t),gQe=r(HMe," (ViTMAE model)"),HMe.forEach(t),hQe=i(v),kg=n(v,"LI",{});var UMe=s(kg);hZ=n(UMe,"STRONG",{});var mjr=s(hZ);pQe=r(mjr,"wav2vec2"),mjr.forEach(t),_Qe=r(UMe," \u2014 "),_k=n(UMe,"A",{href:!0});var gjr=s(_k);uQe=r(gjr,"Wav2Vec2Config"),gjr.forEach(t),bQe=r(UMe," (Wav2Vec2 model)"),UMe.forEach(t),FQe=i(v),Sg=n(v,"LI",{});var JMe=s(Sg);pZ=n(JMe,"STRONG",{});var hjr=s(pZ);vQe=r(hjr,"wavlm"),hjr.forEach(t),TQe=r(JMe," \u2014 "),uk=n(JMe,"A",{href:!0});var pjr=s(uk);MQe=r(pjr,"WavLMConfig"),pjr.forEach(t),EQe=r(JMe," (WavLM model)"),JMe.forEach(t),CQe=i(v),Rg=n(v,"LI",{});var YMe=s(Rg);_Z=n(YMe,"STRONG",{});var _jr=s(_Z);wQe=r(_jr,"xglm"),_jr.forEach(t),AQe=r(YMe," \u2014 "),bk=n(YMe,"A",{href:!0});var ujr=s(bk);yQe=r(ujr,"XGLMConfig"),ujr.forEach(t),LQe=r(YMe," (XGLM model)"),YMe.forEach(t),xQe=i(v),Bg=n(v,"LI",{});var KMe=s(Bg);uZ=n(KMe,"STRONG",{});var bjr=s(uZ);kQe=r(bjr,"xlm"),bjr.forEach(t),SQe=r(KMe," \u2014 "),Fk=n(KMe,"A",{href:!0});var Fjr=s(Fk);RQe=r(Fjr,"XLMConfig"),Fjr.forEach(t),BQe=r(KMe," (XLM model)"),KMe.forEach(t),PQe=i(v),Pg=n(v,"LI",{});var ZMe=s(Pg);bZ=n(ZMe,"STRONG",{});var vjr=s(bZ);$Qe=r(vjr,"xlm-prophetnet"),vjr.forEach(t),IQe=r(ZMe," \u2014 "),vk=n(ZMe,"A",{href:!0});var Tjr=s(vk);qQe=r(Tjr,"XLMProphetNetConfig"),Tjr.forEach(t),NQe=r(ZMe," (XLMProphetNet model)"),ZMe.forEach(t),jQe=i(v),$g=n(v,"LI",{});var e4e=s($g);FZ=n(e4e,"STRONG",{});var Mjr=s(FZ);DQe=r(Mjr,"xlm-roberta"),Mjr.forEach(t),GQe=r(e4e," \u2014 "),Tk=n(e4e,"A",{href:!0});var Ejr=s(Tk);OQe=r(Ejr,"XLMRobertaConfig"),Ejr.forEach(t),VQe=r(e4e," (XLM-RoBERTa model)"),e4e.forEach(t),XQe=i(v),Ig=n(v,"LI",{});var o4e=s(Ig);vZ=n(o4e,"STRONG",{});var Cjr=s(vZ);zQe=r(Cjr,"xlm-roberta-xl"),Cjr.forEach(t),QQe=r(o4e," \u2014 "),Mk=n(o4e,"A",{href:!0});var wjr=s(Mk);WQe=r(wjr,"XLMRobertaXLConfig"),wjr.forEach(t),HQe=r(o4e," (XLM-RoBERTa-XL model)"),o4e.forEach(t),UQe=i(v),qg=n(v,"LI",{});var r4e=s(qg);TZ=n(r4e,"STRONG",{});var Ajr=s(TZ);JQe=r(Ajr,"xlnet"),Ajr.forEach(t),YQe=r(r4e," \u2014 "),Ek=n(r4e,"A",{href:!0});var yjr=s(Ek);KQe=r(yjr,"XLNetConfig"),yjr.forEach(t),ZQe=r(r4e," (XLNet model)"),r4e.forEach(t),eWe=i(v),Ng=n(v,"LI",{});var t4e=s(Ng);MZ=n(t4e,"STRONG",{});var Ljr=s(MZ);oWe=r(Ljr,"yoso"),Ljr.forEach(t),rWe=r(t4e," \u2014 "),Ck=n(t4e,"A",{href:!0});var xjr=s(Ck);tWe=r(xjr,"YosoConfig"),xjr.forEach(t),aWe=r(t4e," (YOSO model)"),t4e.forEach(t),v.forEach(t),nWe=i(ga),EZ=n(ga,"P",{});var kjr=s(EZ);sWe=r(kjr,"Examples:"),kjr.forEach(t),lWe=i(ga),m(O5.$$.fragment,ga),ga.forEach(t),iWe=i(Vs),jg=n(Vs,"DIV",{class:!0});var t$e=s(jg);m(V5.$$.fragment,t$e),dWe=i(t$e),CZ=n(t$e,"P",{});var Sjr=s(CZ);cWe=r(Sjr,"Register a new configuration for this class."),Sjr.forEach(t),t$e.forEach(t),Vs.forEach(t),oBe=i(c),Wi=n(c,"H2",{class:!0});var a$e=s(Wi);Dg=n(a$e,"A",{id:!0,class:!0,href:!0});var Rjr=s(Dg);wZ=n(Rjr,"SPAN",{});var Bjr=s(wZ);m(X5.$$.fragment,Bjr),Bjr.forEach(t),Rjr.forEach(t),fWe=i(a$e),AZ=n(a$e,"SPAN",{});var Pjr=s(AZ);mWe=r(Pjr,"AutoTokenizer"),Pjr.forEach(t),a$e.forEach(t),rBe=i(c),Wo=n(c,"DIV",{class:!0});var Xs=s(Wo);m(z5.$$.fragment,Xs),gWe=i(Xs),Q5=n(Xs,"P",{});var n$e=s(Q5);hWe=r(n$e,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),wk=n(n$e,"A",{href:!0});var $jr=s(wk);pWe=r($jr,"AutoTokenizer.from_pretrained()"),$jr.forEach(t),_We=r(n$e," class method."),n$e.forEach(t),uWe=i(Xs),W5=n(Xs,"P",{});var s$e=s(W5);bWe=r(s$e,"This class cannot be instantiated directly using "),yZ=n(s$e,"CODE",{});var Ijr=s(yZ);FWe=r(Ijr,"__init__()"),Ijr.forEach(t),vWe=r(s$e," (throws an error)."),s$e.forEach(t),TWe=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(H5.$$.fragment,ha),MWe=i(ha),LZ=n(ha,"P",{});var qjr=s(LZ);EWe=r(qjr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),qjr.forEach(t),CWe=i(ha),Oa=n(ha,"P",{});var BE=s(Oa);wWe=r(BE,"The tokenizer class to instantiate is selected based on the "),xZ=n(BE,"CODE",{});var Njr=s(xZ);AWe=r(Njr,"model_type"),Njr.forEach(t),yWe=r(BE,` property of the config object (either
passed as an argument or loaded from `),kZ=n(BE,"CODE",{});var jjr=s(kZ);LWe=r(jjr,"pretrained_model_name_or_path"),jjr.forEach(t),xWe=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SZ=n(BE,"CODE",{});var Djr=s(SZ);kWe=r(Djr,"pretrained_model_name_or_path"),Djr.forEach(t),SWe=r(BE,":"),BE.forEach(t),RWe=i(ha),E=n(ha,"UL",{});var C=s(E);Qn=n(C,"LI",{});var yL=s(Qn);RZ=n(yL,"STRONG",{});var Gjr=s(RZ);BWe=r(Gjr,"albert"),Gjr.forEach(t),PWe=r(yL," \u2014 "),Ak=n(yL,"A",{href:!0});var Ojr=s(Ak);$We=r(Ojr,"AlbertTokenizer"),Ojr.forEach(t),IWe=r(yL," or "),yk=n(yL,"A",{href:!0});var Vjr=s(yk);qWe=r(Vjr,"AlbertTokenizerFast"),Vjr.forEach(t),NWe=r(yL," (ALBERT model)"),yL.forEach(t),jWe=i(C),Wn=n(C,"LI",{});var LL=s(Wn);BZ=n(LL,"STRONG",{});var Xjr=s(BZ);DWe=r(Xjr,"bart"),Xjr.forEach(t),GWe=r(LL," \u2014 "),Lk=n(LL,"A",{href:!0});var zjr=s(Lk);OWe=r(zjr,"BartTokenizer"),zjr.forEach(t),VWe=r(LL," or "),xk=n(LL,"A",{href:!0});var Qjr=s(xk);XWe=r(Qjr,"BartTokenizerFast"),Qjr.forEach(t),zWe=r(LL," (BART model)"),LL.forEach(t),QWe=i(C),Hn=n(C,"LI",{});var xL=s(Hn);PZ=n(xL,"STRONG",{});var Wjr=s(PZ);WWe=r(Wjr,"barthez"),Wjr.forEach(t),HWe=r(xL," \u2014 "),kk=n(xL,"A",{href:!0});var Hjr=s(kk);UWe=r(Hjr,"BarthezTokenizer"),Hjr.forEach(t),JWe=r(xL," or "),Sk=n(xL,"A",{href:!0});var Ujr=s(Sk);YWe=r(Ujr,"BarthezTokenizerFast"),Ujr.forEach(t),KWe=r(xL," (BARThez model)"),xL.forEach(t),ZWe=i(C),Gg=n(C,"LI",{});var a4e=s(Gg);$Z=n(a4e,"STRONG",{});var Jjr=s($Z);eHe=r(Jjr,"bartpho"),Jjr.forEach(t),oHe=r(a4e," \u2014 "),Rk=n(a4e,"A",{href:!0});var Yjr=s(Rk);rHe=r(Yjr,"BartphoTokenizer"),Yjr.forEach(t),tHe=r(a4e," (BARTpho model)"),a4e.forEach(t),aHe=i(C),Un=n(C,"LI",{});var kL=s(Un);IZ=n(kL,"STRONG",{});var Kjr=s(IZ);nHe=r(Kjr,"bert"),Kjr.forEach(t),sHe=r(kL," \u2014 "),Bk=n(kL,"A",{href:!0});var Zjr=s(Bk);lHe=r(Zjr,"BertTokenizer"),Zjr.forEach(t),iHe=r(kL," or "),Pk=n(kL,"A",{href:!0});var eDr=s(Pk);dHe=r(eDr,"BertTokenizerFast"),eDr.forEach(t),cHe=r(kL," (BERT model)"),kL.forEach(t),fHe=i(C),Og=n(C,"LI",{});var n4e=s(Og);qZ=n(n4e,"STRONG",{});var oDr=s(qZ);mHe=r(oDr,"bert-generation"),oDr.forEach(t),gHe=r(n4e," \u2014 "),$k=n(n4e,"A",{href:!0});var rDr=s($k);hHe=r(rDr,"BertGenerationTokenizer"),rDr.forEach(t),pHe=r(n4e," (Bert Generation model)"),n4e.forEach(t),_He=i(C),Vg=n(C,"LI",{});var s4e=s(Vg);NZ=n(s4e,"STRONG",{});var tDr=s(NZ);uHe=r(tDr,"bert-japanese"),tDr.forEach(t),bHe=r(s4e," \u2014 "),Ik=n(s4e,"A",{href:!0});var aDr=s(Ik);FHe=r(aDr,"BertJapaneseTokenizer"),aDr.forEach(t),vHe=r(s4e," (BertJapanese model)"),s4e.forEach(t),THe=i(C),Xg=n(C,"LI",{});var l4e=s(Xg);jZ=n(l4e,"STRONG",{});var nDr=s(jZ);MHe=r(nDr,"bertweet"),nDr.forEach(t),EHe=r(l4e," \u2014 "),qk=n(l4e,"A",{href:!0});var sDr=s(qk);CHe=r(sDr,"BertweetTokenizer"),sDr.forEach(t),wHe=r(l4e," (Bertweet model)"),l4e.forEach(t),AHe=i(C),Jn=n(C,"LI",{});var SL=s(Jn);DZ=n(SL,"STRONG",{});var lDr=s(DZ);yHe=r(lDr,"big_bird"),lDr.forEach(t),LHe=r(SL," \u2014 "),Nk=n(SL,"A",{href:!0});var iDr=s(Nk);xHe=r(iDr,"BigBirdTokenizer"),iDr.forEach(t),kHe=r(SL," or "),jk=n(SL,"A",{href:!0});var dDr=s(jk);SHe=r(dDr,"BigBirdTokenizerFast"),dDr.forEach(t),RHe=r(SL," (BigBird model)"),SL.forEach(t),BHe=i(C),Yn=n(C,"LI",{});var RL=s(Yn);GZ=n(RL,"STRONG",{});var cDr=s(GZ);PHe=r(cDr,"bigbird_pegasus"),cDr.forEach(t),$He=r(RL," \u2014 "),Dk=n(RL,"A",{href:!0});var fDr=s(Dk);IHe=r(fDr,"PegasusTokenizer"),fDr.forEach(t),qHe=r(RL," or "),Gk=n(RL,"A",{href:!0});var mDr=s(Gk);NHe=r(mDr,"PegasusTokenizerFast"),mDr.forEach(t),jHe=r(RL," (BigBirdPegasus model)"),RL.forEach(t),DHe=i(C),Kn=n(C,"LI",{});var BL=s(Kn);OZ=n(BL,"STRONG",{});var gDr=s(OZ);GHe=r(gDr,"blenderbot"),gDr.forEach(t),OHe=r(BL," \u2014 "),Ok=n(BL,"A",{href:!0});var hDr=s(Ok);VHe=r(hDr,"BlenderbotTokenizer"),hDr.forEach(t),XHe=r(BL," or "),Vk=n(BL,"A",{href:!0});var pDr=s(Vk);zHe=r(pDr,"BlenderbotTokenizerFast"),pDr.forEach(t),QHe=r(BL," (Blenderbot model)"),BL.forEach(t),WHe=i(C),zg=n(C,"LI",{});var i4e=s(zg);VZ=n(i4e,"STRONG",{});var _Dr=s(VZ);HHe=r(_Dr,"blenderbot-small"),_Dr.forEach(t),UHe=r(i4e," \u2014 "),Xk=n(i4e,"A",{href:!0});var uDr=s(Xk);JHe=r(uDr,"BlenderbotSmallTokenizer"),uDr.forEach(t),YHe=r(i4e," (BlenderbotSmall model)"),i4e.forEach(t),KHe=i(C),Qg=n(C,"LI",{});var d4e=s(Qg);XZ=n(d4e,"STRONG",{});var bDr=s(XZ);ZHe=r(bDr,"byt5"),bDr.forEach(t),eUe=r(d4e," \u2014 "),zk=n(d4e,"A",{href:!0});var FDr=s(zk);oUe=r(FDr,"ByT5Tokenizer"),FDr.forEach(t),rUe=r(d4e," (ByT5 model)"),d4e.forEach(t),tUe=i(C),Zn=n(C,"LI",{});var PL=s(Zn);zZ=n(PL,"STRONG",{});var vDr=s(zZ);aUe=r(vDr,"camembert"),vDr.forEach(t),nUe=r(PL," \u2014 "),Qk=n(PL,"A",{href:!0});var TDr=s(Qk);sUe=r(TDr,"CamembertTokenizer"),TDr.forEach(t),lUe=r(PL," or "),Wk=n(PL,"A",{href:!0});var MDr=s(Wk);iUe=r(MDr,"CamembertTokenizerFast"),MDr.forEach(t),dUe=r(PL," (CamemBERT model)"),PL.forEach(t),cUe=i(C),Wg=n(C,"LI",{});var c4e=s(Wg);QZ=n(c4e,"STRONG",{});var EDr=s(QZ);fUe=r(EDr,"canine"),EDr.forEach(t),mUe=r(c4e," \u2014 "),Hk=n(c4e,"A",{href:!0});var CDr=s(Hk);gUe=r(CDr,"CanineTokenizer"),CDr.forEach(t),hUe=r(c4e," (Canine model)"),c4e.forEach(t),pUe=i(C),es=n(C,"LI",{});var $L=s(es);WZ=n($L,"STRONG",{});var wDr=s(WZ);_Ue=r(wDr,"clip"),wDr.forEach(t),uUe=r($L," \u2014 "),Uk=n($L,"A",{href:!0});var ADr=s(Uk);bUe=r(ADr,"CLIPTokenizer"),ADr.forEach(t),FUe=r($L," or "),Jk=n($L,"A",{href:!0});var yDr=s(Jk);vUe=r(yDr,"CLIPTokenizerFast"),yDr.forEach(t),TUe=r($L," (CLIP model)"),$L.forEach(t),MUe=i(C),os=n(C,"LI",{});var IL=s(os);HZ=n(IL,"STRONG",{});var LDr=s(HZ);EUe=r(LDr,"convbert"),LDr.forEach(t),CUe=r(IL," \u2014 "),Yk=n(IL,"A",{href:!0});var xDr=s(Yk);wUe=r(xDr,"ConvBertTokenizer"),xDr.forEach(t),AUe=r(IL," or "),Kk=n(IL,"A",{href:!0});var kDr=s(Kk);yUe=r(kDr,"ConvBertTokenizerFast"),kDr.forEach(t),LUe=r(IL," (ConvBERT model)"),IL.forEach(t),xUe=i(C),rs=n(C,"LI",{});var qL=s(rs);UZ=n(qL,"STRONG",{});var SDr=s(UZ);kUe=r(SDr,"cpm"),SDr.forEach(t),SUe=r(qL," \u2014 "),Zk=n(qL,"A",{href:!0});var RDr=s(Zk);RUe=r(RDr,"CpmTokenizer"),RDr.forEach(t),BUe=r(qL," or "),JZ=n(qL,"CODE",{});var BDr=s(JZ);PUe=r(BDr,"CpmTokenizerFast"),BDr.forEach(t),$Ue=r(qL," (CPM model)"),qL.forEach(t),IUe=i(C),Hg=n(C,"LI",{});var f4e=s(Hg);YZ=n(f4e,"STRONG",{});var PDr=s(YZ);qUe=r(PDr,"ctrl"),PDr.forEach(t),NUe=r(f4e," \u2014 "),eS=n(f4e,"A",{href:!0});var $Dr=s(eS);jUe=r($Dr,"CTRLTokenizer"),$Dr.forEach(t),DUe=r(f4e," (CTRL model)"),f4e.forEach(t),GUe=i(C),ts=n(C,"LI",{});var NL=s(ts);KZ=n(NL,"STRONG",{});var IDr=s(KZ);OUe=r(IDr,"deberta"),IDr.forEach(t),VUe=r(NL," \u2014 "),oS=n(NL,"A",{href:!0});var qDr=s(oS);XUe=r(qDr,"DebertaTokenizer"),qDr.forEach(t),zUe=r(NL," or "),rS=n(NL,"A",{href:!0});var NDr=s(rS);QUe=r(NDr,"DebertaTokenizerFast"),NDr.forEach(t),WUe=r(NL," (DeBERTa model)"),NL.forEach(t),HUe=i(C),Ug=n(C,"LI",{});var m4e=s(Ug);ZZ=n(m4e,"STRONG",{});var jDr=s(ZZ);UUe=r(jDr,"deberta-v2"),jDr.forEach(t),JUe=r(m4e," \u2014 "),tS=n(m4e,"A",{href:!0});var DDr=s(tS);YUe=r(DDr,"DebertaV2Tokenizer"),DDr.forEach(t),KUe=r(m4e," (DeBERTa-v2 model)"),m4e.forEach(t),ZUe=i(C),as=n(C,"LI",{});var jL=s(as);eee=n(jL,"STRONG",{});var GDr=s(eee);eJe=r(GDr,"distilbert"),GDr.forEach(t),oJe=r(jL," \u2014 "),aS=n(jL,"A",{href:!0});var ODr=s(aS);rJe=r(ODr,"DistilBertTokenizer"),ODr.forEach(t),tJe=r(jL," or "),nS=n(jL,"A",{href:!0});var VDr=s(nS);aJe=r(VDr,"DistilBertTokenizerFast"),VDr.forEach(t),nJe=r(jL," (DistilBERT model)"),jL.forEach(t),sJe=i(C),ns=n(C,"LI",{});var DL=s(ns);oee=n(DL,"STRONG",{});var XDr=s(oee);lJe=r(XDr,"dpr"),XDr.forEach(t),iJe=r(DL," \u2014 "),sS=n(DL,"A",{href:!0});var zDr=s(sS);dJe=r(zDr,"DPRQuestionEncoderTokenizer"),zDr.forEach(t),cJe=r(DL," or "),lS=n(DL,"A",{href:!0});var QDr=s(lS);fJe=r(QDr,"DPRQuestionEncoderTokenizerFast"),QDr.forEach(t),mJe=r(DL," (DPR model)"),DL.forEach(t),gJe=i(C),ss=n(C,"LI",{});var GL=s(ss);ree=n(GL,"STRONG",{});var WDr=s(ree);hJe=r(WDr,"electra"),WDr.forEach(t),pJe=r(GL," \u2014 "),iS=n(GL,"A",{href:!0});var HDr=s(iS);_Je=r(HDr,"ElectraTokenizer"),HDr.forEach(t),uJe=r(GL," or "),dS=n(GL,"A",{href:!0});var UDr=s(dS);bJe=r(UDr,"ElectraTokenizerFast"),UDr.forEach(t),FJe=r(GL," (ELECTRA model)"),GL.forEach(t),vJe=i(C),Jg=n(C,"LI",{});var g4e=s(Jg);tee=n(g4e,"STRONG",{});var JDr=s(tee);TJe=r(JDr,"flaubert"),JDr.forEach(t),MJe=r(g4e," \u2014 "),cS=n(g4e,"A",{href:!0});var YDr=s(cS);EJe=r(YDr,"FlaubertTokenizer"),YDr.forEach(t),CJe=r(g4e," (FlauBERT model)"),g4e.forEach(t),wJe=i(C),ls=n(C,"LI",{});var OL=s(ls);aee=n(OL,"STRONG",{});var KDr=s(aee);AJe=r(KDr,"fnet"),KDr.forEach(t),yJe=r(OL," \u2014 "),fS=n(OL,"A",{href:!0});var ZDr=s(fS);LJe=r(ZDr,"FNetTokenizer"),ZDr.forEach(t),xJe=r(OL," or "),mS=n(OL,"A",{href:!0});var eGr=s(mS);kJe=r(eGr,"FNetTokenizerFast"),eGr.forEach(t),SJe=r(OL," (FNet model)"),OL.forEach(t),RJe=i(C),Yg=n(C,"LI",{});var h4e=s(Yg);nee=n(h4e,"STRONG",{});var oGr=s(nee);BJe=r(oGr,"fsmt"),oGr.forEach(t),PJe=r(h4e," \u2014 "),gS=n(h4e,"A",{href:!0});var rGr=s(gS);$Je=r(rGr,"FSMTTokenizer"),rGr.forEach(t),IJe=r(h4e," (FairSeq Machine-Translation model)"),h4e.forEach(t),qJe=i(C),is=n(C,"LI",{});var VL=s(is);see=n(VL,"STRONG",{});var tGr=s(see);NJe=r(tGr,"funnel"),tGr.forEach(t),jJe=r(VL," \u2014 "),hS=n(VL,"A",{href:!0});var aGr=s(hS);DJe=r(aGr,"FunnelTokenizer"),aGr.forEach(t),GJe=r(VL," or "),pS=n(VL,"A",{href:!0});var nGr=s(pS);OJe=r(nGr,"FunnelTokenizerFast"),nGr.forEach(t),VJe=r(VL," (Funnel Transformer model)"),VL.forEach(t),XJe=i(C),ds=n(C,"LI",{});var XL=s(ds);lee=n(XL,"STRONG",{});var sGr=s(lee);zJe=r(sGr,"gpt2"),sGr.forEach(t),QJe=r(XL," \u2014 "),_S=n(XL,"A",{href:!0});var lGr=s(_S);WJe=r(lGr,"GPT2Tokenizer"),lGr.forEach(t),HJe=r(XL," or "),uS=n(XL,"A",{href:!0});var iGr=s(uS);UJe=r(iGr,"GPT2TokenizerFast"),iGr.forEach(t),JJe=r(XL," (OpenAI GPT-2 model)"),XL.forEach(t),YJe=i(C),cs=n(C,"LI",{});var zL=s(cs);iee=n(zL,"STRONG",{});var dGr=s(iee);KJe=r(dGr,"gpt_neo"),dGr.forEach(t),ZJe=r(zL," \u2014 "),bS=n(zL,"A",{href:!0});var cGr=s(bS);eYe=r(cGr,"GPT2Tokenizer"),cGr.forEach(t),oYe=r(zL," or "),FS=n(zL,"A",{href:!0});var fGr=s(FS);rYe=r(fGr,"GPT2TokenizerFast"),fGr.forEach(t),tYe=r(zL," (GPT Neo model)"),zL.forEach(t),aYe=i(C),fs=n(C,"LI",{});var QL=s(fs);dee=n(QL,"STRONG",{});var mGr=s(dee);nYe=r(mGr,"herbert"),mGr.forEach(t),sYe=r(QL," \u2014 "),vS=n(QL,"A",{href:!0});var gGr=s(vS);lYe=r(gGr,"HerbertTokenizer"),gGr.forEach(t),iYe=r(QL," or "),TS=n(QL,"A",{href:!0});var hGr=s(TS);dYe=r(hGr,"HerbertTokenizerFast"),hGr.forEach(t),cYe=r(QL," (HerBERT model)"),QL.forEach(t),fYe=i(C),Kg=n(C,"LI",{});var p4e=s(Kg);cee=n(p4e,"STRONG",{});var pGr=s(cee);mYe=r(pGr,"hubert"),pGr.forEach(t),gYe=r(p4e," \u2014 "),MS=n(p4e,"A",{href:!0});var _Gr=s(MS);hYe=r(_Gr,"Wav2Vec2CTCTokenizer"),_Gr.forEach(t),pYe=r(p4e," (Hubert model)"),p4e.forEach(t),_Ye=i(C),ms=n(C,"LI",{});var WL=s(ms);fee=n(WL,"STRONG",{});var uGr=s(fee);uYe=r(uGr,"ibert"),uGr.forEach(t),bYe=r(WL," \u2014 "),ES=n(WL,"A",{href:!0});var bGr=s(ES);FYe=r(bGr,"RobertaTokenizer"),bGr.forEach(t),vYe=r(WL," or "),CS=n(WL,"A",{href:!0});var FGr=s(CS);TYe=r(FGr,"RobertaTokenizerFast"),FGr.forEach(t),MYe=r(WL," (I-BERT model)"),WL.forEach(t),EYe=i(C),gs=n(C,"LI",{});var HL=s(gs);mee=n(HL,"STRONG",{});var vGr=s(mee);CYe=r(vGr,"layoutlm"),vGr.forEach(t),wYe=r(HL," \u2014 "),wS=n(HL,"A",{href:!0});var TGr=s(wS);AYe=r(TGr,"LayoutLMTokenizer"),TGr.forEach(t),yYe=r(HL," or "),AS=n(HL,"A",{href:!0});var MGr=s(AS);LYe=r(MGr,"LayoutLMTokenizerFast"),MGr.forEach(t),xYe=r(HL," (LayoutLM model)"),HL.forEach(t),kYe=i(C),hs=n(C,"LI",{});var UL=s(hs);gee=n(UL,"STRONG",{});var EGr=s(gee);SYe=r(EGr,"layoutlmv2"),EGr.forEach(t),RYe=r(UL," \u2014 "),yS=n(UL,"A",{href:!0});var CGr=s(yS);BYe=r(CGr,"LayoutLMv2Tokenizer"),CGr.forEach(t),PYe=r(UL," or "),LS=n(UL,"A",{href:!0});var wGr=s(LS);$Ye=r(wGr,"LayoutLMv2TokenizerFast"),wGr.forEach(t),IYe=r(UL," (LayoutLMv2 model)"),UL.forEach(t),qYe=i(C),ps=n(C,"LI",{});var JL=s(ps);hee=n(JL,"STRONG",{});var AGr=s(hee);NYe=r(AGr,"layoutxlm"),AGr.forEach(t),jYe=r(JL," \u2014 "),xS=n(JL,"A",{href:!0});var yGr=s(xS);DYe=r(yGr,"LayoutXLMTokenizer"),yGr.forEach(t),GYe=r(JL," or "),kS=n(JL,"A",{href:!0});var LGr=s(kS);OYe=r(LGr,"LayoutXLMTokenizerFast"),LGr.forEach(t),VYe=r(JL," (LayoutXLM model)"),JL.forEach(t),XYe=i(C),_s=n(C,"LI",{});var YL=s(_s);pee=n(YL,"STRONG",{});var xGr=s(pee);zYe=r(xGr,"led"),xGr.forEach(t),QYe=r(YL," \u2014 "),SS=n(YL,"A",{href:!0});var kGr=s(SS);WYe=r(kGr,"LEDTokenizer"),kGr.forEach(t),HYe=r(YL," or "),RS=n(YL,"A",{href:!0});var SGr=s(RS);UYe=r(SGr,"LEDTokenizerFast"),SGr.forEach(t),JYe=r(YL," (LED model)"),YL.forEach(t),YYe=i(C),us=n(C,"LI",{});var KL=s(us);_ee=n(KL,"STRONG",{});var RGr=s(_ee);KYe=r(RGr,"longformer"),RGr.forEach(t),ZYe=r(KL," \u2014 "),BS=n(KL,"A",{href:!0});var BGr=s(BS);eKe=r(BGr,"LongformerTokenizer"),BGr.forEach(t),oKe=r(KL," or "),PS=n(KL,"A",{href:!0});var PGr=s(PS);rKe=r(PGr,"LongformerTokenizerFast"),PGr.forEach(t),tKe=r(KL," (Longformer model)"),KL.forEach(t),aKe=i(C),bs=n(C,"LI",{});var ZL=s(bs);uee=n(ZL,"STRONG",{});var $Gr=s(uee);nKe=r($Gr,"longt5"),$Gr.forEach(t),sKe=r(ZL," \u2014 "),$S=n(ZL,"A",{href:!0});var IGr=s($S);lKe=r(IGr,"T5Tokenizer"),IGr.forEach(t),iKe=r(ZL," or "),IS=n(ZL,"A",{href:!0});var qGr=s(IS);dKe=r(qGr,"T5TokenizerFast"),qGr.forEach(t),cKe=r(ZL," (LongT5 model)"),ZL.forEach(t),fKe=i(C),Zg=n(C,"LI",{});var _4e=s(Zg);bee=n(_4e,"STRONG",{});var NGr=s(bee);mKe=r(NGr,"luke"),NGr.forEach(t),gKe=r(_4e," \u2014 "),qS=n(_4e,"A",{href:!0});var jGr=s(qS);hKe=r(jGr,"LukeTokenizer"),jGr.forEach(t),pKe=r(_4e," (LUKE model)"),_4e.forEach(t),_Ke=i(C),Fs=n(C,"LI",{});var e8=s(Fs);Fee=n(e8,"STRONG",{});var DGr=s(Fee);uKe=r(DGr,"lxmert"),DGr.forEach(t),bKe=r(e8," \u2014 "),NS=n(e8,"A",{href:!0});var GGr=s(NS);FKe=r(GGr,"LxmertTokenizer"),GGr.forEach(t),vKe=r(e8," or "),jS=n(e8,"A",{href:!0});var OGr=s(jS);TKe=r(OGr,"LxmertTokenizerFast"),OGr.forEach(t),MKe=r(e8," (LXMERT model)"),e8.forEach(t),EKe=i(C),eh=n(C,"LI",{});var u4e=s(eh);vee=n(u4e,"STRONG",{});var VGr=s(vee);CKe=r(VGr,"m2m_100"),VGr.forEach(t),wKe=r(u4e," \u2014 "),DS=n(u4e,"A",{href:!0});var XGr=s(DS);AKe=r(XGr,"M2M100Tokenizer"),XGr.forEach(t),yKe=r(u4e," (M2M100 model)"),u4e.forEach(t),LKe=i(C),oh=n(C,"LI",{});var b4e=s(oh);Tee=n(b4e,"STRONG",{});var zGr=s(Tee);xKe=r(zGr,"marian"),zGr.forEach(t),kKe=r(b4e," \u2014 "),GS=n(b4e,"A",{href:!0});var QGr=s(GS);SKe=r(QGr,"MarianTokenizer"),QGr.forEach(t),RKe=r(b4e," (Marian model)"),b4e.forEach(t),BKe=i(C),vs=n(C,"LI",{});var o8=s(vs);Mee=n(o8,"STRONG",{});var WGr=s(Mee);PKe=r(WGr,"mbart"),WGr.forEach(t),$Ke=r(o8," \u2014 "),OS=n(o8,"A",{href:!0});var HGr=s(OS);IKe=r(HGr,"MBartTokenizer"),HGr.forEach(t),qKe=r(o8," or "),VS=n(o8,"A",{href:!0});var UGr=s(VS);NKe=r(UGr,"MBartTokenizerFast"),UGr.forEach(t),jKe=r(o8," (mBART model)"),o8.forEach(t),DKe=i(C),Ts=n(C,"LI",{});var r8=s(Ts);Eee=n(r8,"STRONG",{});var JGr=s(Eee);GKe=r(JGr,"mbart50"),JGr.forEach(t),OKe=r(r8," \u2014 "),XS=n(r8,"A",{href:!0});var YGr=s(XS);VKe=r(YGr,"MBart50Tokenizer"),YGr.forEach(t),XKe=r(r8," or "),zS=n(r8,"A",{href:!0});var KGr=s(zS);zKe=r(KGr,"MBart50TokenizerFast"),KGr.forEach(t),QKe=r(r8," (mBART-50 model)"),r8.forEach(t),WKe=i(C),rh=n(C,"LI",{});var F4e=s(rh);Cee=n(F4e,"STRONG",{});var ZGr=s(Cee);HKe=r(ZGr,"mluke"),ZGr.forEach(t),UKe=r(F4e," \u2014 "),QS=n(F4e,"A",{href:!0});var eOr=s(QS);JKe=r(eOr,"MLukeTokenizer"),eOr.forEach(t),YKe=r(F4e," (mLUKE model)"),F4e.forEach(t),KKe=i(C),Ms=n(C,"LI",{});var t8=s(Ms);wee=n(t8,"STRONG",{});var oOr=s(wee);ZKe=r(oOr,"mobilebert"),oOr.forEach(t),eZe=r(t8," \u2014 "),WS=n(t8,"A",{href:!0});var rOr=s(WS);oZe=r(rOr,"MobileBertTokenizer"),rOr.forEach(t),rZe=r(t8," or "),HS=n(t8,"A",{href:!0});var tOr=s(HS);tZe=r(tOr,"MobileBertTokenizerFast"),tOr.forEach(t),aZe=r(t8," (MobileBERT model)"),t8.forEach(t),nZe=i(C),Es=n(C,"LI",{});var a8=s(Es);Aee=n(a8,"STRONG",{});var aOr=s(Aee);sZe=r(aOr,"mpnet"),aOr.forEach(t),lZe=r(a8," \u2014 "),US=n(a8,"A",{href:!0});var nOr=s(US);iZe=r(nOr,"MPNetTokenizer"),nOr.forEach(t),dZe=r(a8," or "),JS=n(a8,"A",{href:!0});var sOr=s(JS);cZe=r(sOr,"MPNetTokenizerFast"),sOr.forEach(t),fZe=r(a8," (MPNet model)"),a8.forEach(t),mZe=i(C),Cs=n(C,"LI",{});var n8=s(Cs);yee=n(n8,"STRONG",{});var lOr=s(yee);gZe=r(lOr,"mt5"),lOr.forEach(t),hZe=r(n8," \u2014 "),YS=n(n8,"A",{href:!0});var iOr=s(YS);pZe=r(iOr,"MT5Tokenizer"),iOr.forEach(t),_Ze=r(n8," or "),KS=n(n8,"A",{href:!0});var dOr=s(KS);uZe=r(dOr,"MT5TokenizerFast"),dOr.forEach(t),bZe=r(n8," (mT5 model)"),n8.forEach(t),FZe=i(C),ws=n(C,"LI",{});var s8=s(ws);Lee=n(s8,"STRONG",{});var cOr=s(Lee);vZe=r(cOr,"openai-gpt"),cOr.forEach(t),TZe=r(s8," \u2014 "),ZS=n(s8,"A",{href:!0});var fOr=s(ZS);MZe=r(fOr,"OpenAIGPTTokenizer"),fOr.forEach(t),EZe=r(s8," or "),eR=n(s8,"A",{href:!0});var mOr=s(eR);CZe=r(mOr,"OpenAIGPTTokenizerFast"),mOr.forEach(t),wZe=r(s8," (OpenAI GPT model)"),s8.forEach(t),AZe=i(C),As=n(C,"LI",{});var l8=s(As);xee=n(l8,"STRONG",{});var gOr=s(xee);yZe=r(gOr,"pegasus"),gOr.forEach(t),LZe=r(l8," \u2014 "),oR=n(l8,"A",{href:!0});var hOr=s(oR);xZe=r(hOr,"PegasusTokenizer"),hOr.forEach(t),kZe=r(l8," or "),rR=n(l8,"A",{href:!0});var pOr=s(rR);SZe=r(pOr,"PegasusTokenizerFast"),pOr.forEach(t),RZe=r(l8," (Pegasus model)"),l8.forEach(t),BZe=i(C),th=n(C,"LI",{});var v4e=s(th);kee=n(v4e,"STRONG",{});var _Or=s(kee);PZe=r(_Or,"perceiver"),_Or.forEach(t),$Ze=r(v4e," \u2014 "),tR=n(v4e,"A",{href:!0});var uOr=s(tR);IZe=r(uOr,"PerceiverTokenizer"),uOr.forEach(t),qZe=r(v4e," (Perceiver model)"),v4e.forEach(t),NZe=i(C),ah=n(C,"LI",{});var T4e=s(ah);See=n(T4e,"STRONG",{});var bOr=s(See);jZe=r(bOr,"phobert"),bOr.forEach(t),DZe=r(T4e," \u2014 "),aR=n(T4e,"A",{href:!0});var FOr=s(aR);GZe=r(FOr,"PhobertTokenizer"),FOr.forEach(t),OZe=r(T4e," (PhoBERT model)"),T4e.forEach(t),VZe=i(C),nh=n(C,"LI",{});var M4e=s(nh);Ree=n(M4e,"STRONG",{});var vOr=s(Ree);XZe=r(vOr,"plbart"),vOr.forEach(t),zZe=r(M4e," \u2014 "),nR=n(M4e,"A",{href:!0});var TOr=s(nR);QZe=r(TOr,"PLBartTokenizer"),TOr.forEach(t),WZe=r(M4e," (PLBart model)"),M4e.forEach(t),HZe=i(C),sh=n(C,"LI",{});var E4e=s(sh);Bee=n(E4e,"STRONG",{});var MOr=s(Bee);UZe=r(MOr,"prophetnet"),MOr.forEach(t),JZe=r(E4e," \u2014 "),sR=n(E4e,"A",{href:!0});var EOr=s(sR);YZe=r(EOr,"ProphetNetTokenizer"),EOr.forEach(t),KZe=r(E4e," (ProphetNet model)"),E4e.forEach(t),ZZe=i(C),ys=n(C,"LI",{});var i8=s(ys);Pee=n(i8,"STRONG",{});var COr=s(Pee);eeo=r(COr,"qdqbert"),COr.forEach(t),oeo=r(i8," \u2014 "),lR=n(i8,"A",{href:!0});var wOr=s(lR);reo=r(wOr,"BertTokenizer"),wOr.forEach(t),teo=r(i8," or "),iR=n(i8,"A",{href:!0});var AOr=s(iR);aeo=r(AOr,"BertTokenizerFast"),AOr.forEach(t),neo=r(i8," (QDQBert model)"),i8.forEach(t),seo=i(C),lh=n(C,"LI",{});var C4e=s(lh);$ee=n(C4e,"STRONG",{});var yOr=s($ee);leo=r(yOr,"rag"),yOr.forEach(t),ieo=r(C4e," \u2014 "),dR=n(C4e,"A",{href:!0});var LOr=s(dR);deo=r(LOr,"RagTokenizer"),LOr.forEach(t),ceo=r(C4e," (RAG model)"),C4e.forEach(t),feo=i(C),Ls=n(C,"LI",{});var d8=s(Ls);Iee=n(d8,"STRONG",{});var xOr=s(Iee);meo=r(xOr,"realm"),xOr.forEach(t),geo=r(d8," \u2014 "),cR=n(d8,"A",{href:!0});var kOr=s(cR);heo=r(kOr,"RealmTokenizer"),kOr.forEach(t),peo=r(d8," or "),fR=n(d8,"A",{href:!0});var SOr=s(fR);_eo=r(SOr,"RealmTokenizerFast"),SOr.forEach(t),ueo=r(d8," (Realm model)"),d8.forEach(t),beo=i(C),xs=n(C,"LI",{});var c8=s(xs);qee=n(c8,"STRONG",{});var ROr=s(qee);Feo=r(ROr,"reformer"),ROr.forEach(t),veo=r(c8," \u2014 "),mR=n(c8,"A",{href:!0});var BOr=s(mR);Teo=r(BOr,"ReformerTokenizer"),BOr.forEach(t),Meo=r(c8," or "),gR=n(c8,"A",{href:!0});var POr=s(gR);Eeo=r(POr,"ReformerTokenizerFast"),POr.forEach(t),Ceo=r(c8," (Reformer model)"),c8.forEach(t),weo=i(C),ks=n(C,"LI",{});var f8=s(ks);Nee=n(f8,"STRONG",{});var $Or=s(Nee);Aeo=r($Or,"rembert"),$Or.forEach(t),yeo=r(f8," \u2014 "),hR=n(f8,"A",{href:!0});var IOr=s(hR);Leo=r(IOr,"RemBertTokenizer"),IOr.forEach(t),xeo=r(f8," or "),pR=n(f8,"A",{href:!0});var qOr=s(pR);keo=r(qOr,"RemBertTokenizerFast"),qOr.forEach(t),Seo=r(f8," (RemBERT model)"),f8.forEach(t),Reo=i(C),Ss=n(C,"LI",{});var m8=s(Ss);jee=n(m8,"STRONG",{});var NOr=s(jee);Beo=r(NOr,"retribert"),NOr.forEach(t),Peo=r(m8," \u2014 "),_R=n(m8,"A",{href:!0});var jOr=s(_R);$eo=r(jOr,"RetriBertTokenizer"),jOr.forEach(t),Ieo=r(m8," or "),uR=n(m8,"A",{href:!0});var DOr=s(uR);qeo=r(DOr,"RetriBertTokenizerFast"),DOr.forEach(t),Neo=r(m8," (RetriBERT model)"),m8.forEach(t),jeo=i(C),Rs=n(C,"LI",{});var g8=s(Rs);Dee=n(g8,"STRONG",{});var GOr=s(Dee);Deo=r(GOr,"roberta"),GOr.forEach(t),Geo=r(g8," \u2014 "),bR=n(g8,"A",{href:!0});var OOr=s(bR);Oeo=r(OOr,"RobertaTokenizer"),OOr.forEach(t),Veo=r(g8," or "),FR=n(g8,"A",{href:!0});var VOr=s(FR);Xeo=r(VOr,"RobertaTokenizerFast"),VOr.forEach(t),zeo=r(g8," (RoBERTa model)"),g8.forEach(t),Qeo=i(C),Bs=n(C,"LI",{});var h8=s(Bs);Gee=n(h8,"STRONG",{});var XOr=s(Gee);Weo=r(XOr,"roformer"),XOr.forEach(t),Heo=r(h8," \u2014 "),vR=n(h8,"A",{href:!0});var zOr=s(vR);Ueo=r(zOr,"RoFormerTokenizer"),zOr.forEach(t),Jeo=r(h8," or "),TR=n(h8,"A",{href:!0});var QOr=s(TR);Yeo=r(QOr,"RoFormerTokenizerFast"),QOr.forEach(t),Keo=r(h8," (RoFormer model)"),h8.forEach(t),Zeo=i(C),ih=n(C,"LI",{});var w4e=s(ih);Oee=n(w4e,"STRONG",{});var WOr=s(Oee);eoo=r(WOr,"speech_to_text"),WOr.forEach(t),ooo=r(w4e," \u2014 "),MR=n(w4e,"A",{href:!0});var HOr=s(MR);roo=r(HOr,"Speech2TextTokenizer"),HOr.forEach(t),too=r(w4e," (Speech2Text model)"),w4e.forEach(t),aoo=i(C),dh=n(C,"LI",{});var A4e=s(dh);Vee=n(A4e,"STRONG",{});var UOr=s(Vee);noo=r(UOr,"speech_to_text_2"),UOr.forEach(t),soo=r(A4e," \u2014 "),ER=n(A4e,"A",{href:!0});var JOr=s(ER);loo=r(JOr,"Speech2Text2Tokenizer"),JOr.forEach(t),ioo=r(A4e," (Speech2Text2 model)"),A4e.forEach(t),doo=i(C),Ps=n(C,"LI",{});var p8=s(Ps);Xee=n(p8,"STRONG",{});var YOr=s(Xee);coo=r(YOr,"splinter"),YOr.forEach(t),foo=r(p8," \u2014 "),CR=n(p8,"A",{href:!0});var KOr=s(CR);moo=r(KOr,"SplinterTokenizer"),KOr.forEach(t),goo=r(p8," or "),wR=n(p8,"A",{href:!0});var ZOr=s(wR);hoo=r(ZOr,"SplinterTokenizerFast"),ZOr.forEach(t),poo=r(p8," (Splinter model)"),p8.forEach(t),_oo=i(C),$s=n(C,"LI",{});var _8=s($s);zee=n(_8,"STRONG",{});var eVr=s(zee);uoo=r(eVr,"squeezebert"),eVr.forEach(t),boo=r(_8," \u2014 "),AR=n(_8,"A",{href:!0});var oVr=s(AR);Foo=r(oVr,"SqueezeBertTokenizer"),oVr.forEach(t),voo=r(_8," or "),yR=n(_8,"A",{href:!0});var rVr=s(yR);Too=r(rVr,"SqueezeBertTokenizerFast"),rVr.forEach(t),Moo=r(_8," (SqueezeBERT model)"),_8.forEach(t),Eoo=i(C),Is=n(C,"LI",{});var u8=s(Is);Qee=n(u8,"STRONG",{});var tVr=s(Qee);Coo=r(tVr,"t5"),tVr.forEach(t),woo=r(u8," \u2014 "),LR=n(u8,"A",{href:!0});var aVr=s(LR);Aoo=r(aVr,"T5Tokenizer"),aVr.forEach(t),yoo=r(u8," or "),xR=n(u8,"A",{href:!0});var nVr=s(xR);Loo=r(nVr,"T5TokenizerFast"),nVr.forEach(t),xoo=r(u8," (T5 model)"),u8.forEach(t),koo=i(C),ch=n(C,"LI",{});var y4e=s(ch);Wee=n(y4e,"STRONG",{});var sVr=s(Wee);Soo=r(sVr,"tapas"),sVr.forEach(t),Roo=r(y4e," \u2014 "),kR=n(y4e,"A",{href:!0});var lVr=s(kR);Boo=r(lVr,"TapasTokenizer"),lVr.forEach(t),Poo=r(y4e," (TAPAS model)"),y4e.forEach(t),$oo=i(C),fh=n(C,"LI",{});var L4e=s(fh);Hee=n(L4e,"STRONG",{});var iVr=s(Hee);Ioo=r(iVr,"tapex"),iVr.forEach(t),qoo=r(L4e," \u2014 "),SR=n(L4e,"A",{href:!0});var dVr=s(SR);Noo=r(dVr,"TapexTokenizer"),dVr.forEach(t),joo=r(L4e," (TAPEX model)"),L4e.forEach(t),Doo=i(C),mh=n(C,"LI",{});var x4e=s(mh);Uee=n(x4e,"STRONG",{});var cVr=s(Uee);Goo=r(cVr,"transfo-xl"),cVr.forEach(t),Ooo=r(x4e," \u2014 "),RR=n(x4e,"A",{href:!0});var fVr=s(RR);Voo=r(fVr,"TransfoXLTokenizer"),fVr.forEach(t),Xoo=r(x4e," (Transformer-XL model)"),x4e.forEach(t),zoo=i(C),gh=n(C,"LI",{});var k4e=s(gh);Jee=n(k4e,"STRONG",{});var mVr=s(Jee);Qoo=r(mVr,"wav2vec2"),mVr.forEach(t),Woo=r(k4e," \u2014 "),BR=n(k4e,"A",{href:!0});var gVr=s(BR);Hoo=r(gVr,"Wav2Vec2CTCTokenizer"),gVr.forEach(t),Uoo=r(k4e," (Wav2Vec2 model)"),k4e.forEach(t),Joo=i(C),hh=n(C,"LI",{});var S4e=s(hh);Yee=n(S4e,"STRONG",{});var hVr=s(Yee);Yoo=r(hVr,"wav2vec2_phoneme"),hVr.forEach(t),Koo=r(S4e," \u2014 "),PR=n(S4e,"A",{href:!0});var pVr=s(PR);Zoo=r(pVr,"Wav2Vec2PhonemeCTCTokenizer"),pVr.forEach(t),ero=r(S4e," (Wav2Vec2Phoneme model)"),S4e.forEach(t),oro=i(C),qs=n(C,"LI",{});var b8=s(qs);Kee=n(b8,"STRONG",{});var _Vr=s(Kee);rro=r(_Vr,"xglm"),_Vr.forEach(t),tro=r(b8," \u2014 "),$R=n(b8,"A",{href:!0});var uVr=s($R);aro=r(uVr,"XGLMTokenizer"),uVr.forEach(t),nro=r(b8," or "),IR=n(b8,"A",{href:!0});var bVr=s(IR);sro=r(bVr,"XGLMTokenizerFast"),bVr.forEach(t),lro=r(b8," (XGLM model)"),b8.forEach(t),iro=i(C),ph=n(C,"LI",{});var R4e=s(ph);Zee=n(R4e,"STRONG",{});var FVr=s(Zee);dro=r(FVr,"xlm"),FVr.forEach(t),cro=r(R4e," \u2014 "),qR=n(R4e,"A",{href:!0});var vVr=s(qR);fro=r(vVr,"XLMTokenizer"),vVr.forEach(t),mro=r(R4e," (XLM model)"),R4e.forEach(t),gro=i(C),_h=n(C,"LI",{});var B4e=s(_h);eoe=n(B4e,"STRONG",{});var TVr=s(eoe);hro=r(TVr,"xlm-prophetnet"),TVr.forEach(t),pro=r(B4e," \u2014 "),NR=n(B4e,"A",{href:!0});var MVr=s(NR);_ro=r(MVr,"XLMProphetNetTokenizer"),MVr.forEach(t),uro=r(B4e," (XLMProphetNet model)"),B4e.forEach(t),bro=i(C),Ns=n(C,"LI",{});var F8=s(Ns);ooe=n(F8,"STRONG",{});var EVr=s(ooe);Fro=r(EVr,"xlm-roberta"),EVr.forEach(t),vro=r(F8," \u2014 "),jR=n(F8,"A",{href:!0});var CVr=s(jR);Tro=r(CVr,"XLMRobertaTokenizer"),CVr.forEach(t),Mro=r(F8," or "),DR=n(F8,"A",{href:!0});var wVr=s(DR);Ero=r(wVr,"XLMRobertaTokenizerFast"),wVr.forEach(t),Cro=r(F8," (XLM-RoBERTa model)"),F8.forEach(t),wro=i(C),js=n(C,"LI",{});var v8=s(js);roe=n(v8,"STRONG",{});var AVr=s(roe);Aro=r(AVr,"xlnet"),AVr.forEach(t),yro=r(v8," \u2014 "),GR=n(v8,"A",{href:!0});var yVr=s(GR);Lro=r(yVr,"XLNetTokenizer"),yVr.forEach(t),xro=r(v8," or "),OR=n(v8,"A",{href:!0});var LVr=s(OR);kro=r(LVr,"XLNetTokenizerFast"),LVr.forEach(t),Sro=r(v8," (XLNet model)"),v8.forEach(t),C.forEach(t),Rro=i(ha),toe=n(ha,"P",{});var xVr=s(toe);Bro=r(xVr,"Examples:"),xVr.forEach(t),Pro=i(ha),m(U5.$$.fragment,ha),ha.forEach(t),$ro=i(Xs),uh=n(Xs,"DIV",{class:!0});var l$e=s(uh);m(J5.$$.fragment,l$e),Iro=i(l$e),aoe=n(l$e,"P",{});var kVr=s(aoe);qro=r(kVr,"Register a new tokenizer in this mapping."),kVr.forEach(t),l$e.forEach(t),Xs.forEach(t),tBe=i(c),Hi=n(c,"H2",{class:!0});var i$e=s(Hi);bh=n(i$e,"A",{id:!0,class:!0,href:!0});var SVr=s(bh);noe=n(SVr,"SPAN",{});var RVr=s(noe);m(Y5.$$.fragment,RVr),RVr.forEach(t),SVr.forEach(t),Nro=i(i$e),soe=n(i$e,"SPAN",{});var BVr=s(soe);jro=r(BVr,"AutoFeatureExtractor"),BVr.forEach(t),i$e.forEach(t),aBe=i(c),Ho=n(c,"DIV",{class:!0});var zs=s(Ho);m(K5.$$.fragment,zs),Dro=i(zs),Z5=n(zs,"P",{});var d$e=s(Z5);Gro=r(d$e,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),VR=n(d$e,"A",{href:!0});var PVr=s(VR);Oro=r(PVr,"AutoFeatureExtractor.from_pretrained()"),PVr.forEach(t),Vro=r(d$e," class method."),d$e.forEach(t),Xro=i(zs),e3=n(zs,"P",{});var c$e=s(e3);zro=r(c$e,"This class cannot be instantiated directly using "),loe=n(c$e,"CODE",{});var $Vr=s(loe);Qro=r($Vr,"__init__()"),$Vr.forEach(t),Wro=r(c$e," (throws an error)."),c$e.forEach(t),Hro=i(zs),Ie=n(zs,"DIV",{class:!0});var Nt=s(Ie);m(o3.$$.fragment,Nt),Uro=i(Nt),ioe=n(Nt,"P",{});var IVr=s(ioe);Jro=r(IVr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),IVr.forEach(t),Yro=i(Nt),Va=n(Nt,"P",{});var PE=s(Va);Kro=r(PE,"The feature extractor class to instantiate is selected based on the "),doe=n(PE,"CODE",{});var qVr=s(doe);Zro=r(qVr,"model_type"),qVr.forEach(t),eto=r(PE,` property of the config object
(either passed as an argument or loaded from `),coe=n(PE,"CODE",{});var NVr=s(coe);oto=r(NVr,"pretrained_model_name_or_path"),NVr.forEach(t),rto=r(PE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),foe=n(PE,"CODE",{});var jVr=s(foe);tto=r(jVr,"pretrained_model_name_or_path"),jVr.forEach(t),ato=r(PE,":"),PE.forEach(t),nto=i(Nt),ee=n(Nt,"UL",{});var ne=s(ee);Fh=n(ne,"LI",{});var P4e=s(Fh);moe=n(P4e,"STRONG",{});var DVr=s(moe);sto=r(DVr,"beit"),DVr.forEach(t),lto=r(P4e," \u2014 "),XR=n(P4e,"A",{href:!0});var GVr=s(XR);ito=r(GVr,"BeitFeatureExtractor"),GVr.forEach(t),dto=r(P4e," (BEiT model)"),P4e.forEach(t),cto=i(ne),vh=n(ne,"LI",{});var $4e=s(vh);goe=n($4e,"STRONG",{});var OVr=s(goe);fto=r(OVr,"clip"),OVr.forEach(t),mto=r($4e," \u2014 "),zR=n($4e,"A",{href:!0});var VVr=s(zR);gto=r(VVr,"CLIPFeatureExtractor"),VVr.forEach(t),hto=r($4e," (CLIP model)"),$4e.forEach(t),pto=i(ne),Th=n(ne,"LI",{});var I4e=s(Th);hoe=n(I4e,"STRONG",{});var XVr=s(hoe);_to=r(XVr,"convnext"),XVr.forEach(t),uto=r(I4e," \u2014 "),QR=n(I4e,"A",{href:!0});var zVr=s(QR);bto=r(zVr,"ConvNextFeatureExtractor"),zVr.forEach(t),Fto=r(I4e," (ConvNext model)"),I4e.forEach(t),vto=i(ne),Mh=n(ne,"LI",{});var q4e=s(Mh);poe=n(q4e,"STRONG",{});var QVr=s(poe);Tto=r(QVr,"deit"),QVr.forEach(t),Mto=r(q4e," \u2014 "),WR=n(q4e,"A",{href:!0});var WVr=s(WR);Eto=r(WVr,"DeiTFeatureExtractor"),WVr.forEach(t),Cto=r(q4e," (DeiT model)"),q4e.forEach(t),wto=i(ne),Eh=n(ne,"LI",{});var N4e=s(Eh);_oe=n(N4e,"STRONG",{});var HVr=s(_oe);Ato=r(HVr,"detr"),HVr.forEach(t),yto=r(N4e," \u2014 "),HR=n(N4e,"A",{href:!0});var UVr=s(HR);Lto=r(UVr,"DetrFeatureExtractor"),UVr.forEach(t),xto=r(N4e," (DETR model)"),N4e.forEach(t),kto=i(ne),Ch=n(ne,"LI",{});var j4e=s(Ch);uoe=n(j4e,"STRONG",{});var JVr=s(uoe);Sto=r(JVr,"hubert"),JVr.forEach(t),Rto=r(j4e," \u2014 "),UR=n(j4e,"A",{href:!0});var YVr=s(UR);Bto=r(YVr,"Wav2Vec2FeatureExtractor"),YVr.forEach(t),Pto=r(j4e," (Hubert model)"),j4e.forEach(t),$to=i(ne),wh=n(ne,"LI",{});var D4e=s(wh);boe=n(D4e,"STRONG",{});var KVr=s(boe);Ito=r(KVr,"layoutlmv2"),KVr.forEach(t),qto=r(D4e," \u2014 "),JR=n(D4e,"A",{href:!0});var ZVr=s(JR);Nto=r(ZVr,"LayoutLMv2FeatureExtractor"),ZVr.forEach(t),jto=r(D4e," (LayoutLMv2 model)"),D4e.forEach(t),Dto=i(ne),Ah=n(ne,"LI",{});var G4e=s(Ah);Foe=n(G4e,"STRONG",{});var eXr=s(Foe);Gto=r(eXr,"maskformer"),eXr.forEach(t),Oto=r(G4e," \u2014 "),YR=n(G4e,"A",{href:!0});var oXr=s(YR);Vto=r(oXr,"MaskFormerFeatureExtractor"),oXr.forEach(t),Xto=r(G4e," (MaskFormer model)"),G4e.forEach(t),zto=i(ne),yh=n(ne,"LI",{});var O4e=s(yh);voe=n(O4e,"STRONG",{});var rXr=s(voe);Qto=r(rXr,"perceiver"),rXr.forEach(t),Wto=r(O4e," \u2014 "),KR=n(O4e,"A",{href:!0});var tXr=s(KR);Hto=r(tXr,"PerceiverFeatureExtractor"),tXr.forEach(t),Uto=r(O4e," (Perceiver model)"),O4e.forEach(t),Jto=i(ne),Lh=n(ne,"LI",{});var V4e=s(Lh);Toe=n(V4e,"STRONG",{});var aXr=s(Toe);Yto=r(aXr,"poolformer"),aXr.forEach(t),Kto=r(V4e," \u2014 "),ZR=n(V4e,"A",{href:!0});var nXr=s(ZR);Zto=r(nXr,"PoolFormerFeatureExtractor"),nXr.forEach(t),eao=r(V4e," (PoolFormer model)"),V4e.forEach(t),oao=i(ne),xh=n(ne,"LI",{});var X4e=s(xh);Moe=n(X4e,"STRONG",{});var sXr=s(Moe);rao=r(sXr,"regnet"),sXr.forEach(t),tao=r(X4e," \u2014 "),eB=n(X4e,"A",{href:!0});var lXr=s(eB);aao=r(lXr,"ConvNextFeatureExtractor"),lXr.forEach(t),nao=r(X4e," (RegNet model)"),X4e.forEach(t),sao=i(ne),kh=n(ne,"LI",{});var z4e=s(kh);Eoe=n(z4e,"STRONG",{});var iXr=s(Eoe);lao=r(iXr,"resnet"),iXr.forEach(t),iao=r(z4e," \u2014 "),oB=n(z4e,"A",{href:!0});var dXr=s(oB);dao=r(dXr,"ConvNextFeatureExtractor"),dXr.forEach(t),cao=r(z4e," (ResNet model)"),z4e.forEach(t),fao=i(ne),Sh=n(ne,"LI",{});var Q4e=s(Sh);Coe=n(Q4e,"STRONG",{});var cXr=s(Coe);mao=r(cXr,"segformer"),cXr.forEach(t),gao=r(Q4e," \u2014 "),rB=n(Q4e,"A",{href:!0});var fXr=s(rB);hao=r(fXr,"SegformerFeatureExtractor"),fXr.forEach(t),pao=r(Q4e," (SegFormer model)"),Q4e.forEach(t),_ao=i(ne),Rh=n(ne,"LI",{});var W4e=s(Rh);woe=n(W4e,"STRONG",{});var mXr=s(woe);uao=r(mXr,"speech_to_text"),mXr.forEach(t),bao=r(W4e," \u2014 "),tB=n(W4e,"A",{href:!0});var gXr=s(tB);Fao=r(gXr,"Speech2TextFeatureExtractor"),gXr.forEach(t),vao=r(W4e," (Speech2Text model)"),W4e.forEach(t),Tao=i(ne),Bh=n(ne,"LI",{});var H4e=s(Bh);Aoe=n(H4e,"STRONG",{});var hXr=s(Aoe);Mao=r(hXr,"swin"),hXr.forEach(t),Eao=r(H4e," \u2014 "),aB=n(H4e,"A",{href:!0});var pXr=s(aB);Cao=r(pXr,"ViTFeatureExtractor"),pXr.forEach(t),wao=r(H4e," (Swin model)"),H4e.forEach(t),Aao=i(ne),Ph=n(ne,"LI",{});var U4e=s(Ph);yoe=n(U4e,"STRONG",{});var _Xr=s(yoe);yao=r(_Xr,"van"),_Xr.forEach(t),Lao=r(U4e," \u2014 "),nB=n(U4e,"A",{href:!0});var uXr=s(nB);xao=r(uXr,"ConvNextFeatureExtractor"),uXr.forEach(t),kao=r(U4e," (VAN model)"),U4e.forEach(t),Sao=i(ne),$h=n(ne,"LI",{});var J4e=s($h);Loe=n(J4e,"STRONG",{});var bXr=s(Loe);Rao=r(bXr,"vit"),bXr.forEach(t),Bao=r(J4e," \u2014 "),sB=n(J4e,"A",{href:!0});var FXr=s(sB);Pao=r(FXr,"ViTFeatureExtractor"),FXr.forEach(t),$ao=r(J4e," (ViT model)"),J4e.forEach(t),Iao=i(ne),Ih=n(ne,"LI",{});var Y4e=s(Ih);xoe=n(Y4e,"STRONG",{});var vXr=s(xoe);qao=r(vXr,"vit_mae"),vXr.forEach(t),Nao=r(Y4e," \u2014 "),lB=n(Y4e,"A",{href:!0});var TXr=s(lB);jao=r(TXr,"ViTFeatureExtractor"),TXr.forEach(t),Dao=r(Y4e," (ViTMAE model)"),Y4e.forEach(t),Gao=i(ne),qh=n(ne,"LI",{});var K4e=s(qh);koe=n(K4e,"STRONG",{});var MXr=s(koe);Oao=r(MXr,"wav2vec2"),MXr.forEach(t),Vao=r(K4e," \u2014 "),iB=n(K4e,"A",{href:!0});var EXr=s(iB);Xao=r(EXr,"Wav2Vec2FeatureExtractor"),EXr.forEach(t),zao=r(K4e," (Wav2Vec2 model)"),K4e.forEach(t),ne.forEach(t),Qao=i(Nt),m(Nh.$$.fragment,Nt),Wao=i(Nt),Soe=n(Nt,"P",{});var CXr=s(Soe);Hao=r(CXr,"Examples:"),CXr.forEach(t),Uao=i(Nt),m(r3.$$.fragment,Nt),Nt.forEach(t),Jao=i(zs),jh=n(zs,"DIV",{class:!0});var f$e=s(jh);m(t3.$$.fragment,f$e),Yao=i(f$e),Roe=n(f$e,"P",{});var wXr=s(Roe);Kao=r(wXr,"Register a new feature extractor for this class."),wXr.forEach(t),f$e.forEach(t),zs.forEach(t),nBe=i(c),Ui=n(c,"H2",{class:!0});var m$e=s(Ui);Dh=n(m$e,"A",{id:!0,class:!0,href:!0});var AXr=s(Dh);Boe=n(AXr,"SPAN",{});var yXr=s(Boe);m(a3.$$.fragment,yXr),yXr.forEach(t),AXr.forEach(t),Zao=i(m$e),Poe=n(m$e,"SPAN",{});var LXr=s(Poe);eno=r(LXr,"AutoProcessor"),LXr.forEach(t),m$e.forEach(t),sBe=i(c),Uo=n(c,"DIV",{class:!0});var Qs=s(Uo);m(n3.$$.fragment,Qs),ono=i(Qs),s3=n(Qs,"P",{});var g$e=s(s3);rno=r(g$e,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dB=n(g$e,"A",{href:!0});var xXr=s(dB);tno=r(xXr,"AutoProcessor.from_pretrained()"),xXr.forEach(t),ano=r(g$e," class method."),g$e.forEach(t),nno=i(Qs),l3=n(Qs,"P",{});var h$e=s(l3);sno=r(h$e,"This class cannot be instantiated directly using "),$oe=n(h$e,"CODE",{});var kXr=s($oe);lno=r(kXr,"__init__()"),kXr.forEach(t),ino=r(h$e," (throws an error)."),h$e.forEach(t),dno=i(Qs),qe=n(Qs,"DIV",{class:!0});var jt=s(qe);m(i3.$$.fragment,jt),cno=i(jt),Ioe=n(jt,"P",{});var SXr=s(Ioe);fno=r(SXr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),SXr.forEach(t),mno=i(jt),Ji=n(jt,"P",{});var LU=s(Ji);gno=r(LU,"The processor class to instantiate is selected based on the "),qoe=n(LU,"CODE",{});var RXr=s(qoe);hno=r(RXr,"model_type"),RXr.forEach(t),pno=r(LU,` property of the config object (either
passed as an argument or loaded from `),Noe=n(LU,"CODE",{});var BXr=s(Noe);_no=r(BXr,"pretrained_model_name_or_path"),BXr.forEach(t),uno=r(LU," if possible):"),LU.forEach(t),bno=i(jt),Se=n(jt,"UL",{});var jo=s(Se);Gh=n(jo,"LI",{});var Z4e=s(Gh);joe=n(Z4e,"STRONG",{});var PXr=s(joe);Fno=r(PXr,"clip"),PXr.forEach(t),vno=r(Z4e," \u2014 "),cB=n(Z4e,"A",{href:!0});var $Xr=s(cB);Tno=r($Xr,"CLIPProcessor"),$Xr.forEach(t),Mno=r(Z4e," (CLIP model)"),Z4e.forEach(t),Eno=i(jo),Oh=n(jo,"LI",{});var eEe=s(Oh);Doe=n(eEe,"STRONG",{});var IXr=s(Doe);Cno=r(IXr,"layoutlmv2"),IXr.forEach(t),wno=r(eEe," \u2014 "),fB=n(eEe,"A",{href:!0});var qXr=s(fB);Ano=r(qXr,"LayoutLMv2Processor"),qXr.forEach(t),yno=r(eEe," (LayoutLMv2 model)"),eEe.forEach(t),Lno=i(jo),Vh=n(jo,"LI",{});var oEe=s(Vh);Goe=n(oEe,"STRONG",{});var NXr=s(Goe);xno=r(NXr,"layoutxlm"),NXr.forEach(t),kno=r(oEe," \u2014 "),mB=n(oEe,"A",{href:!0});var jXr=s(mB);Sno=r(jXr,"LayoutXLMProcessor"),jXr.forEach(t),Rno=r(oEe," (LayoutXLM model)"),oEe.forEach(t),Bno=i(jo),Xh=n(jo,"LI",{});var rEe=s(Xh);Ooe=n(rEe,"STRONG",{});var DXr=s(Ooe);Pno=r(DXr,"speech_to_text"),DXr.forEach(t),$no=r(rEe," \u2014 "),gB=n(rEe,"A",{href:!0});var GXr=s(gB);Ino=r(GXr,"Speech2TextProcessor"),GXr.forEach(t),qno=r(rEe," (Speech2Text model)"),rEe.forEach(t),Nno=i(jo),zh=n(jo,"LI",{});var tEe=s(zh);Voe=n(tEe,"STRONG",{});var OXr=s(Voe);jno=r(OXr,"speech_to_text_2"),OXr.forEach(t),Dno=r(tEe," \u2014 "),hB=n(tEe,"A",{href:!0});var VXr=s(hB);Gno=r(VXr,"Speech2Text2Processor"),VXr.forEach(t),Ono=r(tEe," (Speech2Text2 model)"),tEe.forEach(t),Vno=i(jo),Qh=n(jo,"LI",{});var aEe=s(Qh);Xoe=n(aEe,"STRONG",{});var XXr=s(Xoe);Xno=r(XXr,"trocr"),XXr.forEach(t),zno=r(aEe," \u2014 "),pB=n(aEe,"A",{href:!0});var zXr=s(pB);Qno=r(zXr,"TrOCRProcessor"),zXr.forEach(t),Wno=r(aEe," (TrOCR model)"),aEe.forEach(t),Hno=i(jo),Wh=n(jo,"LI",{});var nEe=s(Wh);zoe=n(nEe,"STRONG",{});var QXr=s(zoe);Uno=r(QXr,"vision-text-dual-encoder"),QXr.forEach(t),Jno=r(nEe," \u2014 "),_B=n(nEe,"A",{href:!0});var WXr=s(_B);Yno=r(WXr,"VisionTextDualEncoderProcessor"),WXr.forEach(t),Kno=r(nEe," (VisionTextDualEncoder model)"),nEe.forEach(t),Zno=i(jo),Hh=n(jo,"LI",{});var sEe=s(Hh);Qoe=n(sEe,"STRONG",{});var HXr=s(Qoe);eso=r(HXr,"wav2vec2"),HXr.forEach(t),oso=r(sEe," \u2014 "),uB=n(sEe,"A",{href:!0});var UXr=s(uB);rso=r(UXr,"Wav2Vec2Processor"),UXr.forEach(t),tso=r(sEe," (Wav2Vec2 model)"),sEe.forEach(t),jo.forEach(t),aso=i(jt),m(Uh.$$.fragment,jt),nso=i(jt),Woe=n(jt,"P",{});var JXr=s(Woe);sso=r(JXr,"Examples:"),JXr.forEach(t),lso=i(jt),m(d3.$$.fragment,jt),jt.forEach(t),iso=i(Qs),Jh=n(Qs,"DIV",{class:!0});var p$e=s(Jh);m(c3.$$.fragment,p$e),dso=i(p$e),Hoe=n(p$e,"P",{});var YXr=s(Hoe);cso=r(YXr,"Register a new processor for this class."),YXr.forEach(t),p$e.forEach(t),Qs.forEach(t),lBe=i(c),Yi=n(c,"H2",{class:!0});var _$e=s(Yi);Yh=n(_$e,"A",{id:!0,class:!0,href:!0});var KXr=s(Yh);Uoe=n(KXr,"SPAN",{});var ZXr=s(Uoe);m(f3.$$.fragment,ZXr),ZXr.forEach(t),KXr.forEach(t),fso=i(_$e),Joe=n(_$e,"SPAN",{});var ezr=s(Joe);mso=r(ezr,"AutoModel"),ezr.forEach(t),_$e.forEach(t),iBe=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(m3.$$.fragment,Ws),gso=i(Ws),Ki=n(Ws,"P",{});var xU=s(Ki);hso=r(xU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bB=n(xU,"A",{href:!0});var ozr=s(bB);pso=r(ozr,"from_pretrained()"),ozr.forEach(t),_so=r(xU," class method or the "),FB=n(xU,"A",{href:!0});var rzr=s(FB);uso=r(rzr,"from_config()"),rzr.forEach(t),bso=r(xU,` class
method.`),xU.forEach(t),Fso=i(Ws),g3=n(Ws,"P",{});var u$e=s(g3);vso=r(u$e,"This class cannot be instantiated directly using "),Yoe=n(u$e,"CODE",{});var tzr=s(Yoe);Tso=r(tzr,"__init__()"),tzr.forEach(t),Mso=r(u$e," (throws an error)."),u$e.forEach(t),Eso=i(Ws),Xr=n(Ws,"DIV",{class:!0});var Hs=s(Xr);m(h3.$$.fragment,Hs),Cso=i(Hs),Koe=n(Hs,"P",{});var azr=s(Koe);wso=r(azr,"Instantiates one of the base model classes of the library from a configuration."),azr.forEach(t),Aso=i(Hs),Zi=n(Hs,"P",{});var kU=s(Zi);yso=r(kU,`Note:
Loading a model from its configuration file does `),Zoe=n(kU,"STRONG",{});var nzr=s(Zoe);Lso=r(nzr,"not"),nzr.forEach(t),xso=r(kU,` load the model weights. It only affects the
model\u2019s configuration. Use `),vB=n(kU,"A",{href:!0});var szr=s(vB);kso=r(szr,"from_pretrained()"),szr.forEach(t),Sso=r(kU," to load the model weights."),kU.forEach(t),Rso=i(Hs),ere=n(Hs,"P",{});var lzr=s(ere);Bso=r(lzr,"Examples:"),lzr.forEach(t),Pso=i(Hs),m(p3.$$.fragment,Hs),Hs.forEach(t),$so=i(Ws),Ne=n(Ws,"DIV",{class:!0});var Dt=s(Ne);m(_3.$$.fragment,Dt),Iso=i(Dt),ore=n(Dt,"P",{});var izr=s(ore);qso=r(izr,"Instantiate one of the base model classes of the library from a pretrained model."),izr.forEach(t),Nso=i(Dt),Xa=n(Dt,"P",{});var $E=s(Xa);jso=r($E,"The model class to instantiate is selected based on the "),rre=n($E,"CODE",{});var dzr=s(rre);Dso=r(dzr,"model_type"),dzr.forEach(t),Gso=r($E,` property of the config object (either
passed as an argument or loaded from `),tre=n($E,"CODE",{});var czr=s(tre);Oso=r(czr,"pretrained_model_name_or_path"),czr.forEach(t),Vso=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),are=n($E,"CODE",{});var fzr=s(are);Xso=r(fzr,"pretrained_model_name_or_path"),fzr.forEach(t),zso=r($E,":"),$E.forEach(t),Qso=i(Dt),T=n(Dt,"UL",{});var M=s(T);Kh=n(M,"LI",{});var lEe=s(Kh);nre=n(lEe,"STRONG",{});var mzr=s(nre);Wso=r(mzr,"albert"),mzr.forEach(t),Hso=r(lEe," \u2014 "),TB=n(lEe,"A",{href:!0});var gzr=s(TB);Uso=r(gzr,"AlbertModel"),gzr.forEach(t),Jso=r(lEe," (ALBERT model)"),lEe.forEach(t),Yso=i(M),Zh=n(M,"LI",{});var iEe=s(Zh);sre=n(iEe,"STRONG",{});var hzr=s(sre);Kso=r(hzr,"bart"),hzr.forEach(t),Zso=r(iEe," \u2014 "),MB=n(iEe,"A",{href:!0});var pzr=s(MB);elo=r(pzr,"BartModel"),pzr.forEach(t),olo=r(iEe," (BART model)"),iEe.forEach(t),rlo=i(M),ep=n(M,"LI",{});var dEe=s(ep);lre=n(dEe,"STRONG",{});var _zr=s(lre);tlo=r(_zr,"beit"),_zr.forEach(t),alo=r(dEe," \u2014 "),EB=n(dEe,"A",{href:!0});var uzr=s(EB);nlo=r(uzr,"BeitModel"),uzr.forEach(t),slo=r(dEe," (BEiT model)"),dEe.forEach(t),llo=i(M),op=n(M,"LI",{});var cEe=s(op);ire=n(cEe,"STRONG",{});var bzr=s(ire);ilo=r(bzr,"bert"),bzr.forEach(t),dlo=r(cEe," \u2014 "),CB=n(cEe,"A",{href:!0});var Fzr=s(CB);clo=r(Fzr,"BertModel"),Fzr.forEach(t),flo=r(cEe," (BERT model)"),cEe.forEach(t),mlo=i(M),rp=n(M,"LI",{});var fEe=s(rp);dre=n(fEe,"STRONG",{});var vzr=s(dre);glo=r(vzr,"bert-generation"),vzr.forEach(t),hlo=r(fEe," \u2014 "),wB=n(fEe,"A",{href:!0});var Tzr=s(wB);plo=r(Tzr,"BertGenerationEncoder"),Tzr.forEach(t),_lo=r(fEe," (Bert Generation model)"),fEe.forEach(t),ulo=i(M),tp=n(M,"LI",{});var mEe=s(tp);cre=n(mEe,"STRONG",{});var Mzr=s(cre);blo=r(Mzr,"big_bird"),Mzr.forEach(t),Flo=r(mEe," \u2014 "),AB=n(mEe,"A",{href:!0});var Ezr=s(AB);vlo=r(Ezr,"BigBirdModel"),Ezr.forEach(t),Tlo=r(mEe," (BigBird model)"),mEe.forEach(t),Mlo=i(M),ap=n(M,"LI",{});var gEe=s(ap);fre=n(gEe,"STRONG",{});var Czr=s(fre);Elo=r(Czr,"bigbird_pegasus"),Czr.forEach(t),Clo=r(gEe," \u2014 "),yB=n(gEe,"A",{href:!0});var wzr=s(yB);wlo=r(wzr,"BigBirdPegasusModel"),wzr.forEach(t),Alo=r(gEe," (BigBirdPegasus model)"),gEe.forEach(t),ylo=i(M),np=n(M,"LI",{});var hEe=s(np);mre=n(hEe,"STRONG",{});var Azr=s(mre);Llo=r(Azr,"blenderbot"),Azr.forEach(t),xlo=r(hEe," \u2014 "),LB=n(hEe,"A",{href:!0});var yzr=s(LB);klo=r(yzr,"BlenderbotModel"),yzr.forEach(t),Slo=r(hEe," (Blenderbot model)"),hEe.forEach(t),Rlo=i(M),sp=n(M,"LI",{});var pEe=s(sp);gre=n(pEe,"STRONG",{});var Lzr=s(gre);Blo=r(Lzr,"blenderbot-small"),Lzr.forEach(t),Plo=r(pEe," \u2014 "),xB=n(pEe,"A",{href:!0});var xzr=s(xB);$lo=r(xzr,"BlenderbotSmallModel"),xzr.forEach(t),Ilo=r(pEe," (BlenderbotSmall model)"),pEe.forEach(t),qlo=i(M),lp=n(M,"LI",{});var _Ee=s(lp);hre=n(_Ee,"STRONG",{});var kzr=s(hre);Nlo=r(kzr,"camembert"),kzr.forEach(t),jlo=r(_Ee," \u2014 "),kB=n(_Ee,"A",{href:!0});var Szr=s(kB);Dlo=r(Szr,"CamembertModel"),Szr.forEach(t),Glo=r(_Ee," (CamemBERT model)"),_Ee.forEach(t),Olo=i(M),ip=n(M,"LI",{});var uEe=s(ip);pre=n(uEe,"STRONG",{});var Rzr=s(pre);Vlo=r(Rzr,"canine"),Rzr.forEach(t),Xlo=r(uEe," \u2014 "),SB=n(uEe,"A",{href:!0});var Bzr=s(SB);zlo=r(Bzr,"CanineModel"),Bzr.forEach(t),Qlo=r(uEe," (Canine model)"),uEe.forEach(t),Wlo=i(M),dp=n(M,"LI",{});var bEe=s(dp);_re=n(bEe,"STRONG",{});var Pzr=s(_re);Hlo=r(Pzr,"clip"),Pzr.forEach(t),Ulo=r(bEe," \u2014 "),RB=n(bEe,"A",{href:!0});var $zr=s(RB);Jlo=r($zr,"CLIPModel"),$zr.forEach(t),Ylo=r(bEe," (CLIP model)"),bEe.forEach(t),Klo=i(M),cp=n(M,"LI",{});var FEe=s(cp);ure=n(FEe,"STRONG",{});var Izr=s(ure);Zlo=r(Izr,"convbert"),Izr.forEach(t),eio=r(FEe," \u2014 "),BB=n(FEe,"A",{href:!0});var qzr=s(BB);oio=r(qzr,"ConvBertModel"),qzr.forEach(t),rio=r(FEe," (ConvBERT model)"),FEe.forEach(t),tio=i(M),fp=n(M,"LI",{});var vEe=s(fp);bre=n(vEe,"STRONG",{});var Nzr=s(bre);aio=r(Nzr,"convnext"),Nzr.forEach(t),nio=r(vEe," \u2014 "),PB=n(vEe,"A",{href:!0});var jzr=s(PB);sio=r(jzr,"ConvNextModel"),jzr.forEach(t),lio=r(vEe," (ConvNext model)"),vEe.forEach(t),iio=i(M),mp=n(M,"LI",{});var TEe=s(mp);Fre=n(TEe,"STRONG",{});var Dzr=s(Fre);dio=r(Dzr,"ctrl"),Dzr.forEach(t),cio=r(TEe," \u2014 "),$B=n(TEe,"A",{href:!0});var Gzr=s($B);fio=r(Gzr,"CTRLModel"),Gzr.forEach(t),mio=r(TEe," (CTRL model)"),TEe.forEach(t),gio=i(M),gp=n(M,"LI",{});var MEe=s(gp);vre=n(MEe,"STRONG",{});var Ozr=s(vre);hio=r(Ozr,"data2vec-audio"),Ozr.forEach(t),pio=r(MEe," \u2014 "),IB=n(MEe,"A",{href:!0});var Vzr=s(IB);_io=r(Vzr,"Data2VecAudioModel"),Vzr.forEach(t),uio=r(MEe," (Data2VecAudio model)"),MEe.forEach(t),bio=i(M),hp=n(M,"LI",{});var EEe=s(hp);Tre=n(EEe,"STRONG",{});var Xzr=s(Tre);Fio=r(Xzr,"data2vec-text"),Xzr.forEach(t),vio=r(EEe," \u2014 "),qB=n(EEe,"A",{href:!0});var zzr=s(qB);Tio=r(zzr,"Data2VecTextModel"),zzr.forEach(t),Mio=r(EEe," (Data2VecText model)"),EEe.forEach(t),Eio=i(M),pp=n(M,"LI",{});var CEe=s(pp);Mre=n(CEe,"STRONG",{});var Qzr=s(Mre);Cio=r(Qzr,"deberta"),Qzr.forEach(t),wio=r(CEe," \u2014 "),NB=n(CEe,"A",{href:!0});var Wzr=s(NB);Aio=r(Wzr,"DebertaModel"),Wzr.forEach(t),yio=r(CEe," (DeBERTa model)"),CEe.forEach(t),Lio=i(M),_p=n(M,"LI",{});var wEe=s(_p);Ere=n(wEe,"STRONG",{});var Hzr=s(Ere);xio=r(Hzr,"deberta-v2"),Hzr.forEach(t),kio=r(wEe," \u2014 "),jB=n(wEe,"A",{href:!0});var Uzr=s(jB);Sio=r(Uzr,"DebertaV2Model"),Uzr.forEach(t),Rio=r(wEe," (DeBERTa-v2 model)"),wEe.forEach(t),Bio=i(M),up=n(M,"LI",{});var AEe=s(up);Cre=n(AEe,"STRONG",{});var Jzr=s(Cre);Pio=r(Jzr,"decision_transformer"),Jzr.forEach(t),$io=r(AEe," \u2014 "),DB=n(AEe,"A",{href:!0});var Yzr=s(DB);Iio=r(Yzr,"DecisionTransformerModel"),Yzr.forEach(t),qio=r(AEe," (Decision Transformer model)"),AEe.forEach(t),Nio=i(M),bp=n(M,"LI",{});var yEe=s(bp);wre=n(yEe,"STRONG",{});var Kzr=s(wre);jio=r(Kzr,"deit"),Kzr.forEach(t),Dio=r(yEe," \u2014 "),GB=n(yEe,"A",{href:!0});var Zzr=s(GB);Gio=r(Zzr,"DeiTModel"),Zzr.forEach(t),Oio=r(yEe," (DeiT model)"),yEe.forEach(t),Vio=i(M),Fp=n(M,"LI",{});var LEe=s(Fp);Are=n(LEe,"STRONG",{});var eQr=s(Are);Xio=r(eQr,"detr"),eQr.forEach(t),zio=r(LEe," \u2014 "),OB=n(LEe,"A",{href:!0});var oQr=s(OB);Qio=r(oQr,"DetrModel"),oQr.forEach(t),Wio=r(LEe," (DETR model)"),LEe.forEach(t),Hio=i(M),vp=n(M,"LI",{});var xEe=s(vp);yre=n(xEe,"STRONG",{});var rQr=s(yre);Uio=r(rQr,"distilbert"),rQr.forEach(t),Jio=r(xEe," \u2014 "),VB=n(xEe,"A",{href:!0});var tQr=s(VB);Yio=r(tQr,"DistilBertModel"),tQr.forEach(t),Kio=r(xEe," (DistilBERT model)"),xEe.forEach(t),Zio=i(M),Tp=n(M,"LI",{});var kEe=s(Tp);Lre=n(kEe,"STRONG",{});var aQr=s(Lre);edo=r(aQr,"dpr"),aQr.forEach(t),odo=r(kEe," \u2014 "),XB=n(kEe,"A",{href:!0});var nQr=s(XB);rdo=r(nQr,"DPRQuestionEncoder"),nQr.forEach(t),tdo=r(kEe," (DPR model)"),kEe.forEach(t),ado=i(M),Mp=n(M,"LI",{});var SEe=s(Mp);xre=n(SEe,"STRONG",{});var sQr=s(xre);ndo=r(sQr,"dpt"),sQr.forEach(t),sdo=r(SEe," \u2014 "),zB=n(SEe,"A",{href:!0});var lQr=s(zB);ldo=r(lQr,"DPTModel"),lQr.forEach(t),ido=r(SEe," (DPT model)"),SEe.forEach(t),ddo=i(M),Ep=n(M,"LI",{});var REe=s(Ep);kre=n(REe,"STRONG",{});var iQr=s(kre);cdo=r(iQr,"electra"),iQr.forEach(t),fdo=r(REe," \u2014 "),QB=n(REe,"A",{href:!0});var dQr=s(QB);mdo=r(dQr,"ElectraModel"),dQr.forEach(t),gdo=r(REe," (ELECTRA model)"),REe.forEach(t),hdo=i(M),Cp=n(M,"LI",{});var BEe=s(Cp);Sre=n(BEe,"STRONG",{});var cQr=s(Sre);pdo=r(cQr,"flaubert"),cQr.forEach(t),_do=r(BEe," \u2014 "),WB=n(BEe,"A",{href:!0});var fQr=s(WB);udo=r(fQr,"FlaubertModel"),fQr.forEach(t),bdo=r(BEe," (FlauBERT model)"),BEe.forEach(t),Fdo=i(M),wp=n(M,"LI",{});var PEe=s(wp);Rre=n(PEe,"STRONG",{});var mQr=s(Rre);vdo=r(mQr,"fnet"),mQr.forEach(t),Tdo=r(PEe," \u2014 "),HB=n(PEe,"A",{href:!0});var gQr=s(HB);Mdo=r(gQr,"FNetModel"),gQr.forEach(t),Edo=r(PEe," (FNet model)"),PEe.forEach(t),Cdo=i(M),Ap=n(M,"LI",{});var $Ee=s(Ap);Bre=n($Ee,"STRONG",{});var hQr=s(Bre);wdo=r(hQr,"fsmt"),hQr.forEach(t),Ado=r($Ee," \u2014 "),UB=n($Ee,"A",{href:!0});var pQr=s(UB);ydo=r(pQr,"FSMTModel"),pQr.forEach(t),Ldo=r($Ee," (FairSeq Machine-Translation model)"),$Ee.forEach(t),xdo=i(M),Ds=n(M,"LI",{});var T8=s(Ds);Pre=n(T8,"STRONG",{});var _Qr=s(Pre);kdo=r(_Qr,"funnel"),_Qr.forEach(t),Sdo=r(T8," \u2014 "),JB=n(T8,"A",{href:!0});var uQr=s(JB);Rdo=r(uQr,"FunnelModel"),uQr.forEach(t),Bdo=r(T8," or "),YB=n(T8,"A",{href:!0});var bQr=s(YB);Pdo=r(bQr,"FunnelBaseModel"),bQr.forEach(t),$do=r(T8," (Funnel Transformer model)"),T8.forEach(t),Ido=i(M),yp=n(M,"LI",{});var IEe=s(yp);$re=n(IEe,"STRONG",{});var FQr=s($re);qdo=r(FQr,"glpn"),FQr.forEach(t),Ndo=r(IEe," \u2014 "),KB=n(IEe,"A",{href:!0});var vQr=s(KB);jdo=r(vQr,"GLPNModel"),vQr.forEach(t),Ddo=r(IEe," (GLPN model)"),IEe.forEach(t),Gdo=i(M),Lp=n(M,"LI",{});var qEe=s(Lp);Ire=n(qEe,"STRONG",{});var TQr=s(Ire);Odo=r(TQr,"gpt2"),TQr.forEach(t),Vdo=r(qEe," \u2014 "),ZB=n(qEe,"A",{href:!0});var MQr=s(ZB);Xdo=r(MQr,"GPT2Model"),MQr.forEach(t),zdo=r(qEe," (OpenAI GPT-2 model)"),qEe.forEach(t),Qdo=i(M),xp=n(M,"LI",{});var NEe=s(xp);qre=n(NEe,"STRONG",{});var EQr=s(qre);Wdo=r(EQr,"gpt_neo"),EQr.forEach(t),Hdo=r(NEe," \u2014 "),eP=n(NEe,"A",{href:!0});var CQr=s(eP);Udo=r(CQr,"GPTNeoModel"),CQr.forEach(t),Jdo=r(NEe," (GPT Neo model)"),NEe.forEach(t),Ydo=i(M),kp=n(M,"LI",{});var jEe=s(kp);Nre=n(jEe,"STRONG",{});var wQr=s(Nre);Kdo=r(wQr,"gptj"),wQr.forEach(t),Zdo=r(jEe," \u2014 "),oP=n(jEe,"A",{href:!0});var AQr=s(oP);eco=r(AQr,"GPTJModel"),AQr.forEach(t),oco=r(jEe," (GPT-J model)"),jEe.forEach(t),rco=i(M),Sp=n(M,"LI",{});var DEe=s(Sp);jre=n(DEe,"STRONG",{});var yQr=s(jre);tco=r(yQr,"hubert"),yQr.forEach(t),aco=r(DEe," \u2014 "),rP=n(DEe,"A",{href:!0});var LQr=s(rP);nco=r(LQr,"HubertModel"),LQr.forEach(t),sco=r(DEe," (Hubert model)"),DEe.forEach(t),lco=i(M),Rp=n(M,"LI",{});var GEe=s(Rp);Dre=n(GEe,"STRONG",{});var xQr=s(Dre);ico=r(xQr,"ibert"),xQr.forEach(t),dco=r(GEe," \u2014 "),tP=n(GEe,"A",{href:!0});var kQr=s(tP);cco=r(kQr,"IBertModel"),kQr.forEach(t),fco=r(GEe," (I-BERT model)"),GEe.forEach(t),mco=i(M),Bp=n(M,"LI",{});var OEe=s(Bp);Gre=n(OEe,"STRONG",{});var SQr=s(Gre);gco=r(SQr,"imagegpt"),SQr.forEach(t),hco=r(OEe," \u2014 "),aP=n(OEe,"A",{href:!0});var RQr=s(aP);pco=r(RQr,"ImageGPTModel"),RQr.forEach(t),_co=r(OEe," (ImageGPT model)"),OEe.forEach(t),uco=i(M),Pp=n(M,"LI",{});var VEe=s(Pp);Ore=n(VEe,"STRONG",{});var BQr=s(Ore);bco=r(BQr,"layoutlm"),BQr.forEach(t),Fco=r(VEe," \u2014 "),nP=n(VEe,"A",{href:!0});var PQr=s(nP);vco=r(PQr,"LayoutLMModel"),PQr.forEach(t),Tco=r(VEe," (LayoutLM model)"),VEe.forEach(t),Mco=i(M),$p=n(M,"LI",{});var XEe=s($p);Vre=n(XEe,"STRONG",{});var $Qr=s(Vre);Eco=r($Qr,"layoutlmv2"),$Qr.forEach(t),Cco=r(XEe," \u2014 "),sP=n(XEe,"A",{href:!0});var IQr=s(sP);wco=r(IQr,"LayoutLMv2Model"),IQr.forEach(t),Aco=r(XEe," (LayoutLMv2 model)"),XEe.forEach(t),yco=i(M),Ip=n(M,"LI",{});var zEe=s(Ip);Xre=n(zEe,"STRONG",{});var qQr=s(Xre);Lco=r(qQr,"led"),qQr.forEach(t),xco=r(zEe," \u2014 "),lP=n(zEe,"A",{href:!0});var NQr=s(lP);kco=r(NQr,"LEDModel"),NQr.forEach(t),Sco=r(zEe," (LED model)"),zEe.forEach(t),Rco=i(M),qp=n(M,"LI",{});var QEe=s(qp);zre=n(QEe,"STRONG",{});var jQr=s(zre);Bco=r(jQr,"longformer"),jQr.forEach(t),Pco=r(QEe," \u2014 "),iP=n(QEe,"A",{href:!0});var DQr=s(iP);$co=r(DQr,"LongformerModel"),DQr.forEach(t),Ico=r(QEe," (Longformer model)"),QEe.forEach(t),qco=i(M),Np=n(M,"LI",{});var WEe=s(Np);Qre=n(WEe,"STRONG",{});var GQr=s(Qre);Nco=r(GQr,"longt5"),GQr.forEach(t),jco=r(WEe," \u2014 "),dP=n(WEe,"A",{href:!0});var OQr=s(dP);Dco=r(OQr,"LongT5Model"),OQr.forEach(t),Gco=r(WEe," (LongT5 model)"),WEe.forEach(t),Oco=i(M),jp=n(M,"LI",{});var HEe=s(jp);Wre=n(HEe,"STRONG",{});var VQr=s(Wre);Vco=r(VQr,"luke"),VQr.forEach(t),Xco=r(HEe," \u2014 "),cP=n(HEe,"A",{href:!0});var XQr=s(cP);zco=r(XQr,"LukeModel"),XQr.forEach(t),Qco=r(HEe," (LUKE model)"),HEe.forEach(t),Wco=i(M),Dp=n(M,"LI",{});var UEe=s(Dp);Hre=n(UEe,"STRONG",{});var zQr=s(Hre);Hco=r(zQr,"lxmert"),zQr.forEach(t),Uco=r(UEe," \u2014 "),fP=n(UEe,"A",{href:!0});var QQr=s(fP);Jco=r(QQr,"LxmertModel"),QQr.forEach(t),Yco=r(UEe," (LXMERT model)"),UEe.forEach(t),Kco=i(M),Gp=n(M,"LI",{});var JEe=s(Gp);Ure=n(JEe,"STRONG",{});var WQr=s(Ure);Zco=r(WQr,"m2m_100"),WQr.forEach(t),efo=r(JEe," \u2014 "),mP=n(JEe,"A",{href:!0});var HQr=s(mP);ofo=r(HQr,"M2M100Model"),HQr.forEach(t),rfo=r(JEe," (M2M100 model)"),JEe.forEach(t),tfo=i(M),Op=n(M,"LI",{});var YEe=s(Op);Jre=n(YEe,"STRONG",{});var UQr=s(Jre);afo=r(UQr,"marian"),UQr.forEach(t),nfo=r(YEe," \u2014 "),gP=n(YEe,"A",{href:!0});var JQr=s(gP);sfo=r(JQr,"MarianModel"),JQr.forEach(t),lfo=r(YEe," (Marian model)"),YEe.forEach(t),ifo=i(M),Vp=n(M,"LI",{});var KEe=s(Vp);Yre=n(KEe,"STRONG",{});var YQr=s(Yre);dfo=r(YQr,"maskformer"),YQr.forEach(t),cfo=r(KEe," \u2014 "),hP=n(KEe,"A",{href:!0});var KQr=s(hP);ffo=r(KQr,"MaskFormerModel"),KQr.forEach(t),mfo=r(KEe," (MaskFormer model)"),KEe.forEach(t),gfo=i(M),Xp=n(M,"LI",{});var ZEe=s(Xp);Kre=n(ZEe,"STRONG",{});var ZQr=s(Kre);hfo=r(ZQr,"mbart"),ZQr.forEach(t),pfo=r(ZEe," \u2014 "),pP=n(ZEe,"A",{href:!0});var eWr=s(pP);_fo=r(eWr,"MBartModel"),eWr.forEach(t),ufo=r(ZEe," (mBART model)"),ZEe.forEach(t),bfo=i(M),zp=n(M,"LI",{});var e5e=s(zp);Zre=n(e5e,"STRONG",{});var oWr=s(Zre);Ffo=r(oWr,"megatron-bert"),oWr.forEach(t),vfo=r(e5e," \u2014 "),_P=n(e5e,"A",{href:!0});var rWr=s(_P);Tfo=r(rWr,"MegatronBertModel"),rWr.forEach(t),Mfo=r(e5e," (MegatronBert model)"),e5e.forEach(t),Efo=i(M),Qp=n(M,"LI",{});var o5e=s(Qp);ete=n(o5e,"STRONG",{});var tWr=s(ete);Cfo=r(tWr,"mobilebert"),tWr.forEach(t),wfo=r(o5e," \u2014 "),uP=n(o5e,"A",{href:!0});var aWr=s(uP);Afo=r(aWr,"MobileBertModel"),aWr.forEach(t),yfo=r(o5e," (MobileBERT model)"),o5e.forEach(t),Lfo=i(M),Wp=n(M,"LI",{});var r5e=s(Wp);ote=n(r5e,"STRONG",{});var nWr=s(ote);xfo=r(nWr,"mpnet"),nWr.forEach(t),kfo=r(r5e," \u2014 "),bP=n(r5e,"A",{href:!0});var sWr=s(bP);Sfo=r(sWr,"MPNetModel"),sWr.forEach(t),Rfo=r(r5e," (MPNet model)"),r5e.forEach(t),Bfo=i(M),Hp=n(M,"LI",{});var t5e=s(Hp);rte=n(t5e,"STRONG",{});var lWr=s(rte);Pfo=r(lWr,"mt5"),lWr.forEach(t),$fo=r(t5e," \u2014 "),FP=n(t5e,"A",{href:!0});var iWr=s(FP);Ifo=r(iWr,"MT5Model"),iWr.forEach(t),qfo=r(t5e," (mT5 model)"),t5e.forEach(t),Nfo=i(M),Up=n(M,"LI",{});var a5e=s(Up);tte=n(a5e,"STRONG",{});var dWr=s(tte);jfo=r(dWr,"nystromformer"),dWr.forEach(t),Dfo=r(a5e," \u2014 "),vP=n(a5e,"A",{href:!0});var cWr=s(vP);Gfo=r(cWr,"NystromformerModel"),cWr.forEach(t),Ofo=r(a5e," (Nystromformer model)"),a5e.forEach(t),Vfo=i(M),Jp=n(M,"LI",{});var n5e=s(Jp);ate=n(n5e,"STRONG",{});var fWr=s(ate);Xfo=r(fWr,"openai-gpt"),fWr.forEach(t),zfo=r(n5e," \u2014 "),TP=n(n5e,"A",{href:!0});var mWr=s(TP);Qfo=r(mWr,"OpenAIGPTModel"),mWr.forEach(t),Wfo=r(n5e," (OpenAI GPT model)"),n5e.forEach(t),Hfo=i(M),Yp=n(M,"LI",{});var s5e=s(Yp);nte=n(s5e,"STRONG",{});var gWr=s(nte);Ufo=r(gWr,"pegasus"),gWr.forEach(t),Jfo=r(s5e," \u2014 "),MP=n(s5e,"A",{href:!0});var hWr=s(MP);Yfo=r(hWr,"PegasusModel"),hWr.forEach(t),Kfo=r(s5e," (Pegasus model)"),s5e.forEach(t),Zfo=i(M),Kp=n(M,"LI",{});var l5e=s(Kp);ste=n(l5e,"STRONG",{});var pWr=s(ste);emo=r(pWr,"perceiver"),pWr.forEach(t),omo=r(l5e," \u2014 "),EP=n(l5e,"A",{href:!0});var _Wr=s(EP);rmo=r(_Wr,"PerceiverModel"),_Wr.forEach(t),tmo=r(l5e," (Perceiver model)"),l5e.forEach(t),amo=i(M),Zp=n(M,"LI",{});var i5e=s(Zp);lte=n(i5e,"STRONG",{});var uWr=s(lte);nmo=r(uWr,"plbart"),uWr.forEach(t),smo=r(i5e," \u2014 "),CP=n(i5e,"A",{href:!0});var bWr=s(CP);lmo=r(bWr,"PLBartModel"),bWr.forEach(t),imo=r(i5e," (PLBart model)"),i5e.forEach(t),dmo=i(M),e_=n(M,"LI",{});var d5e=s(e_);ite=n(d5e,"STRONG",{});var FWr=s(ite);cmo=r(FWr,"poolformer"),FWr.forEach(t),fmo=r(d5e," \u2014 "),wP=n(d5e,"A",{href:!0});var vWr=s(wP);mmo=r(vWr,"PoolFormerModel"),vWr.forEach(t),gmo=r(d5e," (PoolFormer model)"),d5e.forEach(t),hmo=i(M),o_=n(M,"LI",{});var c5e=s(o_);dte=n(c5e,"STRONG",{});var TWr=s(dte);pmo=r(TWr,"prophetnet"),TWr.forEach(t),_mo=r(c5e," \u2014 "),AP=n(c5e,"A",{href:!0});var MWr=s(AP);umo=r(MWr,"ProphetNetModel"),MWr.forEach(t),bmo=r(c5e," (ProphetNet model)"),c5e.forEach(t),Fmo=i(M),r_=n(M,"LI",{});var f5e=s(r_);cte=n(f5e,"STRONG",{});var EWr=s(cte);vmo=r(EWr,"qdqbert"),EWr.forEach(t),Tmo=r(f5e," \u2014 "),yP=n(f5e,"A",{href:!0});var CWr=s(yP);Mmo=r(CWr,"QDQBertModel"),CWr.forEach(t),Emo=r(f5e," (QDQBert model)"),f5e.forEach(t),Cmo=i(M),t_=n(M,"LI",{});var m5e=s(t_);fte=n(m5e,"STRONG",{});var wWr=s(fte);wmo=r(wWr,"reformer"),wWr.forEach(t),Amo=r(m5e," \u2014 "),LP=n(m5e,"A",{href:!0});var AWr=s(LP);ymo=r(AWr,"ReformerModel"),AWr.forEach(t),Lmo=r(m5e," (Reformer model)"),m5e.forEach(t),xmo=i(M),a_=n(M,"LI",{});var g5e=s(a_);mte=n(g5e,"STRONG",{});var yWr=s(mte);kmo=r(yWr,"regnet"),yWr.forEach(t),Smo=r(g5e," \u2014 "),xP=n(g5e,"A",{href:!0});var LWr=s(xP);Rmo=r(LWr,"RegNetModel"),LWr.forEach(t),Bmo=r(g5e," (RegNet model)"),g5e.forEach(t),Pmo=i(M),n_=n(M,"LI",{});var h5e=s(n_);gte=n(h5e,"STRONG",{});var xWr=s(gte);$mo=r(xWr,"rembert"),xWr.forEach(t),Imo=r(h5e," \u2014 "),kP=n(h5e,"A",{href:!0});var kWr=s(kP);qmo=r(kWr,"RemBertModel"),kWr.forEach(t),Nmo=r(h5e," (RemBERT model)"),h5e.forEach(t),jmo=i(M),s_=n(M,"LI",{});var p5e=s(s_);hte=n(p5e,"STRONG",{});var SWr=s(hte);Dmo=r(SWr,"resnet"),SWr.forEach(t),Gmo=r(p5e," \u2014 "),SP=n(p5e,"A",{href:!0});var RWr=s(SP);Omo=r(RWr,"ResNetModel"),RWr.forEach(t),Vmo=r(p5e," (ResNet model)"),p5e.forEach(t),Xmo=i(M),l_=n(M,"LI",{});var _5e=s(l_);pte=n(_5e,"STRONG",{});var BWr=s(pte);zmo=r(BWr,"retribert"),BWr.forEach(t),Qmo=r(_5e," \u2014 "),RP=n(_5e,"A",{href:!0});var PWr=s(RP);Wmo=r(PWr,"RetriBertModel"),PWr.forEach(t),Hmo=r(_5e," (RetriBERT model)"),_5e.forEach(t),Umo=i(M),i_=n(M,"LI",{});var u5e=s(i_);_te=n(u5e,"STRONG",{});var $Wr=s(_te);Jmo=r($Wr,"roberta"),$Wr.forEach(t),Ymo=r(u5e," \u2014 "),BP=n(u5e,"A",{href:!0});var IWr=s(BP);Kmo=r(IWr,"RobertaModel"),IWr.forEach(t),Zmo=r(u5e," (RoBERTa model)"),u5e.forEach(t),ego=i(M),d_=n(M,"LI",{});var b5e=s(d_);ute=n(b5e,"STRONG",{});var qWr=s(ute);ogo=r(qWr,"roformer"),qWr.forEach(t),rgo=r(b5e," \u2014 "),PP=n(b5e,"A",{href:!0});var NWr=s(PP);tgo=r(NWr,"RoFormerModel"),NWr.forEach(t),ago=r(b5e," (RoFormer model)"),b5e.forEach(t),ngo=i(M),c_=n(M,"LI",{});var F5e=s(c_);bte=n(F5e,"STRONG",{});var jWr=s(bte);sgo=r(jWr,"segformer"),jWr.forEach(t),lgo=r(F5e," \u2014 "),$P=n(F5e,"A",{href:!0});var DWr=s($P);igo=r(DWr,"SegformerModel"),DWr.forEach(t),dgo=r(F5e," (SegFormer model)"),F5e.forEach(t),cgo=i(M),f_=n(M,"LI",{});var v5e=s(f_);Fte=n(v5e,"STRONG",{});var GWr=s(Fte);fgo=r(GWr,"sew"),GWr.forEach(t),mgo=r(v5e," \u2014 "),IP=n(v5e,"A",{href:!0});var OWr=s(IP);ggo=r(OWr,"SEWModel"),OWr.forEach(t),hgo=r(v5e," (SEW model)"),v5e.forEach(t),pgo=i(M),m_=n(M,"LI",{});var T5e=s(m_);vte=n(T5e,"STRONG",{});var VWr=s(vte);_go=r(VWr,"sew-d"),VWr.forEach(t),ugo=r(T5e," \u2014 "),qP=n(T5e,"A",{href:!0});var XWr=s(qP);bgo=r(XWr,"SEWDModel"),XWr.forEach(t),Fgo=r(T5e," (SEW-D model)"),T5e.forEach(t),vgo=i(M),g_=n(M,"LI",{});var M5e=s(g_);Tte=n(M5e,"STRONG",{});var zWr=s(Tte);Tgo=r(zWr,"speech_to_text"),zWr.forEach(t),Mgo=r(M5e," \u2014 "),NP=n(M5e,"A",{href:!0});var QWr=s(NP);Ego=r(QWr,"Speech2TextModel"),QWr.forEach(t),Cgo=r(M5e," (Speech2Text model)"),M5e.forEach(t),wgo=i(M),h_=n(M,"LI",{});var E5e=s(h_);Mte=n(E5e,"STRONG",{});var WWr=s(Mte);Ago=r(WWr,"splinter"),WWr.forEach(t),ygo=r(E5e," \u2014 "),jP=n(E5e,"A",{href:!0});var HWr=s(jP);Lgo=r(HWr,"SplinterModel"),HWr.forEach(t),xgo=r(E5e," (Splinter model)"),E5e.forEach(t),kgo=i(M),p_=n(M,"LI",{});var C5e=s(p_);Ete=n(C5e,"STRONG",{});var UWr=s(Ete);Sgo=r(UWr,"squeezebert"),UWr.forEach(t),Rgo=r(C5e," \u2014 "),DP=n(C5e,"A",{href:!0});var JWr=s(DP);Bgo=r(JWr,"SqueezeBertModel"),JWr.forEach(t),Pgo=r(C5e," (SqueezeBERT model)"),C5e.forEach(t),$go=i(M),__=n(M,"LI",{});var w5e=s(__);Cte=n(w5e,"STRONG",{});var YWr=s(Cte);Igo=r(YWr,"swin"),YWr.forEach(t),qgo=r(w5e," \u2014 "),GP=n(w5e,"A",{href:!0});var KWr=s(GP);Ngo=r(KWr,"SwinModel"),KWr.forEach(t),jgo=r(w5e," (Swin model)"),w5e.forEach(t),Dgo=i(M),u_=n(M,"LI",{});var A5e=s(u_);wte=n(A5e,"STRONG",{});var ZWr=s(wte);Ggo=r(ZWr,"t5"),ZWr.forEach(t),Ogo=r(A5e," \u2014 "),OP=n(A5e,"A",{href:!0});var eHr=s(OP);Vgo=r(eHr,"T5Model"),eHr.forEach(t),Xgo=r(A5e," (T5 model)"),A5e.forEach(t),zgo=i(M),b_=n(M,"LI",{});var y5e=s(b_);Ate=n(y5e,"STRONG",{});var oHr=s(Ate);Qgo=r(oHr,"tapas"),oHr.forEach(t),Wgo=r(y5e," \u2014 "),VP=n(y5e,"A",{href:!0});var rHr=s(VP);Hgo=r(rHr,"TapasModel"),rHr.forEach(t),Ugo=r(y5e," (TAPAS model)"),y5e.forEach(t),Jgo=i(M),F_=n(M,"LI",{});var L5e=s(F_);yte=n(L5e,"STRONG",{});var tHr=s(yte);Ygo=r(tHr,"transfo-xl"),tHr.forEach(t),Kgo=r(L5e," \u2014 "),XP=n(L5e,"A",{href:!0});var aHr=s(XP);Zgo=r(aHr,"TransfoXLModel"),aHr.forEach(t),eho=r(L5e," (Transformer-XL model)"),L5e.forEach(t),oho=i(M),v_=n(M,"LI",{});var x5e=s(v_);Lte=n(x5e,"STRONG",{});var nHr=s(Lte);rho=r(nHr,"unispeech"),nHr.forEach(t),tho=r(x5e," \u2014 "),zP=n(x5e,"A",{href:!0});var sHr=s(zP);aho=r(sHr,"UniSpeechModel"),sHr.forEach(t),nho=r(x5e," (UniSpeech model)"),x5e.forEach(t),sho=i(M),T_=n(M,"LI",{});var k5e=s(T_);xte=n(k5e,"STRONG",{});var lHr=s(xte);lho=r(lHr,"unispeech-sat"),lHr.forEach(t),iho=r(k5e," \u2014 "),QP=n(k5e,"A",{href:!0});var iHr=s(QP);dho=r(iHr,"UniSpeechSatModel"),iHr.forEach(t),cho=r(k5e," (UniSpeechSat model)"),k5e.forEach(t),fho=i(M),M_=n(M,"LI",{});var S5e=s(M_);kte=n(S5e,"STRONG",{});var dHr=s(kte);mho=r(dHr,"van"),dHr.forEach(t),gho=r(S5e," \u2014 "),WP=n(S5e,"A",{href:!0});var cHr=s(WP);hho=r(cHr,"VanModel"),cHr.forEach(t),pho=r(S5e," (VAN model)"),S5e.forEach(t),_ho=i(M),E_=n(M,"LI",{});var R5e=s(E_);Ste=n(R5e,"STRONG",{});var fHr=s(Ste);uho=r(fHr,"vilt"),fHr.forEach(t),bho=r(R5e," \u2014 "),HP=n(R5e,"A",{href:!0});var mHr=s(HP);Fho=r(mHr,"ViltModel"),mHr.forEach(t),vho=r(R5e," (ViLT model)"),R5e.forEach(t),Tho=i(M),C_=n(M,"LI",{});var B5e=s(C_);Rte=n(B5e,"STRONG",{});var gHr=s(Rte);Mho=r(gHr,"vision-text-dual-encoder"),gHr.forEach(t),Eho=r(B5e," \u2014 "),UP=n(B5e,"A",{href:!0});var hHr=s(UP);Cho=r(hHr,"VisionTextDualEncoderModel"),hHr.forEach(t),who=r(B5e," (VisionTextDualEncoder model)"),B5e.forEach(t),Aho=i(M),w_=n(M,"LI",{});var P5e=s(w_);Bte=n(P5e,"STRONG",{});var pHr=s(Bte);yho=r(pHr,"visual_bert"),pHr.forEach(t),Lho=r(P5e," \u2014 "),JP=n(P5e,"A",{href:!0});var _Hr=s(JP);xho=r(_Hr,"VisualBertModel"),_Hr.forEach(t),kho=r(P5e," (VisualBert model)"),P5e.forEach(t),Sho=i(M),A_=n(M,"LI",{});var $5e=s(A_);Pte=n($5e,"STRONG",{});var uHr=s(Pte);Rho=r(uHr,"vit"),uHr.forEach(t),Bho=r($5e," \u2014 "),YP=n($5e,"A",{href:!0});var bHr=s(YP);Pho=r(bHr,"ViTModel"),bHr.forEach(t),$ho=r($5e," (ViT model)"),$5e.forEach(t),Iho=i(M),y_=n(M,"LI",{});var I5e=s(y_);$te=n(I5e,"STRONG",{});var FHr=s($te);qho=r(FHr,"vit_mae"),FHr.forEach(t),Nho=r(I5e," \u2014 "),KP=n(I5e,"A",{href:!0});var vHr=s(KP);jho=r(vHr,"ViTMAEModel"),vHr.forEach(t),Dho=r(I5e," (ViTMAE model)"),I5e.forEach(t),Gho=i(M),L_=n(M,"LI",{});var q5e=s(L_);Ite=n(q5e,"STRONG",{});var THr=s(Ite);Oho=r(THr,"wav2vec2"),THr.forEach(t),Vho=r(q5e," \u2014 "),ZP=n(q5e,"A",{href:!0});var MHr=s(ZP);Xho=r(MHr,"Wav2Vec2Model"),MHr.forEach(t),zho=r(q5e," (Wav2Vec2 model)"),q5e.forEach(t),Qho=i(M),x_=n(M,"LI",{});var N5e=s(x_);qte=n(N5e,"STRONG",{});var EHr=s(qte);Who=r(EHr,"wavlm"),EHr.forEach(t),Hho=r(N5e," \u2014 "),e$=n(N5e,"A",{href:!0});var CHr=s(e$);Uho=r(CHr,"WavLMModel"),CHr.forEach(t),Jho=r(N5e," (WavLM model)"),N5e.forEach(t),Yho=i(M),k_=n(M,"LI",{});var j5e=s(k_);Nte=n(j5e,"STRONG",{});var wHr=s(Nte);Kho=r(wHr,"xglm"),wHr.forEach(t),Zho=r(j5e," \u2014 "),o$=n(j5e,"A",{href:!0});var AHr=s(o$);epo=r(AHr,"XGLMModel"),AHr.forEach(t),opo=r(j5e," (XGLM model)"),j5e.forEach(t),rpo=i(M),S_=n(M,"LI",{});var D5e=s(S_);jte=n(D5e,"STRONG",{});var yHr=s(jte);tpo=r(yHr,"xlm"),yHr.forEach(t),apo=r(D5e," \u2014 "),r$=n(D5e,"A",{href:!0});var LHr=s(r$);npo=r(LHr,"XLMModel"),LHr.forEach(t),spo=r(D5e," (XLM model)"),D5e.forEach(t),lpo=i(M),R_=n(M,"LI",{});var G5e=s(R_);Dte=n(G5e,"STRONG",{});var xHr=s(Dte);ipo=r(xHr,"xlm-prophetnet"),xHr.forEach(t),dpo=r(G5e," \u2014 "),t$=n(G5e,"A",{href:!0});var kHr=s(t$);cpo=r(kHr,"XLMProphetNetModel"),kHr.forEach(t),fpo=r(G5e," (XLMProphetNet model)"),G5e.forEach(t),mpo=i(M),B_=n(M,"LI",{});var O5e=s(B_);Gte=n(O5e,"STRONG",{});var SHr=s(Gte);gpo=r(SHr,"xlm-roberta"),SHr.forEach(t),hpo=r(O5e," \u2014 "),a$=n(O5e,"A",{href:!0});var RHr=s(a$);ppo=r(RHr,"XLMRobertaModel"),RHr.forEach(t),_po=r(O5e," (XLM-RoBERTa model)"),O5e.forEach(t),upo=i(M),P_=n(M,"LI",{});var V5e=s(P_);Ote=n(V5e,"STRONG",{});var BHr=s(Ote);bpo=r(BHr,"xlm-roberta-xl"),BHr.forEach(t),Fpo=r(V5e," \u2014 "),n$=n(V5e,"A",{href:!0});var PHr=s(n$);vpo=r(PHr,"XLMRobertaXLModel"),PHr.forEach(t),Tpo=r(V5e," (XLM-RoBERTa-XL model)"),V5e.forEach(t),Mpo=i(M),$_=n(M,"LI",{});var X5e=s($_);Vte=n(X5e,"STRONG",{});var $Hr=s(Vte);Epo=r($Hr,"xlnet"),$Hr.forEach(t),Cpo=r(X5e," \u2014 "),s$=n(X5e,"A",{href:!0});var IHr=s(s$);wpo=r(IHr,"XLNetModel"),IHr.forEach(t),Apo=r(X5e," (XLNet model)"),X5e.forEach(t),ypo=i(M),I_=n(M,"LI",{});var z5e=s(I_);Xte=n(z5e,"STRONG",{});var qHr=s(Xte);Lpo=r(qHr,"yoso"),qHr.forEach(t),xpo=r(z5e," \u2014 "),l$=n(z5e,"A",{href:!0});var NHr=s(l$);kpo=r(NHr,"YosoModel"),NHr.forEach(t),Spo=r(z5e," (YOSO model)"),z5e.forEach(t),M.forEach(t),Rpo=i(Dt),q_=n(Dt,"P",{});var Q5e=s(q_);Bpo=r(Q5e,"The model is set in evaluation mode by default using "),zte=n(Q5e,"CODE",{});var jHr=s(zte);Ppo=r(jHr,"model.eval()"),jHr.forEach(t),$po=r(Q5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qte=n(Q5e,"CODE",{});var DHr=s(Qte);Ipo=r(DHr,"model.train()"),DHr.forEach(t),Q5e.forEach(t),qpo=i(Dt),Wte=n(Dt,"P",{});var GHr=s(Wte);Npo=r(GHr,"Examples:"),GHr.forEach(t),jpo=i(Dt),m(u3.$$.fragment,Dt),Dt.forEach(t),Ws.forEach(t),dBe=i(c),ed=n(c,"H2",{class:!0});var b$e=s(ed);N_=n(b$e,"A",{id:!0,class:!0,href:!0});var OHr=s(N_);Hte=n(OHr,"SPAN",{});var VHr=s(Hte);m(b3.$$.fragment,VHr),VHr.forEach(t),OHr.forEach(t),Dpo=i(b$e),Ute=n(b$e,"SPAN",{});var XHr=s(Ute);Gpo=r(XHr,"AutoModelForPreTraining"),XHr.forEach(t),b$e.forEach(t),cBe=i(c),Yo=n(c,"DIV",{class:!0});var Us=s(Yo);m(F3.$$.fragment,Us),Opo=i(Us),od=n(Us,"P",{});var SU=s(od);Vpo=r(SU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),i$=n(SU,"A",{href:!0});var zHr=s(i$);Xpo=r(zHr,"from_pretrained()"),zHr.forEach(t),zpo=r(SU," class method or the "),d$=n(SU,"A",{href:!0});var QHr=s(d$);Qpo=r(QHr,"from_config()"),QHr.forEach(t),Wpo=r(SU,` class
method.`),SU.forEach(t),Hpo=i(Us),v3=n(Us,"P",{});var F$e=s(v3);Upo=r(F$e,"This class cannot be instantiated directly using "),Jte=n(F$e,"CODE",{});var WHr=s(Jte);Jpo=r(WHr,"__init__()"),WHr.forEach(t),Ypo=r(F$e," (throws an error)."),F$e.forEach(t),Kpo=i(Us),zr=n(Us,"DIV",{class:!0});var Js=s(zr);m(T3.$$.fragment,Js),Zpo=i(Js),Yte=n(Js,"P",{});var HHr=s(Yte);e_o=r(HHr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),HHr.forEach(t),o_o=i(Js),rd=n(Js,"P",{});var RU=s(rd);r_o=r(RU,`Note:
Loading a model from its configuration file does `),Kte=n(RU,"STRONG",{});var UHr=s(Kte);t_o=r(UHr,"not"),UHr.forEach(t),a_o=r(RU,` load the model weights. It only affects the
model\u2019s configuration. Use `),c$=n(RU,"A",{href:!0});var JHr=s(c$);n_o=r(JHr,"from_pretrained()"),JHr.forEach(t),s_o=r(RU," to load the model weights."),RU.forEach(t),l_o=i(Js),Zte=n(Js,"P",{});var YHr=s(Zte);i_o=r(YHr,"Examples:"),YHr.forEach(t),d_o=i(Js),m(M3.$$.fragment,Js),Js.forEach(t),c_o=i(Us),je=n(Us,"DIV",{class:!0});var Gt=s(je);m(E3.$$.fragment,Gt),f_o=i(Gt),eae=n(Gt,"P",{});var KHr=s(eae);m_o=r(KHr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),KHr.forEach(t),g_o=i(Gt),za=n(Gt,"P",{});var IE=s(za);h_o=r(IE,"The model class to instantiate is selected based on the "),oae=n(IE,"CODE",{});var ZHr=s(oae);p_o=r(ZHr,"model_type"),ZHr.forEach(t),__o=r(IE,` property of the config object (either
passed as an argument or loaded from `),rae=n(IE,"CODE",{});var eUr=s(rae);u_o=r(eUr,"pretrained_model_name_or_path"),eUr.forEach(t),b_o=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tae=n(IE,"CODE",{});var oUr=s(tae);F_o=r(oUr,"pretrained_model_name_or_path"),oUr.forEach(t),v_o=r(IE,":"),IE.forEach(t),T_o=i(Gt),S=n(Gt,"UL",{});var B=s(S);j_=n(B,"LI",{});var W5e=s(j_);aae=n(W5e,"STRONG",{});var rUr=s(aae);M_o=r(rUr,"albert"),rUr.forEach(t),E_o=r(W5e," \u2014 "),f$=n(W5e,"A",{href:!0});var tUr=s(f$);C_o=r(tUr,"AlbertForPreTraining"),tUr.forEach(t),w_o=r(W5e," (ALBERT model)"),W5e.forEach(t),A_o=i(B),D_=n(B,"LI",{});var H5e=s(D_);nae=n(H5e,"STRONG",{});var aUr=s(nae);y_o=r(aUr,"bart"),aUr.forEach(t),L_o=r(H5e," \u2014 "),m$=n(H5e,"A",{href:!0});var nUr=s(m$);x_o=r(nUr,"BartForConditionalGeneration"),nUr.forEach(t),k_o=r(H5e," (BART model)"),H5e.forEach(t),S_o=i(B),G_=n(B,"LI",{});var U5e=s(G_);sae=n(U5e,"STRONG",{});var sUr=s(sae);R_o=r(sUr,"bert"),sUr.forEach(t),B_o=r(U5e," \u2014 "),g$=n(U5e,"A",{href:!0});var lUr=s(g$);P_o=r(lUr,"BertForPreTraining"),lUr.forEach(t),$_o=r(U5e," (BERT model)"),U5e.forEach(t),I_o=i(B),O_=n(B,"LI",{});var J5e=s(O_);lae=n(J5e,"STRONG",{});var iUr=s(lae);q_o=r(iUr,"big_bird"),iUr.forEach(t),N_o=r(J5e," \u2014 "),h$=n(J5e,"A",{href:!0});var dUr=s(h$);j_o=r(dUr,"BigBirdForPreTraining"),dUr.forEach(t),D_o=r(J5e," (BigBird model)"),J5e.forEach(t),G_o=i(B),V_=n(B,"LI",{});var Y5e=s(V_);iae=n(Y5e,"STRONG",{});var cUr=s(iae);O_o=r(cUr,"camembert"),cUr.forEach(t),V_o=r(Y5e," \u2014 "),p$=n(Y5e,"A",{href:!0});var fUr=s(p$);X_o=r(fUr,"CamembertForMaskedLM"),fUr.forEach(t),z_o=r(Y5e," (CamemBERT model)"),Y5e.forEach(t),Q_o=i(B),X_=n(B,"LI",{});var K5e=s(X_);dae=n(K5e,"STRONG",{});var mUr=s(dae);W_o=r(mUr,"ctrl"),mUr.forEach(t),H_o=r(K5e," \u2014 "),_$=n(K5e,"A",{href:!0});var gUr=s(_$);U_o=r(gUr,"CTRLLMHeadModel"),gUr.forEach(t),J_o=r(K5e," (CTRL model)"),K5e.forEach(t),Y_o=i(B),z_=n(B,"LI",{});var Z5e=s(z_);cae=n(Z5e,"STRONG",{});var hUr=s(cae);K_o=r(hUr,"data2vec-text"),hUr.forEach(t),Z_o=r(Z5e," \u2014 "),u$=n(Z5e,"A",{href:!0});var pUr=s(u$);euo=r(pUr,"Data2VecTextForMaskedLM"),pUr.forEach(t),ouo=r(Z5e," (Data2VecText model)"),Z5e.forEach(t),ruo=i(B),Q_=n(B,"LI",{});var e3e=s(Q_);fae=n(e3e,"STRONG",{});var _Ur=s(fae);tuo=r(_Ur,"deberta"),_Ur.forEach(t),auo=r(e3e," \u2014 "),b$=n(e3e,"A",{href:!0});var uUr=s(b$);nuo=r(uUr,"DebertaForMaskedLM"),uUr.forEach(t),suo=r(e3e," (DeBERTa model)"),e3e.forEach(t),luo=i(B),W_=n(B,"LI",{});var o3e=s(W_);mae=n(o3e,"STRONG",{});var bUr=s(mae);iuo=r(bUr,"deberta-v2"),bUr.forEach(t),duo=r(o3e," \u2014 "),F$=n(o3e,"A",{href:!0});var FUr=s(F$);cuo=r(FUr,"DebertaV2ForMaskedLM"),FUr.forEach(t),fuo=r(o3e," (DeBERTa-v2 model)"),o3e.forEach(t),muo=i(B),H_=n(B,"LI",{});var r3e=s(H_);gae=n(r3e,"STRONG",{});var vUr=s(gae);guo=r(vUr,"distilbert"),vUr.forEach(t),huo=r(r3e," \u2014 "),v$=n(r3e,"A",{href:!0});var TUr=s(v$);puo=r(TUr,"DistilBertForMaskedLM"),TUr.forEach(t),_uo=r(r3e," (DistilBERT model)"),r3e.forEach(t),uuo=i(B),U_=n(B,"LI",{});var t3e=s(U_);hae=n(t3e,"STRONG",{});var MUr=s(hae);buo=r(MUr,"electra"),MUr.forEach(t),Fuo=r(t3e," \u2014 "),T$=n(t3e,"A",{href:!0});var EUr=s(T$);vuo=r(EUr,"ElectraForPreTraining"),EUr.forEach(t),Tuo=r(t3e," (ELECTRA model)"),t3e.forEach(t),Muo=i(B),J_=n(B,"LI",{});var a3e=s(J_);pae=n(a3e,"STRONG",{});var CUr=s(pae);Euo=r(CUr,"flaubert"),CUr.forEach(t),Cuo=r(a3e," \u2014 "),M$=n(a3e,"A",{href:!0});var wUr=s(M$);wuo=r(wUr,"FlaubertWithLMHeadModel"),wUr.forEach(t),Auo=r(a3e," (FlauBERT model)"),a3e.forEach(t),yuo=i(B),Y_=n(B,"LI",{});var n3e=s(Y_);_ae=n(n3e,"STRONG",{});var AUr=s(_ae);Luo=r(AUr,"fnet"),AUr.forEach(t),xuo=r(n3e," \u2014 "),E$=n(n3e,"A",{href:!0});var yUr=s(E$);kuo=r(yUr,"FNetForPreTraining"),yUr.forEach(t),Suo=r(n3e," (FNet model)"),n3e.forEach(t),Ruo=i(B),K_=n(B,"LI",{});var s3e=s(K_);uae=n(s3e,"STRONG",{});var LUr=s(uae);Buo=r(LUr,"fsmt"),LUr.forEach(t),Puo=r(s3e," \u2014 "),C$=n(s3e,"A",{href:!0});var xUr=s(C$);$uo=r(xUr,"FSMTForConditionalGeneration"),xUr.forEach(t),Iuo=r(s3e," (FairSeq Machine-Translation model)"),s3e.forEach(t),quo=i(B),Z_=n(B,"LI",{});var l3e=s(Z_);bae=n(l3e,"STRONG",{});var kUr=s(bae);Nuo=r(kUr,"funnel"),kUr.forEach(t),juo=r(l3e," \u2014 "),w$=n(l3e,"A",{href:!0});var SUr=s(w$);Duo=r(SUr,"FunnelForPreTraining"),SUr.forEach(t),Guo=r(l3e," (Funnel Transformer model)"),l3e.forEach(t),Ouo=i(B),eu=n(B,"LI",{});var i3e=s(eu);Fae=n(i3e,"STRONG",{});var RUr=s(Fae);Vuo=r(RUr,"gpt2"),RUr.forEach(t),Xuo=r(i3e," \u2014 "),A$=n(i3e,"A",{href:!0});var BUr=s(A$);zuo=r(BUr,"GPT2LMHeadModel"),BUr.forEach(t),Quo=r(i3e," (OpenAI GPT-2 model)"),i3e.forEach(t),Wuo=i(B),ou=n(B,"LI",{});var d3e=s(ou);vae=n(d3e,"STRONG",{});var PUr=s(vae);Huo=r(PUr,"ibert"),PUr.forEach(t),Uuo=r(d3e," \u2014 "),y$=n(d3e,"A",{href:!0});var $Ur=s(y$);Juo=r($Ur,"IBertForMaskedLM"),$Ur.forEach(t),Yuo=r(d3e," (I-BERT model)"),d3e.forEach(t),Kuo=i(B),ru=n(B,"LI",{});var c3e=s(ru);Tae=n(c3e,"STRONG",{});var IUr=s(Tae);Zuo=r(IUr,"layoutlm"),IUr.forEach(t),e2o=r(c3e," \u2014 "),L$=n(c3e,"A",{href:!0});var qUr=s(L$);o2o=r(qUr,"LayoutLMForMaskedLM"),qUr.forEach(t),r2o=r(c3e," (LayoutLM model)"),c3e.forEach(t),t2o=i(B),tu=n(B,"LI",{});var f3e=s(tu);Mae=n(f3e,"STRONG",{});var NUr=s(Mae);a2o=r(NUr,"longformer"),NUr.forEach(t),n2o=r(f3e," \u2014 "),x$=n(f3e,"A",{href:!0});var jUr=s(x$);s2o=r(jUr,"LongformerForMaskedLM"),jUr.forEach(t),l2o=r(f3e," (Longformer model)"),f3e.forEach(t),i2o=i(B),au=n(B,"LI",{});var m3e=s(au);Eae=n(m3e,"STRONG",{});var DUr=s(Eae);d2o=r(DUr,"longt5"),DUr.forEach(t),c2o=r(m3e," \u2014 "),k$=n(m3e,"A",{href:!0});var GUr=s(k$);f2o=r(GUr,"LongT5ForConditionalGeneration"),GUr.forEach(t),m2o=r(m3e," (LongT5 model)"),m3e.forEach(t),g2o=i(B),nu=n(B,"LI",{});var g3e=s(nu);Cae=n(g3e,"STRONG",{});var OUr=s(Cae);h2o=r(OUr,"lxmert"),OUr.forEach(t),p2o=r(g3e," \u2014 "),S$=n(g3e,"A",{href:!0});var VUr=s(S$);_2o=r(VUr,"LxmertForPreTraining"),VUr.forEach(t),u2o=r(g3e," (LXMERT model)"),g3e.forEach(t),b2o=i(B),su=n(B,"LI",{});var h3e=s(su);wae=n(h3e,"STRONG",{});var XUr=s(wae);F2o=r(XUr,"megatron-bert"),XUr.forEach(t),v2o=r(h3e," \u2014 "),R$=n(h3e,"A",{href:!0});var zUr=s(R$);T2o=r(zUr,"MegatronBertForPreTraining"),zUr.forEach(t),M2o=r(h3e," (MegatronBert model)"),h3e.forEach(t),E2o=i(B),lu=n(B,"LI",{});var p3e=s(lu);Aae=n(p3e,"STRONG",{});var QUr=s(Aae);C2o=r(QUr,"mobilebert"),QUr.forEach(t),w2o=r(p3e," \u2014 "),B$=n(p3e,"A",{href:!0});var WUr=s(B$);A2o=r(WUr,"MobileBertForPreTraining"),WUr.forEach(t),y2o=r(p3e," (MobileBERT model)"),p3e.forEach(t),L2o=i(B),iu=n(B,"LI",{});var _3e=s(iu);yae=n(_3e,"STRONG",{});var HUr=s(yae);x2o=r(HUr,"mpnet"),HUr.forEach(t),k2o=r(_3e," \u2014 "),P$=n(_3e,"A",{href:!0});var UUr=s(P$);S2o=r(UUr,"MPNetForMaskedLM"),UUr.forEach(t),R2o=r(_3e," (MPNet model)"),_3e.forEach(t),B2o=i(B),du=n(B,"LI",{});var u3e=s(du);Lae=n(u3e,"STRONG",{});var JUr=s(Lae);P2o=r(JUr,"openai-gpt"),JUr.forEach(t),$2o=r(u3e," \u2014 "),$$=n(u3e,"A",{href:!0});var YUr=s($$);I2o=r(YUr,"OpenAIGPTLMHeadModel"),YUr.forEach(t),q2o=r(u3e," (OpenAI GPT model)"),u3e.forEach(t),N2o=i(B),cu=n(B,"LI",{});var b3e=s(cu);xae=n(b3e,"STRONG",{});var KUr=s(xae);j2o=r(KUr,"retribert"),KUr.forEach(t),D2o=r(b3e," \u2014 "),I$=n(b3e,"A",{href:!0});var ZUr=s(I$);G2o=r(ZUr,"RetriBertModel"),ZUr.forEach(t),O2o=r(b3e," (RetriBERT model)"),b3e.forEach(t),V2o=i(B),fu=n(B,"LI",{});var F3e=s(fu);kae=n(F3e,"STRONG",{});var eJr=s(kae);X2o=r(eJr,"roberta"),eJr.forEach(t),z2o=r(F3e," \u2014 "),q$=n(F3e,"A",{href:!0});var oJr=s(q$);Q2o=r(oJr,"RobertaForMaskedLM"),oJr.forEach(t),W2o=r(F3e," (RoBERTa model)"),F3e.forEach(t),H2o=i(B),mu=n(B,"LI",{});var v3e=s(mu);Sae=n(v3e,"STRONG",{});var rJr=s(Sae);U2o=r(rJr,"squeezebert"),rJr.forEach(t),J2o=r(v3e," \u2014 "),N$=n(v3e,"A",{href:!0});var tJr=s(N$);Y2o=r(tJr,"SqueezeBertForMaskedLM"),tJr.forEach(t),K2o=r(v3e," (SqueezeBERT model)"),v3e.forEach(t),Z2o=i(B),gu=n(B,"LI",{});var T3e=s(gu);Rae=n(T3e,"STRONG",{});var aJr=s(Rae);e1o=r(aJr,"t5"),aJr.forEach(t),o1o=r(T3e," \u2014 "),j$=n(T3e,"A",{href:!0});var nJr=s(j$);r1o=r(nJr,"T5ForConditionalGeneration"),nJr.forEach(t),t1o=r(T3e," (T5 model)"),T3e.forEach(t),a1o=i(B),hu=n(B,"LI",{});var M3e=s(hu);Bae=n(M3e,"STRONG",{});var sJr=s(Bae);n1o=r(sJr,"tapas"),sJr.forEach(t),s1o=r(M3e," \u2014 "),D$=n(M3e,"A",{href:!0});var lJr=s(D$);l1o=r(lJr,"TapasForMaskedLM"),lJr.forEach(t),i1o=r(M3e," (TAPAS model)"),M3e.forEach(t),d1o=i(B),pu=n(B,"LI",{});var E3e=s(pu);Pae=n(E3e,"STRONG",{});var iJr=s(Pae);c1o=r(iJr,"transfo-xl"),iJr.forEach(t),f1o=r(E3e," \u2014 "),G$=n(E3e,"A",{href:!0});var dJr=s(G$);m1o=r(dJr,"TransfoXLLMHeadModel"),dJr.forEach(t),g1o=r(E3e," (Transformer-XL model)"),E3e.forEach(t),h1o=i(B),_u=n(B,"LI",{});var C3e=s(_u);$ae=n(C3e,"STRONG",{});var cJr=s($ae);p1o=r(cJr,"unispeech"),cJr.forEach(t),_1o=r(C3e," \u2014 "),O$=n(C3e,"A",{href:!0});var fJr=s(O$);u1o=r(fJr,"UniSpeechForPreTraining"),fJr.forEach(t),b1o=r(C3e," (UniSpeech model)"),C3e.forEach(t),F1o=i(B),uu=n(B,"LI",{});var w3e=s(uu);Iae=n(w3e,"STRONG",{});var mJr=s(Iae);v1o=r(mJr,"unispeech-sat"),mJr.forEach(t),T1o=r(w3e," \u2014 "),V$=n(w3e,"A",{href:!0});var gJr=s(V$);M1o=r(gJr,"UniSpeechSatForPreTraining"),gJr.forEach(t),E1o=r(w3e," (UniSpeechSat model)"),w3e.forEach(t),C1o=i(B),bu=n(B,"LI",{});var A3e=s(bu);qae=n(A3e,"STRONG",{});var hJr=s(qae);w1o=r(hJr,"visual_bert"),hJr.forEach(t),A1o=r(A3e," \u2014 "),X$=n(A3e,"A",{href:!0});var pJr=s(X$);y1o=r(pJr,"VisualBertForPreTraining"),pJr.forEach(t),L1o=r(A3e," (VisualBert model)"),A3e.forEach(t),x1o=i(B),Fu=n(B,"LI",{});var y3e=s(Fu);Nae=n(y3e,"STRONG",{});var _Jr=s(Nae);k1o=r(_Jr,"vit_mae"),_Jr.forEach(t),S1o=r(y3e," \u2014 "),z$=n(y3e,"A",{href:!0});var uJr=s(z$);R1o=r(uJr,"ViTMAEForPreTraining"),uJr.forEach(t),B1o=r(y3e," (ViTMAE model)"),y3e.forEach(t),P1o=i(B),vu=n(B,"LI",{});var L3e=s(vu);jae=n(L3e,"STRONG",{});var bJr=s(jae);$1o=r(bJr,"wav2vec2"),bJr.forEach(t),I1o=r(L3e," \u2014 "),Q$=n(L3e,"A",{href:!0});var FJr=s(Q$);q1o=r(FJr,"Wav2Vec2ForPreTraining"),FJr.forEach(t),N1o=r(L3e," (Wav2Vec2 model)"),L3e.forEach(t),j1o=i(B),Tu=n(B,"LI",{});var x3e=s(Tu);Dae=n(x3e,"STRONG",{});var vJr=s(Dae);D1o=r(vJr,"xlm"),vJr.forEach(t),G1o=r(x3e," \u2014 "),W$=n(x3e,"A",{href:!0});var TJr=s(W$);O1o=r(TJr,"XLMWithLMHeadModel"),TJr.forEach(t),V1o=r(x3e," (XLM model)"),x3e.forEach(t),X1o=i(B),Mu=n(B,"LI",{});var k3e=s(Mu);Gae=n(k3e,"STRONG",{});var MJr=s(Gae);z1o=r(MJr,"xlm-roberta"),MJr.forEach(t),Q1o=r(k3e," \u2014 "),H$=n(k3e,"A",{href:!0});var EJr=s(H$);W1o=r(EJr,"XLMRobertaForMaskedLM"),EJr.forEach(t),H1o=r(k3e," (XLM-RoBERTa model)"),k3e.forEach(t),U1o=i(B),Eu=n(B,"LI",{});var S3e=s(Eu);Oae=n(S3e,"STRONG",{});var CJr=s(Oae);J1o=r(CJr,"xlm-roberta-xl"),CJr.forEach(t),Y1o=r(S3e," \u2014 "),U$=n(S3e,"A",{href:!0});var wJr=s(U$);K1o=r(wJr,"XLMRobertaXLForMaskedLM"),wJr.forEach(t),Z1o=r(S3e," (XLM-RoBERTa-XL model)"),S3e.forEach(t),ebo=i(B),Cu=n(B,"LI",{});var R3e=s(Cu);Vae=n(R3e,"STRONG",{});var AJr=s(Vae);obo=r(AJr,"xlnet"),AJr.forEach(t),rbo=r(R3e," \u2014 "),J$=n(R3e,"A",{href:!0});var yJr=s(J$);tbo=r(yJr,"XLNetLMHeadModel"),yJr.forEach(t),abo=r(R3e," (XLNet model)"),R3e.forEach(t),B.forEach(t),nbo=i(Gt),wu=n(Gt,"P",{});var B3e=s(wu);sbo=r(B3e,"The model is set in evaluation mode by default using "),Xae=n(B3e,"CODE",{});var LJr=s(Xae);lbo=r(LJr,"model.eval()"),LJr.forEach(t),ibo=r(B3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zae=n(B3e,"CODE",{});var xJr=s(zae);dbo=r(xJr,"model.train()"),xJr.forEach(t),B3e.forEach(t),cbo=i(Gt),Qae=n(Gt,"P",{});var kJr=s(Qae);fbo=r(kJr,"Examples:"),kJr.forEach(t),mbo=i(Gt),m(C3.$$.fragment,Gt),Gt.forEach(t),Us.forEach(t),fBe=i(c),td=n(c,"H2",{class:!0});var v$e=s(td);Au=n(v$e,"A",{id:!0,class:!0,href:!0});var SJr=s(Au);Wae=n(SJr,"SPAN",{});var RJr=s(Wae);m(w3.$$.fragment,RJr),RJr.forEach(t),SJr.forEach(t),gbo=i(v$e),Hae=n(v$e,"SPAN",{});var BJr=s(Hae);hbo=r(BJr,"AutoModelForCausalLM"),BJr.forEach(t),v$e.forEach(t),mBe=i(c),Ko=n(c,"DIV",{class:!0});var Ys=s(Ko);m(A3.$$.fragment,Ys),pbo=i(Ys),ad=n(Ys,"P",{});var BU=s(ad);_bo=r(BU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Y$=n(BU,"A",{href:!0});var PJr=s(Y$);ubo=r(PJr,"from_pretrained()"),PJr.forEach(t),bbo=r(BU," class method or the "),K$=n(BU,"A",{href:!0});var $Jr=s(K$);Fbo=r($Jr,"from_config()"),$Jr.forEach(t),vbo=r(BU,` class
method.`),BU.forEach(t),Tbo=i(Ys),y3=n(Ys,"P",{});var T$e=s(y3);Mbo=r(T$e,"This class cannot be instantiated directly using "),Uae=n(T$e,"CODE",{});var IJr=s(Uae);Ebo=r(IJr,"__init__()"),IJr.forEach(t),Cbo=r(T$e," (throws an error)."),T$e.forEach(t),wbo=i(Ys),Qr=n(Ys,"DIV",{class:!0});var Ks=s(Qr);m(L3.$$.fragment,Ks),Abo=i(Ks),Jae=n(Ks,"P",{});var qJr=s(Jae);ybo=r(qJr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qJr.forEach(t),Lbo=i(Ks),nd=n(Ks,"P",{});var PU=s(nd);xbo=r(PU,`Note:
Loading a model from its configuration file does `),Yae=n(PU,"STRONG",{});var NJr=s(Yae);kbo=r(NJr,"not"),NJr.forEach(t),Sbo=r(PU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Z$=n(PU,"A",{href:!0});var jJr=s(Z$);Rbo=r(jJr,"from_pretrained()"),jJr.forEach(t),Bbo=r(PU," to load the model weights."),PU.forEach(t),Pbo=i(Ks),Kae=n(Ks,"P",{});var DJr=s(Kae);$bo=r(DJr,"Examples:"),DJr.forEach(t),Ibo=i(Ks),m(x3.$$.fragment,Ks),Ks.forEach(t),qbo=i(Ys),De=n(Ys,"DIV",{class:!0});var Ot=s(De);m(k3.$$.fragment,Ot),Nbo=i(Ot),Zae=n(Ot,"P",{});var GJr=s(Zae);jbo=r(GJr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),GJr.forEach(t),Dbo=i(Ot),Qa=n(Ot,"P",{});var qE=s(Qa);Gbo=r(qE,"The model class to instantiate is selected based on the "),ene=n(qE,"CODE",{});var OJr=s(ene);Obo=r(OJr,"model_type"),OJr.forEach(t),Vbo=r(qE,` property of the config object (either
passed as an argument or loaded from `),one=n(qE,"CODE",{});var VJr=s(one);Xbo=r(VJr,"pretrained_model_name_or_path"),VJr.forEach(t),zbo=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rne=n(qE,"CODE",{});var XJr=s(rne);Qbo=r(XJr,"pretrained_model_name_or_path"),XJr.forEach(t),Wbo=r(qE,":"),qE.forEach(t),Hbo=i(Ot),$=n(Ot,"UL",{});var q=s($);yu=n(q,"LI",{});var P3e=s(yu);tne=n(P3e,"STRONG",{});var zJr=s(tne);Ubo=r(zJr,"bart"),zJr.forEach(t),Jbo=r(P3e," \u2014 "),eI=n(P3e,"A",{href:!0});var QJr=s(eI);Ybo=r(QJr,"BartForCausalLM"),QJr.forEach(t),Kbo=r(P3e," (BART model)"),P3e.forEach(t),Zbo=i(q),Lu=n(q,"LI",{});var $3e=s(Lu);ane=n($3e,"STRONG",{});var WJr=s(ane);e6o=r(WJr,"bert"),WJr.forEach(t),o6o=r($3e," \u2014 "),oI=n($3e,"A",{href:!0});var HJr=s(oI);r6o=r(HJr,"BertLMHeadModel"),HJr.forEach(t),t6o=r($3e," (BERT model)"),$3e.forEach(t),a6o=i(q),xu=n(q,"LI",{});var I3e=s(xu);nne=n(I3e,"STRONG",{});var UJr=s(nne);n6o=r(UJr,"bert-generation"),UJr.forEach(t),s6o=r(I3e," \u2014 "),rI=n(I3e,"A",{href:!0});var JJr=s(rI);l6o=r(JJr,"BertGenerationDecoder"),JJr.forEach(t),i6o=r(I3e," (Bert Generation model)"),I3e.forEach(t),d6o=i(q),ku=n(q,"LI",{});var q3e=s(ku);sne=n(q3e,"STRONG",{});var YJr=s(sne);c6o=r(YJr,"big_bird"),YJr.forEach(t),f6o=r(q3e," \u2014 "),tI=n(q3e,"A",{href:!0});var KJr=s(tI);m6o=r(KJr,"BigBirdForCausalLM"),KJr.forEach(t),g6o=r(q3e," (BigBird model)"),q3e.forEach(t),h6o=i(q),Su=n(q,"LI",{});var N3e=s(Su);lne=n(N3e,"STRONG",{});var ZJr=s(lne);p6o=r(ZJr,"bigbird_pegasus"),ZJr.forEach(t),_6o=r(N3e," \u2014 "),aI=n(N3e,"A",{href:!0});var eYr=s(aI);u6o=r(eYr,"BigBirdPegasusForCausalLM"),eYr.forEach(t),b6o=r(N3e," (BigBirdPegasus model)"),N3e.forEach(t),F6o=i(q),Ru=n(q,"LI",{});var j3e=s(Ru);ine=n(j3e,"STRONG",{});var oYr=s(ine);v6o=r(oYr,"blenderbot"),oYr.forEach(t),T6o=r(j3e," \u2014 "),nI=n(j3e,"A",{href:!0});var rYr=s(nI);M6o=r(rYr,"BlenderbotForCausalLM"),rYr.forEach(t),E6o=r(j3e," (Blenderbot model)"),j3e.forEach(t),C6o=i(q),Bu=n(q,"LI",{});var D3e=s(Bu);dne=n(D3e,"STRONG",{});var tYr=s(dne);w6o=r(tYr,"blenderbot-small"),tYr.forEach(t),A6o=r(D3e," \u2014 "),sI=n(D3e,"A",{href:!0});var aYr=s(sI);y6o=r(aYr,"BlenderbotSmallForCausalLM"),aYr.forEach(t),L6o=r(D3e," (BlenderbotSmall model)"),D3e.forEach(t),x6o=i(q),Pu=n(q,"LI",{});var G3e=s(Pu);cne=n(G3e,"STRONG",{});var nYr=s(cne);k6o=r(nYr,"camembert"),nYr.forEach(t),S6o=r(G3e," \u2014 "),lI=n(G3e,"A",{href:!0});var sYr=s(lI);R6o=r(sYr,"CamembertForCausalLM"),sYr.forEach(t),B6o=r(G3e," (CamemBERT model)"),G3e.forEach(t),P6o=i(q),$u=n(q,"LI",{});var O3e=s($u);fne=n(O3e,"STRONG",{});var lYr=s(fne);$6o=r(lYr,"ctrl"),lYr.forEach(t),I6o=r(O3e," \u2014 "),iI=n(O3e,"A",{href:!0});var iYr=s(iI);q6o=r(iYr,"CTRLLMHeadModel"),iYr.forEach(t),N6o=r(O3e," (CTRL model)"),O3e.forEach(t),j6o=i(q),Iu=n(q,"LI",{});var V3e=s(Iu);mne=n(V3e,"STRONG",{});var dYr=s(mne);D6o=r(dYr,"data2vec-text"),dYr.forEach(t),G6o=r(V3e," \u2014 "),dI=n(V3e,"A",{href:!0});var cYr=s(dI);O6o=r(cYr,"Data2VecTextForCausalLM"),cYr.forEach(t),V6o=r(V3e," (Data2VecText model)"),V3e.forEach(t),X6o=i(q),qu=n(q,"LI",{});var X3e=s(qu);gne=n(X3e,"STRONG",{});var fYr=s(gne);z6o=r(fYr,"electra"),fYr.forEach(t),Q6o=r(X3e," \u2014 "),cI=n(X3e,"A",{href:!0});var mYr=s(cI);W6o=r(mYr,"ElectraForCausalLM"),mYr.forEach(t),H6o=r(X3e," (ELECTRA model)"),X3e.forEach(t),U6o=i(q),Nu=n(q,"LI",{});var z3e=s(Nu);hne=n(z3e,"STRONG",{});var gYr=s(hne);J6o=r(gYr,"gpt2"),gYr.forEach(t),Y6o=r(z3e," \u2014 "),fI=n(z3e,"A",{href:!0});var hYr=s(fI);K6o=r(hYr,"GPT2LMHeadModel"),hYr.forEach(t),Z6o=r(z3e," (OpenAI GPT-2 model)"),z3e.forEach(t),eFo=i(q),ju=n(q,"LI",{});var Q3e=s(ju);pne=n(Q3e,"STRONG",{});var pYr=s(pne);oFo=r(pYr,"gpt_neo"),pYr.forEach(t),rFo=r(Q3e," \u2014 "),mI=n(Q3e,"A",{href:!0});var _Yr=s(mI);tFo=r(_Yr,"GPTNeoForCausalLM"),_Yr.forEach(t),aFo=r(Q3e," (GPT Neo model)"),Q3e.forEach(t),nFo=i(q),Du=n(q,"LI",{});var W3e=s(Du);_ne=n(W3e,"STRONG",{});var uYr=s(_ne);sFo=r(uYr,"gptj"),uYr.forEach(t),lFo=r(W3e," \u2014 "),gI=n(W3e,"A",{href:!0});var bYr=s(gI);iFo=r(bYr,"GPTJForCausalLM"),bYr.forEach(t),dFo=r(W3e," (GPT-J model)"),W3e.forEach(t),cFo=i(q),Gu=n(q,"LI",{});var H3e=s(Gu);une=n(H3e,"STRONG",{});var FYr=s(une);fFo=r(FYr,"marian"),FYr.forEach(t),mFo=r(H3e," \u2014 "),hI=n(H3e,"A",{href:!0});var vYr=s(hI);gFo=r(vYr,"MarianForCausalLM"),vYr.forEach(t),hFo=r(H3e," (Marian model)"),H3e.forEach(t),pFo=i(q),Ou=n(q,"LI",{});var U3e=s(Ou);bne=n(U3e,"STRONG",{});var TYr=s(bne);_Fo=r(TYr,"mbart"),TYr.forEach(t),uFo=r(U3e," \u2014 "),pI=n(U3e,"A",{href:!0});var MYr=s(pI);bFo=r(MYr,"MBartForCausalLM"),MYr.forEach(t),FFo=r(U3e," (mBART model)"),U3e.forEach(t),vFo=i(q),Vu=n(q,"LI",{});var J3e=s(Vu);Fne=n(J3e,"STRONG",{});var EYr=s(Fne);TFo=r(EYr,"megatron-bert"),EYr.forEach(t),MFo=r(J3e," \u2014 "),_I=n(J3e,"A",{href:!0});var CYr=s(_I);EFo=r(CYr,"MegatronBertForCausalLM"),CYr.forEach(t),CFo=r(J3e," (MegatronBert model)"),J3e.forEach(t),wFo=i(q),Xu=n(q,"LI",{});var Y3e=s(Xu);vne=n(Y3e,"STRONG",{});var wYr=s(vne);AFo=r(wYr,"openai-gpt"),wYr.forEach(t),yFo=r(Y3e," \u2014 "),uI=n(Y3e,"A",{href:!0});var AYr=s(uI);LFo=r(AYr,"OpenAIGPTLMHeadModel"),AYr.forEach(t),xFo=r(Y3e," (OpenAI GPT model)"),Y3e.forEach(t),kFo=i(q),zu=n(q,"LI",{});var K3e=s(zu);Tne=n(K3e,"STRONG",{});var yYr=s(Tne);SFo=r(yYr,"pegasus"),yYr.forEach(t),RFo=r(K3e," \u2014 "),bI=n(K3e,"A",{href:!0});var LYr=s(bI);BFo=r(LYr,"PegasusForCausalLM"),LYr.forEach(t),PFo=r(K3e," (Pegasus model)"),K3e.forEach(t),$Fo=i(q),Qu=n(q,"LI",{});var Z3e=s(Qu);Mne=n(Z3e,"STRONG",{});var xYr=s(Mne);IFo=r(xYr,"plbart"),xYr.forEach(t),qFo=r(Z3e," \u2014 "),FI=n(Z3e,"A",{href:!0});var kYr=s(FI);NFo=r(kYr,"PLBartForCausalLM"),kYr.forEach(t),jFo=r(Z3e," (PLBart model)"),Z3e.forEach(t),DFo=i(q),Wu=n(q,"LI",{});var eCe=s(Wu);Ene=n(eCe,"STRONG",{});var SYr=s(Ene);GFo=r(SYr,"prophetnet"),SYr.forEach(t),OFo=r(eCe," \u2014 "),vI=n(eCe,"A",{href:!0});var RYr=s(vI);VFo=r(RYr,"ProphetNetForCausalLM"),RYr.forEach(t),XFo=r(eCe," (ProphetNet model)"),eCe.forEach(t),zFo=i(q),Hu=n(q,"LI",{});var oCe=s(Hu);Cne=n(oCe,"STRONG",{});var BYr=s(Cne);QFo=r(BYr,"qdqbert"),BYr.forEach(t),WFo=r(oCe," \u2014 "),TI=n(oCe,"A",{href:!0});var PYr=s(TI);HFo=r(PYr,"QDQBertLMHeadModel"),PYr.forEach(t),UFo=r(oCe," (QDQBert model)"),oCe.forEach(t),JFo=i(q),Uu=n(q,"LI",{});var rCe=s(Uu);wne=n(rCe,"STRONG",{});var $Yr=s(wne);YFo=r($Yr,"reformer"),$Yr.forEach(t),KFo=r(rCe," \u2014 "),MI=n(rCe,"A",{href:!0});var IYr=s(MI);ZFo=r(IYr,"ReformerModelWithLMHead"),IYr.forEach(t),evo=r(rCe," (Reformer model)"),rCe.forEach(t),ovo=i(q),Ju=n(q,"LI",{});var tCe=s(Ju);Ane=n(tCe,"STRONG",{});var qYr=s(Ane);rvo=r(qYr,"rembert"),qYr.forEach(t),tvo=r(tCe," \u2014 "),EI=n(tCe,"A",{href:!0});var NYr=s(EI);avo=r(NYr,"RemBertForCausalLM"),NYr.forEach(t),nvo=r(tCe," (RemBERT model)"),tCe.forEach(t),svo=i(q),Yu=n(q,"LI",{});var aCe=s(Yu);yne=n(aCe,"STRONG",{});var jYr=s(yne);lvo=r(jYr,"roberta"),jYr.forEach(t),ivo=r(aCe," \u2014 "),CI=n(aCe,"A",{href:!0});var DYr=s(CI);dvo=r(DYr,"RobertaForCausalLM"),DYr.forEach(t),cvo=r(aCe," (RoBERTa model)"),aCe.forEach(t),fvo=i(q),Ku=n(q,"LI",{});var nCe=s(Ku);Lne=n(nCe,"STRONG",{});var GYr=s(Lne);mvo=r(GYr,"roformer"),GYr.forEach(t),gvo=r(nCe," \u2014 "),wI=n(nCe,"A",{href:!0});var OYr=s(wI);hvo=r(OYr,"RoFormerForCausalLM"),OYr.forEach(t),pvo=r(nCe," (RoFormer model)"),nCe.forEach(t),_vo=i(q),Zu=n(q,"LI",{});var sCe=s(Zu);xne=n(sCe,"STRONG",{});var VYr=s(xne);uvo=r(VYr,"speech_to_text_2"),VYr.forEach(t),bvo=r(sCe," \u2014 "),AI=n(sCe,"A",{href:!0});var XYr=s(AI);Fvo=r(XYr,"Speech2Text2ForCausalLM"),XYr.forEach(t),vvo=r(sCe," (Speech2Text2 model)"),sCe.forEach(t),Tvo=i(q),e2=n(q,"LI",{});var lCe=s(e2);kne=n(lCe,"STRONG",{});var zYr=s(kne);Mvo=r(zYr,"transfo-xl"),zYr.forEach(t),Evo=r(lCe," \u2014 "),yI=n(lCe,"A",{href:!0});var QYr=s(yI);Cvo=r(QYr,"TransfoXLLMHeadModel"),QYr.forEach(t),wvo=r(lCe," (Transformer-XL model)"),lCe.forEach(t),Avo=i(q),o2=n(q,"LI",{});var iCe=s(o2);Sne=n(iCe,"STRONG",{});var WYr=s(Sne);yvo=r(WYr,"trocr"),WYr.forEach(t),Lvo=r(iCe," \u2014 "),LI=n(iCe,"A",{href:!0});var HYr=s(LI);xvo=r(HYr,"TrOCRForCausalLM"),HYr.forEach(t),kvo=r(iCe," (TrOCR model)"),iCe.forEach(t),Svo=i(q),r2=n(q,"LI",{});var dCe=s(r2);Rne=n(dCe,"STRONG",{});var UYr=s(Rne);Rvo=r(UYr,"xglm"),UYr.forEach(t),Bvo=r(dCe," \u2014 "),xI=n(dCe,"A",{href:!0});var JYr=s(xI);Pvo=r(JYr,"XGLMForCausalLM"),JYr.forEach(t),$vo=r(dCe," (XGLM model)"),dCe.forEach(t),Ivo=i(q),t2=n(q,"LI",{});var cCe=s(t2);Bne=n(cCe,"STRONG",{});var YYr=s(Bne);qvo=r(YYr,"xlm"),YYr.forEach(t),Nvo=r(cCe," \u2014 "),kI=n(cCe,"A",{href:!0});var KYr=s(kI);jvo=r(KYr,"XLMWithLMHeadModel"),KYr.forEach(t),Dvo=r(cCe," (XLM model)"),cCe.forEach(t),Gvo=i(q),a2=n(q,"LI",{});var fCe=s(a2);Pne=n(fCe,"STRONG",{});var ZYr=s(Pne);Ovo=r(ZYr,"xlm-prophetnet"),ZYr.forEach(t),Vvo=r(fCe," \u2014 "),SI=n(fCe,"A",{href:!0});var eKr=s(SI);Xvo=r(eKr,"XLMProphetNetForCausalLM"),eKr.forEach(t),zvo=r(fCe," (XLMProphetNet model)"),fCe.forEach(t),Qvo=i(q),n2=n(q,"LI",{});var mCe=s(n2);$ne=n(mCe,"STRONG",{});var oKr=s($ne);Wvo=r(oKr,"xlm-roberta"),oKr.forEach(t),Hvo=r(mCe," \u2014 "),RI=n(mCe,"A",{href:!0});var rKr=s(RI);Uvo=r(rKr,"XLMRobertaForCausalLM"),rKr.forEach(t),Jvo=r(mCe," (XLM-RoBERTa model)"),mCe.forEach(t),Yvo=i(q),s2=n(q,"LI",{});var gCe=s(s2);Ine=n(gCe,"STRONG",{});var tKr=s(Ine);Kvo=r(tKr,"xlm-roberta-xl"),tKr.forEach(t),Zvo=r(gCe," \u2014 "),BI=n(gCe,"A",{href:!0});var aKr=s(BI);eTo=r(aKr,"XLMRobertaXLForCausalLM"),aKr.forEach(t),oTo=r(gCe," (XLM-RoBERTa-XL model)"),gCe.forEach(t),rTo=i(q),l2=n(q,"LI",{});var hCe=s(l2);qne=n(hCe,"STRONG",{});var nKr=s(qne);tTo=r(nKr,"xlnet"),nKr.forEach(t),aTo=r(hCe," \u2014 "),PI=n(hCe,"A",{href:!0});var sKr=s(PI);nTo=r(sKr,"XLNetLMHeadModel"),sKr.forEach(t),sTo=r(hCe," (XLNet model)"),hCe.forEach(t),q.forEach(t),lTo=i(Ot),i2=n(Ot,"P",{});var pCe=s(i2);iTo=r(pCe,"The model is set in evaluation mode by default using "),Nne=n(pCe,"CODE",{});var lKr=s(Nne);dTo=r(lKr,"model.eval()"),lKr.forEach(t),cTo=r(pCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jne=n(pCe,"CODE",{});var iKr=s(jne);fTo=r(iKr,"model.train()"),iKr.forEach(t),pCe.forEach(t),mTo=i(Ot),Dne=n(Ot,"P",{});var dKr=s(Dne);gTo=r(dKr,"Examples:"),dKr.forEach(t),hTo=i(Ot),m(S3.$$.fragment,Ot),Ot.forEach(t),Ys.forEach(t),gBe=i(c),sd=n(c,"H2",{class:!0});var M$e=s(sd);d2=n(M$e,"A",{id:!0,class:!0,href:!0});var cKr=s(d2);Gne=n(cKr,"SPAN",{});var fKr=s(Gne);m(R3.$$.fragment,fKr),fKr.forEach(t),cKr.forEach(t),pTo=i(M$e),One=n(M$e,"SPAN",{});var mKr=s(One);_To=r(mKr,"AutoModelForMaskedLM"),mKr.forEach(t),M$e.forEach(t),hBe=i(c),Zo=n(c,"DIV",{class:!0});var Zs=s(Zo);m(B3.$$.fragment,Zs),uTo=i(Zs),ld=n(Zs,"P",{});var $U=s(ld);bTo=r($U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$I=n($U,"A",{href:!0});var gKr=s($I);FTo=r(gKr,"from_pretrained()"),gKr.forEach(t),vTo=r($U," class method or the "),II=n($U,"A",{href:!0});var hKr=s(II);TTo=r(hKr,"from_config()"),hKr.forEach(t),MTo=r($U,` class
method.`),$U.forEach(t),ETo=i(Zs),P3=n(Zs,"P",{});var E$e=s(P3);CTo=r(E$e,"This class cannot be instantiated directly using "),Vne=n(E$e,"CODE",{});var pKr=s(Vne);wTo=r(pKr,"__init__()"),pKr.forEach(t),ATo=r(E$e," (throws an error)."),E$e.forEach(t),yTo=i(Zs),Wr=n(Zs,"DIV",{class:!0});var el=s(Wr);m($3.$$.fragment,el),LTo=i(el),Xne=n(el,"P",{});var _Kr=s(Xne);xTo=r(_Kr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Kr.forEach(t),kTo=i(el),id=n(el,"P",{});var IU=s(id);STo=r(IU,`Note:
Loading a model from its configuration file does `),zne=n(IU,"STRONG",{});var uKr=s(zne);RTo=r(uKr,"not"),uKr.forEach(t),BTo=r(IU,` load the model weights. It only affects the
model\u2019s configuration. Use `),qI=n(IU,"A",{href:!0});var bKr=s(qI);PTo=r(bKr,"from_pretrained()"),bKr.forEach(t),$To=r(IU," to load the model weights."),IU.forEach(t),ITo=i(el),Qne=n(el,"P",{});var FKr=s(Qne);qTo=r(FKr,"Examples:"),FKr.forEach(t),NTo=i(el),m(I3.$$.fragment,el),el.forEach(t),jTo=i(Zs),Ge=n(Zs,"DIV",{class:!0});var Vt=s(Ge);m(q3.$$.fragment,Vt),DTo=i(Vt),Wne=n(Vt,"P",{});var vKr=s(Wne);GTo=r(vKr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vKr.forEach(t),OTo=i(Vt),Wa=n(Vt,"P",{});var NE=s(Wa);VTo=r(NE,"The model class to instantiate is selected based on the "),Hne=n(NE,"CODE",{});var TKr=s(Hne);XTo=r(TKr,"model_type"),TKr.forEach(t),zTo=r(NE,` property of the config object (either
passed as an argument or loaded from `),Une=n(NE,"CODE",{});var MKr=s(Une);QTo=r(MKr,"pretrained_model_name_or_path"),MKr.forEach(t),WTo=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jne=n(NE,"CODE",{});var EKr=s(Jne);HTo=r(EKr,"pretrained_model_name_or_path"),EKr.forEach(t),UTo=r(NE,":"),NE.forEach(t),JTo=i(Vt),I=n(Vt,"UL",{});var N=s(I);c2=n(N,"LI",{});var _Ce=s(c2);Yne=n(_Ce,"STRONG",{});var CKr=s(Yne);YTo=r(CKr,"albert"),CKr.forEach(t),KTo=r(_Ce," \u2014 "),NI=n(_Ce,"A",{href:!0});var wKr=s(NI);ZTo=r(wKr,"AlbertForMaskedLM"),wKr.forEach(t),e7o=r(_Ce," (ALBERT model)"),_Ce.forEach(t),o7o=i(N),f2=n(N,"LI",{});var uCe=s(f2);Kne=n(uCe,"STRONG",{});var AKr=s(Kne);r7o=r(AKr,"bart"),AKr.forEach(t),t7o=r(uCe," \u2014 "),jI=n(uCe,"A",{href:!0});var yKr=s(jI);a7o=r(yKr,"BartForConditionalGeneration"),yKr.forEach(t),n7o=r(uCe," (BART model)"),uCe.forEach(t),s7o=i(N),m2=n(N,"LI",{});var bCe=s(m2);Zne=n(bCe,"STRONG",{});var LKr=s(Zne);l7o=r(LKr,"bert"),LKr.forEach(t),i7o=r(bCe," \u2014 "),DI=n(bCe,"A",{href:!0});var xKr=s(DI);d7o=r(xKr,"BertForMaskedLM"),xKr.forEach(t),c7o=r(bCe," (BERT model)"),bCe.forEach(t),f7o=i(N),g2=n(N,"LI",{});var FCe=s(g2);ese=n(FCe,"STRONG",{});var kKr=s(ese);m7o=r(kKr,"big_bird"),kKr.forEach(t),g7o=r(FCe," \u2014 "),GI=n(FCe,"A",{href:!0});var SKr=s(GI);h7o=r(SKr,"BigBirdForMaskedLM"),SKr.forEach(t),p7o=r(FCe," (BigBird model)"),FCe.forEach(t),_7o=i(N),h2=n(N,"LI",{});var vCe=s(h2);ose=n(vCe,"STRONG",{});var RKr=s(ose);u7o=r(RKr,"camembert"),RKr.forEach(t),b7o=r(vCe," \u2014 "),OI=n(vCe,"A",{href:!0});var BKr=s(OI);F7o=r(BKr,"CamembertForMaskedLM"),BKr.forEach(t),v7o=r(vCe," (CamemBERT model)"),vCe.forEach(t),T7o=i(N),p2=n(N,"LI",{});var TCe=s(p2);rse=n(TCe,"STRONG",{});var PKr=s(rse);M7o=r(PKr,"convbert"),PKr.forEach(t),E7o=r(TCe," \u2014 "),VI=n(TCe,"A",{href:!0});var $Kr=s(VI);C7o=r($Kr,"ConvBertForMaskedLM"),$Kr.forEach(t),w7o=r(TCe," (ConvBERT model)"),TCe.forEach(t),A7o=i(N),_2=n(N,"LI",{});var MCe=s(_2);tse=n(MCe,"STRONG",{});var IKr=s(tse);y7o=r(IKr,"data2vec-text"),IKr.forEach(t),L7o=r(MCe," \u2014 "),XI=n(MCe,"A",{href:!0});var qKr=s(XI);x7o=r(qKr,"Data2VecTextForMaskedLM"),qKr.forEach(t),k7o=r(MCe," (Data2VecText model)"),MCe.forEach(t),S7o=i(N),u2=n(N,"LI",{});var ECe=s(u2);ase=n(ECe,"STRONG",{});var NKr=s(ase);R7o=r(NKr,"deberta"),NKr.forEach(t),B7o=r(ECe," \u2014 "),zI=n(ECe,"A",{href:!0});var jKr=s(zI);P7o=r(jKr,"DebertaForMaskedLM"),jKr.forEach(t),$7o=r(ECe," (DeBERTa model)"),ECe.forEach(t),I7o=i(N),b2=n(N,"LI",{});var CCe=s(b2);nse=n(CCe,"STRONG",{});var DKr=s(nse);q7o=r(DKr,"deberta-v2"),DKr.forEach(t),N7o=r(CCe," \u2014 "),QI=n(CCe,"A",{href:!0});var GKr=s(QI);j7o=r(GKr,"DebertaV2ForMaskedLM"),GKr.forEach(t),D7o=r(CCe," (DeBERTa-v2 model)"),CCe.forEach(t),G7o=i(N),F2=n(N,"LI",{});var wCe=s(F2);sse=n(wCe,"STRONG",{});var OKr=s(sse);O7o=r(OKr,"distilbert"),OKr.forEach(t),V7o=r(wCe," \u2014 "),WI=n(wCe,"A",{href:!0});var VKr=s(WI);X7o=r(VKr,"DistilBertForMaskedLM"),VKr.forEach(t),z7o=r(wCe," (DistilBERT model)"),wCe.forEach(t),Q7o=i(N),v2=n(N,"LI",{});var ACe=s(v2);lse=n(ACe,"STRONG",{});var XKr=s(lse);W7o=r(XKr,"electra"),XKr.forEach(t),H7o=r(ACe," \u2014 "),HI=n(ACe,"A",{href:!0});var zKr=s(HI);U7o=r(zKr,"ElectraForMaskedLM"),zKr.forEach(t),J7o=r(ACe," (ELECTRA model)"),ACe.forEach(t),Y7o=i(N),T2=n(N,"LI",{});var yCe=s(T2);ise=n(yCe,"STRONG",{});var QKr=s(ise);K7o=r(QKr,"flaubert"),QKr.forEach(t),Z7o=r(yCe," \u2014 "),UI=n(yCe,"A",{href:!0});var WKr=s(UI);e9o=r(WKr,"FlaubertWithLMHeadModel"),WKr.forEach(t),o9o=r(yCe," (FlauBERT model)"),yCe.forEach(t),r9o=i(N),M2=n(N,"LI",{});var LCe=s(M2);dse=n(LCe,"STRONG",{});var HKr=s(dse);t9o=r(HKr,"fnet"),HKr.forEach(t),a9o=r(LCe," \u2014 "),JI=n(LCe,"A",{href:!0});var UKr=s(JI);n9o=r(UKr,"FNetForMaskedLM"),UKr.forEach(t),s9o=r(LCe," (FNet model)"),LCe.forEach(t),l9o=i(N),E2=n(N,"LI",{});var xCe=s(E2);cse=n(xCe,"STRONG",{});var JKr=s(cse);i9o=r(JKr,"funnel"),JKr.forEach(t),d9o=r(xCe," \u2014 "),YI=n(xCe,"A",{href:!0});var YKr=s(YI);c9o=r(YKr,"FunnelForMaskedLM"),YKr.forEach(t),f9o=r(xCe," (Funnel Transformer model)"),xCe.forEach(t),m9o=i(N),C2=n(N,"LI",{});var kCe=s(C2);fse=n(kCe,"STRONG",{});var KKr=s(fse);g9o=r(KKr,"ibert"),KKr.forEach(t),h9o=r(kCe," \u2014 "),KI=n(kCe,"A",{href:!0});var ZKr=s(KI);p9o=r(ZKr,"IBertForMaskedLM"),ZKr.forEach(t),_9o=r(kCe," (I-BERT model)"),kCe.forEach(t),u9o=i(N),w2=n(N,"LI",{});var SCe=s(w2);mse=n(SCe,"STRONG",{});var eZr=s(mse);b9o=r(eZr,"layoutlm"),eZr.forEach(t),F9o=r(SCe," \u2014 "),ZI=n(SCe,"A",{href:!0});var oZr=s(ZI);v9o=r(oZr,"LayoutLMForMaskedLM"),oZr.forEach(t),T9o=r(SCe," (LayoutLM model)"),SCe.forEach(t),M9o=i(N),A2=n(N,"LI",{});var RCe=s(A2);gse=n(RCe,"STRONG",{});var rZr=s(gse);E9o=r(rZr,"longformer"),rZr.forEach(t),C9o=r(RCe," \u2014 "),eq=n(RCe,"A",{href:!0});var tZr=s(eq);w9o=r(tZr,"LongformerForMaskedLM"),tZr.forEach(t),A9o=r(RCe," (Longformer model)"),RCe.forEach(t),y9o=i(N),y2=n(N,"LI",{});var BCe=s(y2);hse=n(BCe,"STRONG",{});var aZr=s(hse);L9o=r(aZr,"mbart"),aZr.forEach(t),x9o=r(BCe," \u2014 "),oq=n(BCe,"A",{href:!0});var nZr=s(oq);k9o=r(nZr,"MBartForConditionalGeneration"),nZr.forEach(t),S9o=r(BCe," (mBART model)"),BCe.forEach(t),R9o=i(N),L2=n(N,"LI",{});var PCe=s(L2);pse=n(PCe,"STRONG",{});var sZr=s(pse);B9o=r(sZr,"megatron-bert"),sZr.forEach(t),P9o=r(PCe," \u2014 "),rq=n(PCe,"A",{href:!0});var lZr=s(rq);$9o=r(lZr,"MegatronBertForMaskedLM"),lZr.forEach(t),I9o=r(PCe," (MegatronBert model)"),PCe.forEach(t),q9o=i(N),x2=n(N,"LI",{});var $Ce=s(x2);_se=n($Ce,"STRONG",{});var iZr=s(_se);N9o=r(iZr,"mobilebert"),iZr.forEach(t),j9o=r($Ce," \u2014 "),tq=n($Ce,"A",{href:!0});var dZr=s(tq);D9o=r(dZr,"MobileBertForMaskedLM"),dZr.forEach(t),G9o=r($Ce," (MobileBERT model)"),$Ce.forEach(t),O9o=i(N),k2=n(N,"LI",{});var ICe=s(k2);use=n(ICe,"STRONG",{});var cZr=s(use);V9o=r(cZr,"mpnet"),cZr.forEach(t),X9o=r(ICe," \u2014 "),aq=n(ICe,"A",{href:!0});var fZr=s(aq);z9o=r(fZr,"MPNetForMaskedLM"),fZr.forEach(t),Q9o=r(ICe," (MPNet model)"),ICe.forEach(t),W9o=i(N),S2=n(N,"LI",{});var qCe=s(S2);bse=n(qCe,"STRONG",{});var mZr=s(bse);H9o=r(mZr,"nystromformer"),mZr.forEach(t),U9o=r(qCe," \u2014 "),nq=n(qCe,"A",{href:!0});var gZr=s(nq);J9o=r(gZr,"NystromformerForMaskedLM"),gZr.forEach(t),Y9o=r(qCe," (Nystromformer model)"),qCe.forEach(t),K9o=i(N),R2=n(N,"LI",{});var NCe=s(R2);Fse=n(NCe,"STRONG",{});var hZr=s(Fse);Z9o=r(hZr,"perceiver"),hZr.forEach(t),eMo=r(NCe," \u2014 "),sq=n(NCe,"A",{href:!0});var pZr=s(sq);oMo=r(pZr,"PerceiverForMaskedLM"),pZr.forEach(t),rMo=r(NCe," (Perceiver model)"),NCe.forEach(t),tMo=i(N),B2=n(N,"LI",{});var jCe=s(B2);vse=n(jCe,"STRONG",{});var _Zr=s(vse);aMo=r(_Zr,"qdqbert"),_Zr.forEach(t),nMo=r(jCe," \u2014 "),lq=n(jCe,"A",{href:!0});var uZr=s(lq);sMo=r(uZr,"QDQBertForMaskedLM"),uZr.forEach(t),lMo=r(jCe," (QDQBert model)"),jCe.forEach(t),iMo=i(N),P2=n(N,"LI",{});var DCe=s(P2);Tse=n(DCe,"STRONG",{});var bZr=s(Tse);dMo=r(bZr,"reformer"),bZr.forEach(t),cMo=r(DCe," \u2014 "),iq=n(DCe,"A",{href:!0});var FZr=s(iq);fMo=r(FZr,"ReformerForMaskedLM"),FZr.forEach(t),mMo=r(DCe," (Reformer model)"),DCe.forEach(t),gMo=i(N),$2=n(N,"LI",{});var GCe=s($2);Mse=n(GCe,"STRONG",{});var vZr=s(Mse);hMo=r(vZr,"rembert"),vZr.forEach(t),pMo=r(GCe," \u2014 "),dq=n(GCe,"A",{href:!0});var TZr=s(dq);_Mo=r(TZr,"RemBertForMaskedLM"),TZr.forEach(t),uMo=r(GCe," (RemBERT model)"),GCe.forEach(t),bMo=i(N),I2=n(N,"LI",{});var OCe=s(I2);Ese=n(OCe,"STRONG",{});var MZr=s(Ese);FMo=r(MZr,"roberta"),MZr.forEach(t),vMo=r(OCe," \u2014 "),cq=n(OCe,"A",{href:!0});var EZr=s(cq);TMo=r(EZr,"RobertaForMaskedLM"),EZr.forEach(t),MMo=r(OCe," (RoBERTa model)"),OCe.forEach(t),EMo=i(N),q2=n(N,"LI",{});var VCe=s(q2);Cse=n(VCe,"STRONG",{});var CZr=s(Cse);CMo=r(CZr,"roformer"),CZr.forEach(t),wMo=r(VCe," \u2014 "),fq=n(VCe,"A",{href:!0});var wZr=s(fq);AMo=r(wZr,"RoFormerForMaskedLM"),wZr.forEach(t),yMo=r(VCe," (RoFormer model)"),VCe.forEach(t),LMo=i(N),N2=n(N,"LI",{});var XCe=s(N2);wse=n(XCe,"STRONG",{});var AZr=s(wse);xMo=r(AZr,"squeezebert"),AZr.forEach(t),kMo=r(XCe," \u2014 "),mq=n(XCe,"A",{href:!0});var yZr=s(mq);SMo=r(yZr,"SqueezeBertForMaskedLM"),yZr.forEach(t),RMo=r(XCe," (SqueezeBERT model)"),XCe.forEach(t),BMo=i(N),j2=n(N,"LI",{});var zCe=s(j2);Ase=n(zCe,"STRONG",{});var LZr=s(Ase);PMo=r(LZr,"tapas"),LZr.forEach(t),$Mo=r(zCe," \u2014 "),gq=n(zCe,"A",{href:!0});var xZr=s(gq);IMo=r(xZr,"TapasForMaskedLM"),xZr.forEach(t),qMo=r(zCe," (TAPAS model)"),zCe.forEach(t),NMo=i(N),D2=n(N,"LI",{});var QCe=s(D2);yse=n(QCe,"STRONG",{});var kZr=s(yse);jMo=r(kZr,"wav2vec2"),kZr.forEach(t),DMo=r(QCe," \u2014 "),Lse=n(QCe,"CODE",{});var SZr=s(Lse);GMo=r(SZr,"Wav2Vec2ForMaskedLM"),SZr.forEach(t),OMo=r(QCe," (Wav2Vec2 model)"),QCe.forEach(t),VMo=i(N),G2=n(N,"LI",{});var WCe=s(G2);xse=n(WCe,"STRONG",{});var RZr=s(xse);XMo=r(RZr,"xlm"),RZr.forEach(t),zMo=r(WCe," \u2014 "),hq=n(WCe,"A",{href:!0});var BZr=s(hq);QMo=r(BZr,"XLMWithLMHeadModel"),BZr.forEach(t),WMo=r(WCe," (XLM model)"),WCe.forEach(t),HMo=i(N),O2=n(N,"LI",{});var HCe=s(O2);kse=n(HCe,"STRONG",{});var PZr=s(kse);UMo=r(PZr,"xlm-roberta"),PZr.forEach(t),JMo=r(HCe," \u2014 "),pq=n(HCe,"A",{href:!0});var $Zr=s(pq);YMo=r($Zr,"XLMRobertaForMaskedLM"),$Zr.forEach(t),KMo=r(HCe," (XLM-RoBERTa model)"),HCe.forEach(t),ZMo=i(N),V2=n(N,"LI",{});var UCe=s(V2);Sse=n(UCe,"STRONG",{});var IZr=s(Sse);e4o=r(IZr,"xlm-roberta-xl"),IZr.forEach(t),o4o=r(UCe," \u2014 "),_q=n(UCe,"A",{href:!0});var qZr=s(_q);r4o=r(qZr,"XLMRobertaXLForMaskedLM"),qZr.forEach(t),t4o=r(UCe," (XLM-RoBERTa-XL model)"),UCe.forEach(t),a4o=i(N),X2=n(N,"LI",{});var JCe=s(X2);Rse=n(JCe,"STRONG",{});var NZr=s(Rse);n4o=r(NZr,"yoso"),NZr.forEach(t),s4o=r(JCe," \u2014 "),uq=n(JCe,"A",{href:!0});var jZr=s(uq);l4o=r(jZr,"YosoForMaskedLM"),jZr.forEach(t),i4o=r(JCe," (YOSO model)"),JCe.forEach(t),N.forEach(t),d4o=i(Vt),z2=n(Vt,"P",{});var YCe=s(z2);c4o=r(YCe,"The model is set in evaluation mode by default using "),Bse=n(YCe,"CODE",{});var DZr=s(Bse);f4o=r(DZr,"model.eval()"),DZr.forEach(t),m4o=r(YCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pse=n(YCe,"CODE",{});var GZr=s(Pse);g4o=r(GZr,"model.train()"),GZr.forEach(t),YCe.forEach(t),h4o=i(Vt),$se=n(Vt,"P",{});var OZr=s($se);p4o=r(OZr,"Examples:"),OZr.forEach(t),_4o=i(Vt),m(N3.$$.fragment,Vt),Vt.forEach(t),Zs.forEach(t),pBe=i(c),dd=n(c,"H2",{class:!0});var C$e=s(dd);Q2=n(C$e,"A",{id:!0,class:!0,href:!0});var VZr=s(Q2);Ise=n(VZr,"SPAN",{});var XZr=s(Ise);m(j3.$$.fragment,XZr),XZr.forEach(t),VZr.forEach(t),u4o=i(C$e),qse=n(C$e,"SPAN",{});var zZr=s(qse);b4o=r(zZr,"AutoModelForSeq2SeqLM"),zZr.forEach(t),C$e.forEach(t),_Be=i(c),er=n(c,"DIV",{class:!0});var ol=s(er);m(D3.$$.fragment,ol),F4o=i(ol),cd=n(ol,"P",{});var qU=s(cd);v4o=r(qU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bq=n(qU,"A",{href:!0});var QZr=s(bq);T4o=r(QZr,"from_pretrained()"),QZr.forEach(t),M4o=r(qU," class method or the "),Fq=n(qU,"A",{href:!0});var WZr=s(Fq);E4o=r(WZr,"from_config()"),WZr.forEach(t),C4o=r(qU,` class
method.`),qU.forEach(t),w4o=i(ol),G3=n(ol,"P",{});var w$e=s(G3);A4o=r(w$e,"This class cannot be instantiated directly using "),Nse=n(w$e,"CODE",{});var HZr=s(Nse);y4o=r(HZr,"__init__()"),HZr.forEach(t),L4o=r(w$e," (throws an error)."),w$e.forEach(t),x4o=i(ol),Hr=n(ol,"DIV",{class:!0});var rl=s(Hr);m(O3.$$.fragment,rl),k4o=i(rl),jse=n(rl,"P",{});var UZr=s(jse);S4o=r(UZr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),UZr.forEach(t),R4o=i(rl),fd=n(rl,"P",{});var NU=s(fd);B4o=r(NU,`Note:
Loading a model from its configuration file does `),Dse=n(NU,"STRONG",{});var JZr=s(Dse);P4o=r(JZr,"not"),JZr.forEach(t),$4o=r(NU,` load the model weights. It only affects the
model\u2019s configuration. Use `),vq=n(NU,"A",{href:!0});var YZr=s(vq);I4o=r(YZr,"from_pretrained()"),YZr.forEach(t),q4o=r(NU," to load the model weights."),NU.forEach(t),N4o=i(rl),Gse=n(rl,"P",{});var KZr=s(Gse);j4o=r(KZr,"Examples:"),KZr.forEach(t),D4o=i(rl),m(V3.$$.fragment,rl),rl.forEach(t),G4o=i(ol),Oe=n(ol,"DIV",{class:!0});var Xt=s(Oe);m(X3.$$.fragment,Xt),O4o=i(Xt),Ose=n(Xt,"P",{});var ZZr=s(Ose);V4o=r(ZZr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ZZr.forEach(t),X4o=i(Xt),Ha=n(Xt,"P",{});var jE=s(Ha);z4o=r(jE,"The model class to instantiate is selected based on the "),Vse=n(jE,"CODE",{});var eet=s(Vse);Q4o=r(eet,"model_type"),eet.forEach(t),W4o=r(jE,` property of the config object (either
passed as an argument or loaded from `),Xse=n(jE,"CODE",{});var oet=s(Xse);H4o=r(oet,"pretrained_model_name_or_path"),oet.forEach(t),U4o=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zse=n(jE,"CODE",{});var ret=s(zse);J4o=r(ret,"pretrained_model_name_or_path"),ret.forEach(t),Y4o=r(jE,":"),jE.forEach(t),K4o=i(Xt),ae=n(Xt,"UL",{});var le=s(ae);W2=n(le,"LI",{});var KCe=s(W2);Qse=n(KCe,"STRONG",{});var tet=s(Qse);Z4o=r(tet,"bart"),tet.forEach(t),eEo=r(KCe," \u2014 "),Tq=n(KCe,"A",{href:!0});var aet=s(Tq);oEo=r(aet,"BartForConditionalGeneration"),aet.forEach(t),rEo=r(KCe," (BART model)"),KCe.forEach(t),tEo=i(le),H2=n(le,"LI",{});var ZCe=s(H2);Wse=n(ZCe,"STRONG",{});var net=s(Wse);aEo=r(net,"bigbird_pegasus"),net.forEach(t),nEo=r(ZCe," \u2014 "),Mq=n(ZCe,"A",{href:!0});var set=s(Mq);sEo=r(set,"BigBirdPegasusForConditionalGeneration"),set.forEach(t),lEo=r(ZCe," (BigBirdPegasus model)"),ZCe.forEach(t),iEo=i(le),U2=n(le,"LI",{});var ewe=s(U2);Hse=n(ewe,"STRONG",{});var iet=s(Hse);dEo=r(iet,"blenderbot"),iet.forEach(t),cEo=r(ewe," \u2014 "),Eq=n(ewe,"A",{href:!0});var det=s(Eq);fEo=r(det,"BlenderbotForConditionalGeneration"),det.forEach(t),mEo=r(ewe," (Blenderbot model)"),ewe.forEach(t),gEo=i(le),J2=n(le,"LI",{});var owe=s(J2);Use=n(owe,"STRONG",{});var cet=s(Use);hEo=r(cet,"blenderbot-small"),cet.forEach(t),pEo=r(owe," \u2014 "),Cq=n(owe,"A",{href:!0});var fet=s(Cq);_Eo=r(fet,"BlenderbotSmallForConditionalGeneration"),fet.forEach(t),uEo=r(owe," (BlenderbotSmall model)"),owe.forEach(t),bEo=i(le),Y2=n(le,"LI",{});var rwe=s(Y2);Jse=n(rwe,"STRONG",{});var met=s(Jse);FEo=r(met,"encoder-decoder"),met.forEach(t),vEo=r(rwe," \u2014 "),wq=n(rwe,"A",{href:!0});var get=s(wq);TEo=r(get,"EncoderDecoderModel"),get.forEach(t),MEo=r(rwe," (Encoder decoder model)"),rwe.forEach(t),EEo=i(le),K2=n(le,"LI",{});var twe=s(K2);Yse=n(twe,"STRONG",{});var het=s(Yse);CEo=r(het,"fsmt"),het.forEach(t),wEo=r(twe," \u2014 "),Aq=n(twe,"A",{href:!0});var pet=s(Aq);AEo=r(pet,"FSMTForConditionalGeneration"),pet.forEach(t),yEo=r(twe," (FairSeq Machine-Translation model)"),twe.forEach(t),LEo=i(le),Z2=n(le,"LI",{});var awe=s(Z2);Kse=n(awe,"STRONG",{});var _et=s(Kse);xEo=r(_et,"led"),_et.forEach(t),kEo=r(awe," \u2014 "),yq=n(awe,"A",{href:!0});var uet=s(yq);SEo=r(uet,"LEDForConditionalGeneration"),uet.forEach(t),REo=r(awe," (LED model)"),awe.forEach(t),BEo=i(le),e1=n(le,"LI",{});var nwe=s(e1);Zse=n(nwe,"STRONG",{});var bet=s(Zse);PEo=r(bet,"longt5"),bet.forEach(t),$Eo=r(nwe," \u2014 "),Lq=n(nwe,"A",{href:!0});var Fet=s(Lq);IEo=r(Fet,"LongT5ForConditionalGeneration"),Fet.forEach(t),qEo=r(nwe," (LongT5 model)"),nwe.forEach(t),NEo=i(le),o1=n(le,"LI",{});var swe=s(o1);ele=n(swe,"STRONG",{});var vet=s(ele);jEo=r(vet,"m2m_100"),vet.forEach(t),DEo=r(swe," \u2014 "),xq=n(swe,"A",{href:!0});var Tet=s(xq);GEo=r(Tet,"M2M100ForConditionalGeneration"),Tet.forEach(t),OEo=r(swe," (M2M100 model)"),swe.forEach(t),VEo=i(le),r1=n(le,"LI",{});var lwe=s(r1);ole=n(lwe,"STRONG",{});var Met=s(ole);XEo=r(Met,"marian"),Met.forEach(t),zEo=r(lwe," \u2014 "),kq=n(lwe,"A",{href:!0});var Eet=s(kq);QEo=r(Eet,"MarianMTModel"),Eet.forEach(t),WEo=r(lwe," (Marian model)"),lwe.forEach(t),HEo=i(le),t1=n(le,"LI",{});var iwe=s(t1);rle=n(iwe,"STRONG",{});var Cet=s(rle);UEo=r(Cet,"mbart"),Cet.forEach(t),JEo=r(iwe," \u2014 "),Sq=n(iwe,"A",{href:!0});var wet=s(Sq);YEo=r(wet,"MBartForConditionalGeneration"),wet.forEach(t),KEo=r(iwe," (mBART model)"),iwe.forEach(t),ZEo=i(le),a1=n(le,"LI",{});var dwe=s(a1);tle=n(dwe,"STRONG",{});var Aet=s(tle);e5o=r(Aet,"mt5"),Aet.forEach(t),o5o=r(dwe," \u2014 "),Rq=n(dwe,"A",{href:!0});var yet=s(Rq);r5o=r(yet,"MT5ForConditionalGeneration"),yet.forEach(t),t5o=r(dwe," (mT5 model)"),dwe.forEach(t),a5o=i(le),n1=n(le,"LI",{});var cwe=s(n1);ale=n(cwe,"STRONG",{});var Let=s(ale);n5o=r(Let,"pegasus"),Let.forEach(t),s5o=r(cwe," \u2014 "),Bq=n(cwe,"A",{href:!0});var xet=s(Bq);l5o=r(xet,"PegasusForConditionalGeneration"),xet.forEach(t),i5o=r(cwe," (Pegasus model)"),cwe.forEach(t),d5o=i(le),s1=n(le,"LI",{});var fwe=s(s1);nle=n(fwe,"STRONG",{});var ket=s(nle);c5o=r(ket,"plbart"),ket.forEach(t),f5o=r(fwe," \u2014 "),Pq=n(fwe,"A",{href:!0});var Set=s(Pq);m5o=r(Set,"PLBartForConditionalGeneration"),Set.forEach(t),g5o=r(fwe," (PLBart model)"),fwe.forEach(t),h5o=i(le),l1=n(le,"LI",{});var mwe=s(l1);sle=n(mwe,"STRONG",{});var Ret=s(sle);p5o=r(Ret,"prophetnet"),Ret.forEach(t),_5o=r(mwe," \u2014 "),$q=n(mwe,"A",{href:!0});var Bet=s($q);u5o=r(Bet,"ProphetNetForConditionalGeneration"),Bet.forEach(t),b5o=r(mwe," (ProphetNet model)"),mwe.forEach(t),F5o=i(le),i1=n(le,"LI",{});var gwe=s(i1);lle=n(gwe,"STRONG",{});var Pet=s(lle);v5o=r(Pet,"t5"),Pet.forEach(t),T5o=r(gwe," \u2014 "),Iq=n(gwe,"A",{href:!0});var $et=s(Iq);M5o=r($et,"T5ForConditionalGeneration"),$et.forEach(t),E5o=r(gwe," (T5 model)"),gwe.forEach(t),C5o=i(le),d1=n(le,"LI",{});var hwe=s(d1);ile=n(hwe,"STRONG",{});var Iet=s(ile);w5o=r(Iet,"tapex"),Iet.forEach(t),A5o=r(hwe," \u2014 "),qq=n(hwe,"A",{href:!0});var qet=s(qq);y5o=r(qet,"BartForConditionalGeneration"),qet.forEach(t),L5o=r(hwe," (TAPEX model)"),hwe.forEach(t),x5o=i(le),c1=n(le,"LI",{});var pwe=s(c1);dle=n(pwe,"STRONG",{});var Net=s(dle);k5o=r(Net,"xlm-prophetnet"),Net.forEach(t),S5o=r(pwe," \u2014 "),Nq=n(pwe,"A",{href:!0});var jet=s(Nq);R5o=r(jet,"XLMProphetNetForConditionalGeneration"),jet.forEach(t),B5o=r(pwe," (XLMProphetNet model)"),pwe.forEach(t),le.forEach(t),P5o=i(Xt),f1=n(Xt,"P",{});var _we=s(f1);$5o=r(_we,"The model is set in evaluation mode by default using "),cle=n(_we,"CODE",{});var Det=s(cle);I5o=r(Det,"model.eval()"),Det.forEach(t),q5o=r(_we,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fle=n(_we,"CODE",{});var Get=s(fle);N5o=r(Get,"model.train()"),Get.forEach(t),_we.forEach(t),j5o=i(Xt),mle=n(Xt,"P",{});var Oet=s(mle);D5o=r(Oet,"Examples:"),Oet.forEach(t),G5o=i(Xt),m(z3.$$.fragment,Xt),Xt.forEach(t),ol.forEach(t),uBe=i(c),md=n(c,"H2",{class:!0});var A$e=s(md);m1=n(A$e,"A",{id:!0,class:!0,href:!0});var Vet=s(m1);gle=n(Vet,"SPAN",{});var Xet=s(gle);m(Q3.$$.fragment,Xet),Xet.forEach(t),Vet.forEach(t),O5o=i(A$e),hle=n(A$e,"SPAN",{});var zet=s(hle);V5o=r(zet,"AutoModelForSequenceClassification"),zet.forEach(t),A$e.forEach(t),bBe=i(c),or=n(c,"DIV",{class:!0});var tl=s(or);m(W3.$$.fragment,tl),X5o=i(tl),gd=n(tl,"P",{});var jU=s(gd);z5o=r(jU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jq=n(jU,"A",{href:!0});var Qet=s(jq);Q5o=r(Qet,"from_pretrained()"),Qet.forEach(t),W5o=r(jU," class method or the "),Dq=n(jU,"A",{href:!0});var Wet=s(Dq);H5o=r(Wet,"from_config()"),Wet.forEach(t),U5o=r(jU,` class
method.`),jU.forEach(t),J5o=i(tl),H3=n(tl,"P",{});var y$e=s(H3);Y5o=r(y$e,"This class cannot be instantiated directly using "),ple=n(y$e,"CODE",{});var Het=s(ple);K5o=r(Het,"__init__()"),Het.forEach(t),Z5o=r(y$e," (throws an error)."),y$e.forEach(t),e3o=i(tl),Ur=n(tl,"DIV",{class:!0});var al=s(Ur);m(U3.$$.fragment,al),o3o=i(al),_le=n(al,"P",{});var Uet=s(_le);r3o=r(Uet,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Uet.forEach(t),t3o=i(al),hd=n(al,"P",{});var DU=s(hd);a3o=r(DU,`Note:
Loading a model from its configuration file does `),ule=n(DU,"STRONG",{});var Jet=s(ule);n3o=r(Jet,"not"),Jet.forEach(t),s3o=r(DU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gq=n(DU,"A",{href:!0});var Yet=s(Gq);l3o=r(Yet,"from_pretrained()"),Yet.forEach(t),i3o=r(DU," to load the model weights."),DU.forEach(t),d3o=i(al),ble=n(al,"P",{});var Ket=s(ble);c3o=r(Ket,"Examples:"),Ket.forEach(t),f3o=i(al),m(J3.$$.fragment,al),al.forEach(t),m3o=i(tl),Ve=n(tl,"DIV",{class:!0});var zt=s(Ve);m(Y3.$$.fragment,zt),g3o=i(zt),Fle=n(zt,"P",{});var Zet=s(Fle);h3o=r(Zet,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Zet.forEach(t),p3o=i(zt),Ua=n(zt,"P",{});var DE=s(Ua);_3o=r(DE,"The model class to instantiate is selected based on the "),vle=n(DE,"CODE",{});var eot=s(vle);u3o=r(eot,"model_type"),eot.forEach(t),b3o=r(DE,` property of the config object (either
passed as an argument or loaded from `),Tle=n(DE,"CODE",{});var oot=s(Tle);F3o=r(oot,"pretrained_model_name_or_path"),oot.forEach(t),v3o=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mle=n(DE,"CODE",{});var rot=s(Mle);T3o=r(rot,"pretrained_model_name_or_path"),rot.forEach(t),M3o=r(DE,":"),DE.forEach(t),E3o=i(zt),y=n(zt,"UL",{});var L=s(y);g1=n(L,"LI",{});var uwe=s(g1);Ele=n(uwe,"STRONG",{});var tot=s(Ele);C3o=r(tot,"albert"),tot.forEach(t),w3o=r(uwe," \u2014 "),Oq=n(uwe,"A",{href:!0});var aot=s(Oq);A3o=r(aot,"AlbertForSequenceClassification"),aot.forEach(t),y3o=r(uwe," (ALBERT model)"),uwe.forEach(t),L3o=i(L),h1=n(L,"LI",{});var bwe=s(h1);Cle=n(bwe,"STRONG",{});var not=s(Cle);x3o=r(not,"bart"),not.forEach(t),k3o=r(bwe," \u2014 "),Vq=n(bwe,"A",{href:!0});var sot=s(Vq);S3o=r(sot,"BartForSequenceClassification"),sot.forEach(t),R3o=r(bwe," (BART model)"),bwe.forEach(t),B3o=i(L),p1=n(L,"LI",{});var Fwe=s(p1);wle=n(Fwe,"STRONG",{});var lot=s(wle);P3o=r(lot,"bert"),lot.forEach(t),$3o=r(Fwe," \u2014 "),Xq=n(Fwe,"A",{href:!0});var iot=s(Xq);I3o=r(iot,"BertForSequenceClassification"),iot.forEach(t),q3o=r(Fwe," (BERT model)"),Fwe.forEach(t),N3o=i(L),_1=n(L,"LI",{});var vwe=s(_1);Ale=n(vwe,"STRONG",{});var dot=s(Ale);j3o=r(dot,"big_bird"),dot.forEach(t),D3o=r(vwe," \u2014 "),zq=n(vwe,"A",{href:!0});var cot=s(zq);G3o=r(cot,"BigBirdForSequenceClassification"),cot.forEach(t),O3o=r(vwe," (BigBird model)"),vwe.forEach(t),V3o=i(L),u1=n(L,"LI",{});var Twe=s(u1);yle=n(Twe,"STRONG",{});var fot=s(yle);X3o=r(fot,"bigbird_pegasus"),fot.forEach(t),z3o=r(Twe," \u2014 "),Qq=n(Twe,"A",{href:!0});var mot=s(Qq);Q3o=r(mot,"BigBirdPegasusForSequenceClassification"),mot.forEach(t),W3o=r(Twe," (BigBirdPegasus model)"),Twe.forEach(t),H3o=i(L),b1=n(L,"LI",{});var Mwe=s(b1);Lle=n(Mwe,"STRONG",{});var got=s(Lle);U3o=r(got,"camembert"),got.forEach(t),J3o=r(Mwe," \u2014 "),Wq=n(Mwe,"A",{href:!0});var hot=s(Wq);Y3o=r(hot,"CamembertForSequenceClassification"),hot.forEach(t),K3o=r(Mwe," (CamemBERT model)"),Mwe.forEach(t),Z3o=i(L),F1=n(L,"LI",{});var Ewe=s(F1);xle=n(Ewe,"STRONG",{});var pot=s(xle);eCo=r(pot,"canine"),pot.forEach(t),oCo=r(Ewe," \u2014 "),Hq=n(Ewe,"A",{href:!0});var _ot=s(Hq);rCo=r(_ot,"CanineForSequenceClassification"),_ot.forEach(t),tCo=r(Ewe," (Canine model)"),Ewe.forEach(t),aCo=i(L),v1=n(L,"LI",{});var Cwe=s(v1);kle=n(Cwe,"STRONG",{});var uot=s(kle);nCo=r(uot,"convbert"),uot.forEach(t),sCo=r(Cwe," \u2014 "),Uq=n(Cwe,"A",{href:!0});var bot=s(Uq);lCo=r(bot,"ConvBertForSequenceClassification"),bot.forEach(t),iCo=r(Cwe," (ConvBERT model)"),Cwe.forEach(t),dCo=i(L),T1=n(L,"LI",{});var wwe=s(T1);Sle=n(wwe,"STRONG",{});var Fot=s(Sle);cCo=r(Fot,"ctrl"),Fot.forEach(t),fCo=r(wwe," \u2014 "),Jq=n(wwe,"A",{href:!0});var vot=s(Jq);mCo=r(vot,"CTRLForSequenceClassification"),vot.forEach(t),gCo=r(wwe," (CTRL model)"),wwe.forEach(t),hCo=i(L),M1=n(L,"LI",{});var Awe=s(M1);Rle=n(Awe,"STRONG",{});var Tot=s(Rle);pCo=r(Tot,"data2vec-text"),Tot.forEach(t),_Co=r(Awe," \u2014 "),Yq=n(Awe,"A",{href:!0});var Mot=s(Yq);uCo=r(Mot,"Data2VecTextForSequenceClassification"),Mot.forEach(t),bCo=r(Awe," (Data2VecText model)"),Awe.forEach(t),FCo=i(L),E1=n(L,"LI",{});var ywe=s(E1);Ble=n(ywe,"STRONG",{});var Eot=s(Ble);vCo=r(Eot,"deberta"),Eot.forEach(t),TCo=r(ywe," \u2014 "),Kq=n(ywe,"A",{href:!0});var Cot=s(Kq);MCo=r(Cot,"DebertaForSequenceClassification"),Cot.forEach(t),ECo=r(ywe," (DeBERTa model)"),ywe.forEach(t),CCo=i(L),C1=n(L,"LI",{});var Lwe=s(C1);Ple=n(Lwe,"STRONG",{});var wot=s(Ple);wCo=r(wot,"deberta-v2"),wot.forEach(t),ACo=r(Lwe," \u2014 "),Zq=n(Lwe,"A",{href:!0});var Aot=s(Zq);yCo=r(Aot,"DebertaV2ForSequenceClassification"),Aot.forEach(t),LCo=r(Lwe," (DeBERTa-v2 model)"),Lwe.forEach(t),xCo=i(L),w1=n(L,"LI",{});var xwe=s(w1);$le=n(xwe,"STRONG",{});var yot=s($le);kCo=r(yot,"distilbert"),yot.forEach(t),SCo=r(xwe," \u2014 "),eN=n(xwe,"A",{href:!0});var Lot=s(eN);RCo=r(Lot,"DistilBertForSequenceClassification"),Lot.forEach(t),BCo=r(xwe," (DistilBERT model)"),xwe.forEach(t),PCo=i(L),A1=n(L,"LI",{});var kwe=s(A1);Ile=n(kwe,"STRONG",{});var xot=s(Ile);$Co=r(xot,"electra"),xot.forEach(t),ICo=r(kwe," \u2014 "),oN=n(kwe,"A",{href:!0});var kot=s(oN);qCo=r(kot,"ElectraForSequenceClassification"),kot.forEach(t),NCo=r(kwe," (ELECTRA model)"),kwe.forEach(t),jCo=i(L),y1=n(L,"LI",{});var Swe=s(y1);qle=n(Swe,"STRONG",{});var Sot=s(qle);DCo=r(Sot,"flaubert"),Sot.forEach(t),GCo=r(Swe," \u2014 "),rN=n(Swe,"A",{href:!0});var Rot=s(rN);OCo=r(Rot,"FlaubertForSequenceClassification"),Rot.forEach(t),VCo=r(Swe," (FlauBERT model)"),Swe.forEach(t),XCo=i(L),L1=n(L,"LI",{});var Rwe=s(L1);Nle=n(Rwe,"STRONG",{});var Bot=s(Nle);zCo=r(Bot,"fnet"),Bot.forEach(t),QCo=r(Rwe," \u2014 "),tN=n(Rwe,"A",{href:!0});var Pot=s(tN);WCo=r(Pot,"FNetForSequenceClassification"),Pot.forEach(t),HCo=r(Rwe," (FNet model)"),Rwe.forEach(t),UCo=i(L),x1=n(L,"LI",{});var Bwe=s(x1);jle=n(Bwe,"STRONG",{});var $ot=s(jle);JCo=r($ot,"funnel"),$ot.forEach(t),YCo=r(Bwe," \u2014 "),aN=n(Bwe,"A",{href:!0});var Iot=s(aN);KCo=r(Iot,"FunnelForSequenceClassification"),Iot.forEach(t),ZCo=r(Bwe," (Funnel Transformer model)"),Bwe.forEach(t),ewo=i(L),k1=n(L,"LI",{});var Pwe=s(k1);Dle=n(Pwe,"STRONG",{});var qot=s(Dle);owo=r(qot,"gpt2"),qot.forEach(t),rwo=r(Pwe," \u2014 "),nN=n(Pwe,"A",{href:!0});var Not=s(nN);two=r(Not,"GPT2ForSequenceClassification"),Not.forEach(t),awo=r(Pwe," (OpenAI GPT-2 model)"),Pwe.forEach(t),nwo=i(L),S1=n(L,"LI",{});var $we=s(S1);Gle=n($we,"STRONG",{});var jot=s(Gle);swo=r(jot,"gpt_neo"),jot.forEach(t),lwo=r($we," \u2014 "),sN=n($we,"A",{href:!0});var Dot=s(sN);iwo=r(Dot,"GPTNeoForSequenceClassification"),Dot.forEach(t),dwo=r($we," (GPT Neo model)"),$we.forEach(t),cwo=i(L),R1=n(L,"LI",{});var Iwe=s(R1);Ole=n(Iwe,"STRONG",{});var Got=s(Ole);fwo=r(Got,"gptj"),Got.forEach(t),mwo=r(Iwe," \u2014 "),lN=n(Iwe,"A",{href:!0});var Oot=s(lN);gwo=r(Oot,"GPTJForSequenceClassification"),Oot.forEach(t),hwo=r(Iwe," (GPT-J model)"),Iwe.forEach(t),pwo=i(L),B1=n(L,"LI",{});var qwe=s(B1);Vle=n(qwe,"STRONG",{});var Vot=s(Vle);_wo=r(Vot,"ibert"),Vot.forEach(t),uwo=r(qwe," \u2014 "),iN=n(qwe,"A",{href:!0});var Xot=s(iN);bwo=r(Xot,"IBertForSequenceClassification"),Xot.forEach(t),Fwo=r(qwe," (I-BERT model)"),qwe.forEach(t),vwo=i(L),P1=n(L,"LI",{});var Nwe=s(P1);Xle=n(Nwe,"STRONG",{});var zot=s(Xle);Two=r(zot,"layoutlm"),zot.forEach(t),Mwo=r(Nwe," \u2014 "),dN=n(Nwe,"A",{href:!0});var Qot=s(dN);Ewo=r(Qot,"LayoutLMForSequenceClassification"),Qot.forEach(t),Cwo=r(Nwe," (LayoutLM model)"),Nwe.forEach(t),wwo=i(L),$1=n(L,"LI",{});var jwe=s($1);zle=n(jwe,"STRONG",{});var Wot=s(zle);Awo=r(Wot,"layoutlmv2"),Wot.forEach(t),ywo=r(jwe," \u2014 "),cN=n(jwe,"A",{href:!0});var Hot=s(cN);Lwo=r(Hot,"LayoutLMv2ForSequenceClassification"),Hot.forEach(t),xwo=r(jwe," (LayoutLMv2 model)"),jwe.forEach(t),kwo=i(L),I1=n(L,"LI",{});var Dwe=s(I1);Qle=n(Dwe,"STRONG",{});var Uot=s(Qle);Swo=r(Uot,"led"),Uot.forEach(t),Rwo=r(Dwe," \u2014 "),fN=n(Dwe,"A",{href:!0});var Jot=s(fN);Bwo=r(Jot,"LEDForSequenceClassification"),Jot.forEach(t),Pwo=r(Dwe," (LED model)"),Dwe.forEach(t),$wo=i(L),q1=n(L,"LI",{});var Gwe=s(q1);Wle=n(Gwe,"STRONG",{});var Yot=s(Wle);Iwo=r(Yot,"longformer"),Yot.forEach(t),qwo=r(Gwe," \u2014 "),mN=n(Gwe,"A",{href:!0});var Kot=s(mN);Nwo=r(Kot,"LongformerForSequenceClassification"),Kot.forEach(t),jwo=r(Gwe," (Longformer model)"),Gwe.forEach(t),Dwo=i(L),N1=n(L,"LI",{});var Owe=s(N1);Hle=n(Owe,"STRONG",{});var Zot=s(Hle);Gwo=r(Zot,"mbart"),Zot.forEach(t),Owo=r(Owe," \u2014 "),gN=n(Owe,"A",{href:!0});var ert=s(gN);Vwo=r(ert,"MBartForSequenceClassification"),ert.forEach(t),Xwo=r(Owe," (mBART model)"),Owe.forEach(t),zwo=i(L),j1=n(L,"LI",{});var Vwe=s(j1);Ule=n(Vwe,"STRONG",{});var ort=s(Ule);Qwo=r(ort,"megatron-bert"),ort.forEach(t),Wwo=r(Vwe," \u2014 "),hN=n(Vwe,"A",{href:!0});var rrt=s(hN);Hwo=r(rrt,"MegatronBertForSequenceClassification"),rrt.forEach(t),Uwo=r(Vwe," (MegatronBert model)"),Vwe.forEach(t),Jwo=i(L),D1=n(L,"LI",{});var Xwe=s(D1);Jle=n(Xwe,"STRONG",{});var trt=s(Jle);Ywo=r(trt,"mobilebert"),trt.forEach(t),Kwo=r(Xwe," \u2014 "),pN=n(Xwe,"A",{href:!0});var art=s(pN);Zwo=r(art,"MobileBertForSequenceClassification"),art.forEach(t),eAo=r(Xwe," (MobileBERT model)"),Xwe.forEach(t),oAo=i(L),G1=n(L,"LI",{});var zwe=s(G1);Yle=n(zwe,"STRONG",{});var nrt=s(Yle);rAo=r(nrt,"mpnet"),nrt.forEach(t),tAo=r(zwe," \u2014 "),_N=n(zwe,"A",{href:!0});var srt=s(_N);aAo=r(srt,"MPNetForSequenceClassification"),srt.forEach(t),nAo=r(zwe," (MPNet model)"),zwe.forEach(t),sAo=i(L),O1=n(L,"LI",{});var Qwe=s(O1);Kle=n(Qwe,"STRONG",{});var lrt=s(Kle);lAo=r(lrt,"nystromformer"),lrt.forEach(t),iAo=r(Qwe," \u2014 "),uN=n(Qwe,"A",{href:!0});var irt=s(uN);dAo=r(irt,"NystromformerForSequenceClassification"),irt.forEach(t),cAo=r(Qwe," (Nystromformer model)"),Qwe.forEach(t),fAo=i(L),V1=n(L,"LI",{});var Wwe=s(V1);Zle=n(Wwe,"STRONG",{});var drt=s(Zle);mAo=r(drt,"openai-gpt"),drt.forEach(t),gAo=r(Wwe," \u2014 "),bN=n(Wwe,"A",{href:!0});var crt=s(bN);hAo=r(crt,"OpenAIGPTForSequenceClassification"),crt.forEach(t),pAo=r(Wwe," (OpenAI GPT model)"),Wwe.forEach(t),_Ao=i(L),X1=n(L,"LI",{});var Hwe=s(X1);eie=n(Hwe,"STRONG",{});var frt=s(eie);uAo=r(frt,"perceiver"),frt.forEach(t),bAo=r(Hwe," \u2014 "),FN=n(Hwe,"A",{href:!0});var mrt=s(FN);FAo=r(mrt,"PerceiverForSequenceClassification"),mrt.forEach(t),vAo=r(Hwe," (Perceiver model)"),Hwe.forEach(t),TAo=i(L),z1=n(L,"LI",{});var Uwe=s(z1);oie=n(Uwe,"STRONG",{});var grt=s(oie);MAo=r(grt,"plbart"),grt.forEach(t),EAo=r(Uwe," \u2014 "),vN=n(Uwe,"A",{href:!0});var hrt=s(vN);CAo=r(hrt,"PLBartForSequenceClassification"),hrt.forEach(t),wAo=r(Uwe," (PLBart model)"),Uwe.forEach(t),AAo=i(L),Q1=n(L,"LI",{});var Jwe=s(Q1);rie=n(Jwe,"STRONG",{});var prt=s(rie);yAo=r(prt,"qdqbert"),prt.forEach(t),LAo=r(Jwe," \u2014 "),TN=n(Jwe,"A",{href:!0});var _rt=s(TN);xAo=r(_rt,"QDQBertForSequenceClassification"),_rt.forEach(t),kAo=r(Jwe," (QDQBert model)"),Jwe.forEach(t),SAo=i(L),W1=n(L,"LI",{});var Ywe=s(W1);tie=n(Ywe,"STRONG",{});var urt=s(tie);RAo=r(urt,"reformer"),urt.forEach(t),BAo=r(Ywe," \u2014 "),MN=n(Ywe,"A",{href:!0});var brt=s(MN);PAo=r(brt,"ReformerForSequenceClassification"),brt.forEach(t),$Ao=r(Ywe," (Reformer model)"),Ywe.forEach(t),IAo=i(L),H1=n(L,"LI",{});var Kwe=s(H1);aie=n(Kwe,"STRONG",{});var Frt=s(aie);qAo=r(Frt,"rembert"),Frt.forEach(t),NAo=r(Kwe," \u2014 "),EN=n(Kwe,"A",{href:!0});var vrt=s(EN);jAo=r(vrt,"RemBertForSequenceClassification"),vrt.forEach(t),DAo=r(Kwe," (RemBERT model)"),Kwe.forEach(t),GAo=i(L),U1=n(L,"LI",{});var Zwe=s(U1);nie=n(Zwe,"STRONG",{});var Trt=s(nie);OAo=r(Trt,"roberta"),Trt.forEach(t),VAo=r(Zwe," \u2014 "),CN=n(Zwe,"A",{href:!0});var Mrt=s(CN);XAo=r(Mrt,"RobertaForSequenceClassification"),Mrt.forEach(t),zAo=r(Zwe," (RoBERTa model)"),Zwe.forEach(t),QAo=i(L),J1=n(L,"LI",{});var eAe=s(J1);sie=n(eAe,"STRONG",{});var Ert=s(sie);WAo=r(Ert,"roformer"),Ert.forEach(t),HAo=r(eAe," \u2014 "),wN=n(eAe,"A",{href:!0});var Crt=s(wN);UAo=r(Crt,"RoFormerForSequenceClassification"),Crt.forEach(t),JAo=r(eAe," (RoFormer model)"),eAe.forEach(t),YAo=i(L),Y1=n(L,"LI",{});var oAe=s(Y1);lie=n(oAe,"STRONG",{});var wrt=s(lie);KAo=r(wrt,"squeezebert"),wrt.forEach(t),ZAo=r(oAe," \u2014 "),AN=n(oAe,"A",{href:!0});var Art=s(AN);e0o=r(Art,"SqueezeBertForSequenceClassification"),Art.forEach(t),o0o=r(oAe," (SqueezeBERT model)"),oAe.forEach(t),r0o=i(L),K1=n(L,"LI",{});var rAe=s(K1);iie=n(rAe,"STRONG",{});var yrt=s(iie);t0o=r(yrt,"tapas"),yrt.forEach(t),a0o=r(rAe," \u2014 "),yN=n(rAe,"A",{href:!0});var Lrt=s(yN);n0o=r(Lrt,"TapasForSequenceClassification"),Lrt.forEach(t),s0o=r(rAe," (TAPAS model)"),rAe.forEach(t),l0o=i(L),Z1=n(L,"LI",{});var tAe=s(Z1);die=n(tAe,"STRONG",{});var xrt=s(die);i0o=r(xrt,"tapex"),xrt.forEach(t),d0o=r(tAe," \u2014 "),LN=n(tAe,"A",{href:!0});var krt=s(LN);c0o=r(krt,"BartForSequenceClassification"),krt.forEach(t),f0o=r(tAe," (TAPEX model)"),tAe.forEach(t),m0o=i(L),eb=n(L,"LI",{});var aAe=s(eb);cie=n(aAe,"STRONG",{});var Srt=s(cie);g0o=r(Srt,"transfo-xl"),Srt.forEach(t),h0o=r(aAe," \u2014 "),xN=n(aAe,"A",{href:!0});var Rrt=s(xN);p0o=r(Rrt,"TransfoXLForSequenceClassification"),Rrt.forEach(t),_0o=r(aAe," (Transformer-XL model)"),aAe.forEach(t),u0o=i(L),ob=n(L,"LI",{});var nAe=s(ob);fie=n(nAe,"STRONG",{});var Brt=s(fie);b0o=r(Brt,"xlm"),Brt.forEach(t),F0o=r(nAe," \u2014 "),kN=n(nAe,"A",{href:!0});var Prt=s(kN);v0o=r(Prt,"XLMForSequenceClassification"),Prt.forEach(t),T0o=r(nAe," (XLM model)"),nAe.forEach(t),M0o=i(L),rb=n(L,"LI",{});var sAe=s(rb);mie=n(sAe,"STRONG",{});var $rt=s(mie);E0o=r($rt,"xlm-roberta"),$rt.forEach(t),C0o=r(sAe," \u2014 "),SN=n(sAe,"A",{href:!0});var Irt=s(SN);w0o=r(Irt,"XLMRobertaForSequenceClassification"),Irt.forEach(t),A0o=r(sAe," (XLM-RoBERTa model)"),sAe.forEach(t),y0o=i(L),tb=n(L,"LI",{});var lAe=s(tb);gie=n(lAe,"STRONG",{});var qrt=s(gie);L0o=r(qrt,"xlm-roberta-xl"),qrt.forEach(t),x0o=r(lAe," \u2014 "),RN=n(lAe,"A",{href:!0});var Nrt=s(RN);k0o=r(Nrt,"XLMRobertaXLForSequenceClassification"),Nrt.forEach(t),S0o=r(lAe," (XLM-RoBERTa-XL model)"),lAe.forEach(t),R0o=i(L),ab=n(L,"LI",{});var iAe=s(ab);hie=n(iAe,"STRONG",{});var jrt=s(hie);B0o=r(jrt,"xlnet"),jrt.forEach(t),P0o=r(iAe," \u2014 "),BN=n(iAe,"A",{href:!0});var Drt=s(BN);$0o=r(Drt,"XLNetForSequenceClassification"),Drt.forEach(t),I0o=r(iAe," (XLNet model)"),iAe.forEach(t),q0o=i(L),nb=n(L,"LI",{});var dAe=s(nb);pie=n(dAe,"STRONG",{});var Grt=s(pie);N0o=r(Grt,"yoso"),Grt.forEach(t),j0o=r(dAe," \u2014 "),PN=n(dAe,"A",{href:!0});var Ort=s(PN);D0o=r(Ort,"YosoForSequenceClassification"),Ort.forEach(t),G0o=r(dAe," (YOSO model)"),dAe.forEach(t),L.forEach(t),O0o=i(zt),sb=n(zt,"P",{});var cAe=s(sb);V0o=r(cAe,"The model is set in evaluation mode by default using "),_ie=n(cAe,"CODE",{});var Vrt=s(_ie);X0o=r(Vrt,"model.eval()"),Vrt.forEach(t),z0o=r(cAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uie=n(cAe,"CODE",{});var Xrt=s(uie);Q0o=r(Xrt,"model.train()"),Xrt.forEach(t),cAe.forEach(t),W0o=i(zt),bie=n(zt,"P",{});var zrt=s(bie);H0o=r(zrt,"Examples:"),zrt.forEach(t),U0o=i(zt),m(K3.$$.fragment,zt),zt.forEach(t),tl.forEach(t),FBe=i(c),pd=n(c,"H2",{class:!0});var L$e=s(pd);lb=n(L$e,"A",{id:!0,class:!0,href:!0});var Qrt=s(lb);Fie=n(Qrt,"SPAN",{});var Wrt=s(Fie);m(Z3.$$.fragment,Wrt),Wrt.forEach(t),Qrt.forEach(t),J0o=i(L$e),vie=n(L$e,"SPAN",{});var Hrt=s(vie);Y0o=r(Hrt,"AutoModelForMultipleChoice"),Hrt.forEach(t),L$e.forEach(t),vBe=i(c),rr=n(c,"DIV",{class:!0});var nl=s(rr);m(eC.$$.fragment,nl),K0o=i(nl),_d=n(nl,"P",{});var GU=s(_d);Z0o=r(GU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$N=n(GU,"A",{href:!0});var Urt=s($N);eyo=r(Urt,"from_pretrained()"),Urt.forEach(t),oyo=r(GU," class method or the "),IN=n(GU,"A",{href:!0});var Jrt=s(IN);ryo=r(Jrt,"from_config()"),Jrt.forEach(t),tyo=r(GU,` class
method.`),GU.forEach(t),ayo=i(nl),oC=n(nl,"P",{});var x$e=s(oC);nyo=r(x$e,"This class cannot be instantiated directly using "),Tie=n(x$e,"CODE",{});var Yrt=s(Tie);syo=r(Yrt,"__init__()"),Yrt.forEach(t),lyo=r(x$e," (throws an error)."),x$e.forEach(t),iyo=i(nl),Jr=n(nl,"DIV",{class:!0});var sl=s(Jr);m(rC.$$.fragment,sl),dyo=i(sl),Mie=n(sl,"P",{});var Krt=s(Mie);cyo=r(Krt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Krt.forEach(t),fyo=i(sl),ud=n(sl,"P",{});var OU=s(ud);myo=r(OU,`Note:
Loading a model from its configuration file does `),Eie=n(OU,"STRONG",{});var Zrt=s(Eie);gyo=r(Zrt,"not"),Zrt.forEach(t),hyo=r(OU,` load the model weights. It only affects the
model\u2019s configuration. Use `),qN=n(OU,"A",{href:!0});var ett=s(qN);pyo=r(ett,"from_pretrained()"),ett.forEach(t),_yo=r(OU," to load the model weights."),OU.forEach(t),uyo=i(sl),Cie=n(sl,"P",{});var ott=s(Cie);byo=r(ott,"Examples:"),ott.forEach(t),Fyo=i(sl),m(tC.$$.fragment,sl),sl.forEach(t),vyo=i(nl),Xe=n(nl,"DIV",{class:!0});var Qt=s(Xe);m(aC.$$.fragment,Qt),Tyo=i(Qt),wie=n(Qt,"P",{});var rtt=s(wie);Myo=r(rtt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rtt.forEach(t),Eyo=i(Qt),Ja=n(Qt,"P",{});var GE=s(Ja);Cyo=r(GE,"The model class to instantiate is selected based on the "),Aie=n(GE,"CODE",{});var ttt=s(Aie);wyo=r(ttt,"model_type"),ttt.forEach(t),Ayo=r(GE,` property of the config object (either
passed as an argument or loaded from `),yie=n(GE,"CODE",{});var att=s(yie);yyo=r(att,"pretrained_model_name_or_path"),att.forEach(t),Lyo=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lie=n(GE,"CODE",{});var ntt=s(Lie);xyo=r(ntt,"pretrained_model_name_or_path"),ntt.forEach(t),kyo=r(GE,":"),GE.forEach(t),Syo=i(Qt),G=n(Qt,"UL",{});var O=s(G);ib=n(O,"LI",{});var fAe=s(ib);xie=n(fAe,"STRONG",{});var stt=s(xie);Ryo=r(stt,"albert"),stt.forEach(t),Byo=r(fAe," \u2014 "),NN=n(fAe,"A",{href:!0});var ltt=s(NN);Pyo=r(ltt,"AlbertForMultipleChoice"),ltt.forEach(t),$yo=r(fAe," (ALBERT model)"),fAe.forEach(t),Iyo=i(O),db=n(O,"LI",{});var mAe=s(db);kie=n(mAe,"STRONG",{});var itt=s(kie);qyo=r(itt,"bert"),itt.forEach(t),Nyo=r(mAe," \u2014 "),jN=n(mAe,"A",{href:!0});var dtt=s(jN);jyo=r(dtt,"BertForMultipleChoice"),dtt.forEach(t),Dyo=r(mAe," (BERT model)"),mAe.forEach(t),Gyo=i(O),cb=n(O,"LI",{});var gAe=s(cb);Sie=n(gAe,"STRONG",{});var ctt=s(Sie);Oyo=r(ctt,"big_bird"),ctt.forEach(t),Vyo=r(gAe," \u2014 "),DN=n(gAe,"A",{href:!0});var ftt=s(DN);Xyo=r(ftt,"BigBirdForMultipleChoice"),ftt.forEach(t),zyo=r(gAe," (BigBird model)"),gAe.forEach(t),Qyo=i(O),fb=n(O,"LI",{});var hAe=s(fb);Rie=n(hAe,"STRONG",{});var mtt=s(Rie);Wyo=r(mtt,"camembert"),mtt.forEach(t),Hyo=r(hAe," \u2014 "),GN=n(hAe,"A",{href:!0});var gtt=s(GN);Uyo=r(gtt,"CamembertForMultipleChoice"),gtt.forEach(t),Jyo=r(hAe," (CamemBERT model)"),hAe.forEach(t),Yyo=i(O),mb=n(O,"LI",{});var pAe=s(mb);Bie=n(pAe,"STRONG",{});var htt=s(Bie);Kyo=r(htt,"canine"),htt.forEach(t),Zyo=r(pAe," \u2014 "),ON=n(pAe,"A",{href:!0});var ptt=s(ON);eLo=r(ptt,"CanineForMultipleChoice"),ptt.forEach(t),oLo=r(pAe," (Canine model)"),pAe.forEach(t),rLo=i(O),gb=n(O,"LI",{});var _Ae=s(gb);Pie=n(_Ae,"STRONG",{});var _tt=s(Pie);tLo=r(_tt,"convbert"),_tt.forEach(t),aLo=r(_Ae," \u2014 "),VN=n(_Ae,"A",{href:!0});var utt=s(VN);nLo=r(utt,"ConvBertForMultipleChoice"),utt.forEach(t),sLo=r(_Ae," (ConvBERT model)"),_Ae.forEach(t),lLo=i(O),hb=n(O,"LI",{});var uAe=s(hb);$ie=n(uAe,"STRONG",{});var btt=s($ie);iLo=r(btt,"data2vec-text"),btt.forEach(t),dLo=r(uAe," \u2014 "),XN=n(uAe,"A",{href:!0});var Ftt=s(XN);cLo=r(Ftt,"Data2VecTextForMultipleChoice"),Ftt.forEach(t),fLo=r(uAe," (Data2VecText model)"),uAe.forEach(t),mLo=i(O),pb=n(O,"LI",{});var bAe=s(pb);Iie=n(bAe,"STRONG",{});var vtt=s(Iie);gLo=r(vtt,"distilbert"),vtt.forEach(t),hLo=r(bAe," \u2014 "),zN=n(bAe,"A",{href:!0});var Ttt=s(zN);pLo=r(Ttt,"DistilBertForMultipleChoice"),Ttt.forEach(t),_Lo=r(bAe," (DistilBERT model)"),bAe.forEach(t),uLo=i(O),_b=n(O,"LI",{});var FAe=s(_b);qie=n(FAe,"STRONG",{});var Mtt=s(qie);bLo=r(Mtt,"electra"),Mtt.forEach(t),FLo=r(FAe," \u2014 "),QN=n(FAe,"A",{href:!0});var Ett=s(QN);vLo=r(Ett,"ElectraForMultipleChoice"),Ett.forEach(t),TLo=r(FAe," (ELECTRA model)"),FAe.forEach(t),MLo=i(O),ub=n(O,"LI",{});var vAe=s(ub);Nie=n(vAe,"STRONG",{});var Ctt=s(Nie);ELo=r(Ctt,"flaubert"),Ctt.forEach(t),CLo=r(vAe," \u2014 "),WN=n(vAe,"A",{href:!0});var wtt=s(WN);wLo=r(wtt,"FlaubertForMultipleChoice"),wtt.forEach(t),ALo=r(vAe," (FlauBERT model)"),vAe.forEach(t),yLo=i(O),bb=n(O,"LI",{});var TAe=s(bb);jie=n(TAe,"STRONG",{});var Att=s(jie);LLo=r(Att,"fnet"),Att.forEach(t),xLo=r(TAe," \u2014 "),HN=n(TAe,"A",{href:!0});var ytt=s(HN);kLo=r(ytt,"FNetForMultipleChoice"),ytt.forEach(t),SLo=r(TAe," (FNet model)"),TAe.forEach(t),RLo=i(O),Fb=n(O,"LI",{});var MAe=s(Fb);Die=n(MAe,"STRONG",{});var Ltt=s(Die);BLo=r(Ltt,"funnel"),Ltt.forEach(t),PLo=r(MAe," \u2014 "),UN=n(MAe,"A",{href:!0});var xtt=s(UN);$Lo=r(xtt,"FunnelForMultipleChoice"),xtt.forEach(t),ILo=r(MAe," (Funnel Transformer model)"),MAe.forEach(t),qLo=i(O),vb=n(O,"LI",{});var EAe=s(vb);Gie=n(EAe,"STRONG",{});var ktt=s(Gie);NLo=r(ktt,"ibert"),ktt.forEach(t),jLo=r(EAe," \u2014 "),JN=n(EAe,"A",{href:!0});var Stt=s(JN);DLo=r(Stt,"IBertForMultipleChoice"),Stt.forEach(t),GLo=r(EAe," (I-BERT model)"),EAe.forEach(t),OLo=i(O),Tb=n(O,"LI",{});var CAe=s(Tb);Oie=n(CAe,"STRONG",{});var Rtt=s(Oie);VLo=r(Rtt,"longformer"),Rtt.forEach(t),XLo=r(CAe," \u2014 "),YN=n(CAe,"A",{href:!0});var Btt=s(YN);zLo=r(Btt,"LongformerForMultipleChoice"),Btt.forEach(t),QLo=r(CAe," (Longformer model)"),CAe.forEach(t),WLo=i(O),Mb=n(O,"LI",{});var wAe=s(Mb);Vie=n(wAe,"STRONG",{});var Ptt=s(Vie);HLo=r(Ptt,"megatron-bert"),Ptt.forEach(t),ULo=r(wAe," \u2014 "),KN=n(wAe,"A",{href:!0});var $tt=s(KN);JLo=r($tt,"MegatronBertForMultipleChoice"),$tt.forEach(t),YLo=r(wAe," (MegatronBert model)"),wAe.forEach(t),KLo=i(O),Eb=n(O,"LI",{});var AAe=s(Eb);Xie=n(AAe,"STRONG",{});var Itt=s(Xie);ZLo=r(Itt,"mobilebert"),Itt.forEach(t),e8o=r(AAe," \u2014 "),ZN=n(AAe,"A",{href:!0});var qtt=s(ZN);o8o=r(qtt,"MobileBertForMultipleChoice"),qtt.forEach(t),r8o=r(AAe," (MobileBERT model)"),AAe.forEach(t),t8o=i(O),Cb=n(O,"LI",{});var yAe=s(Cb);zie=n(yAe,"STRONG",{});var Ntt=s(zie);a8o=r(Ntt,"mpnet"),Ntt.forEach(t),n8o=r(yAe," \u2014 "),ej=n(yAe,"A",{href:!0});var jtt=s(ej);s8o=r(jtt,"MPNetForMultipleChoice"),jtt.forEach(t),l8o=r(yAe," (MPNet model)"),yAe.forEach(t),i8o=i(O),wb=n(O,"LI",{});var LAe=s(wb);Qie=n(LAe,"STRONG",{});var Dtt=s(Qie);d8o=r(Dtt,"nystromformer"),Dtt.forEach(t),c8o=r(LAe," \u2014 "),oj=n(LAe,"A",{href:!0});var Gtt=s(oj);f8o=r(Gtt,"NystromformerForMultipleChoice"),Gtt.forEach(t),m8o=r(LAe," (Nystromformer model)"),LAe.forEach(t),g8o=i(O),Ab=n(O,"LI",{});var xAe=s(Ab);Wie=n(xAe,"STRONG",{});var Ott=s(Wie);h8o=r(Ott,"qdqbert"),Ott.forEach(t),p8o=r(xAe," \u2014 "),rj=n(xAe,"A",{href:!0});var Vtt=s(rj);_8o=r(Vtt,"QDQBertForMultipleChoice"),Vtt.forEach(t),u8o=r(xAe," (QDQBert model)"),xAe.forEach(t),b8o=i(O),yb=n(O,"LI",{});var kAe=s(yb);Hie=n(kAe,"STRONG",{});var Xtt=s(Hie);F8o=r(Xtt,"rembert"),Xtt.forEach(t),v8o=r(kAe," \u2014 "),tj=n(kAe,"A",{href:!0});var ztt=s(tj);T8o=r(ztt,"RemBertForMultipleChoice"),ztt.forEach(t),M8o=r(kAe," (RemBERT model)"),kAe.forEach(t),E8o=i(O),Lb=n(O,"LI",{});var SAe=s(Lb);Uie=n(SAe,"STRONG",{});var Qtt=s(Uie);C8o=r(Qtt,"roberta"),Qtt.forEach(t),w8o=r(SAe," \u2014 "),aj=n(SAe,"A",{href:!0});var Wtt=s(aj);A8o=r(Wtt,"RobertaForMultipleChoice"),Wtt.forEach(t),y8o=r(SAe," (RoBERTa model)"),SAe.forEach(t),L8o=i(O),xb=n(O,"LI",{});var RAe=s(xb);Jie=n(RAe,"STRONG",{});var Htt=s(Jie);x8o=r(Htt,"roformer"),Htt.forEach(t),k8o=r(RAe," \u2014 "),nj=n(RAe,"A",{href:!0});var Utt=s(nj);S8o=r(Utt,"RoFormerForMultipleChoice"),Utt.forEach(t),R8o=r(RAe," (RoFormer model)"),RAe.forEach(t),B8o=i(O),kb=n(O,"LI",{});var BAe=s(kb);Yie=n(BAe,"STRONG",{});var Jtt=s(Yie);P8o=r(Jtt,"squeezebert"),Jtt.forEach(t),$8o=r(BAe," \u2014 "),sj=n(BAe,"A",{href:!0});var Ytt=s(sj);I8o=r(Ytt,"SqueezeBertForMultipleChoice"),Ytt.forEach(t),q8o=r(BAe," (SqueezeBERT model)"),BAe.forEach(t),N8o=i(O),Sb=n(O,"LI",{});var PAe=s(Sb);Kie=n(PAe,"STRONG",{});var Ktt=s(Kie);j8o=r(Ktt,"xlm"),Ktt.forEach(t),D8o=r(PAe," \u2014 "),lj=n(PAe,"A",{href:!0});var Ztt=s(lj);G8o=r(Ztt,"XLMForMultipleChoice"),Ztt.forEach(t),O8o=r(PAe," (XLM model)"),PAe.forEach(t),V8o=i(O),Rb=n(O,"LI",{});var $Ae=s(Rb);Zie=n($Ae,"STRONG",{});var eat=s(Zie);X8o=r(eat,"xlm-roberta"),eat.forEach(t),z8o=r($Ae," \u2014 "),ij=n($Ae,"A",{href:!0});var oat=s(ij);Q8o=r(oat,"XLMRobertaForMultipleChoice"),oat.forEach(t),W8o=r($Ae," (XLM-RoBERTa model)"),$Ae.forEach(t),H8o=i(O),Bb=n(O,"LI",{});var IAe=s(Bb);ede=n(IAe,"STRONG",{});var rat=s(ede);U8o=r(rat,"xlm-roberta-xl"),rat.forEach(t),J8o=r(IAe," \u2014 "),dj=n(IAe,"A",{href:!0});var tat=s(dj);Y8o=r(tat,"XLMRobertaXLForMultipleChoice"),tat.forEach(t),K8o=r(IAe," (XLM-RoBERTa-XL model)"),IAe.forEach(t),Z8o=i(O),Pb=n(O,"LI",{});var qAe=s(Pb);ode=n(qAe,"STRONG",{});var aat=s(ode);exo=r(aat,"xlnet"),aat.forEach(t),oxo=r(qAe," \u2014 "),cj=n(qAe,"A",{href:!0});var nat=s(cj);rxo=r(nat,"XLNetForMultipleChoice"),nat.forEach(t),txo=r(qAe," (XLNet model)"),qAe.forEach(t),axo=i(O),$b=n(O,"LI",{});var NAe=s($b);rde=n(NAe,"STRONG",{});var sat=s(rde);nxo=r(sat,"yoso"),sat.forEach(t),sxo=r(NAe," \u2014 "),fj=n(NAe,"A",{href:!0});var lat=s(fj);lxo=r(lat,"YosoForMultipleChoice"),lat.forEach(t),ixo=r(NAe," (YOSO model)"),NAe.forEach(t),O.forEach(t),dxo=i(Qt),Ib=n(Qt,"P",{});var jAe=s(Ib);cxo=r(jAe,"The model is set in evaluation mode by default using "),tde=n(jAe,"CODE",{});var iat=s(tde);fxo=r(iat,"model.eval()"),iat.forEach(t),mxo=r(jAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ade=n(jAe,"CODE",{});var dat=s(ade);gxo=r(dat,"model.train()"),dat.forEach(t),jAe.forEach(t),hxo=i(Qt),nde=n(Qt,"P",{});var cat=s(nde);pxo=r(cat,"Examples:"),cat.forEach(t),_xo=i(Qt),m(nC.$$.fragment,Qt),Qt.forEach(t),nl.forEach(t),TBe=i(c),bd=n(c,"H2",{class:!0});var k$e=s(bd);qb=n(k$e,"A",{id:!0,class:!0,href:!0});var fat=s(qb);sde=n(fat,"SPAN",{});var mat=s(sde);m(sC.$$.fragment,mat),mat.forEach(t),fat.forEach(t),uxo=i(k$e),lde=n(k$e,"SPAN",{});var gat=s(lde);bxo=r(gat,"AutoModelForNextSentencePrediction"),gat.forEach(t),k$e.forEach(t),MBe=i(c),tr=n(c,"DIV",{class:!0});var ll=s(tr);m(lC.$$.fragment,ll),Fxo=i(ll),Fd=n(ll,"P",{});var VU=s(Fd);vxo=r(VU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mj=n(VU,"A",{href:!0});var hat=s(mj);Txo=r(hat,"from_pretrained()"),hat.forEach(t),Mxo=r(VU," class method or the "),gj=n(VU,"A",{href:!0});var pat=s(gj);Exo=r(pat,"from_config()"),pat.forEach(t),Cxo=r(VU,` class
method.`),VU.forEach(t),wxo=i(ll),iC=n(ll,"P",{});var S$e=s(iC);Axo=r(S$e,"This class cannot be instantiated directly using "),ide=n(S$e,"CODE",{});var _at=s(ide);yxo=r(_at,"__init__()"),_at.forEach(t),Lxo=r(S$e," (throws an error)."),S$e.forEach(t),xxo=i(ll),Yr=n(ll,"DIV",{class:!0});var il=s(Yr);m(dC.$$.fragment,il),kxo=i(il),dde=n(il,"P",{});var uat=s(dde);Sxo=r(uat,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uat.forEach(t),Rxo=i(il),vd=n(il,"P",{});var XU=s(vd);Bxo=r(XU,`Note:
Loading a model from its configuration file does `),cde=n(XU,"STRONG",{});var bat=s(cde);Pxo=r(bat,"not"),bat.forEach(t),$xo=r(XU,` load the model weights. It only affects the
model\u2019s configuration. Use `),hj=n(XU,"A",{href:!0});var Fat=s(hj);Ixo=r(Fat,"from_pretrained()"),Fat.forEach(t),qxo=r(XU," to load the model weights."),XU.forEach(t),Nxo=i(il),fde=n(il,"P",{});var vat=s(fde);jxo=r(vat,"Examples:"),vat.forEach(t),Dxo=i(il),m(cC.$$.fragment,il),il.forEach(t),Gxo=i(ll),ze=n(ll,"DIV",{class:!0});var Wt=s(ze);m(fC.$$.fragment,Wt),Oxo=i(Wt),mde=n(Wt,"P",{});var Tat=s(mde);Vxo=r(Tat,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Tat.forEach(t),Xxo=i(Wt),Ya=n(Wt,"P",{});var OE=s(Ya);zxo=r(OE,"The model class to instantiate is selected based on the "),gde=n(OE,"CODE",{});var Mat=s(gde);Qxo=r(Mat,"model_type"),Mat.forEach(t),Wxo=r(OE,` property of the config object (either
passed as an argument or loaded from `),hde=n(OE,"CODE",{});var Eat=s(hde);Hxo=r(Eat,"pretrained_model_name_or_path"),Eat.forEach(t),Uxo=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=n(OE,"CODE",{});var Cat=s(pde);Jxo=r(Cat,"pretrained_model_name_or_path"),Cat.forEach(t),Yxo=r(OE,":"),OE.forEach(t),Kxo=i(Wt),da=n(Wt,"UL",{});var dl=s(da);Nb=n(dl,"LI",{});var DAe=s(Nb);_de=n(DAe,"STRONG",{});var wat=s(_de);Zxo=r(wat,"bert"),wat.forEach(t),eko=r(DAe," \u2014 "),pj=n(DAe,"A",{href:!0});var Aat=s(pj);oko=r(Aat,"BertForNextSentencePrediction"),Aat.forEach(t),rko=r(DAe," (BERT model)"),DAe.forEach(t),tko=i(dl),jb=n(dl,"LI",{});var GAe=s(jb);ude=n(GAe,"STRONG",{});var yat=s(ude);ako=r(yat,"fnet"),yat.forEach(t),nko=r(GAe," \u2014 "),_j=n(GAe,"A",{href:!0});var Lat=s(_j);sko=r(Lat,"FNetForNextSentencePrediction"),Lat.forEach(t),lko=r(GAe," (FNet model)"),GAe.forEach(t),iko=i(dl),Db=n(dl,"LI",{});var OAe=s(Db);bde=n(OAe,"STRONG",{});var xat=s(bde);dko=r(xat,"megatron-bert"),xat.forEach(t),cko=r(OAe," \u2014 "),uj=n(OAe,"A",{href:!0});var kat=s(uj);fko=r(kat,"MegatronBertForNextSentencePrediction"),kat.forEach(t),mko=r(OAe," (MegatronBert model)"),OAe.forEach(t),gko=i(dl),Gb=n(dl,"LI",{});var VAe=s(Gb);Fde=n(VAe,"STRONG",{});var Sat=s(Fde);hko=r(Sat,"mobilebert"),Sat.forEach(t),pko=r(VAe," \u2014 "),bj=n(VAe,"A",{href:!0});var Rat=s(bj);_ko=r(Rat,"MobileBertForNextSentencePrediction"),Rat.forEach(t),uko=r(VAe," (MobileBERT model)"),VAe.forEach(t),bko=i(dl),Ob=n(dl,"LI",{});var XAe=s(Ob);vde=n(XAe,"STRONG",{});var Bat=s(vde);Fko=r(Bat,"qdqbert"),Bat.forEach(t),vko=r(XAe," \u2014 "),Fj=n(XAe,"A",{href:!0});var Pat=s(Fj);Tko=r(Pat,"QDQBertForNextSentencePrediction"),Pat.forEach(t),Mko=r(XAe," (QDQBert model)"),XAe.forEach(t),dl.forEach(t),Eko=i(Wt),Vb=n(Wt,"P",{});var zAe=s(Vb);Cko=r(zAe,"The model is set in evaluation mode by default using "),Tde=n(zAe,"CODE",{});var $at=s(Tde);wko=r($at,"model.eval()"),$at.forEach(t),Ako=r(zAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mde=n(zAe,"CODE",{});var Iat=s(Mde);yko=r(Iat,"model.train()"),Iat.forEach(t),zAe.forEach(t),Lko=i(Wt),Ede=n(Wt,"P",{});var qat=s(Ede);xko=r(qat,"Examples:"),qat.forEach(t),kko=i(Wt),m(mC.$$.fragment,Wt),Wt.forEach(t),ll.forEach(t),EBe=i(c),Td=n(c,"H2",{class:!0});var R$e=s(Td);Xb=n(R$e,"A",{id:!0,class:!0,href:!0});var Nat=s(Xb);Cde=n(Nat,"SPAN",{});var jat=s(Cde);m(gC.$$.fragment,jat),jat.forEach(t),Nat.forEach(t),Sko=i(R$e),wde=n(R$e,"SPAN",{});var Dat=s(wde);Rko=r(Dat,"AutoModelForTokenClassification"),Dat.forEach(t),R$e.forEach(t),CBe=i(c),ar=n(c,"DIV",{class:!0});var cl=s(ar);m(hC.$$.fragment,cl),Bko=i(cl),Md=n(cl,"P",{});var zU=s(Md);Pko=r(zU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vj=n(zU,"A",{href:!0});var Gat=s(vj);$ko=r(Gat,"from_pretrained()"),Gat.forEach(t),Iko=r(zU," class method or the "),Tj=n(zU,"A",{href:!0});var Oat=s(Tj);qko=r(Oat,"from_config()"),Oat.forEach(t),Nko=r(zU,` class
method.`),zU.forEach(t),jko=i(cl),pC=n(cl,"P",{});var B$e=s(pC);Dko=r(B$e,"This class cannot be instantiated directly using "),Ade=n(B$e,"CODE",{});var Vat=s(Ade);Gko=r(Vat,"__init__()"),Vat.forEach(t),Oko=r(B$e," (throws an error)."),B$e.forEach(t),Vko=i(cl),Kr=n(cl,"DIV",{class:!0});var fl=s(Kr);m(_C.$$.fragment,fl),Xko=i(fl),yde=n(fl,"P",{});var Xat=s(yde);zko=r(Xat,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Xat.forEach(t),Qko=i(fl),Ed=n(fl,"P",{});var QU=s(Ed);Wko=r(QU,`Note:
Loading a model from its configuration file does `),Lde=n(QU,"STRONG",{});var zat=s(Lde);Hko=r(zat,"not"),zat.forEach(t),Uko=r(QU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mj=n(QU,"A",{href:!0});var Qat=s(Mj);Jko=r(Qat,"from_pretrained()"),Qat.forEach(t),Yko=r(QU," to load the model weights."),QU.forEach(t),Kko=i(fl),xde=n(fl,"P",{});var Wat=s(xde);Zko=r(Wat,"Examples:"),Wat.forEach(t),eSo=i(fl),m(uC.$$.fragment,fl),fl.forEach(t),oSo=i(cl),Qe=n(cl,"DIV",{class:!0});var Ht=s(Qe);m(bC.$$.fragment,Ht),rSo=i(Ht),kde=n(Ht,"P",{});var Hat=s(kde);tSo=r(Hat,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Hat.forEach(t),aSo=i(Ht),Ka=n(Ht,"P",{});var VE=s(Ka);nSo=r(VE,"The model class to instantiate is selected based on the "),Sde=n(VE,"CODE",{});var Uat=s(Sde);sSo=r(Uat,"model_type"),Uat.forEach(t),lSo=r(VE,` property of the config object (either
passed as an argument or loaded from `),Rde=n(VE,"CODE",{});var Jat=s(Rde);iSo=r(Jat,"pretrained_model_name_or_path"),Jat.forEach(t),dSo=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bde=n(VE,"CODE",{});var Yat=s(Bde);cSo=r(Yat,"pretrained_model_name_or_path"),Yat.forEach(t),fSo=r(VE,":"),VE.forEach(t),mSo=i(Ht),j=n(Ht,"UL",{});var D=s(j);zb=n(D,"LI",{});var QAe=s(zb);Pde=n(QAe,"STRONG",{});var Kat=s(Pde);gSo=r(Kat,"albert"),Kat.forEach(t),hSo=r(QAe," \u2014 "),Ej=n(QAe,"A",{href:!0});var Zat=s(Ej);pSo=r(Zat,"AlbertForTokenClassification"),Zat.forEach(t),_So=r(QAe," (ALBERT model)"),QAe.forEach(t),uSo=i(D),Qb=n(D,"LI",{});var WAe=s(Qb);$de=n(WAe,"STRONG",{});var ent=s($de);bSo=r(ent,"bert"),ent.forEach(t),FSo=r(WAe," \u2014 "),Cj=n(WAe,"A",{href:!0});var ont=s(Cj);vSo=r(ont,"BertForTokenClassification"),ont.forEach(t),TSo=r(WAe," (BERT model)"),WAe.forEach(t),MSo=i(D),Wb=n(D,"LI",{});var HAe=s(Wb);Ide=n(HAe,"STRONG",{});var rnt=s(Ide);ESo=r(rnt,"big_bird"),rnt.forEach(t),CSo=r(HAe," \u2014 "),wj=n(HAe,"A",{href:!0});var tnt=s(wj);wSo=r(tnt,"BigBirdForTokenClassification"),tnt.forEach(t),ASo=r(HAe," (BigBird model)"),HAe.forEach(t),ySo=i(D),Hb=n(D,"LI",{});var UAe=s(Hb);qde=n(UAe,"STRONG",{});var ant=s(qde);LSo=r(ant,"camembert"),ant.forEach(t),xSo=r(UAe," \u2014 "),Aj=n(UAe,"A",{href:!0});var nnt=s(Aj);kSo=r(nnt,"CamembertForTokenClassification"),nnt.forEach(t),SSo=r(UAe," (CamemBERT model)"),UAe.forEach(t),RSo=i(D),Ub=n(D,"LI",{});var JAe=s(Ub);Nde=n(JAe,"STRONG",{});var snt=s(Nde);BSo=r(snt,"canine"),snt.forEach(t),PSo=r(JAe," \u2014 "),yj=n(JAe,"A",{href:!0});var lnt=s(yj);$So=r(lnt,"CanineForTokenClassification"),lnt.forEach(t),ISo=r(JAe," (Canine model)"),JAe.forEach(t),qSo=i(D),Jb=n(D,"LI",{});var YAe=s(Jb);jde=n(YAe,"STRONG",{});var int=s(jde);NSo=r(int,"convbert"),int.forEach(t),jSo=r(YAe," \u2014 "),Lj=n(YAe,"A",{href:!0});var dnt=s(Lj);DSo=r(dnt,"ConvBertForTokenClassification"),dnt.forEach(t),GSo=r(YAe," (ConvBERT model)"),YAe.forEach(t),OSo=i(D),Yb=n(D,"LI",{});var KAe=s(Yb);Dde=n(KAe,"STRONG",{});var cnt=s(Dde);VSo=r(cnt,"data2vec-text"),cnt.forEach(t),XSo=r(KAe," \u2014 "),xj=n(KAe,"A",{href:!0});var fnt=s(xj);zSo=r(fnt,"Data2VecTextForTokenClassification"),fnt.forEach(t),QSo=r(KAe," (Data2VecText model)"),KAe.forEach(t),WSo=i(D),Kb=n(D,"LI",{});var ZAe=s(Kb);Gde=n(ZAe,"STRONG",{});var mnt=s(Gde);HSo=r(mnt,"deberta"),mnt.forEach(t),USo=r(ZAe," \u2014 "),kj=n(ZAe,"A",{href:!0});var gnt=s(kj);JSo=r(gnt,"DebertaForTokenClassification"),gnt.forEach(t),YSo=r(ZAe," (DeBERTa model)"),ZAe.forEach(t),KSo=i(D),Zb=n(D,"LI",{});var e0e=s(Zb);Ode=n(e0e,"STRONG",{});var hnt=s(Ode);ZSo=r(hnt,"deberta-v2"),hnt.forEach(t),eRo=r(e0e," \u2014 "),Sj=n(e0e,"A",{href:!0});var pnt=s(Sj);oRo=r(pnt,"DebertaV2ForTokenClassification"),pnt.forEach(t),rRo=r(e0e," (DeBERTa-v2 model)"),e0e.forEach(t),tRo=i(D),e6=n(D,"LI",{});var o0e=s(e6);Vde=n(o0e,"STRONG",{});var _nt=s(Vde);aRo=r(_nt,"distilbert"),_nt.forEach(t),nRo=r(o0e," \u2014 "),Rj=n(o0e,"A",{href:!0});var unt=s(Rj);sRo=r(unt,"DistilBertForTokenClassification"),unt.forEach(t),lRo=r(o0e," (DistilBERT model)"),o0e.forEach(t),iRo=i(D),o6=n(D,"LI",{});var r0e=s(o6);Xde=n(r0e,"STRONG",{});var bnt=s(Xde);dRo=r(bnt,"electra"),bnt.forEach(t),cRo=r(r0e," \u2014 "),Bj=n(r0e,"A",{href:!0});var Fnt=s(Bj);fRo=r(Fnt,"ElectraForTokenClassification"),Fnt.forEach(t),mRo=r(r0e," (ELECTRA model)"),r0e.forEach(t),gRo=i(D),r6=n(D,"LI",{});var t0e=s(r6);zde=n(t0e,"STRONG",{});var vnt=s(zde);hRo=r(vnt,"flaubert"),vnt.forEach(t),pRo=r(t0e," \u2014 "),Pj=n(t0e,"A",{href:!0});var Tnt=s(Pj);_Ro=r(Tnt,"FlaubertForTokenClassification"),Tnt.forEach(t),uRo=r(t0e," (FlauBERT model)"),t0e.forEach(t),bRo=i(D),t6=n(D,"LI",{});var a0e=s(t6);Qde=n(a0e,"STRONG",{});var Mnt=s(Qde);FRo=r(Mnt,"fnet"),Mnt.forEach(t),vRo=r(a0e," \u2014 "),$j=n(a0e,"A",{href:!0});var Ent=s($j);TRo=r(Ent,"FNetForTokenClassification"),Ent.forEach(t),MRo=r(a0e," (FNet model)"),a0e.forEach(t),ERo=i(D),a6=n(D,"LI",{});var n0e=s(a6);Wde=n(n0e,"STRONG",{});var Cnt=s(Wde);CRo=r(Cnt,"funnel"),Cnt.forEach(t),wRo=r(n0e," \u2014 "),Ij=n(n0e,"A",{href:!0});var wnt=s(Ij);ARo=r(wnt,"FunnelForTokenClassification"),wnt.forEach(t),yRo=r(n0e," (Funnel Transformer model)"),n0e.forEach(t),LRo=i(D),n6=n(D,"LI",{});var s0e=s(n6);Hde=n(s0e,"STRONG",{});var Ant=s(Hde);xRo=r(Ant,"gpt2"),Ant.forEach(t),kRo=r(s0e," \u2014 "),qj=n(s0e,"A",{href:!0});var ynt=s(qj);SRo=r(ynt,"GPT2ForTokenClassification"),ynt.forEach(t),RRo=r(s0e," (OpenAI GPT-2 model)"),s0e.forEach(t),BRo=i(D),s6=n(D,"LI",{});var l0e=s(s6);Ude=n(l0e,"STRONG",{});var Lnt=s(Ude);PRo=r(Lnt,"ibert"),Lnt.forEach(t),$Ro=r(l0e," \u2014 "),Nj=n(l0e,"A",{href:!0});var xnt=s(Nj);IRo=r(xnt,"IBertForTokenClassification"),xnt.forEach(t),qRo=r(l0e," (I-BERT model)"),l0e.forEach(t),NRo=i(D),l6=n(D,"LI",{});var i0e=s(l6);Jde=n(i0e,"STRONG",{});var knt=s(Jde);jRo=r(knt,"layoutlm"),knt.forEach(t),DRo=r(i0e," \u2014 "),jj=n(i0e,"A",{href:!0});var Snt=s(jj);GRo=r(Snt,"LayoutLMForTokenClassification"),Snt.forEach(t),ORo=r(i0e," (LayoutLM model)"),i0e.forEach(t),VRo=i(D),i6=n(D,"LI",{});var d0e=s(i6);Yde=n(d0e,"STRONG",{});var Rnt=s(Yde);XRo=r(Rnt,"layoutlmv2"),Rnt.forEach(t),zRo=r(d0e," \u2014 "),Dj=n(d0e,"A",{href:!0});var Bnt=s(Dj);QRo=r(Bnt,"LayoutLMv2ForTokenClassification"),Bnt.forEach(t),WRo=r(d0e," (LayoutLMv2 model)"),d0e.forEach(t),HRo=i(D),d6=n(D,"LI",{});var c0e=s(d6);Kde=n(c0e,"STRONG",{});var Pnt=s(Kde);URo=r(Pnt,"longformer"),Pnt.forEach(t),JRo=r(c0e," \u2014 "),Gj=n(c0e,"A",{href:!0});var $nt=s(Gj);YRo=r($nt,"LongformerForTokenClassification"),$nt.forEach(t),KRo=r(c0e," (Longformer model)"),c0e.forEach(t),ZRo=i(D),c6=n(D,"LI",{});var f0e=s(c6);Zde=n(f0e,"STRONG",{});var Int=s(Zde);eBo=r(Int,"megatron-bert"),Int.forEach(t),oBo=r(f0e," \u2014 "),Oj=n(f0e,"A",{href:!0});var qnt=s(Oj);rBo=r(qnt,"MegatronBertForTokenClassification"),qnt.forEach(t),tBo=r(f0e," (MegatronBert model)"),f0e.forEach(t),aBo=i(D),f6=n(D,"LI",{});var m0e=s(f6);ece=n(m0e,"STRONG",{});var Nnt=s(ece);nBo=r(Nnt,"mobilebert"),Nnt.forEach(t),sBo=r(m0e," \u2014 "),Vj=n(m0e,"A",{href:!0});var jnt=s(Vj);lBo=r(jnt,"MobileBertForTokenClassification"),jnt.forEach(t),iBo=r(m0e," (MobileBERT model)"),m0e.forEach(t),dBo=i(D),m6=n(D,"LI",{});var g0e=s(m6);oce=n(g0e,"STRONG",{});var Dnt=s(oce);cBo=r(Dnt,"mpnet"),Dnt.forEach(t),fBo=r(g0e," \u2014 "),Xj=n(g0e,"A",{href:!0});var Gnt=s(Xj);mBo=r(Gnt,"MPNetForTokenClassification"),Gnt.forEach(t),gBo=r(g0e," (MPNet model)"),g0e.forEach(t),hBo=i(D),g6=n(D,"LI",{});var h0e=s(g6);rce=n(h0e,"STRONG",{});var Ont=s(rce);pBo=r(Ont,"nystromformer"),Ont.forEach(t),_Bo=r(h0e," \u2014 "),zj=n(h0e,"A",{href:!0});var Vnt=s(zj);uBo=r(Vnt,"NystromformerForTokenClassification"),Vnt.forEach(t),bBo=r(h0e," (Nystromformer model)"),h0e.forEach(t),FBo=i(D),h6=n(D,"LI",{});var p0e=s(h6);tce=n(p0e,"STRONG",{});var Xnt=s(tce);vBo=r(Xnt,"qdqbert"),Xnt.forEach(t),TBo=r(p0e," \u2014 "),Qj=n(p0e,"A",{href:!0});var znt=s(Qj);MBo=r(znt,"QDQBertForTokenClassification"),znt.forEach(t),EBo=r(p0e," (QDQBert model)"),p0e.forEach(t),CBo=i(D),p6=n(D,"LI",{});var _0e=s(p6);ace=n(_0e,"STRONG",{});var Qnt=s(ace);wBo=r(Qnt,"rembert"),Qnt.forEach(t),ABo=r(_0e," \u2014 "),Wj=n(_0e,"A",{href:!0});var Wnt=s(Wj);yBo=r(Wnt,"RemBertForTokenClassification"),Wnt.forEach(t),LBo=r(_0e," (RemBERT model)"),_0e.forEach(t),xBo=i(D),_6=n(D,"LI",{});var u0e=s(_6);nce=n(u0e,"STRONG",{});var Hnt=s(nce);kBo=r(Hnt,"roberta"),Hnt.forEach(t),SBo=r(u0e," \u2014 "),Hj=n(u0e,"A",{href:!0});var Unt=s(Hj);RBo=r(Unt,"RobertaForTokenClassification"),Unt.forEach(t),BBo=r(u0e," (RoBERTa model)"),u0e.forEach(t),PBo=i(D),u6=n(D,"LI",{});var b0e=s(u6);sce=n(b0e,"STRONG",{});var Jnt=s(sce);$Bo=r(Jnt,"roformer"),Jnt.forEach(t),IBo=r(b0e," \u2014 "),Uj=n(b0e,"A",{href:!0});var Ynt=s(Uj);qBo=r(Ynt,"RoFormerForTokenClassification"),Ynt.forEach(t),NBo=r(b0e," (RoFormer model)"),b0e.forEach(t),jBo=i(D),b6=n(D,"LI",{});var F0e=s(b6);lce=n(F0e,"STRONG",{});var Knt=s(lce);DBo=r(Knt,"squeezebert"),Knt.forEach(t),GBo=r(F0e," \u2014 "),Jj=n(F0e,"A",{href:!0});var Znt=s(Jj);OBo=r(Znt,"SqueezeBertForTokenClassification"),Znt.forEach(t),VBo=r(F0e," (SqueezeBERT model)"),F0e.forEach(t),XBo=i(D),F6=n(D,"LI",{});var v0e=s(F6);ice=n(v0e,"STRONG",{});var est=s(ice);zBo=r(est,"xlm"),est.forEach(t),QBo=r(v0e," \u2014 "),Yj=n(v0e,"A",{href:!0});var ost=s(Yj);WBo=r(ost,"XLMForTokenClassification"),ost.forEach(t),HBo=r(v0e," (XLM model)"),v0e.forEach(t),UBo=i(D),v6=n(D,"LI",{});var T0e=s(v6);dce=n(T0e,"STRONG",{});var rst=s(dce);JBo=r(rst,"xlm-roberta"),rst.forEach(t),YBo=r(T0e," \u2014 "),Kj=n(T0e,"A",{href:!0});var tst=s(Kj);KBo=r(tst,"XLMRobertaForTokenClassification"),tst.forEach(t),ZBo=r(T0e," (XLM-RoBERTa model)"),T0e.forEach(t),ePo=i(D),T6=n(D,"LI",{});var M0e=s(T6);cce=n(M0e,"STRONG",{});var ast=s(cce);oPo=r(ast,"xlm-roberta-xl"),ast.forEach(t),rPo=r(M0e," \u2014 "),Zj=n(M0e,"A",{href:!0});var nst=s(Zj);tPo=r(nst,"XLMRobertaXLForTokenClassification"),nst.forEach(t),aPo=r(M0e," (XLM-RoBERTa-XL model)"),M0e.forEach(t),nPo=i(D),M6=n(D,"LI",{});var E0e=s(M6);fce=n(E0e,"STRONG",{});var sst=s(fce);sPo=r(sst,"xlnet"),sst.forEach(t),lPo=r(E0e," \u2014 "),eD=n(E0e,"A",{href:!0});var lst=s(eD);iPo=r(lst,"XLNetForTokenClassification"),lst.forEach(t),dPo=r(E0e," (XLNet model)"),E0e.forEach(t),cPo=i(D),E6=n(D,"LI",{});var C0e=s(E6);mce=n(C0e,"STRONG",{});var ist=s(mce);fPo=r(ist,"yoso"),ist.forEach(t),mPo=r(C0e," \u2014 "),oD=n(C0e,"A",{href:!0});var dst=s(oD);gPo=r(dst,"YosoForTokenClassification"),dst.forEach(t),hPo=r(C0e," (YOSO model)"),C0e.forEach(t),D.forEach(t),pPo=i(Ht),C6=n(Ht,"P",{});var w0e=s(C6);_Po=r(w0e,"The model is set in evaluation mode by default using "),gce=n(w0e,"CODE",{});var cst=s(gce);uPo=r(cst,"model.eval()"),cst.forEach(t),bPo=r(w0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hce=n(w0e,"CODE",{});var fst=s(hce);FPo=r(fst,"model.train()"),fst.forEach(t),w0e.forEach(t),vPo=i(Ht),pce=n(Ht,"P",{});var mst=s(pce);TPo=r(mst,"Examples:"),mst.forEach(t),MPo=i(Ht),m(FC.$$.fragment,Ht),Ht.forEach(t),cl.forEach(t),wBe=i(c),Cd=n(c,"H2",{class:!0});var P$e=s(Cd);w6=n(P$e,"A",{id:!0,class:!0,href:!0});var gst=s(w6);_ce=n(gst,"SPAN",{});var hst=s(_ce);m(vC.$$.fragment,hst),hst.forEach(t),gst.forEach(t),EPo=i(P$e),uce=n(P$e,"SPAN",{});var pst=s(uce);CPo=r(pst,"AutoModelForQuestionAnswering"),pst.forEach(t),P$e.forEach(t),ABe=i(c),nr=n(c,"DIV",{class:!0});var ml=s(nr);m(TC.$$.fragment,ml),wPo=i(ml),wd=n(ml,"P",{});var WU=s(wd);APo=r(WU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rD=n(WU,"A",{href:!0});var _st=s(rD);yPo=r(_st,"from_pretrained()"),_st.forEach(t),LPo=r(WU," class method or the "),tD=n(WU,"A",{href:!0});var ust=s(tD);xPo=r(ust,"from_config()"),ust.forEach(t),kPo=r(WU,` class
method.`),WU.forEach(t),SPo=i(ml),MC=n(ml,"P",{});var $$e=s(MC);RPo=r($$e,"This class cannot be instantiated directly using "),bce=n($$e,"CODE",{});var bst=s(bce);BPo=r(bst,"__init__()"),bst.forEach(t),PPo=r($$e," (throws an error)."),$$e.forEach(t),$Po=i(ml),Zr=n(ml,"DIV",{class:!0});var gl=s(Zr);m(EC.$$.fragment,gl),IPo=i(gl),Fce=n(gl,"P",{});var Fst=s(Fce);qPo=r(Fst,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Fst.forEach(t),NPo=i(gl),Ad=n(gl,"P",{});var HU=s(Ad);jPo=r(HU,`Note:
Loading a model from its configuration file does `),vce=n(HU,"STRONG",{});var vst=s(vce);DPo=r(vst,"not"),vst.forEach(t),GPo=r(HU,` load the model weights. It only affects the
model\u2019s configuration. Use `),aD=n(HU,"A",{href:!0});var Tst=s(aD);OPo=r(Tst,"from_pretrained()"),Tst.forEach(t),VPo=r(HU," to load the model weights."),HU.forEach(t),XPo=i(gl),Tce=n(gl,"P",{});var Mst=s(Tce);zPo=r(Mst,"Examples:"),Mst.forEach(t),QPo=i(gl),m(CC.$$.fragment,gl),gl.forEach(t),WPo=i(ml),We=n(ml,"DIV",{class:!0});var Ut=s(We);m(wC.$$.fragment,Ut),HPo=i(Ut),Mce=n(Ut,"P",{});var Est=s(Mce);UPo=r(Est,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Est.forEach(t),JPo=i(Ut),Za=n(Ut,"P",{});var XE=s(Za);YPo=r(XE,"The model class to instantiate is selected based on the "),Ece=n(XE,"CODE",{});var Cst=s(Ece);KPo=r(Cst,"model_type"),Cst.forEach(t),ZPo=r(XE,` property of the config object (either
passed as an argument or loaded from `),Cce=n(XE,"CODE",{});var wst=s(Cce);e$o=r(wst,"pretrained_model_name_or_path"),wst.forEach(t),o$o=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wce=n(XE,"CODE",{});var Ast=s(wce);r$o=r(Ast,"pretrained_model_name_or_path"),Ast.forEach(t),t$o=r(XE,":"),XE.forEach(t),a$o=i(Ut),R=n(Ut,"UL",{});var P=s(R);A6=n(P,"LI",{});var A0e=s(A6);Ace=n(A0e,"STRONG",{});var yst=s(Ace);n$o=r(yst,"albert"),yst.forEach(t),s$o=r(A0e," \u2014 "),nD=n(A0e,"A",{href:!0});var Lst=s(nD);l$o=r(Lst,"AlbertForQuestionAnswering"),Lst.forEach(t),i$o=r(A0e," (ALBERT model)"),A0e.forEach(t),d$o=i(P),y6=n(P,"LI",{});var y0e=s(y6);yce=n(y0e,"STRONG",{});var xst=s(yce);c$o=r(xst,"bart"),xst.forEach(t),f$o=r(y0e," \u2014 "),sD=n(y0e,"A",{href:!0});var kst=s(sD);m$o=r(kst,"BartForQuestionAnswering"),kst.forEach(t),g$o=r(y0e," (BART model)"),y0e.forEach(t),h$o=i(P),L6=n(P,"LI",{});var L0e=s(L6);Lce=n(L0e,"STRONG",{});var Sst=s(Lce);p$o=r(Sst,"bert"),Sst.forEach(t),_$o=r(L0e," \u2014 "),lD=n(L0e,"A",{href:!0});var Rst=s(lD);u$o=r(Rst,"BertForQuestionAnswering"),Rst.forEach(t),b$o=r(L0e," (BERT model)"),L0e.forEach(t),F$o=i(P),x6=n(P,"LI",{});var x0e=s(x6);xce=n(x0e,"STRONG",{});var Bst=s(xce);v$o=r(Bst,"big_bird"),Bst.forEach(t),T$o=r(x0e," \u2014 "),iD=n(x0e,"A",{href:!0});var Pst=s(iD);M$o=r(Pst,"BigBirdForQuestionAnswering"),Pst.forEach(t),E$o=r(x0e," (BigBird model)"),x0e.forEach(t),C$o=i(P),k6=n(P,"LI",{});var k0e=s(k6);kce=n(k0e,"STRONG",{});var $st=s(kce);w$o=r($st,"bigbird_pegasus"),$st.forEach(t),A$o=r(k0e," \u2014 "),dD=n(k0e,"A",{href:!0});var Ist=s(dD);y$o=r(Ist,"BigBirdPegasusForQuestionAnswering"),Ist.forEach(t),L$o=r(k0e," (BigBirdPegasus model)"),k0e.forEach(t),x$o=i(P),S6=n(P,"LI",{});var S0e=s(S6);Sce=n(S0e,"STRONG",{});var qst=s(Sce);k$o=r(qst,"camembert"),qst.forEach(t),S$o=r(S0e," \u2014 "),cD=n(S0e,"A",{href:!0});var Nst=s(cD);R$o=r(Nst,"CamembertForQuestionAnswering"),Nst.forEach(t),B$o=r(S0e," (CamemBERT model)"),S0e.forEach(t),P$o=i(P),R6=n(P,"LI",{});var R0e=s(R6);Rce=n(R0e,"STRONG",{});var jst=s(Rce);$$o=r(jst,"canine"),jst.forEach(t),I$o=r(R0e," \u2014 "),fD=n(R0e,"A",{href:!0});var Dst=s(fD);q$o=r(Dst,"CanineForQuestionAnswering"),Dst.forEach(t),N$o=r(R0e," (Canine model)"),R0e.forEach(t),j$o=i(P),B6=n(P,"LI",{});var B0e=s(B6);Bce=n(B0e,"STRONG",{});var Gst=s(Bce);D$o=r(Gst,"convbert"),Gst.forEach(t),G$o=r(B0e," \u2014 "),mD=n(B0e,"A",{href:!0});var Ost=s(mD);O$o=r(Ost,"ConvBertForQuestionAnswering"),Ost.forEach(t),V$o=r(B0e," (ConvBERT model)"),B0e.forEach(t),X$o=i(P),P6=n(P,"LI",{});var P0e=s(P6);Pce=n(P0e,"STRONG",{});var Vst=s(Pce);z$o=r(Vst,"data2vec-text"),Vst.forEach(t),Q$o=r(P0e," \u2014 "),gD=n(P0e,"A",{href:!0});var Xst=s(gD);W$o=r(Xst,"Data2VecTextForQuestionAnswering"),Xst.forEach(t),H$o=r(P0e," (Data2VecText model)"),P0e.forEach(t),U$o=i(P),$6=n(P,"LI",{});var $0e=s($6);$ce=n($0e,"STRONG",{});var zst=s($ce);J$o=r(zst,"deberta"),zst.forEach(t),Y$o=r($0e," \u2014 "),hD=n($0e,"A",{href:!0});var Qst=s(hD);K$o=r(Qst,"DebertaForQuestionAnswering"),Qst.forEach(t),Z$o=r($0e," (DeBERTa model)"),$0e.forEach(t),eIo=i(P),I6=n(P,"LI",{});var I0e=s(I6);Ice=n(I0e,"STRONG",{});var Wst=s(Ice);oIo=r(Wst,"deberta-v2"),Wst.forEach(t),rIo=r(I0e," \u2014 "),pD=n(I0e,"A",{href:!0});var Hst=s(pD);tIo=r(Hst,"DebertaV2ForQuestionAnswering"),Hst.forEach(t),aIo=r(I0e," (DeBERTa-v2 model)"),I0e.forEach(t),nIo=i(P),q6=n(P,"LI",{});var q0e=s(q6);qce=n(q0e,"STRONG",{});var Ust=s(qce);sIo=r(Ust,"distilbert"),Ust.forEach(t),lIo=r(q0e," \u2014 "),_D=n(q0e,"A",{href:!0});var Jst=s(_D);iIo=r(Jst,"DistilBertForQuestionAnswering"),Jst.forEach(t),dIo=r(q0e," (DistilBERT model)"),q0e.forEach(t),cIo=i(P),N6=n(P,"LI",{});var N0e=s(N6);Nce=n(N0e,"STRONG",{});var Yst=s(Nce);fIo=r(Yst,"electra"),Yst.forEach(t),mIo=r(N0e," \u2014 "),uD=n(N0e,"A",{href:!0});var Kst=s(uD);gIo=r(Kst,"ElectraForQuestionAnswering"),Kst.forEach(t),hIo=r(N0e," (ELECTRA model)"),N0e.forEach(t),pIo=i(P),j6=n(P,"LI",{});var j0e=s(j6);jce=n(j0e,"STRONG",{});var Zst=s(jce);_Io=r(Zst,"flaubert"),Zst.forEach(t),uIo=r(j0e," \u2014 "),bD=n(j0e,"A",{href:!0});var elt=s(bD);bIo=r(elt,"FlaubertForQuestionAnsweringSimple"),elt.forEach(t),FIo=r(j0e," (FlauBERT model)"),j0e.forEach(t),vIo=i(P),D6=n(P,"LI",{});var D0e=s(D6);Dce=n(D0e,"STRONG",{});var olt=s(Dce);TIo=r(olt,"fnet"),olt.forEach(t),MIo=r(D0e," \u2014 "),FD=n(D0e,"A",{href:!0});var rlt=s(FD);EIo=r(rlt,"FNetForQuestionAnswering"),rlt.forEach(t),CIo=r(D0e," (FNet model)"),D0e.forEach(t),wIo=i(P),G6=n(P,"LI",{});var G0e=s(G6);Gce=n(G0e,"STRONG",{});var tlt=s(Gce);AIo=r(tlt,"funnel"),tlt.forEach(t),yIo=r(G0e," \u2014 "),vD=n(G0e,"A",{href:!0});var alt=s(vD);LIo=r(alt,"FunnelForQuestionAnswering"),alt.forEach(t),xIo=r(G0e," (Funnel Transformer model)"),G0e.forEach(t),kIo=i(P),O6=n(P,"LI",{});var O0e=s(O6);Oce=n(O0e,"STRONG",{});var nlt=s(Oce);SIo=r(nlt,"gptj"),nlt.forEach(t),RIo=r(O0e," \u2014 "),TD=n(O0e,"A",{href:!0});var slt=s(TD);BIo=r(slt,"GPTJForQuestionAnswering"),slt.forEach(t),PIo=r(O0e," (GPT-J model)"),O0e.forEach(t),$Io=i(P),V6=n(P,"LI",{});var V0e=s(V6);Vce=n(V0e,"STRONG",{});var llt=s(Vce);IIo=r(llt,"ibert"),llt.forEach(t),qIo=r(V0e," \u2014 "),MD=n(V0e,"A",{href:!0});var ilt=s(MD);NIo=r(ilt,"IBertForQuestionAnswering"),ilt.forEach(t),jIo=r(V0e," (I-BERT model)"),V0e.forEach(t),DIo=i(P),X6=n(P,"LI",{});var X0e=s(X6);Xce=n(X0e,"STRONG",{});var dlt=s(Xce);GIo=r(dlt,"layoutlmv2"),dlt.forEach(t),OIo=r(X0e," \u2014 "),ED=n(X0e,"A",{href:!0});var clt=s(ED);VIo=r(clt,"LayoutLMv2ForQuestionAnswering"),clt.forEach(t),XIo=r(X0e," (LayoutLMv2 model)"),X0e.forEach(t),zIo=i(P),z6=n(P,"LI",{});var z0e=s(z6);zce=n(z0e,"STRONG",{});var flt=s(zce);QIo=r(flt,"led"),flt.forEach(t),WIo=r(z0e," \u2014 "),CD=n(z0e,"A",{href:!0});var mlt=s(CD);HIo=r(mlt,"LEDForQuestionAnswering"),mlt.forEach(t),UIo=r(z0e," (LED model)"),z0e.forEach(t),JIo=i(P),Q6=n(P,"LI",{});var Q0e=s(Q6);Qce=n(Q0e,"STRONG",{});var glt=s(Qce);YIo=r(glt,"longformer"),glt.forEach(t),KIo=r(Q0e," \u2014 "),wD=n(Q0e,"A",{href:!0});var hlt=s(wD);ZIo=r(hlt,"LongformerForQuestionAnswering"),hlt.forEach(t),eqo=r(Q0e," (Longformer model)"),Q0e.forEach(t),oqo=i(P),W6=n(P,"LI",{});var W0e=s(W6);Wce=n(W0e,"STRONG",{});var plt=s(Wce);rqo=r(plt,"lxmert"),plt.forEach(t),tqo=r(W0e," \u2014 "),AD=n(W0e,"A",{href:!0});var _lt=s(AD);aqo=r(_lt,"LxmertForQuestionAnswering"),_lt.forEach(t),nqo=r(W0e," (LXMERT model)"),W0e.forEach(t),sqo=i(P),H6=n(P,"LI",{});var H0e=s(H6);Hce=n(H0e,"STRONG",{});var ult=s(Hce);lqo=r(ult,"mbart"),ult.forEach(t),iqo=r(H0e," \u2014 "),yD=n(H0e,"A",{href:!0});var blt=s(yD);dqo=r(blt,"MBartForQuestionAnswering"),blt.forEach(t),cqo=r(H0e," (mBART model)"),H0e.forEach(t),fqo=i(P),U6=n(P,"LI",{});var U0e=s(U6);Uce=n(U0e,"STRONG",{});var Flt=s(Uce);mqo=r(Flt,"megatron-bert"),Flt.forEach(t),gqo=r(U0e," \u2014 "),LD=n(U0e,"A",{href:!0});var vlt=s(LD);hqo=r(vlt,"MegatronBertForQuestionAnswering"),vlt.forEach(t),pqo=r(U0e," (MegatronBert model)"),U0e.forEach(t),_qo=i(P),J6=n(P,"LI",{});var J0e=s(J6);Jce=n(J0e,"STRONG",{});var Tlt=s(Jce);uqo=r(Tlt,"mobilebert"),Tlt.forEach(t),bqo=r(J0e," \u2014 "),xD=n(J0e,"A",{href:!0});var Mlt=s(xD);Fqo=r(Mlt,"MobileBertForQuestionAnswering"),Mlt.forEach(t),vqo=r(J0e," (MobileBERT model)"),J0e.forEach(t),Tqo=i(P),Y6=n(P,"LI",{});var Y0e=s(Y6);Yce=n(Y0e,"STRONG",{});var Elt=s(Yce);Mqo=r(Elt,"mpnet"),Elt.forEach(t),Eqo=r(Y0e," \u2014 "),kD=n(Y0e,"A",{href:!0});var Clt=s(kD);Cqo=r(Clt,"MPNetForQuestionAnswering"),Clt.forEach(t),wqo=r(Y0e," (MPNet model)"),Y0e.forEach(t),Aqo=i(P),K6=n(P,"LI",{});var K0e=s(K6);Kce=n(K0e,"STRONG",{});var wlt=s(Kce);yqo=r(wlt,"nystromformer"),wlt.forEach(t),Lqo=r(K0e," \u2014 "),SD=n(K0e,"A",{href:!0});var Alt=s(SD);xqo=r(Alt,"NystromformerForQuestionAnswering"),Alt.forEach(t),kqo=r(K0e," (Nystromformer model)"),K0e.forEach(t),Sqo=i(P),Z6=n(P,"LI",{});var Z0e=s(Z6);Zce=n(Z0e,"STRONG",{});var ylt=s(Zce);Rqo=r(ylt,"qdqbert"),ylt.forEach(t),Bqo=r(Z0e," \u2014 "),RD=n(Z0e,"A",{href:!0});var Llt=s(RD);Pqo=r(Llt,"QDQBertForQuestionAnswering"),Llt.forEach(t),$qo=r(Z0e," (QDQBert model)"),Z0e.forEach(t),Iqo=i(P),eF=n(P,"LI",{});var eye=s(eF);efe=n(eye,"STRONG",{});var xlt=s(efe);qqo=r(xlt,"reformer"),xlt.forEach(t),Nqo=r(eye," \u2014 "),BD=n(eye,"A",{href:!0});var klt=s(BD);jqo=r(klt,"ReformerForQuestionAnswering"),klt.forEach(t),Dqo=r(eye," (Reformer model)"),eye.forEach(t),Gqo=i(P),oF=n(P,"LI",{});var oye=s(oF);ofe=n(oye,"STRONG",{});var Slt=s(ofe);Oqo=r(Slt,"rembert"),Slt.forEach(t),Vqo=r(oye," \u2014 "),PD=n(oye,"A",{href:!0});var Rlt=s(PD);Xqo=r(Rlt,"RemBertForQuestionAnswering"),Rlt.forEach(t),zqo=r(oye," (RemBERT model)"),oye.forEach(t),Qqo=i(P),rF=n(P,"LI",{});var rye=s(rF);rfe=n(rye,"STRONG",{});var Blt=s(rfe);Wqo=r(Blt,"roberta"),Blt.forEach(t),Hqo=r(rye," \u2014 "),$D=n(rye,"A",{href:!0});var Plt=s($D);Uqo=r(Plt,"RobertaForQuestionAnswering"),Plt.forEach(t),Jqo=r(rye," (RoBERTa model)"),rye.forEach(t),Yqo=i(P),tF=n(P,"LI",{});var tye=s(tF);tfe=n(tye,"STRONG",{});var $lt=s(tfe);Kqo=r($lt,"roformer"),$lt.forEach(t),Zqo=r(tye," \u2014 "),ID=n(tye,"A",{href:!0});var Ilt=s(ID);eNo=r(Ilt,"RoFormerForQuestionAnswering"),Ilt.forEach(t),oNo=r(tye," (RoFormer model)"),tye.forEach(t),rNo=i(P),aF=n(P,"LI",{});var aye=s(aF);afe=n(aye,"STRONG",{});var qlt=s(afe);tNo=r(qlt,"splinter"),qlt.forEach(t),aNo=r(aye," \u2014 "),qD=n(aye,"A",{href:!0});var Nlt=s(qD);nNo=r(Nlt,"SplinterForQuestionAnswering"),Nlt.forEach(t),sNo=r(aye," (Splinter model)"),aye.forEach(t),lNo=i(P),nF=n(P,"LI",{});var nye=s(nF);nfe=n(nye,"STRONG",{});var jlt=s(nfe);iNo=r(jlt,"squeezebert"),jlt.forEach(t),dNo=r(nye," \u2014 "),ND=n(nye,"A",{href:!0});var Dlt=s(ND);cNo=r(Dlt,"SqueezeBertForQuestionAnswering"),Dlt.forEach(t),fNo=r(nye," (SqueezeBERT model)"),nye.forEach(t),mNo=i(P),sF=n(P,"LI",{});var sye=s(sF);sfe=n(sye,"STRONG",{});var Glt=s(sfe);gNo=r(Glt,"xlm"),Glt.forEach(t),hNo=r(sye," \u2014 "),jD=n(sye,"A",{href:!0});var Olt=s(jD);pNo=r(Olt,"XLMForQuestionAnsweringSimple"),Olt.forEach(t),_No=r(sye," (XLM model)"),sye.forEach(t),uNo=i(P),lF=n(P,"LI",{});var lye=s(lF);lfe=n(lye,"STRONG",{});var Vlt=s(lfe);bNo=r(Vlt,"xlm-roberta"),Vlt.forEach(t),FNo=r(lye," \u2014 "),DD=n(lye,"A",{href:!0});var Xlt=s(DD);vNo=r(Xlt,"XLMRobertaForQuestionAnswering"),Xlt.forEach(t),TNo=r(lye," (XLM-RoBERTa model)"),lye.forEach(t),MNo=i(P),iF=n(P,"LI",{});var iye=s(iF);ife=n(iye,"STRONG",{});var zlt=s(ife);ENo=r(zlt,"xlm-roberta-xl"),zlt.forEach(t),CNo=r(iye," \u2014 "),GD=n(iye,"A",{href:!0});var Qlt=s(GD);wNo=r(Qlt,"XLMRobertaXLForQuestionAnswering"),Qlt.forEach(t),ANo=r(iye," (XLM-RoBERTa-XL model)"),iye.forEach(t),yNo=i(P),dF=n(P,"LI",{});var dye=s(dF);dfe=n(dye,"STRONG",{});var Wlt=s(dfe);LNo=r(Wlt,"xlnet"),Wlt.forEach(t),xNo=r(dye," \u2014 "),OD=n(dye,"A",{href:!0});var Hlt=s(OD);kNo=r(Hlt,"XLNetForQuestionAnsweringSimple"),Hlt.forEach(t),SNo=r(dye," (XLNet model)"),dye.forEach(t),RNo=i(P),cF=n(P,"LI",{});var cye=s(cF);cfe=n(cye,"STRONG",{});var Ult=s(cfe);BNo=r(Ult,"yoso"),Ult.forEach(t),PNo=r(cye," \u2014 "),VD=n(cye,"A",{href:!0});var Jlt=s(VD);$No=r(Jlt,"YosoForQuestionAnswering"),Jlt.forEach(t),INo=r(cye," (YOSO model)"),cye.forEach(t),P.forEach(t),qNo=i(Ut),fF=n(Ut,"P",{});var fye=s(fF);NNo=r(fye,"The model is set in evaluation mode by default using "),ffe=n(fye,"CODE",{});var Ylt=s(ffe);jNo=r(Ylt,"model.eval()"),Ylt.forEach(t),DNo=r(fye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mfe=n(fye,"CODE",{});var Klt=s(mfe);GNo=r(Klt,"model.train()"),Klt.forEach(t),fye.forEach(t),ONo=i(Ut),gfe=n(Ut,"P",{});var Zlt=s(gfe);VNo=r(Zlt,"Examples:"),Zlt.forEach(t),XNo=i(Ut),m(AC.$$.fragment,Ut),Ut.forEach(t),ml.forEach(t),yBe=i(c),yd=n(c,"H2",{class:!0});var I$e=s(yd);mF=n(I$e,"A",{id:!0,class:!0,href:!0});var eit=s(mF);hfe=n(eit,"SPAN",{});var oit=s(hfe);m(yC.$$.fragment,oit),oit.forEach(t),eit.forEach(t),zNo=i(I$e),pfe=n(I$e,"SPAN",{});var rit=s(pfe);QNo=r(rit,"AutoModelForTableQuestionAnswering"),rit.forEach(t),I$e.forEach(t),LBe=i(c),sr=n(c,"DIV",{class:!0});var hl=s(sr);m(LC.$$.fragment,hl),WNo=i(hl),Ld=n(hl,"P",{});var UU=s(Ld);HNo=r(UU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),XD=n(UU,"A",{href:!0});var tit=s(XD);UNo=r(tit,"from_pretrained()"),tit.forEach(t),JNo=r(UU," class method or the "),zD=n(UU,"A",{href:!0});var ait=s(zD);YNo=r(ait,"from_config()"),ait.forEach(t),KNo=r(UU,` class
method.`),UU.forEach(t),ZNo=i(hl),xC=n(hl,"P",{});var q$e=s(xC);ejo=r(q$e,"This class cannot be instantiated directly using "),_fe=n(q$e,"CODE",{});var nit=s(_fe);ojo=r(nit,"__init__()"),nit.forEach(t),rjo=r(q$e," (throws an error)."),q$e.forEach(t),tjo=i(hl),et=n(hl,"DIV",{class:!0});var pl=s(et);m(kC.$$.fragment,pl),ajo=i(pl),ufe=n(pl,"P",{});var sit=s(ufe);njo=r(sit,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),sit.forEach(t),sjo=i(pl),xd=n(pl,"P",{});var JU=s(xd);ljo=r(JU,`Note:
Loading a model from its configuration file does `),bfe=n(JU,"STRONG",{});var lit=s(bfe);ijo=r(lit,"not"),lit.forEach(t),djo=r(JU,` load the model weights. It only affects the
model\u2019s configuration. Use `),QD=n(JU,"A",{href:!0});var iit=s(QD);cjo=r(iit,"from_pretrained()"),iit.forEach(t),fjo=r(JU," to load the model weights."),JU.forEach(t),mjo=i(pl),Ffe=n(pl,"P",{});var dit=s(Ffe);gjo=r(dit,"Examples:"),dit.forEach(t),hjo=i(pl),m(SC.$$.fragment,pl),pl.forEach(t),pjo=i(hl),He=n(hl,"DIV",{class:!0});var Jt=s(He);m(RC.$$.fragment,Jt),_jo=i(Jt),vfe=n(Jt,"P",{});var cit=s(vfe);ujo=r(cit,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),cit.forEach(t),bjo=i(Jt),en=n(Jt,"P",{});var zE=s(en);Fjo=r(zE,"The model class to instantiate is selected based on the "),Tfe=n(zE,"CODE",{});var fit=s(Tfe);vjo=r(fit,"model_type"),fit.forEach(t),Tjo=r(zE,` property of the config object (either
passed as an argument or loaded from `),Mfe=n(zE,"CODE",{});var mit=s(Mfe);Mjo=r(mit,"pretrained_model_name_or_path"),mit.forEach(t),Ejo=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Efe=n(zE,"CODE",{});var git=s(Efe);Cjo=r(git,"pretrained_model_name_or_path"),git.forEach(t),wjo=r(zE,":"),zE.forEach(t),Ajo=i(Jt),Cfe=n(Jt,"UL",{});var hit=s(Cfe);gF=n(hit,"LI",{});var mye=s(gF);wfe=n(mye,"STRONG",{});var pit=s(wfe);yjo=r(pit,"tapas"),pit.forEach(t),Ljo=r(mye," \u2014 "),WD=n(mye,"A",{href:!0});var _it=s(WD);xjo=r(_it,"TapasForQuestionAnswering"),_it.forEach(t),kjo=r(mye," (TAPAS model)"),mye.forEach(t),hit.forEach(t),Sjo=i(Jt),hF=n(Jt,"P",{});var gye=s(hF);Rjo=r(gye,"The model is set in evaluation mode by default using "),Afe=n(gye,"CODE",{});var uit=s(Afe);Bjo=r(uit,"model.eval()"),uit.forEach(t),Pjo=r(gye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yfe=n(gye,"CODE",{});var bit=s(yfe);$jo=r(bit,"model.train()"),bit.forEach(t),gye.forEach(t),Ijo=i(Jt),Lfe=n(Jt,"P",{});var Fit=s(Lfe);qjo=r(Fit,"Examples:"),Fit.forEach(t),Njo=i(Jt),m(BC.$$.fragment,Jt),Jt.forEach(t),hl.forEach(t),xBe=i(c),kd=n(c,"H2",{class:!0});var N$e=s(kd);pF=n(N$e,"A",{id:!0,class:!0,href:!0});var vit=s(pF);xfe=n(vit,"SPAN",{});var Tit=s(xfe);m(PC.$$.fragment,Tit),Tit.forEach(t),vit.forEach(t),jjo=i(N$e),kfe=n(N$e,"SPAN",{});var Mit=s(kfe);Djo=r(Mit,"AutoModelForImageClassification"),Mit.forEach(t),N$e.forEach(t),kBe=i(c),lr=n(c,"DIV",{class:!0});var _l=s(lr);m($C.$$.fragment,_l),Gjo=i(_l),Sd=n(_l,"P",{});var YU=s(Sd);Ojo=r(YU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),HD=n(YU,"A",{href:!0});var Eit=s(HD);Vjo=r(Eit,"from_pretrained()"),Eit.forEach(t),Xjo=r(YU," class method or the "),UD=n(YU,"A",{href:!0});var Cit=s(UD);zjo=r(Cit,"from_config()"),Cit.forEach(t),Qjo=r(YU,` class
method.`),YU.forEach(t),Wjo=i(_l),IC=n(_l,"P",{});var j$e=s(IC);Hjo=r(j$e,"This class cannot be instantiated directly using "),Sfe=n(j$e,"CODE",{});var wit=s(Sfe);Ujo=r(wit,"__init__()"),wit.forEach(t),Jjo=r(j$e," (throws an error)."),j$e.forEach(t),Yjo=i(_l),ot=n(_l,"DIV",{class:!0});var ul=s(ot);m(qC.$$.fragment,ul),Kjo=i(ul),Rfe=n(ul,"P",{});var Ait=s(Rfe);Zjo=r(Ait,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ait.forEach(t),eDo=i(ul),Rd=n(ul,"P",{});var KU=s(Rd);oDo=r(KU,`Note:
Loading a model from its configuration file does `),Bfe=n(KU,"STRONG",{});var yit=s(Bfe);rDo=r(yit,"not"),yit.forEach(t),tDo=r(KU,` load the model weights. It only affects the
model\u2019s configuration. Use `),JD=n(KU,"A",{href:!0});var Lit=s(JD);aDo=r(Lit,"from_pretrained()"),Lit.forEach(t),nDo=r(KU," to load the model weights."),KU.forEach(t),sDo=i(ul),Pfe=n(ul,"P",{});var xit=s(Pfe);lDo=r(xit,"Examples:"),xit.forEach(t),iDo=i(ul),m(NC.$$.fragment,ul),ul.forEach(t),dDo=i(_l),Ue=n(_l,"DIV",{class:!0});var Yt=s(Ue);m(jC.$$.fragment,Yt),cDo=i(Yt),$fe=n(Yt,"P",{});var kit=s($fe);fDo=r(kit,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kit.forEach(t),mDo=i(Yt),on=n(Yt,"P",{});var QE=s(on);gDo=r(QE,"The model class to instantiate is selected based on the "),Ife=n(QE,"CODE",{});var Sit=s(Ife);hDo=r(Sit,"model_type"),Sit.forEach(t),pDo=r(QE,` property of the config object (either
passed as an argument or loaded from `),qfe=n(QE,"CODE",{});var Rit=s(qfe);_Do=r(Rit,"pretrained_model_name_or_path"),Rit.forEach(t),uDo=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nfe=n(QE,"CODE",{});var Bit=s(Nfe);bDo=r(Bit,"pretrained_model_name_or_path"),Bit.forEach(t),FDo=r(QE,":"),QE.forEach(t),vDo=i(Yt),fe=n(Yt,"UL",{});var pe=s(fe);_F=n(pe,"LI",{});var hye=s(_F);jfe=n(hye,"STRONG",{});var Pit=s(jfe);TDo=r(Pit,"beit"),Pit.forEach(t),MDo=r(hye," \u2014 "),YD=n(hye,"A",{href:!0});var $it=s(YD);EDo=r($it,"BeitForImageClassification"),$it.forEach(t),CDo=r(hye," (BEiT model)"),hye.forEach(t),wDo=i(pe),uF=n(pe,"LI",{});var pye=s(uF);Dfe=n(pye,"STRONG",{});var Iit=s(Dfe);ADo=r(Iit,"convnext"),Iit.forEach(t),yDo=r(pye," \u2014 "),KD=n(pye,"A",{href:!0});var qit=s(KD);LDo=r(qit,"ConvNextForImageClassification"),qit.forEach(t),xDo=r(pye," (ConvNext model)"),pye.forEach(t),kDo=i(pe),Gs=n(pe,"LI",{});var M8=s(Gs);Gfe=n(M8,"STRONG",{});var Nit=s(Gfe);SDo=r(Nit,"deit"),Nit.forEach(t),RDo=r(M8," \u2014 "),ZD=n(M8,"A",{href:!0});var jit=s(ZD);BDo=r(jit,"DeiTForImageClassification"),jit.forEach(t),PDo=r(M8," or "),eG=n(M8,"A",{href:!0});var Dit=s(eG);$Do=r(Dit,"DeiTForImageClassificationWithTeacher"),Dit.forEach(t),IDo=r(M8," (DeiT model)"),M8.forEach(t),qDo=i(pe),bF=n(pe,"LI",{});var _ye=s(bF);Ofe=n(_ye,"STRONG",{});var Git=s(Ofe);NDo=r(Git,"imagegpt"),Git.forEach(t),jDo=r(_ye," \u2014 "),oG=n(_ye,"A",{href:!0});var Oit=s(oG);DDo=r(Oit,"ImageGPTForImageClassification"),Oit.forEach(t),GDo=r(_ye," (ImageGPT model)"),_ye.forEach(t),ODo=i(pe),ma=n(pe,"LI",{});var If=s(ma);Vfe=n(If,"STRONG",{});var Vit=s(Vfe);VDo=r(Vit,"perceiver"),Vit.forEach(t),XDo=r(If," \u2014 "),rG=n(If,"A",{href:!0});var Xit=s(rG);zDo=r(Xit,"PerceiverForImageClassificationLearned"),Xit.forEach(t),QDo=r(If," or "),tG=n(If,"A",{href:!0});var zit=s(tG);WDo=r(zit,"PerceiverForImageClassificationFourier"),zit.forEach(t),HDo=r(If," or "),aG=n(If,"A",{href:!0});var Qit=s(aG);UDo=r(Qit,"PerceiverForImageClassificationConvProcessing"),Qit.forEach(t),JDo=r(If," (Perceiver model)"),If.forEach(t),YDo=i(pe),FF=n(pe,"LI",{});var uye=s(FF);Xfe=n(uye,"STRONG",{});var Wit=s(Xfe);KDo=r(Wit,"poolformer"),Wit.forEach(t),ZDo=r(uye," \u2014 "),nG=n(uye,"A",{href:!0});var Hit=s(nG);eGo=r(Hit,"PoolFormerForImageClassification"),Hit.forEach(t),oGo=r(uye," (PoolFormer model)"),uye.forEach(t),rGo=i(pe),vF=n(pe,"LI",{});var bye=s(vF);zfe=n(bye,"STRONG",{});var Uit=s(zfe);tGo=r(Uit,"regnet"),Uit.forEach(t),aGo=r(bye," \u2014 "),sG=n(bye,"A",{href:!0});var Jit=s(sG);nGo=r(Jit,"RegNetForImageClassification"),Jit.forEach(t),sGo=r(bye," (RegNet model)"),bye.forEach(t),lGo=i(pe),TF=n(pe,"LI",{});var Fye=s(TF);Qfe=n(Fye,"STRONG",{});var Yit=s(Qfe);iGo=r(Yit,"resnet"),Yit.forEach(t),dGo=r(Fye," \u2014 "),lG=n(Fye,"A",{href:!0});var Kit=s(lG);cGo=r(Kit,"ResNetForImageClassification"),Kit.forEach(t),fGo=r(Fye," (ResNet model)"),Fye.forEach(t),mGo=i(pe),MF=n(pe,"LI",{});var vye=s(MF);Wfe=n(vye,"STRONG",{});var Zit=s(Wfe);gGo=r(Zit,"segformer"),Zit.forEach(t),hGo=r(vye," \u2014 "),iG=n(vye,"A",{href:!0});var edt=s(iG);pGo=r(edt,"SegformerForImageClassification"),edt.forEach(t),_Go=r(vye," (SegFormer model)"),vye.forEach(t),uGo=i(pe),EF=n(pe,"LI",{});var Tye=s(EF);Hfe=n(Tye,"STRONG",{});var odt=s(Hfe);bGo=r(odt,"swin"),odt.forEach(t),FGo=r(Tye," \u2014 "),dG=n(Tye,"A",{href:!0});var rdt=s(dG);vGo=r(rdt,"SwinForImageClassification"),rdt.forEach(t),TGo=r(Tye," (Swin model)"),Tye.forEach(t),MGo=i(pe),CF=n(pe,"LI",{});var Mye=s(CF);Ufe=n(Mye,"STRONG",{});var tdt=s(Ufe);EGo=r(tdt,"van"),tdt.forEach(t),CGo=r(Mye," \u2014 "),cG=n(Mye,"A",{href:!0});var adt=s(cG);wGo=r(adt,"VanForImageClassification"),adt.forEach(t),AGo=r(Mye," (VAN model)"),Mye.forEach(t),yGo=i(pe),wF=n(pe,"LI",{});var Eye=s(wF);Jfe=n(Eye,"STRONG",{});var ndt=s(Jfe);LGo=r(ndt,"vit"),ndt.forEach(t),xGo=r(Eye," \u2014 "),fG=n(Eye,"A",{href:!0});var sdt=s(fG);kGo=r(sdt,"ViTForImageClassification"),sdt.forEach(t),SGo=r(Eye," (ViT model)"),Eye.forEach(t),pe.forEach(t),RGo=i(Yt),AF=n(Yt,"P",{});var Cye=s(AF);BGo=r(Cye,"The model is set in evaluation mode by default using "),Yfe=n(Cye,"CODE",{});var ldt=s(Yfe);PGo=r(ldt,"model.eval()"),ldt.forEach(t),$Go=r(Cye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kfe=n(Cye,"CODE",{});var idt=s(Kfe);IGo=r(idt,"model.train()"),idt.forEach(t),Cye.forEach(t),qGo=i(Yt),Zfe=n(Yt,"P",{});var ddt=s(Zfe);NGo=r(ddt,"Examples:"),ddt.forEach(t),jGo=i(Yt),m(DC.$$.fragment,Yt),Yt.forEach(t),_l.forEach(t),SBe=i(c),Bd=n(c,"H2",{class:!0});var D$e=s(Bd);yF=n(D$e,"A",{id:!0,class:!0,href:!0});var cdt=s(yF);eme=n(cdt,"SPAN",{});var fdt=s(eme);m(GC.$$.fragment,fdt),fdt.forEach(t),cdt.forEach(t),DGo=i(D$e),ome=n(D$e,"SPAN",{});var mdt=s(ome);GGo=r(mdt,"AutoModelForVision2Seq"),mdt.forEach(t),D$e.forEach(t),RBe=i(c),ir=n(c,"DIV",{class:!0});var bl=s(ir);m(OC.$$.fragment,bl),OGo=i(bl),Pd=n(bl,"P",{});var ZU=s(Pd);VGo=r(ZU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mG=n(ZU,"A",{href:!0});var gdt=s(mG);XGo=r(gdt,"from_pretrained()"),gdt.forEach(t),zGo=r(ZU," class method or the "),gG=n(ZU,"A",{href:!0});var hdt=s(gG);QGo=r(hdt,"from_config()"),hdt.forEach(t),WGo=r(ZU,` class
method.`),ZU.forEach(t),HGo=i(bl),VC=n(bl,"P",{});var G$e=s(VC);UGo=r(G$e,"This class cannot be instantiated directly using "),rme=n(G$e,"CODE",{});var pdt=s(rme);JGo=r(pdt,"__init__()"),pdt.forEach(t),YGo=r(G$e," (throws an error)."),G$e.forEach(t),KGo=i(bl),rt=n(bl,"DIV",{class:!0});var Fl=s(rt);m(XC.$$.fragment,Fl),ZGo=i(Fl),tme=n(Fl,"P",{});var _dt=s(tme);eOo=r(_dt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_dt.forEach(t),oOo=i(Fl),$d=n(Fl,"P",{});var eJ=s($d);rOo=r(eJ,`Note:
Loading a model from its configuration file does `),ame=n(eJ,"STRONG",{});var udt=s(ame);tOo=r(udt,"not"),udt.forEach(t),aOo=r(eJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=n(eJ,"A",{href:!0});var bdt=s(hG);nOo=r(bdt,"from_pretrained()"),bdt.forEach(t),sOo=r(eJ," to load the model weights."),eJ.forEach(t),lOo=i(Fl),nme=n(Fl,"P",{});var Fdt=s(nme);iOo=r(Fdt,"Examples:"),Fdt.forEach(t),dOo=i(Fl),m(zC.$$.fragment,Fl),Fl.forEach(t),cOo=i(bl),Je=n(bl,"DIV",{class:!0});var Kt=s(Je);m(QC.$$.fragment,Kt),fOo=i(Kt),sme=n(Kt,"P",{});var vdt=s(sme);mOo=r(vdt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vdt.forEach(t),gOo=i(Kt),rn=n(Kt,"P",{});var WE=s(rn);hOo=r(WE,"The model class to instantiate is selected based on the "),lme=n(WE,"CODE",{});var Tdt=s(lme);pOo=r(Tdt,"model_type"),Tdt.forEach(t),_Oo=r(WE,` property of the config object (either
passed as an argument or loaded from `),ime=n(WE,"CODE",{});var Mdt=s(ime);uOo=r(Mdt,"pretrained_model_name_or_path"),Mdt.forEach(t),bOo=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=n(WE,"CODE",{});var Edt=s(dme);FOo=r(Edt,"pretrained_model_name_or_path"),Edt.forEach(t),vOo=r(WE,":"),WE.forEach(t),TOo=i(Kt),cme=n(Kt,"UL",{});var Cdt=s(cme);LF=n(Cdt,"LI",{});var wye=s(LF);fme=n(wye,"STRONG",{});var wdt=s(fme);MOo=r(wdt,"vision-encoder-decoder"),wdt.forEach(t),EOo=r(wye," \u2014 "),pG=n(wye,"A",{href:!0});var Adt=s(pG);COo=r(Adt,"VisionEncoderDecoderModel"),Adt.forEach(t),wOo=r(wye," (Vision Encoder decoder model)"),wye.forEach(t),Cdt.forEach(t),AOo=i(Kt),xF=n(Kt,"P",{});var Aye=s(xF);yOo=r(Aye,"The model is set in evaluation mode by default using "),mme=n(Aye,"CODE",{});var ydt=s(mme);LOo=r(ydt,"model.eval()"),ydt.forEach(t),xOo=r(Aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=n(Aye,"CODE",{});var Ldt=s(gme);kOo=r(Ldt,"model.train()"),Ldt.forEach(t),Aye.forEach(t),SOo=i(Kt),hme=n(Kt,"P",{});var xdt=s(hme);ROo=r(xdt,"Examples:"),xdt.forEach(t),BOo=i(Kt),m(WC.$$.fragment,Kt),Kt.forEach(t),bl.forEach(t),BBe=i(c),Id=n(c,"H2",{class:!0});var O$e=s(Id);kF=n(O$e,"A",{id:!0,class:!0,href:!0});var kdt=s(kF);pme=n(kdt,"SPAN",{});var Sdt=s(pme);m(HC.$$.fragment,Sdt),Sdt.forEach(t),kdt.forEach(t),POo=i(O$e),_me=n(O$e,"SPAN",{});var Rdt=s(_me);$Oo=r(Rdt,"AutoModelForAudioClassification"),Rdt.forEach(t),O$e.forEach(t),PBe=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(UC.$$.fragment,vl),IOo=i(vl),qd=n(vl,"P",{});var oJ=s(qd);qOo=r(oJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),_G=n(oJ,"A",{href:!0});var Bdt=s(_G);NOo=r(Bdt,"from_pretrained()"),Bdt.forEach(t),jOo=r(oJ," class method or the "),uG=n(oJ,"A",{href:!0});var Pdt=s(uG);DOo=r(Pdt,"from_config()"),Pdt.forEach(t),GOo=r(oJ,` class
method.`),oJ.forEach(t),OOo=i(vl),JC=n(vl,"P",{});var V$e=s(JC);VOo=r(V$e,"This class cannot be instantiated directly using "),ume=n(V$e,"CODE",{});var $dt=s(ume);XOo=r($dt,"__init__()"),$dt.forEach(t),zOo=r(V$e," (throws an error)."),V$e.forEach(t),QOo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(YC.$$.fragment,Tl),WOo=i(Tl),bme=n(Tl,"P",{});var Idt=s(bme);HOo=r(Idt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Idt.forEach(t),UOo=i(Tl),Nd=n(Tl,"P",{});var rJ=s(Nd);JOo=r(rJ,`Note:
Loading a model from its configuration file does `),Fme=n(rJ,"STRONG",{});var qdt=s(Fme);YOo=r(qdt,"not"),qdt.forEach(t),KOo=r(rJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=n(rJ,"A",{href:!0});var Ndt=s(bG);ZOo=r(Ndt,"from_pretrained()"),Ndt.forEach(t),eVo=r(rJ," to load the model weights."),rJ.forEach(t),oVo=i(Tl),vme=n(Tl,"P",{});var jdt=s(vme);rVo=r(jdt,"Examples:"),jdt.forEach(t),tVo=i(Tl),m(KC.$$.fragment,Tl),Tl.forEach(t),aVo=i(vl),Ye=n(vl,"DIV",{class:!0});var Zt=s(Ye);m(ZC.$$.fragment,Zt),nVo=i(Zt),Tme=n(Zt,"P",{});var Ddt=s(Tme);sVo=r(Ddt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ddt.forEach(t),lVo=i(Zt),tn=n(Zt,"P",{});var HE=s(tn);iVo=r(HE,"The model class to instantiate is selected based on the "),Mme=n(HE,"CODE",{});var Gdt=s(Mme);dVo=r(Gdt,"model_type"),Gdt.forEach(t),cVo=r(HE,` property of the config object (either
passed as an argument or loaded from `),Eme=n(HE,"CODE",{});var Odt=s(Eme);fVo=r(Odt,"pretrained_model_name_or_path"),Odt.forEach(t),mVo=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=n(HE,"CODE",{});var Vdt=s(Cme);gVo=r(Vdt,"pretrained_model_name_or_path"),Vdt.forEach(t),hVo=r(HE,":"),HE.forEach(t),pVo=i(Zt),Re=n(Zt,"UL",{});var Do=s(Re);SF=n(Do,"LI",{});var yye=s(SF);wme=n(yye,"STRONG",{});var Xdt=s(wme);_Vo=r(Xdt,"data2vec-audio"),Xdt.forEach(t),uVo=r(yye," \u2014 "),FG=n(yye,"A",{href:!0});var zdt=s(FG);bVo=r(zdt,"Data2VecAudioForSequenceClassification"),zdt.forEach(t),FVo=r(yye," (Data2VecAudio model)"),yye.forEach(t),vVo=i(Do),RF=n(Do,"LI",{});var Lye=s(RF);Ame=n(Lye,"STRONG",{});var Qdt=s(Ame);TVo=r(Qdt,"hubert"),Qdt.forEach(t),MVo=r(Lye," \u2014 "),vG=n(Lye,"A",{href:!0});var Wdt=s(vG);EVo=r(Wdt,"HubertForSequenceClassification"),Wdt.forEach(t),CVo=r(Lye," (Hubert model)"),Lye.forEach(t),wVo=i(Do),BF=n(Do,"LI",{});var xye=s(BF);yme=n(xye,"STRONG",{});var Hdt=s(yme);AVo=r(Hdt,"sew"),Hdt.forEach(t),yVo=r(xye," \u2014 "),TG=n(xye,"A",{href:!0});var Udt=s(TG);LVo=r(Udt,"SEWForSequenceClassification"),Udt.forEach(t),xVo=r(xye," (SEW model)"),xye.forEach(t),kVo=i(Do),PF=n(Do,"LI",{});var kye=s(PF);Lme=n(kye,"STRONG",{});var Jdt=s(Lme);SVo=r(Jdt,"sew-d"),Jdt.forEach(t),RVo=r(kye," \u2014 "),MG=n(kye,"A",{href:!0});var Ydt=s(MG);BVo=r(Ydt,"SEWDForSequenceClassification"),Ydt.forEach(t),PVo=r(kye," (SEW-D model)"),kye.forEach(t),$Vo=i(Do),$F=n(Do,"LI",{});var Sye=s($F);xme=n(Sye,"STRONG",{});var Kdt=s(xme);IVo=r(Kdt,"unispeech"),Kdt.forEach(t),qVo=r(Sye," \u2014 "),EG=n(Sye,"A",{href:!0});var Zdt=s(EG);NVo=r(Zdt,"UniSpeechForSequenceClassification"),Zdt.forEach(t),jVo=r(Sye," (UniSpeech model)"),Sye.forEach(t),DVo=i(Do),IF=n(Do,"LI",{});var Rye=s(IF);kme=n(Rye,"STRONG",{});var ect=s(kme);GVo=r(ect,"unispeech-sat"),ect.forEach(t),OVo=r(Rye," \u2014 "),CG=n(Rye,"A",{href:!0});var oct=s(CG);VVo=r(oct,"UniSpeechSatForSequenceClassification"),oct.forEach(t),XVo=r(Rye," (UniSpeechSat model)"),Rye.forEach(t),zVo=i(Do),qF=n(Do,"LI",{});var Bye=s(qF);Sme=n(Bye,"STRONG",{});var rct=s(Sme);QVo=r(rct,"wav2vec2"),rct.forEach(t),WVo=r(Bye," \u2014 "),wG=n(Bye,"A",{href:!0});var tct=s(wG);HVo=r(tct,"Wav2Vec2ForSequenceClassification"),tct.forEach(t),UVo=r(Bye," (Wav2Vec2 model)"),Bye.forEach(t),JVo=i(Do),NF=n(Do,"LI",{});var Pye=s(NF);Rme=n(Pye,"STRONG",{});var act=s(Rme);YVo=r(act,"wavlm"),act.forEach(t),KVo=r(Pye," \u2014 "),AG=n(Pye,"A",{href:!0});var nct=s(AG);ZVo=r(nct,"WavLMForSequenceClassification"),nct.forEach(t),eXo=r(Pye," (WavLM model)"),Pye.forEach(t),Do.forEach(t),oXo=i(Zt),jF=n(Zt,"P",{});var $ye=s(jF);rXo=r($ye,"The model is set in evaluation mode by default using "),Bme=n($ye,"CODE",{});var sct=s(Bme);tXo=r(sct,"model.eval()"),sct.forEach(t),aXo=r($ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pme=n($ye,"CODE",{});var lct=s(Pme);nXo=r(lct,"model.train()"),lct.forEach(t),$ye.forEach(t),sXo=i(Zt),$me=n(Zt,"P",{});var ict=s($me);lXo=r(ict,"Examples:"),ict.forEach(t),iXo=i(Zt),m(ew.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),$Be=i(c),jd=n(c,"H2",{class:!0});var X$e=s(jd);DF=n(X$e,"A",{id:!0,class:!0,href:!0});var dct=s(DF);Ime=n(dct,"SPAN",{});var cct=s(Ime);m(ow.$$.fragment,cct),cct.forEach(t),dct.forEach(t),dXo=i(X$e),qme=n(X$e,"SPAN",{});var fct=s(qme);cXo=r(fct,"AutoModelForAudioFrameClassification"),fct.forEach(t),X$e.forEach(t),IBe=i(c),cr=n(c,"DIV",{class:!0});var Ml=s(cr);m(rw.$$.fragment,Ml),fXo=i(Ml),Dd=n(Ml,"P",{});var tJ=s(Dd);mXo=r(tJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),yG=n(tJ,"A",{href:!0});var mct=s(yG);gXo=r(mct,"from_pretrained()"),mct.forEach(t),hXo=r(tJ," class method or the "),LG=n(tJ,"A",{href:!0});var gct=s(LG);pXo=r(gct,"from_config()"),gct.forEach(t),_Xo=r(tJ,` class
method.`),tJ.forEach(t),uXo=i(Ml),tw=n(Ml,"P",{});var z$e=s(tw);bXo=r(z$e,"This class cannot be instantiated directly using "),Nme=n(z$e,"CODE",{});var hct=s(Nme);FXo=r(hct,"__init__()"),hct.forEach(t),vXo=r(z$e," (throws an error)."),z$e.forEach(t),TXo=i(Ml),at=n(Ml,"DIV",{class:!0});var El=s(at);m(aw.$$.fragment,El),MXo=i(El),jme=n(El,"P",{});var pct=s(jme);EXo=r(pct,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),pct.forEach(t),CXo=i(El),Gd=n(El,"P",{});var aJ=s(Gd);wXo=r(aJ,`Note:
Loading a model from its configuration file does `),Dme=n(aJ,"STRONG",{});var _ct=s(Dme);AXo=r(_ct,"not"),_ct.forEach(t),yXo=r(aJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=n(aJ,"A",{href:!0});var uct=s(xG);LXo=r(uct,"from_pretrained()"),uct.forEach(t),xXo=r(aJ," to load the model weights."),aJ.forEach(t),kXo=i(El),Gme=n(El,"P",{});var bct=s(Gme);SXo=r(bct,"Examples:"),bct.forEach(t),RXo=i(El),m(nw.$$.fragment,El),El.forEach(t),BXo=i(Ml),Ke=n(Ml,"DIV",{class:!0});var ea=s(Ke);m(sw.$$.fragment,ea),PXo=i(ea),Ome=n(ea,"P",{});var Fct=s(Ome);$Xo=r(Fct,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Fct.forEach(t),IXo=i(ea),an=n(ea,"P",{});var UE=s(an);qXo=r(UE,"The model class to instantiate is selected based on the "),Vme=n(UE,"CODE",{});var vct=s(Vme);NXo=r(vct,"model_type"),vct.forEach(t),jXo=r(UE,` property of the config object (either
passed as an argument or loaded from `),Xme=n(UE,"CODE",{});var Tct=s(Xme);DXo=r(Tct,"pretrained_model_name_or_path"),Tct.forEach(t),GXo=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=n(UE,"CODE",{});var Mct=s(zme);OXo=r(Mct,"pretrained_model_name_or_path"),Mct.forEach(t),VXo=r(UE,":"),UE.forEach(t),XXo=i(ea),nn=n(ea,"UL",{});var JE=s(nn);GF=n(JE,"LI",{});var Iye=s(GF);Qme=n(Iye,"STRONG",{});var Ect=s(Qme);zXo=r(Ect,"data2vec-audio"),Ect.forEach(t),QXo=r(Iye," \u2014 "),kG=n(Iye,"A",{href:!0});var Cct=s(kG);WXo=r(Cct,"Data2VecAudioForAudioFrameClassification"),Cct.forEach(t),HXo=r(Iye," (Data2VecAudio model)"),Iye.forEach(t),UXo=i(JE),OF=n(JE,"LI",{});var qye=s(OF);Wme=n(qye,"STRONG",{});var wct=s(Wme);JXo=r(wct,"unispeech-sat"),wct.forEach(t),YXo=r(qye," \u2014 "),SG=n(qye,"A",{href:!0});var Act=s(SG);KXo=r(Act,"UniSpeechSatForAudioFrameClassification"),Act.forEach(t),ZXo=r(qye," (UniSpeechSat model)"),qye.forEach(t),ezo=i(JE),VF=n(JE,"LI",{});var Nye=s(VF);Hme=n(Nye,"STRONG",{});var yct=s(Hme);ozo=r(yct,"wav2vec2"),yct.forEach(t),rzo=r(Nye," \u2014 "),RG=n(Nye,"A",{href:!0});var Lct=s(RG);tzo=r(Lct,"Wav2Vec2ForAudioFrameClassification"),Lct.forEach(t),azo=r(Nye," (Wav2Vec2 model)"),Nye.forEach(t),nzo=i(JE),XF=n(JE,"LI",{});var jye=s(XF);Ume=n(jye,"STRONG",{});var xct=s(Ume);szo=r(xct,"wavlm"),xct.forEach(t),lzo=r(jye," \u2014 "),BG=n(jye,"A",{href:!0});var kct=s(BG);izo=r(kct,"WavLMForAudioFrameClassification"),kct.forEach(t),dzo=r(jye," (WavLM model)"),jye.forEach(t),JE.forEach(t),czo=i(ea),zF=n(ea,"P",{});var Dye=s(zF);fzo=r(Dye,"The model is set in evaluation mode by default using "),Jme=n(Dye,"CODE",{});var Sct=s(Jme);mzo=r(Sct,"model.eval()"),Sct.forEach(t),gzo=r(Dye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yme=n(Dye,"CODE",{});var Rct=s(Yme);hzo=r(Rct,"model.train()"),Rct.forEach(t),Dye.forEach(t),pzo=i(ea),Kme=n(ea,"P",{});var Bct=s(Kme);_zo=r(Bct,"Examples:"),Bct.forEach(t),uzo=i(ea),m(lw.$$.fragment,ea),ea.forEach(t),Ml.forEach(t),qBe=i(c),Od=n(c,"H2",{class:!0});var Q$e=s(Od);QF=n(Q$e,"A",{id:!0,class:!0,href:!0});var Pct=s(QF);Zme=n(Pct,"SPAN",{});var $ct=s(Zme);m(iw.$$.fragment,$ct),$ct.forEach(t),Pct.forEach(t),bzo=i(Q$e),ege=n(Q$e,"SPAN",{});var Ict=s(ege);Fzo=r(Ict,"AutoModelForCTC"),Ict.forEach(t),Q$e.forEach(t),NBe=i(c),fr=n(c,"DIV",{class:!0});var Cl=s(fr);m(dw.$$.fragment,Cl),vzo=i(Cl),Vd=n(Cl,"P",{});var nJ=s(Vd);Tzo=r(nJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),PG=n(nJ,"A",{href:!0});var qct=s(PG);Mzo=r(qct,"from_pretrained()"),qct.forEach(t),Ezo=r(nJ," class method or the "),$G=n(nJ,"A",{href:!0});var Nct=s($G);Czo=r(Nct,"from_config()"),Nct.forEach(t),wzo=r(nJ,` class
method.`),nJ.forEach(t),Azo=i(Cl),cw=n(Cl,"P",{});var W$e=s(cw);yzo=r(W$e,"This class cannot be instantiated directly using "),oge=n(W$e,"CODE",{});var jct=s(oge);Lzo=r(jct,"__init__()"),jct.forEach(t),xzo=r(W$e," (throws an error)."),W$e.forEach(t),kzo=i(Cl),nt=n(Cl,"DIV",{class:!0});var wl=s(nt);m(fw.$$.fragment,wl),Szo=i(wl),rge=n(wl,"P",{});var Dct=s(rge);Rzo=r(Dct,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Dct.forEach(t),Bzo=i(wl),Xd=n(wl,"P",{});var sJ=s(Xd);Pzo=r(sJ,`Note:
Loading a model from its configuration file does `),tge=n(sJ,"STRONG",{});var Gct=s(tge);$zo=r(Gct,"not"),Gct.forEach(t),Izo=r(sJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=n(sJ,"A",{href:!0});var Oct=s(IG);qzo=r(Oct,"from_pretrained()"),Oct.forEach(t),Nzo=r(sJ," to load the model weights."),sJ.forEach(t),jzo=i(wl),age=n(wl,"P",{});var Vct=s(age);Dzo=r(Vct,"Examples:"),Vct.forEach(t),Gzo=i(wl),m(mw.$$.fragment,wl),wl.forEach(t),Ozo=i(Cl),Ze=n(Cl,"DIV",{class:!0});var oa=s(Ze);m(gw.$$.fragment,oa),Vzo=i(oa),nge=n(oa,"P",{});var Xct=s(nge);Xzo=r(Xct,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Xct.forEach(t),zzo=i(oa),sn=n(oa,"P",{});var YE=s(sn);Qzo=r(YE,"The model class to instantiate is selected based on the "),sge=n(YE,"CODE",{});var zct=s(sge);Wzo=r(zct,"model_type"),zct.forEach(t),Hzo=r(YE,` property of the config object (either
passed as an argument or loaded from `),lge=n(YE,"CODE",{});var Qct=s(lge);Uzo=r(Qct,"pretrained_model_name_or_path"),Qct.forEach(t),Jzo=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=n(YE,"CODE",{});var Wct=s(ige);Yzo=r(Wct,"pretrained_model_name_or_path"),Wct.forEach(t),Kzo=r(YE,":"),YE.forEach(t),Zzo=i(oa),Be=n(oa,"UL",{});var Go=s(Be);WF=n(Go,"LI",{});var Gye=s(WF);dge=n(Gye,"STRONG",{});var Hct=s(dge);eQo=r(Hct,"data2vec-audio"),Hct.forEach(t),oQo=r(Gye," \u2014 "),qG=n(Gye,"A",{href:!0});var Uct=s(qG);rQo=r(Uct,"Data2VecAudioForCTC"),Uct.forEach(t),tQo=r(Gye," (Data2VecAudio model)"),Gye.forEach(t),aQo=i(Go),HF=n(Go,"LI",{});var Oye=s(HF);cge=n(Oye,"STRONG",{});var Jct=s(cge);nQo=r(Jct,"hubert"),Jct.forEach(t),sQo=r(Oye," \u2014 "),NG=n(Oye,"A",{href:!0});var Yct=s(NG);lQo=r(Yct,"HubertForCTC"),Yct.forEach(t),iQo=r(Oye," (Hubert model)"),Oye.forEach(t),dQo=i(Go),UF=n(Go,"LI",{});var Vye=s(UF);fge=n(Vye,"STRONG",{});var Kct=s(fge);cQo=r(Kct,"sew"),Kct.forEach(t),fQo=r(Vye," \u2014 "),jG=n(Vye,"A",{href:!0});var Zct=s(jG);mQo=r(Zct,"SEWForCTC"),Zct.forEach(t),gQo=r(Vye," (SEW model)"),Vye.forEach(t),hQo=i(Go),JF=n(Go,"LI",{});var Xye=s(JF);mge=n(Xye,"STRONG",{});var eft=s(mge);pQo=r(eft,"sew-d"),eft.forEach(t),_Qo=r(Xye," \u2014 "),DG=n(Xye,"A",{href:!0});var oft=s(DG);uQo=r(oft,"SEWDForCTC"),oft.forEach(t),bQo=r(Xye," (SEW-D model)"),Xye.forEach(t),FQo=i(Go),YF=n(Go,"LI",{});var zye=s(YF);gge=n(zye,"STRONG",{});var rft=s(gge);vQo=r(rft,"unispeech"),rft.forEach(t),TQo=r(zye," \u2014 "),GG=n(zye,"A",{href:!0});var tft=s(GG);MQo=r(tft,"UniSpeechForCTC"),tft.forEach(t),EQo=r(zye," (UniSpeech model)"),zye.forEach(t),CQo=i(Go),KF=n(Go,"LI",{});var Qye=s(KF);hge=n(Qye,"STRONG",{});var aft=s(hge);wQo=r(aft,"unispeech-sat"),aft.forEach(t),AQo=r(Qye," \u2014 "),OG=n(Qye,"A",{href:!0});var nft=s(OG);yQo=r(nft,"UniSpeechSatForCTC"),nft.forEach(t),LQo=r(Qye," (UniSpeechSat model)"),Qye.forEach(t),xQo=i(Go),ZF=n(Go,"LI",{});var Wye=s(ZF);pge=n(Wye,"STRONG",{});var sft=s(pge);kQo=r(sft,"wav2vec2"),sft.forEach(t),SQo=r(Wye," \u2014 "),VG=n(Wye,"A",{href:!0});var lft=s(VG);RQo=r(lft,"Wav2Vec2ForCTC"),lft.forEach(t),BQo=r(Wye," (Wav2Vec2 model)"),Wye.forEach(t),PQo=i(Go),ev=n(Go,"LI",{});var Hye=s(ev);_ge=n(Hye,"STRONG",{});var ift=s(_ge);$Qo=r(ift,"wavlm"),ift.forEach(t),IQo=r(Hye," \u2014 "),XG=n(Hye,"A",{href:!0});var dft=s(XG);qQo=r(dft,"WavLMForCTC"),dft.forEach(t),NQo=r(Hye," (WavLM model)"),Hye.forEach(t),Go.forEach(t),jQo=i(oa),ov=n(oa,"P",{});var Uye=s(ov);DQo=r(Uye,"The model is set in evaluation mode by default using "),uge=n(Uye,"CODE",{});var cft=s(uge);GQo=r(cft,"model.eval()"),cft.forEach(t),OQo=r(Uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=n(Uye,"CODE",{});var fft=s(bge);VQo=r(fft,"model.train()"),fft.forEach(t),Uye.forEach(t),XQo=i(oa),Fge=n(oa,"P",{});var mft=s(Fge);zQo=r(mft,"Examples:"),mft.forEach(t),QQo=i(oa),m(hw.$$.fragment,oa),oa.forEach(t),Cl.forEach(t),jBe=i(c),zd=n(c,"H2",{class:!0});var H$e=s(zd);rv=n(H$e,"A",{id:!0,class:!0,href:!0});var gft=s(rv);vge=n(gft,"SPAN",{});var hft=s(vge);m(pw.$$.fragment,hft),hft.forEach(t),gft.forEach(t),WQo=i(H$e),Tge=n(H$e,"SPAN",{});var pft=s(Tge);HQo=r(pft,"AutoModelForSpeechSeq2Seq"),pft.forEach(t),H$e.forEach(t),DBe=i(c),mr=n(c,"DIV",{class:!0});var Al=s(mr);m(_w.$$.fragment,Al),UQo=i(Al),Qd=n(Al,"P",{});var lJ=s(Qd);JQo=r(lJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zG=n(lJ,"A",{href:!0});var _ft=s(zG);YQo=r(_ft,"from_pretrained()"),_ft.forEach(t),KQo=r(lJ," class method or the "),QG=n(lJ,"A",{href:!0});var uft=s(QG);ZQo=r(uft,"from_config()"),uft.forEach(t),eWo=r(lJ,` class
method.`),lJ.forEach(t),oWo=i(Al),uw=n(Al,"P",{});var U$e=s(uw);rWo=r(U$e,"This class cannot be instantiated directly using "),Mge=n(U$e,"CODE",{});var bft=s(Mge);tWo=r(bft,"__init__()"),bft.forEach(t),aWo=r(U$e," (throws an error)."),U$e.forEach(t),nWo=i(Al),st=n(Al,"DIV",{class:!0});var yl=s(st);m(bw.$$.fragment,yl),sWo=i(yl),Ege=n(yl,"P",{});var Fft=s(Ege);lWo=r(Fft,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Fft.forEach(t),iWo=i(yl),Wd=n(yl,"P",{});var iJ=s(Wd);dWo=r(iJ,`Note:
Loading a model from its configuration file does `),Cge=n(iJ,"STRONG",{});var vft=s(Cge);cWo=r(vft,"not"),vft.forEach(t),fWo=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WG=n(iJ,"A",{href:!0});var Tft=s(WG);mWo=r(Tft,"from_pretrained()"),Tft.forEach(t),gWo=r(iJ," to load the model weights."),iJ.forEach(t),hWo=i(yl),wge=n(yl,"P",{});var Mft=s(wge);pWo=r(Mft,"Examples:"),Mft.forEach(t),_Wo=i(yl),m(Fw.$$.fragment,yl),yl.forEach(t),uWo=i(Al),eo=n(Al,"DIV",{class:!0});var ra=s(eo);m(vw.$$.fragment,ra),bWo=i(ra),Age=n(ra,"P",{});var Eft=s(Age);FWo=r(Eft,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Eft.forEach(t),vWo=i(ra),ln=n(ra,"P",{});var KE=s(ln);TWo=r(KE,"The model class to instantiate is selected based on the "),yge=n(KE,"CODE",{});var Cft=s(yge);MWo=r(Cft,"model_type"),Cft.forEach(t),EWo=r(KE,` property of the config object (either
passed as an argument or loaded from `),Lge=n(KE,"CODE",{});var wft=s(Lge);CWo=r(wft,"pretrained_model_name_or_path"),wft.forEach(t),wWo=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xge=n(KE,"CODE",{});var Aft=s(xge);AWo=r(Aft,"pretrained_model_name_or_path"),Aft.forEach(t),yWo=r(KE,":"),KE.forEach(t),LWo=i(ra),Tw=n(ra,"UL",{});var J$e=s(Tw);tv=n(J$e,"LI",{});var Jye=s(tv);kge=n(Jye,"STRONG",{});var yft=s(kge);xWo=r(yft,"speech-encoder-decoder"),yft.forEach(t),kWo=r(Jye," \u2014 "),HG=n(Jye,"A",{href:!0});var Lft=s(HG);SWo=r(Lft,"SpeechEncoderDecoderModel"),Lft.forEach(t),RWo=r(Jye," (Speech Encoder decoder model)"),Jye.forEach(t),BWo=i(J$e),av=n(J$e,"LI",{});var Yye=s(av);Sge=n(Yye,"STRONG",{});var xft=s(Sge);PWo=r(xft,"speech_to_text"),xft.forEach(t),$Wo=r(Yye," \u2014 "),UG=n(Yye,"A",{href:!0});var kft=s(UG);IWo=r(kft,"Speech2TextForConditionalGeneration"),kft.forEach(t),qWo=r(Yye," (Speech2Text model)"),Yye.forEach(t),J$e.forEach(t),NWo=i(ra),nv=n(ra,"P",{});var Kye=s(nv);jWo=r(Kye,"The model is set in evaluation mode by default using "),Rge=n(Kye,"CODE",{});var Sft=s(Rge);DWo=r(Sft,"model.eval()"),Sft.forEach(t),GWo=r(Kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bge=n(Kye,"CODE",{});var Rft=s(Bge);OWo=r(Rft,"model.train()"),Rft.forEach(t),Kye.forEach(t),VWo=i(ra),Pge=n(ra,"P",{});var Bft=s(Pge);XWo=r(Bft,"Examples:"),Bft.forEach(t),zWo=i(ra),m(Mw.$$.fragment,ra),ra.forEach(t),Al.forEach(t),GBe=i(c),Hd=n(c,"H2",{class:!0});var Y$e=s(Hd);sv=n(Y$e,"A",{id:!0,class:!0,href:!0});var Pft=s(sv);$ge=n(Pft,"SPAN",{});var $ft=s($ge);m(Ew.$$.fragment,$ft),$ft.forEach(t),Pft.forEach(t),QWo=i(Y$e),Ige=n(Y$e,"SPAN",{});var Ift=s(Ige);WWo=r(Ift,"AutoModelForAudioXVector"),Ift.forEach(t),Y$e.forEach(t),OBe=i(c),gr=n(c,"DIV",{class:!0});var Ll=s(gr);m(Cw.$$.fragment,Ll),HWo=i(Ll),Ud=n(Ll,"P",{});var dJ=s(Ud);UWo=r(dJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),JG=n(dJ,"A",{href:!0});var qft=s(JG);JWo=r(qft,"from_pretrained()"),qft.forEach(t),YWo=r(dJ," class method or the "),YG=n(dJ,"A",{href:!0});var Nft=s(YG);KWo=r(Nft,"from_config()"),Nft.forEach(t),ZWo=r(dJ,` class
method.`),dJ.forEach(t),eHo=i(Ll),ww=n(Ll,"P",{});var K$e=s(ww);oHo=r(K$e,"This class cannot be instantiated directly using "),qge=n(K$e,"CODE",{});var jft=s(qge);rHo=r(jft,"__init__()"),jft.forEach(t),tHo=r(K$e," (throws an error)."),K$e.forEach(t),aHo=i(Ll),lt=n(Ll,"DIV",{class:!0});var xl=s(lt);m(Aw.$$.fragment,xl),nHo=i(xl),Nge=n(xl,"P",{});var Dft=s(Nge);sHo=r(Dft,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Dft.forEach(t),lHo=i(xl),Jd=n(xl,"P",{});var cJ=s(Jd);iHo=r(cJ,`Note:
Loading a model from its configuration file does `),jge=n(cJ,"STRONG",{});var Gft=s(jge);dHo=r(Gft,"not"),Gft.forEach(t),cHo=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=n(cJ,"A",{href:!0});var Oft=s(KG);fHo=r(Oft,"from_pretrained()"),Oft.forEach(t),mHo=r(cJ," to load the model weights."),cJ.forEach(t),gHo=i(xl),Dge=n(xl,"P",{});var Vft=s(Dge);hHo=r(Vft,"Examples:"),Vft.forEach(t),pHo=i(xl),m(yw.$$.fragment,xl),xl.forEach(t),_Ho=i(Ll),oo=n(Ll,"DIV",{class:!0});var ta=s(oo);m(Lw.$$.fragment,ta),uHo=i(ta),Gge=n(ta,"P",{});var Xft=s(Gge);bHo=r(Xft,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Xft.forEach(t),FHo=i(ta),dn=n(ta,"P",{});var ZE=s(dn);vHo=r(ZE,"The model class to instantiate is selected based on the "),Oge=n(ZE,"CODE",{});var zft=s(Oge);THo=r(zft,"model_type"),zft.forEach(t),MHo=r(ZE,` property of the config object (either
passed as an argument or loaded from `),Vge=n(ZE,"CODE",{});var Qft=s(Vge);EHo=r(Qft,"pretrained_model_name_or_path"),Qft.forEach(t),CHo=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xge=n(ZE,"CODE",{});var Wft=s(Xge);wHo=r(Wft,"pretrained_model_name_or_path"),Wft.forEach(t),AHo=r(ZE,":"),ZE.forEach(t),yHo=i(ta),cn=n(ta,"UL",{});var e5=s(cn);lv=n(e5,"LI",{});var Zye=s(lv);zge=n(Zye,"STRONG",{});var Hft=s(zge);LHo=r(Hft,"data2vec-audio"),Hft.forEach(t),xHo=r(Zye," \u2014 "),ZG=n(Zye,"A",{href:!0});var Uft=s(ZG);kHo=r(Uft,"Data2VecAudioForXVector"),Uft.forEach(t),SHo=r(Zye," (Data2VecAudio model)"),Zye.forEach(t),RHo=i(e5),iv=n(e5,"LI",{});var eLe=s(iv);Qge=n(eLe,"STRONG",{});var Jft=s(Qge);BHo=r(Jft,"unispeech-sat"),Jft.forEach(t),PHo=r(eLe," \u2014 "),eO=n(eLe,"A",{href:!0});var Yft=s(eO);$Ho=r(Yft,"UniSpeechSatForXVector"),Yft.forEach(t),IHo=r(eLe," (UniSpeechSat model)"),eLe.forEach(t),qHo=i(e5),dv=n(e5,"LI",{});var oLe=s(dv);Wge=n(oLe,"STRONG",{});var Kft=s(Wge);NHo=r(Kft,"wav2vec2"),Kft.forEach(t),jHo=r(oLe," \u2014 "),oO=n(oLe,"A",{href:!0});var Zft=s(oO);DHo=r(Zft,"Wav2Vec2ForXVector"),Zft.forEach(t),GHo=r(oLe," (Wav2Vec2 model)"),oLe.forEach(t),OHo=i(e5),cv=n(e5,"LI",{});var rLe=s(cv);Hge=n(rLe,"STRONG",{});var emt=s(Hge);VHo=r(emt,"wavlm"),emt.forEach(t),XHo=r(rLe," \u2014 "),rO=n(rLe,"A",{href:!0});var omt=s(rO);zHo=r(omt,"WavLMForXVector"),omt.forEach(t),QHo=r(rLe," (WavLM model)"),rLe.forEach(t),e5.forEach(t),WHo=i(ta),fv=n(ta,"P",{});var tLe=s(fv);HHo=r(tLe,"The model is set in evaluation mode by default using "),Uge=n(tLe,"CODE",{});var rmt=s(Uge);UHo=r(rmt,"model.eval()"),rmt.forEach(t),JHo=r(tLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jge=n(tLe,"CODE",{});var tmt=s(Jge);YHo=r(tmt,"model.train()"),tmt.forEach(t),tLe.forEach(t),KHo=i(ta),Yge=n(ta,"P",{});var amt=s(Yge);ZHo=r(amt,"Examples:"),amt.forEach(t),eUo=i(ta),m(xw.$$.fragment,ta),ta.forEach(t),Ll.forEach(t),VBe=i(c),Yd=n(c,"H2",{class:!0});var Z$e=s(Yd);mv=n(Z$e,"A",{id:!0,class:!0,href:!0});var nmt=s(mv);Kge=n(nmt,"SPAN",{});var smt=s(Kge);m(kw.$$.fragment,smt),smt.forEach(t),nmt.forEach(t),oUo=i(Z$e),Zge=n(Z$e,"SPAN",{});var lmt=s(Zge);rUo=r(lmt,"AutoModelForMaskedImageModeling"),lmt.forEach(t),Z$e.forEach(t),XBe=i(c),hr=n(c,"DIV",{class:!0});var kl=s(hr);m(Sw.$$.fragment,kl),tUo=i(kl),Kd=n(kl,"P",{});var fJ=s(Kd);aUo=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),tO=n(fJ,"A",{href:!0});var imt=s(tO);nUo=r(imt,"from_pretrained()"),imt.forEach(t),sUo=r(fJ," class method or the "),aO=n(fJ,"A",{href:!0});var dmt=s(aO);lUo=r(dmt,"from_config()"),dmt.forEach(t),iUo=r(fJ,` class
method.`),fJ.forEach(t),dUo=i(kl),Rw=n(kl,"P",{});var eIe=s(Rw);cUo=r(eIe,"This class cannot be instantiated directly using "),ehe=n(eIe,"CODE",{});var cmt=s(ehe);fUo=r(cmt,"__init__()"),cmt.forEach(t),mUo=r(eIe," (throws an error)."),eIe.forEach(t),gUo=i(kl),it=n(kl,"DIV",{class:!0});var Sl=s(it);m(Bw.$$.fragment,Sl),hUo=i(Sl),ohe=n(Sl,"P",{});var fmt=s(ohe);pUo=r(fmt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),fmt.forEach(t),_Uo=i(Sl),Zd=n(Sl,"P",{});var mJ=s(Zd);uUo=r(mJ,`Note:
Loading a model from its configuration file does `),rhe=n(mJ,"STRONG",{});var mmt=s(rhe);bUo=r(mmt,"not"),mmt.forEach(t),FUo=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nO=n(mJ,"A",{href:!0});var gmt=s(nO);vUo=r(gmt,"from_pretrained()"),gmt.forEach(t),TUo=r(mJ," to load the model weights."),mJ.forEach(t),MUo=i(Sl),the=n(Sl,"P",{});var hmt=s(the);EUo=r(hmt,"Examples:"),hmt.forEach(t),CUo=i(Sl),m(Pw.$$.fragment,Sl),Sl.forEach(t),wUo=i(kl),ro=n(kl,"DIV",{class:!0});var aa=s(ro);m($w.$$.fragment,aa),AUo=i(aa),ahe=n(aa,"P",{});var pmt=s(ahe);yUo=r(pmt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),pmt.forEach(t),LUo=i(aa),fn=n(aa,"P",{});var o5=s(fn);xUo=r(o5,"The model class to instantiate is selected based on the "),nhe=n(o5,"CODE",{});var _mt=s(nhe);kUo=r(_mt,"model_type"),_mt.forEach(t),SUo=r(o5,` property of the config object (either
passed as an argument or loaded from `),she=n(o5,"CODE",{});var umt=s(she);RUo=r(umt,"pretrained_model_name_or_path"),umt.forEach(t),BUo=r(o5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lhe=n(o5,"CODE",{});var bmt=s(lhe);PUo=r(bmt,"pretrained_model_name_or_path"),bmt.forEach(t),$Uo=r(o5,":"),o5.forEach(t),IUo=i(aa),ec=n(aa,"UL",{});var gJ=s(ec);gv=n(gJ,"LI",{});var aLe=s(gv);ihe=n(aLe,"STRONG",{});var Fmt=s(ihe);qUo=r(Fmt,"deit"),Fmt.forEach(t),NUo=r(aLe," \u2014 "),sO=n(aLe,"A",{href:!0});var vmt=s(sO);jUo=r(vmt,"DeiTForMaskedImageModeling"),vmt.forEach(t),DUo=r(aLe," (DeiT model)"),aLe.forEach(t),GUo=i(gJ),hv=n(gJ,"LI",{});var nLe=s(hv);dhe=n(nLe,"STRONG",{});var Tmt=s(dhe);OUo=r(Tmt,"swin"),Tmt.forEach(t),VUo=r(nLe," \u2014 "),lO=n(nLe,"A",{href:!0});var Mmt=s(lO);XUo=r(Mmt,"SwinForMaskedImageModeling"),Mmt.forEach(t),zUo=r(nLe," (Swin model)"),nLe.forEach(t),QUo=i(gJ),pv=n(gJ,"LI",{});var sLe=s(pv);che=n(sLe,"STRONG",{});var Emt=s(che);WUo=r(Emt,"vit"),Emt.forEach(t),HUo=r(sLe," \u2014 "),iO=n(sLe,"A",{href:!0});var Cmt=s(iO);UUo=r(Cmt,"ViTForMaskedImageModeling"),Cmt.forEach(t),JUo=r(sLe," (ViT model)"),sLe.forEach(t),gJ.forEach(t),YUo=i(aa),_v=n(aa,"P",{});var lLe=s(_v);KUo=r(lLe,"The model is set in evaluation mode by default using "),fhe=n(lLe,"CODE",{});var wmt=s(fhe);ZUo=r(wmt,"model.eval()"),wmt.forEach(t),eJo=r(lLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mhe=n(lLe,"CODE",{});var Amt=s(mhe);oJo=r(Amt,"model.train()"),Amt.forEach(t),lLe.forEach(t),rJo=i(aa),ghe=n(aa,"P",{});var ymt=s(ghe);tJo=r(ymt,"Examples:"),ymt.forEach(t),aJo=i(aa),m(Iw.$$.fragment,aa),aa.forEach(t),kl.forEach(t),zBe=i(c),oc=n(c,"H2",{class:!0});var oIe=s(oc);uv=n(oIe,"A",{id:!0,class:!0,href:!0});var Lmt=s(uv);hhe=n(Lmt,"SPAN",{});var xmt=s(hhe);m(qw.$$.fragment,xmt),xmt.forEach(t),Lmt.forEach(t),nJo=i(oIe),phe=n(oIe,"SPAN",{});var kmt=s(phe);sJo=r(kmt,"AutoModelForObjectDetection"),kmt.forEach(t),oIe.forEach(t),QBe=i(c),pr=n(c,"DIV",{class:!0});var Rl=s(pr);m(Nw.$$.fragment,Rl),lJo=i(Rl),rc=n(Rl,"P",{});var hJ=s(rc);iJo=r(hJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),dO=n(hJ,"A",{href:!0});var Smt=s(dO);dJo=r(Smt,"from_pretrained()"),Smt.forEach(t),cJo=r(hJ," class method or the "),cO=n(hJ,"A",{href:!0});var Rmt=s(cO);fJo=r(Rmt,"from_config()"),Rmt.forEach(t),mJo=r(hJ,` class
method.`),hJ.forEach(t),gJo=i(Rl),jw=n(Rl,"P",{});var rIe=s(jw);hJo=r(rIe,"This class cannot be instantiated directly using "),_he=n(rIe,"CODE",{});var Bmt=s(_he);pJo=r(Bmt,"__init__()"),Bmt.forEach(t),_Jo=r(rIe," (throws an error)."),rIe.forEach(t),uJo=i(Rl),dt=n(Rl,"DIV",{class:!0});var Bl=s(dt);m(Dw.$$.fragment,Bl),bJo=i(Bl),uhe=n(Bl,"P",{});var Pmt=s(uhe);FJo=r(Pmt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Pmt.forEach(t),vJo=i(Bl),tc=n(Bl,"P",{});var pJ=s(tc);TJo=r(pJ,`Note:
Loading a model from its configuration file does `),bhe=n(pJ,"STRONG",{});var $mt=s(bhe);MJo=r($mt,"not"),$mt.forEach(t),EJo=r(pJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fO=n(pJ,"A",{href:!0});var Imt=s(fO);CJo=r(Imt,"from_pretrained()"),Imt.forEach(t),wJo=r(pJ," to load the model weights."),pJ.forEach(t),AJo=i(Bl),Fhe=n(Bl,"P",{});var qmt=s(Fhe);yJo=r(qmt,"Examples:"),qmt.forEach(t),LJo=i(Bl),m(Gw.$$.fragment,Bl),Bl.forEach(t),xJo=i(Rl),to=n(Rl,"DIV",{class:!0});var na=s(to);m(Ow.$$.fragment,na),kJo=i(na),vhe=n(na,"P",{});var Nmt=s(vhe);SJo=r(Nmt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Nmt.forEach(t),RJo=i(na),mn=n(na,"P",{});var r5=s(mn);BJo=r(r5,"The model class to instantiate is selected based on the "),The=n(r5,"CODE",{});var jmt=s(The);PJo=r(jmt,"model_type"),jmt.forEach(t),$Jo=r(r5,` property of the config object (either
passed as an argument or loaded from `),Mhe=n(r5,"CODE",{});var Dmt=s(Mhe);IJo=r(Dmt,"pretrained_model_name_or_path"),Dmt.forEach(t),qJo=r(r5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ehe=n(r5,"CODE",{});var Gmt=s(Ehe);NJo=r(Gmt,"pretrained_model_name_or_path"),Gmt.forEach(t),jJo=r(r5,":"),r5.forEach(t),DJo=i(na),Che=n(na,"UL",{});var Omt=s(Che);bv=n(Omt,"LI",{});var iLe=s(bv);whe=n(iLe,"STRONG",{});var Vmt=s(whe);GJo=r(Vmt,"detr"),Vmt.forEach(t),OJo=r(iLe," \u2014 "),mO=n(iLe,"A",{href:!0});var Xmt=s(mO);VJo=r(Xmt,"DetrForObjectDetection"),Xmt.forEach(t),XJo=r(iLe," (DETR model)"),iLe.forEach(t),Omt.forEach(t),zJo=i(na),Fv=n(na,"P",{});var dLe=s(Fv);QJo=r(dLe,"The model is set in evaluation mode by default using "),Ahe=n(dLe,"CODE",{});var zmt=s(Ahe);WJo=r(zmt,"model.eval()"),zmt.forEach(t),HJo=r(dLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=n(dLe,"CODE",{});var Qmt=s(yhe);UJo=r(Qmt,"model.train()"),Qmt.forEach(t),dLe.forEach(t),JJo=i(na),Lhe=n(na,"P",{});var Wmt=s(Lhe);YJo=r(Wmt,"Examples:"),Wmt.forEach(t),KJo=i(na),m(Vw.$$.fragment,na),na.forEach(t),Rl.forEach(t),WBe=i(c),ac=n(c,"H2",{class:!0});var tIe=s(ac);vv=n(tIe,"A",{id:!0,class:!0,href:!0});var Hmt=s(vv);xhe=n(Hmt,"SPAN",{});var Umt=s(xhe);m(Xw.$$.fragment,Umt),Umt.forEach(t),Hmt.forEach(t),ZJo=i(tIe),khe=n(tIe,"SPAN",{});var Jmt=s(khe);eYo=r(Jmt,"AutoModelForImageSegmentation"),Jmt.forEach(t),tIe.forEach(t),HBe=i(c),_r=n(c,"DIV",{class:!0});var Pl=s(_r);m(zw.$$.fragment,Pl),oYo=i(Pl),nc=n(Pl,"P",{});var _J=s(nc);rYo=r(_J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),gO=n(_J,"A",{href:!0});var Ymt=s(gO);tYo=r(Ymt,"from_pretrained()"),Ymt.forEach(t),aYo=r(_J," class method or the "),hO=n(_J,"A",{href:!0});var Kmt=s(hO);nYo=r(Kmt,"from_config()"),Kmt.forEach(t),sYo=r(_J,` class
method.`),_J.forEach(t),lYo=i(Pl),Qw=n(Pl,"P",{});var aIe=s(Qw);iYo=r(aIe,"This class cannot be instantiated directly using "),She=n(aIe,"CODE",{});var Zmt=s(She);dYo=r(Zmt,"__init__()"),Zmt.forEach(t),cYo=r(aIe," (throws an error)."),aIe.forEach(t),fYo=i(Pl),ct=n(Pl,"DIV",{class:!0});var $l=s(ct);m(Ww.$$.fragment,$l),mYo=i($l),Rhe=n($l,"P",{});var egt=s(Rhe);gYo=r(egt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),egt.forEach(t),hYo=i($l),sc=n($l,"P",{});var uJ=s(sc);pYo=r(uJ,`Note:
Loading a model from its configuration file does `),Bhe=n(uJ,"STRONG",{});var ogt=s(Bhe);_Yo=r(ogt,"not"),ogt.forEach(t),uYo=r(uJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pO=n(uJ,"A",{href:!0});var rgt=s(pO);bYo=r(rgt,"from_pretrained()"),rgt.forEach(t),FYo=r(uJ," to load the model weights."),uJ.forEach(t),vYo=i($l),Phe=n($l,"P",{});var tgt=s(Phe);TYo=r(tgt,"Examples:"),tgt.forEach(t),MYo=i($l),m(Hw.$$.fragment,$l),$l.forEach(t),EYo=i(Pl),ao=n(Pl,"DIV",{class:!0});var sa=s(ao);m(Uw.$$.fragment,sa),CYo=i(sa),$he=n(sa,"P",{});var agt=s($he);wYo=r(agt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),agt.forEach(t),AYo=i(sa),gn=n(sa,"P",{});var t5=s(gn);yYo=r(t5,"The model class to instantiate is selected based on the "),Ihe=n(t5,"CODE",{});var ngt=s(Ihe);LYo=r(ngt,"model_type"),ngt.forEach(t),xYo=r(t5,` property of the config object (either
passed as an argument or loaded from `),qhe=n(t5,"CODE",{});var sgt=s(qhe);kYo=r(sgt,"pretrained_model_name_or_path"),sgt.forEach(t),SYo=r(t5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=n(t5,"CODE",{});var lgt=s(Nhe);RYo=r(lgt,"pretrained_model_name_or_path"),lgt.forEach(t),BYo=r(t5,":"),t5.forEach(t),PYo=i(sa),jhe=n(sa,"UL",{});var igt=s(jhe);Tv=n(igt,"LI",{});var cLe=s(Tv);Dhe=n(cLe,"STRONG",{});var dgt=s(Dhe);$Yo=r(dgt,"detr"),dgt.forEach(t),IYo=r(cLe," \u2014 "),_O=n(cLe,"A",{href:!0});var cgt=s(_O);qYo=r(cgt,"DetrForSegmentation"),cgt.forEach(t),NYo=r(cLe," (DETR model)"),cLe.forEach(t),igt.forEach(t),jYo=i(sa),Mv=n(sa,"P",{});var fLe=s(Mv);DYo=r(fLe,"The model is set in evaluation mode by default using "),Ghe=n(fLe,"CODE",{});var fgt=s(Ghe);GYo=r(fgt,"model.eval()"),fgt.forEach(t),OYo=r(fLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ohe=n(fLe,"CODE",{});var mgt=s(Ohe);VYo=r(mgt,"model.train()"),mgt.forEach(t),fLe.forEach(t),XYo=i(sa),Vhe=n(sa,"P",{});var ggt=s(Vhe);zYo=r(ggt,"Examples:"),ggt.forEach(t),QYo=i(sa),m(Jw.$$.fragment,sa),sa.forEach(t),Pl.forEach(t),UBe=i(c),lc=n(c,"H2",{class:!0});var nIe=s(lc);Ev=n(nIe,"A",{id:!0,class:!0,href:!0});var hgt=s(Ev);Xhe=n(hgt,"SPAN",{});var pgt=s(Xhe);m(Yw.$$.fragment,pgt),pgt.forEach(t),hgt.forEach(t),WYo=i(nIe),zhe=n(nIe,"SPAN",{});var _gt=s(zhe);HYo=r(_gt,"AutoModelForSemanticSegmentation"),_gt.forEach(t),nIe.forEach(t),JBe=i(c),ur=n(c,"DIV",{class:!0});var Il=s(ur);m(Kw.$$.fragment,Il),UYo=i(Il),ic=n(Il,"P",{});var bJ=s(ic);JYo=r(bJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),uO=n(bJ,"A",{href:!0});var ugt=s(uO);YYo=r(ugt,"from_pretrained()"),ugt.forEach(t),KYo=r(bJ," class method or the "),bO=n(bJ,"A",{href:!0});var bgt=s(bO);ZYo=r(bgt,"from_config()"),bgt.forEach(t),eKo=r(bJ,` class
method.`),bJ.forEach(t),oKo=i(Il),Zw=n(Il,"P",{});var sIe=s(Zw);rKo=r(sIe,"This class cannot be instantiated directly using "),Qhe=n(sIe,"CODE",{});var Fgt=s(Qhe);tKo=r(Fgt,"__init__()"),Fgt.forEach(t),aKo=r(sIe," (throws an error)."),sIe.forEach(t),nKo=i(Il),ft=n(Il,"DIV",{class:!0});var ql=s(ft);m(eA.$$.fragment,ql),sKo=i(ql),Whe=n(ql,"P",{});var vgt=s(Whe);lKo=r(vgt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),vgt.forEach(t),iKo=i(ql),dc=n(ql,"P",{});var FJ=s(dc);dKo=r(FJ,`Note:
Loading a model from its configuration file does `),Hhe=n(FJ,"STRONG",{});var Tgt=s(Hhe);cKo=r(Tgt,"not"),Tgt.forEach(t),fKo=r(FJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=n(FJ,"A",{href:!0});var Mgt=s(FO);mKo=r(Mgt,"from_pretrained()"),Mgt.forEach(t),gKo=r(FJ," to load the model weights."),FJ.forEach(t),hKo=i(ql),Uhe=n(ql,"P",{});var Egt=s(Uhe);pKo=r(Egt,"Examples:"),Egt.forEach(t),_Ko=i(ql),m(oA.$$.fragment,ql),ql.forEach(t),uKo=i(Il),no=n(Il,"DIV",{class:!0});var la=s(no);m(rA.$$.fragment,la),bKo=i(la),Jhe=n(la,"P",{});var Cgt=s(Jhe);FKo=r(Cgt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Cgt.forEach(t),vKo=i(la),hn=n(la,"P",{});var a5=s(hn);TKo=r(a5,"The model class to instantiate is selected based on the "),Yhe=n(a5,"CODE",{});var wgt=s(Yhe);MKo=r(wgt,"model_type"),wgt.forEach(t),EKo=r(a5,` property of the config object (either
passed as an argument or loaded from `),Khe=n(a5,"CODE",{});var Agt=s(Khe);CKo=r(Agt,"pretrained_model_name_or_path"),Agt.forEach(t),wKo=r(a5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=n(a5,"CODE",{});var ygt=s(Zhe);AKo=r(ygt,"pretrained_model_name_or_path"),ygt.forEach(t),yKo=r(a5,":"),a5.forEach(t),LKo=i(la),cc=n(la,"UL",{});var vJ=s(cc);Cv=n(vJ,"LI",{});var mLe=s(Cv);epe=n(mLe,"STRONG",{});var Lgt=s(epe);xKo=r(Lgt,"beit"),Lgt.forEach(t),kKo=r(mLe," \u2014 "),vO=n(mLe,"A",{href:!0});var xgt=s(vO);SKo=r(xgt,"BeitForSemanticSegmentation"),xgt.forEach(t),RKo=r(mLe," (BEiT model)"),mLe.forEach(t),BKo=i(vJ),wv=n(vJ,"LI",{});var gLe=s(wv);ope=n(gLe,"STRONG",{});var kgt=s(ope);PKo=r(kgt,"dpt"),kgt.forEach(t),$Ko=r(gLe," \u2014 "),TO=n(gLe,"A",{href:!0});var Sgt=s(TO);IKo=r(Sgt,"DPTForSemanticSegmentation"),Sgt.forEach(t),qKo=r(gLe," (DPT model)"),gLe.forEach(t),NKo=i(vJ),Av=n(vJ,"LI",{});var hLe=s(Av);rpe=n(hLe,"STRONG",{});var Rgt=s(rpe);jKo=r(Rgt,"segformer"),Rgt.forEach(t),DKo=r(hLe," \u2014 "),MO=n(hLe,"A",{href:!0});var Bgt=s(MO);GKo=r(Bgt,"SegformerForSemanticSegmentation"),Bgt.forEach(t),OKo=r(hLe," (SegFormer model)"),hLe.forEach(t),vJ.forEach(t),VKo=i(la),yv=n(la,"P",{});var pLe=s(yv);XKo=r(pLe,"The model is set in evaluation mode by default using "),tpe=n(pLe,"CODE",{});var Pgt=s(tpe);zKo=r(Pgt,"model.eval()"),Pgt.forEach(t),QKo=r(pLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ape=n(pLe,"CODE",{});var $gt=s(ape);WKo=r($gt,"model.train()"),$gt.forEach(t),pLe.forEach(t),HKo=i(la),npe=n(la,"P",{});var Igt=s(npe);UKo=r(Igt,"Examples:"),Igt.forEach(t),JKo=i(la),m(tA.$$.fragment,la),la.forEach(t),Il.forEach(t),YBe=i(c),fc=n(c,"H2",{class:!0});var lIe=s(fc);Lv=n(lIe,"A",{id:!0,class:!0,href:!0});var qgt=s(Lv);spe=n(qgt,"SPAN",{});var Ngt=s(spe);m(aA.$$.fragment,Ngt),Ngt.forEach(t),qgt.forEach(t),YKo=i(lIe),lpe=n(lIe,"SPAN",{});var jgt=s(lpe);KKo=r(jgt,"AutoModelForInstanceSegmentation"),jgt.forEach(t),lIe.forEach(t),KBe=i(c),br=n(c,"DIV",{class:!0});var Nl=s(br);m(nA.$$.fragment,Nl),ZKo=i(Nl),mc=n(Nl,"P",{});var TJ=s(mc);eZo=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),EO=n(TJ,"A",{href:!0});var Dgt=s(EO);oZo=r(Dgt,"from_pretrained()"),Dgt.forEach(t),rZo=r(TJ," class method or the "),CO=n(TJ,"A",{href:!0});var Ggt=s(CO);tZo=r(Ggt,"from_config()"),Ggt.forEach(t),aZo=r(TJ,` class
method.`),TJ.forEach(t),nZo=i(Nl),sA=n(Nl,"P",{});var iIe=s(sA);sZo=r(iIe,"This class cannot be instantiated directly using "),ipe=n(iIe,"CODE",{});var Ogt=s(ipe);lZo=r(Ogt,"__init__()"),Ogt.forEach(t),iZo=r(iIe," (throws an error)."),iIe.forEach(t),dZo=i(Nl),mt=n(Nl,"DIV",{class:!0});var jl=s(mt);m(lA.$$.fragment,jl),cZo=i(jl),dpe=n(jl,"P",{});var Vgt=s(dpe);fZo=r(Vgt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Vgt.forEach(t),mZo=i(jl),gc=n(jl,"P",{});var MJ=s(gc);gZo=r(MJ,`Note:
Loading a model from its configuration file does `),cpe=n(MJ,"STRONG",{});var Xgt=s(cpe);hZo=r(Xgt,"not"),Xgt.forEach(t),pZo=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=n(MJ,"A",{href:!0});var zgt=s(wO);_Zo=r(zgt,"from_pretrained()"),zgt.forEach(t),uZo=r(MJ," to load the model weights."),MJ.forEach(t),bZo=i(jl),fpe=n(jl,"P",{});var Qgt=s(fpe);FZo=r(Qgt,"Examples:"),Qgt.forEach(t),vZo=i(jl),m(iA.$$.fragment,jl),jl.forEach(t),TZo=i(Nl),so=n(Nl,"DIV",{class:!0});var ia=s(so);m(dA.$$.fragment,ia),MZo=i(ia),mpe=n(ia,"P",{});var Wgt=s(mpe);EZo=r(Wgt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Wgt.forEach(t),CZo=i(ia),pn=n(ia,"P",{});var n5=s(pn);wZo=r(n5,"The model class to instantiate is selected based on the "),gpe=n(n5,"CODE",{});var Hgt=s(gpe);AZo=r(Hgt,"model_type"),Hgt.forEach(t),yZo=r(n5,` property of the config object (either
passed as an argument or loaded from `),hpe=n(n5,"CODE",{});var Ugt=s(hpe);LZo=r(Ugt,"pretrained_model_name_or_path"),Ugt.forEach(t),xZo=r(n5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ppe=n(n5,"CODE",{});var Jgt=s(ppe);kZo=r(Jgt,"pretrained_model_name_or_path"),Jgt.forEach(t),SZo=r(n5,":"),n5.forEach(t),RZo=i(ia),_pe=n(ia,"UL",{});var Ygt=s(_pe);xv=n(Ygt,"LI",{});var _Le=s(xv);upe=n(_Le,"STRONG",{});var Kgt=s(upe);BZo=r(Kgt,"maskformer"),Kgt.forEach(t),PZo=r(_Le," \u2014 "),AO=n(_Le,"A",{href:!0});var Zgt=s(AO);$Zo=r(Zgt,"MaskFormerForInstanceSegmentation"),Zgt.forEach(t),IZo=r(_Le," (MaskFormer model)"),_Le.forEach(t),Ygt.forEach(t),qZo=i(ia),kv=n(ia,"P",{});var uLe=s(kv);NZo=r(uLe,"The model is set in evaluation mode by default using "),bpe=n(uLe,"CODE",{});var eht=s(bpe);jZo=r(eht,"model.eval()"),eht.forEach(t),DZo=r(uLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fpe=n(uLe,"CODE",{});var oht=s(Fpe);GZo=r(oht,"model.train()"),oht.forEach(t),uLe.forEach(t),OZo=i(ia),vpe=n(ia,"P",{});var rht=s(vpe);VZo=r(rht,"Examples:"),rht.forEach(t),XZo=i(ia),m(cA.$$.fragment,ia),ia.forEach(t),Nl.forEach(t),ZBe=i(c),hc=n(c,"H2",{class:!0});var dIe=s(hc);Sv=n(dIe,"A",{id:!0,class:!0,href:!0});var tht=s(Sv);Tpe=n(tht,"SPAN",{});var aht=s(Tpe);m(fA.$$.fragment,aht),aht.forEach(t),tht.forEach(t),zZo=i(dIe),Mpe=n(dIe,"SPAN",{});var nht=s(Mpe);QZo=r(nht,"TFAutoModel"),nht.forEach(t),dIe.forEach(t),ePe=i(c),Fr=n(c,"DIV",{class:!0});var Dl=s(Fr);m(mA.$$.fragment,Dl),WZo=i(Dl),pc=n(Dl,"P",{});var EJ=s(pc);HZo=r(EJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yO=n(EJ,"A",{href:!0});var sht=s(yO);UZo=r(sht,"from_pretrained()"),sht.forEach(t),JZo=r(EJ," class method or the "),LO=n(EJ,"A",{href:!0});var lht=s(LO);YZo=r(lht,"from_config()"),lht.forEach(t),KZo=r(EJ,` class
method.`),EJ.forEach(t),ZZo=i(Dl),gA=n(Dl,"P",{});var cIe=s(gA);eer=r(cIe,"This class cannot be instantiated directly using "),Epe=n(cIe,"CODE",{});var iht=s(Epe);oer=r(iht,"__init__()"),iht.forEach(t),rer=r(cIe," (throws an error)."),cIe.forEach(t),ter=i(Dl),gt=n(Dl,"DIV",{class:!0});var Gl=s(gt);m(hA.$$.fragment,Gl),aer=i(Gl),Cpe=n(Gl,"P",{});var dht=s(Cpe);ner=r(dht,"Instantiates one of the base model classes of the library from a configuration."),dht.forEach(t),ser=i(Gl),_c=n(Gl,"P",{});var CJ=s(_c);ler=r(CJ,`Note:
Loading a model from its configuration file does `),wpe=n(CJ,"STRONG",{});var cht=s(wpe);ier=r(cht,"not"),cht.forEach(t),der=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xO=n(CJ,"A",{href:!0});var fht=s(xO);cer=r(fht,"from_pretrained()"),fht.forEach(t),fer=r(CJ," to load the model weights."),CJ.forEach(t),mer=i(Gl),Ape=n(Gl,"P",{});var mht=s(Ape);ger=r(mht,"Examples:"),mht.forEach(t),her=i(Gl),m(pA.$$.fragment,Gl),Gl.forEach(t),per=i(Dl),ho=n(Dl,"DIV",{class:!0});var pa=s(ho);m(_A.$$.fragment,pa),_er=i(pa),ype=n(pa,"P",{});var ght=s(ype);uer=r(ght,"Instantiate one of the base model classes of the library from a pretrained model."),ght.forEach(t),ber=i(pa),_n=n(pa,"P",{});var s5=s(_n);Fer=r(s5,"The model class to instantiate is selected based on the "),Lpe=n(s5,"CODE",{});var hht=s(Lpe);ver=r(hht,"model_type"),hht.forEach(t),Ter=r(s5,` property of the config object (either
passed as an argument or loaded from `),xpe=n(s5,"CODE",{});var pht=s(xpe);Mer=r(pht,"pretrained_model_name_or_path"),pht.forEach(t),Eer=r(s5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kpe=n(s5,"CODE",{});var _ht=s(kpe);Cer=r(_ht,"pretrained_model_name_or_path"),_ht.forEach(t),wer=r(s5,":"),s5.forEach(t),Aer=i(pa),x=n(pa,"UL",{});var k=s(x);Rv=n(k,"LI",{});var bLe=s(Rv);Spe=n(bLe,"STRONG",{});var uht=s(Spe);yer=r(uht,"albert"),uht.forEach(t),Ler=r(bLe," \u2014 "),kO=n(bLe,"A",{href:!0});var bht=s(kO);xer=r(bht,"TFAlbertModel"),bht.forEach(t),ker=r(bLe," (ALBERT model)"),bLe.forEach(t),Ser=i(k),Bv=n(k,"LI",{});var FLe=s(Bv);Rpe=n(FLe,"STRONG",{});var Fht=s(Rpe);Rer=r(Fht,"bart"),Fht.forEach(t),Ber=r(FLe," \u2014 "),SO=n(FLe,"A",{href:!0});var vht=s(SO);Per=r(vht,"TFBartModel"),vht.forEach(t),$er=r(FLe," (BART model)"),FLe.forEach(t),Ier=i(k),Pv=n(k,"LI",{});var vLe=s(Pv);Bpe=n(vLe,"STRONG",{});var Tht=s(Bpe);qer=r(Tht,"bert"),Tht.forEach(t),Ner=r(vLe," \u2014 "),RO=n(vLe,"A",{href:!0});var Mht=s(RO);jer=r(Mht,"TFBertModel"),Mht.forEach(t),Der=r(vLe," (BERT model)"),vLe.forEach(t),Ger=i(k),$v=n(k,"LI",{});var TLe=s($v);Ppe=n(TLe,"STRONG",{});var Eht=s(Ppe);Oer=r(Eht,"blenderbot"),Eht.forEach(t),Ver=r(TLe," \u2014 "),BO=n(TLe,"A",{href:!0});var Cht=s(BO);Xer=r(Cht,"TFBlenderbotModel"),Cht.forEach(t),zer=r(TLe," (Blenderbot model)"),TLe.forEach(t),Qer=i(k),Iv=n(k,"LI",{});var MLe=s(Iv);$pe=n(MLe,"STRONG",{});var wht=s($pe);Wer=r(wht,"blenderbot-small"),wht.forEach(t),Her=r(MLe," \u2014 "),PO=n(MLe,"A",{href:!0});var Aht=s(PO);Uer=r(Aht,"TFBlenderbotSmallModel"),Aht.forEach(t),Jer=r(MLe," (BlenderbotSmall model)"),MLe.forEach(t),Yer=i(k),qv=n(k,"LI",{});var ELe=s(qv);Ipe=n(ELe,"STRONG",{});var yht=s(Ipe);Ker=r(yht,"camembert"),yht.forEach(t),Zer=r(ELe," \u2014 "),$O=n(ELe,"A",{href:!0});var Lht=s($O);eor=r(Lht,"TFCamembertModel"),Lht.forEach(t),oor=r(ELe," (CamemBERT model)"),ELe.forEach(t),ror=i(k),Nv=n(k,"LI",{});var CLe=s(Nv);qpe=n(CLe,"STRONG",{});var xht=s(qpe);tor=r(xht,"clip"),xht.forEach(t),aor=r(CLe," \u2014 "),IO=n(CLe,"A",{href:!0});var kht=s(IO);nor=r(kht,"TFCLIPModel"),kht.forEach(t),sor=r(CLe," (CLIP model)"),CLe.forEach(t),lor=i(k),jv=n(k,"LI",{});var wLe=s(jv);Npe=n(wLe,"STRONG",{});var Sht=s(Npe);ior=r(Sht,"convbert"),Sht.forEach(t),dor=r(wLe," \u2014 "),qO=n(wLe,"A",{href:!0});var Rht=s(qO);cor=r(Rht,"TFConvBertModel"),Rht.forEach(t),mor=r(wLe," (ConvBERT model)"),wLe.forEach(t),gor=i(k),Dv=n(k,"LI",{});var ALe=s(Dv);jpe=n(ALe,"STRONG",{});var Bht=s(jpe);hor=r(Bht,"convnext"),Bht.forEach(t),por=r(ALe," \u2014 "),NO=n(ALe,"A",{href:!0});var Pht=s(NO);_or=r(Pht,"TFConvNextModel"),Pht.forEach(t),uor=r(ALe," (ConvNext model)"),ALe.forEach(t),bor=i(k),Gv=n(k,"LI",{});var yLe=s(Gv);Dpe=n(yLe,"STRONG",{});var $ht=s(Dpe);For=r($ht,"ctrl"),$ht.forEach(t),vor=r(yLe," \u2014 "),jO=n(yLe,"A",{href:!0});var Iht=s(jO);Tor=r(Iht,"TFCTRLModel"),Iht.forEach(t),Mor=r(yLe," (CTRL model)"),yLe.forEach(t),Eor=i(k),Ov=n(k,"LI",{});var LLe=s(Ov);Gpe=n(LLe,"STRONG",{});var qht=s(Gpe);Cor=r(qht,"deberta"),qht.forEach(t),wor=r(LLe," \u2014 "),DO=n(LLe,"A",{href:!0});var Nht=s(DO);Aor=r(Nht,"TFDebertaModel"),Nht.forEach(t),yor=r(LLe," (DeBERTa model)"),LLe.forEach(t),Lor=i(k),Vv=n(k,"LI",{});var xLe=s(Vv);Ope=n(xLe,"STRONG",{});var jht=s(Ope);xor=r(jht,"deberta-v2"),jht.forEach(t),kor=r(xLe," \u2014 "),GO=n(xLe,"A",{href:!0});var Dht=s(GO);Sor=r(Dht,"TFDebertaV2Model"),Dht.forEach(t),Ror=r(xLe," (DeBERTa-v2 model)"),xLe.forEach(t),Bor=i(k),Xv=n(k,"LI",{});var kLe=s(Xv);Vpe=n(kLe,"STRONG",{});var Ght=s(Vpe);Por=r(Ght,"distilbert"),Ght.forEach(t),$or=r(kLe," \u2014 "),OO=n(kLe,"A",{href:!0});var Oht=s(OO);Ior=r(Oht,"TFDistilBertModel"),Oht.forEach(t),qor=r(kLe," (DistilBERT model)"),kLe.forEach(t),Nor=i(k),zv=n(k,"LI",{});var SLe=s(zv);Xpe=n(SLe,"STRONG",{});var Vht=s(Xpe);jor=r(Vht,"dpr"),Vht.forEach(t),Dor=r(SLe," \u2014 "),VO=n(SLe,"A",{href:!0});var Xht=s(VO);Gor=r(Xht,"TFDPRQuestionEncoder"),Xht.forEach(t),Oor=r(SLe," (DPR model)"),SLe.forEach(t),Vor=i(k),Qv=n(k,"LI",{});var RLe=s(Qv);zpe=n(RLe,"STRONG",{});var zht=s(zpe);Xor=r(zht,"electra"),zht.forEach(t),zor=r(RLe," \u2014 "),XO=n(RLe,"A",{href:!0});var Qht=s(XO);Qor=r(Qht,"TFElectraModel"),Qht.forEach(t),Wor=r(RLe," (ELECTRA model)"),RLe.forEach(t),Hor=i(k),Wv=n(k,"LI",{});var BLe=s(Wv);Qpe=n(BLe,"STRONG",{});var Wht=s(Qpe);Uor=r(Wht,"flaubert"),Wht.forEach(t),Jor=r(BLe," \u2014 "),zO=n(BLe,"A",{href:!0});var Hht=s(zO);Yor=r(Hht,"TFFlaubertModel"),Hht.forEach(t),Kor=r(BLe," (FlauBERT model)"),BLe.forEach(t),Zor=i(k),Os=n(k,"LI",{});var E8=s(Os);Wpe=n(E8,"STRONG",{});var Uht=s(Wpe);err=r(Uht,"funnel"),Uht.forEach(t),orr=r(E8," \u2014 "),QO=n(E8,"A",{href:!0});var Jht=s(QO);rrr=r(Jht,"TFFunnelModel"),Jht.forEach(t),trr=r(E8," or "),WO=n(E8,"A",{href:!0});var Yht=s(WO);arr=r(Yht,"TFFunnelBaseModel"),Yht.forEach(t),nrr=r(E8," (Funnel Transformer model)"),E8.forEach(t),srr=i(k),Hv=n(k,"LI",{});var PLe=s(Hv);Hpe=n(PLe,"STRONG",{});var Kht=s(Hpe);lrr=r(Kht,"gpt2"),Kht.forEach(t),irr=r(PLe," \u2014 "),HO=n(PLe,"A",{href:!0});var Zht=s(HO);drr=r(Zht,"TFGPT2Model"),Zht.forEach(t),crr=r(PLe," (OpenAI GPT-2 model)"),PLe.forEach(t),frr=i(k),Uv=n(k,"LI",{});var $Le=s(Uv);Upe=n($Le,"STRONG",{});var ept=s(Upe);mrr=r(ept,"gptj"),ept.forEach(t),grr=r($Le," \u2014 "),UO=n($Le,"A",{href:!0});var opt=s(UO);hrr=r(opt,"TFGPTJModel"),opt.forEach(t),prr=r($Le," (GPT-J model)"),$Le.forEach(t),_rr=i(k),Jv=n(k,"LI",{});var ILe=s(Jv);Jpe=n(ILe,"STRONG",{});var rpt=s(Jpe);urr=r(rpt,"hubert"),rpt.forEach(t),brr=r(ILe," \u2014 "),JO=n(ILe,"A",{href:!0});var tpt=s(JO);Frr=r(tpt,"TFHubertModel"),tpt.forEach(t),vrr=r(ILe," (Hubert model)"),ILe.forEach(t),Trr=i(k),Yv=n(k,"LI",{});var qLe=s(Yv);Ype=n(qLe,"STRONG",{});var apt=s(Ype);Mrr=r(apt,"layoutlm"),apt.forEach(t),Err=r(qLe," \u2014 "),YO=n(qLe,"A",{href:!0});var npt=s(YO);Crr=r(npt,"TFLayoutLMModel"),npt.forEach(t),wrr=r(qLe," (LayoutLM model)"),qLe.forEach(t),Arr=i(k),Kv=n(k,"LI",{});var NLe=s(Kv);Kpe=n(NLe,"STRONG",{});var spt=s(Kpe);yrr=r(spt,"led"),spt.forEach(t),Lrr=r(NLe," \u2014 "),KO=n(NLe,"A",{href:!0});var lpt=s(KO);xrr=r(lpt,"TFLEDModel"),lpt.forEach(t),krr=r(NLe," (LED model)"),NLe.forEach(t),Srr=i(k),Zv=n(k,"LI",{});var jLe=s(Zv);Zpe=n(jLe,"STRONG",{});var ipt=s(Zpe);Rrr=r(ipt,"longformer"),ipt.forEach(t),Brr=r(jLe," \u2014 "),ZO=n(jLe,"A",{href:!0});var dpt=s(ZO);Prr=r(dpt,"TFLongformerModel"),dpt.forEach(t),$rr=r(jLe," (Longformer model)"),jLe.forEach(t),Irr=i(k),eT=n(k,"LI",{});var DLe=s(eT);e_e=n(DLe,"STRONG",{});var cpt=s(e_e);qrr=r(cpt,"lxmert"),cpt.forEach(t),Nrr=r(DLe," \u2014 "),eV=n(DLe,"A",{href:!0});var fpt=s(eV);jrr=r(fpt,"TFLxmertModel"),fpt.forEach(t),Drr=r(DLe," (LXMERT model)"),DLe.forEach(t),Grr=i(k),oT=n(k,"LI",{});var GLe=s(oT);o_e=n(GLe,"STRONG",{});var mpt=s(o_e);Orr=r(mpt,"marian"),mpt.forEach(t),Vrr=r(GLe," \u2014 "),oV=n(GLe,"A",{href:!0});var gpt=s(oV);Xrr=r(gpt,"TFMarianModel"),gpt.forEach(t),zrr=r(GLe," (Marian model)"),GLe.forEach(t),Qrr=i(k),rT=n(k,"LI",{});var OLe=s(rT);r_e=n(OLe,"STRONG",{});var hpt=s(r_e);Wrr=r(hpt,"mbart"),hpt.forEach(t),Hrr=r(OLe," \u2014 "),rV=n(OLe,"A",{href:!0});var ppt=s(rV);Urr=r(ppt,"TFMBartModel"),ppt.forEach(t),Jrr=r(OLe," (mBART model)"),OLe.forEach(t),Yrr=i(k),tT=n(k,"LI",{});var VLe=s(tT);t_e=n(VLe,"STRONG",{});var _pt=s(t_e);Krr=r(_pt,"mobilebert"),_pt.forEach(t),Zrr=r(VLe," \u2014 "),tV=n(VLe,"A",{href:!0});var upt=s(tV);etr=r(upt,"TFMobileBertModel"),upt.forEach(t),otr=r(VLe," (MobileBERT model)"),VLe.forEach(t),rtr=i(k),aT=n(k,"LI",{});var XLe=s(aT);a_e=n(XLe,"STRONG",{});var bpt=s(a_e);ttr=r(bpt,"mpnet"),bpt.forEach(t),atr=r(XLe," \u2014 "),aV=n(XLe,"A",{href:!0});var Fpt=s(aV);ntr=r(Fpt,"TFMPNetModel"),Fpt.forEach(t),str=r(XLe," (MPNet model)"),XLe.forEach(t),ltr=i(k),nT=n(k,"LI",{});var zLe=s(nT);n_e=n(zLe,"STRONG",{});var vpt=s(n_e);itr=r(vpt,"mt5"),vpt.forEach(t),dtr=r(zLe," \u2014 "),nV=n(zLe,"A",{href:!0});var Tpt=s(nV);ctr=r(Tpt,"TFMT5Model"),Tpt.forEach(t),ftr=r(zLe," (mT5 model)"),zLe.forEach(t),mtr=i(k),sT=n(k,"LI",{});var QLe=s(sT);s_e=n(QLe,"STRONG",{});var Mpt=s(s_e);gtr=r(Mpt,"openai-gpt"),Mpt.forEach(t),htr=r(QLe," \u2014 "),sV=n(QLe,"A",{href:!0});var Ept=s(sV);ptr=r(Ept,"TFOpenAIGPTModel"),Ept.forEach(t),_tr=r(QLe," (OpenAI GPT model)"),QLe.forEach(t),utr=i(k),lT=n(k,"LI",{});var WLe=s(lT);l_e=n(WLe,"STRONG",{});var Cpt=s(l_e);btr=r(Cpt,"pegasus"),Cpt.forEach(t),Ftr=r(WLe," \u2014 "),lV=n(WLe,"A",{href:!0});var wpt=s(lV);vtr=r(wpt,"TFPegasusModel"),wpt.forEach(t),Ttr=r(WLe," (Pegasus model)"),WLe.forEach(t),Mtr=i(k),iT=n(k,"LI",{});var HLe=s(iT);i_e=n(HLe,"STRONG",{});var Apt=s(i_e);Etr=r(Apt,"rembert"),Apt.forEach(t),Ctr=r(HLe," \u2014 "),iV=n(HLe,"A",{href:!0});var ypt=s(iV);wtr=r(ypt,"TFRemBertModel"),ypt.forEach(t),Atr=r(HLe," (RemBERT model)"),HLe.forEach(t),ytr=i(k),dT=n(k,"LI",{});var ULe=s(dT);d_e=n(ULe,"STRONG",{});var Lpt=s(d_e);Ltr=r(Lpt,"roberta"),Lpt.forEach(t),xtr=r(ULe," \u2014 "),dV=n(ULe,"A",{href:!0});var xpt=s(dV);ktr=r(xpt,"TFRobertaModel"),xpt.forEach(t),Str=r(ULe," (RoBERTa model)"),ULe.forEach(t),Rtr=i(k),cT=n(k,"LI",{});var JLe=s(cT);c_e=n(JLe,"STRONG",{});var kpt=s(c_e);Btr=r(kpt,"roformer"),kpt.forEach(t),Ptr=r(JLe," \u2014 "),cV=n(JLe,"A",{href:!0});var Spt=s(cV);$tr=r(Spt,"TFRoFormerModel"),Spt.forEach(t),Itr=r(JLe," (RoFormer model)"),JLe.forEach(t),qtr=i(k),fT=n(k,"LI",{});var YLe=s(fT);f_e=n(YLe,"STRONG",{});var Rpt=s(f_e);Ntr=r(Rpt,"speech_to_text"),Rpt.forEach(t),jtr=r(YLe," \u2014 "),fV=n(YLe,"A",{href:!0});var Bpt=s(fV);Dtr=r(Bpt,"TFSpeech2TextModel"),Bpt.forEach(t),Gtr=r(YLe," (Speech2Text model)"),YLe.forEach(t),Otr=i(k),mT=n(k,"LI",{});var KLe=s(mT);m_e=n(KLe,"STRONG",{});var Ppt=s(m_e);Vtr=r(Ppt,"t5"),Ppt.forEach(t),Xtr=r(KLe," \u2014 "),mV=n(KLe,"A",{href:!0});var $pt=s(mV);ztr=r($pt,"TFT5Model"),$pt.forEach(t),Qtr=r(KLe," (T5 model)"),KLe.forEach(t),Wtr=i(k),gT=n(k,"LI",{});var ZLe=s(gT);g_e=n(ZLe,"STRONG",{});var Ipt=s(g_e);Htr=r(Ipt,"tapas"),Ipt.forEach(t),Utr=r(ZLe," \u2014 "),gV=n(ZLe,"A",{href:!0});var qpt=s(gV);Jtr=r(qpt,"TFTapasModel"),qpt.forEach(t),Ytr=r(ZLe," (TAPAS model)"),ZLe.forEach(t),Ktr=i(k),hT=n(k,"LI",{});var e8e=s(hT);h_e=n(e8e,"STRONG",{});var Npt=s(h_e);Ztr=r(Npt,"transfo-xl"),Npt.forEach(t),ear=r(e8e," \u2014 "),hV=n(e8e,"A",{href:!0});var jpt=s(hV);oar=r(jpt,"TFTransfoXLModel"),jpt.forEach(t),rar=r(e8e," (Transformer-XL model)"),e8e.forEach(t),tar=i(k),pT=n(k,"LI",{});var o8e=s(pT);p_e=n(o8e,"STRONG",{});var Dpt=s(p_e);aar=r(Dpt,"vit"),Dpt.forEach(t),nar=r(o8e," \u2014 "),pV=n(o8e,"A",{href:!0});var Gpt=s(pV);sar=r(Gpt,"TFViTModel"),Gpt.forEach(t),lar=r(o8e," (ViT model)"),o8e.forEach(t),iar=i(k),_T=n(k,"LI",{});var r8e=s(_T);__e=n(r8e,"STRONG",{});var Opt=s(__e);dar=r(Opt,"vit_mae"),Opt.forEach(t),car=r(r8e," \u2014 "),_V=n(r8e,"A",{href:!0});var Vpt=s(_V);far=r(Vpt,"TFViTMAEModel"),Vpt.forEach(t),mar=r(r8e," (ViTMAE model)"),r8e.forEach(t),gar=i(k),uT=n(k,"LI",{});var t8e=s(uT);u_e=n(t8e,"STRONG",{});var Xpt=s(u_e);har=r(Xpt,"wav2vec2"),Xpt.forEach(t),par=r(t8e," \u2014 "),uV=n(t8e,"A",{href:!0});var zpt=s(uV);_ar=r(zpt,"TFWav2Vec2Model"),zpt.forEach(t),uar=r(t8e," (Wav2Vec2 model)"),t8e.forEach(t),bar=i(k),bT=n(k,"LI",{});var a8e=s(bT);b_e=n(a8e,"STRONG",{});var Qpt=s(b_e);Far=r(Qpt,"xlm"),Qpt.forEach(t),Tar=r(a8e," \u2014 "),bV=n(a8e,"A",{href:!0});var Wpt=s(bV);Mar=r(Wpt,"TFXLMModel"),Wpt.forEach(t),Ear=r(a8e," (XLM model)"),a8e.forEach(t),Car=i(k),FT=n(k,"LI",{});var n8e=s(FT);F_e=n(n8e,"STRONG",{});var Hpt=s(F_e);war=r(Hpt,"xlm-roberta"),Hpt.forEach(t),Aar=r(n8e," \u2014 "),FV=n(n8e,"A",{href:!0});var Upt=s(FV);yar=r(Upt,"TFXLMRobertaModel"),Upt.forEach(t),Lar=r(n8e," (XLM-RoBERTa model)"),n8e.forEach(t),xar=i(k),vT=n(k,"LI",{});var s8e=s(vT);v_e=n(s8e,"STRONG",{});var Jpt=s(v_e);kar=r(Jpt,"xlnet"),Jpt.forEach(t),Sar=r(s8e," \u2014 "),vV=n(s8e,"A",{href:!0});var Ypt=s(vV);Rar=r(Ypt,"TFXLNetModel"),Ypt.forEach(t),Bar=r(s8e," (XLNet model)"),s8e.forEach(t),k.forEach(t),Par=i(pa),T_e=n(pa,"P",{});var Kpt=s(T_e);$ar=r(Kpt,"Examples:"),Kpt.forEach(t),Iar=i(pa),m(uA.$$.fragment,pa),pa.forEach(t),Dl.forEach(t),oPe=i(c),uc=n(c,"H2",{class:!0});var fIe=s(uc);TT=n(fIe,"A",{id:!0,class:!0,href:!0});var Zpt=s(TT);M_e=n(Zpt,"SPAN",{});var e_t=s(M_e);m(bA.$$.fragment,e_t),e_t.forEach(t),Zpt.forEach(t),qar=i(fIe),E_e=n(fIe,"SPAN",{});var o_t=s(E_e);Nar=r(o_t,"TFAutoModelForPreTraining"),o_t.forEach(t),fIe.forEach(t),rPe=i(c),vr=n(c,"DIV",{class:!0});var Ol=s(vr);m(FA.$$.fragment,Ol),jar=i(Ol),bc=n(Ol,"P",{});var wJ=s(bc);Dar=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TV=n(wJ,"A",{href:!0});var r_t=s(TV);Gar=r(r_t,"from_pretrained()"),r_t.forEach(t),Oar=r(wJ," class method or the "),MV=n(wJ,"A",{href:!0});var t_t=s(MV);Var=r(t_t,"from_config()"),t_t.forEach(t),Xar=r(wJ,` class
method.`),wJ.forEach(t),zar=i(Ol),vA=n(Ol,"P",{});var mIe=s(vA);Qar=r(mIe,"This class cannot be instantiated directly using "),C_e=n(mIe,"CODE",{});var a_t=s(C_e);War=r(a_t,"__init__()"),a_t.forEach(t),Har=r(mIe," (throws an error)."),mIe.forEach(t),Uar=i(Ol),ht=n(Ol,"DIV",{class:!0});var Vl=s(ht);m(TA.$$.fragment,Vl),Jar=i(Vl),w_e=n(Vl,"P",{});var n_t=s(w_e);Yar=r(n_t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),n_t.forEach(t),Kar=i(Vl),Fc=n(Vl,"P",{});var AJ=s(Fc);Zar=r(AJ,`Note:
Loading a model from its configuration file does `),A_e=n(AJ,"STRONG",{});var s_t=s(A_e);enr=r(s_t,"not"),s_t.forEach(t),onr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=n(AJ,"A",{href:!0});var l_t=s(EV);rnr=r(l_t,"from_pretrained()"),l_t.forEach(t),tnr=r(AJ," to load the model weights."),AJ.forEach(t),anr=i(Vl),y_e=n(Vl,"P",{});var i_t=s(y_e);nnr=r(i_t,"Examples:"),i_t.forEach(t),snr=i(Vl),m(MA.$$.fragment,Vl),Vl.forEach(t),lnr=i(Ol),po=n(Ol,"DIV",{class:!0});var _a=s(po);m(EA.$$.fragment,_a),inr=i(_a),L_e=n(_a,"P",{});var d_t=s(L_e);dnr=r(d_t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),d_t.forEach(t),cnr=i(_a),un=n(_a,"P",{});var l5=s(un);fnr=r(l5,"The model class to instantiate is selected based on the "),x_e=n(l5,"CODE",{});var c_t=s(x_e);mnr=r(c_t,"model_type"),c_t.forEach(t),gnr=r(l5,` property of the config object (either
passed as an argument or loaded from `),k_e=n(l5,"CODE",{});var f_t=s(k_e);hnr=r(f_t,"pretrained_model_name_or_path"),f_t.forEach(t),pnr=r(l5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=n(l5,"CODE",{});var m_t=s(S_e);_nr=r(m_t,"pretrained_model_name_or_path"),m_t.forEach(t),unr=r(l5,":"),l5.forEach(t),bnr=i(_a),H=n(_a,"UL",{});var U=s(H);MT=n(U,"LI",{});var l8e=s(MT);R_e=n(l8e,"STRONG",{});var g_t=s(R_e);Fnr=r(g_t,"albert"),g_t.forEach(t),vnr=r(l8e," \u2014 "),CV=n(l8e,"A",{href:!0});var h_t=s(CV);Tnr=r(h_t,"TFAlbertForPreTraining"),h_t.forEach(t),Mnr=r(l8e," (ALBERT model)"),l8e.forEach(t),Enr=i(U),ET=n(U,"LI",{});var i8e=s(ET);B_e=n(i8e,"STRONG",{});var p_t=s(B_e);Cnr=r(p_t,"bart"),p_t.forEach(t),wnr=r(i8e," \u2014 "),wV=n(i8e,"A",{href:!0});var __t=s(wV);Anr=r(__t,"TFBartForConditionalGeneration"),__t.forEach(t),ynr=r(i8e," (BART model)"),i8e.forEach(t),Lnr=i(U),CT=n(U,"LI",{});var d8e=s(CT);P_e=n(d8e,"STRONG",{});var u_t=s(P_e);xnr=r(u_t,"bert"),u_t.forEach(t),knr=r(d8e," \u2014 "),AV=n(d8e,"A",{href:!0});var b_t=s(AV);Snr=r(b_t,"TFBertForPreTraining"),b_t.forEach(t),Rnr=r(d8e," (BERT model)"),d8e.forEach(t),Bnr=i(U),wT=n(U,"LI",{});var c8e=s(wT);$_e=n(c8e,"STRONG",{});var F_t=s($_e);Pnr=r(F_t,"camembert"),F_t.forEach(t),$nr=r(c8e," \u2014 "),yV=n(c8e,"A",{href:!0});var v_t=s(yV);Inr=r(v_t,"TFCamembertForMaskedLM"),v_t.forEach(t),qnr=r(c8e," (CamemBERT model)"),c8e.forEach(t),Nnr=i(U),AT=n(U,"LI",{});var f8e=s(AT);I_e=n(f8e,"STRONG",{});var T_t=s(I_e);jnr=r(T_t,"ctrl"),T_t.forEach(t),Dnr=r(f8e," \u2014 "),LV=n(f8e,"A",{href:!0});var M_t=s(LV);Gnr=r(M_t,"TFCTRLLMHeadModel"),M_t.forEach(t),Onr=r(f8e," (CTRL model)"),f8e.forEach(t),Vnr=i(U),yT=n(U,"LI",{});var m8e=s(yT);q_e=n(m8e,"STRONG",{});var E_t=s(q_e);Xnr=r(E_t,"distilbert"),E_t.forEach(t),znr=r(m8e," \u2014 "),xV=n(m8e,"A",{href:!0});var C_t=s(xV);Qnr=r(C_t,"TFDistilBertForMaskedLM"),C_t.forEach(t),Wnr=r(m8e," (DistilBERT model)"),m8e.forEach(t),Hnr=i(U),LT=n(U,"LI",{});var g8e=s(LT);N_e=n(g8e,"STRONG",{});var w_t=s(N_e);Unr=r(w_t,"electra"),w_t.forEach(t),Jnr=r(g8e," \u2014 "),kV=n(g8e,"A",{href:!0});var A_t=s(kV);Ynr=r(A_t,"TFElectraForPreTraining"),A_t.forEach(t),Knr=r(g8e," (ELECTRA model)"),g8e.forEach(t),Znr=i(U),xT=n(U,"LI",{});var h8e=s(xT);j_e=n(h8e,"STRONG",{});var y_t=s(j_e);esr=r(y_t,"flaubert"),y_t.forEach(t),osr=r(h8e," \u2014 "),SV=n(h8e,"A",{href:!0});var L_t=s(SV);rsr=r(L_t,"TFFlaubertWithLMHeadModel"),L_t.forEach(t),tsr=r(h8e," (FlauBERT model)"),h8e.forEach(t),asr=i(U),kT=n(U,"LI",{});var p8e=s(kT);D_e=n(p8e,"STRONG",{});var x_t=s(D_e);nsr=r(x_t,"funnel"),x_t.forEach(t),ssr=r(p8e," \u2014 "),RV=n(p8e,"A",{href:!0});var k_t=s(RV);lsr=r(k_t,"TFFunnelForPreTraining"),k_t.forEach(t),isr=r(p8e," (Funnel Transformer model)"),p8e.forEach(t),dsr=i(U),ST=n(U,"LI",{});var _8e=s(ST);G_e=n(_8e,"STRONG",{});var S_t=s(G_e);csr=r(S_t,"gpt2"),S_t.forEach(t),fsr=r(_8e," \u2014 "),BV=n(_8e,"A",{href:!0});var R_t=s(BV);msr=r(R_t,"TFGPT2LMHeadModel"),R_t.forEach(t),gsr=r(_8e," (OpenAI GPT-2 model)"),_8e.forEach(t),hsr=i(U),RT=n(U,"LI",{});var u8e=s(RT);O_e=n(u8e,"STRONG",{});var B_t=s(O_e);psr=r(B_t,"layoutlm"),B_t.forEach(t),_sr=r(u8e," \u2014 "),PV=n(u8e,"A",{href:!0});var P_t=s(PV);usr=r(P_t,"TFLayoutLMForMaskedLM"),P_t.forEach(t),bsr=r(u8e," (LayoutLM model)"),u8e.forEach(t),Fsr=i(U),BT=n(U,"LI",{});var b8e=s(BT);V_e=n(b8e,"STRONG",{});var $_t=s(V_e);vsr=r($_t,"lxmert"),$_t.forEach(t),Tsr=r(b8e," \u2014 "),$V=n(b8e,"A",{href:!0});var I_t=s($V);Msr=r(I_t,"TFLxmertForPreTraining"),I_t.forEach(t),Esr=r(b8e," (LXMERT model)"),b8e.forEach(t),Csr=i(U),PT=n(U,"LI",{});var F8e=s(PT);X_e=n(F8e,"STRONG",{});var q_t=s(X_e);wsr=r(q_t,"mobilebert"),q_t.forEach(t),Asr=r(F8e," \u2014 "),IV=n(F8e,"A",{href:!0});var N_t=s(IV);ysr=r(N_t,"TFMobileBertForPreTraining"),N_t.forEach(t),Lsr=r(F8e," (MobileBERT model)"),F8e.forEach(t),xsr=i(U),$T=n(U,"LI",{});var v8e=s($T);z_e=n(v8e,"STRONG",{});var j_t=s(z_e);ksr=r(j_t,"mpnet"),j_t.forEach(t),Ssr=r(v8e," \u2014 "),qV=n(v8e,"A",{href:!0});var D_t=s(qV);Rsr=r(D_t,"TFMPNetForMaskedLM"),D_t.forEach(t),Bsr=r(v8e," (MPNet model)"),v8e.forEach(t),Psr=i(U),IT=n(U,"LI",{});var T8e=s(IT);Q_e=n(T8e,"STRONG",{});var G_t=s(Q_e);$sr=r(G_t,"openai-gpt"),G_t.forEach(t),Isr=r(T8e," \u2014 "),NV=n(T8e,"A",{href:!0});var O_t=s(NV);qsr=r(O_t,"TFOpenAIGPTLMHeadModel"),O_t.forEach(t),Nsr=r(T8e," (OpenAI GPT model)"),T8e.forEach(t),jsr=i(U),qT=n(U,"LI",{});var M8e=s(qT);W_e=n(M8e,"STRONG",{});var V_t=s(W_e);Dsr=r(V_t,"roberta"),V_t.forEach(t),Gsr=r(M8e," \u2014 "),jV=n(M8e,"A",{href:!0});var X_t=s(jV);Osr=r(X_t,"TFRobertaForMaskedLM"),X_t.forEach(t),Vsr=r(M8e," (RoBERTa model)"),M8e.forEach(t),Xsr=i(U),NT=n(U,"LI",{});var E8e=s(NT);H_e=n(E8e,"STRONG",{});var z_t=s(H_e);zsr=r(z_t,"t5"),z_t.forEach(t),Qsr=r(E8e," \u2014 "),DV=n(E8e,"A",{href:!0});var Q_t=s(DV);Wsr=r(Q_t,"TFT5ForConditionalGeneration"),Q_t.forEach(t),Hsr=r(E8e," (T5 model)"),E8e.forEach(t),Usr=i(U),jT=n(U,"LI",{});var C8e=s(jT);U_e=n(C8e,"STRONG",{});var W_t=s(U_e);Jsr=r(W_t,"tapas"),W_t.forEach(t),Ysr=r(C8e," \u2014 "),GV=n(C8e,"A",{href:!0});var H_t=s(GV);Ksr=r(H_t,"TFTapasForMaskedLM"),H_t.forEach(t),Zsr=r(C8e," (TAPAS model)"),C8e.forEach(t),elr=i(U),DT=n(U,"LI",{});var w8e=s(DT);J_e=n(w8e,"STRONG",{});var U_t=s(J_e);olr=r(U_t,"transfo-xl"),U_t.forEach(t),rlr=r(w8e," \u2014 "),OV=n(w8e,"A",{href:!0});var J_t=s(OV);tlr=r(J_t,"TFTransfoXLLMHeadModel"),J_t.forEach(t),alr=r(w8e," (Transformer-XL model)"),w8e.forEach(t),nlr=i(U),GT=n(U,"LI",{});var A8e=s(GT);Y_e=n(A8e,"STRONG",{});var Y_t=s(Y_e);slr=r(Y_t,"vit_mae"),Y_t.forEach(t),llr=r(A8e," \u2014 "),VV=n(A8e,"A",{href:!0});var K_t=s(VV);ilr=r(K_t,"TFViTMAEForPreTraining"),K_t.forEach(t),dlr=r(A8e," (ViTMAE model)"),A8e.forEach(t),clr=i(U),OT=n(U,"LI",{});var y8e=s(OT);K_e=n(y8e,"STRONG",{});var Z_t=s(K_e);flr=r(Z_t,"xlm"),Z_t.forEach(t),mlr=r(y8e," \u2014 "),XV=n(y8e,"A",{href:!0});var eut=s(XV);glr=r(eut,"TFXLMWithLMHeadModel"),eut.forEach(t),hlr=r(y8e," (XLM model)"),y8e.forEach(t),plr=i(U),VT=n(U,"LI",{});var L8e=s(VT);Z_e=n(L8e,"STRONG",{});var out=s(Z_e);_lr=r(out,"xlm-roberta"),out.forEach(t),ulr=r(L8e," \u2014 "),zV=n(L8e,"A",{href:!0});var rut=s(zV);blr=r(rut,"TFXLMRobertaForMaskedLM"),rut.forEach(t),Flr=r(L8e," (XLM-RoBERTa model)"),L8e.forEach(t),vlr=i(U),XT=n(U,"LI",{});var x8e=s(XT);eue=n(x8e,"STRONG",{});var tut=s(eue);Tlr=r(tut,"xlnet"),tut.forEach(t),Mlr=r(x8e," \u2014 "),QV=n(x8e,"A",{href:!0});var aut=s(QV);Elr=r(aut,"TFXLNetLMHeadModel"),aut.forEach(t),Clr=r(x8e," (XLNet model)"),x8e.forEach(t),U.forEach(t),wlr=i(_a),oue=n(_a,"P",{});var nut=s(oue);Alr=r(nut,"Examples:"),nut.forEach(t),ylr=i(_a),m(CA.$$.fragment,_a),_a.forEach(t),Ol.forEach(t),tPe=i(c),vc=n(c,"H2",{class:!0});var gIe=s(vc);zT=n(gIe,"A",{id:!0,class:!0,href:!0});var sut=s(zT);rue=n(sut,"SPAN",{});var lut=s(rue);m(wA.$$.fragment,lut),lut.forEach(t),sut.forEach(t),Llr=i(gIe),tue=n(gIe,"SPAN",{});var iut=s(tue);xlr=r(iut,"TFAutoModelForCausalLM"),iut.forEach(t),gIe.forEach(t),aPe=i(c),Tr=n(c,"DIV",{class:!0});var Xl=s(Tr);m(AA.$$.fragment,Xl),klr=i(Xl),Tc=n(Xl,"P",{});var yJ=s(Tc);Slr=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WV=n(yJ,"A",{href:!0});var dut=s(WV);Rlr=r(dut,"from_pretrained()"),dut.forEach(t),Blr=r(yJ," class method or the "),HV=n(yJ,"A",{href:!0});var cut=s(HV);Plr=r(cut,"from_config()"),cut.forEach(t),$lr=r(yJ,` class
method.`),yJ.forEach(t),Ilr=i(Xl),yA=n(Xl,"P",{});var hIe=s(yA);qlr=r(hIe,"This class cannot be instantiated directly using "),aue=n(hIe,"CODE",{});var fut=s(aue);Nlr=r(fut,"__init__()"),fut.forEach(t),jlr=r(hIe," (throws an error)."),hIe.forEach(t),Dlr=i(Xl),pt=n(Xl,"DIV",{class:!0});var zl=s(pt);m(LA.$$.fragment,zl),Glr=i(zl),nue=n(zl,"P",{});var mut=s(nue);Olr=r(mut,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mut.forEach(t),Vlr=i(zl),Mc=n(zl,"P",{});var LJ=s(Mc);Xlr=r(LJ,`Note:
Loading a model from its configuration file does `),sue=n(LJ,"STRONG",{});var gut=s(sue);zlr=r(gut,"not"),gut.forEach(t),Qlr=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(LJ,"A",{href:!0});var hut=s(UV);Wlr=r(hut,"from_pretrained()"),hut.forEach(t),Hlr=r(LJ," to load the model weights."),LJ.forEach(t),Ulr=i(zl),lue=n(zl,"P",{});var put=s(lue);Jlr=r(put,"Examples:"),put.forEach(t),Ylr=i(zl),m(xA.$$.fragment,zl),zl.forEach(t),Klr=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(kA.$$.fragment,ua),Zlr=i(ua),iue=n(ua,"P",{});var _ut=s(iue);eir=r(_ut,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_ut.forEach(t),oir=i(ua),bn=n(ua,"P",{});var i5=s(bn);rir=r(i5,"The model class to instantiate is selected based on the "),due=n(i5,"CODE",{});var uut=s(due);tir=r(uut,"model_type"),uut.forEach(t),air=r(i5,` property of the config object (either
passed as an argument or loaded from `),cue=n(i5,"CODE",{});var but=s(cue);nir=r(but,"pretrained_model_name_or_path"),but.forEach(t),sir=r(i5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=n(i5,"CODE",{});var Fut=s(fue);lir=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),iir=r(i5,":"),i5.forEach(t),dir=i(ua),me=n(ua,"UL",{});var _e=s(me);QT=n(_e,"LI",{});var k8e=s(QT);mue=n(k8e,"STRONG",{});var vut=s(mue);cir=r(vut,"bert"),vut.forEach(t),fir=r(k8e," \u2014 "),JV=n(k8e,"A",{href:!0});var Tut=s(JV);mir=r(Tut,"TFBertLMHeadModel"),Tut.forEach(t),gir=r(k8e," (BERT model)"),k8e.forEach(t),hir=i(_e),WT=n(_e,"LI",{});var S8e=s(WT);gue=n(S8e,"STRONG",{});var Mut=s(gue);pir=r(Mut,"camembert"),Mut.forEach(t),_ir=r(S8e," \u2014 "),YV=n(S8e,"A",{href:!0});var Eut=s(YV);uir=r(Eut,"TFCamembertForCausalLM"),Eut.forEach(t),bir=r(S8e," (CamemBERT model)"),S8e.forEach(t),Fir=i(_e),HT=n(_e,"LI",{});var R8e=s(HT);hue=n(R8e,"STRONG",{});var Cut=s(hue);vir=r(Cut,"ctrl"),Cut.forEach(t),Tir=r(R8e," \u2014 "),KV=n(R8e,"A",{href:!0});var wut=s(KV);Mir=r(wut,"TFCTRLLMHeadModel"),wut.forEach(t),Eir=r(R8e," (CTRL model)"),R8e.forEach(t),Cir=i(_e),UT=n(_e,"LI",{});var B8e=s(UT);pue=n(B8e,"STRONG",{});var Aut=s(pue);wir=r(Aut,"gpt2"),Aut.forEach(t),Air=r(B8e," \u2014 "),ZV=n(B8e,"A",{href:!0});var yut=s(ZV);yir=r(yut,"TFGPT2LMHeadModel"),yut.forEach(t),Lir=r(B8e," (OpenAI GPT-2 model)"),B8e.forEach(t),xir=i(_e),JT=n(_e,"LI",{});var P8e=s(JT);_ue=n(P8e,"STRONG",{});var Lut=s(_ue);kir=r(Lut,"gptj"),Lut.forEach(t),Sir=r(P8e," \u2014 "),eX=n(P8e,"A",{href:!0});var xut=s(eX);Rir=r(xut,"TFGPTJForCausalLM"),xut.forEach(t),Bir=r(P8e," (GPT-J model)"),P8e.forEach(t),Pir=i(_e),YT=n(_e,"LI",{});var $8e=s(YT);uue=n($8e,"STRONG",{});var kut=s(uue);$ir=r(kut,"openai-gpt"),kut.forEach(t),Iir=r($8e," \u2014 "),oX=n($8e,"A",{href:!0});var Sut=s(oX);qir=r(Sut,"TFOpenAIGPTLMHeadModel"),Sut.forEach(t),Nir=r($8e," (OpenAI GPT model)"),$8e.forEach(t),jir=i(_e),KT=n(_e,"LI",{});var I8e=s(KT);bue=n(I8e,"STRONG",{});var Rut=s(bue);Dir=r(Rut,"rembert"),Rut.forEach(t),Gir=r(I8e," \u2014 "),rX=n(I8e,"A",{href:!0});var But=s(rX);Oir=r(But,"TFRemBertForCausalLM"),But.forEach(t),Vir=r(I8e," (RemBERT model)"),I8e.forEach(t),Xir=i(_e),ZT=n(_e,"LI",{});var q8e=s(ZT);Fue=n(q8e,"STRONG",{});var Put=s(Fue);zir=r(Put,"roberta"),Put.forEach(t),Qir=r(q8e," \u2014 "),tX=n(q8e,"A",{href:!0});var $ut=s(tX);Wir=r($ut,"TFRobertaForCausalLM"),$ut.forEach(t),Hir=r(q8e," (RoBERTa model)"),q8e.forEach(t),Uir=i(_e),e7=n(_e,"LI",{});var N8e=s(e7);vue=n(N8e,"STRONG",{});var Iut=s(vue);Jir=r(Iut,"roformer"),Iut.forEach(t),Yir=r(N8e," \u2014 "),aX=n(N8e,"A",{href:!0});var qut=s(aX);Kir=r(qut,"TFRoFormerForCausalLM"),qut.forEach(t),Zir=r(N8e," (RoFormer model)"),N8e.forEach(t),edr=i(_e),o7=n(_e,"LI",{});var j8e=s(o7);Tue=n(j8e,"STRONG",{});var Nut=s(Tue);odr=r(Nut,"transfo-xl"),Nut.forEach(t),rdr=r(j8e," \u2014 "),nX=n(j8e,"A",{href:!0});var jut=s(nX);tdr=r(jut,"TFTransfoXLLMHeadModel"),jut.forEach(t),adr=r(j8e," (Transformer-XL model)"),j8e.forEach(t),ndr=i(_e),r7=n(_e,"LI",{});var D8e=s(r7);Mue=n(D8e,"STRONG",{});var Dut=s(Mue);sdr=r(Dut,"xlm"),Dut.forEach(t),ldr=r(D8e," \u2014 "),sX=n(D8e,"A",{href:!0});var Gut=s(sX);idr=r(Gut,"TFXLMWithLMHeadModel"),Gut.forEach(t),ddr=r(D8e," (XLM model)"),D8e.forEach(t),cdr=i(_e),t7=n(_e,"LI",{});var G8e=s(t7);Eue=n(G8e,"STRONG",{});var Out=s(Eue);fdr=r(Out,"xlnet"),Out.forEach(t),mdr=r(G8e," \u2014 "),lX=n(G8e,"A",{href:!0});var Vut=s(lX);gdr=r(Vut,"TFXLNetLMHeadModel"),Vut.forEach(t),hdr=r(G8e," (XLNet model)"),G8e.forEach(t),_e.forEach(t),pdr=i(ua),Cue=n(ua,"P",{});var Xut=s(Cue);_dr=r(Xut,"Examples:"),Xut.forEach(t),udr=i(ua),m(SA.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),nPe=i(c),Ec=n(c,"H2",{class:!0});var pIe=s(Ec);a7=n(pIe,"A",{id:!0,class:!0,href:!0});var zut=s(a7);wue=n(zut,"SPAN",{});var Qut=s(wue);m(RA.$$.fragment,Qut),Qut.forEach(t),zut.forEach(t),bdr=i(pIe),Aue=n(pIe,"SPAN",{});var Wut=s(Aue);Fdr=r(Wut,"TFAutoModelForImageClassification"),Wut.forEach(t),pIe.forEach(t),sPe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(BA.$$.fragment,Ql),vdr=i(Ql),Cc=n(Ql,"P",{});var xJ=s(Cc);Tdr=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iX=n(xJ,"A",{href:!0});var Hut=s(iX);Mdr=r(Hut,"from_pretrained()"),Hut.forEach(t),Edr=r(xJ," class method or the "),dX=n(xJ,"A",{href:!0});var Uut=s(dX);Cdr=r(Uut,"from_config()"),Uut.forEach(t),wdr=r(xJ,` class
method.`),xJ.forEach(t),Adr=i(Ql),PA=n(Ql,"P",{});var _Ie=s(PA);ydr=r(_Ie,"This class cannot be instantiated directly using "),yue=n(_Ie,"CODE",{});var Jut=s(yue);Ldr=r(Jut,"__init__()"),Jut.forEach(t),xdr=r(_Ie," (throws an error)."),_Ie.forEach(t),kdr=i(Ql),_t=n(Ql,"DIV",{class:!0});var Wl=s(_t);m($A.$$.fragment,Wl),Sdr=i(Wl),Lue=n(Wl,"P",{});var Yut=s(Lue);Rdr=r(Yut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Yut.forEach(t),Bdr=i(Wl),wc=n(Wl,"P",{});var kJ=s(wc);Pdr=r(kJ,`Note:
Loading a model from its configuration file does `),xue=n(kJ,"STRONG",{});var Kut=s(xue);$dr=r(Kut,"not"),Kut.forEach(t),Idr=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(kJ,"A",{href:!0});var Zut=s(cX);qdr=r(Zut,"from_pretrained()"),Zut.forEach(t),Ndr=r(kJ," to load the model weights."),kJ.forEach(t),jdr=i(Wl),kue=n(Wl,"P",{});var e2t=s(kue);Ddr=r(e2t,"Examples:"),e2t.forEach(t),Gdr=i(Wl),m(IA.$$.fragment,Wl),Wl.forEach(t),Odr=i(Ql),uo=n(Ql,"DIV",{class:!0});var ba=s(uo);m(qA.$$.fragment,ba),Vdr=i(ba),Sue=n(ba,"P",{});var o2t=s(Sue);Xdr=r(o2t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),o2t.forEach(t),zdr=i(ba),Fn=n(ba,"P",{});var d5=s(Fn);Qdr=r(d5,"The model class to instantiate is selected based on the "),Rue=n(d5,"CODE",{});var r2t=s(Rue);Wdr=r(r2t,"model_type"),r2t.forEach(t),Hdr=r(d5,` property of the config object (either
passed as an argument or loaded from `),Bue=n(d5,"CODE",{});var t2t=s(Bue);Udr=r(t2t,"pretrained_model_name_or_path"),t2t.forEach(t),Jdr=r(d5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=n(d5,"CODE",{});var a2t=s(Pue);Ydr=r(a2t,"pretrained_model_name_or_path"),a2t.forEach(t),Kdr=r(d5,":"),d5.forEach(t),Zdr=i(ba),NA=n(ba,"UL",{});var uIe=s(NA);n7=n(uIe,"LI",{});var O8e=s(n7);$ue=n(O8e,"STRONG",{});var n2t=s($ue);ecr=r(n2t,"convnext"),n2t.forEach(t),ocr=r(O8e," \u2014 "),fX=n(O8e,"A",{href:!0});var s2t=s(fX);rcr=r(s2t,"TFConvNextForImageClassification"),s2t.forEach(t),tcr=r(O8e," (ConvNext model)"),O8e.forEach(t),acr=i(uIe),s7=n(uIe,"LI",{});var V8e=s(s7);Iue=n(V8e,"STRONG",{});var l2t=s(Iue);ncr=r(l2t,"vit"),l2t.forEach(t),scr=r(V8e," \u2014 "),mX=n(V8e,"A",{href:!0});var i2t=s(mX);lcr=r(i2t,"TFViTForImageClassification"),i2t.forEach(t),icr=r(V8e," (ViT model)"),V8e.forEach(t),uIe.forEach(t),dcr=i(ba),que=n(ba,"P",{});var d2t=s(que);ccr=r(d2t,"Examples:"),d2t.forEach(t),fcr=i(ba),m(jA.$$.fragment,ba),ba.forEach(t),Ql.forEach(t),lPe=i(c),Ac=n(c,"H2",{class:!0});var bIe=s(Ac);l7=n(bIe,"A",{id:!0,class:!0,href:!0});var c2t=s(l7);Nue=n(c2t,"SPAN",{});var f2t=s(Nue);m(DA.$$.fragment,f2t),f2t.forEach(t),c2t.forEach(t),mcr=i(bIe),jue=n(bIe,"SPAN",{});var m2t=s(jue);gcr=r(m2t,"TFAutoModelForMaskedLM"),m2t.forEach(t),bIe.forEach(t),iPe=i(c),Er=n(c,"DIV",{class:!0});var Hl=s(Er);m(GA.$$.fragment,Hl),hcr=i(Hl),yc=n(Hl,"P",{});var SJ=s(yc);pcr=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gX=n(SJ,"A",{href:!0});var g2t=s(gX);_cr=r(g2t,"from_pretrained()"),g2t.forEach(t),ucr=r(SJ," class method or the "),hX=n(SJ,"A",{href:!0});var h2t=s(hX);bcr=r(h2t,"from_config()"),h2t.forEach(t),Fcr=r(SJ,` class
method.`),SJ.forEach(t),vcr=i(Hl),OA=n(Hl,"P",{});var FIe=s(OA);Tcr=r(FIe,"This class cannot be instantiated directly using "),Due=n(FIe,"CODE",{});var p2t=s(Due);Mcr=r(p2t,"__init__()"),p2t.forEach(t),Ecr=r(FIe," (throws an error)."),FIe.forEach(t),Ccr=i(Hl),ut=n(Hl,"DIV",{class:!0});var Ul=s(ut);m(VA.$$.fragment,Ul),wcr=i(Ul),Gue=n(Ul,"P",{});var _2t=s(Gue);Acr=r(_2t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_2t.forEach(t),ycr=i(Ul),Lc=n(Ul,"P",{});var RJ=s(Lc);Lcr=r(RJ,`Note:
Loading a model from its configuration file does `),Oue=n(RJ,"STRONG",{});var u2t=s(Oue);xcr=r(u2t,"not"),u2t.forEach(t),kcr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=n(RJ,"A",{href:!0});var b2t=s(pX);Scr=r(b2t,"from_pretrained()"),b2t.forEach(t),Rcr=r(RJ," to load the model weights."),RJ.forEach(t),Bcr=i(Ul),Vue=n(Ul,"P",{});var F2t=s(Vue);Pcr=r(F2t,"Examples:"),F2t.forEach(t),$cr=i(Ul),m(XA.$$.fragment,Ul),Ul.forEach(t),Icr=i(Hl),bo=n(Hl,"DIV",{class:!0});var Fa=s(bo);m(zA.$$.fragment,Fa),qcr=i(Fa),Xue=n(Fa,"P",{});var v2t=s(Xue);Ncr=r(v2t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),v2t.forEach(t),jcr=i(Fa),vn=n(Fa,"P",{});var c5=s(vn);Dcr=r(c5,"The model class to instantiate is selected based on the "),zue=n(c5,"CODE",{});var T2t=s(zue);Gcr=r(T2t,"model_type"),T2t.forEach(t),Ocr=r(c5,` property of the config object (either
passed as an argument or loaded from `),Que=n(c5,"CODE",{});var M2t=s(Que);Vcr=r(M2t,"pretrained_model_name_or_path"),M2t.forEach(t),Xcr=r(c5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=n(c5,"CODE",{});var E2t=s(Wue);zcr=r(E2t,"pretrained_model_name_or_path"),E2t.forEach(t),Qcr=r(c5,":"),c5.forEach(t),Wcr=i(Fa),J=n(Fa,"UL",{});var oe=s(J);i7=n(oe,"LI",{});var X8e=s(i7);Hue=n(X8e,"STRONG",{});var C2t=s(Hue);Hcr=r(C2t,"albert"),C2t.forEach(t),Ucr=r(X8e," \u2014 "),_X=n(X8e,"A",{href:!0});var w2t=s(_X);Jcr=r(w2t,"TFAlbertForMaskedLM"),w2t.forEach(t),Ycr=r(X8e," (ALBERT model)"),X8e.forEach(t),Kcr=i(oe),d7=n(oe,"LI",{});var z8e=s(d7);Uue=n(z8e,"STRONG",{});var A2t=s(Uue);Zcr=r(A2t,"bert"),A2t.forEach(t),efr=r(z8e," \u2014 "),uX=n(z8e,"A",{href:!0});var y2t=s(uX);ofr=r(y2t,"TFBertForMaskedLM"),y2t.forEach(t),rfr=r(z8e," (BERT model)"),z8e.forEach(t),tfr=i(oe),c7=n(oe,"LI",{});var Q8e=s(c7);Jue=n(Q8e,"STRONG",{});var L2t=s(Jue);afr=r(L2t,"camembert"),L2t.forEach(t),nfr=r(Q8e," \u2014 "),bX=n(Q8e,"A",{href:!0});var x2t=s(bX);sfr=r(x2t,"TFCamembertForMaskedLM"),x2t.forEach(t),lfr=r(Q8e," (CamemBERT model)"),Q8e.forEach(t),ifr=i(oe),f7=n(oe,"LI",{});var W8e=s(f7);Yue=n(W8e,"STRONG",{});var k2t=s(Yue);dfr=r(k2t,"convbert"),k2t.forEach(t),cfr=r(W8e," \u2014 "),FX=n(W8e,"A",{href:!0});var S2t=s(FX);ffr=r(S2t,"TFConvBertForMaskedLM"),S2t.forEach(t),mfr=r(W8e," (ConvBERT model)"),W8e.forEach(t),gfr=i(oe),m7=n(oe,"LI",{});var H8e=s(m7);Kue=n(H8e,"STRONG",{});var R2t=s(Kue);hfr=r(R2t,"deberta"),R2t.forEach(t),pfr=r(H8e," \u2014 "),vX=n(H8e,"A",{href:!0});var B2t=s(vX);_fr=r(B2t,"TFDebertaForMaskedLM"),B2t.forEach(t),ufr=r(H8e," (DeBERTa model)"),H8e.forEach(t),bfr=i(oe),g7=n(oe,"LI",{});var U8e=s(g7);Zue=n(U8e,"STRONG",{});var P2t=s(Zue);Ffr=r(P2t,"deberta-v2"),P2t.forEach(t),vfr=r(U8e," \u2014 "),TX=n(U8e,"A",{href:!0});var $2t=s(TX);Tfr=r($2t,"TFDebertaV2ForMaskedLM"),$2t.forEach(t),Mfr=r(U8e," (DeBERTa-v2 model)"),U8e.forEach(t),Efr=i(oe),h7=n(oe,"LI",{});var J8e=s(h7);e2e=n(J8e,"STRONG",{});var I2t=s(e2e);Cfr=r(I2t,"distilbert"),I2t.forEach(t),wfr=r(J8e," \u2014 "),MX=n(J8e,"A",{href:!0});var q2t=s(MX);Afr=r(q2t,"TFDistilBertForMaskedLM"),q2t.forEach(t),yfr=r(J8e," (DistilBERT model)"),J8e.forEach(t),Lfr=i(oe),p7=n(oe,"LI",{});var Y8e=s(p7);o2e=n(Y8e,"STRONG",{});var N2t=s(o2e);xfr=r(N2t,"electra"),N2t.forEach(t),kfr=r(Y8e," \u2014 "),EX=n(Y8e,"A",{href:!0});var j2t=s(EX);Sfr=r(j2t,"TFElectraForMaskedLM"),j2t.forEach(t),Rfr=r(Y8e," (ELECTRA model)"),Y8e.forEach(t),Bfr=i(oe),_7=n(oe,"LI",{});var K8e=s(_7);r2e=n(K8e,"STRONG",{});var D2t=s(r2e);Pfr=r(D2t,"flaubert"),D2t.forEach(t),$fr=r(K8e," \u2014 "),CX=n(K8e,"A",{href:!0});var G2t=s(CX);Ifr=r(G2t,"TFFlaubertWithLMHeadModel"),G2t.forEach(t),qfr=r(K8e," (FlauBERT model)"),K8e.forEach(t),Nfr=i(oe),u7=n(oe,"LI",{});var Z8e=s(u7);t2e=n(Z8e,"STRONG",{});var O2t=s(t2e);jfr=r(O2t,"funnel"),O2t.forEach(t),Dfr=r(Z8e," \u2014 "),wX=n(Z8e,"A",{href:!0});var V2t=s(wX);Gfr=r(V2t,"TFFunnelForMaskedLM"),V2t.forEach(t),Ofr=r(Z8e," (Funnel Transformer model)"),Z8e.forEach(t),Vfr=i(oe),b7=n(oe,"LI",{});var exe=s(b7);a2e=n(exe,"STRONG",{});var X2t=s(a2e);Xfr=r(X2t,"layoutlm"),X2t.forEach(t),zfr=r(exe," \u2014 "),AX=n(exe,"A",{href:!0});var z2t=s(AX);Qfr=r(z2t,"TFLayoutLMForMaskedLM"),z2t.forEach(t),Wfr=r(exe," (LayoutLM model)"),exe.forEach(t),Hfr=i(oe),F7=n(oe,"LI",{});var oxe=s(F7);n2e=n(oxe,"STRONG",{});var Q2t=s(n2e);Ufr=r(Q2t,"longformer"),Q2t.forEach(t),Jfr=r(oxe," \u2014 "),yX=n(oxe,"A",{href:!0});var W2t=s(yX);Yfr=r(W2t,"TFLongformerForMaskedLM"),W2t.forEach(t),Kfr=r(oxe," (Longformer model)"),oxe.forEach(t),Zfr=i(oe),v7=n(oe,"LI",{});var rxe=s(v7);s2e=n(rxe,"STRONG",{});var H2t=s(s2e);emr=r(H2t,"mobilebert"),H2t.forEach(t),omr=r(rxe," \u2014 "),LX=n(rxe,"A",{href:!0});var U2t=s(LX);rmr=r(U2t,"TFMobileBertForMaskedLM"),U2t.forEach(t),tmr=r(rxe," (MobileBERT model)"),rxe.forEach(t),amr=i(oe),T7=n(oe,"LI",{});var txe=s(T7);l2e=n(txe,"STRONG",{});var J2t=s(l2e);nmr=r(J2t,"mpnet"),J2t.forEach(t),smr=r(txe," \u2014 "),xX=n(txe,"A",{href:!0});var Y2t=s(xX);lmr=r(Y2t,"TFMPNetForMaskedLM"),Y2t.forEach(t),imr=r(txe," (MPNet model)"),txe.forEach(t),dmr=i(oe),M7=n(oe,"LI",{});var axe=s(M7);i2e=n(axe,"STRONG",{});var K2t=s(i2e);cmr=r(K2t,"rembert"),K2t.forEach(t),fmr=r(axe," \u2014 "),kX=n(axe,"A",{href:!0});var Z2t=s(kX);mmr=r(Z2t,"TFRemBertForMaskedLM"),Z2t.forEach(t),gmr=r(axe," (RemBERT model)"),axe.forEach(t),hmr=i(oe),E7=n(oe,"LI",{});var nxe=s(E7);d2e=n(nxe,"STRONG",{});var e1t=s(d2e);pmr=r(e1t,"roberta"),e1t.forEach(t),_mr=r(nxe," \u2014 "),SX=n(nxe,"A",{href:!0});var o1t=s(SX);umr=r(o1t,"TFRobertaForMaskedLM"),o1t.forEach(t),bmr=r(nxe," (RoBERTa model)"),nxe.forEach(t),Fmr=i(oe),C7=n(oe,"LI",{});var sxe=s(C7);c2e=n(sxe,"STRONG",{});var r1t=s(c2e);vmr=r(r1t,"roformer"),r1t.forEach(t),Tmr=r(sxe," \u2014 "),RX=n(sxe,"A",{href:!0});var t1t=s(RX);Mmr=r(t1t,"TFRoFormerForMaskedLM"),t1t.forEach(t),Emr=r(sxe," (RoFormer model)"),sxe.forEach(t),Cmr=i(oe),w7=n(oe,"LI",{});var lxe=s(w7);f2e=n(lxe,"STRONG",{});var a1t=s(f2e);wmr=r(a1t,"tapas"),a1t.forEach(t),Amr=r(lxe," \u2014 "),BX=n(lxe,"A",{href:!0});var n1t=s(BX);ymr=r(n1t,"TFTapasForMaskedLM"),n1t.forEach(t),Lmr=r(lxe," (TAPAS model)"),lxe.forEach(t),xmr=i(oe),A7=n(oe,"LI",{});var ixe=s(A7);m2e=n(ixe,"STRONG",{});var s1t=s(m2e);kmr=r(s1t,"xlm"),s1t.forEach(t),Smr=r(ixe," \u2014 "),PX=n(ixe,"A",{href:!0});var l1t=s(PX);Rmr=r(l1t,"TFXLMWithLMHeadModel"),l1t.forEach(t),Bmr=r(ixe," (XLM model)"),ixe.forEach(t),Pmr=i(oe),y7=n(oe,"LI",{});var dxe=s(y7);g2e=n(dxe,"STRONG",{});var i1t=s(g2e);$mr=r(i1t,"xlm-roberta"),i1t.forEach(t),Imr=r(dxe," \u2014 "),$X=n(dxe,"A",{href:!0});var d1t=s($X);qmr=r(d1t,"TFXLMRobertaForMaskedLM"),d1t.forEach(t),Nmr=r(dxe," (XLM-RoBERTa model)"),dxe.forEach(t),oe.forEach(t),jmr=i(Fa),h2e=n(Fa,"P",{});var c1t=s(h2e);Dmr=r(c1t,"Examples:"),c1t.forEach(t),Gmr=i(Fa),m(QA.$$.fragment,Fa),Fa.forEach(t),Hl.forEach(t),dPe=i(c),xc=n(c,"H2",{class:!0});var vIe=s(xc);L7=n(vIe,"A",{id:!0,class:!0,href:!0});var f1t=s(L7);p2e=n(f1t,"SPAN",{});var m1t=s(p2e);m(WA.$$.fragment,m1t),m1t.forEach(t),f1t.forEach(t),Omr=i(vIe),_2e=n(vIe,"SPAN",{});var g1t=s(_2e);Vmr=r(g1t,"TFAutoModelForSeq2SeqLM"),g1t.forEach(t),vIe.forEach(t),cPe=i(c),Cr=n(c,"DIV",{class:!0});var Jl=s(Cr);m(HA.$$.fragment,Jl),Xmr=i(Jl),kc=n(Jl,"P",{});var BJ=s(kc);zmr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IX=n(BJ,"A",{href:!0});var h1t=s(IX);Qmr=r(h1t,"from_pretrained()"),h1t.forEach(t),Wmr=r(BJ," class method or the "),qX=n(BJ,"A",{href:!0});var p1t=s(qX);Hmr=r(p1t,"from_config()"),p1t.forEach(t),Umr=r(BJ,` class
method.`),BJ.forEach(t),Jmr=i(Jl),UA=n(Jl,"P",{});var TIe=s(UA);Ymr=r(TIe,"This class cannot be instantiated directly using "),u2e=n(TIe,"CODE",{});var _1t=s(u2e);Kmr=r(_1t,"__init__()"),_1t.forEach(t),Zmr=r(TIe," (throws an error)."),TIe.forEach(t),egr=i(Jl),bt=n(Jl,"DIV",{class:!0});var Yl=s(bt);m(JA.$$.fragment,Yl),ogr=i(Yl),b2e=n(Yl,"P",{});var u1t=s(b2e);rgr=r(u1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),u1t.forEach(t),tgr=i(Yl),Sc=n(Yl,"P",{});var PJ=s(Sc);agr=r(PJ,`Note:
Loading a model from its configuration file does `),F2e=n(PJ,"STRONG",{});var b1t=s(F2e);ngr=r(b1t,"not"),b1t.forEach(t),sgr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=n(PJ,"A",{href:!0});var F1t=s(NX);lgr=r(F1t,"from_pretrained()"),F1t.forEach(t),igr=r(PJ," to load the model weights."),PJ.forEach(t),dgr=i(Yl),v2e=n(Yl,"P",{});var v1t=s(v2e);cgr=r(v1t,"Examples:"),v1t.forEach(t),fgr=i(Yl),m(YA.$$.fragment,Yl),Yl.forEach(t),mgr=i(Jl),Fo=n(Jl,"DIV",{class:!0});var va=s(Fo);m(KA.$$.fragment,va),ggr=i(va),T2e=n(va,"P",{});var T1t=s(T2e);hgr=r(T1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),T1t.forEach(t),pgr=i(va),Tn=n(va,"P",{});var f5=s(Tn);_gr=r(f5,"The model class to instantiate is selected based on the "),M2e=n(f5,"CODE",{});var M1t=s(M2e);ugr=r(M1t,"model_type"),M1t.forEach(t),bgr=r(f5,` property of the config object (either
passed as an argument or loaded from `),E2e=n(f5,"CODE",{});var E1t=s(E2e);Fgr=r(E1t,"pretrained_model_name_or_path"),E1t.forEach(t),vgr=r(f5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=n(f5,"CODE",{});var C1t=s(C2e);Tgr=r(C1t,"pretrained_model_name_or_path"),C1t.forEach(t),Mgr=r(f5,":"),f5.forEach(t),Egr=i(va),be=n(va,"UL",{});var we=s(be);x7=n(we,"LI",{});var cxe=s(x7);w2e=n(cxe,"STRONG",{});var w1t=s(w2e);Cgr=r(w1t,"bart"),w1t.forEach(t),wgr=r(cxe," \u2014 "),jX=n(cxe,"A",{href:!0});var A1t=s(jX);Agr=r(A1t,"TFBartForConditionalGeneration"),A1t.forEach(t),ygr=r(cxe," (BART model)"),cxe.forEach(t),Lgr=i(we),k7=n(we,"LI",{});var fxe=s(k7);A2e=n(fxe,"STRONG",{});var y1t=s(A2e);xgr=r(y1t,"blenderbot"),y1t.forEach(t),kgr=r(fxe," \u2014 "),DX=n(fxe,"A",{href:!0});var L1t=s(DX);Sgr=r(L1t,"TFBlenderbotForConditionalGeneration"),L1t.forEach(t),Rgr=r(fxe," (Blenderbot model)"),fxe.forEach(t),Bgr=i(we),S7=n(we,"LI",{});var mxe=s(S7);y2e=n(mxe,"STRONG",{});var x1t=s(y2e);Pgr=r(x1t,"blenderbot-small"),x1t.forEach(t),$gr=r(mxe," \u2014 "),GX=n(mxe,"A",{href:!0});var k1t=s(GX);Igr=r(k1t,"TFBlenderbotSmallForConditionalGeneration"),k1t.forEach(t),qgr=r(mxe," (BlenderbotSmall model)"),mxe.forEach(t),Ngr=i(we),R7=n(we,"LI",{});var gxe=s(R7);L2e=n(gxe,"STRONG",{});var S1t=s(L2e);jgr=r(S1t,"encoder-decoder"),S1t.forEach(t),Dgr=r(gxe," \u2014 "),OX=n(gxe,"A",{href:!0});var R1t=s(OX);Ggr=r(R1t,"TFEncoderDecoderModel"),R1t.forEach(t),Ogr=r(gxe," (Encoder decoder model)"),gxe.forEach(t),Vgr=i(we),B7=n(we,"LI",{});var hxe=s(B7);x2e=n(hxe,"STRONG",{});var B1t=s(x2e);Xgr=r(B1t,"led"),B1t.forEach(t),zgr=r(hxe," \u2014 "),VX=n(hxe,"A",{href:!0});var P1t=s(VX);Qgr=r(P1t,"TFLEDForConditionalGeneration"),P1t.forEach(t),Wgr=r(hxe," (LED model)"),hxe.forEach(t),Hgr=i(we),P7=n(we,"LI",{});var pxe=s(P7);k2e=n(pxe,"STRONG",{});var $1t=s(k2e);Ugr=r($1t,"marian"),$1t.forEach(t),Jgr=r(pxe," \u2014 "),XX=n(pxe,"A",{href:!0});var I1t=s(XX);Ygr=r(I1t,"TFMarianMTModel"),I1t.forEach(t),Kgr=r(pxe," (Marian model)"),pxe.forEach(t),Zgr=i(we),$7=n(we,"LI",{});var _xe=s($7);S2e=n(_xe,"STRONG",{});var q1t=s(S2e);ehr=r(q1t,"mbart"),q1t.forEach(t),ohr=r(_xe," \u2014 "),zX=n(_xe,"A",{href:!0});var N1t=s(zX);rhr=r(N1t,"TFMBartForConditionalGeneration"),N1t.forEach(t),thr=r(_xe," (mBART model)"),_xe.forEach(t),ahr=i(we),I7=n(we,"LI",{});var uxe=s(I7);R2e=n(uxe,"STRONG",{});var j1t=s(R2e);nhr=r(j1t,"mt5"),j1t.forEach(t),shr=r(uxe," \u2014 "),QX=n(uxe,"A",{href:!0});var D1t=s(QX);lhr=r(D1t,"TFMT5ForConditionalGeneration"),D1t.forEach(t),ihr=r(uxe," (mT5 model)"),uxe.forEach(t),dhr=i(we),q7=n(we,"LI",{});var bxe=s(q7);B2e=n(bxe,"STRONG",{});var G1t=s(B2e);chr=r(G1t,"pegasus"),G1t.forEach(t),fhr=r(bxe," \u2014 "),WX=n(bxe,"A",{href:!0});var O1t=s(WX);mhr=r(O1t,"TFPegasusForConditionalGeneration"),O1t.forEach(t),ghr=r(bxe," (Pegasus model)"),bxe.forEach(t),hhr=i(we),N7=n(we,"LI",{});var Fxe=s(N7);P2e=n(Fxe,"STRONG",{});var V1t=s(P2e);phr=r(V1t,"t5"),V1t.forEach(t),_hr=r(Fxe," \u2014 "),HX=n(Fxe,"A",{href:!0});var X1t=s(HX);uhr=r(X1t,"TFT5ForConditionalGeneration"),X1t.forEach(t),bhr=r(Fxe," (T5 model)"),Fxe.forEach(t),we.forEach(t),Fhr=i(va),$2e=n(va,"P",{});var z1t=s($2e);vhr=r(z1t,"Examples:"),z1t.forEach(t),Thr=i(va),m(ZA.$$.fragment,va),va.forEach(t),Jl.forEach(t),fPe=i(c),Rc=n(c,"H2",{class:!0});var MIe=s(Rc);j7=n(MIe,"A",{id:!0,class:!0,href:!0});var Q1t=s(j7);I2e=n(Q1t,"SPAN",{});var W1t=s(I2e);m(e0.$$.fragment,W1t),W1t.forEach(t),Q1t.forEach(t),Mhr=i(MIe),q2e=n(MIe,"SPAN",{});var H1t=s(q2e);Ehr=r(H1t,"TFAutoModelForSequenceClassification"),H1t.forEach(t),MIe.forEach(t),mPe=i(c),wr=n(c,"DIV",{class:!0});var Kl=s(wr);m(o0.$$.fragment,Kl),Chr=i(Kl),Bc=n(Kl,"P",{});var $J=s(Bc);whr=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UX=n($J,"A",{href:!0});var U1t=s(UX);Ahr=r(U1t,"from_pretrained()"),U1t.forEach(t),yhr=r($J," class method or the "),JX=n($J,"A",{href:!0});var J1t=s(JX);Lhr=r(J1t,"from_config()"),J1t.forEach(t),xhr=r($J,` class
method.`),$J.forEach(t),khr=i(Kl),r0=n(Kl,"P",{});var EIe=s(r0);Shr=r(EIe,"This class cannot be instantiated directly using "),N2e=n(EIe,"CODE",{});var Y1t=s(N2e);Rhr=r(Y1t,"__init__()"),Y1t.forEach(t),Bhr=r(EIe," (throws an error)."),EIe.forEach(t),Phr=i(Kl),Ft=n(Kl,"DIV",{class:!0});var Zl=s(Ft);m(t0.$$.fragment,Zl),$hr=i(Zl),j2e=n(Zl,"P",{});var K1t=s(j2e);Ihr=r(K1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),K1t.forEach(t),qhr=i(Zl),Pc=n(Zl,"P",{});var IJ=s(Pc);Nhr=r(IJ,`Note:
Loading a model from its configuration file does `),D2e=n(IJ,"STRONG",{});var Z1t=s(D2e);jhr=r(Z1t,"not"),Z1t.forEach(t),Dhr=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=n(IJ,"A",{href:!0});var ebt=s(YX);Ghr=r(ebt,"from_pretrained()"),ebt.forEach(t),Ohr=r(IJ," to load the model weights."),IJ.forEach(t),Vhr=i(Zl),G2e=n(Zl,"P",{});var obt=s(G2e);Xhr=r(obt,"Examples:"),obt.forEach(t),zhr=i(Zl),m(a0.$$.fragment,Zl),Zl.forEach(t),Qhr=i(Kl),vo=n(Kl,"DIV",{class:!0});var Ta=s(vo);m(n0.$$.fragment,Ta),Whr=i(Ta),O2e=n(Ta,"P",{});var rbt=s(O2e);Hhr=r(rbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rbt.forEach(t),Uhr=i(Ta),Mn=n(Ta,"P",{});var m5=s(Mn);Jhr=r(m5,"The model class to instantiate is selected based on the "),V2e=n(m5,"CODE",{});var tbt=s(V2e);Yhr=r(tbt,"model_type"),tbt.forEach(t),Khr=r(m5,` property of the config object (either
passed as an argument or loaded from `),X2e=n(m5,"CODE",{});var abt=s(X2e);Zhr=r(abt,"pretrained_model_name_or_path"),abt.forEach(t),epr=r(m5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=n(m5,"CODE",{});var nbt=s(z2e);opr=r(nbt,"pretrained_model_name_or_path"),nbt.forEach(t),rpr=r(m5,":"),m5.forEach(t),tpr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);D7=n(Q,"LI",{});var vxe=s(D7);Q2e=n(vxe,"STRONG",{});var sbt=s(Q2e);apr=r(sbt,"albert"),sbt.forEach(t),npr=r(vxe," \u2014 "),KX=n(vxe,"A",{href:!0});var lbt=s(KX);spr=r(lbt,"TFAlbertForSequenceClassification"),lbt.forEach(t),lpr=r(vxe," (ALBERT model)"),vxe.forEach(t),ipr=i(Q),G7=n(Q,"LI",{});var Txe=s(G7);W2e=n(Txe,"STRONG",{});var ibt=s(W2e);dpr=r(ibt,"bert"),ibt.forEach(t),cpr=r(Txe," \u2014 "),ZX=n(Txe,"A",{href:!0});var dbt=s(ZX);fpr=r(dbt,"TFBertForSequenceClassification"),dbt.forEach(t),mpr=r(Txe," (BERT model)"),Txe.forEach(t),gpr=i(Q),O7=n(Q,"LI",{});var Mxe=s(O7);H2e=n(Mxe,"STRONG",{});var cbt=s(H2e);hpr=r(cbt,"camembert"),cbt.forEach(t),ppr=r(Mxe," \u2014 "),ez=n(Mxe,"A",{href:!0});var fbt=s(ez);_pr=r(fbt,"TFCamembertForSequenceClassification"),fbt.forEach(t),upr=r(Mxe," (CamemBERT model)"),Mxe.forEach(t),bpr=i(Q),V7=n(Q,"LI",{});var Exe=s(V7);U2e=n(Exe,"STRONG",{});var mbt=s(U2e);Fpr=r(mbt,"convbert"),mbt.forEach(t),vpr=r(Exe," \u2014 "),oz=n(Exe,"A",{href:!0});var gbt=s(oz);Tpr=r(gbt,"TFConvBertForSequenceClassification"),gbt.forEach(t),Mpr=r(Exe," (ConvBERT model)"),Exe.forEach(t),Epr=i(Q),X7=n(Q,"LI",{});var Cxe=s(X7);J2e=n(Cxe,"STRONG",{});var hbt=s(J2e);Cpr=r(hbt,"ctrl"),hbt.forEach(t),wpr=r(Cxe," \u2014 "),rz=n(Cxe,"A",{href:!0});var pbt=s(rz);Apr=r(pbt,"TFCTRLForSequenceClassification"),pbt.forEach(t),ypr=r(Cxe," (CTRL model)"),Cxe.forEach(t),Lpr=i(Q),z7=n(Q,"LI",{});var wxe=s(z7);Y2e=n(wxe,"STRONG",{});var _bt=s(Y2e);xpr=r(_bt,"deberta"),_bt.forEach(t),kpr=r(wxe," \u2014 "),tz=n(wxe,"A",{href:!0});var ubt=s(tz);Spr=r(ubt,"TFDebertaForSequenceClassification"),ubt.forEach(t),Rpr=r(wxe," (DeBERTa model)"),wxe.forEach(t),Bpr=i(Q),Q7=n(Q,"LI",{});var Axe=s(Q7);K2e=n(Axe,"STRONG",{});var bbt=s(K2e);Ppr=r(bbt,"deberta-v2"),bbt.forEach(t),$pr=r(Axe," \u2014 "),az=n(Axe,"A",{href:!0});var Fbt=s(az);Ipr=r(Fbt,"TFDebertaV2ForSequenceClassification"),Fbt.forEach(t),qpr=r(Axe," (DeBERTa-v2 model)"),Axe.forEach(t),Npr=i(Q),W7=n(Q,"LI",{});var yxe=s(W7);Z2e=n(yxe,"STRONG",{});var vbt=s(Z2e);jpr=r(vbt,"distilbert"),vbt.forEach(t),Dpr=r(yxe," \u2014 "),nz=n(yxe,"A",{href:!0});var Tbt=s(nz);Gpr=r(Tbt,"TFDistilBertForSequenceClassification"),Tbt.forEach(t),Opr=r(yxe," (DistilBERT model)"),yxe.forEach(t),Vpr=i(Q),H7=n(Q,"LI",{});var Lxe=s(H7);e1e=n(Lxe,"STRONG",{});var Mbt=s(e1e);Xpr=r(Mbt,"electra"),Mbt.forEach(t),zpr=r(Lxe," \u2014 "),sz=n(Lxe,"A",{href:!0});var Ebt=s(sz);Qpr=r(Ebt,"TFElectraForSequenceClassification"),Ebt.forEach(t),Wpr=r(Lxe," (ELECTRA model)"),Lxe.forEach(t),Hpr=i(Q),U7=n(Q,"LI",{});var xxe=s(U7);o1e=n(xxe,"STRONG",{});var Cbt=s(o1e);Upr=r(Cbt,"flaubert"),Cbt.forEach(t),Jpr=r(xxe," \u2014 "),lz=n(xxe,"A",{href:!0});var wbt=s(lz);Ypr=r(wbt,"TFFlaubertForSequenceClassification"),wbt.forEach(t),Kpr=r(xxe," (FlauBERT model)"),xxe.forEach(t),Zpr=i(Q),J7=n(Q,"LI",{});var kxe=s(J7);r1e=n(kxe,"STRONG",{});var Abt=s(r1e);e_r=r(Abt,"funnel"),Abt.forEach(t),o_r=r(kxe," \u2014 "),iz=n(kxe,"A",{href:!0});var ybt=s(iz);r_r=r(ybt,"TFFunnelForSequenceClassification"),ybt.forEach(t),t_r=r(kxe," (Funnel Transformer model)"),kxe.forEach(t),a_r=i(Q),Y7=n(Q,"LI",{});var Sxe=s(Y7);t1e=n(Sxe,"STRONG",{});var Lbt=s(t1e);n_r=r(Lbt,"gpt2"),Lbt.forEach(t),s_r=r(Sxe," \u2014 "),dz=n(Sxe,"A",{href:!0});var xbt=s(dz);l_r=r(xbt,"TFGPT2ForSequenceClassification"),xbt.forEach(t),i_r=r(Sxe," (OpenAI GPT-2 model)"),Sxe.forEach(t),d_r=i(Q),K7=n(Q,"LI",{});var Rxe=s(K7);a1e=n(Rxe,"STRONG",{});var kbt=s(a1e);c_r=r(kbt,"gptj"),kbt.forEach(t),f_r=r(Rxe," \u2014 "),cz=n(Rxe,"A",{href:!0});var Sbt=s(cz);m_r=r(Sbt,"TFGPTJForSequenceClassification"),Sbt.forEach(t),g_r=r(Rxe," (GPT-J model)"),Rxe.forEach(t),h_r=i(Q),Z7=n(Q,"LI",{});var Bxe=s(Z7);n1e=n(Bxe,"STRONG",{});var Rbt=s(n1e);p_r=r(Rbt,"layoutlm"),Rbt.forEach(t),__r=r(Bxe," \u2014 "),fz=n(Bxe,"A",{href:!0});var Bbt=s(fz);u_r=r(Bbt,"TFLayoutLMForSequenceClassification"),Bbt.forEach(t),b_r=r(Bxe," (LayoutLM model)"),Bxe.forEach(t),F_r=i(Q),e9=n(Q,"LI",{});var Pxe=s(e9);s1e=n(Pxe,"STRONG",{});var Pbt=s(s1e);v_r=r(Pbt,"longformer"),Pbt.forEach(t),T_r=r(Pxe," \u2014 "),mz=n(Pxe,"A",{href:!0});var $bt=s(mz);M_r=r($bt,"TFLongformerForSequenceClassification"),$bt.forEach(t),E_r=r(Pxe," (Longformer model)"),Pxe.forEach(t),C_r=i(Q),o9=n(Q,"LI",{});var $xe=s(o9);l1e=n($xe,"STRONG",{});var Ibt=s(l1e);w_r=r(Ibt,"mobilebert"),Ibt.forEach(t),A_r=r($xe," \u2014 "),gz=n($xe,"A",{href:!0});var qbt=s(gz);y_r=r(qbt,"TFMobileBertForSequenceClassification"),qbt.forEach(t),L_r=r($xe," (MobileBERT model)"),$xe.forEach(t),x_r=i(Q),r9=n(Q,"LI",{});var Ixe=s(r9);i1e=n(Ixe,"STRONG",{});var Nbt=s(i1e);k_r=r(Nbt,"mpnet"),Nbt.forEach(t),S_r=r(Ixe," \u2014 "),hz=n(Ixe,"A",{href:!0});var jbt=s(hz);R_r=r(jbt,"TFMPNetForSequenceClassification"),jbt.forEach(t),B_r=r(Ixe," (MPNet model)"),Ixe.forEach(t),P_r=i(Q),t9=n(Q,"LI",{});var qxe=s(t9);d1e=n(qxe,"STRONG",{});var Dbt=s(d1e);$_r=r(Dbt,"openai-gpt"),Dbt.forEach(t),I_r=r(qxe," \u2014 "),pz=n(qxe,"A",{href:!0});var Gbt=s(pz);q_r=r(Gbt,"TFOpenAIGPTForSequenceClassification"),Gbt.forEach(t),N_r=r(qxe," (OpenAI GPT model)"),qxe.forEach(t),j_r=i(Q),a9=n(Q,"LI",{});var Nxe=s(a9);c1e=n(Nxe,"STRONG",{});var Obt=s(c1e);D_r=r(Obt,"rembert"),Obt.forEach(t),G_r=r(Nxe," \u2014 "),_z=n(Nxe,"A",{href:!0});var Vbt=s(_z);O_r=r(Vbt,"TFRemBertForSequenceClassification"),Vbt.forEach(t),V_r=r(Nxe," (RemBERT model)"),Nxe.forEach(t),X_r=i(Q),n9=n(Q,"LI",{});var jxe=s(n9);f1e=n(jxe,"STRONG",{});var Xbt=s(f1e);z_r=r(Xbt,"roberta"),Xbt.forEach(t),Q_r=r(jxe," \u2014 "),uz=n(jxe,"A",{href:!0});var zbt=s(uz);W_r=r(zbt,"TFRobertaForSequenceClassification"),zbt.forEach(t),H_r=r(jxe," (RoBERTa model)"),jxe.forEach(t),U_r=i(Q),s9=n(Q,"LI",{});var Dxe=s(s9);m1e=n(Dxe,"STRONG",{});var Qbt=s(m1e);J_r=r(Qbt,"roformer"),Qbt.forEach(t),Y_r=r(Dxe," \u2014 "),bz=n(Dxe,"A",{href:!0});var Wbt=s(bz);K_r=r(Wbt,"TFRoFormerForSequenceClassification"),Wbt.forEach(t),Z_r=r(Dxe," (RoFormer model)"),Dxe.forEach(t),eur=i(Q),l9=n(Q,"LI",{});var Gxe=s(l9);g1e=n(Gxe,"STRONG",{});var Hbt=s(g1e);our=r(Hbt,"tapas"),Hbt.forEach(t),rur=r(Gxe," \u2014 "),Fz=n(Gxe,"A",{href:!0});var Ubt=s(Fz);tur=r(Ubt,"TFTapasForSequenceClassification"),Ubt.forEach(t),aur=r(Gxe," (TAPAS model)"),Gxe.forEach(t),nur=i(Q),i9=n(Q,"LI",{});var Oxe=s(i9);h1e=n(Oxe,"STRONG",{});var Jbt=s(h1e);sur=r(Jbt,"transfo-xl"),Jbt.forEach(t),lur=r(Oxe," \u2014 "),vz=n(Oxe,"A",{href:!0});var Ybt=s(vz);iur=r(Ybt,"TFTransfoXLForSequenceClassification"),Ybt.forEach(t),dur=r(Oxe," (Transformer-XL model)"),Oxe.forEach(t),cur=i(Q),d9=n(Q,"LI",{});var Vxe=s(d9);p1e=n(Vxe,"STRONG",{});var Kbt=s(p1e);fur=r(Kbt,"xlm"),Kbt.forEach(t),mur=r(Vxe," \u2014 "),Tz=n(Vxe,"A",{href:!0});var Zbt=s(Tz);gur=r(Zbt,"TFXLMForSequenceClassification"),Zbt.forEach(t),hur=r(Vxe," (XLM model)"),Vxe.forEach(t),pur=i(Q),c9=n(Q,"LI",{});var Xxe=s(c9);_1e=n(Xxe,"STRONG",{});var e6t=s(_1e);_ur=r(e6t,"xlm-roberta"),e6t.forEach(t),uur=r(Xxe," \u2014 "),Mz=n(Xxe,"A",{href:!0});var o6t=s(Mz);bur=r(o6t,"TFXLMRobertaForSequenceClassification"),o6t.forEach(t),Fur=r(Xxe," (XLM-RoBERTa model)"),Xxe.forEach(t),vur=i(Q),f9=n(Q,"LI",{});var zxe=s(f9);u1e=n(zxe,"STRONG",{});var r6t=s(u1e);Tur=r(r6t,"xlnet"),r6t.forEach(t),Mur=r(zxe," \u2014 "),Ez=n(zxe,"A",{href:!0});var t6t=s(Ez);Eur=r(t6t,"TFXLNetForSequenceClassification"),t6t.forEach(t),Cur=r(zxe," (XLNet model)"),zxe.forEach(t),Q.forEach(t),wur=i(Ta),b1e=n(Ta,"P",{});var a6t=s(b1e);Aur=r(a6t,"Examples:"),a6t.forEach(t),yur=i(Ta),m(s0.$$.fragment,Ta),Ta.forEach(t),Kl.forEach(t),gPe=i(c),$c=n(c,"H2",{class:!0});var CIe=s($c);m9=n(CIe,"A",{id:!0,class:!0,href:!0});var n6t=s(m9);F1e=n(n6t,"SPAN",{});var s6t=s(F1e);m(l0.$$.fragment,s6t),s6t.forEach(t),n6t.forEach(t),Lur=i(CIe),v1e=n(CIe,"SPAN",{});var l6t=s(v1e);xur=r(l6t,"TFAutoModelForMultipleChoice"),l6t.forEach(t),CIe.forEach(t),hPe=i(c),Ar=n(c,"DIV",{class:!0});var ei=s(Ar);m(i0.$$.fragment,ei),kur=i(ei),Ic=n(ei,"P",{});var qJ=s(Ic);Sur=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Cz=n(qJ,"A",{href:!0});var i6t=s(Cz);Rur=r(i6t,"from_pretrained()"),i6t.forEach(t),Bur=r(qJ," class method or the "),wz=n(qJ,"A",{href:!0});var d6t=s(wz);Pur=r(d6t,"from_config()"),d6t.forEach(t),$ur=r(qJ,` class
method.`),qJ.forEach(t),Iur=i(ei),d0=n(ei,"P",{});var wIe=s(d0);qur=r(wIe,"This class cannot be instantiated directly using "),T1e=n(wIe,"CODE",{});var c6t=s(T1e);Nur=r(c6t,"__init__()"),c6t.forEach(t),jur=r(wIe," (throws an error)."),wIe.forEach(t),Dur=i(ei),vt=n(ei,"DIV",{class:!0});var oi=s(vt);m(c0.$$.fragment,oi),Gur=i(oi),M1e=n(oi,"P",{});var f6t=s(M1e);Our=r(f6t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),f6t.forEach(t),Vur=i(oi),qc=n(oi,"P",{});var NJ=s(qc);Xur=r(NJ,`Note:
Loading a model from its configuration file does `),E1e=n(NJ,"STRONG",{});var m6t=s(E1e);zur=r(m6t,"not"),m6t.forEach(t),Qur=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(NJ,"A",{href:!0});var g6t=s(Az);Wur=r(g6t,"from_pretrained()"),g6t.forEach(t),Hur=r(NJ," to load the model weights."),NJ.forEach(t),Uur=i(oi),C1e=n(oi,"P",{});var h6t=s(C1e);Jur=r(h6t,"Examples:"),h6t.forEach(t),Yur=i(oi),m(f0.$$.fragment,oi),oi.forEach(t),Kur=i(ei),To=n(ei,"DIV",{class:!0});var Ma=s(To);m(m0.$$.fragment,Ma),Zur=i(Ma),w1e=n(Ma,"P",{});var p6t=s(w1e);e2r=r(p6t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),p6t.forEach(t),o2r=i(Ma),En=n(Ma,"P",{});var g5=s(En);r2r=r(g5,"The model class to instantiate is selected based on the "),A1e=n(g5,"CODE",{});var _6t=s(A1e);t2r=r(_6t,"model_type"),_6t.forEach(t),a2r=r(g5,` property of the config object (either
passed as an argument or loaded from `),y1e=n(g5,"CODE",{});var u6t=s(y1e);n2r=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),s2r=r(g5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=n(g5,"CODE",{});var b6t=s(L1e);l2r=r(b6t,"pretrained_model_name_or_path"),b6t.forEach(t),i2r=r(g5,":"),g5.forEach(t),d2r=i(Ma),se=n(Ma,"UL",{});var ie=s(se);g9=n(ie,"LI",{});var Qxe=s(g9);x1e=n(Qxe,"STRONG",{});var F6t=s(x1e);c2r=r(F6t,"albert"),F6t.forEach(t),f2r=r(Qxe," \u2014 "),yz=n(Qxe,"A",{href:!0});var v6t=s(yz);m2r=r(v6t,"TFAlbertForMultipleChoice"),v6t.forEach(t),g2r=r(Qxe," (ALBERT model)"),Qxe.forEach(t),h2r=i(ie),h9=n(ie,"LI",{});var Wxe=s(h9);k1e=n(Wxe,"STRONG",{});var T6t=s(k1e);p2r=r(T6t,"bert"),T6t.forEach(t),_2r=r(Wxe," \u2014 "),Lz=n(Wxe,"A",{href:!0});var M6t=s(Lz);u2r=r(M6t,"TFBertForMultipleChoice"),M6t.forEach(t),b2r=r(Wxe," (BERT model)"),Wxe.forEach(t),F2r=i(ie),p9=n(ie,"LI",{});var Hxe=s(p9);S1e=n(Hxe,"STRONG",{});var E6t=s(S1e);v2r=r(E6t,"camembert"),E6t.forEach(t),T2r=r(Hxe," \u2014 "),xz=n(Hxe,"A",{href:!0});var C6t=s(xz);M2r=r(C6t,"TFCamembertForMultipleChoice"),C6t.forEach(t),E2r=r(Hxe," (CamemBERT model)"),Hxe.forEach(t),C2r=i(ie),_9=n(ie,"LI",{});var Uxe=s(_9);R1e=n(Uxe,"STRONG",{});var w6t=s(R1e);w2r=r(w6t,"convbert"),w6t.forEach(t),A2r=r(Uxe," \u2014 "),kz=n(Uxe,"A",{href:!0});var A6t=s(kz);y2r=r(A6t,"TFConvBertForMultipleChoice"),A6t.forEach(t),L2r=r(Uxe," (ConvBERT model)"),Uxe.forEach(t),x2r=i(ie),u9=n(ie,"LI",{});var Jxe=s(u9);B1e=n(Jxe,"STRONG",{});var y6t=s(B1e);k2r=r(y6t,"distilbert"),y6t.forEach(t),S2r=r(Jxe," \u2014 "),Sz=n(Jxe,"A",{href:!0});var L6t=s(Sz);R2r=r(L6t,"TFDistilBertForMultipleChoice"),L6t.forEach(t),B2r=r(Jxe," (DistilBERT model)"),Jxe.forEach(t),P2r=i(ie),b9=n(ie,"LI",{});var Yxe=s(b9);P1e=n(Yxe,"STRONG",{});var x6t=s(P1e);$2r=r(x6t,"electra"),x6t.forEach(t),I2r=r(Yxe," \u2014 "),Rz=n(Yxe,"A",{href:!0});var k6t=s(Rz);q2r=r(k6t,"TFElectraForMultipleChoice"),k6t.forEach(t),N2r=r(Yxe," (ELECTRA model)"),Yxe.forEach(t),j2r=i(ie),F9=n(ie,"LI",{});var Kxe=s(F9);$1e=n(Kxe,"STRONG",{});var S6t=s($1e);D2r=r(S6t,"flaubert"),S6t.forEach(t),G2r=r(Kxe," \u2014 "),Bz=n(Kxe,"A",{href:!0});var R6t=s(Bz);O2r=r(R6t,"TFFlaubertForMultipleChoice"),R6t.forEach(t),V2r=r(Kxe," (FlauBERT model)"),Kxe.forEach(t),X2r=i(ie),v9=n(ie,"LI",{});var Zxe=s(v9);I1e=n(Zxe,"STRONG",{});var B6t=s(I1e);z2r=r(B6t,"funnel"),B6t.forEach(t),Q2r=r(Zxe," \u2014 "),Pz=n(Zxe,"A",{href:!0});var P6t=s(Pz);W2r=r(P6t,"TFFunnelForMultipleChoice"),P6t.forEach(t),H2r=r(Zxe," (Funnel Transformer model)"),Zxe.forEach(t),U2r=i(ie),T9=n(ie,"LI",{});var eke=s(T9);q1e=n(eke,"STRONG",{});var $6t=s(q1e);J2r=r($6t,"longformer"),$6t.forEach(t),Y2r=r(eke," \u2014 "),$z=n(eke,"A",{href:!0});var I6t=s($z);K2r=r(I6t,"TFLongformerForMultipleChoice"),I6t.forEach(t),Z2r=r(eke," (Longformer model)"),eke.forEach(t),e1r=i(ie),M9=n(ie,"LI",{});var oke=s(M9);N1e=n(oke,"STRONG",{});var q6t=s(N1e);o1r=r(q6t,"mobilebert"),q6t.forEach(t),r1r=r(oke," \u2014 "),Iz=n(oke,"A",{href:!0});var N6t=s(Iz);t1r=r(N6t,"TFMobileBertForMultipleChoice"),N6t.forEach(t),a1r=r(oke," (MobileBERT model)"),oke.forEach(t),n1r=i(ie),E9=n(ie,"LI",{});var rke=s(E9);j1e=n(rke,"STRONG",{});var j6t=s(j1e);s1r=r(j6t,"mpnet"),j6t.forEach(t),l1r=r(rke," \u2014 "),qz=n(rke,"A",{href:!0});var D6t=s(qz);i1r=r(D6t,"TFMPNetForMultipleChoice"),D6t.forEach(t),d1r=r(rke," (MPNet model)"),rke.forEach(t),c1r=i(ie),C9=n(ie,"LI",{});var tke=s(C9);D1e=n(tke,"STRONG",{});var G6t=s(D1e);f1r=r(G6t,"rembert"),G6t.forEach(t),m1r=r(tke," \u2014 "),Nz=n(tke,"A",{href:!0});var O6t=s(Nz);g1r=r(O6t,"TFRemBertForMultipleChoice"),O6t.forEach(t),h1r=r(tke," (RemBERT model)"),tke.forEach(t),p1r=i(ie),w9=n(ie,"LI",{});var ake=s(w9);G1e=n(ake,"STRONG",{});var V6t=s(G1e);_1r=r(V6t,"roberta"),V6t.forEach(t),u1r=r(ake," \u2014 "),jz=n(ake,"A",{href:!0});var X6t=s(jz);b1r=r(X6t,"TFRobertaForMultipleChoice"),X6t.forEach(t),F1r=r(ake," (RoBERTa model)"),ake.forEach(t),v1r=i(ie),A9=n(ie,"LI",{});var nke=s(A9);O1e=n(nke,"STRONG",{});var z6t=s(O1e);T1r=r(z6t,"roformer"),z6t.forEach(t),M1r=r(nke," \u2014 "),Dz=n(nke,"A",{href:!0});var Q6t=s(Dz);E1r=r(Q6t,"TFRoFormerForMultipleChoice"),Q6t.forEach(t),C1r=r(nke," (RoFormer model)"),nke.forEach(t),w1r=i(ie),y9=n(ie,"LI",{});var ske=s(y9);V1e=n(ske,"STRONG",{});var W6t=s(V1e);A1r=r(W6t,"xlm"),W6t.forEach(t),y1r=r(ske," \u2014 "),Gz=n(ske,"A",{href:!0});var H6t=s(Gz);L1r=r(H6t,"TFXLMForMultipleChoice"),H6t.forEach(t),x1r=r(ske," (XLM model)"),ske.forEach(t),k1r=i(ie),L9=n(ie,"LI",{});var lke=s(L9);X1e=n(lke,"STRONG",{});var U6t=s(X1e);S1r=r(U6t,"xlm-roberta"),U6t.forEach(t),R1r=r(lke," \u2014 "),Oz=n(lke,"A",{href:!0});var J6t=s(Oz);B1r=r(J6t,"TFXLMRobertaForMultipleChoice"),J6t.forEach(t),P1r=r(lke," (XLM-RoBERTa model)"),lke.forEach(t),$1r=i(ie),x9=n(ie,"LI",{});var ike=s(x9);z1e=n(ike,"STRONG",{});var Y6t=s(z1e);I1r=r(Y6t,"xlnet"),Y6t.forEach(t),q1r=r(ike," \u2014 "),Vz=n(ike,"A",{href:!0});var K6t=s(Vz);N1r=r(K6t,"TFXLNetForMultipleChoice"),K6t.forEach(t),j1r=r(ike," (XLNet model)"),ike.forEach(t),ie.forEach(t),D1r=i(Ma),Q1e=n(Ma,"P",{});var Z6t=s(Q1e);G1r=r(Z6t,"Examples:"),Z6t.forEach(t),O1r=i(Ma),m(g0.$$.fragment,Ma),Ma.forEach(t),ei.forEach(t),pPe=i(c),Nc=n(c,"H2",{class:!0});var AIe=s(Nc);k9=n(AIe,"A",{id:!0,class:!0,href:!0});var eFt=s(k9);W1e=n(eFt,"SPAN",{});var oFt=s(W1e);m(h0.$$.fragment,oFt),oFt.forEach(t),eFt.forEach(t),V1r=i(AIe),H1e=n(AIe,"SPAN",{});var rFt=s(H1e);X1r=r(rFt,"TFAutoModelForTableQuestionAnswering"),rFt.forEach(t),AIe.forEach(t),_Pe=i(c),yr=n(c,"DIV",{class:!0});var ri=s(yr);m(p0.$$.fragment,ri),z1r=i(ri),jc=n(ri,"P",{});var jJ=s(jc);Q1r=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Xz=n(jJ,"A",{href:!0});var tFt=s(Xz);W1r=r(tFt,"from_pretrained()"),tFt.forEach(t),H1r=r(jJ," class method or the "),zz=n(jJ,"A",{href:!0});var aFt=s(zz);U1r=r(aFt,"from_config()"),aFt.forEach(t),J1r=r(jJ,` class
method.`),jJ.forEach(t),Y1r=i(ri),_0=n(ri,"P",{});var yIe=s(_0);K1r=r(yIe,"This class cannot be instantiated directly using "),U1e=n(yIe,"CODE",{});var nFt=s(U1e);Z1r=r(nFt,"__init__()"),nFt.forEach(t),ebr=r(yIe," (throws an error)."),yIe.forEach(t),obr=i(ri),Tt=n(ri,"DIV",{class:!0});var ti=s(Tt);m(u0.$$.fragment,ti),rbr=i(ti),J1e=n(ti,"P",{});var sFt=s(J1e);tbr=r(sFt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),sFt.forEach(t),abr=i(ti),Dc=n(ti,"P",{});var DJ=s(Dc);nbr=r(DJ,`Note:
Loading a model from its configuration file does `),Y1e=n(DJ,"STRONG",{});var lFt=s(Y1e);sbr=r(lFt,"not"),lFt.forEach(t),lbr=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(DJ,"A",{href:!0});var iFt=s(Qz);ibr=r(iFt,"from_pretrained()"),iFt.forEach(t),dbr=r(DJ," to load the model weights."),DJ.forEach(t),cbr=i(ti),K1e=n(ti,"P",{});var dFt=s(K1e);fbr=r(dFt,"Examples:"),dFt.forEach(t),mbr=i(ti),m(b0.$$.fragment,ti),ti.forEach(t),gbr=i(ri),Mo=n(ri,"DIV",{class:!0});var Ea=s(Mo);m(F0.$$.fragment,Ea),hbr=i(Ea),Z1e=n(Ea,"P",{});var cFt=s(Z1e);pbr=r(cFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),cFt.forEach(t),_br=i(Ea),Cn=n(Ea,"P",{});var h5=s(Cn);ubr=r(h5,"The model class to instantiate is selected based on the "),ebe=n(h5,"CODE",{});var fFt=s(ebe);bbr=r(fFt,"model_type"),fFt.forEach(t),Fbr=r(h5,` property of the config object (either
passed as an argument or loaded from `),obe=n(h5,"CODE",{});var mFt=s(obe);vbr=r(mFt,"pretrained_model_name_or_path"),mFt.forEach(t),Tbr=r(h5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=n(h5,"CODE",{});var gFt=s(rbe);Mbr=r(gFt,"pretrained_model_name_or_path"),gFt.forEach(t),Ebr=r(h5,":"),h5.forEach(t),Cbr=i(Ea),tbe=n(Ea,"UL",{});var hFt=s(tbe);S9=n(hFt,"LI",{});var dke=s(S9);abe=n(dke,"STRONG",{});var pFt=s(abe);wbr=r(pFt,"tapas"),pFt.forEach(t),Abr=r(dke," \u2014 "),Wz=n(dke,"A",{href:!0});var _Ft=s(Wz);ybr=r(_Ft,"TFTapasForQuestionAnswering"),_Ft.forEach(t),Lbr=r(dke," (TAPAS model)"),dke.forEach(t),hFt.forEach(t),xbr=i(Ea),nbe=n(Ea,"P",{});var uFt=s(nbe);kbr=r(uFt,"Examples:"),uFt.forEach(t),Sbr=i(Ea),m(v0.$$.fragment,Ea),Ea.forEach(t),ri.forEach(t),uPe=i(c),Gc=n(c,"H2",{class:!0});var LIe=s(Gc);R9=n(LIe,"A",{id:!0,class:!0,href:!0});var bFt=s(R9);sbe=n(bFt,"SPAN",{});var FFt=s(sbe);m(T0.$$.fragment,FFt),FFt.forEach(t),bFt.forEach(t),Rbr=i(LIe),lbe=n(LIe,"SPAN",{});var vFt=s(lbe);Bbr=r(vFt,"TFAutoModelForTokenClassification"),vFt.forEach(t),LIe.forEach(t),bPe=i(c),Lr=n(c,"DIV",{class:!0});var ai=s(Lr);m(M0.$$.fragment,ai),Pbr=i(ai),Oc=n(ai,"P",{});var GJ=s(Oc);$br=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Hz=n(GJ,"A",{href:!0});var TFt=s(Hz);Ibr=r(TFt,"from_pretrained()"),TFt.forEach(t),qbr=r(GJ," class method or the "),Uz=n(GJ,"A",{href:!0});var MFt=s(Uz);Nbr=r(MFt,"from_config()"),MFt.forEach(t),jbr=r(GJ,` class
method.`),GJ.forEach(t),Dbr=i(ai),E0=n(ai,"P",{});var xIe=s(E0);Gbr=r(xIe,"This class cannot be instantiated directly using "),ibe=n(xIe,"CODE",{});var EFt=s(ibe);Obr=r(EFt,"__init__()"),EFt.forEach(t),Vbr=r(xIe," (throws an error)."),xIe.forEach(t),Xbr=i(ai),Mt=n(ai,"DIV",{class:!0});var ni=s(Mt);m(C0.$$.fragment,ni),zbr=i(ni),dbe=n(ni,"P",{});var CFt=s(dbe);Qbr=r(CFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CFt.forEach(t),Wbr=i(ni),Vc=n(ni,"P",{});var OJ=s(Vc);Hbr=r(OJ,`Note:
Loading a model from its configuration file does `),cbe=n(OJ,"STRONG",{});var wFt=s(cbe);Ubr=r(wFt,"not"),wFt.forEach(t),Jbr=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(OJ,"A",{href:!0});var AFt=s(Jz);Ybr=r(AFt,"from_pretrained()"),AFt.forEach(t),Kbr=r(OJ," to load the model weights."),OJ.forEach(t),Zbr=i(ni),fbe=n(ni,"P",{});var yFt=s(fbe);e6r=r(yFt,"Examples:"),yFt.forEach(t),o6r=i(ni),m(w0.$$.fragment,ni),ni.forEach(t),r6r=i(ai),Eo=n(ai,"DIV",{class:!0});var Ca=s(Eo);m(A0.$$.fragment,Ca),t6r=i(Ca),mbe=n(Ca,"P",{});var LFt=s(mbe);a6r=r(LFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),LFt.forEach(t),n6r=i(Ca),wn=n(Ca,"P",{});var p5=s(wn);s6r=r(p5,"The model class to instantiate is selected based on the "),gbe=n(p5,"CODE",{});var xFt=s(gbe);l6r=r(xFt,"model_type"),xFt.forEach(t),i6r=r(p5,` property of the config object (either
passed as an argument or loaded from `),hbe=n(p5,"CODE",{});var kFt=s(hbe);d6r=r(kFt,"pretrained_model_name_or_path"),kFt.forEach(t),c6r=r(p5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=n(p5,"CODE",{});var SFt=s(pbe);f6r=r(SFt,"pretrained_model_name_or_path"),SFt.forEach(t),m6r=r(p5,":"),p5.forEach(t),g6r=i(Ca),Y=n(Ca,"UL",{});var re=s(Y);B9=n(re,"LI",{});var cke=s(B9);_be=n(cke,"STRONG",{});var RFt=s(_be);h6r=r(RFt,"albert"),RFt.forEach(t),p6r=r(cke," \u2014 "),Yz=n(cke,"A",{href:!0});var BFt=s(Yz);_6r=r(BFt,"TFAlbertForTokenClassification"),BFt.forEach(t),u6r=r(cke," (ALBERT model)"),cke.forEach(t),b6r=i(re),P9=n(re,"LI",{});var fke=s(P9);ube=n(fke,"STRONG",{});var PFt=s(ube);F6r=r(PFt,"bert"),PFt.forEach(t),v6r=r(fke," \u2014 "),Kz=n(fke,"A",{href:!0});var $Ft=s(Kz);T6r=r($Ft,"TFBertForTokenClassification"),$Ft.forEach(t),M6r=r(fke," (BERT model)"),fke.forEach(t),E6r=i(re),$9=n(re,"LI",{});var mke=s($9);bbe=n(mke,"STRONG",{});var IFt=s(bbe);C6r=r(IFt,"camembert"),IFt.forEach(t),w6r=r(mke," \u2014 "),Zz=n(mke,"A",{href:!0});var qFt=s(Zz);A6r=r(qFt,"TFCamembertForTokenClassification"),qFt.forEach(t),y6r=r(mke," (CamemBERT model)"),mke.forEach(t),L6r=i(re),I9=n(re,"LI",{});var gke=s(I9);Fbe=n(gke,"STRONG",{});var NFt=s(Fbe);x6r=r(NFt,"convbert"),NFt.forEach(t),k6r=r(gke," \u2014 "),eQ=n(gke,"A",{href:!0});var jFt=s(eQ);S6r=r(jFt,"TFConvBertForTokenClassification"),jFt.forEach(t),R6r=r(gke," (ConvBERT model)"),gke.forEach(t),B6r=i(re),q9=n(re,"LI",{});var hke=s(q9);vbe=n(hke,"STRONG",{});var DFt=s(vbe);P6r=r(DFt,"deberta"),DFt.forEach(t),$6r=r(hke," \u2014 "),oQ=n(hke,"A",{href:!0});var GFt=s(oQ);I6r=r(GFt,"TFDebertaForTokenClassification"),GFt.forEach(t),q6r=r(hke," (DeBERTa model)"),hke.forEach(t),N6r=i(re),N9=n(re,"LI",{});var pke=s(N9);Tbe=n(pke,"STRONG",{});var OFt=s(Tbe);j6r=r(OFt,"deberta-v2"),OFt.forEach(t),D6r=r(pke," \u2014 "),rQ=n(pke,"A",{href:!0});var VFt=s(rQ);G6r=r(VFt,"TFDebertaV2ForTokenClassification"),VFt.forEach(t),O6r=r(pke," (DeBERTa-v2 model)"),pke.forEach(t),V6r=i(re),j9=n(re,"LI",{});var _ke=s(j9);Mbe=n(_ke,"STRONG",{});var XFt=s(Mbe);X6r=r(XFt,"distilbert"),XFt.forEach(t),z6r=r(_ke," \u2014 "),tQ=n(_ke,"A",{href:!0});var zFt=s(tQ);Q6r=r(zFt,"TFDistilBertForTokenClassification"),zFt.forEach(t),W6r=r(_ke," (DistilBERT model)"),_ke.forEach(t),H6r=i(re),D9=n(re,"LI",{});var uke=s(D9);Ebe=n(uke,"STRONG",{});var QFt=s(Ebe);U6r=r(QFt,"electra"),QFt.forEach(t),J6r=r(uke," \u2014 "),aQ=n(uke,"A",{href:!0});var WFt=s(aQ);Y6r=r(WFt,"TFElectraForTokenClassification"),WFt.forEach(t),K6r=r(uke," (ELECTRA model)"),uke.forEach(t),Z6r=i(re),G9=n(re,"LI",{});var bke=s(G9);Cbe=n(bke,"STRONG",{});var HFt=s(Cbe);eFr=r(HFt,"flaubert"),HFt.forEach(t),oFr=r(bke," \u2014 "),nQ=n(bke,"A",{href:!0});var UFt=s(nQ);rFr=r(UFt,"TFFlaubertForTokenClassification"),UFt.forEach(t),tFr=r(bke," (FlauBERT model)"),bke.forEach(t),aFr=i(re),O9=n(re,"LI",{});var Fke=s(O9);wbe=n(Fke,"STRONG",{});var JFt=s(wbe);nFr=r(JFt,"funnel"),JFt.forEach(t),sFr=r(Fke," \u2014 "),sQ=n(Fke,"A",{href:!0});var YFt=s(sQ);lFr=r(YFt,"TFFunnelForTokenClassification"),YFt.forEach(t),iFr=r(Fke," (Funnel Transformer model)"),Fke.forEach(t),dFr=i(re),V9=n(re,"LI",{});var vke=s(V9);Abe=n(vke,"STRONG",{});var KFt=s(Abe);cFr=r(KFt,"layoutlm"),KFt.forEach(t),fFr=r(vke," \u2014 "),lQ=n(vke,"A",{href:!0});var ZFt=s(lQ);mFr=r(ZFt,"TFLayoutLMForTokenClassification"),ZFt.forEach(t),gFr=r(vke," (LayoutLM model)"),vke.forEach(t),hFr=i(re),X9=n(re,"LI",{});var Tke=s(X9);ybe=n(Tke,"STRONG",{});var evt=s(ybe);pFr=r(evt,"longformer"),evt.forEach(t),_Fr=r(Tke," \u2014 "),iQ=n(Tke,"A",{href:!0});var ovt=s(iQ);uFr=r(ovt,"TFLongformerForTokenClassification"),ovt.forEach(t),bFr=r(Tke," (Longformer model)"),Tke.forEach(t),FFr=i(re),z9=n(re,"LI",{});var Mke=s(z9);Lbe=n(Mke,"STRONG",{});var rvt=s(Lbe);vFr=r(rvt,"mobilebert"),rvt.forEach(t),TFr=r(Mke," \u2014 "),dQ=n(Mke,"A",{href:!0});var tvt=s(dQ);MFr=r(tvt,"TFMobileBertForTokenClassification"),tvt.forEach(t),EFr=r(Mke," (MobileBERT model)"),Mke.forEach(t),CFr=i(re),Q9=n(re,"LI",{});var Eke=s(Q9);xbe=n(Eke,"STRONG",{});var avt=s(xbe);wFr=r(avt,"mpnet"),avt.forEach(t),AFr=r(Eke," \u2014 "),cQ=n(Eke,"A",{href:!0});var nvt=s(cQ);yFr=r(nvt,"TFMPNetForTokenClassification"),nvt.forEach(t),LFr=r(Eke," (MPNet model)"),Eke.forEach(t),xFr=i(re),W9=n(re,"LI",{});var Cke=s(W9);kbe=n(Cke,"STRONG",{});var svt=s(kbe);kFr=r(svt,"rembert"),svt.forEach(t),SFr=r(Cke," \u2014 "),fQ=n(Cke,"A",{href:!0});var lvt=s(fQ);RFr=r(lvt,"TFRemBertForTokenClassification"),lvt.forEach(t),BFr=r(Cke," (RemBERT model)"),Cke.forEach(t),PFr=i(re),H9=n(re,"LI",{});var wke=s(H9);Sbe=n(wke,"STRONG",{});var ivt=s(Sbe);$Fr=r(ivt,"roberta"),ivt.forEach(t),IFr=r(wke," \u2014 "),mQ=n(wke,"A",{href:!0});var dvt=s(mQ);qFr=r(dvt,"TFRobertaForTokenClassification"),dvt.forEach(t),NFr=r(wke," (RoBERTa model)"),wke.forEach(t),jFr=i(re),U9=n(re,"LI",{});var Ake=s(U9);Rbe=n(Ake,"STRONG",{});var cvt=s(Rbe);DFr=r(cvt,"roformer"),cvt.forEach(t),GFr=r(Ake," \u2014 "),gQ=n(Ake,"A",{href:!0});var fvt=s(gQ);OFr=r(fvt,"TFRoFormerForTokenClassification"),fvt.forEach(t),VFr=r(Ake," (RoFormer model)"),Ake.forEach(t),XFr=i(re),J9=n(re,"LI",{});var yke=s(J9);Bbe=n(yke,"STRONG",{});var mvt=s(Bbe);zFr=r(mvt,"xlm"),mvt.forEach(t),QFr=r(yke," \u2014 "),hQ=n(yke,"A",{href:!0});var gvt=s(hQ);WFr=r(gvt,"TFXLMForTokenClassification"),gvt.forEach(t),HFr=r(yke," (XLM model)"),yke.forEach(t),UFr=i(re),Y9=n(re,"LI",{});var Lke=s(Y9);Pbe=n(Lke,"STRONG",{});var hvt=s(Pbe);JFr=r(hvt,"xlm-roberta"),hvt.forEach(t),YFr=r(Lke," \u2014 "),pQ=n(Lke,"A",{href:!0});var pvt=s(pQ);KFr=r(pvt,"TFXLMRobertaForTokenClassification"),pvt.forEach(t),ZFr=r(Lke," (XLM-RoBERTa model)"),Lke.forEach(t),evr=i(re),K9=n(re,"LI",{});var xke=s(K9);$be=n(xke,"STRONG",{});var _vt=s($be);ovr=r(_vt,"xlnet"),_vt.forEach(t),rvr=r(xke," \u2014 "),_Q=n(xke,"A",{href:!0});var uvt=s(_Q);tvr=r(uvt,"TFXLNetForTokenClassification"),uvt.forEach(t),avr=r(xke," (XLNet model)"),xke.forEach(t),re.forEach(t),nvr=i(Ca),Ibe=n(Ca,"P",{});var bvt=s(Ibe);svr=r(bvt,"Examples:"),bvt.forEach(t),lvr=i(Ca),m(y0.$$.fragment,Ca),Ca.forEach(t),ai.forEach(t),FPe=i(c),Xc=n(c,"H2",{class:!0});var kIe=s(Xc);Z9=n(kIe,"A",{id:!0,class:!0,href:!0});var Fvt=s(Z9);qbe=n(Fvt,"SPAN",{});var vvt=s(qbe);m(L0.$$.fragment,vvt),vvt.forEach(t),Fvt.forEach(t),ivr=i(kIe),Nbe=n(kIe,"SPAN",{});var Tvt=s(Nbe);dvr=r(Tvt,"TFAutoModelForQuestionAnswering"),Tvt.forEach(t),kIe.forEach(t),vPe=i(c),xr=n(c,"DIV",{class:!0});var si=s(xr);m(x0.$$.fragment,si),cvr=i(si),zc=n(si,"P",{});var VJ=s(zc);fvr=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uQ=n(VJ,"A",{href:!0});var Mvt=s(uQ);mvr=r(Mvt,"from_pretrained()"),Mvt.forEach(t),gvr=r(VJ," class method or the "),bQ=n(VJ,"A",{href:!0});var Evt=s(bQ);hvr=r(Evt,"from_config()"),Evt.forEach(t),pvr=r(VJ,` class
method.`),VJ.forEach(t),_vr=i(si),k0=n(si,"P",{});var SIe=s(k0);uvr=r(SIe,"This class cannot be instantiated directly using "),jbe=n(SIe,"CODE",{});var Cvt=s(jbe);bvr=r(Cvt,"__init__()"),Cvt.forEach(t),Fvr=r(SIe," (throws an error)."),SIe.forEach(t),vvr=i(si),Et=n(si,"DIV",{class:!0});var li=s(Et);m(S0.$$.fragment,li),Tvr=i(li),Dbe=n(li,"P",{});var wvt=s(Dbe);Mvr=r(wvt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wvt.forEach(t),Evr=i(li),Qc=n(li,"P",{});var XJ=s(Qc);Cvr=r(XJ,`Note:
Loading a model from its configuration file does `),Gbe=n(XJ,"STRONG",{});var Avt=s(Gbe);wvr=r(Avt,"not"),Avt.forEach(t),Avr=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(XJ,"A",{href:!0});var yvt=s(FQ);yvr=r(yvt,"from_pretrained()"),yvt.forEach(t),Lvr=r(XJ," to load the model weights."),XJ.forEach(t),xvr=i(li),Obe=n(li,"P",{});var Lvt=s(Obe);kvr=r(Lvt,"Examples:"),Lvt.forEach(t),Svr=i(li),m(R0.$$.fragment,li),li.forEach(t),Rvr=i(si),Co=n(si,"DIV",{class:!0});var wa=s(Co);m(B0.$$.fragment,wa),Bvr=i(wa),Vbe=n(wa,"P",{});var xvt=s(Vbe);Pvr=r(xvt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xvt.forEach(t),$vr=i(wa),An=n(wa,"P",{});var _5=s(An);Ivr=r(_5,"The model class to instantiate is selected based on the "),Xbe=n(_5,"CODE",{});var kvt=s(Xbe);qvr=r(kvt,"model_type"),kvt.forEach(t),Nvr=r(_5,` property of the config object (either
passed as an argument or loaded from `),zbe=n(_5,"CODE",{});var Svt=s(zbe);jvr=r(Svt,"pretrained_model_name_or_path"),Svt.forEach(t),Dvr=r(_5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=n(_5,"CODE",{});var Rvt=s(Qbe);Gvr=r(Rvt,"pretrained_model_name_or_path"),Rvt.forEach(t),Ovr=r(_5,":"),_5.forEach(t),Vvr=i(wa),K=n(wa,"UL",{});var te=s(K);eM=n(te,"LI",{});var kke=s(eM);Wbe=n(kke,"STRONG",{});var Bvt=s(Wbe);Xvr=r(Bvt,"albert"),Bvt.forEach(t),zvr=r(kke," \u2014 "),vQ=n(kke,"A",{href:!0});var Pvt=s(vQ);Qvr=r(Pvt,"TFAlbertForQuestionAnswering"),Pvt.forEach(t),Wvr=r(kke," (ALBERT model)"),kke.forEach(t),Hvr=i(te),oM=n(te,"LI",{});var Ske=s(oM);Hbe=n(Ske,"STRONG",{});var $vt=s(Hbe);Uvr=r($vt,"bert"),$vt.forEach(t),Jvr=r(Ske," \u2014 "),TQ=n(Ske,"A",{href:!0});var Ivt=s(TQ);Yvr=r(Ivt,"TFBertForQuestionAnswering"),Ivt.forEach(t),Kvr=r(Ske," (BERT model)"),Ske.forEach(t),Zvr=i(te),rM=n(te,"LI",{});var Rke=s(rM);Ube=n(Rke,"STRONG",{});var qvt=s(Ube);eTr=r(qvt,"camembert"),qvt.forEach(t),oTr=r(Rke," \u2014 "),MQ=n(Rke,"A",{href:!0});var Nvt=s(MQ);rTr=r(Nvt,"TFCamembertForQuestionAnswering"),Nvt.forEach(t),tTr=r(Rke," (CamemBERT model)"),Rke.forEach(t),aTr=i(te),tM=n(te,"LI",{});var Bke=s(tM);Jbe=n(Bke,"STRONG",{});var jvt=s(Jbe);nTr=r(jvt,"convbert"),jvt.forEach(t),sTr=r(Bke," \u2014 "),EQ=n(Bke,"A",{href:!0});var Dvt=s(EQ);lTr=r(Dvt,"TFConvBertForQuestionAnswering"),Dvt.forEach(t),iTr=r(Bke," (ConvBERT model)"),Bke.forEach(t),dTr=i(te),aM=n(te,"LI",{});var Pke=s(aM);Ybe=n(Pke,"STRONG",{});var Gvt=s(Ybe);cTr=r(Gvt,"deberta"),Gvt.forEach(t),fTr=r(Pke," \u2014 "),CQ=n(Pke,"A",{href:!0});var Ovt=s(CQ);mTr=r(Ovt,"TFDebertaForQuestionAnswering"),Ovt.forEach(t),gTr=r(Pke," (DeBERTa model)"),Pke.forEach(t),hTr=i(te),nM=n(te,"LI",{});var $ke=s(nM);Kbe=n($ke,"STRONG",{});var Vvt=s(Kbe);pTr=r(Vvt,"deberta-v2"),Vvt.forEach(t),_Tr=r($ke," \u2014 "),wQ=n($ke,"A",{href:!0});var Xvt=s(wQ);uTr=r(Xvt,"TFDebertaV2ForQuestionAnswering"),Xvt.forEach(t),bTr=r($ke," (DeBERTa-v2 model)"),$ke.forEach(t),FTr=i(te),sM=n(te,"LI",{});var Ike=s(sM);Zbe=n(Ike,"STRONG",{});var zvt=s(Zbe);vTr=r(zvt,"distilbert"),zvt.forEach(t),TTr=r(Ike," \u2014 "),AQ=n(Ike,"A",{href:!0});var Qvt=s(AQ);MTr=r(Qvt,"TFDistilBertForQuestionAnswering"),Qvt.forEach(t),ETr=r(Ike," (DistilBERT model)"),Ike.forEach(t),CTr=i(te),lM=n(te,"LI",{});var qke=s(lM);e6e=n(qke,"STRONG",{});var Wvt=s(e6e);wTr=r(Wvt,"electra"),Wvt.forEach(t),ATr=r(qke," \u2014 "),yQ=n(qke,"A",{href:!0});var Hvt=s(yQ);yTr=r(Hvt,"TFElectraForQuestionAnswering"),Hvt.forEach(t),LTr=r(qke," (ELECTRA model)"),qke.forEach(t),xTr=i(te),iM=n(te,"LI",{});var Nke=s(iM);o6e=n(Nke,"STRONG",{});var Uvt=s(o6e);kTr=r(Uvt,"flaubert"),Uvt.forEach(t),STr=r(Nke," \u2014 "),LQ=n(Nke,"A",{href:!0});var Jvt=s(LQ);RTr=r(Jvt,"TFFlaubertForQuestionAnsweringSimple"),Jvt.forEach(t),BTr=r(Nke," (FlauBERT model)"),Nke.forEach(t),PTr=i(te),dM=n(te,"LI",{});var jke=s(dM);r6e=n(jke,"STRONG",{});var Yvt=s(r6e);$Tr=r(Yvt,"funnel"),Yvt.forEach(t),ITr=r(jke," \u2014 "),xQ=n(jke,"A",{href:!0});var Kvt=s(xQ);qTr=r(Kvt,"TFFunnelForQuestionAnswering"),Kvt.forEach(t),NTr=r(jke," (Funnel Transformer model)"),jke.forEach(t),jTr=i(te),cM=n(te,"LI",{});var Dke=s(cM);t6e=n(Dke,"STRONG",{});var Zvt=s(t6e);DTr=r(Zvt,"gptj"),Zvt.forEach(t),GTr=r(Dke," \u2014 "),kQ=n(Dke,"A",{href:!0});var eTt=s(kQ);OTr=r(eTt,"TFGPTJForQuestionAnswering"),eTt.forEach(t),VTr=r(Dke," (GPT-J model)"),Dke.forEach(t),XTr=i(te),fM=n(te,"LI",{});var Gke=s(fM);a6e=n(Gke,"STRONG",{});var oTt=s(a6e);zTr=r(oTt,"longformer"),oTt.forEach(t),QTr=r(Gke," \u2014 "),SQ=n(Gke,"A",{href:!0});var rTt=s(SQ);WTr=r(rTt,"TFLongformerForQuestionAnswering"),rTt.forEach(t),HTr=r(Gke," (Longformer model)"),Gke.forEach(t),UTr=i(te),mM=n(te,"LI",{});var Oke=s(mM);n6e=n(Oke,"STRONG",{});var tTt=s(n6e);JTr=r(tTt,"mobilebert"),tTt.forEach(t),YTr=r(Oke," \u2014 "),RQ=n(Oke,"A",{href:!0});var aTt=s(RQ);KTr=r(aTt,"TFMobileBertForQuestionAnswering"),aTt.forEach(t),ZTr=r(Oke," (MobileBERT model)"),Oke.forEach(t),e7r=i(te),gM=n(te,"LI",{});var Vke=s(gM);s6e=n(Vke,"STRONG",{});var nTt=s(s6e);o7r=r(nTt,"mpnet"),nTt.forEach(t),r7r=r(Vke," \u2014 "),BQ=n(Vke,"A",{href:!0});var sTt=s(BQ);t7r=r(sTt,"TFMPNetForQuestionAnswering"),sTt.forEach(t),a7r=r(Vke," (MPNet model)"),Vke.forEach(t),n7r=i(te),hM=n(te,"LI",{});var Xke=s(hM);l6e=n(Xke,"STRONG",{});var lTt=s(l6e);s7r=r(lTt,"rembert"),lTt.forEach(t),l7r=r(Xke," \u2014 "),PQ=n(Xke,"A",{href:!0});var iTt=s(PQ);i7r=r(iTt,"TFRemBertForQuestionAnswering"),iTt.forEach(t),d7r=r(Xke," (RemBERT model)"),Xke.forEach(t),c7r=i(te),pM=n(te,"LI",{});var zke=s(pM);i6e=n(zke,"STRONG",{});var dTt=s(i6e);f7r=r(dTt,"roberta"),dTt.forEach(t),m7r=r(zke," \u2014 "),$Q=n(zke,"A",{href:!0});var cTt=s($Q);g7r=r(cTt,"TFRobertaForQuestionAnswering"),cTt.forEach(t),h7r=r(zke," (RoBERTa model)"),zke.forEach(t),p7r=i(te),_M=n(te,"LI",{});var Qke=s(_M);d6e=n(Qke,"STRONG",{});var fTt=s(d6e);_7r=r(fTt,"roformer"),fTt.forEach(t),u7r=r(Qke," \u2014 "),IQ=n(Qke,"A",{href:!0});var mTt=s(IQ);b7r=r(mTt,"TFRoFormerForQuestionAnswering"),mTt.forEach(t),F7r=r(Qke," (RoFormer model)"),Qke.forEach(t),v7r=i(te),uM=n(te,"LI",{});var Wke=s(uM);c6e=n(Wke,"STRONG",{});var gTt=s(c6e);T7r=r(gTt,"xlm"),gTt.forEach(t),M7r=r(Wke," \u2014 "),qQ=n(Wke,"A",{href:!0});var hTt=s(qQ);E7r=r(hTt,"TFXLMForQuestionAnsweringSimple"),hTt.forEach(t),C7r=r(Wke," (XLM model)"),Wke.forEach(t),w7r=i(te),bM=n(te,"LI",{});var Hke=s(bM);f6e=n(Hke,"STRONG",{});var pTt=s(f6e);A7r=r(pTt,"xlm-roberta"),pTt.forEach(t),y7r=r(Hke," \u2014 "),NQ=n(Hke,"A",{href:!0});var _Tt=s(NQ);L7r=r(_Tt,"TFXLMRobertaForQuestionAnswering"),_Tt.forEach(t),x7r=r(Hke," (XLM-RoBERTa model)"),Hke.forEach(t),k7r=i(te),FM=n(te,"LI",{});var Uke=s(FM);m6e=n(Uke,"STRONG",{});var uTt=s(m6e);S7r=r(uTt,"xlnet"),uTt.forEach(t),R7r=r(Uke," \u2014 "),jQ=n(Uke,"A",{href:!0});var bTt=s(jQ);B7r=r(bTt,"TFXLNetForQuestionAnsweringSimple"),bTt.forEach(t),P7r=r(Uke," (XLNet model)"),Uke.forEach(t),te.forEach(t),$7r=i(wa),g6e=n(wa,"P",{});var FTt=s(g6e);I7r=r(FTt,"Examples:"),FTt.forEach(t),q7r=i(wa),m(P0.$$.fragment,wa),wa.forEach(t),si.forEach(t),TPe=i(c),Wc=n(c,"H2",{class:!0});var RIe=s(Wc);vM=n(RIe,"A",{id:!0,class:!0,href:!0});var vTt=s(vM);h6e=n(vTt,"SPAN",{});var TTt=s(h6e);m($0.$$.fragment,TTt),TTt.forEach(t),vTt.forEach(t),N7r=i(RIe),p6e=n(RIe,"SPAN",{});var MTt=s(p6e);j7r=r(MTt,"TFAutoModelForVision2Seq"),MTt.forEach(t),RIe.forEach(t),MPe=i(c),kr=n(c,"DIV",{class:!0});var ii=s(kr);m(I0.$$.fragment,ii),D7r=i(ii),Hc=n(ii,"P",{});var zJ=s(Hc);G7r=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DQ=n(zJ,"A",{href:!0});var ETt=s(DQ);O7r=r(ETt,"from_pretrained()"),ETt.forEach(t),V7r=r(zJ," class method or the "),GQ=n(zJ,"A",{href:!0});var CTt=s(GQ);X7r=r(CTt,"from_config()"),CTt.forEach(t),z7r=r(zJ,` class
method.`),zJ.forEach(t),Q7r=i(ii),q0=n(ii,"P",{});var BIe=s(q0);W7r=r(BIe,"This class cannot be instantiated directly using "),_6e=n(BIe,"CODE",{});var wTt=s(_6e);H7r=r(wTt,"__init__()"),wTt.forEach(t),U7r=r(BIe," (throws an error)."),BIe.forEach(t),J7r=i(ii),Ct=n(ii,"DIV",{class:!0});var di=s(Ct);m(N0.$$.fragment,di),Y7r=i(di),u6e=n(di,"P",{});var ATt=s(u6e);K7r=r(ATt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ATt.forEach(t),Z7r=i(di),Uc=n(di,"P",{});var QJ=s(Uc);e9r=r(QJ,`Note:
Loading a model from its configuration file does `),b6e=n(QJ,"STRONG",{});var yTt=s(b6e);o9r=r(yTt,"not"),yTt.forEach(t),r9r=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=n(QJ,"A",{href:!0});var LTt=s(OQ);t9r=r(LTt,"from_pretrained()"),LTt.forEach(t),a9r=r(QJ," to load the model weights."),QJ.forEach(t),n9r=i(di),F6e=n(di,"P",{});var xTt=s(F6e);s9r=r(xTt,"Examples:"),xTt.forEach(t),l9r=i(di),m(j0.$$.fragment,di),di.forEach(t),i9r=i(ii),wo=n(ii,"DIV",{class:!0});var Aa=s(wo);m(D0.$$.fragment,Aa),d9r=i(Aa),v6e=n(Aa,"P",{});var kTt=s(v6e);c9r=r(kTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kTt.forEach(t),f9r=i(Aa),yn=n(Aa,"P",{});var u5=s(yn);m9r=r(u5,"The model class to instantiate is selected based on the "),T6e=n(u5,"CODE",{});var STt=s(T6e);g9r=r(STt,"model_type"),STt.forEach(t),h9r=r(u5,` property of the config object (either
passed as an argument or loaded from `),M6e=n(u5,"CODE",{});var RTt=s(M6e);p9r=r(RTt,"pretrained_model_name_or_path"),RTt.forEach(t),_9r=r(u5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E6e=n(u5,"CODE",{});var BTt=s(E6e);u9r=r(BTt,"pretrained_model_name_or_path"),BTt.forEach(t),b9r=r(u5,":"),u5.forEach(t),F9r=i(Aa),C6e=n(Aa,"UL",{});var PTt=s(C6e);TM=n(PTt,"LI",{});var Jke=s(TM);w6e=n(Jke,"STRONG",{});var $Tt=s(w6e);v9r=r($Tt,"vision-encoder-decoder"),$Tt.forEach(t),T9r=r(Jke," \u2014 "),VQ=n(Jke,"A",{href:!0});var ITt=s(VQ);M9r=r(ITt,"TFVisionEncoderDecoderModel"),ITt.forEach(t),E9r=r(Jke," (Vision Encoder decoder model)"),Jke.forEach(t),PTt.forEach(t),C9r=i(Aa),A6e=n(Aa,"P",{});var qTt=s(A6e);w9r=r(qTt,"Examples:"),qTt.forEach(t),A9r=i(Aa),m(G0.$$.fragment,Aa),Aa.forEach(t),ii.forEach(t),EPe=i(c),Jc=n(c,"H2",{class:!0});var PIe=s(Jc);MM=n(PIe,"A",{id:!0,class:!0,href:!0});var NTt=s(MM);y6e=n(NTt,"SPAN",{});var jTt=s(y6e);m(O0.$$.fragment,jTt),jTt.forEach(t),NTt.forEach(t),y9r=i(PIe),L6e=n(PIe,"SPAN",{});var DTt=s(L6e);L9r=r(DTt,"TFAutoModelForSpeechSeq2Seq"),DTt.forEach(t),PIe.forEach(t),CPe=i(c),Sr=n(c,"DIV",{class:!0});var ci=s(Sr);m(V0.$$.fragment,ci),x9r=i(ci),Yc=n(ci,"P",{});var WJ=s(Yc);k9r=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XQ=n(WJ,"A",{href:!0});var GTt=s(XQ);S9r=r(GTt,"from_pretrained()"),GTt.forEach(t),R9r=r(WJ," class method or the "),zQ=n(WJ,"A",{href:!0});var OTt=s(zQ);B9r=r(OTt,"from_config()"),OTt.forEach(t),P9r=r(WJ,` class
method.`),WJ.forEach(t),$9r=i(ci),X0=n(ci,"P",{});var $Ie=s(X0);I9r=r($Ie,"This class cannot be instantiated directly using "),x6e=n($Ie,"CODE",{});var VTt=s(x6e);q9r=r(VTt,"__init__()"),VTt.forEach(t),N9r=r($Ie," (throws an error)."),$Ie.forEach(t),j9r=i(ci),wt=n(ci,"DIV",{class:!0});var fi=s(wt);m(z0.$$.fragment,fi),D9r=i(fi),k6e=n(fi,"P",{});var XTt=s(k6e);G9r=r(XTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),XTt.forEach(t),O9r=i(fi),Kc=n(fi,"P",{});var HJ=s(Kc);V9r=r(HJ,`Note:
Loading a model from its configuration file does `),S6e=n(HJ,"STRONG",{});var zTt=s(S6e);X9r=r(zTt,"not"),zTt.forEach(t),z9r=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n(HJ,"A",{href:!0});var QTt=s(QQ);Q9r=r(QTt,"from_pretrained()"),QTt.forEach(t),W9r=r(HJ," to load the model weights."),HJ.forEach(t),H9r=i(fi),R6e=n(fi,"P",{});var WTt=s(R6e);U9r=r(WTt,"Examples:"),WTt.forEach(t),J9r=i(fi),m(Q0.$$.fragment,fi),fi.forEach(t),Y9r=i(ci),Ao=n(ci,"DIV",{class:!0});var ya=s(Ao);m(W0.$$.fragment,ya),K9r=i(ya),B6e=n(ya,"P",{});var HTt=s(B6e);Z9r=r(HTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),HTt.forEach(t),eMr=i(ya),Ln=n(ya,"P",{});var b5=s(Ln);oMr=r(b5,"The model class to instantiate is selected based on the "),P6e=n(b5,"CODE",{});var UTt=s(P6e);rMr=r(UTt,"model_type"),UTt.forEach(t),tMr=r(b5,` property of the config object (either
passed as an argument or loaded from `),$6e=n(b5,"CODE",{});var JTt=s($6e);aMr=r(JTt,"pretrained_model_name_or_path"),JTt.forEach(t),nMr=r(b5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I6e=n(b5,"CODE",{});var YTt=s(I6e);sMr=r(YTt,"pretrained_model_name_or_path"),YTt.forEach(t),lMr=r(b5,":"),b5.forEach(t),iMr=i(ya),q6e=n(ya,"UL",{});var KTt=s(q6e);EM=n(KTt,"LI",{});var Yke=s(EM);N6e=n(Yke,"STRONG",{});var ZTt=s(N6e);dMr=r(ZTt,"speech_to_text"),ZTt.forEach(t),cMr=r(Yke," \u2014 "),WQ=n(Yke,"A",{href:!0});var e7t=s(WQ);fMr=r(e7t,"TFSpeech2TextForConditionalGeneration"),e7t.forEach(t),mMr=r(Yke," (Speech2Text model)"),Yke.forEach(t),KTt.forEach(t),gMr=i(ya),j6e=n(ya,"P",{});var o7t=s(j6e);hMr=r(o7t,"Examples:"),o7t.forEach(t),pMr=i(ya),m(H0.$$.fragment,ya),ya.forEach(t),ci.forEach(t),wPe=i(c),Zc=n(c,"H2",{class:!0});var IIe=s(Zc);CM=n(IIe,"A",{id:!0,class:!0,href:!0});var r7t=s(CM);D6e=n(r7t,"SPAN",{});var t7t=s(D6e);m(U0.$$.fragment,t7t),t7t.forEach(t),r7t.forEach(t),_Mr=i(IIe),G6e=n(IIe,"SPAN",{});var a7t=s(G6e);uMr=r(a7t,"FlaxAutoModel"),a7t.forEach(t),IIe.forEach(t),APe=i(c),Rr=n(c,"DIV",{class:!0});var mi=s(Rr);m(J0.$$.fragment,mi),bMr=i(mi),ef=n(mi,"P",{});var UJ=s(ef);FMr=r(UJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HQ=n(UJ,"A",{href:!0});var n7t=s(HQ);vMr=r(n7t,"from_pretrained()"),n7t.forEach(t),TMr=r(UJ," class method or the "),UQ=n(UJ,"A",{href:!0});var s7t=s(UQ);MMr=r(s7t,"from_config()"),s7t.forEach(t),EMr=r(UJ,` class
method.`),UJ.forEach(t),CMr=i(mi),Y0=n(mi,"P",{});var qIe=s(Y0);wMr=r(qIe,"This class cannot be instantiated directly using "),O6e=n(qIe,"CODE",{});var l7t=s(O6e);AMr=r(l7t,"__init__()"),l7t.forEach(t),yMr=r(qIe," (throws an error)."),qIe.forEach(t),LMr=i(mi),At=n(mi,"DIV",{class:!0});var gi=s(At);m(K0.$$.fragment,gi),xMr=i(gi),V6e=n(gi,"P",{});var i7t=s(V6e);kMr=r(i7t,"Instantiates one of the base model classes of the library from a configuration."),i7t.forEach(t),SMr=i(gi),of=n(gi,"P",{});var JJ=s(of);RMr=r(JJ,`Note:
Loading a model from its configuration file does `),X6e=n(JJ,"STRONG",{});var d7t=s(X6e);BMr=r(d7t,"not"),d7t.forEach(t),PMr=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(JJ,"A",{href:!0});var c7t=s(JQ);$Mr=r(c7t,"from_pretrained()"),c7t.forEach(t),IMr=r(JJ," to load the model weights."),JJ.forEach(t),qMr=i(gi),z6e=n(gi,"P",{});var f7t=s(z6e);NMr=r(f7t,"Examples:"),f7t.forEach(t),jMr=i(gi),m(Z0.$$.fragment,gi),gi.forEach(t),DMr=i(mi),yo=n(mi,"DIV",{class:!0});var La=s(yo);m(ey.$$.fragment,La),GMr=i(La),Q6e=n(La,"P",{});var m7t=s(Q6e);OMr=r(m7t,"Instantiate one of the base model classes of the library from a pretrained model."),m7t.forEach(t),VMr=i(La),xn=n(La,"P",{});var F5=s(xn);XMr=r(F5,"The model class to instantiate is selected based on the "),W6e=n(F5,"CODE",{});var g7t=s(W6e);zMr=r(g7t,"model_type"),g7t.forEach(t),QMr=r(F5,` property of the config object (either
passed as an argument or loaded from `),H6e=n(F5,"CODE",{});var h7t=s(H6e);WMr=r(h7t,"pretrained_model_name_or_path"),h7t.forEach(t),HMr=r(F5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U6e=n(F5,"CODE",{});var p7t=s(U6e);UMr=r(p7t,"pretrained_model_name_or_path"),p7t.forEach(t),JMr=r(F5,":"),F5.forEach(t),YMr=i(La),X=n(La,"UL",{});var W=s(X);wM=n(W,"LI",{});var Kke=s(wM);J6e=n(Kke,"STRONG",{});var _7t=s(J6e);KMr=r(_7t,"albert"),_7t.forEach(t),ZMr=r(Kke," \u2014 "),YQ=n(Kke,"A",{href:!0});var u7t=s(YQ);e4r=r(u7t,"FlaxAlbertModel"),u7t.forEach(t),o4r=r(Kke," (ALBERT model)"),Kke.forEach(t),r4r=i(W),AM=n(W,"LI",{});var Zke=s(AM);Y6e=n(Zke,"STRONG",{});var b7t=s(Y6e);t4r=r(b7t,"bart"),b7t.forEach(t),a4r=r(Zke," \u2014 "),KQ=n(Zke,"A",{href:!0});var F7t=s(KQ);n4r=r(F7t,"FlaxBartModel"),F7t.forEach(t),s4r=r(Zke," (BART model)"),Zke.forEach(t),l4r=i(W),yM=n(W,"LI",{});var eSe=s(yM);K6e=n(eSe,"STRONG",{});var v7t=s(K6e);i4r=r(v7t,"beit"),v7t.forEach(t),d4r=r(eSe," \u2014 "),ZQ=n(eSe,"A",{href:!0});var T7t=s(ZQ);c4r=r(T7t,"FlaxBeitModel"),T7t.forEach(t),f4r=r(eSe," (BEiT model)"),eSe.forEach(t),m4r=i(W),LM=n(W,"LI",{});var oSe=s(LM);Z6e=n(oSe,"STRONG",{});var M7t=s(Z6e);g4r=r(M7t,"bert"),M7t.forEach(t),h4r=r(oSe," \u2014 "),eW=n(oSe,"A",{href:!0});var E7t=s(eW);p4r=r(E7t,"FlaxBertModel"),E7t.forEach(t),_4r=r(oSe," (BERT model)"),oSe.forEach(t),u4r=i(W),xM=n(W,"LI",{});var rSe=s(xM);eFe=n(rSe,"STRONG",{});var C7t=s(eFe);b4r=r(C7t,"big_bird"),C7t.forEach(t),F4r=r(rSe," \u2014 "),oW=n(rSe,"A",{href:!0});var w7t=s(oW);v4r=r(w7t,"FlaxBigBirdModel"),w7t.forEach(t),T4r=r(rSe," (BigBird model)"),rSe.forEach(t),M4r=i(W),kM=n(W,"LI",{});var tSe=s(kM);oFe=n(tSe,"STRONG",{});var A7t=s(oFe);E4r=r(A7t,"blenderbot"),A7t.forEach(t),C4r=r(tSe," \u2014 "),rW=n(tSe,"A",{href:!0});var y7t=s(rW);w4r=r(y7t,"FlaxBlenderbotModel"),y7t.forEach(t),A4r=r(tSe," (Blenderbot model)"),tSe.forEach(t),y4r=i(W),SM=n(W,"LI",{});var aSe=s(SM);rFe=n(aSe,"STRONG",{});var L7t=s(rFe);L4r=r(L7t,"blenderbot-small"),L7t.forEach(t),x4r=r(aSe," \u2014 "),tW=n(aSe,"A",{href:!0});var x7t=s(tW);k4r=r(x7t,"FlaxBlenderbotSmallModel"),x7t.forEach(t),S4r=r(aSe," (BlenderbotSmall model)"),aSe.forEach(t),R4r=i(W),RM=n(W,"LI",{});var nSe=s(RM);tFe=n(nSe,"STRONG",{});var k7t=s(tFe);B4r=r(k7t,"clip"),k7t.forEach(t),P4r=r(nSe," \u2014 "),aW=n(nSe,"A",{href:!0});var S7t=s(aW);$4r=r(S7t,"FlaxCLIPModel"),S7t.forEach(t),I4r=r(nSe," (CLIP model)"),nSe.forEach(t),q4r=i(W),BM=n(W,"LI",{});var sSe=s(BM);aFe=n(sSe,"STRONG",{});var R7t=s(aFe);N4r=r(R7t,"distilbert"),R7t.forEach(t),j4r=r(sSe," \u2014 "),nW=n(sSe,"A",{href:!0});var B7t=s(nW);D4r=r(B7t,"FlaxDistilBertModel"),B7t.forEach(t),G4r=r(sSe," (DistilBERT model)"),sSe.forEach(t),O4r=i(W),PM=n(W,"LI",{});var lSe=s(PM);nFe=n(lSe,"STRONG",{});var P7t=s(nFe);V4r=r(P7t,"electra"),P7t.forEach(t),X4r=r(lSe," \u2014 "),sW=n(lSe,"A",{href:!0});var $7t=s(sW);z4r=r($7t,"FlaxElectraModel"),$7t.forEach(t),Q4r=r(lSe," (ELECTRA model)"),lSe.forEach(t),W4r=i(W),$M=n(W,"LI",{});var iSe=s($M);sFe=n(iSe,"STRONG",{});var I7t=s(sFe);H4r=r(I7t,"gpt2"),I7t.forEach(t),U4r=r(iSe," \u2014 "),lW=n(iSe,"A",{href:!0});var q7t=s(lW);J4r=r(q7t,"FlaxGPT2Model"),q7t.forEach(t),Y4r=r(iSe," (OpenAI GPT-2 model)"),iSe.forEach(t),K4r=i(W),IM=n(W,"LI",{});var dSe=s(IM);lFe=n(dSe,"STRONG",{});var N7t=s(lFe);Z4r=r(N7t,"gpt_neo"),N7t.forEach(t),eEr=r(dSe," \u2014 "),iW=n(dSe,"A",{href:!0});var j7t=s(iW);oEr=r(j7t,"FlaxGPTNeoModel"),j7t.forEach(t),rEr=r(dSe," (GPT Neo model)"),dSe.forEach(t),tEr=i(W),qM=n(W,"LI",{});var cSe=s(qM);iFe=n(cSe,"STRONG",{});var D7t=s(iFe);aEr=r(D7t,"gptj"),D7t.forEach(t),nEr=r(cSe," \u2014 "),dW=n(cSe,"A",{href:!0});var G7t=s(dW);sEr=r(G7t,"FlaxGPTJModel"),G7t.forEach(t),lEr=r(cSe," (GPT-J model)"),cSe.forEach(t),iEr=i(W),NM=n(W,"LI",{});var fSe=s(NM);dFe=n(fSe,"STRONG",{});var O7t=s(dFe);dEr=r(O7t,"longt5"),O7t.forEach(t),cEr=r(fSe," \u2014 "),cW=n(fSe,"A",{href:!0});var V7t=s(cW);fEr=r(V7t,"FlaxLongT5Model"),V7t.forEach(t),mEr=r(fSe," (LongT5 model)"),fSe.forEach(t),gEr=i(W),jM=n(W,"LI",{});var mSe=s(jM);cFe=n(mSe,"STRONG",{});var X7t=s(cFe);hEr=r(X7t,"marian"),X7t.forEach(t),pEr=r(mSe," \u2014 "),fW=n(mSe,"A",{href:!0});var z7t=s(fW);_Er=r(z7t,"FlaxMarianModel"),z7t.forEach(t),uEr=r(mSe," (Marian model)"),mSe.forEach(t),bEr=i(W),DM=n(W,"LI",{});var gSe=s(DM);fFe=n(gSe,"STRONG",{});var Q7t=s(fFe);FEr=r(Q7t,"mbart"),Q7t.forEach(t),vEr=r(gSe," \u2014 "),mW=n(gSe,"A",{href:!0});var W7t=s(mW);TEr=r(W7t,"FlaxMBartModel"),W7t.forEach(t),MEr=r(gSe," (mBART model)"),gSe.forEach(t),EEr=i(W),GM=n(W,"LI",{});var hSe=s(GM);mFe=n(hSe,"STRONG",{});var H7t=s(mFe);CEr=r(H7t,"mt5"),H7t.forEach(t),wEr=r(hSe," \u2014 "),gW=n(hSe,"A",{href:!0});var U7t=s(gW);AEr=r(U7t,"FlaxMT5Model"),U7t.forEach(t),yEr=r(hSe," (mT5 model)"),hSe.forEach(t),LEr=i(W),OM=n(W,"LI",{});var pSe=s(OM);gFe=n(pSe,"STRONG",{});var J7t=s(gFe);xEr=r(J7t,"pegasus"),J7t.forEach(t),kEr=r(pSe," \u2014 "),hW=n(pSe,"A",{href:!0});var Y7t=s(hW);SEr=r(Y7t,"FlaxPegasusModel"),Y7t.forEach(t),REr=r(pSe," (Pegasus model)"),pSe.forEach(t),BEr=i(W),VM=n(W,"LI",{});var _Se=s(VM);hFe=n(_Se,"STRONG",{});var K7t=s(hFe);PEr=r(K7t,"roberta"),K7t.forEach(t),$Er=r(_Se," \u2014 "),pW=n(_Se,"A",{href:!0});var Z7t=s(pW);IEr=r(Z7t,"FlaxRobertaModel"),Z7t.forEach(t),qEr=r(_Se," (RoBERTa model)"),_Se.forEach(t),NEr=i(W),XM=n(W,"LI",{});var uSe=s(XM);pFe=n(uSe,"STRONG",{});var e9t=s(pFe);jEr=r(e9t,"roformer"),e9t.forEach(t),DEr=r(uSe," \u2014 "),_W=n(uSe,"A",{href:!0});var o9t=s(_W);GEr=r(o9t,"FlaxRoFormerModel"),o9t.forEach(t),OEr=r(uSe," (RoFormer model)"),uSe.forEach(t),VEr=i(W),zM=n(W,"LI",{});var bSe=s(zM);_Fe=n(bSe,"STRONG",{});var r9t=s(_Fe);XEr=r(r9t,"t5"),r9t.forEach(t),zEr=r(bSe," \u2014 "),uW=n(bSe,"A",{href:!0});var t9t=s(uW);QEr=r(t9t,"FlaxT5Model"),t9t.forEach(t),WEr=r(bSe," (T5 model)"),bSe.forEach(t),HEr=i(W),QM=n(W,"LI",{});var FSe=s(QM);uFe=n(FSe,"STRONG",{});var a9t=s(uFe);UEr=r(a9t,"vision-text-dual-encoder"),a9t.forEach(t),JEr=r(FSe," \u2014 "),bW=n(FSe,"A",{href:!0});var n9t=s(bW);YEr=r(n9t,"FlaxVisionTextDualEncoderModel"),n9t.forEach(t),KEr=r(FSe," (VisionTextDualEncoder model)"),FSe.forEach(t),ZEr=i(W),WM=n(W,"LI",{});var vSe=s(WM);bFe=n(vSe,"STRONG",{});var s9t=s(bFe);e5r=r(s9t,"vit"),s9t.forEach(t),o5r=r(vSe," \u2014 "),FW=n(vSe,"A",{href:!0});var l9t=s(FW);r5r=r(l9t,"FlaxViTModel"),l9t.forEach(t),t5r=r(vSe," (ViT model)"),vSe.forEach(t),a5r=i(W),HM=n(W,"LI",{});var TSe=s(HM);FFe=n(TSe,"STRONG",{});var i9t=s(FFe);n5r=r(i9t,"wav2vec2"),i9t.forEach(t),s5r=r(TSe," \u2014 "),vW=n(TSe,"A",{href:!0});var d9t=s(vW);l5r=r(d9t,"FlaxWav2Vec2Model"),d9t.forEach(t),i5r=r(TSe," (Wav2Vec2 model)"),TSe.forEach(t),d5r=i(W),UM=n(W,"LI",{});var MSe=s(UM);vFe=n(MSe,"STRONG",{});var c9t=s(vFe);c5r=r(c9t,"xglm"),c9t.forEach(t),f5r=r(MSe," \u2014 "),TW=n(MSe,"A",{href:!0});var f9t=s(TW);m5r=r(f9t,"FlaxXGLMModel"),f9t.forEach(t),g5r=r(MSe," (XGLM model)"),MSe.forEach(t),h5r=i(W),JM=n(W,"LI",{});var ESe=s(JM);TFe=n(ESe,"STRONG",{});var m9t=s(TFe);p5r=r(m9t,"xlm-roberta"),m9t.forEach(t),_5r=r(ESe," \u2014 "),MW=n(ESe,"A",{href:!0});var g9t=s(MW);u5r=r(g9t,"FlaxXLMRobertaModel"),g9t.forEach(t),b5r=r(ESe," (XLM-RoBERTa model)"),ESe.forEach(t),W.forEach(t),F5r=i(La),MFe=n(La,"P",{});var h9t=s(MFe);v5r=r(h9t,"Examples:"),h9t.forEach(t),T5r=i(La),m(oy.$$.fragment,La),La.forEach(t),mi.forEach(t),yPe=i(c),rf=n(c,"H2",{class:!0});var NIe=s(rf);YM=n(NIe,"A",{id:!0,class:!0,href:!0});var p9t=s(YM);EFe=n(p9t,"SPAN",{});var _9t=s(EFe);m(ry.$$.fragment,_9t),_9t.forEach(t),p9t.forEach(t),M5r=i(NIe),CFe=n(NIe,"SPAN",{});var u9t=s(CFe);E5r=r(u9t,"FlaxAutoModelForCausalLM"),u9t.forEach(t),NIe.forEach(t),LPe=i(c),Br=n(c,"DIV",{class:!0});var hi=s(Br);m(ty.$$.fragment,hi),C5r=i(hi),tf=n(hi,"P",{});var YJ=s(tf);w5r=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),EW=n(YJ,"A",{href:!0});var b9t=s(EW);A5r=r(b9t,"from_pretrained()"),b9t.forEach(t),y5r=r(YJ," class method or the "),CW=n(YJ,"A",{href:!0});var F9t=s(CW);L5r=r(F9t,"from_config()"),F9t.forEach(t),x5r=r(YJ,` class
method.`),YJ.forEach(t),k5r=i(hi),ay=n(hi,"P",{});var jIe=s(ay);S5r=r(jIe,"This class cannot be instantiated directly using "),wFe=n(jIe,"CODE",{});var v9t=s(wFe);R5r=r(v9t,"__init__()"),v9t.forEach(t),B5r=r(jIe," (throws an error)."),jIe.forEach(t),P5r=i(hi),yt=n(hi,"DIV",{class:!0});var pi=s(yt);m(ny.$$.fragment,pi),$5r=i(pi),AFe=n(pi,"P",{});var T9t=s(AFe);I5r=r(T9t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),T9t.forEach(t),q5r=i(pi),af=n(pi,"P",{});var KJ=s(af);N5r=r(KJ,`Note:
Loading a model from its configuration file does `),yFe=n(KJ,"STRONG",{});var M9t=s(yFe);j5r=r(M9t,"not"),M9t.forEach(t),D5r=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=n(KJ,"A",{href:!0});var E9t=s(wW);G5r=r(E9t,"from_pretrained()"),E9t.forEach(t),O5r=r(KJ," to load the model weights."),KJ.forEach(t),V5r=i(pi),LFe=n(pi,"P",{});var C9t=s(LFe);X5r=r(C9t,"Examples:"),C9t.forEach(t),z5r=i(pi),m(sy.$$.fragment,pi),pi.forEach(t),Q5r=i(hi),Lo=n(hi,"DIV",{class:!0});var xa=s(Lo);m(ly.$$.fragment,xa),W5r=i(xa),xFe=n(xa,"P",{});var w9t=s(xFe);H5r=r(w9t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),w9t.forEach(t),U5r=i(xa),kn=n(xa,"P",{});var v5=s(kn);J5r=r(v5,"The model class to instantiate is selected based on the "),kFe=n(v5,"CODE",{});var A9t=s(kFe);Y5r=r(A9t,"model_type"),A9t.forEach(t),K5r=r(v5,` property of the config object (either
passed as an argument or loaded from `),SFe=n(v5,"CODE",{});var y9t=s(SFe);Z5r=r(y9t,"pretrained_model_name_or_path"),y9t.forEach(t),e3r=r(v5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=n(v5,"CODE",{});var L9t=s(RFe);o3r=r(L9t,"pretrained_model_name_or_path"),L9t.forEach(t),r3r=r(v5,":"),v5.forEach(t),t3r=i(xa),ca=n(xa,"UL",{});var _i=s(ca);KM=n(_i,"LI",{});var CSe=s(KM);BFe=n(CSe,"STRONG",{});var x9t=s(BFe);a3r=r(x9t,"bart"),x9t.forEach(t),n3r=r(CSe," \u2014 "),AW=n(CSe,"A",{href:!0});var k9t=s(AW);s3r=r(k9t,"FlaxBartForCausalLM"),k9t.forEach(t),l3r=r(CSe," (BART model)"),CSe.forEach(t),i3r=i(_i),ZM=n(_i,"LI",{});var wSe=s(ZM);PFe=n(wSe,"STRONG",{});var S9t=s(PFe);d3r=r(S9t,"gpt2"),S9t.forEach(t),c3r=r(wSe," \u2014 "),yW=n(wSe,"A",{href:!0});var R9t=s(yW);f3r=r(R9t,"FlaxGPT2LMHeadModel"),R9t.forEach(t),m3r=r(wSe," (OpenAI GPT-2 model)"),wSe.forEach(t),g3r=i(_i),e4=n(_i,"LI",{});var ASe=s(e4);$Fe=n(ASe,"STRONG",{});var B9t=s($Fe);h3r=r(B9t,"gpt_neo"),B9t.forEach(t),p3r=r(ASe," \u2014 "),LW=n(ASe,"A",{href:!0});var P9t=s(LW);_3r=r(P9t,"FlaxGPTNeoForCausalLM"),P9t.forEach(t),u3r=r(ASe," (GPT Neo model)"),ASe.forEach(t),b3r=i(_i),o4=n(_i,"LI",{});var ySe=s(o4);IFe=n(ySe,"STRONG",{});var $9t=s(IFe);F3r=r($9t,"gptj"),$9t.forEach(t),v3r=r(ySe," \u2014 "),xW=n(ySe,"A",{href:!0});var I9t=s(xW);T3r=r(I9t,"FlaxGPTJForCausalLM"),I9t.forEach(t),M3r=r(ySe," (GPT-J model)"),ySe.forEach(t),E3r=i(_i),r4=n(_i,"LI",{});var LSe=s(r4);qFe=n(LSe,"STRONG",{});var q9t=s(qFe);C3r=r(q9t,"xglm"),q9t.forEach(t),w3r=r(LSe," \u2014 "),kW=n(LSe,"A",{href:!0});var N9t=s(kW);A3r=r(N9t,"FlaxXGLMForCausalLM"),N9t.forEach(t),y3r=r(LSe," (XGLM model)"),LSe.forEach(t),_i.forEach(t),L3r=i(xa),NFe=n(xa,"P",{});var j9t=s(NFe);x3r=r(j9t,"Examples:"),j9t.forEach(t),k3r=i(xa),m(iy.$$.fragment,xa),xa.forEach(t),hi.forEach(t),xPe=i(c),nf=n(c,"H2",{class:!0});var DIe=s(nf);t4=n(DIe,"A",{id:!0,class:!0,href:!0});var D9t=s(t4);jFe=n(D9t,"SPAN",{});var G9t=s(jFe);m(dy.$$.fragment,G9t),G9t.forEach(t),D9t.forEach(t),S3r=i(DIe),DFe=n(DIe,"SPAN",{});var O9t=s(DFe);R3r=r(O9t,"FlaxAutoModelForPreTraining"),O9t.forEach(t),DIe.forEach(t),kPe=i(c),Pr=n(c,"DIV",{class:!0});var ui=s(Pr);m(cy.$$.fragment,ui),B3r=i(ui),sf=n(ui,"P",{});var ZJ=s(sf);P3r=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),SW=n(ZJ,"A",{href:!0});var V9t=s(SW);$3r=r(V9t,"from_pretrained()"),V9t.forEach(t),I3r=r(ZJ," class method or the "),RW=n(ZJ,"A",{href:!0});var X9t=s(RW);q3r=r(X9t,"from_config()"),X9t.forEach(t),N3r=r(ZJ,` class
method.`),ZJ.forEach(t),j3r=i(ui),fy=n(ui,"P",{});var GIe=s(fy);D3r=r(GIe,"This class cannot be instantiated directly using "),GFe=n(GIe,"CODE",{});var z9t=s(GFe);G3r=r(z9t,"__init__()"),z9t.forEach(t),O3r=r(GIe," (throws an error)."),GIe.forEach(t),V3r=i(ui),Lt=n(ui,"DIV",{class:!0});var bi=s(Lt);m(my.$$.fragment,bi),X3r=i(bi),OFe=n(bi,"P",{});var Q9t=s(OFe);z3r=r(Q9t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Q9t.forEach(t),Q3r=i(bi),lf=n(bi,"P",{});var eY=s(lf);W3r=r(eY,`Note:
Loading a model from its configuration file does `),VFe=n(eY,"STRONG",{});var W9t=s(VFe);H3r=r(W9t,"not"),W9t.forEach(t),U3r=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=n(eY,"A",{href:!0});var H9t=s(BW);J3r=r(H9t,"from_pretrained()"),H9t.forEach(t),Y3r=r(eY," to load the model weights."),eY.forEach(t),K3r=i(bi),XFe=n(bi,"P",{});var U9t=s(XFe);Z3r=r(U9t,"Examples:"),U9t.forEach(t),eCr=i(bi),m(gy.$$.fragment,bi),bi.forEach(t),oCr=i(ui),xo=n(ui,"DIV",{class:!0});var ka=s(xo);m(hy.$$.fragment,ka),rCr=i(ka),zFe=n(ka,"P",{});var J9t=s(zFe);tCr=r(J9t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),J9t.forEach(t),aCr=i(ka),Sn=n(ka,"P",{});var T5=s(Sn);nCr=r(T5,"The model class to instantiate is selected based on the "),QFe=n(T5,"CODE",{});var Y9t=s(QFe);sCr=r(Y9t,"model_type"),Y9t.forEach(t),lCr=r(T5,` property of the config object (either
passed as an argument or loaded from `),WFe=n(T5,"CODE",{});var K9t=s(WFe);iCr=r(K9t,"pretrained_model_name_or_path"),K9t.forEach(t),dCr=r(T5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=n(T5,"CODE",{});var Z9t=s(HFe);cCr=r(Z9t,"pretrained_model_name_or_path"),Z9t.forEach(t),fCr=r(T5,":"),T5.forEach(t),mCr=i(ka),de=n(ka,"UL",{});var ge=s(de);a4=n(ge,"LI",{});var xSe=s(a4);UFe=n(xSe,"STRONG",{});var eMt=s(UFe);gCr=r(eMt,"albert"),eMt.forEach(t),hCr=r(xSe," \u2014 "),PW=n(xSe,"A",{href:!0});var oMt=s(PW);pCr=r(oMt,"FlaxAlbertForPreTraining"),oMt.forEach(t),_Cr=r(xSe," (ALBERT model)"),xSe.forEach(t),uCr=i(ge),n4=n(ge,"LI",{});var kSe=s(n4);JFe=n(kSe,"STRONG",{});var rMt=s(JFe);bCr=r(rMt,"bart"),rMt.forEach(t),FCr=r(kSe," \u2014 "),$W=n(kSe,"A",{href:!0});var tMt=s($W);vCr=r(tMt,"FlaxBartForConditionalGeneration"),tMt.forEach(t),TCr=r(kSe," (BART model)"),kSe.forEach(t),MCr=i(ge),s4=n(ge,"LI",{});var SSe=s(s4);YFe=n(SSe,"STRONG",{});var aMt=s(YFe);ECr=r(aMt,"bert"),aMt.forEach(t),CCr=r(SSe," \u2014 "),IW=n(SSe,"A",{href:!0});var nMt=s(IW);wCr=r(nMt,"FlaxBertForPreTraining"),nMt.forEach(t),ACr=r(SSe," (BERT model)"),SSe.forEach(t),yCr=i(ge),l4=n(ge,"LI",{});var RSe=s(l4);KFe=n(RSe,"STRONG",{});var sMt=s(KFe);LCr=r(sMt,"big_bird"),sMt.forEach(t),xCr=r(RSe," \u2014 "),qW=n(RSe,"A",{href:!0});var lMt=s(qW);kCr=r(lMt,"FlaxBigBirdForPreTraining"),lMt.forEach(t),SCr=r(RSe," (BigBird model)"),RSe.forEach(t),RCr=i(ge),i4=n(ge,"LI",{});var BSe=s(i4);ZFe=n(BSe,"STRONG",{});var iMt=s(ZFe);BCr=r(iMt,"electra"),iMt.forEach(t),PCr=r(BSe," \u2014 "),NW=n(BSe,"A",{href:!0});var dMt=s(NW);$Cr=r(dMt,"FlaxElectraForPreTraining"),dMt.forEach(t),ICr=r(BSe," (ELECTRA model)"),BSe.forEach(t),qCr=i(ge),d4=n(ge,"LI",{});var PSe=s(d4);eve=n(PSe,"STRONG",{});var cMt=s(eve);NCr=r(cMt,"longt5"),cMt.forEach(t),jCr=r(PSe," \u2014 "),jW=n(PSe,"A",{href:!0});var fMt=s(jW);DCr=r(fMt,"FlaxLongT5ForConditionalGeneration"),fMt.forEach(t),GCr=r(PSe," (LongT5 model)"),PSe.forEach(t),OCr=i(ge),c4=n(ge,"LI",{});var $Se=s(c4);ove=n($Se,"STRONG",{});var mMt=s(ove);VCr=r(mMt,"mbart"),mMt.forEach(t),XCr=r($Se," \u2014 "),DW=n($Se,"A",{href:!0});var gMt=s(DW);zCr=r(gMt,"FlaxMBartForConditionalGeneration"),gMt.forEach(t),QCr=r($Se," (mBART model)"),$Se.forEach(t),WCr=i(ge),f4=n(ge,"LI",{});var ISe=s(f4);rve=n(ISe,"STRONG",{});var hMt=s(rve);HCr=r(hMt,"mt5"),hMt.forEach(t),UCr=r(ISe," \u2014 "),GW=n(ISe,"A",{href:!0});var pMt=s(GW);JCr=r(pMt,"FlaxMT5ForConditionalGeneration"),pMt.forEach(t),YCr=r(ISe," (mT5 model)"),ISe.forEach(t),KCr=i(ge),m4=n(ge,"LI",{});var qSe=s(m4);tve=n(qSe,"STRONG",{});var _Mt=s(tve);ZCr=r(_Mt,"roberta"),_Mt.forEach(t),ewr=r(qSe," \u2014 "),OW=n(qSe,"A",{href:!0});var uMt=s(OW);owr=r(uMt,"FlaxRobertaForMaskedLM"),uMt.forEach(t),rwr=r(qSe," (RoBERTa model)"),qSe.forEach(t),twr=i(ge),g4=n(ge,"LI",{});var NSe=s(g4);ave=n(NSe,"STRONG",{});var bMt=s(ave);awr=r(bMt,"roformer"),bMt.forEach(t),nwr=r(NSe," \u2014 "),VW=n(NSe,"A",{href:!0});var FMt=s(VW);swr=r(FMt,"FlaxRoFormerForMaskedLM"),FMt.forEach(t),lwr=r(NSe," (RoFormer model)"),NSe.forEach(t),iwr=i(ge),h4=n(ge,"LI",{});var jSe=s(h4);nve=n(jSe,"STRONG",{});var vMt=s(nve);dwr=r(vMt,"t5"),vMt.forEach(t),cwr=r(jSe," \u2014 "),XW=n(jSe,"A",{href:!0});var TMt=s(XW);fwr=r(TMt,"FlaxT5ForConditionalGeneration"),TMt.forEach(t),mwr=r(jSe," (T5 model)"),jSe.forEach(t),gwr=i(ge),p4=n(ge,"LI",{});var DSe=s(p4);sve=n(DSe,"STRONG",{});var MMt=s(sve);hwr=r(MMt,"wav2vec2"),MMt.forEach(t),pwr=r(DSe," \u2014 "),zW=n(DSe,"A",{href:!0});var EMt=s(zW);_wr=r(EMt,"FlaxWav2Vec2ForPreTraining"),EMt.forEach(t),uwr=r(DSe," (Wav2Vec2 model)"),DSe.forEach(t),bwr=i(ge),_4=n(ge,"LI",{});var GSe=s(_4);lve=n(GSe,"STRONG",{});var CMt=s(lve);Fwr=r(CMt,"xlm-roberta"),CMt.forEach(t),vwr=r(GSe," \u2014 "),QW=n(GSe,"A",{href:!0});var wMt=s(QW);Twr=r(wMt,"FlaxXLMRobertaForMaskedLM"),wMt.forEach(t),Mwr=r(GSe," (XLM-RoBERTa model)"),GSe.forEach(t),ge.forEach(t),Ewr=i(ka),ive=n(ka,"P",{});var AMt=s(ive);Cwr=r(AMt,"Examples:"),AMt.forEach(t),wwr=i(ka),m(py.$$.fragment,ka),ka.forEach(t),ui.forEach(t),SPe=i(c),df=n(c,"H2",{class:!0});var OIe=s(df);u4=n(OIe,"A",{id:!0,class:!0,href:!0});var yMt=s(u4);dve=n(yMt,"SPAN",{});var LMt=s(dve);m(_y.$$.fragment,LMt),LMt.forEach(t),yMt.forEach(t),Awr=i(OIe),cve=n(OIe,"SPAN",{});var xMt=s(cve);ywr=r(xMt,"FlaxAutoModelForMaskedLM"),xMt.forEach(t),OIe.forEach(t),RPe=i(c),$r=n(c,"DIV",{class:!0});var Fi=s($r);m(uy.$$.fragment,Fi),Lwr=i(Fi),cf=n(Fi,"P",{});var oY=s(cf);xwr=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WW=n(oY,"A",{href:!0});var kMt=s(WW);kwr=r(kMt,"from_pretrained()"),kMt.forEach(t),Swr=r(oY," class method or the "),HW=n(oY,"A",{href:!0});var SMt=s(HW);Rwr=r(SMt,"from_config()"),SMt.forEach(t),Bwr=r(oY,` class
method.`),oY.forEach(t),Pwr=i(Fi),by=n(Fi,"P",{});var VIe=s(by);$wr=r(VIe,"This class cannot be instantiated directly using "),fve=n(VIe,"CODE",{});var RMt=s(fve);Iwr=r(RMt,"__init__()"),RMt.forEach(t),qwr=r(VIe," (throws an error)."),VIe.forEach(t),Nwr=i(Fi),xt=n(Fi,"DIV",{class:!0});var vi=s(xt);m(Fy.$$.fragment,vi),jwr=i(vi),mve=n(vi,"P",{});var BMt=s(mve);Dwr=r(BMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),BMt.forEach(t),Gwr=i(vi),ff=n(vi,"P",{});var rY=s(ff);Owr=r(rY,`Note:
Loading a model from its configuration file does `),gve=n(rY,"STRONG",{});var PMt=s(gve);Vwr=r(PMt,"not"),PMt.forEach(t),Xwr=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(rY,"A",{href:!0});var $Mt=s(UW);zwr=r($Mt,"from_pretrained()"),$Mt.forEach(t),Qwr=r(rY," to load the model weights."),rY.forEach(t),Wwr=i(vi),hve=n(vi,"P",{});var IMt=s(hve);Hwr=r(IMt,"Examples:"),IMt.forEach(t),Uwr=i(vi),m(vy.$$.fragment,vi),vi.forEach(t),Jwr=i(Fi),ko=n(Fi,"DIV",{class:!0});var Sa=s(ko);m(Ty.$$.fragment,Sa),Ywr=i(Sa),pve=n(Sa,"P",{});var qMt=s(pve);Kwr=r(qMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qMt.forEach(t),Zwr=i(Sa),Rn=n(Sa,"P",{});var M5=s(Rn);eAr=r(M5,"The model class to instantiate is selected based on the "),_ve=n(M5,"CODE",{});var NMt=s(_ve);oAr=r(NMt,"model_type"),NMt.forEach(t),rAr=r(M5,` property of the config object (either
passed as an argument or loaded from `),uve=n(M5,"CODE",{});var jMt=s(uve);tAr=r(jMt,"pretrained_model_name_or_path"),jMt.forEach(t),aAr=r(M5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=n(M5,"CODE",{});var DMt=s(bve);nAr=r(DMt,"pretrained_model_name_or_path"),DMt.forEach(t),sAr=r(M5,":"),M5.forEach(t),lAr=i(Sa),Fe=n(Sa,"UL",{});var Ae=s(Fe);b4=n(Ae,"LI",{});var OSe=s(b4);Fve=n(OSe,"STRONG",{});var GMt=s(Fve);iAr=r(GMt,"albert"),GMt.forEach(t),dAr=r(OSe," \u2014 "),JW=n(OSe,"A",{href:!0});var OMt=s(JW);cAr=r(OMt,"FlaxAlbertForMaskedLM"),OMt.forEach(t),fAr=r(OSe," (ALBERT model)"),OSe.forEach(t),mAr=i(Ae),F4=n(Ae,"LI",{});var VSe=s(F4);vve=n(VSe,"STRONG",{});var VMt=s(vve);gAr=r(VMt,"bart"),VMt.forEach(t),hAr=r(VSe," \u2014 "),YW=n(VSe,"A",{href:!0});var XMt=s(YW);pAr=r(XMt,"FlaxBartForConditionalGeneration"),XMt.forEach(t),_Ar=r(VSe," (BART model)"),VSe.forEach(t),uAr=i(Ae),v4=n(Ae,"LI",{});var XSe=s(v4);Tve=n(XSe,"STRONG",{});var zMt=s(Tve);bAr=r(zMt,"bert"),zMt.forEach(t),FAr=r(XSe," \u2014 "),KW=n(XSe,"A",{href:!0});var QMt=s(KW);vAr=r(QMt,"FlaxBertForMaskedLM"),QMt.forEach(t),TAr=r(XSe," (BERT model)"),XSe.forEach(t),MAr=i(Ae),T4=n(Ae,"LI",{});var zSe=s(T4);Mve=n(zSe,"STRONG",{});var WMt=s(Mve);EAr=r(WMt,"big_bird"),WMt.forEach(t),CAr=r(zSe," \u2014 "),ZW=n(zSe,"A",{href:!0});var HMt=s(ZW);wAr=r(HMt,"FlaxBigBirdForMaskedLM"),HMt.forEach(t),AAr=r(zSe," (BigBird model)"),zSe.forEach(t),yAr=i(Ae),M4=n(Ae,"LI",{});var QSe=s(M4);Eve=n(QSe,"STRONG",{});var UMt=s(Eve);LAr=r(UMt,"distilbert"),UMt.forEach(t),xAr=r(QSe," \u2014 "),eH=n(QSe,"A",{href:!0});var JMt=s(eH);kAr=r(JMt,"FlaxDistilBertForMaskedLM"),JMt.forEach(t),SAr=r(QSe," (DistilBERT model)"),QSe.forEach(t),RAr=i(Ae),E4=n(Ae,"LI",{});var WSe=s(E4);Cve=n(WSe,"STRONG",{});var YMt=s(Cve);BAr=r(YMt,"electra"),YMt.forEach(t),PAr=r(WSe," \u2014 "),oH=n(WSe,"A",{href:!0});var KMt=s(oH);$Ar=r(KMt,"FlaxElectraForMaskedLM"),KMt.forEach(t),IAr=r(WSe," (ELECTRA model)"),WSe.forEach(t),qAr=i(Ae),C4=n(Ae,"LI",{});var HSe=s(C4);wve=n(HSe,"STRONG",{});var ZMt=s(wve);NAr=r(ZMt,"mbart"),ZMt.forEach(t),jAr=r(HSe," \u2014 "),rH=n(HSe,"A",{href:!0});var e4t=s(rH);DAr=r(e4t,"FlaxMBartForConditionalGeneration"),e4t.forEach(t),GAr=r(HSe," (mBART model)"),HSe.forEach(t),OAr=i(Ae),w4=n(Ae,"LI",{});var USe=s(w4);Ave=n(USe,"STRONG",{});var o4t=s(Ave);VAr=r(o4t,"roberta"),o4t.forEach(t),XAr=r(USe," \u2014 "),tH=n(USe,"A",{href:!0});var r4t=s(tH);zAr=r(r4t,"FlaxRobertaForMaskedLM"),r4t.forEach(t),QAr=r(USe," (RoBERTa model)"),USe.forEach(t),WAr=i(Ae),A4=n(Ae,"LI",{});var JSe=s(A4);yve=n(JSe,"STRONG",{});var t4t=s(yve);HAr=r(t4t,"roformer"),t4t.forEach(t),UAr=r(JSe," \u2014 "),aH=n(JSe,"A",{href:!0});var a4t=s(aH);JAr=r(a4t,"FlaxRoFormerForMaskedLM"),a4t.forEach(t),YAr=r(JSe," (RoFormer model)"),JSe.forEach(t),KAr=i(Ae),y4=n(Ae,"LI",{});var YSe=s(y4);Lve=n(YSe,"STRONG",{});var n4t=s(Lve);ZAr=r(n4t,"xlm-roberta"),n4t.forEach(t),e0r=r(YSe," \u2014 "),nH=n(YSe,"A",{href:!0});var s4t=s(nH);o0r=r(s4t,"FlaxXLMRobertaForMaskedLM"),s4t.forEach(t),r0r=r(YSe," (XLM-RoBERTa model)"),YSe.forEach(t),Ae.forEach(t),t0r=i(Sa),xve=n(Sa,"P",{});var l4t=s(xve);a0r=r(l4t,"Examples:"),l4t.forEach(t),n0r=i(Sa),m(My.$$.fragment,Sa),Sa.forEach(t),Fi.forEach(t),BPe=i(c),mf=n(c,"H2",{class:!0});var XIe=s(mf);L4=n(XIe,"A",{id:!0,class:!0,href:!0});var i4t=s(L4);kve=n(i4t,"SPAN",{});var d4t=s(kve);m(Ey.$$.fragment,d4t),d4t.forEach(t),i4t.forEach(t),s0r=i(XIe),Sve=n(XIe,"SPAN",{});var c4t=s(Sve);l0r=r(c4t,"FlaxAutoModelForSeq2SeqLM"),c4t.forEach(t),XIe.forEach(t),PPe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(Cy.$$.fragment,Ti),i0r=i(Ti),gf=n(Ti,"P",{});var tY=s(gf);d0r=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sH=n(tY,"A",{href:!0});var f4t=s(sH);c0r=r(f4t,"from_pretrained()"),f4t.forEach(t),f0r=r(tY," class method or the "),lH=n(tY,"A",{href:!0});var m4t=s(lH);m0r=r(m4t,"from_config()"),m4t.forEach(t),g0r=r(tY,` class
method.`),tY.forEach(t),h0r=i(Ti),wy=n(Ti,"P",{});var zIe=s(wy);p0r=r(zIe,"This class cannot be instantiated directly using "),Rve=n(zIe,"CODE",{});var g4t=s(Rve);_0r=r(g4t,"__init__()"),g4t.forEach(t),u0r=r(zIe," (throws an error)."),zIe.forEach(t),b0r=i(Ti),kt=n(Ti,"DIV",{class:!0});var Mi=s(kt);m(Ay.$$.fragment,Mi),F0r=i(Mi),Bve=n(Mi,"P",{});var h4t=s(Bve);v0r=r(h4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),h4t.forEach(t),T0r=i(Mi),hf=n(Mi,"P",{});var aY=s(hf);M0r=r(aY,`Note:
Loading a model from its configuration file does `),Pve=n(aY,"STRONG",{});var p4t=s(Pve);E0r=r(p4t,"not"),p4t.forEach(t),C0r=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=n(aY,"A",{href:!0});var _4t=s(iH);w0r=r(_4t,"from_pretrained()"),_4t.forEach(t),A0r=r(aY," to load the model weights."),aY.forEach(t),y0r=i(Mi),$ve=n(Mi,"P",{});var u4t=s($ve);L0r=r(u4t,"Examples:"),u4t.forEach(t),x0r=i(Mi),m(yy.$$.fragment,Mi),Mi.forEach(t),k0r=i(Ti),So=n(Ti,"DIV",{class:!0});var Ra=s(So);m(Ly.$$.fragment,Ra),S0r=i(Ra),Ive=n(Ra,"P",{});var b4t=s(Ive);R0r=r(b4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),b4t.forEach(t),B0r=i(Ra),Bn=n(Ra,"P",{});var E5=s(Bn);P0r=r(E5,"The model class to instantiate is selected based on the "),qve=n(E5,"CODE",{});var F4t=s(qve);$0r=r(F4t,"model_type"),F4t.forEach(t),I0r=r(E5,` property of the config object (either
passed as an argument or loaded from `),Nve=n(E5,"CODE",{});var v4t=s(Nve);q0r=r(v4t,"pretrained_model_name_or_path"),v4t.forEach(t),N0r=r(E5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=n(E5,"CODE",{});var T4t=s(jve);j0r=r(T4t,"pretrained_model_name_or_path"),T4t.forEach(t),D0r=r(E5,":"),E5.forEach(t),G0r=i(Ra),ve=n(Ra,"UL",{});var ye=s(ve);x4=n(ye,"LI",{});var KSe=s(x4);Dve=n(KSe,"STRONG",{});var M4t=s(Dve);O0r=r(M4t,"bart"),M4t.forEach(t),V0r=r(KSe," \u2014 "),dH=n(KSe,"A",{href:!0});var E4t=s(dH);X0r=r(E4t,"FlaxBartForConditionalGeneration"),E4t.forEach(t),z0r=r(KSe," (BART model)"),KSe.forEach(t),Q0r=i(ye),k4=n(ye,"LI",{});var ZSe=s(k4);Gve=n(ZSe,"STRONG",{});var C4t=s(Gve);W0r=r(C4t,"blenderbot"),C4t.forEach(t),H0r=r(ZSe," \u2014 "),cH=n(ZSe,"A",{href:!0});var w4t=s(cH);U0r=r(w4t,"FlaxBlenderbotForConditionalGeneration"),w4t.forEach(t),J0r=r(ZSe," (Blenderbot model)"),ZSe.forEach(t),Y0r=i(ye),S4=n(ye,"LI",{});var eRe=s(S4);Ove=n(eRe,"STRONG",{});var A4t=s(Ove);K0r=r(A4t,"blenderbot-small"),A4t.forEach(t),Z0r=r(eRe," \u2014 "),fH=n(eRe,"A",{href:!0});var y4t=s(fH);eyr=r(y4t,"FlaxBlenderbotSmallForConditionalGeneration"),y4t.forEach(t),oyr=r(eRe," (BlenderbotSmall model)"),eRe.forEach(t),ryr=i(ye),R4=n(ye,"LI",{});var oRe=s(R4);Vve=n(oRe,"STRONG",{});var L4t=s(Vve);tyr=r(L4t,"encoder-decoder"),L4t.forEach(t),ayr=r(oRe," \u2014 "),mH=n(oRe,"A",{href:!0});var x4t=s(mH);nyr=r(x4t,"FlaxEncoderDecoderModel"),x4t.forEach(t),syr=r(oRe," (Encoder decoder model)"),oRe.forEach(t),lyr=i(ye),B4=n(ye,"LI",{});var rRe=s(B4);Xve=n(rRe,"STRONG",{});var k4t=s(Xve);iyr=r(k4t,"longt5"),k4t.forEach(t),dyr=r(rRe," \u2014 "),gH=n(rRe,"A",{href:!0});var S4t=s(gH);cyr=r(S4t,"FlaxLongT5ForConditionalGeneration"),S4t.forEach(t),fyr=r(rRe," (LongT5 model)"),rRe.forEach(t),myr=i(ye),P4=n(ye,"LI",{});var tRe=s(P4);zve=n(tRe,"STRONG",{});var R4t=s(zve);gyr=r(R4t,"marian"),R4t.forEach(t),hyr=r(tRe," \u2014 "),hH=n(tRe,"A",{href:!0});var B4t=s(hH);pyr=r(B4t,"FlaxMarianMTModel"),B4t.forEach(t),_yr=r(tRe," (Marian model)"),tRe.forEach(t),uyr=i(ye),$4=n(ye,"LI",{});var aRe=s($4);Qve=n(aRe,"STRONG",{});var P4t=s(Qve);byr=r(P4t,"mbart"),P4t.forEach(t),Fyr=r(aRe," \u2014 "),pH=n(aRe,"A",{href:!0});var $4t=s(pH);vyr=r($4t,"FlaxMBartForConditionalGeneration"),$4t.forEach(t),Tyr=r(aRe," (mBART model)"),aRe.forEach(t),Myr=i(ye),I4=n(ye,"LI",{});var nRe=s(I4);Wve=n(nRe,"STRONG",{});var I4t=s(Wve);Eyr=r(I4t,"mt5"),I4t.forEach(t),Cyr=r(nRe," \u2014 "),_H=n(nRe,"A",{href:!0});var q4t=s(_H);wyr=r(q4t,"FlaxMT5ForConditionalGeneration"),q4t.forEach(t),Ayr=r(nRe," (mT5 model)"),nRe.forEach(t),yyr=i(ye),q4=n(ye,"LI",{});var sRe=s(q4);Hve=n(sRe,"STRONG",{});var N4t=s(Hve);Lyr=r(N4t,"pegasus"),N4t.forEach(t),xyr=r(sRe," \u2014 "),uH=n(sRe,"A",{href:!0});var j4t=s(uH);kyr=r(j4t,"FlaxPegasusForConditionalGeneration"),j4t.forEach(t),Syr=r(sRe," (Pegasus model)"),sRe.forEach(t),Ryr=i(ye),N4=n(ye,"LI",{});var lRe=s(N4);Uve=n(lRe,"STRONG",{});var D4t=s(Uve);Byr=r(D4t,"t5"),D4t.forEach(t),Pyr=r(lRe," \u2014 "),bH=n(lRe,"A",{href:!0});var G4t=s(bH);$yr=r(G4t,"FlaxT5ForConditionalGeneration"),G4t.forEach(t),Iyr=r(lRe," (T5 model)"),lRe.forEach(t),ye.forEach(t),qyr=i(Ra),Jve=n(Ra,"P",{});var O4t=s(Jve);Nyr=r(O4t,"Examples:"),O4t.forEach(t),jyr=i(Ra),m(xy.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),$Pe=i(c),pf=n(c,"H2",{class:!0});var QIe=s(pf);j4=n(QIe,"A",{id:!0,class:!0,href:!0});var V4t=s(j4);Yve=n(V4t,"SPAN",{});var X4t=s(Yve);m(ky.$$.fragment,X4t),X4t.forEach(t),V4t.forEach(t),Dyr=i(QIe),Kve=n(QIe,"SPAN",{});var z4t=s(Kve);Gyr=r(z4t,"FlaxAutoModelForSequenceClassification"),z4t.forEach(t),QIe.forEach(t),IPe=i(c),qr=n(c,"DIV",{class:!0});var Ei=s(qr);m(Sy.$$.fragment,Ei),Oyr=i(Ei),_f=n(Ei,"P",{});var nY=s(_f);Vyr=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FH=n(nY,"A",{href:!0});var Q4t=s(FH);Xyr=r(Q4t,"from_pretrained()"),Q4t.forEach(t),zyr=r(nY," class method or the "),vH=n(nY,"A",{href:!0});var W4t=s(vH);Qyr=r(W4t,"from_config()"),W4t.forEach(t),Wyr=r(nY,` class
method.`),nY.forEach(t),Hyr=i(Ei),Ry=n(Ei,"P",{});var WIe=s(Ry);Uyr=r(WIe,"This class cannot be instantiated directly using "),Zve=n(WIe,"CODE",{});var H4t=s(Zve);Jyr=r(H4t,"__init__()"),H4t.forEach(t),Yyr=r(WIe," (throws an error)."),WIe.forEach(t),Kyr=i(Ei),St=n(Ei,"DIV",{class:!0});var Ci=s(St);m(By.$$.fragment,Ci),Zyr=i(Ci),eTe=n(Ci,"P",{});var U4t=s(eTe);eLr=r(U4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),U4t.forEach(t),oLr=i(Ci),uf=n(Ci,"P",{});var sY=s(uf);rLr=r(sY,`Note:
Loading a model from its configuration file does `),oTe=n(sY,"STRONG",{});var J4t=s(oTe);tLr=r(J4t,"not"),J4t.forEach(t),aLr=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=n(sY,"A",{href:!0});var Y4t=s(TH);nLr=r(Y4t,"from_pretrained()"),Y4t.forEach(t),sLr=r(sY," to load the model weights."),sY.forEach(t),lLr=i(Ci),rTe=n(Ci,"P",{});var K4t=s(rTe);iLr=r(K4t,"Examples:"),K4t.forEach(t),dLr=i(Ci),m(Py.$$.fragment,Ci),Ci.forEach(t),cLr=i(Ei),Ro=n(Ei,"DIV",{class:!0});var Ba=s(Ro);m($y.$$.fragment,Ba),fLr=i(Ba),tTe=n(Ba,"P",{});var Z4t=s(tTe);mLr=r(Z4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Z4t.forEach(t),gLr=i(Ba),Pn=n(Ba,"P",{});var C5=s(Pn);hLr=r(C5,"The model class to instantiate is selected based on the "),aTe=n(C5,"CODE",{});var eEt=s(aTe);pLr=r(eEt,"model_type"),eEt.forEach(t),_Lr=r(C5,` property of the config object (either
passed as an argument or loaded from `),nTe=n(C5,"CODE",{});var oEt=s(nTe);uLr=r(oEt,"pretrained_model_name_or_path"),oEt.forEach(t),bLr=r(C5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=n(C5,"CODE",{});var rEt=s(sTe);FLr=r(rEt,"pretrained_model_name_or_path"),rEt.forEach(t),vLr=r(C5,":"),C5.forEach(t),TLr=i(Ba),Te=n(Ba,"UL",{});var Le=s(Te);D4=n(Le,"LI",{});var iRe=s(D4);lTe=n(iRe,"STRONG",{});var tEt=s(lTe);MLr=r(tEt,"albert"),tEt.forEach(t),ELr=r(iRe," \u2014 "),MH=n(iRe,"A",{href:!0});var aEt=s(MH);CLr=r(aEt,"FlaxAlbertForSequenceClassification"),aEt.forEach(t),wLr=r(iRe," (ALBERT model)"),iRe.forEach(t),ALr=i(Le),G4=n(Le,"LI",{});var dRe=s(G4);iTe=n(dRe,"STRONG",{});var nEt=s(iTe);yLr=r(nEt,"bart"),nEt.forEach(t),LLr=r(dRe," \u2014 "),EH=n(dRe,"A",{href:!0});var sEt=s(EH);xLr=r(sEt,"FlaxBartForSequenceClassification"),sEt.forEach(t),kLr=r(dRe," (BART model)"),dRe.forEach(t),SLr=i(Le),O4=n(Le,"LI",{});var cRe=s(O4);dTe=n(cRe,"STRONG",{});var lEt=s(dTe);RLr=r(lEt,"bert"),lEt.forEach(t),BLr=r(cRe," \u2014 "),CH=n(cRe,"A",{href:!0});var iEt=s(CH);PLr=r(iEt,"FlaxBertForSequenceClassification"),iEt.forEach(t),$Lr=r(cRe," (BERT model)"),cRe.forEach(t),ILr=i(Le),V4=n(Le,"LI",{});var fRe=s(V4);cTe=n(fRe,"STRONG",{});var dEt=s(cTe);qLr=r(dEt,"big_bird"),dEt.forEach(t),NLr=r(fRe," \u2014 "),wH=n(fRe,"A",{href:!0});var cEt=s(wH);jLr=r(cEt,"FlaxBigBirdForSequenceClassification"),cEt.forEach(t),DLr=r(fRe," (BigBird model)"),fRe.forEach(t),GLr=i(Le),X4=n(Le,"LI",{});var mRe=s(X4);fTe=n(mRe,"STRONG",{});var fEt=s(fTe);OLr=r(fEt,"distilbert"),fEt.forEach(t),VLr=r(mRe," \u2014 "),AH=n(mRe,"A",{href:!0});var mEt=s(AH);XLr=r(mEt,"FlaxDistilBertForSequenceClassification"),mEt.forEach(t),zLr=r(mRe," (DistilBERT model)"),mRe.forEach(t),QLr=i(Le),z4=n(Le,"LI",{});var gRe=s(z4);mTe=n(gRe,"STRONG",{});var gEt=s(mTe);WLr=r(gEt,"electra"),gEt.forEach(t),HLr=r(gRe," \u2014 "),yH=n(gRe,"A",{href:!0});var hEt=s(yH);ULr=r(hEt,"FlaxElectraForSequenceClassification"),hEt.forEach(t),JLr=r(gRe," (ELECTRA model)"),gRe.forEach(t),YLr=i(Le),Q4=n(Le,"LI",{});var hRe=s(Q4);gTe=n(hRe,"STRONG",{});var pEt=s(gTe);KLr=r(pEt,"mbart"),pEt.forEach(t),ZLr=r(hRe," \u2014 "),LH=n(hRe,"A",{href:!0});var _Et=s(LH);e8r=r(_Et,"FlaxMBartForSequenceClassification"),_Et.forEach(t),o8r=r(hRe," (mBART model)"),hRe.forEach(t),r8r=i(Le),W4=n(Le,"LI",{});var pRe=s(W4);hTe=n(pRe,"STRONG",{});var uEt=s(hTe);t8r=r(uEt,"roberta"),uEt.forEach(t),a8r=r(pRe," \u2014 "),xH=n(pRe,"A",{href:!0});var bEt=s(xH);n8r=r(bEt,"FlaxRobertaForSequenceClassification"),bEt.forEach(t),s8r=r(pRe," (RoBERTa model)"),pRe.forEach(t),l8r=i(Le),H4=n(Le,"LI",{});var _Re=s(H4);pTe=n(_Re,"STRONG",{});var FEt=s(pTe);i8r=r(FEt,"roformer"),FEt.forEach(t),d8r=r(_Re," \u2014 "),kH=n(_Re,"A",{href:!0});var vEt=s(kH);c8r=r(vEt,"FlaxRoFormerForSequenceClassification"),vEt.forEach(t),f8r=r(_Re," (RoFormer model)"),_Re.forEach(t),m8r=i(Le),U4=n(Le,"LI",{});var uRe=s(U4);_Te=n(uRe,"STRONG",{});var TEt=s(_Te);g8r=r(TEt,"xlm-roberta"),TEt.forEach(t),h8r=r(uRe," \u2014 "),SH=n(uRe,"A",{href:!0});var MEt=s(SH);p8r=r(MEt,"FlaxXLMRobertaForSequenceClassification"),MEt.forEach(t),_8r=r(uRe," (XLM-RoBERTa model)"),uRe.forEach(t),Le.forEach(t),u8r=i(Ba),uTe=n(Ba,"P",{});var EEt=s(uTe);b8r=r(EEt,"Examples:"),EEt.forEach(t),F8r=i(Ba),m(Iy.$$.fragment,Ba),Ba.forEach(t),Ei.forEach(t),qPe=i(c),bf=n(c,"H2",{class:!0});var HIe=s(bf);J4=n(HIe,"A",{id:!0,class:!0,href:!0});var CEt=s(J4);bTe=n(CEt,"SPAN",{});var wEt=s(bTe);m(qy.$$.fragment,wEt),wEt.forEach(t),CEt.forEach(t),v8r=i(HIe),FTe=n(HIe,"SPAN",{});var AEt=s(FTe);T8r=r(AEt,"FlaxAutoModelForQuestionAnswering"),AEt.forEach(t),HIe.forEach(t),NPe=i(c),Nr=n(c,"DIV",{class:!0});var wi=s(Nr);m(Ny.$$.fragment,wi),M8r=i(wi),Ff=n(wi,"P",{});var lY=s(Ff);E8r=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),RH=n(lY,"A",{href:!0});var yEt=s(RH);C8r=r(yEt,"from_pretrained()"),yEt.forEach(t),w8r=r(lY," class method or the "),BH=n(lY,"A",{href:!0});var LEt=s(BH);A8r=r(LEt,"from_config()"),LEt.forEach(t),y8r=r(lY,` class
method.`),lY.forEach(t),L8r=i(wi),jy=n(wi,"P",{});var UIe=s(jy);x8r=r(UIe,"This class cannot be instantiated directly using "),vTe=n(UIe,"CODE",{});var xEt=s(vTe);k8r=r(xEt,"__init__()"),xEt.forEach(t),S8r=r(UIe," (throws an error)."),UIe.forEach(t),R8r=i(wi),Rt=n(wi,"DIV",{class:!0});var Ai=s(Rt);m(Dy.$$.fragment,Ai),B8r=i(Ai),TTe=n(Ai,"P",{});var kEt=s(TTe);P8r=r(kEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kEt.forEach(t),$8r=i(Ai),vf=n(Ai,"P",{});var iY=s(vf);I8r=r(iY,`Note:
Loading a model from its configuration file does `),MTe=n(iY,"STRONG",{});var SEt=s(MTe);q8r=r(SEt,"not"),SEt.forEach(t),N8r=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=n(iY,"A",{href:!0});var REt=s(PH);j8r=r(REt,"from_pretrained()"),REt.forEach(t),D8r=r(iY," to load the model weights."),iY.forEach(t),G8r=i(Ai),ETe=n(Ai,"P",{});var BEt=s(ETe);O8r=r(BEt,"Examples:"),BEt.forEach(t),V8r=i(Ai),m(Gy.$$.fragment,Ai),Ai.forEach(t),X8r=i(wi),Bo=n(wi,"DIV",{class:!0});var Pa=s(Bo);m(Oy.$$.fragment,Pa),z8r=i(Pa),CTe=n(Pa,"P",{});var PEt=s(CTe);Q8r=r(PEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),PEt.forEach(t),W8r=i(Pa),$n=n(Pa,"P",{});var w5=s($n);H8r=r(w5,"The model class to instantiate is selected based on the "),wTe=n(w5,"CODE",{});var $Et=s(wTe);U8r=r($Et,"model_type"),$Et.forEach(t),J8r=r(w5,` property of the config object (either
passed as an argument or loaded from `),ATe=n(w5,"CODE",{});var IEt=s(ATe);Y8r=r(IEt,"pretrained_model_name_or_path"),IEt.forEach(t),K8r=r(w5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=n(w5,"CODE",{});var qEt=s(yTe);Z8r=r(qEt,"pretrained_model_name_or_path"),qEt.forEach(t),exr=r(w5,":"),w5.forEach(t),oxr=i(Pa),Me=n(Pa,"UL",{});var xe=s(Me);Y4=n(xe,"LI",{});var bRe=s(Y4);LTe=n(bRe,"STRONG",{});var NEt=s(LTe);rxr=r(NEt,"albert"),NEt.forEach(t),txr=r(bRe," \u2014 "),$H=n(bRe,"A",{href:!0});var jEt=s($H);axr=r(jEt,"FlaxAlbertForQuestionAnswering"),jEt.forEach(t),nxr=r(bRe," (ALBERT model)"),bRe.forEach(t),sxr=i(xe),K4=n(xe,"LI",{});var FRe=s(K4);xTe=n(FRe,"STRONG",{});var DEt=s(xTe);lxr=r(DEt,"bart"),DEt.forEach(t),ixr=r(FRe," \u2014 "),IH=n(FRe,"A",{href:!0});var GEt=s(IH);dxr=r(GEt,"FlaxBartForQuestionAnswering"),GEt.forEach(t),cxr=r(FRe," (BART model)"),FRe.forEach(t),fxr=i(xe),Z4=n(xe,"LI",{});var vRe=s(Z4);kTe=n(vRe,"STRONG",{});var OEt=s(kTe);mxr=r(OEt,"bert"),OEt.forEach(t),gxr=r(vRe," \u2014 "),qH=n(vRe,"A",{href:!0});var VEt=s(qH);hxr=r(VEt,"FlaxBertForQuestionAnswering"),VEt.forEach(t),pxr=r(vRe," (BERT model)"),vRe.forEach(t),_xr=i(xe),eE=n(xe,"LI",{});var TRe=s(eE);STe=n(TRe,"STRONG",{});var XEt=s(STe);uxr=r(XEt,"big_bird"),XEt.forEach(t),bxr=r(TRe," \u2014 "),NH=n(TRe,"A",{href:!0});var zEt=s(NH);Fxr=r(zEt,"FlaxBigBirdForQuestionAnswering"),zEt.forEach(t),vxr=r(TRe," (BigBird model)"),TRe.forEach(t),Txr=i(xe),oE=n(xe,"LI",{});var MRe=s(oE);RTe=n(MRe,"STRONG",{});var QEt=s(RTe);Mxr=r(QEt,"distilbert"),QEt.forEach(t),Exr=r(MRe," \u2014 "),jH=n(MRe,"A",{href:!0});var WEt=s(jH);Cxr=r(WEt,"FlaxDistilBertForQuestionAnswering"),WEt.forEach(t),wxr=r(MRe," (DistilBERT model)"),MRe.forEach(t),Axr=i(xe),rE=n(xe,"LI",{});var ERe=s(rE);BTe=n(ERe,"STRONG",{});var HEt=s(BTe);yxr=r(HEt,"electra"),HEt.forEach(t),Lxr=r(ERe," \u2014 "),DH=n(ERe,"A",{href:!0});var UEt=s(DH);xxr=r(UEt,"FlaxElectraForQuestionAnswering"),UEt.forEach(t),kxr=r(ERe," (ELECTRA model)"),ERe.forEach(t),Sxr=i(xe),tE=n(xe,"LI",{});var CRe=s(tE);PTe=n(CRe,"STRONG",{});var JEt=s(PTe);Rxr=r(JEt,"mbart"),JEt.forEach(t),Bxr=r(CRe," \u2014 "),GH=n(CRe,"A",{href:!0});var YEt=s(GH);Pxr=r(YEt,"FlaxMBartForQuestionAnswering"),YEt.forEach(t),$xr=r(CRe," (mBART model)"),CRe.forEach(t),Ixr=i(xe),aE=n(xe,"LI",{});var wRe=s(aE);$Te=n(wRe,"STRONG",{});var KEt=s($Te);qxr=r(KEt,"roberta"),KEt.forEach(t),Nxr=r(wRe," \u2014 "),OH=n(wRe,"A",{href:!0});var ZEt=s(OH);jxr=r(ZEt,"FlaxRobertaForQuestionAnswering"),ZEt.forEach(t),Dxr=r(wRe," (RoBERTa model)"),wRe.forEach(t),Gxr=i(xe),nE=n(xe,"LI",{});var ARe=s(nE);ITe=n(ARe,"STRONG",{});var e5t=s(ITe);Oxr=r(e5t,"roformer"),e5t.forEach(t),Vxr=r(ARe," \u2014 "),VH=n(ARe,"A",{href:!0});var o5t=s(VH);Xxr=r(o5t,"FlaxRoFormerForQuestionAnswering"),o5t.forEach(t),zxr=r(ARe," (RoFormer model)"),ARe.forEach(t),Qxr=i(xe),sE=n(xe,"LI",{});var yRe=s(sE);qTe=n(yRe,"STRONG",{});var r5t=s(qTe);Wxr=r(r5t,"xlm-roberta"),r5t.forEach(t),Hxr=r(yRe," \u2014 "),XH=n(yRe,"A",{href:!0});var t5t=s(XH);Uxr=r(t5t,"FlaxXLMRobertaForQuestionAnswering"),t5t.forEach(t),Jxr=r(yRe," (XLM-RoBERTa model)"),yRe.forEach(t),xe.forEach(t),Yxr=i(Pa),NTe=n(Pa,"P",{});var a5t=s(NTe);Kxr=r(a5t,"Examples:"),a5t.forEach(t),Zxr=i(Pa),m(Vy.$$.fragment,Pa),Pa.forEach(t),wi.forEach(t),jPe=i(c),Tf=n(c,"H2",{class:!0});var JIe=s(Tf);lE=n(JIe,"A",{id:!0,class:!0,href:!0});var n5t=s(lE);jTe=n(n5t,"SPAN",{});var s5t=s(jTe);m(Xy.$$.fragment,s5t),s5t.forEach(t),n5t.forEach(t),ekr=i(JIe),DTe=n(JIe,"SPAN",{});var l5t=s(DTe);okr=r(l5t,"FlaxAutoModelForTokenClassification"),l5t.forEach(t),JIe.forEach(t),DPe=i(c),jr=n(c,"DIV",{class:!0});var yi=s(jr);m(zy.$$.fragment,yi),rkr=i(yi),Mf=n(yi,"P",{});var dY=s(Mf);tkr=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zH=n(dY,"A",{href:!0});var i5t=s(zH);akr=r(i5t,"from_pretrained()"),i5t.forEach(t),nkr=r(dY," class method or the "),QH=n(dY,"A",{href:!0});var d5t=s(QH);skr=r(d5t,"from_config()"),d5t.forEach(t),lkr=r(dY,` class
method.`),dY.forEach(t),ikr=i(yi),Qy=n(yi,"P",{});var YIe=s(Qy);dkr=r(YIe,"This class cannot be instantiated directly using "),GTe=n(YIe,"CODE",{});var c5t=s(GTe);ckr=r(c5t,"__init__()"),c5t.forEach(t),fkr=r(YIe," (throws an error)."),YIe.forEach(t),mkr=i(yi),Bt=n(yi,"DIV",{class:!0});var Li=s(Bt);m(Wy.$$.fragment,Li),gkr=i(Li),OTe=n(Li,"P",{});var f5t=s(OTe);hkr=r(f5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),f5t.forEach(t),pkr=i(Li),Ef=n(Li,"P",{});var cY=s(Ef);_kr=r(cY,`Note:
Loading a model from its configuration file does `),VTe=n(cY,"STRONG",{});var m5t=s(VTe);ukr=r(m5t,"not"),m5t.forEach(t),bkr=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(cY,"A",{href:!0});var g5t=s(WH);Fkr=r(g5t,"from_pretrained()"),g5t.forEach(t),vkr=r(cY," to load the model weights."),cY.forEach(t),Tkr=i(Li),XTe=n(Li,"P",{});var h5t=s(XTe);Mkr=r(h5t,"Examples:"),h5t.forEach(t),Ekr=i(Li),m(Hy.$$.fragment,Li),Li.forEach(t),Ckr=i(yi),Po=n(yi,"DIV",{class:!0});var $a=s(Po);m(Uy.$$.fragment,$a),wkr=i($a),zTe=n($a,"P",{});var p5t=s(zTe);Akr=r(p5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),p5t.forEach(t),ykr=i($a),In=n($a,"P",{});var A5=s(In);Lkr=r(A5,"The model class to instantiate is selected based on the "),QTe=n(A5,"CODE",{});var _5t=s(QTe);xkr=r(_5t,"model_type"),_5t.forEach(t),kkr=r(A5,` property of the config object (either
passed as an argument or loaded from `),WTe=n(A5,"CODE",{});var u5t=s(WTe);Skr=r(u5t,"pretrained_model_name_or_path"),u5t.forEach(t),Rkr=r(A5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=n(A5,"CODE",{});var b5t=s(HTe);Bkr=r(b5t,"pretrained_model_name_or_path"),b5t.forEach(t),Pkr=r(A5,":"),A5.forEach(t),$kr=i($a),Pe=n($a,"UL",{});var Oo=s(Pe);iE=n(Oo,"LI",{});var LRe=s(iE);UTe=n(LRe,"STRONG",{});var F5t=s(UTe);Ikr=r(F5t,"albert"),F5t.forEach(t),qkr=r(LRe," \u2014 "),HH=n(LRe,"A",{href:!0});var v5t=s(HH);Nkr=r(v5t,"FlaxAlbertForTokenClassification"),v5t.forEach(t),jkr=r(LRe," (ALBERT model)"),LRe.forEach(t),Dkr=i(Oo),dE=n(Oo,"LI",{});var xRe=s(dE);JTe=n(xRe,"STRONG",{});var T5t=s(JTe);Gkr=r(T5t,"bert"),T5t.forEach(t),Okr=r(xRe," \u2014 "),UH=n(xRe,"A",{href:!0});var M5t=s(UH);Vkr=r(M5t,"FlaxBertForTokenClassification"),M5t.forEach(t),Xkr=r(xRe," (BERT model)"),xRe.forEach(t),zkr=i(Oo),cE=n(Oo,"LI",{});var kRe=s(cE);YTe=n(kRe,"STRONG",{});var E5t=s(YTe);Qkr=r(E5t,"big_bird"),E5t.forEach(t),Wkr=r(kRe," \u2014 "),JH=n(kRe,"A",{href:!0});var C5t=s(JH);Hkr=r(C5t,"FlaxBigBirdForTokenClassification"),C5t.forEach(t),Ukr=r(kRe," (BigBird model)"),kRe.forEach(t),Jkr=i(Oo),fE=n(Oo,"LI",{});var SRe=s(fE);KTe=n(SRe,"STRONG",{});var w5t=s(KTe);Ykr=r(w5t,"distilbert"),w5t.forEach(t),Kkr=r(SRe," \u2014 "),YH=n(SRe,"A",{href:!0});var A5t=s(YH);Zkr=r(A5t,"FlaxDistilBertForTokenClassification"),A5t.forEach(t),eSr=r(SRe," (DistilBERT model)"),SRe.forEach(t),oSr=i(Oo),mE=n(Oo,"LI",{});var RRe=s(mE);ZTe=n(RRe,"STRONG",{});var y5t=s(ZTe);rSr=r(y5t,"electra"),y5t.forEach(t),tSr=r(RRe," \u2014 "),KH=n(RRe,"A",{href:!0});var L5t=s(KH);aSr=r(L5t,"FlaxElectraForTokenClassification"),L5t.forEach(t),nSr=r(RRe," (ELECTRA model)"),RRe.forEach(t),sSr=i(Oo),gE=n(Oo,"LI",{});var BRe=s(gE);e7e=n(BRe,"STRONG",{});var x5t=s(e7e);lSr=r(x5t,"roberta"),x5t.forEach(t),iSr=r(BRe," \u2014 "),ZH=n(BRe,"A",{href:!0});var k5t=s(ZH);dSr=r(k5t,"FlaxRobertaForTokenClassification"),k5t.forEach(t),cSr=r(BRe," (RoBERTa model)"),BRe.forEach(t),fSr=i(Oo),hE=n(Oo,"LI",{});var PRe=s(hE);o7e=n(PRe,"STRONG",{});var S5t=s(o7e);mSr=r(S5t,"roformer"),S5t.forEach(t),gSr=r(PRe," \u2014 "),eU=n(PRe,"A",{href:!0});var R5t=s(eU);hSr=r(R5t,"FlaxRoFormerForTokenClassification"),R5t.forEach(t),pSr=r(PRe," (RoFormer model)"),PRe.forEach(t),_Sr=i(Oo),pE=n(Oo,"LI",{});var $Re=s(pE);r7e=n($Re,"STRONG",{});var B5t=s(r7e);uSr=r(B5t,"xlm-roberta"),B5t.forEach(t),bSr=r($Re," \u2014 "),oU=n($Re,"A",{href:!0});var P5t=s(oU);FSr=r(P5t,"FlaxXLMRobertaForTokenClassification"),P5t.forEach(t),vSr=r($Re," (XLM-RoBERTa model)"),$Re.forEach(t),Oo.forEach(t),TSr=i($a),t7e=n($a,"P",{});var $5t=s(t7e);MSr=r($5t,"Examples:"),$5t.forEach(t),ESr=i($a),m(Jy.$$.fragment,$a),$a.forEach(t),yi.forEach(t),GPe=i(c),Cf=n(c,"H2",{class:!0});var KIe=s(Cf);_E=n(KIe,"A",{id:!0,class:!0,href:!0});var I5t=s(_E);a7e=n(I5t,"SPAN",{});var q5t=s(a7e);m(Yy.$$.fragment,q5t),q5t.forEach(t),I5t.forEach(t),CSr=i(KIe),n7e=n(KIe,"SPAN",{});var N5t=s(n7e);wSr=r(N5t,"FlaxAutoModelForMultipleChoice"),N5t.forEach(t),KIe.forEach(t),OPe=i(c),Dr=n(c,"DIV",{class:!0});var xi=s(Dr);m(Ky.$$.fragment,xi),ASr=i(xi),wf=n(xi,"P",{});var fY=s(wf);ySr=r(fY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rU=n(fY,"A",{href:!0});var j5t=s(rU);LSr=r(j5t,"from_pretrained()"),j5t.forEach(t),xSr=r(fY," class method or the "),tU=n(fY,"A",{href:!0});var D5t=s(tU);kSr=r(D5t,"from_config()"),D5t.forEach(t),SSr=r(fY,` class
method.`),fY.forEach(t),RSr=i(xi),Zy=n(xi,"P",{});var ZIe=s(Zy);BSr=r(ZIe,"This class cannot be instantiated directly using "),s7e=n(ZIe,"CODE",{});var G5t=s(s7e);PSr=r(G5t,"__init__()"),G5t.forEach(t),$Sr=r(ZIe," (throws an error)."),ZIe.forEach(t),ISr=i(xi),Pt=n(xi,"DIV",{class:!0});var ki=s(Pt);m(eL.$$.fragment,ki),qSr=i(ki),l7e=n(ki,"P",{});var O5t=s(l7e);NSr=r(O5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),O5t.forEach(t),jSr=i(ki),Af=n(ki,"P",{});var mY=s(Af);DSr=r(mY,`Note:
Loading a model from its configuration file does `),i7e=n(mY,"STRONG",{});var V5t=s(i7e);GSr=r(V5t,"not"),V5t.forEach(t),OSr=r(mY,` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=n(mY,"A",{href:!0});var X5t=s(aU);VSr=r(X5t,"from_pretrained()"),X5t.forEach(t),XSr=r(mY," to load the model weights."),mY.forEach(t),zSr=i(ki),d7e=n(ki,"P",{});var z5t=s(d7e);QSr=r(z5t,"Examples:"),z5t.forEach(t),WSr=i(ki),m(oL.$$.fragment,ki),ki.forEach(t),HSr=i(xi),$o=n(xi,"DIV",{class:!0});var Ia=s($o);m(rL.$$.fragment,Ia),USr=i(Ia),c7e=n(Ia,"P",{});var Q5t=s(c7e);JSr=r(Q5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Q5t.forEach(t),YSr=i(Ia),qn=n(Ia,"P",{});var y5=s(qn);KSr=r(y5,"The model class to instantiate is selected based on the "),f7e=n(y5,"CODE",{});var W5t=s(f7e);ZSr=r(W5t,"model_type"),W5t.forEach(t),eRr=r(y5,` property of the config object (either
passed as an argument or loaded from `),m7e=n(y5,"CODE",{});var H5t=s(m7e);oRr=r(H5t,"pretrained_model_name_or_path"),H5t.forEach(t),rRr=r(y5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g7e=n(y5,"CODE",{});var U5t=s(g7e);tRr=r(U5t,"pretrained_model_name_or_path"),U5t.forEach(t),aRr=r(y5,":"),y5.forEach(t),nRr=i(Ia),$e=n(Ia,"UL",{});var Vo=s($e);uE=n(Vo,"LI",{});var IRe=s(uE);h7e=n(IRe,"STRONG",{});var J5t=s(h7e);sRr=r(J5t,"albert"),J5t.forEach(t),lRr=r(IRe," \u2014 "),nU=n(IRe,"A",{href:!0});var Y5t=s(nU);iRr=r(Y5t,"FlaxAlbertForMultipleChoice"),Y5t.forEach(t),dRr=r(IRe," (ALBERT model)"),IRe.forEach(t),cRr=i(Vo),bE=n(Vo,"LI",{});var qRe=s(bE);p7e=n(qRe,"STRONG",{});var K5t=s(p7e);fRr=r(K5t,"bert"),K5t.forEach(t),mRr=r(qRe," \u2014 "),sU=n(qRe,"A",{href:!0});var Z5t=s(sU);gRr=r(Z5t,"FlaxBertForMultipleChoice"),Z5t.forEach(t),hRr=r(qRe," (BERT model)"),qRe.forEach(t),pRr=i(Vo),FE=n(Vo,"LI",{});var NRe=s(FE);_7e=n(NRe,"STRONG",{});var e3t=s(_7e);_Rr=r(e3t,"big_bird"),e3t.forEach(t),uRr=r(NRe," \u2014 "),lU=n(NRe,"A",{href:!0});var o3t=s(lU);bRr=r(o3t,"FlaxBigBirdForMultipleChoice"),o3t.forEach(t),FRr=r(NRe," (BigBird model)"),NRe.forEach(t),vRr=i(Vo),vE=n(Vo,"LI",{});var jRe=s(vE);u7e=n(jRe,"STRONG",{});var r3t=s(u7e);TRr=r(r3t,"distilbert"),r3t.forEach(t),MRr=r(jRe," \u2014 "),iU=n(jRe,"A",{href:!0});var t3t=s(iU);ERr=r(t3t,"FlaxDistilBertForMultipleChoice"),t3t.forEach(t),CRr=r(jRe," (DistilBERT model)"),jRe.forEach(t),wRr=i(Vo),TE=n(Vo,"LI",{});var DRe=s(TE);b7e=n(DRe,"STRONG",{});var a3t=s(b7e);ARr=r(a3t,"electra"),a3t.forEach(t),yRr=r(DRe," \u2014 "),dU=n(DRe,"A",{href:!0});var n3t=s(dU);LRr=r(n3t,"FlaxElectraForMultipleChoice"),n3t.forEach(t),xRr=r(DRe," (ELECTRA model)"),DRe.forEach(t),kRr=i(Vo),ME=n(Vo,"LI",{});var GRe=s(ME);F7e=n(GRe,"STRONG",{});var s3t=s(F7e);SRr=r(s3t,"roberta"),s3t.forEach(t),RRr=r(GRe," \u2014 "),cU=n(GRe,"A",{href:!0});var l3t=s(cU);BRr=r(l3t,"FlaxRobertaForMultipleChoice"),l3t.forEach(t),PRr=r(GRe," (RoBERTa model)"),GRe.forEach(t),$Rr=i(Vo),EE=n(Vo,"LI",{});var ORe=s(EE);v7e=n(ORe,"STRONG",{});var i3t=s(v7e);IRr=r(i3t,"roformer"),i3t.forEach(t),qRr=r(ORe," \u2014 "),fU=n(ORe,"A",{href:!0});var d3t=s(fU);NRr=r(d3t,"FlaxRoFormerForMultipleChoice"),d3t.forEach(t),jRr=r(ORe," (RoFormer model)"),ORe.forEach(t),DRr=i(Vo),CE=n(Vo,"LI",{});var VRe=s(CE);T7e=n(VRe,"STRONG",{});var c3t=s(T7e);GRr=r(c3t,"xlm-roberta"),c3t.forEach(t),ORr=r(VRe," \u2014 "),mU=n(VRe,"A",{href:!0});var f3t=s(mU);VRr=r(f3t,"FlaxXLMRobertaForMultipleChoice"),f3t.forEach(t),XRr=r(VRe," (XLM-RoBERTa model)"),VRe.forEach(t),Vo.forEach(t),zRr=i(Ia),M7e=n(Ia,"P",{});var m3t=s(M7e);QRr=r(m3t,"Examples:"),m3t.forEach(t),WRr=i(Ia),m(tL.$$.fragment,Ia),Ia.forEach(t),xi.forEach(t),VPe=i(c),yf=n(c,"H2",{class:!0});var eqe=s(yf);wE=n(eqe,"A",{id:!0,class:!0,href:!0});var g3t=s(wE);E7e=n(g3t,"SPAN",{});var h3t=s(E7e);m(aL.$$.fragment,h3t),h3t.forEach(t),g3t.forEach(t),HRr=i(eqe),C7e=n(eqe,"SPAN",{});var p3t=s(C7e);URr=r(p3t,"FlaxAutoModelForNextSentencePrediction"),p3t.forEach(t),eqe.forEach(t),XPe=i(c),Gr=n(c,"DIV",{class:!0});var Si=s(Gr);m(nL.$$.fragment,Si),JRr=i(Si),Lf=n(Si,"P",{});var gY=s(Lf);YRr=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gU=n(gY,"A",{href:!0});var _3t=s(gU);KRr=r(_3t,"from_pretrained()"),_3t.forEach(t),ZRr=r(gY," class method or the "),hU=n(gY,"A",{href:!0});var u3t=s(hU);eBr=r(u3t,"from_config()"),u3t.forEach(t),oBr=r(gY,` class
method.`),gY.forEach(t),rBr=i(Si),sL=n(Si,"P",{});var oqe=s(sL);tBr=r(oqe,"This class cannot be instantiated directly using "),w7e=n(oqe,"CODE",{});var b3t=s(w7e);aBr=r(b3t,"__init__()"),b3t.forEach(t),nBr=r(oqe," (throws an error)."),oqe.forEach(t),sBr=i(Si),$t=n(Si,"DIV",{class:!0});var Ri=s($t);m(lL.$$.fragment,Ri),lBr=i(Ri),A7e=n(Ri,"P",{});var F3t=s(A7e);iBr=r(F3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),F3t.forEach(t),dBr=i(Ri),xf=n(Ri,"P",{});var hY=s(xf);cBr=r(hY,`Note:
Loading a model from its configuration file does `),y7e=n(hY,"STRONG",{});var v3t=s(y7e);fBr=r(v3t,"not"),v3t.forEach(t),mBr=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(hY,"A",{href:!0});var T3t=s(pU);gBr=r(T3t,"from_pretrained()"),T3t.forEach(t),hBr=r(hY," to load the model weights."),hY.forEach(t),pBr=i(Ri),L7e=n(Ri,"P",{});var M3t=s(L7e);_Br=r(M3t,"Examples:"),M3t.forEach(t),uBr=i(Ri),m(iL.$$.fragment,Ri),Ri.forEach(t),bBr=i(Si),Io=n(Si,"DIV",{class:!0});var qa=s(Io);m(dL.$$.fragment,qa),FBr=i(qa),x7e=n(qa,"P",{});var E3t=s(x7e);vBr=r(E3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),E3t.forEach(t),TBr=i(qa),Nn=n(qa,"P",{});var L5=s(Nn);MBr=r(L5,"The model class to instantiate is selected based on the "),k7e=n(L5,"CODE",{});var C3t=s(k7e);EBr=r(C3t,"model_type"),C3t.forEach(t),CBr=r(L5,` property of the config object (either
passed as an argument or loaded from `),S7e=n(L5,"CODE",{});var w3t=s(S7e);wBr=r(w3t,"pretrained_model_name_or_path"),w3t.forEach(t),ABr=r(L5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=n(L5,"CODE",{});var A3t=s(R7e);yBr=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),LBr=r(L5,":"),L5.forEach(t),xBr=i(qa),B7e=n(qa,"UL",{});var y3t=s(B7e);AE=n(y3t,"LI",{});var XRe=s(AE);P7e=n(XRe,"STRONG",{});var L3t=s(P7e);kBr=r(L3t,"bert"),L3t.forEach(t),SBr=r(XRe," \u2014 "),_U=n(XRe,"A",{href:!0});var x3t=s(_U);RBr=r(x3t,"FlaxBertForNextSentencePrediction"),x3t.forEach(t),BBr=r(XRe," (BERT model)"),XRe.forEach(t),y3t.forEach(t),PBr=i(qa),$7e=n(qa,"P",{});var k3t=s($7e);$Br=r(k3t,"Examples:"),k3t.forEach(t),IBr=i(qa),m(cL.$$.fragment,qa),qa.forEach(t),Si.forEach(t),zPe=i(c),kf=n(c,"H2",{class:!0});var rqe=s(kf);yE=n(rqe,"A",{id:!0,class:!0,href:!0});var S3t=s(yE);I7e=n(S3t,"SPAN",{});var R3t=s(I7e);m(fL.$$.fragment,R3t),R3t.forEach(t),S3t.forEach(t),qBr=i(rqe),q7e=n(rqe,"SPAN",{});var B3t=s(q7e);NBr=r(B3t,"FlaxAutoModelForImageClassification"),B3t.forEach(t),rqe.forEach(t),QPe=i(c),Or=n(c,"DIV",{class:!0});var Bi=s(Or);m(mL.$$.fragment,Bi),jBr=i(Bi),Sf=n(Bi,"P",{});var pY=s(Sf);DBr=r(pY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uU=n(pY,"A",{href:!0});var P3t=s(uU);GBr=r(P3t,"from_pretrained()"),P3t.forEach(t),OBr=r(pY," class method or the "),bU=n(pY,"A",{href:!0});var $3t=s(bU);VBr=r($3t,"from_config()"),$3t.forEach(t),XBr=r(pY,` class
method.`),pY.forEach(t),zBr=i(Bi),gL=n(Bi,"P",{});var tqe=s(gL);QBr=r(tqe,"This class cannot be instantiated directly using "),N7e=n(tqe,"CODE",{});var I3t=s(N7e);WBr=r(I3t,"__init__()"),I3t.forEach(t),HBr=r(tqe," (throws an error)."),tqe.forEach(t),UBr=i(Bi),It=n(Bi,"DIV",{class:!0});var Pi=s(It);m(hL.$$.fragment,Pi),JBr=i(Pi),j7e=n(Pi,"P",{});var q3t=s(j7e);YBr=r(q3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),q3t.forEach(t),KBr=i(Pi),Rf=n(Pi,"P",{});var _Y=s(Rf);ZBr=r(_Y,`Note:
Loading a model from its configuration file does `),D7e=n(_Y,"STRONG",{});var N3t=s(D7e);ePr=r(N3t,"not"),N3t.forEach(t),oPr=r(_Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=n(_Y,"A",{href:!0});var j3t=s(FU);rPr=r(j3t,"from_pretrained()"),j3t.forEach(t),tPr=r(_Y," to load the model weights."),_Y.forEach(t),aPr=i(Pi),G7e=n(Pi,"P",{});var D3t=s(G7e);nPr=r(D3t,"Examples:"),D3t.forEach(t),sPr=i(Pi),m(pL.$$.fragment,Pi),Pi.forEach(t),lPr=i(Bi),qo=n(Bi,"DIV",{class:!0});var Na=s(qo);m(_L.$$.fragment,Na),iPr=i(Na),O7e=n(Na,"P",{});var G3t=s(O7e);dPr=r(G3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),G3t.forEach(t),cPr=i(Na),jn=n(Na,"P",{});var x5=s(jn);fPr=r(x5,"The model class to instantiate is selected based on the "),V7e=n(x5,"CODE",{});var O3t=s(V7e);mPr=r(O3t,"model_type"),O3t.forEach(t),gPr=r(x5,` property of the config object (either
passed as an argument or loaded from `),X7e=n(x5,"CODE",{});var V3t=s(X7e);hPr=r(V3t,"pretrained_model_name_or_path"),V3t.forEach(t),pPr=r(x5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=n(x5,"CODE",{});var X3t=s(z7e);_Pr=r(X3t,"pretrained_model_name_or_path"),X3t.forEach(t),uPr=r(x5,":"),x5.forEach(t),bPr=i(Na),uL=n(Na,"UL",{});var aqe=s(uL);LE=n(aqe,"LI",{});var zRe=s(LE);Q7e=n(zRe,"STRONG",{});var z3t=s(Q7e);FPr=r(z3t,"beit"),z3t.forEach(t),vPr=r(zRe," \u2014 "),vU=n(zRe,"A",{href:!0});var Q3t=s(vU);TPr=r(Q3t,"FlaxBeitForImageClassification"),Q3t.forEach(t),MPr=r(zRe," (BEiT model)"),zRe.forEach(t),EPr=i(aqe),xE=n(aqe,"LI",{});var QRe=s(xE);W7e=n(QRe,"STRONG",{});var W3t=s(W7e);CPr=r(W3t,"vit"),W3t.forEach(t),wPr=r(QRe," \u2014 "),TU=n(QRe,"A",{href:!0});var H3t=s(TU);APr=r(H3t,"FlaxViTForImageClassification"),H3t.forEach(t),yPr=r(QRe," (ViT model)"),QRe.forEach(t),aqe.forEach(t),LPr=i(Na),H7e=n(Na,"P",{});var U3t=s(H7e);xPr=r(U3t,"Examples:"),U3t.forEach(t),kPr=i(Na),m(bL.$$.fragment,Na),Na.forEach(t),Bi.forEach(t),WPe=i(c),Bf=n(c,"H2",{class:!0});var nqe=s(Bf);kE=n(nqe,"A",{id:!0,class:!0,href:!0});var J3t=s(kE);U7e=n(J3t,"SPAN",{});var Y3t=s(U7e);m(FL.$$.fragment,Y3t),Y3t.forEach(t),J3t.forEach(t),SPr=i(nqe),J7e=n(nqe,"SPAN",{});var K3t=s(J7e);RPr=r(K3t,"FlaxAutoModelForVision2Seq"),K3t.forEach(t),nqe.forEach(t),HPe=i(c),Vr=n(c,"DIV",{class:!0});var $i=s(Vr);m(vL.$$.fragment,$i),BPr=i($i),Pf=n($i,"P",{});var uY=s(Pf);PPr=r(uY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),MU=n(uY,"A",{href:!0});var Z3t=s(MU);$Pr=r(Z3t,"from_pretrained()"),Z3t.forEach(t),IPr=r(uY," class method or the "),EU=n(uY,"A",{href:!0});var eCt=s(EU);qPr=r(eCt,"from_config()"),eCt.forEach(t),NPr=r(uY,` class
method.`),uY.forEach(t),jPr=i($i),TL=n($i,"P",{});var sqe=s(TL);DPr=r(sqe,"This class cannot be instantiated directly using "),Y7e=n(sqe,"CODE",{});var oCt=s(Y7e);GPr=r(oCt,"__init__()"),oCt.forEach(t),OPr=r(sqe," (throws an error)."),sqe.forEach(t),VPr=i($i),qt=n($i,"DIV",{class:!0});var Ii=s(qt);m(ML.$$.fragment,Ii),XPr=i(Ii),K7e=n(Ii,"P",{});var rCt=s(K7e);zPr=r(rCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rCt.forEach(t),QPr=i(Ii),$f=n(Ii,"P",{});var bY=s($f);WPr=r(bY,`Note:
Loading a model from its configuration file does `),Z7e=n(bY,"STRONG",{});var tCt=s(Z7e);HPr=r(tCt,"not"),tCt.forEach(t),UPr=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(bY,"A",{href:!0});var aCt=s(CU);JPr=r(aCt,"from_pretrained()"),aCt.forEach(t),YPr=r(bY," to load the model weights."),bY.forEach(t),KPr=i(Ii),e9e=n(Ii,"P",{});var nCt=s(e9e);ZPr=r(nCt,"Examples:"),nCt.forEach(t),e$r=i(Ii),m(EL.$$.fragment,Ii),Ii.forEach(t),o$r=i($i),No=n($i,"DIV",{class:!0});var ja=s(No);m(CL.$$.fragment,ja),r$r=i(ja),o9e=n(ja,"P",{});var sCt=s(o9e);t$r=r(sCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sCt.forEach(t),a$r=i(ja),Dn=n(ja,"P",{});var k5=s(Dn);n$r=r(k5,"The model class to instantiate is selected based on the "),r9e=n(k5,"CODE",{});var lCt=s(r9e);s$r=r(lCt,"model_type"),lCt.forEach(t),l$r=r(k5,` property of the config object (either
passed as an argument or loaded from `),t9e=n(k5,"CODE",{});var iCt=s(t9e);i$r=r(iCt,"pretrained_model_name_or_path"),iCt.forEach(t),d$r=r(k5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a9e=n(k5,"CODE",{});var dCt=s(a9e);c$r=r(dCt,"pretrained_model_name_or_path"),dCt.forEach(t),f$r=r(k5,":"),k5.forEach(t),m$r=i(ja),n9e=n(ja,"UL",{});var cCt=s(n9e);SE=n(cCt,"LI",{});var WRe=s(SE);s9e=n(WRe,"STRONG",{});var fCt=s(s9e);g$r=r(fCt,"vision-encoder-decoder"),fCt.forEach(t),h$r=r(WRe," \u2014 "),wU=n(WRe,"A",{href:!0});var mCt=s(wU);p$r=r(mCt,"FlaxVisionEncoderDecoderModel"),mCt.forEach(t),_$r=r(WRe," (Vision Encoder decoder model)"),WRe.forEach(t),cCt.forEach(t),u$r=i(ja),l9e=n(ja,"P",{});var gCt=s(l9e);b$r=r(gCt,"Examples:"),gCt.forEach(t),F$r=i(ja),m(wL.$$.fragment,ja),ja.forEach(t),$i.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(ECt)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(ce,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer"),d(Vi,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),d(Of,"id","extending-the-auto-classes"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Xf,"id","transformers.AutoConfig"),d(Xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xf,"href","#transformers.AutoConfig"),d(zi,"class","relative group"),d(k8,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(S8,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig"),d(R8,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig"),d(B8,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig"),d(P8,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig"),d($8,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(I8,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig"),d(q8,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(N8,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(j8,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(D8,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig"),d(G8,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig"),d(O8,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig"),d(V8,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig"),d(X8,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig"),d(z8,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig"),d(Q8,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(W8,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(H8,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig"),d(U8,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(J8,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(Y8,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig"),d(K8,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig"),d(Z8,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig"),d(ex,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig"),d(ox,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig"),d(rx,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig"),d(tx,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(ax,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig"),d(nx,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig"),d(sx,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig"),d(lx,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig"),d(ix,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig"),d(dx,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config"),d(cx,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(fx,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig"),d(mx,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig"),d(gx,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig"),d(hx,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(px,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(_x,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(ux,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig"),d(bx,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig"),d(Fx,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config"),d(vx,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig"),d(Tx,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig"),d(Mx,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config"),d(Ex,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig"),d(Cx,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(wx,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig"),d(Ax,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(yx,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(Lx,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig"),d(xx,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config"),d(kx,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(Sx,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Rx,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig"),d(Bx,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig"),d(Px,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig"),d($x,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Ix,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(qx,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Nx,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagConfig"),d(jx,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmConfig"),d(Dx,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig"),d(Gx,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig"),d(Ox,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig"),d(Vx,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig"),d(Xx,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig"),d(zx,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig"),d(Qx,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig"),d(Wx,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig"),d(Hx,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig"),d(Ux,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig"),d(Jx,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Yx,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Kx,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Zx,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig"),d(ek,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(ok,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig"),d(rk,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config"),d(tk,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig"),d(ak,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig"),d(nk,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(sk,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig"),d(lk,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(ik,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(dk,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig"),d(ck,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig"),d(fk,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(mk,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(gk,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(hk,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig"),d(pk,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(_k,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(uk,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig"),d(bk,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig"),d(Fk,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig"),d(vk,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(Tk,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(Mk,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(Ek,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig"),d(Ck,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dg,"id","transformers.AutoTokenizer"),d(Dg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dg,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(wk,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(Ak,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),d(yk,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(Lk,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizer"),d(xk,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizerFast"),d(kk,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizer"),d(Sk,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(Rk,"href","/docs/transformers/pr_16792/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(Bk,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),d(Pk,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),d($k,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(Ik,"href","/docs/transformers/pr_16792/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(qk,"href","/docs/transformers/pr_16792/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Nk,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(jk,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Dk,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Gk,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Ok,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Vk,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Xk,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(zk,"href","/docs/transformers/pr_16792/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Qk,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Wk,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Hk,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineTokenizer"),d(Uk,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizer"),d(Jk,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Yk,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Kk,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Zk,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizer"),d(eS,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(oS,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizer"),d(rS,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(tS,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(aS,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(nS,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(sS,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(lS,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(iS,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizer"),d(dS,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(cS,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(fS,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizer"),d(mS,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(gS,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(hS,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizer"),d(pS,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(_S,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(uS,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(bS,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(FS,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(vS,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizer"),d(TS,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(MS,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(ES,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),d(CS,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(wS,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(AS,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(yS,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(LS,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(xS,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(kS,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(SS,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizer"),d(RS,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizerFast"),d(BS,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizer"),d(PS,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d($S,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5Tokenizer"),d(IS,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5TokenizerFast"),d(qS,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeTokenizer"),d(NS,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(jS,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(DS,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(GS,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianTokenizer"),d(OS,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizer"),d(VS,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(XS,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(zS,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(QS,"href","/docs/transformers/pr_16792/en/model_doc/mluke#transformers.MLukeTokenizer"),d(WS,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(HS,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(US,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(JS,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(YS,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5Tokenizer"),d(KS,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5TokenizerFast"),d(ZS,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(eR,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(oR,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(rR,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(tR,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(aR,"href","/docs/transformers/pr_16792/en/model_doc/phobert#transformers.PhobertTokenizer"),d(nR,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartTokenizer"),d(sR,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(lR,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),d(iR,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),d(dR,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagTokenizer"),d(cR,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizer"),d(fR,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizerFast"),d(mR,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizer"),d(gR,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(hR,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizer"),d(pR,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(_R,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(uR,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(bR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),d(FR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(vR,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(TR,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(MR,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(ER,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(CR,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizer"),d(wR,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(AR,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(yR,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(LR,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5Tokenizer"),d(xR,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5TokenizerFast"),d(kR,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasTokenizer"),d(SR,"href","/docs/transformers/pr_16792/en/model_doc/tapex#transformers.TapexTokenizer"),d(RR,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(BR,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(PR,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d($R,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizer"),d(IR,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(qR,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMTokenizer"),d(NR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(jR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(DR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(GR,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(OR,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bh,"id","transformers.AutoFeatureExtractor"),d(bh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bh,"href","#transformers.AutoFeatureExtractor"),d(Hi,"class","relative group"),d(VR,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(XR,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(zR,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(QR,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(WR,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(HR,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(UR,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(JR,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(YR,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(KR,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(ZR,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(eB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(oB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(rB,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(tB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(aB,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(nB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(sB,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(lB,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(iB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dh,"id","transformers.AutoProcessor"),d(Dh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dh,"href","#transformers.AutoProcessor"),d(Ui,"class","relative group"),d(dB,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(cB,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPProcessor"),d(fB,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(mB,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(gB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(hB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(pB,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRProcessor"),d(_B,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(uB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yh,"id","transformers.AutoModel"),d(Yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yh,"href","#transformers.AutoModel"),d(Yi,"class","relative group"),d(bB,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FB,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vB,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TB,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel"),d(MB,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel"),d(EB,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel"),d(CB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),d(wB,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(AB,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel"),d(yB,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(LB,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(xB,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(kB,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel"),d(SB,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel"),d(RB,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel"),d(BB,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel"),d(PB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel"),d($B,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel"),d(IB,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(qB,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(NB,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel"),d(jB,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(DB,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(GB,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel"),d(OB,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel"),d(VB,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel"),d(XB,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(zB,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel"),d(QB,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel"),d(WB,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel"),d(HB,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel"),d(UB,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel"),d(JB,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel"),d(YB,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel"),d(KB,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel"),d(ZB,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model"),d(eP,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(oP,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel"),d(rP,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel"),d(tP,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel"),d(aP,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(nP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(sP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(lP,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel"),d(iP,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel"),d(dP,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model"),d(cP,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel"),d(fP,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel"),d(mP,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model"),d(gP,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel"),d(hP,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel"),d(pP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel"),d(_P,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(uP,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel"),d(bP,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel"),d(FP,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model"),d(vP,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel"),d(TP,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(MP,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel"),d(EP,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel"),d(CP,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel"),d(wP,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel"),d(AP,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(yP,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel"),d(LP,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel"),d(xP,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel"),d(kP,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel"),d(SP,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel"),d(RP,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),d(BP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel"),d(PP,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel"),d($P,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel"),d(IP,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel"),d(qP,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel"),d(NP,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(jP,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel"),d(DP,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(GP,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel"),d(OP,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model"),d(VP,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel"),d(XP,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(zP,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel"),d(QP,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(WP,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel"),d(HP,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel"),d(UP,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(JP,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel"),d(YP,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel"),d(KP,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(ZP,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(e$,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel"),d(o$,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel"),d(r$,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel"),d(t$,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(a$,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(n$,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(s$,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel"),d(l$,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N_,"id","transformers.AutoModelForPreTraining"),d(N_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N_,"href","#transformers.AutoModelForPreTraining"),d(ed,"class","relative group"),d(i$,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(d$,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(c$,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f$,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining"),d(m$,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(g$,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining"),d(h$,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(p$,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(_$,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(u$,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(b$,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(F$,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(v$,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(T$,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining"),d(M$,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(E$,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining"),d(C$,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(w$,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(A$,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(y$,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(L$,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(x$,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(k$,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),d(S$,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(R$,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(B$,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(P$,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d($$,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(I$,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),d(q$,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(N$,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(j$,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(D$,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(G$,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(O$,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(V$,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(X$,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(z$,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(Q$,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(W$,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(H$,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(U$,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(J$,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Au,"id","transformers.AutoModelForCausalLM"),d(Au,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Au,"href","#transformers.AutoModelForCausalLM"),d(td,"class","relative group"),d(Y$,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(K$,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Z$,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eI,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM"),d(oI,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel"),d(rI,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(tI,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(aI,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(nI,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(sI,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(lI,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(iI,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(dI,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(cI,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM"),d(fI,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(mI,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(gI,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(hI,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM"),d(pI,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM"),d(_I,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(uI,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(bI,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(FI,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(vI,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(TI,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(MI,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(EI,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(CI,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(wI,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(AI,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(yI,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(LI,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(xI,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(kI,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(SI,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(RI,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(BI,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(PI,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(d2,"id","transformers.AutoModelForMaskedLM"),d(d2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d2,"href","#transformers.AutoModelForMaskedLM"),d(sd,"class","relative group"),d($I,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(II,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NI,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(jI,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(DI,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM"),d(GI,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(OI,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(VI,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(XI,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(zI,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(QI,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(WI,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(HI,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(UI,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(JI,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(YI,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(KI,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(ZI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(eq,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(oq,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(rq,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(tq,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(aq,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(nq,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(sq,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(lq,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(iq,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(dq,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(cq,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(fq,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(mq,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(gq,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(hq,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(pq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(_q,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(uq,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q2,"id","transformers.AutoModelForSeq2SeqLM"),d(Q2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q2,"href","#transformers.AutoModelForSeq2SeqLM"),d(dd,"class","relative group"),d(bq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Fq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tq,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Mq,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(Eq,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(Cq,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(wq,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(Aq,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(yq,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(Lq,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),d(xq,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(kq,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel"),d(Sq,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(Rq,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(Bq,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(Pq,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d($q,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(Iq,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(qq,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Nq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(m1,"id","transformers.AutoModelForSequenceClassification"),d(m1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m1,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(jq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Dq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Gq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oq,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification"),d(zq,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(gN,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(hN,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(pN,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(_N,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(uN,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(bN,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(FN,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(vN,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(TN,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(MN,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(EN,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(CN,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(wN,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(AN,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(yN,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(LN,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification"),d(xN,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(kN,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(SN,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(RN,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(BN,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(PN,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lb,"id","transformers.AutoModelForMultipleChoice"),d(lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lb,"href","#transformers.AutoModelForMultipleChoice"),d(pd,"class","relative group"),d($N,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NN,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(jN,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice"),d(DN,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(GN,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(ON,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(VN,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(XN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(zN,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(QN,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(WN,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(HN,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(UN,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(JN,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(YN,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(KN,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(ej,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(oj,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(rj,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(tj,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(aj,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(nj,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(sj,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(lj,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(ij,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(dj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(cj,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(fj,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qb,"id","transformers.AutoModelForNextSentencePrediction"),d(qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qb,"href","#transformers.AutoModelForNextSentencePrediction"),d(bd,"class","relative group"),d(mj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pj,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(_j,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(uj,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(bj,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(Fj,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xb,"id","transformers.AutoModelForTokenClassification"),d(Xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xb,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(vj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Mj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ej,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification"),d(wj,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(Aj,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(yj,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification"),d(Lj,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(xj,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(kj,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(Sj,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(Rj,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(Bj,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Pj,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d($j,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Ij,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(qj,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(Nj,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(jj,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Dj,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Gj,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(Oj,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(Vj,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Xj,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(zj,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Qj,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(Wj,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(Hj,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Uj,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Jj,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Yj,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Kj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Zj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(eD,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(oD,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(w6,"id","transformers.AutoModelForQuestionAnswering"),d(w6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w6,"href","#transformers.AutoModelForQuestionAnswering"),d(Cd,"class","relative group"),d(rD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nD,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(FD,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(kD,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(SD,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(RD,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(BD,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(PD,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d($D,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(ID,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(qD,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(ND,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(jD,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(DD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(GD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(OD,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(VD,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mF,"id","transformers.AutoModelForTableQuestionAnswering"),d(mF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mF,"href","#transformers.AutoModelForTableQuestionAnswering"),d(yd,"class","relative group"),d(XD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WD,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pF,"id","transformers.AutoModelForImageClassification"),d(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pF,"href","#transformers.AutoModelForImageClassification"),d(kd,"class","relative group"),d(HD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YD,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification"),d(KD,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(ZD,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification"),d(eG,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(oG,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(rG,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(tG,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(aG,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(nG,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(sG,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(lG,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(iG,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(dG,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification"),d(cG,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification"),d(fG,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yF,"id","transformers.AutoModelForVision2Seq"),d(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yF,"href","#transformers.AutoModelForVision2Seq"),d(Bd,"class","relative group"),d(mG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pG,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kF,"id","transformers.AutoModelForAudioClassification"),d(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kF,"href","#transformers.AutoModelForAudioClassification"),d(Id,"class","relative group"),d(_G,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(vG,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(TG,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(MG,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(EG,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(CG,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(wG,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(AG,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DF,"id","transformers.AutoModelForAudioFrameClassification"),d(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(DF,"href","#transformers.AutoModelForAudioFrameClassification"),d(jd,"class","relative group"),d(yG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(SG,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(RG,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(BG,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QF,"id","transformers.AutoModelForCTC"),d(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(QF,"href","#transformers.AutoModelForCTC"),d(Od,"class","relative group"),d(PG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($G,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(NG,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC"),d(jG,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC"),d(DG,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC"),d(GG,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(OG,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(VG,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(XG,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rv,"id","transformers.AutoModelForSpeechSeq2Seq"),d(rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rv,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(zd,"class","relative group"),d(zG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HG,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(UG,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sv,"id","transformers.AutoModelForAudioXVector"),d(sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sv,"href","#transformers.AutoModelForAudioXVector"),d(Hd,"class","relative group"),d(JG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(eO,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(oO,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(rO,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mv,"id","transformers.AutoModelForMaskedImageModeling"),d(mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mv,"href","#transformers.AutoModelForMaskedImageModeling"),d(Yd,"class","relative group"),d(tO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sO,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(lO,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(iO,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uv,"id","transformers.AutoModelForObjectDetection"),d(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uv,"href","#transformers.AutoModelForObjectDetection"),d(oc,"class","relative group"),d(dO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mO,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vv,"id","transformers.AutoModelForImageSegmentation"),d(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vv,"href","#transformers.AutoModelForImageSegmentation"),d(ac,"class","relative group"),d(gO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_O,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ev,"id","transformers.AutoModelForSemanticSegmentation"),d(Ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ev,"href","#transformers.AutoModelForSemanticSegmentation"),d(lc,"class","relative group"),d(uO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vO,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(TO,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(MO,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lv,"id","transformers.AutoModelForInstanceSegmentation"),d(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lv,"href","#transformers.AutoModelForInstanceSegmentation"),d(fc,"class","relative group"),d(EO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AO,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sv,"id","transformers.TFAutoModel"),d(Sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Sv,"href","#transformers.TFAutoModel"),d(hc,"class","relative group"),d(yO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kO,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel"),d(SO,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel"),d(RO,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel"),d(BO,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(PO,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d($O,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel"),d(IO,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel"),d(qO,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel"),d(NO,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel"),d(jO,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel"),d(DO,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel"),d(GO,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(OO,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(VO,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(XO,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel"),d(zO,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(QO,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel"),d(WO,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(HO,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model"),d(UO,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel"),d(JO,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel"),d(YO,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(KO,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel"),d(ZO,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel"),d(eV,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel"),d(oV,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel"),d(rV,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel"),d(tV,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(aV,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel"),d(nV,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model"),d(sV,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(lV,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel"),d(iV,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel"),d(dV,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel"),d(cV,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel"),d(fV,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(mV,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model"),d(gV,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel"),d(hV,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(pV,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel"),d(_V,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(uV,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(bV,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel"),d(FV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(vV,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TT,"id","transformers.TFAutoModelForPreTraining"),d(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TT,"href","#transformers.TFAutoModelForPreTraining"),d(uc,"class","relative group"),d(TV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CV,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(wV,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(AV,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining"),d(yV,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(LV,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(xV,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(kV,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(SV,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(RV,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(BV,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(PV,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d($V,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(IV,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(qV,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(NV,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(jV,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(DV,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(GV,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(OV,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(VV,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(XV,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(zV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(QV,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zT,"id","transformers.TFAutoModelForCausalLM"),d(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zT,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(WV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JV,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(YV,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(KV,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(ZV,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(eX,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(oX,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(rX,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(tX,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(aX,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(nX,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(sX,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(lX,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(a7,"id","transformers.TFAutoModelForImageClassification"),d(a7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a7,"href","#transformers.TFAutoModelForImageClassification"),d(Ec,"class","relative group"),d(iX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fX,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(mX,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l7,"id","transformers.TFAutoModelForMaskedLM"),d(l7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l7,"href","#transformers.TFAutoModelForMaskedLM"),d(Ac,"class","relative group"),d(gX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_X,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(uX,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(bX,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(FX,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(vX,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(TX,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(MX,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(EX,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(CX,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(wX,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(AX,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(yX,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(LX,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(xX,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(kX,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(SX,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(RX,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(BX,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(PX,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d($X,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L7,"id","transformers.TFAutoModelForSeq2SeqLM"),d(L7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L7,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(xc,"class","relative group"),d(IX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jX,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(DX,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(GX,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(OX,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(VX,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(XX,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel"),d(zX,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(QX,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(WX,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(HX,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j7,"id","transformers.TFAutoModelForSequenceClassification"),d(j7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j7,"href","#transformers.TFAutoModelForSequenceClassification"),d(Rc,"class","relative group"),d(UX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KX,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(ez,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(oz,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(rz,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(tz,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(az,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(nz,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(sz,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(lz,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(iz,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(dz,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(cz,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(fz,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(mz,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(gz,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(hz,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(pz,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(_z,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(uz,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(bz,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(Fz,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(vz,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(Tz,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(Mz,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(Ez,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(m9,"id","transformers.TFAutoModelForMultipleChoice"),d(m9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m9,"href","#transformers.TFAutoModelForMultipleChoice"),d($c,"class","relative group"),d(Cz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Az,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yz,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(xz,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(kz,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(Bz,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Pz,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d($z,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(Iz,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(qz,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(jz,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(Dz,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Oz,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(Vz,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(k9,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(k9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k9,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Nc,"class","relative group"),d(Xz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Qz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wz,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R9,"id","transformers.TFAutoModelForTokenClassification"),d(R9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R9,"href","#transformers.TFAutoModelForTokenClassification"),d(Gc,"class","relative group"),d(Hz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Uz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Jz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yz,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Kz,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Zz,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(eQ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(oQ,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(rQ,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(tQ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(aQ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(nQ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(sQ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(lQ,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(iQ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(dQ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(cQ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(fQ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(mQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(gQ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(hQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(pQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(_Q,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z9,"id","transformers.TFAutoModelForQuestionAnswering"),d(Z9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z9,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Xc,"class","relative group"),d(uQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vQ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(EQ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(wQ,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(yQ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(LQ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(xQ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(kQ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(SQ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(RQ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(BQ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(PQ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d($Q,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(IQ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(qQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(NQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(jQ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vM,"id","transformers.TFAutoModelForVision2Seq"),d(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vM,"href","#transformers.TFAutoModelForVision2Seq"),d(Wc,"class","relative group"),d(DQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VQ,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(MM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Jc,"class","relative group"),d(XQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WQ,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CM,"id","transformers.FlaxAutoModel"),d(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CM,"href","#transformers.FlaxAutoModel"),d(Zc,"class","relative group"),d(HQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YQ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel"),d(KQ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel"),d(ZQ,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel"),d(eW,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel"),d(oW,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(rW,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(tW,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(aW,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel"),d(nW,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(sW,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel"),d(lW,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(iW,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(dW,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(cW,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model"),d(fW,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel"),d(mW,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel"),d(gW,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model"),d(hW,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(pW,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(_W,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(uW,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model"),d(bW,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(FW,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel"),d(vW,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(TW,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(MW,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YM,"id","transformers.FlaxAutoModelForCausalLM"),d(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YM,"href","#transformers.FlaxAutoModelForCausalLM"),d(rf,"class","relative group"),d(EW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AW,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(yW,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(LW,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(xW,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(kW,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(t4,"id","transformers.FlaxAutoModelForPreTraining"),d(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t4,"href","#transformers.FlaxAutoModelForPreTraining"),d(nf,"class","relative group"),d(SW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PW,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d($W,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(IW,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(qW,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(NW,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(jW,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(DW,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(GW,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(OW,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(VW,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(XW,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(zW,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(QW,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(u4,"id","transformers.FlaxAutoModelForMaskedLM"),d(u4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u4,"href","#transformers.FlaxAutoModelForMaskedLM"),d(df,"class","relative group"),d(WW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JW,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(YW,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(KW,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(ZW,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(eH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(oH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(rH,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(tH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(aH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(nH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(L4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(mf,"class","relative group"),d(sH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dH,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(cH,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(fH,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(mH,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(gH,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(hH,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(pH,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(_H,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(uH,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(bH,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j4,"id","transformers.FlaxAutoModelForSequenceClassification"),d(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j4,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(pf,"class","relative group"),d(FH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(EH,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(CH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(wH,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(AH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(yH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(LH,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(xH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(kH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(SH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J4,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(bf,"class","relative group"),d(RH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($H,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(IH,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(qH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(NH,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(jH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(DH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(GH,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(OH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(VH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(XH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lE,"id","transformers.FlaxAutoModelForTokenClassification"),d(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lE,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Tf,"class","relative group"),d(zH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(UH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(JH,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(YH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(KH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(ZH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(eU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(oU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_E,"id","transformers.FlaxAutoModelForMultipleChoice"),d(_E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_E,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Cf,"class","relative group"),d(rU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nU,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(sU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(lU,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(iU,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(dU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(cU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(fU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(mU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(wE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(yf,"class","relative group"),d(gU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_U,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yE,"id","transformers.FlaxAutoModelForImageClassification"),d(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yE,"href","#transformers.FlaxAutoModelForImageClassification"),d(kf,"class","relative group"),d(uU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vU,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(TU,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kE,"id","transformers.FlaxAutoModelForVision2Seq"),d(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Bf,"class","relative group"),d(MU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wU,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,u){e(document.head,Z),b(c,io,u),b(c,ce,u),e(ce,Ce),e(Ce,lo),g(he,lo,null),e(ce,Ee),e(ce,Xo),e(Xo,qi),b(c,Nf,u),b(c,fa,u),e(fa,Ni),e(fa,ji),e(ji,S5),e(fa,jf),b(c,ke,u),b(c,co,u),e(co,Di),e(co,Gn),e(Gn,R5),e(co,On),e(co,Vn),e(Vn,B5),e(co,Gi),e(co,Xn),e(Xn,P5),e(co,Oi),b(c,Df,u),g(Da,c,u),b(c,fo,u),b(c,ue,u),e(ue,C8),e(ue,Vi),e(Vi,w8),e(ue,A8),b(c,zo,u),b(c,Ga,u),e(Ga,y8),e(Ga,Gf),e(Gf,L8),e(Ga,lqe),b(c,HRe,u),b(c,Xi,u),e(Xi,Of),e(Of,FY),g($5,FY,null),e(Xi,iqe),e(Xi,vY),e(vY,dqe),b(c,URe,u),b(c,zn,u),e(zn,cqe),e(zn,TY),e(TY,fqe),e(zn,mqe),e(zn,MY),e(MY,gqe),e(zn,hqe),b(c,JRe,u),g(I5,c,u),b(c,YRe,u),b(c,x8,u),e(x8,pqe),b(c,KRe,u),g(Vf,c,u),b(c,ZRe,u),b(c,zi,u),e(zi,Xf),e(Xf,EY),g(q5,EY,null),e(zi,_qe),e(zi,CY),e(CY,uqe),b(c,eBe,u),b(c,Qo,u),g(N5,Qo,null),e(Qo,bqe),e(Qo,j5),e(j5,Fqe),e(j5,k8),e(k8,vqe),e(j5,Tqe),e(Qo,Mqe),e(Qo,D5),e(D5,Eqe),e(D5,wY),e(wY,Cqe),e(D5,wqe),e(Qo,Aqe),e(Qo,mo),g(G5,mo,null),e(mo,yqe),e(mo,AY),e(AY,Lqe),e(mo,xqe),e(mo,Qi),e(Qi,kqe),e(Qi,yY),e(yY,Sqe),e(Qi,Rqe),e(Qi,LY),e(LY,Bqe),e(Qi,Pqe),e(mo,$qe),e(mo,F),e(F,zf),e(zf,xY),e(xY,Iqe),e(zf,qqe),e(zf,S8),e(S8,Nqe),e(zf,jqe),e(F,Dqe),e(F,Qf),e(Qf,kY),e(kY,Gqe),e(Qf,Oqe),e(Qf,R8),e(R8,Vqe),e(Qf,Xqe),e(F,zqe),e(F,Wf),e(Wf,SY),e(SY,Qqe),e(Wf,Wqe),e(Wf,B8),e(B8,Hqe),e(Wf,Uqe),e(F,Jqe),e(F,Hf),e(Hf,RY),e(RY,Yqe),e(Hf,Kqe),e(Hf,P8),e(P8,Zqe),e(Hf,eNe),e(F,oNe),e(F,Uf),e(Uf,BY),e(BY,rNe),e(Uf,tNe),e(Uf,$8),e($8,aNe),e(Uf,nNe),e(F,sNe),e(F,Jf),e(Jf,PY),e(PY,lNe),e(Jf,iNe),e(Jf,I8),e(I8,dNe),e(Jf,cNe),e(F,fNe),e(F,Yf),e(Yf,$Y),e($Y,mNe),e(Yf,gNe),e(Yf,q8),e(q8,hNe),e(Yf,pNe),e(F,_Ne),e(F,Kf),e(Kf,IY),e(IY,uNe),e(Kf,bNe),e(Kf,N8),e(N8,FNe),e(Kf,vNe),e(F,TNe),e(F,Zf),e(Zf,qY),e(qY,MNe),e(Zf,ENe),e(Zf,j8),e(j8,CNe),e(Zf,wNe),e(F,ANe),e(F,em),e(em,NY),e(NY,yNe),e(em,LNe),e(em,D8),e(D8,xNe),e(em,kNe),e(F,SNe),e(F,om),e(om,jY),e(jY,RNe),e(om,BNe),e(om,G8),e(G8,PNe),e(om,$Ne),e(F,INe),e(F,rm),e(rm,DY),e(DY,qNe),e(rm,NNe),e(rm,O8),e(O8,jNe),e(rm,DNe),e(F,GNe),e(F,tm),e(tm,GY),e(GY,ONe),e(tm,VNe),e(tm,V8),e(V8,XNe),e(tm,zNe),e(F,QNe),e(F,am),e(am,OY),e(OY,WNe),e(am,HNe),e(am,X8),e(X8,UNe),e(am,JNe),e(F,YNe),e(F,nm),e(nm,VY),e(VY,KNe),e(nm,ZNe),e(nm,z8),e(z8,eje),e(nm,oje),e(F,rje),e(F,sm),e(sm,XY),e(XY,tje),e(sm,aje),e(sm,Q8),e(Q8,nje),e(sm,sje),e(F,lje),e(F,lm),e(lm,zY),e(zY,ije),e(lm,dje),e(lm,W8),e(W8,cje),e(lm,fje),e(F,mje),e(F,im),e(im,QY),e(QY,gje),e(im,hje),e(im,H8),e(H8,pje),e(im,_je),e(F,uje),e(F,dm),e(dm,WY),e(WY,bje),e(dm,Fje),e(dm,U8),e(U8,vje),e(dm,Tje),e(F,Mje),e(F,cm),e(cm,HY),e(HY,Eje),e(cm,Cje),e(cm,J8),e(J8,wje),e(cm,Aje),e(F,yje),e(F,fm),e(fm,UY),e(UY,Lje),e(fm,xje),e(fm,Y8),e(Y8,kje),e(fm,Sje),e(F,Rje),e(F,mm),e(mm,JY),e(JY,Bje),e(mm,Pje),e(mm,K8),e(K8,$je),e(mm,Ije),e(F,qje),e(F,gm),e(gm,YY),e(YY,Nje),e(gm,jje),e(gm,Z8),e(Z8,Dje),e(gm,Gje),e(F,Oje),e(F,hm),e(hm,KY),e(KY,Vje),e(hm,Xje),e(hm,ex),e(ex,zje),e(hm,Qje),e(F,Wje),e(F,pm),e(pm,ZY),e(ZY,Hje),e(pm,Uje),e(pm,ox),e(ox,Jje),e(pm,Yje),e(F,Kje),e(F,_m),e(_m,eK),e(eK,Zje),e(_m,eDe),e(_m,rx),e(rx,oDe),e(_m,rDe),e(F,tDe),e(F,um),e(um,oK),e(oK,aDe),e(um,nDe),e(um,tx),e(tx,sDe),e(um,lDe),e(F,iDe),e(F,bm),e(bm,rK),e(rK,dDe),e(bm,cDe),e(bm,ax),e(ax,fDe),e(bm,mDe),e(F,gDe),e(F,Fm),e(Fm,tK),e(tK,hDe),e(Fm,pDe),e(Fm,nx),e(nx,_De),e(Fm,uDe),e(F,bDe),e(F,vm),e(vm,aK),e(aK,FDe),e(vm,vDe),e(vm,sx),e(sx,TDe),e(vm,MDe),e(F,EDe),e(F,Tm),e(Tm,nK),e(nK,CDe),e(Tm,wDe),e(Tm,lx),e(lx,ADe),e(Tm,yDe),e(F,LDe),e(F,Mm),e(Mm,sK),e(sK,xDe),e(Mm,kDe),e(Mm,ix),e(ix,SDe),e(Mm,RDe),e(F,BDe),e(F,Em),e(Em,lK),e(lK,PDe),e(Em,$De),e(Em,dx),e(dx,IDe),e(Em,qDe),e(F,NDe),e(F,Cm),e(Cm,iK),e(iK,jDe),e(Cm,DDe),e(Cm,cx),e(cx,GDe),e(Cm,ODe),e(F,VDe),e(F,wm),e(wm,dK),e(dK,XDe),e(wm,zDe),e(wm,fx),e(fx,QDe),e(wm,WDe),e(F,HDe),e(F,Am),e(Am,cK),e(cK,UDe),e(Am,JDe),e(Am,mx),e(mx,YDe),e(Am,KDe),e(F,ZDe),e(F,ym),e(ym,fK),e(fK,eGe),e(ym,oGe),e(ym,gx),e(gx,rGe),e(ym,tGe),e(F,aGe),e(F,Lm),e(Lm,mK),e(mK,nGe),e(Lm,sGe),e(Lm,hx),e(hx,lGe),e(Lm,iGe),e(F,dGe),e(F,xm),e(xm,gK),e(gK,cGe),e(xm,fGe),e(xm,px),e(px,mGe),e(xm,gGe),e(F,hGe),e(F,km),e(km,hK),e(hK,pGe),e(km,_Ge),e(km,_x),e(_x,uGe),e(km,bGe),e(F,FGe),e(F,Sm),e(Sm,pK),e(pK,vGe),e(Sm,TGe),e(Sm,ux),e(ux,MGe),e(Sm,EGe),e(F,CGe),e(F,Rm),e(Rm,_K),e(_K,wGe),e(Rm,AGe),e(Rm,bx),e(bx,yGe),e(Rm,LGe),e(F,xGe),e(F,Bm),e(Bm,uK),e(uK,kGe),e(Bm,SGe),e(Bm,Fx),e(Fx,RGe),e(Bm,BGe),e(F,PGe),e(F,Pm),e(Pm,bK),e(bK,$Ge),e(Pm,IGe),e(Pm,vx),e(vx,qGe),e(Pm,NGe),e(F,jGe),e(F,$m),e($m,FK),e(FK,DGe),e($m,GGe),e($m,Tx),e(Tx,OGe),e($m,VGe),e(F,XGe),e(F,Im),e(Im,vK),e(vK,zGe),e(Im,QGe),e(Im,Mx),e(Mx,WGe),e(Im,HGe),e(F,UGe),e(F,qm),e(qm,TK),e(TK,JGe),e(qm,YGe),e(qm,Ex),e(Ex,KGe),e(qm,ZGe),e(F,eOe),e(F,Nm),e(Nm,MK),e(MK,oOe),e(Nm,rOe),e(Nm,Cx),e(Cx,tOe),e(Nm,aOe),e(F,nOe),e(F,jm),e(jm,EK),e(EK,sOe),e(jm,lOe),e(jm,wx),e(wx,iOe),e(jm,dOe),e(F,cOe),e(F,Dm),e(Dm,CK),e(CK,fOe),e(Dm,mOe),e(Dm,Ax),e(Ax,gOe),e(Dm,hOe),e(F,pOe),e(F,Gm),e(Gm,wK),e(wK,_Oe),e(Gm,uOe),e(Gm,yx),e(yx,bOe),e(Gm,FOe),e(F,vOe),e(F,Om),e(Om,AK),e(AK,TOe),e(Om,MOe),e(Om,Lx),e(Lx,EOe),e(Om,COe),e(F,wOe),e(F,Vm),e(Vm,yK),e(yK,AOe),e(Vm,yOe),e(Vm,xx),e(xx,LOe),e(Vm,xOe),e(F,kOe),e(F,Xm),e(Xm,LK),e(LK,SOe),e(Xm,ROe),e(Xm,kx),e(kx,BOe),e(Xm,POe),e(F,$Oe),e(F,zm),e(zm,xK),e(xK,IOe),e(zm,qOe),e(zm,Sx),e(Sx,NOe),e(zm,jOe),e(F,DOe),e(F,Qm),e(Qm,kK),e(kK,GOe),e(Qm,OOe),e(Qm,Rx),e(Rx,VOe),e(Qm,XOe),e(F,zOe),e(F,Wm),e(Wm,SK),e(SK,QOe),e(Wm,WOe),e(Wm,Bx),e(Bx,HOe),e(Wm,UOe),e(F,JOe),e(F,Hm),e(Hm,RK),e(RK,YOe),e(Hm,KOe),e(Hm,Px),e(Px,ZOe),e(Hm,eVe),e(F,oVe),e(F,Um),e(Um,BK),e(BK,rVe),e(Um,tVe),e(Um,$x),e($x,aVe),e(Um,nVe),e(F,sVe),e(F,Jm),e(Jm,PK),e(PK,lVe),e(Jm,iVe),e(Jm,Ix),e(Ix,dVe),e(Jm,cVe),e(F,fVe),e(F,Ym),e(Ym,$K),e($K,mVe),e(Ym,gVe),e(Ym,qx),e(qx,hVe),e(Ym,pVe),e(F,_Ve),e(F,Km),e(Km,IK),e(IK,uVe),e(Km,bVe),e(Km,Nx),e(Nx,FVe),e(Km,vVe),e(F,TVe),e(F,Zm),e(Zm,qK),e(qK,MVe),e(Zm,EVe),e(Zm,jx),e(jx,CVe),e(Zm,wVe),e(F,AVe),e(F,eg),e(eg,NK),e(NK,yVe),e(eg,LVe),e(eg,Dx),e(Dx,xVe),e(eg,kVe),e(F,SVe),e(F,og),e(og,jK),e(jK,RVe),e(og,BVe),e(og,Gx),e(Gx,PVe),e(og,$Ve),e(F,IVe),e(F,rg),e(rg,DK),e(DK,qVe),e(rg,NVe),e(rg,Ox),e(Ox,jVe),e(rg,DVe),e(F,GVe),e(F,tg),e(tg,GK),e(GK,OVe),e(tg,VVe),e(tg,Vx),e(Vx,XVe),e(tg,zVe),e(F,QVe),e(F,ag),e(ag,OK),e(OK,WVe),e(ag,HVe),e(ag,Xx),e(Xx,UVe),e(ag,JVe),e(F,YVe),e(F,ng),e(ng,VK),e(VK,KVe),e(ng,ZVe),e(ng,zx),e(zx,eXe),e(ng,oXe),e(F,rXe),e(F,sg),e(sg,XK),e(XK,tXe),e(sg,aXe),e(sg,Qx),e(Qx,nXe),e(sg,sXe),e(F,lXe),e(F,lg),e(lg,zK),e(zK,iXe),e(lg,dXe),e(lg,Wx),e(Wx,cXe),e(lg,fXe),e(F,mXe),e(F,ig),e(ig,QK),e(QK,gXe),e(ig,hXe),e(ig,Hx),e(Hx,pXe),e(ig,_Xe),e(F,uXe),e(F,dg),e(dg,WK),e(WK,bXe),e(dg,FXe),e(dg,Ux),e(Ux,vXe),e(dg,TXe),e(F,MXe),e(F,cg),e(cg,HK),e(HK,EXe),e(cg,CXe),e(cg,Jx),e(Jx,wXe),e(cg,AXe),e(F,yXe),e(F,fg),e(fg,UK),e(UK,LXe),e(fg,xXe),e(fg,Yx),e(Yx,kXe),e(fg,SXe),e(F,RXe),e(F,mg),e(mg,JK),e(JK,BXe),e(mg,PXe),e(mg,Kx),e(Kx,$Xe),e(mg,IXe),e(F,qXe),e(F,gg),e(gg,YK),e(YK,NXe),e(gg,jXe),e(gg,Zx),e(Zx,DXe),e(gg,GXe),e(F,OXe),e(F,hg),e(hg,KK),e(KK,VXe),e(hg,XXe),e(hg,ek),e(ek,zXe),e(hg,QXe),e(F,WXe),e(F,pg),e(pg,ZK),e(ZK,HXe),e(pg,UXe),e(pg,ok),e(ok,JXe),e(pg,YXe),e(F,KXe),e(F,_g),e(_g,eZ),e(eZ,ZXe),e(_g,eze),e(_g,rk),e(rk,oze),e(_g,rze),e(F,tze),e(F,ug),e(ug,oZ),e(oZ,aze),e(ug,nze),e(ug,tk),e(tk,sze),e(ug,lze),e(F,ize),e(F,bg),e(bg,rZ),e(rZ,dze),e(bg,cze),e(bg,ak),e(ak,fze),e(bg,mze),e(F,gze),e(F,Fg),e(Fg,tZ),e(tZ,hze),e(Fg,pze),e(Fg,nk),e(nk,_ze),e(Fg,uze),e(F,bze),e(F,vg),e(vg,aZ),e(aZ,Fze),e(vg,vze),e(vg,sk),e(sk,Tze),e(vg,Mze),e(F,Eze),e(F,Tg),e(Tg,nZ),e(nZ,Cze),e(Tg,wze),e(Tg,lk),e(lk,Aze),e(Tg,yze),e(F,Lze),e(F,Mg),e(Mg,sZ),e(sZ,xze),e(Mg,kze),e(Mg,ik),e(ik,Sze),e(Mg,Rze),e(F,Bze),e(F,Eg),e(Eg,lZ),e(lZ,Pze),e(Eg,$ze),e(Eg,dk),e(dk,Ize),e(Eg,qze),e(F,Nze),e(F,Cg),e(Cg,iZ),e(iZ,jze),e(Cg,Dze),e(Cg,ck),e(ck,Gze),e(Cg,Oze),e(F,Vze),e(F,wg),e(wg,dZ),e(dZ,Xze),e(wg,zze),e(wg,fk),e(fk,Qze),e(wg,Wze),e(F,Hze),e(F,Ag),e(Ag,cZ),e(cZ,Uze),e(Ag,Jze),e(Ag,mk),e(mk,Yze),e(Ag,Kze),e(F,Zze),e(F,yg),e(yg,fZ),e(fZ,eQe),e(yg,oQe),e(yg,gk),e(gk,rQe),e(yg,tQe),e(F,aQe),e(F,Lg),e(Lg,mZ),e(mZ,nQe),e(Lg,sQe),e(Lg,hk),e(hk,lQe),e(Lg,iQe),e(F,dQe),e(F,xg),e(xg,gZ),e(gZ,cQe),e(xg,fQe),e(xg,pk),e(pk,mQe),e(xg,gQe),e(F,hQe),e(F,kg),e(kg,hZ),e(hZ,pQe),e(kg,_Qe),e(kg,_k),e(_k,uQe),e(kg,bQe),e(F,FQe),e(F,Sg),e(Sg,pZ),e(pZ,vQe),e(Sg,TQe),e(Sg,uk),e(uk,MQe),e(Sg,EQe),e(F,CQe),e(F,Rg),e(Rg,_Z),e(_Z,wQe),e(Rg,AQe),e(Rg,bk),e(bk,yQe),e(Rg,LQe),e(F,xQe),e(F,Bg),e(Bg,uZ),e(uZ,kQe),e(Bg,SQe),e(Bg,Fk),e(Fk,RQe),e(Bg,BQe),e(F,PQe),e(F,Pg),e(Pg,bZ),e(bZ,$Qe),e(Pg,IQe),e(Pg,vk),e(vk,qQe),e(Pg,NQe),e(F,jQe),e(F,$g),e($g,FZ),e(FZ,DQe),e($g,GQe),e($g,Tk),e(Tk,OQe),e($g,VQe),e(F,XQe),e(F,Ig),e(Ig,vZ),e(vZ,zQe),e(Ig,QQe),e(Ig,Mk),e(Mk,WQe),e(Ig,HQe),e(F,UQe),e(F,qg),e(qg,TZ),e(TZ,JQe),e(qg,YQe),e(qg,Ek),e(Ek,KQe),e(qg,ZQe),e(F,eWe),e(F,Ng),e(Ng,MZ),e(MZ,oWe),e(Ng,rWe),e(Ng,Ck),e(Ck,tWe),e(Ng,aWe),e(mo,nWe),e(mo,EZ),e(EZ,sWe),e(mo,lWe),g(O5,mo,null),e(Qo,iWe),e(Qo,jg),g(V5,jg,null),e(jg,dWe),e(jg,CZ),e(CZ,cWe),b(c,oBe,u),b(c,Wi,u),e(Wi,Dg),e(Dg,wZ),g(X5,wZ,null),e(Wi,fWe),e(Wi,AZ),e(AZ,mWe),b(c,rBe,u),b(c,Wo,u),g(z5,Wo,null),e(Wo,gWe),e(Wo,Q5),e(Q5,hWe),e(Q5,wk),e(wk,pWe),e(Q5,_We),e(Wo,uWe),e(Wo,W5),e(W5,bWe),e(W5,yZ),e(yZ,FWe),e(W5,vWe),e(Wo,TWe),e(Wo,go),g(H5,go,null),e(go,MWe),e(go,LZ),e(LZ,EWe),e(go,CWe),e(go,Oa),e(Oa,wWe),e(Oa,xZ),e(xZ,AWe),e(Oa,yWe),e(Oa,kZ),e(kZ,LWe),e(Oa,xWe),e(Oa,SZ),e(SZ,kWe),e(Oa,SWe),e(go,RWe),e(go,E),e(E,Qn),e(Qn,RZ),e(RZ,BWe),e(Qn,PWe),e(Qn,Ak),e(Ak,$We),e(Qn,IWe),e(Qn,yk),e(yk,qWe),e(Qn,NWe),e(E,jWe),e(E,Wn),e(Wn,BZ),e(BZ,DWe),e(Wn,GWe),e(Wn,Lk),e(Lk,OWe),e(Wn,VWe),e(Wn,xk),e(xk,XWe),e(Wn,zWe),e(E,QWe),e(E,Hn),e(Hn,PZ),e(PZ,WWe),e(Hn,HWe),e(Hn,kk),e(kk,UWe),e(Hn,JWe),e(Hn,Sk),e(Sk,YWe),e(Hn,KWe),e(E,ZWe),e(E,Gg),e(Gg,$Z),e($Z,eHe),e(Gg,oHe),e(Gg,Rk),e(Rk,rHe),e(Gg,tHe),e(E,aHe),e(E,Un),e(Un,IZ),e(IZ,nHe),e(Un,sHe),e(Un,Bk),e(Bk,lHe),e(Un,iHe),e(Un,Pk),e(Pk,dHe),e(Un,cHe),e(E,fHe),e(E,Og),e(Og,qZ),e(qZ,mHe),e(Og,gHe),e(Og,$k),e($k,hHe),e(Og,pHe),e(E,_He),e(E,Vg),e(Vg,NZ),e(NZ,uHe),e(Vg,bHe),e(Vg,Ik),e(Ik,FHe),e(Vg,vHe),e(E,THe),e(E,Xg),e(Xg,jZ),e(jZ,MHe),e(Xg,EHe),e(Xg,qk),e(qk,CHe),e(Xg,wHe),e(E,AHe),e(E,Jn),e(Jn,DZ),e(DZ,yHe),e(Jn,LHe),e(Jn,Nk),e(Nk,xHe),e(Jn,kHe),e(Jn,jk),e(jk,SHe),e(Jn,RHe),e(E,BHe),e(E,Yn),e(Yn,GZ),e(GZ,PHe),e(Yn,$He),e(Yn,Dk),e(Dk,IHe),e(Yn,qHe),e(Yn,Gk),e(Gk,NHe),e(Yn,jHe),e(E,DHe),e(E,Kn),e(Kn,OZ),e(OZ,GHe),e(Kn,OHe),e(Kn,Ok),e(Ok,VHe),e(Kn,XHe),e(Kn,Vk),e(Vk,zHe),e(Kn,QHe),e(E,WHe),e(E,zg),e(zg,VZ),e(VZ,HHe),e(zg,UHe),e(zg,Xk),e(Xk,JHe),e(zg,YHe),e(E,KHe),e(E,Qg),e(Qg,XZ),e(XZ,ZHe),e(Qg,eUe),e(Qg,zk),e(zk,oUe),e(Qg,rUe),e(E,tUe),e(E,Zn),e(Zn,zZ),e(zZ,aUe),e(Zn,nUe),e(Zn,Qk),e(Qk,sUe),e(Zn,lUe),e(Zn,Wk),e(Wk,iUe),e(Zn,dUe),e(E,cUe),e(E,Wg),e(Wg,QZ),e(QZ,fUe),e(Wg,mUe),e(Wg,Hk),e(Hk,gUe),e(Wg,hUe),e(E,pUe),e(E,es),e(es,WZ),e(WZ,_Ue),e(es,uUe),e(es,Uk),e(Uk,bUe),e(es,FUe),e(es,Jk),e(Jk,vUe),e(es,TUe),e(E,MUe),e(E,os),e(os,HZ),e(HZ,EUe),e(os,CUe),e(os,Yk),e(Yk,wUe),e(os,AUe),e(os,Kk),e(Kk,yUe),e(os,LUe),e(E,xUe),e(E,rs),e(rs,UZ),e(UZ,kUe),e(rs,SUe),e(rs,Zk),e(Zk,RUe),e(rs,BUe),e(rs,JZ),e(JZ,PUe),e(rs,$Ue),e(E,IUe),e(E,Hg),e(Hg,YZ),e(YZ,qUe),e(Hg,NUe),e(Hg,eS),e(eS,jUe),e(Hg,DUe),e(E,GUe),e(E,ts),e(ts,KZ),e(KZ,OUe),e(ts,VUe),e(ts,oS),e(oS,XUe),e(ts,zUe),e(ts,rS),e(rS,QUe),e(ts,WUe),e(E,HUe),e(E,Ug),e(Ug,ZZ),e(ZZ,UUe),e(Ug,JUe),e(Ug,tS),e(tS,YUe),e(Ug,KUe),e(E,ZUe),e(E,as),e(as,eee),e(eee,eJe),e(as,oJe),e(as,aS),e(aS,rJe),e(as,tJe),e(as,nS),e(nS,aJe),e(as,nJe),e(E,sJe),e(E,ns),e(ns,oee),e(oee,lJe),e(ns,iJe),e(ns,sS),e(sS,dJe),e(ns,cJe),e(ns,lS),e(lS,fJe),e(ns,mJe),e(E,gJe),e(E,ss),e(ss,ree),e(ree,hJe),e(ss,pJe),e(ss,iS),e(iS,_Je),e(ss,uJe),e(ss,dS),e(dS,bJe),e(ss,FJe),e(E,vJe),e(E,Jg),e(Jg,tee),e(tee,TJe),e(Jg,MJe),e(Jg,cS),e(cS,EJe),e(Jg,CJe),e(E,wJe),e(E,ls),e(ls,aee),e(aee,AJe),e(ls,yJe),e(ls,fS),e(fS,LJe),e(ls,xJe),e(ls,mS),e(mS,kJe),e(ls,SJe),e(E,RJe),e(E,Yg),e(Yg,nee),e(nee,BJe),e(Yg,PJe),e(Yg,gS),e(gS,$Je),e(Yg,IJe),e(E,qJe),e(E,is),e(is,see),e(see,NJe),e(is,jJe),e(is,hS),e(hS,DJe),e(is,GJe),e(is,pS),e(pS,OJe),e(is,VJe),e(E,XJe),e(E,ds),e(ds,lee),e(lee,zJe),e(ds,QJe),e(ds,_S),e(_S,WJe),e(ds,HJe),e(ds,uS),e(uS,UJe),e(ds,JJe),e(E,YJe),e(E,cs),e(cs,iee),e(iee,KJe),e(cs,ZJe),e(cs,bS),e(bS,eYe),e(cs,oYe),e(cs,FS),e(FS,rYe),e(cs,tYe),e(E,aYe),e(E,fs),e(fs,dee),e(dee,nYe),e(fs,sYe),e(fs,vS),e(vS,lYe),e(fs,iYe),e(fs,TS),e(TS,dYe),e(fs,cYe),e(E,fYe),e(E,Kg),e(Kg,cee),e(cee,mYe),e(Kg,gYe),e(Kg,MS),e(MS,hYe),e(Kg,pYe),e(E,_Ye),e(E,ms),e(ms,fee),e(fee,uYe),e(ms,bYe),e(ms,ES),e(ES,FYe),e(ms,vYe),e(ms,CS),e(CS,TYe),e(ms,MYe),e(E,EYe),e(E,gs),e(gs,mee),e(mee,CYe),e(gs,wYe),e(gs,wS),e(wS,AYe),e(gs,yYe),e(gs,AS),e(AS,LYe),e(gs,xYe),e(E,kYe),e(E,hs),e(hs,gee),e(gee,SYe),e(hs,RYe),e(hs,yS),e(yS,BYe),e(hs,PYe),e(hs,LS),e(LS,$Ye),e(hs,IYe),e(E,qYe),e(E,ps),e(ps,hee),e(hee,NYe),e(ps,jYe),e(ps,xS),e(xS,DYe),e(ps,GYe),e(ps,kS),e(kS,OYe),e(ps,VYe),e(E,XYe),e(E,_s),e(_s,pee),e(pee,zYe),e(_s,QYe),e(_s,SS),e(SS,WYe),e(_s,HYe),e(_s,RS),e(RS,UYe),e(_s,JYe),e(E,YYe),e(E,us),e(us,_ee),e(_ee,KYe),e(us,ZYe),e(us,BS),e(BS,eKe),e(us,oKe),e(us,PS),e(PS,rKe),e(us,tKe),e(E,aKe),e(E,bs),e(bs,uee),e(uee,nKe),e(bs,sKe),e(bs,$S),e($S,lKe),e(bs,iKe),e(bs,IS),e(IS,dKe),e(bs,cKe),e(E,fKe),e(E,Zg),e(Zg,bee),e(bee,mKe),e(Zg,gKe),e(Zg,qS),e(qS,hKe),e(Zg,pKe),e(E,_Ke),e(E,Fs),e(Fs,Fee),e(Fee,uKe),e(Fs,bKe),e(Fs,NS),e(NS,FKe),e(Fs,vKe),e(Fs,jS),e(jS,TKe),e(Fs,MKe),e(E,EKe),e(E,eh),e(eh,vee),e(vee,CKe),e(eh,wKe),e(eh,DS),e(DS,AKe),e(eh,yKe),e(E,LKe),e(E,oh),e(oh,Tee),e(Tee,xKe),e(oh,kKe),e(oh,GS),e(GS,SKe),e(oh,RKe),e(E,BKe),e(E,vs),e(vs,Mee),e(Mee,PKe),e(vs,$Ke),e(vs,OS),e(OS,IKe),e(vs,qKe),e(vs,VS),e(VS,NKe),e(vs,jKe),e(E,DKe),e(E,Ts),e(Ts,Eee),e(Eee,GKe),e(Ts,OKe),e(Ts,XS),e(XS,VKe),e(Ts,XKe),e(Ts,zS),e(zS,zKe),e(Ts,QKe),e(E,WKe),e(E,rh),e(rh,Cee),e(Cee,HKe),e(rh,UKe),e(rh,QS),e(QS,JKe),e(rh,YKe),e(E,KKe),e(E,Ms),e(Ms,wee),e(wee,ZKe),e(Ms,eZe),e(Ms,WS),e(WS,oZe),e(Ms,rZe),e(Ms,HS),e(HS,tZe),e(Ms,aZe),e(E,nZe),e(E,Es),e(Es,Aee),e(Aee,sZe),e(Es,lZe),e(Es,US),e(US,iZe),e(Es,dZe),e(Es,JS),e(JS,cZe),e(Es,fZe),e(E,mZe),e(E,Cs),e(Cs,yee),e(yee,gZe),e(Cs,hZe),e(Cs,YS),e(YS,pZe),e(Cs,_Ze),e(Cs,KS),e(KS,uZe),e(Cs,bZe),e(E,FZe),e(E,ws),e(ws,Lee),e(Lee,vZe),e(ws,TZe),e(ws,ZS),e(ZS,MZe),e(ws,EZe),e(ws,eR),e(eR,CZe),e(ws,wZe),e(E,AZe),e(E,As),e(As,xee),e(xee,yZe),e(As,LZe),e(As,oR),e(oR,xZe),e(As,kZe),e(As,rR),e(rR,SZe),e(As,RZe),e(E,BZe),e(E,th),e(th,kee),e(kee,PZe),e(th,$Ze),e(th,tR),e(tR,IZe),e(th,qZe),e(E,NZe),e(E,ah),e(ah,See),e(See,jZe),e(ah,DZe),e(ah,aR),e(aR,GZe),e(ah,OZe),e(E,VZe),e(E,nh),e(nh,Ree),e(Ree,XZe),e(nh,zZe),e(nh,nR),e(nR,QZe),e(nh,WZe),e(E,HZe),e(E,sh),e(sh,Bee),e(Bee,UZe),e(sh,JZe),e(sh,sR),e(sR,YZe),e(sh,KZe),e(E,ZZe),e(E,ys),e(ys,Pee),e(Pee,eeo),e(ys,oeo),e(ys,lR),e(lR,reo),e(ys,teo),e(ys,iR),e(iR,aeo),e(ys,neo),e(E,seo),e(E,lh),e(lh,$ee),e($ee,leo),e(lh,ieo),e(lh,dR),e(dR,deo),e(lh,ceo),e(E,feo),e(E,Ls),e(Ls,Iee),e(Iee,meo),e(Ls,geo),e(Ls,cR),e(cR,heo),e(Ls,peo),e(Ls,fR),e(fR,_eo),e(Ls,ueo),e(E,beo),e(E,xs),e(xs,qee),e(qee,Feo),e(xs,veo),e(xs,mR),e(mR,Teo),e(xs,Meo),e(xs,gR),e(gR,Eeo),e(xs,Ceo),e(E,weo),e(E,ks),e(ks,Nee),e(Nee,Aeo),e(ks,yeo),e(ks,hR),e(hR,Leo),e(ks,xeo),e(ks,pR),e(pR,keo),e(ks,Seo),e(E,Reo),e(E,Ss),e(Ss,jee),e(jee,Beo),e(Ss,Peo),e(Ss,_R),e(_R,$eo),e(Ss,Ieo),e(Ss,uR),e(uR,qeo),e(Ss,Neo),e(E,jeo),e(E,Rs),e(Rs,Dee),e(Dee,Deo),e(Rs,Geo),e(Rs,bR),e(bR,Oeo),e(Rs,Veo),e(Rs,FR),e(FR,Xeo),e(Rs,zeo),e(E,Qeo),e(E,Bs),e(Bs,Gee),e(Gee,Weo),e(Bs,Heo),e(Bs,vR),e(vR,Ueo),e(Bs,Jeo),e(Bs,TR),e(TR,Yeo),e(Bs,Keo),e(E,Zeo),e(E,ih),e(ih,Oee),e(Oee,eoo),e(ih,ooo),e(ih,MR),e(MR,roo),e(ih,too),e(E,aoo),e(E,dh),e(dh,Vee),e(Vee,noo),e(dh,soo),e(dh,ER),e(ER,loo),e(dh,ioo),e(E,doo),e(E,Ps),e(Ps,Xee),e(Xee,coo),e(Ps,foo),e(Ps,CR),e(CR,moo),e(Ps,goo),e(Ps,wR),e(wR,hoo),e(Ps,poo),e(E,_oo),e(E,$s),e($s,zee),e(zee,uoo),e($s,boo),e($s,AR),e(AR,Foo),e($s,voo),e($s,yR),e(yR,Too),e($s,Moo),e(E,Eoo),e(E,Is),e(Is,Qee),e(Qee,Coo),e(Is,woo),e(Is,LR),e(LR,Aoo),e(Is,yoo),e(Is,xR),e(xR,Loo),e(Is,xoo),e(E,koo),e(E,ch),e(ch,Wee),e(Wee,Soo),e(ch,Roo),e(ch,kR),e(kR,Boo),e(ch,Poo),e(E,$oo),e(E,fh),e(fh,Hee),e(Hee,Ioo),e(fh,qoo),e(fh,SR),e(SR,Noo),e(fh,joo),e(E,Doo),e(E,mh),e(mh,Uee),e(Uee,Goo),e(mh,Ooo),e(mh,RR),e(RR,Voo),e(mh,Xoo),e(E,zoo),e(E,gh),e(gh,Jee),e(Jee,Qoo),e(gh,Woo),e(gh,BR),e(BR,Hoo),e(gh,Uoo),e(E,Joo),e(E,hh),e(hh,Yee),e(Yee,Yoo),e(hh,Koo),e(hh,PR),e(PR,Zoo),e(hh,ero),e(E,oro),e(E,qs),e(qs,Kee),e(Kee,rro),e(qs,tro),e(qs,$R),e($R,aro),e(qs,nro),e(qs,IR),e(IR,sro),e(qs,lro),e(E,iro),e(E,ph),e(ph,Zee),e(Zee,dro),e(ph,cro),e(ph,qR),e(qR,fro),e(ph,mro),e(E,gro),e(E,_h),e(_h,eoe),e(eoe,hro),e(_h,pro),e(_h,NR),e(NR,_ro),e(_h,uro),e(E,bro),e(E,Ns),e(Ns,ooe),e(ooe,Fro),e(Ns,vro),e(Ns,jR),e(jR,Tro),e(Ns,Mro),e(Ns,DR),e(DR,Ero),e(Ns,Cro),e(E,wro),e(E,js),e(js,roe),e(roe,Aro),e(js,yro),e(js,GR),e(GR,Lro),e(js,xro),e(js,OR),e(OR,kro),e(js,Sro),e(go,Rro),e(go,toe),e(toe,Bro),e(go,Pro),g(U5,go,null),e(Wo,$ro),e(Wo,uh),g(J5,uh,null),e(uh,Iro),e(uh,aoe),e(aoe,qro),b(c,tBe,u),b(c,Hi,u),e(Hi,bh),e(bh,noe),g(Y5,noe,null),e(Hi,Nro),e(Hi,soe),e(soe,jro),b(c,aBe,u),b(c,Ho,u),g(K5,Ho,null),e(Ho,Dro),e(Ho,Z5),e(Z5,Gro),e(Z5,VR),e(VR,Oro),e(Z5,Vro),e(Ho,Xro),e(Ho,e3),e(e3,zro),e(e3,loe),e(loe,Qro),e(e3,Wro),e(Ho,Hro),e(Ho,Ie),g(o3,Ie,null),e(Ie,Uro),e(Ie,ioe),e(ioe,Jro),e(Ie,Yro),e(Ie,Va),e(Va,Kro),e(Va,doe),e(doe,Zro),e(Va,eto),e(Va,coe),e(coe,oto),e(Va,rto),e(Va,foe),e(foe,tto),e(Va,ato),e(Ie,nto),e(Ie,ee),e(ee,Fh),e(Fh,moe),e(moe,sto),e(Fh,lto),e(Fh,XR),e(XR,ito),e(Fh,dto),e(ee,cto),e(ee,vh),e(vh,goe),e(goe,fto),e(vh,mto),e(vh,zR),e(zR,gto),e(vh,hto),e(ee,pto),e(ee,Th),e(Th,hoe),e(hoe,_to),e(Th,uto),e(Th,QR),e(QR,bto),e(Th,Fto),e(ee,vto),e(ee,Mh),e(Mh,poe),e(poe,Tto),e(Mh,Mto),e(Mh,WR),e(WR,Eto),e(Mh,Cto),e(ee,wto),e(ee,Eh),e(Eh,_oe),e(_oe,Ato),e(Eh,yto),e(Eh,HR),e(HR,Lto),e(Eh,xto),e(ee,kto),e(ee,Ch),e(Ch,uoe),e(uoe,Sto),e(Ch,Rto),e(Ch,UR),e(UR,Bto),e(Ch,Pto),e(ee,$to),e(ee,wh),e(wh,boe),e(boe,Ito),e(wh,qto),e(wh,JR),e(JR,Nto),e(wh,jto),e(ee,Dto),e(ee,Ah),e(Ah,Foe),e(Foe,Gto),e(Ah,Oto),e(Ah,YR),e(YR,Vto),e(Ah,Xto),e(ee,zto),e(ee,yh),e(yh,voe),e(voe,Qto),e(yh,Wto),e(yh,KR),e(KR,Hto),e(yh,Uto),e(ee,Jto),e(ee,Lh),e(Lh,Toe),e(Toe,Yto),e(Lh,Kto),e(Lh,ZR),e(ZR,Zto),e(Lh,eao),e(ee,oao),e(ee,xh),e(xh,Moe),e(Moe,rao),e(xh,tao),e(xh,eB),e(eB,aao),e(xh,nao),e(ee,sao),e(ee,kh),e(kh,Eoe),e(Eoe,lao),e(kh,iao),e(kh,oB),e(oB,dao),e(kh,cao),e(ee,fao),e(ee,Sh),e(Sh,Coe),e(Coe,mao),e(Sh,gao),e(Sh,rB),e(rB,hao),e(Sh,pao),e(ee,_ao),e(ee,Rh),e(Rh,woe),e(woe,uao),e(Rh,bao),e(Rh,tB),e(tB,Fao),e(Rh,vao),e(ee,Tao),e(ee,Bh),e(Bh,Aoe),e(Aoe,Mao),e(Bh,Eao),e(Bh,aB),e(aB,Cao),e(Bh,wao),e(ee,Aao),e(ee,Ph),e(Ph,yoe),e(yoe,yao),e(Ph,Lao),e(Ph,nB),e(nB,xao),e(Ph,kao),e(ee,Sao),e(ee,$h),e($h,Loe),e(Loe,Rao),e($h,Bao),e($h,sB),e(sB,Pao),e($h,$ao),e(ee,Iao),e(ee,Ih),e(Ih,xoe),e(xoe,qao),e(Ih,Nao),e(Ih,lB),e(lB,jao),e(Ih,Dao),e(ee,Gao),e(ee,qh),e(qh,koe),e(koe,Oao),e(qh,Vao),e(qh,iB),e(iB,Xao),e(qh,zao),e(Ie,Qao),g(Nh,Ie,null),e(Ie,Wao),e(Ie,Soe),e(Soe,Hao),e(Ie,Uao),g(r3,Ie,null),e(Ho,Jao),e(Ho,jh),g(t3,jh,null),e(jh,Yao),e(jh,Roe),e(Roe,Kao),b(c,nBe,u),b(c,Ui,u),e(Ui,Dh),e(Dh,Boe),g(a3,Boe,null),e(Ui,Zao),e(Ui,Poe),e(Poe,eno),b(c,sBe,u),b(c,Uo,u),g(n3,Uo,null),e(Uo,ono),e(Uo,s3),e(s3,rno),e(s3,dB),e(dB,tno),e(s3,ano),e(Uo,nno),e(Uo,l3),e(l3,sno),e(l3,$oe),e($oe,lno),e(l3,ino),e(Uo,dno),e(Uo,qe),g(i3,qe,null),e(qe,cno),e(qe,Ioe),e(Ioe,fno),e(qe,mno),e(qe,Ji),e(Ji,gno),e(Ji,qoe),e(qoe,hno),e(Ji,pno),e(Ji,Noe),e(Noe,_no),e(Ji,uno),e(qe,bno),e(qe,Se),e(Se,Gh),e(Gh,joe),e(joe,Fno),e(Gh,vno),e(Gh,cB),e(cB,Tno),e(Gh,Mno),e(Se,Eno),e(Se,Oh),e(Oh,Doe),e(Doe,Cno),e(Oh,wno),e(Oh,fB),e(fB,Ano),e(Oh,yno),e(Se,Lno),e(Se,Vh),e(Vh,Goe),e(Goe,xno),e(Vh,kno),e(Vh,mB),e(mB,Sno),e(Vh,Rno),e(Se,Bno),e(Se,Xh),e(Xh,Ooe),e(Ooe,Pno),e(Xh,$no),e(Xh,gB),e(gB,Ino),e(Xh,qno),e(Se,Nno),e(Se,zh),e(zh,Voe),e(Voe,jno),e(zh,Dno),e(zh,hB),e(hB,Gno),e(zh,Ono),e(Se,Vno),e(Se,Qh),e(Qh,Xoe),e(Xoe,Xno),e(Qh,zno),e(Qh,pB),e(pB,Qno),e(Qh,Wno),e(Se,Hno),e(Se,Wh),e(Wh,zoe),e(zoe,Uno),e(Wh,Jno),e(Wh,_B),e(_B,Yno),e(Wh,Kno),e(Se,Zno),e(Se,Hh),e(Hh,Qoe),e(Qoe,eso),e(Hh,oso),e(Hh,uB),e(uB,rso),e(Hh,tso),e(qe,aso),g(Uh,qe,null),e(qe,nso),e(qe,Woe),e(Woe,sso),e(qe,lso),g(d3,qe,null),e(Uo,iso),e(Uo,Jh),g(c3,Jh,null),e(Jh,dso),e(Jh,Hoe),e(Hoe,cso),b(c,lBe,u),b(c,Yi,u),e(Yi,Yh),e(Yh,Uoe),g(f3,Uoe,null),e(Yi,fso),e(Yi,Joe),e(Joe,mso),b(c,iBe,u),b(c,Jo,u),g(m3,Jo,null),e(Jo,gso),e(Jo,Ki),e(Ki,hso),e(Ki,bB),e(bB,pso),e(Ki,_so),e(Ki,FB),e(FB,uso),e(Ki,bso),e(Jo,Fso),e(Jo,g3),e(g3,vso),e(g3,Yoe),e(Yoe,Tso),e(g3,Mso),e(Jo,Eso),e(Jo,Xr),g(h3,Xr,null),e(Xr,Cso),e(Xr,Koe),e(Koe,wso),e(Xr,Aso),e(Xr,Zi),e(Zi,yso),e(Zi,Zoe),e(Zoe,Lso),e(Zi,xso),e(Zi,vB),e(vB,kso),e(Zi,Sso),e(Xr,Rso),e(Xr,ere),e(ere,Bso),e(Xr,Pso),g(p3,Xr,null),e(Jo,$so),e(Jo,Ne),g(_3,Ne,null),e(Ne,Iso),e(Ne,ore),e(ore,qso),e(Ne,Nso),e(Ne,Xa),e(Xa,jso),e(Xa,rre),e(rre,Dso),e(Xa,Gso),e(Xa,tre),e(tre,Oso),e(Xa,Vso),e(Xa,are),e(are,Xso),e(Xa,zso),e(Ne,Qso),e(Ne,T),e(T,Kh),e(Kh,nre),e(nre,Wso),e(Kh,Hso),e(Kh,TB),e(TB,Uso),e(Kh,Jso),e(T,Yso),e(T,Zh),e(Zh,sre),e(sre,Kso),e(Zh,Zso),e(Zh,MB),e(MB,elo),e(Zh,olo),e(T,rlo),e(T,ep),e(ep,lre),e(lre,tlo),e(ep,alo),e(ep,EB),e(EB,nlo),e(ep,slo),e(T,llo),e(T,op),e(op,ire),e(ire,ilo),e(op,dlo),e(op,CB),e(CB,clo),e(op,flo),e(T,mlo),e(T,rp),e(rp,dre),e(dre,glo),e(rp,hlo),e(rp,wB),e(wB,plo),e(rp,_lo),e(T,ulo),e(T,tp),e(tp,cre),e(cre,blo),e(tp,Flo),e(tp,AB),e(AB,vlo),e(tp,Tlo),e(T,Mlo),e(T,ap),e(ap,fre),e(fre,Elo),e(ap,Clo),e(ap,yB),e(yB,wlo),e(ap,Alo),e(T,ylo),e(T,np),e(np,mre),e(mre,Llo),e(np,xlo),e(np,LB),e(LB,klo),e(np,Slo),e(T,Rlo),e(T,sp),e(sp,gre),e(gre,Blo),e(sp,Plo),e(sp,xB),e(xB,$lo),e(sp,Ilo),e(T,qlo),e(T,lp),e(lp,hre),e(hre,Nlo),e(lp,jlo),e(lp,kB),e(kB,Dlo),e(lp,Glo),e(T,Olo),e(T,ip),e(ip,pre),e(pre,Vlo),e(ip,Xlo),e(ip,SB),e(SB,zlo),e(ip,Qlo),e(T,Wlo),e(T,dp),e(dp,_re),e(_re,Hlo),e(dp,Ulo),e(dp,RB),e(RB,Jlo),e(dp,Ylo),e(T,Klo),e(T,cp),e(cp,ure),e(ure,Zlo),e(cp,eio),e(cp,BB),e(BB,oio),e(cp,rio),e(T,tio),e(T,fp),e(fp,bre),e(bre,aio),e(fp,nio),e(fp,PB),e(PB,sio),e(fp,lio),e(T,iio),e(T,mp),e(mp,Fre),e(Fre,dio),e(mp,cio),e(mp,$B),e($B,fio),e(mp,mio),e(T,gio),e(T,gp),e(gp,vre),e(vre,hio),e(gp,pio),e(gp,IB),e(IB,_io),e(gp,uio),e(T,bio),e(T,hp),e(hp,Tre),e(Tre,Fio),e(hp,vio),e(hp,qB),e(qB,Tio),e(hp,Mio),e(T,Eio),e(T,pp),e(pp,Mre),e(Mre,Cio),e(pp,wio),e(pp,NB),e(NB,Aio),e(pp,yio),e(T,Lio),e(T,_p),e(_p,Ere),e(Ere,xio),e(_p,kio),e(_p,jB),e(jB,Sio),e(_p,Rio),e(T,Bio),e(T,up),e(up,Cre),e(Cre,Pio),e(up,$io),e(up,DB),e(DB,Iio),e(up,qio),e(T,Nio),e(T,bp),e(bp,wre),e(wre,jio),e(bp,Dio),e(bp,GB),e(GB,Gio),e(bp,Oio),e(T,Vio),e(T,Fp),e(Fp,Are),e(Are,Xio),e(Fp,zio),e(Fp,OB),e(OB,Qio),e(Fp,Wio),e(T,Hio),e(T,vp),e(vp,yre),e(yre,Uio),e(vp,Jio),e(vp,VB),e(VB,Yio),e(vp,Kio),e(T,Zio),e(T,Tp),e(Tp,Lre),e(Lre,edo),e(Tp,odo),e(Tp,XB),e(XB,rdo),e(Tp,tdo),e(T,ado),e(T,Mp),e(Mp,xre),e(xre,ndo),e(Mp,sdo),e(Mp,zB),e(zB,ldo),e(Mp,ido),e(T,ddo),e(T,Ep),e(Ep,kre),e(kre,cdo),e(Ep,fdo),e(Ep,QB),e(QB,mdo),e(Ep,gdo),e(T,hdo),e(T,Cp),e(Cp,Sre),e(Sre,pdo),e(Cp,_do),e(Cp,WB),e(WB,udo),e(Cp,bdo),e(T,Fdo),e(T,wp),e(wp,Rre),e(Rre,vdo),e(wp,Tdo),e(wp,HB),e(HB,Mdo),e(wp,Edo),e(T,Cdo),e(T,Ap),e(Ap,Bre),e(Bre,wdo),e(Ap,Ado),e(Ap,UB),e(UB,ydo),e(Ap,Ldo),e(T,xdo),e(T,Ds),e(Ds,Pre),e(Pre,kdo),e(Ds,Sdo),e(Ds,JB),e(JB,Rdo),e(Ds,Bdo),e(Ds,YB),e(YB,Pdo),e(Ds,$do),e(T,Ido),e(T,yp),e(yp,$re),e($re,qdo),e(yp,Ndo),e(yp,KB),e(KB,jdo),e(yp,Ddo),e(T,Gdo),e(T,Lp),e(Lp,Ire),e(Ire,Odo),e(Lp,Vdo),e(Lp,ZB),e(ZB,Xdo),e(Lp,zdo),e(T,Qdo),e(T,xp),e(xp,qre),e(qre,Wdo),e(xp,Hdo),e(xp,eP),e(eP,Udo),e(xp,Jdo),e(T,Ydo),e(T,kp),e(kp,Nre),e(Nre,Kdo),e(kp,Zdo),e(kp,oP),e(oP,eco),e(kp,oco),e(T,rco),e(T,Sp),e(Sp,jre),e(jre,tco),e(Sp,aco),e(Sp,rP),e(rP,nco),e(Sp,sco),e(T,lco),e(T,Rp),e(Rp,Dre),e(Dre,ico),e(Rp,dco),e(Rp,tP),e(tP,cco),e(Rp,fco),e(T,mco),e(T,Bp),e(Bp,Gre),e(Gre,gco),e(Bp,hco),e(Bp,aP),e(aP,pco),e(Bp,_co),e(T,uco),e(T,Pp),e(Pp,Ore),e(Ore,bco),e(Pp,Fco),e(Pp,nP),e(nP,vco),e(Pp,Tco),e(T,Mco),e(T,$p),e($p,Vre),e(Vre,Eco),e($p,Cco),e($p,sP),e(sP,wco),e($p,Aco),e(T,yco),e(T,Ip),e(Ip,Xre),e(Xre,Lco),e(Ip,xco),e(Ip,lP),e(lP,kco),e(Ip,Sco),e(T,Rco),e(T,qp),e(qp,zre),e(zre,Bco),e(qp,Pco),e(qp,iP),e(iP,$co),e(qp,Ico),e(T,qco),e(T,Np),e(Np,Qre),e(Qre,Nco),e(Np,jco),e(Np,dP),e(dP,Dco),e(Np,Gco),e(T,Oco),e(T,jp),e(jp,Wre),e(Wre,Vco),e(jp,Xco),e(jp,cP),e(cP,zco),e(jp,Qco),e(T,Wco),e(T,Dp),e(Dp,Hre),e(Hre,Hco),e(Dp,Uco),e(Dp,fP),e(fP,Jco),e(Dp,Yco),e(T,Kco),e(T,Gp),e(Gp,Ure),e(Ure,Zco),e(Gp,efo),e(Gp,mP),e(mP,ofo),e(Gp,rfo),e(T,tfo),e(T,Op),e(Op,Jre),e(Jre,afo),e(Op,nfo),e(Op,gP),e(gP,sfo),e(Op,lfo),e(T,ifo),e(T,Vp),e(Vp,Yre),e(Yre,dfo),e(Vp,cfo),e(Vp,hP),e(hP,ffo),e(Vp,mfo),e(T,gfo),e(T,Xp),e(Xp,Kre),e(Kre,hfo),e(Xp,pfo),e(Xp,pP),e(pP,_fo),e(Xp,ufo),e(T,bfo),e(T,zp),e(zp,Zre),e(Zre,Ffo),e(zp,vfo),e(zp,_P),e(_P,Tfo),e(zp,Mfo),e(T,Efo),e(T,Qp),e(Qp,ete),e(ete,Cfo),e(Qp,wfo),e(Qp,uP),e(uP,Afo),e(Qp,yfo),e(T,Lfo),e(T,Wp),e(Wp,ote),e(ote,xfo),e(Wp,kfo),e(Wp,bP),e(bP,Sfo),e(Wp,Rfo),e(T,Bfo),e(T,Hp),e(Hp,rte),e(rte,Pfo),e(Hp,$fo),e(Hp,FP),e(FP,Ifo),e(Hp,qfo),e(T,Nfo),e(T,Up),e(Up,tte),e(tte,jfo),e(Up,Dfo),e(Up,vP),e(vP,Gfo),e(Up,Ofo),e(T,Vfo),e(T,Jp),e(Jp,ate),e(ate,Xfo),e(Jp,zfo),e(Jp,TP),e(TP,Qfo),e(Jp,Wfo),e(T,Hfo),e(T,Yp),e(Yp,nte),e(nte,Ufo),e(Yp,Jfo),e(Yp,MP),e(MP,Yfo),e(Yp,Kfo),e(T,Zfo),e(T,Kp),e(Kp,ste),e(ste,emo),e(Kp,omo),e(Kp,EP),e(EP,rmo),e(Kp,tmo),e(T,amo),e(T,Zp),e(Zp,lte),e(lte,nmo),e(Zp,smo),e(Zp,CP),e(CP,lmo),e(Zp,imo),e(T,dmo),e(T,e_),e(e_,ite),e(ite,cmo),e(e_,fmo),e(e_,wP),e(wP,mmo),e(e_,gmo),e(T,hmo),e(T,o_),e(o_,dte),e(dte,pmo),e(o_,_mo),e(o_,AP),e(AP,umo),e(o_,bmo),e(T,Fmo),e(T,r_),e(r_,cte),e(cte,vmo),e(r_,Tmo),e(r_,yP),e(yP,Mmo),e(r_,Emo),e(T,Cmo),e(T,t_),e(t_,fte),e(fte,wmo),e(t_,Amo),e(t_,LP),e(LP,ymo),e(t_,Lmo),e(T,xmo),e(T,a_),e(a_,mte),e(mte,kmo),e(a_,Smo),e(a_,xP),e(xP,Rmo),e(a_,Bmo),e(T,Pmo),e(T,n_),e(n_,gte),e(gte,$mo),e(n_,Imo),e(n_,kP),e(kP,qmo),e(n_,Nmo),e(T,jmo),e(T,s_),e(s_,hte),e(hte,Dmo),e(s_,Gmo),e(s_,SP),e(SP,Omo),e(s_,Vmo),e(T,Xmo),e(T,l_),e(l_,pte),e(pte,zmo),e(l_,Qmo),e(l_,RP),e(RP,Wmo),e(l_,Hmo),e(T,Umo),e(T,i_),e(i_,_te),e(_te,Jmo),e(i_,Ymo),e(i_,BP),e(BP,Kmo),e(i_,Zmo),e(T,ego),e(T,d_),e(d_,ute),e(ute,ogo),e(d_,rgo),e(d_,PP),e(PP,tgo),e(d_,ago),e(T,ngo),e(T,c_),e(c_,bte),e(bte,sgo),e(c_,lgo),e(c_,$P),e($P,igo),e(c_,dgo),e(T,cgo),e(T,f_),e(f_,Fte),e(Fte,fgo),e(f_,mgo),e(f_,IP),e(IP,ggo),e(f_,hgo),e(T,pgo),e(T,m_),e(m_,vte),e(vte,_go),e(m_,ugo),e(m_,qP),e(qP,bgo),e(m_,Fgo),e(T,vgo),e(T,g_),e(g_,Tte),e(Tte,Tgo),e(g_,Mgo),e(g_,NP),e(NP,Ego),e(g_,Cgo),e(T,wgo),e(T,h_),e(h_,Mte),e(Mte,Ago),e(h_,ygo),e(h_,jP),e(jP,Lgo),e(h_,xgo),e(T,kgo),e(T,p_),e(p_,Ete),e(Ete,Sgo),e(p_,Rgo),e(p_,DP),e(DP,Bgo),e(p_,Pgo),e(T,$go),e(T,__),e(__,Cte),e(Cte,Igo),e(__,qgo),e(__,GP),e(GP,Ngo),e(__,jgo),e(T,Dgo),e(T,u_),e(u_,wte),e(wte,Ggo),e(u_,Ogo),e(u_,OP),e(OP,Vgo),e(u_,Xgo),e(T,zgo),e(T,b_),e(b_,Ate),e(Ate,Qgo),e(b_,Wgo),e(b_,VP),e(VP,Hgo),e(b_,Ugo),e(T,Jgo),e(T,F_),e(F_,yte),e(yte,Ygo),e(F_,Kgo),e(F_,XP),e(XP,Zgo),e(F_,eho),e(T,oho),e(T,v_),e(v_,Lte),e(Lte,rho),e(v_,tho),e(v_,zP),e(zP,aho),e(v_,nho),e(T,sho),e(T,T_),e(T_,xte),e(xte,lho),e(T_,iho),e(T_,QP),e(QP,dho),e(T_,cho),e(T,fho),e(T,M_),e(M_,kte),e(kte,mho),e(M_,gho),e(M_,WP),e(WP,hho),e(M_,pho),e(T,_ho),e(T,E_),e(E_,Ste),e(Ste,uho),e(E_,bho),e(E_,HP),e(HP,Fho),e(E_,vho),e(T,Tho),e(T,C_),e(C_,Rte),e(Rte,Mho),e(C_,Eho),e(C_,UP),e(UP,Cho),e(C_,who),e(T,Aho),e(T,w_),e(w_,Bte),e(Bte,yho),e(w_,Lho),e(w_,JP),e(JP,xho),e(w_,kho),e(T,Sho),e(T,A_),e(A_,Pte),e(Pte,Rho),e(A_,Bho),e(A_,YP),e(YP,Pho),e(A_,$ho),e(T,Iho),e(T,y_),e(y_,$te),e($te,qho),e(y_,Nho),e(y_,KP),e(KP,jho),e(y_,Dho),e(T,Gho),e(T,L_),e(L_,Ite),e(Ite,Oho),e(L_,Vho),e(L_,ZP),e(ZP,Xho),e(L_,zho),e(T,Qho),e(T,x_),e(x_,qte),e(qte,Who),e(x_,Hho),e(x_,e$),e(e$,Uho),e(x_,Jho),e(T,Yho),e(T,k_),e(k_,Nte),e(Nte,Kho),e(k_,Zho),e(k_,o$),e(o$,epo),e(k_,opo),e(T,rpo),e(T,S_),e(S_,jte),e(jte,tpo),e(S_,apo),e(S_,r$),e(r$,npo),e(S_,spo),e(T,lpo),e(T,R_),e(R_,Dte),e(Dte,ipo),e(R_,dpo),e(R_,t$),e(t$,cpo),e(R_,fpo),e(T,mpo),e(T,B_),e(B_,Gte),e(Gte,gpo),e(B_,hpo),e(B_,a$),e(a$,ppo),e(B_,_po),e(T,upo),e(T,P_),e(P_,Ote),e(Ote,bpo),e(P_,Fpo),e(P_,n$),e(n$,vpo),e(P_,Tpo),e(T,Mpo),e(T,$_),e($_,Vte),e(Vte,Epo),e($_,Cpo),e($_,s$),e(s$,wpo),e($_,Apo),e(T,ypo),e(T,I_),e(I_,Xte),e(Xte,Lpo),e(I_,xpo),e(I_,l$),e(l$,kpo),e(I_,Spo),e(Ne,Rpo),e(Ne,q_),e(q_,Bpo),e(q_,zte),e(zte,Ppo),e(q_,$po),e(q_,Qte),e(Qte,Ipo),e(Ne,qpo),e(Ne,Wte),e(Wte,Npo),e(Ne,jpo),g(u3,Ne,null),b(c,dBe,u),b(c,ed,u),e(ed,N_),e(N_,Hte),g(b3,Hte,null),e(ed,Dpo),e(ed,Ute),e(Ute,Gpo),b(c,cBe,u),b(c,Yo,u),g(F3,Yo,null),e(Yo,Opo),e(Yo,od),e(od,Vpo),e(od,i$),e(i$,Xpo),e(od,zpo),e(od,d$),e(d$,Qpo),e(od,Wpo),e(Yo,Hpo),e(Yo,v3),e(v3,Upo),e(v3,Jte),e(Jte,Jpo),e(v3,Ypo),e(Yo,Kpo),e(Yo,zr),g(T3,zr,null),e(zr,Zpo),e(zr,Yte),e(Yte,e_o),e(zr,o_o),e(zr,rd),e(rd,r_o),e(rd,Kte),e(Kte,t_o),e(rd,a_o),e(rd,c$),e(c$,n_o),e(rd,s_o),e(zr,l_o),e(zr,Zte),e(Zte,i_o),e(zr,d_o),g(M3,zr,null),e(Yo,c_o),e(Yo,je),g(E3,je,null),e(je,f_o),e(je,eae),e(eae,m_o),e(je,g_o),e(je,za),e(za,h_o),e(za,oae),e(oae,p_o),e(za,__o),e(za,rae),e(rae,u_o),e(za,b_o),e(za,tae),e(tae,F_o),e(za,v_o),e(je,T_o),e(je,S),e(S,j_),e(j_,aae),e(aae,M_o),e(j_,E_o),e(j_,f$),e(f$,C_o),e(j_,w_o),e(S,A_o),e(S,D_),e(D_,nae),e(nae,y_o),e(D_,L_o),e(D_,m$),e(m$,x_o),e(D_,k_o),e(S,S_o),e(S,G_),e(G_,sae),e(sae,R_o),e(G_,B_o),e(G_,g$),e(g$,P_o),e(G_,$_o),e(S,I_o),e(S,O_),e(O_,lae),e(lae,q_o),e(O_,N_o),e(O_,h$),e(h$,j_o),e(O_,D_o),e(S,G_o),e(S,V_),e(V_,iae),e(iae,O_o),e(V_,V_o),e(V_,p$),e(p$,X_o),e(V_,z_o),e(S,Q_o),e(S,X_),e(X_,dae),e(dae,W_o),e(X_,H_o),e(X_,_$),e(_$,U_o),e(X_,J_o),e(S,Y_o),e(S,z_),e(z_,cae),e(cae,K_o),e(z_,Z_o),e(z_,u$),e(u$,euo),e(z_,ouo),e(S,ruo),e(S,Q_),e(Q_,fae),e(fae,tuo),e(Q_,auo),e(Q_,b$),e(b$,nuo),e(Q_,suo),e(S,luo),e(S,W_),e(W_,mae),e(mae,iuo),e(W_,duo),e(W_,F$),e(F$,cuo),e(W_,fuo),e(S,muo),e(S,H_),e(H_,gae),e(gae,guo),e(H_,huo),e(H_,v$),e(v$,puo),e(H_,_uo),e(S,uuo),e(S,U_),e(U_,hae),e(hae,buo),e(U_,Fuo),e(U_,T$),e(T$,vuo),e(U_,Tuo),e(S,Muo),e(S,J_),e(J_,pae),e(pae,Euo),e(J_,Cuo),e(J_,M$),e(M$,wuo),e(J_,Auo),e(S,yuo),e(S,Y_),e(Y_,_ae),e(_ae,Luo),e(Y_,xuo),e(Y_,E$),e(E$,kuo),e(Y_,Suo),e(S,Ruo),e(S,K_),e(K_,uae),e(uae,Buo),e(K_,Puo),e(K_,C$),e(C$,$uo),e(K_,Iuo),e(S,quo),e(S,Z_),e(Z_,bae),e(bae,Nuo),e(Z_,juo),e(Z_,w$),e(w$,Duo),e(Z_,Guo),e(S,Ouo),e(S,eu),e(eu,Fae),e(Fae,Vuo),e(eu,Xuo),e(eu,A$),e(A$,zuo),e(eu,Quo),e(S,Wuo),e(S,ou),e(ou,vae),e(vae,Huo),e(ou,Uuo),e(ou,y$),e(y$,Juo),e(ou,Yuo),e(S,Kuo),e(S,ru),e(ru,Tae),e(Tae,Zuo),e(ru,e2o),e(ru,L$),e(L$,o2o),e(ru,r2o),e(S,t2o),e(S,tu),e(tu,Mae),e(Mae,a2o),e(tu,n2o),e(tu,x$),e(x$,s2o),e(tu,l2o),e(S,i2o),e(S,au),e(au,Eae),e(Eae,d2o),e(au,c2o),e(au,k$),e(k$,f2o),e(au,m2o),e(S,g2o),e(S,nu),e(nu,Cae),e(Cae,h2o),e(nu,p2o),e(nu,S$),e(S$,_2o),e(nu,u2o),e(S,b2o),e(S,su),e(su,wae),e(wae,F2o),e(su,v2o),e(su,R$),e(R$,T2o),e(su,M2o),e(S,E2o),e(S,lu),e(lu,Aae),e(Aae,C2o),e(lu,w2o),e(lu,B$),e(B$,A2o),e(lu,y2o),e(S,L2o),e(S,iu),e(iu,yae),e(yae,x2o),e(iu,k2o),e(iu,P$),e(P$,S2o),e(iu,R2o),e(S,B2o),e(S,du),e(du,Lae),e(Lae,P2o),e(du,$2o),e(du,$$),e($$,I2o),e(du,q2o),e(S,N2o),e(S,cu),e(cu,xae),e(xae,j2o),e(cu,D2o),e(cu,I$),e(I$,G2o),e(cu,O2o),e(S,V2o),e(S,fu),e(fu,kae),e(kae,X2o),e(fu,z2o),e(fu,q$),e(q$,Q2o),e(fu,W2o),e(S,H2o),e(S,mu),e(mu,Sae),e(Sae,U2o),e(mu,J2o),e(mu,N$),e(N$,Y2o),e(mu,K2o),e(S,Z2o),e(S,gu),e(gu,Rae),e(Rae,e1o),e(gu,o1o),e(gu,j$),e(j$,r1o),e(gu,t1o),e(S,a1o),e(S,hu),e(hu,Bae),e(Bae,n1o),e(hu,s1o),e(hu,D$),e(D$,l1o),e(hu,i1o),e(S,d1o),e(S,pu),e(pu,Pae),e(Pae,c1o),e(pu,f1o),e(pu,G$),e(G$,m1o),e(pu,g1o),e(S,h1o),e(S,_u),e(_u,$ae),e($ae,p1o),e(_u,_1o),e(_u,O$),e(O$,u1o),e(_u,b1o),e(S,F1o),e(S,uu),e(uu,Iae),e(Iae,v1o),e(uu,T1o),e(uu,V$),e(V$,M1o),e(uu,E1o),e(S,C1o),e(S,bu),e(bu,qae),e(qae,w1o),e(bu,A1o),e(bu,X$),e(X$,y1o),e(bu,L1o),e(S,x1o),e(S,Fu),e(Fu,Nae),e(Nae,k1o),e(Fu,S1o),e(Fu,z$),e(z$,R1o),e(Fu,B1o),e(S,P1o),e(S,vu),e(vu,jae),e(jae,$1o),e(vu,I1o),e(vu,Q$),e(Q$,q1o),e(vu,N1o),e(S,j1o),e(S,Tu),e(Tu,Dae),e(Dae,D1o),e(Tu,G1o),e(Tu,W$),e(W$,O1o),e(Tu,V1o),e(S,X1o),e(S,Mu),e(Mu,Gae),e(Gae,z1o),e(Mu,Q1o),e(Mu,H$),e(H$,W1o),e(Mu,H1o),e(S,U1o),e(S,Eu),e(Eu,Oae),e(Oae,J1o),e(Eu,Y1o),e(Eu,U$),e(U$,K1o),e(Eu,Z1o),e(S,ebo),e(S,Cu),e(Cu,Vae),e(Vae,obo),e(Cu,rbo),e(Cu,J$),e(J$,tbo),e(Cu,abo),e(je,nbo),e(je,wu),e(wu,sbo),e(wu,Xae),e(Xae,lbo),e(wu,ibo),e(wu,zae),e(zae,dbo),e(je,cbo),e(je,Qae),e(Qae,fbo),e(je,mbo),g(C3,je,null),b(c,fBe,u),b(c,td,u),e(td,Au),e(Au,Wae),g(w3,Wae,null),e(td,gbo),e(td,Hae),e(Hae,hbo),b(c,mBe,u),b(c,Ko,u),g(A3,Ko,null),e(Ko,pbo),e(Ko,ad),e(ad,_bo),e(ad,Y$),e(Y$,ubo),e(ad,bbo),e(ad,K$),e(K$,Fbo),e(ad,vbo),e(Ko,Tbo),e(Ko,y3),e(y3,Mbo),e(y3,Uae),e(Uae,Ebo),e(y3,Cbo),e(Ko,wbo),e(Ko,Qr),g(L3,Qr,null),e(Qr,Abo),e(Qr,Jae),e(Jae,ybo),e(Qr,Lbo),e(Qr,nd),e(nd,xbo),e(nd,Yae),e(Yae,kbo),e(nd,Sbo),e(nd,Z$),e(Z$,Rbo),e(nd,Bbo),e(Qr,Pbo),e(Qr,Kae),e(Kae,$bo),e(Qr,Ibo),g(x3,Qr,null),e(Ko,qbo),e(Ko,De),g(k3,De,null),e(De,Nbo),e(De,Zae),e(Zae,jbo),e(De,Dbo),e(De,Qa),e(Qa,Gbo),e(Qa,ene),e(ene,Obo),e(Qa,Vbo),e(Qa,one),e(one,Xbo),e(Qa,zbo),e(Qa,rne),e(rne,Qbo),e(Qa,Wbo),e(De,Hbo),e(De,$),e($,yu),e(yu,tne),e(tne,Ubo),e(yu,Jbo),e(yu,eI),e(eI,Ybo),e(yu,Kbo),e($,Zbo),e($,Lu),e(Lu,ane),e(ane,e6o),e(Lu,o6o),e(Lu,oI),e(oI,r6o),e(Lu,t6o),e($,a6o),e($,xu),e(xu,nne),e(nne,n6o),e(xu,s6o),e(xu,rI),e(rI,l6o),e(xu,i6o),e($,d6o),e($,ku),e(ku,sne),e(sne,c6o),e(ku,f6o),e(ku,tI),e(tI,m6o),e(ku,g6o),e($,h6o),e($,Su),e(Su,lne),e(lne,p6o),e(Su,_6o),e(Su,aI),e(aI,u6o),e(Su,b6o),e($,F6o),e($,Ru),e(Ru,ine),e(ine,v6o),e(Ru,T6o),e(Ru,nI),e(nI,M6o),e(Ru,E6o),e($,C6o),e($,Bu),e(Bu,dne),e(dne,w6o),e(Bu,A6o),e(Bu,sI),e(sI,y6o),e(Bu,L6o),e($,x6o),e($,Pu),e(Pu,cne),e(cne,k6o),e(Pu,S6o),e(Pu,lI),e(lI,R6o),e(Pu,B6o),e($,P6o),e($,$u),e($u,fne),e(fne,$6o),e($u,I6o),e($u,iI),e(iI,q6o),e($u,N6o),e($,j6o),e($,Iu),e(Iu,mne),e(mne,D6o),e(Iu,G6o),e(Iu,dI),e(dI,O6o),e(Iu,V6o),e($,X6o),e($,qu),e(qu,gne),e(gne,z6o),e(qu,Q6o),e(qu,cI),e(cI,W6o),e(qu,H6o),e($,U6o),e($,Nu),e(Nu,hne),e(hne,J6o),e(Nu,Y6o),e(Nu,fI),e(fI,K6o),e(Nu,Z6o),e($,eFo),e($,ju),e(ju,pne),e(pne,oFo),e(ju,rFo),e(ju,mI),e(mI,tFo),e(ju,aFo),e($,nFo),e($,Du),e(Du,_ne),e(_ne,sFo),e(Du,lFo),e(Du,gI),e(gI,iFo),e(Du,dFo),e($,cFo),e($,Gu),e(Gu,une),e(une,fFo),e(Gu,mFo),e(Gu,hI),e(hI,gFo),e(Gu,hFo),e($,pFo),e($,Ou),e(Ou,bne),e(bne,_Fo),e(Ou,uFo),e(Ou,pI),e(pI,bFo),e(Ou,FFo),e($,vFo),e($,Vu),e(Vu,Fne),e(Fne,TFo),e(Vu,MFo),e(Vu,_I),e(_I,EFo),e(Vu,CFo),e($,wFo),e($,Xu),e(Xu,vne),e(vne,AFo),e(Xu,yFo),e(Xu,uI),e(uI,LFo),e(Xu,xFo),e($,kFo),e($,zu),e(zu,Tne),e(Tne,SFo),e(zu,RFo),e(zu,bI),e(bI,BFo),e(zu,PFo),e($,$Fo),e($,Qu),e(Qu,Mne),e(Mne,IFo),e(Qu,qFo),e(Qu,FI),e(FI,NFo),e(Qu,jFo),e($,DFo),e($,Wu),e(Wu,Ene),e(Ene,GFo),e(Wu,OFo),e(Wu,vI),e(vI,VFo),e(Wu,XFo),e($,zFo),e($,Hu),e(Hu,Cne),e(Cne,QFo),e(Hu,WFo),e(Hu,TI),e(TI,HFo),e(Hu,UFo),e($,JFo),e($,Uu),e(Uu,wne),e(wne,YFo),e(Uu,KFo),e(Uu,MI),e(MI,ZFo),e(Uu,evo),e($,ovo),e($,Ju),e(Ju,Ane),e(Ane,rvo),e(Ju,tvo),e(Ju,EI),e(EI,avo),e(Ju,nvo),e($,svo),e($,Yu),e(Yu,yne),e(yne,lvo),e(Yu,ivo),e(Yu,CI),e(CI,dvo),e(Yu,cvo),e($,fvo),e($,Ku),e(Ku,Lne),e(Lne,mvo),e(Ku,gvo),e(Ku,wI),e(wI,hvo),e(Ku,pvo),e($,_vo),e($,Zu),e(Zu,xne),e(xne,uvo),e(Zu,bvo),e(Zu,AI),e(AI,Fvo),e(Zu,vvo),e($,Tvo),e($,e2),e(e2,kne),e(kne,Mvo),e(e2,Evo),e(e2,yI),e(yI,Cvo),e(e2,wvo),e($,Avo),e($,o2),e(o2,Sne),e(Sne,yvo),e(o2,Lvo),e(o2,LI),e(LI,xvo),e(o2,kvo),e($,Svo),e($,r2),e(r2,Rne),e(Rne,Rvo),e(r2,Bvo),e(r2,xI),e(xI,Pvo),e(r2,$vo),e($,Ivo),e($,t2),e(t2,Bne),e(Bne,qvo),e(t2,Nvo),e(t2,kI),e(kI,jvo),e(t2,Dvo),e($,Gvo),e($,a2),e(a2,Pne),e(Pne,Ovo),e(a2,Vvo),e(a2,SI),e(SI,Xvo),e(a2,zvo),e($,Qvo),e($,n2),e(n2,$ne),e($ne,Wvo),e(n2,Hvo),e(n2,RI),e(RI,Uvo),e(n2,Jvo),e($,Yvo),e($,s2),e(s2,Ine),e(Ine,Kvo),e(s2,Zvo),e(s2,BI),e(BI,eTo),e(s2,oTo),e($,rTo),e($,l2),e(l2,qne),e(qne,tTo),e(l2,aTo),e(l2,PI),e(PI,nTo),e(l2,sTo),e(De,lTo),e(De,i2),e(i2,iTo),e(i2,Nne),e(Nne,dTo),e(i2,cTo),e(i2,jne),e(jne,fTo),e(De,mTo),e(De,Dne),e(Dne,gTo),e(De,hTo),g(S3,De,null),b(c,gBe,u),b(c,sd,u),e(sd,d2),e(d2,Gne),g(R3,Gne,null),e(sd,pTo),e(sd,One),e(One,_To),b(c,hBe,u),b(c,Zo,u),g(B3,Zo,null),e(Zo,uTo),e(Zo,ld),e(ld,bTo),e(ld,$I),e($I,FTo),e(ld,vTo),e(ld,II),e(II,TTo),e(ld,MTo),e(Zo,ETo),e(Zo,P3),e(P3,CTo),e(P3,Vne),e(Vne,wTo),e(P3,ATo),e(Zo,yTo),e(Zo,Wr),g($3,Wr,null),e(Wr,LTo),e(Wr,Xne),e(Xne,xTo),e(Wr,kTo),e(Wr,id),e(id,STo),e(id,zne),e(zne,RTo),e(id,BTo),e(id,qI),e(qI,PTo),e(id,$To),e(Wr,ITo),e(Wr,Qne),e(Qne,qTo),e(Wr,NTo),g(I3,Wr,null),e(Zo,jTo),e(Zo,Ge),g(q3,Ge,null),e(Ge,DTo),e(Ge,Wne),e(Wne,GTo),e(Ge,OTo),e(Ge,Wa),e(Wa,VTo),e(Wa,Hne),e(Hne,XTo),e(Wa,zTo),e(Wa,Une),e(Une,QTo),e(Wa,WTo),e(Wa,Jne),e(Jne,HTo),e(Wa,UTo),e(Ge,JTo),e(Ge,I),e(I,c2),e(c2,Yne),e(Yne,YTo),e(c2,KTo),e(c2,NI),e(NI,ZTo),e(c2,e7o),e(I,o7o),e(I,f2),e(f2,Kne),e(Kne,r7o),e(f2,t7o),e(f2,jI),e(jI,a7o),e(f2,n7o),e(I,s7o),e(I,m2),e(m2,Zne),e(Zne,l7o),e(m2,i7o),e(m2,DI),e(DI,d7o),e(m2,c7o),e(I,f7o),e(I,g2),e(g2,ese),e(ese,m7o),e(g2,g7o),e(g2,GI),e(GI,h7o),e(g2,p7o),e(I,_7o),e(I,h2),e(h2,ose),e(ose,u7o),e(h2,b7o),e(h2,OI),e(OI,F7o),e(h2,v7o),e(I,T7o),e(I,p2),e(p2,rse),e(rse,M7o),e(p2,E7o),e(p2,VI),e(VI,C7o),e(p2,w7o),e(I,A7o),e(I,_2),e(_2,tse),e(tse,y7o),e(_2,L7o),e(_2,XI),e(XI,x7o),e(_2,k7o),e(I,S7o),e(I,u2),e(u2,ase),e(ase,R7o),e(u2,B7o),e(u2,zI),e(zI,P7o),e(u2,$7o),e(I,I7o),e(I,b2),e(b2,nse),e(nse,q7o),e(b2,N7o),e(b2,QI),e(QI,j7o),e(b2,D7o),e(I,G7o),e(I,F2),e(F2,sse),e(sse,O7o),e(F2,V7o),e(F2,WI),e(WI,X7o),e(F2,z7o),e(I,Q7o),e(I,v2),e(v2,lse),e(lse,W7o),e(v2,H7o),e(v2,HI),e(HI,U7o),e(v2,J7o),e(I,Y7o),e(I,T2),e(T2,ise),e(ise,K7o),e(T2,Z7o),e(T2,UI),e(UI,e9o),e(T2,o9o),e(I,r9o),e(I,M2),e(M2,dse),e(dse,t9o),e(M2,a9o),e(M2,JI),e(JI,n9o),e(M2,s9o),e(I,l9o),e(I,E2),e(E2,cse),e(cse,i9o),e(E2,d9o),e(E2,YI),e(YI,c9o),e(E2,f9o),e(I,m9o),e(I,C2),e(C2,fse),e(fse,g9o),e(C2,h9o),e(C2,KI),e(KI,p9o),e(C2,_9o),e(I,u9o),e(I,w2),e(w2,mse),e(mse,b9o),e(w2,F9o),e(w2,ZI),e(ZI,v9o),e(w2,T9o),e(I,M9o),e(I,A2),e(A2,gse),e(gse,E9o),e(A2,C9o),e(A2,eq),e(eq,w9o),e(A2,A9o),e(I,y9o),e(I,y2),e(y2,hse),e(hse,L9o),e(y2,x9o),e(y2,oq),e(oq,k9o),e(y2,S9o),e(I,R9o),e(I,L2),e(L2,pse),e(pse,B9o),e(L2,P9o),e(L2,rq),e(rq,$9o),e(L2,I9o),e(I,q9o),e(I,x2),e(x2,_se),e(_se,N9o),e(x2,j9o),e(x2,tq),e(tq,D9o),e(x2,G9o),e(I,O9o),e(I,k2),e(k2,use),e(use,V9o),e(k2,X9o),e(k2,aq),e(aq,z9o),e(k2,Q9o),e(I,W9o),e(I,S2),e(S2,bse),e(bse,H9o),e(S2,U9o),e(S2,nq),e(nq,J9o),e(S2,Y9o),e(I,K9o),e(I,R2),e(R2,Fse),e(Fse,Z9o),e(R2,eMo),e(R2,sq),e(sq,oMo),e(R2,rMo),e(I,tMo),e(I,B2),e(B2,vse),e(vse,aMo),e(B2,nMo),e(B2,lq),e(lq,sMo),e(B2,lMo),e(I,iMo),e(I,P2),e(P2,Tse),e(Tse,dMo),e(P2,cMo),e(P2,iq),e(iq,fMo),e(P2,mMo),e(I,gMo),e(I,$2),e($2,Mse),e(Mse,hMo),e($2,pMo),e($2,dq),e(dq,_Mo),e($2,uMo),e(I,bMo),e(I,I2),e(I2,Ese),e(Ese,FMo),e(I2,vMo),e(I2,cq),e(cq,TMo),e(I2,MMo),e(I,EMo),e(I,q2),e(q2,Cse),e(Cse,CMo),e(q2,wMo),e(q2,fq),e(fq,AMo),e(q2,yMo),e(I,LMo),e(I,N2),e(N2,wse),e(wse,xMo),e(N2,kMo),e(N2,mq),e(mq,SMo),e(N2,RMo),e(I,BMo),e(I,j2),e(j2,Ase),e(Ase,PMo),e(j2,$Mo),e(j2,gq),e(gq,IMo),e(j2,qMo),e(I,NMo),e(I,D2),e(D2,yse),e(yse,jMo),e(D2,DMo),e(D2,Lse),e(Lse,GMo),e(D2,OMo),e(I,VMo),e(I,G2),e(G2,xse),e(xse,XMo),e(G2,zMo),e(G2,hq),e(hq,QMo),e(G2,WMo),e(I,HMo),e(I,O2),e(O2,kse),e(kse,UMo),e(O2,JMo),e(O2,pq),e(pq,YMo),e(O2,KMo),e(I,ZMo),e(I,V2),e(V2,Sse),e(Sse,e4o),e(V2,o4o),e(V2,_q),e(_q,r4o),e(V2,t4o),e(I,a4o),e(I,X2),e(X2,Rse),e(Rse,n4o),e(X2,s4o),e(X2,uq),e(uq,l4o),e(X2,i4o),e(Ge,d4o),e(Ge,z2),e(z2,c4o),e(z2,Bse),e(Bse,f4o),e(z2,m4o),e(z2,Pse),e(Pse,g4o),e(Ge,h4o),e(Ge,$se),e($se,p4o),e(Ge,_4o),g(N3,Ge,null),b(c,pBe,u),b(c,dd,u),e(dd,Q2),e(Q2,Ise),g(j3,Ise,null),e(dd,u4o),e(dd,qse),e(qse,b4o),b(c,_Be,u),b(c,er,u),g(D3,er,null),e(er,F4o),e(er,cd),e(cd,v4o),e(cd,bq),e(bq,T4o),e(cd,M4o),e(cd,Fq),e(Fq,E4o),e(cd,C4o),e(er,w4o),e(er,G3),e(G3,A4o),e(G3,Nse),e(Nse,y4o),e(G3,L4o),e(er,x4o),e(er,Hr),g(O3,Hr,null),e(Hr,k4o),e(Hr,jse),e(jse,S4o),e(Hr,R4o),e(Hr,fd),e(fd,B4o),e(fd,Dse),e(Dse,P4o),e(fd,$4o),e(fd,vq),e(vq,I4o),e(fd,q4o),e(Hr,N4o),e(Hr,Gse),e(Gse,j4o),e(Hr,D4o),g(V3,Hr,null),e(er,G4o),e(er,Oe),g(X3,Oe,null),e(Oe,O4o),e(Oe,Ose),e(Ose,V4o),e(Oe,X4o),e(Oe,Ha),e(Ha,z4o),e(Ha,Vse),e(Vse,Q4o),e(Ha,W4o),e(Ha,Xse),e(Xse,H4o),e(Ha,U4o),e(Ha,zse),e(zse,J4o),e(Ha,Y4o),e(Oe,K4o),e(Oe,ae),e(ae,W2),e(W2,Qse),e(Qse,Z4o),e(W2,eEo),e(W2,Tq),e(Tq,oEo),e(W2,rEo),e(ae,tEo),e(ae,H2),e(H2,Wse),e(Wse,aEo),e(H2,nEo),e(H2,Mq),e(Mq,sEo),e(H2,lEo),e(ae,iEo),e(ae,U2),e(U2,Hse),e(Hse,dEo),e(U2,cEo),e(U2,Eq),e(Eq,fEo),e(U2,mEo),e(ae,gEo),e(ae,J2),e(J2,Use),e(Use,hEo),e(J2,pEo),e(J2,Cq),e(Cq,_Eo),e(J2,uEo),e(ae,bEo),e(ae,Y2),e(Y2,Jse),e(Jse,FEo),e(Y2,vEo),e(Y2,wq),e(wq,TEo),e(Y2,MEo),e(ae,EEo),e(ae,K2),e(K2,Yse),e(Yse,CEo),e(K2,wEo),e(K2,Aq),e(Aq,AEo),e(K2,yEo),e(ae,LEo),e(ae,Z2),e(Z2,Kse),e(Kse,xEo),e(Z2,kEo),e(Z2,yq),e(yq,SEo),e(Z2,REo),e(ae,BEo),e(ae,e1),e(e1,Zse),e(Zse,PEo),e(e1,$Eo),e(e1,Lq),e(Lq,IEo),e(e1,qEo),e(ae,NEo),e(ae,o1),e(o1,ele),e(ele,jEo),e(o1,DEo),e(o1,xq),e(xq,GEo),e(o1,OEo),e(ae,VEo),e(ae,r1),e(r1,ole),e(ole,XEo),e(r1,zEo),e(r1,kq),e(kq,QEo),e(r1,WEo),e(ae,HEo),e(ae,t1),e(t1,rle),e(rle,UEo),e(t1,JEo),e(t1,Sq),e(Sq,YEo),e(t1,KEo),e(ae,ZEo),e(ae,a1),e(a1,tle),e(tle,e5o),e(a1,o5o),e(a1,Rq),e(Rq,r5o),e(a1,t5o),e(ae,a5o),e(ae,n1),e(n1,ale),e(ale,n5o),e(n1,s5o),e(n1,Bq),e(Bq,l5o),e(n1,i5o),e(ae,d5o),e(ae,s1),e(s1,nle),e(nle,c5o),e(s1,f5o),e(s1,Pq),e(Pq,m5o),e(s1,g5o),e(ae,h5o),e(ae,l1),e(l1,sle),e(sle,p5o),e(l1,_5o),e(l1,$q),e($q,u5o),e(l1,b5o),e(ae,F5o),e(ae,i1),e(i1,lle),e(lle,v5o),e(i1,T5o),e(i1,Iq),e(Iq,M5o),e(i1,E5o),e(ae,C5o),e(ae,d1),e(d1,ile),e(ile,w5o),e(d1,A5o),e(d1,qq),e(qq,y5o),e(d1,L5o),e(ae,x5o),e(ae,c1),e(c1,dle),e(dle,k5o),e(c1,S5o),e(c1,Nq),e(Nq,R5o),e(c1,B5o),e(Oe,P5o),e(Oe,f1),e(f1,$5o),e(f1,cle),e(cle,I5o),e(f1,q5o),e(f1,fle),e(fle,N5o),e(Oe,j5o),e(Oe,mle),e(mle,D5o),e(Oe,G5o),g(z3,Oe,null),b(c,uBe,u),b(c,md,u),e(md,m1),e(m1,gle),g(Q3,gle,null),e(md,O5o),e(md,hle),e(hle,V5o),b(c,bBe,u),b(c,or,u),g(W3,or,null),e(or,X5o),e(or,gd),e(gd,z5o),e(gd,jq),e(jq,Q5o),e(gd,W5o),e(gd,Dq),e(Dq,H5o),e(gd,U5o),e(or,J5o),e(or,H3),e(H3,Y5o),e(H3,ple),e(ple,K5o),e(H3,Z5o),e(or,e3o),e(or,Ur),g(U3,Ur,null),e(Ur,o3o),e(Ur,_le),e(_le,r3o),e(Ur,t3o),e(Ur,hd),e(hd,a3o),e(hd,ule),e(ule,n3o),e(hd,s3o),e(hd,Gq),e(Gq,l3o),e(hd,i3o),e(Ur,d3o),e(Ur,ble),e(ble,c3o),e(Ur,f3o),g(J3,Ur,null),e(or,m3o),e(or,Ve),g(Y3,Ve,null),e(Ve,g3o),e(Ve,Fle),e(Fle,h3o),e(Ve,p3o),e(Ve,Ua),e(Ua,_3o),e(Ua,vle),e(vle,u3o),e(Ua,b3o),e(Ua,Tle),e(Tle,F3o),e(Ua,v3o),e(Ua,Mle),e(Mle,T3o),e(Ua,M3o),e(Ve,E3o),e(Ve,y),e(y,g1),e(g1,Ele),e(Ele,C3o),e(g1,w3o),e(g1,Oq),e(Oq,A3o),e(g1,y3o),e(y,L3o),e(y,h1),e(h1,Cle),e(Cle,x3o),e(h1,k3o),e(h1,Vq),e(Vq,S3o),e(h1,R3o),e(y,B3o),e(y,p1),e(p1,wle),e(wle,P3o),e(p1,$3o),e(p1,Xq),e(Xq,I3o),e(p1,q3o),e(y,N3o),e(y,_1),e(_1,Ale),e(Ale,j3o),e(_1,D3o),e(_1,zq),e(zq,G3o),e(_1,O3o),e(y,V3o),e(y,u1),e(u1,yle),e(yle,X3o),e(u1,z3o),e(u1,Qq),e(Qq,Q3o),e(u1,W3o),e(y,H3o),e(y,b1),e(b1,Lle),e(Lle,U3o),e(b1,J3o),e(b1,Wq),e(Wq,Y3o),e(b1,K3o),e(y,Z3o),e(y,F1),e(F1,xle),e(xle,eCo),e(F1,oCo),e(F1,Hq),e(Hq,rCo),e(F1,tCo),e(y,aCo),e(y,v1),e(v1,kle),e(kle,nCo),e(v1,sCo),e(v1,Uq),e(Uq,lCo),e(v1,iCo),e(y,dCo),e(y,T1),e(T1,Sle),e(Sle,cCo),e(T1,fCo),e(T1,Jq),e(Jq,mCo),e(T1,gCo),e(y,hCo),e(y,M1),e(M1,Rle),e(Rle,pCo),e(M1,_Co),e(M1,Yq),e(Yq,uCo),e(M1,bCo),e(y,FCo),e(y,E1),e(E1,Ble),e(Ble,vCo),e(E1,TCo),e(E1,Kq),e(Kq,MCo),e(E1,ECo),e(y,CCo),e(y,C1),e(C1,Ple),e(Ple,wCo),e(C1,ACo),e(C1,Zq),e(Zq,yCo),e(C1,LCo),e(y,xCo),e(y,w1),e(w1,$le),e($le,kCo),e(w1,SCo),e(w1,eN),e(eN,RCo),e(w1,BCo),e(y,PCo),e(y,A1),e(A1,Ile),e(Ile,$Co),e(A1,ICo),e(A1,oN),e(oN,qCo),e(A1,NCo),e(y,jCo),e(y,y1),e(y1,qle),e(qle,DCo),e(y1,GCo),e(y1,rN),e(rN,OCo),e(y1,VCo),e(y,XCo),e(y,L1),e(L1,Nle),e(Nle,zCo),e(L1,QCo),e(L1,tN),e(tN,WCo),e(L1,HCo),e(y,UCo),e(y,x1),e(x1,jle),e(jle,JCo),e(x1,YCo),e(x1,aN),e(aN,KCo),e(x1,ZCo),e(y,ewo),e(y,k1),e(k1,Dle),e(Dle,owo),e(k1,rwo),e(k1,nN),e(nN,two),e(k1,awo),e(y,nwo),e(y,S1),e(S1,Gle),e(Gle,swo),e(S1,lwo),e(S1,sN),e(sN,iwo),e(S1,dwo),e(y,cwo),e(y,R1),e(R1,Ole),e(Ole,fwo),e(R1,mwo),e(R1,lN),e(lN,gwo),e(R1,hwo),e(y,pwo),e(y,B1),e(B1,Vle),e(Vle,_wo),e(B1,uwo),e(B1,iN),e(iN,bwo),e(B1,Fwo),e(y,vwo),e(y,P1),e(P1,Xle),e(Xle,Two),e(P1,Mwo),e(P1,dN),e(dN,Ewo),e(P1,Cwo),e(y,wwo),e(y,$1),e($1,zle),e(zle,Awo),e($1,ywo),e($1,cN),e(cN,Lwo),e($1,xwo),e(y,kwo),e(y,I1),e(I1,Qle),e(Qle,Swo),e(I1,Rwo),e(I1,fN),e(fN,Bwo),e(I1,Pwo),e(y,$wo),e(y,q1),e(q1,Wle),e(Wle,Iwo),e(q1,qwo),e(q1,mN),e(mN,Nwo),e(q1,jwo),e(y,Dwo),e(y,N1),e(N1,Hle),e(Hle,Gwo),e(N1,Owo),e(N1,gN),e(gN,Vwo),e(N1,Xwo),e(y,zwo),e(y,j1),e(j1,Ule),e(Ule,Qwo),e(j1,Wwo),e(j1,hN),e(hN,Hwo),e(j1,Uwo),e(y,Jwo),e(y,D1),e(D1,Jle),e(Jle,Ywo),e(D1,Kwo),e(D1,pN),e(pN,Zwo),e(D1,eAo),e(y,oAo),e(y,G1),e(G1,Yle),e(Yle,rAo),e(G1,tAo),e(G1,_N),e(_N,aAo),e(G1,nAo),e(y,sAo),e(y,O1),e(O1,Kle),e(Kle,lAo),e(O1,iAo),e(O1,uN),e(uN,dAo),e(O1,cAo),e(y,fAo),e(y,V1),e(V1,Zle),e(Zle,mAo),e(V1,gAo),e(V1,bN),e(bN,hAo),e(V1,pAo),e(y,_Ao),e(y,X1),e(X1,eie),e(eie,uAo),e(X1,bAo),e(X1,FN),e(FN,FAo),e(X1,vAo),e(y,TAo),e(y,z1),e(z1,oie),e(oie,MAo),e(z1,EAo),e(z1,vN),e(vN,CAo),e(z1,wAo),e(y,AAo),e(y,Q1),e(Q1,rie),e(rie,yAo),e(Q1,LAo),e(Q1,TN),e(TN,xAo),e(Q1,kAo),e(y,SAo),e(y,W1),e(W1,tie),e(tie,RAo),e(W1,BAo),e(W1,MN),e(MN,PAo),e(W1,$Ao),e(y,IAo),e(y,H1),e(H1,aie),e(aie,qAo),e(H1,NAo),e(H1,EN),e(EN,jAo),e(H1,DAo),e(y,GAo),e(y,U1),e(U1,nie),e(nie,OAo),e(U1,VAo),e(U1,CN),e(CN,XAo),e(U1,zAo),e(y,QAo),e(y,J1),e(J1,sie),e(sie,WAo),e(J1,HAo),e(J1,wN),e(wN,UAo),e(J1,JAo),e(y,YAo),e(y,Y1),e(Y1,lie),e(lie,KAo),e(Y1,ZAo),e(Y1,AN),e(AN,e0o),e(Y1,o0o),e(y,r0o),e(y,K1),e(K1,iie),e(iie,t0o),e(K1,a0o),e(K1,yN),e(yN,n0o),e(K1,s0o),e(y,l0o),e(y,Z1),e(Z1,die),e(die,i0o),e(Z1,d0o),e(Z1,LN),e(LN,c0o),e(Z1,f0o),e(y,m0o),e(y,eb),e(eb,cie),e(cie,g0o),e(eb,h0o),e(eb,xN),e(xN,p0o),e(eb,_0o),e(y,u0o),e(y,ob),e(ob,fie),e(fie,b0o),e(ob,F0o),e(ob,kN),e(kN,v0o),e(ob,T0o),e(y,M0o),e(y,rb),e(rb,mie),e(mie,E0o),e(rb,C0o),e(rb,SN),e(SN,w0o),e(rb,A0o),e(y,y0o),e(y,tb),e(tb,gie),e(gie,L0o),e(tb,x0o),e(tb,RN),e(RN,k0o),e(tb,S0o),e(y,R0o),e(y,ab),e(ab,hie),e(hie,B0o),e(ab,P0o),e(ab,BN),e(BN,$0o),e(ab,I0o),e(y,q0o),e(y,nb),e(nb,pie),e(pie,N0o),e(nb,j0o),e(nb,PN),e(PN,D0o),e(nb,G0o),e(Ve,O0o),e(Ve,sb),e(sb,V0o),e(sb,_ie),e(_ie,X0o),e(sb,z0o),e(sb,uie),e(uie,Q0o),e(Ve,W0o),e(Ve,bie),e(bie,H0o),e(Ve,U0o),g(K3,Ve,null),b(c,FBe,u),b(c,pd,u),e(pd,lb),e(lb,Fie),g(Z3,Fie,null),e(pd,J0o),e(pd,vie),e(vie,Y0o),b(c,vBe,u),b(c,rr,u),g(eC,rr,null),e(rr,K0o),e(rr,_d),e(_d,Z0o),e(_d,$N),e($N,eyo),e(_d,oyo),e(_d,IN),e(IN,ryo),e(_d,tyo),e(rr,ayo),e(rr,oC),e(oC,nyo),e(oC,Tie),e(Tie,syo),e(oC,lyo),e(rr,iyo),e(rr,Jr),g(rC,Jr,null),e(Jr,dyo),e(Jr,Mie),e(Mie,cyo),e(Jr,fyo),e(Jr,ud),e(ud,myo),e(ud,Eie),e(Eie,gyo),e(ud,hyo),e(ud,qN),e(qN,pyo),e(ud,_yo),e(Jr,uyo),e(Jr,Cie),e(Cie,byo),e(Jr,Fyo),g(tC,Jr,null),e(rr,vyo),e(rr,Xe),g(aC,Xe,null),e(Xe,Tyo),e(Xe,wie),e(wie,Myo),e(Xe,Eyo),e(Xe,Ja),e(Ja,Cyo),e(Ja,Aie),e(Aie,wyo),e(Ja,Ayo),e(Ja,yie),e(yie,yyo),e(Ja,Lyo),e(Ja,Lie),e(Lie,xyo),e(Ja,kyo),e(Xe,Syo),e(Xe,G),e(G,ib),e(ib,xie),e(xie,Ryo),e(ib,Byo),e(ib,NN),e(NN,Pyo),e(ib,$yo),e(G,Iyo),e(G,db),e(db,kie),e(kie,qyo),e(db,Nyo),e(db,jN),e(jN,jyo),e(db,Dyo),e(G,Gyo),e(G,cb),e(cb,Sie),e(Sie,Oyo),e(cb,Vyo),e(cb,DN),e(DN,Xyo),e(cb,zyo),e(G,Qyo),e(G,fb),e(fb,Rie),e(Rie,Wyo),e(fb,Hyo),e(fb,GN),e(GN,Uyo),e(fb,Jyo),e(G,Yyo),e(G,mb),e(mb,Bie),e(Bie,Kyo),e(mb,Zyo),e(mb,ON),e(ON,eLo),e(mb,oLo),e(G,rLo),e(G,gb),e(gb,Pie),e(Pie,tLo),e(gb,aLo),e(gb,VN),e(VN,nLo),e(gb,sLo),e(G,lLo),e(G,hb),e(hb,$ie),e($ie,iLo),e(hb,dLo),e(hb,XN),e(XN,cLo),e(hb,fLo),e(G,mLo),e(G,pb),e(pb,Iie),e(Iie,gLo),e(pb,hLo),e(pb,zN),e(zN,pLo),e(pb,_Lo),e(G,uLo),e(G,_b),e(_b,qie),e(qie,bLo),e(_b,FLo),e(_b,QN),e(QN,vLo),e(_b,TLo),e(G,MLo),e(G,ub),e(ub,Nie),e(Nie,ELo),e(ub,CLo),e(ub,WN),e(WN,wLo),e(ub,ALo),e(G,yLo),e(G,bb),e(bb,jie),e(jie,LLo),e(bb,xLo),e(bb,HN),e(HN,kLo),e(bb,SLo),e(G,RLo),e(G,Fb),e(Fb,Die),e(Die,BLo),e(Fb,PLo),e(Fb,UN),e(UN,$Lo),e(Fb,ILo),e(G,qLo),e(G,vb),e(vb,Gie),e(Gie,NLo),e(vb,jLo),e(vb,JN),e(JN,DLo),e(vb,GLo),e(G,OLo),e(G,Tb),e(Tb,Oie),e(Oie,VLo),e(Tb,XLo),e(Tb,YN),e(YN,zLo),e(Tb,QLo),e(G,WLo),e(G,Mb),e(Mb,Vie),e(Vie,HLo),e(Mb,ULo),e(Mb,KN),e(KN,JLo),e(Mb,YLo),e(G,KLo),e(G,Eb),e(Eb,Xie),e(Xie,ZLo),e(Eb,e8o),e(Eb,ZN),e(ZN,o8o),e(Eb,r8o),e(G,t8o),e(G,Cb),e(Cb,zie),e(zie,a8o),e(Cb,n8o),e(Cb,ej),e(ej,s8o),e(Cb,l8o),e(G,i8o),e(G,wb),e(wb,Qie),e(Qie,d8o),e(wb,c8o),e(wb,oj),e(oj,f8o),e(wb,m8o),e(G,g8o),e(G,Ab),e(Ab,Wie),e(Wie,h8o),e(Ab,p8o),e(Ab,rj),e(rj,_8o),e(Ab,u8o),e(G,b8o),e(G,yb),e(yb,Hie),e(Hie,F8o),e(yb,v8o),e(yb,tj),e(tj,T8o),e(yb,M8o),e(G,E8o),e(G,Lb),e(Lb,Uie),e(Uie,C8o),e(Lb,w8o),e(Lb,aj),e(aj,A8o),e(Lb,y8o),e(G,L8o),e(G,xb),e(xb,Jie),e(Jie,x8o),e(xb,k8o),e(xb,nj),e(nj,S8o),e(xb,R8o),e(G,B8o),e(G,kb),e(kb,Yie),e(Yie,P8o),e(kb,$8o),e(kb,sj),e(sj,I8o),e(kb,q8o),e(G,N8o),e(G,Sb),e(Sb,Kie),e(Kie,j8o),e(Sb,D8o),e(Sb,lj),e(lj,G8o),e(Sb,O8o),e(G,V8o),e(G,Rb),e(Rb,Zie),e(Zie,X8o),e(Rb,z8o),e(Rb,ij),e(ij,Q8o),e(Rb,W8o),e(G,H8o),e(G,Bb),e(Bb,ede),e(ede,U8o),e(Bb,J8o),e(Bb,dj),e(dj,Y8o),e(Bb,K8o),e(G,Z8o),e(G,Pb),e(Pb,ode),e(ode,exo),e(Pb,oxo),e(Pb,cj),e(cj,rxo),e(Pb,txo),e(G,axo),e(G,$b),e($b,rde),e(rde,nxo),e($b,sxo),e($b,fj),e(fj,lxo),e($b,ixo),e(Xe,dxo),e(Xe,Ib),e(Ib,cxo),e(Ib,tde),e(tde,fxo),e(Ib,mxo),e(Ib,ade),e(ade,gxo),e(Xe,hxo),e(Xe,nde),e(nde,pxo),e(Xe,_xo),g(nC,Xe,null),b(c,TBe,u),b(c,bd,u),e(bd,qb),e(qb,sde),g(sC,sde,null),e(bd,uxo),e(bd,lde),e(lde,bxo),b(c,MBe,u),b(c,tr,u),g(lC,tr,null),e(tr,Fxo),e(tr,Fd),e(Fd,vxo),e(Fd,mj),e(mj,Txo),e(Fd,Mxo),e(Fd,gj),e(gj,Exo),e(Fd,Cxo),e(tr,wxo),e(tr,iC),e(iC,Axo),e(iC,ide),e(ide,yxo),e(iC,Lxo),e(tr,xxo),e(tr,Yr),g(dC,Yr,null),e(Yr,kxo),e(Yr,dde),e(dde,Sxo),e(Yr,Rxo),e(Yr,vd),e(vd,Bxo),e(vd,cde),e(cde,Pxo),e(vd,$xo),e(vd,hj),e(hj,Ixo),e(vd,qxo),e(Yr,Nxo),e(Yr,fde),e(fde,jxo),e(Yr,Dxo),g(cC,Yr,null),e(tr,Gxo),e(tr,ze),g(fC,ze,null),e(ze,Oxo),e(ze,mde),e(mde,Vxo),e(ze,Xxo),e(ze,Ya),e(Ya,zxo),e(Ya,gde),e(gde,Qxo),e(Ya,Wxo),e(Ya,hde),e(hde,Hxo),e(Ya,Uxo),e(Ya,pde),e(pde,Jxo),e(Ya,Yxo),e(ze,Kxo),e(ze,da),e(da,Nb),e(Nb,_de),e(_de,Zxo),e(Nb,eko),e(Nb,pj),e(pj,oko),e(Nb,rko),e(da,tko),e(da,jb),e(jb,ude),e(ude,ako),e(jb,nko),e(jb,_j),e(_j,sko),e(jb,lko),e(da,iko),e(da,Db),e(Db,bde),e(bde,dko),e(Db,cko),e(Db,uj),e(uj,fko),e(Db,mko),e(da,gko),e(da,Gb),e(Gb,Fde),e(Fde,hko),e(Gb,pko),e(Gb,bj),e(bj,_ko),e(Gb,uko),e(da,bko),e(da,Ob),e(Ob,vde),e(vde,Fko),e(Ob,vko),e(Ob,Fj),e(Fj,Tko),e(Ob,Mko),e(ze,Eko),e(ze,Vb),e(Vb,Cko),e(Vb,Tde),e(Tde,wko),e(Vb,Ako),e(Vb,Mde),e(Mde,yko),e(ze,Lko),e(ze,Ede),e(Ede,xko),e(ze,kko),g(mC,ze,null),b(c,EBe,u),b(c,Td,u),e(Td,Xb),e(Xb,Cde),g(gC,Cde,null),e(Td,Sko),e(Td,wde),e(wde,Rko),b(c,CBe,u),b(c,ar,u),g(hC,ar,null),e(ar,Bko),e(ar,Md),e(Md,Pko),e(Md,vj),e(vj,$ko),e(Md,Iko),e(Md,Tj),e(Tj,qko),e(Md,Nko),e(ar,jko),e(ar,pC),e(pC,Dko),e(pC,Ade),e(Ade,Gko),e(pC,Oko),e(ar,Vko),e(ar,Kr),g(_C,Kr,null),e(Kr,Xko),e(Kr,yde),e(yde,zko),e(Kr,Qko),e(Kr,Ed),e(Ed,Wko),e(Ed,Lde),e(Lde,Hko),e(Ed,Uko),e(Ed,Mj),e(Mj,Jko),e(Ed,Yko),e(Kr,Kko),e(Kr,xde),e(xde,Zko),e(Kr,eSo),g(uC,Kr,null),e(ar,oSo),e(ar,Qe),g(bC,Qe,null),e(Qe,rSo),e(Qe,kde),e(kde,tSo),e(Qe,aSo),e(Qe,Ka),e(Ka,nSo),e(Ka,Sde),e(Sde,sSo),e(Ka,lSo),e(Ka,Rde),e(Rde,iSo),e(Ka,dSo),e(Ka,Bde),e(Bde,cSo),e(Ka,fSo),e(Qe,mSo),e(Qe,j),e(j,zb),e(zb,Pde),e(Pde,gSo),e(zb,hSo),e(zb,Ej),e(Ej,pSo),e(zb,_So),e(j,uSo),e(j,Qb),e(Qb,$de),e($de,bSo),e(Qb,FSo),e(Qb,Cj),e(Cj,vSo),e(Qb,TSo),e(j,MSo),e(j,Wb),e(Wb,Ide),e(Ide,ESo),e(Wb,CSo),e(Wb,wj),e(wj,wSo),e(Wb,ASo),e(j,ySo),e(j,Hb),e(Hb,qde),e(qde,LSo),e(Hb,xSo),e(Hb,Aj),e(Aj,kSo),e(Hb,SSo),e(j,RSo),e(j,Ub),e(Ub,Nde),e(Nde,BSo),e(Ub,PSo),e(Ub,yj),e(yj,$So),e(Ub,ISo),e(j,qSo),e(j,Jb),e(Jb,jde),e(jde,NSo),e(Jb,jSo),e(Jb,Lj),e(Lj,DSo),e(Jb,GSo),e(j,OSo),e(j,Yb),e(Yb,Dde),e(Dde,VSo),e(Yb,XSo),e(Yb,xj),e(xj,zSo),e(Yb,QSo),e(j,WSo),e(j,Kb),e(Kb,Gde),e(Gde,HSo),e(Kb,USo),e(Kb,kj),e(kj,JSo),e(Kb,YSo),e(j,KSo),e(j,Zb),e(Zb,Ode),e(Ode,ZSo),e(Zb,eRo),e(Zb,Sj),e(Sj,oRo),e(Zb,rRo),e(j,tRo),e(j,e6),e(e6,Vde),e(Vde,aRo),e(e6,nRo),e(e6,Rj),e(Rj,sRo),e(e6,lRo),e(j,iRo),e(j,o6),e(o6,Xde),e(Xde,dRo),e(o6,cRo),e(o6,Bj),e(Bj,fRo),e(o6,mRo),e(j,gRo),e(j,r6),e(r6,zde),e(zde,hRo),e(r6,pRo),e(r6,Pj),e(Pj,_Ro),e(r6,uRo),e(j,bRo),e(j,t6),e(t6,Qde),e(Qde,FRo),e(t6,vRo),e(t6,$j),e($j,TRo),e(t6,MRo),e(j,ERo),e(j,a6),e(a6,Wde),e(Wde,CRo),e(a6,wRo),e(a6,Ij),e(Ij,ARo),e(a6,yRo),e(j,LRo),e(j,n6),e(n6,Hde),e(Hde,xRo),e(n6,kRo),e(n6,qj),e(qj,SRo),e(n6,RRo),e(j,BRo),e(j,s6),e(s6,Ude),e(Ude,PRo),e(s6,$Ro),e(s6,Nj),e(Nj,IRo),e(s6,qRo),e(j,NRo),e(j,l6),e(l6,Jde),e(Jde,jRo),e(l6,DRo),e(l6,jj),e(jj,GRo),e(l6,ORo),e(j,VRo),e(j,i6),e(i6,Yde),e(Yde,XRo),e(i6,zRo),e(i6,Dj),e(Dj,QRo),e(i6,WRo),e(j,HRo),e(j,d6),e(d6,Kde),e(Kde,URo),e(d6,JRo),e(d6,Gj),e(Gj,YRo),e(d6,KRo),e(j,ZRo),e(j,c6),e(c6,Zde),e(Zde,eBo),e(c6,oBo),e(c6,Oj),e(Oj,rBo),e(c6,tBo),e(j,aBo),e(j,f6),e(f6,ece),e(ece,nBo),e(f6,sBo),e(f6,Vj),e(Vj,lBo),e(f6,iBo),e(j,dBo),e(j,m6),e(m6,oce),e(oce,cBo),e(m6,fBo),e(m6,Xj),e(Xj,mBo),e(m6,gBo),e(j,hBo),e(j,g6),e(g6,rce),e(rce,pBo),e(g6,_Bo),e(g6,zj),e(zj,uBo),e(g6,bBo),e(j,FBo),e(j,h6),e(h6,tce),e(tce,vBo),e(h6,TBo),e(h6,Qj),e(Qj,MBo),e(h6,EBo),e(j,CBo),e(j,p6),e(p6,ace),e(ace,wBo),e(p6,ABo),e(p6,Wj),e(Wj,yBo),e(p6,LBo),e(j,xBo),e(j,_6),e(_6,nce),e(nce,kBo),e(_6,SBo),e(_6,Hj),e(Hj,RBo),e(_6,BBo),e(j,PBo),e(j,u6),e(u6,sce),e(sce,$Bo),e(u6,IBo),e(u6,Uj),e(Uj,qBo),e(u6,NBo),e(j,jBo),e(j,b6),e(b6,lce),e(lce,DBo),e(b6,GBo),e(b6,Jj),e(Jj,OBo),e(b6,VBo),e(j,XBo),e(j,F6),e(F6,ice),e(ice,zBo),e(F6,QBo),e(F6,Yj),e(Yj,WBo),e(F6,HBo),e(j,UBo),e(j,v6),e(v6,dce),e(dce,JBo),e(v6,YBo),e(v6,Kj),e(Kj,KBo),e(v6,ZBo),e(j,ePo),e(j,T6),e(T6,cce),e(cce,oPo),e(T6,rPo),e(T6,Zj),e(Zj,tPo),e(T6,aPo),e(j,nPo),e(j,M6),e(M6,fce),e(fce,sPo),e(M6,lPo),e(M6,eD),e(eD,iPo),e(M6,dPo),e(j,cPo),e(j,E6),e(E6,mce),e(mce,fPo),e(E6,mPo),e(E6,oD),e(oD,gPo),e(E6,hPo),e(Qe,pPo),e(Qe,C6),e(C6,_Po),e(C6,gce),e(gce,uPo),e(C6,bPo),e(C6,hce),e(hce,FPo),e(Qe,vPo),e(Qe,pce),e(pce,TPo),e(Qe,MPo),g(FC,Qe,null),b(c,wBe,u),b(c,Cd,u),e(Cd,w6),e(w6,_ce),g(vC,_ce,null),e(Cd,EPo),e(Cd,uce),e(uce,CPo),b(c,ABe,u),b(c,nr,u),g(TC,nr,null),e(nr,wPo),e(nr,wd),e(wd,APo),e(wd,rD),e(rD,yPo),e(wd,LPo),e(wd,tD),e(tD,xPo),e(wd,kPo),e(nr,SPo),e(nr,MC),e(MC,RPo),e(MC,bce),e(bce,BPo),e(MC,PPo),e(nr,$Po),e(nr,Zr),g(EC,Zr,null),e(Zr,IPo),e(Zr,Fce),e(Fce,qPo),e(Zr,NPo),e(Zr,Ad),e(Ad,jPo),e(Ad,vce),e(vce,DPo),e(Ad,GPo),e(Ad,aD),e(aD,OPo),e(Ad,VPo),e(Zr,XPo),e(Zr,Tce),e(Tce,zPo),e(Zr,QPo),g(CC,Zr,null),e(nr,WPo),e(nr,We),g(wC,We,null),e(We,HPo),e(We,Mce),e(Mce,UPo),e(We,JPo),e(We,Za),e(Za,YPo),e(Za,Ece),e(Ece,KPo),e(Za,ZPo),e(Za,Cce),e(Cce,e$o),e(Za,o$o),e(Za,wce),e(wce,r$o),e(Za,t$o),e(We,a$o),e(We,R),e(R,A6),e(A6,Ace),e(Ace,n$o),e(A6,s$o),e(A6,nD),e(nD,l$o),e(A6,i$o),e(R,d$o),e(R,y6),e(y6,yce),e(yce,c$o),e(y6,f$o),e(y6,sD),e(sD,m$o),e(y6,g$o),e(R,h$o),e(R,L6),e(L6,Lce),e(Lce,p$o),e(L6,_$o),e(L6,lD),e(lD,u$o),e(L6,b$o),e(R,F$o),e(R,x6),e(x6,xce),e(xce,v$o),e(x6,T$o),e(x6,iD),e(iD,M$o),e(x6,E$o),e(R,C$o),e(R,k6),e(k6,kce),e(kce,w$o),e(k6,A$o),e(k6,dD),e(dD,y$o),e(k6,L$o),e(R,x$o),e(R,S6),e(S6,Sce),e(Sce,k$o),e(S6,S$o),e(S6,cD),e(cD,R$o),e(S6,B$o),e(R,P$o),e(R,R6),e(R6,Rce),e(Rce,$$o),e(R6,I$o),e(R6,fD),e(fD,q$o),e(R6,N$o),e(R,j$o),e(R,B6),e(B6,Bce),e(Bce,D$o),e(B6,G$o),e(B6,mD),e(mD,O$o),e(B6,V$o),e(R,X$o),e(R,P6),e(P6,Pce),e(Pce,z$o),e(P6,Q$o),e(P6,gD),e(gD,W$o),e(P6,H$o),e(R,U$o),e(R,$6),e($6,$ce),e($ce,J$o),e($6,Y$o),e($6,hD),e(hD,K$o),e($6,Z$o),e(R,eIo),e(R,I6),e(I6,Ice),e(Ice,oIo),e(I6,rIo),e(I6,pD),e(pD,tIo),e(I6,aIo),e(R,nIo),e(R,q6),e(q6,qce),e(qce,sIo),e(q6,lIo),e(q6,_D),e(_D,iIo),e(q6,dIo),e(R,cIo),e(R,N6),e(N6,Nce),e(Nce,fIo),e(N6,mIo),e(N6,uD),e(uD,gIo),e(N6,hIo),e(R,pIo),e(R,j6),e(j6,jce),e(jce,_Io),e(j6,uIo),e(j6,bD),e(bD,bIo),e(j6,FIo),e(R,vIo),e(R,D6),e(D6,Dce),e(Dce,TIo),e(D6,MIo),e(D6,FD),e(FD,EIo),e(D6,CIo),e(R,wIo),e(R,G6),e(G6,Gce),e(Gce,AIo),e(G6,yIo),e(G6,vD),e(vD,LIo),e(G6,xIo),e(R,kIo),e(R,O6),e(O6,Oce),e(Oce,SIo),e(O6,RIo),e(O6,TD),e(TD,BIo),e(O6,PIo),e(R,$Io),e(R,V6),e(V6,Vce),e(Vce,IIo),e(V6,qIo),e(V6,MD),e(MD,NIo),e(V6,jIo),e(R,DIo),e(R,X6),e(X6,Xce),e(Xce,GIo),e(X6,OIo),e(X6,ED),e(ED,VIo),e(X6,XIo),e(R,zIo),e(R,z6),e(z6,zce),e(zce,QIo),e(z6,WIo),e(z6,CD),e(CD,HIo),e(z6,UIo),e(R,JIo),e(R,Q6),e(Q6,Qce),e(Qce,YIo),e(Q6,KIo),e(Q6,wD),e(wD,ZIo),e(Q6,eqo),e(R,oqo),e(R,W6),e(W6,Wce),e(Wce,rqo),e(W6,tqo),e(W6,AD),e(AD,aqo),e(W6,nqo),e(R,sqo),e(R,H6),e(H6,Hce),e(Hce,lqo),e(H6,iqo),e(H6,yD),e(yD,dqo),e(H6,cqo),e(R,fqo),e(R,U6),e(U6,Uce),e(Uce,mqo),e(U6,gqo),e(U6,LD),e(LD,hqo),e(U6,pqo),e(R,_qo),e(R,J6),e(J6,Jce),e(Jce,uqo),e(J6,bqo),e(J6,xD),e(xD,Fqo),e(J6,vqo),e(R,Tqo),e(R,Y6),e(Y6,Yce),e(Yce,Mqo),e(Y6,Eqo),e(Y6,kD),e(kD,Cqo),e(Y6,wqo),e(R,Aqo),e(R,K6),e(K6,Kce),e(Kce,yqo),e(K6,Lqo),e(K6,SD),e(SD,xqo),e(K6,kqo),e(R,Sqo),e(R,Z6),e(Z6,Zce),e(Zce,Rqo),e(Z6,Bqo),e(Z6,RD),e(RD,Pqo),e(Z6,$qo),e(R,Iqo),e(R,eF),e(eF,efe),e(efe,qqo),e(eF,Nqo),e(eF,BD),e(BD,jqo),e(eF,Dqo),e(R,Gqo),e(R,oF),e(oF,ofe),e(ofe,Oqo),e(oF,Vqo),e(oF,PD),e(PD,Xqo),e(oF,zqo),e(R,Qqo),e(R,rF),e(rF,rfe),e(rfe,Wqo),e(rF,Hqo),e(rF,$D),e($D,Uqo),e(rF,Jqo),e(R,Yqo),e(R,tF),e(tF,tfe),e(tfe,Kqo),e(tF,Zqo),e(tF,ID),e(ID,eNo),e(tF,oNo),e(R,rNo),e(R,aF),e(aF,afe),e(afe,tNo),e(aF,aNo),e(aF,qD),e(qD,nNo),e(aF,sNo),e(R,lNo),e(R,nF),e(nF,nfe),e(nfe,iNo),e(nF,dNo),e(nF,ND),e(ND,cNo),e(nF,fNo),e(R,mNo),e(R,sF),e(sF,sfe),e(sfe,gNo),e(sF,hNo),e(sF,jD),e(jD,pNo),e(sF,_No),e(R,uNo),e(R,lF),e(lF,lfe),e(lfe,bNo),e(lF,FNo),e(lF,DD),e(DD,vNo),e(lF,TNo),e(R,MNo),e(R,iF),e(iF,ife),e(ife,ENo),e(iF,CNo),e(iF,GD),e(GD,wNo),e(iF,ANo),e(R,yNo),e(R,dF),e(dF,dfe),e(dfe,LNo),e(dF,xNo),e(dF,OD),e(OD,kNo),e(dF,SNo),e(R,RNo),e(R,cF),e(cF,cfe),e(cfe,BNo),e(cF,PNo),e(cF,VD),e(VD,$No),e(cF,INo),e(We,qNo),e(We,fF),e(fF,NNo),e(fF,ffe),e(ffe,jNo),e(fF,DNo),e(fF,mfe),e(mfe,GNo),e(We,ONo),e(We,gfe),e(gfe,VNo),e(We,XNo),g(AC,We,null),b(c,yBe,u),b(c,yd,u),e(yd,mF),e(mF,hfe),g(yC,hfe,null),e(yd,zNo),e(yd,pfe),e(pfe,QNo),b(c,LBe,u),b(c,sr,u),g(LC,sr,null),e(sr,WNo),e(sr,Ld),e(Ld,HNo),e(Ld,XD),e(XD,UNo),e(Ld,JNo),e(Ld,zD),e(zD,YNo),e(Ld,KNo),e(sr,ZNo),e(sr,xC),e(xC,ejo),e(xC,_fe),e(_fe,ojo),e(xC,rjo),e(sr,tjo),e(sr,et),g(kC,et,null),e(et,ajo),e(et,ufe),e(ufe,njo),e(et,sjo),e(et,xd),e(xd,ljo),e(xd,bfe),e(bfe,ijo),e(xd,djo),e(xd,QD),e(QD,cjo),e(xd,fjo),e(et,mjo),e(et,Ffe),e(Ffe,gjo),e(et,hjo),g(SC,et,null),e(sr,pjo),e(sr,He),g(RC,He,null),e(He,_jo),e(He,vfe),e(vfe,ujo),e(He,bjo),e(He,en),e(en,Fjo),e(en,Tfe),e(Tfe,vjo),e(en,Tjo),e(en,Mfe),e(Mfe,Mjo),e(en,Ejo),e(en,Efe),e(Efe,Cjo),e(en,wjo),e(He,Ajo),e(He,Cfe),e(Cfe,gF),e(gF,wfe),e(wfe,yjo),e(gF,Ljo),e(gF,WD),e(WD,xjo),e(gF,kjo),e(He,Sjo),e(He,hF),e(hF,Rjo),e(hF,Afe),e(Afe,Bjo),e(hF,Pjo),e(hF,yfe),e(yfe,$jo),e(He,Ijo),e(He,Lfe),e(Lfe,qjo),e(He,Njo),g(BC,He,null),b(c,xBe,u),b(c,kd,u),e(kd,pF),e(pF,xfe),g(PC,xfe,null),e(kd,jjo),e(kd,kfe),e(kfe,Djo),b(c,kBe,u),b(c,lr,u),g($C,lr,null),e(lr,Gjo),e(lr,Sd),e(Sd,Ojo),e(Sd,HD),e(HD,Vjo),e(Sd,Xjo),e(Sd,UD),e(UD,zjo),e(Sd,Qjo),e(lr,Wjo),e(lr,IC),e(IC,Hjo),e(IC,Sfe),e(Sfe,Ujo),e(IC,Jjo),e(lr,Yjo),e(lr,ot),g(qC,ot,null),e(ot,Kjo),e(ot,Rfe),e(Rfe,Zjo),e(ot,eDo),e(ot,Rd),e(Rd,oDo),e(Rd,Bfe),e(Bfe,rDo),e(Rd,tDo),e(Rd,JD),e(JD,aDo),e(Rd,nDo),e(ot,sDo),e(ot,Pfe),e(Pfe,lDo),e(ot,iDo),g(NC,ot,null),e(lr,dDo),e(lr,Ue),g(jC,Ue,null),e(Ue,cDo),e(Ue,$fe),e($fe,fDo),e(Ue,mDo),e(Ue,on),e(on,gDo),e(on,Ife),e(Ife,hDo),e(on,pDo),e(on,qfe),e(qfe,_Do),e(on,uDo),e(on,Nfe),e(Nfe,bDo),e(on,FDo),e(Ue,vDo),e(Ue,fe),e(fe,_F),e(_F,jfe),e(jfe,TDo),e(_F,MDo),e(_F,YD),e(YD,EDo),e(_F,CDo),e(fe,wDo),e(fe,uF),e(uF,Dfe),e(Dfe,ADo),e(uF,yDo),e(uF,KD),e(KD,LDo),e(uF,xDo),e(fe,kDo),e(fe,Gs),e(Gs,Gfe),e(Gfe,SDo),e(Gs,RDo),e(Gs,ZD),e(ZD,BDo),e(Gs,PDo),e(Gs,eG),e(eG,$Do),e(Gs,IDo),e(fe,qDo),e(fe,bF),e(bF,Ofe),e(Ofe,NDo),e(bF,jDo),e(bF,oG),e(oG,DDo),e(bF,GDo),e(fe,ODo),e(fe,ma),e(ma,Vfe),e(Vfe,VDo),e(ma,XDo),e(ma,rG),e(rG,zDo),e(ma,QDo),e(ma,tG),e(tG,WDo),e(ma,HDo),e(ma,aG),e(aG,UDo),e(ma,JDo),e(fe,YDo),e(fe,FF),e(FF,Xfe),e(Xfe,KDo),e(FF,ZDo),e(FF,nG),e(nG,eGo),e(FF,oGo),e(fe,rGo),e(fe,vF),e(vF,zfe),e(zfe,tGo),e(vF,aGo),e(vF,sG),e(sG,nGo),e(vF,sGo),e(fe,lGo),e(fe,TF),e(TF,Qfe),e(Qfe,iGo),e(TF,dGo),e(TF,lG),e(lG,cGo),e(TF,fGo),e(fe,mGo),e(fe,MF),e(MF,Wfe),e(Wfe,gGo),e(MF,hGo),e(MF,iG),e(iG,pGo),e(MF,_Go),e(fe,uGo),e(fe,EF),e(EF,Hfe),e(Hfe,bGo),e(EF,FGo),e(EF,dG),e(dG,vGo),e(EF,TGo),e(fe,MGo),e(fe,CF),e(CF,Ufe),e(Ufe,EGo),e(CF,CGo),e(CF,cG),e(cG,wGo),e(CF,AGo),e(fe,yGo),e(fe,wF),e(wF,Jfe),e(Jfe,LGo),e(wF,xGo),e(wF,fG),e(fG,kGo),e(wF,SGo),e(Ue,RGo),e(Ue,AF),e(AF,BGo),e(AF,Yfe),e(Yfe,PGo),e(AF,$Go),e(AF,Kfe),e(Kfe,IGo),e(Ue,qGo),e(Ue,Zfe),e(Zfe,NGo),e(Ue,jGo),g(DC,Ue,null),b(c,SBe,u),b(c,Bd,u),e(Bd,yF),e(yF,eme),g(GC,eme,null),e(Bd,DGo),e(Bd,ome),e(ome,GGo),b(c,RBe,u),b(c,ir,u),g(OC,ir,null),e(ir,OGo),e(ir,Pd),e(Pd,VGo),e(Pd,mG),e(mG,XGo),e(Pd,zGo),e(Pd,gG),e(gG,QGo),e(Pd,WGo),e(ir,HGo),e(ir,VC),e(VC,UGo),e(VC,rme),e(rme,JGo),e(VC,YGo),e(ir,KGo),e(ir,rt),g(XC,rt,null),e(rt,ZGo),e(rt,tme),e(tme,eOo),e(rt,oOo),e(rt,$d),e($d,rOo),e($d,ame),e(ame,tOo),e($d,aOo),e($d,hG),e(hG,nOo),e($d,sOo),e(rt,lOo),e(rt,nme),e(nme,iOo),e(rt,dOo),g(zC,rt,null),e(ir,cOo),e(ir,Je),g(QC,Je,null),e(Je,fOo),e(Je,sme),e(sme,mOo),e(Je,gOo),e(Je,rn),e(rn,hOo),e(rn,lme),e(lme,pOo),e(rn,_Oo),e(rn,ime),e(ime,uOo),e(rn,bOo),e(rn,dme),e(dme,FOo),e(rn,vOo),e(Je,TOo),e(Je,cme),e(cme,LF),e(LF,fme),e(fme,MOo),e(LF,EOo),e(LF,pG),e(pG,COo),e(LF,wOo),e(Je,AOo),e(Je,xF),e(xF,yOo),e(xF,mme),e(mme,LOo),e(xF,xOo),e(xF,gme),e(gme,kOo),e(Je,SOo),e(Je,hme),e(hme,ROo),e(Je,BOo),g(WC,Je,null),b(c,BBe,u),b(c,Id,u),e(Id,kF),e(kF,pme),g(HC,pme,null),e(Id,POo),e(Id,_me),e(_me,$Oo),b(c,PBe,u),b(c,dr,u),g(UC,dr,null),e(dr,IOo),e(dr,qd),e(qd,qOo),e(qd,_G),e(_G,NOo),e(qd,jOo),e(qd,uG),e(uG,DOo),e(qd,GOo),e(dr,OOo),e(dr,JC),e(JC,VOo),e(JC,ume),e(ume,XOo),e(JC,zOo),e(dr,QOo),e(dr,tt),g(YC,tt,null),e(tt,WOo),e(tt,bme),e(bme,HOo),e(tt,UOo),e(tt,Nd),e(Nd,JOo),e(Nd,Fme),e(Fme,YOo),e(Nd,KOo),e(Nd,bG),e(bG,ZOo),e(Nd,eVo),e(tt,oVo),e(tt,vme),e(vme,rVo),e(tt,tVo),g(KC,tt,null),e(dr,aVo),e(dr,Ye),g(ZC,Ye,null),e(Ye,nVo),e(Ye,Tme),e(Tme,sVo),e(Ye,lVo),e(Ye,tn),e(tn,iVo),e(tn,Mme),e(Mme,dVo),e(tn,cVo),e(tn,Eme),e(Eme,fVo),e(tn,mVo),e(tn,Cme),e(Cme,gVo),e(tn,hVo),e(Ye,pVo),e(Ye,Re),e(Re,SF),e(SF,wme),e(wme,_Vo),e(SF,uVo),e(SF,FG),e(FG,bVo),e(SF,FVo),e(Re,vVo),e(Re,RF),e(RF,Ame),e(Ame,TVo),e(RF,MVo),e(RF,vG),e(vG,EVo),e(RF,CVo),e(Re,wVo),e(Re,BF),e(BF,yme),e(yme,AVo),e(BF,yVo),e(BF,TG),e(TG,LVo),e(BF,xVo),e(Re,kVo),e(Re,PF),e(PF,Lme),e(Lme,SVo),e(PF,RVo),e(PF,MG),e(MG,BVo),e(PF,PVo),e(Re,$Vo),e(Re,$F),e($F,xme),e(xme,IVo),e($F,qVo),e($F,EG),e(EG,NVo),e($F,jVo),e(Re,DVo),e(Re,IF),e(IF,kme),e(kme,GVo),e(IF,OVo),e(IF,CG),e(CG,VVo),e(IF,XVo),e(Re,zVo),e(Re,qF),e(qF,Sme),e(Sme,QVo),e(qF,WVo),e(qF,wG),e(wG,HVo),e(qF,UVo),e(Re,JVo),e(Re,NF),e(NF,Rme),e(Rme,YVo),e(NF,KVo),e(NF,AG),e(AG,ZVo),e(NF,eXo),e(Ye,oXo),e(Ye,jF),e(jF,rXo),e(jF,Bme),e(Bme,tXo),e(jF,aXo),e(jF,Pme),e(Pme,nXo),e(Ye,sXo),e(Ye,$me),e($me,lXo),e(Ye,iXo),g(ew,Ye,null),b(c,$Be,u),b(c,jd,u),e(jd,DF),e(DF,Ime),g(ow,Ime,null),e(jd,dXo),e(jd,qme),e(qme,cXo),b(c,IBe,u),b(c,cr,u),g(rw,cr,null),e(cr,fXo),e(cr,Dd),e(Dd,mXo),e(Dd,yG),e(yG,gXo),e(Dd,hXo),e(Dd,LG),e(LG,pXo),e(Dd,_Xo),e(cr,uXo),e(cr,tw),e(tw,bXo),e(tw,Nme),e(Nme,FXo),e(tw,vXo),e(cr,TXo),e(cr,at),g(aw,at,null),e(at,MXo),e(at,jme),e(jme,EXo),e(at,CXo),e(at,Gd),e(Gd,wXo),e(Gd,Dme),e(Dme,AXo),e(Gd,yXo),e(Gd,xG),e(xG,LXo),e(Gd,xXo),e(at,kXo),e(at,Gme),e(Gme,SXo),e(at,RXo),g(nw,at,null),e(cr,BXo),e(cr,Ke),g(sw,Ke,null),e(Ke,PXo),e(Ke,Ome),e(Ome,$Xo),e(Ke,IXo),e(Ke,an),e(an,qXo),e(an,Vme),e(Vme,NXo),e(an,jXo),e(an,Xme),e(Xme,DXo),e(an,GXo),e(an,zme),e(zme,OXo),e(an,VXo),e(Ke,XXo),e(Ke,nn),e(nn,GF),e(GF,Qme),e(Qme,zXo),e(GF,QXo),e(GF,kG),e(kG,WXo),e(GF,HXo),e(nn,UXo),e(nn,OF),e(OF,Wme),e(Wme,JXo),e(OF,YXo),e(OF,SG),e(SG,KXo),e(OF,ZXo),e(nn,ezo),e(nn,VF),e(VF,Hme),e(Hme,ozo),e(VF,rzo),e(VF,RG),e(RG,tzo),e(VF,azo),e(nn,nzo),e(nn,XF),e(XF,Ume),e(Ume,szo),e(XF,lzo),e(XF,BG),e(BG,izo),e(XF,dzo),e(Ke,czo),e(Ke,zF),e(zF,fzo),e(zF,Jme),e(Jme,mzo),e(zF,gzo),e(zF,Yme),e(Yme,hzo),e(Ke,pzo),e(Ke,Kme),e(Kme,_zo),e(Ke,uzo),g(lw,Ke,null),b(c,qBe,u),b(c,Od,u),e(Od,QF),e(QF,Zme),g(iw,Zme,null),e(Od,bzo),e(Od,ege),e(ege,Fzo),b(c,NBe,u),b(c,fr,u),g(dw,fr,null),e(fr,vzo),e(fr,Vd),e(Vd,Tzo),e(Vd,PG),e(PG,Mzo),e(Vd,Ezo),e(Vd,$G),e($G,Czo),e(Vd,wzo),e(fr,Azo),e(fr,cw),e(cw,yzo),e(cw,oge),e(oge,Lzo),e(cw,xzo),e(fr,kzo),e(fr,nt),g(fw,nt,null),e(nt,Szo),e(nt,rge),e(rge,Rzo),e(nt,Bzo),e(nt,Xd),e(Xd,Pzo),e(Xd,tge),e(tge,$zo),e(Xd,Izo),e(Xd,IG),e(IG,qzo),e(Xd,Nzo),e(nt,jzo),e(nt,age),e(age,Dzo),e(nt,Gzo),g(mw,nt,null),e(fr,Ozo),e(fr,Ze),g(gw,Ze,null),e(Ze,Vzo),e(Ze,nge),e(nge,Xzo),e(Ze,zzo),e(Ze,sn),e(sn,Qzo),e(sn,sge),e(sge,Wzo),e(sn,Hzo),e(sn,lge),e(lge,Uzo),e(sn,Jzo),e(sn,ige),e(ige,Yzo),e(sn,Kzo),e(Ze,Zzo),e(Ze,Be),e(Be,WF),e(WF,dge),e(dge,eQo),e(WF,oQo),e(WF,qG),e(qG,rQo),e(WF,tQo),e(Be,aQo),e(Be,HF),e(HF,cge),e(cge,nQo),e(HF,sQo),e(HF,NG),e(NG,lQo),e(HF,iQo),e(Be,dQo),e(Be,UF),e(UF,fge),e(fge,cQo),e(UF,fQo),e(UF,jG),e(jG,mQo),e(UF,gQo),e(Be,hQo),e(Be,JF),e(JF,mge),e(mge,pQo),e(JF,_Qo),e(JF,DG),e(DG,uQo),e(JF,bQo),e(Be,FQo),e(Be,YF),e(YF,gge),e(gge,vQo),e(YF,TQo),e(YF,GG),e(GG,MQo),e(YF,EQo),e(Be,CQo),e(Be,KF),e(KF,hge),e(hge,wQo),e(KF,AQo),e(KF,OG),e(OG,yQo),e(KF,LQo),e(Be,xQo),e(Be,ZF),e(ZF,pge),e(pge,kQo),e(ZF,SQo),e(ZF,VG),e(VG,RQo),e(ZF,BQo),e(Be,PQo),e(Be,ev),e(ev,_ge),e(_ge,$Qo),e(ev,IQo),e(ev,XG),e(XG,qQo),e(ev,NQo),e(Ze,jQo),e(Ze,ov),e(ov,DQo),e(ov,uge),e(uge,GQo),e(ov,OQo),e(ov,bge),e(bge,VQo),e(Ze,XQo),e(Ze,Fge),e(Fge,zQo),e(Ze,QQo),g(hw,Ze,null),b(c,jBe,u),b(c,zd,u),e(zd,rv),e(rv,vge),g(pw,vge,null),e(zd,WQo),e(zd,Tge),e(Tge,HQo),b(c,DBe,u),b(c,mr,u),g(_w,mr,null),e(mr,UQo),e(mr,Qd),e(Qd,JQo),e(Qd,zG),e(zG,YQo),e(Qd,KQo),e(Qd,QG),e(QG,ZQo),e(Qd,eWo),e(mr,oWo),e(mr,uw),e(uw,rWo),e(uw,Mge),e(Mge,tWo),e(uw,aWo),e(mr,nWo),e(mr,st),g(bw,st,null),e(st,sWo),e(st,Ege),e(Ege,lWo),e(st,iWo),e(st,Wd),e(Wd,dWo),e(Wd,Cge),e(Cge,cWo),e(Wd,fWo),e(Wd,WG),e(WG,mWo),e(Wd,gWo),e(st,hWo),e(st,wge),e(wge,pWo),e(st,_Wo),g(Fw,st,null),e(mr,uWo),e(mr,eo),g(vw,eo,null),e(eo,bWo),e(eo,Age),e(Age,FWo),e(eo,vWo),e(eo,ln),e(ln,TWo),e(ln,yge),e(yge,MWo),e(ln,EWo),e(ln,Lge),e(Lge,CWo),e(ln,wWo),e(ln,xge),e(xge,AWo),e(ln,yWo),e(eo,LWo),e(eo,Tw),e(Tw,tv),e(tv,kge),e(kge,xWo),e(tv,kWo),e(tv,HG),e(HG,SWo),e(tv,RWo),e(Tw,BWo),e(Tw,av),e(av,Sge),e(Sge,PWo),e(av,$Wo),e(av,UG),e(UG,IWo),e(av,qWo),e(eo,NWo),e(eo,nv),e(nv,jWo),e(nv,Rge),e(Rge,DWo),e(nv,GWo),e(nv,Bge),e(Bge,OWo),e(eo,VWo),e(eo,Pge),e(Pge,XWo),e(eo,zWo),g(Mw,eo,null),b(c,GBe,u),b(c,Hd,u),e(Hd,sv),e(sv,$ge),g(Ew,$ge,null),e(Hd,QWo),e(Hd,Ige),e(Ige,WWo),b(c,OBe,u),b(c,gr,u),g(Cw,gr,null),e(gr,HWo),e(gr,Ud),e(Ud,UWo),e(Ud,JG),e(JG,JWo),e(Ud,YWo),e(Ud,YG),e(YG,KWo),e(Ud,ZWo),e(gr,eHo),e(gr,ww),e(ww,oHo),e(ww,qge),e(qge,rHo),e(ww,tHo),e(gr,aHo),e(gr,lt),g(Aw,lt,null),e(lt,nHo),e(lt,Nge),e(Nge,sHo),e(lt,lHo),e(lt,Jd),e(Jd,iHo),e(Jd,jge),e(jge,dHo),e(Jd,cHo),e(Jd,KG),e(KG,fHo),e(Jd,mHo),e(lt,gHo),e(lt,Dge),e(Dge,hHo),e(lt,pHo),g(yw,lt,null),e(gr,_Ho),e(gr,oo),g(Lw,oo,null),e(oo,uHo),e(oo,Gge),e(Gge,bHo),e(oo,FHo),e(oo,dn),e(dn,vHo),e(dn,Oge),e(Oge,THo),e(dn,MHo),e(dn,Vge),e(Vge,EHo),e(dn,CHo),e(dn,Xge),e(Xge,wHo),e(dn,AHo),e(oo,yHo),e(oo,cn),e(cn,lv),e(lv,zge),e(zge,LHo),e(lv,xHo),e(lv,ZG),e(ZG,kHo),e(lv,SHo),e(cn,RHo),e(cn,iv),e(iv,Qge),e(Qge,BHo),e(iv,PHo),e(iv,eO),e(eO,$Ho),e(iv,IHo),e(cn,qHo),e(cn,dv),e(dv,Wge),e(Wge,NHo),e(dv,jHo),e(dv,oO),e(oO,DHo),e(dv,GHo),e(cn,OHo),e(cn,cv),e(cv,Hge),e(Hge,VHo),e(cv,XHo),e(cv,rO),e(rO,zHo),e(cv,QHo),e(oo,WHo),e(oo,fv),e(fv,HHo),e(fv,Uge),e(Uge,UHo),e(fv,JHo),e(fv,Jge),e(Jge,YHo),e(oo,KHo),e(oo,Yge),e(Yge,ZHo),e(oo,eUo),g(xw,oo,null),b(c,VBe,u),b(c,Yd,u),e(Yd,mv),e(mv,Kge),g(kw,Kge,null),e(Yd,oUo),e(Yd,Zge),e(Zge,rUo),b(c,XBe,u),b(c,hr,u),g(Sw,hr,null),e(hr,tUo),e(hr,Kd),e(Kd,aUo),e(Kd,tO),e(tO,nUo),e(Kd,sUo),e(Kd,aO),e(aO,lUo),e(Kd,iUo),e(hr,dUo),e(hr,Rw),e(Rw,cUo),e(Rw,ehe),e(ehe,fUo),e(Rw,mUo),e(hr,gUo),e(hr,it),g(Bw,it,null),e(it,hUo),e(it,ohe),e(ohe,pUo),e(it,_Uo),e(it,Zd),e(Zd,uUo),e(Zd,rhe),e(rhe,bUo),e(Zd,FUo),e(Zd,nO),e(nO,vUo),e(Zd,TUo),e(it,MUo),e(it,the),e(the,EUo),e(it,CUo),g(Pw,it,null),e(hr,wUo),e(hr,ro),g($w,ro,null),e(ro,AUo),e(ro,ahe),e(ahe,yUo),e(ro,LUo),e(ro,fn),e(fn,xUo),e(fn,nhe),e(nhe,kUo),e(fn,SUo),e(fn,she),e(she,RUo),e(fn,BUo),e(fn,lhe),e(lhe,PUo),e(fn,$Uo),e(ro,IUo),e(ro,ec),e(ec,gv),e(gv,ihe),e(ihe,qUo),e(gv,NUo),e(gv,sO),e(sO,jUo),e(gv,DUo),e(ec,GUo),e(ec,hv),e(hv,dhe),e(dhe,OUo),e(hv,VUo),e(hv,lO),e(lO,XUo),e(hv,zUo),e(ec,QUo),e(ec,pv),e(pv,che),e(che,WUo),e(pv,HUo),e(pv,iO),e(iO,UUo),e(pv,JUo),e(ro,YUo),e(ro,_v),e(_v,KUo),e(_v,fhe),e(fhe,ZUo),e(_v,eJo),e(_v,mhe),e(mhe,oJo),e(ro,rJo),e(ro,ghe),e(ghe,tJo),e(ro,aJo),g(Iw,ro,null),b(c,zBe,u),b(c,oc,u),e(oc,uv),e(uv,hhe),g(qw,hhe,null),e(oc,nJo),e(oc,phe),e(phe,sJo),b(c,QBe,u),b(c,pr,u),g(Nw,pr,null),e(pr,lJo),e(pr,rc),e(rc,iJo),e(rc,dO),e(dO,dJo),e(rc,cJo),e(rc,cO),e(cO,fJo),e(rc,mJo),e(pr,gJo),e(pr,jw),e(jw,hJo),e(jw,_he),e(_he,pJo),e(jw,_Jo),e(pr,uJo),e(pr,dt),g(Dw,dt,null),e(dt,bJo),e(dt,uhe),e(uhe,FJo),e(dt,vJo),e(dt,tc),e(tc,TJo),e(tc,bhe),e(bhe,MJo),e(tc,EJo),e(tc,fO),e(fO,CJo),e(tc,wJo),e(dt,AJo),e(dt,Fhe),e(Fhe,yJo),e(dt,LJo),g(Gw,dt,null),e(pr,xJo),e(pr,to),g(Ow,to,null),e(to,kJo),e(to,vhe),e(vhe,SJo),e(to,RJo),e(to,mn),e(mn,BJo),e(mn,The),e(The,PJo),e(mn,$Jo),e(mn,Mhe),e(Mhe,IJo),e(mn,qJo),e(mn,Ehe),e(Ehe,NJo),e(mn,jJo),e(to,DJo),e(to,Che),e(Che,bv),e(bv,whe),e(whe,GJo),e(bv,OJo),e(bv,mO),e(mO,VJo),e(bv,XJo),e(to,zJo),e(to,Fv),e(Fv,QJo),e(Fv,Ahe),e(Ahe,WJo),e(Fv,HJo),e(Fv,yhe),e(yhe,UJo),e(to,JJo),e(to,Lhe),e(Lhe,YJo),e(to,KJo),g(Vw,to,null),b(c,WBe,u),b(c,ac,u),e(ac,vv),e(vv,xhe),g(Xw,xhe,null),e(ac,ZJo),e(ac,khe),e(khe,eYo),b(c,HBe,u),b(c,_r,u),g(zw,_r,null),e(_r,oYo),e(_r,nc),e(nc,rYo),e(nc,gO),e(gO,tYo),e(nc,aYo),e(nc,hO),e(hO,nYo),e(nc,sYo),e(_r,lYo),e(_r,Qw),e(Qw,iYo),e(Qw,She),e(She,dYo),e(Qw,cYo),e(_r,fYo),e(_r,ct),g(Ww,ct,null),e(ct,mYo),e(ct,Rhe),e(Rhe,gYo),e(ct,hYo),e(ct,sc),e(sc,pYo),e(sc,Bhe),e(Bhe,_Yo),e(sc,uYo),e(sc,pO),e(pO,bYo),e(sc,FYo),e(ct,vYo),e(ct,Phe),e(Phe,TYo),e(ct,MYo),g(Hw,ct,null),e(_r,EYo),e(_r,ao),g(Uw,ao,null),e(ao,CYo),e(ao,$he),e($he,wYo),e(ao,AYo),e(ao,gn),e(gn,yYo),e(gn,Ihe),e(Ihe,LYo),e(gn,xYo),e(gn,qhe),e(qhe,kYo),e(gn,SYo),e(gn,Nhe),e(Nhe,RYo),e(gn,BYo),e(ao,PYo),e(ao,jhe),e(jhe,Tv),e(Tv,Dhe),e(Dhe,$Yo),e(Tv,IYo),e(Tv,_O),e(_O,qYo),e(Tv,NYo),e(ao,jYo),e(ao,Mv),e(Mv,DYo),e(Mv,Ghe),e(Ghe,GYo),e(Mv,OYo),e(Mv,Ohe),e(Ohe,VYo),e(ao,XYo),e(ao,Vhe),e(Vhe,zYo),e(ao,QYo),g(Jw,ao,null),b(c,UBe,u),b(c,lc,u),e(lc,Ev),e(Ev,Xhe),g(Yw,Xhe,null),e(lc,WYo),e(lc,zhe),e(zhe,HYo),b(c,JBe,u),b(c,ur,u),g(Kw,ur,null),e(ur,UYo),e(ur,ic),e(ic,JYo),e(ic,uO),e(uO,YYo),e(ic,KYo),e(ic,bO),e(bO,ZYo),e(ic,eKo),e(ur,oKo),e(ur,Zw),e(Zw,rKo),e(Zw,Qhe),e(Qhe,tKo),e(Zw,aKo),e(ur,nKo),e(ur,ft),g(eA,ft,null),e(ft,sKo),e(ft,Whe),e(Whe,lKo),e(ft,iKo),e(ft,dc),e(dc,dKo),e(dc,Hhe),e(Hhe,cKo),e(dc,fKo),e(dc,FO),e(FO,mKo),e(dc,gKo),e(ft,hKo),e(ft,Uhe),e(Uhe,pKo),e(ft,_Ko),g(oA,ft,null),e(ur,uKo),e(ur,no),g(rA,no,null),e(no,bKo),e(no,Jhe),e(Jhe,FKo),e(no,vKo),e(no,hn),e(hn,TKo),e(hn,Yhe),e(Yhe,MKo),e(hn,EKo),e(hn,Khe),e(Khe,CKo),e(hn,wKo),e(hn,Zhe),e(Zhe,AKo),e(hn,yKo),e(no,LKo),e(no,cc),e(cc,Cv),e(Cv,epe),e(epe,xKo),e(Cv,kKo),e(Cv,vO),e(vO,SKo),e(Cv,RKo),e(cc,BKo),e(cc,wv),e(wv,ope),e(ope,PKo),e(wv,$Ko),e(wv,TO),e(TO,IKo),e(wv,qKo),e(cc,NKo),e(cc,Av),e(Av,rpe),e(rpe,jKo),e(Av,DKo),e(Av,MO),e(MO,GKo),e(Av,OKo),e(no,VKo),e(no,yv),e(yv,XKo),e(yv,tpe),e(tpe,zKo),e(yv,QKo),e(yv,ape),e(ape,WKo),e(no,HKo),e(no,npe),e(npe,UKo),e(no,JKo),g(tA,no,null),b(c,YBe,u),b(c,fc,u),e(fc,Lv),e(Lv,spe),g(aA,spe,null),e(fc,YKo),e(fc,lpe),e(lpe,KKo),b(c,KBe,u),b(c,br,u),g(nA,br,null),e(br,ZKo),e(br,mc),e(mc,eZo),e(mc,EO),e(EO,oZo),e(mc,rZo),e(mc,CO),e(CO,tZo),e(mc,aZo),e(br,nZo),e(br,sA),e(sA,sZo),e(sA,ipe),e(ipe,lZo),e(sA,iZo),e(br,dZo),e(br,mt),g(lA,mt,null),e(mt,cZo),e(mt,dpe),e(dpe,fZo),e(mt,mZo),e(mt,gc),e(gc,gZo),e(gc,cpe),e(cpe,hZo),e(gc,pZo),e(gc,wO),e(wO,_Zo),e(gc,uZo),e(mt,bZo),e(mt,fpe),e(fpe,FZo),e(mt,vZo),g(iA,mt,null),e(br,TZo),e(br,so),g(dA,so,null),e(so,MZo),e(so,mpe),e(mpe,EZo),e(so,CZo),e(so,pn),e(pn,wZo),e(pn,gpe),e(gpe,AZo),e(pn,yZo),e(pn,hpe),e(hpe,LZo),e(pn,xZo),e(pn,ppe),e(ppe,kZo),e(pn,SZo),e(so,RZo),e(so,_pe),e(_pe,xv),e(xv,upe),e(upe,BZo),e(xv,PZo),e(xv,AO),e(AO,$Zo),e(xv,IZo),e(so,qZo),e(so,kv),e(kv,NZo),e(kv,bpe),e(bpe,jZo),e(kv,DZo),e(kv,Fpe),e(Fpe,GZo),e(so,OZo),e(so,vpe),e(vpe,VZo),e(so,XZo),g(cA,so,null),b(c,ZBe,u),b(c,hc,u),e(hc,Sv),e(Sv,Tpe),g(fA,Tpe,null),e(hc,zZo),e(hc,Mpe),e(Mpe,QZo),b(c,ePe,u),b(c,Fr,u),g(mA,Fr,null),e(Fr,WZo),e(Fr,pc),e(pc,HZo),e(pc,yO),e(yO,UZo),e(pc,JZo),e(pc,LO),e(LO,YZo),e(pc,KZo),e(Fr,ZZo),e(Fr,gA),e(gA,eer),e(gA,Epe),e(Epe,oer),e(gA,rer),e(Fr,ter),e(Fr,gt),g(hA,gt,null),e(gt,aer),e(gt,Cpe),e(Cpe,ner),e(gt,ser),e(gt,_c),e(_c,ler),e(_c,wpe),e(wpe,ier),e(_c,der),e(_c,xO),e(xO,cer),e(_c,fer),e(gt,mer),e(gt,Ape),e(Ape,ger),e(gt,her),g(pA,gt,null),e(Fr,per),e(Fr,ho),g(_A,ho,null),e(ho,_er),e(ho,ype),e(ype,uer),e(ho,ber),e(ho,_n),e(_n,Fer),e(_n,Lpe),e(Lpe,ver),e(_n,Ter),e(_n,xpe),e(xpe,Mer),e(_n,Eer),e(_n,kpe),e(kpe,Cer),e(_n,wer),e(ho,Aer),e(ho,x),e(x,Rv),e(Rv,Spe),e(Spe,yer),e(Rv,Ler),e(Rv,kO),e(kO,xer),e(Rv,ker),e(x,Ser),e(x,Bv),e(Bv,Rpe),e(Rpe,Rer),e(Bv,Ber),e(Bv,SO),e(SO,Per),e(Bv,$er),e(x,Ier),e(x,Pv),e(Pv,Bpe),e(Bpe,qer),e(Pv,Ner),e(Pv,RO),e(RO,jer),e(Pv,Der),e(x,Ger),e(x,$v),e($v,Ppe),e(Ppe,Oer),e($v,Ver),e($v,BO),e(BO,Xer),e($v,zer),e(x,Qer),e(x,Iv),e(Iv,$pe),e($pe,Wer),e(Iv,Her),e(Iv,PO),e(PO,Uer),e(Iv,Jer),e(x,Yer),e(x,qv),e(qv,Ipe),e(Ipe,Ker),e(qv,Zer),e(qv,$O),e($O,eor),e(qv,oor),e(x,ror),e(x,Nv),e(Nv,qpe),e(qpe,tor),e(Nv,aor),e(Nv,IO),e(IO,nor),e(Nv,sor),e(x,lor),e(x,jv),e(jv,Npe),e(Npe,ior),e(jv,dor),e(jv,qO),e(qO,cor),e(jv,mor),e(x,gor),e(x,Dv),e(Dv,jpe),e(jpe,hor),e(Dv,por),e(Dv,NO),e(NO,_or),e(Dv,uor),e(x,bor),e(x,Gv),e(Gv,Dpe),e(Dpe,For),e(Gv,vor),e(Gv,jO),e(jO,Tor),e(Gv,Mor),e(x,Eor),e(x,Ov),e(Ov,Gpe),e(Gpe,Cor),e(Ov,wor),e(Ov,DO),e(DO,Aor),e(Ov,yor),e(x,Lor),e(x,Vv),e(Vv,Ope),e(Ope,xor),e(Vv,kor),e(Vv,GO),e(GO,Sor),e(Vv,Ror),e(x,Bor),e(x,Xv),e(Xv,Vpe),e(Vpe,Por),e(Xv,$or),e(Xv,OO),e(OO,Ior),e(Xv,qor),e(x,Nor),e(x,zv),e(zv,Xpe),e(Xpe,jor),e(zv,Dor),e(zv,VO),e(VO,Gor),e(zv,Oor),e(x,Vor),e(x,Qv),e(Qv,zpe),e(zpe,Xor),e(Qv,zor),e(Qv,XO),e(XO,Qor),e(Qv,Wor),e(x,Hor),e(x,Wv),e(Wv,Qpe),e(Qpe,Uor),e(Wv,Jor),e(Wv,zO),e(zO,Yor),e(Wv,Kor),e(x,Zor),e(x,Os),e(Os,Wpe),e(Wpe,err),e(Os,orr),e(Os,QO),e(QO,rrr),e(Os,trr),e(Os,WO),e(WO,arr),e(Os,nrr),e(x,srr),e(x,Hv),e(Hv,Hpe),e(Hpe,lrr),e(Hv,irr),e(Hv,HO),e(HO,drr),e(Hv,crr),e(x,frr),e(x,Uv),e(Uv,Upe),e(Upe,mrr),e(Uv,grr),e(Uv,UO),e(UO,hrr),e(Uv,prr),e(x,_rr),e(x,Jv),e(Jv,Jpe),e(Jpe,urr),e(Jv,brr),e(Jv,JO),e(JO,Frr),e(Jv,vrr),e(x,Trr),e(x,Yv),e(Yv,Ype),e(Ype,Mrr),e(Yv,Err),e(Yv,YO),e(YO,Crr),e(Yv,wrr),e(x,Arr),e(x,Kv),e(Kv,Kpe),e(Kpe,yrr),e(Kv,Lrr),e(Kv,KO),e(KO,xrr),e(Kv,krr),e(x,Srr),e(x,Zv),e(Zv,Zpe),e(Zpe,Rrr),e(Zv,Brr),e(Zv,ZO),e(ZO,Prr),e(Zv,$rr),e(x,Irr),e(x,eT),e(eT,e_e),e(e_e,qrr),e(eT,Nrr),e(eT,eV),e(eV,jrr),e(eT,Drr),e(x,Grr),e(x,oT),e(oT,o_e),e(o_e,Orr),e(oT,Vrr),e(oT,oV),e(oV,Xrr),e(oT,zrr),e(x,Qrr),e(x,rT),e(rT,r_e),e(r_e,Wrr),e(rT,Hrr),e(rT,rV),e(rV,Urr),e(rT,Jrr),e(x,Yrr),e(x,tT),e(tT,t_e),e(t_e,Krr),e(tT,Zrr),e(tT,tV),e(tV,etr),e(tT,otr),e(x,rtr),e(x,aT),e(aT,a_e),e(a_e,ttr),e(aT,atr),e(aT,aV),e(aV,ntr),e(aT,str),e(x,ltr),e(x,nT),e(nT,n_e),e(n_e,itr),e(nT,dtr),e(nT,nV),e(nV,ctr),e(nT,ftr),e(x,mtr),e(x,sT),e(sT,s_e),e(s_e,gtr),e(sT,htr),e(sT,sV),e(sV,ptr),e(sT,_tr),e(x,utr),e(x,lT),e(lT,l_e),e(l_e,btr),e(lT,Ftr),e(lT,lV),e(lV,vtr),e(lT,Ttr),e(x,Mtr),e(x,iT),e(iT,i_e),e(i_e,Etr),e(iT,Ctr),e(iT,iV),e(iV,wtr),e(iT,Atr),e(x,ytr),e(x,dT),e(dT,d_e),e(d_e,Ltr),e(dT,xtr),e(dT,dV),e(dV,ktr),e(dT,Str),e(x,Rtr),e(x,cT),e(cT,c_e),e(c_e,Btr),e(cT,Ptr),e(cT,cV),e(cV,$tr),e(cT,Itr),e(x,qtr),e(x,fT),e(fT,f_e),e(f_e,Ntr),e(fT,jtr),e(fT,fV),e(fV,Dtr),e(fT,Gtr),e(x,Otr),e(x,mT),e(mT,m_e),e(m_e,Vtr),e(mT,Xtr),e(mT,mV),e(mV,ztr),e(mT,Qtr),e(x,Wtr),e(x,gT),e(gT,g_e),e(g_e,Htr),e(gT,Utr),e(gT,gV),e(gV,Jtr),e(gT,Ytr),e(x,Ktr),e(x,hT),e(hT,h_e),e(h_e,Ztr),e(hT,ear),e(hT,hV),e(hV,oar),e(hT,rar),e(x,tar),e(x,pT),e(pT,p_e),e(p_e,aar),e(pT,nar),e(pT,pV),e(pV,sar),e(pT,lar),e(x,iar),e(x,_T),e(_T,__e),e(__e,dar),e(_T,car),e(_T,_V),e(_V,far),e(_T,mar),e(x,gar),e(x,uT),e(uT,u_e),e(u_e,har),e(uT,par),e(uT,uV),e(uV,_ar),e(uT,uar),e(x,bar),e(x,bT),e(bT,b_e),e(b_e,Far),e(bT,Tar),e(bT,bV),e(bV,Mar),e(bT,Ear),e(x,Car),e(x,FT),e(FT,F_e),e(F_e,war),e(FT,Aar),e(FT,FV),e(FV,yar),e(FT,Lar),e(x,xar),e(x,vT),e(vT,v_e),e(v_e,kar),e(vT,Sar),e(vT,vV),e(vV,Rar),e(vT,Bar),e(ho,Par),e(ho,T_e),e(T_e,$ar),e(ho,Iar),g(uA,ho,null),b(c,oPe,u),b(c,uc,u),e(uc,TT),e(TT,M_e),g(bA,M_e,null),e(uc,qar),e(uc,E_e),e(E_e,Nar),b(c,rPe,u),b(c,vr,u),g(FA,vr,null),e(vr,jar),e(vr,bc),e(bc,Dar),e(bc,TV),e(TV,Gar),e(bc,Oar),e(bc,MV),e(MV,Var),e(bc,Xar),e(vr,zar),e(vr,vA),e(vA,Qar),e(vA,C_e),e(C_e,War),e(vA,Har),e(vr,Uar),e(vr,ht),g(TA,ht,null),e(ht,Jar),e(ht,w_e),e(w_e,Yar),e(ht,Kar),e(ht,Fc),e(Fc,Zar),e(Fc,A_e),e(A_e,enr),e(Fc,onr),e(Fc,EV),e(EV,rnr),e(Fc,tnr),e(ht,anr),e(ht,y_e),e(y_e,nnr),e(ht,snr),g(MA,ht,null),e(vr,lnr),e(vr,po),g(EA,po,null),e(po,inr),e(po,L_e),e(L_e,dnr),e(po,cnr),e(po,un),e(un,fnr),e(un,x_e),e(x_e,mnr),e(un,gnr),e(un,k_e),e(k_e,hnr),e(un,pnr),e(un,S_e),e(S_e,_nr),e(un,unr),e(po,bnr),e(po,H),e(H,MT),e(MT,R_e),e(R_e,Fnr),e(MT,vnr),e(MT,CV),e(CV,Tnr),e(MT,Mnr),e(H,Enr),e(H,ET),e(ET,B_e),e(B_e,Cnr),e(ET,wnr),e(ET,wV),e(wV,Anr),e(ET,ynr),e(H,Lnr),e(H,CT),e(CT,P_e),e(P_e,xnr),e(CT,knr),e(CT,AV),e(AV,Snr),e(CT,Rnr),e(H,Bnr),e(H,wT),e(wT,$_e),e($_e,Pnr),e(wT,$nr),e(wT,yV),e(yV,Inr),e(wT,qnr),e(H,Nnr),e(H,AT),e(AT,I_e),e(I_e,jnr),e(AT,Dnr),e(AT,LV),e(LV,Gnr),e(AT,Onr),e(H,Vnr),e(H,yT),e(yT,q_e),e(q_e,Xnr),e(yT,znr),e(yT,xV),e(xV,Qnr),e(yT,Wnr),e(H,Hnr),e(H,LT),e(LT,N_e),e(N_e,Unr),e(LT,Jnr),e(LT,kV),e(kV,Ynr),e(LT,Knr),e(H,Znr),e(H,xT),e(xT,j_e),e(j_e,esr),e(xT,osr),e(xT,SV),e(SV,rsr),e(xT,tsr),e(H,asr),e(H,kT),e(kT,D_e),e(D_e,nsr),e(kT,ssr),e(kT,RV),e(RV,lsr),e(kT,isr),e(H,dsr),e(H,ST),e(ST,G_e),e(G_e,csr),e(ST,fsr),e(ST,BV),e(BV,msr),e(ST,gsr),e(H,hsr),e(H,RT),e(RT,O_e),e(O_e,psr),e(RT,_sr),e(RT,PV),e(PV,usr),e(RT,bsr),e(H,Fsr),e(H,BT),e(BT,V_e),e(V_e,vsr),e(BT,Tsr),e(BT,$V),e($V,Msr),e(BT,Esr),e(H,Csr),e(H,PT),e(PT,X_e),e(X_e,wsr),e(PT,Asr),e(PT,IV),e(IV,ysr),e(PT,Lsr),e(H,xsr),e(H,$T),e($T,z_e),e(z_e,ksr),e($T,Ssr),e($T,qV),e(qV,Rsr),e($T,Bsr),e(H,Psr),e(H,IT),e(IT,Q_e),e(Q_e,$sr),e(IT,Isr),e(IT,NV),e(NV,qsr),e(IT,Nsr),e(H,jsr),e(H,qT),e(qT,W_e),e(W_e,Dsr),e(qT,Gsr),e(qT,jV),e(jV,Osr),e(qT,Vsr),e(H,Xsr),e(H,NT),e(NT,H_e),e(H_e,zsr),e(NT,Qsr),e(NT,DV),e(DV,Wsr),e(NT,Hsr),e(H,Usr),e(H,jT),e(jT,U_e),e(U_e,Jsr),e(jT,Ysr),e(jT,GV),e(GV,Ksr),e(jT,Zsr),e(H,elr),e(H,DT),e(DT,J_e),e(J_e,olr),e(DT,rlr),e(DT,OV),e(OV,tlr),e(DT,alr),e(H,nlr),e(H,GT),e(GT,Y_e),e(Y_e,slr),e(GT,llr),e(GT,VV),e(VV,ilr),e(GT,dlr),e(H,clr),e(H,OT),e(OT,K_e),e(K_e,flr),e(OT,mlr),e(OT,XV),e(XV,glr),e(OT,hlr),e(H,plr),e(H,VT),e(VT,Z_e),e(Z_e,_lr),e(VT,ulr),e(VT,zV),e(zV,blr),e(VT,Flr),e(H,vlr),e(H,XT),e(XT,eue),e(eue,Tlr),e(XT,Mlr),e(XT,QV),e(QV,Elr),e(XT,Clr),e(po,wlr),e(po,oue),e(oue,Alr),e(po,ylr),g(CA,po,null),b(c,tPe,u),b(c,vc,u),e(vc,zT),e(zT,rue),g(wA,rue,null),e(vc,Llr),e(vc,tue),e(tue,xlr),b(c,aPe,u),b(c,Tr,u),g(AA,Tr,null),e(Tr,klr),e(Tr,Tc),e(Tc,Slr),e(Tc,WV),e(WV,Rlr),e(Tc,Blr),e(Tc,HV),e(HV,Plr),e(Tc,$lr),e(Tr,Ilr),e(Tr,yA),e(yA,qlr),e(yA,aue),e(aue,Nlr),e(yA,jlr),e(Tr,Dlr),e(Tr,pt),g(LA,pt,null),e(pt,Glr),e(pt,nue),e(nue,Olr),e(pt,Vlr),e(pt,Mc),e(Mc,Xlr),e(Mc,sue),e(sue,zlr),e(Mc,Qlr),e(Mc,UV),e(UV,Wlr),e(Mc,Hlr),e(pt,Ulr),e(pt,lue),e(lue,Jlr),e(pt,Ylr),g(xA,pt,null),e(Tr,Klr),e(Tr,_o),g(kA,_o,null),e(_o,Zlr),e(_o,iue),e(iue,eir),e(_o,oir),e(_o,bn),e(bn,rir),e(bn,due),e(due,tir),e(bn,air),e(bn,cue),e(cue,nir),e(bn,sir),e(bn,fue),e(fue,lir),e(bn,iir),e(_o,dir),e(_o,me),e(me,QT),e(QT,mue),e(mue,cir),e(QT,fir),e(QT,JV),e(JV,mir),e(QT,gir),e(me,hir),e(me,WT),e(WT,gue),e(gue,pir),e(WT,_ir),e(WT,YV),e(YV,uir),e(WT,bir),e(me,Fir),e(me,HT),e(HT,hue),e(hue,vir),e(HT,Tir),e(HT,KV),e(KV,Mir),e(HT,Eir),e(me,Cir),e(me,UT),e(UT,pue),e(pue,wir),e(UT,Air),e(UT,ZV),e(ZV,yir),e(UT,Lir),e(me,xir),e(me,JT),e(JT,_ue),e(_ue,kir),e(JT,Sir),e(JT,eX),e(eX,Rir),e(JT,Bir),e(me,Pir),e(me,YT),e(YT,uue),e(uue,$ir),e(YT,Iir),e(YT,oX),e(oX,qir),e(YT,Nir),e(me,jir),e(me,KT),e(KT,bue),e(bue,Dir),e(KT,Gir),e(KT,rX),e(rX,Oir),e(KT,Vir),e(me,Xir),e(me,ZT),e(ZT,Fue),e(Fue,zir),e(ZT,Qir),e(ZT,tX),e(tX,Wir),e(ZT,Hir),e(me,Uir),e(me,e7),e(e7,vue),e(vue,Jir),e(e7,Yir),e(e7,aX),e(aX,Kir),e(e7,Zir),e(me,edr),e(me,o7),e(o7,Tue),e(Tue,odr),e(o7,rdr),e(o7,nX),e(nX,tdr),e(o7,adr),e(me,ndr),e(me,r7),e(r7,Mue),e(Mue,sdr),e(r7,ldr),e(r7,sX),e(sX,idr),e(r7,ddr),e(me,cdr),e(me,t7),e(t7,Eue),e(Eue,fdr),e(t7,mdr),e(t7,lX),e(lX,gdr),e(t7,hdr),e(_o,pdr),e(_o,Cue),e(Cue,_dr),e(_o,udr),g(SA,_o,null),b(c,nPe,u),b(c,Ec,u),e(Ec,a7),e(a7,wue),g(RA,wue,null),e(Ec,bdr),e(Ec,Aue),e(Aue,Fdr),b(c,sPe,u),b(c,Mr,u),g(BA,Mr,null),e(Mr,vdr),e(Mr,Cc),e(Cc,Tdr),e(Cc,iX),e(iX,Mdr),e(Cc,Edr),e(Cc,dX),e(dX,Cdr),e(Cc,wdr),e(Mr,Adr),e(Mr,PA),e(PA,ydr),e(PA,yue),e(yue,Ldr),e(PA,xdr),e(Mr,kdr),e(Mr,_t),g($A,_t,null),e(_t,Sdr),e(_t,Lue),e(Lue,Rdr),e(_t,Bdr),e(_t,wc),e(wc,Pdr),e(wc,xue),e(xue,$dr),e(wc,Idr),e(wc,cX),e(cX,qdr),e(wc,Ndr),e(_t,jdr),e(_t,kue),e(kue,Ddr),e(_t,Gdr),g(IA,_t,null),e(Mr,Odr),e(Mr,uo),g(qA,uo,null),e(uo,Vdr),e(uo,Sue),e(Sue,Xdr),e(uo,zdr),e(uo,Fn),e(Fn,Qdr),e(Fn,Rue),e(Rue,Wdr),e(Fn,Hdr),e(Fn,Bue),e(Bue,Udr),e(Fn,Jdr),e(Fn,Pue),e(Pue,Ydr),e(Fn,Kdr),e(uo,Zdr),e(uo,NA),e(NA,n7),e(n7,$ue),e($ue,ecr),e(n7,ocr),e(n7,fX),e(fX,rcr),e(n7,tcr),e(NA,acr),e(NA,s7),e(s7,Iue),e(Iue,ncr),e(s7,scr),e(s7,mX),e(mX,lcr),e(s7,icr),e(uo,dcr),e(uo,que),e(que,ccr),e(uo,fcr),g(jA,uo,null),b(c,lPe,u),b(c,Ac,u),e(Ac,l7),e(l7,Nue),g(DA,Nue,null),e(Ac,mcr),e(Ac,jue),e(jue,gcr),b(c,iPe,u),b(c,Er,u),g(GA,Er,null),e(Er,hcr),e(Er,yc),e(yc,pcr),e(yc,gX),e(gX,_cr),e(yc,ucr),e(yc,hX),e(hX,bcr),e(yc,Fcr),e(Er,vcr),e(Er,OA),e(OA,Tcr),e(OA,Due),e(Due,Mcr),e(OA,Ecr),e(Er,Ccr),e(Er,ut),g(VA,ut,null),e(ut,wcr),e(ut,Gue),e(Gue,Acr),e(ut,ycr),e(ut,Lc),e(Lc,Lcr),e(Lc,Oue),e(Oue,xcr),e(Lc,kcr),e(Lc,pX),e(pX,Scr),e(Lc,Rcr),e(ut,Bcr),e(ut,Vue),e(Vue,Pcr),e(ut,$cr),g(XA,ut,null),e(Er,Icr),e(Er,bo),g(zA,bo,null),e(bo,qcr),e(bo,Xue),e(Xue,Ncr),e(bo,jcr),e(bo,vn),e(vn,Dcr),e(vn,zue),e(zue,Gcr),e(vn,Ocr),e(vn,Que),e(Que,Vcr),e(vn,Xcr),e(vn,Wue),e(Wue,zcr),e(vn,Qcr),e(bo,Wcr),e(bo,J),e(J,i7),e(i7,Hue),e(Hue,Hcr),e(i7,Ucr),e(i7,_X),e(_X,Jcr),e(i7,Ycr),e(J,Kcr),e(J,d7),e(d7,Uue),e(Uue,Zcr),e(d7,efr),e(d7,uX),e(uX,ofr),e(d7,rfr),e(J,tfr),e(J,c7),e(c7,Jue),e(Jue,afr),e(c7,nfr),e(c7,bX),e(bX,sfr),e(c7,lfr),e(J,ifr),e(J,f7),e(f7,Yue),e(Yue,dfr),e(f7,cfr),e(f7,FX),e(FX,ffr),e(f7,mfr),e(J,gfr),e(J,m7),e(m7,Kue),e(Kue,hfr),e(m7,pfr),e(m7,vX),e(vX,_fr),e(m7,ufr),e(J,bfr),e(J,g7),e(g7,Zue),e(Zue,Ffr),e(g7,vfr),e(g7,TX),e(TX,Tfr),e(g7,Mfr),e(J,Efr),e(J,h7),e(h7,e2e),e(e2e,Cfr),e(h7,wfr),e(h7,MX),e(MX,Afr),e(h7,yfr),e(J,Lfr),e(J,p7),e(p7,o2e),e(o2e,xfr),e(p7,kfr),e(p7,EX),e(EX,Sfr),e(p7,Rfr),e(J,Bfr),e(J,_7),e(_7,r2e),e(r2e,Pfr),e(_7,$fr),e(_7,CX),e(CX,Ifr),e(_7,qfr),e(J,Nfr),e(J,u7),e(u7,t2e),e(t2e,jfr),e(u7,Dfr),e(u7,wX),e(wX,Gfr),e(u7,Ofr),e(J,Vfr),e(J,b7),e(b7,a2e),e(a2e,Xfr),e(b7,zfr),e(b7,AX),e(AX,Qfr),e(b7,Wfr),e(J,Hfr),e(J,F7),e(F7,n2e),e(n2e,Ufr),e(F7,Jfr),e(F7,yX),e(yX,Yfr),e(F7,Kfr),e(J,Zfr),e(J,v7),e(v7,s2e),e(s2e,emr),e(v7,omr),e(v7,LX),e(LX,rmr),e(v7,tmr),e(J,amr),e(J,T7),e(T7,l2e),e(l2e,nmr),e(T7,smr),e(T7,xX),e(xX,lmr),e(T7,imr),e(J,dmr),e(J,M7),e(M7,i2e),e(i2e,cmr),e(M7,fmr),e(M7,kX),e(kX,mmr),e(M7,gmr),e(J,hmr),e(J,E7),e(E7,d2e),e(d2e,pmr),e(E7,_mr),e(E7,SX),e(SX,umr),e(E7,bmr),e(J,Fmr),e(J,C7),e(C7,c2e),e(c2e,vmr),e(C7,Tmr),e(C7,RX),e(RX,Mmr),e(C7,Emr),e(J,Cmr),e(J,w7),e(w7,f2e),e(f2e,wmr),e(w7,Amr),e(w7,BX),e(BX,ymr),e(w7,Lmr),e(J,xmr),e(J,A7),e(A7,m2e),e(m2e,kmr),e(A7,Smr),e(A7,PX),e(PX,Rmr),e(A7,Bmr),e(J,Pmr),e(J,y7),e(y7,g2e),e(g2e,$mr),e(y7,Imr),e(y7,$X),e($X,qmr),e(y7,Nmr),e(bo,jmr),e(bo,h2e),e(h2e,Dmr),e(bo,Gmr),g(QA,bo,null),b(c,dPe,u),b(c,xc,u),e(xc,L7),e(L7,p2e),g(WA,p2e,null),e(xc,Omr),e(xc,_2e),e(_2e,Vmr),b(c,cPe,u),b(c,Cr,u),g(HA,Cr,null),e(Cr,Xmr),e(Cr,kc),e(kc,zmr),e(kc,IX),e(IX,Qmr),e(kc,Wmr),e(kc,qX),e(qX,Hmr),e(kc,Umr),e(Cr,Jmr),e(Cr,UA),e(UA,Ymr),e(UA,u2e),e(u2e,Kmr),e(UA,Zmr),e(Cr,egr),e(Cr,bt),g(JA,bt,null),e(bt,ogr),e(bt,b2e),e(b2e,rgr),e(bt,tgr),e(bt,Sc),e(Sc,agr),e(Sc,F2e),e(F2e,ngr),e(Sc,sgr),e(Sc,NX),e(NX,lgr),e(Sc,igr),e(bt,dgr),e(bt,v2e),e(v2e,cgr),e(bt,fgr),g(YA,bt,null),e(Cr,mgr),e(Cr,Fo),g(KA,Fo,null),e(Fo,ggr),e(Fo,T2e),e(T2e,hgr),e(Fo,pgr),e(Fo,Tn),e(Tn,_gr),e(Tn,M2e),e(M2e,ugr),e(Tn,bgr),e(Tn,E2e),e(E2e,Fgr),e(Tn,vgr),e(Tn,C2e),e(C2e,Tgr),e(Tn,Mgr),e(Fo,Egr),e(Fo,be),e(be,x7),e(x7,w2e),e(w2e,Cgr),e(x7,wgr),e(x7,jX),e(jX,Agr),e(x7,ygr),e(be,Lgr),e(be,k7),e(k7,A2e),e(A2e,xgr),e(k7,kgr),e(k7,DX),e(DX,Sgr),e(k7,Rgr),e(be,Bgr),e(be,S7),e(S7,y2e),e(y2e,Pgr),e(S7,$gr),e(S7,GX),e(GX,Igr),e(S7,qgr),e(be,Ngr),e(be,R7),e(R7,L2e),e(L2e,jgr),e(R7,Dgr),e(R7,OX),e(OX,Ggr),e(R7,Ogr),e(be,Vgr),e(be,B7),e(B7,x2e),e(x2e,Xgr),e(B7,zgr),e(B7,VX),e(VX,Qgr),e(B7,Wgr),e(be,Hgr),e(be,P7),e(P7,k2e),e(k2e,Ugr),e(P7,Jgr),e(P7,XX),e(XX,Ygr),e(P7,Kgr),e(be,Zgr),e(be,$7),e($7,S2e),e(S2e,ehr),e($7,ohr),e($7,zX),e(zX,rhr),e($7,thr),e(be,ahr),e(be,I7),e(I7,R2e),e(R2e,nhr),e(I7,shr),e(I7,QX),e(QX,lhr),e(I7,ihr),e(be,dhr),e(be,q7),e(q7,B2e),e(B2e,chr),e(q7,fhr),e(q7,WX),e(WX,mhr),e(q7,ghr),e(be,hhr),e(be,N7),e(N7,P2e),e(P2e,phr),e(N7,_hr),e(N7,HX),e(HX,uhr),e(N7,bhr),e(Fo,Fhr),e(Fo,$2e),e($2e,vhr),e(Fo,Thr),g(ZA,Fo,null),b(c,fPe,u),b(c,Rc,u),e(Rc,j7),e(j7,I2e),g(e0,I2e,null),e(Rc,Mhr),e(Rc,q2e),e(q2e,Ehr),b(c,mPe,u),b(c,wr,u),g(o0,wr,null),e(wr,Chr),e(wr,Bc),e(Bc,whr),e(Bc,UX),e(UX,Ahr),e(Bc,yhr),e(Bc,JX),e(JX,Lhr),e(Bc,xhr),e(wr,khr),e(wr,r0),e(r0,Shr),e(r0,N2e),e(N2e,Rhr),e(r0,Bhr),e(wr,Phr),e(wr,Ft),g(t0,Ft,null),e(Ft,$hr),e(Ft,j2e),e(j2e,Ihr),e(Ft,qhr),e(Ft,Pc),e(Pc,Nhr),e(Pc,D2e),e(D2e,jhr),e(Pc,Dhr),e(Pc,YX),e(YX,Ghr),e(Pc,Ohr),e(Ft,Vhr),e(Ft,G2e),e(G2e,Xhr),e(Ft,zhr),g(a0,Ft,null),e(wr,Qhr),e(wr,vo),g(n0,vo,null),e(vo,Whr),e(vo,O2e),e(O2e,Hhr),e(vo,Uhr),e(vo,Mn),e(Mn,Jhr),e(Mn,V2e),e(V2e,Yhr),e(Mn,Khr),e(Mn,X2e),e(X2e,Zhr),e(Mn,epr),e(Mn,z2e),e(z2e,opr),e(Mn,rpr),e(vo,tpr),e(vo,V),e(V,D7),e(D7,Q2e),e(Q2e,apr),e(D7,npr),e(D7,KX),e(KX,spr),e(D7,lpr),e(V,ipr),e(V,G7),e(G7,W2e),e(W2e,dpr),e(G7,cpr),e(G7,ZX),e(ZX,fpr),e(G7,mpr),e(V,gpr),e(V,O7),e(O7,H2e),e(H2e,hpr),e(O7,ppr),e(O7,ez),e(ez,_pr),e(O7,upr),e(V,bpr),e(V,V7),e(V7,U2e),e(U2e,Fpr),e(V7,vpr),e(V7,oz),e(oz,Tpr),e(V7,Mpr),e(V,Epr),e(V,X7),e(X7,J2e),e(J2e,Cpr),e(X7,wpr),e(X7,rz),e(rz,Apr),e(X7,ypr),e(V,Lpr),e(V,z7),e(z7,Y2e),e(Y2e,xpr),e(z7,kpr),e(z7,tz),e(tz,Spr),e(z7,Rpr),e(V,Bpr),e(V,Q7),e(Q7,K2e),e(K2e,Ppr),e(Q7,$pr),e(Q7,az),e(az,Ipr),e(Q7,qpr),e(V,Npr),e(V,W7),e(W7,Z2e),e(Z2e,jpr),e(W7,Dpr),e(W7,nz),e(nz,Gpr),e(W7,Opr),e(V,Vpr),e(V,H7),e(H7,e1e),e(e1e,Xpr),e(H7,zpr),e(H7,sz),e(sz,Qpr),e(H7,Wpr),e(V,Hpr),e(V,U7),e(U7,o1e),e(o1e,Upr),e(U7,Jpr),e(U7,lz),e(lz,Ypr),e(U7,Kpr),e(V,Zpr),e(V,J7),e(J7,r1e),e(r1e,e_r),e(J7,o_r),e(J7,iz),e(iz,r_r),e(J7,t_r),e(V,a_r),e(V,Y7),e(Y7,t1e),e(t1e,n_r),e(Y7,s_r),e(Y7,dz),e(dz,l_r),e(Y7,i_r),e(V,d_r),e(V,K7),e(K7,a1e),e(a1e,c_r),e(K7,f_r),e(K7,cz),e(cz,m_r),e(K7,g_r),e(V,h_r),e(V,Z7),e(Z7,n1e),e(n1e,p_r),e(Z7,__r),e(Z7,fz),e(fz,u_r),e(Z7,b_r),e(V,F_r),e(V,e9),e(e9,s1e),e(s1e,v_r),e(e9,T_r),e(e9,mz),e(mz,M_r),e(e9,E_r),e(V,C_r),e(V,o9),e(o9,l1e),e(l1e,w_r),e(o9,A_r),e(o9,gz),e(gz,y_r),e(o9,L_r),e(V,x_r),e(V,r9),e(r9,i1e),e(i1e,k_r),e(r9,S_r),e(r9,hz),e(hz,R_r),e(r9,B_r),e(V,P_r),e(V,t9),e(t9,d1e),e(d1e,$_r),e(t9,I_r),e(t9,pz),e(pz,q_r),e(t9,N_r),e(V,j_r),e(V,a9),e(a9,c1e),e(c1e,D_r),e(a9,G_r),e(a9,_z),e(_z,O_r),e(a9,V_r),e(V,X_r),e(V,n9),e(n9,f1e),e(f1e,z_r),e(n9,Q_r),e(n9,uz),e(uz,W_r),e(n9,H_r),e(V,U_r),e(V,s9),e(s9,m1e),e(m1e,J_r),e(s9,Y_r),e(s9,bz),e(bz,K_r),e(s9,Z_r),e(V,eur),e(V,l9),e(l9,g1e),e(g1e,our),e(l9,rur),e(l9,Fz),e(Fz,tur),e(l9,aur),e(V,nur),e(V,i9),e(i9,h1e),e(h1e,sur),e(i9,lur),e(i9,vz),e(vz,iur),e(i9,dur),e(V,cur),e(V,d9),e(d9,p1e),e(p1e,fur),e(d9,mur),e(d9,Tz),e(Tz,gur),e(d9,hur),e(V,pur),e(V,c9),e(c9,_1e),e(_1e,_ur),e(c9,uur),e(c9,Mz),e(Mz,bur),e(c9,Fur),e(V,vur),e(V,f9),e(f9,u1e),e(u1e,Tur),e(f9,Mur),e(f9,Ez),e(Ez,Eur),e(f9,Cur),e(vo,wur),e(vo,b1e),e(b1e,Aur),e(vo,yur),g(s0,vo,null),b(c,gPe,u),b(c,$c,u),e($c,m9),e(m9,F1e),g(l0,F1e,null),e($c,Lur),e($c,v1e),e(v1e,xur),b(c,hPe,u),b(c,Ar,u),g(i0,Ar,null),e(Ar,kur),e(Ar,Ic),e(Ic,Sur),e(Ic,Cz),e(Cz,Rur),e(Ic,Bur),e(Ic,wz),e(wz,Pur),e(Ic,$ur),e(Ar,Iur),e(Ar,d0),e(d0,qur),e(d0,T1e),e(T1e,Nur),e(d0,jur),e(Ar,Dur),e(Ar,vt),g(c0,vt,null),e(vt,Gur),e(vt,M1e),e(M1e,Our),e(vt,Vur),e(vt,qc),e(qc,Xur),e(qc,E1e),e(E1e,zur),e(qc,Qur),e(qc,Az),e(Az,Wur),e(qc,Hur),e(vt,Uur),e(vt,C1e),e(C1e,Jur),e(vt,Yur),g(f0,vt,null),e(Ar,Kur),e(Ar,To),g(m0,To,null),e(To,Zur),e(To,w1e),e(w1e,e2r),e(To,o2r),e(To,En),e(En,r2r),e(En,A1e),e(A1e,t2r),e(En,a2r),e(En,y1e),e(y1e,n2r),e(En,s2r),e(En,L1e),e(L1e,l2r),e(En,i2r),e(To,d2r),e(To,se),e(se,g9),e(g9,x1e),e(x1e,c2r),e(g9,f2r),e(g9,yz),e(yz,m2r),e(g9,g2r),e(se,h2r),e(se,h9),e(h9,k1e),e(k1e,p2r),e(h9,_2r),e(h9,Lz),e(Lz,u2r),e(h9,b2r),e(se,F2r),e(se,p9),e(p9,S1e),e(S1e,v2r),e(p9,T2r),e(p9,xz),e(xz,M2r),e(p9,E2r),e(se,C2r),e(se,_9),e(_9,R1e),e(R1e,w2r),e(_9,A2r),e(_9,kz),e(kz,y2r),e(_9,L2r),e(se,x2r),e(se,u9),e(u9,B1e),e(B1e,k2r),e(u9,S2r),e(u9,Sz),e(Sz,R2r),e(u9,B2r),e(se,P2r),e(se,b9),e(b9,P1e),e(P1e,$2r),e(b9,I2r),e(b9,Rz),e(Rz,q2r),e(b9,N2r),e(se,j2r),e(se,F9),e(F9,$1e),e($1e,D2r),e(F9,G2r),e(F9,Bz),e(Bz,O2r),e(F9,V2r),e(se,X2r),e(se,v9),e(v9,I1e),e(I1e,z2r),e(v9,Q2r),e(v9,Pz),e(Pz,W2r),e(v9,H2r),e(se,U2r),e(se,T9),e(T9,q1e),e(q1e,J2r),e(T9,Y2r),e(T9,$z),e($z,K2r),e(T9,Z2r),e(se,e1r),e(se,M9),e(M9,N1e),e(N1e,o1r),e(M9,r1r),e(M9,Iz),e(Iz,t1r),e(M9,a1r),e(se,n1r),e(se,E9),e(E9,j1e),e(j1e,s1r),e(E9,l1r),e(E9,qz),e(qz,i1r),e(E9,d1r),e(se,c1r),e(se,C9),e(C9,D1e),e(D1e,f1r),e(C9,m1r),e(C9,Nz),e(Nz,g1r),e(C9,h1r),e(se,p1r),e(se,w9),e(w9,G1e),e(G1e,_1r),e(w9,u1r),e(w9,jz),e(jz,b1r),e(w9,F1r),e(se,v1r),e(se,A9),e(A9,O1e),e(O1e,T1r),e(A9,M1r),e(A9,Dz),e(Dz,E1r),e(A9,C1r),e(se,w1r),e(se,y9),e(y9,V1e),e(V1e,A1r),e(y9,y1r),e(y9,Gz),e(Gz,L1r),e(y9,x1r),e(se,k1r),e(se,L9),e(L9,X1e),e(X1e,S1r),e(L9,R1r),e(L9,Oz),e(Oz,B1r),e(L9,P1r),e(se,$1r),e(se,x9),e(x9,z1e),e(z1e,I1r),e(x9,q1r),e(x9,Vz),e(Vz,N1r),e(x9,j1r),e(To,D1r),e(To,Q1e),e(Q1e,G1r),e(To,O1r),g(g0,To,null),b(c,pPe,u),b(c,Nc,u),e(Nc,k9),e(k9,W1e),g(h0,W1e,null),e(Nc,V1r),e(Nc,H1e),e(H1e,X1r),b(c,_Pe,u),b(c,yr,u),g(p0,yr,null),e(yr,z1r),e(yr,jc),e(jc,Q1r),e(jc,Xz),e(Xz,W1r),e(jc,H1r),e(jc,zz),e(zz,U1r),e(jc,J1r),e(yr,Y1r),e(yr,_0),e(_0,K1r),e(_0,U1e),e(U1e,Z1r),e(_0,ebr),e(yr,obr),e(yr,Tt),g(u0,Tt,null),e(Tt,rbr),e(Tt,J1e),e(J1e,tbr),e(Tt,abr),e(Tt,Dc),e(Dc,nbr),e(Dc,Y1e),e(Y1e,sbr),e(Dc,lbr),e(Dc,Qz),e(Qz,ibr),e(Dc,dbr),e(Tt,cbr),e(Tt,K1e),e(K1e,fbr),e(Tt,mbr),g(b0,Tt,null),e(yr,gbr),e(yr,Mo),g(F0,Mo,null),e(Mo,hbr),e(Mo,Z1e),e(Z1e,pbr),e(Mo,_br),e(Mo,Cn),e(Cn,ubr),e(Cn,ebe),e(ebe,bbr),e(Cn,Fbr),e(Cn,obe),e(obe,vbr),e(Cn,Tbr),e(Cn,rbe),e(rbe,Mbr),e(Cn,Ebr),e(Mo,Cbr),e(Mo,tbe),e(tbe,S9),e(S9,abe),e(abe,wbr),e(S9,Abr),e(S9,Wz),e(Wz,ybr),e(S9,Lbr),e(Mo,xbr),e(Mo,nbe),e(nbe,kbr),e(Mo,Sbr),g(v0,Mo,null),b(c,uPe,u),b(c,Gc,u),e(Gc,R9),e(R9,sbe),g(T0,sbe,null),e(Gc,Rbr),e(Gc,lbe),e(lbe,Bbr),b(c,bPe,u),b(c,Lr,u),g(M0,Lr,null),e(Lr,Pbr),e(Lr,Oc),e(Oc,$br),e(Oc,Hz),e(Hz,Ibr),e(Oc,qbr),e(Oc,Uz),e(Uz,Nbr),e(Oc,jbr),e(Lr,Dbr),e(Lr,E0),e(E0,Gbr),e(E0,ibe),e(ibe,Obr),e(E0,Vbr),e(Lr,Xbr),e(Lr,Mt),g(C0,Mt,null),e(Mt,zbr),e(Mt,dbe),e(dbe,Qbr),e(Mt,Wbr),e(Mt,Vc),e(Vc,Hbr),e(Vc,cbe),e(cbe,Ubr),e(Vc,Jbr),e(Vc,Jz),e(Jz,Ybr),e(Vc,Kbr),e(Mt,Zbr),e(Mt,fbe),e(fbe,e6r),e(Mt,o6r),g(w0,Mt,null),e(Lr,r6r),e(Lr,Eo),g(A0,Eo,null),e(Eo,t6r),e(Eo,mbe),e(mbe,a6r),e(Eo,n6r),e(Eo,wn),e(wn,s6r),e(wn,gbe),e(gbe,l6r),e(wn,i6r),e(wn,hbe),e(hbe,d6r),e(wn,c6r),e(wn,pbe),e(pbe,f6r),e(wn,m6r),e(Eo,g6r),e(Eo,Y),e(Y,B9),e(B9,_be),e(_be,h6r),e(B9,p6r),e(B9,Yz),e(Yz,_6r),e(B9,u6r),e(Y,b6r),e(Y,P9),e(P9,ube),e(ube,F6r),e(P9,v6r),e(P9,Kz),e(Kz,T6r),e(P9,M6r),e(Y,E6r),e(Y,$9),e($9,bbe),e(bbe,C6r),e($9,w6r),e($9,Zz),e(Zz,A6r),e($9,y6r),e(Y,L6r),e(Y,I9),e(I9,Fbe),e(Fbe,x6r),e(I9,k6r),e(I9,eQ),e(eQ,S6r),e(I9,R6r),e(Y,B6r),e(Y,q9),e(q9,vbe),e(vbe,P6r),e(q9,$6r),e(q9,oQ),e(oQ,I6r),e(q9,q6r),e(Y,N6r),e(Y,N9),e(N9,Tbe),e(Tbe,j6r),e(N9,D6r),e(N9,rQ),e(rQ,G6r),e(N9,O6r),e(Y,V6r),e(Y,j9),e(j9,Mbe),e(Mbe,X6r),e(j9,z6r),e(j9,tQ),e(tQ,Q6r),e(j9,W6r),e(Y,H6r),e(Y,D9),e(D9,Ebe),e(Ebe,U6r),e(D9,J6r),e(D9,aQ),e(aQ,Y6r),e(D9,K6r),e(Y,Z6r),e(Y,G9),e(G9,Cbe),e(Cbe,eFr),e(G9,oFr),e(G9,nQ),e(nQ,rFr),e(G9,tFr),e(Y,aFr),e(Y,O9),e(O9,wbe),e(wbe,nFr),e(O9,sFr),e(O9,sQ),e(sQ,lFr),e(O9,iFr),e(Y,dFr),e(Y,V9),e(V9,Abe),e(Abe,cFr),e(V9,fFr),e(V9,lQ),e(lQ,mFr),e(V9,gFr),e(Y,hFr),e(Y,X9),e(X9,ybe),e(ybe,pFr),e(X9,_Fr),e(X9,iQ),e(iQ,uFr),e(X9,bFr),e(Y,FFr),e(Y,z9),e(z9,Lbe),e(Lbe,vFr),e(z9,TFr),e(z9,dQ),e(dQ,MFr),e(z9,EFr),e(Y,CFr),e(Y,Q9),e(Q9,xbe),e(xbe,wFr),e(Q9,AFr),e(Q9,cQ),e(cQ,yFr),e(Q9,LFr),e(Y,xFr),e(Y,W9),e(W9,kbe),e(kbe,kFr),e(W9,SFr),e(W9,fQ),e(fQ,RFr),e(W9,BFr),e(Y,PFr),e(Y,H9),e(H9,Sbe),e(Sbe,$Fr),e(H9,IFr),e(H9,mQ),e(mQ,qFr),e(H9,NFr),e(Y,jFr),e(Y,U9),e(U9,Rbe),e(Rbe,DFr),e(U9,GFr),e(U9,gQ),e(gQ,OFr),e(U9,VFr),e(Y,XFr),e(Y,J9),e(J9,Bbe),e(Bbe,zFr),e(J9,QFr),e(J9,hQ),e(hQ,WFr),e(J9,HFr),e(Y,UFr),e(Y,Y9),e(Y9,Pbe),e(Pbe,JFr),e(Y9,YFr),e(Y9,pQ),e(pQ,KFr),e(Y9,ZFr),e(Y,evr),e(Y,K9),e(K9,$be),e($be,ovr),e(K9,rvr),e(K9,_Q),e(_Q,tvr),e(K9,avr),e(Eo,nvr),e(Eo,Ibe),e(Ibe,svr),e(Eo,lvr),g(y0,Eo,null),b(c,FPe,u),b(c,Xc,u),e(Xc,Z9),e(Z9,qbe),g(L0,qbe,null),e(Xc,ivr),e(Xc,Nbe),e(Nbe,dvr),b(c,vPe,u),b(c,xr,u),g(x0,xr,null),e(xr,cvr),e(xr,zc),e(zc,fvr),e(zc,uQ),e(uQ,mvr),e(zc,gvr),e(zc,bQ),e(bQ,hvr),e(zc,pvr),e(xr,_vr),e(xr,k0),e(k0,uvr),e(k0,jbe),e(jbe,bvr),e(k0,Fvr),e(xr,vvr),e(xr,Et),g(S0,Et,null),e(Et,Tvr),e(Et,Dbe),e(Dbe,Mvr),e(Et,Evr),e(Et,Qc),e(Qc,Cvr),e(Qc,Gbe),e(Gbe,wvr),e(Qc,Avr),e(Qc,FQ),e(FQ,yvr),e(Qc,Lvr),e(Et,xvr),e(Et,Obe),e(Obe,kvr),e(Et,Svr),g(R0,Et,null),e(xr,Rvr),e(xr,Co),g(B0,Co,null),e(Co,Bvr),e(Co,Vbe),e(Vbe,Pvr),e(Co,$vr),e(Co,An),e(An,Ivr),e(An,Xbe),e(Xbe,qvr),e(An,Nvr),e(An,zbe),e(zbe,jvr),e(An,Dvr),e(An,Qbe),e(Qbe,Gvr),e(An,Ovr),e(Co,Vvr),e(Co,K),e(K,eM),e(eM,Wbe),e(Wbe,Xvr),e(eM,zvr),e(eM,vQ),e(vQ,Qvr),e(eM,Wvr),e(K,Hvr),e(K,oM),e(oM,Hbe),e(Hbe,Uvr),e(oM,Jvr),e(oM,TQ),e(TQ,Yvr),e(oM,Kvr),e(K,Zvr),e(K,rM),e(rM,Ube),e(Ube,eTr),e(rM,oTr),e(rM,MQ),e(MQ,rTr),e(rM,tTr),e(K,aTr),e(K,tM),e(tM,Jbe),e(Jbe,nTr),e(tM,sTr),e(tM,EQ),e(EQ,lTr),e(tM,iTr),e(K,dTr),e(K,aM),e(aM,Ybe),e(Ybe,cTr),e(aM,fTr),e(aM,CQ),e(CQ,mTr),e(aM,gTr),e(K,hTr),e(K,nM),e(nM,Kbe),e(Kbe,pTr),e(nM,_Tr),e(nM,wQ),e(wQ,uTr),e(nM,bTr),e(K,FTr),e(K,sM),e(sM,Zbe),e(Zbe,vTr),e(sM,TTr),e(sM,AQ),e(AQ,MTr),e(sM,ETr),e(K,CTr),e(K,lM),e(lM,e6e),e(e6e,wTr),e(lM,ATr),e(lM,yQ),e(yQ,yTr),e(lM,LTr),e(K,xTr),e(K,iM),e(iM,o6e),e(o6e,kTr),e(iM,STr),e(iM,LQ),e(LQ,RTr),e(iM,BTr),e(K,PTr),e(K,dM),e(dM,r6e),e(r6e,$Tr),e(dM,ITr),e(dM,xQ),e(xQ,qTr),e(dM,NTr),e(K,jTr),e(K,cM),e(cM,t6e),e(t6e,DTr),e(cM,GTr),e(cM,kQ),e(kQ,OTr),e(cM,VTr),e(K,XTr),e(K,fM),e(fM,a6e),e(a6e,zTr),e(fM,QTr),e(fM,SQ),e(SQ,WTr),e(fM,HTr),e(K,UTr),e(K,mM),e(mM,n6e),e(n6e,JTr),e(mM,YTr),e(mM,RQ),e(RQ,KTr),e(mM,ZTr),e(K,e7r),e(K,gM),e(gM,s6e),e(s6e,o7r),e(gM,r7r),e(gM,BQ),e(BQ,t7r),e(gM,a7r),e(K,n7r),e(K,hM),e(hM,l6e),e(l6e,s7r),e(hM,l7r),e(hM,PQ),e(PQ,i7r),e(hM,d7r),e(K,c7r),e(K,pM),e(pM,i6e),e(i6e,f7r),e(pM,m7r),e(pM,$Q),e($Q,g7r),e(pM,h7r),e(K,p7r),e(K,_M),e(_M,d6e),e(d6e,_7r),e(_M,u7r),e(_M,IQ),e(IQ,b7r),e(_M,F7r),e(K,v7r),e(K,uM),e(uM,c6e),e(c6e,T7r),e(uM,M7r),e(uM,qQ),e(qQ,E7r),e(uM,C7r),e(K,w7r),e(K,bM),e(bM,f6e),e(f6e,A7r),e(bM,y7r),e(bM,NQ),e(NQ,L7r),e(bM,x7r),e(K,k7r),e(K,FM),e(FM,m6e),e(m6e,S7r),e(FM,R7r),e(FM,jQ),e(jQ,B7r),e(FM,P7r),e(Co,$7r),e(Co,g6e),e(g6e,I7r),e(Co,q7r),g(P0,Co,null),b(c,TPe,u),b(c,Wc,u),e(Wc,vM),e(vM,h6e),g($0,h6e,null),e(Wc,N7r),e(Wc,p6e),e(p6e,j7r),b(c,MPe,u),b(c,kr,u),g(I0,kr,null),e(kr,D7r),e(kr,Hc),e(Hc,G7r),e(Hc,DQ),e(DQ,O7r),e(Hc,V7r),e(Hc,GQ),e(GQ,X7r),e(Hc,z7r),e(kr,Q7r),e(kr,q0),e(q0,W7r),e(q0,_6e),e(_6e,H7r),e(q0,U7r),e(kr,J7r),e(kr,Ct),g(N0,Ct,null),e(Ct,Y7r),e(Ct,u6e),e(u6e,K7r),e(Ct,Z7r),e(Ct,Uc),e(Uc,e9r),e(Uc,b6e),e(b6e,o9r),e(Uc,r9r),e(Uc,OQ),e(OQ,t9r),e(Uc,a9r),e(Ct,n9r),e(Ct,F6e),e(F6e,s9r),e(Ct,l9r),g(j0,Ct,null),e(kr,i9r),e(kr,wo),g(D0,wo,null),e(wo,d9r),e(wo,v6e),e(v6e,c9r),e(wo,f9r),e(wo,yn),e(yn,m9r),e(yn,T6e),e(T6e,g9r),e(yn,h9r),e(yn,M6e),e(M6e,p9r),e(yn,_9r),e(yn,E6e),e(E6e,u9r),e(yn,b9r),e(wo,F9r),e(wo,C6e),e(C6e,TM),e(TM,w6e),e(w6e,v9r),e(TM,T9r),e(TM,VQ),e(VQ,M9r),e(TM,E9r),e(wo,C9r),e(wo,A6e),e(A6e,w9r),e(wo,A9r),g(G0,wo,null),b(c,EPe,u),b(c,Jc,u),e(Jc,MM),e(MM,y6e),g(O0,y6e,null),e(Jc,y9r),e(Jc,L6e),e(L6e,L9r),b(c,CPe,u),b(c,Sr,u),g(V0,Sr,null),e(Sr,x9r),e(Sr,Yc),e(Yc,k9r),e(Yc,XQ),e(XQ,S9r),e(Yc,R9r),e(Yc,zQ),e(zQ,B9r),e(Yc,P9r),e(Sr,$9r),e(Sr,X0),e(X0,I9r),e(X0,x6e),e(x6e,q9r),e(X0,N9r),e(Sr,j9r),e(Sr,wt),g(z0,wt,null),e(wt,D9r),e(wt,k6e),e(k6e,G9r),e(wt,O9r),e(wt,Kc),e(Kc,V9r),e(Kc,S6e),e(S6e,X9r),e(Kc,z9r),e(Kc,QQ),e(QQ,Q9r),e(Kc,W9r),e(wt,H9r),e(wt,R6e),e(R6e,U9r),e(wt,J9r),g(Q0,wt,null),e(Sr,Y9r),e(Sr,Ao),g(W0,Ao,null),e(Ao,K9r),e(Ao,B6e),e(B6e,Z9r),e(Ao,eMr),e(Ao,Ln),e(Ln,oMr),e(Ln,P6e),e(P6e,rMr),e(Ln,tMr),e(Ln,$6e),e($6e,aMr),e(Ln,nMr),e(Ln,I6e),e(I6e,sMr),e(Ln,lMr),e(Ao,iMr),e(Ao,q6e),e(q6e,EM),e(EM,N6e),e(N6e,dMr),e(EM,cMr),e(EM,WQ),e(WQ,fMr),e(EM,mMr),e(Ao,gMr),e(Ao,j6e),e(j6e,hMr),e(Ao,pMr),g(H0,Ao,null),b(c,wPe,u),b(c,Zc,u),e(Zc,CM),e(CM,D6e),g(U0,D6e,null),e(Zc,_Mr),e(Zc,G6e),e(G6e,uMr),b(c,APe,u),b(c,Rr,u),g(J0,Rr,null),e(Rr,bMr),e(Rr,ef),e(ef,FMr),e(ef,HQ),e(HQ,vMr),e(ef,TMr),e(ef,UQ),e(UQ,MMr),e(ef,EMr),e(Rr,CMr),e(Rr,Y0),e(Y0,wMr),e(Y0,O6e),e(O6e,AMr),e(Y0,yMr),e(Rr,LMr),e(Rr,At),g(K0,At,null),e(At,xMr),e(At,V6e),e(V6e,kMr),e(At,SMr),e(At,of),e(of,RMr),e(of,X6e),e(X6e,BMr),e(of,PMr),e(of,JQ),e(JQ,$Mr),e(of,IMr),e(At,qMr),e(At,z6e),e(z6e,NMr),e(At,jMr),g(Z0,At,null),e(Rr,DMr),e(Rr,yo),g(ey,yo,null),e(yo,GMr),e(yo,Q6e),e(Q6e,OMr),e(yo,VMr),e(yo,xn),e(xn,XMr),e(xn,W6e),e(W6e,zMr),e(xn,QMr),e(xn,H6e),e(H6e,WMr),e(xn,HMr),e(xn,U6e),e(U6e,UMr),e(xn,JMr),e(yo,YMr),e(yo,X),e(X,wM),e(wM,J6e),e(J6e,KMr),e(wM,ZMr),e(wM,YQ),e(YQ,e4r),e(wM,o4r),e(X,r4r),e(X,AM),e(AM,Y6e),e(Y6e,t4r),e(AM,a4r),e(AM,KQ),e(KQ,n4r),e(AM,s4r),e(X,l4r),e(X,yM),e(yM,K6e),e(K6e,i4r),e(yM,d4r),e(yM,ZQ),e(ZQ,c4r),e(yM,f4r),e(X,m4r),e(X,LM),e(LM,Z6e),e(Z6e,g4r),e(LM,h4r),e(LM,eW),e(eW,p4r),e(LM,_4r),e(X,u4r),e(X,xM),e(xM,eFe),e(eFe,b4r),e(xM,F4r),e(xM,oW),e(oW,v4r),e(xM,T4r),e(X,M4r),e(X,kM),e(kM,oFe),e(oFe,E4r),e(kM,C4r),e(kM,rW),e(rW,w4r),e(kM,A4r),e(X,y4r),e(X,SM),e(SM,rFe),e(rFe,L4r),e(SM,x4r),e(SM,tW),e(tW,k4r),e(SM,S4r),e(X,R4r),e(X,RM),e(RM,tFe),e(tFe,B4r),e(RM,P4r),e(RM,aW),e(aW,$4r),e(RM,I4r),e(X,q4r),e(X,BM),e(BM,aFe),e(aFe,N4r),e(BM,j4r),e(BM,nW),e(nW,D4r),e(BM,G4r),e(X,O4r),e(X,PM),e(PM,nFe),e(nFe,V4r),e(PM,X4r),e(PM,sW),e(sW,z4r),e(PM,Q4r),e(X,W4r),e(X,$M),e($M,sFe),e(sFe,H4r),e($M,U4r),e($M,lW),e(lW,J4r),e($M,Y4r),e(X,K4r),e(X,IM),e(IM,lFe),e(lFe,Z4r),e(IM,eEr),e(IM,iW),e(iW,oEr),e(IM,rEr),e(X,tEr),e(X,qM),e(qM,iFe),e(iFe,aEr),e(qM,nEr),e(qM,dW),e(dW,sEr),e(qM,lEr),e(X,iEr),e(X,NM),e(NM,dFe),e(dFe,dEr),e(NM,cEr),e(NM,cW),e(cW,fEr),e(NM,mEr),e(X,gEr),e(X,jM),e(jM,cFe),e(cFe,hEr),e(jM,pEr),e(jM,fW),e(fW,_Er),e(jM,uEr),e(X,bEr),e(X,DM),e(DM,fFe),e(fFe,FEr),e(DM,vEr),e(DM,mW),e(mW,TEr),e(DM,MEr),e(X,EEr),e(X,GM),e(GM,mFe),e(mFe,CEr),e(GM,wEr),e(GM,gW),e(gW,AEr),e(GM,yEr),e(X,LEr),e(X,OM),e(OM,gFe),e(gFe,xEr),e(OM,kEr),e(OM,hW),e(hW,SEr),e(OM,REr),e(X,BEr),e(X,VM),e(VM,hFe),e(hFe,PEr),e(VM,$Er),e(VM,pW),e(pW,IEr),e(VM,qEr),e(X,NEr),e(X,XM),e(XM,pFe),e(pFe,jEr),e(XM,DEr),e(XM,_W),e(_W,GEr),e(XM,OEr),e(X,VEr),e(X,zM),e(zM,_Fe),e(_Fe,XEr),e(zM,zEr),e(zM,uW),e(uW,QEr),e(zM,WEr),e(X,HEr),e(X,QM),e(QM,uFe),e(uFe,UEr),e(QM,JEr),e(QM,bW),e(bW,YEr),e(QM,KEr),e(X,ZEr),e(X,WM),e(WM,bFe),e(bFe,e5r),e(WM,o5r),e(WM,FW),e(FW,r5r),e(WM,t5r),e(X,a5r),e(X,HM),e(HM,FFe),e(FFe,n5r),e(HM,s5r),e(HM,vW),e(vW,l5r),e(HM,i5r),e(X,d5r),e(X,UM),e(UM,vFe),e(vFe,c5r),e(UM,f5r),e(UM,TW),e(TW,m5r),e(UM,g5r),e(X,h5r),e(X,JM),e(JM,TFe),e(TFe,p5r),e(JM,_5r),e(JM,MW),e(MW,u5r),e(JM,b5r),e(yo,F5r),e(yo,MFe),e(MFe,v5r),e(yo,T5r),g(oy,yo,null),b(c,yPe,u),b(c,rf,u),e(rf,YM),e(YM,EFe),g(ry,EFe,null),e(rf,M5r),e(rf,CFe),e(CFe,E5r),b(c,LPe,u),b(c,Br,u),g(ty,Br,null),e(Br,C5r),e(Br,tf),e(tf,w5r),e(tf,EW),e(EW,A5r),e(tf,y5r),e(tf,CW),e(CW,L5r),e(tf,x5r),e(Br,k5r),e(Br,ay),e(ay,S5r),e(ay,wFe),e(wFe,R5r),e(ay,B5r),e(Br,P5r),e(Br,yt),g(ny,yt,null),e(yt,$5r),e(yt,AFe),e(AFe,I5r),e(yt,q5r),e(yt,af),e(af,N5r),e(af,yFe),e(yFe,j5r),e(af,D5r),e(af,wW),e(wW,G5r),e(af,O5r),e(yt,V5r),e(yt,LFe),e(LFe,X5r),e(yt,z5r),g(sy,yt,null),e(Br,Q5r),e(Br,Lo),g(ly,Lo,null),e(Lo,W5r),e(Lo,xFe),e(xFe,H5r),e(Lo,U5r),e(Lo,kn),e(kn,J5r),e(kn,kFe),e(kFe,Y5r),e(kn,K5r),e(kn,SFe),e(SFe,Z5r),e(kn,e3r),e(kn,RFe),e(RFe,o3r),e(kn,r3r),e(Lo,t3r),e(Lo,ca),e(ca,KM),e(KM,BFe),e(BFe,a3r),e(KM,n3r),e(KM,AW),e(AW,s3r),e(KM,l3r),e(ca,i3r),e(ca,ZM),e(ZM,PFe),e(PFe,d3r),e(ZM,c3r),e(ZM,yW),e(yW,f3r),e(ZM,m3r),e(ca,g3r),e(ca,e4),e(e4,$Fe),e($Fe,h3r),e(e4,p3r),e(e4,LW),e(LW,_3r),e(e4,u3r),e(ca,b3r),e(ca,o4),e(o4,IFe),e(IFe,F3r),e(o4,v3r),e(o4,xW),e(xW,T3r),e(o4,M3r),e(ca,E3r),e(ca,r4),e(r4,qFe),e(qFe,C3r),e(r4,w3r),e(r4,kW),e(kW,A3r),e(r4,y3r),e(Lo,L3r),e(Lo,NFe),e(NFe,x3r),e(Lo,k3r),g(iy,Lo,null),b(c,xPe,u),b(c,nf,u),e(nf,t4),e(t4,jFe),g(dy,jFe,null),e(nf,S3r),e(nf,DFe),e(DFe,R3r),b(c,kPe,u),b(c,Pr,u),g(cy,Pr,null),e(Pr,B3r),e(Pr,sf),e(sf,P3r),e(sf,SW),e(SW,$3r),e(sf,I3r),e(sf,RW),e(RW,q3r),e(sf,N3r),e(Pr,j3r),e(Pr,fy),e(fy,D3r),e(fy,GFe),e(GFe,G3r),e(fy,O3r),e(Pr,V3r),e(Pr,Lt),g(my,Lt,null),e(Lt,X3r),e(Lt,OFe),e(OFe,z3r),e(Lt,Q3r),e(Lt,lf),e(lf,W3r),e(lf,VFe),e(VFe,H3r),e(lf,U3r),e(lf,BW),e(BW,J3r),e(lf,Y3r),e(Lt,K3r),e(Lt,XFe),e(XFe,Z3r),e(Lt,eCr),g(gy,Lt,null),e(Pr,oCr),e(Pr,xo),g(hy,xo,null),e(xo,rCr),e(xo,zFe),e(zFe,tCr),e(xo,aCr),e(xo,Sn),e(Sn,nCr),e(Sn,QFe),e(QFe,sCr),e(Sn,lCr),e(Sn,WFe),e(WFe,iCr),e(Sn,dCr),e(Sn,HFe),e(HFe,cCr),e(Sn,fCr),e(xo,mCr),e(xo,de),e(de,a4),e(a4,UFe),e(UFe,gCr),e(a4,hCr),e(a4,PW),e(PW,pCr),e(a4,_Cr),e(de,uCr),e(de,n4),e(n4,JFe),e(JFe,bCr),e(n4,FCr),e(n4,$W),e($W,vCr),e(n4,TCr),e(de,MCr),e(de,s4),e(s4,YFe),e(YFe,ECr),e(s4,CCr),e(s4,IW),e(IW,wCr),e(s4,ACr),e(de,yCr),e(de,l4),e(l4,KFe),e(KFe,LCr),e(l4,xCr),e(l4,qW),e(qW,kCr),e(l4,SCr),e(de,RCr),e(de,i4),e(i4,ZFe),e(ZFe,BCr),e(i4,PCr),e(i4,NW),e(NW,$Cr),e(i4,ICr),e(de,qCr),e(de,d4),e(d4,eve),e(eve,NCr),e(d4,jCr),e(d4,jW),e(jW,DCr),e(d4,GCr),e(de,OCr),e(de,c4),e(c4,ove),e(ove,VCr),e(c4,XCr),e(c4,DW),e(DW,zCr),e(c4,QCr),e(de,WCr),e(de,f4),e(f4,rve),e(rve,HCr),e(f4,UCr),e(f4,GW),e(GW,JCr),e(f4,YCr),e(de,KCr),e(de,m4),e(m4,tve),e(tve,ZCr),e(m4,ewr),e(m4,OW),e(OW,owr),e(m4,rwr),e(de,twr),e(de,g4),e(g4,ave),e(ave,awr),e(g4,nwr),e(g4,VW),e(VW,swr),e(g4,lwr),e(de,iwr),e(de,h4),e(h4,nve),e(nve,dwr),e(h4,cwr),e(h4,XW),e(XW,fwr),e(h4,mwr),e(de,gwr),e(de,p4),e(p4,sve),e(sve,hwr),e(p4,pwr),e(p4,zW),e(zW,_wr),e(p4,uwr),e(de,bwr),e(de,_4),e(_4,lve),e(lve,Fwr),e(_4,vwr),e(_4,QW),e(QW,Twr),e(_4,Mwr),e(xo,Ewr),e(xo,ive),e(ive,Cwr),e(xo,wwr),g(py,xo,null),b(c,SPe,u),b(c,df,u),e(df,u4),e(u4,dve),g(_y,dve,null),e(df,Awr),e(df,cve),e(cve,ywr),b(c,RPe,u),b(c,$r,u),g(uy,$r,null),e($r,Lwr),e($r,cf),e(cf,xwr),e(cf,WW),e(WW,kwr),e(cf,Swr),e(cf,HW),e(HW,Rwr),e(cf,Bwr),e($r,Pwr),e($r,by),e(by,$wr),e(by,fve),e(fve,Iwr),e(by,qwr),e($r,Nwr),e($r,xt),g(Fy,xt,null),e(xt,jwr),e(xt,mve),e(mve,Dwr),e(xt,Gwr),e(xt,ff),e(ff,Owr),e(ff,gve),e(gve,Vwr),e(ff,Xwr),e(ff,UW),e(UW,zwr),e(ff,Qwr),e(xt,Wwr),e(xt,hve),e(hve,Hwr),e(xt,Uwr),g(vy,xt,null),e($r,Jwr),e($r,ko),g(Ty,ko,null),e(ko,Ywr),e(ko,pve),e(pve,Kwr),e(ko,Zwr),e(ko,Rn),e(Rn,eAr),e(Rn,_ve),e(_ve,oAr),e(Rn,rAr),e(Rn,uve),e(uve,tAr),e(Rn,aAr),e(Rn,bve),e(bve,nAr),e(Rn,sAr),e(ko,lAr),e(ko,Fe),e(Fe,b4),e(b4,Fve),e(Fve,iAr),e(b4,dAr),e(b4,JW),e(JW,cAr),e(b4,fAr),e(Fe,mAr),e(Fe,F4),e(F4,vve),e(vve,gAr),e(F4,hAr),e(F4,YW),e(YW,pAr),e(F4,_Ar),e(Fe,uAr),e(Fe,v4),e(v4,Tve),e(Tve,bAr),e(v4,FAr),e(v4,KW),e(KW,vAr),e(v4,TAr),e(Fe,MAr),e(Fe,T4),e(T4,Mve),e(Mve,EAr),e(T4,CAr),e(T4,ZW),e(ZW,wAr),e(T4,AAr),e(Fe,yAr),e(Fe,M4),e(M4,Eve),e(Eve,LAr),e(M4,xAr),e(M4,eH),e(eH,kAr),e(M4,SAr),e(Fe,RAr),e(Fe,E4),e(E4,Cve),e(Cve,BAr),e(E4,PAr),e(E4,oH),e(oH,$Ar),e(E4,IAr),e(Fe,qAr),e(Fe,C4),e(C4,wve),e(wve,NAr),e(C4,jAr),e(C4,rH),e(rH,DAr),e(C4,GAr),e(Fe,OAr),e(Fe,w4),e(w4,Ave),e(Ave,VAr),e(w4,XAr),e(w4,tH),e(tH,zAr),e(w4,QAr),e(Fe,WAr),e(Fe,A4),e(A4,yve),e(yve,HAr),e(A4,UAr),e(A4,aH),e(aH,JAr),e(A4,YAr),e(Fe,KAr),e(Fe,y4),e(y4,Lve),e(Lve,ZAr),e(y4,e0r),e(y4,nH),e(nH,o0r),e(y4,r0r),e(ko,t0r),e(ko,xve),e(xve,a0r),e(ko,n0r),g(My,ko,null),b(c,BPe,u),b(c,mf,u),e(mf,L4),e(L4,kve),g(Ey,kve,null),e(mf,s0r),e(mf,Sve),e(Sve,l0r),b(c,PPe,u),b(c,Ir,u),g(Cy,Ir,null),e(Ir,i0r),e(Ir,gf),e(gf,d0r),e(gf,sH),e(sH,c0r),e(gf,f0r),e(gf,lH),e(lH,m0r),e(gf,g0r),e(Ir,h0r),e(Ir,wy),e(wy,p0r),e(wy,Rve),e(Rve,_0r),e(wy,u0r),e(Ir,b0r),e(Ir,kt),g(Ay,kt,null),e(kt,F0r),e(kt,Bve),e(Bve,v0r),e(kt,T0r),e(kt,hf),e(hf,M0r),e(hf,Pve),e(Pve,E0r),e(hf,C0r),e(hf,iH),e(iH,w0r),e(hf,A0r),e(kt,y0r),e(kt,$ve),e($ve,L0r),e(kt,x0r),g(yy,kt,null),e(Ir,k0r),e(Ir,So),g(Ly,So,null),e(So,S0r),e(So,Ive),e(Ive,R0r),e(So,B0r),e(So,Bn),e(Bn,P0r),e(Bn,qve),e(qve,$0r),e(Bn,I0r),e(Bn,Nve),e(Nve,q0r),e(Bn,N0r),e(Bn,jve),e(jve,j0r),e(Bn,D0r),e(So,G0r),e(So,ve),e(ve,x4),e(x4,Dve),e(Dve,O0r),e(x4,V0r),e(x4,dH),e(dH,X0r),e(x4,z0r),e(ve,Q0r),e(ve,k4),e(k4,Gve),e(Gve,W0r),e(k4,H0r),e(k4,cH),e(cH,U0r),e(k4,J0r),e(ve,Y0r),e(ve,S4),e(S4,Ove),e(Ove,K0r),e(S4,Z0r),e(S4,fH),e(fH,eyr),e(S4,oyr),e(ve,ryr),e(ve,R4),e(R4,Vve),e(Vve,tyr),e(R4,ayr),e(R4,mH),e(mH,nyr),e(R4,syr),e(ve,lyr),e(ve,B4),e(B4,Xve),e(Xve,iyr),e(B4,dyr),e(B4,gH),e(gH,cyr),e(B4,fyr),e(ve,myr),e(ve,P4),e(P4,zve),e(zve,gyr),e(P4,hyr),e(P4,hH),e(hH,pyr),e(P4,_yr),e(ve,uyr),e(ve,$4),e($4,Qve),e(Qve,byr),e($4,Fyr),e($4,pH),e(pH,vyr),e($4,Tyr),e(ve,Myr),e(ve,I4),e(I4,Wve),e(Wve,Eyr),e(I4,Cyr),e(I4,_H),e(_H,wyr),e(I4,Ayr),e(ve,yyr),e(ve,q4),e(q4,Hve),e(Hve,Lyr),e(q4,xyr),e(q4,uH),e(uH,kyr),e(q4,Syr),e(ve,Ryr),e(ve,N4),e(N4,Uve),e(Uve,Byr),e(N4,Pyr),e(N4,bH),e(bH,$yr),e(N4,Iyr),e(So,qyr),e(So,Jve),e(Jve,Nyr),e(So,jyr),g(xy,So,null),b(c,$Pe,u),b(c,pf,u),e(pf,j4),e(j4,Yve),g(ky,Yve,null),e(pf,Dyr),e(pf,Kve),e(Kve,Gyr),b(c,IPe,u),b(c,qr,u),g(Sy,qr,null),e(qr,Oyr),e(qr,_f),e(_f,Vyr),e(_f,FH),e(FH,Xyr),e(_f,zyr),e(_f,vH),e(vH,Qyr),e(_f,Wyr),e(qr,Hyr),e(qr,Ry),e(Ry,Uyr),e(Ry,Zve),e(Zve,Jyr),e(Ry,Yyr),e(qr,Kyr),e(qr,St),g(By,St,null),e(St,Zyr),e(St,eTe),e(eTe,eLr),e(St,oLr),e(St,uf),e(uf,rLr),e(uf,oTe),e(oTe,tLr),e(uf,aLr),e(uf,TH),e(TH,nLr),e(uf,sLr),e(St,lLr),e(St,rTe),e(rTe,iLr),e(St,dLr),g(Py,St,null),e(qr,cLr),e(qr,Ro),g($y,Ro,null),e(Ro,fLr),e(Ro,tTe),e(tTe,mLr),e(Ro,gLr),e(Ro,Pn),e(Pn,hLr),e(Pn,aTe),e(aTe,pLr),e(Pn,_Lr),e(Pn,nTe),e(nTe,uLr),e(Pn,bLr),e(Pn,sTe),e(sTe,FLr),e(Pn,vLr),e(Ro,TLr),e(Ro,Te),e(Te,D4),e(D4,lTe),e(lTe,MLr),e(D4,ELr),e(D4,MH),e(MH,CLr),e(D4,wLr),e(Te,ALr),e(Te,G4),e(G4,iTe),e(iTe,yLr),e(G4,LLr),e(G4,EH),e(EH,xLr),e(G4,kLr),e(Te,SLr),e(Te,O4),e(O4,dTe),e(dTe,RLr),e(O4,BLr),e(O4,CH),e(CH,PLr),e(O4,$Lr),e(Te,ILr),e(Te,V4),e(V4,cTe),e(cTe,qLr),e(V4,NLr),e(V4,wH),e(wH,jLr),e(V4,DLr),e(Te,GLr),e(Te,X4),e(X4,fTe),e(fTe,OLr),e(X4,VLr),e(X4,AH),e(AH,XLr),e(X4,zLr),e(Te,QLr),e(Te,z4),e(z4,mTe),e(mTe,WLr),e(z4,HLr),e(z4,yH),e(yH,ULr),e(z4,JLr),e(Te,YLr),e(Te,Q4),e(Q4,gTe),e(gTe,KLr),e(Q4,ZLr),e(Q4,LH),e(LH,e8r),e(Q4,o8r),e(Te,r8r),e(Te,W4),e(W4,hTe),e(hTe,t8r),e(W4,a8r),e(W4,xH),e(xH,n8r),e(W4,s8r),e(Te,l8r),e(Te,H4),e(H4,pTe),e(pTe,i8r),e(H4,d8r),e(H4,kH),e(kH,c8r),e(H4,f8r),e(Te,m8r),e(Te,U4),e(U4,_Te),e(_Te,g8r),e(U4,h8r),e(U4,SH),e(SH,p8r),e(U4,_8r),e(Ro,u8r),e(Ro,uTe),e(uTe,b8r),e(Ro,F8r),g(Iy,Ro,null),b(c,qPe,u),b(c,bf,u),e(bf,J4),e(J4,bTe),g(qy,bTe,null),e(bf,v8r),e(bf,FTe),e(FTe,T8r),b(c,NPe,u),b(c,Nr,u),g(Ny,Nr,null),e(Nr,M8r),e(Nr,Ff),e(Ff,E8r),e(Ff,RH),e(RH,C8r),e(Ff,w8r),e(Ff,BH),e(BH,A8r),e(Ff,y8r),e(Nr,L8r),e(Nr,jy),e(jy,x8r),e(jy,vTe),e(vTe,k8r),e(jy,S8r),e(Nr,R8r),e(Nr,Rt),g(Dy,Rt,null),e(Rt,B8r),e(Rt,TTe),e(TTe,P8r),e(Rt,$8r),e(Rt,vf),e(vf,I8r),e(vf,MTe),e(MTe,q8r),e(vf,N8r),e(vf,PH),e(PH,j8r),e(vf,D8r),e(Rt,G8r),e(Rt,ETe),e(ETe,O8r),e(Rt,V8r),g(Gy,Rt,null),e(Nr,X8r),e(Nr,Bo),g(Oy,Bo,null),e(Bo,z8r),e(Bo,CTe),e(CTe,Q8r),e(Bo,W8r),e(Bo,$n),e($n,H8r),e($n,wTe),e(wTe,U8r),e($n,J8r),e($n,ATe),e(ATe,Y8r),e($n,K8r),e($n,yTe),e(yTe,Z8r),e($n,exr),e(Bo,oxr),e(Bo,Me),e(Me,Y4),e(Y4,LTe),e(LTe,rxr),e(Y4,txr),e(Y4,$H),e($H,axr),e(Y4,nxr),e(Me,sxr),e(Me,K4),e(K4,xTe),e(xTe,lxr),e(K4,ixr),e(K4,IH),e(IH,dxr),e(K4,cxr),e(Me,fxr),e(Me,Z4),e(Z4,kTe),e(kTe,mxr),e(Z4,gxr),e(Z4,qH),e(qH,hxr),e(Z4,pxr),e(Me,_xr),e(Me,eE),e(eE,STe),e(STe,uxr),e(eE,bxr),e(eE,NH),e(NH,Fxr),e(eE,vxr),e(Me,Txr),e(Me,oE),e(oE,RTe),e(RTe,Mxr),e(oE,Exr),e(oE,jH),e(jH,Cxr),e(oE,wxr),e(Me,Axr),e(Me,rE),e(rE,BTe),e(BTe,yxr),e(rE,Lxr),e(rE,DH),e(DH,xxr),e(rE,kxr),e(Me,Sxr),e(Me,tE),e(tE,PTe),e(PTe,Rxr),e(tE,Bxr),e(tE,GH),e(GH,Pxr),e(tE,$xr),e(Me,Ixr),e(Me,aE),e(aE,$Te),e($Te,qxr),e(aE,Nxr),e(aE,OH),e(OH,jxr),e(aE,Dxr),e(Me,Gxr),e(Me,nE),e(nE,ITe),e(ITe,Oxr),e(nE,Vxr),e(nE,VH),e(VH,Xxr),e(nE,zxr),e(Me,Qxr),e(Me,sE),e(sE,qTe),e(qTe,Wxr),e(sE,Hxr),e(sE,XH),e(XH,Uxr),e(sE,Jxr),e(Bo,Yxr),e(Bo,NTe),e(NTe,Kxr),e(Bo,Zxr),g(Vy,Bo,null),b(c,jPe,u),b(c,Tf,u),e(Tf,lE),e(lE,jTe),g(Xy,jTe,null),e(Tf,ekr),e(Tf,DTe),e(DTe,okr),b(c,DPe,u),b(c,jr,u),g(zy,jr,null),e(jr,rkr),e(jr,Mf),e(Mf,tkr),e(Mf,zH),e(zH,akr),e(Mf,nkr),e(Mf,QH),e(QH,skr),e(Mf,lkr),e(jr,ikr),e(jr,Qy),e(Qy,dkr),e(Qy,GTe),e(GTe,ckr),e(Qy,fkr),e(jr,mkr),e(jr,Bt),g(Wy,Bt,null),e(Bt,gkr),e(Bt,OTe),e(OTe,hkr),e(Bt,pkr),e(Bt,Ef),e(Ef,_kr),e(Ef,VTe),e(VTe,ukr),e(Ef,bkr),e(Ef,WH),e(WH,Fkr),e(Ef,vkr),e(Bt,Tkr),e(Bt,XTe),e(XTe,Mkr),e(Bt,Ekr),g(Hy,Bt,null),e(jr,Ckr),e(jr,Po),g(Uy,Po,null),e(Po,wkr),e(Po,zTe),e(zTe,Akr),e(Po,ykr),e(Po,In),e(In,Lkr),e(In,QTe),e(QTe,xkr),e(In,kkr),e(In,WTe),e(WTe,Skr),e(In,Rkr),e(In,HTe),e(HTe,Bkr),e(In,Pkr),e(Po,$kr),e(Po,Pe),e(Pe,iE),e(iE,UTe),e(UTe,Ikr),e(iE,qkr),e(iE,HH),e(HH,Nkr),e(iE,jkr),e(Pe,Dkr),e(Pe,dE),e(dE,JTe),e(JTe,Gkr),e(dE,Okr),e(dE,UH),e(UH,Vkr),e(dE,Xkr),e(Pe,zkr),e(Pe,cE),e(cE,YTe),e(YTe,Qkr),e(cE,Wkr),e(cE,JH),e(JH,Hkr),e(cE,Ukr),e(Pe,Jkr),e(Pe,fE),e(fE,KTe),e(KTe,Ykr),e(fE,Kkr),e(fE,YH),e(YH,Zkr),e(fE,eSr),e(Pe,oSr),e(Pe,mE),e(mE,ZTe),e(ZTe,rSr),e(mE,tSr),e(mE,KH),e(KH,aSr),e(mE,nSr),e(Pe,sSr),e(Pe,gE),e(gE,e7e),e(e7e,lSr),e(gE,iSr),e(gE,ZH),e(ZH,dSr),e(gE,cSr),e(Pe,fSr),e(Pe,hE),e(hE,o7e),e(o7e,mSr),e(hE,gSr),e(hE,eU),e(eU,hSr),e(hE,pSr),e(Pe,_Sr),e(Pe,pE),e(pE,r7e),e(r7e,uSr),e(pE,bSr),e(pE,oU),e(oU,FSr),e(pE,vSr),e(Po,TSr),e(Po,t7e),e(t7e,MSr),e(Po,ESr),g(Jy,Po,null),b(c,GPe,u),b(c,Cf,u),e(Cf,_E),e(_E,a7e),g(Yy,a7e,null),e(Cf,CSr),e(Cf,n7e),e(n7e,wSr),b(c,OPe,u),b(c,Dr,u),g(Ky,Dr,null),e(Dr,ASr),e(Dr,wf),e(wf,ySr),e(wf,rU),e(rU,LSr),e(wf,xSr),e(wf,tU),e(tU,kSr),e(wf,SSr),e(Dr,RSr),e(Dr,Zy),e(Zy,BSr),e(Zy,s7e),e(s7e,PSr),e(Zy,$Sr),e(Dr,ISr),e(Dr,Pt),g(eL,Pt,null),e(Pt,qSr),e(Pt,l7e),e(l7e,NSr),e(Pt,jSr),e(Pt,Af),e(Af,DSr),e(Af,i7e),e(i7e,GSr),e(Af,OSr),e(Af,aU),e(aU,VSr),e(Af,XSr),e(Pt,zSr),e(Pt,d7e),e(d7e,QSr),e(Pt,WSr),g(oL,Pt,null),e(Dr,HSr),e(Dr,$o),g(rL,$o,null),e($o,USr),e($o,c7e),e(c7e,JSr),e($o,YSr),e($o,qn),e(qn,KSr),e(qn,f7e),e(f7e,ZSr),e(qn,eRr),e(qn,m7e),e(m7e,oRr),e(qn,rRr),e(qn,g7e),e(g7e,tRr),e(qn,aRr),e($o,nRr),e($o,$e),e($e,uE),e(uE,h7e),e(h7e,sRr),e(uE,lRr),e(uE,nU),e(nU,iRr),e(uE,dRr),e($e,cRr),e($e,bE),e(bE,p7e),e(p7e,fRr),e(bE,mRr),e(bE,sU),e(sU,gRr),e(bE,hRr),e($e,pRr),e($e,FE),e(FE,_7e),e(_7e,_Rr),e(FE,uRr),e(FE,lU),e(lU,bRr),e(FE,FRr),e($e,vRr),e($e,vE),e(vE,u7e),e(u7e,TRr),e(vE,MRr),e(vE,iU),e(iU,ERr),e(vE,CRr),e($e,wRr),e($e,TE),e(TE,b7e),e(b7e,ARr),e(TE,yRr),e(TE,dU),e(dU,LRr),e(TE,xRr),e($e,kRr),e($e,ME),e(ME,F7e),e(F7e,SRr),e(ME,RRr),e(ME,cU),e(cU,BRr),e(ME,PRr),e($e,$Rr),e($e,EE),e(EE,v7e),e(v7e,IRr),e(EE,qRr),e(EE,fU),e(fU,NRr),e(EE,jRr),e($e,DRr),e($e,CE),e(CE,T7e),e(T7e,GRr),e(CE,ORr),e(CE,mU),e(mU,VRr),e(CE,XRr),e($o,zRr),e($o,M7e),e(M7e,QRr),e($o,WRr),g(tL,$o,null),b(c,VPe,u),b(c,yf,u),e(yf,wE),e(wE,E7e),g(aL,E7e,null),e(yf,HRr),e(yf,C7e),e(C7e,URr),b(c,XPe,u),b(c,Gr,u),g(nL,Gr,null),e(Gr,JRr),e(Gr,Lf),e(Lf,YRr),e(Lf,gU),e(gU,KRr),e(Lf,ZRr),e(Lf,hU),e(hU,eBr),e(Lf,oBr),e(Gr,rBr),e(Gr,sL),e(sL,tBr),e(sL,w7e),e(w7e,aBr),e(sL,nBr),e(Gr,sBr),e(Gr,$t),g(lL,$t,null),e($t,lBr),e($t,A7e),e(A7e,iBr),e($t,dBr),e($t,xf),e(xf,cBr),e(xf,y7e),e(y7e,fBr),e(xf,mBr),e(xf,pU),e(pU,gBr),e(xf,hBr),e($t,pBr),e($t,L7e),e(L7e,_Br),e($t,uBr),g(iL,$t,null),e(Gr,bBr),e(Gr,Io),g(dL,Io,null),e(Io,FBr),e(Io,x7e),e(x7e,vBr),e(Io,TBr),e(Io,Nn),e(Nn,MBr),e(Nn,k7e),e(k7e,EBr),e(Nn,CBr),e(Nn,S7e),e(S7e,wBr),e(Nn,ABr),e(Nn,R7e),e(R7e,yBr),e(Nn,LBr),e(Io,xBr),e(Io,B7e),e(B7e,AE),e(AE,P7e),e(P7e,kBr),e(AE,SBr),e(AE,_U),e(_U,RBr),e(AE,BBr),e(Io,PBr),e(Io,$7e),e($7e,$Br),e(Io,IBr),g(cL,Io,null),b(c,zPe,u),b(c,kf,u),e(kf,yE),e(yE,I7e),g(fL,I7e,null),e(kf,qBr),e(kf,q7e),e(q7e,NBr),b(c,QPe,u),b(c,Or,u),g(mL,Or,null),e(Or,jBr),e(Or,Sf),e(Sf,DBr),e(Sf,uU),e(uU,GBr),e(Sf,OBr),e(Sf,bU),e(bU,VBr),e(Sf,XBr),e(Or,zBr),e(Or,gL),e(gL,QBr),e(gL,N7e),e(N7e,WBr),e(gL,HBr),e(Or,UBr),e(Or,It),g(hL,It,null),e(It,JBr),e(It,j7e),e(j7e,YBr),e(It,KBr),e(It,Rf),e(Rf,ZBr),e(Rf,D7e),e(D7e,ePr),e(Rf,oPr),e(Rf,FU),e(FU,rPr),e(Rf,tPr),e(It,aPr),e(It,G7e),e(G7e,nPr),e(It,sPr),g(pL,It,null),e(Or,lPr),e(Or,qo),g(_L,qo,null),e(qo,iPr),e(qo,O7e),e(O7e,dPr),e(qo,cPr),e(qo,jn),e(jn,fPr),e(jn,V7e),e(V7e,mPr),e(jn,gPr),e(jn,X7e),e(X7e,hPr),e(jn,pPr),e(jn,z7e),e(z7e,_Pr),e(jn,uPr),e(qo,bPr),e(qo,uL),e(uL,LE),e(LE,Q7e),e(Q7e,FPr),e(LE,vPr),e(LE,vU),e(vU,TPr),e(LE,MPr),e(uL,EPr),e(uL,xE),e(xE,W7e),e(W7e,CPr),e(xE,wPr),e(xE,TU),e(TU,APr),e(xE,yPr),e(qo,LPr),e(qo,H7e),e(H7e,xPr),e(qo,kPr),g(bL,qo,null),b(c,WPe,u),b(c,Bf,u),e(Bf,kE),e(kE,U7e),g(FL,U7e,null),e(Bf,SPr),e(Bf,J7e),e(J7e,RPr),b(c,HPe,u),b(c,Vr,u),g(vL,Vr,null),e(Vr,BPr),e(Vr,Pf),e(Pf,PPr),e(Pf,MU),e(MU,$Pr),e(Pf,IPr),e(Pf,EU),e(EU,qPr),e(Pf,NPr),e(Vr,jPr),e(Vr,TL),e(TL,DPr),e(TL,Y7e),e(Y7e,GPr),e(TL,OPr),e(Vr,VPr),e(Vr,qt),g(ML,qt,null),e(qt,XPr),e(qt,K7e),e(K7e,zPr),e(qt,QPr),e(qt,$f),e($f,WPr),e($f,Z7e),e(Z7e,HPr),e($f,UPr),e($f,CU),e(CU,JPr),e($f,YPr),e(qt,KPr),e(qt,e9e),e(e9e,ZPr),e(qt,e$r),g(EL,qt,null),e(Vr,o$r),e(Vr,No),g(CL,No,null),e(No,r$r),e(No,o9e),e(o9e,t$r),e(No,a$r),e(No,Dn),e(Dn,n$r),e(Dn,r9e),e(r9e,s$r),e(Dn,l$r),e(Dn,t9e),e(t9e,i$r),e(Dn,d$r),e(Dn,a9e),e(a9e,c$r),e(Dn,f$r),e(No,m$r),e(No,n9e),e(n9e,SE),e(SE,s9e),e(s9e,g$r),e(SE,h$r),e(SE,wU),e(wU,p$r),e(SE,_$r),e(No,u$r),e(No,l9e),e(l9e,b$r),e(No,F$r),g(wL,No,null),UPe=!0},p(c,[u]){const AL={};u&2&&(AL.$$scope={dirty:u,ctx:c}),Vf.$set(AL);const i9e={};u&2&&(i9e.$$scope={dirty:u,ctx:c}),Nh.$set(i9e);const d9e={};u&2&&(d9e.$$scope={dirty:u,ctx:c}),Uh.$set(d9e)},i(c){UPe||(h(he.$$.fragment,c),h(Da.$$.fragment,c),h($5.$$.fragment,c),h(I5.$$.fragment,c),h(Vf.$$.fragment,c),h(q5.$$.fragment,c),h(N5.$$.fragment,c),h(G5.$$.fragment,c),h(O5.$$.fragment,c),h(V5.$$.fragment,c),h(X5.$$.fragment,c),h(z5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(J5.$$.fragment,c),h(Y5.$$.fragment,c),h(K5.$$.fragment,c),h(o3.$$.fragment,c),h(Nh.$$.fragment,c),h(r3.$$.fragment,c),h(t3.$$.fragment,c),h(a3.$$.fragment,c),h(n3.$$.fragment,c),h(i3.$$.fragment,c),h(Uh.$$.fragment,c),h(d3.$$.fragment,c),h(c3.$$.fragment,c),h(f3.$$.fragment,c),h(m3.$$.fragment,c),h(h3.$$.fragment,c),h(p3.$$.fragment,c),h(_3.$$.fragment,c),h(u3.$$.fragment,c),h(b3.$$.fragment,c),h(F3.$$.fragment,c),h(T3.$$.fragment,c),h(M3.$$.fragment,c),h(E3.$$.fragment,c),h(C3.$$.fragment,c),h(w3.$$.fragment,c),h(A3.$$.fragment,c),h(L3.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(S3.$$.fragment,c),h(R3.$$.fragment,c),h(B3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(q3.$$.fragment,c),h(N3.$$.fragment,c),h(j3.$$.fragment,c),h(D3.$$.fragment,c),h(O3.$$.fragment,c),h(V3.$$.fragment,c),h(X3.$$.fragment,c),h(z3.$$.fragment,c),h(Q3.$$.fragment,c),h(W3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(Z3.$$.fragment,c),h(eC.$$.fragment,c),h(rC.$$.fragment,c),h(tC.$$.fragment,c),h(aC.$$.fragment,c),h(nC.$$.fragment,c),h(sC.$$.fragment,c),h(lC.$$.fragment,c),h(dC.$$.fragment,c),h(cC.$$.fragment,c),h(fC.$$.fragment,c),h(mC.$$.fragment,c),h(gC.$$.fragment,c),h(hC.$$.fragment,c),h(_C.$$.fragment,c),h(uC.$$.fragment,c),h(bC.$$.fragment,c),h(FC.$$.fragment,c),h(vC.$$.fragment,c),h(TC.$$.fragment,c),h(EC.$$.fragment,c),h(CC.$$.fragment,c),h(wC.$$.fragment,c),h(AC.$$.fragment,c),h(yC.$$.fragment,c),h(LC.$$.fragment,c),h(kC.$$.fragment,c),h(SC.$$.fragment,c),h(RC.$$.fragment,c),h(BC.$$.fragment,c),h(PC.$$.fragment,c),h($C.$$.fragment,c),h(qC.$$.fragment,c),h(NC.$$.fragment,c),h(jC.$$.fragment,c),h(DC.$$.fragment,c),h(GC.$$.fragment,c),h(OC.$$.fragment,c),h(XC.$$.fragment,c),h(zC.$$.fragment,c),h(QC.$$.fragment,c),h(WC.$$.fragment,c),h(HC.$$.fragment,c),h(UC.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(ZC.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(bw.$$.fragment,c),h(Fw.$$.fragment,c),h(vw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(F0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(M0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(Fy.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(bL.$$.fragment,c),h(FL.$$.fragment,c),h(vL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),UPe=!0)},o(c){p(he.$$.fragment,c),p(Da.$$.fragment,c),p($5.$$.fragment,c),p(I5.$$.fragment,c),p(Vf.$$.fragment,c),p(q5.$$.fragment,c),p(N5.$$.fragment,c),p(G5.$$.fragment,c),p(O5.$$.fragment,c),p(V5.$$.fragment,c),p(X5.$$.fragment,c),p(z5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(J5.$$.fragment,c),p(Y5.$$.fragment,c),p(K5.$$.fragment,c),p(o3.$$.fragment,c),p(Nh.$$.fragment,c),p(r3.$$.fragment,c),p(t3.$$.fragment,c),p(a3.$$.fragment,c),p(n3.$$.fragment,c),p(i3.$$.fragment,c),p(Uh.$$.fragment,c),p(d3.$$.fragment,c),p(c3.$$.fragment,c),p(f3.$$.fragment,c),p(m3.$$.fragment,c),p(h3.$$.fragment,c),p(p3.$$.fragment,c),p(_3.$$.fragment,c),p(u3.$$.fragment,c),p(b3.$$.fragment,c),p(F3.$$.fragment,c),p(T3.$$.fragment,c),p(M3.$$.fragment,c),p(E3.$$.fragment,c),p(C3.$$.fragment,c),p(w3.$$.fragment,c),p(A3.$$.fragment,c),p(L3.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(S3.$$.fragment,c),p(R3.$$.fragment,c),p(B3.$$.fragment,c),p($3.$$.fragment,c),p(I3.$$.fragment,c),p(q3.$$.fragment,c),p(N3.$$.fragment,c),p(j3.$$.fragment,c),p(D3.$$.fragment,c),p(O3.$$.fragment,c),p(V3.$$.fragment,c),p(X3.$$.fragment,c),p(z3.$$.fragment,c),p(Q3.$$.fragment,c),p(W3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(Z3.$$.fragment,c),p(eC.$$.fragment,c),p(rC.$$.fragment,c),p(tC.$$.fragment,c),p(aC.$$.fragment,c),p(nC.$$.fragment,c),p(sC.$$.fragment,c),p(lC.$$.fragment,c),p(dC.$$.fragment,c),p(cC.$$.fragment,c),p(fC.$$.fragment,c),p(mC.$$.fragment,c),p(gC.$$.fragment,c),p(hC.$$.fragment,c),p(_C.$$.fragment,c),p(uC.$$.fragment,c),p(bC.$$.fragment,c),p(FC.$$.fragment,c),p(vC.$$.fragment,c),p(TC.$$.fragment,c),p(EC.$$.fragment,c),p(CC.$$.fragment,c),p(wC.$$.fragment,c),p(AC.$$.fragment,c),p(yC.$$.fragment,c),p(LC.$$.fragment,c),p(kC.$$.fragment,c),p(SC.$$.fragment,c),p(RC.$$.fragment,c),p(BC.$$.fragment,c),p(PC.$$.fragment,c),p($C.$$.fragment,c),p(qC.$$.fragment,c),p(NC.$$.fragment,c),p(jC.$$.fragment,c),p(DC.$$.fragment,c),p(GC.$$.fragment,c),p(OC.$$.fragment,c),p(XC.$$.fragment,c),p(zC.$$.fragment,c),p(QC.$$.fragment,c),p(WC.$$.fragment,c),p(HC.$$.fragment,c),p(UC.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(ZC.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(bw.$$.fragment,c),p(Fw.$$.fragment,c),p(vw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(FA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(CA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(F0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(M0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(Fy.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(bL.$$.fragment,c),p(FL.$$.fragment,c),p(vL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),UPe=!1},d(c){t(Z),c&&t(io),c&&t(ce),_(he),c&&t(Nf),c&&t(fa),c&&t(ke),c&&t(co),c&&t(Df),_(Da,c),c&&t(fo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(HRe),c&&t(Xi),_($5),c&&t(URe),c&&t(zn),c&&t(JRe),_(I5,c),c&&t(YRe),c&&t(x8),c&&t(KRe),_(Vf,c),c&&t(ZRe),c&&t(zi),_(q5),c&&t(eBe),c&&t(Qo),_(N5),_(G5),_(O5),_(V5),c&&t(oBe),c&&t(Wi),_(X5),c&&t(rBe),c&&t(Wo),_(z5),_(H5),_(U5),_(J5),c&&t(tBe),c&&t(Hi),_(Y5),c&&t(aBe),c&&t(Ho),_(K5),_(o3),_(Nh),_(r3),_(t3),c&&t(nBe),c&&t(Ui),_(a3),c&&t(sBe),c&&t(Uo),_(n3),_(i3),_(Uh),_(d3),_(c3),c&&t(lBe),c&&t(Yi),_(f3),c&&t(iBe),c&&t(Jo),_(m3),_(h3),_(p3),_(_3),_(u3),c&&t(dBe),c&&t(ed),_(b3),c&&t(cBe),c&&t(Yo),_(F3),_(T3),_(M3),_(E3),_(C3),c&&t(fBe),c&&t(td),_(w3),c&&t(mBe),c&&t(Ko),_(A3),_(L3),_(x3),_(k3),_(S3),c&&t(gBe),c&&t(sd),_(R3),c&&t(hBe),c&&t(Zo),_(B3),_($3),_(I3),_(q3),_(N3),c&&t(pBe),c&&t(dd),_(j3),c&&t(_Be),c&&t(er),_(D3),_(O3),_(V3),_(X3),_(z3),c&&t(uBe),c&&t(md),_(Q3),c&&t(bBe),c&&t(or),_(W3),_(U3),_(J3),_(Y3),_(K3),c&&t(FBe),c&&t(pd),_(Z3),c&&t(vBe),c&&t(rr),_(eC),_(rC),_(tC),_(aC),_(nC),c&&t(TBe),c&&t(bd),_(sC),c&&t(MBe),c&&t(tr),_(lC),_(dC),_(cC),_(fC),_(mC),c&&t(EBe),c&&t(Td),_(gC),c&&t(CBe),c&&t(ar),_(hC),_(_C),_(uC),_(bC),_(FC),c&&t(wBe),c&&t(Cd),_(vC),c&&t(ABe),c&&t(nr),_(TC),_(EC),_(CC),_(wC),_(AC),c&&t(yBe),c&&t(yd),_(yC),c&&t(LBe),c&&t(sr),_(LC),_(kC),_(SC),_(RC),_(BC),c&&t(xBe),c&&t(kd),_(PC),c&&t(kBe),c&&t(lr),_($C),_(qC),_(NC),_(jC),_(DC),c&&t(SBe),c&&t(Bd),_(GC),c&&t(RBe),c&&t(ir),_(OC),_(XC),_(zC),_(QC),_(WC),c&&t(BBe),c&&t(Id),_(HC),c&&t(PBe),c&&t(dr),_(UC),_(YC),_(KC),_(ZC),_(ew),c&&t($Be),c&&t(jd),_(ow),c&&t(IBe),c&&t(cr),_(rw),_(aw),_(nw),_(sw),_(lw),c&&t(qBe),c&&t(Od),_(iw),c&&t(NBe),c&&t(fr),_(dw),_(fw),_(mw),_(gw),_(hw),c&&t(jBe),c&&t(zd),_(pw),c&&t(DBe),c&&t(mr),_(_w),_(bw),_(Fw),_(vw),_(Mw),c&&t(GBe),c&&t(Hd),_(Ew),c&&t(OBe),c&&t(gr),_(Cw),_(Aw),_(yw),_(Lw),_(xw),c&&t(VBe),c&&t(Yd),_(kw),c&&t(XBe),c&&t(hr),_(Sw),_(Bw),_(Pw),_($w),_(Iw),c&&t(zBe),c&&t(oc),_(qw),c&&t(QBe),c&&t(pr),_(Nw),_(Dw),_(Gw),_(Ow),_(Vw),c&&t(WBe),c&&t(ac),_(Xw),c&&t(HBe),c&&t(_r),_(zw),_(Ww),_(Hw),_(Uw),_(Jw),c&&t(UBe),c&&t(lc),_(Yw),c&&t(JBe),c&&t(ur),_(Kw),_(eA),_(oA),_(rA),_(tA),c&&t(YBe),c&&t(fc),_(aA),c&&t(KBe),c&&t(br),_(nA),_(lA),_(iA),_(dA),_(cA),c&&t(ZBe),c&&t(hc),_(fA),c&&t(ePe),c&&t(Fr),_(mA),_(hA),_(pA),_(_A),_(uA),c&&t(oPe),c&&t(uc),_(bA),c&&t(rPe),c&&t(vr),_(FA),_(TA),_(MA),_(EA),_(CA),c&&t(tPe),c&&t(vc),_(wA),c&&t(aPe),c&&t(Tr),_(AA),_(LA),_(xA),_(kA),_(SA),c&&t(nPe),c&&t(Ec),_(RA),c&&t(sPe),c&&t(Mr),_(BA),_($A),_(IA),_(qA),_(jA),c&&t(lPe),c&&t(Ac),_(DA),c&&t(iPe),c&&t(Er),_(GA),_(VA),_(XA),_(zA),_(QA),c&&t(dPe),c&&t(xc),_(WA),c&&t(cPe),c&&t(Cr),_(HA),_(JA),_(YA),_(KA),_(ZA),c&&t(fPe),c&&t(Rc),_(e0),c&&t(mPe),c&&t(wr),_(o0),_(t0),_(a0),_(n0),_(s0),c&&t(gPe),c&&t($c),_(l0),c&&t(hPe),c&&t(Ar),_(i0),_(c0),_(f0),_(m0),_(g0),c&&t(pPe),c&&t(Nc),_(h0),c&&t(_Pe),c&&t(yr),_(p0),_(u0),_(b0),_(F0),_(v0),c&&t(uPe),c&&t(Gc),_(T0),c&&t(bPe),c&&t(Lr),_(M0),_(C0),_(w0),_(A0),_(y0),c&&t(FPe),c&&t(Xc),_(L0),c&&t(vPe),c&&t(xr),_(x0),_(S0),_(R0),_(B0),_(P0),c&&t(TPe),c&&t(Wc),_($0),c&&t(MPe),c&&t(kr),_(I0),_(N0),_(j0),_(D0),_(G0),c&&t(EPe),c&&t(Jc),_(O0),c&&t(CPe),c&&t(Sr),_(V0),_(z0),_(Q0),_(W0),_(H0),c&&t(wPe),c&&t(Zc),_(U0),c&&t(APe),c&&t(Rr),_(J0),_(K0),_(Z0),_(ey),_(oy),c&&t(yPe),c&&t(rf),_(ry),c&&t(LPe),c&&t(Br),_(ty),_(ny),_(sy),_(ly),_(iy),c&&t(xPe),c&&t(nf),_(dy),c&&t(kPe),c&&t(Pr),_(cy),_(my),_(gy),_(hy),_(py),c&&t(SPe),c&&t(df),_(_y),c&&t(RPe),c&&t($r),_(uy),_(Fy),_(vy),_(Ty),_(My),c&&t(BPe),c&&t(mf),_(Ey),c&&t(PPe),c&&t(Ir),_(Cy),_(Ay),_(yy),_(Ly),_(xy),c&&t($Pe),c&&t(pf),_(ky),c&&t(IPe),c&&t(qr),_(Sy),_(By),_(Py),_($y),_(Iy),c&&t(qPe),c&&t(bf),_(qy),c&&t(NPe),c&&t(Nr),_(Ny),_(Dy),_(Gy),_(Oy),_(Vy),c&&t(jPe),c&&t(Tf),_(Xy),c&&t(DPe),c&&t(jr),_(zy),_(Wy),_(Hy),_(Uy),_(Jy),c&&t(GPe),c&&t(Cf),_(Yy),c&&t(OPe),c&&t(Dr),_(Ky),_(eL),_(oL),_(rL),_(tL),c&&t(VPe),c&&t(yf),_(aL),c&&t(XPe),c&&t(Gr),_(nL),_(lL),_(iL),_(dL),_(cL),c&&t(zPe),c&&t(kf),_(fL),c&&t(QPe),c&&t(Or),_(mL),_(hL),_(pL),_(_L),_(bL),c&&t(WPe),c&&t(Bf),_(FL),c&&t(HPe),c&&t(Vr),_(vL),_(ML),_(EL),_(CL),_(wL)}}}const ECt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function CCt(qf){return bCt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class kCt extends hCt{constructor(Z){super();pCt(this,Z,CCt,MCt,_Ct,{})}}export{kCt as default,ECt as metadata};
